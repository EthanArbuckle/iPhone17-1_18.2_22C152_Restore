void sub_1B20DD444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::~SqueezedFstImpl(void *a1)
{
  *a1 = &unk_1F0A3C368;
  uint64_t v2 = a1[8];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[10];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[12];
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = a1[18];
  a1[18] = 0;
  if (v5) {
    MEMORY[0x1B3EA8670](v5, 0x1000C40504FFAC1);
  }
  return fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl((uint64_t)a1);
}

void *fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(void *a1)
{
  *a1 = &unk_1F0A43A90;
  uint64_t v2 = (_DWORD *)a1[1];
  if (v2)
  {
    int v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

uint64_t fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::NumInputEpsilons(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 112) - 1 == a2)
  {
    uint64_t v5 = *(void *)(a1 + 120);
    uint64_t v2 = *(void *)(a1 + 72);
    int v10 = *(_DWORD *)(v2 + 4 * a2);
    if (v10 <= 0) {
      int v10 = *(_DWORD *)(*(void *)(a1 + 104) + 8 * -v10 + 4);
    }
    LODWORD(v5) = v5 - v10 + 1;
    if (!v5) {
      return 0;
    }
  }
  else
  {
    uint64_t v2 = *(void *)(a1 + 72);
    int v3 = *(_DWORD *)(v2 + 4 * (a2 + 1));
    if (v3 <= 0) {
      int v3 = *(_DWORD *)(*(void *)(a1 + 104) + 8 * -v3 + 4);
    }
    int v4 = *(_DWORD *)(v2 + 4 * a2);
    if (v4 <= 0) {
      int v4 = *(_DWORD *)(*(void *)(a1 + 104) + 8 * -v4 + 4);
    }
    LODWORD(v5) = v3 - v4;
    if (!v5) {
      return 0;
    }
  }
  int v6 = *(_DWORD *)(v2 + 4 * a2);
  if (v6 <= 0) {
    int v6 = *(_DWORD *)(*(void *)(a1 + 104) + 8 * -v6 + 4);
  }
  if ((int)v5 < 1) {
    return 0;
  }
  uint64_t v7 = 0;
  v8 = (uint64_t *)(*(void *)(a1 + 88) + 12 * (v6 - 1));
  uint64_t v5 = v5;
  do
  {
    uint64_t v9 = *v8;
    v8 = (uint64_t *)((char *)v8 + 12);
    if (((0xFFFFFFFFLL << (*(void *)(*(void *)(a1 + 144) + 8)
                          + ((unint64_t)(63 - *(void *)(*(void *)(a1 + 144) + 8)) >> 1)
                          + 1)) & v9) == 0)
      ++v7;
    --v5;
  }
  while (v5);
  return v7;
}

uint64_t fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::NumOutputEpsilons(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 112) - 1 == a2)
  {
    uint64_t v5 = *(void *)(a1 + 120);
    uint64_t v2 = *(void *)(a1 + 72);
    int v13 = *(_DWORD *)(v2 + 4 * a2);
    if (v13 <= 0) {
      int v13 = *(_DWORD *)(*(void *)(a1 + 104) + 8 * -v13 + 4);
    }
    LODWORD(v5) = v5 - v13 + 1;
    if (!v5) {
      return 0;
    }
  }
  else
  {
    uint64_t v2 = *(void *)(a1 + 72);
    int v3 = *(_DWORD *)(v2 + 4 * (a2 + 1));
    if (v3 <= 0) {
      int v3 = *(_DWORD *)(*(void *)(a1 + 104) + 8 * -v3 + 4);
    }
    int v4 = *(_DWORD *)(v2 + 4 * a2);
    if (v4 <= 0) {
      int v4 = *(_DWORD *)(*(void *)(a1 + 104) + 8 * -v4 + 4);
    }
    LODWORD(v5) = v3 - v4;
    if (!v5) {
      return 0;
    }
  }
  int v6 = *(_DWORD *)(v2 + 4 * a2);
  if (v6 <= 0) {
    int v6 = *(_DWORD *)(*(void *)(a1 + 104) + 8 * -v6 + 4);
  }
  if ((int)v5 < 1) {
    return 0;
  }
  uint64_t v7 = 0;
  v8 = (unint64_t *)(*(void *)(a1 + 88) + 12 * (v6 - 1));
  uint64_t v9 = *(void *)(*(void *)(a1 + 144) + 8);
  int v10 = ~(-1 << ((unint64_t)(63 - v9) >> 1));
  char v11 = v9 + 1;
  uint64_t v5 = v5;
  do
  {
    unint64_t v12 = *v8;
    v8 = (unint64_t *)((char *)v8 + 12);
    if ((v10 & (v12 >> v11)) == 0) {
      ++v7;
    }
    --v5;
  }
  while (v5);
  return v7;
}

void fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::WriteFst<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>(uint64_t a1)
{
  uint64_t v3 = 0;
  int v2 = 0;
  uint64_t v1 = 0;
  fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::ComputeReductionInformation<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a1, &v3, &v2, &v1);
}

void sub_1B20DE1CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22) {
    operator delete(a22);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  fst::FstHeader::~FstHeader(&a32);
  uint64_t v34 = *(void *)(v32 - 136);
  *(void *)(v32 - 136) = 0;
  if (v34) {
    MEMORY[0x1B3EA8670](v34, 0x1000C40504FFAC1);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::SqueezedQuantizationOptions<false,true>::Write()
{
  return 1;
}

void fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::InitArcIterator()
{
}

void sub_1B20DE448(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C402D792D55);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::ArcIterator(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)a1 = &unk_1F0A37628;
  *(void *)(a1 + 8) = a2;
  uint64_t v4 = *(void *)(a2 + 72);
  int v5 = *(_DWORD *)(v4 + 4 * a3);
  int v6 = v5;
  if (v5 <= 0) {
    int v6 = *(_DWORD *)(*(void *)(a2 + 104) + 8 * -v5 + 4);
  }
  *(void *)(a1 + 16) = *(void *)(a2 + 88) + 12 * (v6 - 1);
  if (*(_DWORD *)(a2 + 112) - 1 == a3)
  {
    if (v5 <= 0) {
      int v5 = *(_DWORD *)(*(void *)(a2 + 104) + 8 * -v5 + 4);
    }
    uint64_t v8 = *(void *)(a2 + 120) - v5 + 1;
  }
  else
  {
    int v7 = *(_DWORD *)(v4 + 4 * (a3 + 1));
    if (v7 <= 0) {
      int v7 = *(_DWORD *)(*(void *)(a2 + 104) + 8 * -v7 + 4);
    }
    if (v5 <= 0) {
      int v5 = *(_DWORD *)(*(void *)(a2 + 104) + 8 * -v5 + 4);
    }
    uint64_t v8 = v7 - v5;
  }
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 15;
  fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::SetFullArc(a1);
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;

  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = &unk_1F0A37628;
  *(void *)(a1 + 8) = v4;
  int v5 = *(void *)(v4 + 72);
  int v6 = *(_DWORD *)(v5 + 4 * a3);
  int v7 = v6;
  if (v6 <= 0) {
    int v7 = *(_DWORD *)(*(void *)(v4 + 104) + 8 * -v6 + 4);
  }
  *(void *)(a1 + 16) = *(void *)(v4 + 88) + 12 * (v7 - 1);
  if (*(_DWORD *)(v4 + 112) - 1 == a3)
  {
    if (v6 <= 0) {
      int v6 = *(_DWORD *)(*(void *)(v4 + 104) + 8 * -v6 + 4);
    }
    uint64_t v9 = *(void *)(v4 + 120) - v6 + 1;
  }
  else
  {
    uint64_t v8 = *(_DWORD *)(v5 + 4 * (a3 + 1));
    if (v8 <= 0) {
      uint64_t v8 = *(_DWORD *)(*(void *)(v4 + 104) + 8 * -v8 + 4);
    }
    if (v6 <= 0) {
      int v6 = *(_DWORD *)(*(void *)(v4 + 104) + 8 * -v6 + 4);
    }
    uint64_t v9 = v8 - v6;
  }
  *(void *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 15;
  fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::SetFullArc(a1);
  return a1;
}

float fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::SetFullArc(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 48);
  if (v1 < *(void *)(a1 + 40))
  {
    uint64_t v2 = *(void *)(a1 + 16);
    uint64_t v3 = (unint64_t *)(v2 + 12 * v1);
    uint64_t v4 = *(void *)(*(void *)(a1 + 8) + 144);
    uint64_t v5 = *(void *)(v4 + 8);
    if ((*(_DWORD *)(a1 + 56) & 0xF) == 2)
    {
      *(_DWORD *)(a1 + 28) = (*v3 >> (v5 + 1)) & ~(-1 << ((unint64_t)(63 - v5) >> 1));
    }
    else if ((*(_DWORD *)(a1 + 56) & 0xF) == 1)
    {
      *(_DWORD *)(a1 + 24) = *v3 >> (v5 + ((unint64_t)(63 - v5) >> 1) + 1);
    }
    else
    {
      unint64_t v6 = 63 - v5;
      unint64_t v7 = (unint64_t)(63 - v5) >> 1;
      unint64_t v8 = *v3;
      char v9 = v5 + 1;
      unint64_t v10 = v8 >> (v9 + (v6 >> 1));
      uint64_t v11 = (v8 >> v9) & ~(-1 << v7);
      float v12 = (float)((v8 & *(void *)(v4 + 16)) >> 1);
      if (v8) {
        float v12 = -v12;
      }
      float result = *(float *)(v4 + 4) * v12;
      unint64_t v14 = LODWORD(result) | ((unint64_t)*(unsigned int *)(v2 + 12 * v1 + 8) << 32);
      *(void *)(a1 + 24) = v10 | (unint64_t)(v11 << 32);
      *(void *)(a1 + 32) = v14;
    }
  }
  return result;
}

void fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::~ArcIterator()
{
}

uint64_t fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::Reinit(void *a1, int a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = *(void *)(v2 + 72);
  int v4 = *(_DWORD *)(v3 + 4 * a2);
  int v5 = v4;
  if (v4 <= 0) {
    int v5 = *(_DWORD *)(*(void *)(v2 + 104) + 8 * -v4 + 4);
  }
  a1[2] = *(void *)(v2 + 88) + 12 * (v5 - 1);
  if (*(_DWORD *)(v2 + 112) - 1 == a2)
  {
    if (v4 <= 0) {
      int v4 = *(_DWORD *)(*(void *)(v2 + 104) + 8 * -v4 + 4);
    }
    uint64_t v7 = *(void *)(v2 + 120) - v4 + 1;
  }
  else
  {
    int v6 = *(_DWORD *)(v3 + 4 * (a2 + 1));
    if (v6 <= 0) {
      int v6 = *(_DWORD *)(*(void *)(v2 + 104) + 8 * -v6 + 4);
    }
    if (v4 <= 0) {
      int v4 = *(_DWORD *)(*(void *)(v2 + 104) + 8 * -v4 + 4);
    }
    uint64_t v7 = v6 - v4;
  }
  a1[5] = v7;
  a1[6] = 0;
  fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::SetFullArc((uint64_t)a1);
  return 1;
}

BOOL fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::Done_(uint64_t a1)
{
  return *(void *)(a1 + 48) >= *(void *)(a1 + 40);
}

uint64_t fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::Value_(uint64_t a1)
{
  return a1 + 24;
}

float fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::Next_(uint64_t a1)
{
  return fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::SetFullArc(a1);
}

uint64_t fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::Position_(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

float fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::Reset_(uint64_t a1)
{
  *(void *)(a1 + 48) = 0;
  return fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::SetFullArc(a1);
}

float fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::Seek_(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 48) = a2;
  return fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::SetFullArc(a1);
}

uint64_t fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::Flags_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 56);
}

float fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::SetFlags_(uint64_t a1, char a2, int a3)
{
  int v3 = *(_DWORD *)(a1 + 56);
  int v4 = v3 & ~a3 | a2 & 0xF;
  *(_DWORD *)(a1 + 56) = v4;
  if (v3 != 15 && v3 != v4) {
    return fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::SetFullArc(a1);
  }
  return result;
}

void std::allocate_shared[abi:ne180100]<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>,std::allocator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,void>()
{
  v0 = operator new(0x28uLL);
  std::__shared_ptr_emplace<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::__shared_ptr_emplace[abi:ne180100]<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::allocator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>,0>(v0);
}

void sub_1B20DE80C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::__shared_ptr_emplace[abi:ne180100]<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::allocator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5E1B8;
  fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::SqueezedFst();
}

void sub_1B20DE868(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E1B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E1B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::SqueezedFst()
{
}

void sub_1B20DE988(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40CC721279);
  _Unwind_Resume(a1);
}

void fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::~SqueezedFst(void *a1)
{
  fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Start(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 8) + 136);
}

float fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Final(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = *(_DWORD *)(*(void *)(v2 + 72) + 4 * a2);
  if (v3 <= 0) {
    return *(float *)(*(void *)(v2 + 104) + 8 * -v3);
  }
  else {
    return INFINITY;
  }
}

uint64_t fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumArcs(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v2 + 112) - 1 == a2)
  {
    int v7 = *(_DWORD *)(*(void *)(v2 + 72) + 4 * a2);
    if (v7 <= 0) {
      int v7 = *(_DWORD *)(*(void *)(v2 + 104) + 8 * -v7 + 4);
    }
    return *(void *)(v2 + 120) - v7 + 1;
  }
  else
  {
    uint64_t v3 = *(void *)(v2 + 72);
    int v4 = *(_DWORD *)(v3 + 4 * (a2 + 1));
    if (v4 <= 0) {
      int v4 = *(_DWORD *)(*(void *)(v2 + 104) + 8 * -v4 + 4);
    }
    int v5 = *(_DWORD *)(v3 + 4 * a2);
    if (v5 <= 0) {
      int v5 = *(_DWORD *)(*(void *)(v2 + 104) + 8 * -v5 + 4);
    }
    return v4 - v5;
  }
}

uint64_t fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::NumInputEpsilons(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::NumInputEpsilons(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = fst::TestProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    int v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return v7();
  }
}

uint64_t fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Type(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

char *fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::GetArcs(uint64_t a1, int a2, void **a3, int a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v6 + 112) - 1 == a2)
  {
    uint64_t v7 = *(void *)(v6 + 72);
    int v26 = *(_DWORD *)(v7 + 4 * a2);
    if (v26 <= 0) {
      int v26 = *(_DWORD *)(*(void *)(v6 + 104) + 8 * -v26 + 4);
    }
    uint64_t v10 = *(void *)(v6 + 120) - v26 + 1;
  }
  else
  {
    uint64_t v7 = *(void *)(v6 + 72);
    int v8 = *(_DWORD *)(v7 + 4 * (a2 + 1));
    if (v8 <= 0) {
      int v8 = *(_DWORD *)(*(void *)(v6 + 104) + 8 * -v8 + 4);
    }
    int v9 = *(_DWORD *)(v7 + 4 * a2);
    if (v9 <= 0) {
      int v9 = *(_DWORD *)(*(void *)(v6 + 104) + 8 * -v9 + 4);
    }
    uint64_t v10 = v8 - v9;
  }
  uint64_t v11 = 2;
  if (!a4) {
    uint64_t v11 = 0;
  }
  unint64_t v12 = v10 + v11;
  if ((unint64_t)a3[1] < v10 + v11)
  {
    if (*a3) {
      free(*a3);
    }
    uint64_t v27 = 0x4000;
    if (v12 > 0x4000) {
      uint64_t v27 = v12;
    }
    a3[1] = (void *)v27;
    float result = (char *)malloc_type_malloc(16 * v27, 0x1000040451B5BE8uLL);
    *a3 = result;
    a3[2] = result;
    uint64_t v7 = *(void *)(v6 + 72);
    int v13 = result;
  }
  else
  {
    int v13 = (char *)a3[2];
    float result = (char *)*a3;
  }
  a3[3] = &v13[16 * v12];
  int v15 = *(_DWORD *)(v7 + 4 * a2);
  if (v15 <= 0) {
    int v15 = *(_DWORD *)(*(void *)(v6 + 104) + 8 * -v15 + 4);
  }
  if (v10)
  {
    uint64_t v16 = 8 * (v15 - 1);
    uint64_t v17 = *(void *)(v6 + 144);
    float v18 = *(float *)(v17 + 4);
    unsigned int v19 = *(_DWORD *)(v17 + 12);
    int v20 = *(_DWORD *)(v17 + 8) + 1;
    v21 = (unint64_t *)(result + 8);
    v22 = (unsigned int *)(v16 + *(void *)(v6 + 88) + 4);
    do
    {
      unsigned int v23 = *(v22 - 1);
      float v24 = (float)((v23 & v19) >> 1);
      if (v23) {
        float v24 = -v24;
      }
      unsigned int v25 = *v22;
      v22 += 2;
      *(v21 - 1) = (v23 >> v20) | ((unint64_t)(v23 >> v20) << 32);
      unint64_t *v21 = COERCE_UNSIGNED_INT(v18 * v24) | ((unint64_t)v25 << 32);
      v21 += 2;
      --v10;
    }
    while (v10);
  }
  return result;
}

void fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::Copy()
{
}

uint64_t fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::InitStateIterator(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(v2 + 112);
  return result;
}

void fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::InitArcIterator()
{
}

BOOL fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::IsMemoryMapped(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 8);
  return *(void *)(v1[8] + 16) && *(void *)(v1[10] + 16) && *(void *)(v1[12] + 16) != 0;
}

uint64_t fst::ImplToExpandedFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumStates(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 8) + 112);
}

void fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::SqueezedFstImpl(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A3FD50;
  *(void *)(a1 + 8) = 0;
  int v4 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)a1 = &unk_1F0A3C3D8;
  *(_DWORD *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 144) = 0;
  fst::SqueezedFstConsts<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::TypeString(&__p);
  std::string::operator=(v4, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetInputSymbols(a1, v5);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 120))(a2);
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetOutputSymbols(a1, v6);
  fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::ComputeReductionInformation<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a2, (void *)(a1 + 120), (int *)(a1 + 112), (void *)(a1 + 128));
}

void sub_1B20DF438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v19 = *(void *)(v17 + 144);
  *(void *)(v17 + 144) = 0;
  if (v19) {
    MEMORY[0x1B3EA8670](v19, 0x1000C40451B5BE8);
  }
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(v17);
  _Unwind_Resume(a1);
}

void fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::ComputeReductionInformation<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, void *a2, int *a3, void *a4)
{
  *a2 = 0;
  *a3 = 0;
  *a4 = 0;
  unsigned int v28 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v26);
  signed int v8 = 0;
  float v9 = -INFINITY;
  float v10 = INFINITY;
  while (v26)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)v26 + 16))(v26))
    {
      if (v26) {
        (*(void (**)(void))(*(void *)v26 + 8))();
      }
LABEL_53:
      if ((unint64_t)(8 * (*a4 + *a2) + 4 * *a3) >> 31)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
        uint64_t v19 = fst::LogMessage::LogMessage((fst *)&v26, (uint64_t)&__p);
        int v20 = (void *)fst::cerr(v19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Too much data for squeezed file format: ", 40);
        std::ostream::operator<<();
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v26);
        if (SHIBYTE(v23) < 0) {
          operator delete(__p);
        }
      }
      fst::SqueezedQuantizationOptions<true,true>::EstimateFromLabelsAndWeights<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(v8);
    }
    if (!v26) {
      goto LABEL_7;
    }
    uint64_t v11 = (*(uint64_t (**)(void))(*(void *)v26 + 24))();
LABEL_8:
    float v12 = (*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, v11);
    if (v12 > INFINITY || (float)(v12 + 0.00097656) < INFINITY) {
      ++*a4;
    }
    if (v11 == -1) {
      goto LABEL_48;
    }
    ++*a3;
    unint64_t v25 = 0;
    (*(void (**)(uint64_t, uint64_t, void **))(*(void *)a1 + 136))(a1, v11, &__p);
    uint64_t v14 = 0;
    while (1)
    {
      if (!__p)
      {
        if (v25 >= v23) {
          goto LABEL_45;
        }
        ++v14;
LABEL_34:
        if (*(float *)(v22 + 16 * v25 + 8) >= v9) {
          float v9 = *(float *)(v22 + 16 * v25 + 8);
        }
LABEL_36:
        if (v10 >= *(float *)(v22 + 16 * v25 + 8)) {
          float v10 = *(float *)(v22 + 16 * v25 + 8);
        }
LABEL_38:
        if (*(_DWORD *)(v22 + 16 * v25) > v8) {
          signed int v8 = *(_DWORD *)(v22 + 16 * v25);
        }
        goto LABEL_40;
      }
      if ((*(unsigned int (**)(void *))(*(void *)__p + 24))(__p)) {
        break;
      }
      ++v14;
      if (!__p) {
        goto LABEL_34;
      }
      uint64_t v15 = (*(uint64_t (**)(void))(*(void *)__p + 32))();
      if (*(float *)(v15 + 8) >= v9) {
        float v9 = *(float *)(v15 + 8);
      }
      if (!__p) {
        goto LABEL_36;
      }
      uint64_t v16 = (*(uint64_t (**)(void))(*(void *)__p + 32))();
      if (v10 >= *(float *)(v16 + 8)) {
        float v10 = *(float *)(v16 + 8);
      }
      if (!__p) {
        goto LABEL_38;
      }
      signed int v17 = *(_DWORD *)(*(uint64_t (**)(void))(*(void *)__p + 32))();
      if (v17 > v8) {
        signed int v8 = v17;
      }
      if (__p)
      {
        signed int v18 = *(_DWORD *)((*(uint64_t (**)(void))(*(void *)__p + 32))() + 4);
        if (v18 > v8) {
          signed int v8 = v18;
        }
        if (!__p) {
          goto LABEL_42;
        }
        (*(void (**)(void))(*(void *)__p + 40))();
      }
      else
      {
LABEL_40:
        if (*(_DWORD *)(v22 + 16 * v25 + 4) > v8) {
          signed int v8 = *(_DWORD *)(v22 + 16 * v25 + 4);
        }
LABEL_42:
        ++v25;
      }
    }
    if (__p)
    {
      (*(void (**)(void))(*(void *)__p + 8))();
    }
    else
    {
LABEL_45:
      if (v24) {
        --*v24;
      }
    }
    *a2 += v14;
LABEL_48:
    if (v26) {
      (*(void (**)(uint64_t))(*(void *)v26 + 32))(v26);
    }
    else {
      ++v28;
    }
  }
  if ((int)v28 >= v27) {
    goto LABEL_53;
  }
LABEL_7:
  uint64_t v11 = v28;
  goto LABEL_8;
}

void sub_1B20DFA08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::~SqueezedFstImpl(void *a1)
{
  fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::~SqueezedFstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::HasSequentialStates()
{
  return 1;
}

std::string *fst::SqueezedFstConsts<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::TypeString@<X0>(std::string *a1@<X8>)
{
  return std::string::append(a1, "_acceptor");
}

void sub_1B20DFB58(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void fst::SqueezedQuantizationOptions<true,true>::EstimateFromLabelsAndWeights<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(signed int a1)
{
  unsigned int v1 = __clz(a1);
  if (a1 <= 0) {
    unsigned int v2 = 31;
  }
  else {
    unsigned int v2 = v1;
  }
  if (v2 <= 4)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    uint64_t v3 = fst::LogMessage::LogMessage((fst *)&v7, (uint64_t)__p);
    int v4 = (void *)fst::cerr(v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Not enough bits for quantization: ", 34);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v7);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
  }
  operator new();
}

void sub_1B20DFC94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::~SqueezedFstImpl(void *a1)
{
  *a1 = &unk_1F0A3C3D8;
  uint64_t v2 = a1[8];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[10];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[12];
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = a1[18];
  a1[18] = 0;
  if (v5) {
    MEMORY[0x1B3EA8670](v5, 0x1000C40451B5BE8);
  }
  return fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl((uint64_t)a1);
}

void *fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(void *a1)
{
  *a1 = &unk_1F0A43C00;
  uint64_t v2 = (_DWORD *)a1[1];
  if (v2)
  {
    int v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

uint64_t fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::NumInputEpsilons(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 112) - 1 == a2)
  {
    uint64_t v5 = *(void *)(a1 + 120);
    uint64_t v2 = *(void *)(a1 + 72);
    int v10 = *(_DWORD *)(v2 + 4 * a2);
    if (v10 <= 0) {
      int v10 = *(_DWORD *)(*(void *)(a1 + 104) + 8 * -v10 + 4);
    }
    LODWORD(v5) = v5 - v10 + 1;
    if (!v5) {
      return 0;
    }
  }
  else
  {
    uint64_t v2 = *(void *)(a1 + 72);
    int v3 = *(_DWORD *)(v2 + 4 * (a2 + 1));
    if (v3 <= 0) {
      int v3 = *(_DWORD *)(*(void *)(a1 + 104) + 8 * -v3 + 4);
    }
    int v4 = *(_DWORD *)(v2 + 4 * a2);
    if (v4 <= 0) {
      int v4 = *(_DWORD *)(*(void *)(a1 + 104) + 8 * -v4 + 4);
    }
    LODWORD(v5) = v3 - v4;
    if (!v5) {
      return 0;
    }
  }
  int v6 = *(_DWORD *)(v2 + 4 * a2);
  if (v6 <= 0) {
    int v6 = *(_DWORD *)(*(void *)(a1 + 104) + 8 * -v6 + 4);
  }
  if ((int)v5 < 1) {
    return 0;
  }
  uint64_t v7 = 0;
  signed int v8 = (unsigned int *)(*(void *)(a1 + 88) + 8 * (v6 - 1));
  uint64_t v5 = v5;
  do
  {
    unsigned int v9 = *v8;
    v8 += 2;
    if (!(v9 >> (*(unsigned char *)(*(void *)(a1 + 144) + 8) + 1))) {
      ++v7;
    }
    --v5;
  }
  while (v5);
  return v7;
}

void fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::WriteFst<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>(uint64_t a1)
{
  uint64_t v3 = 0;
  int v2 = 0;
  uint64_t v1 = 0;
  fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::ComputeReductionInformation<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a1, &v3, &v2, &v1);
}

void sub_1B20E08E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22) {
    operator delete(a22);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  fst::FstHeader::~FstHeader(&a32);
  uint64_t v34 = *(void *)(v32 - 136);
  *(void *)(v32 - 136) = 0;
  if (v34) {
    MEMORY[0x1B3EA8670](v34, 0x1000C40451B5BE8);
  }
  _Unwind_Resume(a1);
}

void fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::InitArcIterator()
{
}

void sub_1B20E0ACC(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C402D792D55);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::ArcIterator(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)a1 = &unk_1F0A376F8;
  *(void *)(a1 + 8) = a2;
  uint64_t v4 = *(void *)(a2 + 72);
  int v5 = *(_DWORD *)(v4 + 4 * a3);
  int v6 = v5;
  if (v5 <= 0) {
    int v6 = *(_DWORD *)(*(void *)(a2 + 104) + 8 * -v5 + 4);
  }
  *(void *)(a1 + 16) = *(void *)(a2 + 88) + 8 * (v6 - 1);
  if (*(_DWORD *)(a2 + 112) - 1 == a3)
  {
    if (v5 <= 0) {
      int v5 = *(_DWORD *)(*(void *)(a2 + 104) + 8 * -v5 + 4);
    }
    uint64_t v8 = *(void *)(a2 + 120) - v5 + 1;
  }
  else
  {
    int v7 = *(_DWORD *)(v4 + 4 * (a3 + 1));
    if (v7 <= 0) {
      int v7 = *(_DWORD *)(*(void *)(a2 + 104) + 8 * -v7 + 4);
    }
    if (v5 <= 0) {
      int v5 = *(_DWORD *)(*(void *)(a2 + 104) + 8 * -v5 + 4);
    }
    uint64_t v8 = v7 - v5;
  }
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 15;
  fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::SetFullArc(a1);
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;

  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = &unk_1F0A376F8;
  *(void *)(a1 + 8) = v4;
  int v5 = *(void *)(v4 + 72);
  int v6 = *(_DWORD *)(v5 + 4 * a3);
  int v7 = v6;
  if (v6 <= 0) {
    int v7 = *(_DWORD *)(*(void *)(v4 + 104) + 8 * -v6 + 4);
  }
  *(void *)(a1 + 16) = *(void *)(v4 + 88) + 8 * (v7 - 1);
  if (*(_DWORD *)(v4 + 112) - 1 == a3)
  {
    if (v6 <= 0) {
      int v6 = *(_DWORD *)(*(void *)(v4 + 104) + 8 * -v6 + 4);
    }
    unsigned int v9 = *(void *)(v4 + 120) - v6 + 1;
  }
  else
  {
    uint64_t v8 = *(_DWORD *)(v5 + 4 * (a3 + 1));
    if (v8 <= 0) {
      uint64_t v8 = *(_DWORD *)(*(void *)(v4 + 104) + 8 * -v8 + 4);
    }
    if (v6 <= 0) {
      int v6 = *(_DWORD *)(*(void *)(v4 + 104) + 8 * -v6 + 4);
    }
    unsigned int v9 = v8 - v6;
  }
  *(void *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 15;
  fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::SetFullArc(a1);
  return a1;
}

float fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::SetFullArc(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 48);
  if (v1 < *(void *)(a1 + 40))
  {
    uint64_t v2 = *(void *)(a1 + 16);
    uint64_t v3 = (unsigned int *)(v2 + 8 * v1);
    uint64_t v4 = *(void *)(*(void *)(a1 + 8) + 144);
    int v5 = *(_DWORD *)(v4 + 8);
    if ((*(_DWORD *)(a1 + 56) & 0xF) == 2)
    {
      *(_DWORD *)(a1 + 28) = *v3 >> (v5 + 1);
    }
    else if ((*(_DWORD *)(a1 + 56) & 0xF) == 1)
    {
      *(_DWORD *)(a1 + 24) = *v3 >> (v5 + 1);
    }
    else
    {
      unsigned int v6 = *v3;
      float v7 = (float)((v6 & *(_DWORD *)(v4 + 12)) >> 1);
      uint64_t v8 = v6 >> (v5 + 1);
      if (v6) {
        float v7 = -v7;
      }
      float result = *(float *)(v4 + 4) * v7;
      unint64_t v10 = LODWORD(result) | ((unint64_t)*(unsigned int *)(v2 + 8 * v1 + 4) << 32);
      *(void *)(a1 + 24) = v8 | (v8 << 32);
      *(void *)(a1 + 32) = v10;
    }
  }
  return result;
}

void fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::~ArcIterator()
{
}

uint64_t fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Reinit(void *a1, int a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = *(void *)(v2 + 72);
  int v4 = *(_DWORD *)(v3 + 4 * a2);
  int v5 = v4;
  if (v4 <= 0) {
    int v5 = *(_DWORD *)(*(void *)(v2 + 104) + 8 * -v4 + 4);
  }
  a1[2] = *(void *)(v2 + 88) + 8 * (v5 - 1);
  if (*(_DWORD *)(v2 + 112) - 1 == a2)
  {
    if (v4 <= 0) {
      int v4 = *(_DWORD *)(*(void *)(v2 + 104) + 8 * -v4 + 4);
    }
    uint64_t v7 = *(void *)(v2 + 120) - v4 + 1;
  }
  else
  {
    int v6 = *(_DWORD *)(v3 + 4 * (a2 + 1));
    if (v6 <= 0) {
      int v6 = *(_DWORD *)(*(void *)(v2 + 104) + 8 * -v6 + 4);
    }
    if (v4 <= 0) {
      int v4 = *(_DWORD *)(*(void *)(v2 + 104) + 8 * -v4 + 4);
    }
    uint64_t v7 = v6 - v4;
  }
  a1[5] = v7;
  a1[6] = 0;
  fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::SetFullArc((uint64_t)a1);
  return 1;
}

BOOL fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Done_(uint64_t a1)
{
  return *(void *)(a1 + 48) >= *(void *)(a1 + 40);
}

uint64_t fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Value_(uint64_t a1)
{
  return a1 + 24;
}

float fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Next_(uint64_t a1)
{
  return fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::SetFullArc(a1);
}

uint64_t fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Position_(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

float fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Reset_(uint64_t a1)
{
  *(void *)(a1 + 48) = 0;
  return fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::SetFullArc(a1);
}

float fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Seek_(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 48) = a2;
  return fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::SetFullArc(a1);
}

uint64_t fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Flags_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 56);
}

float fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::SetFlags_(uint64_t a1, char a2, int a3)
{
  int v3 = *(_DWORD *)(a1 + 56);
  int v4 = v3 & ~a3 | a2 & 0xF;
  *(_DWORD *)(a1 + 56) = v4;
  if (v3 != 15 && v3 != v4) {
    return fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::SetFullArc(a1);
  }
  return result;
}

void *std::allocate_shared[abi:ne180100]<quasar::NgramLmModel2,std::allocator<quasar::NgramLmModel2>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::unique_ptr<srilm::NgramCountContext>,std::shared_ptr<quasar::FstLmHandle> &,std::shared_ptr<quasar::NgramFstConfig const> const&,void>@<X0>(uint64_t *a1@<X1>, srilm::NgramCountContext **a2@<X2>, uint64_t *a3@<X3>, const std::string **a4@<X4>, void *a5@<X8>)
{
  unint64_t v10 = operator new(0x448uLL);
  float result = std::__shared_ptr_emplace<quasar::NgramLmModel2>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::unique_ptr<srilm::NgramCountContext>,std::shared_ptr<quasar::FstLmHandle> &,std::shared_ptr<quasar::NgramFstConfig const> const&,std::allocator<quasar::NgramLmModel2>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_1B20E0E58(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::NgramLmModel2>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::unique_ptr<srilm::NgramCountContext>,std::shared_ptr<quasar::FstLmHandle> &,std::shared_ptr<quasar::NgramFstConfig const> const&,std::allocator<quasar::NgramLmModel2>,0>(void *a1, uint64_t *a2, srilm::NgramCountContext **a3, uint64_t *a4, const std::string **a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5FB50;
  std::allocator<quasar::NgramLmModel2>::construct[abi:ne180100]<quasar::NgramLmModel2,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::unique_ptr<srilm::NgramCountContext>,std::shared_ptr<quasar::FstLmHandle> &,std::shared_ptr<quasar::NgramFstConfig const> const&>((uint64_t)&v7, (uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_1B20E0ED4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::NgramLmModel2>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5FB50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::NgramLmModel2>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5FB50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::NgramLmModel2>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 8))();
}

void std::allocator<quasar::NgramLmModel2>::construct[abi:ne180100]<quasar::NgramLmModel2,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::unique_ptr<srilm::NgramCountContext>,std::shared_ptr<quasar::FstLmHandle> &,std::shared_ptr<quasar::NgramFstConfig const> const&>(uint64_t a1, uint64_t a2, uint64_t *a3, srilm::NgramCountContext **a4, uint64_t *a5, const std::string **a6)
{
  int v6 = (std::__shared_weak_count *)a3[1];
  v9[0] = *a3;
  v9[1] = (uint64_t)v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v7 = *a4;
  *a4 = 0;
  uint64_t v8 = v7;
  quasar::NgramLmModel2::NgramLmModel2(a2, v9, (void ***)&v8, a5, a6);
  if (v8)
  {
    srilm::NgramCountContext::~NgramCountContext((void **)v8);
    MEMORY[0x1B3EA8670]();
  }
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_1B20E102C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<srilm::NgramCountContext>::reset[abi:ne180100]((void ***)va, 0);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::shared_ptr<quasar::FstLmHandle>::shared_ptr[abi:ne180100]<quasar::FstLmHandle,std::default_delete<quasar::FstLmHandle>,void>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *float result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

void std::__shared_ptr_pointer<quasar::NgramLmModel2  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_pointer<quasar::NgramLmModel2  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 16))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<quasar::NgramLmModel2  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

void std::shared_ptr<Ngram>::shared_ptr[abi:ne180100]<Ngram,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1B20E11E8(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<Ngram>::shared_ptr[abi:ne180100]<Ngram,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<Ngram *,std::shared_ptr<Ngram>::__shared_ptr_default_delete<Ngram,Ngram>,std::allocator<Ngram>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_pointer<Ngram *,std::shared_ptr<Ngram>::__shared_ptr_default_delete<Ngram,Ngram>,std::allocator<Ngram>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<Ngram *,std::shared_ptr<Ngram>::__shared_ptr_default_delete<Ngram,Ngram>,std::allocator<Ngram>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void *std::allocate_shared[abi:ne180100]<quasar::NgramLmModel2,std::allocator<quasar::NgramLmModel2>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::unique_ptr<srilm::NgramCountContext>,std::shared_ptr<quasar::FstLmHandle> &,std::shared_ptr<quasar::NgramSrilmInterpolationConfig> const&,void>@<X0>(uint64_t *a1@<X1>, srilm::NgramCountContext **a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, void *a5@<X8>)
{
  unint64_t v10 = operator new(0x448uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::NgramLmModel2>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::unique_ptr<srilm::NgramCountContext>,std::shared_ptr<quasar::FstLmHandle> &,std::shared_ptr<quasar::NgramSrilmInterpolationConfig> const&,std::allocator<quasar::NgramLmModel2>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_1B20E1318(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::NgramLmModel2>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::unique_ptr<srilm::NgramCountContext>,std::shared_ptr<quasar::FstLmHandle> &,std::shared_ptr<quasar::NgramSrilmInterpolationConfig> const&,std::allocator<quasar::NgramLmModel2>,0>(void *a1, uint64_t *a2, srilm::NgramCountContext **a3, uint64_t *a4, uint64_t a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5FB50;
  std::allocator<quasar::NgramLmModel2>::construct[abi:ne180100]<quasar::NgramLmModel2,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::unique_ptr<srilm::NgramCountContext>,std::shared_ptr<quasar::FstLmHandle> &,std::shared_ptr<quasar::NgramSrilmInterpolationConfig> const&>((uint64_t)&v7, (uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_1B20E1394(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::NgramLmModel2>::construct[abi:ne180100]<quasar::NgramLmModel2,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::unique_ptr<srilm::NgramCountContext>,std::shared_ptr<quasar::FstLmHandle> &,std::shared_ptr<quasar::NgramSrilmInterpolationConfig> const&>(uint64_t a1, uint64_t a2, uint64_t *a3, srilm::NgramCountContext **a4, uint64_t *a5, uint64_t a6)
{
  int v6 = (std::__shared_weak_count *)a3[1];
  v11[0] = *a3;
  v11[1] = (uint64_t)v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v7 = *a4;
  *a4 = 0;
  uint64_t v8 = *(std::string **)(a6 + 8);
  v9[0] = *(const std::string **)a6;
  v9[1] = v8;
  unint64_t v10 = v7;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)&v8->__r_.__value_.__l.__size_, 1uLL, memory_order_relaxed);
  }
  quasar::NgramLmModel2::NgramLmModel2(a2, v11, (void ***)&v10, a5, v9);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v8);
  }
  if (v10)
  {
    srilm::NgramCountContext::~NgramCountContext((void **)v10);
    MEMORY[0x1B3EA8670]();
  }
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_1B20E1484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  std::unique_ptr<srilm::NgramCountContext>::reset[abi:ne180100]((void ***)va, 0);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::lm::srilm::VocabIterator::VocabIterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = &unk_1F0A57D50;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 120))(a2);
  *(void *)(a1 + 40) = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 128))(a2, 0);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 72) = 0;
  quasar::lm::srilm::VocabIterator::advance((quasar::lm::srilm::VocabIterator *)a1);
  return a1;
}

void sub_1B20E1578(_Unwind_Exception *a1)
{
  if (v1[71] < 0) {
    operator delete(*v2);
  }
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v1);
  _Unwind_Resume(a1);
}

void quasar::lm::srilm::VocabIterator::advance(quasar::lm::srilm::VocabIterator *this)
{
  if (!*((unsigned char *)this + 72))
  {
    uint64_t v2 = (char *)this + 48;
    do
    {
      uint64_t v4 = *((void *)this + 3);
      unint64_t v3 = *((void *)this + 4);
      if (v4 == v3)
      {
        *((unsigned char *)this + 72) = 1;
        return;
      }
      *((void *)this + 3) = v4 + 1;
      if (v4 + 1 >= v3)
      {
        unint64_t v5 = *((void *)this + 5);
      }
      else
      {
        unint64_t v5 = (*(uint64_t (**)(void))(**((void **)this + 2) + 128))(*((void *)this + 2));
        *((void *)this + 5) = v5;
      }
      (*(void (**)(long long *__return_ptr))(**((void **)this + 2) + 88))(&v7);
      if (*((char *)this + 71) < 0) {
        operator delete(*(void **)v2);
      }
      *(_OWORD *)uint64_t v2 = v7;
      *((void *)v2 + 2) = v8;
      if (*((char *)this + 71) < 0)
      {
        if (!*((void *)this + 7)) {
          continue;
        }
      }
      else if (!*((unsigned char *)this + 71))
      {
        continue;
      }
      int v6 = (void *)*((void *)this + 1);
      if (v5 < v6[1] && ((*(void *)(*v6 + ((v5 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v5) & 1) != 0) {
        return;
      }
    }
    while (!*((unsigned char *)this + 72));
  }
}

uint64_t quasar::lm::srilm::VocabIterator::done(quasar::lm::srilm::VocabIterator *this)
{
  return *((unsigned __int8 *)this + 72);
}

void quasar::lm::srilm::VocabIterator::next(quasar::lm::srilm::VocabIterator *this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = *((_OWORD *)this + 3);
  *(void *)(a2 + 16) = *((void *)this + 8);
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 6) = 0;
  quasar::lm::srilm::VocabIterator::advance(this);
}

void sub_1B20E1724(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::shared_ptr<Vocab>::operator=[abi:ne180100]<Vocab,std::default_delete<Vocab>,void>(void *a1, uint64_t *a2)
{
  std::shared_ptr<Vocab>::shared_ptr[abi:ne180100]<Vocab,std::default_delete<Vocab>,void>((uint64_t *)&v6, a2);
  unint64_t v3 = (std::__shared_weak_count *)a1[1];
  long long v4 = v6;
  *(void *)&long long v6 = *a1;
  *((void *)&v6 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

uint64_t quasar::lm::srilm::Interpolate::Interpolate(uint64_t a1, uint64_t a2, long long **a3)
{
  *(void *)a1 = &unk_1F0A57D28;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 8), *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  unint64_t v5 = (quasar::lm *)std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((void *)(a1 + 32), *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  if (*(void *)(a1 + 40) == *(void *)(a1 + 32))
  {
    quasar::lm::LogMessage::LogMessage(v10, 5, "Interpolate", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/srilm.cpp", 117);
    quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v10);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v10);
  }
  else
  {
    long long v6 = (quasar::lm *)quasar::lm::nullstream(v5);
  }
  long long v7 = *(double **)(a1 + 32);
  for (i = *(double **)(a1 + 40); v7 != i; ++v7)
  {
    if (*v7 > 0.0)
    {
      long long v6 = (quasar::lm *)quasar::lm::nullstream(v6);
    }
    else
    {
      quasar::lm::LogMessage::LogMessage(v10, 5, "Interpolate", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/srilm.cpp", 119);
      quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v10);
      quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v10);
    }
  }
  return a1;
}

void sub_1B20E18E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&a9);
  float v12 = *v10;
  if (*v10)
  {
    *(void *)(v9 + 40) = v12;
    operator delete(v12);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  _Unwind_Resume(a1);
}

void quasar::lm::srilm::initializeBasicNgramLM(uint64_t a1)
{
  uint64_t v1 = (const char *)a1;
  if (*(char *)(a1 + 23) < 0) {
    uint64_t v1 = *(const char **)a1;
  }
  File::File((File *)v2, v1, "r", 1);
  operator new();
}

void sub_1B20E1AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  File::~File((File *)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::lm::srilm::Interpolate::operator()(uint64_t a1, uint64_t a2)
{
  long long v4 = (quasar::lm *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  if (v4)
  {
    quasar::lm::nullstream(v4);
  }
  else
  {
    quasar::lm::LogMessage::LogMessage(v16, 5, "operator()", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/srilm.cpp", 138);
    quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v16);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v16);
  }
  unint64_t v5 = (quasar::lm *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  uint64_t v6 = *(void *)v5;
  double v7 = **(double **)(a1 + 32);
  if (v7 > 0.0)
  {
    quasar::lm::nullstream(v5);
  }
  else
  {
    quasar::lm::LogMessage::LogMessage(v16, 5, "operator()", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/srilm.cpp", 148);
    quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v16);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v16);
  }
  for (unint64_t i = 1; ; ++i)
  {
    uint64_t v9 = (quasar::lm *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
    unint64_t v10 = (uint64_t)(*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 3;
    if (!v9) {
      break;
    }
    if (v10 <= i)
    {
      quasar::lm::LogMessage::LogMessage(v16, 5, "operator()", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/srilm.cpp", 163);
      quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v16);
      quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v16);
    }
    else
    {
      quasar::lm::nullstream(v9);
    }
    double v11 = *(double *)(*(void *)(a1 + 32) + 8 * i);
    float v12 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
    double v13 = v7 + v11;
    uint64_t v14 = *v12;
    (*(void (**)(uint64_t, void, double))(*(void *)v6 + 392))(v6, *v12, v7 / v13);
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    }
    double v7 = v13;
  }
  if (v10 == i)
  {
    quasar::lm::nullstream(v9);
  }
  else
  {
    quasar::lm::LogMessage::LogMessage(v16, 5, "operator()", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/srilm.cpp", 173);
    quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v16);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v16);
  }
  return v6;
}

void sub_1B20E1E18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&a9);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  _Unwind_Resume(a1);
}

void quasar::lm::srilm::CreateLazyLoadedNgramModelStream(long long **a1, uint64_t a2, int a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  memset(&v6, 0, sizeof(v6));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v6, *a1, a1[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 3));
  uint64_t v7 = a2;
  int v8 = a3;
  uint64_t v9 = 0;
  unint64_t v5 = (char *)operator new(0x30uLL);
  *(void *)unint64_t v5 = &unk_1F0A5BBA0;
  *((void *)v5 + 2) = 0;
  *((void *)v5 + 3) = 0;
  *((void *)v5 + 1) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(v5 + 8), (long long *)v6.__r_.__value_.__l.__data_, (long long *)v6.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6.__r_.__value_.__l.__size_ - v6.__r_.__value_.__r.__words[0]) >> 3));
  *((void *)v5 + 4) = v7;
  *((_DWORD *)v5 + 10) = v8;
  uint64_t v9 = v5;
  quasar::lm::referenceVectorToObjectStream<std::string,Ngram>();
}

void sub_1B20E1FE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, void **);
  std::__function::__value_func<Ngram * ()(long long)>::~__value_func[abi:ne180100]((uint64_t *)va2);
  va_copy((va_list)v9, va);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  _Unwind_Resume(a1);
}

void quasar::lm::referenceVectorToObjectStream<std::string,Ngram>()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1B20E210C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__function::__value_func<BOOL ()(long long)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  MEMORY[0x1B3EA8670](v2, 0x10A1C4014ADDB9CLL);
  _Unwind_Resume(a1);
}

void quasar::lm::srilm::VocabIterator::~VocabIterator(void **this)
{
  *this = &unk_1F0A57D50;
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)this);
}

{
  uint64_t vars8;

  *this = &unk_1F0A57D50;
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)this);
  JUMPOUT(0x1B3EA8670);
}

uint64_t *std::shared_ptr<Vocab>::shared_ptr[abi:ne180100]<Vocab,std::default_delete<Vocab>,void>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *uint64_t result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

void std::__shared_ptr_pointer<Vocab  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_pointer<Vocab  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<Vocab  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

void std::__function::__func<quasar::lm::Generator<Ngram> * quasar::lm::referenceVectorToObjectStream<std::string,Ngram>(std::vector<std::string> const&,std::function<Ngram* ()(long long)>)::{lambda(long long)#1},std::allocator<quasar::lm::Generator<Ngram> * quasar::lm::referenceVectorToObjectStream<std::string,Ngram>(std::vector<std::string> const&,std::function<Ngram* ()(long long)>)::{lambda(long long)#1}>,BOOL ()(long long)>::~__func()
{
}

void *std::__function::__func<quasar::lm::Generator<Ngram> * quasar::lm::referenceVectorToObjectStream<std::string,Ngram>(std::vector<std::string> const&,std::function<Ngram* ()(long long)>)::{lambda(long long)#1},std::allocator<quasar::lm::Generator<Ngram> * quasar::lm::referenceVectorToObjectStream<std::string,Ngram>(std::vector<std::string> const&,std::function<Ngram* ()(long long)>)::{lambda(long long)#1}>,BOOL ()(long long)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F0A5BAF0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::lm::Generator<Ngram> * quasar::lm::referenceVectorToObjectStream<std::string,Ngram>(std::vector<std::string> const&,std::function<Ngram* ()(long long)>)::{lambda(long long)#1},std::allocator<quasar::lm::Generator<Ngram> * quasar::lm::referenceVectorToObjectStream<std::string,Ngram>(std::vector<std::string> const&,std::function<Ngram* ()(long long)>)::{lambda(long long)#1}>,BOOL ()(long long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F0A5BAF0;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<quasar::lm::Generator<Ngram> * quasar::lm::referenceVectorToObjectStream<std::string,Ngram>(std::vector<std::string> const&,std::function<Ngram* ()(long long)>)::{lambda(long long)#1},std::allocator<quasar::lm::Generator<Ngram> * quasar::lm::referenceVectorToObjectStream<std::string,Ngram>(std::vector<std::string> const&,std::function<Ngram* ()(long long)>)::{lambda(long long)#1}>,BOOL ()(long long)>::operator()(uint64_t a1, void *a2)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*(void *)(a1 + 8) + 8) - **(void **)(a1 + 8)) >> 3) != *a2;
}

uint64_t std::__function::__func<quasar::lm::Generator<Ngram> * quasar::lm::referenceVectorToObjectStream<std::string,Ngram>(std::vector<std::string> const&,std::function<Ngram* ()(long long)>)::{lambda(long long)#1},std::allocator<quasar::lm::Generator<Ngram> * quasar::lm::referenceVectorToObjectStream<std::string,Ngram>(std::vector<std::string> const&,std::function<Ngram* ()(long long)>)::{lambda(long long)#1}>,BOOL ()(long long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::lm::Generator<Ngram> * quasar::lm::referenceVectorToObjectStream<std::string,Ngram>(std::vector<std::string> const&,std::function<Ngram* ()(long long)>)::{lambda(long long)#1},std::allocator<quasar::lm::Generator<Ngram> * quasar::lm::referenceVectorToObjectStream<std::string,Ngram>(std::vector<std::string> const&,std::function<Ngram* ()(long long)>)::{lambda(long long)#1}>,BOOL ()(long long)>::target_type()
{
}

void std::__function::__func<quasar::lm::Generator<Ngram> * quasar::lm::referenceVectorToObjectStream<std::string,Ngram>(std::vector<std::string> const&,std::function<Ngram* ()(long long)>)::{lambda(void)#1},std::allocator<quasar::lm::Generator<Ngram> * quasar::lm::referenceVectorToObjectStream<std::string,Ngram>(std::vector<std::string> const&,std::function<Ngram* ()(long long)>)::{lambda(void)#1}>,void ()(void)>::~__func()
{
}

void *std::__function::__func<quasar::lm::Generator<Ngram> * quasar::lm::referenceVectorToObjectStream<std::string,Ngram>(std::vector<std::string> const&,std::function<Ngram* ()(long long)>)::{lambda(void)#1},std::allocator<quasar::lm::Generator<Ngram> * quasar::lm::referenceVectorToObjectStream<std::string,Ngram>(std::vector<std::string> const&,std::function<Ngram* ()(long long)>)::{lambda(void)#1}>,void ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F0A5BA98;
  return result;
}

void std::__function::__func<quasar::lm::Generator<Ngram> * quasar::lm::referenceVectorToObjectStream<std::string,Ngram>(std::vector<std::string> const&,std::function<Ngram* ()(long long)>)::{lambda(void)#1},std::allocator<quasar::lm::Generator<Ngram> * quasar::lm::referenceVectorToObjectStream<std::string,Ngram>(std::vector<std::string> const&,std::function<Ngram* ()(long long)>)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F0A5BA98;
}

uint64_t std::__function::__func<quasar::lm::Generator<Ngram> * quasar::lm::referenceVectorToObjectStream<std::string,Ngram>(std::vector<std::string> const&,std::function<Ngram* ()(long long)>)::{lambda(void)#1},std::allocator<quasar::lm::Generator<Ngram> * quasar::lm::referenceVectorToObjectStream<std::string,Ngram>(std::vector<std::string> const&,std::function<Ngram* ()(long long)>)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::lm::Generator<Ngram> * quasar::lm::referenceVectorToObjectStream<std::string,Ngram>(std::vector<std::string> const&,std::function<Ngram* ()(long long)>)::{lambda(void)#1},std::allocator<quasar::lm::Generator<Ngram> * quasar::lm::referenceVectorToObjectStream<std::string,Ngram>(std::vector<std::string> const&,std::function<Ngram* ()(long long)>)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

void *quasar::lm::Generator<Ngram>::Generator(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *a1 = &unk_1F0A57F18;
  uint64_t v7 = (uint64_t)(a1 + 5);
  std::__function::__value_func<Ngram * ()(long long)>::__value_func[abi:ne180100]((uint64_t)(a1 + 1), a2);
  std::__function::__value_func<BOOL ()(long long)>::__value_func[abi:ne180100](v7, a3);
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)(a1 + 9), a4);
  a1[13] = 0;
  a1[14] = 0;
  return a1;
}

void sub_1B20E2610(_Unwind_Exception *a1)
{
  std::__function::__value_func<BOOL ()(long long)>::~__value_func[abi:ne180100](v2);
  std::__function::__value_func<Ngram * ()(long long)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *quasar::lm::Generator<Ngram>::~Generator(void *a1)
{
  *a1 = &unk_1F0A57F18;
  uint64_t v2 = a1 + 1;
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](a1 + 9);
  std::__function::__value_func<BOOL ()(long long)>::~__value_func[abi:ne180100](a1 + 5);
  std::__function::__value_func<Ngram * ()(long long)>::~__value_func[abi:ne180100](v2);
  return a1;
}

void quasar::lm::Generator<Ngram>::~Generator(void *a1)
{
  *a1 = &unk_1F0A57F18;
  uint64_t v2 = a1 + 1;
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](a1 + 9);
  std::__function::__value_func<BOOL ()(long long)>::~__value_func[abi:ne180100](a1 + 5);
  std::__function::__value_func<Ngram * ()(long long)>::~__value_func[abi:ne180100](v2);
  JUMPOUT(0x1B3EA8670);
}

uint64_t quasar::lm::Generator<Ngram>::next(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 104);
  *(void *)(a1 + 104) = v2 + 1;
  *(void *)(a1 + 112) = std::function<Ngram * ()(long long)>::operator()(a1 + 8, v2);
  return a1 + 112;
}

uint64_t quasar::lm::Generator<Ngram>::has_next(uint64_t a1)
{
  FstCheck(*(void *)(a1 + 104) >= 0, "(current_idx_) >= (0)", "../libquasar/liblm/include/lm/streams_liblm.h");
  uint64_t v2 = *(void *)(a1 + 104);
  return std::function<BOOL ()(long long)>::operator()(a1 + 40, v2);
}

uint64_t quasar::lm::Generator<Ngram>::reset(void *a1)
{
  uint64_t v2 = a1[12];
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 48))(v2);
  a1[13] = 0;
  a1[14] = 0;
  return result;
}

uint64_t std::__function::__value_func<Ngram * ()(long long)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::function<Ngram * ()(long long)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t std::__function::__func<quasar::lm::srilm::CreateLazyLoadedNgramModelStream(std::vector<std::string> const&,Vocab *,int)::$_0,std::allocator<quasar::lm::srilm::CreateLazyLoadedNgramModelStream(std::vector<std::string> const&,Vocab *,int)::$_0>,Ngram * ()(long long)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A5BBA0;
  uint64_t v3 = (void **)(a1 + 8);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(void *)a1 = &unk_1F0A5BBA0;
  uint64_t v3 = (void **)(a1 + 8);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x1B3EA8670](a1, 0x10A1C409957A1C6);
}

char *std::__function::__func<quasar::lm::srilm::CreateLazyLoadedNgramModelStream(std::vector<std::string> const&,Vocab *,int)::$_0,std::allocator<quasar::lm::srilm::CreateLazyLoadedNgramModelStream(std::vector<std::string> const&,Vocab *,int)::$_0>,Ngram * ()(long long)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1F0A5BBA0;
  *((void *)v2 + 2) = 0;
  *((void *)v2 + 3) = 0;
  *((void *)v2 + 1) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(v2 + 8), *(long long **)(a1 + 8), *(long long **)(a1 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3));
  *((void *)v2 + 4) = *(void *)(a1 + 32);
  *((_DWORD *)v2 + 10) = *(_DWORD *)(a1 + 40);
  return v2;
}

void sub_1B20E2A28(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<quasar::lm::srilm::CreateLazyLoadedNgramModelStream(std::vector<std::string> const&,Vocab *,int)::$_0,std::allocator<quasar::lm::srilm::CreateLazyLoadedNgramModelStream(std::vector<std::string> const&,Vocab *,int)::$_0>,Ngram * ()(long long)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F0A5BBA0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t result = std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 8), *(long long **)(a1 + 8), *(long long **)(a1 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3));
  uint64_t v5 = *(void *)(a1 + 32);
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a1 + 40);
  *(void *)(a2 + 32) = v5;
  return result;
}

void std::__function::__func<quasar::lm::srilm::CreateLazyLoadedNgramModelStream(std::vector<std::string> const&,Vocab *,int)::$_0,std::allocator<quasar::lm::srilm::CreateLazyLoadedNgramModelStream(std::vector<std::string> const&,Vocab *,int)::$_0>,Ngram * ()(long long)>::destroy(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 8);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::__function::__func<quasar::lm::srilm::CreateLazyLoadedNgramModelStream(std::vector<std::string> const&,Vocab *,int)::$_0,std::allocator<quasar::lm::srilm::CreateLazyLoadedNgramModelStream(std::vector<std::string> const&,Vocab *,int)::$_0>,Ngram * ()(long long)>::destroy_deallocate(void **a1)
{
  uint64_t v2 = a1 + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  operator delete(a1);
}

void std::__function::__func<quasar::lm::srilm::CreateLazyLoadedNgramModelStream(std::vector<std::string> const&,Vocab *,int)::$_0,std::allocator<quasar::lm::srilm::CreateLazyLoadedNgramModelStream(std::vector<std::string> const&,Vocab *,int)::$_0>,Ngram * ()(long long)>::operator()(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8) + 24 * *a2;
  if (*(char *)(v2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v5, *(const std::string::value_type **)v2, *(void *)(v2 + 8));
  }
  else
  {
    long long v3 = *(_OWORD *)v2;
    v5.__r_.__value_.__r.__words[2] = *(void *)(v2 + 16);
    *(_OWORD *)&v5.__r_.__value_.__l.__data_ = v3;
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v4, v5.__r_.__value_.__l.__data_, v5.__r_.__value_.__l.__size_);
  }
  else {
    std::string v4 = v5;
  }
  quasar::lm::srilm::initializeBasicNgramLM((uint64_t)&v4);
}

void sub_1B20E2C20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<quasar::lm::srilm::CreateLazyLoadedNgramModelStream(std::vector<std::string> const&,Vocab *,int)::$_0,std::allocator<quasar::lm::srilm::CreateLazyLoadedNgramModelStream(std::vector<std::string> const&,Vocab *,int)::$_0>,Ngram * ()(long long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::lm::srilm::CreateLazyLoadedNgramModelStream(std::vector<std::string> const&,Vocab *,int)::$_0,std::allocator<quasar::lm::srilm::CreateLazyLoadedNgramModelStream(std::vector<std::string> const&,Vocab *,int)::$_0>,Ngram * ()(long long)>::target_type()
{
}

void *std::__function::__value_func<Ngram * ()(long long)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t kaldi::RoundUpToNearestPowerOfTwo(kaldi *this)
{
  unsigned int v1 = (this - 1) | ((this - 1) >> 1) | (((this - 1) | ((this - 1) >> 1)) >> 2);
  unsigned int v2 = v1 | (v1 >> 4) | ((v1 | (v1 >> 4)) >> 8);
  return (v2 | HIWORD(v2)) + 1;
}

uint64_t kaldi::Srand(kaldi *this)
{
  unsigned int v1 = this;
  pthread_mutex_lock(&kaldi::_RandMutex);
  kaldi::_RandSeed = v1;
  srand(v1);
  kaldi::_SrandCalled = 1;
  return pthread_mutex_unlock(&kaldi::_RandMutex);
}

uint64_t kaldi::Rand(unsigned int *a1)
{
  if (a1)
  {
    return rand_r(a1);
  }
  else
  {
    pthread_mutex_lock(&kaldi::_RandMutex);
    if ((kaldi::_SrandCalled & 1) == 0)
    {
      kaldi::_RandSeed = 1;
      srand(1u);
      kaldi::_SrandCalled = 1;
    }
    uint64_t v3 = rand_r((unsigned int *)&kaldi::_RandSeed);
    pthread_mutex_unlock(&kaldi::_RandMutex);
    return v3;
  }
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::wstring>,std::wstring*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void *std::__function::__value_func<BOOL ()(std::string_view const&,std::string_view const&)>::~__value_func[abi:ne180100](void *a1)
{
  unsigned int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

{
  void *v3;
  uint64_t v4;

  uint64_t v3 = (void *)(a2 + 24);
  std::string v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void *std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](void *a1)
{
  unsigned int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<quasar::tennessee::Collation<std::string_view,std::string_view>::GetLessThanComparator(void)::{lambda(std::string_view const&,std::string_view const&)#1},std::allocator<quasar::tennessee::Collation<std::string_view,std::string_view>::GetLessThanComparator(void)::{lambda(std::string_view const&,std::string_view const&)#1}>,BOOL ()(std::string_view const&,std::string_view const&)>::~__func()
{
}

void *std::__function::__func<quasar::tennessee::Collation<std::string_view,std::string_view>::GetLessThanComparator(void)::{lambda(std::string_view const&,std::string_view const&)#1},std::allocator<quasar::tennessee::Collation<std::string_view,std::string_view>::GetLessThanComparator(void)::{lambda(std::string_view const&,std::string_view const&)#1}>,BOOL ()(std::string_view const&,std::string_view const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F0A5D1F8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::tennessee::Collation<std::string_view,std::string_view>::GetLessThanComparator(void)::{lambda(std::string_view const&,std::string_view const&)#1},std::allocator<quasar::tennessee::Collation<std::string_view,std::string_view>::GetLessThanComparator(void)::{lambda(std::string_view const&,std::string_view const&)#1}>,BOOL ()(std::string_view const&,std::string_view const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F0A5D1F8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<quasar::tennessee::Collation<std::string_view,std::string_view>::GetLessThanComparator(void)::{lambda(std::string_view const&,std::string_view const&)#1},std::allocator<quasar::tennessee::Collation<std::string_view,std::string_view>::GetLessThanComparator(void)::{lambda(std::string_view const&,std::string_view const&)#1}>,BOOL ()(std::string_view const&,std::string_view const&)>::operator()(uint64_t a1)
{
  return (*(unsigned int (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8)) >> 31;
}

uint64_t std::__function::__func<quasar::tennessee::Collation<std::string_view,std::string_view>::GetLessThanComparator(void)::{lambda(std::string_view const&,std::string_view const&)#1},std::allocator<quasar::tennessee::Collation<std::string_view,std::string_view>::GetLessThanComparator(void)::{lambda(std::string_view const&,std::string_view const&)#1}>,BOOL ()(std::string_view const&,std::string_view const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::tennessee::Collation<std::string_view,std::string_view>::GetLessThanComparator(void)::{lambda(std::string_view const&,std::string_view const&)#1},std::allocator<quasar::tennessee::Collation<std::string_view,std::string_view>::GetLessThanComparator(void)::{lambda(std::string_view const&,std::string_view const&)#1}>,BOOL ()(std::string_view const&,std::string_view const&)>::target_type()
{
}

void *std::__function::__value_func<BOOL ()(std::string_view const&,std::string_view const&)>::operator=[abi:ne180100](void *a1, uint64_t a2)
{
  std::__function::__value_func<BOOL ()(std::string_view const&,std::string_view const&)>::operator=[abi:ne180100](a1);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v4;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void *std::__function::__value_func<BOOL ()(std::string_view const&,std::string_view const&)>::operator=[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *quasar::tennessee::DirectSortedIndex<long long,std::string_view>::DirectSortedIndex(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v15[4] = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *a2;
  *a2 = 0;
  uint64_t v13 = v10;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v15, a5);
  std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)v14, a6);
  quasar::tennessee::SortedIndex<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>::SortedIndex(a1, &v13, (uint64_t)v15, (uint64_t)v14);
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v14);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v15);
  uint64_t v11 = v13;
  uint64_t v13 = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  *a1 = &unk_1F0A599F8;
  a1[10] = a3;
  a1[11] = a4;
  return a1;
}

void sub_1B20E3344(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  if (a2) {
    (*(void (**)(uint64_t))(*(void *)a2 + 8))(a2);
  }
  _Unwind_Resume(a1);
}

void *quasar::tennessee::SortedIndex<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>::SortedIndex(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *a2;
  *a2 = 0;
  *a1 = &unk_1F0A598F8;
  a1[1] = v6;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)(a1 + 2), a3);
  std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)(a1 + 6), a4);
  return a1;
}

void sub_1B20E3430(_Unwind_Exception *a1)
{
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v3);
  uint64_t v5 = v1[1];
  *uint64_t v1 = v2;
  v1[1] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  _Unwind_Resume(a1);
}

void *quasar::tennessee::DirectSortedIndex<long long,std::string_view>::~DirectSortedIndex(void *a1)
{
  *a1 = &unk_1F0A598F8;
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](a1 + 6);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](a1 + 2);
  uint64_t v2 = a1[1];
  *a1 = &unk_1F0A5A000;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void quasar::tennessee::DirectSortedIndex<long long,std::string_view>::~DirectSortedIndex(void *a1)
{
  *a1 = &unk_1F0A598F8;
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](a1 + 6);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](a1 + 2);
  uint64_t v2 = a1[1];
  *a1 = &unk_1F0A5A000;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  JUMPOUT(0x1B3EA8670);
}

void quasar::tennessee::Index<long long,std::string_view>::FindMatches()
{
}

void sub_1B20E3664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  a10 = 0;
  std::default_delete<std::vector<long long>>::operator()[abi:ne180100]((uint64_t)&a10, v10);
  _Unwind_Resume(a1);
}

uint64_t quasar::tennessee::Index<long long,std::string_view>::FindMatches(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v3 = *a1;
  if (a3) {
    return (*(uint64_t (**)(void))(v3 + 48))();
  }
  else {
    return (*(uint64_t (**)(void))(v3 + 40))();
  }
}

void quasar::tennessee::Index<long long,std::string_view>::FindExactMatches()
{
}

void sub_1B20E3764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  a10 = 0;
  std::default_delete<std::vector<long long>>::operator()[abi:ne180100]((uint64_t)&a10, v10);
  _Unwind_Resume(a1);
}

uint64_t quasar::tennessee::SortedIndex<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>::FindExactMatches(void **a1, long long *a2, uint64_t a3)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  ((void (*)(uint64_t *__return_ptr))(*a1)[8])(&v10);
  ((void (*)(uint64_t *__return_ptr, void **))(*a1)[9])(&v9, a1);
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v24, (uint64_t)(a1 + 2));
  std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)v23, (uint64_t)(a1 + 6));
  uint64_t v6 = (*(uint64_t (**)(void *))(*a1[1] + 16))(a1[1]);
  quasar::tennessee::internal::FindMatches<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>>(&v10, &v9, (uint64_t)v24, (uint64_t)v23, v6, a2, 1, &v25);
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v23);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v24);
  if (v29[40])
  {
    int v20 = v25;
    std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v21, (uint64_t)&v26);
    std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)v22, (uint64_t)v27);
    uint64_t v17 = v27[4];
    std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v18, (uint64_t)&v28);
    std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)v19, (uint64_t)v29);
    uint64_t v7 = *(char **)(a3 + 8);
    uint64_t v14 = v20;
    std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v15, (uint64_t)v21);
    std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)v16, (uint64_t)v22);
    uint64_t v11 = v17;
    std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v12, (uint64_t)v18);
    std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)v13, (uint64_t)v19);
    std::vector<long long>::insert<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,0>(a3, v7, &v14, &v11);
    std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v13);
    std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v12);
    std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v16);
    std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v15);
    std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v19);
    std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v18);
    std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v22);
    std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v21);
  }
  return std::__optional_destruct_base<std::tuple<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,BOOL>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v25);
}

void sub_1B20E39E4(_Unwind_Exception *a1)
{
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v8);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v7);
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v6);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v5);
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v4);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v3);
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v2);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v1);
  std::__optional_destruct_base<std::tuple<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,BOOL>,false>::~__optional_destruct_base[abi:ne180100](v9 - 256);
  _Unwind_Resume(a1);
}

uint64_t quasar::tennessee::SortedIndex<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>::FindPrefixMatches(void **a1, long long *a2, uint64_t a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  ((void (*)(uint64_t *__return_ptr))(*a1)[8])(&v10);
  ((void (*)(uint64_t *__return_ptr, void **))(*a1)[9])(&v9, a1);
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v18, (uint64_t)(a1 + 2));
  std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)v17, (uint64_t)(a1 + 6));
  uint64_t v6 = (*(uint64_t (**)(void *))(*a1[1] + 24))(a1[1]);
  quasar::tennessee::internal::FindMatches<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>>(&v10, &v9, (uint64_t)v18, (uint64_t)v17, v6, a2, 1, &v19);
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v17);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v18);
  if (v23[40])
  {
    uint64_t v7 = *(char **)(a3 + 8);
    uint64_t v14 = v19;
    std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v15, (uint64_t)&v20);
    std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)v16, (uint64_t)v21);
    uint64_t v11 = v21[4];
    std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v12, (uint64_t)&v22);
    std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)v13, (uint64_t)v23);
    std::vector<long long>::insert<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,0>(a3, v7, &v14, &v11);
    std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v13);
    std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v12);
    std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v16);
    std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v15);
  }
  return std::__optional_destruct_base<std::tuple<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,BOOL>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v19);
}

void sub_1B20E3C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v41);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v40);
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v39);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v38);
  std::__optional_destruct_base<std::tuple<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,BOOL>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a38);
  _Unwind_Resume(a1);
}

uint64_t quasar::tennessee::SortedIndex<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>::IsPrefix(void **a1, long long *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  ((void (*)(uint64_t *__return_ptr))(*a1)[8])(&v8);
  ((void (*)(uint64_t *__return_ptr, void **))(*a1)[9])(&v7, a1);
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v10, (uint64_t)(a1 + 2));
  std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)v9, (uint64_t)(a1 + 6));
  uint64_t v4 = (*(uint64_t (**)(void *))(*a1[1] + 24))(a1[1]);
  quasar::tennessee::internal::FindMatches<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>>(&v8, &v7, (uint64_t)v10, (uint64_t)v9, v4, a2, 0, v11);
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v9);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v10);
  uint64_t v5 = v11[152];
  std::__optional_destruct_base<std::tuple<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,BOOL>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v11);
  return v5;
}

void sub_1B20E3E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::tennessee::DirectSortedIndex<long long,std::string_view>::BeginSorted@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(result + 80);
  return result;
}

uint64_t quasar::tennessee::DirectSortedIndex<long long,std::string_view>::EndSorted@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(result + 88);
  return result;
}

uint64_t std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

{
  void *v3;
  uint64_t v4;

  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void *quasar::tennessee::internal::FindMatches<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, long long *a6@<X5>, int a7@<W6>, unsigned char *a8@<X8>)
{
  v52[4] = *MEMORY[0x1E4F143B8];
  uint64_t v27 = *a1;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v48, a3);
  quasar::tennessee::internal::CreateIterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>(&v27, (uint64_t)v48, &v49);
  uint64_t v26 = *a2;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v45, a3);
  quasar::tennessee::internal::CreateIterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>(&v26, (uint64_t)v45, &v46);
  uint64_t v36 = a5;
  LOBYTE(v25[0]) = 0;
  uint64_t v28 = v49;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v29, (uint64_t)v50);
  uint64_t v42 = v46;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v43, (uint64_t)v47);
  std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>,std::string_view,std::__identity,std::optional<std::tuple<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,BOOL>> quasar::tennessee::internal::FindMatches<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>>(boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>,quasar::tennessee::SortedIndex<long long,std::string_view,std::vector<long long>::const_iterator>::EntryIdToEntryFn,quasar::tennessee::SortedIndex<long long,std::string_view,std::vector<long long>::const_iterator>::EntryToEntryIdFn,quasar::tennessee::Comparator<std::string_view,quasar::tennessee::CollationInterfaceTypeHelper<std::string_view>::type> const&,std::string_view const&,BOOL)::{lambda(std::string_view,std::string_view)#1}>(&v28, &v42, a6, &v36, &v51);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v43);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v29);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v47);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v45);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v50);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v48);
  if (v51 == *a2
    || (uint64_t v28 = std::function<std::string_view ()(long long)>::operator()((uint64_t)v52, v51),
        v29[0] = v14,
        (*(unsigned int (**)(uint64_t, uint64_t *, long long *))(*(void *)a5 + 16))(a5, &v28, a6)))
  {
    *a8 = 0;
    a8[152] = 0;
  }
  else
  {
    uint64_t v40 = v51;
    std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v41, (uint64_t)v52);
    std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)v39, a4);
    quasar::tennessee::internal::CreateIterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>(&v40, (uint64_t)v39, &v42);
    uint64_t v24 = (uint64_t)a8;
    std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v39);
    std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v41);
    quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>::operator+(&v42, 1, &v36);
    if (a7)
    {
      while (1)
      {
        uint64_t v28 = v36;
        std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v29, (uint64_t)v37);
        if (v28 == *a2) {
          break;
        }
        uint64_t v16 = std::function<std::string_view ()(long long)>::operator()((uint64_t)v37, v36);
        uint64_t v18 = std::function<long long ()(std::string_view)>::operator()((uint64_t)v38, v16, v17);
        v25[0] = std::function<std::string_view ()(long long)>::operator()(a3, v18);
        v25[1] = v19;
        int v20 = (*(uint64_t (**)(uint64_t, void *, long long *))(*(void *)a5 + 16))(a5, v25, a6);
        std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v29);
        if (v20) {
          goto LABEL_10;
        }
        quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>::operator++(&v36, &v33);
        std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v35);
        std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v34);
      }
      std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v29);
    }
LABEL_10:
    uint64_t v28 = v36;
    v21 = (void *)std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v29, (uint64_t)v37);
    BOOL v22 = v28 == *a2;
    std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v21);
    LOBYTE(v25[0]) = v22;
    _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJN6quasar9tennessee8internal8IteratorINS_17basic_string_viewIcNS_11char_traitsIcEEEExNS6_IxSA_N5boost9iterators17counting_iteratorIxNSB_11use_defaultESE_EEEEEESH_bEEC2B8ne180100IJLm0ELm1ELm2EEJSH_SH_bEJEJEJRSH_SK_RKbEEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSO_IJDpT2_EEEDpOT3_((uint64_t)&v28, &v42, &v36, v25);
    *(unsigned char *)(std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,BOOL>::__tuple_impl(v24, (uint64_t)&v28)+ 152) = 1;
    std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v32);
    std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v31);
    std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v30);
    std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v29);
    std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v38);
    std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v37);
    std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v44);
    std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v43);
  }
  return std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v52);
}

void sub_1B20E42E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::tuple<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,BOOL>::~tuple(&a15);
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](&a48);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](&a44);
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](&a66);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](&a62);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](a9);
  _Unwind_Resume(a1);
}

char *std::vector<long long>::insert<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,0>(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  v25[4] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = (uint64_t)(a3 + 1);
  uint64_t v23 = (uint64_t)*a3;
  uint64_t v13 = (void *)std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)&v24, (uint64_t)(a3 + 1));
  uint64_t v12 = (void *)std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)v25, (uint64_t)(a3 + 5));
  uint64_t v20 = *a4;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v21, (uint64_t)(a4 + 1));
  std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)v22, (uint64_t)(a4 + 5));
  uint64_t v17 = *a3;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v18, v8);
  std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)v19, (uint64_t)(a3 + 5));
  uint64_t v14 = *a4;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v15, (uint64_t)(a4 + 1));
  std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)v16, (uint64_t)(a4 + 5));
  uint64_t v9 = std::distance[abi:ne180100]<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>>((uint64_t *)&v17, &v14);
  uint64_t v10 = std::vector<long long>::__insert_with_size[abi:ne180100]<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>>(a1, a2, (void **)&v23, &v20, v9);
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v16);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v15);
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v19);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v18);
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v22);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v21);
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v12);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v13);
  return v10;
}

void sub_1B20E459C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v15);
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v14);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v13);
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v12);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](a10);
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](a11);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](a12);
  _Unwind_Resume(a1);
}

void *quasar::tennessee::internal::CreateIterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  v6[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a1;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  *a3 = v4;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)(a3 + 1), (uint64_t)v6);
  return std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v6);
}

void sub_1B20E46A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *quasar::tennessee::internal::CreateIterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  v8[4] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *a1;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v8, (uint64_t)(a1 + 1));
  std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>::Iterator(a3, &v7, (uint64_t)v6);
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v6);
  return std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v8);
}

void sub_1B20E4764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](&a9);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

void *quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>::operator+@<X0>(uint64_t *a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  v8[4] = *MEMORY[0x1E4F143B8];
  quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>::operator+(a1, a2, &v7);
  std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)v6, (uint64_t)(a1 + 5));
  quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>::Iterator(a3, &v7, (uint64_t)v6);
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v6);
  return std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v8);
}

void sub_1B20E4820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
}

uint64_t std::function<std::string_view ()(long long)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>::operator++@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  v7[4] = *MEMORY[0x1E4F143B8];
  ++*a1;
  uint64_t v4 = (uint64_t)(a1 + 1);
  uint64_t v5 = (void *)std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v7, (uint64_t)(a1 + 1));
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v5);
  *a2 = *a1;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), v4);
  return std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)(a2 + 5), (uint64_t)(a1 + 5));
}

void sub_1B20E4950(_Unwind_Exception *a1)
{
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *std::tuple<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,BOOL>::~tuple(void *a1)
{
  return a1;
}

uint64_t std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>,std::string_view,std::__identity,std::optional<std::tuple<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,BOOL>> quasar::tennessee::internal::FindMatches<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>>(boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>,quasar::tennessee::SortedIndex<long long,std::string_view,std::vector<long long>::const_iterator>::EntryIdToEntryFn,quasar::tennessee::SortedIndex<long long,std::string_view,std::vector<long long>::const_iterator>::EntryToEntryIdFn,quasar::tennessee::Comparator<std::string_view,quasar::tennessee::CollationInterfaceTypeHelper<std::string_view>::type> const&,std::string_view const&,BOOL)::{lambda(std::string_view,std::string_view)#1}>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, long long *a3@<X2>, void *a4@<X3>, uint64_t *a5@<X8>)
{
  void v23[4] = *MEMORY[0x1E4F143B8];
  uint64_t v10 = a1 + 1;
  uint64_t v20 = *a1;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v21, (uint64_t)(a1 + 1));
  uint64_t v18 = *a2;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v19, (uint64_t)(a2 + 1));
  unint64_t v11 = std::_IterOps<std::_ClassicAlgPolicy>::distance[abi:ne180100]<quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>(&v20, &v18);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v19);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v21);
  if (v11)
  {
    do
    {
      uint64_t v16 = *a1;
      std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v17, (uint64_t)v10);
      unint64_t v12 = v11 >> 1;
      v16 += (int)(v11 >> 1);
      uint64_t v22 = v16;
      std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v23, (uint64_t)v17);
      std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v23);
      uint64_t v22 = std::function<std::string_view ()(long long)>::operator()((uint64_t)v17, v16);
      v23[0] = v13;
      long long v15 = *a3;
      if (((*(uint64_t (**)(void, uint64_t *, long long *))(*(void *)*a4 + 16))(*a4, &v22, &v15) & 0x80000000) != 0)
      {
        uint64_t v22 = ++v16;
        std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v23, (uint64_t)v17);
        *a1 = v22;
        std::__function::__value_func<std::string_view ()(long long)>::operator=[abi:ne180100](v10, (uint64_t)v23);
        std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v23);
        unint64_t v12 = v11 + ~v12;
      }
      std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v17);
      unint64_t v11 = v12;
    }
    while (v12);
  }
  *a5 = *a1;
  return std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)(a5 + 1), (uint64_t)v10);
}

void sub_1B20E4B90(_Unwind_Exception *a1)
{
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v2);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::_IterOps<std::_ClassicAlgPolicy>::distance[abi:ne180100]<quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>(uint64_t *a1, uint64_t *a2)
{
  v8[4] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *a1;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v8, (uint64_t)(a1 + 1));
  uint64_t v5 = *a2;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v6, (uint64_t)(a2 + 1));
  uint64_t v3 = std::distance[abi:ne180100]<quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>(&v7, &v5);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v6);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v8);
  return v3;
}

void sub_1B20E4C90(_Unwind_Exception *a1)
{
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v2);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::distance[abi:ne180100]<quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>(uint64_t *a1, uint64_t *a2)
{
  v11[4] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *a1;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v9, (uint64_t)(a1 + 1));
  uint64_t v6 = *a2;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v7, (uint64_t)(a2 + 1));
  uint64_t v10 = v8;
  uint64_t v3 = (void *)std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v11, (uint64_t)v9);
  uint64_t v4 = v10;
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v3);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v7);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v9);
  return v6 - v4;
}

void sub_1B20E4D88(_Unwind_Exception *a1)
{
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v2);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<std::string_view ()(long long)>::operator=[abi:ne180100](void *a1, uint64_t a2)
{
  std::__function::__value_func<std::string_view ()(long long)>::operator=[abi:ne180100](a1);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v4;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void *std::__function::__value_func<std::string_view ()(long long)>::operator=[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>::Iterator(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = (uint64_t)(a1 + 5);
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)(a1 + 1), (uint64_t)(a2 + 1));
  std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100](v5, a3);
  return a1;
}

void sub_1B20E4F94(_Unwind_Exception *a1)
{
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>::operator+@<X0>(uint64_t *a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  void v7[4] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a1;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v7, (uint64_t)(a1 + 1));
  *a3 = v5 + a2;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)(a3 + 1), (uint64_t)v7);
  return std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v7);
}

void sub_1B20E5034(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::function<long long ()(std::string_view)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v5[0] = a2;
  v5[1] = a3;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, void *))(*(void *)v3 + 48))(v3, v5);
}

uint64_t _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJN6quasar9tennessee8internal8IteratorINS_17basic_string_viewIcNS_11char_traitsIcEEEExNS6_IxSA_N5boost9iterators17counting_iteratorIxNSB_11use_defaultESE_EEEEEESH_bEEC2B8ne180100IJLm0ELm1ELm2EEJSH_SH_bEJEJEJRSH_SK_RKbEEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSO_IJDpT2_EEEDpOT3_(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  uint64_t v7 = std::__tuple_leaf<0ul,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,false>::__tuple_leaf[abi:ne180100]<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>&,void>((void *)a1, a2);
  std::__tuple_leaf<1ul,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,false>::__tuple_leaf[abi:ne180100]<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>&,void>(v7 + 9, a3);
  *(unsigned char *)(a1 + 144) = *a4;
  return a1;
}

void sub_1B20E50F0(_Unwind_Exception *a1)
{
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100]((void *)(v1 + 40));
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100]((void *)(v1 + 8));
  _Unwind_Resume(a1);
}

void *std::__tuple_leaf<0ul,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,false>::__tuple_leaf[abi:ne180100]<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>&,void>(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = (uint64_t)(a1 + 5);
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)(a1 + 1), (uint64_t)(a2 + 1));
  std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100](v4, (uint64_t)(a2 + 5));
  return a1;
}

void sub_1B20E5164(_Unwind_Exception *a1)
{
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *std::__tuple_leaf<1ul,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,false>::__tuple_leaf[abi:ne180100]<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>&,void>(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = (uint64_t)(a1 + 5);
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)(a1 + 1), (uint64_t)(a2 + 1));
  std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100](v4, (uint64_t)(a2 + 5));
  return a1;
}

void sub_1B20E51D0(_Unwind_Exception *a1)
{
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,BOOL>::__tuple_impl(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100](a1 + 8, a2 + 8);
  std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100](a1 + 40, a2 + 40);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100](a1 + 80, a2 + 80);
  std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100](a1 + 112, a2 + 112);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  return a1;
}

char *std::vector<long long>::__insert_with_size[abi:ne180100]<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>>(uint64_t a1, char *a2, void **a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5 = a2;
  v53[4] = *MEMORY[0x1E4F143B8];
  if (a5 < 1) {
    return v5;
  }
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (a5 <= (uint64_t)(v11 - v12) >> 3)
  {
    v45 = *a3;
    uint64_t v29 = (uint64_t)(a3 + 1);
    std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v46, (uint64_t)(a3 + 1));
    uint64_t v28 = (uint64_t)(a3 + 5);
    std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)v47, (uint64_t)(a3 + 5));
    std::__advance[abi:ne180100]<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>>(&v45, a5);
    v48 = v45;
    std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)&v49, (uint64_t)v46);
    std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)v53, (uint64_t)v47);
    std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v47);
    std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v46);
    uint64_t v20 = *(char **)(a1 + 8);
    uint64_t v21 = v20 - v5;
    if (a5 <= (v20 - v5) >> 3)
    {
      uint64_t v22 = v29;
    }
    else
    {
      v48 = *a3;
      std::function<std::string_view ()(long long)>::operator=(&v49, v29);
      std::function<long long ()(std::string_view)>::operator=(v53, v28);
      std::__advance[abi:ne180100]<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>>(&v48, (uint64_t)(*(void *)(a1 + 8) - (void)v5) >> 3);
      uint64_t v42 = v48;
      std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v43, (uint64_t)&v49);
      std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)v44, (uint64_t)v53);
      uint64_t v39 = *a4;
      std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v40, (uint64_t)(a4 + 1));
      std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)v41, (uint64_t)(a4 + 5));
      std::vector<long long>::__construct_at_end<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>>(a1, (uint64_t *)&v42, &v39);
      std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v41);
      std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v40);
      std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v44);
      std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v43);
      uint64_t v22 = v29;
      if (v21 < 1)
      {
LABEL_21:
        std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v53);
        std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](&v49);
        return v5;
      }
      uint64_t v20 = *(char **)(a1 + 8);
    }
    uint64_t v23 = &v5[8 * a5];
    uint64_t v24 = &v20[-8 * a5];
    unint64_t v25 = v20;
    if ((unint64_t)v24 < v12)
    {
      unint64_t v25 = v20;
      do
      {
        uint64_t v26 = *(void *)v24;
        v24 += 8;
        *(void *)unint64_t v25 = v26;
        v25 += 8;
      }
      while ((unint64_t)v24 < v12);
    }
    *(void *)(a1 + 8) = v25;
    if (v20 != v23) {
      memmove(&v20[-8 * ((v20 - v23) >> 3)], v5, v20 - v23);
    }
    uint64_t v36 = *a3;
    std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v37, v22);
    std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)v38, v28);
    uint64_t v33 = v48;
    std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v34, (uint64_t)&v49);
    std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)v35, (uint64_t)v53);
    std::copy[abi:ne180100]<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,long long *>((uint64_t *)&v36, (uint64_t *)&v33, (uint64_t *)v5);
    std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v35);
    std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v34);
    std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v38);
    std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v37);
    goto LABEL_21;
  }
  uint64_t v13 = *(unsigned char **)a1;
  unint64_t v14 = a5 + ((uint64_t)(v12 - *(void *)a1) >> 3);
  if (v14 >> 61) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v15 = (a2 - v13) >> 3;
  uint64_t v16 = v10 - (void)v13;
  if (v16 >> 2 > v14) {
    unint64_t v14 = v16 >> 2;
  }
  if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v17 = v14;
  }
  uint64_t v52 = v9;
  if (v17) {
    uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v9, v17);
  }
  else {
    uint64_t v18 = 0;
  }
  v48 = v18;
  uint64_t v49 = &v18[8 * v15];
  v50 = v49;
  uint64_t v51 = &v18[8 * v17];
  uint64_t v30 = *a3;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v31, (uint64_t)(a3 + 1));
  std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)v32, (uint64_t)(a3 + 5));
  std::__split_buffer<long long>::__construct_at_end_with_size<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>>(&v48, (uint64_t *)&v30, a5);
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v32);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v31);
  uint64_t v5 = std::vector<long long>::__swap_out_circular_buffer((void **)a1, (uint64_t)&v48, v5);
  if (v50 != v49) {
    v50 += (v49 - v50 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  if (v48) {
    operator delete(v48);
  }
  return v5;
}

void sub_1B20E56B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13)
{
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v13);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v14);
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](a10);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](a11);
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](a13);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](a12);
  _Unwind_Resume(a1);
}

uint64_t std::distance[abi:ne180100]<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>>(uint64_t *a1, uint64_t *a2)
{
  void v17[4] = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *a1;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v11, (uint64_t)(a1 + 1));
  std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)v12, (uint64_t)(a1 + 5));
  uint64_t v7 = *a2;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v8, (uint64_t)(a2 + 1));
  std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)v9, (uint64_t)(a2 + 5));
  uint64_t v13 = v10;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v14, (uint64_t)v11);
  std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)v15, (uint64_t)v12);
  uint64_t v16 = v13;
  uint64_t v4 = (void *)std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v17, (uint64_t)v14);
  uint64_t v5 = v16;
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v4);
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v15);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v14);
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v9);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v8);
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v12);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v11);
  return v7 - v5;
}

void sub_1B20E5930(_Unwind_Exception *a1)
{
  uint64_t v7 = v5;
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v7);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v6);
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v4);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v3);
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v2);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1B20E5990()
{
}

void sub_1B20E5998()
{
}

void *std::vector<long long>::__construct_at_end<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  void v14[4] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(uint64_t **)(a1 + 8);
  uint64_t v12 = *a2;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v13, (uint64_t)(a2 + 1));
  std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)v14, (uint64_t)(a2 + 5));
  uint64_t v9 = *a3;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v10, (uint64_t)(a3 + 1));
  std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)v11, (uint64_t)(a3 + 5));
  uint64_t v7 = std::__uninitialized_allocator_copy[abi:ne180100]<std::allocator<long long>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,long long *>(a1 + 16, &v12, &v9, v6);
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v11);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v10);
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v14);
  uint64_t result = std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v13);
  *(void *)(a1 + 8) = v7;
  return result;
}

void sub_1B20E5AA8(_Unwind_Exception *a1)
{
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v6);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v5);
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v4);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v3);
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::copy[abi:ne180100]<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,long long *>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  v16[5] = *MEMORY[0x1E4F143B8];
  uint64_t v11 = *a1;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v12, (uint64_t)(a1 + 1));
  std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)v13, (uint64_t)(a1 + 5));
  uint64_t v8 = *a2;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v9, (uint64_t)(a2 + 1));
  std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)v10, (uint64_t)(a2 + 5));
  std::__copy[abi:ne180100]<std::_ClassicAlgPolicy,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,long long *>(&v11, &v8, a3, &v14);
  uint64_t v6 = v16[4];
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v16);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v15);
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v10);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v9);
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v13);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v12);
  return v6;
}

void sub_1B20E5C14(_Unwind_Exception *a1)
{
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v4);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v3);
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v2);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *std::__split_buffer<long long>::__construct_at_end_with_size<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>>(void *result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = result;
  void v14[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (uint64_t *)result[2];
  if (a3)
  {
    uint64_t v6 = &v4[a3];
    uint64_t v7 = (uint64_t)(a2 + 1);
    uint64_t v8 = (uint64_t)(a2 + 5);
    uint64_t v9 = 8 * a3;
    do
    {
      uint64_t v10 = std::function<std::string_view ()(long long)>::operator()(v7, *a2);
      *uint64_t v4 = std::function<long long ()(std::string_view)>::operator()(v8, v10, v11);
      quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>::operator++(a2, &v12);
      std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v14);
      uint64_t result = std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v13);
      ++v4;
      v9 -= 8;
    }
    while (v9);
    uint64_t v4 = v6;
  }
  v3[2] = v4;
  return result;
}

void sub_1B20E5D58(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v2 + 8;
  _Unwind_Resume(a1);
}

void *std::__advance[abi:ne180100]<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>>(void *a1, int a2)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>::operator+=(a1, a2, &v3);
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v5);
  return std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v4);
}

uint64_t quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>::operator+=@<X0>(void *a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  void v8[4] = *MEMORY[0x1E4F143B8];
  *a1 += a2;
  uint64_t v5 = (uint64_t)(a1 + 1);
  uint64_t v6 = (void *)std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v8, (uint64_t)(a1 + 1));
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v6);
  *a3 = *a1;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)(a3 + 1), v5);
  return std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)(a3 + 5), (uint64_t)(a1 + 5));
}

void sub_1B20E5E80(_Unwind_Exception *a1)
{
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *std::function<long long ()(std::string_view)>::operator=(void *a1, uint64_t a2)
{
  void v4[4] = *MEMORY[0x1E4F143B8];
  std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<long long ()(std::string_view)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v4);
  return a1;
}

void *std::function<std::string_view ()(long long)>::operator=(void *a1, uint64_t a2)
{
  void v4[4] = *MEMORY[0x1E4F143B8];
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<std::string_view ()(long long)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v4);
  return a1;
}

void *std::__function::__value_func<std::string_view ()(long long)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1B20E61E4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__value_func<long long ()(std::string_view)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1B20E6450(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t *std::__uninitialized_allocator_copy[abi:ne180100]<std::allocator<long long>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,long long *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  v26[4] = *MEMORY[0x1E4F143B8];
  uint64_t v19 = *a2;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v20, (uint64_t)(a2 + 1));
  std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)v21, (uint64_t)(a2 + 5));
  uint64_t v16 = *a3;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v17, (uint64_t)(a3 + 1));
  std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)v18, (uint64_t)(a3 + 5));
  std::__unwrap_range[abi:ne180100]<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>>(&v19, &v16, &v22);
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v18);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v17);
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v21);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v20);
  uint64_t v13 = v22;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v14, (uint64_t)v23);
  std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)v15, (uint64_t)v24);
  uint64_t v10 = v24[4];
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v11, (uint64_t)v25);
  std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)v12, (uint64_t)v26);
  uint64_t v8 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<long long>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,long long *>(a1, &v13, &v10, a4);
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v12);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v11);
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v15);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v14);
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v26);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v25);
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v24);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v23);
  return v8;
}

void sub_1B20E6630(_Unwind_Exception *a1)
{
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v4);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v3);
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v2);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v1);
  std::tuple<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,BOOL>::~tuple((void *)(v5 - 240));
  _Unwind_Resume(a1);
}

void *std::__unwrap_range[abi:ne180100]<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  void v21[4] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (uint64_t)(a1 + 5);
  uint64_t v13 = *a1;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v14, (uint64_t)(a1 + 1));
  std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)v15, v5);
  uint64_t v19 = v13;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v20, (uint64_t)v14);
  std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)v21, (uint64_t)v15);
  uint64_t v16 = v19;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v17, (uint64_t)v20);
  std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)v18, (uint64_t)v21);
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v21);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v20);
  uint64_t v7 = *a2;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v8, (uint64_t)(a2 + 1));
  std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)v9, (uint64_t)(a2 + 5));
  uint64_t v19 = v7;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v20, (uint64_t)v8);
  std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)v21, (uint64_t)v9);
  uint64_t v10 = v19;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v11, (uint64_t)v20);
  std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)v12, (uint64_t)v21);
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v21);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v20);
  std::pair<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>>::pair[abi:ne180100]<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,0>(a3, &v16, &v10);
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v12);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v11);
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v9);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v8);
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v18);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v17);
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v15);
  return std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v14);
}

void sub_1B20E68C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v11);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v15);
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v14);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v13);
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v12);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](a9);
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v10);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

uint64_t *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<long long>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,long long *>(uint64_t a1, uint64_t *a2, void *a3, uint64_t *a4)
{
  uint64_t v13[4] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *a2;
  if (v6 != *a3)
  {
    do
    {
      uint64_t v8 = std::function<std::string_view ()(long long)>::operator()((uint64_t)(a2 + 1), v6);
      *a4 = std::function<long long ()(std::string_view)>::operator()((uint64_t)(a2 + 5), v8, v9);
      quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>::operator++(a2, &v11);
      std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v13);
      std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v12);
      ++a4;
      uint64_t v6 = *a2;
    }
    while (*a2 != *a3);
  }
  return a4;
}

void *std::pair<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>>::pair[abi:ne180100]<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,0>(void *a1, void *a2, void *a3)
{
  *a1 = *a2;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)(a1 + 1), (uint64_t)(a2 + 1));
  std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)(a1 + 5), (uint64_t)(a2 + 5));
  a1[9] = *a3;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)(a1 + 10), (uint64_t)(a3 + 1));
  std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)(a1 + 14), (uint64_t)(a3 + 5));
  return a1;
}

void *std::__copy[abi:ne180100]<std::_ClassicAlgPolicy,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,long long *>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  void v14[4] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = (uint64_t)(a1 + 5);
  uint64_t v12 = *a1;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v13, (uint64_t)(a1 + 1));
  std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)v14, v7);
  uint64_t v9 = *a2;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v10, (uint64_t)(a2 + 1));
  std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)v11, (uint64_t)(a2 + 5));
  std::__dispatch_copy_or_move[abi:ne180100]<std::_ClassicAlgPolicy,std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,long long *>(&v12, &v9, a3, a4);
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v11);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v10);
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v14);
  return std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v13);
}

void sub_1B20E6BB4(_Unwind_Exception *a1)
{
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v4);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v3);
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v2);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *std::__dispatch_copy_or_move[abi:ne180100]<std::_ClassicAlgPolicy,std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,long long *>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  void v14[4] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = (uint64_t)(a1 + 5);
  uint64_t v12 = *a1;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v13, (uint64_t)(a1 + 1));
  std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)v14, v7);
  uint64_t v9 = *a2;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v10, (uint64_t)(a2 + 1));
  std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)v11, (uint64_t)(a2 + 5));
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,long long *,0>(&v12, &v9, a3, a4);
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v11);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v10);
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v14);
  return std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v13);
}

void sub_1B20E6CE4(_Unwind_Exception *a1)
{
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v4);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v3);
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v2);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,long long *,0>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  void v39[4] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = (uint64_t)(a1 + 1);
  uint64_t v32 = *a1;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v33, (uint64_t)(a1 + 1));
  std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)v34, (uint64_t)(a1 + 5));
  uint64_t v29 = *a2;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v30, (uint64_t)(a2 + 1));
  std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)v31, (uint64_t)(a2 + 5));
  std::__unwrap_range[abi:ne180100]<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>>(&v32, &v29, &v35);
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v31);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v30);
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v34);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v33);
  uint64_t v23 = v35;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v24, (uint64_t)v36);
  std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)v25, (uint64_t)v37);
  uint64_t v20 = v37[4];
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v21, (uint64_t)v38);
  std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)v22, (uint64_t)v39);
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,long long *>(&v23, &v20, a3, &v26);
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v22);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v21);
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v25);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v24);
  uint64_t v14 = *a1;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v15, v8);
  std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)v16, (uint64_t)(a1 + 5));
  uint64_t v11 = v26;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v12, (uint64_t)v27);
  std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)v13, (uint64_t)v28);
  std::__rewrap_range[abi:ne180100]<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>>(&v14, &v11, &v17);
  uint64_t v9 = v28[4];
  *a4 = v17;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)(a4 + 1), (uint64_t)v18);
  std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)(a4 + 5), (uint64_t)v19);
  a4[9] = v9;
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v19);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v18);
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v13);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v12);
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v16);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v15);
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v28);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v27);
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v39);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v38);
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v37);
  return std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v36);
}

void sub_1B20E6FD4(_Unwind_Exception *a1)
{
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v1);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v6);
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v5);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v3);
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v4);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v2);
  std::tuple<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,BOOL>::~tuple((void *)(v7 - 240));
  _Unwind_Resume(a1);
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,long long *>@<X0>(uint64_t *a1@<X1>, void *a2@<X2>, uint64_t *a3@<X3>, uint64_t *a4@<X8>)
{
  void v14[4] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *a1;
  if (v7 != *a2)
  {
    do
    {
      uint64_t v9 = std::function<std::string_view ()(long long)>::operator()((uint64_t)(a1 + 1), v7);
      *a3++ = std::function<long long ()(std::string_view)>::operator()((uint64_t)(a1 + 5), v9, v10);
      quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>::operator++(a1, &v12);
      std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v14);
      std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v13);
      uint64_t v7 = *a1;
    }
    while (*a1 != *a2);
  }
  *a4 = v7;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)(a4 + 1), (uint64_t)(a1 + 1));
  uint64_t result = std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)(a4 + 5), (uint64_t)(a1 + 5));
  a4[9] = (uint64_t)a3;
  return result;
}

void *std::__rewrap_range[abi:ne180100]<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  void v12[4] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (uint64_t)(a1 + 5);
  uint64_t v10 = *a1;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v11, (uint64_t)(a1 + 1));
  std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)v12, v5);
  uint64_t v7 = *a2;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v8, (uint64_t)(a2 + 1));
  std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)v9, (uint64_t)(a2 + 5));
  std::__rewrap_iter[abi:ne180100]<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,std::__unwrap_iter_impl<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,false>>(&v10, &v7, a3);
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v9);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v8);
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v12);
  return std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v11);
}

void *std::__rewrap_iter[abi:ne180100]<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,std::__unwrap_iter_impl<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,false>>@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  void v11[4] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (uint64_t)(a1 + 5);
  void v9[4] = *a1;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v10, (uint64_t)(a1 + 1));
  std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)v11, v5);
  uint64_t v7 = *a2;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v8, (uint64_t)(a2 + 1));
  std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)v9, (uint64_t)(a2 + 5));
  *a3 = v7;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)(a3 + 1), (uint64_t)v8);
  std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)(a3 + 5), (uint64_t)v9);
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v9);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v8);
  std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](v11);
  return std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v10);
}

uint64_t std::__optional_destruct_base<std::tuple<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,BOOL>,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 152))
  {
    std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100]((void *)(a1 + 112));
    std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100]((void *)(a1 + 80));
    std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100]((void *)(a1 + 40));
    std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
  }
  return a1;
}

void *std::__function::__value_func<long long ()(std::string_view)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>,std::string_view,std::__identity,std::function<BOOL ()(std::string_view const&,std::string_view const&)>>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  void v24[4] = *MEMORY[0x1E4F143B8];
  uint64_t v10 = a1 + 1;
  uint64_t v21 = *a1;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v22, (uint64_t)(a1 + 1));
  uint64_t v19 = *a2;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v20, (uint64_t)(a2 + 1));
  unint64_t v11 = std::_IterOps<std::_ClassicAlgPolicy>::distance[abi:ne180100]<quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>(&v21, &v19);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v20);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v22);
  if (v11)
  {
    do
    {
      uint64_t v16 = *a1;
      std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v18, (uint64_t)v10);
      unint64_t v12 = v11 >> 1;
      uint64_t v17 = v16 + (int)(v11 >> 1);
      uint64_t v23 = v17;
      std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v24, (uint64_t)v18);
      std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v24);
      uint64_t v23 = std::function<std::string_view ()(long long)>::operator()((uint64_t)v18, v17);
      v24[0] = v13;
      uint64_t v14 = *(void *)(a4 + 24);
      if (!v14) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v14 + 48))(v14, &v23, a3))
      {
        uint64_t v23 = v17 + 1;
        std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v24, (uint64_t)v18);
        *a1 = v23;
        std::__function::__value_func<std::string_view ()(long long)>::operator=[abi:ne180100](v10, (uint64_t)v24);
        std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v24);
        unint64_t v12 = v11 + ~v12;
      }
      std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v18);
      unint64_t v11 = v12;
    }
    while (v12);
  }
  *a5 = *a1;
  return std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)(a5 + 1), (uint64_t)v10);
}

void sub_1B20E762C(_Unwind_Exception *a1)
{
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v2);
  std::__function::__value_func<std::string_view ()(long long)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<BOOL ()(std::string_view const&,std::string_view const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void quasar::EndPointer::createEndPointer(quasar::EndPointer *this@<X0>, const kaldi::quasar::OnlineLatticeBiglmFasterDecoderConfig *a2@<X2>, const quasar::EndPointModelConfig *a3@<X3>, void *a4@<X8>)
{
  *a4 = 0;
  uint64_t v5 = *((unsigned __int8 *)a2 + 23);
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *((void *)a2 + 1);
  }
  if (v5)
  {
    if (!a3) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v6 = *((unsigned __int8 *)this + 63);
    if ((v6 & 0x80u) != 0) {
      uint64_t v6 = *((void *)this + 6);
    }
    if (!v6 || (a3 & 1) == 0) {
LABEL_11:
    }
      std::make_unique[abi:ne180100]<quasar::BasicEndPointer,kaldi::quasar::OnlineLatticeBiglmFasterDecoderConfig const&,quasar::EndPointDecoderConfig const&>();
  }
  operator new();
}

void sub_1B20E77E0(_Unwind_Exception *exception_object)
{
  *uint64_t v1 = 0;
  _Unwind_Resume(exception_object);
}

void std::make_unique[abi:ne180100]<quasar::BasicEndPointer,kaldi::quasar::OnlineLatticeBiglmFasterDecoderConfig const&,quasar::EndPointDecoderConfig const&>()
{
}

void sub_1B20E78D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  quasar::EndPointDecoderConfig::~EndPointDecoderConfig((quasar::EndPointDecoderConfig *)va);
  MEMORY[0x1B3EA8670](v2, 0x10B3C407EB90683);
  _Unwind_Resume(a1);
}

uint64_t quasar::EndPointDecoderConfig::init(uint64_t this)
{
  if (*(char *)(this + 63) < 0)
  {
    if (!*(void *)(this + 48)) {
      return this;
    }
LABEL_5:
    _ZNSt3__115allocate_sharedB8ne180100IN5kaldi5nnet14NnetENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_();
  }
  if (*(unsigned char *)(this + 63)) {
    goto LABEL_5;
  }
  return this;
}

void sub_1B20E7AE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::EndPointer::featuresToJsonString(int a1, quasar *a2, quasar *a3, quasar *a4, uint64_t *a5, unsigned int **a6, quasar *a7, quasar *a8, float a9, float a10, float a11, float a12, float a13, quasar *a14)
{
  quasar::PTree::PTree((quasar::PTree *)v52);
  std::string::basic_string[abi:ne180100]<0>(&__v, quasar::EP_NUM_OF_WORDS_STR[0]);
  LODWORD(v43.__r_.__value_.__l.__data_) = quasar::getType(a2);
  std::to_string((std::string *)&v43.__r_.__value_.__r.__words[1], (int)a2);
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  char v47 = 1;
  quasar::PTree::putChild((uint64_t)v52, (uint64_t)&__v, (uint64_t)&v43, 1);
  quasar::PTree::~PTree((quasar::PTree *)&v43);
  if (SHIBYTE(__v.__end_) < 0) {
    operator delete(__v.__first_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__v, quasar::EP_NUM_TRAILING_SIL_STR[0]);
  LODWORD(v43.__r_.__value_.__l.__data_) = quasar::getType(a3);
  std::to_string((std::string *)&v43.__r_.__value_.__r.__words[1], (int)a3);
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  char v47 = 1;
  quasar::PTree::putChild((uint64_t)v52, (uint64_t)&__v, (uint64_t)&v43, 1);
  quasar::PTree::~PTree((quasar::PTree *)&v43);
  if (SHIBYTE(__v.__end_) < 0) {
    operator delete(__v.__first_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__v, "num-frames");
  LODWORD(v43.__r_.__value_.__l.__data_) = quasar::getType(a4);
  std::to_string((std::string *)&v43.__r_.__value_.__r.__words[1], (int)a4);
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  char v47 = 1;
  quasar::PTree::putChild((uint64_t)v52, (uint64_t)&__v, (uint64_t)&v43, 1);
  quasar::PTree::~PTree((quasar::PTree *)&v43);
  if (SHIBYTE(__v.__end_) < 0) {
    operator delete(__v.__first_);
  }
  uint64_t v26 = (quasar *)std::string::basic_string[abi:ne180100]<0>(&__v, quasar::EP_EOS_LIKELIHOOD_STR[0]);
  LODWORD(v43.__r_.__value_.__l.__data_) = quasar::getType(v26, a9);
  std::to_string((std::string *)&v43.__r_.__value_.__r.__words[1], a9);
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  char v47 = 1;
  quasar::PTree::putChild((uint64_t)v52, (uint64_t)&__v, (uint64_t)&v43, 1);
  quasar::PTree::~PTree((quasar::PTree *)&v43);
  if (SHIBYTE(__v.__end_) < 0) {
    operator delete(__v.__first_);
  }
  uint64_t v27 = (quasar *)std::string::basic_string[abi:ne180100]<0>(&__v, quasar::EP_ACOUSTIC_EP_SCORE_STR[0]);
  LODWORD(v43.__r_.__value_.__l.__data_) = quasar::getType(v27, a10);
  std::to_string((std::string *)&v43.__r_.__value_.__r.__words[1], a10);
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  char v47 = 1;
  quasar::PTree::putChild((uint64_t)v52, (uint64_t)&__v, (uint64_t)&v43, 1);
  quasar::PTree::~PTree((quasar::PTree *)&v43);
  if (SHIBYTE(__v.__end_) < 0) {
    operator delete(__v.__first_);
  }
  if (*a5 != a5[1])
  {
    std::string::basic_string[abi:ne180100]<0>(&__v, "sequence-of-words");
    v49[0] = " ";
    v49[1] = (void *)1;
    quasar::join<std::vector<std::string>>(a5, (uint64_t *)v49);
    quasar::PTree::PTree(&v43, &__p);
    quasar::PTree::putChild((uint64_t)v52, (uint64_t)&__v, (uint64_t)&v43, 1);
    quasar::PTree::~PTree((quasar::PTree *)&v43);
    if (SHIBYTE(__p.__end_cap_.__value_) < 0) {
      operator delete(__p.__begin_);
    }
    if (SHIBYTE(__v.__end_) < 0) {
      operator delete(__v.__first_);
    }
  }
  uint64_t v28 = *a6;
  uint64_t v29 = a6[1];
  if (*a6 != v29)
  {
    uint64_t v30 = a7;
    memset(&__p, 0, sizeof(__p));
    do
    {
      std::to_string(&v43, *v28);
      std::vector<std::string>::pointer end = __p.__end_;
      if (__p.__end_ >= __p.__end_cap_.__value_)
      {
        unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
        unint64_t v34 = v33 + 1;
        if (v33 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) > v34) {
          unint64_t v34 = 0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) >= 0x555555555555555) {
          unint64_t v35 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v35 = v34;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&__p.__end_cap_;
        if (v35) {
          uint64_t v36 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&__p.__end_cap_, v35);
        }
        else {
          uint64_t v36 = 0;
        }
        v37 = v36 + v33;
        __v.__first_ = v36;
        __v.__begin_ = v37;
        __v.__end_cap_.__value_ = &v36[v35];
        long long v38 = *(_OWORD *)&v43.__r_.__value_.__l.__data_;
        v37->__r_.__value_.__r.__words[2] = v43.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v37->__r_.__value_.__l.__data_ = v38;
        memset(&v43, 0, sizeof(v43));
        __v.__end_ = v37 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&__p, &__v);
        uint64_t v39 = __p.__end_;
        std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
        __p.__end_ = v39;
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v43.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v32 = *(_OWORD *)&v43.__r_.__value_.__l.__data_;
        __p.__end_->__r_.__value_.__r.__words[2] = v43.__r_.__value_.__r.__words[2];
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v32;
        __p.__end_ = end + 1;
      }
      ++v28;
    }
    while (v28 != v29);
    std::string::basic_string[abi:ne180100]<0>(&__v, quasar::EP_PAUSE_COUNTS_STR[0]);
    v48[0] = (uint64_t)" ";
    v48[1] = 1;
    quasar::join<std::vector<std::string>>((uint64_t *)&__p, v48);
    quasar::PTree::PTree(&v43, v49);
    a7 = v30;
    quasar::PTree::putChild((uint64_t)v52, (uint64_t)&__v, (uint64_t)&v43, 1);
    quasar::PTree::~PTree((quasar::PTree *)&v43);
    if (v50 < 0) {
      operator delete(v49[0]);
    }
    if (SHIBYTE(__v.__end_) < 0) {
      operator delete(__v.__first_);
    }
    v43.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
  }
  std::string::basic_string[abi:ne180100]<0>(&__v, "num-input-label-words");
  LODWORD(v43.__r_.__value_.__l.__data_) = quasar::getType(a7);
  std::to_string((std::string *)&v43.__r_.__value_.__r.__words[1], (int)a7);
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  char v47 = 1;
  quasar::PTree::putChild((uint64_t)v52, (uint64_t)&__v, (uint64_t)&v43, 1);
  quasar::PTree::~PTree((quasar::PTree *)&v43);
  if (SHIBYTE(__v.__end_) < 0) {
    operator delete(__v.__first_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__v, "stream-conf");
  LODWORD(v43.__r_.__value_.__l.__data_) = quasar::getType(a8);
  std::to_string((std::string *)&v43.__r_.__value_.__r.__words[1], (int)a8);
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  char v47 = 1;
  quasar::PTree::putChild((uint64_t)v52, (uint64_t)&__v, (uint64_t)&v43, 1);
  quasar::PTree::~PTree((quasar::PTree *)&v43);
  if (SHIBYTE(__v.__end_) < 0) {
    operator delete(__v.__first_);
  }
  uint64_t v40 = (quasar *)std::string::basic_string[abi:ne180100]<0>(&__v, quasar::EP_SILENCE_POSTERIOR_STR[0]);
  LODWORD(v43.__r_.__value_.__l.__data_) = quasar::getType(v40, a11);
  std::to_string((std::string *)&v43.__r_.__value_.__r.__words[1], a11);
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  char v47 = 1;
  quasar::PTree::putChild((uint64_t)v52, (uint64_t)&__v, (uint64_t)&v43, 1);
  quasar::PTree::~PTree((quasar::PTree *)&v43);
  if (SHIBYTE(__v.__end_) < 0) {
    operator delete(__v.__first_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__v, (char *)quasar::EP_SPG_SILENCE_FRAMES_COUNT_STR);
  LODWORD(v43.__r_.__value_.__l.__data_) = quasar::getType((quasar *)a14);
  std::to_string((std::string *)&v43.__r_.__value_.__r.__words[1], (int)a14);
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  char v47 = 1;
  quasar::PTree::putChild((uint64_t)v52, (uint64_t)&__v, (uint64_t)&v43, 1);
  quasar::PTree::~PTree((quasar::PTree *)&v43);
  if (SHIBYTE(__v.__end_) < 0) {
    operator delete(__v.__first_);
  }
  v41 = (quasar *)std::string::basic_string[abi:ne180100]<0>(&__v, (char *)quasar::EP_SPG_SILENCE_POSTERIOR_STR);
  LODWORD(v43.__r_.__value_.__l.__data_) = quasar::getType(v41, a12);
  std::to_string((std::string *)&v43.__r_.__value_.__r.__words[1], a12);
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  char v47 = 1;
  quasar::PTree::putChild((uint64_t)v52, (uint64_t)&__v, (uint64_t)&v43, 1);
  quasar::PTree::~PTree((quasar::PTree *)&v43);
  if (SHIBYTE(__v.__end_) < 0) {
    operator delete(__v.__first_);
  }
  uint64_t v42 = (quasar *)std::string::basic_string[abi:ne180100]<0>(&__v, (char *)quasar::EP_SPG_SILENCE_PROBABILITY_RAW_STR);
  LODWORD(v43.__r_.__value_.__l.__data_) = quasar::getType(v42, a13);
  std::to_string((std::string *)&v43.__r_.__value_.__r.__words[1], a13);
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  char v47 = 1;
  quasar::PTree::putChild((uint64_t)v52, (uint64_t)&__v, (uint64_t)&v43, 1);
  quasar::PTree::~PTree((quasar::PTree *)&v43);
  if (SHIBYTE(__v.__end_) < 0) {
    operator delete(__v.__first_);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v43);
  quasar::PTree::writeJson();
}

void sub_1B20E83BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, long long a11, long long a12, long long a13, long long a14, long long a15, long long a16, long long a17, long long a18, long long a19, long long a20,long long a21,long long a22,long long a23,long long a24,long long a25,long long a26,long long a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  quasar::PTree::~PTree((quasar::PTree *)&a11);
  if (a37 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v43 - 153) < 0) {
    operator delete(*(void **)(v43 - 176));
  }
  *(void *)&a11 = &a38;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  quasar::PTree::~PTree((quasar::PTree *)(v43 - 240));
  if (a2 == 1)
  {
    uint64_t v46 = __cxa_begin_catch(a1);
    if (quasar::gLogLevel >= 2)
    {
      char v47 = v46;
      a26 = 0u;
      a27 = 0u;
      a24 = 0u;
      a25 = 0u;
      a22 = 0u;
      a23 = 0u;
      a20 = 0u;
      a21 = 0u;
      a18 = 0u;
      a19 = 0u;
      a16 = 0u;
      a17 = 0u;
      a14 = 0u;
      a15 = 0u;
      a12 = 0u;
      a13 = 0u;
      a11 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a11);
      v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a11, (uint64_t)"Writing to json string failed. ", 31);
      uint64_t v49 = (const char *)(*(uint64_t (**)(void *))(*(void *)v47 + 16))(v47);
      size_t v50 = strlen(v49);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)v49, v50);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&a11);
    }
    __cxa_end_catch();
    std::string::basic_string[abi:ne180100]<0>(a10, "");
    JUMPOUT(0x1B20E8384);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::BasicEndPointer::BasicEndPointer(uint64_t a1, _OWORD *a2, const quasar::EndPointDecoderConfig *a3)
{
  *(void *)a1 = &unk_1F0A52E78;
  long long v5 = *a2;
  *(_OWORD *)(a1 + 24) = a2[1];
  *(_OWORD *)(a1 + 8) = v5;
  long long v6 = a2[2];
  long long v7 = a2[3];
  long long v8 = a2[4];
  *(_OWORD *)(a1 + 88) = a2[5];
  *(_OWORD *)(a1 + 72) = v8;
  *(_OWORD *)(a1 + 56) = v7;
  *(_OWORD *)(a1 + 40) = v6;
  long long v9 = a2[6];
  long long v10 = a2[7];
  long long v11 = a2[8];
  *(_OWORD *)(a1 + 152) = a2[9];
  *(_OWORD *)(a1 + 136) = v11;
  *(_OWORD *)(a1 + 120) = v10;
  *(_OWORD *)(a1 + 104) = v9;
  unint64_t v12 = (int *)(a2 + 7);
  quasar::EndPointDecoderConfig::EndPointDecoderConfig((quasar::EndPointDecoderConfig *)(a1 + 168), a3);
  *(void *)(a1 + 312) = 0;
  *(_DWORD *)(a1 + 320) = 0;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  if (*((unsigned char *)a2 + 144)) {
    uint64_t v13 = (int *)a2 + 39;
  }
  else {
    uint64_t v13 = v12;
  }
  quasar::MovingAverage::init((quasar::MovingAverage *)(a1 + 312), *v13);
  return a1;
}

void sub_1B20E8754(_Unwind_Exception *a1)
{
  std::deque<int>::~deque[abi:ne180100](v2);
  quasar::EndPointDecoderConfig::~EndPointDecoderConfig(v1);
  _Unwind_Resume(a1);
}

BOOL quasar::BasicEndPointer::evalEndPoint(uint64_t a1, double a2, float a3, float a4, uint64_t a5, int a6, int a7, int a8)
{
  if (a3 >= 0.0 && *(unsigned char *)(a1 + 176) != 0) {
    return *(float *)(a1 + 172) < a3;
  }
  quasar::MovingAverage::add((quasar::MovingAverage *)(a1 + 312), a4);
  if (a6 <= 0)
  {
    BOOL v13 = 0;
    if (a7 < 1 || *(_DWORD *)(a1 + 128) > a8) {
      return v13;
    }
  }
  else if (a7 < 1)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 152))
  {
    int v14 = (int)(float)(expf((float)(*(float *)(a1 + 156) * (float)(*(_DWORD *)(a1 + 124) - a8)) / (float)*(int *)(a1 + 124))
                     * (float)*(int *)(a1 + 120));
    int v15 = *(_DWORD *)(a1 + 164);
    if (v15 >= v14)
    {
      if (*(_DWORD *)(a1 + 160) <= v14) {
        int v15 = v14;
      }
      else {
        int v15 = *(_DWORD *)(a1 + 160);
      }
    }
    quasar::MovingAverage::resize(a1 + 312, v15);
  }
  else
  {
    int v15 = *(_DWORD *)(a1 + 120);
    int v16 = *(_DWORD *)(a1 + 124);
    if (v16 <= a8) {
      int v15 = v15 * v16 / a8;
    }
  }
  BOOL v13 = v15 <= a7;
  if (*(unsigned char *)(a1 + 144)
    && quasar::MovingAverage::getAverage((quasar::MovingAverage *)(a1 + 312)) < *(float *)(a1 + 148))
  {
    return 0;
  }
  return v13;
}

uint64_t quasar::BasicEndPointer::info(quasar::BasicEndPointer *this)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"BasicEndPointer inter-utt-sil=", 30);
  uint64_t v1 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)", max-utt-length=", 17);
  uint64_t v2 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", max-utt-sil=", 14);
  std::ostream::operator<<();
  std::stringbuf::str();
  v5[0] = *MEMORY[0x1E4FBA408];
  uint64_t v3 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v5 + *(void *)(v5[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v6[0] = v3;
  v6[1] = MEMORY[0x1E4FBA470] + 16;
  if (v7 < 0) {
    operator delete((void *)v6[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EA8520](&v8);
}

void sub_1B20E8A5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::BasicEndPointer::reportEndPoint(quasar::BasicEndPointer *this)
{
  return 0;
}

uint64_t quasar::BasicEndPointer::status(quasar::BasicEndPointer *this)
{
  return 100;
}

uint64_t quasar::BasicEndPointer::pausesAsBool(quasar::BasicEndPointer *this)
{
  return 0;
}

void quasar::NnetEndPointer::initFeatureSeq(quasar::NnetEndPointer *this)
{
  uint64_t v1 = *((void *)this + 19);
  if (*((void *)this + 20) != v1)
  {
    unint64_t v3 = 0;
    uint64_t v4 = (int **)((char *)this + 192);
    v103 = (char *)this + 208;
    do
    {
      long long v5 = (void *)(v1 + 24 * v3);
      size_t v6 = strlen(quasar::EP_NUM_OF_WORDS_STR[0]);
      size_t v7 = v6;
      size_t v8 = *((unsigned __int8 *)v5 + 23);
      if ((v8 & 0x80) != 0)
      {
        size_t v10 = v5[1];
        if (v6 != v10)
        {
          long long v11 = quasar::EP_NUM_TRAILING_SIL_STR[0];
          size_t v12 = strlen(quasar::EP_NUM_TRAILING_SIL_STR[0]);
          goto LABEL_18;
        }
        if (v6 == -1) {
LABEL_266:
        }
          std::string::__throw_out_of_range[abi:ne180100]();
        long long v9 = (uint64_t *)*v5;
      }
      else
      {
        if (v6 != v8)
        {
          long long v11 = quasar::EP_NUM_TRAILING_SIL_STR[0];
          size_t v12 = strlen(quasar::EP_NUM_TRAILING_SIL_STR[0]);
LABEL_14:
          if (v12 == v8 && !memcmp(v5, v11, v8)) {
            goto LABEL_26;
          }
LABEL_22:
          BOOL v13 = v5;
          if (v8 != 10)
          {
            int v14 = quasar::EP_EOS_LIKELIHOOD_STR[0];
            size_t v15 = strlen(quasar::EP_EOS_LIKELIHOOD_STR[0]);
LABEL_52:
            size_t v10 = v8;
            unint64_t v34 = v5;
            if (v15 != v8)
            {
              unint64_t v35 = quasar::EP_ACOUSTIC_EP_SCORE_STR[0];
              size_t v36 = strlen(quasar::EP_ACOUSTIC_EP_SCORE_STR[0]);
LABEL_63:
              size_t v10 = v8;
              long long v38 = v5;
              if (v36 != v8)
              {
                uint64_t v39 = quasar::EP_PAUSE_COUNTS_STR[0];
                size_t v40 = strlen(quasar::EP_PAUSE_COUNTS_STR[0]);
LABEL_74:
                if (v40 == v8 && !memcmp(v5, v39, v8)) {
                  goto LABEL_103;
                }
LABEL_93:
                uint64_t v46 = v5;
                if (v8 != 11)
                {
                  if (v8 == 21)
                  {
                    BOOL v47 = *v5 == 0x75706E692D6D756ELL && v5[1] == 0x2D6C6562616C2D74;
                    if (v47 && *(void *)((char *)v5 + 13) == 0x7364726F772D6C65) {
                      goto LABEL_161;
                    }
                  }
LABEL_102:
                  uint64_t v49 = quasar::EP_SILENCE_POSTERIOR_STR[0];
                  size_t v50 = strlen(quasar::EP_SILENCE_POSTERIOR_STR[0]);
                  goto LABEL_183;
                }
                goto LABEL_178;
              }
              goto LABEL_72;
            }
            goto LABEL_61;
          }
          goto LABEL_47;
        }
        long long v9 = v5;
        if (v7 == -1) {
          goto LABEL_266;
        }
      }
      if (!memcmp(v9, quasar::EP_NUM_OF_WORDS_STR[0], v7))
      {
        uint64_t v17 = (_DWORD *)*((void *)this + 25);
        unint64_t v16 = *((void *)this + 26);
        if ((unint64_t)v17 >= v16)
        {
          uint64_t v22 = *v4;
          uint64_t v23 = v17 - *v4;
          unint64_t v24 = v23 + 1;
          if ((unint64_t)(v23 + 1) >> 62) {
            goto LABEL_267;
          }
          uint64_t v25 = v16 - (void)v22;
          if (v25 >> 1 > v24) {
            unint64_t v24 = v25 >> 1;
          }
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v26 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v26 = v24;
          }
          if (v26)
          {
            uint64_t v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v103, v26);
            uint64_t v22 = (int *)*((void *)this + 24);
            uint64_t v17 = (_DWORD *)*((void *)this + 25);
          }
          else
          {
            uint64_t v27 = 0;
          }
          v58 = &v27[4 * v23];
          *(_DWORD *)v58 = 0;
          v59 = v58 + 4;
          while (v17 != v22)
          {
            int v60 = *--v17;
            *((_DWORD *)v58 - 1) = v60;
            v58 -= 4;
          }
          goto LABEL_261;
        }
        *uint64_t v17 = 0;
        uint64_t v18 = v17 + 1;
        goto LABEL_210;
      }
      long long v11 = quasar::EP_NUM_TRAILING_SIL_STR[0];
      size_t v12 = strlen(quasar::EP_NUM_TRAILING_SIL_STR[0]);
      if ((v8 & 0x80) == 0) {
        goto LABEL_14;
      }
      size_t v10 = v5[1];
LABEL_18:
      if (v12 == v10)
      {
        if (v10 == -1) {
          std::string::__throw_out_of_range[abi:ne180100]();
        }
        if (!memcmp((const void *)*v5, v11, v10))
        {
LABEL_26:
          uint64_t v20 = (int *)*((void *)this + 25);
          unint64_t v19 = *((void *)this + 26);
          if ((unint64_t)v20 < v19)
          {
            int v21 = 1;
            goto LABEL_209;
          }
          uint64_t v22 = *v4;
          uint64_t v28 = v20 - *v4;
          unint64_t v29 = v28 + 1;
          if ((unint64_t)(v28 + 1) >> 62) {
            goto LABEL_267;
          }
          uint64_t v30 = v19 - (void)v22;
          if (v30 >> 1 > v29) {
            unint64_t v29 = v30 >> 1;
          }
          if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v26 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v26 = v29;
          }
          if (v26)
          {
            uint64_t v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v103, v26);
            uint64_t v22 = (int *)*((void *)this + 24);
            uint64_t v20 = (int *)*((void *)this + 25);
          }
          else
          {
            uint64_t v27 = 0;
          }
          v58 = &v27[4 * v28];
          *(_DWORD *)v58 = 1;
          v59 = v58 + 4;
          while (v20 != v22)
          {
            int v64 = *--v20;
            *((_DWORD *)v58 - 1) = v64;
            v58 -= 4;
          }
LABEL_261:
          *((void *)this + 24) = v58;
          *((void *)this + 25) = v59;
          *((void *)this + 26) = &v27[4 * v26];
          if (v22) {
            operator delete(v22);
          }
LABEL_263:
          *((void *)this + 25) = v59;
          goto LABEL_264;
        }
        if ((v8 & 0x80) == 0) {
          goto LABEL_22;
        }
        size_t v10 = v5[1];
      }
      if (v10 != 10)
      {
        int v14 = quasar::EP_EOS_LIKELIHOOD_STR[0];
        size_t v15 = strlen(quasar::EP_EOS_LIKELIHOOD_STR[0]);
        goto LABEL_58;
      }
      BOOL v13 = (uint64_t *)*v5;
LABEL_47:
      uint64_t v31 = *v13;
      int v32 = *((unsigned __int16 *)v13 + 4);
      if (v31 == 0x6D6172662D6D756ELL && v32 == 29541)
      {
        uint64_t v20 = (int *)*((void *)this + 25);
        unint64_t v37 = *((void *)this + 26);
        if ((unint64_t)v20 >= v37)
        {
          uint64_t v22 = *v4;
          uint64_t v43 = v20 - *v4;
          unint64_t v44 = v43 + 1;
          if ((unint64_t)(v43 + 1) >> 62) {
            goto LABEL_267;
          }
          uint64_t v45 = v37 - (void)v22;
          if (v45 >> 1 > v44) {
            unint64_t v44 = v45 >> 1;
          }
          if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v26 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v26 = v44;
          }
          if (v26)
          {
            uint64_t v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v103, v26);
            uint64_t v22 = (int *)*((void *)this + 24);
            uint64_t v20 = (int *)*((void *)this + 25);
          }
          else
          {
            uint64_t v27 = 0;
          }
          v58 = &v27[4 * v43];
          *(_DWORD *)v58 = 2;
          v59 = v58 + 4;
          while (v20 != v22)
          {
            int v65 = *--v20;
            *((_DWORD *)v58 - 1) = v65;
            v58 -= 4;
          }
          goto LABEL_261;
        }
        int v21 = 2;
        goto LABEL_209;
      }
      int v14 = quasar::EP_EOS_LIKELIHOOD_STR[0];
      size_t v15 = strlen(quasar::EP_EOS_LIKELIHOOD_STR[0]);
      if ((v8 & 0x80) == 0) {
        goto LABEL_52;
      }
      size_t v10 = v5[1];
LABEL_58:
      if (v15 != v10)
      {
        unint64_t v35 = quasar::EP_ACOUSTIC_EP_SCORE_STR[0];
        size_t v36 = strlen(quasar::EP_ACOUSTIC_EP_SCORE_STR[0]);
        goto LABEL_69;
      }
      if (v10 == -1) {
        std::string::__throw_out_of_range[abi:ne180100]();
      }
      unint64_t v34 = (uint64_t *)*v5;
LABEL_61:
      if (!memcmp(v34, v14, v10))
      {
        uint64_t v20 = (int *)*((void *)this + 25);
        unint64_t v41 = *((void *)this + 26);
        if ((unint64_t)v20 >= v41)
        {
          uint64_t v22 = *v4;
          uint64_t v52 = v20 - *v4;
          unint64_t v53 = v52 + 1;
          if ((unint64_t)(v52 + 1) >> 62) {
            goto LABEL_267;
          }
          uint64_t v54 = v41 - (void)v22;
          if (v54 >> 1 > v53) {
            unint64_t v53 = v54 >> 1;
          }
          if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v26 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v26 = v53;
          }
          if (v26)
          {
            uint64_t v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v103, v26);
            uint64_t v22 = (int *)*((void *)this + 24);
            uint64_t v20 = (int *)*((void *)this + 25);
          }
          else
          {
            uint64_t v27 = 0;
          }
          v58 = &v27[4 * v52];
          *(_DWORD *)v58 = 3;
          v59 = v58 + 4;
          while (v20 != v22)
          {
            int v66 = *--v20;
            *((_DWORD *)v58 - 1) = v66;
            v58 -= 4;
          }
          goto LABEL_261;
        }
        int v21 = 3;
        goto LABEL_209;
      }
      unint64_t v35 = quasar::EP_ACOUSTIC_EP_SCORE_STR[0];
      size_t v36 = strlen(quasar::EP_ACOUSTIC_EP_SCORE_STR[0]);
      if ((v8 & 0x80) == 0) {
        goto LABEL_63;
      }
      size_t v10 = v5[1];
LABEL_69:
      if (v36 != v10)
      {
        uint64_t v39 = quasar::EP_PAUSE_COUNTS_STR[0];
        size_t v40 = strlen(quasar::EP_PAUSE_COUNTS_STR[0]);
        goto LABEL_89;
      }
      if (v10 == -1) {
        std::string::__throw_out_of_range[abi:ne180100]();
      }
      long long v38 = (uint64_t *)*v5;
LABEL_72:
      if (!memcmp(v38, v35, v10))
      {
        uint64_t v20 = (int *)*((void *)this + 25);
        unint64_t v42 = *((void *)this + 26);
        if ((unint64_t)v20 >= v42)
        {
          uint64_t v22 = *v4;
          uint64_t v55 = v20 - *v4;
          unint64_t v56 = v55 + 1;
          if ((unint64_t)(v55 + 1) >> 62) {
            goto LABEL_267;
          }
          uint64_t v57 = v42 - (void)v22;
          if (v57 >> 1 > v56) {
            unint64_t v56 = v57 >> 1;
          }
          if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v26 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v26 = v56;
          }
          if (v26)
          {
            uint64_t v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v103, v26);
            uint64_t v22 = (int *)*((void *)this + 24);
            uint64_t v20 = (int *)*((void *)this + 25);
          }
          else
          {
            uint64_t v27 = 0;
          }
          v58 = &v27[4 * v55];
          *(_DWORD *)v58 = 4;
          v59 = v58 + 4;
          while (v20 != v22)
          {
            int v67 = *--v20;
            *((_DWORD *)v58 - 1) = v67;
            v58 -= 4;
          }
          goto LABEL_261;
        }
        int v21 = 4;
        goto LABEL_209;
      }
      uint64_t v39 = quasar::EP_PAUSE_COUNTS_STR[0];
      size_t v40 = strlen(quasar::EP_PAUSE_COUNTS_STR[0]);
      if ((v8 & 0x80) == 0) {
        goto LABEL_74;
      }
      size_t v10 = v5[1];
LABEL_89:
      if (v40 == v10)
      {
        if (v10 == -1) {
          std::string::__throw_out_of_range[abi:ne180100]();
        }
        if (!memcmp((const void *)*v5, v39, v10))
        {
LABEL_103:
          uint64_t v20 = (int *)*((void *)this + 25);
          unint64_t v51 = *((void *)this + 26);
          if ((unint64_t)v20 >= v51)
          {
            uint64_t v22 = *v4;
            uint64_t v61 = v20 - *v4;
            unint64_t v62 = v61 + 1;
            if ((unint64_t)(v61 + 1) >> 62) {
              goto LABEL_267;
            }
            uint64_t v63 = v51 - (void)v22;
            if (v63 >> 1 > v62) {
              unint64_t v62 = v63 >> 1;
            }
            if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v26 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v26 = v62;
            }
            if (v26)
            {
              uint64_t v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v103, v26);
              uint64_t v22 = (int *)*((void *)this + 24);
              uint64_t v20 = (int *)*((void *)this + 25);
            }
            else
            {
              uint64_t v27 = 0;
            }
            v58 = &v27[4 * v61];
            *(_DWORD *)v58 = 5;
            v59 = v58 + 4;
            while (v20 != v22)
            {
              int v74 = *--v20;
              *((_DWORD *)v58 - 1) = v74;
              v58 -= 4;
            }
            goto LABEL_261;
          }
          int v21 = 5;
          goto LABEL_209;
        }
        if ((v8 & 0x80) == 0) {
          goto LABEL_93;
        }
        size_t v10 = v5[1];
      }
      if (v10 != 21) {
        goto LABEL_176;
      }
      if (*(void *)*v5 == 0x75706E692D6D756ELL
        && *(void *)(*v5 + 8) == 0x2D6C6562616C2D74
        && *(void *)(*v5 + 13) == 0x7364726F772D6C65)
      {
LABEL_161:
        uint64_t v20 = (int *)*((void *)this + 25);
        unint64_t v70 = *((void *)this + 26);
        if ((unint64_t)v20 >= v70)
        {
          uint64_t v22 = *v4;
          uint64_t v71 = v20 - *v4;
          unint64_t v72 = v71 + 1;
          if ((unint64_t)(v71 + 1) >> 62) {
            goto LABEL_267;
          }
          uint64_t v73 = v70 - (void)v22;
          if (v73 >> 1 > v72) {
            unint64_t v72 = v73 >> 1;
          }
          if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v26 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v26 = v72;
          }
          if (v26)
          {
            uint64_t v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v103, v26);
            uint64_t v22 = (int *)*((void *)this + 24);
            uint64_t v20 = (int *)*((void *)this + 25);
          }
          else
          {
            uint64_t v27 = 0;
          }
          v58 = &v27[4 * v71];
          *(_DWORD *)v58 = 6;
          v59 = v58 + 4;
          while (v20 != v22)
          {
            int v98 = *--v20;
            *((_DWORD *)v58 - 1) = v98;
            v58 -= 4;
          }
          goto LABEL_261;
        }
        int v21 = 6;
        goto LABEL_209;
      }
      if ((v8 & 0x80) != 0)
      {
        size_t v10 = v5[1];
LABEL_176:
        if (v10 != 11)
        {
          uint64_t v49 = quasar::EP_SILENCE_POSTERIOR_STR[0];
          size_t v50 = strlen(quasar::EP_SILENCE_POSTERIOR_STR[0]);
LABEL_189:
          if (v50 != v10)
          {
            v79 = (const void *)quasar::EP_SPG_SILENCE_FRAMES_COUNT_STR;
            size_t v80 = strlen((const char *)quasar::EP_SPG_SILENCE_FRAMES_COUNT_STR);
            goto LABEL_200;
          }
          if (v10 == -1) {
            std::string::__throw_out_of_range[abi:ne180100]();
          }
          v78 = (uint64_t *)*v5;
          goto LABEL_192;
        }
        uint64_t v46 = (uint64_t *)*v5;
        goto LABEL_178;
      }
      uint64_t v46 = v5;
      if (v8 != 11) {
        goto LABEL_102;
      }
LABEL_178:
      uint64_t v75 = *v46;
      uint64_t v76 = *(uint64_t *)((char *)v46 + 3);
      if (v75 == 0x632D6D6165727473 && v76 == 0x666E6F632D6D6165)
      {
        uint64_t v20 = (int *)*((void *)this + 25);
        unint64_t v81 = *((void *)this + 26);
        if ((unint64_t)v20 >= v81)
        {
          uint64_t v22 = *v4;
          uint64_t v92 = v20 - *v4;
          unint64_t v93 = v92 + 1;
          if ((unint64_t)(v92 + 1) >> 62) {
            goto LABEL_267;
          }
          uint64_t v94 = v81 - (void)v22;
          if (v94 >> 1 > v93) {
            unint64_t v93 = v94 >> 1;
          }
          if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v26 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v26 = v93;
          }
          if (v26)
          {
            uint64_t v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v103, v26);
            uint64_t v22 = (int *)*((void *)this + 24);
            uint64_t v20 = (int *)*((void *)this + 25);
          }
          else
          {
            uint64_t v27 = 0;
          }
          v58 = &v27[4 * v92];
          *(_DWORD *)v58 = 7;
          v59 = v58 + 4;
          while (v20 != v22)
          {
            int v100 = *--v20;
            *((_DWORD *)v58 - 1) = v100;
            v58 -= 4;
          }
          goto LABEL_261;
        }
        int v21 = 7;
        goto LABEL_209;
      }
      uint64_t v49 = quasar::EP_SILENCE_POSTERIOR_STR[0];
      size_t v50 = strlen(quasar::EP_SILENCE_POSTERIOR_STR[0]);
      if ((v8 & 0x80) != 0)
      {
        size_t v10 = v5[1];
        goto LABEL_189;
      }
LABEL_183:
      size_t v10 = v8;
      v78 = v5;
      if (v50 != v8)
      {
        v79 = (const void *)quasar::EP_SPG_SILENCE_FRAMES_COUNT_STR;
        size_t v80 = strlen((const char *)quasar::EP_SPG_SILENCE_FRAMES_COUNT_STR);
        goto LABEL_194;
      }
LABEL_192:
      if (!memcmp(v78, v49, v10))
      {
        uint64_t v20 = (int *)*((void *)this + 25);
        unint64_t v85 = *((void *)this + 26);
        if ((unint64_t)v20 >= v85)
        {
          uint64_t v22 = *v4;
          uint64_t v89 = v20 - *v4;
          unint64_t v90 = v89 + 1;
          if ((unint64_t)(v89 + 1) >> 62) {
            goto LABEL_267;
          }
          uint64_t v91 = v85 - (void)v22;
          if (v91 >> 1 > v90) {
            unint64_t v90 = v91 >> 1;
          }
          if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v26 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v26 = v90;
          }
          if (v26)
          {
            uint64_t v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v103, v26);
            uint64_t v22 = (int *)*((void *)this + 24);
            uint64_t v20 = (int *)*((void *)this + 25);
          }
          else
          {
            uint64_t v27 = 0;
          }
          v58 = &v27[4 * v89];
          *(_DWORD *)v58 = 8;
          v59 = v58 + 4;
          while (v20 != v22)
          {
            int v99 = *--v20;
            *((_DWORD *)v58 - 1) = v99;
            v58 -= 4;
          }
          goto LABEL_261;
        }
        int v21 = 8;
        goto LABEL_209;
      }
      v79 = (const void *)quasar::EP_SPG_SILENCE_FRAMES_COUNT_STR;
      size_t v80 = strlen((const char *)quasar::EP_SPG_SILENCE_FRAMES_COUNT_STR);
      if ((v8 & 0x80) != 0)
      {
        size_t v10 = v5[1];
LABEL_200:
        if (v80 != v10)
        {
          v83 = (const void *)quasar::EP_SPG_SILENCE_POSTERIOR_STR;
          size_t v84 = strlen((const char *)quasar::EP_SPG_SILENCE_POSTERIOR_STR);
LABEL_213:
          if (v84 != v10) {
            goto LABEL_217;
          }
          if (v10 == -1) {
            std::string::__throw_out_of_range[abi:ne180100]();
          }
          v86 = (uint64_t *)*v5;
          size_t v8 = v10;
          goto LABEL_216;
        }
        if (v10 == -1) {
          std::string::__throw_out_of_range[abi:ne180100]();
        }
        v82 = (uint64_t *)*v5;
        goto LABEL_203;
      }
LABEL_194:
      size_t v10 = v8;
      v82 = v5;
      if (v80 != v8)
      {
        v83 = (const void *)quasar::EP_SPG_SILENCE_POSTERIOR_STR;
        size_t v84 = strlen((const char *)quasar::EP_SPG_SILENCE_POSTERIOR_STR);
        goto LABEL_205;
      }
LABEL_203:
      if (!memcmp(v82, v79, v10))
      {
        uint64_t v20 = (int *)*((void *)this + 25);
        unint64_t v87 = *((void *)this + 26);
        if ((unint64_t)v20 >= v87)
        {
          uint64_t v22 = *v4;
          uint64_t v95 = v20 - *v4;
          unint64_t v96 = v95 + 1;
          if ((unint64_t)(v95 + 1) >> 62) {
LABEL_267:
          }
            std::vector<int>::__throw_length_error[abi:ne180100]();
          uint64_t v97 = v87 - (void)v22;
          if (v97 >> 1 > v96) {
            unint64_t v96 = v97 >> 1;
          }
          if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v26 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v26 = v96;
          }
          if (v26)
          {
            uint64_t v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v103, v26);
            uint64_t v22 = (int *)*((void *)this + 24);
            uint64_t v20 = (int *)*((void *)this + 25);
          }
          else
          {
            uint64_t v27 = 0;
          }
          v58 = &v27[4 * v95];
          *(_DWORD *)v58 = 9;
          v59 = v58 + 4;
          while (v20 != v22)
          {
            int v101 = *--v20;
            *((_DWORD *)v58 - 1) = v101;
            v58 -= 4;
          }
          goto LABEL_261;
        }
        int v21 = 9;
LABEL_209:
        *uint64_t v20 = v21;
        uint64_t v18 = v20 + 1;
LABEL_210:
        v59 = v18;
        goto LABEL_263;
      }
      v83 = (const void *)quasar::EP_SPG_SILENCE_POSTERIOR_STR;
      size_t v84 = strlen((const char *)quasar::EP_SPG_SILENCE_POSTERIOR_STR);
      if ((v8 & 0x80) != 0)
      {
        size_t v10 = v5[1];
        goto LABEL_213;
      }
LABEL_205:
      v86 = v5;
      if (v84 != v8) {
        goto LABEL_217;
      }
LABEL_216:
      if (memcmp(v86, v83, v8))
      {
LABEL_217:
        if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v5, (char *)quasar::EP_SPG_SILENCE_PROBABILITY_RAW_STR))
        {
          memset(v105, 0, 272);
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v105);
          v102 = (quasar::NnetEndPointer *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v105, (uint64_t)"Feature unknown, features allowed are: ", 39);
          quasar::NnetEndPointer::allowedFeatures((uint64_t *)&v104, v102);
          std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v102, (uint64_t)&v104);
          std::string::~string(&v104);
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v105);
        }
        int v88 = 11;
        goto LABEL_219;
      }
      int v88 = 10;
LABEL_219:
      LODWORD(v105[0]) = v88;
      std::vector<int>::push_back[abi:ne180100]((uint64_t)v4, v105);
LABEL_264:
      ++v3;
      uint64_t v1 = *((void *)this + 19);
    }
    while (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 20) - v1) >> 3) > v3);
  }
}

void sub_1B20E96C8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&a16);
}

uint64_t quasar::NnetEndPointer::allowedFeatures(quasar::NnetEndPointer *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v30);
  size_t v1 = strlen(quasar::EP_NUM_OF_WORDS_STR[0]);
  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)quasar::EP_NUM_OF_WORDS_STR[0], v1);
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" ", 1);
  size_t v4 = strlen(quasar::EP_NUM_TRAILING_SIL_STR[0]);
  long long v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)quasar::EP_NUM_TRAILING_SIL_STR[0], v4);
  size_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" ", 1);
  size_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"num-frames", 10);
  size_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" ", 1);
  size_t v9 = strlen(quasar::EP_EOS_LIKELIHOOD_STR[0]);
  size_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)quasar::EP_EOS_LIKELIHOOD_STR[0], v9);
  long long v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" ", 1);
  size_t v12 = strlen(quasar::EP_PAUSE_COUNTS_STR[0]);
  BOOL v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)quasar::EP_PAUSE_COUNTS_STR[0], v12);
  int v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" ", 1);
  size_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"num-input-label-words", 21);
  unint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" ", 1);
  uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"stream-conf", 11);
  uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" ", 1);
  size_t v19 = strlen(quasar::EP_SILENCE_POSTERIOR_STR[0]);
  uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)quasar::EP_SILENCE_POSTERIOR_STR[0], v19);
  int v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" ", 1);
  size_t v22 = strlen((const char *)quasar::EP_SPG_SILENCE_FRAMES_COUNT_STR);
  uint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, quasar::EP_SPG_SILENCE_FRAMES_COUNT_STR, v22);
  unint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" ", 1);
  size_t v25 = strlen((const char *)quasar::EP_SPG_SILENCE_POSTERIOR_STR);
  unint64_t v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, quasar::EP_SPG_SILENCE_POSTERIOR_STR, v25);
  uint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" ", 1);
  size_t v28 = strlen((const char *)quasar::EP_SPG_SILENCE_PROBABILITY_RAW_STR);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, quasar::EP_SPG_SILENCE_PROBABILITY_RAW_STR, v28);
  std::stringbuf::str();
  v30[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v30 + *(void *)(v30[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v30[1] = MEMORY[0x1E4FBA470] + 16;
  if (v31 < 0) {
    operator delete((void *)v30[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](&v32);
}

void sub_1B20E9A20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::NnetEndPointer::computeFeats(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, unsigned int **a5@<X4>, int a6@<W5>, int a7@<W6>, int a8@<W7>, float **a9@<X8>, float a10@<S0>, float a11@<S1>, float a12@<S2>, float a13@<S3>)
{
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  uint64_t v14 = *(void *)(a1 + 192);
  if (*(void *)(a1 + 200) != v14)
  {
    uint64_t v23 = a9 + 2;
    float v108 = (float)a7;
    float v109 = (float)a8;
    float v107 = (float)a6;
    float v24 = expf(-a10);
    unint64_t v25 = 0;
    float v26 = (float)a4;
    float v27 = (float)a3;
    float v28 = (float)a2;
    while (2)
    {
      switch(*(_DWORD *)(v14 + 4 * v25))
      {
        case 0:
          uint64_t v30 = a9[1];
          unint64_t v29 = (unint64_t)a9[2];
          if ((unint64_t)v30 < v29)
          {
            *uint64_t v30 = v28;
            char v31 = v30 + 1;
            goto LABEL_45;
          }
          uint64_t v63 = *a9;
          uint64_t v75 = v30 - *a9;
          unint64_t v76 = v75 + 1;
          if ((unint64_t)(v75 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v77 = v29 - (void)v63;
          if (v77 >> 1 > v76) {
            unint64_t v76 = v77 >> 1;
          }
          if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v67 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v67 = v76;
          }
          if (v67)
          {
            v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a9 + 2), v67);
            uint64_t v63 = *a9;
            uint64_t v30 = a9[1];
          }
          else
          {
            v68 = 0;
          }
          unint64_t v96 = (float *)&v68[4 * v75];
          *unint64_t v96 = v28;
          unint64_t v62 = v96 + 1;
          while (v30 != v63)
          {
            int v100 = *((_DWORD *)v30-- - 1);
            *((_DWORD *)v96-- - 1) = v100;
          }
          goto LABEL_168;
        case 1:
          uint64_t v55 = a9[1];
          unint64_t v54 = (unint64_t)a9[2];
          if ((unint64_t)v55 < v54)
          {
            *uint64_t v55 = v27;
            char v31 = v55 + 1;
            goto LABEL_45;
          }
          uint64_t v63 = *a9;
          uint64_t v81 = v55 - *a9;
          unint64_t v82 = v81 + 1;
          if ((unint64_t)(v81 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v83 = v54 - (void)v63;
          if (v83 >> 1 > v82) {
            unint64_t v82 = v83 >> 1;
          }
          if ((unint64_t)v83 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v67 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v67 = v82;
          }
          if (v67)
          {
            v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a9 + 2), v67);
            uint64_t v63 = *a9;
            uint64_t v55 = a9[1];
          }
          else
          {
            v68 = 0;
          }
          unint64_t v96 = (float *)&v68[4 * v81];
          *unint64_t v96 = v27;
          unint64_t v62 = v96 + 1;
          while (v55 != v63)
          {
            int v102 = *((_DWORD *)v55-- - 1);
            *((_DWORD *)v96-- - 1) = v102;
          }
          goto LABEL_168;
        case 2:
          unint64_t v53 = a9[1];
          unint64_t v52 = (unint64_t)a9[2];
          if ((unint64_t)v53 < v52)
          {
            *unint64_t v53 = v26;
            char v31 = v53 + 1;
            goto LABEL_45;
          }
          uint64_t v63 = *a9;
          uint64_t v78 = v53 - *a9;
          unint64_t v79 = v78 + 1;
          if ((unint64_t)(v78 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v80 = v52 - (void)v63;
          if (v80 >> 1 > v79) {
            unint64_t v79 = v80 >> 1;
          }
          if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v67 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v67 = v79;
          }
          if (v67)
          {
            v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a9 + 2), v67);
            uint64_t v63 = *a9;
            unint64_t v53 = a9[1];
          }
          else
          {
            v68 = 0;
          }
          unint64_t v96 = (float *)&v68[4 * v78];
          *unint64_t v96 = v26;
          unint64_t v62 = v96 + 1;
          while (v53 != v63)
          {
            int v101 = *((_DWORD *)v53-- - 1);
            *((_DWORD *)v96-- - 1) = v101;
          }
          goto LABEL_168;
        case 3:
          unint64_t v51 = a9[1];
          unint64_t v50 = (unint64_t)a9[2];
          if ((unint64_t)v51 < v50)
          {
            *unint64_t v51 = v24;
            char v31 = v51 + 1;
            goto LABEL_45;
          }
          uint64_t v63 = *a9;
          uint64_t v72 = v51 - *a9;
          unint64_t v73 = v72 + 1;
          if ((unint64_t)(v72 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v74 = v50 - (void)v63;
          if (v74 >> 1 > v73) {
            unint64_t v73 = v74 >> 1;
          }
          if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v67 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v67 = v73;
          }
          if (v67)
          {
            v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a9 + 2), v67);
            uint64_t v63 = *a9;
            unint64_t v51 = a9[1];
          }
          else
          {
            v68 = 0;
          }
          unint64_t v96 = (float *)&v68[4 * v72];
          *unint64_t v96 = v24;
          unint64_t v62 = v96 + 1;
          while (v51 != v63)
          {
            int v99 = *((_DWORD *)v51-- - 1);
            *((_DWORD *)v96-- - 1) = v99;
          }
          goto LABEL_168;
        case 5:
          unint64_t v35 = *a5;
          unint64_t v34 = a5[1];
          if (*a5 != v34)
          {
            size_t v36 = a9[1];
            do
            {
              float v37 = (float)*v35;
              if ((unint64_t)v36 >= *v23)
              {
                uint64_t v39 = *a9;
                uint64_t v40 = v36 - *a9;
                unint64_t v41 = v40 + 1;
                if ((unint64_t)(v40 + 1) >> 62) {
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v42 = *v23 - (void)v39;
                if (v42 >> 1 > v41) {
                  unint64_t v41 = v42 >> 1;
                }
                if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v43 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v43 = v41;
                }
                if (v43)
                {
                  unint64_t v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a9 + 2), v43);
                  uint64_t v39 = *a9;
                  size_t v36 = a9[1];
                }
                else
                {
                  unint64_t v44 = 0;
                }
                uint64_t v45 = (float *)&v44[4 * v40];
                float *v45 = v37;
                long long v38 = v45 + 1;
                while (v36 != v39)
                {
                  int v46 = *((_DWORD *)v36-- - 1);
                  *((_DWORD *)v45-- - 1) = v46;
                }
                *a9 = v45;
                a9[1] = v38;
                a9[2] = (float *)&v44[4 * v43];
                if (v39) {
                  operator delete(v39);
                }
              }
              else
              {
                *size_t v36 = v37;
                long long v38 = v36 + 1;
              }
              a9[1] = v38;
              ++v35;
              size_t v36 = v38;
            }
            while (v35 != v34);
          }
          goto LABEL_171;
        case 6:
          v48 = a9[1];
          unint64_t v47 = (unint64_t)a9[2];
          if ((unint64_t)v48 < v47)
          {
            float v49 = v107;
            goto LABEL_44;
          }
          uint64_t v63 = *a9;
          uint64_t v69 = v48 - *a9;
          unint64_t v70 = v69 + 1;
          if ((unint64_t)(v69 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v71 = v47 - (void)v63;
          if (v71 >> 1 > v70) {
            unint64_t v70 = v71 >> 1;
          }
          if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v67 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v67 = v70;
          }
          if (v67)
          {
            v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a9 + 2), v67);
            uint64_t v63 = *a9;
            v48 = a9[1];
          }
          else
          {
            v68 = 0;
          }
          unint64_t v96 = (float *)&v68[4 * v69];
          *unint64_t v96 = v107;
          unint64_t v62 = v96 + 1;
          while (v48 != v63)
          {
            int v98 = *((_DWORD *)v48-- - 1);
            *((_DWORD *)v96-- - 1) = v98;
          }
          goto LABEL_168;
        case 7:
          v48 = a9[1];
          unint64_t v56 = (unint64_t)a9[2];
          if ((unint64_t)v48 < v56)
          {
            float v49 = v108;
            goto LABEL_44;
          }
          uint64_t v63 = *a9;
          uint64_t v84 = v48 - *a9;
          unint64_t v85 = v84 + 1;
          if ((unint64_t)(v84 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v86 = v56 - (void)v63;
          if (v86 >> 1 > v85) {
            unint64_t v85 = v86 >> 1;
          }
          if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v67 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v67 = v85;
          }
          if (v67)
          {
            v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a9 + 2), v67);
            uint64_t v63 = *a9;
            v48 = a9[1];
          }
          else
          {
            v68 = 0;
          }
          unint64_t v96 = (float *)&v68[4 * v84];
          *unint64_t v96 = v108;
          unint64_t v62 = v96 + 1;
          while (v48 != v63)
          {
            int v103 = *((_DWORD *)v48-- - 1);
            *((_DWORD *)v96-- - 1) = v103;
          }
          goto LABEL_168;
        case 8:
          v58 = a9[1];
          unint64_t v57 = (unint64_t)a9[2];
          if ((unint64_t)v58 < v57)
          {
            float *v58 = a11;
            char v31 = v58 + 1;
            goto LABEL_45;
          }
          uint64_t v63 = *a9;
          uint64_t v87 = v58 - *a9;
          unint64_t v88 = v87 + 1;
          if ((unint64_t)(v87 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v89 = v57 - (void)v63;
          if (v89 >> 1 > v88) {
            unint64_t v88 = v89 >> 1;
          }
          if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v67 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v67 = v88;
          }
          if (v67)
          {
            v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a9 + 2), v67);
            uint64_t v63 = *a9;
            v58 = a9[1];
          }
          else
          {
            v68 = 0;
          }
          unint64_t v96 = (float *)&v68[4 * v87];
          *unint64_t v96 = a11;
          unint64_t v62 = v96 + 1;
          while (v58 != v63)
          {
            int v104 = *((_DWORD *)v58-- - 1);
            *((_DWORD *)v96-- - 1) = v104;
          }
          goto LABEL_168;
        case 9:
          v48 = a9[1];
          unint64_t v61 = (unint64_t)a9[2];
          if ((unint64_t)v48 >= v61)
          {
            uint64_t v63 = *a9;
            uint64_t v93 = v48 - *a9;
            unint64_t v94 = v93 + 1;
            if ((unint64_t)(v93 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v95 = v61 - (void)v63;
            if (v95 >> 1 > v94) {
              unint64_t v94 = v95 >> 1;
            }
            if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v67 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v67 = v94;
            }
            if (v67)
            {
              v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a9 + 2), v67);
              uint64_t v63 = *a9;
              v48 = a9[1];
            }
            else
            {
              v68 = 0;
            }
            unint64_t v96 = (float *)&v68[4 * v93];
            *unint64_t v96 = v109;
            unint64_t v62 = v96 + 1;
            while (v48 != v63)
            {
              int v106 = *((_DWORD *)v48-- - 1);
              *((_DWORD *)v96-- - 1) = v106;
            }
            goto LABEL_168;
          }
          float v49 = v109;
LABEL_44:
          float *v48 = v49;
          char v31 = v48 + 1;
          goto LABEL_45;
        case 0xA:
          int v60 = a9[1];
          unint64_t v59 = (unint64_t)a9[2];
          if ((unint64_t)v60 < v59)
          {
            *int v60 = a12;
            char v31 = v60 + 1;
            goto LABEL_45;
          }
          uint64_t v63 = *a9;
          uint64_t v90 = v60 - *a9;
          unint64_t v91 = v90 + 1;
          if ((unint64_t)(v90 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v92 = v59 - (void)v63;
          if (v92 >> 1 > v91) {
            unint64_t v91 = v92 >> 1;
          }
          if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v67 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v67 = v91;
          }
          if (v67)
          {
            v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a9 + 2), v67);
            uint64_t v63 = *a9;
            int v60 = a9[1];
          }
          else
          {
            v68 = 0;
          }
          unint64_t v96 = (float *)&v68[4 * v90];
          *unint64_t v96 = a12;
          unint64_t v62 = v96 + 1;
          while (v60 != v63)
          {
            int v105 = *((_DWORD *)v60-- - 1);
            *((_DWORD *)v96-- - 1) = v105;
          }
          goto LABEL_168;
        case 0xB:
          unint64_t v33 = a9[1];
          unint64_t v32 = (unint64_t)a9[2];
          if ((unint64_t)v33 >= v32)
          {
            uint64_t v63 = *a9;
            uint64_t v64 = v33 - *a9;
            unint64_t v65 = v64 + 1;
            if ((unint64_t)(v64 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v66 = v32 - (void)v63;
            if (v66 >> 1 > v65) {
              unint64_t v65 = v66 >> 1;
            }
            if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v67 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v67 = v65;
            }
            if (v67)
            {
              v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a9 + 2), v67);
              uint64_t v63 = *a9;
              unint64_t v33 = a9[1];
            }
            else
            {
              v68 = 0;
            }
            unint64_t v96 = (float *)&v68[4 * v64];
            *unint64_t v96 = a13;
            unint64_t v62 = v96 + 1;
            while (v33 != v63)
            {
              int v97 = *((_DWORD *)v33-- - 1);
              *((_DWORD *)v96-- - 1) = v97;
            }
LABEL_168:
            *a9 = v96;
            a9[1] = v62;
            a9[2] = (float *)&v68[4 * v67];
            if (v63) {
              operator delete(v63);
            }
          }
          else
          {
            *unint64_t v33 = a13;
            char v31 = v33 + 1;
LABEL_45:
            unint64_t v62 = v31;
          }
          a9[1] = v62;
LABEL_171:
          ++v25;
          uint64_t v14 = *(void *)(a1 + 192);
          if (v25 >= (*(void *)(a1 + 200) - v14) >> 2) {
            return;
          }
          continue;
        default:
          if (quasar::gLogLevel >= 5)
          {
            memset(v110, 0, 272);
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v110);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v110, (uint64_t)"Feature type unknown. Ignoring feature ..", 41);
            quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v110);
          }
          goto LABEL_171;
      }
    }
  }
}

void sub_1B20EA228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  BOOL v13 = *(void **)v11;
  if (*(void *)v11)
  {
    *(void *)(v11 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::NnetEndPointer::NnetEndPointer(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(void *)a1 = &unk_1F0A528D8;
  quasar::EndPointDecoderConfig::EndPointDecoderConfig((quasar::EndPointDecoderConfig *)(a1 + 8), (const quasar::EndPointDecoderConfig *)a2);
  *(_OWORD *)(a1 + 152) = 0u;
  uint64_t v8 = a1 + 152;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 209) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_DWORD *)(a1 + 280) = -1;
  *(unsigned char *)(a1 + 284) = a4;
  uint64_t v9 = *(unsigned __int8 *)(a3 + 23);
  if ((v9 & 0x80u) != 0) {
    uint64_t v9 = *(void *)(a3 + 8);
  }
  if (!v9)
  {
    uint64_t v10 = *(unsigned __int8 *)(a2 + 63);
    if ((v10 & 0x80u) != 0) {
      uint64_t v10 = *(void *)(a2 + 48);
    }
    if (!v10)
    {
      long long v63 = 0uLL;
      long long v64 = 0uLL;
      long long v61 = 0uLL;
      long long v62 = 0uLL;
      long long v59 = 0uLL;
      long long v60 = 0uLL;
      long long v57 = 0uLL;
      long long v58 = 0uLL;
      long long v55 = 0uLL;
      long long v56 = 0uLL;
      long long v53 = 0uLL;
      long long v54 = 0uLL;
      long long v51 = 0uLL;
      long long v52 = 0uLL;
      long long v49 = 0uLL;
      long long v50 = 0uLL;
      long long v48 = 0uLL;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v48);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v48, (uint64_t)"NNet model file for endpointing cannot be empty when use-nnet-endpointer is set", 79);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v48);
    }
  }
  uint64_t v11 = *(std::string **)(a3 + 24);
  size_t v12 = *(long long **)(a3 + 32);
  if (v11 == (std::string *)v12)
  {
    uint64_t v13 = *(unsigned __int8 *)(a2 + 87);
    if ((v13 & 0x80u) != 0) {
      uint64_t v13 = *(void *)(a2 + 72);
    }
    if (!v13)
    {
      long long v63 = 0uLL;
      long long v64 = 0uLL;
      long long v61 = 0uLL;
      long long v62 = 0uLL;
      long long v59 = 0uLL;
      long long v60 = 0uLL;
      long long v57 = 0uLL;
      long long v58 = 0uLL;
      long long v55 = 0uLL;
      long long v56 = 0uLL;
      long long v53 = 0uLL;
      long long v54 = 0uLL;
      long long v51 = 0uLL;
      long long v52 = 0uLL;
      long long v49 = 0uLL;
      long long v50 = 0uLL;
      long long v48 = 0uLL;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v48);
      uint64_t v39 = (quasar::NnetEndPointer *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v48, (uint64_t)"Empty feature list (endpoint.feature-list). Specify features from: ", 67);
      quasar::NnetEndPointer::allowedFeatures((uint64_t *)&__p, v39);
      if (v47 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      if (v47 >= 0) {
        uint64_t v41 = HIBYTE(v47);
      }
      else {
        uint64_t v41 = v46;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)p_p, v41);
      if (SHIBYTE(v47) < 0) {
        operator delete(__p);
      }
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v48);
    }
  }
  uint64_t v14 = *(unsigned __int8 *)(a2 + 63);
  if ((v14 & 0x80u) != 0) {
    uint64_t v14 = *(void *)(a2 + 48);
  }
  if (v14)
  {
    if (v8 != a2 + 104) {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)(a1 + 152), *(std::string **)(a2 + 104), *(long long **)(a2 + 112), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 3));
    }
    uint64_t v16 = *(void *)(a2 + 128);
    uint64_t v15 = *(void *)(a2 + 136);
    if (v15) {
LABEL_17:
    }
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  else
  {
    if (v8 != a3 + 24) {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)(a1 + 152), v11, v12, 0xAAAAAAAAAAAAAAABLL * (((char *)v12 - (char *)v11) >> 3));
    }
    uint64_t v16 = *(void *)(a3 + 48);
    uint64_t v15 = *(void *)(a3 + 56);
    if (v15) {
      goto LABEL_17;
    }
  }
  uint64_t v17 = *(std::__shared_weak_count **)(a1 + 184);
  *(void *)(a1 + 176) = v16;
  *(void *)(a1 + 184) = v15;
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  quasar::NnetEndPointer::initFeatureSeq((quasar::NnetEndPointer *)a1);
  std::vector<std::string> __p = 0;
  uint64_t v46 = 0;
  int64_t v47 = 0;
  uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v47, 1uLL);
  unint64_t v20 = (unint64_t)&v18[4 * v19];
  *(_DWORD *)uint64_t v18 = *(_DWORD *)(a2 + 4);
  int v21 = v18 + 4;
  std::vector<std::string> __p = v18;
  int64_t v47 = v20;
  uint64_t v46 = (uint64_t)(v18 + 4);
  if ((unint64_t)(v18 + 4) >= v20)
  {
    uint64_t v23 = (char *)__p;
    uint64_t v24 = (v21 - (unsigned char *)__p) >> 2;
    unint64_t v25 = v24 + 1;
    if ((unint64_t)(v24 + 1) >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v26 = v20 - (void)__p;
    if (v26 >> 1 > v25) {
      unint64_t v25 = v26 >> 1;
    }
    if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v27 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v27 = v25;
    }
    if (v27)
    {
      float v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v47, v27);
      uint64_t v23 = (char *)__p;
      int v21 = (char *)v46;
    }
    else
    {
      float v28 = 0;
    }
    unint64_t v29 = &v28[4 * v24];
    uint64_t v30 = &v28[4 * v27];
    *(_DWORD *)unint64_t v29 = *(_DWORD *)a2;
    uint64_t v22 = (uint64_t)(v29 + 4);
    while (v21 != v23)
    {
      int v31 = *((_DWORD *)v21 - 1);
      v21 -= 4;
      *((_DWORD *)v29 - 1) = v31;
      v29 -= 4;
    }
    std::vector<std::string> __p = v29;
    uint64_t v46 = v22;
    int64_t v47 = (int64_t)v30;
    if (v23) {
      operator delete(v23);
    }
  }
  else
  {
    *((_DWORD *)v18 + 1) = *(_DWORD *)a2;
    uint64_t v22 = (uint64_t)(v18 + 8);
  }
  uint64_t v46 = v22;
  unint64_t v43 = 0;
  uint64_t v44 = 0;
  uint64_t v42 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v42, __p, v22, (v22 - (uint64_t)__p) >> 2);
  quasar::NnetEndPointer::prepareEPStatus((void *)a1, (float **)&v42);
  if (v42)
  {
    unint64_t v43 = v42;
    operator delete(v42);
  }
  uint64_t v32 = *(unsigned __int8 *)(a2 + 39);
  if ((v32 & 0x80u) != 0) {
    uint64_t v32 = *(void *)(a2 + 24);
  }
  if (v32 && (kaldi::SplitStringToIntegers<int>(a2 + 16, ",", 0, (std::vector<unsigned int> *)(a1 + 256)) & 1) == 0)
  {
    long long v63 = 0u;
    long long v64 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v48 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v48);
    unint64_t v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v48, (uint64_t)"Invalid pause-threshold-list string ", 36);
    int v36 = *(char *)(a2 + 39);
    if (v36 >= 0) {
      uint64_t v37 = a2 + 16;
    }
    else {
      uint64_t v37 = *(void *)(a2 + 16);
    }
    if (v36 >= 0) {
      uint64_t v38 = *(unsigned __int8 *)(a2 + 39);
    }
    else {
      uint64_t v38 = *(void *)(a2 + 24);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, v37, v38);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v48);
  }
  if (*(unsigned char *)(a2 + 96))
  {
    uint64_t v33 = *(unsigned __int8 *)(a2 + 39);
    if ((v33 & 0x80u) != 0) {
      uint64_t v33 = *(void *)(a2 + 24);
    }
    if (!v33)
    {
      long long v63 = 0u;
      long long v64 = 0u;
      long long v61 = 0u;
      long long v62 = 0u;
      long long v59 = 0u;
      long long v60 = 0u;
      long long v57 = 0u;
      long long v58 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v48 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v48);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v48, (uint64_t)"pause-threshold-list should not be empty if pauses-as-BOOL is set", 65);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v48);
    }
  }
  if (__p)
  {
    uint64_t v46 = (uint64_t)__p;
    operator delete(__p);
  }
  return a1;
}

void sub_1B20EA820(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  JUMPOUT(0x1B20EA844);
}

void sub_1B20EA838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  size_t v12 = *v9;
  if (*v9)
  {
    v8[33] = v12;
    operator delete(v12);
  }
  uint64_t v13 = *v10;
  if (*v10)
  {
    v8[30] = v13;
    operator delete(v13);
  }
  uint64_t v14 = (void *)v8[24];
  if (v14)
  {
    v8[25] = v14;
    operator delete(v14);
  }
  uint64_t v15 = (std::__shared_weak_count *)v8[23];
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  quasar::EndPointDecoderConfig::~EndPointDecoderConfig(v7);
  _Unwind_Resume(a1);
}

void sub_1B20EA840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void **a15)
{
  if (__p) {
    operator delete(__p);
  }
  unint64_t v20 = *v17;
  if (*v17)
  {
    v16[33] = v20;
    operator delete(v20);
  }
  int v21 = *v18;
  if (*v18)
  {
    v16[30] = v21;
    operator delete(v21);
  }
  uint64_t v22 = (void *)v16[24];
  if (v22)
  {
    v16[25] = v22;
    operator delete(v22);
  }
  uint64_t v23 = (std::__shared_weak_count *)v16[23];
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a15);
  quasar::EndPointDecoderConfig::~EndPointDecoderConfig(v15);
  _Unwind_Resume(a1);
}

void quasar::NnetEndPointer::prepareEPStatus(void *a1, float **a2)
{
  size_t v4 = *a2;
  long long v5 = a2[1];
  unint64_t v6 = 126 - 2 * __clz(v5 - v4);
  size_t v7 = (char **)(a1 + 29);
  a1[30] = a1[29];
  if (v5 == v4) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = v6;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::greater<float> &,float *,false>(v4, v5, (uint64_t)&v23, v8, 1);
  uint64_t v9 = *a2;
  if (a2[1] != *a2)
  {
    unint64_t v10 = 0;
    uint64_t v11 = a1 + 31;
    size_t v12 = (unint64_t *)a1[30];
    do
    {
      unint64_t v13 = (100 - 10 * v10) | ((unint64_t)LODWORD(v9[v10]) << 32);
      if ((unint64_t)v12 >= *v11)
      {
        uint64_t v14 = ((char *)v12 - *v7) >> 3;
        if ((unint64_t)(v14 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = *v11 - (void)*v7;
        uint64_t v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1)) {
          uint64_t v16 = v14 + 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v16;
        }
        if (v17) {
          uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 31), v17);
        }
        else {
          uint64_t v18 = 0;
        }
        uint64_t v19 = (unint64_t *)&v18[8 * v14];
        *uint64_t v19 = v13;
        size_t v12 = v19 + 1;
        int v21 = (char *)a1[29];
        unint64_t v20 = (char *)a1[30];
        if (v20 != v21)
        {
          do
          {
            unint64_t v22 = *((void *)v20 - 1);
            v20 -= 8;
            *--uint64_t v19 = v22;
          }
          while (v20 != v21);
          unint64_t v20 = *v7;
        }
        a1[29] = v19;
        a1[30] = v12;
        a1[31] = &v18[8 * v17];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        *v12++ = v13;
      }
      a1[30] = v12;
      ++v10;
      uint64_t v9 = *a2;
    }
    while (v10 < a2[1] - *a2);
  }
}

uint64_t quasar::NnetEndPointer::evalEndPoint(uint64_t a1, _DWORD *a2, int a3, int a4, int a5, void *a6, unsigned int **a7, int a8, float a9, double a10, float a11, float a12, float a13, int a14, int a15, _DWORD *a16, int a17)
{
  *(unsigned char *)(a1 + 224) = 0;
  if (a6[1] == *a6) {
    return 0;
  }
  if (a15 * a4 >= *(_DWORD *)(a1 + 100)) {
    return 1;
  }
  quasar::NnetEndPointer::computeFeats(a1, a3, a4, a5, a7, a8, a14, a17, &v65, a9, a11, a12, a13);
  unint64_t v22 = v65;
  int v21 = v66;
  if ((int)kaldi::nnet1::Nnet::InputDim(*(kaldi::nnet1::Nnet **)(a1 + 176)) != v21 - v22)
  {
    long long v63 = 0u;
    long long v64 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v48 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v48);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v48, (uint64_t)"Feature dim=", 12);
    uint64_t v42 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)" does not match model dim=", 26);
    kaldi::nnet1::Nnet::InputDim(*(kaldi::nnet1::Nnet **)(a1 + 176));
    std::ostream::operator<<();
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v48);
  }
  kaldi::Matrix<float>::Matrix((uint64_t)v47, 1, (unint64_t)((char *)v66 - (char *)v65) >> 2, 0, 0);
  char v23 = v65;
  if (v66 != v65)
  {
    uint64_t v24 = 0;
    unint64_t v25 = v66 - v65;
    uint64_t v26 = v47[0];
    if (v25 <= 1) {
      unint64_t v25 = 1;
    }
    do
    {
      *(float *)(v26 + 4 * v24) = v23[v24];
      ++v24;
    }
    while (v25 != v24);
  }
  long long v44 = 0u;
  long long v45 = 0u;
  int32x2_t v43 = (int32x2_t)&unk_1F0A51768;
  char v46 = 0;
  unint64_t v27 = *(uint64_t **)(a1 + 176);
  kaldi::CuMatrix<float>::CuMatrix<float>(&v48, v47, 111, 0);
  kaldi::nnet1::Nnet::Feedforward(v27, (uint64_t)&v48, &v43, -1, 0);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v48);
  if (HIDWORD(v44) != 1 && DWORD2(v44) != 1)
  {
    if (quasar::gLogLevel >= 1)
    {
      long long v63 = 0u;
      long long v64 = 0u;
      long long v61 = 0u;
      long long v62 = 0u;
      long long v59 = 0u;
      long long v60 = 0u;
      long long v57 = 0u;
      long long v58 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v48 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v48);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v48, (uint64_t)"Nnet output for endpointing is incorrect", 40);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v48);
    }
LABEL_23:
    int v34 = 0;
LABEL_24:
    BOOL v35 = v34 > *(_DWORD *)(a1 + 220);
    goto LABEL_25;
  }
  if (quasar::gLogLevel >= 6)
  {
    long long v63 = 0u;
    long long v64 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v48 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v48);
    kaldi::MatrixBase<float>::Write(v47, &v48, 0, 0);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v48, (uint64_t)", ep-nnet-value=", 16);
    std::ostream::operator<<();
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v48);
  }
  unint64_t v29 = (float *)v44;
  *a2 = *(_DWORD *)v44;
  uint64_t v30 = *(void *)(a1 + 232);
  uint64_t v31 = *(void *)(a1 + 240) - v30;
  if (!v31) {
    goto LABEL_23;
  }
  unint64_t v32 = v31 >> 3;
  if (v32 <= 1) {
    unint64_t v32 = 1;
  }
  uint64_t v33 = (float *)(v30 + 4);
  while (*v33 == -2147500000.0 || *v29 < *v33)
  {
    v33 += 2;
    if (!--v32) {
      goto LABEL_23;
    }
  }
  int v34 = *((_DWORD *)v33 - 1);
  if (v34 != 100) {
    goto LABEL_24;
  }
  BOOL v35 = 0;
LABEL_25:
  *(unsigned char *)(a1 + 224) = v35;
  *(_DWORD *)(a1 + 220) = v34;
  *(float *)(a1 + 216) = a9;
  int v36 = *(_DWORD *)(a1 + 280);
  if (v36 < 0)
  {
    *a16 = v36;
    goto LABEL_33;
  }
  int v37 = *(_DWORD *)(a1 + 108) / a15 + v36;
  *a16 = v36;
  if (v37 < 1 || v37 > a5)
  {
LABEL_33:
    int v39 = **(_DWORD **)(a1 + 232);
    if (*(unsigned char *)(a1 + 284)) {
      BOOL v40 = 0;
    }
    else {
      BOOL v40 = v34 == v39;
    }
    uint64_t v28 = v40;
    if (*(unsigned char *)(a1 + 284))
    {
      if (v34 == v39)
      {
        uint64_t v28 = 0;
        if (*(_DWORD *)(a1 + 280) == -1) {
          *(_DWORD *)(a1 + 280) = a5;
        }
      }
    }
    goto LABEL_43;
  }
  uint64_t v28 = 1;
LABEL_43:
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v43);
  kaldi::Matrix<float>::~Matrix((uint64_t)v47);
  if (v65)
  {
    uint64_t v66 = v65;
    operator delete(v65);
  }
  return v28;
}

void sub_1B20EAE8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  JUMPOUT(0x1B20EAEA0);
}

void sub_1B20EAE9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  kaldi::Matrix<float>::~Matrix((uint64_t)va1);
  size_t v4 = *(void **)(v2 - 104);
  if (v4)
  {
    *(void *)(v2 - 96) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::NnetEndPointer::info(quasar::NnetEndPointer *this)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"NnetEndPointer endpoint-threshold=", 34);
  std::ostream::operator<<();
  std::stringbuf::str();
  v3[0] = *MEMORY[0x1E4FBA408];
  uint64_t v1 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v3 + *(void *)(v3[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v4[0] = v1;
  v4[1] = MEMORY[0x1E4FBA470] + 16;
  if (v5 < 0) {
    operator delete((void *)v4[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EA8520](&v6);
}

void sub_1B20EB058(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::NnetEndPointer::reportEndPoint(quasar::NnetEndPointer *this)
{
  return *((unsigned __int8 *)this + 224);
}

uint64_t quasar::NnetEndPointer::status(quasar::NnetEndPointer *this)
{
  return *((unsigned int *)this + 55);
}

void quasar::NnetEndPointer::computePauseCounts(uint64_t a1, unsigned int **a2, std::vector<unsigned int> *this)
{
  this->__end_ = this->__begin_;
  std::vector<int>::resize(this, (uint64_t)(*(void *)(a1 + 264) - *(void *)(a1 + 256)) >> 2);
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  if (*a2 != v7)
  {
    uint64_t v9 = *(unsigned int **)(a1 + 256);
    uint64_t v8 = *(_DWORD **)(a1 + 264);
    unint64_t v10 = v8 - v9;
    if (v10 <= 1) {
      unint64_t v10 = 1;
    }
    do
    {
      if (v8 != v9)
      {
        std::vector<unsigned int>::pointer begin = this->__begin_;
        unint64_t v12 = v10;
        unint64_t v13 = v9;
        do
        {
          unsigned int v14 = *v13++;
          if (*v6 >= v14)
          {
            if (*(unsigned char *)(a1 + 104)) {
              int v15 = 1;
            }
            else {
              int v15 = *begin + 1;
            }
            *std::vector<unsigned int>::pointer begin = v15;
          }
          ++begin;
          --v12;
        }
        while (v12);
      }
      ++v6;
    }
    while (v6 != v7);
  }
}

uint64_t quasar::NnetEndPointer::pausesAsBool(quasar::NnetEndPointer *this)
{
  return *((unsigned __int8 *)this + 104);
}

void quasar::BasicEndPointer::~BasicEndPointer(quasar::BasicEndPointer *this)
{
  *(void *)this = &unk_1F0A52E78;
  std::deque<int>::~deque[abi:ne180100]((void *)this + 41);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  unint64_t v3 = (void **)((char *)this + 272);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 255) < 0) {
    operator delete(*((void **)this + 29));
  }
  if (*((char *)this + 231) < 0) {
    operator delete(*((void **)this + 26));
  }
  if (*((char *)this + 207) < 0) {
    operator delete(*((void **)this + 23));
  }
}

{
  std::__shared_weak_count *v2;
  void **v3;

  *(void *)this = &unk_1F0A52E78;
  std::deque<int>::~deque[abi:ne180100]((void *)this + 41);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  unint64_t v3 = (void **)((char *)this + 272);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 255) < 0) {
    operator delete(*((void **)this + 29));
  }
  if (*((char *)this + 231) < 0) {
    operator delete(*((void **)this + 26));
  }
  if (*((char *)this + 207) < 0) {
    operator delete(*((void **)this + 23));
  }
  MEMORY[0x1B3EA8670](this, 0x10B3C407EB90683);
}

void quasar::NnetEndPointer::~NnetEndPointer(quasar::NnetEndPointer *this)
{
  quasar::NnetEndPointer::~NnetEndPointer(this);
  JUMPOUT(0x1B3EA8670);
}

{
  void *v2;
  void *v3;
  void *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  void **v7;

  *(void *)this = &unk_1F0A528D8;
  uint64_t v2 = (void *)*((void *)this + 32);
  if (v2)
  {
    *((void *)this + 33) = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 29);
  if (v3)
  {
    *((void *)this + 30) = v3;
    operator delete(v3);
  }
  size_t v4 = (void *)*((void *)this + 24);
  if (v4)
  {
    *((void *)this + 25) = v4;
    operator delete(v4);
  }
  char v5 = (std::__shared_weak_count *)*((void *)this + 23);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v7 = (void **)((char *)this + 152);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 18);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v7 = (void **)((char *)this + 112);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
}

quasar::EndPointDecoderConfig *quasar::EndPointDecoderConfig::EndPointDecoderConfig(quasar::EndPointDecoderConfig *this, const quasar::EndPointDecoderConfig *a2)
{
  uint64_t v4 = *(void *)a2;
  *((unsigned char *)this + 8) = *((unsigned char *)a2 + 8);
  *(void *)this = v4;
  if (*((char *)a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), *((const std::string::value_type **)a2 + 2), *((void *)a2 + 3));
  }
  else
  {
    long long v5 = *((_OWORD *)a2 + 1);
    *((void *)this + 4) = *((void *)a2 + 4);
    *((_OWORD *)this + 1) = v5;
  }
  if (*((char *)a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 40), *((const std::string::value_type **)a2 + 5), *((void *)a2 + 6));
  }
  else
  {
    long long v6 = *(_OWORD *)((char *)a2 + 40);
    *((void *)this + 7) = *((void *)a2 + 7);
    *(_OWORD *)((char *)this + 40) = v6;
  }
  if (*((char *)a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 64), *((const std::string::value_type **)a2 + 8), *((void *)a2 + 9));
  }
  else
  {
    long long v7 = *((_OWORD *)a2 + 4);
    *((void *)this + 10) = *((void *)a2 + 10);
    *((_OWORD *)this + 4) = v7;
  }
  long long v8 = *(_OWORD *)((char *)a2 + 88);
  *((void *)this + 13) = 0;
  *(_OWORD *)((char *)this + 88) = v8;
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 104), *((long long **)a2 + 13), *((long long **)a2 + 14), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 14) - *((void *)a2 + 13)) >> 3));
  uint64_t v9 = *((void *)a2 + 17);
  *((void *)this + 16) = *((void *)a2 + 16);
  *((void *)this + 17) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void sub_1B20EB3F4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 63) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

float *std::__introsort<std::_ClassicAlgPolicy,std::greater<float> &,float *,false>(float *result, float *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v10 = result;
LABEL_2:
  uint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    unint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = a2 - v11;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          float v22 = *(a2 - 1);
          float v23 = *v11;
          if (v22 > *v11)
          {
            *uint64_t v11 = v22;
            *(a2 - 1) = v23;
          }
          break;
        case 3uLL:
          float v24 = v11[1];
          float v25 = *(a2 - 1);
          if (v24 <= v25) {
            int v26 = *((_DWORD *)a2 - 1);
          }
          else {
            int v26 = *((_DWORD *)v11 + 1);
          }
          if (v24 > v25) {
            float v24 = *(a2 - 1);
          }
          *(a2 - 1) = v24;
          *((_DWORD *)v11 + 1) = v26;
          float v27 = *(a2 - 1);
          if (v27 <= *v11) {
            float v28 = *v11;
          }
          else {
            float v28 = *(a2 - 1);
          }
          if (v27 > *v11) {
            float v27 = *v11;
          }
          *(a2 - 1) = v27;
          int v30 = *(_DWORD *)v11;
          float v29 = v11[1];
          if (v28 <= v29)
          {
            int v30 = *((_DWORD *)v11 + 1);
            float v29 = v28;
          }
          *(_DWORD *)uint64_t v11 = v30;
          v11[1] = v29;
          break;
        case 4uLL:
          float v32 = v11[1];
          float v31 = v11[2];
          if (*v11 <= v31) {
            int v33 = *((_DWORD *)v11 + 2);
          }
          else {
            int v33 = *(_DWORD *)v11;
          }
          if (*v11 <= v31) {
            float v31 = *v11;
          }
          uint64_t v11[2] = v31;
          *(_DWORD *)uint64_t v11 = v33;
          float v34 = *(a2 - 1);
          if (v32 <= v34) {
            float v35 = *(a2 - 1);
          }
          else {
            float v35 = v32;
          }
          if (v32 <= v34) {
            float v34 = v32;
          }
          *(a2 - 1) = v34;
          float v36 = *v11;
          if (*v11 <= v35) {
            float v37 = v35;
          }
          else {
            float v37 = *v11;
          }
          if (*v11 > v35) {
            float v36 = v35;
          }
          *uint64_t v11 = v37;
          v11[1] = v36;
          float v38 = v11[2];
          float v39 = *(a2 - 1);
          if (v38 <= v39) {
            float v40 = *(a2 - 1);
          }
          else {
            float v40 = v11[2];
          }
          if (v38 > v39) {
            float v38 = *(a2 - 1);
          }
          *(a2 - 1) = v38;
          float v41 = v11[1];
          if (v41 <= v40) {
            float v42 = v40;
          }
          else {
            float v42 = v11[1];
          }
          if (v41 > v40) {
            float v41 = v40;
          }
          v11[1] = v42;
          uint64_t v11[2] = v41;
          break;
        case 5uLL:
          int v43 = *(_DWORD *)v11;
          float v44 = v11[1];
          if (*v11 <= v44) {
            int v45 = *((_DWORD *)v11 + 1);
          }
          else {
            int v45 = *(_DWORD *)v11;
          }
          if (*v11 > v44) {
            int v43 = *((_DWORD *)v11 + 1);
          }
          *(_DWORD *)uint64_t v11 = v45;
          *((_DWORD *)v11 + 1) = v43;
          float v46 = v11[3];
          float v47 = *(a2 - 1);
          if (v46 <= v47) {
            int v48 = *((_DWORD *)a2 - 1);
          }
          else {
            int v48 = *((_DWORD *)v11 + 3);
          }
          if (v46 > v47) {
            float v46 = *(a2 - 1);
          }
          *(a2 - 1) = v46;
          *((_DWORD *)v11 + 3) = v48;
          float v49 = *(a2 - 1);
          float v50 = v11[2];
          if (v49 <= v50) {
            float v51 = v11[2];
          }
          else {
            float v51 = *(a2 - 1);
          }
          if (v49 > v50) {
            float v49 = v11[2];
          }
          *(a2 - 1) = v49;
          int v53 = *((_DWORD *)v11 + 2);
          float v52 = v11[3];
          float v54 = v11[1];
          if (v51 <= v52)
          {
            int v53 = *((_DWORD *)v11 + 3);
            float v52 = v51;
          }
          *((_DWORD *)v11 + 2) = v53;
          v11[3] = v52;
          float v55 = *(a2 - 1);
          if (v54 <= v55) {
            float v56 = *(a2 - 1);
          }
          else {
            float v56 = v54;
          }
          if (v54 <= v55) {
            float v55 = v54;
          }
          *(a2 - 1) = v55;
          int v57 = *(_DWORD *)v11;
          float v59 = v11[2];
          float v58 = v11[3];
          if (v58 <= *v11) {
            float v60 = *v11;
          }
          else {
            float v60 = v11[3];
          }
          if (v58 > *v11) {
            float v58 = *v11;
          }
          if (v60 <= v59)
          {
            int v57 = *((_DWORD *)v11 + 2);
            float v59 = v60;
          }
          if (v58 <= v56) {
            float v61 = v56;
          }
          else {
            float v61 = v58;
          }
          if (v58 > v56) {
            float v58 = v56;
          }
          if (v61 <= v59) {
            float v56 = v59;
          }
          *(_DWORD *)uint64_t v11 = v57;
          v11[1] = v56;
          if (v61 <= v59) {
            float v62 = v61;
          }
          else {
            float v62 = v59;
          }
          uint64_t v11[2] = v62;
          v11[3] = v58;
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 95) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        return std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *,float *>(v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    unint64_t v17 = &v11[v15 >> 1];
    if ((unint64_t)v14 >= 0x201)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(v11, &v11[v15 >> 1], a2 - 1);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(v11 + 1, v17 - 1, a2 - 2);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(v11 + 2, &v11[v16 + 1], a2 - 3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(v17 - 1, v17, &v11[v16 + 1]);
      float v18 = *v11;
      *uint64_t v11 = *v17;
      *unint64_t v17 = v18;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(&v11[v15 >> 1], v11, a2 - 1);
      if (a5) {
        goto LABEL_14;
      }
    }
    if (*(v11 - 1) <= *v11)
    {
      uint64_t result = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,float *,std::greater<float> &>(v11, a2);
      uint64_t v11 = result;
      goto LABEL_19;
    }
LABEL_14:
    uint64_t v19 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,float *,std::greater<float> &>(v11, a2);
    if ((v20 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(v11, v19);
    uint64_t v11 = v19 + 1;
    uint64_t result = (float *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(v19 + 1, a2);
    if (result)
    {
      a4 = -v13;
      a2 = v19;
      if (v21) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v21)
    {
LABEL_17:
      uint64_t result = (float *)std::__introsort<std::_ClassicAlgPolicy,std::greater<float> &,float *,false>(v10, v19, a3, -v13, a5 & 1);
      uint64_t v11 = v19 + 1;
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  long long v63 = v11 + 1;
  BOOL v65 = v11 == a2 || v63 == a2;
  if (a5)
  {
    if (!v65)
    {
      uint64_t v66 = 0;
      unint64_t v67 = v11;
      do
      {
        float v69 = *v67;
        float v68 = v67[1];
        unint64_t v67 = v63;
        if (v68 > v69)
        {
          uint64_t v70 = v66;
          while (1)
          {
            *(float *)((char *)v11 + v70 + 4) = v69;
            if (!v70) {
              break;
            }
            float v69 = *(float *)((char *)v11 + v70 - 4);
            v70 -= 4;
            if (v68 <= v69)
            {
              uint64_t v71 = (float *)((char *)v11 + v70 + 4);
              goto LABEL_119;
            }
          }
          uint64_t v71 = v11;
LABEL_119:
          *uint64_t v71 = v68;
        }
        long long v63 = v67 + 1;
        v66 += 4;
      }
      while (v67 + 1 != a2);
    }
  }
  else if (!v65)
  {
    do
    {
      float v73 = *v10;
      float v72 = v10[1];
      unint64_t v10 = v63;
      if (v72 > v73)
      {
        uint64_t v74 = v63;
        do
        {
          *uint64_t v74 = v73;
          float v73 = *(v74 - 2);
          --v74;
        }
        while (v72 > v73);
        *uint64_t v74 = v72;
      }
      ++v63;
    }
    while (v10 + 1 != a2);
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(float *a1, float *a2, float *a3)
{
  float v3 = *a2;
  float v4 = *a1;
  float v5 = *a3;
  if (*a2 > *a1)
  {
    if (v5 > v3)
    {
      *a1 = v5;
      *a3 = v4;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    if (*a3 <= v4) {
      return 1;
    }
    *a2 = *a3;
    *a3 = v4;
    return 2;
  }
  if (v5 > v3)
  {
    *a2 = v5;
    *a3 = v3;
    float v6 = *a1;
    if (*a2 <= *a1) {
      return 1;
    }
    *a1 = *a2;
    *a2 = v6;
    return 2;
  }
  return 0;
}

float *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,float *,std::greater<float> &>(float *a1, float *a2)
{
  float v2 = *a1;
  if (*a1 <= *(a2 - 1))
  {
    float v5 = a1 + 1;
    do
    {
      float v3 = v5;
      if (v5 >= a2) {
        break;
      }
      ++v5;
    }
    while (v2 <= *v3);
  }
  else
  {
    float v3 = a1;
    do
    {
      float v4 = v3[1];
      ++v3;
    }
    while (v2 <= v4);
  }
  if (v3 < a2)
  {
    do
      float v6 = *--a2;
    while (v2 > v6);
  }
  if (v3 < a2)
  {
    float v7 = *v3;
    float v8 = *a2;
    do
    {
      *float v3 = v8;
      *a2 = v7;
      do
      {
        float v9 = v3[1];
        ++v3;
        float v7 = v9;
      }
      while (v2 <= v9);
      do
      {
        float v10 = *--a2;
        float v8 = v10;
      }
      while (v2 > v10);
    }
    while (v3 < a2);
  }
  if (v3 - 1 != a1) {
    *a1 = *(v3 - 1);
  }
  *(v3 - 1) = v2;
  return v3;
}

float *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,float *,std::greater<float> &>(float *a1, float *a2)
{
  uint64_t v2 = 0;
  float v3 = *a1;
  do
    float v4 = a1[++v2];
  while (v4 > v3);
  float v5 = &a1[v2];
  float v6 = &a1[v2 - 1];
  if (v2 == 1)
  {
    do
    {
      if (v5 >= a2) {
        break;
      }
      float v8 = *--a2;
    }
    while (v8 <= v3);
  }
  else
  {
    do
      float v7 = *--a2;
    while (v7 <= v3);
  }
  if (v5 < a2)
  {
    float v9 = *a2;
    float v10 = &a1[v2];
    uint64_t v11 = a2;
    do
    {
      *float v10 = v9;
      *uint64_t v11 = v4;
      do
      {
        float v12 = v10[1];
        ++v10;
        float v4 = v12;
      }
      while (v12 > v3);
      do
      {
        float v13 = *--v11;
        float v9 = v13;
      }
      while (v13 <= v3);
    }
    while (v10 < v11);
    float v6 = v10 - 1;
  }
  if (v6 != a1) {
    *a1 = *v6;
  }
  *float v6 = v3;
  return v6;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(float *a1, float *a2)
{
  BOOL v2 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v2;
    case 2:
      float v3 = *(a2 - 1);
      float v4 = *a1;
      if (v3 > *a1)
      {
        *a1 = v3;
        *(a2 - 1) = v4;
      }
      break;
    case 3:
      float v20 = a1[1];
      float v21 = *(a2 - 1);
      if (v20 <= v21) {
        int v22 = *((_DWORD *)a2 - 1);
      }
      else {
        int v22 = *((_DWORD *)a1 + 1);
      }
      if (v20 > v21) {
        float v20 = *(a2 - 1);
      }
      *(a2 - 1) = v20;
      *((_DWORD *)a1 + 1) = v22;
      float v23 = *(a2 - 1);
      if (v23 <= *a1) {
        float v24 = *a1;
      }
      else {
        float v24 = *(a2 - 1);
      }
      if (v23 > *a1) {
        float v23 = *a1;
      }
      *(a2 - 1) = v23;
      float v26 = *a1;
      float v25 = a1[1];
      if (v24 <= v25)
      {
        float v26 = a1[1];
        float v25 = v24;
      }
      *a1 = v26;
      a1[1] = v25;
      break;
    case 4:
      float v48 = a1[1];
      float v47 = a1[2];
      if (*a1 <= v47) {
        float v49 = a1[2];
      }
      else {
        float v49 = *a1;
      }
      if (*a1 <= v47) {
        float v47 = *a1;
      }
      a1[2] = v47;
      *a1 = v49;
      float v50 = *(a2 - 1);
      if (v48 <= v50) {
        float v51 = *(a2 - 1);
      }
      else {
        float v51 = v48;
      }
      if (v48 <= v50) {
        float v50 = v48;
      }
      *(a2 - 1) = v50;
      float v52 = *a1;
      if (*a1 <= v51) {
        float v53 = v51;
      }
      else {
        float v53 = *a1;
      }
      if (*a1 > v51) {
        float v52 = v51;
      }
      *a1 = v53;
      a1[1] = v52;
      float v54 = a1[2];
      float v55 = *(a2 - 1);
      if (v54 <= v55) {
        float v56 = *(a2 - 1);
      }
      else {
        float v56 = a1[2];
      }
      if (v54 > v55) {
        float v54 = *(a2 - 1);
      }
      *(a2 - 1) = v54;
      float v57 = a1[1];
      if (v57 <= v56) {
        float v58 = v56;
      }
      else {
        float v58 = a1[1];
      }
      if (v57 > v56) {
        float v57 = v56;
      }
      a1[1] = v58;
      a1[2] = v57;
      break;
    case 5:
      float v27 = *a1;
      float v28 = a1[1];
      if (*a1 <= v28) {
        float v29 = a1[1];
      }
      else {
        float v29 = *a1;
      }
      if (*a1 > v28) {
        float v27 = a1[1];
      }
      *a1 = v29;
      a1[1] = v27;
      float v30 = a1[3];
      float v31 = *(a2 - 1);
      if (v30 <= v31) {
        int v32 = *((_DWORD *)a2 - 1);
      }
      else {
        int v32 = *((_DWORD *)a1 + 3);
      }
      if (v30 > v31) {
        float v30 = *(a2 - 1);
      }
      *(a2 - 1) = v30;
      *((_DWORD *)a1 + 3) = v32;
      float v33 = *(a2 - 1);
      float v34 = a1[2];
      if (v33 <= v34) {
        float v35 = a1[2];
      }
      else {
        float v35 = *(a2 - 1);
      }
      if (v33 > v34) {
        float v33 = a1[2];
      }
      *(a2 - 1) = v33;
      int v37 = *((_DWORD *)a1 + 2);
      float v36 = a1[3];
      float v38 = a1[1];
      if (v35 <= v36)
      {
        int v37 = *((_DWORD *)a1 + 3);
        float v36 = v35;
      }
      *((_DWORD *)a1 + 2) = v37;
      a1[3] = v36;
      float v39 = *(a2 - 1);
      if (v38 <= v39) {
        float v40 = *(a2 - 1);
      }
      else {
        float v40 = v38;
      }
      if (v38 <= v39) {
        float v39 = v38;
      }
      *(a2 - 1) = v39;
      float v41 = *a1;
      float v43 = a1[2];
      float v42 = a1[3];
      if (v42 <= *a1) {
        float v44 = *a1;
      }
      else {
        float v44 = a1[3];
      }
      if (v42 > *a1) {
        float v42 = *a1;
      }
      if (v44 <= v43)
      {
        float v41 = a1[2];
        float v43 = v44;
      }
      if (v42 <= v40) {
        float v45 = v40;
      }
      else {
        float v45 = v42;
      }
      if (v42 > v40) {
        float v42 = v40;
      }
      if (v45 <= v43) {
        float v40 = v43;
      }
      *a1 = v41;
      a1[1] = v40;
      if (v45 <= v43) {
        float v46 = v45;
      }
      else {
        float v46 = v43;
      }
      a1[2] = v46;
      a1[3] = v42;
      break;
    default:
      float v5 = a1 + 2;
      float v6 = a1[2];
      float v8 = *a1;
      float v7 = a1[1];
      if (v7 <= v6) {
        float v9 = a1[2];
      }
      else {
        float v9 = a1[1];
      }
      if (v7 <= v6) {
        float v6 = a1[1];
      }
      if (v6 <= v8) {
        float v10 = *a1;
      }
      else {
        float v10 = v6;
      }
      if (v6 > v8) {
        float v6 = *a1;
      }
      *float v5 = v6;
      if (v10 <= v9) {
        float v11 = v9;
      }
      else {
        float v11 = v8;
      }
      if (v10 > v9) {
        float v10 = v9;
      }
      *a1 = v11;
      a1[1] = v10;
      float v12 = a1 + 3;
      if (a1 + 3 == a2)
      {
LABEL_29:
        BOOL v2 = 1;
      }
      else
      {
        int v13 = 0;
        uint64_t v14 = 12;
        while (1)
        {
          float v15 = *v12;
          float v16 = *v5;
          if (*v12 > *v5)
          {
            uint64_t v17 = v14;
            while (1)
            {
              *(float *)((char *)a1 + v17) = v16;
              uint64_t v18 = v17 - 4;
              if (v17 == 4) {
                break;
              }
              float v16 = *(float *)((char *)a1 + v17 - 8);
              v17 -= 4;
              if (v15 <= v16)
              {
                uint64_t v19 = (float *)((char *)a1 + v18);
                goto LABEL_27;
              }
            }
            uint64_t v19 = a1;
LABEL_27:
            *uint64_t v19 = v15;
            if (++v13 == 8) {
              break;
            }
          }
          float v5 = v12;
          v14 += 4;
          if (++v12 == a2) {
            goto LABEL_29;
          }
        }
        BOOL v2 = v12 + 1 == a2;
      }
      break;
  }
  return v2;
}

float *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *,float *>(float *a1, float *a2, float *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    float v6 = a2;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 5)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      float v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    int v13 = v6;
    if (v6 != a3)
    {
      uint64_t v14 = v6;
      do
      {
        float v15 = *v14;
        if (*v14 > *a1)
        {
          *uint64_t v14 = *a1;
          *a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      int v13 = a3;
    }
    if (v8 >= 5)
    {
      uint64_t v16 = (unint64_t)v8 >> 2;
      do
      {
        uint64_t v17 = 0;
        float v18 = *a1;
        uint64_t v19 = a1;
        do
        {
          float v20 = v19;
          v19 += v17 + 1;
          uint64_t v21 = 2 * v17;
          uint64_t v17 = (2 * v17) | 1;
          uint64_t v22 = v21 + 2;
          if (v22 < v16 && *v19 > v19[1])
          {
            ++v19;
            uint64_t v17 = v22;
          }
          *float v20 = *v19;
        }
        while (v17 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        if (v19 != --v6)
        {
          *uint64_t v19 = *v6;
          *float v6 = v18;
          uint64_t v23 = (char *)v19 - (char *)a1 + 4;
          if (v23 < 5) {
            continue;
          }
          unint64_t v24 = (((unint64_t)v23 >> 2) - 2) >> 1;
          float v25 = &a1[v24];
          float v26 = *v25;
          float v18 = *v19;
          if (*v25 <= *v19) {
            continue;
          }
          do
          {
            *uint64_t v19 = v26;
            uint64_t v19 = v25;
            if (!v24) {
              break;
            }
            unint64_t v24 = (v24 - 1) >> 1;
            float v25 = &a1[v24];
            float v26 = *v25;
          }
          while (*v25 > v18);
        }
        *uint64_t v19 = v18;
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(uint64_t result, uint64_t a2, uint64_t a3, float *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 2)
    {
      uint64_t v6 = v4 >> 1;
      uint64_t v7 = (v4 >> 1) + 1;
      uint64_t v8 = (float *)(result + 4 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 < a3 && *v8 > v8[1])
      {
        ++v8;
        uint64_t v7 = v9;
      }
      float v10 = *v8;
      float v11 = *a4;
      if (*v8 <= *a4)
      {
        do
        {
          *a4 = v10;
          a4 = v8;
          if (v5 < v7) {
            break;
          }
          uint64_t v12 = 2 * v7;
          uint64_t v7 = (2 * v7) | 1;
          uint64_t v8 = (float *)(result + 4 * v7);
          uint64_t v13 = v12 + 2;
          if (v13 < a3 && *v8 > v8[1])
          {
            ++v8;
            uint64_t v7 = v13;
          }
          float v10 = *v8;
        }
        while (*v8 <= v11);
        *a4 = v11;
      }
    }
  }
  return result;
}

void sub_1B20EC1E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B20EC390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B20EC660(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__8(uint64_t a1)
{
}

void sub_1B20EC95C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL arabicToRoman(unint64_t a1, uint64_t a2)
{
  unint64_t v2 = a1 - 3000;
  if (a1 - 3000 >= 0xFFFFFFFFFFFFF449)
  {
    unint64_t v4 = a1;
    uint64_t v5 = 0;
    unint64_t v6 = 1000;
    do
    {
      if (v6 <= v4)
      {
        uint64_t v7 = 0;
        uint64_t v8 = (int *)(&arabicToRoman(unsigned long,TBuffer<wchar_t> &)::pppszRomanTable[9 * (3 - v5)])[v4 / v6 - 1];
        while (v8[v7++])
          ;
        TBuffer<wchar_t>::insert(a2, *(void *)(a2 + 16), v8, v7 - 1);
      }
      v4 %= v6;
      ++v5;
      v6 /= 0xAuLL;
    }
    while (v5 != 4);
  }
  return v2 < 0xFFFFFFFFFFFFF449;
}

BOOL romanToArabic(__int32 *a1, void *a2)
{
  *a2 = 0;
  __int32 v3 = *a1;
  if (*a1)
  {
    unint64_t v4 = a1;
    BOOL v5 = 0;
    while (1)
    {
      unint64_t v6 = wcschr(dword_1B25919E8, v3);
      if (!v6) {
        return 1;
      }
      if ((unint64_t)((char *)v6 - (char *)dword_1B25919E8) <= 0x18) {
        unint64_t v7 = v6 - dword_1B25919E8;
      }
      else {
        unint64_t v7 = v6 - dword_1B25919E8 - 7;
      }
      __int32 v8 = v4[1];
      if (!v8) {
        goto LABEL_19;
      }
      uint64_t v9 = wcschr(dword_1B25919E8, v8);
      if (!v9) {
        return 1;
      }
      unint64_t v10 = (unint64_t)((char *)v9 - (char *)dword_1B25919E8) <= 0x18
          ? v9 - dword_1B25919E8
          : v9 - dword_1B25919E8 - 7;
      if (v5 && v10 > v7) {
        return 1;
      }
      BOOL v5 = v7 == v10;
      if (v7)
      {
        if (v10 >= v7) {
          return 1;
        }
      }
      else if (v10 > v7 + 2)
      {
        return 1;
      }
      if (v10 > v7)
      {
        uint64_t v11 = romanToArabic(wchar_t const*,unsigned long &)::pNums[v10]
            - romanToArabic(wchar_t const*,unsigned long &)::pNums[v7]
            + *a2;
        *a2 = v11;
        v4 += 2;
      }
      else
      {
LABEL_19:
        uint64_t v11 = *a2 + romanToArabic(wchar_t const*,unsigned long &)::pNums[v7];
        *a2 = v11;
        ++v4;
      }
      __int32 v3 = *v4;
      if (!*v4) {
        return v11 == 0;
      }
    }
  }
  else
  {
    uint64_t v11 = 0;
    return v11 == 0;
  }
}

char *getNextToken(char *a1, uint64_t a2, char *a3)
{
  TBuffer<char>::resize(a2, 0);
  if (!a1) {
    return 0;
  }
  char v6 = *a1;
  if (!*a1) {
    return 0;
  }
  unint64_t v7 = a1;
  while (strchr(a3, v6))
  {
    int v8 = *++a1;
    char v6 = v8;
    ++v7;
    if (!v8) {
      return 0;
    }
  }
  uint64_t v9 = a1;
  do
  {
    if (strchr(a3, v6)) {
      break;
    }
    int v11 = *++v9;
    char v6 = v11;
  }
  while (v11);
  TBuffer<char>::resize(a2, 0);
  TBuffer<char>::insert(a2, 0, a1, v9 - v7);
  return v9;
}

int *getNextToken(int *a1, uint64_t a2, __int32 *a3)
{
  TBuffer<wchar_t>::resize(a2, 0);
  if (!a1) {
    return 0;
  }
  __int32 v6 = *a1;
  if (!*a1) {
    return 0;
  }
  unint64_t v7 = a1;
  while (wcschr(a3, v6))
  {
    __int32 v8 = a1[1];
    ++a1;
    __int32 v6 = v8;
    ++v7;
    if (!v8) {
      return 0;
    }
  }
  __int32 v9 = *a1;
  if (!*a1) {
    return 0;
  }
  unint64_t v10 = a1;
  do
  {
    if (wcschr(a3, v9)) {
      break;
    }
    __int32 v11 = v10[1];
    ++v10;
    __int32 v9 = v11;
  }
  while (v11);
  TBuffer<wchar_t>::resize(a2, 0);
  TBuffer<wchar_t>::insert(a2, 0, a1, v10 - v7);
  return v10;
}

uint64_t slashEscape(uint64_t result, uint64_t a2)
{
  for (unint64_t i = (int *)result; ; ++i)
  {
    int v4 = *i;
    if (*i > 12)
    {
      switch(v4)
      {
        case 13:
          unint64_t v5 = *(void *)(a2 + 16);
          uint64_t v6 = a2;
          unint64_t v7 = (int *)&unk_1B2591A3C;
          goto LABEL_13;
        case 34:
          unint64_t v5 = *(void *)(a2 + 16);
          uint64_t v6 = a2;
          unint64_t v7 = (int *)&unk_1B2591A54;
          goto LABEL_13;
        case 92:
          unint64_t v5 = *(void *)(a2 + 16);
          uint64_t v6 = a2;
          unint64_t v7 = (int *)&unk_1B2591A48;
LABEL_13:
          unint64_t v8 = 2;
          goto LABEL_14;
      }
      goto LABEL_16;
    }
    if (v4 == 9)
    {
      unint64_t v5 = *(void *)(a2 + 16);
      uint64_t v6 = a2;
      unint64_t v7 = (int *)&unk_1B2591A24;
      goto LABEL_13;
    }
    if (v4 == 10)
    {
      unint64_t v5 = *(void *)(a2 + 16);
      uint64_t v6 = a2;
      unint64_t v7 = (int *)&unk_1B2591A30;
      goto LABEL_13;
    }
    if (!v4) {
      break;
    }
LABEL_16:
    int v9 = *i;
    unint64_t v5 = *(void *)(a2 + 16);
    unint64_t v7 = &v9;
    uint64_t v6 = a2;
    unint64_t v8 = 1;
LABEL_14:
    uint64_t result = TBuffer<wchar_t>::insert(v6, v5, v7, v8);
  }
  return result;
}

{
  unsigned char *i;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  char v9;

  for (unint64_t i = (unsigned char *)result; ; ++i)
  {
    int v4 = *i;
    if (v4 > 0xC)
    {
      switch(v4)
      {
        case 0xDu:
          unint64_t v5 = *(void *)(a2 + 16);
          uint64_t v6 = a2;
          unint64_t v7 = "\\r";
          goto LABEL_13;
        case 0x22u:
          unint64_t v5 = *(void *)(a2 + 16);
          uint64_t v6 = a2;
          unint64_t v7 = "\\\"";
          goto LABEL_13;
        case 0x5Cu:
          unint64_t v5 = *(void *)(a2 + 16);
          uint64_t v6 = a2;
          unint64_t v7 = "\\\\"";
LABEL_13:
          unint64_t v8 = 2;
          goto LABEL_14;
      }
      goto LABEL_16;
    }
    if (v4 == 9)
    {
      unint64_t v5 = *(void *)(a2 + 16);
      uint64_t v6 = a2;
      unint64_t v7 = "\\t";
      goto LABEL_13;
    }
    if (v4 == 10)
    {
      unint64_t v5 = *(void *)(a2 + 16);
      uint64_t v6 = a2;
      unint64_t v7 = "\\n";
      goto LABEL_13;
    }
    if (!*i) {
      break;
    }
LABEL_16:
    int v9 = v4;
    unint64_t v5 = *(void *)(a2 + 16);
    unint64_t v7 = &v9;
    uint64_t v6 = a2;
    unint64_t v8 = 1;
LABEL_14:
    uint64_t result = TBuffer<char>::insert(v6, v5, v7, v8);
  }
  return result;
}

uint64_t tildeEscape(uint64_t result, uint64_t a2)
{
  for (unint64_t i = (unsigned char *)result; ; ++i)
  {
    unsigned int v4 = *i;
    if (v4 <= 0x1F) {
      break;
    }
    if (v4 != 32)
    {
      if (v4 == 95)
      {
        unint64_t v5 = *(void *)(a2 + 16);
        uint64_t v6 = a2;
        unint64_t v7 = "~_";
        goto LABEL_16;
      }
      if (v4 == 126)
      {
        unint64_t v5 = *(void *)(a2 + 16);
        uint64_t v6 = a2;
        unint64_t v7 = "~~";
        goto LABEL_16;
      }
      goto LABEL_18;
    }
    unint64_t v5 = *(void *)(a2 + 16);
    uint64_t v6 = a2;
    unint64_t v7 = "_";
LABEL_19:
    unint64_t v8 = 1;
LABEL_20:
    uint64_t result = TBuffer<char>::insert(v6, v5, v7, v8);
  }
  if (*i > 9u)
  {
    if (v4 == 10)
    {
      unint64_t v5 = *(void *)(a2 + 16);
      uint64_t v6 = a2;
      unint64_t v7 = "~n";
      goto LABEL_16;
    }
    if (v4 == 13)
    {
      unint64_t v5 = *(void *)(a2 + 16);
      uint64_t v6 = a2;
      unint64_t v7 = "~r";
LABEL_16:
      unint64_t v8 = 2;
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  if (v4 == 9)
  {
    unint64_t v5 = *(void *)(a2 + 16);
    uint64_t v6 = a2;
    unint64_t v7 = "~t";
    goto LABEL_16;
  }
  if (*i)
  {
LABEL_18:
    char v9 = v4;
    unint64_t v5 = *(void *)(a2 + 16);
    unint64_t v7 = &v9;
    uint64_t v6 = a2;
    goto LABEL_19;
  }
  return result;
}

quasar::Geography *quasar::Geography::Geography(quasar::Geography *this)
{
  *(_DWORD *)this = 0;
  quasar::GeoMemoriesConfig::GeoMemoriesConfig((unsigned char *)this + 4);
  *((void *)this + 8) = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((void *)this + 7) = (char *)this + 64;
  *((void *)this + 11) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = (char *)this + 88;
  *((void *)this + 17) = 0;
  *((void *)this + 18) = 0;
  *((void *)this + 16) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 12) = 0;
  *((unsigned char *)this + 120) = 0;
  return this;
}

BOOL quasar::Geography::wasConfigLoaded(quasar::Geography *this)
{
  return *(_DWORD *)this != 0;
}

void quasar::Geography::loadFromFile()
{
  quasar::PTree::PTree((quasar::PTree *)v0);
  quasar::PTree::readJsonFromFile();
}

{
  uint64_t v0;

  quasar::PTree::PTree((quasar::PTree *)&v0);
  quasar::PTree::readJsonFromFile();
}

void sub_1B20ED23C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, ...)
{
  va_start(va, a4);
  if (a4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
  }
  quasar::PTree::~PTree((quasar::PTree *)va);
  _Unwind_Resume(a1);
}

void quasar::Geography::loadFromJson(quasar::Geography *a1, int *a2, uint64_t a3)
{
  int v6 = *a2;
  if (*((char *)a2 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v7, *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else {
    std::string v7 = *(std::string *)(a2 + 2);
  }
  memset(&v8, 0, sizeof(v8));
  std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>(&v8, *((void *)a2 + 4), *((void *)a2 + 5), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 3));
  char v9 = *((unsigned char *)a2 + 56);
  quasar::Geography::loadAndEraseFromJson(a1, (quasar::PTree *)&v6, a3);
}

void sub_1B20ED4AC(_Unwind_Exception *a1)
{
  quasar::PTree::~PTree((quasar::PTree *)(v1 - 136));
  _Unwind_Resume(a1);
}

void sub_1B20ED580(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, long long a10, long long a11, long long a12, long long a13, long long a14, long long a15, long long a16, long long a17, long long a18, long long a19, long long a20,long long a21,long long a22,long long a23,long long a24,long long a25)
{
  float v26 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    if (quasar::gLogLevel >= 1)
    {
      float v27 = v26;
      a24 = 0u;
      a25 = 0u;
      a22 = 0u;
      a23 = 0u;
      a20 = 0u;
      a21 = 0u;
      a18 = 0u;
      a19 = 0u;
      a16 = 0u;
      a17 = 0u;
      a14 = 0u;
      a15 = 0u;
      a12 = 0u;
      a13 = 0u;
      a10 = 0u;
      a11 = 0u;
      a9 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
      float v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a9, (uint64_t)"GeoLM: Error while loading geo-config.json file: ", 49);
      float v29 = (const char *)(*(uint64_t (**)(void *))(*(void *)v27 + 16))(v27);
      size_t v30 = strlen(v29);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v29, v30);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a9);
    }
  }
  else if (quasar::gLogLevel >= 1)
  {
    a24 = 0u;
    a25 = 0u;
    a22 = 0u;
    a23 = 0u;
    a20 = 0u;
    a21 = 0u;
    a18 = 0u;
    a19 = 0u;
    a16 = 0u;
    a17 = 0u;
    a14 = 0u;
    a15 = 0u;
    a12 = 0u;
    a13 = 0u;
    a10 = 0u;
    a11 = 0u;
    a9 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a9, (uint64_t)"GeoLM: Unknown exception while reading geo-config.json", 54);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a9);
  }
  __cxa_end_catch();
  JUMPOUT(0x1B20ED568);
}

void sub_1B20ED6B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void quasar::Geography::loadAndEraseFromJson(quasar::Geography *a1, quasar::PTree *a2, uint64_t a3)
{
  unint64_t v5 = (quasar::filesystem::Path *)quasar::filesystem::Path::Path(&v7, a3);
  quasar::filesystem::Path::parent_path(v5, &v6);
  quasar::Geography::loadGeoConfigVersion(a1, a2);
}

void sub_1B20ED888(_Unwind_Exception *exception_object)
{
  *(void *)(v1 - 128) = &unk_1F0A51998;
  if (*(char *)(v1 - 97) < 0) {
    operator delete(*(void **)(v1 - 120));
  }
  *(void *)(v1 - 96) = &unk_1F0A51998;
  if (*(char *)(v1 - 65) < 0) {
    operator delete(*(void **)(v1 - 88));
  }
  _Unwind_Resume(exception_object);
}

void quasar::Geography::loadGeoConfigVersion(quasar::Geography *this, quasar::PTree *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "geo-config-version");
  quasar::PTree::getAndEraseInt<int>((uint64_t)a2, (uint64_t)__p);
}

void sub_1B20EDA2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v15 = v14;
  MEMORY[0x1B3EA8670](v15, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

void quasar::Geography::loadCacheRegionId(quasar::Geography *this, quasar::PTree *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "cache-region-id-enabled");
  quasar::PTree::getBoolOptional((uint64_t)a2, (uint64_t)__p);
}

void sub_1B20EDB0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::Geography::loadPlaceholderList(quasar::Geography *this, quasar::PTree *a2)
{
  std::string::basic_string[abi:ne180100]<0>(&v3, "region-dependent-variable-list");
  quasar::PTree::getChildOptional((uint64_t)a2, (uint64_t)&v3);
}

void sub_1B20EDCD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void quasar::Geography::loadRegions(quasar::Geography *this, quasar::PTree *a2, quasar::ModelLoader *a3, BOOL a4, quasar::filesystem::Path *a5)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "regions");
  quasar::PTree::getChildOptional((uint64_t)a2, (uint64_t)__p);
}

void sub_1B20EE81C()
{
}

void sub_1B20EE828(_Unwind_Exception *a1)
{
  if (*(char *)(v2 - 169) < 0) {
    operator delete(*(void **)(v1 + 272));
  }
  unsigned int v4 = *(std::__shared_weak_count **)(v1 + 312);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (*(char *)(v2 - 121) < 0) {
    operator delete(*(void **)(v1 + 320));
  }
  unint64_t v5 = (void **)(v2 - 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  _Unwind_Resume(a1);
}

void quasar::Geography::loadRegionsBitmap(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "regions-bitmap");
  quasar::PTree::getChildOptional(a2, (uint64_t)__p);
}

void sub_1B20EEA58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long __p, int a10, __int16 a11, char a12, char a13, uint64_t a14, long long a15, long long a16, long long a17, long long a18, long long a19, long long a20,long long a21,long long a22,long long a23,long long a24,long long a25,long long a26,long long a27,long long a28,long long a29)
{
  if (a13 < 0) {
    operator delete((void *)__p);
  }
  _Unwind_Resume(exception_object);
}

void **std::vector<std::shared_ptr<quasar::GeoRegion>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    void v18[4] = result;
    uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)result, v13);
    uint64_t v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)uint64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    std::vector<std::shared_ptr<quasar::GeoRegion>>::__swap_out_circular_buffer(a1, v18);
    char v9 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer(v18);
  }
  else
  {
    *uint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    char v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_1B20EED14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void quasar::Geography::addRegionContext(uint64_t a1, std::vector<std::string> *a2, kaldi::quasar::Vocab *this, uint64_t a4)
{
  uint64_t v8 = (std::string *)&a2[2];
  kaldi::quasar::Vocab::OOvWord(this, &v59);
  quasar::GeoMemories::rememberLastRegionId(v8, &v59, (unsigned char *)(a1 + 4));
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
  kaldi::quasar::Vocab::OOvWord(this, &v58);
  value = a2[3].__end_cap_.__value_;
  std::vector<std::string>::pointer end = a2[3].__end_;
  if (end >= value)
  {
    std::vector<std::string>::pointer begin = a2[3].__begin_;
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3);
    unint64_t v14 = v13 + 1;
    if (v13 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3);
    if (2 * v15 > v14) {
      unint64_t v14 = 2 * v15;
    }
    if (v15 >= 0x555555555555555) {
      unint64_t v16 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v16 = v14;
    }
    *(void *)&long long v43 = (char *)a2 + 88;
    if (v16) {
      long long v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&a2[3].__end_cap_, v16);
    }
    else {
      long long v17 = 0;
    }
    float v18 = &v17[24 * v13];
    *(void *)&long long v41 = v17;
    *((void *)&v41 + 1) = v18;
    *((void *)&v42 + 1) = &v17[24 * v16];
    long long v19 = *(_OWORD *)&v58.__r_.__value_.__l.__data_;
    *((void *)v18 + 2) = *((void *)&v58.__r_.__value_.__l + 2);
    *(_OWORD *)float v18 = v19;
    memset(&v58, 0, sizeof(v58));
    *(void *)&long long v42 = v18 + 24;
    std::vector<std::string>::__swap_out_circular_buffer(a2 + 3, (std::__split_buffer<std::string> *)&v41);
    float v20 = a2[3].__end_;
    std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&v41);
    int v21 = SHIBYTE(v58.__r_.__value_.__r.__words[2]);
    a2[3].__end_ = v20;
    if (v21 < 0) {
      operator delete(v58.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    long long v11 = *(_OWORD *)&v58.__r_.__value_.__l.__data_;
    end->__r_.__value_.__r.__words[2] = v58.__r_.__value_.__r.__words[2];
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v11;
    a2[3].__end_ = end + 1;
  }
  RegionalFstLmMap = (const void ***)quasar::GeoRegion::getRegionalFstLmMap(this);
  uint64_t v23 = RegionalFstLmMap + 1;
  unint64_t v24 = *RegionalFstLmMap;
  if (*RegionalFstLmMap != (const void **)(RegionalFstLmMap + 1))
  {
    do
    {
      std::__tree<std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>> const&>((uint64_t **)a2, v24 + 4, (long long *)v24 + 2);
      if ((v25 & 1) != 0 && quasar::gLogLevel >= 5)
      {
        long long v56 = 0u;
        long long v57 = 0u;
        long long v54 = 0u;
        long long v55 = 0u;
        long long v52 = 0u;
        long long v53 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        long long v48 = 0u;
        long long v49 = 0u;
        long long v46 = 0u;
        long long v47 = 0u;
        long long v44 = 0u;
        long long v45 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v41 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v41);
        float v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v41, (uint64_t)"Geo ClassLM template=", 21);
        int v27 = *((char *)v24 + 55);
        if (v27 >= 0) {
          uint64_t v28 = (uint64_t)(v24 + 4);
        }
        else {
          uint64_t v28 = (uint64_t)v24[4];
        }
        if (v27 >= 0) {
          uint64_t v29 = *((unsigned __int8 *)v24 + 55);
        }
        else {
          uint64_t v29 = (uint64_t)v24[5];
        }
        size_t v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, v28, v29);
        float v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" assigned to FST from geoRegion=", 32);
        kaldi::quasar::Vocab::OOvWord(this, &v58);
        if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v32 = &v58;
        }
        else {
          int v32 = (std::string *)v58.__r_.__value_.__r.__words[0];
        }
        if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v58.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v58.__r_.__value_.__l.__size_;
        }
        float v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v32, size);
        int v35 = *(char *)(a4 + 23);
        if (v35 >= 0) {
          uint64_t v36 = a4;
        }
        else {
          uint64_t v36 = *(void *)a4;
        }
        if (v35 >= 0) {
          uint64_t v37 = *(unsigned __int8 *)(a4 + 23);
        }
        else {
          uint64_t v37 = *(void *)(a4 + 8);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, v36, v37);
        if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v58.__r_.__value_.__l.__data_);
        }
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v41);
      }
      float v38 = (const void **)v24[1];
      if (v38)
      {
        do
        {
          float v39 = (const void ***)v38;
          float v38 = (const void **)*v38;
        }
        while (v38);
      }
      else
      {
        do
        {
          float v39 = (const void ***)v24[2];
          BOOL v40 = *v39 == v24;
          unint64_t v24 = (const void **)v39;
        }
        while (!v40);
      }
      unint64_t v24 = (const void **)v39;
    }
    while (v39 != v23);
  }
}

void sub_1B20EF01C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&a9);
  if (*(char *)(v9 - 113) < 0) {
    operator delete(*(void **)(v9 - 136));
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::Geography::getGeoMemoriesConfig(quasar::Geography *this)
{
  return (uint64_t)this + 4;
}

void quasar::Geography::addBitmapRegionContext(uint64_t a1, std::vector<std::string> *a2, quasar::Location *a3)
{
  unsigned int v4 = *(quasar::RegionsBitmapData **)(a1 + 104);
  if (v4)
  {
    int v6 = quasar::RegionsBitmapData::lookupBitmapColorForLocation(v4, a3);
    if (v6 >= 1)
    {
      uint64_t v7 = *(void *)(a1 + 64);
      if (v7)
      {
        uint64_t v8 = a1 + 64;
        do
        {
          int v9 = *(_DWORD *)(v7 + 32);
          BOOL v10 = v9 < v6;
          if (v9 >= v6) {
            long long v11 = (uint64_t *)v7;
          }
          else {
            long long v11 = (uint64_t *)(v7 + 8);
          }
          if (!v10) {
            uint64_t v8 = v7;
          }
          uint64_t v7 = *v11;
        }
        while (*v11);
        if (v8 != a1 + 64 && v6 >= *(_DWORD *)(v8 + 32))
        {
          uint64_t v12 = *(kaldi::quasar::Vocab **)(v8 + 40);
          std::string::basic_string[abi:ne180100]<0>(__p, " based on regions bitmap");
          quasar::Geography::addRegionContext(a1, a2, v12, (uint64_t)__p);
          if (v14 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }
  }
}

void sub_1B20EF154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::Geography::getGeoContext(uint64_t a1@<X0>, quasar::Location *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  BOOL v10 = (char *)operator new(0x78uLL);
  *((void *)v10 + 4) = 0;
  *((void *)v10 + 3) = v10 + 32;
  long long v11 = (std::vector<std::string> *)(v10 + 24);
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  *(void *)BOOL v10 = &unk_1F0A625F8;
  *((void *)v10 + 8) = 0;
  *((void *)v10 + 7) = 0;
  *((void *)v10 + 5) = 0;
  *((void *)v10 + 6) = v10 + 56;
  *(_OWORD *)(v10 + 72) = 0u;
  *(_OWORD *)(v10 + 88) = 0u;
  *(_OWORD *)(v10 + 104) = 0u;
  *a5 = v10 + 24;
  a5[1] = v10;
  uint64_t v12 = *(unsigned __int8 *)(a4 + 23);
  if ((v12 & 0x80u) != 0) {
    uint64_t v12 = *(void *)(a4 + 8);
  }
  if (v12)
  {
    if (quasar::gLogLevel >= 5)
    {
      long long v37 = 0uLL;
      long long v38 = 0uLL;
      long long v35 = 0uLL;
      long long v36 = 0uLL;
      long long v33 = 0uLL;
      long long v34 = 0uLL;
      long long v31 = 0uLL;
      long long v32 = 0uLL;
      long long v29 = 0uLL;
      long long v30 = 0uLL;
      long long v27 = 0uLL;
      long long v28 = 0uLL;
      long long v25 = 0uLL;
      long long v26 = 0uLL;
      long long v23 = 0uLL;
      long long v24 = 0uLL;
      *(_OWORD *)std::vector<std::string> __p = 0uLL;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      unint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Using regionId ", 15);
      int v14 = *(char *)(a4 + 23);
      if (v14 >= 0) {
        uint64_t v15 = a4;
      }
      else {
        uint64_t v15 = *(void *)a4;
      }
      if (v14 >= 0) {
        uint64_t v16 = *(unsigned __int8 *)(a4 + 23);
      }
      else {
        uint64_t v16 = *(void *)(a4 + 8);
      }
      long long v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v15, v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" instead of location", 20);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
    }
    quasar::Geography::resolveRegionId(a1, a4, &v20);
    float v18 = v20;
    if (v20)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, " based on known region id");
      quasar::Geography::addRegionContext(a1, v11, v18, (uint64_t)__p);
      if (SBYTE7(v23) < 0) {
        operator delete(__p[0]);
      }
    }
    if (v21) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v21);
    }
  }
  else if (quasar::Location::isUnknown(a2))
  {
    quasar::Geography::addContextForUnknownLocation(a1, v11, a2, a3);
  }
  else
  {
    quasar::Geography::addContextForKnownLocation(a1, v11, a2);
  }
  if (*((void *)v10 + 12) == *((void *)v10 + 13) && *(int *)a1 >= 4)
  {
    long long v19 = *(kaldi::quasar::Vocab **)(a1 + 16);
    std::string::basic_string[abi:ne180100]<0>(__p, " based on default region");
    quasar::Geography::addRegionContext(a1, v11, v19, (uint64_t)__p);
    if (SBYTE7(v23) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1B20EF3A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void quasar::Geography::resolveRegionId(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 80, (const void **)a2);
  if (a1 + 88 == v6)
  {
    if (quasar::gLogLevel >= 5)
    {
      memset(v12, 0, sizeof(v12));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
      uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Cannot resolve regionId=", 24);
      int v9 = *(char *)(a2 + 23);
      if (v9 >= 0) {
        BOOL v10 = (const void *)a2;
      }
      else {
        BOOL v10 = *(const void **)a2;
      }
      if (v9 >= 0) {
        uint64_t v11 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        uint64_t v11 = *(void *)(a2 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v10, v11);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v12);
    }
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    uint64_t v7 = *(void *)(v6 + 64);
    *a3 = *(void *)(v6 + 56);
    a3[1] = v7;
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
  }
}

void sub_1B20EF4FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void quasar::Geography::addContextForUnknownLocation(uint64_t a1, std::vector<std::string> *a2, quasar::Location *this, uint64_t a4)
{
  if (!quasar::Location::isUnknown(this))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    quasar::Location::toString((uint64_t *)&v28, this);
    int v9 = std::string::insert(&v28, 0, "Internal error, unknown location expected but got ");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    *(void *)&long long v12 = *((void *)&v9->__r_.__value_.__l + 2);
    long long v11 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, (const std::string *)&v11);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (quasar::Location::isDenied(this))
  {
    if (quasar::gLogLevel >= 5)
    {
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      long long v14 = 0u;
      long long v15 = 0u;
      long long v12 = 0u;
      long long v13 = 0u;
      long long v11 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v11, (uint64_t)"Access to geo location denied", 29);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v11);
    }
  }
  else if (quasar::Location::isUndefined(this))
  {
    quasar::Geography::addContextFromOldMemories(a1, a2, a4);
  }
}

void sub_1B20EF68C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

void quasar::Geography::addContextForKnownLocation(uint64_t a1, std::vector<std::string> *a2, quasar::Location *this)
{
  if (quasar::Location::isUnknown(this))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    uint64_t v8 = this;
    int v9 = exception;
    quasar::Location::toString((uint64_t *)&v29, v8);
    long long v10 = std::string::insert(&v29, 0, "Internal error, known location expected but got ");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    *(void *)&long long v13 = *((void *)&v10->__r_.__value_.__l + 2);
    long long v12 = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v9, (const std::string *)&v12);
    __cxa_throw(v9, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (quasar::gLogLevel >= 5)
  {
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v12 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v12);
    uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"Computing geo context for ", 26);
    quasar::operator<<(v6, (double *)this);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v12);
  }
  quasar::Geography::addBitmapRegionContext(a1, a2, this);
  quasar::Geography::addCircleRegionsContext(a1, a2, this);
}

void sub_1B20EF848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v16 - 33) < 0)
  {
    operator delete(*(void **)(v16 - 56));
    if ((v15 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v14);
  goto LABEL_8;
}

void quasar::Geography::addCircleRegionsContext(uint64_t a1, std::vector<std::string> *a2, quasar::Location *a3)
{
  long long v52 = 0;
  long long v53 = 0;
  long long v54 = 0;
  uint64_t v5 = *(void *)(a1 + 32);
  if (*(void *)(a1 + 40) == v5)
  {
    unint64_t v28 = 0;
    uint64_t v27 = 0;
  }
  else
  {
    unint64_t v7 = 0;
    do
    {
      uint64_t v8 = *(quasar::GeoRegion **)(v5 + 16 * v7);
      CircleRegion = (quasar::CircleRegion **)quasar::GeoRegion::getCircleRegion(v8);
      v35[0] = COERCE_VOID_(quasar::CircleRegion::getLocation(*CircleRegion));
      v35[1] = v10;
      double DistanceKm = quasar::Location::getDistanceKm(a3, (const quasar::Location *)v35);
      long long v12 = (quasar::CircleRegion **)quasar::GeoRegion::getCircleRegion(v8);
      if (DistanceKm <= quasar::CircleRegion::getMaxRadiusKm(*v12))
      {
        long long v13 = v53;
        if (v53 >= v54)
        {
          uint64_t v15 = ((char *)v53 - (char *)v52) >> 4;
          unint64_t v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 60) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v17 = (char *)v54 - (char *)v52;
          if (v54 - v52 > v16) {
            unint64_t v16 = v17 >> 3;
          }
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v18 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v18 = v16;
          }
          if (v18) {
            long long v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)&v54, v18);
          }
          else {
            long long v19 = 0;
          }
          long long v20 = &v19[16 * v15];
          *(double *)long long v20 = DistanceKm;
          *((void *)v20 + 1) = v7;
          long long v22 = v52;
          long long v21 = v53;
          long long v23 = v20;
          if (v53 != v52)
          {
            do
            {
              *((_OWORD *)v23 - 1) = *((_OWORD *)v21 - 1);
              v23 -= 16;
              v21 -= 2;
            }
            while (v21 != v22);
            long long v21 = v52;
          }
          long long v14 = (double *)(v20 + 16);
          long long v52 = (double *)v23;
          long long v53 = (double *)(v20 + 16);
          long long v54 = (double *)&v19[16 * v18];
          if (v21) {
            operator delete(v21);
          }
        }
        else
        {
          *long long v53 = DistanceKm;
          *((void *)v13 + 1) = v7;
          long long v14 = v13 + 2;
        }
        long long v53 = v14;
        if (quasar::gLogLevel >= 5)
        {
          long long v50 = 0u;
          long long v51 = 0u;
          long long v48 = 0u;
          long long v49 = 0u;
          long long v46 = 0u;
          long long v47 = 0u;
          long long v44 = 0u;
          long long v45 = 0u;
          long long v42 = 0u;
          long long v43 = 0u;
          long long v40 = 0u;
          long long v41 = 0u;
          long long v38 = 0u;
          long long v39 = 0u;
          long long v36 = 0u;
          long long v37 = 0u;
          *(_OWORD *)long long v35 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v35);
          long long v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"Location is within max radius of geoRegion=", 43);
          kaldi::quasar::Vocab::OOvWord(v8, &__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = __p.__r_.__value_.__l.__size_;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)p_p, size);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v35);
        }
      }
      ++v7;
      uint64_t v5 = *(void *)(a1 + 32);
    }
    while (v7 < (*(void *)(a1 + 40) - v5) >> 4);
    uint64_t v27 = (uint64_t)v52;
    unint64_t v28 = (unint64_t)v53;
  }
  unint64_t v29 = 126 - 2 * __clz((uint64_t)(v28 - v27) >> 4);
  if (v28 == v27) {
    uint64_t v30 = 0;
  }
  else {
    uint64_t v30 = v29;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *,false>(v27, v28, (uint64_t)v35, v30, 1);
  long long v31 = (int *)v52;
  long long v32 = (int *)v53;
  if (v52 != v53)
  {
    do
    {
      long long v33 = *(kaldi::quasar::Vocab **)(*(void *)(a1 + 32) + 16 * v31[2]);
      std::string::basic_string[abi:ne180100]<0>(v35, " based on circle regions");
      quasar::Geography::addRegionContext(a1, a2, v33, (uint64_t)v35);
      if (SBYTE7(v36) < 0) {
        operator delete(v35[0]);
      }
      v31 += 4;
    }
    while (v31 != v32);
    long long v31 = (int *)v52;
  }
  if (v31)
  {
    long long v53 = (double *)v31;
    operator delete(v31);
  }
}

void sub_1B20EFBB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  long long v23 = *(void **)(v21 - 136);
  if (v23)
  {
    *(void *)(v21 - 128) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(exception_object);
}

void quasar::Geography::addContextFromOldMemories(uint64_t a1, std::vector<std::string> *a2, uint64_t a3)
{
  quasar::GeoMemories::recallLastRegionId(a3, (unsigned char *)(a1 + 4), &v10);
  quasar::Geography::resolveRegionId(a1, (uint64_t)&v10, &v8);
  uint64_t v5 = v8;
  if (v8)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, " based on cached region id");
    quasar::Geography::addRegionContext(a1, a2, v5, (uint64_t)__p);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
}

void sub_1B20EFCD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void *_ZNSt3__115allocate_sharedB8ne180100IN6quasar9GeoRegionENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0xB8uLL);
  uint64_t result = _ZNSt3__120__shared_ptr_emplaceIN6quasar9GeoRegionENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B20EFD54(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *_ZNSt3__120__shared_ptr_emplaceIN6quasar9GeoRegionENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A625C0;
  quasar::GeoRegion::GeoRegion((quasar::GeoRegion *)(a1 + 3));
  return a1;
}

void sub_1B20EFDB0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::GeoRegion>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A625C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::GeoRegion>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A625C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::GeoRegion>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::vector<std::shared_ptr<quasar::GeoRegion>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<quasar::GeoRegion>>,std::reverse_iterator<std::shared_ptr<quasar::GeoRegion>*>,std::reverse_iterator<std::shared_ptr<quasar::GeoRegion>*>,std::reverse_iterator<std::shared_ptr<quasar::GeoRegion>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<quasar::GeoRegion>>,std::reverse_iterator<std::shared_ptr<quasar::GeoRegion>*>,std::reverse_iterator<std::shared_ptr<quasar::GeoRegion>*>,std::reverse_iterator<std::shared_ptr<quasar::GeoRegion>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::GeoRegion>>,std::reverse_iterator<std::shared_ptr<quasar::GeoRegion>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::GeoRegion>>,std::reverse_iterator<std::shared_ptr<quasar::GeoRegion>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::FeatureExtractor>>,std::reverse_iterator<std::shared_ptr<quasar::FeatureExtractor>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t **std::__tree<std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>>>::__emplace_unique_key_args<int,int &,std::shared_ptr<quasar::GeoRegion>&>(uint64_t **a1, int *a2, _DWORD *a3, void *a4)
{
  uint64_t v8 = a1 + 1;
  uint64_t v7 = a1[1];
  if (v7)
  {
    int v9 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v10 = (uint64_t **)v7;
        int v11 = *((_DWORD *)v7 + 8);
        if (v9 >= v11) {
          break;
        }
        uint64_t v7 = *v10;
        uint64_t v8 = v10;
        if (!*v10) {
          goto LABEL_10;
        }
      }
      if (v11 >= v9) {
        return v10;
      }
      uint64_t v7 = v10[1];
      if (!v7)
      {
        uint64_t v8 = v10 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v10 = a1 + 1;
LABEL_10:
    long long v12 = operator new(0x38uLL);
    v12[8] = *a3;
    uint64_t v13 = a4[1];
    *((void *)v12 + 5) = *a4;
    *((void *)v12 + 6) = v13;
    if (v13) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
    }
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v10, v8, (uint64_t *)v12);
  }
  return (uint64_t **)v12;
}

void *_ZNSt3__115allocate_sharedB8ne180100IN6quasar17RegionsBitmapDataENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x60uLL);
  uint64_t result = _ZNSt3__120__shared_ptr_emplaceIN6quasar17RegionsBitmapDataENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B20F00B4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *_ZNSt3__120__shared_ptr_emplaceIN6quasar17RegionsBitmapDataENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A60448;
  quasar::RegionsBitmapData::RegionsBitmapData(a1 + 3);
  return a1;
}

void sub_1B20F0110(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::RegionsBitmapData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60448;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::RegionsBitmapData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60448;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<quasar::RegionsBitmapData>::__on_zero_shared(uint64_t a1)
{
  std::allocator<quasar::RegionsBitmapData>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

void std::allocator<quasar::RegionsBitmapData>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  long long v3 = *(std::__shared_weak_count **)(a2 + 64);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (*(char *)(a2 + 23) < 0)
  {
    unsigned int v4 = *(void **)a2;
    operator delete(v4);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>> const&>(uint64_t **a1, const void **a2, long long *a3)
{
  uint64_t v5 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v10, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = v5;
    std::__tree<std::__value_type<std::string,std::shared_ptr<quasar::ProcessingBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<quasar::ProcessingBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<quasar::ProcessingBlock>>>>::__construct_node<std::pair<std::string const,std::shared_ptr<quasar::ProcessingBlock>> const&>((uint64_t)a1, a3, (uint64_t)v9);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v10, v7, v9[0]);
    uint64_t v6 = v9[0];
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<void>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<void>>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

void std::__shared_ptr_emplace<quasar::Geography::GeoContext>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A625F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::Geography::GeoContext>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A625F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<quasar::Geography::GeoContext>::__on_zero_shared(uint64_t a1)
{
  std::allocator<quasar::Geography::GeoContext>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

void std::allocator<quasar::Geography::GeoContext>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  long long v3 = (void **)(a2 + 72);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a2 + 71) < 0) {
    operator delete(*(void **)(a2 + 48));
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(a2 + 24, *(void **)(a2 + 32));
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(a2, *(void **)(a2 + 8));
}

void *quasar::StructuredPredictionOptions::options@<X0>(quasar::StructuredPredictionOptions *this@<X0>, void *a2@<X8>)
{
  unsigned int v4 = (char *)this + 1728;
  uint64_t v5 = *(void *)(*((void *)this + 216) - 24);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  uint64_t result = operator new(0x78uLL);
  a2[2] = result + 15;
  *uint64_t result = (char *)this + 16;
  result[1] = (char *)this + 176;
  result[2] = (char *)this + 336;
  result[3] = (char *)this + 496;
  result[4] = (char *)this + 656;
  result[5] = (char *)this + 816;
  result[6] = (char *)this + 976;
  result[7] = (char *)this + 1136;
  result[8] = (char *)this + 1296;
  result[9] = (char *)this + 1440;
  result[10] = (char *)this + 1584;
  result[11] = &v4[v5];
  result[12] = (char *)this + 1880;
  result[13] = (char *)this + 2040;
  result[14] = (char *)this + 2184;
  *a2 = result;
  a2[1] = result + 15;
  return result;
}

void quasar::recomputeAlignment(uint64_t *a1)
{
  uint64_t v46 = 0;
  long long v47 = 0;
  unint64_t v48 = 0;
  uint64_t v2 = *a1;
  uint64_t v31 = a1[1];
  if (*a1 != v31)
  {
    do
    {
      kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&__src);
      long long v3 = v47;
      if ((unint64_t)v47 >= v48)
      {
        unsigned int v4 = (kaldi::quasar::TranslationUtil::NbestElement *)std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__push_back_slow_path<kaldi::quasar::TranslationUtil::NbestElement>(&v46, (const kaldi::quasar::TranslationUtil::NbestElement *)&__src);
      }
      else
      {
        kaldi::quasar::TranslationUtil::NbestElement::NbestElement(v47, (const kaldi::quasar::TranslationUtil::NbestElement *)&__src);
        unsigned int v4 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v3 + 272);
      }
      long long v47 = v4;
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&__src);
      uint64_t v5 = *(void *)(v2 + 136);
      uint64_t v6 = *(void *)(v2 + 144);
      if (v5 != v6)
      {
        uint64_t v7 = (uint64_t *)((char *)v47 - 272);
        uint64_t v8 = (uint64_t *)((char *)v47 - 264);
        int v9 = (void *)((char *)v47 - 256);
        do
        {
          long long __src = 0uLL;
          uint64_t v33 = 0;
          long long v34 = 0u;
          long long v35 = 0u;
          long long v36 = 0u;
          long long v37 = 0u;
          long long v38 = 0u;
          long long v39 = 0u;
          long long v40 = 0u;
          long long v41 = 0u;
          long long v42 = 0u;
          long long v43 = 0u;
          long long v44 = 0u;
          memset(v45, 0, sizeof(v45));
          uint64_t v10 = *v8;
          if ((unint64_t)*v8 >= *v9)
          {
            uint64_t v11 = std::vector<kaldi::quasar::TranslationUtil::PathElement>::__push_back_slow_path<kaldi::quasar::TranslationUtil::PathElement>(v7, &__src);
          }
          else
          {
            std::allocator<kaldi::quasar::TranslationUtil::PathElement>::construct[abi:ne180100]<kaldi::quasar::TranslationUtil::PathElement,kaldi::quasar::TranslationUtil::PathElement>((uint64_t)v9, *v8, &__src);
            uint64_t v11 = v10 + 240;
            uint64_t *v8 = v10 + 240;
          }
          uint64_t *v8 = v11;
          kaldi::quasar::TranslationUtil::PathElement::~PathElement((kaldi::quasar::TranslationUtil::PathElement *)&__src);
          uint64_t v12 = *v8;
          uint64_t v13 = (char *)(*v8 - 104);
          if (v13 != (char *)(v5 + 104)) {
            std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v13, *(char **)(v5 + 104), *(void *)(v5 + 112), (uint64_t)(*(void *)(v5 + 112) - *(void *)(v5 + 104)) >> 2);
          }
          long long v14 = *(float **)(v5 + 104);
          long long v15 = *(float **)(v5 + 112);
          if (v14 == v15)
          {
            uint64_t v17 = *(float **)(v5 + 104);
          }
          else
          {
            unint64_t v16 = v14 + 1;
            uint64_t v17 = *(float **)(v5 + 104);
            if (v14 + 1 != v15)
            {
              float v18 = *v14;
              uint64_t v17 = *(float **)(v5 + 104);
              long long v19 = v14 + 1;
              do
              {
                float v20 = *v19++;
                float v21 = v20;
                if (v18 < v20)
                {
                  float v18 = v21;
                  uint64_t v17 = v16;
                }
                unint64_t v16 = v19;
              }
              while (v19 != v15);
            }
          }
          LODWORD(__src) = (unint64_t)((char *)v17 - (char *)v14) >> 2;
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v12 - 152), (char *)&__src, (uint64_t)&__src + 4, 1uLL);
          v5 += 136;
        }
        while (v5 != v6);
      }
      v2 += 200;
    }
    while (v2 != v31);
  }
  kaldi::quasar::TranslationUtil::ComputeBackwardAlignments((uint64_t)&v46);
  kaldi::quasar::TranslationUtil::MergeAlignments((uint64_t)&v46);
  uint64_t v22 = *a1;
  uint64_t v23 = a1[1];
  if (v23 != *a1)
  {
    unint64_t v24 = 0;
    do
    {
      uint64_t v25 = *(void *)(v22 + 200 * v24 + 136);
      if (*(void *)(v22 + 200 * v24 + 144) != v25)
      {
        uint64_t v26 = 0;
        unint64_t v27 = 0;
        uint64_t v28 = 32;
        do
        {
          uint64_t v29 = *(void *)(v46 + 272 * v24) + v26;
          if (v29 + 88 != v25 + v28)
          {
            std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v25 + v28), *(char **)(v29 + 88), *(void *)(v29 + 96), (uint64_t)(*(void *)(v29 + 96) - *(void *)(v29 + 88)) >> 2);
            uint64_t v22 = *a1;
          }
          ++v27;
          uint64_t v30 = v22 + 200 * v24;
          uint64_t v25 = *(void *)(v30 + 136);
          v26 += 240;
          v28 += 136;
        }
        while (0xF0F0F0F0F0F0F0F1 * ((*(void *)(v30 + 144) - v25) >> 3) > v27);
        uint64_t v23 = a1[1];
      }
      ++v24;
    }
    while (0x8F5C28F5C28F5C29 * ((v23 - v22) >> 3) > v24);
  }
  *(void *)&long long __src = &v46;
  std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__destroy_vector::operator()[abi:ne180100]((void ***)&__src);
}

void sub_1B20F0730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11)
{
  a11 = (void **)(v11 - 112);
  std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__destroy_vector::operator()[abi:ne180100](&a11);
  _Unwind_Resume(a1);
}

uint64_t quasar::manyToOneAssignments(void *a1)
{
  long long v3 = (void *)*a1;
  char v1 = a1 + 1;
  uint64_t v2 = v3;
  if (v3 == v1) {
    return 6;
  }
  while (*((_DWORD *)v2 + 8) != 5)
  {
    unsigned int v4 = (void *)v2[1];
    if (v4)
    {
      do
      {
        uint64_t v5 = v4;
        unsigned int v4 = (void *)*v4;
      }
      while (v4);
    }
    else
    {
      do
      {
        uint64_t v5 = (void *)v2[2];
        BOOL v6 = *v5 == (void)v2;
        uint64_t v2 = v5;
      }
      while (!v6);
    }
    uint64_t v2 = v5;
    if (v5 == v1) {
      return 6;
    }
  }
  return 5;
}

void quasar::computeTokenCharMapping(quasar *this, const quasar::TranslationPhraseInternal *a2)
{
  v7[0] = 0;
  v7[1] = 0;
  v6[1] = 0;
  v6[2] = v7;
  uint64_t v5 = v6;
  v6[0] = 0;
  uint64_t v2 = quasar::MetaInfo::get((quasar *)((char *)this + 192));
  int v4 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "tokenizer output");
  quasar::PTree::getChild(v2, (uint64_t)__p);
}

void sub_1B20F0B4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::__tree<int>::destroy(v17 - 152, *(void **)(v16 + 288));
  std::__tree<int>::destroy(v17 - 128, *(void **)(v16 + 312));
  _Unwind_Resume(a1);
}

void quasar::computeTokenSpmMapping(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = a4 + 8;
  int v38 = 0;
  uint64_t v4 = *(void *)(a1 + 136);
  uint64_t v5 = *(void *)(a1 + 144);
  if (v4 != v5)
  {
    uint64_t v7 = (int *)(a3 + 8);
    do
    {
      int v8 = *(char *)(a2 + 23);
      if (v8 >= 0) {
        int v9 = (void *)a2;
      }
      else {
        int v9 = *(void **)a2;
      }
      if (v8 >= 0) {
        unint64_t v10 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        unint64_t v10 = *(void *)(a2 + 8);
      }
      quasar::utf8::codepointsCtr(v9, v10, 0, *(_DWORD *)(v4 + 128), (unint64_t)v35);
      if (v37)
      {
        int v11 = (int)v35[0];
      }
      else
      {
        *(_OWORD *)std::string __p = *(_OWORD *)v35;
        uint64_t v40 = v36;
        v35[0] = 0;
        v35[1] = 0;
        uint64_t v36 = 0;
        if (quasar::gLogLevel >= 1)
        {
          long long v56 = 0u;
          long long v57 = 0u;
          long long v54 = 0u;
          long long v55 = 0u;
          long long v52 = 0u;
          long long v53 = 0u;
          long long v50 = 0u;
          long long v51 = 0u;
          long long v48 = 0u;
          long long v49 = 0u;
          long long v46 = 0u;
          long long v47 = 0u;
          long long v45 = 0u;
          long long v43 = 0u;
          long long v44 = 0u;
          long long v41 = 0u;
          long long v42 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v41);
          if (v40 >= 0) {
            uint64_t v12 = __p;
          }
          else {
            uint64_t v12 = (void **)__p[0];
          }
          if (v40 >= 0) {
            uint64_t v13 = HIBYTE(v40);
          }
          else {
            uint64_t v13 = (uint64_t)__p[1];
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v41, (uint64_t)v12, v13);
          quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v41);
        }
        if (SHIBYTE(v40) < 0) {
          operator delete(__p[0]);
        }
        int v11 = 0;
        if (!v37 && SHIBYTE(v36) < 0)
        {
          operator delete(v35[0]);
          int v11 = 0;
        }
      }
      int v14 = *(char *)(a2 + 23);
      if (v14 >= 0) {
        long long v15 = (void *)a2;
      }
      else {
        long long v15 = *(void **)a2;
      }
      if (v14 >= 0) {
        unint64_t v16 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        unint64_t v16 = *(void *)(a2 + 8);
      }
      quasar::utf8::codepointsCtr(v15, v16, 0, *(_DWORD *)(v4 + 132), (unint64_t)v35);
      if (v37)
      {
        int v17 = (int)v35[0];
      }
      else
      {
        *(_OWORD *)std::string __p = *(_OWORD *)v35;
        uint64_t v40 = v36;
        v35[0] = 0;
        v35[1] = 0;
        uint64_t v36 = 0;
        if (quasar::gLogLevel >= 1)
        {
          long long v56 = 0u;
          long long v57 = 0u;
          long long v54 = 0u;
          long long v55 = 0u;
          long long v52 = 0u;
          long long v53 = 0u;
          long long v50 = 0u;
          long long v51 = 0u;
          long long v48 = 0u;
          long long v49 = 0u;
          long long v46 = 0u;
          long long v47 = 0u;
          long long v45 = 0u;
          long long v43 = 0u;
          long long v44 = 0u;
          long long v41 = 0u;
          long long v42 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v41);
          if (v40 >= 0) {
            float v18 = __p;
          }
          else {
            float v18 = (void **)__p[0];
          }
          if (v40 >= 0) {
            uint64_t v19 = HIBYTE(v40);
          }
          else {
            uint64_t v19 = (uint64_t)__p[1];
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v41, (uint64_t)v18, v19);
          quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v41);
        }
        if (SHIBYTE(v40) < 0) {
          operator delete(__p[0]);
        }
        int v17 = 0;
        if (!v37 && SHIBYTE(v36) < 0)
        {
          operator delete(v35[0]);
          int v17 = 0;
        }
      }
      *((void *)&v41 + 1) = 0;
      *(void *)&long long v42 = 0;
      *(void *)&long long v41 = (char *)&v41 + 8;
      if (v11 < v17)
      {
        do
        {
          uint64_t v20 = *(void *)v7;
          if (*(void *)v7)
          {
            float v21 = v7;
            do
            {
              int v22 = *(_DWORD *)(v20 + 28);
              BOOL v23 = v22 < v11;
              if (v22 >= v11) {
                unint64_t v24 = (uint64_t *)v20;
              }
              else {
                unint64_t v24 = (uint64_t *)(v20 + 8);
              }
              if (!v23) {
                float v21 = (int *)v20;
              }
              uint64_t v20 = *v24;
            }
            while (*v24);
            if (v21 != v7 && v11 >= v21[7])
            {
              v35[0] = v21 + 8;
              uint64_t v25 = std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v41, v21 + 8, (uint64_t)&std::piecewise_construct, (unsigned int **)v35);
              ++*((_DWORD *)v25 + 8);
            }
          }
          ++v11;
        }
        while (v11 != v17);
        if ((void)v42)
        {
          uint64_t v26 = (char *)v41;
          unint64_t v27 = (char *)&v41 + 8;
          if ((long long *)v41 != (long long *)((char *)&v41 + 8))
          {
LABEL_60:
            unint64_t v27 = v26;
            while (1)
            {
              uint64_t v28 = (char *)*((void *)v26 + 1);
              uint64_t v29 = v26;
              if (v28)
              {
                do
                {
                  uint64_t v26 = v28;
                  uint64_t v28 = *(char **)v28;
                }
                while (v28);
              }
              else
              {
                do
                {
                  uint64_t v26 = (char *)*((void *)v29 + 2);
                  BOOL v30 = *(void *)v26 == (void)v29;
                  uint64_t v29 = v26;
                }
                while (!v30);
              }
              if (v26 == (char *)&v41 + 8) {
                break;
              }
              int v31 = *((_DWORD *)v27 + 7);
              int v32 = *((_DWORD *)v26 + 7);
              if (v31 < v32 || v32 >= v31 && *((_DWORD *)v27 + 8) < *((_DWORD *)v26 + 8)) {
                goto LABEL_60;
              }
            }
          }
          int v33 = *((_DWORD *)v27 + 7);
          v35[0] = &v38;
          *((_DWORD *)std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)a4, &v38, (uint64_t)&std::piecewise_construct, (unsigned int **)v35)+ 8) = v33;
        }
      }
      ++v38;
      std::__tree<int>::destroy((uint64_t)&v41, *((void **)&v41 + 1));
      v4 += 136;
    }
    while (v4 != v5);
  }
}

void sub_1B20F0F6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (!a16 && a15 < 0) {
    operator delete(a10);
  }
  std::__tree<int>::destroy(a9, *(void **)(a9 + 8));
  _Unwind_Resume(a1);
}

void quasar::findStructureTags(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  uint64_t v43 = a1;
  unint64_t v44 = a2;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  quasar::OptionValue<std::string>::OptionValue(v45, a3 + 16);
  int v46 = 0;
  quasar::OptionValue<std::string>::OptionValue(v47, a3 + 176);
  int v48 = 1;
  quasar::OptionValue<std::string>::OptionValue(v49, a3 + 336);
  int v50 = 2;
  quasar::OptionValue<std::string>::OptionValue(v51, a3 + 496);
  uint64_t v6 = 0;
  int v52 = 3;
  uint64_t v7 = v45;
  do
  {
    int v8 = 0;
    uint64_t v42 = v6;
    int v9 = &v45[21 * v6 + 20];
    while (1)
    {
      uint64_t v10 = quasar::OptionValue<std::string>::value(v7);
      int v11 = *(char *)(v10 + 23);
      uint64_t v12 = v11 >= 0 ? (char *)v10 : *(char **)v10;
      int64_t v13 = v11 >= 0 ? *(unsigned __int8 *)(v10 + 23) : *(void *)(v10 + 8);
      int v14 = std::string_view::find[abi:ne180100](&v43, v12, v13, v8);
      if (v14 == -1) {
        break;
      }
      uint64_t v15 = quasar::OptionValue<std::string>::value(v7);
      if (v44 < v14) {
        std::__throw_out_of_range[abi:ne180100]("string_view::substr");
      }
      unint64_t v16 = *(unsigned __int8 *)(v15 + 23);
      if ((v16 & 0x80u) != 0) {
        unint64_t v16 = *(void *)(v15 + 8);
      }
      uint64_t v17 = v43 + v14;
      if (v44 - v14 >= v16) {
        unint64_t v18 = v16;
      }
      else {
        unint64_t v18 = v44 - v14;
      }
      int v19 = *(_DWORD *)v9;
      unint64_t v21 = a4[1];
      unint64_t v20 = a4[2];
      if (v21 >= v20)
      {
        unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - *a4) >> 3);
        unint64_t v24 = v23 + 1;
        if (v23 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - *a4) >> 3);
        if (2 * v25 > v24) {
          unint64_t v24 = 2 * v25;
        }
        if (v25 >= 0x555555555555555) {
          unint64_t v26 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v26 = v24;
        }
        if (v26) {
          unint64_t v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)(a4 + 2), v26);
        }
        else {
          unint64_t v27 = 0;
        }
        uint64_t v28 = &v27[24 * v23];
        *(_DWORD *)uint64_t v28 = v14;
        *((_DWORD *)v28 + 1) = v19;
        *((void *)v28 + 1) = v17;
        *((void *)v28 + 2) = v18;
        BOOL v30 = (char *)*a4;
        uint64_t v29 = (char *)a4[1];
        uint64_t v31 = (uint64_t)v28;
        if (v29 != (char *)*a4)
        {
          do
          {
            long long v32 = *(_OWORD *)(v29 - 24);
            *(void *)(v31 - 8) = *((void *)v29 - 1);
            *(_OWORD *)(v31 - 24) = v32;
            v31 -= 24;
            v29 -= 24;
          }
          while (v29 != v30);
          uint64_t v29 = (char *)*a4;
        }
        uint64_t v22 = (uint64_t)(v28 + 24);
        *a4 = v31;
        a4[1] = (uint64_t)(v28 + 24);
        a4[2] = (uint64_t)&v27[24 * v26];
        if (v29) {
          operator delete(v29);
        }
      }
      else
      {
        *(_DWORD *)unint64_t v21 = v14;
        *(_DWORD *)(v21 + 4) = v19;
        uint64_t v22 = v21 + 24;
        *(void *)(v21 + 8) = v17;
        *(void *)(v21 + 16) = v18;
      }
      a4[1] = v22;
      uint64_t v33 = quasar::OptionValue<std::string>::value(v7);
      LODWORD(v34) = *(unsigned __int8 *)(v33 + 23);
      if ((v34 & 0x80u) != 0) {
        uint64_t v34 = *(void *)(v33 + 8);
      }
      int v8 = v34 + v14;
    }
    uint64_t v6 = v42 + 1;
    uint64_t v7 = &v45[21 * v42 + 21];
  }
  while (v42 != 3);
  for (uint64_t i = 0; i != -84; i -= 21)
  {
    uint64_t v36 = &v45[i];
    v51[i] = (uint64_t)&unk_1F0A51DE8;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v51[i + 17], (void *)v51[i + 18]);
    if (SHIBYTE(v51[i + 15]) < 0) {
      operator delete((void *)v36[76]);
    }
    v36[63] = (uint64_t)&unk_1F0A52FB8;
    char v37 = (std::__shared_weak_count *)v36[75];
    if (v37) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v37);
    }
    int v38 = &v45[i];
    if (SHIBYTE(v51[i + 9]) < 0) {
      operator delete((void *)v38[70]);
    }
    if (*((char *)v38 + 559) < 0) {
      operator delete((void *)v51[i + 4]);
    }
    if (SHIBYTE(v51[i + 3]) < 0) {
      operator delete((void *)v51[i + 1]);
    }
  }
  long long v39 = (char *)a4[1];
  unint64_t v40 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v39[-*a4] >> 3));
  if (v39 == (char *)*a4) {
    uint64_t v41 = 0;
  }
  else {
    uint64_t v41 = v40;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,quasar::SegmentType,std::string_view> *,false>(*a4, v39, (uint64_t)v45, v41, 1);
}

void sub_1B20F13C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v15 = *(void **)v13;
  if (*(void *)v13)
  {
    *(void *)(v13 + 8) = v15;
    operator delete(v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::string_view::find[abi:ne180100](uint64_t *a1, char *a2, int64_t a3, unint64_t a4)
{
  unint64_t v4 = a1[1];
  if (v4 < a4) {
    return -1;
  }
  if (a3)
  {
    uint64_t v6 = *a1;
    uint64_t v7 = (void *)(*a1 + a4);
    int v8 = (char *)(v6 + v4);
    uint64_t v9 = v6 + v4 - (void)v7;
    if (v9 >= a3)
    {
      int v13 = *a2;
      do
      {
        uint64_t v14 = v9 - a3;
        if (v14 == -1) {
          break;
        }
        uint64_t v15 = (char *)memchr(v7, v13, v14 + 1);
        if (!v15) {
          break;
        }
        uint64_t v10 = v15;
        if (!memcmp(v15, a2, a3)) {
          goto LABEL_6;
        }
        uint64_t v7 = v10 + 1;
        uint64_t v9 = v8 - (v10 + 1);
      }
      while (v9 >= a3);
    }
    uint64_t v10 = v8;
LABEL_6:
    if (v10 == v8) {
      return -1;
    }
    else {
      return (uint64_t)&v10[-v6];
    }
  }
  return a4;
}

void quasar::computeSourceAlignments(int **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t *a6@<X8>)
{
  v64[0] = 0;
  v64[1] = 0;
  v62[1] = 0;
  long long v63 = (uint64_t *)v64;
  float v61 = (uint64_t *)v62;
  v62[0] = 0;
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  if (*a1 != v6)
  {
    uint64_t v9 = (void *)(a4 + 2184);
    uint64_t v10 = (void *)(a4 + 1296);
    int v11 = (void *)(a3 + 8);
    while (1)
    {
      int v12 = *v7;
      int v60 = -1;
      uint64_t v13 = *(void *)(a2 + 136);
      uint64_t v14 = (float **)(v13 + 136 * v12 + 104);
      int v15 = *(_DWORD *)quasar::OptionValue<int>::value(v9);
      if (v15 < a5) {
        a5 = v15;
      }
      uint64_t v16 = v13 + 136 * v12;
      uint64_t v18 = *(void *)(v16 + 112);
      uint64_t v17 = (void *)(v16 + 112);
      int v19 = *v14;
      uint64_t v20 = v18 - (void)*v14;
      if (a5 > (unint64_t)(v20 >> 2) && quasar::gLogLevel >= 2)
      {
        long long v58 = 0u;
        long long v59 = 0u;
        long long v56 = 0u;
        long long v57 = 0u;
        long long v54 = 0u;
        long long v55 = 0u;
        long long v52 = 0u;
        long long v53 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        long long v48 = 0u;
        long long v49 = 0u;
        long long v46 = 0u;
        long long v47 = 0u;
        long long v44 = 0u;
        long long v45 = 0u;
        long long v43 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v43);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v43, (uint64_t)"Inconsistent soft alignment length! Soft alignment length: ", 59);
        uint64_t v22 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" - numSourceSpm: ", 17);
        std::ostream::operator<<();
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v43);
        int v19 = *v14;
        uint64_t v20 = *v17 - (void)*v14;
      }
      unint64_t v23 = (unint64_t)v20 >> 2;
      if (a5 >= (int)v23) {
        unsigned int v24 = v23;
      }
      else {
        unsigned int v24 = a5;
      }
      unint64_t v25 = v19;
      if (v24 >= 2)
      {
        unint64_t v26 = v19 + 1;
        float v27 = *v19;
        uint64_t v28 = 4 * (int)v24 - 4;
        unint64_t v25 = v19;
        uint64_t v29 = v19 + 1;
        do
        {
          float v30 = *v29++;
          float v31 = v30;
          if (v27 < v30)
          {
            float v27 = v31;
            unint64_t v25 = v26;
          }
          unint64_t v26 = v29;
          v28 -= 4;
        }
        while (v28);
      }
      int v60 = (unint64_t)((char *)v25 - (char *)v19) >> 2;
      if (quasar::gLogLevel >= 5)
      {
        long long v58 = 0u;
        long long v59 = 0u;
        long long v56 = 0u;
        long long v57 = 0u;
        long long v54 = 0u;
        long long v55 = 0u;
        long long v52 = 0u;
        long long v53 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        long long v48 = 0u;
        long long v49 = 0u;
        long long v46 = 0u;
        long long v47 = 0u;
        long long v44 = 0u;
        long long v45 = 0u;
        long long v43 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v43);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v43, (uint64_t)"Aligning middle tag at pos ", 27);
        long long v32 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)" to source spm ", 15);
        std::ostream::operator<<();
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v43);
      }
      std::__tree<int>::__emplace_unique_key_args<int,int const&>(&v61, &v60, &v60);
      if (!*(unsigned char *)quasar::OptionValue<BOOL>::value(v10)) {
        goto LABEL_35;
      }
      uint64_t v33 = *v11;
      if (*v11)
      {
        uint64_t v34 = v11;
        do
        {
          int v35 = *(_DWORD *)(v33 + 28);
          BOOL v36 = v35 < v60;
          if (v35 >= v60) {
            char v37 = (uint64_t *)v33;
          }
          else {
            char v37 = (uint64_t *)(v33 + 8);
          }
          if (!v36) {
            uint64_t v34 = (void *)v33;
          }
          uint64_t v33 = *v37;
        }
        while (*v37);
        if (v34 != v11 && v60 >= *((_DWORD *)v34 + 7)) {
          break;
        }
      }
      if (quasar::gLogLevel >= 5)
      {
        long long v58 = 0u;
        long long v59 = 0u;
        long long v56 = 0u;
        long long v57 = 0u;
        long long v54 = 0u;
        long long v55 = 0u;
        long long v52 = 0u;
        long long v53 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        long long v48 = 0u;
        long long v49 = 0u;
        long long v46 = 0u;
        long long v47 = 0u;
        long long v44 = 0u;
        long long v45 = 0u;
        long long v43 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v43);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v43, (uint64_t)"Source SPM at pos", 17);
        int v38 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)" does not map to any source token.", 34);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v43);
      }
LABEL_38:
      if (++v7 == v6) {
        goto LABEL_39;
      }
    }
    int v39 = *((_DWORD *)v34 + 8);
    int v60 = v39;
    if (quasar::gLogLevel >= 5)
    {
      long long v58 = 0u;
      long long v59 = 0u;
      long long v56 = 0u;
      long long v57 = 0u;
      long long v54 = 0u;
      long long v55 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v43 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v43);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v43, (uint64_t)"Aligning middle tag at pos ", 27);
      unint64_t v40 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)" to source token ", 17);
      std::ostream::operator<<();
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v43);
LABEL_35:
      int v39 = v60;
    }
    if (v39 != -1) {
      std::__tree<int>::__emplace_unique_key_args<int,int const&>(&v63, &v60, &v60);
    }
    goto LABEL_38;
  }
LABEL_39:
  std::set<int>::set[abi:ne180100](a6, (uint64_t)&v63);
  std::set<int>::set[abi:ne180100](a6 + 3, (uint64_t)&v61);
  std::__tree<int>::destroy((uint64_t)&v61, v62[0]);
  std::__tree<int>::destroy((uint64_t)&v63, v64[0]);
}

void sub_1B20F1980(_Unwind_Exception *a1)
{
  std::__tree<int>::destroy(v1, *(void **)(v1 + 8));
  std::__tree<int>::destroy(v2 - 136, *(void **)(v2 - 128));
  std::__tree<int>::destroy(v2 - 112, *(void **)(v2 - 104));
  _Unwind_Resume(a1);
}

void quasar::parseAllSegments(unsigned int **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t *a8@<X8>)
{
  uint64_t i = a8;
  *a8 = 0;
  a8[1] = 0;
  a8[2] = 0;
  int v9 = -252645135 * ((*(void *)(a2 + 144) - *(void *)(a2 + 136)) >> 3);
  uint64_t v10 = *a1;
  int v11 = &quasar::gLogLevel;
  if (*a1 != a1[1])
  {
    signed int v12 = 0;
    int v13 = 0;
    int v75 = 7;
    uint64_t v71 = (uint64_t)(a8 + 2);
    while (1)
    {
      unsigned int v14 = v10[1];
      uint64_t v16 = (const void *)*((void *)v10 + 1);
      int v15 = (char *)*((void *)v10 + 2);
      unsigned int v76 = *v10;
      LODWORD(v17) = *v10 - v12;
      if ((int)*v10 > v12 || (*v10 | v12) == 0)
      {
        *(void *)&long long v81 = __PAIR64__(v75, v12);
        if (a5 < v12) {
          std::__throw_out_of_range[abi:ne180100]("string_view::substr");
        }
        int v19 = v11;
        if (a5 - v12 >= (int)v17) {
          unint64_t v17 = (int)v17;
        }
        else {
          unint64_t v17 = a5 - v12;
        }
        *((void *)&v81 + 1) = a4 + v12;
        __p[0] = (void *)v17;
        uint64_t v20 = operator new(4uLL);
        __p[1] = v20;
        *uint64_t v20 = v13;
        *(void *)&long long v83 = v20 + 1;
        *((void *)&v83 + 1) = v20 + 1;
        *((void *)&v84 + 1) = 0;
        *(void *)&long long v85 = 0;
        *(void *)&long long v84 = (char *)&v84 + 8;
        long long v86 = 0uLL;
        *((void *)&v85 + 1) = &v86;
        unint64_t v21 = i[1];
        if (v21 >= i[2])
        {
          uint64_t v22 = std::vector<quasar::Segment>::__push_back_slow_path<quasar::Segment>(i, (uint64_t)&v81);
        }
        else
        {
          std::allocator<quasar::Segment>::construct[abi:ne180100]<quasar::Segment,quasar::Segment>(v71, i[1], (uint64_t)&v81);
          uint64_t v22 = v21 + 96;
        }
        int v11 = v19;
        i[1] = v22;
        std::__tree<int>::destroy((uint64_t)&v85 + 8, (void *)v86);
        std::__tree<int>::destroy((uint64_t)&v84, *((void **)&v84 + 1));
        if (__p[1])
        {
          *(void **)&long long v83 = __p[1];
          operator delete(__p[1]);
        }
      }
      int v98 = 0;
      int v99 = 0;
      v100[0] = 0;
      if (v13 >= v9)
      {
LABEL_111:
        long long v96 = 0u;
        long long v97 = 0u;
        long long v94 = 0u;
        long long v95 = 0u;
        long long v92 = 0u;
        long long v93 = 0u;
        long long v90 = 0u;
        long long v91 = 0u;
        long long v88 = 0u;
        long long v89 = 0u;
        long long v86 = 0u;
        long long v87 = 0u;
        long long v84 = 0u;
        long long v85 = 0u;
        *(_OWORD *)std::string __p = 0u;
        long long v83 = 0u;
        long long v81 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v81);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v81);
      }
      uint64_t v23 = *(void *)(a2 + 136) + 136 * v13;
      while (1)
      {
        if (*(char *)(v23 + 23) < 0)
        {
          unint64_t v25 = *(const void **)v23;
          unsigned int v24 = *(char **)(v23 + 8);
        }
        else
        {
          unsigned int v24 = (char *)*(unsigned __int8 *)(v23 + 23);
          unint64_t v25 = (const void *)v23;
        }
        if (v24 == v15 && !memcmp(v25, v16, (size_t)v15)) {
          break;
        }
        ++v13;
        v23 += 136;
        if (v9 == v13) {
          goto LABEL_111;
        }
      }
      if (v75 == 5)
      {
        if (v14 != 2)
        {
LABEL_58:
          if (*v11 < 5)
          {
            unint64_t v26 = 0;
            unsigned int v14 = 8;
          }
          else
          {
            long long v96 = 0u;
            long long v97 = 0u;
            long long v94 = 0u;
            long long v95 = 0u;
            long long v92 = 0u;
            long long v93 = 0u;
            long long v90 = 0u;
            long long v91 = 0u;
            long long v88 = 0u;
            long long v89 = 0u;
            long long v86 = 0u;
            long long v87 = 0u;
            long long v84 = 0u;
            long long v85 = 0u;
            *(_OWORD *)std::string __p = 0u;
            long long v83 = 0u;
            long long v81 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v81);
            unint64_t v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v81, (uint64_t)"Ignoring unexpected ", 20);
            uint64_t v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)v16, (uint64_t)v15);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)" at position ", 13);
            std::ostream::operator<<();
            quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v81);
            unsigned int v14 = 8;
            unint64_t v26 = v99;
          }
          goto LABEL_62;
        }
        uint64_t v28 = v10 + 6;
        if (v10 + 6 == a1[1] || (uint64_t v29 = v10 + 7, v10[7] != 2))
        {
          unint64_t v26 = 0;
          int v75 = 6;
          unsigned int v14 = 2;
          goto LABEL_62;
        }
        unint64_t v26 = 0;
        unsigned int v14 = 2;
        float v30 = v10;
        while (1)
        {
          uint64_t v10 = v28;
          if (&v15[v76] != (char *)(int)v30[6])
          {
            int v75 = 6;
            uint64_t v10 = v30;
            goto LABEL_62;
          }
          if ((unint64_t)v26 >= v100[0])
          {
            float v31 = v98;
            uint64_t v32 = v26 - v98;
            unint64_t v33 = v32 + 1;
            if ((unint64_t)(v32 + 1) >> 62) {
              goto LABEL_112;
            }
            uint64_t v34 = v100[0] - (void)v98;
            if ((uint64_t)(v100[0] - (void)v98) >> 1 > v33) {
              unint64_t v33 = v34 >> 1;
            }
            if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v35 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v35 = v33;
            }
            if (v35)
            {
              BOOL v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v100, v35);
              float v31 = v98;
              unint64_t v26 = v99;
            }
            else
            {
              BOOL v36 = 0;
            }
            char v37 = (int *)&v36[4 * v32];
            int *v37 = v13;
            int v38 = v37 + 1;
            while (v26 != v31)
            {
              int v39 = *--v26;
              *--char v37 = v39;
            }
            int v98 = v37;
            int v99 = v38;
            v100[0] = &v36[4 * v35];
            if (v31) {
              operator delete(v31);
            }
            unint64_t v26 = v38;
          }
          else
          {
            *v26++ = v13;
          }
          int v99 = v26;
          uint64_t v28 = v10 + 6;
          unsigned int v76 = *v10;
          ++v13;
          unsigned int v14 = *v29;
          uint64_t v16 = (const void *)*((void *)v30 + 4);
          int v15 = (char *)*((void *)v30 + 5);
          if (v10 + 6 == a1[1]) {
            break;
          }
          uint64_t v29 = v10 + 7;
          int v75 = 6;
          float v30 = v10;
          if (v10[7] != 2) {
            goto LABEL_62;
          }
        }
        int v27 = 6;
      }
      else if (v75 == 6)
      {
        if (v14 != 3) {
          goto LABEL_58;
        }
        unint64_t v26 = 0;
        int v27 = 7;
      }
      else
      {
        if (v14 >= 2) {
          goto LABEL_58;
        }
        unint64_t v26 = 0;
        int v27 = 5;
      }
      int v75 = v27;
LABEL_62:
      if ((unint64_t)v26 >= v100[0])
      {
        long long v43 = v98;
        uint64_t v44 = v26 - v98;
        unint64_t v45 = v44 + 1;
        if ((unint64_t)(v44 + 1) >> 62) {
LABEL_112:
        }
          std::vector<int>::__throw_length_error[abi:ne180100]();
        uint64_t v46 = v100[0] - (void)v98;
        if ((uint64_t)(v100[0] - (void)v98) >> 1 > v45) {
          unint64_t v45 = v46 >> 1;
        }
        if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v47 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v47 = v45;
        }
        if (v47)
        {
          long long v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v100, v47);
          long long v43 = v98;
          unint64_t v26 = v99;
        }
        else
        {
          long long v48 = 0;
        }
        long long v49 = (int *)&v48[4 * v44];
        *long long v49 = v13;
        uint64_t v42 = (uint64_t)(v49 + 1);
        for (uint64_t i = a8; v26 != v43; --v49)
        {
          int v50 = *--v26;
          *(v49 - 1) = v50;
        }
        int v98 = v49;
        int v99 = (int *)v42;
        v100[0] = &v48[4 * v47];
        if (v43) {
          operator delete(v43);
        }
      }
      else
      {
        *unint64_t v26 = v13;
        uint64_t v42 = (uint64_t)(v26 + 1);
        uint64_t i = a8;
      }
      int v99 = (int *)v42;
      if (v14 == 2)
      {
        quasar::computeSourceAlignments(&v98, a2, a3, a6, a7, (uint64_t *)&v77);
        uint64_t v42 = (uint64_t)v99;
      }
      else
      {
        v78[0] = 0;
        v78[1] = 0;
        v80[0] = 0;
        v80[1] = 0;
        uint64_t v77 = v78;
        unint64_t v79 = v80;
      }
      *(void *)&long long v81 = __PAIR64__(v14, v76);
      *((void *)&v81 + 1) = v16;
      __p[0] = v15;
      long long v83 = 0uLL;
      __p[1] = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p[1], v98, v42, (v42 - (uint64_t)v98) >> 2);
      std::set<int>::set[abi:ne180100]((uint64_t *)&v84, (uint64_t)&v77);
      std::set<int>::set[abi:ne180100]((uint64_t *)&v85 + 1, (uint64_t)&v79);
      unint64_t v51 = i[1];
      if (v51 >= i[2])
      {
        uint64_t v52 = std::vector<quasar::Segment>::__push_back_slow_path<quasar::Segment>(i, (uint64_t)&v81);
      }
      else
      {
        std::allocator<quasar::Segment>::construct[abi:ne180100]<quasar::Segment,quasar::Segment>(v71, i[1], (uint64_t)&v81);
        uint64_t v52 = v51 + 96;
      }
      i[1] = v52;
      std::__tree<int>::destroy((uint64_t)&v85 + 8, (void *)v86);
      std::__tree<int>::destroy((uint64_t)&v84, *((void **)&v84 + 1));
      if (__p[1])
      {
        *(void **)&long long v83 = __p[1];
        operator delete(__p[1]);
      }
      std::__tree<int>::destroy((uint64_t)&v79, v80[0]);
      std::__tree<int>::destroy((uint64_t)&v77, v78[0]);
      if (v98)
      {
        int v99 = v98;
        operator delete(v98);
      }
      signed int v12 = v76 + v15;
      ++v13;
      v10 += 6;
      if (v10 == a1[1]) {
        goto LABEL_92;
      }
    }
  }
  int v13 = 0;
  signed int v12 = 0;
  int v75 = 7;
LABEL_92:
  if (a5 > v12)
  {
    *(void *)&long long v81 = __PAIR64__(v75, v12);
    *((void *)&v81 + 1) = a4 + v12;
    __p[0] = (void *)(a5 - v12);
    long long v53 = operator new(4uLL);
    __p[1] = v53;
    *long long v53 = v13;
    *(void *)&long long v83 = v53 + 1;
    *((void *)&v83 + 1) = v53 + 1;
    *((void *)&v84 + 1) = 0;
    *(void *)&long long v85 = 0;
    *(void *)&long long v84 = (char *)&v84 + 8;
    long long v86 = 0uLL;
    *((void *)&v85 + 1) = &v86;
    unint64_t v54 = i[1];
    if (v54 >= i[2])
    {
      uint64_t v55 = std::vector<quasar::Segment>::__push_back_slow_path<quasar::Segment>(i, (uint64_t)&v81);
    }
    else
    {
      std::allocator<quasar::Segment>::construct[abi:ne180100]<quasar::Segment,quasar::Segment>((uint64_t)(i + 2), i[1], (uint64_t)&v81);
      uint64_t v55 = v54 + 96;
    }
    i[1] = v55;
    std::__tree<int>::destroy((uint64_t)&v85 + 8, (void *)v86);
    std::__tree<int>::destroy((uint64_t)&v84, *((void **)&v84 + 1));
    if (__p[1])
    {
      *(void **)&long long v83 = __p[1];
      operator delete(__p[1]);
    }
  }
  if (v75 == 6)
  {
    *(void *)&long long v81 = 0x4FFFFFFFFLL;
    *((void *)&v81 + 1) = "";
    __p[0] = 0;
    long long v56 = operator new(4uLL);
    __p[1] = v56;
    *long long v56 = v9;
    *(void *)&long long v83 = v56 + 1;
    *((void *)&v83 + 1) = v56 + 1;
    *((void *)&v84 + 1) = 0;
    *(void *)&long long v85 = 0;
    *(void *)&long long v84 = (char *)&v84 + 8;
    long long v86 = 0uLL;
    *((void *)&v85 + 1) = &v86;
    unint64_t v57 = i[1];
    if (v57 >= i[2])
    {
      uint64_t v58 = std::vector<quasar::Segment>::__push_back_slow_path<quasar::Segment>(i, (uint64_t)&v81);
    }
    else
    {
      std::allocator<quasar::Segment>::construct[abi:ne180100]<quasar::Segment,quasar::Segment>((uint64_t)(i + 2), i[1], (uint64_t)&v81);
      uint64_t v58 = v57 + 96;
    }
    i[1] = v58;
    std::__tree<int>::destroy((uint64_t)&v85 + 8, (void *)v86);
    std::__tree<int>::destroy((uint64_t)&v84, *((void **)&v84 + 1));
    if (__p[1])
    {
      *(void **)&long long v83 = __p[1];
      operator delete(__p[1]);
    }
  }
  for (uint64_t j = i[1]; j != *i; j -= 96)
  {
    unsigned int v60 = *(_DWORD *)(j - 92);
    BOOL v61 = v60 >= 3;
    unsigned int v62 = v60 - 3;
    if (v61)
    {
      if (v62 <= 1) {
        return;
      }
    }
    else
    {
      *(_DWORD *)(j - 92) = 8;
      std::__tree<int>::destroy(j - 48, *(void **)(j - 40));
      *(void *)(j - 48) = j - 40;
      *(void *)(j - 40) = 0;
      long long v63 = *(void **)(j - 16);
      *(void *)(j - 32) = 0;
      std::__tree<int>::destroy(j - 24, v63);
      *(void *)(j - 24) = j - 16;
      *(void *)(j - 16) = 0;
      *(void *)(j - 8) = 0;
      if (*v11 >= 5)
      {
        long long v96 = 0u;
        long long v97 = 0u;
        long long v94 = 0u;
        long long v95 = 0u;
        long long v92 = 0u;
        long long v93 = 0u;
        long long v90 = 0u;
        long long v91 = 0u;
        long long v88 = 0u;
        long long v89 = 0u;
        long long v86 = 0u;
        long long v87 = 0u;
        long long v84 = 0u;
        long long v85 = 0u;
        *(_OWORD *)std::string __p = 0u;
        long long v83 = 0u;
        long long v81 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v81);
        long long v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v81, (uint64_t)"Ignoring trailing unmatched ", 28);
        BOOL v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, *(void *)(j - 88), *(void *)(j - 80));
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)" at position ", 13);
        std::ostream::operator<<();
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v81);
      }
    }
  }
}

void quasar::Segment::~Segment(quasar::Segment *this)
{
  std::__tree<int>::destroy((uint64_t)this + 72, *((void **)this + 10));
  std::__tree<int>::destroy((uint64_t)this + 48, *((void **)this + 7));
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

void quasar::SourceAlignments::~SourceAlignments(quasar::SourceAlignments *this)
{
}

void quasar::extendExpansions(uint64_t *a1, uint64_t a2, long long **a3, uint64_t a4, unsigned int a5, unsigned int a6)
{
  uint64_t v7 = *(void **)a2;
  uint64_t v6 = *(void **)(a2 + 8);
  if (*(void **)a2 != v6)
  {
    uint64_t v12 = (uint64_t)(a3 + 3);
    uint64_t v24 = (uint64_t)(a1 + 2);
    do
    {
      std::map<int,quasar::Expansion::SegmentTypeData>::map[abi:ne180100]((uint64_t)v28, v12);
      int v13 = (void *)*v7;
      if ((void *)*v7 != v7 + 1)
      {
        do
        {
          unint64_t v26 = *(void *)((char *)v13 + 28);
          int v27 = *((_DWORD *)v13 + 9);
          unsigned int v14 = std::__tree<std::__value_type<int,quasar::Expansion::SegmentTypeData>,std::__map_value_compare<int,std::__value_type<int,quasar::Expansion::SegmentTypeData>,std::less<int>,true>,std::allocator<std::__value_type<int,quasar::Expansion::SegmentTypeData>>>::__emplace_unique_key_args<int,int const&,quasar::Expansion::SegmentTypeData&>(v28, (int *)&v26, &v26, (unint64_t *)((char *)&v26 + 4));
          if (!v15) {
            *((_DWORD *)v14 + 8) = HIDWORD(v26);
          }
          uint64_t v16 = (void *)v13[1];
          if (v16)
          {
            do
            {
              unint64_t v17 = v16;
              uint64_t v16 = (void *)*v16;
            }
            while (v16);
          }
          else
          {
            do
            {
              unint64_t v17 = (void *)v13[2];
              BOOL v18 = *v17 == (void)v13;
              int v13 = v17;
            }
            while (!v18);
          }
          int v13 = v17;
        }
        while (v17 != v7 + 1);
      }
      unint64_t v19 = a1[1];
      if (v19 >= a1[2])
      {
        uint64_t v20 = std::vector<quasar::Expansion>::__emplace_back_slow_path<std::vector<quasar::Expansion::SegmentData> const&,std::map<int,quasar::Expansion::SegmentTypeData> &>(a1, a3, (uint64_t)v28);
      }
      else
      {
        std::allocator<quasar::Expansion>::construct[abi:ne180100]<quasar::Expansion,std::vector<quasar::Expansion::SegmentData> const&,std::map<int,quasar::Expansion::SegmentTypeData> &>(v24, a1[1], a3, (uint64_t)v28);
        uint64_t v20 = v19 + 48;
        a1[1] = v20;
      }
      a1[1] = v20;
      unint64_t v21 = (uint64_t *)(v20 - 48);
      unint64_t v26 = __PAIR64__(a6, a5);
      unint64_t v22 = *(void *)(v20 - 40);
      if (v22 >= *(void *)(v20 - 32))
      {
        uint64_t v23 = std::vector<quasar::Expansion::SegmentData>::__emplace_back_slow_path<std::string const&,std::pair<int,int>>(v21, a4, (uint64_t *)&v26);
      }
      else
      {
        std::vector<quasar::Expansion::SegmentData>::__construct_one_at_end[abi:ne180100]<std::string const&,std::pair<int,int>>((uint64_t)v21, a4, (uint64_t *)&v26);
        uint64_t v23 = v22 + 32;
      }
      *(void *)(v20 - 40) = v23;
      std::__tree<int>::destroy((uint64_t)v28, v28[1]);
      v7 += 3;
    }
    while (v7 != v6);
  }
}

void sub_1B20F2650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, void *a15)
{
}

uint64_t quasar::markAssignmentAsReversed(uint64_t result)
{
  uint64_t v1 = *(void **)result;
  uint64_t v2 = *(void **)(result + 8);
  if (*(void **)result != v2)
  {
    do
    {
      long long v3 = (void *)*v1;
      if ((void *)*v1 != v1 + 1)
      {
        do
        {
          *((unsigned char *)v3 + 36) = 1;
          unint64_t v4 = (void *)v3[1];
          if (v4)
          {
            do
            {
              uint64_t v5 = v4;
              unint64_t v4 = (void *)*v4;
            }
            while (v4);
          }
          else
          {
            do
            {
              uint64_t v5 = (void *)v3[2];
              BOOL v6 = *v5 == (void)v3;
              long long v3 = v5;
            }
            while (!v6);
          }
          long long v3 = v5;
        }
        while (v5 != v1 + 1);
      }
      v1 += 3;
    }
    while (v1 != v2);
  }
  return result;
}

void quasar::computeExpansions(long long **a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, std::string **a4@<X8>)
{
  uint64_t v138 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v120 = 0;
  long long v121 = 0u;
  *(_OWORD *)std::string __p = 0u;
  *((void *)&v120 + 1) = &v121;
  a4[2] = 0;
  *a4 = 0;
  a4[1] = 0;
  __src[8] = 0;
  uint64_t v5 = (std::string *)operator new(0x30uLL);
  *a4 = v5;
  a4[1] = v5;
  a4[2] = v5 + 2;
  long long v89 = (long long ***)a4;
  a4[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::Expansion>,quasar::Expansion const*,quasar::Expansion const*,quasar::Expansion*>((uint64_t)(a4 + 2), (long long **)__p, (long long **)&v122, v5);
  std::__tree<int>::destroy((uint64_t)&v120 + 8, (void *)v121);
  *(void *)long long __src = __p;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)__src);
  BOOL v6 = *a1;
  if (*a1 >= a1[1]) {
    return;
  }
  do
  {
    long long v7 = *v6;
    *(void *)&__src[16] = *((void *)v6 + 2);
    *(_OWORD *)long long __src = v7;
    v113 = 0;
    uint64_t v114 = 0;
    v112 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v112, *((const void **)v6 + 3), *((void *)v6 + 4), (uint64_t)(*((void *)v6 + 4) - *((void *)v6 + 3)) >> 2);
    std::set<int>::set[abi:ne180100]((uint64_t *)&v115, (uint64_t)(v6 + 3));
    std::set<int>::set[abi:ne180100](v117, (uint64_t)v6 + 72);
    int v8 = *v89;
    int v9 = v89[1];
    while (v8 != v9)
    {
      uint64_t v10 = v8[1];
      if (*v8 != v10 && *((_DWORD *)v10 - 1) == a3)
      {
        if (*((char *)v10 - 9) < 0)
        {
          std::string::__init_copy_ctor_external(&v110, *((const std::string::value_type **)v10 - 4), *((void *)v10 - 3));
        }
        else
        {
          long long v11 = *(v10 - 2);
          v110.__r_.__value_.__r.__words[2] = *((void *)v10 - 2);
          *(_OWORD *)&v110.__r_.__value_.__l.__data_ = v11;
        }
        int v12 = *((_DWORD *)v10 - 2);
        unsigned int v13 = *(_DWORD *)v112;
        __p[0] = (void *)v110.__r_.__value_.__l.__size_;
        std::string::size_type v14 = v110.__r_.__value_.__r.__words[0];
        *(void **)((char *)__p + 7) = *(void **)((char *)&v110.__r_.__value_.__r.__words[1] + 7);
        char v15 = HIBYTE(v110.__r_.__value_.__r.__words[2]);
        memset(&v110, 0, sizeof(v110));
        uint64_t v16 = v8[1];
        if (*((char *)v16 - 9) < 0) {
          operator delete(*((void **)v16 - 4));
        }
        *((void *)v16 - 4) = v14;
        *((void **)v16 - 3) = __p[0];
        *(void **)((char *)v16 - 17) = *(void **)((char *)__p + 7);
        *((unsigned char *)v16 - 9) = v15;
        *((_DWORD *)v16 - 2) = v12;
        *((_DWORD *)v16 - 1) = v13;
        if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v110.__r_.__value_.__l.__data_);
        }
      }
      v8 += 6;
    }
    unint64_t v17 = v6 + 6;
    uint64_t v18 = *(unsigned int *)&__src[4];
    if ((*(_DWORD *)&__src[4] - 5) < 3)
    {
      unint64_t v19 = v89[1];
      if (*v89 != v19)
      {
        uint64_t v20 = (unint64_t *)(*v89 + 2);
        do
        {
          size_t v21 = *(void *)&__src[16];
          if (*(void *)&__src[16] >= 0x7FFFFFFFFFFFFFF8uLL) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          unint64_t v22 = *(const void **)&__src[8];
          if (*(void *)&__src[16] >= 0x17uLL)
          {
            uint64_t v24 = (*(void *)&__src[16] & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((*(void *)&__src[16] | 7) != 0x17) {
              uint64_t v24 = *(void *)&__src[16] | 7;
            }
            uint64_t v25 = v24 + 1;
            p_dst = (void **)operator new(v24 + 1);
            *(void *)&long long v109 = v21;
            *((void *)&v109 + 1) = v25 | 0x8000000000000000;
            __dst = p_dst;
          }
          else
          {
            HIBYTE(v109) = __src[16];
            p_dst = (void **)&__dst;
            if (!*(void *)&__src[16]) {
              goto LABEL_25;
            }
          }
          memmove(p_dst, v22, v21);
LABEL_25:
          *((unsigned char *)p_dst + v21) = 0;
          uint64_t v26 = (a3 << 32) | *(unsigned int *)v112;
          int v27 = __dst;
          *(void *)&long long v136 = v109;
          *(void *)((char *)&v136 + 7) = *(void *)((char *)&v109 + 7);
          char v28 = HIBYTE(v109);
          long long v109 = 0uLL;
          __dst = 0;
          unint64_t v29 = *(v20 - 1);
          if (v29 >= *v20)
          {
            uint64_t v30 = *(v20 - 2);
            uint64_t v31 = (uint64_t)(v29 - v30) >> 5;
            unint64_t v32 = v31 + 1;
            if ((unint64_t)(v31 + 1) >> 59) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v33 = *v20 - v30;
            if (v33 >> 4 > v32) {
              unint64_t v32 = v33 >> 4;
            }
            if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFE0) {
              unint64_t v34 = 0x7FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v34 = v32;
            }
            *(void *)&long long v121 = v20;
            unint64_t v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)v20, v34);
            BOOL v36 = &v35[32 * v31];
            __p[0] = v35;
            __p[1] = v36;
            *((void *)&v120 + 1) = &v35[32 * v37];
            *(void *)BOOL v36 = v27;
            *((void *)v36 + 1) = v136;
            *(void *)(v36 + 15) = *(void *)((char *)&v136 + 7);
            v36[23] = v28;
            *((void *)v36 + 3) = v26;
            *(void *)&long long v120 = v36 + 32;
            std::vector<quasar::Expansion::SegmentData>::__swap_out_circular_buffer((uint64_t *)v20 - 2, __p);
            unint64_t v38 = *(v20 - 1);
            std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)__p);
            int v39 = SHIBYTE(v109);
            *(v20 - 1) = v38;
            if (v39 < 0) {
              operator delete(__dst);
            }
          }
          else
          {
            *(void *)unint64_t v29 = v27;
            *(void *)(v29 + 8) = v136;
            *(void *)(v29 + 15) = *(void *)((char *)&v136 + 7);
            *(unsigned char *)(v29 + 23) = v28;
            *(void *)(v29 + 24) = v26;
            *(v20 - 1) = v29 + 32;
          }
          unint64_t v40 = (long long **)(v20 + 4);
          v20 += 6;
        }
        while (v40 != v19);
      }
LABEL_63:
      BOOL v6 = v17;
      goto LABEL_130;
    }
    if (*(_DWORD *)&__src[4] > 1u)
    {
      if (*(_DWORD *)&__src[4] == 8)
      {
        int v49 = quasar::gLogLevel;
        if (quasar::gLogLevel >= 6)
        {
          long long v134 = 0u;
          long long v135 = 0u;
          long long v132 = 0u;
          long long v133 = 0u;
          long long v130 = 0u;
          long long v131 = 0u;
          long long v128 = 0u;
          long long v129 = 0u;
          long long v126 = 0u;
          long long v127 = 0u;
          long long v124 = 0u;
          long long v125 = 0u;
          long long v122 = 0u;
          long long v123 = 0u;
          long long v120 = 0u;
          long long v121 = 0u;
          *(_OWORD *)std::string __p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Discarding spurious structure tag at position: ", 47);
          int v50 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)" (spm pos: ", 11);
          quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)__p);
          int v49 = quasar::gLogLevel;
        }
        unint64_t v51 = (char *)v112;
        uint64_t v52 = v113;
        while (v51 != v52)
        {
          if (v49 >= 6)
          {
            long long v134 = 0u;
            long long v135 = 0u;
            long long v132 = 0u;
            long long v133 = 0u;
            long long v130 = 0u;
            long long v131 = 0u;
            long long v128 = 0u;
            long long v129 = 0u;
            long long v126 = 0u;
            long long v127 = 0u;
            long long v124 = 0u;
            long long v125 = 0u;
            long long v122 = 0u;
            long long v123 = 0u;
            long long v120 = 0u;
            long long v121 = 0u;
            *(_OWORD *)std::string __p = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
            long long v53 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)" ", 1);
            quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)__p);
            int v49 = quasar::gLogLevel;
          }
          v51 += 4;
        }
        if (v49 > 5)
        {
          long long v134 = 0u;
          long long v135 = 0u;
          long long v132 = 0u;
          long long v133 = 0u;
          long long v130 = 0u;
          long long v131 = 0u;
          long long v128 = 0u;
          long long v129 = 0u;
          long long v126 = 0u;
          long long v127 = 0u;
          long long v124 = 0u;
          long long v125 = 0u;
          long long v122 = 0u;
          long long v123 = 0u;
          long long v120 = 0u;
          long long v121 = 0u;
          *(_OWORD *)std::string __p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)")", 1);
          quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)__p);
        }
      }
      goto LABEL_63;
    }
    unsigned int v90 = *(_DWORD *)v112;
    *((void *)&v136 + 1) = 0;
    uint64_t v137 = 0;
    *(void *)&long long v136 = (char *)&v136 + 8;
    int v105 = 0;
    int v106 = 0;
    uint64_t v107 = 0;
    memset(&v104, 0, sizeof(v104));
    v102[0] = 0;
    v102[1] = 0;
    uint64_t v41 = (int *)v6 + 38;
    uint64_t v103 = 0;
    do
    {
      if (v17 == a1[1])
      {
        long long v134 = 0u;
        long long v135 = 0u;
        long long v132 = 0u;
        long long v133 = 0u;
        long long v130 = 0u;
        long long v131 = 0u;
        long long v128 = 0u;
        long long v129 = 0u;
        long long v126 = 0u;
        long long v127 = 0u;
        long long v124 = 0u;
        long long v125 = 0u;
        long long v122 = 0u;
        long long v123 = 0u;
        long long v120 = 0u;
        long long v121 = 0u;
        *(_OWORD *)std::string __p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Logic error!", 12);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
      }
      uint64_t v42 = v17;
      *(_DWORD *)long long __src = *(_DWORD *)v17;
      int v43 = *((_DWORD *)v17 + 1);
      *(_DWORD *)&__src[4] = v43;
      *(_OWORD *)&__src[8] = *(long long *)((char *)v17 + 8);
      if (__src != (unsigned char *)v17)
      {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v112, *((char **)v17 + 3), *((void *)v17 + 4), (uint64_t)(*((void *)v17 + 4) - *((void *)v17 + 3)) >> 2);
        std::__tree<int>::__assign_multi<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>(&v115, *((int **)v17 + 6), v41);
        int v43 = *(_DWORD *)&__src[4];
      }
      if (v43 == 2)
      {
        std::__tree<int>::__assign_multi<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>((uint64_t **)&v136, (int *)v115, v116);
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v105, (char *)v112, (uint64_t)v113, (v113 - (unsigned char *)v112) >> 2);
      }
      else
      {
        if (v43 == 5)
        {
          uint64_t v44 = &v104;
        }
        else
        {
          if (v43 != 6) {
            goto LABEL_49;
          }
          uint64_t v44 = (std::string *)v102;
        }
        std::string::append(v44, *(const std::string::value_type **)&__src[8], *(std::string::size_type *)&__src[16]);
      }
LABEL_49:
      v41 += 24;
      v17 += 6;
    }
    while ((*(_DWORD *)&__src[4] - 5) < 0xFFFFFFFE);
    if (a2)
    {
      unint64_t v45 = v89[1];
      uint64_t v46 = (uint64_t *)(v45 - 6);
      LODWORD(__p[0]) = v90 + 1;
      HIDWORD(__p[0]) = *(_DWORD *)v105;
      unint64_t v47 = (unint64_t)*(v45 - 5);
      if (v47 >= (unint64_t)*(v45 - 4))
      {
        uint64_t v48 = std::vector<quasar::Expansion::SegmentData>::__emplace_back_slow_path<std::string &,std::pair<int,int>>(v46, (uint64_t)&v104, (uint64_t *)__p);
      }
      else
      {
        std::vector<quasar::Expansion::SegmentData>::__construct_one_at_end[abi:ne180100]<std::string &,std::pair<int,int>>((uint64_t)v46, (uint64_t)&v104, (uint64_t *)__p);
        uint64_t v48 = v47 + 32;
      }
      *(v45 - 5) = (long long *)v48;
    }
    else
    {
      unsigned int v92 = *(_DWORD *)v112;
      long long v100 = 0uLL;
      int v101 = 0;
      int v54 = v137;
      long long v97 = 0;
      unint64_t v98 = 0;
      unint64_t v99 = 0;
      if (v137 != 31)
      {
        int v55 = 0;
        if (1 << v137 <= 1) {
          int v56 = 1;
        }
        else {
          int v56 = 1 << v137;
        }
        do
        {
          uint64_t v57 = v18;
          boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>>::dynamic_bitset<int>(__p, v54, v55);
          *((void *)&v95 + 1) = 0;
          unint64_t v96 = 0;
          *(void *)&long long v95 = (char *)&v95 + 8;
          uint64_t v58 = (int *)v136;
          if ((long long *)v136 != (long long *)((char *)&v136 + 8))
          {
            unint64_t v59 = 0;
            do
            {
              unint64_t v60 = *(void *)((char *)__p[0] + ((v59 >> 3) & 0x1FFFFFFFFFFFFFF8));
              v118 = (long long *)(v58 + 7);
              BOOL v61 = std::__tree<std::__value_type<int,quasar::Expansion::SegmentTypeData>,std::__map_value_compare<int,std::__value_type<int,quasar::Expansion::SegmentTypeData>,std::less<int>,true>,std::allocator<std::__value_type<int,quasar::Expansion::SegmentTypeData>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v95, v58 + 7, (uint64_t)&std::piecewise_construct, (_DWORD **)&v118);
              if ((v60 >> v59)) {
                int v62 = 5;
              }
              else {
                int v62 = 6;
              }
              *((_DWORD *)v61 + 8) = v62;
              *((unsigned char *)v61 + 36) = 0;
              long long v63 = (int *)*((void *)v58 + 1);
              if (v63)
              {
                do
                {
                  long long v64 = v63;
                  long long v63 = *(int **)v63;
                }
                while (v63);
              }
              else
              {
                do
                {
                  long long v64 = (int *)*((void *)v58 + 2);
                  BOOL v65 = *(void *)v64 == (void)v58;
                  uint64_t v58 = v64;
                }
                while (!v65);
              }
              ++v59;
              uint64_t v58 = v64;
            }
            while (v64 != (int *)((char *)&v136 + 8));
          }
          unint64_t v66 = v98;
          if (v98 >= v99)
          {
            uint64_t v67 = std::vector<std::map<int,quasar::Expansion::SegmentTypeData>>::__push_back_slow_path<std::map<int,quasar::Expansion::SegmentTypeData> const&>((uint64_t *)&v97, (uint64_t)&v95);
            uint64_t v18 = v57;
          }
          else
          {
            std::map<int,quasar::Expansion::SegmentTypeData>::map[abi:ne180100](v98, (uint64_t)&v95);
            uint64_t v18 = v57;
            uint64_t v67 = v66 + 24;
          }
          unint64_t v98 = v67;
          std::__tree<int>::destroy((uint64_t)&v95, *((void **)&v95 + 1));
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          ++v55;
        }
        while (v55 != v56);
      }
      float v69 = *v89;
      float v68 = v89[1];
      if (*v89 != v68)
      {
        unsigned int v91 = v90 + 1;
        do
        {
          __p[0] = 0;
          __p[1] = 0;
          *(void *)&long long v120 = 0;
          long long v95 = 0uLL;
          unint64_t v96 = 0;
          uint64_t v71 = v97;
          unint64_t v70 = v98;
          if (v97 != (void *)v98)
          {
            float v72 = v69 + 4;
            do
            {
              float v73 = (void *)*v71;
              if ((void *)*v71 == v71 + 1)
              {
LABEL_107:
                if (quasar::manyToOneAssignments(v71) == 5)
                {
                  unint64_t v82 = (char *)__p[1];
                  if (__p[1] >= (void *)v120)
                  {
                    long long v83 = (void *)std::vector<std::map<int,quasar::Expansion::SegmentTypeData>>::__push_back_slow_path<std::map<int,quasar::Expansion::SegmentTypeData> const&>((uint64_t *)__p, (uint64_t)v71);
                  }
                  else
                  {
                    std::map<int,quasar::Expansion::SegmentTypeData>::map[abi:ne180100]((uint64_t)__p[1], (uint64_t)v71);
                    long long v83 = v82 + 24;
                  }
                  __p[1] = v83;
                }
                else
                {
                  uint64_t v84 = *((void *)&v95 + 1);
                  if (*((void *)&v95 + 1) >= v96)
                  {
                    uint64_t v85 = std::vector<std::map<int,quasar::Expansion::SegmentTypeData>>::__push_back_slow_path<std::map<int,quasar::Expansion::SegmentTypeData> const&>((uint64_t *)&v95, (uint64_t)v71);
                  }
                  else
                  {
                    std::map<int,quasar::Expansion::SegmentTypeData>::map[abi:ne180100](*((uint64_t *)&v95 + 1), (uint64_t)v71);
                    uint64_t v85 = v84 + 24;
                  }
                  *((void *)&v95 + 1) = v85;
                }
              }
              else
              {
                while (1)
                {
                  if (*v72)
                  {
                    int v74 = *((_DWORD *)v73 + 7);
                    int v75 = v69 + 4;
                    unsigned int v76 = *v72;
                    do
                    {
                      int v77 = *((_DWORD *)v76 + 7);
                      BOOL v78 = v77 < v74;
                      if (v77 >= v74) {
                        unint64_t v79 = v76;
                      }
                      else {
                        unint64_t v79 = (long long *)((char *)v76 + 8);
                      }
                      if (!v78) {
                        int v75 = (long long **)v76;
                      }
                      unsigned int v76 = *(long long **)v79;
                    }
                    while (*(void *)v79);
                    if (v75 != v72 && v74 >= *((_DWORD *)v75 + 7) && *((_DWORD *)v75 + 8) != *((_DWORD *)v73 + 8)) {
                      break;
                    }
                  }
                  uint64_t v80 = (void *)v73[1];
                  if (v80)
                  {
                    do
                    {
                      long long v81 = v80;
                      uint64_t v80 = (void *)*v80;
                    }
                    while (v80);
                  }
                  else
                  {
                    do
                    {
                      long long v81 = (void *)v73[2];
                      BOOL v65 = *v81 == (void)v73;
                      float v73 = v81;
                    }
                    while (!v65);
                  }
                  float v73 = v81;
                  if (v81 == v71 + 1) {
                    goto LABEL_107;
                  }
                }
              }
              v71 += 3;
            }
            while (v71 != (void *)v70);
          }
          if (v18 == 1)
          {
            quasar::markAssignmentAsReversed((uint64_t)__p);
            quasar::markAssignmentAsReversed((uint64_t)&v95);
            long long v86 = *(_OWORD *)__p;
            *(_OWORD *)std::string __p = v95;
            long long v95 = v86;
            unint64_t v87 = v120;
            *(void *)&long long v120 = v96;
            unint64_t v96 = v87;
          }
          quasar::extendExpansions((uint64_t *)&v100, (uint64_t)__p, v69, (uint64_t)&v104, v91, *(_DWORD *)v105);
          quasar::extendExpansions((uint64_t *)&v100, (uint64_t)&v95, v69, (uint64_t)v102, *(v106 - 1) + 1, v92);
          v118 = &v95;
          std::vector<std::map<int,quasar::Expansion::SegmentTypeData>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v118);
          *(void *)&long long v95 = __p;
          std::vector<std::map<int,quasar::Expansion::SegmentTypeData>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v95);
          v69 += 6;
        }
        while (v69 != v68);
      }
      std::vector<quasar::Expansion>::__vdeallocate((uint64_t)v89);
      *(_OWORD *)long long v89 = v100;
      v89[2] = v101;
      int v101 = 0;
      long long v100 = 0uLL;
      __p[0] = &v97;
      std::vector<std::map<int,quasar::Expansion::SegmentTypeData>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      __p[0] = &v100;
      std::vector<quasar::Expansion>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    }
    if (SHIBYTE(v103) < 0) {
      operator delete(v102[0]);
    }
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v104.__r_.__value_.__l.__data_);
    }
    if (v105)
    {
      int v106 = v105;
      operator delete(v105);
    }
    BOOL v6 = v42 + 6;
    std::__tree<int>::destroy((uint64_t)&v136, *((void **)&v136 + 1));
LABEL_130:
    std::__tree<int>::destroy((uint64_t)v117, (void *)v117[1]);
    std::__tree<int>::destroy((uint64_t)&v115, *(void **)v116);
    if (v112)
    {
      v113 = (char *)v112;
      operator delete(v112);
    }
  }
  while (v6 < a1[1]);
}

void sub_1B20F32E8(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B20F3454);
}

void sub_1B20F3314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,void *a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)&a66);
  if (a47 < 0) {
    operator delete(__p);
  }
  std::__tree<int>::destroy(a13, a62);
  std::__tree<int>::destroy(a17, a59);
  if (a55)
  {
    a56 = a55;
    operator delete(a55);
  }
  a52 = a10;
  std::vector<quasar::Expansion>::__destroy_vector::operator()[abi:ne180100](&a52);
  _Unwind_Resume(a1);
}

void sub_1B20F3350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,void *a59)
{
  if (__p)
  {
    a53 = (uint64_t)__p;
    operator delete(__p);
  }
  a49 = a10;
  std::vector<quasar::Expansion>::__destroy_vector::operator()[abi:ne180100]((void ***)&a49);
  _Unwind_Resume(a1);
}

void sub_1B20F3358()
{
}

void sub_1B20F3364()
{
}

void sub_1B20F3370(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46)
{
  if (a38 < 0) {
    operator delete(__p);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  if (a45) {
    operator delete(a45);
  }
  std::__tree<int>::destroy(v46 - 128, *(void **)(v46 - 120));
  JUMPOUT(0x1B20F341CLL);
}

void sub_1B20F3378(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void **a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void ***a62,char a63)
{
  a62 = &a23;
  std::vector<std::map<int,quasar::Expansion::SegmentTypeData>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a62);
  a23 = (void **)&a63;
  std::vector<std::map<int,quasar::Expansion::SegmentTypeData>>::__destroy_vector::operator()[abi:ne180100](&a23);
  JUMPOUT(0x1B20F33C0);
}

void quasar::Expansion::~Expansion(quasar::Expansion *this)
{
  std::__tree<int>::destroy((uint64_t)this + 24, *((void **)this + 4));
  uint64_t v2 = (void **)this;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void quasar::putPhraseWithAllDefaultsFirst(uint64_t **a1, uint64_t **a2, uint64_t a3, uint64_t a4)
{
  BOOL v6 = *a1;
  long long v7 = a1[1];
  if (*a1 != v7)
  {
    while (1)
    {
      uint64_t v10 = quasar::MetaInfo::structuredPrediction(v6 + 24, a3, a4);
      if (v10) {
        break;
      }
LABEL_22:
      v6 += 25;
      if (v6 == v7)
      {
        BOOL v6 = v7;
        goto LABEL_24;
      }
    }
    uint64_t v11 = *(void *)(v10 + 32);
    uint64_t v12 = *(void *)(v10 + 40);
    while (v11 != v12)
    {
      uint64_t v13 = *(unsigned __int8 *)(v11 + 23);
      if ((v13 & 0x80u) == 0) {
        uint64_t v14 = *(unsigned __int8 *)(v11 + 23);
      }
      else {
        uint64_t v14 = *(void *)(v11 + 8);
      }
      uint64_t v15 = *(unsigned __int8 *)(v11 + 47);
      int v16 = (char)v15;
      if ((v15 & 0x80u) != 0) {
        uint64_t v15 = *(void *)(v11 + 32);
      }
      if (v14 != v15) {
        goto LABEL_22;
      }
      if (v16 >= 0) {
        unint64_t v17 = (unsigned __int8 *)(v11 + 24);
      }
      else {
        unint64_t v17 = *(unsigned __int8 **)(v11 + 24);
      }
      if ((v13 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v11, v17, *(void *)(v11 + 8))) {
          goto LABEL_22;
        }
      }
      else if (*(unsigned char *)(v11 + 23))
      {
        uint64_t v18 = 0;
        while (*(unsigned __int8 *)(v11 + v18) == v17[v18])
        {
          if (v13 == ++v18) {
            goto LABEL_21;
          }
        }
        goto LABEL_22;
      }
LABEL_21:
      v11 += 80;
    }
  }
LABEL_24:
  uint64_t v20 = *a1;
  unint64_t v19 = a1[1];
  uint64_t v21 = (char *)v6 - (char *)*a1;
  if (v21) {
    BOOL v22 = v6 == v19;
  }
  else {
    BOOL v22 = 1;
  }
  if (!v22)
  {
    quasar::TranslationPhraseInternal::TranslationPhraseInternal((uint64_t)v25, v6);
    quasar::TranslationPhraseInternal::operator=((uint64_t)v6, v20);
    quasar::TranslationPhraseInternal::operator=((uint64_t)v20, v25);
    quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)v25);
    uint64_t v23 = *a2;
    uint64_t v24 = &(*a2)[v21 >> 3];
    quasar::TranslationPhraseInternal::TranslationPhraseInternal((uint64_t)v25, v23);
    quasar::TranslationPhraseInternal::operator=((uint64_t)v23, v24);
    quasar::TranslationPhraseInternal::operator=((uint64_t)v24, v25);
    quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)v25);
  }
}

void sub_1B20F363C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)va);
  _Unwind_Resume(a1);
}

void *quasar::StructuredPredictionBlock::processBody(quasar::StructuredPredictionBlock *this)
{
  uint64_t v1 = (quasar::StructuredPredictionBlock *)((char *)this + 2400);
  uint64_t result = (void *)quasar::ProcessingInput::getValue((quasar::StructuredPredictionBlock *)((char *)this + 2400));
  if (*result != result[1])
  {
    Value = (quasar::TranslationPhraseInternal **)quasar::ProcessingInput::getValue(v1);
    quasar::TranslationPhraseInternal::isFromPhrasebook(*Value);
  }
  return result;
}

void sub_1B20F51E0(_Unwind_Exception *a1)
{
  STACK[0x2F0] = (unint64_t)&STACK[0x468];
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2F0]);
  STACK[0x2F0] = (unint64_t)&STACK[0x480];
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2F0]);
  STACK[0x2F0] = (unint64_t)&STACK[0x498];
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2F0]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x4B0], (void *)STACK[0x4B8]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x4C8], (void *)STACK[0x4D0]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x4E0], (void *)STACK[0x4E8]);
  if (SLOBYTE(STACK[0x50F]) < 0) {
    operator delete((void *)STACK[0x4F8]);
  }
  quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)&STACK[0x510]);
  quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)&STACK[0x5D8]);
  _Unwind_Resume(a1);
}

uint64_t *std::map<int,std::pair<int,int>>::at(uint64_t a1, int *a2)
{
  uint64_t v2 = *(uint64_t **)(a1 + 8);
  if (!v2) {
LABEL_8:
  }
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  int v3 = *a2;
  while (1)
  {
    while (1)
    {
      int v4 = *((_DWORD *)v2 + 7);
      if (v3 >= v4) {
        break;
      }
      uint64_t v2 = (uint64_t *)*v2;
      if (!v2) {
        goto LABEL_8;
      }
    }
    if (v4 >= v3) {
      return v2 + 4;
    }
    uint64_t v2 = (uint64_t *)v2[1];
    if (!v2) {
      goto LABEL_8;
    }
  }
}

void *non-virtual thunk to'quasar::StructuredPredictionBlock::processBody(quasar::StructuredPredictionBlock *this)
{
  return quasar::StructuredPredictionBlock::processBody((quasar::StructuredPredictionBlock *)((char *)this - 2336));
}

uint64_t quasar::StructuredPredictionBlock::minConfigVersion(quasar::StructuredPredictionBlock *this)
{
  return 249;
}

uint64_t virtual thunk to'quasar::StructuredPredictionBlock::minConfigVersion(quasar::StructuredPredictionBlock *this)
{
  return 249;
}

void quasar::StructuredPredictionBlock::init(quasar::StructuredPredictionBlock *this)
{
  uint64_t v2 = quasar::OptionValue<std::string>::value((void *)this + 236);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 23);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(v2 + 8);
  }
  if (v3)
  {
    quasar::WordSetFileFactory::get((unsigned __int8 *)v2, (std::string::size_type *)&v6);
    long long v4 = v6;
    long long v6 = 0uLL;
    uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 329);
    *((_OWORD *)this + 164) = v4;
    if (v5)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      if (*((void *)&v6 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v6 + 1));
      }
    }
  }
}

void virtual thunk to'quasar::StructuredPredictionBlock::init(quasar::StructuredPredictionBlock *this)
{
  quasar::StructuredPredictionBlock::init((quasar::StructuredPredictionBlock *)((char *)this
                                                                              + *(void *)(*(void *)this - 88)));
}

void quasar::ConfiguredProcessingBlock<quasar::StructuredPredictionOptions>::setContextProvider(uint64_t a1, uint64_t *a2)
{
  void (***v3)(uint64_t **__return_ptr);
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t *v10;
  uint64_t *v11;

  uint64_t v3 = (void (***)(uint64_t **__return_ptr))(*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
  (**v3)(&v10);
  long long v4 = v10;
  uint64_t v5 = v11;
  if (v10 != v11)
  {
    do
    {
      long long v6 = *v4;
      long long v7 = (std::__shared_weak_count *)a2[1];
      int v8 = *a2;
      int v9 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      quasar::OptionValueBase::setContextProvider(v6, &v8);
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
      ++v4;
    }
    while (v4 != v5);
    long long v4 = v10;
  }
  if (v4)
  {
    uint64_t v11 = v4;
    operator delete(v4);
  }
}

void sub_1B20F5930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::ConfiguredProcessingBlock<quasar::StructuredPredictionOptions>::getOptions(uint64_t a1)
{
  return a1 + 8;
}

void virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::StructuredPredictionOptions>::setContextProvider(void *a1, uint64_t *a2)
{
}

uint64_t virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::StructuredPredictionOptions>::getOptions(void *a1)
{
  return (uint64_t)a1 + *(void *)(*a1 - 104) + 8;
}

void quasar::StructuredPredictionBlock::~StructuredPredictionBlock(quasar::StructuredPredictionBlock *this)
{
  quasar::ProcessingBlock::~ProcessingBlock((char **)(v1 + 2640));
}

{
  uint64_t v1;
  uint64_t vars8;

  quasar::ProcessingBlock::~ProcessingBlock((char **)(v1 + 2640));
  JUMPOUT(0x1B3EA8670);
}

const char *quasar::StructuredPredictionBlock::blockType(quasar::StructuredPredictionBlock *this)
{
  return "StructuredPredictionBlock";
}

void *quasar::StructuredPredictionBlock::inputs@<X0>(quasar::StructuredPredictionBlock *this@<X0>, void *a2@<X8>)
{
  int v4 = *(unsigned __int8 *)quasar::OptionValue<BOOL>::value((void *)this + 163);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if (v4)
  {
    uint64_t result = operator new(0x28uLL);
    *a2 = result;
    long long v6 = result + 5;
    a2[2] = result + 5;
    *uint64_t result = (char *)this + 2344;
    result[1] = (char *)this + 2400;
    result[2] = (char *)this + 2456;
    result[3] = (char *)this + 2512;
    result[4] = (char *)this + 2568;
  }
  else
  {
    uint64_t result = operator new(0x20uLL);
    *a2 = result;
    long long v6 = result + 4;
    a2[2] = result + 4;
    *uint64_t result = (char *)this + 2344;
    result[1] = (char *)this + 2400;
    result[2] = (char *)this + 2456;
    result[3] = (char *)this + 2512;
  }
  a2[1] = v6;
  return result;
}

void *non-virtual thunk to'quasar::StructuredPredictionBlock::inputs@<X0>(quasar::StructuredPredictionBlock *this@<X0>, void *a2@<X8>)
{
  return quasar::StructuredPredictionBlock::inputs((quasar::StructuredPredictionBlock *)((char *)this - 2336), a2);
}

void non-virtual thunk to'quasar::StructuredPredictionBlock::~StructuredPredictionBlock(char **this)
{
  quasar::ProcessingBlock::~ProcessingBlock(this + 38);
}

{
  uint64_t vars8;

  quasar::ProcessingBlock::~ProcessingBlock(this + 38);
  JUMPOUT(0x1B3EA8670);
}

void virtual thunk to'quasar::StructuredPredictionBlock::~StructuredPredictionBlock(quasar::StructuredPredictionBlock *this)
{
  uint64_t v2 = (char **)(v1 + 2640);
  quasar::ProcessingBlock::~ProcessingBlock(v2);
}

{
  char **v1;
  uint64_t vars8;

  uint64_t v1 = (char **)((char *)this + *(void *)(*(void *)this - 24));
  quasar::ProcessingBlock::~ProcessingBlock(v1 + 330);
  JUMPOUT(0x1B3EA8670);
}

const char *virtual thunk to'quasar::StructuredPredictionBlock::blockType(quasar::StructuredPredictionBlock *this)
{
  return "StructuredPredictionBlock";
}

uint64_t _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1EEEEJNS_3mapIiNS_4pairIiiEENS_4lessIiEENS_9allocatorINS4_IKiS5_EEEEEENS3_IiiS7_NS8_INS4_IS9_iEEEEEEEEC2B8ne180100IJLm0ELm1EEJSC_SF_EJEJEJRSC_RSF_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSL_IJDpT2_EEEDpOT3_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = std::map<int,std::pair<int,int>>::map[abi:ne180100](a1, a2);
  std::map<int,int>::map[abi:ne180100]((uint64_t *)(v5 + 24), a3);
  return a1;
}

void sub_1B20F5C88(_Unwind_Exception *a1)
{
  std::__tree<int>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t std::map<int,std::pair<int,int>>::map[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = a1 + 8;
  std::map<int,std::pair<int,int>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<int,std::pair<int,int>>,std::__tree_node<std::__value_type<int,std::pair<int,int>>,void *> *,long>>>((char *)a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_1B20F5CE0(_Unwind_Exception *a1)
{
  std::__tree<int>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

char *std::map<int,std::pair<int,int>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<int,std::pair<int,int>>,std::__tree_node<std::__value_type<int,std::pair<int,int>>,void *> *,long>>>(char *result, int *a2, int *a3)
{
  if (a2 != a3)
  {
    int v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    long long v6 = (uint64_t *)(result + 8);
    do
    {
      uint64_t result = std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::__emplace_hint_unique_key_args<int,std::pair<int const,std::pair<int,int>> const&>(v5, v6, v4 + 7, (uint64_t)(v4 + 7));
      long long v7 = (int *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          int v8 = v7;
          long long v7 = *(int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          int v8 = (int *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          int v4 = v8;
        }
        while (!v9);
      }
      int v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

char *std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::__emplace_hint_unique_key_args<int,std::pair<int const,std::pair<int,int>> const&>(uint64_t **a1, uint64_t *a2, int *a3, uint64_t a4)
{
  long long v6 = std::__tree<std::__value_type<quasar::PronType,int>,std::__map_value_compare<quasar::PronType,std::__value_type<quasar::PronType,int>,std::less<quasar::PronType>,true>,std::allocator<std::__value_type<quasar::PronType,int>>>::__find_equal<quasar::PronType>(a1, a2, &v11, &v10, a3);
  long long v7 = (char *)*v6;
  if (!*v6)
  {
    int v8 = (uint64_t **)v6;
    long long v7 = (char *)operator new(0x28uLL);
    *(void *)(v7 + 28) = *(void *)a4;
    *((_DWORD *)v7 + 9) = *(_DWORD *)(a4 + 8);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v11, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t *quasar::OptionValue<std::string>::OptionValue(uint64_t *a1, uint64_t a2)
{
  int v4 = quasar::OptionValueBase::OptionValueBase((quasar::OptionValueBase *)a1, (const quasar::OptionValueBase *)a2);
  *(void *)int v4 = &unk_1F0A51DE8;
  if (*(char *)(a2 + 127) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)v4 + 104), *(const std::string::value_type **)(a2 + 104), *(void *)(a2 + 112));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 104);
    *((void *)v4 + 15) = *(void *)(a2 + 120);
    *(_OWORD *)((char *)v4 + 104) = v5;
  }
  a1[16] = *(void *)(a2 + 128);
  std::map<std::string,std::string>::map[abi:ne180100](a1 + 17, (const void ***)(a2 + 136));
  return a1;
}

void sub_1B20F5EA8(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = &unk_1F0A52FB8;
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 96);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (*(char *)(v1 + 79) < 0) {
    operator delete(*(void **)(v1 + 56));
  }
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*(void **)(v1 + 32));
  }
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

quasar::OptionValueBase *quasar::OptionValueBase::OptionValueBase(quasar::OptionValueBase *this, const quasar::OptionValueBase *a2)
{
  *(void *)this = &unk_1F0A52FB8;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else
  {
    long long v4 = *(_OWORD *)((char *)a2 + 8);
    *((void *)this + 3) = *((void *)a2 + 3);
    *(_OWORD *)((char *)this + 8) = v4;
  }
  if (*((char *)a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 32), *((const std::string::value_type **)a2 + 4), *((void *)a2 + 5));
  }
  else
  {
    long long v5 = *((_OWORD *)a2 + 2);
    *((void *)this + 6) = *((void *)a2 + 6);
    *((_OWORD *)this + 2) = v5;
  }
  long long v6 = (std::string *)((char *)this + 56);
  if (*((char *)a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a2 + 7), *((void *)a2 + 8));
  }
  else
  {
    long long v7 = *(_OWORD *)((char *)a2 + 56);
    *((void *)this + 9) = *((void *)a2 + 9);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  uint64_t v8 = *((void *)a2 + 12);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)this + 12) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void sub_1B20F601C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B20F6090(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void quasar::StructuredPredictionBlock::~StructuredPredictionBlock(quasar::StructuredPredictionBlock *this, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v4 - 2std::__tree<int>::destroy((uint64_t)this + 24, *((void **)this + 4)) = a2[5];
  *((void *)this + 292) = a2[6];
  long long v5 = (std::__shared_weak_count *)*((void *)this + 329);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  long long v7 = (void **)((char *)this + 2600);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v7);
  if (*((char *)this + 2591) < 0) {
    operator delete(*((void **)this + 321));
  }
  long long v7 = (void **)((char *)this + 2544);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v7);
  if (*((char *)this + 2535) < 0) {
    operator delete(*((void **)this + 314));
  }
  long long v7 = (void **)((char *)this + 2488);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v7);
  if (*((char *)this + 2479) < 0) {
    operator delete(*((void **)this + 307));
  }
  long long v7 = (void **)((char *)this + 2432);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v7);
  if (*((char *)this + 2423) < 0) {
    operator delete(*((void **)this + 300));
  }
  long long v7 = (void **)((char *)this + 2376);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v7);
  if (*((char *)this + 2367) < 0) {
    operator delete(*((void **)this + 293));
  }
  uint64_t v6 = a2[1];
  *(void *)this = v6;
  *(void *)((char *)this + *(void *)(v6 - 2std::__tree<int>::destroy((uint64_t)this + 24, *((void **)this + 4)) = a2[2];
  quasar::StructuredPredictionOptions::~StructuredPredictionOptions((quasar::StructuredPredictionBlock *)((char *)this + 8));
}

uint64_t std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__push_back_slow_path<kaldi::quasar::TranslationUtil::NbestElement>(uint64_t *a1, const kaldi::quasar::TranslationUtil::NbestElement *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xF0F0F0F0F0F0F0F1 * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xF0F0F0F0F0F0F0) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xF0F0F0F0F0F0F0F1 * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x78787878787878) {
    unint64_t v9 = 0xF0F0F0F0F0F0F0;
  }
  else {
    unint64_t v9 = v5;
  }
  unint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::quasar::TranslationUtil::NbestElement>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v13 = v10;
  uint64_t v14 = (kaldi::quasar::TranslationUtil::NbestElement *)&v10[272 * v4];
  int v16 = &v10[272 * v9];
  kaldi::quasar::TranslationUtil::NbestElement::NbestElement(v14, a2);
  uint64_t v15 = (char *)v14 + 272;
  std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<kaldi::quasar::TranslationUtil::NbestElement>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1B20F63BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<kaldi::quasar::TranslationUtil::NbestElement>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<kaldi::quasar::TranslationUtil::PathElement>::__push_back_slow_path<kaldi::quasar::TranslationUtil::PathElement>(uint64_t *a1, long long *a2)
{
  unint64_t v3 = 0xEEEEEEEEEEEEEEEFLL * ((a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x111111111111111) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (0xDDDDDDDDDDDDDDDELL * ((a1[2] - *a1) >> 4) > v4) {
    unint64_t v4 = 0xDDDDDDDDDDDDDDDELL * ((a1[2] - *a1) >> 4);
  }
  if (0xEEEEEEEEEEEEEEEFLL * ((a1[2] - *a1) >> 4) >= 0x88888888888888) {
    unint64_t v6 = 0x111111111111111;
  }
  else {
    unint64_t v6 = v4;
  }
  uint64_t v14 = a1 + 2;
  if (v6) {
    uint64_t v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::quasar::TranslationUtil::PathElement>>((uint64_t)(a1 + 2), v6);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v10 = v7;
  uint64_t v11 = &v7[240 * v3];
  uint64_t v13 = &v7[240 * v6];
  std::allocator<kaldi::quasar::TranslationUtil::PathElement>::construct[abi:ne180100]<kaldi::quasar::TranslationUtil::PathElement,kaldi::quasar::TranslationUtil::PathElement>((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  uint64_t v12 = v11 + 240;
  std::vector<kaldi::quasar::TranslationUtil::PathElement>::__swap_out_circular_buffer(a1, &v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<kaldi::quasar::TranslationUtil::PathElement>::~__split_buffer((uint64_t)&v10);
  return v8;
}

void sub_1B20F64CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<kaldi::quasar::TranslationUtil::PathElement>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 std::allocator<kaldi::quasar::TranslationUtil::PathElement>::construct[abi:ne180100]<kaldi::quasar::TranslationUtil::PathElement,kaldi::quasar::TranslationUtil::PathElement>(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v3 = *a3;
  *(void *)(a2 + 16) = *((void *)a3 + 2);
  *(_OWORD *)a2 = v3;
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = 0;
  *(void *)a3 = 0;
  *(_DWORD *)(a2 + 24) = *((_DWORD *)a3 + 6);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)(a2 + 32) = a3[2];
  *(void *)(a2 + 48) = *((void *)a3 + 6);
  *((void *)a3 + 4) = 0;
  *((void *)a3 + 5) = 0;
  *((void *)a3 + 6) = 0;
  long long v4 = *(long long *)((char *)a3 + 56);
  *(void *)(a2 + 72) = *((void *)a3 + 9);
  *(_OWORD *)(a2 + 56) = v4;
  *((void *)a3 + 8) = 0;
  *((void *)a3 + 9) = 0;
  *((void *)a3 + 7) = 0;
  *(void *)(a2 + 80) = *((void *)a3 + 10);
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 88) = 0;
  *(_OWORD *)(a2 + 88) = *(long long *)((char *)a3 + 88);
  *(void *)(a2 + 104) = *((void *)a3 + 13);
  *((void *)a3 + 11) = 0;
  *((void *)a3 + 12) = 0;
  *((void *)a3 + 13) = 0;
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  *(_OWORD *)(a2 + 112) = a3[7];
  *(void *)(a2 + 128) = *((void *)a3 + 16);
  *((void *)a3 + 14) = 0;
  *((void *)a3 + 15) = 0;
  *((void *)a3 + 16) = 0;
  *(void *)(a2 + 136) = 0;
  *(void *)(a2 + 144) = 0;
  *(void *)(a2 + 152) = 0;
  *(_OWORD *)(a2 + 136) = *(long long *)((char *)a3 + 136);
  *(void *)(a2 + 152) = *((void *)a3 + 19);
  *((void *)a3 + 17) = 0;
  *((void *)a3 + 18) = 0;
  *((void *)a3 + 19) = 0;
  *(void *)(a2 + 160) = 0;
  *(void *)(a2 + 168) = 0;
  *(void *)(a2 + 176) = 0;
  *(_OWORD *)(a2 + 160) = a3[10];
  *(void *)(a2 + 176) = *((void *)a3 + 22);
  *((void *)a3 + 20) = 0;
  *((void *)a3 + 21) = 0;
  *((void *)a3 + 22) = 0;
  *(void *)(a2 + 184) = 0;
  *(void *)(a2 + 192) = 0;
  *(void *)(a2 + 200) = 0;
  *(_OWORD *)(a2 + 184) = *(long long *)((char *)a3 + 184);
  *(void *)(a2 + 200) = *((void *)a3 + 25);
  *((void *)a3 + 23) = 0;
  *((void *)a3 + 24) = 0;
  *((void *)a3 + 25) = 0;
  *(void *)(a2 + 208) = 0;
  *(void *)(a2 + 216) = 0;
  *(void *)(a2 + 224) = 0;
  __n128 result = (__n128)a3[13];
  *(__n128 *)(a2 + 208) = result;
  *(void *)(a2 + 224) = *((void *)a3 + 28);
  *((void *)a3 + 26) = 0;
  *((void *)a3 + 27) = 0;
  *((void *)a3 + 28) = 0;
  *(_DWORD *)(a2 + 232) = *((_DWORD *)a3 + 58);
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,quasar::SegmentType,std::string_view> *,false>(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, char a5)
{
uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,quasar::SegmentType,std::string_view> *>(uint64_t result, _DWORD *a2)
{
  if ((_DWORD *)result != a2)
  {
    uint64_t v15 = v2;
    uint64_t v16 = v3;
    char v5 = (void *)result;
    char v6 = (_DWORD *)(result + 24);
    if ((_DWORD *)(result + 24) != a2)
    {
      uint64_t v7 = 0;
      uint64_t v8 = (_DWORD *)result;
      do
      {
        unint64_t v9 = v8;
        uint64_t v8 = v6;
        __n128 result = std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)v13, v6, v9);
        if (result)
        {
          *(_OWORD *)uint64_t v13 = *(_OWORD *)v8;
          *(void *)&v13[16] = *((void *)v8 + 2);
          uint64_t v10 = v7;
          while (1)
          {
            uint64_t v11 = (char *)v5 + v10;
            *((void *)v11 + 3) = *(void *)((char *)v5 + v10);
            *((_OWORD *)v11 + 2) = *(_OWORD *)((char *)v5 + v10 + 8);
            if (!v10) {
              break;
            }
            v10 -= 24;
            __n128 result = std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)&v14, v13, (void *)((char *)v5 + v10));
            if ((result & 1) == 0)
            {
              uint64_t v12 = (void *)((char *)v5 + v10 + 24);
              goto LABEL_10;
            }
          }
          uint64_t v12 = v5;
LABEL_10:
          *uint64_t v12 = *(void *)v13;
          *(_OWORD *)(v11 + 8) = *(_OWORD *)&v13[8];
        }
        char v6 = v8 + 6;
        v7 += 24;
      }
      while (v8 + 6 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,quasar::SegmentType,std::string_view> *>(uint64_t result, _DWORD *a2)
{
  if ((_DWORD *)result != a2)
  {
    uint64_t v12 = v2;
    uint64_t v13 = v3;
    char v5 = (_DWORD *)result;
    char v6 = (_DWORD *)(result + 24);
    if ((_DWORD *)(result + 24) != a2)
    {
      uint64_t v7 = result - 24;
      do
      {
        uint64_t v8 = v5;
        char v5 = v6;
        __n128 result = std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)v10, v6, v8);
        if (result)
        {
          *(_OWORD *)uint64_t v10 = *(_OWORD *)v5;
          *(void *)&unsigned char v10[16] = *((void *)v5 + 2);
          uint64_t v9 = v7;
          do
          {
            *(void *)(v9 + 48) = *(void *)(v9 + 24);
            *(_OWORD *)(v9 + 56) = *(_OWORD *)(v9 + 32);
            __n128 result = std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)&v11, v10, (_DWORD *)v9);
            v9 -= 24;
          }
          while ((result & 1) != 0);
          *(void *)(v9 + 48) = *(void *)v10;
          *(_OWORD *)(v9 + 56) = *(_OWORD *)&v10[8];
        }
        char v6 = v5 + 6;
        v7 += 24;
      }
      while (v5 + 6 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,quasar::SegmentType,std::string_view> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  if ((std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)v19, a2, a1) & 1) == 0)
  {
    uint64_t result = std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)v19, a3, a2);
    if (!result) {
      return result;
    }
    uint64_t v12 = *a2;
    *a2 = *a3;
    *a3 = v12;
    long long v13 = *(_OWORD *)(a2 + 1);
    *(_OWORD *)(a2 + 1) = *(_OWORD *)(a3 + 1);
    *(_OWORD *)(a3 + 1) = v13;
    if (!std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)v19, a2, a1))return 1; {
    uint64_t v14 = *a1;
    }
    *a1 = *a2;
    *a2 = v14;
    long long v15 = *(_OWORD *)(a1 + 1);
    *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
    *(_OWORD *)(a2 + 1) = v15;
    return 2;
  }
  int v6 = std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)v19, a3, a2);
  uint64_t v7 = (long long *)(a1 + 1);
  int v9 = *(_DWORD *)a1;
  int v8 = *((_DWORD *)a1 + 1);
  if (!v6)
  {
    *a1 = *a2;
    *(_DWORD *)a2 = v9;
    *((_DWORD *)a2 + 1) = v8;
    long long v16 = *v7;
    *uint64_t v7 = *(_OWORD *)(a2 + 1);
    *(_OWORD *)(a2 + 1) = v16;
    if (!std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)v19, a3, a2))return 1; {
    uint64_t v17 = *a2;
    }
    *a2 = *a3;
    *a3 = v17;
    long long v18 = *(_OWORD *)(a2 + 1);
    *(_OWORD *)(a2 + 1) = *(_OWORD *)(a3 + 1);
    *(_OWORD *)(a3 + 1) = v18;
    return 2;
  }
  *a1 = *a3;
  *(_DWORD *)a3 = v9;
  *((_DWORD *)a3 + 1) = v8;
  long long v10 = *v7;
  *uint64_t v7 = *(_OWORD *)(a3 + 1);
  *(_OWORD *)(a3 + 1) = v10;
  return 1;
}

_DWORD *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::tuple<int,quasar::SegmentType,std::string_view> *,std::__less<void,void> &>(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  *(_OWORD *)int v9 = *(_OWORD *)a1;
  *(void *)&v9[16] = *(void *)(a1 + 16);
  if (std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)&v10, v9, (_DWORD *)(a2 - 24)))
  {
    long long v4 = (_DWORD *)a1;
    do
      v4 += 6;
    while ((std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)&v10, v9, v4) & 1) == 0);
  }
  else
  {
    char v5 = (_DWORD *)(a1 + 24);
    do
    {
      long long v4 = v5;
      if ((unint64_t)v5 >= v2) {
        break;
      }
      int v6 = std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)&v10, v9, v5);
      char v5 = v4 + 6;
    }
    while (!v6);
  }
  if ((unint64_t)v4 < v2)
  {
    do
      v2 -= 24;
    while ((std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)&v10, v9, (_DWORD *)v2) & 1) != 0);
  }
  while ((unint64_t)v4 < v2)
  {
    uint64_t v7 = *(void *)v4;
    *(void *)long long v4 = *(void *)v2;
    *(void *)unint64_t v2 = v7;
    long long v10 = *(_OWORD *)(v4 + 2);
    *(_OWORD *)(v4 + 2) = *(_OWORD *)(v2 + 8);
    *(_OWORD *)(v2 + 8) = v10;
    do
      v4 += 6;
    while (!std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)&v10, v9, v4));
    do
      v2 -= 24;
    while ((std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)&v10, v9, (_DWORD *)v2) & 1) != 0);
  }
  if (v4 - 6 != (_DWORD *)a1)
  {
    *(void *)a1 = *((void *)v4 - 3);
    *(_OWORD *)(a1 + 8) = *((_OWORD *)v4 - 1);
  }
  *((void *)v4 - 3) = *(void *)v9;
  *((_OWORD *)v4 - 1) = *(_OWORD *)&v9[8];
  return v4;
}

double std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::tuple<int,quasar::SegmentType,std::string_view> *,std::__less<void,void> &>(uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = 0;
  *(_OWORD *)long long v10 = *(_OWORD *)a1;
  *(void *)&unsigned char v10[16] = *(void *)(a1 + 16);
  do
    v4 += 24;
  while ((std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)&v11, (_DWORD *)(v4 + a1), v10) & 1) != 0);
  unint64_t v5 = a1 + v4;
  if (v4 == 24)
  {
    do
    {
      if (v5 >= (unint64_t)a2) {
        break;
      }
      a2 -= 6;
    }
    while ((std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)&v11, a2, v10) & 1) == 0);
  }
  else
  {
    do
      a2 -= 6;
    while (!std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)&v11, a2, v10));
  }
  unint64_t v6 = a1 + v4;
  if (v5 < (unint64_t)a2)
  {
    uint64_t v7 = a2;
    do
    {
      uint64_t v8 = *(void *)v6;
      *(void *)unint64_t v6 = *(void *)v7;
      *(void *)uint64_t v7 = v8;
      long long v11 = *(_OWORD *)(v6 + 8);
      *(_OWORD *)(v6 + 8) = *(_OWORD *)(v7 + 2);
      *(_OWORD *)(v7 + 2) = v11;
      do
        v6 += 24;
      while ((std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)&v11, (_DWORD *)v6, v10) & 1) != 0);
      do
        v7 -= 6;
      while (!std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)&v11, v7, v10));
    }
    while (v6 < (unint64_t)v7);
  }
  if (v6 - 24 != a1)
  {
    *(void *)a1 = *(void *)(v6 - 24);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(v6 - 16);
  }
  *(void *)(v6 - 24) = *(void *)v10;
  double result = *(double *)&v10[8];
  *(_OWORD *)(v6 - 16) = *(_OWORD *)&v10[8];
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,quasar::SegmentType,std::string_view> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)v15, (_DWORD *)(a2 - 24), (_DWORD *)a1))
      {
        uint64_t v6 = *(void *)a1;
        *(void *)a1 = *(void *)(a2 - 24);
        *(void *)(a2 - 24) = v6;
        long long v7 = *(_OWORD *)(a1 + 8);
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 - 16);
        *(_OWORD *)(a2 - 16) = v7;
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,quasar::SegmentType,std::string_view> *>((uint64_t *)a1, (uint64_t *)(a1 + 24), (uint64_t *)(a2 - 24));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,quasar::SegmentType,std::string_view> *>(a1, a1 + 24, a1 + 48, a2 - 24);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,quasar::SegmentType,std::string_view> *>(a1, a1 + 24, a1 + 48, a1 + 72, a2 - 24);
      return 1;
    default:
      uint64_t v8 = (_DWORD *)(a1 + 48);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,quasar::SegmentType,std::string_view> *>((uint64_t *)a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 48));
      uint64_t v9 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    if (std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)v15, (_DWORD *)v9, v8))
    {
      *(_OWORD *)long long v15 = *(_OWORD *)v9;
      *(void *)&v15[16] = *(void *)(v9 + 16);
      uint64_t v12 = v10;
      while (1)
      {
        uint64_t v13 = a1 + v12;
        *(void *)(v13 + 72) = *(void *)(a1 + v12 + 48);
        *(_OWORD *)(v13 + 80) = *(_OWORD *)(a1 + v12 + 56);
        if (v12 == -48) {
          break;
        }
        v12 -= 24;
        if ((std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)&v16, v15, (_DWORD *)(v13 + 24)) & 1) == 0)
        {
          uint64_t v14 = (void *)(a1 + v12 + 72);
          goto LABEL_12;
        }
      }
      uint64_t v14 = (void *)a1;
LABEL_12:
      *uint64_t v14 = *(void *)v15;
      *(_OWORD *)(v13 + 56) = *(_OWORD *)&v15[8];
      if (++v11 == 8) {
        return v9 + 24 == a2;
      }
    }
    uint64_t v8 = (_DWORD *)v9;
    v10 += 24;
    v9 += 24;
    if (v9 == a2) {
      return 1;
    }
  }
}

uint64_t std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  if (*a2 < *a3) {
    return 1;
  }
  if (*a3 < *a2) {
    return 0;
  }
  int v3 = a2[1];
  int v4 = a3[1];
  if (v3 < v4) {
    return 1;
  }
  if (v4 >= v3) {
    return std::__tuple_less<1ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)&v6, (uint64_t)a2, (uint64_t)a3);
  }
  else {
    return 0;
  }
}

uint64_t std::__tuple_less<1ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(const void **)(a2 + 8);
  size_t v4 = *(void *)(a2 + 16);
  unint64_t v5 = *(const void **)(a3 + 8);
  size_t v6 = *(void *)(a3 + 16);
  if (v6 >= v4) {
    size_t v7 = v4;
  }
  else {
    size_t v7 = *(void *)(a3 + 16);
  }
  int v8 = memcmp(v3, v5, v7);
  if (v8)
  {
    if (v8 < 0) {
      return 1;
    }
  }
  else if (v4 < v6)
  {
    return 1;
  }
  return 0;
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,quasar::SegmentType,std::string_view> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,quasar::SegmentType,std::string_view> *>((uint64_t *)a1, (uint64_t *)a2, (uint64_t *)a3);
  if (std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)v14, (_DWORD *)a4, (_DWORD *)a3))
  {
    uint64_t v9 = *(void *)a3;
    *(void *)a3 = *(void *)a4;
    *(void *)a4 = v9;
    long long v10 = *(_OWORD *)(a3 + 8);
    *(_OWORD *)(a3 + 8) = *(_OWORD *)(a4 + 8);
    *(_OWORD *)(a4 + 8) = v10;
    if (std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)v14, (_DWORD *)a3, (_DWORD *)a2))
    {
      uint64_t v11 = *(void *)a2;
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v11;
      long long v12 = *(_OWORD *)(a2 + 8);
      *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
      *(_OWORD *)(a3 + 8) = v12;
      if (std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)v14, (_DWORD *)a2, (_DWORD *)a1))
      {
        uint64_t v13 = *(void *)a1;
        *(void *)a1 = *(void *)a2;
        *(void *)a2 = v13;
        __n128 result = *(__n128 *)(a1 + 8);
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
        *(__n128 *)(a2 + 8) = result;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,quasar::SegmentType,std::string_view> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,quasar::SegmentType,std::string_view> *>(a1, a2, a3, a4);
  if (std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)v18, (_DWORD *)a5, (_DWORD *)a4))
  {
    uint64_t v11 = *(void *)a4;
    *(void *)a4 = *(void *)a5;
    *(void *)a5 = v11;
    long long v12 = *(_OWORD *)(a4 + 8);
    *(_OWORD *)(a4 + 8) = *(_OWORD *)(a5 + 8);
    *(_OWORD *)(a5 + 8) = v12;
    if (std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)v18, (_DWORD *)a4, (_DWORD *)a3))
    {
      uint64_t v13 = *(void *)a3;
      *(void *)a3 = *(void *)a4;
      *(void *)a4 = v13;
      long long v14 = *(_OWORD *)(a3 + 8);
      *(_OWORD *)(a3 + 8) = *(_OWORD *)(a4 + 8);
      *(_OWORD *)(a4 + 8) = v14;
      if (std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)v18, (_DWORD *)a3, (_DWORD *)a2))
      {
        uint64_t v15 = *(void *)a2;
        *(void *)a2 = *(void *)a3;
        *(void *)a3 = v15;
        long long v16 = *(_OWORD *)(a2 + 8);
        *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
        *(_OWORD *)(a3 + 8) = v16;
        if (std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)v18, (_DWORD *)a2, (_DWORD *)a1))
        {
          uint64_t v17 = *(void *)a1;
          *(void *)a1 = *(void *)a2;
          *(void *)a2 = v17;
          __n128 result = *(__n128 *)(a1 + 8);
          *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
          *(__n128 *)(a2 + 8) = result;
        }
      }
    }
  }
  return result;
}

uint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,quasar::SegmentType,std::string_view> *,std::tuple<int,quasar::SegmentType,std::string_view> *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v8 = (uint64_t)a2 - a1;
    uint64_t v9 = ((uint64_t)a2 - a1) / 24;
    if ((uint64_t)a2 - a1 >= 25)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = a1 + 24 * v10;
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,quasar::SegmentType,std::string_view> *>(a1, a4, v9, v12);
        v12 -= 24;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = a2;
    if (a2 != a3)
    {
      long long v14 = (_OWORD *)(a1 + 8);
      uint64_t v15 = a2;
      do
      {
        if (std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)&v25, v15, (_DWORD *)a1))
        {
          uint64_t v16 = *v15;
          *uint64_t v15 = *(void *)a1;
          *(void *)a1 = v16;
          long long v17 = *(_OWORD *)(v15 + 1);
          *(_OWORD *)(v15 + 1) = *v14;
          *long long v14 = v17;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,quasar::SegmentType,std::string_view> *>(a1, a4, v9, a1);
        }
        v15 += 3;
      }
      while (v15 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 25)
    {
      int64_t v18 = v8 / 0x18uLL;
      unint64_t v19 = a2 - 3;
      do
      {
        int v21 = *(_DWORD *)a1;
        int v20 = *(_DWORD *)(a1 + 4);
        long long v25 = *(_OWORD *)(a1 + 8);
        uint64_t v22 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,quasar::SegmentType,std::string_view> *>(a1, a4, v18);
        if (v19 == (uint64_t *)v22)
        {
          *(_DWORD *)uint64_t v22 = v21;
          *(_DWORD *)(v22 + 4) = v20;
          *(_OWORD *)(v22 + 8) = v25;
        }
        else
        {
          *(void *)uint64_t v22 = *v19;
          *(_OWORD *)(v22 + 8) = *(_OWORD *)(v19 + 1);
          *(_DWORD *)unint64_t v19 = v21;
          *((_DWORD *)v19 + 1) = v20;
          *(_OWORD *)(v19 + 1) = v25;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,quasar::SegmentType,std::string_view> *>(a1, v22 + 24, a4, 0xAAAAAAAAAAAAAAABLL * ((v22 + 24 - a1) >> 3));
        }
        v19 -= 3;
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

double std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,quasar::SegmentType,std::string_view> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v20 = v4;
    uint64_t v21 = v5;
    uint64_t v7 = a4;
    uint64_t v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((a4 - a1) >> 3)))
    {
      uint64_t v11 = (0x5555555555555556 * ((a4 - a1) >> 3)) | 1;
      uint64_t v12 = a1 + 24 * v11;
      uint64_t v13 = 0x5555555555555556 * ((a4 - a1) >> 3) + 2;
      if (v13 < a3
        && std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)v18, (_DWORD *)(a1 + 24 * v11), (_DWORD *)(v12 + 24)))
      {
        v12 += 24;
        uint64_t v11 = v13;
      }
      if ((std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)v18, (_DWORD *)v12, (_DWORD *)v7) & 1) == 0)
      {
        *(_OWORD *)int64_t v18 = *(_OWORD *)v7;
        *(void *)&v18[16] = *(void *)(v7 + 16);
        do
        {
          uint64_t v15 = v12;
          *(void *)uint64_t v7 = *(void *)v12;
          *(_OWORD *)(v7 + 8) = *(_OWORD *)(v12 + 8);
          if (v9 < v11) {
            break;
          }
          uint64_t v16 = (2 * v11) | 1;
          uint64_t v12 = a1 + 24 * v16;
          uint64_t v17 = 2 * v11 + 2;
          if (v17 < a3)
          {
            if (std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)&v19, (_DWORD *)(a1 + 24 * v16), (_DWORD *)(v12 + 24)))
            {
              v12 += 24;
              uint64_t v16 = v17;
            }
          }
          uint64_t v7 = v15;
          uint64_t v11 = v16;
        }
        while (!std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)&v19, (_DWORD *)v12, v18));
        *(void *)uint64_t v15 = *(void *)v18;
        double result = *(double *)&v18[8];
        *(_OWORD *)(v15 + 8) = *(_OWORD *)&v18[8];
      }
    }
  }
  return result;
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,quasar::SegmentType,std::string_view> *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = a3 - 2;
  if (a3 < 2) {
    uint64_t v6 = a3 - 1;
  }
  uint64_t v7 = v6 >> 1;
  do
  {
    uint64_t v8 = a1 + 24 * v5 + 24;
    uint64_t v9 = (2 * v5) | 1;
    uint64_t v10 = 2 * v5 + 2;
    if (v10 < a3
      && std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)&v12, (_DWORD *)(a1 + 24 * v5 + 24), (_DWORD *)(a1 + 24 * v5 + 48)))
    {
      v8 += 24;
      uint64_t v9 = v10;
    }
    *(void *)a1 = *(void *)v8;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(v8 + 8);
    a1 = v8;
    uint64_t v5 = v9;
  }
  while (v9 <= v7);
  return v8;
}

double std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,quasar::SegmentType,std::string_view> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v14 = v4;
    uint64_t v15 = v5;
    unint64_t v7 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v8 = a1 + 24 * v7;
    uint64_t v9 = a2 - 24;
    if (std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)v12, (_DWORD *)v8, (_DWORD *)(a2 - 24)))
    {
      *(_OWORD *)char v12 = *(_OWORD *)v9;
      *(void *)&v12[16] = *(void *)(v9 + 16);
      do
      {
        uint64_t v11 = v8;
        *(void *)uint64_t v9 = *(void *)v8;
        *(_OWORD *)(v9 + 8) = *(_OWORD *)(v8 + 8);
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        uint64_t v8 = a1 + 24 * v7;
        uint64_t v9 = v11;
      }
      while ((std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)&v13, (_DWORD *)v8, v12) & 1) != 0);
      *(void *)uint64_t v11 = *(void *)v12;
      double result = *(double *)&v12[8];
      *(_OWORD *)(v11 + 8) = *(_OWORD *)&v12[8];
    }
  }
  return result;
}

void std::vector<quasar::Segment>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 96;
        std::allocator<quasar::Segment>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<quasar::Segment>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  std::__tree<int>::destroy(a2 + 72, *(void **)(a2 + 80));
  std::__tree<int>::destroy(a2 + 48, *(void **)(a2 + 56));
  int v3 = *(void **)(a2 + 24);
  if (v3)
  {
    *(void *)(a2 + 32) = v3;
    operator delete(v3);
  }
}

uint64_t std::vector<quasar::Segment>::__push_back_slow_path<quasar::Segment>(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x2AAAAAAAAAAAAAALL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 5) > v4) {
    unint64_t v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 5);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 5) >= 0x155555555555555) {
    unint64_t v6 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  uint64_t v14 = a1 + 2;
  if (v6) {
    unint64_t v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char>>>((uint64_t)(a1 + 2), v6);
  }
  else {
    unint64_t v7 = 0;
  }
  uint64_t v10 = v7;
  uint64_t v11 = &v7[96 * v3];
  char v13 = &v7[96 * v6];
  std::allocator<quasar::Segment>::construct[abi:ne180100]<quasar::Segment,quasar::Segment>((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  char v12 = v11 + 96;
  std::vector<quasar::Segment>::__swap_out_circular_buffer(a1, &v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<quasar::Segment>::~__split_buffer(&v10);
  return v8;
}

void sub_1B20F7A7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::Segment>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::Segment>::construct[abi:ne180100]<quasar::Segment,quasar::Segment>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(void *)(a2 + 16) = v3;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
  *(void *)(a2 + 40) = *(void *)(a3 + 40);
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  *(void *)(a2 + 48) = *(void *)(a3 + 48);
  unint64_t v4 = (void *)(a3 + 56);
  uint64_t v5 = *(void *)(a3 + 56);
  *(void *)(a2 + 56) = v5;
  uint64_t v6 = a2 + 56;
  uint64_t v7 = *(void *)(a3 + 64);
  *(void *)(a2 + 64) = v7;
  if (v7)
  {
    *(void *)(v5 + 16) = v6;
    *(void *)(a3 + 48) = v4;
    *unint64_t v4 = 0;
    *(void *)(a3 + 64) = 0;
  }
  else
  {
    *(void *)(a2 + 48) = v6;
  }
  *(void *)(a2 + 72) = *(void *)(a3 + 72);
  uint64_t v8 = (void *)(a3 + 80);
  uint64_t v9 = *(void *)(a3 + 80);
  *(void *)(a2 + 80) = v9;
  uint64_t v10 = a2 + 80;
  uint64_t v11 = *(void *)(a3 + 88);
  *(void *)(a2 + 88) = v11;
  if (v11)
  {
    *(void *)(v9 + 16) = v10;
    *(void *)(a3 + 72) = v8;
    void *v8 = 0;
    *(void *)(a3 + 88) = 0;
  }
  else
  {
    *(void *)(a2 + 72) = v10;
  }
}

uint64_t std::vector<quasar::Segment>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::Segment>,std::reverse_iterator<quasar::Segment*>,std::reverse_iterator<quasar::Segment*>,std::reverse_iterator<quasar::Segment*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::Segment>,std::reverse_iterator<quasar::Segment*>,std::reverse_iterator<quasar::Segment*>,std::reverse_iterator<quasar::Segment*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 96;
      std::allocator<quasar::Segment>::construct[abi:ne180100]<quasar::Segment,quasar::Segment>(a1, v7 - 96, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 96;
      *((void *)&v16 + 1) -= 96;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::Segment>,std::reverse_iterator<quasar::Segment*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::Segment>,std::reverse_iterator<quasar::Segment*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::Segment>,std::reverse_iterator<quasar::Segment*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::Segment>,std::reverse_iterator<quasar::Segment*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<quasar::Segment>::destroy[abi:ne180100](v3, v1);
      v1 += 96;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<quasar::Segment>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<quasar::Segment>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 96;
    std::allocator<quasar::Segment>::destroy[abi:ne180100](v4, i - 96);
  }
}

uint64_t std::map<int,quasar::Expansion::SegmentTypeData>::map[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = a1 + 8;
  std::map<int,std::pair<int,int>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<int,std::pair<int,int>>,std::__tree_node<std::__value_type<int,std::pair<int,int>>,void *> *,long>>>((char *)a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_1B20F7DA8(_Unwind_Exception *a1)
{
  std::__tree<int>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<int,quasar::Expansion::SegmentTypeData>,std::__map_value_compare<int,std::__value_type<int,quasar::Expansion::SegmentTypeData>,std::less<int>,true>,std::allocator<std::__value_type<int,quasar::Expansion::SegmentTypeData>>>::__emplace_unique_key_args<int,int const&,quasar::Expansion::SegmentTypeData&>(uint64_t **a1, int *a2, _DWORD *a3, void *a4)
{
  uint64_t v8 = a1 + 1;
  uint64_t v7 = a1[1];
  if (v7)
  {
    int v9 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v10 = (uint64_t **)v7;
        int v11 = *((_DWORD *)v7 + 7);
        if (v9 >= v11) {
          break;
        }
        uint64_t v7 = *v10;
        uint64_t v8 = v10;
        if (!*v10) {
          goto LABEL_10;
        }
      }
      if (v11 >= v9) {
        break;
      }
      uint64_t v7 = v10[1];
      if (!v7)
      {
        uint64_t v8 = v10 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v10 = a1 + 1;
LABEL_10:
    char v12 = operator new(0x28uLL);
    v12[7] = *a3;
    *((void *)v12 + 4) = *a4;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v10, v8, (uint64_t *)v12);
    return (uint64_t **)v12;
  }
  return v10;
}

uint64_t std::vector<quasar::Expansion>::__emplace_back_slow_path<std::vector<quasar::Expansion::SegmentData> const&,std::map<int,quasar::Expansion::SegmentTypeData> &>(uint64_t *a1, long long **a2, uint64_t a3)
{
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v5) {
    unint64_t v5 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v8 = 0x555555555555555;
  }
  else {
    unint64_t v8 = v5;
  }
  long long v16 = a1 + 2;
  if (v8) {
    int v9 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>((uint64_t)(a1 + 2), v8);
  }
  else {
    int v9 = 0;
  }
  char v12 = v9;
  char v13 = &v9[48 * v4];
  long long v15 = &v9[48 * v8];
  std::allocator<quasar::Expansion>::construct[abi:ne180100]<quasar::Expansion,std::vector<quasar::Expansion::SegmentData> const&,std::map<int,quasar::Expansion::SegmentTypeData> &>((uint64_t)(a1 + 2), (uint64_t)v13, a2, a3);
  char v14 = v13 + 48;
  std::vector<quasar::Expansion>::__swap_out_circular_buffer(a1, &v12);
  uint64_t v10 = a1[1];
  std::__split_buffer<quasar::Expansion>::~__split_buffer((uint64_t)&v12);
  return v10;
}

void sub_1B20F7F94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::Expansion>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::Expansion>::construct[abi:ne180100]<quasar::Expansion,std::vector<quasar::Expansion::SegmentData> const&,std::map<int,quasar::Expansion::SegmentTypeData> &>(uint64_t a1, uint64_t a2, long long **a3, uint64_t a4)
{
  memset(&v14, 0, sizeof(v14));
  std::vector<quasar::Expansion::SegmentData>::__init_with_size[abi:ne180100]<quasar::Expansion::SegmentData*,quasar::Expansion::SegmentData*>(&v14, *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 5);
  std::map<int,quasar::Expansion::SegmentTypeData>::map[abi:ne180100]((uint64_t)&v11, a4);
  *(_OWORD *)a2 = *(_OWORD *)&v14.__r_.__value_.__l.__data_;
  std::string::size_type v6 = v14.__r_.__value_.__r.__words[2];
  memset(&v14, 0, sizeof(v14));
  unint64_t v8 = v11;
  uint64_t v7 = v12;
  *(void *)(a2 + 16) = v6;
  *(void *)(a2 + 24) = v8;
  *(void *)(a2 + 32) = v7;
  uint64_t v9 = a2 + 32;
  uint64_t v10 = v13;
  *(void *)(a2 + 40) = v13;
  if (v10)
  {
    void v7[2] = v9;
    int v11 = &v12;
    char v12 = 0;
    uint64_t v13 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    *(void *)(a2 + 24) = v9;
  }
  std::__tree<int>::destroy((uint64_t)&v11, v7);
  long long v15 = &v14;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
}

void sub_1B20F8070(_Unwind_Exception *a1)
{
  *(void *)(v2 - 40) = v1;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 40));
  _Unwind_Resume(a1);
}

std::string *std::vector<quasar::Expansion::SegmentData>::__init_with_size[abi:ne180100]<quasar::Expansion::SegmentData*,quasar::Expansion::SegmentData*>(std::string *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    std::string::size_type v6 = result;
    std::vector<quasar::TextTokenizer::Token>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::Expansion::SegmentData>,quasar::Expansion::SegmentData*,quasar::Expansion::SegmentData*,quasar::Expansion::SegmentData*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1B20F80F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::Expansion::SegmentData>,quasar::Expansion::SegmentData*,quasar::Expansion::SegmentData*,quasar::Expansion::SegmentData*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  unint64_t v4 = this;
  char v12 = this;
  uint64_t v13 = this;
  v10[0] = a1;
  v10[1] = &v12;
  v10[2] = &v13;
  char v11 = 0;
  if (a2 != a3)
  {
    std::string::size_type v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        unint64_t v8 = v13;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
        unint64_t v8 = v4;
      }
      v4[1].__r_.__value_.__r.__words[0] = *((void *)v6 + 3);
      v6 += 2;
      unint64_t v4 = (std::string *)((char *)v8 + 32);
      uint64_t v13 = (std::string *)((char *)v8 + 32);
    }
    while (v6 != a3);
  }
  char v11 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::Expansion::SegmentData>,quasar::Expansion::SegmentData*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
  return v4;
}

void sub_1B20F81C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::Expansion::SegmentData>,quasar::Expansion::SegmentData*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::Token>,quasar::TextTokenizer::Token*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::vector<quasar::Expansion>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::Expansion>,std::reverse_iterator<quasar::Expansion*>,std::reverse_iterator<quasar::Expansion*>,std::reverse_iterator<quasar::Expansion*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::Expansion>,std::reverse_iterator<quasar::Expansion*>,std::reverse_iterator<quasar::Expansion*>,std::reverse_iterator<quasar::Expansion*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 48;
      std::allocator<quasar::Expansion>::construct[abi:ne180100]<quasar::Expansion,quasar::Expansion>(a1, (void *)(v7 - 48), v9);
      uint64_t v7 = *((void *)&v16 + 1) - 48;
      *((void *)&v16 + 1) -= 48;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::Expansion>,std::reverse_iterator<quasar::Expansion*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

void std::allocator<quasar::Expansion>::construct[abi:ne180100]<quasar::Expansion,quasar::Expansion>(uint64_t a1, void *a2, uint64_t a3)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  *(_OWORD *)a2 = *(_OWORD *)a3;
  a2[2] = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  a2[3] = *(void *)(a3 + 24);
  uint64_t v3 = (void *)(a3 + 32);
  uint64_t v4 = *(void *)(a3 + 32);
  a2[4] = v4;
  uint64_t v5 = a2 + 4;
  uint64_t v6 = *(void *)(a3 + 40);
  a2[5] = v6;
  if (v6)
  {
    *(void *)(v4 + 16) = v5;
    *(void *)(a3 + 24) = v3;
    *uint64_t v3 = 0;
    *(void *)(a3 + 40) = 0;
  }
  else
  {
    a2[3] = v5;
  }
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::Expansion>,std::reverse_iterator<quasar::Expansion*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::Expansion>,std::reverse_iterator<quasar::Expansion*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::Expansion>,std::reverse_iterator<quasar::Expansion*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v14 = v3;
  uint64_t v15 = v2;
  uint64_t v16 = v3;
  uint64_t v17 = v2;
  uint64_t v4 = *a1;
  uint64_t v5 = (uint64_t *)a1[1];
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  uint64_t v9 = v7;
  uint64_t v10 = v6;
  uint64_t v11 = v7;
  uint64_t v12 = v6;
  std::__allocator_destroy[abi:ne180100]<std::allocator<quasar::Expansion>,std::reverse_iterator<std::reverse_iterator<quasar::Expansion*>>,std::reverse_iterator<std::reverse_iterator<quasar::Expansion*>>>(v4, (uint64_t)v13, (uint64_t)v8);
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<quasar::Expansion>,std::reverse_iterator<std::reverse_iterator<quasar::Expansion*>>,std::reverse_iterator<std::reverse_iterator<quasar::Expansion*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  for (uint64_t i = *(void *)(a2 + 32); i != *(void *)(a3 + 32); *(void *)(a2 + 32) = i)
  {
    std::__tree<int>::destroy(i + 24, *(void **)(i + 32));
    uint64_t v6 = (void **)i;
    std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v6);
    uint64_t i = *(void *)(a2 + 32) + 48;
  }
}

uint64_t std::__split_buffer<quasar::Expansion>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<quasar::Expansion>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v5 = (void **)(i - 48);
    *(void *)(a1 + 16) = i - 48;
    std::__tree<int>::destroy(i - 24, *(void **)(i - 16));
    uint64_t v6 = v5;
    std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v6);
  }
}

double std::vector<quasar::Expansion::SegmentData>::__construct_one_at_end[abi:ne180100]<std::string const&,std::pair<int,int>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v9 = *(std::string *)a2;
  }
  uint64_t v6 = *a3;
  double result = *(double *)&v9.__r_.__value_.__l.__data_;
  std::string::size_type v8 = v9.__r_.__value_.__r.__words[2];
  *(_OWORD *)uint64_t v5 = *(_OWORD *)&v9.__r_.__value_.__l.__data_;
  *(void *)(v5 + 16) = v8;
  *(void *)(v5 + 24) = v6;
  *(void *)(a1 + 8) = v5 + 32;
  return result;
}

void sub_1B20F85E8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::Expansion::SegmentData>::__emplace_back_slow_path<std::string const&,std::pair<int,int>>(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (a1[1] - *a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v10 = a1[2] - v4;
  if (v10 >> 4 > v6) {
    unint64_t v6 = v10 >> 4;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v6;
  }
  uint64_t v22 = a1 + 2;
  if (v11) {
    uint64_t v12 = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v9, v11);
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = (char *)&v12[4 * v5];
  v19[0] = v12;
  v19[1] = v13;
  uint64_t v20 = v13;
  uint64_t v21 = (char *)&v12[4 * v11];
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    uint64_t v14 = v20;
  }
  else
  {
    std::string v23 = *(std::string *)a2;
    uint64_t v14 = (char *)&v12[4 * v5];
  }
  uint64_t v15 = *a3;
  long long v16 = *(_OWORD *)&v23.__r_.__value_.__l.__data_;
  *((void *)v13 + 2) = *((void *)&v23.__r_.__value_.__l + 2);
  *(_OWORD *)uint64_t v13 = v16;
  v12[4 * v5 + 3] = v15;
  uint64_t v20 = v14 + 32;
  std::vector<quasar::Expansion::SegmentData>::__swap_out_circular_buffer(a1, v19);
  uint64_t v17 = a1[1];
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)v19);
  return v17;
}

void sub_1B20F8710(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::Expansion::SegmentData>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::Expansion::SegmentData>,std::reverse_iterator<quasar::Expansion::SegmentData*>,std::reverse_iterator<quasar::Expansion::SegmentData*>,std::reverse_iterator<quasar::Expansion::SegmentData*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::Expansion::SegmentData>,std::reverse_iterator<quasar::Expansion::SegmentData*>,std::reverse_iterator<quasar::Expansion::SegmentData*>,std::reverse_iterator<quasar::Expansion::SegmentData*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  uint64_t v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 32);
      *(void *)(v7 - 16) = *(void *)(a3 - 16);
      *(_OWORD *)(v7 - 32) = v8;
      *(void *)(a3 - 24) = 0;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(v7 - 8) = *(void *)(a3 - 8);
      uint64_t v7 = *((void *)&v14 + 1) - 32;
      *((void *)&v14 + 1) -= 32;
      a3 -= 32;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::Expansion::SegmentData>,std::reverse_iterator<quasar::Expansion::SegmentData*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::Expansion::SegmentData>,std::reverse_iterator<quasar::Expansion::SegmentData*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::Token>,std::reverse_iterator<quasar::TextTokenizer::Token*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::Expansion>,quasar::Expansion const*,quasar::Expansion const*,quasar::Expansion*>(uint64_t a1, long long **a2, long long **a3, std::string *a4)
{
  uint64_t v4 = a4;
  unint64_t v11 = a4;
  char v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  uint64_t v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::allocator<quasar::Expansion>::construct[abi:ne180100]<quasar::Expansion,quasar::Expansion const&>(a1, v4, v6);
      v6 += 6;
      uint64_t v4 = v12 + 2;
      v12 += 2;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::Expansion>,quasar::Expansion*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1B20F8918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::allocator<quasar::Expansion>::construct[abi:ne180100]<quasar::Expansion,quasar::Expansion const&>(uint64_t a1, std::string *a2, long long **a3)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::vector<quasar::Expansion::SegmentData>::__init_with_size[abi:ne180100]<quasar::Expansion::SegmentData*,quasar::Expansion::SegmentData*>(a2, *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 5);
  return std::map<int,quasar::Expansion::SegmentTypeData>::map[abi:ne180100]((uint64_t)&a2[1], (uint64_t)(a3 + 3));
}

void sub_1B20F8980(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::Expansion>,quasar::Expansion*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::__allocator_destroy[abi:ne180100]<std::allocator<quasar::Expansion>,std::reverse_iterator<quasar::Expansion*>,std::reverse_iterator<quasar::Expansion*>>(*(void *)a1, **(void **)(a1 + 16), **(void ****)(a1 + 16), **(void **)(a1 + 8), **(void ****)(a1 + 8));
  }
  return a1;
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<quasar::Expansion>,std::reverse_iterator<quasar::Expansion*>,std::reverse_iterator<quasar::Expansion*>>(uint64_t a1, uint64_t a2, void **a3, uint64_t a4, void **a5)
{
  if (a3 != a5)
  {
    void v9[3] = v5;
    void v9[4] = v6;
    do
    {
      long long v8 = a3 - 6;
      std::__tree<int>::destroy((uint64_t)(a3 - 3), *(a3 - 2));
      v9[0] = v8;
      std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v9);
      a3 = v8;
    }
    while (v8 != a5);
  }
}

void std::vector<quasar::Expansion>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = (void ***)*a1;
  if (*v2)
  {
    std::vector<quasar::Expansion>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<quasar::Expansion>::__base_destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  uint64_t v4 = *(void ***)(a1 + 8);
  if (v4 != a2)
  {
    do
    {
      uint64_t v5 = v4 - 6;
      std::__tree<int>::destroy((uint64_t)(v4 - 3), *(v4 - 2));
      uint64_t v6 = v5;
      std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v6);
      uint64_t v4 = v5;
    }
    while (v5 != a2);
  }
  *(void *)(a1 + 8) = a2;
}

double std::vector<quasar::Expansion::SegmentData>::__construct_one_at_end[abi:ne180100]<std::string &,std::pair<int,int>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v9 = *(std::string *)a2;
  }
  uint64_t v6 = *a3;
  double result = *(double *)&v9.__r_.__value_.__l.__data_;
  std::string::size_type v8 = v9.__r_.__value_.__r.__words[2];
  *(_OWORD *)uint64_t v5 = *(_OWORD *)&v9.__r_.__value_.__l.__data_;
  *(void *)(v5 + 16) = v8;
  *(void *)(v5 + 24) = v6;
  *(void *)(a1 + 8) = v5 + 32;
  return result;
}

void sub_1B20F8B80(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::Expansion::SegmentData>::__emplace_back_slow_path<std::string &,std::pair<int,int>>(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (a1[1] - *a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v10 = a1[2] - v4;
  if (v10 >> 4 > v6) {
    unint64_t v6 = v10 >> 4;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v6;
  }
  uint64_t v22 = a1 + 2;
  if (v11) {
    char v12 = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v9, v11);
  }
  else {
    char v12 = 0;
  }
  long long v13 = (char *)&v12[4 * v5];
  v19[0] = v12;
  v19[1] = v13;
  uint64_t v20 = v13;
  uint64_t v21 = (char *)&v12[4 * v11];
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    long long v14 = v20;
  }
  else
  {
    std::string v23 = *(std::string *)a2;
    long long v14 = (char *)&v12[4 * v5];
  }
  uint64_t v15 = *a3;
  long long v16 = *(_OWORD *)&v23.__r_.__value_.__l.__data_;
  *((void *)v13 + 2) = *((void *)&v23.__r_.__value_.__l + 2);
  *(_OWORD *)long long v13 = v16;
  v12[4 * v5 + 3] = v15;
  uint64_t v20 = v14 + 32;
  std::vector<quasar::Expansion::SegmentData>::__swap_out_circular_buffer(a1, v19);
  uint64_t v17 = a1[1];
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)v19);
  return v17;
}

void sub_1B20F8CA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<std::map<int,quasar::Expansion::SegmentTypeData>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        unint64_t v6 = v4 - 24;
        std::__tree<int>::destroy((uint64_t)(v4 - 24), *((void **)v4 - 2));
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_OWORD *boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>>::dynamic_bitset<int>(_OWORD *a1, int a2, int a3)
{
  *a1 = 0u;
  a1[1] = 0u;
  boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>>::init_from_unsigned_long((uint64_t)a1, a2, a3);
  return a1;
}

void sub_1B20F8D80(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>>::init_from_unsigned_long(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if ((a2 & 0x3F) != 0) {
    unint64_t v6 = (a2 >> 6) + 1;
  }
  else {
    unint64_t v6 = a2 >> 6;
  }
  std::vector<unsigned long>::resize(a1, v6);
  *(void *)(a1 + 24) = a2;
  uint64_t v7 = -1;
  if (a2 < 0x40) {
    uint64_t v7 = ~(-1 << a2);
  }
  uint64_t v8 = v7 & a3;
  if (v8) {
    **(void **)a1 = v8;
  }
}

uint64_t **std::__tree<std::__value_type<int,quasar::Expansion::SegmentTypeData>,std::__map_value_compare<int,std::__value_type<int,quasar::Expansion::SegmentTypeData>,std::less<int>,true>,std::allocator<std::__value_type<int,quasar::Expansion::SegmentTypeData>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v7 = a1 + 1;
  unint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10) {
          break;
        }
        unint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      unint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    unint64_t v11 = operator new(0x28uLL);
    v11[7] = **a4;
    *((void *)v11 + 4) = 5;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t std::vector<std::map<int,quasar::Expansion::SegmentTypeData>>::__push_back_slow_path<std::map<int,quasar::Expansion::SegmentTypeData> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    int v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  }
  else {
    int v10 = 0;
  }
  long long v13 = v10;
  long long v14 = &v10[24 * v4];
  long long v16 = &v10[24 * v9];
  std::map<int,quasar::Expansion::SegmentTypeData>::map[abi:ne180100]((uint64_t)v14, a2);
  uint64_t v15 = v14 + 24;
  std::vector<std::map<int,quasar::Expansion::SegmentTypeData>>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<std::map<int,quasar::Expansion::SegmentTypeData>>::~__split_buffer(&v13);
  return v11;
}

void sub_1B20F8FBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::map<int,quasar::Expansion::SegmentTypeData>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::map<int,quasar::Expansion::SegmentTypeData>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::map<int,quasar::Expansion::SegmentTypeData>>,std::reverse_iterator<std::map<int,quasar::Expansion::SegmentTypeData>*>,std::reverse_iterator<std::map<int,quasar::Expansion::SegmentTypeData>*>,std::reverse_iterator<std::map<int,quasar::Expansion::SegmentTypeData>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::map<int,quasar::Expansion::SegmentTypeData>>,std::reverse_iterator<std::map<int,quasar::Expansion::SegmentTypeData>*>,std::reverse_iterator<std::map<int,quasar::Expansion::SegmentTypeData>*>,std::reverse_iterator<std::map<int,quasar::Expansion::SegmentTypeData>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v19 = a6;
  *((void *)&v19 + 1) = a7;
  long long v18 = v19;
  v16[0] = a1;
  v16[1] = &v18;
  v16[2] = &v19;
  if (a3 == a5)
  {
    uint64_t v14 = a6;
  }
  else
  {
    uint64_t v8 = a3;
    do
    {
      uint64_t v9 = *(void *)(v8 - 24);
      v8 -= 24;
      *(void *)(v7 - 24) = v9;
      int v10 = (void *)(a3 - 16);
      uint64_t v11 = *(void *)(a3 - 16);
      *(void *)(v7 - 16) = v11;
      uint64_t v12 = v7 - 16;
      uint64_t v13 = *(void *)(a3 - 8);
      *(void *)(v7 - 8) = v13;
      if (v13)
      {
        *(void *)(v11 + 16) = v12;
        *(void *)(a3 - 24) = v10;
        *int v10 = 0;
        *(void *)(a3 - 8) = 0;
      }
      else
      {
        *(void *)(v7 - 24) = v12;
      }
      uint64_t v7 = *((void *)&v19 + 1) - 24;
      *((void *)&v19 + 1) -= 24;
      a3 = v8;
    }
    while (v8 != a5);
    uint64_t v14 = v19;
  }
  char v17 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::map<int,quasar::Expansion::SegmentTypeData>>,std::reverse_iterator<std::map<int,quasar::Expansion::SegmentTypeData>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v16);
  return v14;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::map<int,quasar::Expansion::SegmentTypeData>>,std::reverse_iterator<std::map<int,quasar::Expansion::SegmentTypeData>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::map<int,quasar::Expansion::SegmentTypeData>>,std::reverse_iterator<std::map<int,quasar::Expansion::SegmentTypeData>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::map<int,quasar::Expansion::SegmentTypeData>>,std::reverse_iterator<std::map<int,quasar::Expansion::SegmentTypeData>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    std::__tree<int>::destroy(v1, *(void **)(v1 + 8));
    v1 += 24;
  }
}

void **std::__split_buffer<std::map<int,quasar::Expansion::SegmentTypeData>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::map<int,quasar::Expansion::SegmentTypeData>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 24;
    std::__tree<int>::destroy(i - 24, *(void **)(i - 16));
  }
}

void std::vector<quasar::Expansion>::__vdeallocate(uint64_t a1)
{
  if (*(void *)a1)
  {
    std::vector<quasar::Expansion>::__base_destruct_at_end[abi:ne180100](a1, *(void ***)a1);
    operator delete(*(void **)a1);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
}

uint64_t quasar::TranslationPhraseInternal::TranslationPhraseInternal(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  *(void *)(a1 + 32) = a2[4];
  a2[2] = 0;
  a2[3] = 0;
  a2[4] = 0;
  long long v4 = *(_OWORD *)(a2 + 5);
  *(void *)(a1 + 56) = a2[7];
  *(_OWORD *)(a1 + 40) = v4;
  a2[6] = 0;
  a2[7] = 0;
  a2[5] = 0;
  *(unsigned char *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 88) = 0;
  if (*((unsigned char *)a2 + 88))
  {
    long long v5 = *((_OWORD *)a2 + 4);
    *(void *)(a1 + 80) = a2[10];
    *(_OWORD *)(a1 + 64) = v5;
    a2[9] = 0;
    a2[10] = 0;
    a2[8] = 0;
    *(unsigned char *)(a1 + 88) = 1;
  }
  *(unsigned char *)(a1 + 96) = 0;
  *(unsigned char *)(a1 + 120) = 0;
  if (*((unsigned char *)a2 + 120))
  {
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
    *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
    *(void *)(a1 + 112) = a2[14];
    a2[12] = 0;
    a2[13] = 0;
    a2[14] = 0;
    *(unsigned char *)(a1 + 120) = 1;
  }
  __int16 v6 = *((_WORD *)a2 + 64);
  *(void *)(a1 + 136) = 0;
  *(_WORD *)(a1 + 128) = v6;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 17);
  *(void *)(a1 + 152) = a2[19];
  a2[17] = 0;
  a2[18] = 0;
  a2[19] = 0;
  *(void *)(a1 + 160) = a2[20];
  long long v7 = *(_OWORD *)(a2 + 21);
  *(void *)(a1 + 184) = a2[23];
  *(_OWORD *)(a1 + 168) = v7;
  a2[22] = 0;
  a2[23] = 0;
  a2[21] = 0;
  quasar::MetaInfo::MetaInfo((void *)(a1 + 192), a2 + 24);
  return a1;
}

void sub_1B20F949C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (v2[191] < 0) {
    operator delete(*v3);
  }
  std::vector<quasar::TranslationTokenInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  quasar::TranslationPhrase::~TranslationPhrase((quasar::TranslationPhrase *)v2);
  _Unwind_Resume(a1);
}

__n128 std::__optional_storage_base<std::vector<quasar::AlternativeSelectionSpan>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<quasar::AlternativeSelectionSpan>,false>>(uint64_t a1, __n128 *a2)
{
  if (*(unsigned __int8 *)(a1 + 24) == a2[1].n128_u8[8])
  {
    if (*(unsigned char *)(a1 + 24))
    {
      std::vector<quasar::AlternativeSelectionSpan>::__vdeallocate((void **)a1);
      __n128 result = *a2;
      *(__n128 *)a1 = *a2;
      *(void *)(a1 + 16) = a2[1].n128_u64[0];
      a2->n128_u64[0] = 0;
      a2->n128_u64[1] = 0;
      a2[1].n128_u64[0] = 0;
    }
  }
  else if (*(unsigned char *)(a1 + 24))
  {
    long long v5 = (void **)a1;
    std::vector<quasar::AlternativeSelectionSpan>::__destroy_vector::operator()[abi:ne180100](&v5);
    *(unsigned char *)(a1 + 24) = 0;
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    __n128 result = *a2;
    *(__n128 *)a1 = *a2;
    *(void *)(a1 + 16) = a2[1].n128_u64[0];
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
  return result;
}

uint64_t std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__emplace_back_slow_path<std::string const&,std::string&,quasar::MetaInfo::StructuredPrediction::Span::Range,std::vector<quasar::MetaInfo::StructuredPrediction::Span::Range>>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4, __n128 *a5)
{
  unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  unint64_t v7 = v6 + 1;
  if (v6 + 1 > 0x333333333333333) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v7) {
    unint64_t v7 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999) {
    unint64_t v12 = 0x333333333333333;
  }
  else {
    unint64_t v12 = v7;
  }
  uint64_t v20 = a1 + 2;
  if (v12) {
    uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>>((uint64_t)(a1 + 2), v12);
  }
  else {
    uint64_t v13 = 0;
  }
  long long v16 = v13;
  char v17 = &v13[80 * v6];
  long long v19 = &v13[80 * v12];
  std::allocator<quasar::MetaInfo::StructuredPrediction::Span>::construct[abi:ne180100]<quasar::MetaInfo::StructuredPrediction::Span,std::string const&,std::string&,quasar::MetaInfo::StructuredPrediction::Span::Range,std::vector<quasar::MetaInfo::StructuredPrediction::Span::Range>>((uint64_t)(a1 + 2), (uint64_t)v17, a2, a3, a4, a5);
  long long v18 = v17 + 80;
  std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__swap_out_circular_buffer(a1, &v16);
  uint64_t v14 = a1[1];
  std::__split_buffer<quasar::MetaInfo::StructuredPrediction::Span>::~__split_buffer(&v16);
  return v14;
}

void sub_1B20F9694(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::MetaInfo::StructuredPrediction::Span>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

__n128 std::allocator<quasar::MetaInfo::StructuredPrediction::Span>::construct[abi:ne180100]<quasar::MetaInfo::StructuredPrediction::Span,std::string const&,std::string&,quasar::MetaInfo::StructuredPrediction::Span::Range,std::vector<quasar::MetaInfo::StructuredPrediction::Span::Range>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, __n128 *a6)
{
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v14 = *(std::string *)a3;
  }
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string v13 = *(std::string *)a4;
  }
  uint64_t v10 = *a5;
  unint64_t v11 = a6[1].n128_u64[0];
  __n128 result = *a6;
  a6->n128_u64[0] = 0;
  a6->n128_u64[1] = 0;
  a6[1].n128_u64[0] = 0;
  *(std::string *)a2 = v14;
  *(std::string *)(a2 + 24) = v13;
  *(void *)(a2 + 48) = v10;
  *(__n128 *)(a2 + 56) = result;
  *(void *)(a2 + 72) = v11;
  return result;
}

void sub_1B20F9770(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<quasar::TranslationTokenInternal>::__assign_with_size[abi:ne180100]<quasar::TranslationTokenInternal const*,quasar::TranslationTokenInternal const*>(uint64_t a1, quasar::TranslationTokenInternal *a2, quasar::TranslationTokenInternal *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(void **)a1;
  if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    std::vector<quasar::TranslationTokenInternal>::__vdeallocate((void **)a1);
    if (a4 > 0x1E1E1E1E1E1E1E1) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xE1E1E1E1E1E1E1E2 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0xF0F0F0F0F0F0F0) {
      unint64_t v11 = 0x1E1E1E1E1E1E1E1;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<quasar::TranslationTokenInternal>::__vallocate[abi:ne180100]((void *)a1, v11);
    unint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::TranslationTokenInternal>,quasar::TranslationTokenInternal const*,quasar::TranslationTokenInternal const*,quasar::TranslationTokenInternal*>(v8, a2, a3, *(std::string **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    std::string v13 = (quasar::TranslationTokenInternal *)((char *)a2 + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::TranslationTokenInternal *,quasar::TranslationTokenInternal *,quasar::TranslationTokenInternal *>((uint64_t)&v17, (uint64_t)a2, (uint64_t)v13, (uint64_t)v9);
    unint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::TranslationTokenInternal>,quasar::TranslationTokenInternal const*,quasar::TranslationTokenInternal const*,quasar::TranslationTokenInternal*>(v8, v13, a3, *(std::string **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::TranslationTokenInternal *,quasar::TranslationTokenInternal *,quasar::TranslationTokenInternal *>((uint64_t)&v18, (uint64_t)a2, (uint64_t)a3, (uint64_t)v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 136;
      std::allocator<quasar::TranslationTokenInternal>::destroy[abi:ne180100](v8, v16);
    }
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_1B20F9900(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B20F9908(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::TranslationTokenInternal>,quasar::TranslationTokenInternal const*,quasar::TranslationTokenInternal const*,quasar::TranslationTokenInternal*>(uint64_t a1, quasar::TranslationTokenInternal *a2, quasar::TranslationTokenInternal *a3, std::string *this)
{
  long long v4 = this;
  unint64_t v10 = this;
  unint64_t v11 = this;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    unint64_t v6 = a2;
    do
    {
      quasar::TranslationTokenInternal::TranslationTokenInternal(v4, v6);
      unint64_t v6 = (const quasar::TranslationTokenInternal *)((char *)v6 + 136);
      long long v4 = (std::string *)((char *)v11 + 136);
      unint64_t v11 = (std::string *)((char *)v11 + 136);
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TranslationTokenInternal>,quasar::TranslationTokenInternal*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B20F99A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::vector<std::set<int>>::__emplace_back_slow_path<std::set<int> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  char v17 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  std::string v13 = v10;
  uint64_t v14 = (uint64_t *)&v10[24 * v4];
  uint64_t v16 = &v10[24 * v9];
  std::set<int>::set[abi:ne180100](v14, a2);
  uint64_t v15 = v14 + 3;
  std::vector<std::set<int>>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<std::map<int,quasar::Expansion::SegmentTypeData>>::~__split_buffer(&v13);
  return v11;
}

void sub_1B20F9AA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::map<int,quasar::Expansion::SegmentTypeData>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::set<int>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::set<int>>,std::reverse_iterator<std::set<int>*>,std::reverse_iterator<std::set<int>*>,std::reverse_iterator<std::set<int>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::set<int>>,std::reverse_iterator<std::set<int>*>,std::reverse_iterator<std::set<int>*>,std::reverse_iterator<std::set<int>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v19 = a6;
  *((void *)&v19 + 1) = a7;
  long long v18 = v19;
  v16[0] = a1;
  v16[1] = &v18;
  v16[2] = &v19;
  if (a3 == a5)
  {
    uint64_t v14 = a6;
  }
  else
  {
    uint64_t v8 = a3;
    do
    {
      uint64_t v9 = *(void *)(v8 - 24);
      v8 -= 24;
      *(void *)(v7 - 24) = v9;
      unint64_t v10 = (void *)(a3 - 16);
      uint64_t v11 = *(void *)(a3 - 16);
      *(void *)(v7 - 16) = v11;
      uint64_t v12 = v7 - 16;
      uint64_t v13 = *(void *)(a3 - 8);
      *(void *)(v7 - 8) = v13;
      if (v13)
      {
        *(void *)(v11 + 16) = v12;
        *(void *)(a3 - 24) = v10;
        *unint64_t v10 = 0;
        *(void *)(a3 - 8) = 0;
      }
      else
      {
        *(void *)(v7 - 24) = v12;
      }
      uint64_t v7 = *((void *)&v19 + 1) - 24;
      *((void *)&v19 + 1) -= 24;
      a3 = v8;
    }
    while (v8 != a5);
    uint64_t v14 = v19;
  }
  char v17 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::set<int>>,std::reverse_iterator<std::set<int>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v16);
  return v14;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::set<int>>,std::reverse_iterator<std::set<int>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::map<int,quasar::Expansion::SegmentTypeData>>,std::reverse_iterator<std::map<int,quasar::Expansion::SegmentTypeData>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void quasar::makeVoiceCommandActiveSetCompilation(quasar *this, EARVoiceCommandActiveSet *a2)
{
  uint64_t v2 = this;
  memset(v6, 0, sizeof(v6));
  int v7 = 1065353216;
  uint64_t v3 = [(quasar *)v2 suites];
  quasar::convertToVoiceCommandActiveSetCompilationSuiteSet(v3, (uint64_t)v6);

  [(quasar *)v2 resourceBaseURL];
  unint64_t v4 = [(id)objc_claimAutoreleasedReturnValue() path];
  std::string::basic_string[abi:ne180100]<0>(__p, v4);
  quasar::VoiceCommandActiveSetCompilation::makeVoiceCommandActiveSetCompilation((uint64_t)v6, (const void **)__p);
}

void sub_1B20F9CF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  std::__hash_table<quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::Suite::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::Suite>,std::allocator<quasar::VoiceCommandActiveSetCompilation::Suite>>::~__hash_table((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void quasar::convertToVoiceCommandActiveSetCompilationSuiteSet(void *a1, uint64_t a2)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  obuint64_t j = a1;
  uint64_t v2 = [obj countByEnumeratingWithState:&v42 objects:v48 count:16];
  if (v2)
  {
    uint64_t v19 = *(void *)v43;
    do
    {
      uint64_t v22 = 0;
      uint64_t v17 = v2;
      do
      {
        if (*(void *)v43 != v19) {
          objc_enumerationMutation(obj);
        }
        uint64_t v3 = *(void **)(*((void *)&v42 + 1) + 8 * v22);
        memset(v40, 0, sizeof(v40));
        int v41 = 1065353216;
        long long v36 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        uint64_t v20 = v3;
        objc_msgSend(v3, "commandSpecs", v17);
        id v23 = (id)objc_claimAutoreleasedReturnValue();
        uint64_t v4 = [v23 countByEnumeratingWithState:&v36 objects:v47 count:16];
        if (v4)
        {
          uint64_t v5 = *(void *)v37;
          do
          {
            for (uint64_t i = 0; i != v4; ++i)
            {
              if (*(void *)v37 != v5) {
                objc_enumerationMutation(v23);
              }
              int v7 = *(void **)(*((void *)&v36 + 1) + 8 * i);
              memset(v34, 0, sizeof(v34));
              int v35 = 1065353216;
              long long v30 = 0u;
              long long v31 = 0u;
              long long v32 = 0u;
              long long v33 = 0u;
              uint64_t v8 = [v7 fstRelativePaths];
              uint64_t v9 = [v8 countByEnumeratingWithState:&v30 objects:v46 count:16];
              if (v9)
              {
                uint64_t v10 = *(void *)v31;
                do
                {
                  for (uint64_t j = 0; j != v9; ++j)
                  {
                    if (*(void *)v31 != v10) {
                      objc_enumerationMutation(v8);
                    }
                    std::string::basic_string[abi:ne180100]<0>(__p, (char *)[*(id *)(*((void *)&v30 + 1) + 8 * j) UTF8String]);
                    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>((uint64_t)v34, (unsigned __int8 *)__p, (uint64_t)__p);
                    if (v25 < 0) {
                      operator delete(__p[0]);
                    }
                  }
                  uint64_t v9 = [v8 countByEnumeratingWithState:&v30 objects:v46 count:16];
                }
                while (v9);
              }

              id v12 = [v7 identifier];
              std::string::basic_string[abi:ne180100]<0>(__p, (char *)[v12 UTF8String]);
              int v13 = [v7 valence];
              if ((v13 - 1) >= 3) {
                int v14 = 0;
              }
              else {
                int v14 = v13;
              }
              int v26 = v14;
              id v15 = [v7 fstSymbol];
              std::string::basic_string[abi:ne180100]<0>(&v27, (char *)[v15 UTF8String]);
              std::unordered_set<std::string>::unordered_set((uint64_t)v29, (uint64_t)v34);

              std::__hash_table<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::allocator<quasar::VoiceCommandActiveSetCompilation::CommandSpec>>::__emplace_unique_key_args<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::CommandSpec const&>((uint64_t)v40, (uint64_t)__p, (long long *)__p);
              std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v29);
              if (v28 < 0) {
                operator delete(v27);
              }
              if (v25 < 0) {
                operator delete(__p[0]);
              }
              std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v34);
            }
            uint64_t v4 = [v23 countByEnumeratingWithState:&v36 objects:v47 count:16];
          }
          while (v4);
        }

        id v16 = [v20 identifier];
        std::string::basic_string[abi:ne180100]<0>(__p, (char *)[v16 UTF8String]);
        std::unordered_set<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::allocator<quasar::VoiceCommandActiveSetCompilation::CommandSpec>>::unordered_set((uint64_t)&v26, (uint64_t)v40);

        std::__hash_table<quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::Suite::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::Suite>,std::allocator<quasar::VoiceCommandActiveSetCompilation::Suite>>::__emplace_unique_key_args<quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::Suite const&>(a2, (unsigned __int8 *)__p, (long long *)__p);
        std::__hash_table<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::allocator<quasar::VoiceCommandActiveSetCompilation::CommandSpec>>::~__hash_table((uint64_t)&v26);
        if (v25 < 0) {
          operator delete(__p[0]);
        }
        std::__hash_table<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::allocator<quasar::VoiceCommandActiveSetCompilation::CommandSpec>>::~__hash_table((uint64_t)v40);
        ++v22;
      }
      while (v22 != v17);
      uint64_t v2 = [obj countByEnumeratingWithState:&v42 objects:v48 count:16];
    }
    while (v2);
  }
}

void sub_1B20FA0F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::Suite::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::Suite>,std::allocator<quasar::VoiceCommandActiveSetCompilation::Suite>>::__emplace_unique_key_args<quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::Suite const&>(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v24, (uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    id v12 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v14 == v8)
        {
          if (quasar::VoiceCommandActiveSetCompilation::Suite::operator==(i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::Suite::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::Suite>,std::allocator<quasar::VoiceCommandActiveSetCompilation::Suite>>::__construct_node_hash<quasar::VoiceCommandActiveSetCompilation::Suite const&>(a1, v8, a3, (uint64_t)v24);
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    *(void *)v24[0] = *v21;
    void *v21 = v24[0];
  }
  else
  {
    *(void *)v24[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v24[0])
    {
      unint64_t v22 = *(void *)(*(void *)v24[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v22 >= v9) {
          v22 %= v9;
        }
      }
      else
      {
        v22 &= v9 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v22) = v24[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v24[0];
  v24[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<quasar::VoiceCommandActiveSetCompilation::Suite,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<quasar::VoiceCommandActiveSetCompilation::Suite,void *>>>>::reset[abi:ne180100]((uint64_t)v24, 0);
  return i;
}

void sub_1B20FA470(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<quasar::VoiceCommandActiveSetCompilation::Suite,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<quasar::VoiceCommandActiveSetCompilation::Suite,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::Suite::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::Suite>,std::allocator<quasar::VoiceCommandActiveSetCompilation::Suite>>::__construct_node_hash<quasar::VoiceCommandActiveSetCompilation::Suite const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x50uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  uint64_t result = std::allocator<std::__hash_node<quasar::VoiceCommandActiveSetCompilation::Suite,void *>>::construct[abi:ne180100]<quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::Suite const&>(v7, (std::string *)(v8 + 16), a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1B20FA4E8(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<quasar::VoiceCommandActiveSetCompilation::Suite,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<quasar::VoiceCommandActiveSetCompilation::Suite,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

BOOL quasar::VoiceCommandActiveSetCompilation::Suite::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 0;
  }
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0) {
    return memcmp(*(const void **)a1, a2, *((void *)a1 + 1)) == 0;
  }
  if (!a1[23]) {
    return 1;
  }
  uint64_t v6 = v2 - 1;
  do
  {
    int v8 = *a1++;
    int v7 = v8;
    int v10 = *a2++;
    int v9 = v10;
    BOOL v12 = v6-- != 0;
    BOOL v13 = v7 == v9;
    BOOL v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

uint64_t std::allocator<std::__hash_node<quasar::VoiceCommandActiveSetCompilation::Suite,void *>>::construct[abi:ne180100]<quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::Suite const&>(int a1, std::string *this, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v5 = *a3;
    this->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  return std::unordered_set<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::allocator<quasar::VoiceCommandActiveSetCompilation::CommandSpec>>::unordered_set((uint64_t)&this[1], (uint64_t)a3 + 24);
}

void sub_1B20FA5FC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__hash_node<quasar::VoiceCommandActiveSetCompilation::Suite,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<quasar::VoiceCommandActiveSetCompilation::Suite,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<quasar::VoiceCommandActiveSetCompilation::Suite,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<quasar::VoiceCommandActiveSetCompilation::Suite,0>(uint64_t a1)
{
  std::__hash_table<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::allocator<quasar::VoiceCommandActiveSetCompilation::CommandSpec>>::~__hash_table(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t std::__hash_table<quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::Suite::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::Suite>,std::allocator<quasar::VoiceCommandActiveSetCompilation::Suite>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::Suite::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::Suite>,std::allocator<quasar::VoiceCommandActiveSetCompilation::Suite>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::Suite::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::Suite>,std::allocator<quasar::VoiceCommandActiveSetCompilation::Suite>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<quasar::VoiceCommandActiveSetCompilation::Suite,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

BOOL quasar::RecogAudioBuffer::audioAvailableOrAudioEnd(quasar::RecogAudioBuffer *this, int a2)
{
  return *(void *)(*((void *)this + 28) + 32) >= (unint64_t)a2 || *((unsigned char *)this + 273) != 0;
}

uint64_t quasar::RecogAudioBuffer::Read(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 96))(a1, a2, 0);
}

uint64_t non-virtual thunk to'quasar::RecogAudioBuffer::Read(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 - 16) + 96))();
}

uint64_t quasar::RecogAudioBuffer::audioAheadOfBuffer(quasar::RecogAudioBuffer *this, unsigned int a2)
{
  if (*((unsigned char *)this + 275))
  {
    if (quasar::gLogLevel >= 5)
    {
      long long v21 = 0u;
      long long v22 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      long long v13 = 0u;
      long long v14 = 0u;
      long long v11 = 0u;
      long long v12 = 0u;
      long long v9 = 0u;
      long long v10 = 0u;
      long long v7 = 0u;
      long long v8 = 0u;
      long long v6 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v6);
      uint64_t v2 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" is waiting for followers so letting them proceed", 49);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v6);
    }
  }
  else
  {
    int v3 = *((_DWORD *)this + 54);
    if (*((_DWORD *)this + 53) + v3 < a2)
    {
      if (*((_DWORD *)this + 55) != v3 || !*((unsigned char *)this + 273)) {
        return 0;
      }
      if (quasar::gLogLevel >= 2)
      {
        long long v21 = 0u;
        long long v22 = 0u;
        long long v19 = 0u;
        long long v20 = 0u;
        long long v17 = 0u;
        long long v18 = 0u;
        long long v15 = 0u;
        long long v16 = 0u;
        long long v13 = 0u;
        long long v14 = 0u;
        long long v11 = 0u;
        long long v12 = 0u;
        long long v9 = 0u;
        long long v10 = 0u;
        long long v7 = 0u;
        long long v8 = 0u;
        long long v6 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v6);
        uint64_t v4 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" is exhausted even though follower buffer is ahead of ", 54);
        std::ostream::operator<<();
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v6);
      }
    }
  }
  return 1;
}

void sub_1B20FA900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void quasar::RecogAudioBuffer::setLeadBuffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  long long v6 = *(std::__shared_weak_count **)(a1 + 264);
  *(void *)(a1 + 256) = v5;
  *(void *)(a1 + 264) = v4;
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  if (*a2 && (*(_DWORD *)(a1 + 216) || *(_DWORD *)(a1 + 220)))
  {
    memset(v7, 0, sizeof(v7));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, "leadBuffer must not be changed to another buffer after audio is started");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v7);
  }
}

BOOL quasar::RecogAudioBuffer::Read(uint64_t a1, uint64_t a2, int a3)
{
  long long v6 = *(std::__shared_weak_count **)(a1 + 264);
  if (v6)
  {
    long long v7 = std::__shared_weak_count::lock(v6);
    if (v7)
    {
      long long v8 = v7;
      uint64_t v9 = *(void *)(a1 + 256);
      if (v9)
      {
        std::mutex::lock((std::mutex *)(v9 + 24));
        if (*(uint64_t *)(a1 + 160) < 1)
        {
          if (*(unsigned char *)(v9 + 275))
          {
LABEL_15:
            if (quasar::gLogLevel >= 5)
            {
              long long v55 = 0u;
              long long v56 = 0u;
              long long v53 = 0u;
              long long v54 = 0u;
              long long v51 = 0u;
              long long v52 = 0u;
              long long v49 = 0u;
              long long v50 = 0u;
              long long v47 = 0u;
              long long v48 = 0u;
              long long v46 = 0u;
              long long v44 = 0u;
              long long v45 = 0u;
              long long v42 = 0u;
              long long v43 = 0u;
              long long v40 = 0u;
              long long v41 = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v40);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v40, (uint64_t)"Leader is waiting for follower, not waiting", 43);
LABEL_19:
              quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v40);
            }
          }
          else
          {
            while (1)
            {
              std::mutex::lock((std::mutex *)(a1 + 24));
              unsigned int v11 = *(_DWORD *)(a1 + 216);
              std::mutex::unlock((std::mutex *)(a1 + 24));
              if (quasar::RecogAudioBuffer::audioAheadOfBuffer((quasar::RecogAudioBuffer *)v9, v11)) {
                break;
              }
              std::condition_variable_any::wait<std::mutex>(v9 + 88, (std::mutex *)(v9 + 24));
              if (*(unsigned char *)(v9 + 275)) {
                goto LABEL_15;
              }
            }
          }
        }
        else
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v39 = std::chrono::steady_clock::now().__d_.__rep_ + 1000000 * *(void *)(a1 + 160);
          do
          {
            if (*(unsigned char *)(v9 + 275))
            {
              if (quasar::gLogLevel < 5) {
                goto LABEL_20;
              }
              goto LABEL_18;
            }
            std::mutex::lock((std::mutex *)(a1 + 24));
            unsigned int v10 = *(_DWORD *)(a1 + 216);
            std::mutex::unlock((std::mutex *)(a1 + 24));
            if (quasar::RecogAudioBuffer::audioAheadOfBuffer((quasar::RecogAudioBuffer *)v9, v10)) {
              goto LABEL_20;
            }
          }
          while (!std::condition_variable_any::wait_until<std::mutex,std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>(v9 + 88, (std::mutex *)(v9 + 24), &v39));
          if (*(unsigned char *)(v9 + 275))
          {
            if (quasar::gLogLevel < 5) {
              goto LABEL_20;
            }
LABEL_18:
            long long v55 = 0u;
            long long v56 = 0u;
            long long v53 = 0u;
            long long v54 = 0u;
            long long v51 = 0u;
            long long v52 = 0u;
            long long v49 = 0u;
            long long v50 = 0u;
            long long v47 = 0u;
            long long v48 = 0u;
            long long v46 = 0u;
            long long v44 = 0u;
            long long v45 = 0u;
            long long v42 = 0u;
            long long v43 = 0u;
            long long v40 = 0u;
            long long v41 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v40);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v40, (uint64_t)"Leader is waiting for follower, not waiting", 43);
            goto LABEL_19;
          }
          std::mutex::lock((std::mutex *)(a1 + 24));
          unsigned int v36 = *(_DWORD *)(a1 + 216);
          std::mutex::unlock((std::mutex *)(a1 + 24));
          quasar::RecogAudioBuffer::audioAheadOfBuffer((quasar::RecogAudioBuffer *)v9, v36);
        }
LABEL_20:
        std::mutex::unlock((std::mutex *)(v9 + 24));
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
  long long v12 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if (*(_DWORD *)(a1 + 216) >= *(_DWORD *)(a1 + 220) && *(unsigned char *)(a1 + 273))
  {
    kaldi::Vector<float>::Resize((void **)a2, 0, 0);
    if (quasar::gLogLevel >= 5)
    {
      long long v55 = 0u;
      long long v56 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v46 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v40);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v40, (uint64_t)"No audio left, and endOfAudio set. Returning false.", 51);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v40);
    }
    BOOL v14 = 0;
  }
  else
  {
    if (*(_DWORD *)(a2 + 8) <= a3 || a3 <= 0) {
      a3 = *(_DWORD *)(a2 + 8);
    }
    double v16 = 0.0;
    if (*(void *)(*(void *)(a1 + 224) + 32) >= (unint64_t)a3 || *(unsigned char *)(a1 + 273))
    {
      char v17 = 1;
    }
    else
    {
      int v35 = *(double **)(a1 + 192);
      char v17 = 0;
      double v16 = kaldi::Timer::GetSeconds((kaldi::Timer *)5, v13) - *v35;
    }
    if (!*(void *)(a1 + 160) && quasar::gLogLevel >= 5)
    {
      long long v55 = 0u;
      long long v56 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v46 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v40);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v40, (uint64_t)"Waiting for more audio or endOfAudio", 36);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v40);
    }
    long long v18 = (std::condition_variable *)(a1 + 88);
    v37[0] = quasar::RecogAudioBuffer::audioAvailableOrAudioEnd;
    v37[1] = 0;
    v37[2] = a1;
    int v38 = a3;
    if ((quasar::RecogAudioBuffer::waitWithReadTimeOut<std::condition_variable_any,std::__bind<BOOL (quasar::RecogAudioBuffer::*)(int),quasar::RecogAudioBuffer*,unsigned int &>>(a1, a1 + 88, (std::mutex *)(a1 + 24), (uint64_t)v37) & 1) == 0)*(unsigned char *)(a1 + 273) = 1; {
    unsigned int v19 = *(_DWORD *)(*(void *)(a1 + 224) + 32);
    }
    unsigned int v20 = *(_DWORD *)(a2 + 8);
    if (v20 >= v19) {
      uint64_t v21 = v19;
    }
    else {
      uint64_t v21 = v20;
    }
    kaldi::Vector<float>::Resize((void **)a2, v21, 0);
    if (v21)
    {
      for (uint64_t i = 0; i != v21; ++i)
      {
        __n128 v24 = *(void **)(a1 + 224);
        uint64_t v25 = v24[1];
        uint64_t v26 = v24[2];
        if (v25 - v26 <= 0) {
          uint64_t v27 = -((v25 - *v24) >> 2);
        }
        else {
          uint64_t v27 = 0;
        }
        *(_DWORD *)(*(void *)a2 + 4 * i) = *(_DWORD *)(v26 + 4 * v27);
        uint64_t v28 = v26 + 4;
        v24[2] = v28;
        if (v28 == v25) {
          v24[2] = *v24;
        }
        --v24[4];
      }
      if (quasar::gLogLevel > 4)
      {
        long long v55 = 0u;
        long long v56 = 0u;
        long long v53 = 0u;
        long long v54 = 0u;
        long long v51 = 0u;
        long long v52 = 0u;
        long long v49 = 0u;
        long long v50 = 0u;
        long long v47 = 0u;
        long long v48 = 0u;
        long long v46 = 0u;
        long long v44 = 0u;
        long long v45 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v40);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v40, (uint64_t)"Copied ", 7);
        long long v29 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)" samples (", 10);
        long long v30 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"-", 1);
        long long v31 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)") into data", 11);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v40);
      }
      *(_DWORD *)(a1 + 216) += v21;
    }
    if ((v17 & 1) == 0)
    {
      long long v32 = *(double **)(a1 + 192);
      *(double *)(a1 + 312) = *(double *)(a1 + 312) + kaldi::Timer::GetSeconds((kaldi::Timer *)5, v22) - *v32 - v16;
    }
    if (*(unsigned char *)(a1 + 273)) {
      BOOL v14 = *(_DWORD *)(a1 + 216) < *(_DWORD *)(a1 + 220);
    }
    else {
      BOOL v14 = 1;
    }
    long long v33 = *(std::mutex **)(a1 + 136);
    std::mutex::lock(v33);
    std::mutex::unlock(v33);
    std::condition_variable::notify_all(v18);
  }
  std::mutex::unlock(v12);
  return v14;
}

void sub_1B20FAFB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)va);
  std::mutex::unlock(v8);
  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  _Unwind_Resume(a1);
}

uint64_t quasar::RecogAudioBuffer::waitWithReadTimeOut<std::condition_variable_any,std::__bind<BOOL (quasar::RecogAudioBuffer::*)(int),quasar::RecogAudioBuffer*,unsigned int &>>(uint64_t a1, uint64_t a2, std::mutex *a3, uint64_t a4)
{
  long long v6 = *(uint64_t (**)(uint64_t, uint64_t))a4;
  uint64_t v7 = *(void *)(a4 + 8);
  uint64_t v8 = *(void *)(a4 + 16);
  uint64_t v9 = *(unsigned int *)(a4 + 24);
  if (*(uint64_t *)(a1 + 160) < 1)
  {
    if (v7) {
      goto LABEL_12;
    }
LABEL_11:
    for (char i = v6(v8 + (v7 >> 1), v9);
          (i & 1) == 0;
          char i = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v8 + (v7 >> 1)) + v6))(v8 + (v7 >> 1), v9))
    {
      std::condition_variable_any::wait<std::mutex>(a2, a3);
      if ((v7 & 1) == 0) {
        goto LABEL_11;
      }
LABEL_12:
      ;
    }
  }
  else
  {
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v14 = std::chrono::steady_clock::now().__d_.__rep_ + 1000000 * *(void *)(a1 + 160);
    unsigned int v10 = (void *)(v8 + (v7 >> 1));
    while (1)
    {
      char v11 = (v7 & 1) != 0
          ? (*(uint64_t (**)(void *, uint64_t))(*v10 + v6))(v10, v9)
          : v6((uint64_t)v10, v9);
      if (v11) {
        break;
      }
      if (std::condition_variable_any::wait_until<std::mutex,std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>(a2, a3, &v14))
      {
        if (v7) {
          long long v6 = *(uint64_t (**)(uint64_t, uint64_t))(*v10 + v6);
        }
        return v6((uint64_t)v10, v9);
      }
    }
  }
  return 1;
}

BOOL non-virtual thunk to'quasar::RecogAudioBuffer::Read(uint64_t a1, uint64_t a2, int a3)
{
  return quasar::RecogAudioBuffer::Read(a1 - 16, a2, a3);
}

float quasar::RecogAudioBuffer::audioLeftSeconds(quasar::RecogAudioBuffer *this)
{
  uint64_t v2 = (std::mutex *)((char *)this + 24);
  std::mutex::lock((std::mutex *)((char *)this + 24));
  LODWORD(v3) = *((_DWORD *)this + 52);
  float v4 = (double)*(unint64_t *)(*((void *)this + 28) + 32) / (double)v3;
  std::mutex::unlock(v2);
  return v4;
}

float quasar::RecogAudioBuffer::audioReadSeconds(quasar::RecogAudioBuffer *this)
{
  uint64_t v2 = (std::mutex *)((char *)this + 24);
  std::mutex::lock((std::mutex *)((char *)this + 24));
  LODWORD(v3) = *((_DWORD *)this + 54);
  LODWORD(v4) = *((_DWORD *)this + 52);
  float v5 = (double)v3 / (double)v4;
  std::mutex::unlock(v2);
  return v5;
}

BOOL quasar::RecogAudioBuffer::HasReadAllFrames(quasar::RecogAudioBuffer *this)
{
  return (*(float (**)(quasar::RecogAudioBuffer *))(*(void *)this + 64))(this) <= 0.0;
}

BOOL non-virtual thunk to'quasar::RecogAudioBuffer::HasReadAllFrames(quasar::RecogAudioBuffer *this)
{
  return (*(float (**)(void))(*((void *)this - 2) + 64))() <= 0.0;
}

uint64_t quasar::RecogAudioBuffer::addAudio(quasar::RecogAudioBuffer *this, float *a2, unsigned int a3)
{
  long long v6 = (std::mutex *)((char *)this + 24);
  std::mutex::lock((std::mutex *)((char *)this + 24));
  uint64_t v7 = (double *)*((void *)this + 24);
  double v9 = kaldi::Timer::GetSeconds((kaldi::Timer *)5, v8) - *v7;
  char v11 = (double *)*((void *)this + 36);
  unint64_t v10 = *((void *)this + 37);
  if ((unint64_t)v11 >= v10)
  {
    clockid_t v13 = (double *)*((void *)this + 35);
    uint64_t v14 = ((char *)v11 - (char *)v13) >> 4;
    unint64_t v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v16 = v10 - (void)v13;
    if (v16 >> 3 > v15) {
      unint64_t v15 = v16 >> 3;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v15;
    }
    if (v17)
    {
      long long v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)this + 296, v17);
      clockid_t v13 = (double *)*((void *)this + 35);
      char v11 = (double *)*((void *)this + 36);
    }
    else
    {
      long long v18 = 0;
    }
    unsigned int v19 = &v18[16 * v14];
    unsigned int v20 = &v18[16 * v17];
    *(double *)unsigned int v19 = v9;
    *((void *)v19 + 1) = a3;
    long long v12 = (double *)(v19 + 16);
    if (v11 != v13)
    {
      do
      {
        *((_OWORD *)v19 - 1) = *((_OWORD *)v11 - 1);
        v19 -= 16;
        v11 -= 2;
      }
      while (v11 != v13);
      clockid_t v13 = (double *)*((void *)this + 35);
    }
    *((void *)this + 35) = v19;
    *((void *)this + 36) = v12;
    *((void *)this + 37) = v20;
    if (v13) {
      operator delete(v13);
    }
  }
  else
  {
    *char v11 = v9;
    *((void *)v11 + 1) = a3;
    long long v12 = v11 + 2;
  }
  *((void *)this + 36) = v12;
  if (*((unsigned char *)this + 274))
  {
    uint64_t v21 = 2;
    goto LABEL_23;
  }
  if (*((unsigned char *)this + 273))
  {
    uint64_t v21 = 1;
    goto LABEL_23;
  }
  if (*((unsigned char *)this + 272))
  {
LABEL_22:
    uint64_t v21 = 3;
    goto LABEL_23;
  }
  unsigned int v23 = *((_DWORD *)this + 38);
  if ((v23 & 0x80000000) == 0 && *((_DWORD *)this + 55) >= v23)
  {
    *((unsigned char *)this + 272) = 1;
    if (quasar::gLogLevel >= 2)
    {
      long long v73 = 0u;
      long long v74 = 0u;
      long long v71 = 0u;
      long long v72 = 0u;
      long long v69 = 0u;
      long long v70 = 0u;
      long long v67 = 0u;
      long long v68 = 0u;
      long long v65 = 0u;
      long long v66 = 0u;
      long long v63 = 0u;
      long long v64 = 0u;
      long long v61 = 0u;
      long long v62 = 0u;
      long long v59 = 0u;
      long long v60 = 0u;
      long long v58 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v58);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v58, (uint64_t)"Maximum buffer length ", 22);
      long long v56 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)" has been reached. All additional audio will be dropped.", 56);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v58);
    }
    goto LABEL_22;
  }
  unint64_t v24 = *((unsigned int *)this + 39);
  if ((v24 & 0x80000000) == 0 && *(void *)(*((void *)this + 28) + 32) >= v24)
  {
    *((unsigned char *)this + 272) = 1;
    if (quasar::gLogLevel >= 2)
    {
      long long v73 = 0u;
      long long v74 = 0u;
      long long v71 = 0u;
      long long v72 = 0u;
      long long v69 = 0u;
      long long v70 = 0u;
      long long v67 = 0u;
      long long v68 = 0u;
      long long v65 = 0u;
      long long v66 = 0u;
      long long v63 = 0u;
      long long v64 = 0u;
      long long v61 = 0u;
      long long v62 = 0u;
      long long v59 = 0u;
      long long v60 = 0u;
      long long v58 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v58);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v58, (uint64_t)"Maximum ring size ", 18);
      uint64_t v57 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)" has been reached. All additional audio will be dropped.", 56);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v58);
    }
    goto LABEL_22;
  }
  int v25 = a3;
  if ((v23 & 0x80000000) == 0)
  {
    int v26 = v23 - *((_DWORD *)this + 55);
    if (v26 >= (int)a3) {
      int v25 = a3;
    }
    else {
      int v25 = v26;
    }
  }
  if ((v24 & 0x80000000) == 0)
  {
    int v27 = v24 - *(_DWORD *)(*((void *)this + 28) + 32);
    if (v27 < v25) {
      int v25 = v27;
    }
  }
  if (v25 < a3 && quasar::gLogLevel >= 4)
  {
    long long v73 = 0u;
    long long v74 = 0u;
    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    long long v67 = 0u;
    long long v68 = 0u;
    long long v65 = 0u;
    long long v66 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    long long v58 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v58);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v58, (uint64_t)"Clipped audio length ", 21);
    uint64_t v28 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" to ", 4);
    std::ostream::operator<<();
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v58);
  }
  uint64_t v29 = *((void *)this + 28);
  uint64_t v30 = *(void *)(v29 + 8) - *(void *)v29;
  unint64_t v31 = *(void *)(v29 + 32) + v25;
  if (v31 > v30 >> 2)
  {
    unint64_t v32 = v30 >> 1;
    if (v32 <= v31) {
      unint64_t v32 = *(void *)(v29 + 32) + v25;
    }
    unint64_t v33 = *((unsigned int *)this + 39);
    if (v32 >= v33) {
      unint64_t v34 = *((unsigned int *)this + 39);
    }
    else {
      unint64_t v34 = v32;
    }
    if ((v33 & 0x80000000) == 0) {
      unint64_t v35 = v34;
    }
    else {
      unint64_t v35 = v32;
    }
    boost::circular_buffer<float,std::allocator<float>>::set_capacity((char **)v29, v35);
  }
  if (*((unsigned char *)this + 320))
  {
    unsigned int v36 = (void **)((char *)this + 232);
    unsigned int v37 = (float)((float)*((unsigned int *)this + 52) * 5.0);
    int v38 = (float *)*((void *)this + 30);
    unint64_t v39 = ((unint64_t)v38 - *((void *)this + 29)) >> 2;
    if (v37 > v39)
    {
      unint64_t v40 = v25 + (int)v39 <= v37 ? v25 : v37 - v39;
      if (v40)
      {
        unint64_t v41 = 0;
        long long v42 = (void *)((char *)this + 248);
        do
        {
          if ((unint64_t)v38 >= *v42)
          {
            long long v44 = (float *)*v36;
            uint64_t v45 = ((char *)v38 - (unsigned char *)*v36) >> 2;
            unint64_t v46 = v45 + 1;
            if ((unint64_t)(v45 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v47 = *v42 - (void)v44;
            if (v47 >> 1 > v46) {
              unint64_t v46 = v47 >> 1;
            }
            if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v48 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v48 = v46;
            }
            if (v48)
            {
              long long v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this + 248, v48);
              long long v44 = (float *)*((void *)this + 29);
              int v38 = (float *)*((void *)this + 30);
            }
            else
            {
              long long v49 = 0;
            }
            long long v50 = (float *)&v49[4 * v45];
            float *v50 = a2[v41];
            long long v43 = v50 + 1;
            while (v38 != v44)
            {
              int v51 = *((_DWORD *)v38-- - 1);
              *((_DWORD *)v50-- - 1) = v51;
            }
            *((void *)this + 29) = v50;
            *((void *)this + 30) = v43;
            *((void *)this + 31) = &v49[4 * v48];
            if (v44) {
              operator delete(v44);
            }
          }
          else
          {
            float *v38 = a2[v41];
            long long v43 = v38 + 1;
          }
          *((void *)this + 30) = v43;
          ++v41;
          int v38 = v43;
        }
        while (v41 < v40);
      }
    }
  }
  if (v25 >= 1)
  {
    uint64_t v52 = v25;
    do
    {
      boost::circular_buffer<float,std::allocator<float>>::push_back_impl<float const&>(*((void **)this + 28), a2++);
      --v52;
    }
    while (v52);
  }
  if (quasar::gLogLevel > 4)
  {
    long long v73 = 0u;
    long long v74 = 0u;
    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    long long v67 = 0u;
    long long v68 = 0u;
    long long v65 = 0u;
    long long v66 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    long long v58 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v58);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v58, (uint64_t)"Added ", 6);
    long long v53 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)" samples: ", 10);
    long long v54 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"-", 1);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v58);
  }
  *((_DWORD *)this + 55) += v25;
  long long v55 = (std::mutex *)*((void *)this + 17);
  std::mutex::lock(v55);
  std::mutex::unlock(v55);
  std::condition_variable::notify_all((std::condition_variable *)((char *)this + 88));
  uint64_t v21 = 0;
LABEL_23:
  std::mutex::unlock(v6);
  return v21;
}

void sub_1B20FB8BC(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void boost::circular_buffer<float,std::allocator<float>>::set_capacity(char **a1, unint64_t a2)
{
  if (a2 != (a1[1] - *a1) >> 2)
  {
    unint64_t v4 = (char *)boost::circular_buffer<float,std::allocator<float>>::allocate((uint64_t)a1, a2);
    unint64_t v5 = (unint64_t)a1[4];
    if (v5) {
      long long v6 = a1[2];
    }
    else {
      long long v6 = 0;
    }
    if (v5 >= a2) {
      uint64_t v7 = a2;
    }
    else {
      uint64_t v7 = (uint64_t)a1[4];
    }
    v15[0] = a1;
    v15[1] = v6;
    clockid_t v8 = (char *)boost::cb_details::iterator<boost::circular_buffer<float,std::allocator<float>>,boost::cb_details::nonconst_traits<std::allocator<float>>>::operator+=(v15, v7)[1];
    double v9 = v4;
    if (v6 != v8)
    {
      unint64_t v10 = a1[1];
      char v11 = a1[3];
      double v9 = v4;
      do
      {
        int v12 = *(_DWORD *)v6;
        v6 += 4;
        *(_DWORD *)double v9 = v12;
        if (v6 == v10) {
          long long v6 = *a1;
        }
        if (v6 == v11) {
          long long v6 = 0;
        }
        v9 += 4;
      }
      while (v6 != v8);
    }
    boost::circular_buffer<float,std::allocator<float>>::destroy((uint64_t)a1);
    clockid_t v13 = &v4[4 * a2];
    *a1 = v4;
    a1[1] = v13;
    if (v13 == v9) {
      uint64_t v14 = v4;
    }
    else {
      uint64_t v14 = v9;
    }
    a1[2] = v4;
    a1[3] = v14;
    a1[4] = (char *)((v9 - v4) >> 2);
  }
}

void sub_1B20FBA20(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    operator delete(v1);
  }
  __cxa_rethrow();
}

void sub_1B20FBA38(_Unwind_Exception *a1)
{
}

uint64_t quasar::RecogAudioBuffer::addAudio(quasar::RecogAudioBuffer *this, const __int16 *a2, uint64_t a3)
{
  memset(v10, 0, sizeof(v10));
  kaldi::Vector<float>::Resize(v10, a3, 0);
  long long v6 = (float *)v10[0];
  if (a3)
  {
    uint64_t v7 = 0;
    do
    {
      v6[(int)v7] = (float)a2[v7];
      ++v7;
    }
    while (a3 != v7);
  }
  uint64_t v8 = (*(uint64_t (**)(quasar::RecogAudioBuffer *, float *, uint64_t))(*(void *)this + 24))(this, v6, a3);
  kaldi::Vector<float>::Destroy((uint64_t)v10);
  return v8;
}

void sub_1B20FBB04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::RecogAudioBuffer::endAudio(quasar::RecogAudioBuffer *this)
{
  uint64_t v2 = (std::mutex *)((char *)this + 24);
  std::mutex::lock((std::mutex *)((char *)this + 24));
  quasar::RecogAudioBuffer::endAudioWithoutLock(this);
  std::mutex::unlock(v2);
}

void sub_1B20FBB64(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void quasar::RecogAudioBuffer::endAudioWithoutLock(quasar::RecogAudioBuffer *this)
{
  if (!*((unsigned char *)this + 273))
  {
    if (quasar::gLogLevel >= 5)
    {
      long long v19 = 0u;
      memset(v20, 0, 144);
      long long v17 = 0u;
      long long v18 = 0u;
      memset(v16, 0, sizeof(v16));
      long long v15 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v15);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v15, (uint64_t)"Signalling end of audio...", 26);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v15);
    }
    *((unsigned char *)this + 273) = 1;
    uint64_t v2 = (std::mutex *)*((void *)this + 17);
    std::mutex::lock(v2);
    std::mutex::unlock(v2);
    std::condition_variable::notify_all((std::condition_variable *)((char *)this + 88));
    unint64_t v3 = (double *)*((void *)this + 24);
    *((double *)this + 38) = kaldi::Timer::GetSeconds((kaldi::Timer *)5, v4) - *v3;
    if (quasar::gLogLevel >= 5)
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v15);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"PacketsReceived=\"", 17);
      for (uint64_t i = *((void *)this + 35); i != *((void *)this + 36); i += 16)
      {
        long long v6 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
        uint64_t v7 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" ", 1);
      }
      if (quasar::gLogLevel > 4)
      {
        memset(v14, 0, sizeof(v14));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
        std::stringbuf::str();
        if ((v13 & 0x80u) == 0) {
          uint64_t v8 = __p;
        }
        else {
          uint64_t v8 = (void **)__p[0];
        }
        if ((v13 & 0x80u) == 0) {
          uint64_t v9 = v13;
        }
        else {
          uint64_t v9 = (uint64_t)__p[1];
        }
        unint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v8, v9);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"\"", 1);
        if ((char)v13 < 0) {
          operator delete(__p[0]);
        }
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v14);
      }
      *(void *)&long long v15 = *MEMORY[0x1E4FBA408];
      uint64_t v11 = *(void *)(MEMORY[0x1E4FBA408] + 72);
      *(void *)((char *)&v16[-2] + *(void *)(v15 - 2std::__tree<int>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
      v16[0] = v11;
      v16[1] = MEMORY[0x1E4FBA470] + 16;
      if (SHIBYTE(v18) < 0) {
        operator delete(*((void **)&v17 + 1));
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1B3EA8520](v20);
    }
  }
}

void sub_1B20FBE90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
}

void quasar::RecogAudioBuffer::endAudioToLeadBuffer(quasar::RecogAudioBuffer *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 33);
  if (v2)
  {
    unint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      clockid_t v4 = v3;
      uint64_t v5 = *((void *)this + 32);
      if (v5)
      {
        long long v6 = (std::mutex *)(v5 + 24);
        std::mutex::lock((std::mutex *)(v5 + 24));
        unsigned int v7 = *(_DWORD *)(v5 + 216);
        unsigned int v8 = *(_DWORD *)(v5 + 220);
        std::mutex::unlock(v6);
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
        std::mutex::lock((std::mutex *)((char *)this + 24));
        *((_DWORD *)this + 55) = v8;
        if (*((_DWORD *)this + 54) >= v7)
        {
          if (quasar::gLogLevel >= 5)
          {
            long long v29 = 0u;
            long long v30 = 0u;
            long long v27 = 0u;
            long long v28 = 0u;
            long long v25 = 0u;
            long long v26 = 0u;
            long long v23 = 0u;
            long long v24 = 0u;
            long long v21 = 0u;
            long long v22 = 0u;
            long long v19 = 0u;
            long long v20 = 0u;
            long long v17 = 0u;
            long long v18 = 0u;
            long long v15 = 0u;
            long long v16 = 0u;
            long long v14 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v14);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Clipping audio buffer like other at ", 36);
            int v12 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" from ", 6);
            std::ostream::operator<<();
            quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v14);
            unsigned int v8 = *((_DWORD *)this + 55);
          }
          *((_DWORD *)this + 54) = v8;
        }
        else
        {
          if (quasar::gLogLevel >= 5)
          {
            long long v29 = 0u;
            long long v30 = 0u;
            long long v27 = 0u;
            long long v28 = 0u;
            long long v25 = 0u;
            long long v26 = 0u;
            long long v23 = 0u;
            long long v24 = 0u;
            long long v21 = 0u;
            long long v22 = 0u;
            long long v19 = 0u;
            long long v20 = 0u;
            long long v17 = 0u;
            long long v18 = 0u;
            long long v15 = 0u;
            long long v16 = 0u;
            long long v14 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v14);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Clipping audio buffer like other from ", 38);
            uint64_t v9 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" to ", 4);
            unint64_t v10 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"; it was ", 9);
            std::ostream::operator<<();
            quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v14);
            unsigned int v8 = *((_DWORD *)this + 55);
          }
          if (v7 >= v8) {
            unsigned int v11 = v8;
          }
          else {
            unsigned int v11 = v7;
          }
          *((_DWORD *)this + 55) = v11;
        }
        unsigned __int8 v13 = (std::mutex *)*((void *)this + 17);
        std::mutex::lock(v13);
        std::mutex::unlock(v13);
        std::condition_variable::notify_all((std::condition_variable *)((char *)this + 88));
        quasar::RecogAudioBuffer::endAudioWithoutLock(this);
        std::mutex::unlock((std::mutex *)((char *)this + 24));
      }
      else
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v3);
      }
    }
  }
}

void sub_1B20FC0FC(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void quasar::RecogAudioBuffer::synchronizeToLeadBuffer(quasar::RecogAudioBuffer *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 33);
  if (v2 && std::__shared_weak_count::lock(v2))
  {
    uint64_t v3 = *((void *)this + 32);
    if (v3)
    {
      std::mutex::lock((std::mutex *)((char *)this + 24));
      std::mutex::lock((std::mutex *)(v3 + 24));
      *((void *)this + 27) = *(void *)(v3 + 216);
      operator new();
    }
  }
  memset(v4, 0, sizeof(v4));
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Cannot synchronize when lead buffer has been deallocated", 56);
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v4);
}

void sub_1B20FC2F8(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v4, 0x1080C4082DC8E96);
  std::mutex::unlock(v3);
  std::mutex::unlock(v2);
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void quasar::RecogAudioBuffer::setWaitingForFollowers(quasar::RecogAudioBuffer *this, int a2)
{
  uint64_t v4 = (std::mutex *)((char *)this + 24);
  std::mutex::lock((std::mutex *)((char *)this + 24));
  if (*((unsigned __int8 *)this + 275) != a2)
  {
    *((unsigned char *)this + 275) = a2;
    uint64_t v5 = (std::mutex *)*((void *)this + 17);
    std::mutex::lock(v5);
    std::mutex::unlock(v5);
    std::condition_variable::notify_all((std::condition_variable *)((char *)this + 88));
  }
  std::mutex::unlock(v4);
}

void quasar::RecogAudioBuffer::triggerServerSideEndPointer(quasar::RecogAudioBuffer *this)
{
  uint64_t v2 = (std::mutex *)((char *)this + 24);
  std::mutex::lock((std::mutex *)((char *)this + 24));
  if (*((unsigned char *)this + 8) && !*((unsigned char *)this + 274))
  {
    quasar::RecogAudioBuffer::endAudioWithoutLock(this);
    *((unsigned char *)this + 274) = 1;
    *((_DWORD *)this + 54) = *((_DWORD *)this + 55);
    if (quasar::gLogLevel >= 5)
    {
      memset(v4, 0, sizeof(v4));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Server endpoint triggered so moving buffer marker to end of buffer.", 67);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v4);
    }
    uint64_t v3 = (std::mutex *)*((void *)this + 17);
    std::mutex::lock(v3);
    std::mutex::unlock(v3);
    std::condition_variable::notify_all((std::condition_variable *)((char *)this + 88));
  }
  std::mutex::unlock(v2);
}

void sub_1B20FC4C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a9);
  std::mutex::unlock(v9);
  _Unwind_Resume(a1);
}

void quasar::RecogAudioBuffer::stopAudioDecoding(quasar::RecogAudioBuffer *this)
{
  uint64_t v2 = (std::mutex *)((char *)this + 24);
  std::mutex::lock((std::mutex *)((char *)this + 24));
  quasar::RecogAudioBuffer::endAudioWithoutLock(this);
  *((unsigned char *)this + 274) = 1;
  *((_DWORD *)this + 54) = *((_DWORD *)this + 55);
  if (quasar::gLogLevel >= 5)
  {
    memset(v4, 0, sizeof(v4));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Stop Audio Decoding called, so moving buffer marker to end of buffer.", 69);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v4);
  }
  uint64_t v3 = (std::mutex *)*((void *)this + 17);
  std::mutex::lock(v3);
  std::mutex::unlock(v3);
  std::condition_variable::notify_all((std::condition_variable *)((char *)this + 88));
  std::mutex::unlock(v2);
}

void sub_1B20FC5D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a9);
  std::mutex::unlock(v9);
  _Unwind_Resume(a1);
}

void quasar::RecogAudioBuffer::setServerSideEndPointing(quasar::RecogAudioBuffer *this, char a2)
{
  uint64_t v4 = (std::mutex *)((char *)this + 24);
  std::mutex::lock((std::mutex *)((char *)this + 24));
  *((unsigned char *)this + 8) = a2;
  std::mutex::unlock(v4);
}

void quasar::RecogAudioBuffer::stats(quasar::RecogAudioBuffer *this, double *a2, double *a3)
{
  long long v6 = (std::mutex *)((char *)this + 24);
  std::mutex::lock((std::mutex *)((char *)this + 24));
  *a2 = *((double *)this + 38);
  *a3 = *((double *)this + 39);
  std::mutex::unlock(v6);
}

uint64_t quasar::RecogAudioBuffer::serverSideEndPointingEnabled(quasar::RecogAudioBuffer *this)
{
  uint64_t v2 = (std::mutex *)((char *)this + 24);
  std::mutex::lock((std::mutex *)((char *)this + 24));
  uint64_t v3 = *((unsigned __int8 *)this + 8);
  std::mutex::unlock(v2);
  return v3;
}

uint64_t quasar::RecogAudioBuffer::hasServerEndpointed(quasar::RecogAudioBuffer *this)
{
  return *((unsigned __int8 *)this + 274);
}

void quasar::RecogAudioBuffer::getRawAudioCache(quasar::RecogAudioBuffer *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (std::mutex *)((char *)this + 24);
  std::mutex::lock((std::mutex *)((char *)this + 24));
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a2, *((const void **)this + 29), *((void *)this + 30), (uint64_t)(*((void *)this + 30) - *((void *)this + 29)) >> 2);
  std::mutex::unlock(v4);
}

void sub_1B20FC758(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void quasar::RecogAudioBuffer::emptyAudioBuffer(quasar::RecogAudioBuffer *this)
{
  uint64_t v2 = (std::mutex *)((char *)this + 24);
  std::mutex::lock((std::mutex *)((char *)this + 24));
  if (quasar::gLogLevel >= 5)
  {
    memset(v9, 0, sizeof(v9));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"emptyAudioBuffer: ring=", 23);
    uint64_t v3 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" bufferPos=", 11);
    uint64_t v4 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" bufferLen=", 11);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v9);
  }
  uint64_t v5 = (void *)*((void *)this + 28);
  uint64_t v6 = v5[4];
  uint64_t v8 = v5[1];
  uint64_t v7 = v5[2];
  if (v6 >= (v8 - v7) >> 2) {
    v6 -= (v8 - *v5) >> 2;
  }
  void v5[2] = v7 + 4 * v6;
  v5[4] = 0;
  *((_DWORD *)this + 54) = *((_DWORD *)this + 55);
  std::mutex::unlock(v2);
}

void sub_1B20FC884(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void quasar::RecogAudioBuffer::startCountingAudioDuration(quasar::RecogAudioBuffer *this)
{
  uint64_t v2 = (std::mutex *)((char *)this + 24);
  std::mutex::lock((std::mutex *)((char *)this + 24));
  *((_DWORD *)this + 81) = *((_DWORD *)this + 55);
  std::mutex::unlock(v2);
}

float quasar::RecogAudioBuffer::stopCountingAudioDuration(quasar::RecogAudioBuffer *this)
{
  uint64_t v2 = (std::mutex *)((char *)this + 24);
  std::mutex::lock((std::mutex *)((char *)this + 24));
  float v4 = 0.0;
  unsigned int v5 = *((_DWORD *)this + 55) - *((_DWORD *)this + 81);
  if (v5)
  {
    LODWORD(v3) = *((_DWORD *)this + 52);
    float v4 = (double)v5 / (double)v3;
  }
  std::mutex::unlock(v2);
  return v4;
}

void quasar::RecogAudioBuffer::RecogAudioBuffer(uint64_t a1, int a2, int a3, int a4, char a5, long long *a6, void *a7, int a8, char a9, int a10)
{
  uint64_t v17 = quasar::RecogAudioBufferBase::RecogAudioBufferBase(a1, a5);
  *(void *)uint64_t v17 = &unk_1F0A537D0;
  *(void *)(v17 + 16) = &unk_1F0A53850;
  *(void *)(v17 + 24) = 850045863;
  *(_OWORD *)(v17 + 32) = 0u;
  *(_OWORD *)(v17 + 48) = 0u;
  *(_OWORD *)(v17 + 64) = 0u;
  *(void *)(v17 + 80) = 0;
  *(void *)(v17 + 88) = 1018212795;
  *(_OWORD *)(v17 + 96) = 0u;
  *(_OWORD *)(v17 + 112) = 0u;
  *(void *)(v17 + 128) = 0;
  long long v18 = operator new(0x58uLL);
  v18[1] = 0;
  v18[2] = 0;
  *long long v18 = &unk_1F0A62940;
  v18[3] = 850045863;
  *((_OWORD *)v18 + 2) = 0u;
  *((_OWORD *)v18 + 3) = 0u;
  *((_OWORD *)v18 + 4) = 0u;
  v18[10] = 0;
  *(void *)(a1 + 136) = v18 + 3;
  *(void *)(a1 + 144) = v18;
  int v19 = a3 * a2;
  if (a3 < 0) {
    int v19 = -1;
  }
  int v20 = a8 * a2;
  if (a8 < 0) {
    int v20 = -1;
  }
  *(_DWORD *)(a1 + 152) = v19;
  *(_DWORD *)(a1 + 156) = v20;
  *(void *)(a1 + 160) = a4;
  if (*((char *)a6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 168), *(const std::string::value_type **)a6, *((void *)a6 + 1));
  }
  else
  {
    long long v21 = *a6;
    *(void *)(a1 + 184) = *((void *)a6 + 2);
    *(_OWORD *)(a1 + 168) = v21;
  }
  *(void *)(a1 + 192) = *a7;
  uint64_t v22 = a7[1];
  *(void *)(a1 + 200) = v22;
  if (v22) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 208) = a2;
  *(_DWORD *)(a1 + 212) = a10;
  *(void *)(a1 + 216) = 0;
  operator new();
}

{
  quasar::RecogAudioBuffer::RecogAudioBuffer(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

void sub_1B20FCBF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, quasar::Bitmap *a10)
{
  std::condition_variable_any::~condition_variable_any(v12);
  std::mutex::~mutex(v11);
  quasar::Bitmap::~Bitmap(a10);
  quasar::Bitmap::~Bitmap(v10);
  _Unwind_Resume(a1);
}

void quasar::RecogAudioBuffer::~RecogAudioBuffer(quasar::RecogAudioBuffer *this)
{
  *(void *)this = &unk_1F0A537D0;
  uint64_t v2 = (quasar::RecogAudioBuffer *)((char *)this + 16);
  *((void *)this + 2) = &unk_1F0A53850;
  unint64_t v3 = (void *)*((void *)this + 35);
  if (v3)
  {
    *((void *)this + 36) = v3;
    operator delete(v3);
  }
  float v4 = (std::__shared_weak_count *)*((void *)this + 33);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  unsigned int v5 = (void *)*((void *)this + 29);
  if (v5)
  {
    *((void *)this + 30) = v5;
    operator delete(v5);
  }
  std::unique_ptr<boost::circular_buffer<float,std::allocator<float>>>::reset[abi:ne180100]((uint64_t *)this + 28, 0);
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 25);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (*((char *)this + 191) < 0) {
    operator delete(*((void **)this + 21));
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 18);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 88));
  std::mutex::~mutex((std::mutex *)((char *)this + 24));
  quasar::Bitmap::~Bitmap(v2);
  quasar::Bitmap::~Bitmap(this);
}

{
  uint64_t vars8;

  quasar::RecogAudioBuffer::~RecogAudioBuffer(this);
  JUMPOUT(0x1B3EA8670);
}

void non-virtual thunk to'quasar::RecogAudioBuffer::~RecogAudioBuffer(quasar::RecogAudioBuffer *this)
{
}

{
  uint64_t vars8;

  quasar::RecogAudioBuffer::~RecogAudioBuffer((quasar::RecogAudioBuffer *)((char *)this - 16));
  JUMPOUT(0x1B3EA8670);
}

unint64_t quasar::RecogAudioBuffer::packetArrivalTimestampFromAudioTime(quasar::RecogAudioBuffer *this, float a2)
{
  float v4 = (std::mutex *)((char *)this + 24);
  std::mutex::lock((std::mutex *)((char *)this + 24));
  unint64_t v5 = *(void *)(*((void *)this + 24) + 32);
  mach_timebase_info(&info);
  uint64_t v8 = *((void *)this + 35);
  uint64_t v9 = *((void *)this + 36);
  if (v8 == v9)
  {
LABEL_9:
    unint64_t v13 = 0;
  }
  else
  {
    LODWORD(v6) = info.numer;
    LODWORD(v7) = info.denom;
    double v10 = 1000000000.0 / (double)v6 * (double)v7;
    float v11 = 0.0;
    while (1)
    {
      float v11 = v11 + (float)((float)*(unint64_t *)(v8 + 8) / (float)*((unsigned int *)this + 52));
      if (v11 >= a2 && v5 != 0) {
        break;
      }
      v8 += 16;
      if (v8 == v9) {
        goto LABEL_9;
      }
    }
    unint64_t v13 = (unint64_t)((double)v5 + v10 * *(double *)v8);
  }
  std::mutex::unlock(v4);
  return v13;
}

void sub_1B20FCF14(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

BOOL std::condition_variable_any::wait_until<std::mutex,std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>(uint64_t a1, std::mutex *a2, std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *a3)
{
  unint64_t v6 = *(std::mutex **)(a1 + 48);
  unint64_t v7 = *(std::__shared_weak_count **)(a1 + 56);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v15.__m_ = v6;
  v15.__owns_ = 1;
  std::mutex::lock(v6);
  std::mutex::unlock(a2);
  if (std::chrono::steady_clock::now().__d_.__rep_ >= *a3)
  {
    BOOL v12 = 1;
    goto LABEL_19;
  }
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v8 = *a3;
  v9.__d_.__rep_ = v8 - std::chrono::steady_clock::now().__d_.__rep_;
  if (v9.__d_.__rep_ >= 1)
  {
    std::chrono::steady_clock::now();
    v10.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    if (v10.__d_.__rep_)
    {
      if (v10.__d_.__rep_ < 1)
      {
        if ((unint64_t)v10.__d_.__rep_ < 0xFFDF3B645A1CAC09)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v11 = 0x8000000000000000;
          goto LABEL_16;
        }
      }
      else if ((unint64_t)v10.__d_.__rep_ > 0x20C49BA5E353F7)
      {
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v11 = 0x7FFFFFFFFFFFFFFFLL;
        goto LABEL_14;
      }
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v11 = 1000 * v10.__d_.__rep_;
    }
    else
    {
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v11 = 0;
    }
LABEL_14:
    if (v11 > (v9.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
    {
      v13.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_17:
      std::condition_variable::__do_timed_wait((std::condition_variable *)a1, &v15, v13);
      std::chrono::steady_clock::now();
      goto LABEL_18;
    }
LABEL_16:
    v13.__d_.__rep_ = v11 + v9.__d_.__rep_;
    goto LABEL_17;
  }
LABEL_18:
  BOOL v12 = std::chrono::steady_clock::now().__d_.__rep_ >= *a3;
LABEL_19:
  std::unique_lock<std::mutex>::unlock(&v15);
  std::mutex::lock(a2);
  if (v15.__owns_) {
    std::mutex::unlock(v15.__m_);
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  return v12;
}

void sub_1B20FD094(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void std::condition_variable_any::wait<std::mutex>(uint64_t a1, std::mutex *a2)
{
  float v4 = *(std::mutex **)(a1 + 48);
  unint64_t v5 = *(std::__shared_weak_count **)(a1 + 56);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v6.__m_ = v4;
  v6.__owns_ = 1;
  std::mutex::lock(v4);
  std::mutex::unlock(a2);
  std::condition_variable::wait((std::condition_variable *)a1, &v6);
  std::unique_lock<std::mutex>::unlock(&v6);
  std::mutex::lock(a2);
  if (v6.__owns_) {
    std::mutex::unlock(v6.__m_);
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_1B20FD150(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void *boost::circular_buffer<float,std::allocator<float>>::allocate(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
  {
    std::logic_error::logic_error(&v3, "circular_buffer");
    v3.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D0] + 16);
    boost::throw_exception<std::length_error>(&v3);
  }
  if (!a2) {
    return 0;
  }
  return operator new(4 * a2);
}

void sub_1B20FD1FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::logic_error a9)
{
}

void boost::throw_exception<std::length_error>(const std::logic_error *a1)
{
  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<std::length_error>::wrapexcept((uint64_t)exception, a1);
}

void sub_1B20FD258(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::wrapexcept<std::length_error>::wrapexcept(uint64_t a1, const std::logic_error *a2)
{
  *(void *)a1 = &unk_1F0A46DF8;
  std::logic_error::logic_error((std::logic_error *)(a1 + 8), a2);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(void *)a1 = &unk_1F0A46C90;
  *(void *)(a1 + 8) = &unk_1F0A46CC0;
  *(void *)(a1 + 24) = &unk_1F0A46CE8;
  return a1;
}

uint64_t boost::wrapexcept<std::length_error>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_1F0A47040;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::logic_error::~logic_error((std::logic_error *)(a1 + 8));
  return a1;
}

void boost::wrapexcept<std::length_error>::clone()
{
}

void sub_1B20FD538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a10);
  (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<std::length_error>::rethrow(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<std::length_error>::wrapexcept((uint64_t)exception, a1);
}

void sub_1B20FD5F8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<std::length_error>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_1F0A47040;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::logic_error::~logic_error((std::logic_error *)(a1 + 8));
  JUMPOUT(0x1B3EA8670);
}

void non-virtual thunk to'boost::wrapexcept<std::length_error>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 16) = &unk_1F0A47040;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::logic_error::~logic_error((std::logic_error *)a1);
}

{
  uint64_t vars8;

  *(void *)(a1 + 16) = &unk_1F0A47040;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::logic_error::~logic_error((std::logic_error *)a1);
  JUMPOUT(0x1B3EA8670);
}

void non-virtual thunk to'boost::wrapexcept<std::length_error>::~wrapexcept(void *a1)
{
  *a1 = &unk_1F0A47040;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::logic_error::~logic_error((std::logic_error *)a1 - 1);
}

{
  uint64_t vars8;

  *a1 = &unk_1F0A47040;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::logic_error::~logic_error((std::logic_error *)a1 - 1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t boost::wrapexcept<std::length_error>::wrapexcept(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A46DF8;
  std::logic_error::logic_error((std::logic_error *)(a1 + 8), (const std::logic_error *)(a2 + 8));
  *(void *)(a1 + 8) = MEMORY[0x1E4FBA4D0] + 16;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = &unk_1F0A47040;
  *(void *)(a1 + 32) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(void *)a1 = &unk_1F0A46C90;
  *(void *)(a1 + 8) = &unk_1F0A46CC0;
  *(void *)(a1 + 24) = &unk_1F0A46CE8;
  return a1;
}

void sub_1B20FD948(_Unwind_Exception *a1)
{
  std::logic_error::~logic_error(v1);
  _Unwind_Resume(a1);
}

void boost::circular_buffer<float,std::allocator<float>>::destroy(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 32);
  long long v5 = *(void **)a1;
  uint64_t v6 = v3 - v2;
  unint64_t v7 = (unint64_t)(v3 - (void)v5) >> 2;
  if (v4 < v6 >> 2) {
    unint64_t v7 = 0;
  }
  *(void *)(a1 + 16) = v2 + 4 * (v4 - v7);
  if (v5) {
    operator delete(v5);
  }
}

void *boost::cb_details::iterator<boost::circular_buffer<float,std::allocator<float>>,boost::cb_details::nonconst_traits<std::allocator<float>>>::operator+=(void *a1, uint64_t a2)
{
  if (a2 < 1)
  {
    if (a2 < 0) {
      boost::cb_details::iterator<boost::circular_buffer<float,std::allocator<float>>,boost::cb_details::nonconst_traits<std::allocator<float>>>::operator-=((uint64_t)a1, -a2);
    }
  }
  else
  {
    uint64_t v3 = (void *)*a1;
    uint64_t v4 = a1[1];
    uint64_t v5 = *(void *)(*a1 + 8);
    if (a2 >= (v5 - v4) >> 2) {
      a2 -= (v5 - *v3) >> 2;
    }
    uint64_t v6 = v4 + 4 * a2;
    if (v6 == v3[3]) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = v6;
    }
    a1[1] = v7;
  }
  return a1;
}

uint64_t boost::cb_details::iterator<boost::circular_buffer<float,std::allocator<float>>,boost::cb_details::nonconst_traits<std::allocator<float>>>::operator-=(uint64_t a1, uint64_t a2)
{
  if (a2 < 1)
  {
    if (a2 < 0) {
      boost::cb_details::iterator<boost::circular_buffer<float,std::allocator<float>>,boost::cb_details::nonconst_traits<std::allocator<float>>>::operator+=(a1, -a2);
    }
  }
  else
  {
    uint64_t v4 = *(void **)a1;
    uint64_t v3 = *(void *)(a1 + 8);
    if (!v3) {
      uint64_t v3 = v4[3];
    }
    if (a2 > (v3 - *v4) >> 2) {
      a2 -= (uint64_t)(v4[1] - *v4) >> 2;
    }
    *(void *)(a1 + 8) = v3 - 4 * a2;
  }
  return a1;
}

void *boost::circular_buffer<float,std::allocator<float>>::push_back_impl<float const&>(void *result, _DWORD *a2)
{
  uint64_t v2 = (_DWORD *)*result;
  uint64_t v3 = (_DWORD *)result[1];
  uint64_t v4 = result[4];
  if (v4 == ((uint64_t)v3 - *result) >> 2)
  {
    if (v3 != v2)
    {
      uint64_t v5 = (_DWORD *)result[3];
      *uint64_t v5 = *a2;
      uint64_t v6 = v5 + 1;
      if (v6 != v3) {
        uint64_t v2 = v6;
      }
      result[2] = v2;
      result[3] = v2;
    }
  }
  else
  {
    uint64_t v7 = (_DWORD *)result[3];
    *uint64_t v7 = *a2;
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v8 = v7 + 1;
    if (v8 != v3) {
      uint64_t v2 = v8;
    }
    result[3] = v2;
    result[4] = v4 + 1;
  }
  return result;
}

void *boost::circular_buffer<float,std::allocator<float>>::circular_buffer(void *a1, int **a2)
{
  a1[4] = a2[4];
  uint64_t v4 = (char *)a2[1] - (char *)*a2;
  uint64_t v5 = boost::circular_buffer<float,std::allocator<float>>::allocate((uint64_t)a1, v4 >> 2);
  *a1 = v5;
  a1[1] = (char *)v5 + v4;
  a1[2] = v5;
  if (a2[4] && (uint64_t v6 = a2[2]) != 0)
  {
    uint64_t v7 = a2[1];
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v8 = a2[3];
    std::chrono::steady_clock::time_point v9 = v5;
    do
    {
      int v10 = *v6++;
      *v9++ = v10;
      if (v6 == v7) {
        uint64_t v6 = *a2;
      }
    }
    while (v6 != v8 && v6 != 0);
  }
  else
  {
    std::chrono::steady_clock::time_point v9 = v5;
  }
  if (v9 == (_DWORD *)((char *)v5 + v4)) {
    BOOL v12 = v5;
  }
  else {
    BOOL v12 = v9;
  }
  a1[3] = v12;
  return a1;
}

uint64_t *std::unique_ptr<boost::circular_buffer<float,std::allocator<float>>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    boost::circular_buffer<float,std::allocator<float>>::destroy(v2);
    JUMPOUT(0x1B3EA8670);
  }
  return result;
}

char *std::vector<std::pair<double,unsigned long>>::__assign_with_size[abi:ne180100]<std::pair<double,unsigned long>*,std::pair<double,unsigned long>*>(void *a1, long long *a2, long long *a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  uint64_t result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 4)
  {
    long long v18 = (char *)a1[1];
    std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v13 = a1 + 1;
    BOOL v12 = v18;
    unint64_t v19 = (v18 - result) >> 4;
    if (v19 >= a4)
    {
      long long v24 = result;
      if (a2 != a3)
      {
        long long v25 = result;
        do
        {
          *(void *)long long v25 = *(void *)v6;
          *((void *)v25 + 1) = *((void *)v6 + 1);
          v24 += 16;
          ++v6;
          v25 += 16;
        }
        while (v6 != a3);
      }
      uint64_t v17 = (char *)(v24 - result);
      BOOL v12 = result;
    }
    else
    {
      int v20 = &a2[v19];
      if (v12 != result)
      {
        do
        {
          *(void *)uint64_t result = *(void *)v6;
          *((void *)result + 1) = *((void *)v6++ + 1);
          result += 16;
        }
        while (v6 != v20);
      }
      long long v21 = v12;
      if (v20 != a3)
      {
        uint64_t v22 = v12;
        do
        {
          long long v23 = *v20++;
          *(_OWORD *)uint64_t v22 = v23;
          v22 += 16;
          v21 += 16;
        }
        while (v20 != a3);
      }
      uint64_t v17 = (char *)(v21 - v12);
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](a1, v11);
    long long v14 = (char *)a1[1];
    std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v13 = a1 + 1;
    BOOL v12 = v14;
    std::unique_lock<std::mutex> v15 = v14;
    if (v6 != a3)
    {
      std::unique_lock<std::mutex> v15 = v12;
      do
      {
        long long v16 = *v6++;
        *(_OWORD *)std::unique_lock<std::mutex> v15 = v16;
        v15 += 16;
      }
      while (v6 != a3);
    }
    uint64_t v17 = (char *)(v15 - v12);
  }
  *std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v13 = &v17[(void)v12];
  return result;
}

float *quasar::Token::DecodingSignals::DecodingSignals(float *this, float a2, float a3, float a4, float a5)
{
  *this = a2;
  this[1] = a3;
  this[2] = a4;
  this[3] = a5;
  return this;
}

float32x4_t quasar::Token::DecodingSignals::operator+=(float32x4_t *a1, float32x4_t *a2)
{
  float32x4_t result = vaddq_f32(*a2, *a1);
  *a1 = result;
  return result;
}

double quasar::Token::Token(quasar::Token *this)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 6) = -1;
  *(void *)((char *)this + 36) = 0;
  *(void *)((char *)this + 28) = 0;
  *((_WORD *)this + 22) = 1;
  double result = 0.0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((void *)this + 20) = 0;
  *((_DWORD *)this + 42) = 4;
  *((_WORD *)this + 86) = 0;
  *((void *)this + 22) = 0;
  *((void *)this + 23) = 0;
  *((unsigned char *)this + 200) = 0;
  *((void *)this + 24) = 0;
  *(void *)((char *)this + 204) = 0;
  *(void *)((char *)this + 212) = 0;
  return result;
}

std::string *quasar::Token::Token(std::string *this, long long *a2, int a3, int a4, int a5, std::string::value_type a6, std::string::value_type a7, long long *a8, float a9, long long *a10, long long **a11, char a12, long long *a13, char a14, char a15)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v23 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v23;
  }
  LODWORD(this[1].__r_.__value_.__l.__data_) = -1;
  HIDWORD(this[1].__r_.__value_.__r.__words[0]) = a3;
  LODWORD(this[1].__r_.__value_.__r.__words[1]) = a4;
  HIDWORD(this[1].__r_.__value_.__r.__words[1]) = a5;
  *(float *)&this[1].__r_.__value_.__r.__words[2] = a9;
  this[1].__r_.__value_.__s.__data_[20] = a6;
  this[1].__r_.__value_.__s.__data_[21] = a7;
  if (*((char *)a8 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *(const std::string::value_type **)a8, *((void *)a8 + 1));
  }
  else
  {
    long long v24 = *a8;
    this[2].__r_.__value_.__r.__words[2] = *((void *)a8 + 2);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v24;
  }
  this[3].__r_.__value_.__r.__words[0] = 0;
  this[3].__r_.__value_.__l.__size_ = 0;
  this[3].__r_.__value_.__r.__words[2] = 0;
  if (*((char *)a10 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 4, *(const std::string::value_type **)a10, *((void *)a10 + 1));
  }
  else
  {
    long long v25 = *a10;
    this[4].__r_.__value_.__r.__words[2] = *((void *)a10 + 2);
    *(_OWORD *)&this[4].__r_.__value_.__l.__data_ = v25;
  }
  this[5].__r_.__value_.__r.__words[0] = 0;
  this[5].__r_.__value_.__l.__size_ = 0;
  this[5].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::pair<std::string,float>>::__init_with_size[abi:ne180100]<std::pair<std::string,float>*,std::pair<std::string,float>*>(this + 5, *a11, a11[1], ((char *)a11[1] - (char *)*a11) >> 5);
  long long v26 = this + 6;
  if (*((char *)a13 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v26, *(const std::string::value_type **)a13, *((void *)a13 + 1));
  }
  else
  {
    long long v27 = *a13;
    this[6].__r_.__value_.__r.__words[2] = *((void *)a13 + 2);
    *(_OWORD *)&v26->__r_.__value_.__l.__data_ = v27;
  }
  LODWORD(this[7].__r_.__value_.__l.__data_) = 4;
  this[7].__r_.__value_.__s.__data_[4] = a12;
  this[7].__r_.__value_.__s.__data_[5] = a14;
  this[7].__r_.__value_.__r.__words[2] = 0;
  this[8].__r_.__value_.__r.__words[0] = 0;
  this[7].__r_.__value_.__l.__size_ = 0;
  this[8].__r_.__value_.__s.__data_[8] = a15;
  *(std::string::size_type *)((char *)&this[8].__r_.__value_.__r.__words[2] + 4) = 0;
  *(std::string::size_type *)((char *)&this[8].__r_.__value_.__r.__words[1] + 4) = 0;
  return this;
}

{
  return quasar::Token::Token(this, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
}

void sub_1B20FDF58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  long long v14 = v13;
  a10 = v14;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (*(char *)(v10 + 119) < 0) {
    operator delete(*v12);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (*(char *)(v10 + 71) < 0) {
    operator delete(*v11);
  }
  if (*(char *)(v10 + 23) < 0) {
    operator delete(*(void **)v10);
  }
  _Unwind_Resume(a1);
}

BOOL quasar::Token::isPrintable(quasar::Token *this)
{
  if ((*((char *)this + 23) & 0x80000000) == 0)
  {
    if (*((unsigned char *)this + 23))
    {
      if (*((unsigned char *)this + 23) != 3) {
        return 1;
      }
      return *(_WORD *)this != 16188 || *((unsigned char *)this + 2) != 62;
    }
    return 0;
  }
  uint64_t v1 = *((void *)this + 1);
  if (!v1) {
    return 0;
  }
  if (v1 != 3) {
    return 1;
  }
  this = *(quasar::Token **)this;
  return *(_WORD *)this != 16188 || *((unsigned char *)this + 2) != 62;
}

BOOL quasar::Token::isAutoPunctuation(quasar::Token *this)
{
  return *((unsigned char *)this + 172) || *((unsigned char *)this + 173) != 0;
}

uint64_t quasar::Token::trailingSilenceMilliseconds(quasar::Token *this)
{
  unsigned int v1 = *((_DWORD *)this + 8);
  unsigned int v2 = *((_DWORD *)this + 9);
  BOOL v3 = v1 >= v2;
  unsigned int v4 = v1 - v2;
  if (v3) {
    return v4;
  }
  else {
    return 0;
  }
}

uint64_t quasar::Token::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 0;
  }
  uint64_t v6 = a2;
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, a2, *((void *)a1 + 1))) {
      return 0;
    }
  }
  else if (a1[23])
  {
    uint64_t v8 = a1;
    while (*v8 == *a2)
    {
      ++v8;
      ++a2;
      if (!--v2) {
        goto LABEL_16;
      }
    }
    return 0;
  }
LABEL_16:
  if (*((_DWORD *)a1 + 6) != *((_DWORD *)v6 + 6)
    || *((_DWORD *)a1 + 7) != *((_DWORD *)v6 + 7)
    || *((_DWORD *)a1 + 8) != *((_DWORD *)v6 + 8)
    || *((_DWORD *)a1 + 9) != *((_DWORD *)v6 + 9)
    || *((float *)a1 + 10) != *((float *)v6 + 10)
    || a1[44] != v6[44]
    || a1[45] != v6[45]
    || !std::operator==[abi:ne180100]<std::pair<std::string,float>,std::allocator<std::pair<std::string,float>>>((unsigned __int8 **)a1 + 15, (uint64_t)(v6 + 120))|| a1[172] != v6[172]|| !quasar::VoiceCommandActiveSetCompilation::Suite::operator==(a1 + 144, v6 + 144)|| *((_DWORD *)a1 + 42) != *((_DWORD *)v6 + 42)|| a1[173] != v6[173]|| !quasar::VoiceCommandActiveSetCompilation::Suite::operator==(a1 + 176, v6 + 176)|| *((float *)a1 + 51) != *((float *)v6 + 51)|| *((float *)a1 + 52) != *((float *)v6 + 52)|| *((float *)a1 + 53) != *((float *)v6 + 53)|| *((float *)a1 + 54) != *((float *)v6 + 54))
  {
    return 0;
  }
  return std::operator==[abi:ne180100]<std::string,std::allocator<std::string>>((unsigned __int8 **)a1 + 9, (uint64_t)(v6 + 72));
}

BOOL std::operator==[abi:ne180100]<std::pair<std::string,float>,std::allocator<std::pair<std::string,float>>>(unsigned __int8 **a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(unsigned __int8 **)a2;
  if (v3 - *a1 != *(void *)(a2 + 8) - *(void *)a2) {
    return 0;
  }
  if (v2 == v3) {
    return 1;
  }
  do
  {
    BOOL result = std::__equal_to::operator()[abi:ne180100]<std::pair<std::string,float>,std::pair<std::string,float>>((uint64_t)&v6, v2, v4);
    if (!result) {
      break;
    }
    v2 += 32;
    v4 += 32;
  }
  while (v2 != v3);
  return result;
}

uint64_t std::operator==[abi:ne180100]<std::string,std::allocator<std::string>>(unsigned __int8 **a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(unsigned __int8 **)a2;
  if (v3 - *a1 != *(void *)(a2 + 8) - *(void *)a2) {
    return 0;
  }
  if (v2 == v3) {
    return 1;
  }
  do
  {
    uint64_t result = std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&v6, v2, v4);
    if (!result) {
      break;
    }
    v2 += 24;
    v4 += 24;
  }
  while (v2 != v3);
  return result;
}

void sub_1B20FE624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **quasar::Token::resetSpacing(uint64_t **result)
{
  unsigned int v1 = *result;
  uint64_t v2 = result[1];
  if (*result != v2)
  {
    do
    {
      uint64_t v4 = *v1;
      uint64_t v3 = v1[1];
      if (*v1 != v3)
      {
        uint64_t v5 = *v1;
        do
        {
          *(_WORD *)(v5 + 44) = 1;
          v5 += 224;
        }
        while (v5 != v3);
        if (v4 != v3) {
          *(unsigned char *)(v3 - 180) = 0;
        }
      }
      v1 += 3;
    }
    while (v1 != v2);
  }
  return result;
}

void quasar::Token::tokenNameWithCleanedMetadata(const std::string *a1)
{
  *(void *)&long long v20 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(&__p, "~w00");
  quasar::splitAndTrimNoEmpty(a1, (char *)&__p, &v14);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v2 = v14;
  for (uint64_t i = v15; v2 != i; v2 += 24)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\\"");
    quasar::splitAndTrimNoEmpty((const std::string *)v2, (char *)&__p, &v12);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v4 = v13;
    if (0xAAAAAAAAAAAAAAABLL * ((v13 - (uint64_t)v12) >> 3) >= 3)
    {
      if (*((char *)v12 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v12, *((void *)v12 + 1));
        uint64_t v4 = v13;
      }
      else
      {
        long long v5 = *v12;
        __p.__r_.__value_.__r.__words[2] = *((void *)v12 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v5;
      }
      if (*(char *)(v4 - 1) < 0)
      {
        std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)(v4 - 24), *(void *)(v4 - 16));
      }
      else
      {
        long long v6 = *(_OWORD *)(v4 - 24);
        v19.__r_.__value_.__r.__words[2] = *(void *)(v4 - 8);
        *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v6;
      }
      std::chrono::steady_clock::time_point v9 = 0;
      uint64_t v10 = 0;
      unint64_t v11 = 0;
      long long v16 = (const char *)&v9;
      LOBYTE(v17) = 0;
      std::chrono::steady_clock::time_point v9 = (std::string *)operator new(0x30uLL);
      uint64_t v10 = v9;
      unint64_t v11 = v9 + 2;
      uint64_t v7 = 0;
      uint64_t v10 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v11, (long long *)&__p, &v20, v9);
      do
      {
        if (SHIBYTE(v19.__r_.__value_.__r.__words[v7 + 2]) < 0) {
          operator delete(*(void **)((char *)&__p + v7 * 8 + 24));
        }
        v7 -= 3;
      }
      while (v7 != -6);
      long long v16 = "\\"";
      uint64_t v17 = 1;
      quasar::join<std::vector<std::string>>((uint64_t *)&v9, (uint64_t *)&v16);
      if (*(char *)(v2 + 23) < 0) {
        operator delete(*(void **)v2);
      }
      long long v8 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(void *)(v2 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)uint64_t v2 = v8;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v9;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"~w00";
  __p.__r_.__value_.__l.__size_ = 4;
  quasar::join<std::vector<std::string>>(&v14, (uint64_t *)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1B20FE9E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::string __p = &a16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void quasar::Token::tokenNamesWithCleanedMetadata(const std::string **a1@<X0>, std::vector<std::string> *a2@<X8>)
{
  a2->__begin_ = 0;
  a2->__end_ = 0;
  a2->__end_cap_.__value_ = 0;
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (*a1 != v3)
  {
    p_end_cap = (std::allocator<std::string> *)&a2->__end_cap_;
    do
    {
      quasar::Token::tokenNameWithCleanedMetadata(v2);
      std::vector<std::string>::pointer end = a2->__end_;
      value = a2->__end_cap_.__value_;
      if (end >= value)
      {
        unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)a2->__begin_) >> 3);
        unint64_t v9 = v8 + 1;
        if (v8 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)a2->__begin_) >> 3);
        if (2 * v10 > v9) {
          unint64_t v9 = 2 * v10;
        }
        if (v10 >= 0x555555555555555) {
          unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v11 = v9;
        }
        __v.__end_cap_.__value_ = p_end_cap;
        if (v11) {
          BOOL v12 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)p_end_cap, v11);
        }
        else {
          BOOL v12 = 0;
        }
        uint64_t v13 = v12 + v8;
        __v.__first_ = v12;
        __v.__begin_ = v13;
        __v.__end_cap_.__value_ = &v12[v11];
        v13->__r_.__value_.__r.__words[2] = v16;
        *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
        std::string::size_type v16 = 0;
        *(_OWORD *)std::string __p = 0uLL;
        __v.__end_ = v13 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(a2, &__v);
        uint64_t v14 = a2->__end_;
        std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
        a2->__end_ = v14;
      }
      else
      {
        end->__r_.__value_.__r.__words[2] = v16;
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
        a2->__end_ = end + 1;
      }
      ++v2;
    }
    while (v2 != v3);
  }
}

void sub_1B20FEC38(_Unwind_Exception *__p, uint64_t a2, int a3, __int16 a4, char a5, char a6, std::__split_buffer<std::wstring> *a7, uint64_t a8, void *__pa, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__pa);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  _Unwind_Resume(__p);
}

void quasar::Token::tokensWithCleanedMetadata(uint64_t **a1@<X0>, uint64_t **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<std::vector<quasar::Token>>::__init_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(a2, *a1, a1[1], 0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1));
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  while (v3 != v4)
  {
    uint64_t v5 = *v3;
    uint64_t v6 = v3[1];
    while (v5 != v6)
    {
      quasar::Token::tokenNameWithCleanedMetadata((const std::string *)v5);
      if (*(char *)(v5 + 23) < 0) {
        operator delete(*(void **)v5);
      }
      *(void *)(v5 + 16) = v8;
      *(_OWORD *)uint64_t v5 = v7;
      v5 += 224;
    }
    v3 += 3;
  }
}

void sub_1B20FED2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

quasar::LeftContext *quasar::LeftContext::LeftContext(quasar::LeftContext *this, const quasar::LeftContext *a2)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = (char *)this + 8;
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v4 = (std::vector<std::wstring> *)((char *)this + 24);
  *((void *)this + 9) = 850045863;
  uint64_t v5 = (std::vector<std::wstring> *)((char *)this + 48);
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  uint64_t v6 = (std::mutex *)((char *)a2 + 72);
  *((void *)this + 16) = 0;
  std::mutex::lock((std::mutex *)((char *)a2 + 72));
  if (this != a2)
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v4, *((std::string **)a2 + 3), *((long long **)a2 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3));
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v5, *((std::string **)a2 + 6), *((long long **)a2 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 7) - *((void *)a2 + 6)) >> 3));
  }
  std::mutex::unlock(v6);
  return this;
}

void sub_1B20FEE24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::mutex::~mutex(v11);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(v10, *(void **)(v10 + 8));
  _Unwind_Resume(a1);
}

void quasar::LeftContext::getLeftContextForLM(long long **this@<X0>, std::string *a2@<X8>)
{
  uint64_t v4 = (std::mutex *)(this + 9);
  std::mutex::lock((std::mutex *)(this + 9));
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2, this[3], this[4], 0xAAAAAAAAAAAAAAABLL * (((char *)this[4] - (char *)this[3]) >> 3));
  std::mutex::unlock(v4);
}

void sub_1B20FEEE4(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void quasar::LeftContext::setLeftContextForLM(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 72);
  std::mutex::lock((std::mutex *)(a1 + 72));
  if (a1 + 24 != a2) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)(a1 + 24), *(std::string **)a2, *(long long **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  }
  std::mutex::unlock(v4);
}

void sub_1B20FEF6C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void quasar::LeftContext::getLeftContextForItn(long long **this@<X0>, std::string *a2@<X8>)
{
  uint64_t v4 = (std::mutex *)(this + 9);
  std::mutex::lock((std::mutex *)(this + 9));
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2, this[6], this[7], 0xAAAAAAAAAAAAAAABLL * (((char *)this[7] - (char *)this[6]) >> 3));
  std::mutex::unlock(v4);
}

void sub_1B20FEFF4(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void quasar::LeftContext::setLeftContextForItn(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 72);
  std::mutex::lock((std::mutex *)(a1 + 72));
  if (a1 + 48 != a2) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)(a1 + 48), *(std::string **)a2, *(long long **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  }
  std::mutex::unlock(v4);
}

void sub_1B20FF07C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void quasar::LeftContext::updateInterUtteranceLeftContext(uint64_t a1, long long **a2, unint64_t a3)
{
  uint64_t v6 = (std::mutex *)(a1 + 72);
  std::mutex::lock((std::mutex *)(a1 + 72));
  long long v7 = *a2;
  uint64_t v8 = a2[1];
  if (*a2 == v8)
  {
    unint64_t v9 = *(long long **)(a1 + 32);
  }
  else
  {
    unint64_t v9 = *(long long **)(a1 + 32);
    do
    {
      if ((unint64_t)v9 >= *(void *)(a1 + 40))
      {
        unint64_t v9 = (long long *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)(a1 + 24), v7);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a1 + 24, v7);
        unint64_t v9 = (long long *)((char *)v9 + 24);
      }
      *(void *)(a1 + 32) = v9;
      v7 += 14;
    }
    while (v7 != v8);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - *(void *)(a1 + 24)) >> 3) > a3)
  {
    if (quasar::gLogLevel >= 5)
    {
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      long long v14 = 0u;
      long long v15 = 0u;
      long long v12 = 0u;
      long long v13 = 0u;
      long long v11 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v11, (uint64_t)"Clipped too big left context: ", 30);
      uint64_t v10 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" words; limit is ", 17);
      std::ostream::operator<<();
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v11);
      unint64_t v9 = *(long long **)(a1 + 32);
    }
    long long v11 = 0uLL;
    *(void *)&long long v12 = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>((std::string *)&v11, (long long *)((char *)v9 - 24 * a3), v9, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(24 * a3) >> 3));
    if ((long long *)(a1 + 24) != &v11) {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)(a1 + 24), (std::string *)v11, *((long long **)&v11 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v11 + 1) - v11) >> 3));
    }
    long long v28 = (void **)&v11;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v28);
  }
  std::mutex::unlock(v6);
}

void sub_1B20FF274(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void quasar::LeftContext::setLeftContextForDecoder(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 72);
  std::mutex::lock((std::mutex *)(a1 + 72));
  if (a1 != a2) {
    std::__tree<std::__value_type<std::string,std::shared_ptr<void>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<void>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<void>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::shared_ptr<void>>,std::__tree_node<std::__value_type<std::string,std::shared_ptr<void>>,void *> *,long>>((uint64_t **)a1, *(long long **)a2, (long long *)(a2 + 8));
  }
  std::mutex::unlock(v4);
}

void sub_1B20FF31C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void quasar::LeftContext::getLeftContextForDecoder(const void ***this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = (std::mutex *)(this + 9);
  std::mutex::lock((std::mutex *)(this + 9));
  std::map<std::string,std::shared_ptr<void>>::map[abi:ne180100](a2, this);
  std::mutex::unlock(v4);
}

void sub_1B20FF388(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

std::vector<std::wstring> *quasar::RightContext::RightContext(std::vector<std::wstring> *this, std::vector<std::wstring> *a2)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  this[1].__begin_ = (std::vector<std::wstring>::pointer)850045863;
  *(_OWORD *)&this[1].__end_ = 0u;
  *(_OWORD *)&this[2].__begin_ = 0u;
  *(_OWORD *)&this[2].__end_cap_.__value_ = 0u;
  uint64_t v4 = (std::mutex *)&a2[1];
  this[3].__end_ = 0;
  std::mutex::lock((std::mutex *)&a2[1]);
  if (this != a2) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(this, (std::string *)a2->__begin_, (long long *)a2->__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)a2->__end_ - (char *)a2->__begin_) >> 3));
  }
  std::mutex::unlock(v4);
  return this;
}

void sub_1B20FF438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::mutex::unlock(v11);
  std::mutex::~mutex(v10);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  _Unwind_Resume(a1);
}

void quasar::RightContext::setRightContextForItn(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  uint64_t v5 = *(long long **)(a2 + 8);
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(void *)a2) >> 3);
  if (v6 < 5)
  {
    if (a1 != a2) {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)a1, *(std::string **)a2, v5, v6);
    }
  }
  else
  {
    memset(&v7, 0, sizeof(v7));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(&v7, v5 - 6, v5, 4uLL);
    if (&v7 != (std::string *)a1) {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)a1, (std::string *)v7.__r_.__value_.__l.__data_, (long long *)v7.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7.__r_.__value_.__l.__size_ - v7.__r_.__value_.__r.__words[0]) >> 3));
    }
    uint64_t v8 = &v7;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  }
  std::mutex::unlock(v4);
}

void sub_1B20FF53C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  std::mutex::unlock(v12);
  _Unwind_Resume(a1);
}

void quasar::RightContext::getRightContextForItn(long long **this@<X0>, std::string *a2@<X8>)
{
  uint64_t v4 = (std::mutex *)(this + 3);
  std::mutex::lock((std::mutex *)(this + 3));
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2, *this, this[1], 0xAAAAAAAAAAAAAAABLL * (((char *)this[1] - (char *)*this) >> 3));
  std::mutex::unlock(v4);
}

void sub_1B20FF5E0(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t quasar::RunAsyncParams::RunAsyncParams(uint64_t a1, void *a2)
{
  *(void *)a1 = *a2;
  uint64_t v3 = a2[1];
  *(void *)(a1 + 8) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 16000;
  *(_WORD *)(a1 + 32) = 257;
  *(_DWORD *)(a1 + 34) = 0;
  *(unsigned char *)(a1 + 38) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 47) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 56), "");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 80), "");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 104), "");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 128), "");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 152), "");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 176), "");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 200), "");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 224), "");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 248), "");
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(unsigned char *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = a1 + 352;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = a1 + 376;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(void *)(a1 + 440) = 850045863;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 489) = 0u;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 512), "");
  *(void *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 536) = 0u;
  *(void *)(a1 + 560) = 850045863;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 610) = 0u;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 648), "");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 672), "");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 696), "");
  *(_DWORD *)(a1 + 736) = 0;
  *(_OWORD *)(a1 + 720) = 0u;
  quasar::LmeDataStreams::LmeDataStreams((quasar::LmeDataStreams *)(a1 + 744));
  *(void *)(a1 + 792) = 0;
  return a1;
}

void sub_1B20FF830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void **a10, void **a11, void **a12, void **a13, void **a14, void **a15, uint64_t a16)
{
  long long v26 = *(std::__shared_weak_count **)(v16 + 728);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  if (*(char *)(v16 + 719) < 0) {
    operator delete(*v22);
  }
  if (*(char *)(v16 + 695) < 0) {
    operator delete(*v21);
  }
  if (*(char *)(v16 + 671) < 0) {
    operator delete(*v20);
  }
  long long v27 = *(std::__shared_weak_count **)(v16 + 640);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  quasar::RightContext::~RightContext(v19);
  if (*(char *)(v16 + 535) < 0) {
    operator delete(*v18);
  }
  quasar::LeftContext::~LeftContext(v17);
  std::__tree<std::string>::destroy(v16 + 344, *(char **)(v16 + 352));
  long long v28 = *(std::__shared_weak_count **)(v16 + 328);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  a16 = v16 + 296;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = v16 + 272;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  if (*(char *)(v16 + 271) < 0) {
    operator delete(*v23);
  }
  if (*(char *)(v16 + 247) < 0) {
    operator delete(*v25);
  }
  if (*(char *)(v16 + 223) < 0) {
    operator delete(*v24);
  }
  if (*(char *)(v16 + 199) < 0) {
    operator delete(*a10);
  }
  if (*(char *)(v16 + 175) < 0) {
    operator delete(*a11);
  }
  if (*(char *)(v16 + 151) < 0) {
    operator delete(*a12);
  }
  if (*(char *)(v16 + 127) < 0) {
    operator delete(*a13);
  }
  if (*(char *)(v16 + 103) < 0) {
    operator delete(*a14);
  }
  if (*(char *)(v16 + 79) < 0) {
    operator delete(*a15);
  }
  long long v29 = *(atomic_ullong **)(v16 + 16);
  if (v29 && !atomic_fetch_add(v29 + 1, 0xFFFFFFFFFFFFFFFFLL)) {
    (*(void (**)(atomic_ullong *))(*v29 + 16))(v29);
  }
  long long v30 = *(std::__shared_weak_count **)(v16 + 8);
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  _Unwind_Resume(a1);
}

void sub_1B20FFA10()
{
}

void sub_1B20FFA18()
{
}

void sub_1B20FFA20()
{
}

void sub_1B20FFA28()
{
}

void sub_1B20FFA30()
{
}

void quasar::RightContext::~RightContext(quasar::RightContext *this)
{
  std::mutex::~mutex((std::mutex *)((char *)this + 24));
  uint64_t v2 = (void **)this;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void quasar::LeftContext::~LeftContext(quasar::LeftContext *this)
{
  std::mutex::~mutex((std::mutex *)((char *)this + 72));
  uint64_t v2 = (void **)((char *)this + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = (void **)((char *)this + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)this, *((void **)this + 1));
}

uint64_t quasar::RunAsyncParams::setLeftContext(uint64_t a1, uint64_t a2)
{
  return a1;
}

uint64_t quasar::RunAsyncParams::setLeftContextForDecoder(uint64_t a1, uint64_t a2)
{
  return a1;
}

uint64_t quasar::RunAsyncParams::setHighPriority(uint64_t this, char a2)
{
  *(unsigned char *)(this + 51) = a2;
  return this;
}

uint64_t quasar::RunAsyncParams::setInputOrigin(uint64_t a1, const std::string *a2)
{
  std::string::operator=((std::string *)(a1 + 224), a2);
  return a1;
}

uint64_t quasar::RunAsyncParams::setRegionId(uint64_t a1, const std::string *a2)
{
  std::string::operator=((std::string *)(a1 + 248), a2);
  return a1;
}

uint64_t quasar::RunAsyncParams::setEndpointStartMs(uint64_t this, uint64_t a2)
{
  *(void *)(this + 40) = a2;
  return this;
}

uint64_t quasar::RunAsyncParams::setEager(uint64_t this, char a2)
{
  *(unsigned char *)(this + 48) = a2;
  return this;
}

uint64_t quasar::RunAsyncParams::setSkipEagerWrite(uint64_t this, char a2)
{
  *(unsigned char *)(this + 49) = a2;
  return this;
}

uint64_t quasar::RunAsyncParams::setEpExtraDelay(uint64_t this, char a2)
{
  *(unsigned char *)(this + 50) = a2;
  return this;
}

uint64_t quasar::RunAsyncParams::setUtteranceDetection(uint64_t this, char a2)
{
  *(unsigned char *)(this + 36) = a2;
  return this;
}

uint64_t quasar::RunAsyncParams::setUtteranceConcatenation(uint64_t this, char a2)
{
  *(unsigned char *)(this + 37) = a2;
  return this;
}

uint64_t quasar::RunAsyncParams::setEnableEndPointCandidate(uint64_t this, char a2)
{
  *(unsigned char *)(this + 38) = a2;
  return this;
}

uint64_t quasar::RunAsyncParams::setFarField(uint64_t this, char a2)
{
  *(unsigned char *)(this + 34) = a2;
  return this;
}

uint64_t quasar::RunAsyncParams::setEnableWhisperDetection(uint64_t this, char a2)
{
  *(unsigned char *)(this + 35) = a2;
  return this;
}

uint64_t quasar::RunAsyncParams::setRefTranscription(uint64_t a1, const std::string *a2)
{
  std::string::operator=((std::string *)(a1 + 176), a2);
  return a1;
}

uint64_t quasar::RunAsyncParams::setBluetoothDeviceId(uint64_t a1, const std::string *a2)
{
  std::string::operator=((std::string *)(a1 + 200), a2);
  return a1;
}

uint64_t quasar::RunAsyncParams::setBufferReadTimeOutMs(uint64_t this, int a2)
{
  *(_DWORD *)(this + 28) = a2;
  return this;
}

uint64_t quasar::RunAsyncParams::setDoServerSideEndPointing(uint64_t this, char a2)
{
  *(unsigned char *)(this + 32) = a2;
  return this;
}

uint64_t quasar::RunAsyncParams::setEnableNnetEndpointing(uint64_t this, char a2)
{
  *(unsigned char *)(this + 33) = a2;
  return this;
}

uint64_t quasar::RunAsyncParams::setDisableAudioAnalyticsReporting(uint64_t this, char a2)
{
  *(unsigned char *)(this + 53) = a2;
  return this;
}

uint64_t quasar::RunAsyncParams::setInterUtteranceLeftContext(uint64_t this, char a2)
{
  *(unsigned char *)(this + 54) = a2;
  return this;
}

uint64_t quasar::RunAsyncParams::setDeviceId(uint64_t a1, const std::string *a2)
{
  std::string::operator=((std::string *)(a1 + 152), a2);
  return a1;
}

uint64_t quasar::RunAsyncParams::setLanguage(uint64_t a1, const std::string *a2)
{
  std::string::operator=((std::string *)(a1 + 56), a2);
  return a1;
}

uint64_t quasar::RunAsyncParams::setTaskType(uint64_t a1, const std::string *a2)
{
  std::string::operator=((std::string *)(a1 + 80), a2);
  return a1;
}

uint64_t quasar::RunAsyncParams::setUserId(uint64_t a1, const std::string *a2)
{
  std::string::operator=((std::string *)(a1 + 104), a2);
  return a1;
}

uint64_t quasar::RunAsyncParams::setSessionId(uint64_t a1, const std::string *a2)
{
  std::string::operator=((std::string *)(a1 + 128), a2);
  return a1;
}

uint64_t quasar::RunAsyncParams::setLmeDataStreams(uint64_t result, uint64_t a2)
{
  *(void *)(result + 792) = a2;
  return result;
}

uint64_t quasar::RunAsyncParams::setLocation(uint64_t a1, atomic_ullong **a2)
{
  std::shared_future<quasar::Location>::operator=((atomic_ullong **)(a1 + 16), a2);
  return a1;
}

atomic_ullong **std::shared_future<quasar::Location>::operator=(atomic_ullong **a1, atomic_ullong **a2)
{
  if (*a2) {
    atomic_fetch_add_explicit(*a2 + 1, 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *a1;
  if (*a1 && !atomic_fetch_add(v4 + 1, 0xFFFFFFFFFFFFFFFFLL)) {
    (*(void (**)(atomic_ullong *))(*v4 + 16))(v4);
  }
  *a1 = *a2;
  return a1;
}

uint64_t quasar::RunAsyncParams::setSamplingRate(uint64_t this, int a2)
{
  *(_DWORD *)(this + 24) = a2;
  return this;
}

uint64_t quasar::RunAsyncParams::setExtraLmList(uint64_t a1, uint64_t **a2)
{
  uint64_t v3 = a1 + 272;
  if ((uint64_t **)v3 != a2) {
    std::vector<std::shared_ptr<kaldi::quasar::LmHandle>>::__assign_with_size[abi:ne180100]<std::shared_ptr<kaldi::quasar::LmHandle>*,std::shared_ptr<kaldi::quasar::LmHandle>*>(v3, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  }
  return a1;
}

uint64_t quasar::RunAsyncParams::setScoreNbestExtraLmList(uint64_t a1, uint64_t **a2)
{
  uint64_t v3 = a1 + 296;
  if ((uint64_t **)v3 != a2) {
    std::vector<std::shared_ptr<kaldi::quasar::LmHandle>>::__assign_with_size[abi:ne180100]<std::shared_ptr<kaldi::quasar::LmHandle>*,std::shared_ptr<kaldi::quasar::LmHandle>*>(v3, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  }
  return a1;
}

uint64_t quasar::RunAsyncParams::setSpeakerCode(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 328);
  *(void *)(a1 + 320) = v4;
  *(void *)(a1 + 328) = v3;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return a1;
}

uint64_t quasar::RunAsyncParams::setEnableSpeakerCodeTraining(uint64_t this, char a2)
{
  *(unsigned char *)(this + 52) = a2;
  return this;
}

uint64_t quasar::RunAsyncParams::setScoreNbest(uint64_t this, char a2)
{
  *(unsigned char *)(this + 336) = a2;
  return this;
}

uint64_t quasar::RunAsyncParams::setMuxIds(uint64_t a1, void *a2)
{
  uint64_t v4 = (uint64_t **)(a1 + 344);
  uint64_t v5 = a1 + 352;
  std::__tree<std::string>::destroy(a1 + 344, *(char **)(a1 + 352));
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 344) = v5;
  uint64_t v8 = (void *)*a2;
  unint64_t v6 = a2 + 1;
  std::string v7 = v8;
  if (v8 != v6)
  {
    while ((*((char *)v7 + 55) & 0x80000000) == 0)
    {
      if (*((unsigned char *)v7 + 55)) {
        goto LABEL_4;
      }
LABEL_5:
      unint64_t v9 = (void *)v7[1];
      if (v9)
      {
        do
        {
          uint64_t v10 = v9;
          unint64_t v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          uint64_t v10 = (void *)v7[2];
          BOOL v11 = *v10 == (void)v7;
          std::string v7 = v10;
        }
        while (!v11);
      }
      std::string v7 = v10;
      if (v10 == v6) {
        return a1;
      }
    }
    if (!v7[5]) {
      goto LABEL_5;
    }
LABEL_4:
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(v4, (const void **)v7 + 4, (uint64_t)(v7 + 4));
    goto LABEL_5;
  }
  return a1;
}

uint64_t quasar::RunAsyncParams::setLeftContextForItn(uint64_t a1, uint64_t a2)
{
  return a1;
}

uint64_t quasar::RunAsyncParams::setEnableVoiceCommands(uint64_t this, char a2)
{
  *(unsigned char *)(this + 624) = a2;
  return this;
}

uint64_t quasar::RunAsyncParams::setShouldGenerateVoiceCommandCandidates(uint64_t this, char a2)
{
  *(unsigned char *)(this + 625) = a2;
  return this;
}

uint64_t quasar::RunAsyncParams::setVoiceCommandActiveSetCompilation(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 632) = v4;
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 640);
  *(void *)(a1 + 640) = v3;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return a1;
}

uint64_t quasar::RunAsyncParams::setRightContextForItn(uint64_t a1, uint64_t a2)
{
  return a1;
}

std::string *quasar::RunAsyncParams::setAneContext(std::string *a1, const std::string *a2)
{
  std::string::operator=(a1 + 27, a2);
  return a1;
}

std::string *quasar::RunAsyncParams::setCpuContext(std::string *a1, const std::string *a2)
{
  std::string::operator=(a1 + 28, a2);
  return a1;
}

std::string *quasar::RunAsyncParams::setGpuContext(std::string *a1, const std::string *a2)
{
  std::string::operator=(a1 + 29, a2);
  return a1;
}

uint64_t quasar::RunAsyncParams::setDisableContextualBiasing(uint64_t this, char a2)
{
  *(unsigned char *)(this + 736) = a2;
  return this;
}

uint64_t quasar::RunAsyncParams::setIsLegacyVoiceCommandRequest(uint64_t this, char a2)
{
  *(unsigned char *)(this + 738) = a2;
  return this;
}

uint64_t quasar::RunAsyncParams::setAtypicalSpeech(uint64_t this, char a2)
{
  *(unsigned char *)(this + 739) = a2;
  return this;
}

uint64_t quasar::RunAsyncParams::getLmeDataStreams(quasar::RunAsyncParams *this)
{
  if (*((void *)this + 99)) {
    return *((void *)this + 99);
  }
  else {
    return (uint64_t)this + 744;
  }
}

void *quasar::SpeechRecognizerBase::SpeechRecognizerBase(void *this)
{
  *this = &unk_1F0A55438;
  return this;
}

const char *quasar::fingerprintDetectionResultString(int a1)
{
  unsigned int v1 = "Unchecked";
  if (a1 == 2) {
    unsigned int v1 = "Detected";
  }
  if (a1 == 1) {
    return "Not Detected";
  }
  else {
    return v1;
  }
}

void quasar::RunAsyncParams::~RunAsyncParams(quasar::RunAsyncParams *this)
{
  std::__tree<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,std::__map_value_compare<quasar::LmeDataFactoryBase::LmeType,std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,std::less<quasar::LmeDataFactoryBase::LmeType>,true>,std::allocator<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>>>::destroy((uint64_t)this + 768, *((char **)this + 97));
  uint64_t v2 = (void *)*((void *)this + 93);
  if (v2)
  {
    *((void *)this + 94) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 91);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (*((char *)this + 719) < 0) {
    operator delete(*((void **)this + 87));
  }
  if (*((char *)this + 695) < 0) {
    operator delete(*((void **)this + 84));
  }
  if (*((char *)this + 671) < 0) {
    operator delete(*((void **)this + 81));
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 80);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 560));
  uint64_t v8 = (void **)((char *)this + 536);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
  if (*((char *)this + 535) < 0) {
    operator delete(*((void **)this + 64));
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 440));
  uint64_t v8 = (void **)((char *)this + 416);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v8 = (void **)((char *)this + 392);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)this + 368, *((void **)this + 47));
  std::__tree<std::string>::destroy((uint64_t)this + 344, *((char **)this + 44));
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 41);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v8 = (void **)((char *)this + 296);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v8 = (void **)((char *)this + 272);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v8);
  if (*((char *)this + 271) < 0) {
    operator delete(*((void **)this + 31));
  }
  if (*((char *)this + 247) < 0) {
    operator delete(*((void **)this + 28));
  }
  if (*((char *)this + 223) < 0) {
    operator delete(*((void **)this + 25));
  }
  if (*((char *)this + 199) < 0) {
    operator delete(*((void **)this + 22));
  }
  if (*((char *)this + 175) < 0) {
    operator delete(*((void **)this + 19));
  }
  if (*((char *)this + 151) < 0) {
    operator delete(*((void **)this + 16));
  }
  if (*((char *)this + 127) < 0) {
    operator delete(*((void **)this + 13));
  }
  if (*((char *)this + 103) < 0) {
    operator delete(*((void **)this + 10));
  }
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
  unint64_t v6 = (atomic_ullong *)*((void *)this + 2);
  if (v6 && !atomic_fetch_add(v6 + 1, 0xFFFFFFFFFFFFFFFFLL)) {
    (*(void (**)(atomic_ullong *))(*v6 + 16))(v6);
  }
  std::string v7 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

BOOL std::__equal_to::operator()[abi:ne180100]<std::pair<std::string,float>,std::pair<std::string,float>>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v5 = a2[23];
  size_t v6 = *((void *)a2 + 1);
  if ((v5 & 0x80u) == 0) {
    uint64_t v7 = a2[23];
  }
  else {
    uint64_t v7 = *((void *)a2 + 1);
  }
  uint64_t v8 = a3[23];
  int v9 = (char)v8;
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *((void *)a3 + 1);
  }
  if (v7 == v8)
  {
    if (v9 >= 0) {
      uint64_t v10 = a3;
    }
    else {
      uint64_t v10 = *(unsigned __int8 **)a3;
    }
    if ((v5 & 0x80) != 0)
    {
      BOOL v20 = memcmp(*(const void **)a2, v10, v6) == 0;
    }
    else if (v5)
    {
      uint64_t v11 = v5 - 1;
      long long v12 = a2;
      do
      {
        int v14 = *v12++;
        int v13 = v14;
        int v16 = *v10++;
        int v15 = v16;
        BOOL v18 = v11-- != 0;
        BOOL v19 = v13 == v15;
        BOOL v20 = v13 == v15;
      }
      while (v19 && v18);
    }
    else
    {
      BOOL v20 = 1;
    }
  }
  else
  {
    BOOL v20 = 0;
  }
  return *((float *)a2 + 6) == *((float *)a3 + 6) && v20;
}

uint64_t **std::__tree<std::__value_type<std::string,std::shared_ptr<void>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<void>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<void>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::shared_ptr<void>>,std::__tree_node<std::__value_type<std::string,std::shared_ptr<void>>,void *> *,long>>(uint64_t **result, long long *a2, long long *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    size_t v6 = *result;
    uint64_t v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    void v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      uint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v8 = v6;
    }
    int v15 = result;
    int v16 = v8;
    long long v17 = (const void **)v8;
    if (v8)
    {
      int v16 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        int v9 = a2;
        do
        {
          v18[0] = (uint64_t)(v8 + 4);
          v18[1] = (uint64_t)(v8 + 7);
          std::pair<std::string &,std::shared_ptr<void> &>::operator=[abi:ne180100]<std::string const,std::shared_ptr<void>,(void *)0>((uint64_t)v18, (const std::string *)(v9 + 2));
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_leaf_high((uint64_t)v5, v18, v17 + 4);
          std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(v5, v18[0], leaf_high, (uint64_t *)v17);
          long long v17 = (const void **)v16;
          if (v16) {
            int v16 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          }
          uint64_t v11 = (long long *)*((void *)v9 + 1);
          if (v11)
          {
            do
            {
              a2 = v11;
              uint64_t v11 = *(long long **)v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (long long *)*((void *)v9 + 2);
              BOOL v12 = *(void *)a2 == (void)v9;
              int v9 = a2;
            }
            while (!v12);
          }
          uint64_t v8 = (uint64_t *)v17;
          if (v17) {
            BOOL v12 = a2 == a3;
          }
          else {
            BOOL v12 = 1;
          }
          int v9 = a2;
        }
        while (!v12);
      }
    }
    uint64_t result = (uint64_t **)std::__tree<std::__value_type<std::string,std::shared_ptr<void>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<void>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<void>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)std::__tree<std::__value_type<std::string,std::shared_ptr<void>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<void>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<void>>>>::__emplace_multi<std::pair<std::string const,std::shared_ptr<void>> const&>(v5, a2 + 2);
      int v13 = (long long *)*((void *)a2 + 1);
      if (v13)
      {
        do
        {
          int v14 = v13;
          int v13 = *(long long **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          int v14 = (long long *)*((void *)a2 + 2);
          BOOL v12 = *(void *)v14 == (void)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_1B2100590(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::__value_type<std::string,std::shared_ptr<void>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<void>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<void>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string &,std::shared_ptr<void> &>::operator=[abi:ne180100]<std::string const,std::shared_ptr<void>,(void *)0>(uint64_t a1, const std::string *a2)
{
  std::string::operator=(*(std::string **)a1, a2);
  uint64_t v4 = *(std::string::pointer **)(a1 + 8);
  std::string::pointer data = a2[1].__r_.__value_.__l.__data_;
  std::string::size_type size = a2[1].__r_.__value_.__l.__size_;
  if (size) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(size + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)v4[1];
  *uint64_t v4 = data;
  v4[1] = (std::string::pointer)size;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  return a1;
}

uint64_t std::__tree<std::__value_type<std::string,std::shared_ptr<void>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<void>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<void>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(*(void *)a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(*(void *)a1, v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,std::shared_ptr<void>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<void>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<void>>>>::__emplace_multi<std::pair<std::string const,std::shared_ptr<void>> const&>(uint64_t **a1, long long *a2)
{
  std::__tree<std::__value_type<std::string,std::shared_ptr<quasar::ProcessingBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<quasar::ProcessingBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<quasar::ProcessingBlock>>>>::__construct_node<std::pair<std::string const,std::shared_ptr<quasar::ProcessingBlock>> const&>((uint64_t)a1, a2, (uint64_t)v7);
  leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_leaf_high((uint64_t)a1, &v6, (const void **)v7[0] + 4);
  std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v6, leaf_high, v7[0]);
  uint64_t v4 = v7[0];
  v7[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<void>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<void>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return v4;
}

void sub_1B21006C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<void>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<void>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<kaldi::quasar::LmHandle>>::__assign_with_size[abi:ne180100]<std::shared_ptr<kaldi::quasar::LmHandle>*,std::shared_ptr<kaldi::quasar::LmHandle>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  int v9 = *(void **)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4)
  {
    std::vector<std::shared_ptr<quasar::Decoder>>::__vdeallocate((uint64_t *)a1);
    if (a4 >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100]((void *)a1, v12);
    int v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<kaldi::quasar::LmHandle>>,std::shared_ptr<kaldi::quasar::LmHandle>*,std::shared_ptr<kaldi::quasar::LmHandle>*,std::shared_ptr<kaldi::quasar::LmHandle>*>(v8, a2, a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }
  unint64_t v14 = (uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4;
  if (v14 < a4)
  {
    int v15 = &a2[2 * v14];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<quasar::Decoder> *,std::shared_ptr<quasar::Decoder> *,std::shared_ptr<quasar::Decoder> *>((uint64_t)&v20, a2, v15, v9);
    int v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<kaldi::quasar::LmHandle>>,std::shared_ptr<kaldi::quasar::LmHandle>*,std::shared_ptr<kaldi::quasar::LmHandle>*,std::shared_ptr<kaldi::quasar::LmHandle>*>(v8, v15, a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v13;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<quasar::Decoder> *,std::shared_ptr<quasar::Decoder> *,std::shared_ptr<quasar::Decoder> *>((uint64_t)&v21, a2, a3, v9);
  uint64_t v17 = v16;
  uint64_t v18 = *(void *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      BOOL v19 = *(std::__shared_weak_count **)(v18 - 8);
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
      v18 -= 16;
    }
    while (v18 != v17);
  }
  *(void *)(a1 + 8) = v17;
}

void sub_1B210081C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B2100824(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t *kaldi::nnet1::Nnet::QuantizeComponents<kaldi::nnet1::Quantizable8BitComponentItf>(const void ***this)
{
  for (uint64_t i = *this; i != this[1]; ++i)
  {
    if (*i)
    {
      if (v3)
      {
        uint64_t v4 = v3;
        uint64_t v5 = kaldi::nnet1::Quantizable8BitComponentItf::CopyQuantized(v3);
        if (v5)
        {
          uint64_t v6 = (const void *)v5;
          kaldi::nnet1::Component::Delete(v7, (kaldi::nnet1::Component *)1);
          unsigned __int8 *i = v6;
        }
      }
    }
  }
  return kaldi::nnet1::Nnet::CheckDimensions((uint64_t *)this);
}

uint64_t *kaldi::nnet1::Nnet::CheckDimensions(uint64_t *this)
{
  uint64_t v2 = *this;
  uint64_t v1 = this[1];
  if ((unint64_t)(v1 - *this) >= 9)
  {
    uint64_t v3 = this;
    uint64_t v4 = 0;
    while (1)
    {
      uint64_t v5 = (uint64_t **)(v2 + 8 * v4);
      this = *v5;
      if (*((_DWORD *)*v5 + 3) != *((_DWORD *)v5[1] + 2)) {
        break;
      }
      if (v4)
      {
        this = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*this + 24))(this);
        switch(this)
        {
          case 0x10C:
            goto LABEL_30;
          case 0x10E:
            goto LABEL_28;
          case 0x10F:
            goto LABEL_29;
        }
        uint64_t v2 = *v3;
        uint64_t v1 = v3[1];
      }
      unint64_t v6 = v4 + 2;
      ++v4;
      if (v6 >= (v1 - v2) >> 3)
      {
        if ((unint64_t)(v1 - v2) <= 8) {
          return this;
        }
        this = (uint64_t *)(*(uint64_t (**)(void))(**(void **)(v1 - 8) + 24))(*(void *)(v1 - 8));
        switch(this)
        {
          case 0x10F:
LABEL_29:
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
            std::operator<<[abi:ne180100]<std::char_traits<char>>(v22, "The compressed word vec component can only be the first component");
            break;
          case 0x10E:
LABEL_28:
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
            std::operator<<[abi:ne180100]<std::char_traits<char>>(v22, "The word multivec component can only be the first component");
            break;
          case 0x10C:
LABEL_30:
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
            std::operator<<[abi:ne180100]<std::char_traits<char>>(v22, "The word vec component can only be the first component");
            break;
          default:
            return this;
        }
LABEL_31:
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22);
      }
    }
    uint64_t v19 = v4;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
    uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Dimension mismatch between output/input of components ", 54);
    uint64_t v8 = (kaldi::nnet1::Component *)(*(uint64_t (**)(void))(**(void **)(*v3 + 8 * v19) + 24))(*(void *)(*v3 + 8 * v19));
    kaldi::nnet1::Component::TypeToMarker(v8, &v21);
    if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v9 = &v21;
    }
    else {
      int v9 = (std::string *)v21.__r_.__value_.__r.__words[0];
    }
    if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v21.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v21.__r_.__value_.__l.__size_;
    }
    uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v9, size);
    unint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" and ", 5);
    uint64_t v13 = *(void *)(*v3 + 8 * v19 + 8);
    unint64_t v14 = (kaldi::nnet1::Component *)(*(uint64_t (**)(uint64_t))(*(void *)v13 + 24))(v13);
    kaldi::nnet1::Component::TypeToMarker(v14, &v20);
    if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v15 = &v20;
    }
    else {
      int v15 = (std::string *)v20.__r_.__value_.__r.__words[0];
    }
    if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v16 = HIBYTE(v20.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v16 = v20.__r_.__value_.__l.__size_;
    }
    uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v15, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)", ", 2);
    uint64_t v18 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" <--> ", 6);
    std::ostream::operator<<();
    std::string::~string(&v20);
    std::string::~string(&v21);
    goto LABEL_31;
  }
  return this;
}

void sub_1B2100C1C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a23);
}

uint64_t *kaldi::nnet1::Nnet::QuantizeComponents<kaldi::nnet1::Quantizable16BitComponentItf>(const void ***this)
{
  for (uint64_t i = *this; i != this[1]; ++i)
  {
    if (*i)
    {
      if (v3)
      {
        uint64_t v4 = v3;
        uint64_t v5 = kaldi::nnet1::Quantizable16BitComponentItf::CopyQuantized(v3);
        if (v5)
        {
          unint64_t v6 = (const void *)v5;
          kaldi::nnet1::Component::Delete(v7, (kaldi::nnet1::Component *)1);
          unsigned __int8 *i = v6;
        }
      }
    }
  }
  return kaldi::nnet1::Nnet::CheckDimensions((uint64_t *)this);
}

void kaldi::nnet1::NnetTrainOptions::~NnetTrainOptions(kaldi::nnet1::NnetTrainOptions *this)
{
}

void kaldi::nnet1::HistoryOptions::~HistoryOptions(kaldi::nnet1::HistoryOptions *this)
{
}

void kaldi::nnet1::RecurrentNnetTrainOptions::~RecurrentNnetTrainOptions(kaldi::nnet1::RecurrentNnetTrainOptions *this)
{
}

void non-virtual thunk to'kaldi::nnet1::RecurrentNnetTrainOptions::~RecurrentNnetTrainOptions(kaldi::nnet1::RecurrentNnetTrainOptions *this)
{
}

double kaldi::nnet1::NnetCorrPacker::NnetCorrPacker(kaldi::nnet1::NnetCorrPacker *this)
{
  *(_DWORD *)this = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((void *)this + 5) = -1082130432;
  return result;
}

uint64_t kaldi::nnet1::Nnet::GetComponent(kaldi::nnet1::Nnet *this, int a2)
{
  return *(void *)(*(void *)this + 8 * a2);
}

void kaldi::nnet1::Nnet::Nnet(kaldi::nnet1::Nnet *this, const kaldi::nnet1::Nnet *a2)
{
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  operator new();
}

void sub_1B2101090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)(v12 + 120);
  std::vector<std::vector<kaldi::CuMatrix<float>>>::__destroy_vector::operator()[abi:ne180100](&a12);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&a12);
  a12 = (void **)(v12 + 72);
  std::vector<std::vector<kaldi::CuMatrix<float>>>::__destroy_vector::operator()[abi:ne180100](&a12);
  unint64_t v14 = *(void **)(v12 + 48);
  if (v14)
  {
    *(void *)(v12 + 56) = v14;
    operator delete(v14);
  }
  int v15 = *(void **)(v12 + 24);
  if (v15)
  {
    *(void *)(v12 + 32) = v15;
    operator delete(v15);
  }
  std::string::size_type v16 = *(void **)v12;
  if (*(void *)v12)
  {
    *(void *)(v12 + 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Nnet::SetTrainOptions(kaldi::nnet1::Nnet *this, const kaldi::nnet1::NnetTrainOptions *lpsrc, int a3)
{
  uint64_t v6 = *(void *)this;
  if ((int)((*((void *)this + 1) - *(void *)this) >> 3) >= 1)
  {
    uint64_t v7 = 0;
    do
    {
      if ((*(unsigned int (**)(void))(**(void **)(v6 + 8 * v7) + 32))(*(void *)(v6 + 8 * v7))) {
        (*(void (**)(void, const kaldi::nnet1::NnetTrainOptions *))(**(void **)(*(void *)this + 8 * v7)
      }
                                                                               + 264))(*(void *)(*(void *)this + 8 * v7), lpsrc);
      ++v7;
      uint64_t v6 = *(void *)this;
    }
    while (v7 < (int)((*((void *)this + 1) - *(void *)this) >> 3));
  }
  uint64_t v9 = *((void *)this + 18);
  if (v8)
  {
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
    operator new();
  }
  long long v10 = *(_OWORD *)((char *)lpsrc + 8);
  *(_OWORD *)(v9 + 23) = *(_OWORD *)((char *)lpsrc + 23);
  *(_OWORD *)(v9 + 8) = v10;
  if (a3 && kaldi::g_kaldi_verbose_level >= 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v12, 2);
    uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"a regular trainer option. ", 26);
    kaldi::nnet1::operator<<(v11, *((void *)this + 18));
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v12);
  }
  if (a3)
  {
    kaldi::nnet1::Nnet::ResetInternalBuffers(this);
    kaldi::nnet1::Nnet::ResetRecurrentFlag(this);
  }
}

void sub_1B2101424(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Nnet::ResetBuffersAndStates(kaldi::nnet1::Nnet *this)
{
  kaldi::nnet1::Nnet::ResetInternalBuffers(this);
  kaldi::nnet1::Nnet::ResetRecurrentFlag(this);
}

void kaldi::nnet1::Nnet::Read(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v14 = 0;
  uint64_t v4 = (kaldi::Input *)kaldi::Input::Input(v13, a2, &v14);
  uint64_t v5 = (uint64_t *)kaldi::Input::Stream(v4);
  kaldi::nnet1::Nnet::Read((uint64_t **)a1, v5, v14, 0);
  kaldi::Input::Close((kaldi::Input *)v13);
  if (((*(void *)(a1 + 8) - *(void *)a1) & 0x7FFFFFFF8) == 0 && kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
    uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"The network '", 13);
    int v8 = *(char *)(a2 + 23);
    if (v8 >= 0) {
      uint64_t v9 = a2;
    }
    else {
      uint64_t v9 = *(void *)a2;
    }
    if (v8 >= 0) {
      uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v10 = *(void *)(a2 + 8);
    }
    uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"' is empty.", 11);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
  }
  kaldi::Input::~Input((kaldi::Input *)v13);
}

void sub_1B2101558(_Unwind_Exception *a1)
{
  kaldi::Input::~Input((kaldi::Input *)(v1 - 48));
  _Unwind_Resume(a1);
}

void *kaldi::nnet1::Nnet::SetGradientNormalization(void *result, uint64_t a2, int a3, int a4, float a5)
{
  uint64_t v7 = result;
  if (a3)
  {
    int v8 = (const void **)result[3];
    if (v8 != (const void **)result[4])
    {
      do
      {
        uint64_t v9 = (char *)*v8;
        uint64_t v10 = *(void *)*v8;
        if (v11) {
          double result = (void *)kaldi::nnet1::ParallelComponent::SetGradientNormalization((uint64_t)v11, a2, 1, a5);
        }
        else {
          double result = (void *)(*(uint64_t (**)(char *, uint64_t, float))(*(void *)&v9[*(void *)(v10 - 24)]
        }
                                                                               + 240))(&v9[*(void *)(v10 - 24)], a2, a5);
        ++v8;
      }
      while (v8 != (const void **)v7[4]);
    }
  }
  else
  {
    if (a4) {
      int v12 = -2;
    }
    else {
      int v12 = -1;
    }
    int v13 = v12 + ((result[1] - *result) >> 3);
    if (v13 >= 0)
    {
      uint64_t v14 = 0;
      uint64_t v15 = (v13 + 1);
      do
      {
        double result = *(void **)(*v7 + 8 * v14);
        if (result)
        {
          if (result) {
            double result = (void *)(*(uint64_t (**)(void *, uint64_t, float))(*result + 240))(result, a2, a5);
          }
        }
        ++v14;
      }
      while (v15 != v14);
    }
  }
  return result;
}

void kaldi::nnet1::Nnet::SetFreezeComponents(void *a1, int **a2)
{
  uint64_t v4 = a1 + 21;
  std::vector<BOOL>::resize((uint64_t)(a1 + 21), (uint64_t)(a1[1] - *a1) >> 3, 0);
  unint64_t v5 = a1[22];
  if (v5)
  {
    uint64_t v9 = a1[21];
    int v10 = 0;
    std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v9, v5);
  }
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)"Freezing specified components (1-based):", 40);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v9);
  }
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  if (*a2 != v7)
  {
    int v8 = kaldi::g_kaldi_verbose_level;
    do
    {
      *(void *)(*v4 + (((unint64_t)(*v6 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << (*v6
                                                                                                - 1);
      if ((v8 & 0x80000000) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v9);
        std::ostream::operator<<();
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v9);
        int v8 = kaldi::g_kaldi_verbose_level;
      }
      ++v6;
    }
    while (v6 != v7);
  }
}

void sub_1B2101864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

kaldi::nnet1::Nnet *kaldi::nnet1::Nnet::operator=(kaldi::nnet1::Nnet *this, uint64_t *a2)
{
  if (a2 != (uint64_t *)this)
  {
    kaldi::nnet1::Nnet::Destroy(this);
    uint64_t v4 = *a2;
    if ((int)((unint64_t)(a2[1] - *a2) >> 3) < 1)
    {
      *((void *)this + 1) = *(void *)this;
    }
    else
    {
      uint64_t v5 = 0;
      do
      {
        uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(v4 + 8 * v5) + 16))(*(void *)(v4 + 8 * v5));
        uint64_t v7 = v6;
        uint64_t v9 = (uint64_t *)*((void *)this + 1);
        unint64_t v8 = *((void *)this + 2);
        if ((unint64_t)v9 >= v8)
        {
          uint64_t v11 = ((uint64_t)v9 - *(void *)this) >> 3;
          if ((unint64_t)(v11 + 1) >> 61) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v12 = v8 - *(void *)this;
          uint64_t v13 = v12 >> 2;
          if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
            uint64_t v13 = v11 + 1;
          }
          if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v14 = v13;
          }
          if (v14) {
            uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)this + 16, v14);
          }
          else {
            uint64_t v15 = 0;
          }
          std::string::size_type v16 = (uint64_t *)&v15[8 * v11];
          *std::string::size_type v16 = v7;
          int v10 = v16 + 1;
          uint64_t v18 = *(char **)this;
          uint64_t v17 = (char *)*((void *)this + 1);
          if (v17 != *(char **)this)
          {
            do
            {
              uint64_t v19 = *((void *)v17 - 1);
              v17 -= 8;
              *--std::string::size_type v16 = v19;
            }
            while (v17 != v18);
            uint64_t v17 = *(char **)this;
          }
          *(void *)this = v16;
          *((void *)this + 1) = v10;
          *((void *)this + 2) = &v15[8 * v14];
          if (v17) {
            operator delete(v17);
          }
        }
        else
        {
          *uint64_t v9 = v6;
          int v10 = v9 + 1;
        }
        *((void *)this + 1) = v10;
        ++v5;
        uint64_t v4 = *a2;
      }
      while (v5 < (int)((unint64_t)(a2[1] - *a2) >> 3));
    }
    kaldi::nnet1::Nnet::SetTrainOptions(this, (const kaldi::nnet1::NnetTrainOptions *)a2[18], 1);
    kaldi::nnet1::Nnet::ResetInternalBuffers(this);
    kaldi::nnet1::Nnet::ResetRecurrentFlag(this);
  }
  return this;
}

uint64_t kaldi::nnet1::Nnet::Destroy(kaldi::nnet1::Nnet *this)
{
  uint64_t v2 = *(void *)this;
  if ((int)((*((void *)this + 1) - *(void *)this) >> 3) >= 1)
  {
    uint64_t v3 = 0;
    do
    {
      kaldi::nnet1::Component::Delete(*(void **)(v2 + 8 * v3++), (kaldi::nnet1::Component *)1);
      uint64_t v2 = *(void *)this;
    }
    while (v3 < (int)((*((void *)this + 1) - *(void *)this) >> 3));
  }
  uint64_t v4 = (kaldi::CuWorkspace **)*((void *)this + 44);
  uint64_t v5 = (kaldi::CuWorkspace **)*((void *)this + 45);
  while (v4 != v5)
  {
    if (*v4)
    {
      kaldi::CuWorkspace::~CuWorkspace(*v4);
      MEMORY[0x1B3EA8670]();
    }
    ++v4;
  }
  std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)this, 0);
  std::vector<std::vector<kaldi::CuMatrix<float>>>::resize((uint64_t *)this + 9, 0);
  std::vector<std::vector<kaldi::CuMatrix<float>>>::resize((uint64_t *)this + 15, 0);
  std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)this + 352, 0);
  uint64_t result = *((void *)this + 20);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    *((void *)this + 20) = 0;
  }
  return result;
}

void kaldi::nnet1::Nnet::~Nnet(kaldi::nnet1::Nnet *this)
{
  kaldi::nnet1::Nnet::Destroy(this);
  uint64_t v2 = *((void *)this + 18);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 44);
  if (v3)
  {
    *((void *)this + 45) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 40);
  if (v4) {
    free(v4);
  }
  *((void *)this + 39) = 0;
  *((void *)this + 40) = 0;
  *((void *)this + 41) = 0;
  uint64_t v5 = (void *)*((void *)this + 35);
  if (v5)
  {
    *((void *)this + 36) = v5;
    operator delete(v5);
  }
  int v10 = (void **)((char *)this + 256);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v10);
  kaldi::CuVector<float>::~CuVector((void *)this + 28);
  kaldi::CuVector<float>::~CuVector((void *)this + 24);
  uint64_t v6 = (void *)*((void *)this + 21);
  if (v6) {
    operator delete(v6);
  }
  int v10 = (void **)((char *)this + 120);
  std::vector<std::vector<kaldi::CuMatrix<float>>>::__destroy_vector::operator()[abi:ne180100](&v10);
  int v10 = (void **)((char *)this + 96);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v10);
  int v10 = (void **)((char *)this + 72);
  std::vector<std::vector<kaldi::CuMatrix<float>>>::__destroy_vector::operator()[abi:ne180100](&v10);
  uint64_t v7 = (void *)*((void *)this + 6);
  if (v7)
  {
    *((void *)this + 7) = v7;
    operator delete(v7);
  }
  unint64_t v8 = (void *)*((void *)this + 3);
  if (v8)
  {
    *((void *)this + 4) = v8;
    operator delete(v8);
  }
  uint64_t v9 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v9;
    operator delete(v9);
  }
}

uint64_t kaldi::nnet1::Nnet::ResetHistoryStateIfExists(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(uint64_t **)(result + 48);
  if (v4 != *(uint64_t **)(result + 56))
  {
    uint64_t v8 = result;
    do
    {
      uint64_t v9 = *v4++;
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v9 + 24))(v9, a2, a3, a4);
    }
    while (v4 != *(uint64_t **)(v8 + 56));
  }
  return result;
}

uint64_t kaldi::nnet1::Nnet::ResetHistoryStateIfExists(uint64_t this)
{
  uint64_t v1 = *(uint64_t **)(this + 48);
  if (v1 != *(uint64_t **)(this + 56))
  {
    uint64_t v2 = this;
    do
    {
      uint64_t v3 = *v1++;
      this = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 32))(v3);
    }
    while (v1 != *(uint64_t **)(v2 + 56));
  }
  return this;
}

uint64_t kaldi::nnet1::Nnet::HistoryStateSize(kaldi::nnet1::Nnet *this)
{
  uint64_t v1 = (uint64_t *)*((void *)this + 6);
  if (v1 == *((uint64_t **)this + 7)) {
    return 0;
  }
  LODWORD(v3) = 0;
  do
  {
    uint64_t v4 = *v1++;
    uint64_t v3 = (*(unsigned int (**)(uint64_t))(*(void *)v4 + 16))(v4) + v3;
  }
  while (v1 != *((uint64_t **)this + 7));
  return v3;
}

uint64_t kaldi::nnet1::Nnet::GetHistoryState(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(uint64_t **)(result + 48);
  uint64_t v3 = *(uint64_t **)(result + 56);
  if (v4 != v3)
  {
    if ((char *)v3 - (char *)v4 == 8)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)*v4 + 40);
      return v7();
    }
    else
    {
      uint64_t v8 = result;
      LODWORD(v9) = 0;
      do
      {
        uint64_t v11 = *v4++;
        uint64_t v9 = (*(unsigned int (**)(uint64_t))(*(void *)v11 + 16))(v11) + v9;
      }
      while (v4 != *(uint64_t **)(v8 + 56));
      kaldi::CuMatrix<float>::Resize((int32x2_t *)a2, v10, v9, 1, 0);
      long long v20 = 0u;
      long long v19 = 0u;
      uint64_t v18 = &unk_1F0A51768;
      char v21 = 0;
      uint64_t v12 = *(void **)(v8 + 48);
      if (v12 != *(void **)(v8 + 56))
      {
        int v13 = 0;
        do
        {
          (*(void (**)(void, void **, uint64_t))(*(void *)*v12 + 40))(*v12, &v18, a3);
          uint64_t v14 = *(void *)(a2 + 8) + 4 * v13;
          int v15 = *(_DWORD *)(a2 + 28) - v13;
          uint64_t v16 = *(void *)(a2 + 32);
          LODWORD(v17[2]) = DWORD2(v19);
          *(void *)((char *)&v17[2] + 4) = *(void *)(a2 + 20);
          HIDWORD(v17[3]) = v15;
          void v17[4] = v16;
          v17[0] = &unk_1F0A472A0;
          v17[1] = v14;
          kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)v17, (uint64_t)&v18, 111);
          v17[0] = &unk_1F0A472A0;
          memset(&v17[1], 0, 32);
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)v17);
          v13 += DWORD2(v19);
          ++v12;
        }
        while (v12 != *(void **)(v8 + 56));
      }
      return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v18);
    }
  }
  return result;
}

void sub_1B2101FE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  *uint64_t v2 = 0u;
  v2[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va1);
  _Unwind_Resume(a1);
}

void *kaldi::nnet1::Nnet::GetHistoryState(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (uint64_t *)result[6];
  uint64_t v4 = (uint64_t *)result[7];
  uint64_t v6 = v4 - v5;
  if (v6)
  {
    if (v6 == 1)
    {
      uint64_t v10 = *(uint64_t (**)(void))(*(void *)*v5 + 48);
      return (void *)v10();
    }
    else
    {
      uint64_t v11 = result;
      if (v5 == v4)
      {
        uint64_t v12 = 0;
      }
      else
      {
        LODWORD(v12) = 0;
        do
        {
          uint64_t v13 = *v5++;
          uint64_t v12 = (*(unsigned int (**)(uint64_t))(*(void *)v13 + 16))(v13) + v12;
        }
        while (v5 != (uint64_t *)v11[7]);
      }
      kaldi::CuVector<float>::Resize(a2, v12, 1);
      v18[1] = 0;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      v18[0] = &unk_1F0A517C0;
      uint64_t v14 = (void *)v11[6];
      if (v14 != (void *)v11[7])
      {
        int v15 = 0;
        do
        {
          (*(void (**)(void, void *, uint64_t, uint64_t))(*(void *)*v14 + 48))(*v14, v18, a3, a4);
          uint64_t v16 = *(void *)(a2 + 8) + 4 * v15;
          v17[0] = &unk_1F0A472D0;
          v17[1] = v16;
          v17[2] = v19;
          v17[3] = *(void *)(a2 + 24);
          kaldi::CuVectorBase<float>::CopyFromVec(v17, (uint64_t)v18);
          v15 += v19;
          ++v14;
        }
        while (v14 != (void *)v11[7]);
      }
      return kaldi::CuVector<float>::~CuVector(v18);
    }
  }
  return result;
}

void sub_1B2102208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  kaldi::CuVector<float>::~CuVector((uint64_t *)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Nnet::SetHistoryState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(uint64_t **)(a1 + 48);
  uint64_t v3 = *(uint64_t **)(a1 + 56);
  uint64_t v5 = v3 - v4;
  if (v5)
  {
    if (v5 == 1)
    {
      uint64_t v8 = *(void (**)(void))(*(void *)*v4 + 56);
      v8();
    }
    else
    {
      if (v4 == v3)
      {
        int v10 = 0;
        uint64_t v4 = *(uint64_t **)(a1 + 56);
      }
      else
      {
        int v10 = 0;
        do
        {
          uint64_t v11 = *v4++;
          v10 += (*(uint64_t (**)(uint64_t))(*(void *)v11 + 16))(v11);
        }
        while (v4 != *(uint64_t **)(a1 + 56));
      }
      if (*(_DWORD *)(a2 + 16) != v10)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v20);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"the network has history size ", 29);
        uint64_t v19 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" , but the input history data has dimension ", 44);
        std::ostream::operator<<();
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20);
      }
      uint64_t v12 = *(uint64_t **)(a1 + 48);
      if (v12 != v4)
      {
        int v13 = 0;
        do
        {
          int v14 = (*(uint64_t (**)(void))(*(void *)*v12 + 16))();
          uint64_t v15 = *v12;
          uint64_t v16 = *(void *)(a2 + 8) + 4 * v13;
          int v17 = *(_DWORD *)(a2 + 28) - v13;
          uint64_t v18 = *(void *)(a2 + 32);
          LODWORD(v20[2]) = v14;
          *(void *)((char *)&v20[2] + 4) = *(void *)(a2 + 20);
          HIDWORD(v20[3]) = v17;
          void v20[4] = v18;
          v20[0] = &unk_1F0A472A0;
          v20[1] = v16;
          (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v15 + 56))(v15, v20, a3);
          v13 += v14;
          v20[0] = &unk_1F0A472A0;
          memset(&v20[1], 0, 32);
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)v20);
          ++v12;
        }
        while (v12 != *(uint64_t **)(a1 + 56));
      }
    }
  }
}

void sub_1B2102478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  *uint64_t v9 = 0u;
  v9[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Nnet::SetHistoryState(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(uint64_t **)(result + 48);
  uint64_t v4 = *(uint64_t **)(result + 56);
  uint64_t v6 = v4 - v5;
  if (v6)
  {
    if (v6 == 1)
    {
      int v10 = *(uint64_t (**)(void))(*(void *)*v5 + 64);
      return v10();
    }
    else
    {
      uint64_t v11 = result;
      if (v5 == v4)
      {
        int v12 = 0;
        uint64_t v5 = *(uint64_t **)(result + 56);
      }
      else
      {
        int v12 = 0;
        do
        {
          uint64_t v13 = *v5++;
          uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 16))(v13);
          v12 += result;
        }
        while (v5 != *(uint64_t **)(v11 + 56));
      }
      if (*(_DWORD *)(a2 + 16) != v12)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v20);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"the network has history size ", 29);
        uint64_t v19 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" , but the input history data has dimension ", 44);
        std::ostream::operator<<();
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20);
      }
      int v14 = *(uint64_t **)(v11 + 48);
      if (v14 != v5)
      {
        int v15 = 0;
        do
        {
          unsigned int v16 = (*(uint64_t (**)(void))(*(void *)*v14 + 16))();
          uint64_t v17 = *v14++;
          uint64_t v18 = *(void *)(a2 + 8) + 4 * v15;
          v15 += v16;
          v20[0] = &unk_1F0A472D0;
          v20[1] = v18;
          v20[2] = v16;
          v20[3] = *(void *)(a2 + 24);
          uint64_t result = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v17 + 64))(v17, v20, a3, a4);
        }
        while (v14 != *(uint64_t **)(v11 + 56));
      }
    }
  }
  return result;
}

uint64_t kaldi::nnet1::Nnet::SetInternalBoundary(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(uint64_t **)(result + 24);
  if (v3 != *(uint64_t **)(result + 32))
  {
    uint64_t v6 = result;
    do
    {
      uint64_t v7 = *v3++;
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 96))(v7, a2, a3);
    }
    while (v3 != *(uint64_t **)(v6 + 32));
  }
  return result;
}

uint64_t kaldi::nnet1::ParallelComponent::SetGradientNormalization(uint64_t result, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v4 = *(void *)(result + 184);
  if (v4 != *(void *)(result + 192))
  {
    uint64_t v8 = result;
    do
    {
      uint64_t result = kaldi::nnet1::Nnet::SetGradientNormalization(v4, a2, a3, 0, a4);
      v4 += 376;
    }
    while (v4 != *(void *)(v8 + 192));
  }
  return result;
}

int32x2_t *kaldi::nnet1::Nnet::Backpropagate(int32x2_t *result, int32x2_t *a2, int32x2_t *a3, uint64_t a4)
{
  uint64_t v7 = (_DWORD **)*result;
  int32x2_t v6 = result[1];
  unint64_t v8 = *(void *)&v6 - *(void *)result;
  unint64_t v9 = v8 >> 3;
  if ((v8 >> 3))
  {
    uint64_t v11 = (void ***)result;
    if (a3) {
      int v12 = a3;
    }
    else {
      int v12 = a2;
    }
    int32x2_t v13 = v12[4];
    uint64_t v14 = a4;
    uint64_t v15 = 24 * a4;
    unsigned int v16 = *(int32x2_t **)(*(void *)&result[9] + v15 + 8);
    uint64_t v17 = *(void *)(*(void *)&result[9] + v15);
    if ((int32x2_t *)v17 != v16)
    {
      uint64_t v18 = *(int32x2_t **)(*(void *)&result[9] + 24 * a4);
      do
      {
        void v18[4] = v13;
        v18 += 6;
      }
      while (v18 != v16);
    }
    uint64_t v19 = *(int32x2_t **)(*(void *)&result[15] + 24 * a4 + 8);
    uint64_t v20 = *(int32x2_t **)(*(void *)&result[15] + 24 * a4);
    if (v20 != v19)
    {
      char v21 = *(int32x2_t **)(*(void *)&result[15] + 24 * a4);
      do
      {
        void v21[4] = v13;
        v21 += 6;
      }
      while (v21 != v19);
    }
    if (v9 == 1)
    {
      kaldi::nnet1::Component::Backpropagate(*v7, v17, v17 + 48, (uint64_t)a2, a3, a4);
      uint64_t result = (int32x2_t *)(*(uint64_t (**)(void *))(*(void *)**v11 + 32))(**v11);
      if (!result) {
        return result;
      }
      long long v22 = **v11;
      if (v22) {
      long long v23 = *(uint64_t (**)(void))(*(void *)v22 + 232);
      }
      goto LABEL_35;
    }
    uint64_t v24 = (v8 << 29) - 0x100000000;
    kaldi::nnet1::Component::Backpropagate(*(_DWORD **)(*(void *)&v6 - 8), v17 + 48 * SHIDWORD(v24), v17 + 48 * (int)v9, (uint64_t)a2, &v20[6 * (int)(((v8 << 29) - 0x200000000) >> 32)], a4);
    if ((*(unsigned int (**)(void))(**(void **)((char *)*v11 + (v24 >> 29)) + 32))(*(void **)((char *)*v11 + (v24 >> 29))))
    {
      long long v25 = (*v11)[v24 >> 32];
      if (v25) {
      (*(void (**)(void *, uint64_t, int32x2_t *, int32x2_t, uint64_t))(*(void *)v25 + 232))(v25, (uint64_t)v11[9][3 * v14] + 48 * SHIDWORD(v24), a2, v13, a4);
      }
    }
    uint64_t v26 = (v9 - 2);
    if ((int)v26 >= 1)
    {
      uint64_t v27 = 48 * (v9 - 2);
      do
      {
        uint64_t v28 = (uint64_t)v11[9][3 * v14] + v27;
        long long v29 = (int32x2_t *)v11[15][3 * v14];
        uint64_t v30 = v26 - 1;
        kaldi::nnet1::Component::Backpropagate((*v11)[v26], v28, v28 + 48, (uint64_t)&v29[(unint64_t)v27 / 8], &v29[6 * (v26 - 1)], a4);
        if ((*(unsigned int (**)(void *))(*(void *)(*v11)[v26] + 32))((*v11)[v26]))
        {
          unint64_t v31 = (*v11)[v26];
          if (v31) {
          (*(void (**)(void *, char *, char *, int32x2_t, uint64_t))(*(void *)v31 + 232))(v31, (char *)v11[9][3 * v14] + v27, (char *)v11[15][3 * v14] + v27, v13, a4);
          }
        }
        v27 -= 48;
        --v26;
      }
      while ((unint64_t)(v30 + 1) > 1);
    }
    uint64_t v32 = (uint64_t)v11[9][3 * v14];
    kaldi::nnet1::Component::Backpropagate(**v11, v32, v32 + 48, (uint64_t)v11[15][3 * v14], a3, a4);
    uint64_t result = (int32x2_t *)(*(uint64_t (**)(void *))(*(void *)**v11 + 32))(**v11);
    if (result)
    {
      unint64_t v33 = **v11;
      if (v33) {
      long long v23 = *(uint64_t (**)(void))(*(void *)v33 + 232);
      }
LABEL_35:
      return (int32x2_t *)v23();
    }
  }
  else if (a3)
  {
    return kaldi::CuMatrix<float>::operator=(a3, a2);
  }
  return result;
}

void kaldi::nnet1::Nnet::Update(kaldi::nnet1::Nnet *this, void *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)this;
  uint64_t v3 = *((void *)this + 1);
  if (*(void *)this != v3)
  {
    unint64_t v8 = 0;
    do
    {
      if (*((void *)this + 22) == (v3 - *(void *)this) >> 3
        && ((*(void *)(*((void *)this + 21) + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
      {
        if (kaldi::g_kaldi_verbose_level >= 2)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v11, 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"freezing component ", 19);
          unint64_t v9 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" (1-based) in this Update", 25);
          kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v11);
        }
      }
      else if ((*(unsigned int (**)(void))(**(void **)v4 + 32))())
      {
        int v10 = *(void **)v4;
        if (*(void *)v4) {
        (*(void (**)(void *, void *, uint64_t))(*(void *)v10 + 256))(v10, a2, a3);
        }
      }
      v4 += 8;
      ++v8;
      uint64_t v3 = *((void *)this + 1);
    }
    while (v4 != v3);
  }
}

void sub_1B2102E78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void kaldi::nnet1::Nnet::Feedforward(uint64_t *a1, uint64_t a2, int32x2_t *a3, int a4, int a5)
{
  unint64_t v7 = (unint64_t)(a1[1] - *a1) >> 3;
  if (a4 == -1) {
    int v8 = (unint64_t)(a1[1] - *a1) >> 3;
  }
  else {
    int v8 = a4;
  }
  int v9 = v8 + a5;
  if (v8 + a5 > (int)v7)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Components to propagate (startCompIdx=", 38);
    long long v25 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)", num_comps=", 12);
    uint64_t v26 = (void *)std::ostream::operator<<();
    uint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)") must not be greater than ", 27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"#components in the network (", 28);
    uint64_t v28 = (void *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v28, ").");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v29);
  }
  if (v8) {
    BOOL v12 = v7 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  if (v12)
  {
    kaldi::CuMatrix<float>::Resize(a3, *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16), 1, 0);
    kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)a3, a2, 111);
  }
  else if (v8 == 1)
  {
    int32x2_t v13 = *(_DWORD **)(*a1 + 8 * a5);
    kaldi::nnet1::Component::Propagate(v13, a2, a3, 0);
  }
  else
  {
    std::vector<kaldi::CuMatrix<float>>::vector(v29, 2uLL);
    int32x2_t v14 = a3[4];
    uint64_t v15 = (int32x2_t *)v29[0];
    *(int32x2_t *)(v29[0] + 32) = v14;
    v15[10] = v14;
    kaldi::nnet1::Component::Propagate(*(_DWORD **)(*a1 + 8 * a5), a2, v15, 0);
    BOOL v16 = 0;
    uint64_t v17 = a5;
    int v18 = v9 - 2;
    if (a5 > v9 - 2) {
      int v18 = a5;
    }
    uint64_t v19 = v18;
    for (uint64_t i = ((uint64_t)a5 << 32) + 0x100000000; ; i += 0x100000000)
    {
      uint64_t v21 = *a1;
      uint64_t v22 = v29[0] + 48 * v16;
      if (v19 == v17) {
        break;
      }
      BOOL v23 = ~v16;
      BOOL v16 = !v16;
      uint64_t v24 = *(_DWORD **)(v21 + 8 * v17++ + 8);
      kaldi::nnet1::Component::Propagate(v24, v22, (int32x2_t *)(v29[0] + 48 * v23), 0);
    }
    kaldi::nnet1::Component::Propagate(*(_DWORD **)(v21 + (i >> 29)), v22, a3, 0);
    uint64_t v30 = (void **)v29;
    std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v30);
  }
}

void *kaldi::nnet1::Nnet::Feedforward(void *a1, uint64_t a2, void *a3, int a4)
{
  uint64_t v5 = a2;
  unint64_t v7 = (_DWORD **)*a1;
  uint64_t v8 = (a1[1] - *a1) >> 3;
  int v9 = v8;
  if (a4 != -1)
  {
    if ((int)v8 < a4)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Components to propagate to (", 28);
      BOOL v16 = (void *)std::ostream::operator<<();
      uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)") must not be greater than ", 27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"#components in the network (", 28);
      int v18 = (void *)std::ostream::operator<<();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v18, ").");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19);
    }
    int v9 = a4;
  }
  if (v9) {
    BOOL v10 = v8 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10)
  {
    kaldi::CuVector<float>::Resize((uint64_t)a3, *(unsigned int *)(a2 + 16), 1);
    return kaldi::CuVectorBase<float>::CopyFromVec(a3, v5);
  }
  else
  {
    uint64_t v12 = (v9 - 1);
    if (v9 == 1)
    {
      int32x2_t v13 = *v7;
    }
    else
    {
      kaldi::nnet1::Component::Propagate(*v7, a2, a1[12]);
      if (v9 >= 3)
      {
        uint64_t v14 = 1;
        do
        {
          kaldi::nnet1::Component::Propagate(*(_DWORD **)(*a1 + 8 * v14), a1[12] + 32 * !(v14 & 1), a1[12] + 32 * (v14 & 1));
          ++v14;
        }
        while (v12 != v14);
      }
      else
      {
        LODWORD(v12) = 1;
      }
      int32x2_t v13 = *(_DWORD **)(*a1 + 8 * v12);
      int v15 = (v12 - 1) & 1;
      if ((int)v12 < 1) {
        int v15 = -v15;
      }
      a2 = a1[12] + 32 * v15;
    }
    return (void *)kaldi::nnet1::Component::Propagate(v13, a2, (uint64_t)a3);
  }
}

uint64_t kaldi::nnet1::Component::Propagate(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  if (a1[2] != *(_DWORD *)(a2 + 16))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Non-matching dims! ", 19);
    int v9 = (kaldi::nnet1::Component *)(*(uint64_t (**)(_DWORD *))(*(void *)a1 + 24))(a1);
    kaldi::nnet1::Component::TypeToMarker(v9, &v14);
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      BOOL v10 = &v14;
    }
    else {
      BOOL v10 = (std::string *)v14.__r_.__value_.__r.__words[0];
    }
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v14.__r_.__value_.__l.__size_;
    }
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v10, size);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" input-dim : ", 13);
    int32x2_t v13 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" data : ", 8);
    std::ostream::operator<<();
    std::string::~string(&v14);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v15);
  }
  kaldi::CuVector<float>::Resize(a3, a1[3], 0);
  int32x2_t v6 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(*(void *)a1 + 120);
  return v6(a1, a2, a3);
}

uint64_t kaldi::nnet1::Nnet::OutputDim(kaldi::nnet1::Nnet *this)
{
  return *(unsigned int *)(*(void *)(*((void *)this + 1) - 8) + 12);
}

uint64_t kaldi::nnet1::Nnet::InputDim(kaldi::nnet1::Nnet *this)
{
  return *(unsigned int *)(**(void **)this + 8);
}

void *kaldi::nnet1::Nnet::GetHistoricalComponents@<X0>(kaldi::nnet1::Nnet *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<kaldi::nnet1::HistoricalComponent *>::__init_with_size[abi:ne180100]<kaldi::nnet1::HistoricalComponent **,kaldi::nnet1::HistoricalComponent **>(a2, *((const void **)this + 6), *((void *)this + 7), (uint64_t)(*((void *)this + 7) - *((void *)this + 6)) >> 3);
}

void kaldi::nnet1::Nnet::AppendComponent(kaldi::nnet1::Nnet *this, kaldi::nnet1::Component *a2)
{
  uint64_t v4 = (void *)*((void *)this + 1);
  if (*((void *)this + 22) == ((uint64_t)v4 - *(void *)this) >> 3)
  {
    char v17 = 0;
    std::vector<BOOL>::push_back((uint64_t)this + 168, &v17);
    uint64_t v4 = (void *)*((void *)this + 1);
  }
  unint64_t v5 = *((void *)this + 2);
  if ((unint64_t)v4 >= v5)
  {
    uint64_t v7 = ((uint64_t)v4 - *(void *)this) >> 3;
    if ((unint64_t)(v7 + 1) >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = v5 - *(void *)this;
    uint64_t v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1)) {
      uint64_t v9 = v7 + 1;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10) {
      uint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)this + 16, v10);
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v12 = &v11[8 * v7];
    int32x2_t v13 = &v11[8 * v10];
    *(void *)uint64_t v12 = a2;
    int32x2_t v6 = v12 + 8;
    int v15 = *(char **)this;
    std::string v14 = (char *)*((void *)this + 1);
    if (v14 != *(char **)this)
    {
      do
      {
        uint64_t v16 = *((void *)v14 - 1);
        v14 -= 8;
        *((void *)v12 - 1) = v16;
        v12 -= 8;
      }
      while (v14 != v15);
      std::string v14 = *(char **)this;
    }
    *(void *)this = v12;
    *((void *)this + 1) = v6;
    *((void *)this + 2) = v13;
    if (v14) {
      operator delete(v14);
    }
  }
  else
  {
    *uint64_t v4 = a2;
    int32x2_t v6 = v4 + 1;
  }
  *((void *)this + 1) = v6;
  kaldi::nnet1::Nnet::ResetInternalBuffers(this);
  kaldi::nnet1::Nnet::ResetRecurrentFlag(this);
}

void kaldi::nnet1::Nnet::RemoveComponent(kaldi::nnet1::Nnet *this, int a2)
{
  uint64_t v5 = *(void *)this;
  uint64_t v4 = (void **)*((void *)this + 1);
  unint64_t v6 = *((void *)this + 22);
  if (v6 == ((uint64_t)v4 - *(void *)this) >> 3)
  {
    uint64_t v7 = *((void *)this + 21);
    uint64_t v8 = a2 >> 6;
    if (a2 < 0) {
      uint64_t v8 = -(uint64_t)((63 - a2) >> 6);
    }
    uint64_t v9 = v7 + 8 * v8;
    uint64_t v10 = a2 & 0x3F;
    uint64_t v11 = v10 | (v8 << 6);
    uint64_t v12 = v11 - 63;
    if (v11 < 63) {
      uint64_t v12 = v10 | (v8 << 6);
    }
    uint64_t v13 = v12 >> 6;
    uint64_t v14 = v8 & 0x3FFFFFFFFFFFFFFLL;
    if (v11 < 0) {
      uint64_t v14 = v13;
    }
    int v15 = (unint64_t *)(v9 + (((unint64_t)(v10 + 1) >> 3) & 8));
    unsigned int v16 = (v10 + 1) & 0x3F;
    uint64_t v17 = v7 + 8 * (v6 >> 6);
    unsigned int v18 = v6 & 0x3F;
    uint64_t v23 = v7 + 8 * v14;
    int v24 = v10;
    if (v10 == v16) {
      std::__copy_aligned[abi:ne180100]<std::vector<BOOL>,true>(v15, v16, v17, v18, (uint64_t)&v23, (uint64_t)v22);
    }
    else {
      std::__copy_unaligned[abi:ne180100]<std::vector<BOOL>,true>(v15, v16, v17, v18, (uint64_t)&v23, (uint64_t)v22);
    }
    --*((void *)this + 22);
    uint64_t v5 = *(void *)this;
    uint64_t v4 = (void **)*((void *)this + 1);
  }
  uint64_t v19 = (void **)(v5 + 8 * a2);
  uint64_t v20 = *v19;
  int64_t v21 = (char *)v4 - (char *)(v19 + 1);
  if (v4 != v19 + 1) {
    memmove(v19, v19 + 1, (char *)v4 - (char *)(v19 + 1));
  }
  *((void *)this + 1) = (char *)v19 + v21;
  kaldi::nnet1::Component::Delete(v20, (kaldi::nnet1::Component *)1);
  kaldi::nnet1::Nnet::ResetInternalBuffers(this);
  kaldi::nnet1::Nnet::ResetRecurrentFlag(this);
}

uint64_t kaldi::nnet1::Nnet::ReleaseComponent(kaldi::nnet1::Nnet *this, int a2)
{
  uint64_t v5 = *(void *)this;
  uint64_t v4 = (char *)*((void *)this + 1);
  unint64_t v6 = *((void *)this + 22);
  if (v6 == (uint64_t)&v4[-*(void *)this] >> 3)
  {
    uint64_t v7 = *((void *)this + 21);
    uint64_t v8 = a2 >> 6;
    if (a2 < 0) {
      uint64_t v8 = -(uint64_t)((63 - a2) >> 6);
    }
    uint64_t v9 = v7 + 8 * v8;
    uint64_t v10 = a2 & 0x3F;
    uint64_t v11 = v10 | (v8 << 6);
    uint64_t v12 = v11 - 63;
    if (v11 < 63) {
      uint64_t v12 = v10 | (v8 << 6);
    }
    uint64_t v13 = v12 >> 6;
    uint64_t v14 = v8 & 0x3FFFFFFFFFFFFFFLL;
    if (v11 < 0) {
      uint64_t v14 = v13;
    }
    int v15 = (unint64_t *)(v9 + (((unint64_t)(v10 + 1) >> 3) & 8));
    unsigned int v16 = (v10 + 1) & 0x3F;
    uint64_t v17 = v7 + 8 * (v6 >> 6);
    unsigned int v18 = v6 & 0x3F;
    uint64_t v24 = v7 + 8 * v14;
    int v25 = v10;
    if (v10 == v16) {
      std::__copy_aligned[abi:ne180100]<std::vector<BOOL>,true>(v15, v16, v17, v18, (uint64_t)&v24, (uint64_t)v23);
    }
    else {
      std::__copy_unaligned[abi:ne180100]<std::vector<BOOL>,true>(v15, v16, v17, v18, (uint64_t)&v24, (uint64_t)v23);
    }
    --*((void *)this + 22);
    uint64_t v5 = *(void *)this;
    uint64_t v4 = (char *)*((void *)this + 1);
  }
  uint64_t v19 = (char *)(v5 + 8 * a2);
  uint64_t v20 = *(void *)v19;
  int64_t v21 = v4 - (v19 + 8);
  if (v4 != v19 + 8) {
    memmove(v19, v19 + 8, v4 - (v19 + 8));
  }
  *((void *)this + 1) = &v19[v21];
  kaldi::nnet1::Nnet::ResetInternalBuffers(this);
  kaldi::nnet1::Nnet::ResetRecurrentFlag(this);
  return v20;
}

uint64_t kaldi::nnet1::Nnet::GetParams(kaldi::nnet1::Nnet *a1, void **a2)
{
  uint64_t v4 = kaldi::nnet1::Nnet::NumParams(a1);
  kaldi::Vector<float>::Resize(a2, v4, 0);
  uint64_t v5 = *(void *)a1;
  if (*((void *)a1 + 1) != *(void *)a1)
  {
    unint64_t v6 = 0;
    int v7 = 0;
    do
    {
      if ((*(unsigned int (**)(void))(**(void **)(v5 + 8 * v6) + 32))(*(void *)(v5 + 8 * v6)))
      {
        if (!v8) {
          __cxa_bad_cast();
        }
        uint64_t v14 = 0;
        uint64_t v15 = 0;
        uint64_t v16 = 0;
        (*(void (**)(void *, const void **))(*(void *)v8 + 184))(v8, &v14);
        uint64_t v12 = 0;
        uint64_t v13 = 0;
        uint64_t v11 = (uint64_t)*a2 + 4 * v7;
        LODWORD(v12) = v15;
        kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v11, &v14);
        int v9 = v15;
        kaldi::Vector<float>::Destroy((uint64_t)&v14);
        v7 += v9;
      }
      ++v6;
      uint64_t v5 = *(void *)a1;
    }
    while (v6 < (uint64_t)(*((void *)a1 + 1) - *(void *)a1) >> 3);
  }
  return kaldi::nnet1::Nnet::NumParams(a1);
}

void sub_1B2103980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Nnet::NumParams(kaldi::nnet1::Nnet *this)
{
  uint64_t v1 = *(void *)this;
  if (*((void *)this + 1) == *(void *)this) {
    return 0;
  }
  unint64_t v3 = 0;
  uint64_t v4 = 0;
  do
  {
    if ((*(unsigned int (**)(void))(**(void **)(v1 + 8 * v3) + 32))(*(void *)(v1 + 8 * v3)))
    {
      uint64_t v5 = *(void **)(*(void *)this + 8 * v3);
      if (v5) {
      uint64_t v4 = (*(unsigned int (**)(void *))(*(void *)v5 + 176))(v5) + v4;
      }
    }
    ++v3;
    uint64_t v1 = *(void *)this;
  }
  while (v3 < (uint64_t)(*((void *)this + 1) - *(void *)this) >> 3);
  return v4;
}

uint64_t kaldi::nnet1::Nnet::SetParams(kaldi::nnet1::Nnet *a1, void *a2)
{
  kaldi::nnet1::Nnet::NumParams(a1);
  uint64_t v4 = *(void *)a1;
  if (*((void *)a1 + 1) != *(void *)a1)
  {
    unint64_t v5 = 0;
    int v6 = 0;
    do
    {
      if ((*(unsigned int (**)(void))(**(void **)(v4 + 8 * v5) + 32))(*(void *)(v4 + 8 * v5)))
      {
        if (!v7) {
          __cxa_bad_cast();
        }
        uint64_t v8 = v7;
        int v9 = (*(uint64_t (**)(void *))(*(void *)v7 + 176))(v7);
        uint64_t v13 = 0;
        uint64_t v14 = 0;
        int v10 = v9 + v6;
        uint64_t v12 = *a2 + 4 * v6;
        LODWORD(v13) = v9;
        (*(void (**)(void *, uint64_t *))(*(void *)v8 + 192))(v8, &v12);
        int v6 = v10;
      }
      ++v5;
      uint64_t v4 = *(void *)a1;
    }
    while (v5 < (uint64_t)(*((void *)a1 + 1) - *(void *)a1) >> 3);
  }
  return kaldi::nnet1::Nnet::NumParams(a1);
}

float kaldi::nnet1::Nnet::SumParams(kaldi::nnet1::Nnet *this)
{
  uint64_t v1 = *(void *)this;
  if (*((void *)this + 1) == *(void *)this) {
    return 0.0;
  }
  unint64_t v3 = 0;
  float v4 = 0.0;
  do
  {
    if ((*(unsigned int (**)(void))(**(void **)(v1 + 8 * v3) + 32))(*(void *)(v1 + 8 * v3)))
    {
      if (!v5) {
        __cxa_bad_cast();
      }
      float v4 = v4 + (*(float (**)(void *))(*(void *)v5 + 208))(v5);
    }
    ++v3;
    uint64_t v1 = *(void *)this;
  }
  while (v3 < (uint64_t)(*((void *)this + 1) - *(void *)this) >> 3);
  return v4;
}

void kaldi::nnet1::Nnet::ResetInternalBuffers(kaldi::nnet1::Nnet *this)
{
  uint64_t v2 = (void *)((char *)this + 72);
  std::vector<std::vector<kaldi::CuMatrix<float>>>::resize((uint64_t *)this + 9, *(unsigned int *)(*((void *)this + 18) + 32));
  unint64_t v3 = (void *)((char *)this + 120);
  std::vector<std::vector<kaldi::CuMatrix<float>>>::resize((uint64_t *)this + 15, *(int *)(*((void *)this + 18) + 32));
  unint64_t v4 = *((void *)this + 1) - *(void *)this;
  int v5 = *(_DWORD *)(*((void *)this + 18) + 32);
  if ((int)(v4 >> 3) <= 0)
  {
    if (v5 >= 1)
    {
      uint64_t v26 = 0;
      do
      {
        uint64_t v27 = *v2 + 24 * v26;
        uint64_t v30 = *(void **)(v27 + 8);
        long long v29 = (void *)(v27 + 8);
        uint64_t v28 = v30;
        unint64_t v31 = *(void **)(*v2 + 24 * v26);
        if (v30 != v31)
        {
          uint64_t v32 = v28 - 6;
          unint64_t v33 = v28 - 6;
          unint64_t v34 = v28 - 6;
          do
          {
            uint64_t v35 = *v34;
            v34 -= 6;
            (*(void (**)(void *))(v35 + 16))(v33);
            v32 -= 6;
            BOOL v16 = v33 == v31;
            unint64_t v33 = v34;
          }
          while (!v16);
        }
        *long long v29 = v31;
        uint64_t v36 = *v3 + 24 * v26;
        unint64_t v39 = *(void **)(v36 + 8);
        int v38 = (void *)(v36 + 8);
        unsigned int v37 = v39;
        unint64_t v40 = *(void **)(*v3 + 24 * v26);
        if (v39 != v40)
        {
          unint64_t v41 = v37 - 6;
          long long v42 = v37 - 6;
          long long v43 = v37 - 6;
          do
          {
            uint64_t v44 = *v43;
            v43 -= 6;
            (*(void (**)(void *))(v44 + 16))(v42);
            v41 -= 6;
            BOOL v16 = v42 == v40;
            long long v42 = v43;
          }
          while (!v16);
        }
        void *v38 = v40;
        ++v26;
      }
      while (v26 < *(int *)(*((void *)this + 18) + 32));
    }
    unint64_t v46 = (void *)*((void *)this + 12);
    uint64_t v45 = (void *)*((void *)this + 13);
    if (v45 != v46)
    {
      uint64_t v47 = v45 - 4;
      unint64_t v48 = v45 - 4;
      long long v49 = v45 - 4;
      do
      {
        uint64_t v50 = *v49;
        v49 -= 4;
        (*(void (**)(void *))(v50 + 8))(v48);
        v47 -= 4;
        BOOL v16 = v48 == v46;
        unint64_t v48 = v49;
      }
      while (!v16);
    }
    *((void *)this + 13) = v46;
  }
  else
  {
    if (v5 >= 1)
    {
      uint64_t v6 = 0;
      do
      {
        uint64_t v7 = *v2 + 24 * v6;
        int v10 = *(void **)(v7 + 8);
        int v9 = (void *)(v7 + 8);
        uint64_t v8 = v10;
        uint64_t v11 = *(void **)(*v2 + 24 * v6);
        if (v10 != v11)
        {
          uint64_t v12 = v8 - 6;
          uint64_t v13 = v8 - 6;
          uint64_t v14 = v8 - 6;
          do
          {
            uint64_t v15 = *v14;
            v14 -= 6;
            (*(void (**)(void *))(v15 + 16))(v13);
            v12 -= 6;
            BOOL v16 = v13 == v11;
            uint64_t v13 = v14;
          }
          while (!v16);
        }
        *int v9 = v11;
        uint64_t v17 = *v3 + 24 * v6;
        uint64_t v20 = *(void **)(v17 + 8);
        uint64_t v19 = (void *)(v17 + 8);
        unsigned int v18 = v20;
        int64_t v21 = *(void **)(*v3 + 24 * v6);
        if (v20 != v21)
        {
          uint64_t v22 = v18 - 6;
          uint64_t v23 = v18 - 6;
          uint64_t v24 = v18 - 6;
          do
          {
            uint64_t v25 = *v24;
            v24 -= 6;
            (*(void (**)(void *))(v25 + 16))(v23);
            v22 -= 6;
            BOOL v16 = v23 == v21;
            uint64_t v23 = v24;
          }
          while (!v16);
        }
        *uint64_t v19 = v21;
        std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(*((void *)this + 9) + 24 * v6), (((*((void *)this + 1) - *(void *)this) << 29) + 0x100000000) >> 32);
        std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(*((void *)this + 15) + 24 * v6++), (((*((void *)this + 1) - *(void *)this) << 29) - 0x100000000) >> 32);
      }
      while (v6 < *(int *)(*((void *)this + 18) + 32));
      unint64_t v4 = *((void *)this + 1) - *(void *)this;
    }
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)this + 12, (uint64_t)((v4 << 29) + 0x100000000) >> 32);
  }
}

void std::vector<std::vector<kaldi::CuMatrix<float>>>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v3 = (void **)a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<kaldi::CuMatrix<float>>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    while (v3 != (void **)v7)
    {
      v3 -= 3;
      uint64_t v8 = v3;
      std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
    }
    a1[1] = v7;
  }
}

uint64_t kaldi::nnet1::Nnet::IsComponentFrozen(kaldi::nnet1::Nnet *this, int a2)
{
  if (*((void *)this + 22) <= (unint64_t)a2) {
    return 0;
  }
  else {
    return (*(void *)(*((void *)this + 21) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a2) & 1;
  }
}

void kaldi::nnet1::Nnet::Init(kaldi::nnet1::Nnet *a1, uint64_t a2, uint64_t a3)
{
  kaldi::Input::Input(v6, a2, 0);
  BOOL v5 = (uint64_t *)kaldi::Input::Stream((kaldi::Input *)v6);
  kaldi::nnet1::Nnet::Init(a1, v5, a3);
  kaldi::Input::Close((kaldi::Input *)v6);
  kaldi::Input::~Input((kaldi::Input *)v6);
}

void sub_1B21041A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Input::~Input((kaldi::Input *)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Nnet::Init(kaldi::nnet1::Nnet *a1, uint64_t *a2, uint64_t a3)
{
  kaldi::ExpectToken(a2, 0, "<NnetProto>");
  BOOL v16 = 0;
  size_t v17 = 0;
  uint64_t v18 = 0;
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 2) != 0)
  {
LABEL_26:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Missing </NnetProto> at the end.", 32);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  unint64_t v6 = (std::locale::id *)MEMORY[0x1E4FBA258];
  while (kaldi::PeekToken(a2, 0) != 47)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)));
    uint64_t v7 = std::locale::use_facet((const std::locale *)__p, v6);
    unsigned __int8 v8 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
    std::locale::~locale((std::locale *)__p);
    std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&v16, v8);
    if (kaldi::g_kaldi_verbose_level >= 1)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 1);
      if (v18 >= 0) {
        int v9 = (void **)&v16;
      }
      else {
        int v9 = v16;
      }
      if (v18 >= 0) {
        uint64_t v10 = HIBYTE(v18);
      }
      else {
        uint64_t v10 = v17;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)v9, v10);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
    }
    if (v18 >= 0) {
      size_t v11 = HIBYTE(v18);
    }
    else {
      size_t v11 = v17;
    }
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v11 + 1);
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v12 = __p;
    }
    else {
      uint64_t v12 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
    }
    if (v11)
    {
      if (v18 >= 0) {
        uint64_t v13 = (void **)&v16;
      }
      else {
        uint64_t v13 = v16;
      }
      memmove(v12, v13, v11);
    }
    *(_WORD *)((char *)&v12->__r_.__value_.__l.__data_ + v11) = 10;
    uint64_t v14 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::Init(__p, a3);
    kaldi::nnet1::Nnet::AppendComponent(a1, v14);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 2) != 0) {
      goto LABEL_26;
    }
  }
  kaldi::ExpectToken(a2, 0, "</NnetProto>");
  kaldi::nnet1::Nnet::ResetInternalBuffers(a1);
  kaldi::nnet1::Nnet::ResetRecurrentFlag(a1);
  if (SHIBYTE(v18) < 0) {
    operator delete(v16);
  }
}

void sub_1B2104438(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B2104450(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1B210447CLL);
}

void sub_1B2104468(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void sub_1B2104478(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 97) < 0) {
    operator delete(*(void **)(v1 - 120));
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::Nnet::Read(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = kaldi::nnet1::Component::Read(a2, a3, a4);
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = a1 + 2;
    while (1)
    {
      size_t v11 = a1[1];
      uint64_t v12 = (char *)v11 - (char *)*a1;
      if ((int)((unint64_t)v12 >> 3) >= 1 && *(_DWORD *)(*(v11 - 1) + 12) != *(_DWORD *)(v9 + 8)) {
        break;
      }
      if ((unint64_t)v11 >= *v10)
      {
        uint64_t v14 = v12 >> 3;
        unint64_t v15 = (v12 >> 3) + 1;
        if (v15 >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v16 = *v10 - (void)*a1;
        if (v16 >> 2 > v15) {
          unint64_t v15 = v16 >> 2;
        }
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v15;
        }
        if (v17) {
          uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 2), v17);
        }
        else {
          uint64_t v18 = 0;
        }
        uint64_t v19 = (uint64_t *)&v18[8 * v14];
        *uint64_t v19 = v9;
        uint64_t v13 = v19 + 1;
        int64_t v21 = (char *)*a1;
        uint64_t v20 = (char *)a1[1];
        if (v20 != (char *)*a1)
        {
          do
          {
            uint64_t v22 = *((void *)v20 - 1);
            v20 -= 8;
            *--uint64_t v19 = v22;
          }
          while (v20 != v21);
          uint64_t v20 = (char *)*a1;
        }
        *a1 = v19;
        a1[1] = v13;
        a1[2] = (uint64_t *)&v18[8 * v17];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        *size_t v11 = v9;
        uint64_t v13 = v11 + 1;
      }
      a1[1] = v13;
      uint64_t v9 = kaldi::nnet1::Component::Read(a2, a3, a4);
      if (!v9) {
        goto LABEL_22;
      }
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v25);
    uint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Dimensionality mismatch!", 24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" Previous layer output:", 23);
    uint64_t v24 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" Current layer input:", 21);
    std::ostream::operator<<();
LABEL_29:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v25);
  }
LABEL_22:
  if ((int)((unint64_t)((char *)a1[1] - (char *)*a1) >> 3) <= 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v25);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v25, "Could not read any components");
    goto LABEL_29;
  }
  *((_DWORD *)a1[18] + 2) = 0;
  kaldi::nnet1::Nnet::ResetInternalBuffers((kaldi::nnet1::Nnet *)a1);
  kaldi::nnet1::Nnet::ResetRecurrentFlag((kaldi::nnet1::Nnet *)a1);
}

void kaldi::nnet1::Nnet::Read(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    fst::FstReadOptions::FstReadOptions(__p, a2, 0, 0, 0);
    int v5 = 2;
    kaldi::nnet1::Nnet::ReadMapped(a1, (uint64_t)__p);
  }
  kaldi::nnet1::Nnet::Read(a1, a2);
}

void sub_1B2104738(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::Nnet::ReadMapped(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 160)) {
    kaldi::ReadMapped<kaldi::nnet1::Nnet>(a2);
  }
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "Nnet already mapped from a file");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
}

void sub_1B2104840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void kaldi::ReadMapped<kaldi::nnet1::Nnet>(uint64_t a1)
{
  v18[34] = *MEMORY[0x1E4F143B8];
  char v8 = 0;
  kaldi::Input::Input(v7, a1, &v8);
  if (v8)
  {
    uint64_t v2 = kaldi::Input::Stream((kaldi::Input *)v7);
    std::istream::seekg();
    std::istream::tellg();
    uint64_t v17 = 0;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    std::istream::seekg();
    fst::MappedFile::Map(v2, a1, (fst::MappedFile *)v18[16]);
  }
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v18);
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Memory mapping failed. Not a valid Kaldi binary file: ", 54);
  int v4 = *(char *)(a1 + 23);
  if (v4 >= 0) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = *(void *)a1;
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v6 = *(void *)(a1 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, v5, v6);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v18);
}

void sub_1B2104A48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *kaldi::nnet1::Nnet::Write(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  kaldi::nnet1::Nnet::CheckDimensions(a1);
  kaldi::WriteToken(a2, a3, "<Nnet>");
  if ((a3 & 1) == 0)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)));
    char v8 = std::locale::use_facet(&v13, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
    std::locale::~locale(&v13);
    std::ostream::put();
    std::ostream::flush();
  }
  uint64_t v9 = *a1;
  if ((int)((unint64_t)(a1[1] - *a1) >> 3) >= 1)
  {
    uint64_t v10 = 0;
    do
    {
      kaldi::nnet1::Component::Write(*(void *)(v9 + 8 * v10++), a2, a3, a4);
      uint64_t v9 = *a1;
    }
    while (v10 < (int)((unint64_t)(a1[1] - *a1) >> 3));
  }
  uint64_t result = kaldi::WriteToken(a2, a3, "</Nnet>");
  if ((a3 & 1) == 0)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)));
    long long v12 = std::locale::use_facet(&v13, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
    std::locale::~locale(&v13);
    std::ostream::put();
    return (void *)std::ostream::flush();
  }
  return result;
}

void sub_1B2104C40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t kaldi::nnet1::Nnet::Info(kaldi::nnet1::Nnet *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v31);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"num-components ", 15);
  uint64_t v2 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)));
  unint64_t v3 = std::locale::use_facet((const std::locale *)&v30, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
  std::locale::~locale((std::locale *)&v30);
  std::ostream::put();
  std::ostream::flush();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"input-dim ", 10);
  int v4 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet((const std::locale *)&v30, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale((std::locale *)&v30);
  std::ostream::put();
  std::ostream::flush();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"output-dim ", 11);
  uint64_t v6 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(void *)(*v6 - 24)));
  uint64_t v7 = std::locale::use_facet((const std::locale *)&v30, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
  std::locale::~locale((std::locale *)&v30);
  std::ostream::put();
  std::ostream::flush();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"number-of-parameters ", 21);
  kaldi::nnet1::Nnet::NumParams(this);
  char v8 = (void *)std::ostream::operator<<();
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" millions", 9);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
  uint64_t v10 = std::locale::use_facet((const std::locale *)&v30, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale((std::locale *)&v30);
  std::ostream::put();
  std::ostream::flush();
  if ((int)((*((void *)this + 1) - *(void *)this) >> 3) >= 1)
  {
    uint64_t v11 = 0;
    long long v12 = (std::locale::id *)MEMORY[0x1E4FBA258];
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"component ", 10);
      uint64_t v13 = v11 + 1;
      long long v14 = (void *)std::ostream::operator<<();
      long long v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" : ", 3);
      long long v16 = (kaldi::nnet1::Component *)(*(uint64_t (**)(void))(**(void **)(*(void *)this + 8 * v11)
                                                                         + 24))(*(void *)(*(void *)this + 8 * v11));
      kaldi::nnet1::Component::TypeToMarker(v16, &v30);
      if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v17 = &v30;
      }
      else {
        uint64_t v17 = (std::string *)v30.__r_.__value_.__r.__words[0];
      }
      if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v30.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v30.__r_.__value_.__l.__size_;
      }
      uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v17, size);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)", input-dim ", 12);
      uint64_t v20 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)", output-dim ", 13);
      int64_t v21 = (void *)std::ostream::operator<<();
      uint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)", ", 2);
      (*(void (**)(void **__return_ptr))(**(void **)(*(void *)this + 8 * v11) + 64))(__p);
      if ((v29 & 0x80u) == 0) {
        uint64_t v23 = __p;
      }
      else {
        uint64_t v23 = (void **)__p[0];
      }
      if ((v29 & 0x80u) == 0) {
        uint64_t v24 = v29;
      }
      else {
        uint64_t v24 = (uint64_t)__p[1];
      }
      uint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v23, v24);
      std::ios_base::getloc((const std::ios_base *)((char *)v25 + *(void *)(*v25 - 24)));
      uint64_t v26 = std::locale::use_facet(&v34, v12);
      ((void (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 10);
      std::locale::~locale(&v34);
      std::ostream::put();
      std::ostream::flush();
      if ((char)v29 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v30.__r_.__value_.__l.__data_);
      }
      ++v11;
    }
    while (v13 < (int)((*((void *)this + 1) - *(void *)this) >> 3));
  }
  std::stringbuf::str();
  v31[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v31 + *(void *)(v31[0] - 2std::__tree<int>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v31[1] = MEMORY[0x1E4FBA470] + 16;
  if (v32 < 0) {
    operator delete((void *)v31[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](&v33);
}

void sub_1B2105250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, std::locale a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
}

void *kaldi::nnet1::Nnet::InfoGradient@<X0>(kaldi::nnet1::Nnet *this@<X0>, void *a2@<X8>)
{
  unint64_t v3 = (uint64_t *)*((void *)this + 15);
  if (*((uint64_t **)this + 16) == v3
    || (uint64_t v4 = *v3, *(void *)(*((void *)this + 15) + 8) == v4)
    || !(4 * *(_DWORD *)(v4 + 20) * *(_DWORD *)(v4 + 24)))
  {
    return std::string::basic_string[abi:ne180100]<0>(a2, "### No gradient info");
  }
  else
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"### Gradient stats :\n", 21);
    if ((int)((*((void *)this + 1) - *(void *)this) >> 3) >= 1)
    {
      uint64_t v6 = 0;
      uint64_t v7 = (std::locale::id *)MEMORY[0x1E4FBA258];
      do
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Component ", 10);
        uint64_t v8 = v6 + 1;
        uint64_t v9 = (void *)std::ostream::operator<<();
        uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" : ", 3);
        uint64_t v11 = (kaldi::nnet1::Component *)(*(uint64_t (**)(void))(**(void **)(*(void *)this + 8 * v6)
                                                                           + 24))(*(void *)(*(void *)this + 8 * v6));
        kaldi::nnet1::Component::TypeToMarker(v11, &v23);
        if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v12 = &v23;
        }
        else {
          long long v12 = (std::string *)v23.__r_.__value_.__r.__words[0];
        }
        if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v23.__r_.__value_.__l.__size_;
        }
        long long v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v12, size);
        long long v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", ", 2);
        (*(void (**)(void **__return_ptr))(**(void **)(*(void *)this + 8 * v6) + 72))(__p);
        if ((v22 & 0x80u) == 0) {
          long long v16 = __p;
        }
        else {
          long long v16 = (void **)__p[0];
        }
        if ((v22 & 0x80u) == 0) {
          uint64_t v17 = v22;
        }
        else {
          uint64_t v17 = (uint64_t)__p[1];
        }
        uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
        std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(void *)(*v18 - 24)));
        uint64_t v19 = std::locale::use_facet(&v27, v7);
        ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
        std::locale::~locale(&v27);
        std::ostream::put();
        std::ostream::flush();
        if ((char)v22 < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v23.__r_.__value_.__l.__data_);
        }
        ++v6;
      }
      while (v8 < (int)((*((void *)this + 1) - *(void *)this) >> 3));
    }
    std::stringbuf::str();
    v24[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v24 + *(void *)(v24[0] - 2std::__tree<int>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v24[1] = MEMORY[0x1E4FBA470] + 16;
    if (v25 < 0) {
      operator delete((void *)v24[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (void *)MEMORY[0x1B3EA8520](&v26);
  }
}

void sub_1B2105658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
}

void *kaldi::nnet1::Nnet::InfoPropagate@<X0>(kaldi::nnet1::Nnet *this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = (uint64_t *)*((void *)this + 9);
  if (*((uint64_t **)this + 10) == v2
    || (uint64_t v3 = *v2, *(void *)(*((void *)this + 9) + 8) == v3)
    || !(4 * *(_DWORD *)(v3 + 20) * *(_DWORD *)(v3 + 24)))
  {
    return std::string::basic_string[abi:ne180100]<0>(a2, "### Forward propagation buffers not initialized");
  }
  else
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v36);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"### Forward propagation buffer content, note in the parallel GPU training, this only includes the first subbatch content :\n", 123);
    uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"[0] output of <Input> ", 22);
    kaldi::nnet1::MomentStatistics<float>(**((void **)this + 9));
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)p_p, size);
    std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(*v8 - 24)));
    uint64_t v9 = std::locale::use_facet(&v32, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
    std::locale::~locale(&v32);
    std::ostream::put();
    std::ostream::flush();
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if ((int)((*((void *)this + 1) - *(void *)this) >> 3) >= 1)
    {
      uint64_t v10 = 0;
      uint64_t v11 = 48;
      long long v12 = (std::locale::id *)MEMORY[0x1E4FBA258];
      do
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"[", 1);
        uint64_t v13 = v10 + 1;
        long long v14 = (void *)std::ostream::operator<<();
        long long v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"] output of ", 12);
        long long v16 = (kaldi::nnet1::Component *)(*(uint64_t (**)(void))(**(void **)(*(void *)this + 8 * v10)
                                                                           + 24))(*(void *)(*(void *)this + 8 * v10));
        kaldi::nnet1::Component::TypeToMarker(v16, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v17 = &__p;
        }
        else {
          uint64_t v17 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v18 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v18 = __p.__r_.__value_.__l.__size_;
        }
        uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v17, v18);
        kaldi::nnet1::MomentStatistics<float>(**((void **)this + 9) + v11);
        if ((v34 & 0x80u) == 0) {
          locale = &v32;
        }
        else {
          locale = v32.__locale_;
        }
        if ((v34 & 0x80u) == 0) {
          uint64_t v21 = v34;
        }
        else {
          uint64_t v21 = v33;
        }
        unsigned __int8 v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)locale, v21);
        std::ios_base::getloc((const std::ios_base *)((char *)v22 + *(void *)(*v22 - 24)));
        std::string v23 = std::locale::use_facet(&v39, v12);
        ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
        std::locale::~locale(&v39);
        std::ostream::put();
        std::ostream::flush();
        if ((char)v34 < 0) {
          operator delete(v32.__locale_);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if ((*(unsigned int (**)(void))(**(void **)(*(void *)this + 8 * v10) + 24))(*(void *)(*(void *)this + 8 * v10)) == 2055)
        {
          uint64_t v24 = *(void **)(*(void *)this + 8 * v10);
          if (v24) {
          (*(void (**)(std::string *__return_ptr))(*(void *)v24 + 248))(&__p);
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            char v25 = &__p;
          }
          else {
            char v25 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v26 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v26 = __p.__r_.__value_.__l.__size_;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)v25, v26);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        if ((*(unsigned int (**)(void))(**(void **)(*(void *)this + 8 * v10) + 24))(*(void *)(*(void *)this + 8 * v10)) == 274)
        {
          std::locale v27 = *(void **)(*(void *)this + 8 * v10);
          if (v27) {
          (*(void (**)(std::string *__return_ptr))(*(void *)v27 + 280))(&__p);
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v28 = &__p;
          }
          else {
            uint64_t v28 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v29 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v29 = __p.__r_.__value_.__l.__size_;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)v28, v29);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        v11 += 48;
        ++v10;
      }
      while (v13 < (int)((*((void *)this + 1) - *(void *)this) >> 3));
    }
    std::stringbuf::str();
    v36[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v36 + *(void *)(v36[0] - 2std::__tree<int>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v36[1] = MEMORY[0x1E4FBA470] + 16;
    if (v37 < 0) {
      operator delete((void *)v36[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (void *)MEMORY[0x1B3EA8520](&v38);
  }
}

void sub_1B2105CA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
}

void *kaldi::nnet1::Nnet::InfoBackPropagate@<X0>(kaldi::nnet1::Nnet *this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = (uint64_t *)*((void *)this + 15);
  if (*((uint64_t **)this + 16) == v2
    || (uint64_t v3 = *v2, *(void *)(*((void *)this + 15) + 8) == v3)
    || !(4 * *(_DWORD *)(v3 + 20) * *(_DWORD *)(v3 + 24)))
  {
    return std::string::basic_string[abi:ne180100]<0>(a2, "### Backward propagation buffers not initialized");
  }
  else
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"### Backward propagation buffer content, Note in multi subbatch case, only the first subbatch is reported :\n", 108);
    if (*(void *)(*((void *)this + 15) + 8) != **((void **)this + 15))
    {
      uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"[0] diff of <Input> ", 20);
      kaldi::nnet1::MomentStatistics<float>(**((void **)this + 15));
      uint64_t v6 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? &__p
         : (std::string *)__p.__r_.__value_.__r.__words[0];
      uint64_t v7 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? HIBYTE(__p.__r_.__value_.__r.__words[2])
         : __p.__r_.__value_.__l.__size_;
      uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, v7);
      std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(*v8 - 24)));
      uint64_t v9 = std::locale::use_facet(&v34, MEMORY[0x1E4FBA258]);
      ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
      std::locale::~locale(&v34);
      std::ostream::put();
      std::ostream::flush();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    if ((int)((*((void *)this + 1) - *(void *)this) >> 3) >= 1)
    {
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      long long v12 = (std::locale::id *)MEMORY[0x1E4FBA258];
      do
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"[", 1);
        uint64_t v13 = v11 + 1;
        long long v14 = (void *)std::ostream::operator<<();
        long long v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"] diff-output of ", 17);
        long long v16 = (kaldi::nnet1::Component *)(*(uint64_t (**)(void))(**(void **)(*(void *)this + 8 * v11)
                                                                           + 24))(*(void *)(*(void *)this + 8 * v11));
        kaldi::nnet1::Component::TypeToMarker(v16, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)p_p, size);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v11 < (((*((void *)this + 1) - *(void *)this) << 29) - 0x100000000) >> 32)
        {
          kaldi::nnet1::MomentStatistics<float>(**((void **)this + 15) + v10);
          uint64_t v19 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &__p
              : (std::string *)__p.__r_.__value_.__r.__words[0];
          uint64_t v20 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? HIBYTE(__p.__r_.__value_.__r.__words[2])
              : __p.__r_.__value_.__l.__size_;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v19, v20);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        std::ios_base::getloc((const std::ios_base *)((char *)v31 + *(void *)(v31[0] - 24)));
        uint64_t v21 = std::locale::use_facet((const std::locale *)&__p, v12);
        ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
        std::locale::~locale((std::locale *)&__p);
        std::ostream::put();
        std::ostream::flush();
        if ((*(unsigned int (**)(void))(**(void **)(*(void *)this + 8 * v11) + 24))(*(void *)(*(void *)this + 8 * v11)) == 2055)
        {
          unsigned __int8 v22 = *(void **)(*(void *)this + 8 * v11);
          if (v22) {
          (*(void (**)(std::string *__return_ptr))(*(void *)v22 + 256))(&__p);
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string v23 = &__p;
          }
          else {
            std::string v23 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v24 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v24 = __p.__r_.__value_.__l.__size_;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v23, v24);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        if ((*(unsigned int (**)(void))(**(void **)(*(void *)this + 8 * v11) + 24))(*(void *)(*(void *)this + 8 * v11)) == 274)
        {
          char v25 = *(void **)(*(void *)this + 8 * v11);
          if (v25) {
          (*(void (**)(std::string *__return_ptr))(*(void *)v25 + 288))(&__p);
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v26 = &__p;
          }
          else {
            std::string::size_type v26 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v27 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v27 = __p.__r_.__value_.__l.__size_;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v26, v27);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        v10 += 48;
        ++v11;
      }
      while (v13 < (int)((*((void *)this + 1) - *(void *)this) >> 3));
    }
    std::stringbuf::str();
    v31[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v31 + *(void *)(v31[0] - 2std::__tree<int>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v31[1] = MEMORY[0x1E4FBA470] + 16;
    if (v32 < 0) {
      operator delete((void *)v31[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (void *)MEMORY[0x1B3EA8520](&v33);
  }
}

void sub_1B2106340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
}

uint64_t kaldi::nnet1::Nnet::IsRnn(kaldi::nnet1::Nnet *this)
{
  return *((unsigned __int8 *)this + 152);
}

BOOL kaldi::nnet1::Nnet::HasHistory(kaldi::nnet1::Nnet *this)
{
  return *((void *)this + 6) != *((void *)this + 7);
}

uint64_t kaldi::nnet1::Nnet::IsBidirectionalRnn(kaldi::nnet1::Nnet *this)
{
  return *((unsigned __int8 *)this + 153);
}

void kaldi::nnet1::Nnet::CheckWeights(kaldi::nnet1::Nnet *this)
{
  uint64_t v1 = *(void *)this;
  if (*((void *)this + 1) - *(void *)this >= 9uLL)
  {
    uint64_t v3 = 0;
    do
    {
      if ((*(unsigned int (**)(void))(**(void **)(v1 + 8 * v3) + 32))(*(void *)(v1 + 8 * v3))) {
        kaldi::nnet1::UpdatableComponent::CheckParams(*(kaldi::nnet1::UpdatableComponent **)(*(void *)this + 8 * v3));
      }
      uint64_t v1 = *(void *)this;
      unint64_t v4 = v3 + 2;
      ++v3;
    }
    while (v4 < (uint64_t)(*((void *)this + 1) - *(void *)this) >> 3);
  }
}

void kaldi::nnet1::Nnet::ResetRecurrentFlag(kaldi::nnet1::Nnet *this)
{
  uint64_t v1 = (char **)((char *)this + 24);
  uint64_t v3 = (char **)((char *)this + 48);
  uint64_t v2 = *((void *)this + 6);
  *((void *)this + 4) = *((void *)this + 3);
  *((void *)this + 7) = v2;
  *((_WORD *)this + 76) = 0;
  uint64_t v4 = *(void *)this;
  if (*((void *)this + 1) != *(void *)this)
  {
    unint64_t v6 = 0;
    long long v42 = (char *)this + 64;
    long long v43 = (char *)this + 40;
    while (1)
    {
      uint64_t v7 = *(const void **)(v4 + 8 * v6);
      if (!v7) {
        goto LABEL_38;
      }
      if (!v8) {
        break;
      }
      uint64_t v9 = v8;
      kaldi::nnet1::ParallelComponent::GetHistoricalComponents(v8, &v46);
      std::vector<kaldi::nnet1::RecurrentBaseComponent *>::__insert_with_size[abi:ne180100]<std::__wrap_iter<kaldi::nnet1::RecurrentBaseComponent **>,std::__wrap_iter<kaldi::nnet1::RecurrentBaseComponent **>>((uint64_t)v3, *((void *)this + 7), (char *)v46, v47, (v47 - (unsigned char *)v46) >> 3);
      if (*((unsigned char *)this + 153))
      {
        BOOL v10 = 1;
      }
      else
      {
        uint64_t v16 = *((void *)v9 + 23);
        uint64_t v17 = *((void *)v9 + 24);
        if (v16 == v17)
        {
          BOOL v10 = 0;
        }
        else
        {
          BOOL v10 = 0;
          do
          {
            BOOL v10 = v10 || *(unsigned char *)(v16 + 153) != 0;
            v16 += 376;
          }
          while (v16 != v17);
        }
      }
      *((unsigned char *)this + 153) = v10;
      kaldi::nnet1::ParallelComponent::GetRecurrentComponents(v9, &__p);
      std::vector<kaldi::nnet1::RecurrentBaseComponent *>::__insert_with_size[abi:ne180100]<std::__wrap_iter<kaldi::nnet1::RecurrentBaseComponent **>,std::__wrap_iter<kaldi::nnet1::RecurrentBaseComponent **>>((uint64_t)v1, *((void *)this + 4), (char *)__p, v45, (v45 - (unsigned char *)__p) >> 3);
      if (__p)
      {
        uint64_t v45 = (char *)__p;
        operator delete(__p);
      }
      if (v46)
      {
        uint64_t v47 = (char *)v46;
        operator delete(v46);
      }
LABEL_59:
      ++v6;
      uint64_t v4 = *(void *)this;
      if (v6 >= (uint64_t)(*((void *)this + 1) - *(void *)this) >> 3)
      {
        if (*((void *)this + 3) != *((void *)this + 4)) {
          *((unsigned char *)this + 152) = 1;
        }
        return;
      }
    }
    if (v11)
    {
      long long v12 = v11;
      if ((*(int (**)(void *))(*(void *)v11 + 16))(v11) >= 1)
      {
        long long v14 = (void *)*((void *)this + 7);
        unint64_t v13 = *((void *)this + 8);
        if ((unint64_t)v14 >= v13)
        {
          uint64_t v18 = ((char *)v14 - *v3) >> 3;
          if ((unint64_t)(v18 + 1) >> 61) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v19 = v13 - (void)*v3;
          uint64_t v20 = v19 >> 2;
          if (v19 >> 2 <= (unint64_t)(v18 + 1)) {
            uint64_t v20 = v18 + 1;
          }
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v21 = v20;
          }
          if (v21) {
            unsigned __int8 v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v42, v21);
          }
          else {
            unsigned __int8 v22 = 0;
          }
          std::string v23 = &v22[8 * v18];
          *(void *)std::string v23 = v12;
          long long v15 = v23 + 8;
          char v25 = (char *)*((void *)this + 6);
          std::string::size_type v24 = (char *)*((void *)this + 7);
          if (v24 != v25)
          {
            do
            {
              uint64_t v26 = *((void *)v24 - 1);
              v24 -= 8;
              *((void *)v23 - 1) = v26;
              v23 -= 8;
            }
            while (v24 != v25);
            std::string::size_type v24 = *v3;
          }
          *((void *)this + 6) = v23;
          *((void *)this + 7) = v15;
          *((void *)this + 8) = &v22[8 * v21];
          if (v24) {
            operator delete(v24);
          }
        }
        else
        {
          *long long v14 = v12;
          long long v15 = v14 + 1;
        }
        *((void *)this + 7) = v15;
      }
    }
LABEL_38:
    std::string::size_type v27 = *(const void **)(*(void *)this + 8 * v6);
    if (v27)
    {
      if (v28)
      {
        std::string::size_type v29 = v28;
        if ((*(int (**)(void *))(*(void *)v28 + 16))(v28) >= 1)
        {
          unint64_t v31 = (void *)*((void *)this + 4);
          unint64_t v30 = *((void *)this + 5);
          if ((unint64_t)v31 >= v30)
          {
            uint64_t v33 = ((char *)v31 - *v1) >> 3;
            if ((unint64_t)(v33 + 1) >> 61) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v34 = v30 - (void)*v1;
            uint64_t v35 = v34 >> 2;
            if (v34 >> 2 <= (unint64_t)(v33 + 1)) {
              uint64_t v35 = v33 + 1;
            }
            if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v36 = v35;
            }
            if (v36) {
              char v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v43, v36);
            }
            else {
              char v37 = 0;
            }
            uint64_t v38 = &v37[8 * v33];
            *(void *)uint64_t v38 = v29;
            char v32 = v38 + 8;
            unint64_t v40 = (char *)*((void *)this + 3);
            std::locale v39 = (char *)*((void *)this + 4);
            if (v39 != v40)
            {
              do
              {
                uint64_t v41 = *((void *)v39 - 1);
                v39 -= 8;
                *((void *)v38 - 1) = v41;
                v38 -= 8;
              }
              while (v39 != v40);
              std::locale v39 = *v1;
            }
            *((void *)this + 3) = v38;
            *((void *)this + 4) = v32;
            *((void *)this + 5) = &v37[8 * v36];
            if (v39) {
              operator delete(v39);
            }
          }
          else
          {
            *unint64_t v31 = v29;
            char v32 = v31 + 1;
          }
          *((void *)this + 4) = v32;
          {
            *((unsigned char *)this + 153) = 1;
          }
        }
      }
    }
    goto LABEL_59;
  }
}

void sub_1B2106898(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::ParallelComponent::GetHistoricalComponents(kaldi::nnet1::ParallelComponent *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *((void *)this + 23);
  for (uint64_t i = *((void *)this + 24); v2 != i; v2 += 376)
  {
    std::string __p = 0;
    unint64_t v6 = 0;
    uint64_t v7 = 0;
    std::vector<kaldi::nnet1::HistoricalComponent *>::__init_with_size[abi:ne180100]<kaldi::nnet1::HistoricalComponent **,kaldi::nnet1::HistoricalComponent **>(&__p, *(const void **)(v2 + 48), *(void *)(v2 + 56), (uint64_t)(*(void *)(v2 + 56) - *(void *)(v2 + 48)) >> 3);
    std::vector<kaldi::nnet1::RecurrentBaseComponent *>::__insert_with_size[abi:ne180100]<std::__wrap_iter<kaldi::nnet1::RecurrentBaseComponent **>,std::__wrap_iter<kaldi::nnet1::RecurrentBaseComponent **>>((uint64_t)a2, a2[1], (char *)__p, v6, (v6 - (unsigned char *)__p) >> 3);
    if (__p)
    {
      unint64_t v6 = (char *)__p;
      operator delete(__p);
    }
  }
}

void sub_1B2106964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  unint64_t v13 = *(void **)v11;
  if (*(void *)v11)
  {
    *(void *)(v11 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::ParallelComponent::GetRecurrentComponents(kaldi::nnet1::ParallelComponent *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *((void *)this + 23);
  for (uint64_t i = *((void *)this + 24); v2 != i; v2 += 376)
  {
    std::string __p = 0;
    unint64_t v6 = 0;
    uint64_t v7 = 0;
    std::vector<kaldi::nnet1::RecurrentBaseComponent *>::__init_with_size[abi:ne180100]<kaldi::nnet1::RecurrentBaseComponent **,kaldi::nnet1::RecurrentBaseComponent **>(&__p, *(const void **)(v2 + 24), *(void *)(v2 + 32), (uint64_t)(*(void *)(v2 + 32) - *(void *)(v2 + 24)) >> 3);
    std::vector<kaldi::nnet1::RecurrentBaseComponent *>::__insert_with_size[abi:ne180100]<std::__wrap_iter<kaldi::nnet1::RecurrentBaseComponent **>,std::__wrap_iter<kaldi::nnet1::RecurrentBaseComponent **>>((uint64_t)a2, a2[1], (char *)__p, v6, (v6 - (unsigned char *)__p) >> 3);
    if (__p)
    {
      unint64_t v6 = (char *)__p;
      operator delete(__p);
    }
  }
}

void sub_1B2106A2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  unint64_t v13 = *(void **)v11;
  if (*(void *)v11)
  {
    *(void *)(v11 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::Nnet::ValidateNnet(kaldi::nnet1::Nnet *this)
{
  kaldi::nnet1::Nnet::CheckDimensions((uint64_t *)this);
  kaldi::nnet1::Nnet::CheckWeights(this);
}

void kaldi::nnet1::Nnet::SetHistoryOptions(kaldi::nnet1::Nnet *this, const kaldi::nnet1::HistoryOptions *a2, int a3)
{
  unint64_t v6 = (uint64_t *)*((void *)this + 6);
  uint64_t v7 = (uint64_t *)*((void *)this + 7);
  while (v6 != v7)
  {
    uint64_t v8 = *v6++;
    (*(void (**)(uint64_t, const kaldi::nnet1::HistoryOptions *))(*(void *)v8 + 80))(v8, a2);
  }
  if (v9)
  {
    long long v10 = *(_OWORD *)(v9 + 8);
    *(_OWORD *)&unsigned char v13[15] = *(_OWORD *)(v9 + 23);
    *(_OWORD *)unint64_t v13 = v10;
    long long v12 = &unk_1F0A4DB38;
    long long v14 = &unk_1F0A4DB58;
    int v11 = *((_DWORD *)v9 + 13);
    int v15 = *((_DWORD *)a2 + 2);
    int v16 = v11;
    kaldi::nnet1::Nnet::SetTrainOptions(this, (const kaldi::nnet1::NnetTrainOptions *)&v12, a3);
  }
  else if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"Inconsistent return type: RecurrentBaseComponent::GetTrainOptions() can not be cast to RecurrentNnetTrainOptions", 112);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v12);
  }
}

void sub_1B2106C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t kaldi::nnet1::Nnet::GetTrainOptions(kaldi::nnet1::Nnet *this)
{
  return *((void *)this + 18);
}

void *kaldi::nnet1::operator<<(void *a1, uint64_t a2)
{
  uint64_t v3 = kaldi::nnet1::operator<<(a1, a2);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)", and Recurrent style components have additional configurations ", 64);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"num_sequences ", 14);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"bptt_steps ", 11);
  uint64_t v5 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)", ", 2);
  return a1;
}

{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  const char *v25;
  uint64_t v26;

  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"NnetTrainOptions : ", 19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"learn_rate ", 11);
  uint64_t v5 = (void *)std::ostream::operator<<();
  unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"momentum ", 9);
  uint64_t v7 = (void *)std::ostream::operator<<();
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"l2_penalty ", 11);
  uint64_t v9 = (void *)std::ostream::operator<<();
  long long v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"l1_penalty ", 11);
  int v11 = (void *)std::ostream::operator<<();
  long long v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"qtype_compact_grad ", 19);
  unint64_t v13 = (void *)std::ostream::operator<<();
  long long v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"step_compact_grad ", 18);
  int v15 = (void *)std::ostream::operator<<();
  int v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"num_subbatches ", 15);
  uint64_t v17 = (void *)std::ostream::operator<<();
  uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)", ", 2);
  uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"average_gradients ", 18);
  if (*(unsigned char *)(a2 + 36)) {
    uint64_t v20 = "true";
  }
  else {
    uint64_t v20 = "false";
  }
  if (*(unsigned char *)(a2 + 36)) {
    unint64_t v21 = 4;
  }
  else {
    unint64_t v21 = 5;
  }
  unsigned __int8 v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
  std::string v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)", ", 2);
  std::string::size_type v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"vectorize_weights ", 18);
  if (*(unsigned char *)(a2 + 37)) {
    char v25 = "true";
  }
  else {
    char v25 = "false";
  }
  if (*(unsigned char *)(a2 + 37)) {
    uint64_t v26 = 4;
  }
  else {
    uint64_t v26 = 5;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v25, v26);
  return a1;
}

void kaldi::nnet1::Nnet::SetWorkspaceSize(kaldi::nnet1::Nnet *this, uint64_t a2)
{
  if (a2 < 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "workspace_size_bytes >= 0");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
  }
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Set workspace of ", 17);
    uint64_t v3 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" bytes for ", 11);
    uint64_t v4 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" sub-batches", 12);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v13);
  }
  uint64_t v6 = *((void *)this + 44);
  uint64_t v5 = *((void *)this + 45);
  unint64_t v7 = *(int *)(*((void *)this + 18) + 32);
  if (v7 != (v5 - v6) >> 3 && v5 != v6)
  {
    unint64_t v9 = 0;
    do
    {
      long long v10 = *(kaldi::CuWorkspace **)(v6 + 8 * v9);
      if (v10)
      {
        kaldi::CuWorkspace::~CuWorkspace(v10);
        MEMORY[0x1B3EA8670]();
        uint64_t v6 = *((void *)this + 44);
        uint64_t v5 = *((void *)this + 45);
      }
      ++v9;
    }
    while (v9 < (v5 - v6) >> 3);
    unint64_t v7 = *(int *)(*((void *)this + 18) + 32);
  }
  std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)this + 352, v7);
  if (*((void *)this + 45) != *((void *)this + 44)) {
    operator new();
  }
  uint64_t v11 = *(void *)this;
  if (*((void *)this + 1) != *(void *)this)
  {
    unint64_t v12 = 0;
    do
    {
      (*(void (**)(void, char *))(**(void **)(v11 + 8 * v12) + 136))(*(void *)(v11 + 8 * v12), (char *)this + 352);
      ++v12;
      uint64_t v11 = *(void *)this;
    }
    while (v12 < (uint64_t)(*((void *)this + 1) - *(void *)this) >> 3);
  }
}

void sub_1B2107068(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void kaldi::nnet1::Nnet::ComputeNnetDelta(const kaldi::nnet1::Nnet *a1@<X1>, kaldi::nnet1::Nnet *a2@<X8>)
{
}

void sub_1B21074FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, kaldi::nnet1::Nnet *a13, void *__p, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20)
{
  if (__p) {
    operator delete(__p);
  }
  kaldi::Vector<float>::Destroy((uint64_t)&a17);
  kaldi::Vector<float>::Destroy((uint64_t)&a20);
  kaldi::nnet1::Nnet::~Nnet(a13);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::DoBackProp(float a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v18[3] = 0x157100008000;
  int v19 = (int)a1;
  uint64_t v8 = (std::string *)std::string::basic_string[abi:ne180100]<0>(v18, "xent");
  if (*(char *)(a5 + 23) < 0)
  {
    if (!*(void *)(a5 + 8)) {
      goto LABEL_6;
    }
  }
  else if (!*(unsigned char *)(a5 + 23))
  {
LABEL_6:
    memset(&v17, 0, sizeof(v17));
    if (*(char *)(a6 + 23) < 0)
    {
      if (!*(void *)(a6 + 8)) {
        goto LABEL_21;
      }
    }
    else if (!*(unsigned char *)(a6 + 23))
    {
      goto LABEL_21;
    }
    kaldi::SplitStringToIntegers<int>(a6, ":", 0, &v17);
    std::__sort<std::__less<int,int> &,int *>();
    if (v17.__begin_ != v17.__end_)
    {
      for (std::vector<unsigned int>::pointer i = v17.__begin_ + 1; i != v17.__end_; ++i)
      {
        signed int v11 = *(i - 1);
        signed int v10 = *i;
        if (v10 <= v11)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
          unint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Invalid set to freeze(non-unique components): --freeze-components ", 69);
          int v13 = *(char *)(a6 + 23);
          if (v13 >= 0) {
            uint64_t v14 = a6;
          }
          else {
            uint64_t v14 = *(void *)a6;
          }
          if (v13 >= 0) {
            uint64_t v15 = *(unsigned __int8 *)(a6 + 23);
          }
          else {
            uint64_t v15 = *(void *)(a6 + 8);
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v16);
        }
      }
    }
LABEL_21:
    kaldi::nnet1::Nnet::Nnet((kaldi::nnet1::Nnet *)v16);
  }
  std::string::operator=(v8, (const std::string *)a5);
  goto LABEL_6;
}

void sub_1B21080DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a12);
  a12 = (void **)&STACK[0x218];
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a12);
  a12 = (void **)&STACK[0x200];
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a12);
  kaldi::Vector<float>::Destroy((uint64_t)&STACK[0x268]);
  kaldi::Vector<float>::Destroy((uint64_t)&STACK[0x250]);
  if (STACK[0x320]) {
    free((void *)STACK[0x320]);
  }
  STACK[0x320] = 0;
  STACK[0x318] = 0;
  STACK[0x328] = 0;
  a12 = (void **)&STACK[0x300];
  std::vector<kaldi::CuSubMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a12);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&STACK[0x2D0]);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&STACK[0x2A0]);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&STACK[0x378]);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&STACK[0x3A8]);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&STACK[0x3D8]);
  (*(void (**)(uint64_t))(*(void *)v12 + 88))(v12);
  kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::Nnet *)&STACK[0x408]);
  kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::Nnet *)&STACK[0x580]);
  kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::Nnet *)&STACK[0x6F8]);
  uint64_t v15 = *(void **)(v13 - 176);
  if (v15)
  {
    *(void *)(v13 - 168) = v15;
    operator delete(v15);
  }
  if (*(char *)(v13 - 129) < 0) {
    operator delete(*(void **)(v13 - 152));
  }
  _Unwind_Resume(a1);
}

void sub_1B21080F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  a12 = (uint64_t)&STACK[0x218];
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  a12 = (uint64_t)&STACK[0x200];
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  kaldi::Vector<float>::Destroy((uint64_t)&STACK[0x268]);
  kaldi::Vector<float>::Destroy((uint64_t)&STACK[0x250]);
  if (STACK[0x320]) {
    free((void *)STACK[0x320]);
  }
  STACK[0x320] = 0;
  STACK[0x318] = 0;
  STACK[0x328] = 0;
  a12 = (uint64_t)&STACK[0x300];
  std::vector<kaldi::CuSubMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&STACK[0x2D0]);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&STACK[0x2A0]);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&STACK[0x378]);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&STACK[0x3A8]);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&STACK[0x3D8]);
  (*(void (**)(uint64_t))(*(void *)v12 + 88))(v12);
  kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::Nnet *)&STACK[0x408]);
  kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::Nnet *)&STACK[0x580]);
  kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::Nnet *)&STACK[0x6F8]);
  uint64_t v15 = *(void **)(v13 - 176);
  if (v15)
  {
    *(void *)(v13 - 168) = v15;
    operator delete(v15);
  }
  if (*(char *)(v13 - 129) < 0) {
    operator delete(*(void **)(v13 - 152));
  }
  _Unwind_Resume(a1);
}

void sub_1B21080FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  kaldi::Matrix<float>::~Matrix((uint64_t)&a68);
  JUMPOUT(0x1B2108174);
}

void kaldi::nnet1::MatrixRandomizer::AddData<kaldi::CuMatrix<float>>(int32x2_t *a1, uint64_t a2)
{
  if (!a1[2].i32[0])
  {
    kaldi::CuMatrix<float>::Resize(a1, (a1[19].i32[0] + 6000), *(unsigned int *)(a2 + 16), 1, 0);
    kaldi::CuMatrix<float>::Resize(a1 + 6, (a1[19].i32[0] + 6000), *(unsigned int *)(a2 + 16), 1, 0);
    kaldi::CuArray<int>::Resize((uint64_t)&a1[15], a1[19].i32[0] + 6000, 1);
  }
  int v4 = a1[18].i32[0];
  int v5 = a1[18].i32[1];
  if (v4 >= 1)
  {
    v5 -= v4;
    if (v5 >= 1)
    {
      int32x2_t v6 = a1[1];
      __int32 v7 = a1[3].i32[0];
      __int32 v8 = a1[3].i32[1];
      int32x2_t v9 = a1[4];
      DWORD2(v22) = a1[2].i32[0];
      HIDWORD(v22) = v5;
      *(void *)&long long v23 = __PAIR64__(v8, v7);
      *((int32x2_t *)&v23 + 1) = v9;
      unint64_t v21 = &unk_1F0A472A0;
      *(int32x2_t *)&long long v22 = v6;
      int v10 = v7 * v4;
      *((void *)&v25 + 1) = __PAIR64__(v5, DWORD2(v22));
      LODWORD(v26) = v7;
      DWORD1(v26) = v8 - v10;
      *((int32x2_t *)&v26 + 1) = v9;
      std::string::size_type v24 = &unk_1F0A472A0;
      *(void *)&long long v25 = *(void *)&v6 + 4 * v10;
      kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v21, (uint64_t)&v24, 111);
      std::string::size_type v24 = &unk_1F0A472A0;
      long long v25 = 0u;
      long long v26 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v24);
      unint64_t v21 = &unk_1F0A472A0;
      long long v22 = 0u;
      long long v23 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v21);
    }
    a1[18].i32[0] = 0;
    a1[18].i32[1] = v5;
  }
  int v11 = *(_DWORD *)(a2 + 20);
  if (a1[2].i32[1] < v11 + v5)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v21);
      uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"we should have allocated enough space, instead we get in ", 57);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"this expensive copy/resize on GPU. buffer size ", 47);
      uint64_t v13 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" , current end ", 15);
      uint64_t v14 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" , incoming data size ", 22);
      std::ostream::operator<<();
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v21);
    }
    kaldi::CuMatrix<float>::CuMatrix(&v21, a1, 111);
    kaldi::CuMatrix<float>::Resize(a1, (a1[18].i32[1] + *(_DWORD *)(a2 + 20) + 1000), a1[2].u32[0], 1, 0);
    int32x2_t v15 = a1[1];
    int32x2_t v16 = a1[4];
    DWORD2(v25) = a1[2].i32[0];
    HIDWORD(v25) = HIDWORD(v22);
    *(int32x2_t *)&long long v26 = a1[3];
    *((int32x2_t *)&v26 + 1) = v16;
    std::string::size_type v24 = &unk_1F0A472A0;
    *(int32x2_t *)&long long v25 = v15;
    kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v24, (uint64_t)&v21, 111);
    std::string::size_type v24 = &unk_1F0A472A0;
    long long v25 = 0u;
    long long v26 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v24);
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v21);
    int v5 = a1[18].i32[1];
    int v11 = *(_DWORD *)(a2 + 20);
  }
  __int32 v17 = a1[3].i32[0];
  uint64_t v18 = *(void *)&a1[1] + 4 * v17 * v5;
  int v19 = a1[3].i32[1] - v17 * v5;
  int32x2_t v20 = a1[4];
  DWORD2(v22) = a1[2].i32[0];
  HIDWORD(v22) = v11;
  *(void *)&long long v23 = __PAIR64__(v19, v17);
  *((int32x2_t *)&v23 + 1) = v20;
  unint64_t v21 = &unk_1F0A472A0;
  *(void *)&long long v22 = v18;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v21, a2, 111);
  unint64_t v21 = &unk_1F0A472A0;
  long long v22 = 0u;
  long long v23 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v21);
  a1[18].i32[1] += *(_DWORD *)(a2 + 20);
}

void sub_1B21085B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  *(void *)(v5 - 104) = v2;
  *int v4 = 0u;
  v4[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)(v5 - 104));
  *uint64_t v3 = 0u;
  v3[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::AffineTransform::EnsureCorrs(kaldi::nnet1::AffineTransform *this)
{
  if (!*((unsigned char *)this + 232))
  {
    int v2 = *((_DWORD *)this + 20);
    if (v2 > 1) {
      int v3 = v2 + 1;
    }
    else {
      int v3 = 1;
    }
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize((uint64_t *)this + 17, v3);
    std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::resize((uint64_t *)this + 20, v3);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 23, v3);
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)this + 26, v3);
    if (v3 >= 1) {
      operator new();
    }
    std::vector<int>::resize((std::vector<unsigned int> *)((char *)this + 256), v3);
    if (*((float *)this + 63) > 0.0)
    {
      uint64_t v4 = *(unsigned int *)(kaldi::nnet1::AffineTransform::Linearity(this) + 20);
      uint64_t v5 = kaldi::nnet1::AffineTransform::Linearity(this);
      kaldi::CuMatrix<float>::Resize((int32x2_t *)this + 38, v4, *(unsigned int *)(v5 + 16), 1, 0);
    }
    *((unsigned char *)this + 232) = 1;
  }
}

void sub_1B21088F4(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1081C4072235B19);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::AffineTransform::LinearityCorr(kaldi::nnet1::AffineTransform *this, int a2)
{
  uint64_t v2 = *((void *)this + 17);
  if (a2 >= (unint64_t)((*((void *)this + 18) - v2) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "linearity_corr_.size() > batch_idx");
    goto LABEL_6;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "linearity_corr_[batch_idx]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  void v4[34];

  uint64_t v2 = *((void *)this + 17);
  if (a2 >= (unint64_t)((*((void *)this + 18) - v2) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "linearity_corr_.size() > batch_idx");
    goto LABEL_6;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "linearity_corr_[batch_idx]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::AffineTransform::BiasCorr(kaldi::nnet1::AffineTransform *this, int a2)
{
  uint64_t v2 = *((void *)this + 20);
  if (a2 >= (unint64_t)((*((void *)this + 21) - v2) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "bias_corr_.size() > batch_idx");
    goto LABEL_6;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "bias_corr_[batch_idx]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  void v4[34];

  uint64_t v2 = *((void *)this + 20);
  if (a2 >= (unint64_t)((*((void *)this + 21) - v2) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "bias_corr_.size() > batch_idx");
    goto LABEL_6;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "bias_corr_[batch_idx]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::MatrixRandomizer::MatrixRandomizer(uint64_t a1, uint64_t *a2, int a3, unsigned int a4, uint64_t a5)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1F0A51768;
  *(unsigned char *)(a1 + 40) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 48) = &unk_1F0A51768;
  *(void *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  __int32 v7 = (uint64_t *)(a1 + 96);
  *(void *)(a1 + 152) = 0x157100008000;
  uint64_t v8 = a1 + 152;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 160) = 256;
  *(_DWORD *)(a1 + 164) = a3;
  *(_DWORD *)(a1 + 168) = a4;
  *(void *)(a1 + 32) = a5;
  *(void *)(a1 + 80) = a5;
  *(void *)(a1 + 136) = a5;
  *(void *)(a1 + 144) = 0;
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"The GPU ID for the matrix randomizer is ", 40);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v11);
    a4 = *(_DWORD *)(a1 + 168);
  }
  uint64_t v9 = *a2;
  *(_DWORD *)(v8 + 8) = *((_DWORD *)a2 + 2);
  *(void *)uint64_t v8 = v9;
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a1 + 160) / (int)a4;
  std::vector<kaldi::CuSubMatrix<float>>::resize(v7, a4);
  return a1;
}

void sub_1B2108B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v12 = (void *)v9[16];
  if (v12) {
    free(v12);
  }
  v9[15] = 0;
  v9[16] = 0;
  _OWORD v9[17] = 0;
  std::vector<kaldi::CuSubMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a9);
  kaldi::CuMatrix<float>::~CuMatrix(v10);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v9);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<kaldi::CuSubMatrix<float>>::resize(uint64_t *result, unint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = result[1];
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((v3 - *result) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    return (uint64_t *)std::vector<kaldi::CuSubMatrix<float>>::__append(result, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *result + 40 * a2;
    if (v3 != v7)
    {
      uint64_t v8 = v3 - 40;
      uint64_t v9 = (void *)(v3 - 40);
      uint64_t v10 = (void *)(v3 - 40);
      do
      {
        uint64_t v11 = *v10;
        v10 -= 5;
        uint64_t result = (uint64_t *)(*(uint64_t (**)(void *))(v11 + 16))(v9);
        v8 -= 40;
        BOOL v12 = v9 == (void *)v7;
        uint64_t v9 = v10;
      }
      while (!v12);
    }
    v2[1] = v7;
  }
  return result;
}

uint64_t std::vector<kaldi::CuSubMatrix<float>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(result - 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      uint64_t v13 = v7 + 40 * a2;
      uint64_t v14 = 40 * a2;
      int32x2_t v15 = (_OWORD *)(v7 + 8);
      do
      {
        *int32x2_t v15 = 0uLL;
        v15[1] = 0uLL;
        *((void *)v15 - 1) = &unk_1F0A472A0;
        int32x2_t v15 = (_OWORD *)((char *)v15 + 40);
        v7 += 40;
        v14 -= 40;
      }
      while (v14);
      uint64_t v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x666666666666666) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x333333333333333) {
      unint64_t v11 = 0x666666666666666;
    }
    else {
      unint64_t v11 = v9;
    }
    void v20[4] = result;
    if (v11) {
      BOOL v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(result, v11);
    }
    else {
      BOOL v12 = 0;
    }
    int32x2_t v16 = &v12[40 * v8];
    v20[0] = v12;
    v20[1] = v16;
    v20[3] = &v12[40 * v11];
    __int32 v17 = &v16[40 * a2];
    uint64_t v18 = 40 * a2;
    int v19 = v16 + 8;
    do
    {
      *int v19 = 0uLL;
      v19[1] = 0uLL;
      *((void *)v19 - 1) = &unk_1F0A472A0;
      int v19 = (_OWORD *)((char *)v19 + 40);
      v16 += 40;
      v18 -= 40;
    }
    while (v18);
    v20[2] = v17;
    std::vector<kaldi::CuSubMatrix<float>>::__swap_out_circular_buffer(a1, v20);
    return std::__split_buffer<kaldi::CuSubMatrix<float>>::~__split_buffer((uint64_t)v20);
  }
  return result;
}

void sub_1B2108E2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<kaldi::CuSubMatrix<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

char *std::vector<kaldi::nnet1::RecurrentBaseComponent *>::__insert_with_size[abi:ne180100]<std::__wrap_iter<kaldi::nnet1::RecurrentBaseComponent **>,std::__wrap_iter<kaldi::nnet1::RecurrentBaseComponent **>>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  uint64_t v5 = (char *)__dst;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v7 = __src;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 3)
  {
    uint64_t v13 = *(void **)a1;
    unint64_t v14 = a5 + ((uint64_t)(v12 - *(void *)a1) >> 3);
    if (v14 >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = (__dst - (uint64_t)v13) >> 3;
    uint64_t v16 = v10 - (void)v13;
    if (v16 >> 2 > v14) {
      unint64_t v14 = v16 >> 2;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v14;
    }
    uint64_t v37 = v9;
    if (v17) {
      uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v9, v17);
    }
    else {
      uint64_t v18 = 0;
    }
    uint64_t v28 = &v18[8 * v15];
    std::string __p = v18;
    uint64_t v34 = v28;
    unint64_t v36 = &v18[8 * v17];
    uint64_t v29 = 8 * a5;
    unint64_t v30 = &v28[8 * a5];
    do
    {
      uint64_t v31 = *(void *)v7;
      v7 += 8;
      *(void *)uint64_t v28 = v31;
      v28 += 8;
      v29 -= 8;
    }
    while (v29);
    uint64_t v35 = v30;
    uint64_t v5 = std::vector<long long>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34) {
      v35 += (v34 - v35 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v19 = v12 - __dst;
  uint64_t v20 = (uint64_t)(v12 - __dst) >> 3;
  if (v20 >= a5)
  {
    unint64_t v21 = &__src[8 * a5];
    long long v23 = *(char **)(v9 - 8);
LABEL_17:
    std::string::size_type v24 = &v5[8 * a5];
    long long v25 = &v23[-8 * a5];
    long long v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      long long v26 = v23;
      do
      {
        uint64_t v27 = *(void *)v25;
        v25 += 8;
        *(void *)long long v26 = v27;
        v26 += 8;
      }
      while ((unint64_t)v25 < v12);
    }
    *(void *)(a1 + 8) = v26;
    if (v23 != v24) {
      memmove(&v23[-8 * ((v23 - v24) >> 3)], v5, v23 - v24);
    }
    if (v21 != v7) {
      memmove(v5, v7, v21 - v7);
    }
    return v5;
  }
  unint64_t v21 = &__src[8 * v20];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*(void **)(v9 - 8), &__src[8 * v20], a4 - v21);
  }
  long long v23 = (char *)(v12 + v22);
  *(void *)(a1 + 8) = v12 + v22;
  if (v19 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_1B2109018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<kaldi::nnet1::Nnet1InferenceNet>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5EF80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::nnet1::Nnet1InferenceNet>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5EF80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<kaldi::nnet1::Nnet1InferenceNet>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void kaldi::nnet1::Nnet1InferenceNet::Nnet1InferenceNet(void *a1)
{
  *a1 = &unk_1F0A4A9C8;
  kaldi::nnet1::Nnet::Nnet((kaldi::nnet1::Nnet *)(a1 + 1));
}

void sub_1B2109284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  unint64_t v17 = (void *)*((void *)v14 + 49);
  if (v17)
  {
    *((void *)v14 + 50) = v17;
    operator delete(v17);
  }
  kaldi::nnet1::Nnet::~Nnet(v15);
  quasar::Bitmap::~Bitmap(v14);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Nnet1InferenceNet::Init(kaldi::nnet1::Nnet1InferenceNet *this)
{
  long long v12 = xmmword_1B255E480;
  int v13 = -1082130432;
  __int16 v15 = 0;
  char v16 = 0;
  uint64_t v11 = &unk_1F0A4DB38;
  unint64_t v17 = &unk_1F0A4DB58;
  uint64_t v14 = 0x100000003;
  uint64_t v18 = 0x100000001;
  kaldi::nnet1::Nnet::SetTrainOptions((kaldi::nnet1::Nnet1InferenceNet *)((char *)this + 8), (const kaldi::nnet1::NnetTrainOptions *)&v11, 1);
  uint64_t v2 = *((void *)this + 1);
  unint64_t v3 = (unint64_t)(*((void *)this + 2) - v2) >> 3;
  *((_DWORD *)this + 96) = v3 - 1;
  if ((int)v3 <= 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)"last_component_idx_ >= 0", 24);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v9);
  }
  *((void *)this + 52) = *(void *)(v2 + 8 * (v3 - 1));
  long long v9 = 0uLL;
  uint64_t v10 = 0;
  std::vector<kaldi::nnet1::RecurrentBaseComponent *>::__init_with_size[abi:ne180100]<kaldi::nnet1::RecurrentBaseComponent **,kaldi::nnet1::RecurrentBaseComponent **>(&v9, *((const void **)this + 4), *((void *)this + 5), (uint64_t)(*((void *)this + 5) - *((void *)this + 4)) >> 3);
  unint64_t v4 = (void *)*((void *)this + 49);
  if (v4)
  {
    *((void *)this + 50) = v4;
    operator delete(v4);
  }
  *(_OWORD *)((char *)this + 392) = v9;
  *((void *)this + 51) = v10;
  uint64_t v5 = *((void *)this + 1);
  unint64_t v6 = *((void *)this + 2) - v5;
  if ((int)(v6 >> 3) >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = (v6 >> 3);
    do
      *(unsigned char *)(*(void *)(v5 + 8 * v7++) + 17) = 1;
    while (v8 != v7);
  }
}

void *std::vector<kaldi::CuMatrix<float>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = a1[1];
    uint64_t v5 = v4 + 48 * a2;
    uint64_t v6 = 48 * a2;
    uint64_t v7 = v4;
    do
    {
      *(_OWORD *)(v7 + 24) = 0uLL;
      *(_OWORD *)(v7 + 8) = 0uLL;
      *(void *)uint64_t v7 = &unk_1F0A51768;
      *(unsigned char *)(v7 + 40) = 0;
      v7 += 48;
      v4 += 48;
      v6 -= 48;
    }
    while (v6);
    a1[1] = v5;
  }
  return a1;
}

void sub_1B2109508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *std::vector<kaldi::nnet1::RecurrentBaseComponent *>::__init_with_size[abi:ne180100]<kaldi::nnet1::RecurrentBaseComponent **,kaldi::nnet1::RecurrentBaseComponent **>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B210957C(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<kaldi::nnet1::HistoricalComponent *>::__init_with_size[abi:ne180100]<kaldi::nnet1::HistoricalComponent **,kaldi::nnet1::HistoricalComponent **>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B21095F8(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t *std::__copy_unaligned[abi:ne180100]<std::vector<BOOL>,true>@<X0>(unint64_t *result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int64_t v6 = a4 - (unint64_t)a2 + 8 * (a3 - (void)result);
  if (v6 <= 0)
  {
    uint64_t v18 = *(unint64_t **)a5;
    unsigned int v19 = *(_DWORD *)(a5 + 8);
  }
  else
  {
    if (a2)
    {
      char v7 = a2;
      if (v6 >= (unint64_t)(64 - a2)) {
        unint64_t v8 = 64 - a2;
      }
      else {
        unint64_t v8 = a4 - (unint64_t)a2 + 8 * (a3 - (void)result);
      }
      v6 -= v8;
      unint64_t v9 = (0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v8)) & (-1 << a2) & *result;
      uint64_t v10 = *(unsigned int *)(a5 + 8);
      if (v8 >= (64 - v10)) {
        unint64_t v11 = (64 - v10);
      }
      else {
        unint64_t v11 = v8;
      }
      long long v12 = *(unint64_t **)a5;
      unint64_t v13 = v9 >> (a2 - v10);
      BOOL v14 = v10 >= a2;
      int v16 = v10 - a2;
      BOOL v15 = v16 != 0 && v14;
      unint64_t v17 = v9 << v16;
      if (!v15) {
        unint64_t v17 = v13;
      }
      *long long v12 = **(void **)a5 & ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v10 - v11)) & (-1 << v10)) | v17;
      uint64_t v18 = (unint64_t *)((char *)v12 + (((v11 + v10) >> 3) & 0x3FFFFFF8));
      *(void *)a5 = v18;
      unsigned int v19 = ((_BYTE)v10 + (_BYTE)v11) & 0x3F;
      *(_DWORD *)(a5 + 8) = v19;
      uint64_t v20 = v8 - v11;
      if (v20 >= 1)
      {
        *uint64_t v18 = *v18 & ~(0xFFFFFFFFFFFFFFFFLL >> -(char)v20) | (v9 >> (v11 + v7));
        *(_DWORD *)(a5 + 8) = v20;
        unsigned int v19 = v20;
      }
      ++result;
    }
    else
    {
      unsigned int v19 = *(_DWORD *)(a5 + 8);
      uint64_t v18 = *(unint64_t **)a5;
    }
    unsigned int v21 = 64 - v19;
    uint64_t v22 = -1 << v19;
    if (v6 >= 64)
    {
      uint64_t v23 = *v18;
      do
      {
        unint64_t v24 = v6;
        unint64_t v26 = *result++;
        unint64_t v25 = v26;
        *uint64_t v18 = v23 & ~v22 | (v26 << v19);
        unint64_t v27 = v18[1];
        ++v18;
        uint64_t v23 = v27 & v22 | (v25 >> v21);
        *uint64_t v18 = v23;
        int64_t v6 = v24 - 64;
      }
      while (v24 > 0x7F);
      *(void *)a5 = v18;
    }
    if (v6 >= 1)
    {
      unint64_t v28 = *result & (0xFFFFFFFFFFFFFFFFLL >> -(char)v6);
      if (v6 >= (unint64_t)v21) {
        int64_t v29 = 64 - v19;
      }
      else {
        int64_t v29 = v6;
      }
      *uint64_t v18 = *v18 & ~((0xFFFFFFFFFFFFFFFFLL >> (v21 - v29)) & v22) | (v28 << v19);
      uint64_t v18 = (unint64_t *)((char *)v18 + (((v29 + (unint64_t)v19) >> 3) & 0x3FFFFFF8));
      *(void *)a5 = v18;
      unsigned int v19 = ((_BYTE)v19 + (_BYTE)v29) & 0x3F;
      *(_DWORD *)(a5 + 8) = v19;
      uint64_t v30 = v6 - v29;
      if (v30 >= 1)
      {
        *uint64_t v18 = *v18 & ~(0xFFFFFFFFFFFFFFFFLL >> -(char)v30) | (v28 >> v29);
        *(_DWORD *)(a5 + 8) = v30;
        unsigned int v19 = v30;
      }
    }
  }
  *(void *)a6 = v18;
  *(_DWORD *)(a6 + 8) = v19;
  return result;
}

void std::vector<std::vector<kaldi::CuMatrix<float>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      long long v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v4, v11);
    }
    else {
      long long v12 = 0;
    }
    BOOL v15 = v12;
    int v16 = &v12[24 * v8];
    uint64_t v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    unint64_t v17 = &v16[v14];
    std::vector<std::vector<kaldi::CuMatrix<float>>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<kaldi::CuMatrix<float>>>::~__split_buffer(&v15);
  }
}

void sub_1B2109970(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<kaldi::CuMatrix<float>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<kaldi::CuMatrix<float>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<kaldi::CuMatrix<float>>>,std::reverse_iterator<std::vector<kaldi::CuMatrix<float>>*>,std::reverse_iterator<std::vector<kaldi::CuMatrix<float>>*>,std::reverse_iterator<std::vector<kaldi::CuMatrix<float>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<kaldi::CuMatrix<float>>>,std::reverse_iterator<std::vector<kaldi::CuMatrix<float>>*>,std::reverse_iterator<std::vector<kaldi::CuMatrix<float>>*>,std::reverse_iterator<std::vector<kaldi::CuMatrix<float>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  uint64_t v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<kaldi::CuMatrix<float>>>,std::reverse_iterator<std::vector<kaldi::CuMatrix<float>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<kaldi::CuMatrix<float>>>,std::reverse_iterator<std::vector<kaldi::CuMatrix<float>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<kaldi::CuMatrix<float>>>,std::reverse_iterator<std::vector<kaldi::CuMatrix<float>>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<kaldi::CuMatrix<float>>>,std::reverse_iterator<std::vector<kaldi::CuMatrix<float>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    unint64_t v3 = v1;
    std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<kaldi::CuMatrix<float>>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<kaldi::CuMatrix<float>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

double kaldi::nnet1::Xent::Xent(kaldi::nnet1::Xent *this)
{
  *(void *)this = &unk_1F0A4F260;
  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 0;
  *((void *)this + 18) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = &unk_1F0A517C0;
  *((void *)this + 19) = 0;
  *((void *)this + 20) = 0;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((void *)this + 21) = &unk_1F0A51768;
  *((unsigned char *)this + 208) = 0;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((void *)this + 27) = &unk_1F0A51768;
  *((unsigned char *)this + 256) = 0;
  *((void *)this + 35) = 0;
  *((void *)this + 36) = 0;
  *((void *)this + 33) = &unk_1F0A517C0;
  *((void *)this + 34) = 0;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  *((void *)this + 57) = 0;
  return result;
}

void kaldi::nnet1::AffineTransform::CopyQuantized8Bit(kaldi::nnet1::AffineTransform *this)
{
}

void sub_1B2109CEC(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10D1C40B6DC7CF1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'kaldi::nnet1::AffineTransform::CopyQuantized8Bit(kaldi::nnet1::AffineTransform *this)
{
}

void kaldi::nnet1::AffineTransform::CopyQuantized16Bit(kaldi::nnet1::AffineTransform *this)
{
}

void sub_1B2109D60(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10D1C40B6DC7CF1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'kaldi::nnet1::AffineTransform::CopyQuantized16Bit(kaldi::nnet1::AffineTransform *this)
{
}

void kaldi::nnet1::AffineTransform::CopyVectorwiseQuantized8Bit(kaldi::nnet1::AffineTransform *this)
{
}

void sub_1B2109DD4(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10D1C40EF2100C4);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'kaldi::nnet1::AffineTransform::CopyVectorwiseQuantized8Bit(kaldi::nnet1::AffineTransform *this)
{
}

void kaldi::nnet1::AffineTransform::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8 = kaldi::nnet1::AffineTransform::Bias((kaldi::nnet1::AffineTransform *)a1);
  kaldi::CuMatrixBase<float>::AddVecToRows(a3, v8, 1.0, 0.0);
  uint64_t v9 = *(void *)(a1 + 352);
  if (v9 == *(void *)(a1 + 360) || !*(_DWORD *)(v9 + 48 * a4 + 20))
  {
    uint64_t v11 = kaldi::nnet1::AffineTransform::Linearity((kaldi::nnet1::AffineTransform *)a1);
    kaldi::CuMatrixBase<float>::AddMatMat(a3, a2, CblasNoTrans, v11, CblasTrans, 1.0, 1.0);
  }
  else
  {
    uint64_t v10 = kaldi::nnet1::AffineTransform::Linearity((kaldi::nnet1::AffineTransform *)a1);
    kaldi::CuMatrixBase<float>::AddMatMatMasked(a3, a2, CblasNoTrans, v10, CblasTrans, 1.0);
  }
  if (*(unsigned char *)(a1 + 128))
  {
    kaldi::CuMatrixBase<float>::ApplySoftMaxPerRow(a3, a3);
  }
}

float kaldi::nnet1::AffineTransform::PropagateFnc(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = kaldi::nnet1::AffineTransform::Bias((kaldi::nnet1::AffineTransform *)a1);
  kaldi::CuVectorBase<float>::CopyFromVec(a3, v6);
  uint64_t v7 = *(void *)(a1 + 352);
  if (v7 == *(void *)(a1 + 360) || !*(_DWORD *)(v7 + 20))
  {
    uint64_t v9 = kaldi::nnet1::AffineTransform::Linearity((kaldi::nnet1::AffineTransform *)a1);
    kaldi::CuVectorBase<float>::AddMatVec((uint64_t)a3, v9, CblasNoTrans, a2, 1.0, 1.0);
  }
  else
  {
    kaldi::nnet1::Component::PropagateFnc(a1, a2, (uint64_t)a3);
  }
  if (*(unsigned char *)(a1 + 128))
  {
    return kaldi::CuVectorBase<float>::ApplySoftMax((uint64_t)a3);
  }
  return result;
}

void kaldi::nnet1::AffineTransform::~AffineTransform(kaldi::nnet1::AffineTransform *this)
{
  kaldi::nnet1::AffineTransform::~AffineTransform(this);
  JUMPOUT(0x1B3EA8670);
}

{
  quasar::Bitmap *v2;
  quasar::Bitmap *v3;
  quasar::Bitmap *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(void *)this = &unk_1F0A49CD0;
  uint64_t v2 = (kaldi::nnet1::AffineTransform *)((char *)this + 88);
  *((void *)this + 11) = &unk_1F0A49E10;
  unint64_t v3 = (kaldi::nnet1::AffineTransform *)((char *)this + 96);
  *((void *)this + 12) = &unk_1F0A49E38;
  uint64_t v4 = (kaldi::nnet1::AffineTransform *)((char *)this + 104);
  *((void *)this + 13) = &unk_1F0A49E60;
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)this + 47);
  uint64_t v9 = (void **)((char *)this + 352);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 304);
  uint64_t v5 = (void *)*((void *)this + 35);
  if (v5)
  {
    *((void *)this + 36) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 32);
  if (v6)
  {
    *((void *)this + 33) = v6;
    operator delete(v6);
  }
  uint64_t v9 = (void **)((char *)this + 208);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)((char *)this + 184);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)((char *)this + 160);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)((char *)this + 136);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v7 = *((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
  }
  uint64_t v8 = *((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 24))(v8);
  }
  quasar::Bitmap::~Bitmap(v4);
  quasar::Bitmap::~Bitmap(v3);
  quasar::Bitmap::~Bitmap(v2);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(this);
}

void kaldi::nnet1::AffineTransform::Copy(kaldi::nnet1::AffineTransform *this)
{
}

void sub_1B210A034(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B1C409CA61EC0);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::AffineTransform::GetType(kaldi::nnet1::AffineTransform *this)
{
  return 257;
}

uint64_t kaldi::nnet1::AffineTransform::CountZeroCorr(kaldi::nnet1::AffineTransform *this, int *a2, int *a3)
{
  kaldi::nnet1::AffineTransform::EnsureCorrs(this);
  int v6 = *(_DWORD *)(kaldi::nnet1::AffineTransform::Bias(this) + 16);
  int v7 = *(_DWORD *)(kaldi::nnet1::AffineTransform::Linearity(this) + 20);
  uint64_t result = kaldi::nnet1::AffineTransform::Linearity(this);
  *a3 = v6 + *(_DWORD *)(result + 16) * v7;
  uint64_t v9 = *((void *)this + 18) - *((void *)this + 17);
  if (v9)
  {
    uint64_t v10 = *((void *)this + 21) - *((void *)this + 20);
    if (v10)
    {
      uint64_t v11 = v9 >> 3;
      uint64_t v12 = v10 >> 3;
      if (*((_DWORD *)this + 20) == 1) {
        int v13 = 0;
      }
      else {
        int v13 = *((_DWORD *)this + 20);
      }
      uint64_t v14 = v12 - 1;
      if (v11 - 1 != v13 || v14 != v13)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v21);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Unexpected mismatch in indexes: ", 32);
        uint64_t v19 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"  ", 2);
        uint64_t v20 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"  ", 2);
        std::ostream::operator<<();
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v21);
      }
      uint64_t v16 = kaldi::nnet1::AffineTransform::LinearityCorr(this, v13);
      int v17 = kaldi::CuMatrixBase<float>::CountZeros(v16);
      uint64_t v18 = kaldi::nnet1::AffineTransform::BiasCorr(this, v13);
      uint64_t result = kaldi::CuVectorBase<float>::CountZeros(v18);
      LODWORD(v9) = result + v17;
    }
    else
    {
      LODWORD(v9) = 0;
    }
  }
  *a2 = v9;
  return result;
}

void kaldi::nnet1::AffineTransform::VectorizeWeightsCorrs(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v3);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v3, "Weights are already vectorized");
  }
  else
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v3, (uint64_t)"Performing vectorization of affine transform component", 54);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v3);
    }
    int v2 = *(_DWORD *)(*(void *)(a1 + 120) + 16)
       + *(_DWORD *)(*(void *)(a1 + 112) + 16) * *(_DWORD *)(*(void *)(a1 + 112) + 20);
    if (v2 == (*(unsigned int (**)(uint64_t))(*(void *)a1 + 176))(a1)) {
      kaldi::CuSubMatrix<float>::CopyDataAndReplaceWithCuSub();
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v3);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v3, "(nlinparams + bias_->Dim()) == NumParams()");
  }
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v3);
}

void sub_1B210A6E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t kaldi::nnet1::AffineTransform::Info(kaldi::nnet1::AffineTransform *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v14);
  (*(void (**)(kaldi::nnet1::AffineTransform *, void *, void))(*(void *)this + 168))(this, v14, 0);
  int v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"\n linearity", 11);
  kaldi::nnet1::MomentStatistics<float>(*((void *)this + 14));
  if ((v13 & 0x80u) == 0) {
    uint64_t v3 = v12;
  }
  else {
    uint64_t v3 = (void **)v12[0];
  }
  if ((v13 & 0x80u) == 0) {
    uint64_t v4 = v13;
  }
  else {
    uint64_t v4 = (uint64_t)v12[1];
  }
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v3, v4);
  int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"\n bias", 6);
  kaldi::nnet1::MomentStatistics<float>(*((void *)this + 15));
  if ((v11 & 0x80u) == 0) {
    int v7 = __p;
  }
  else {
    int v7 = (void **)__p[0];
  }
  if ((v11 & 0x80u) == 0) {
    uint64_t v8 = v11;
  }
  else {
    uint64_t v8 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
  if ((char)v11 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v13 < 0) {
    operator delete(v12[0]);
  }
  std::stringbuf::str();
  v14[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v14 + *(void *)(v14[0] - 2std::__tree<int>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v14[1] = MEMORY[0x1E4FBA470] + 16;
  if (v15 < 0) {
    operator delete((void *)v14[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](&v16);
}

void sub_1B210A924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  std::ostringstream::~ostringstream((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::AffineTransform::InfoGradient(kaldi::nnet1::AffineTransform *this@<X0>, void *a2@<X8>)
{
  if (*((unsigned char *)this + 232))
  {
    std::string::basic_string[abi:ne180100]<0>(&v42, "\n  linearity_grad");
    kaldi::nnet1::MomentStatistics<float>((void *)this + 17);
    if ((v41 & 0x80u) == 0) {
      uint64_t v4 = v40;
    }
    else {
      uint64_t v4 = (void **)v40[0];
    }
    if ((v41 & 0x80u) == 0) {
      std::string::size_type v5 = v41;
    }
    else {
      std::string::size_type v5 = (std::string::size_type)v40[1];
    }
    int v6 = std::string::append(&v42, (const std::string::value_type *)v4, v5);
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v43.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    uint64_t v8 = std::string::append(&v43, ", lr-coef ");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    kaldi::nnet1::ToString<float>();
    if ((v39 & 0x80u) == 0) {
      uint64_t v10 = v38;
    }
    else {
      uint64_t v10 = (void **)v38[0];
    }
    if ((v39 & 0x80u) == 0) {
      std::string::size_type v11 = v39;
    }
    else {
      std::string::size_type v11 = (std::string::size_type)v38[1];
    }
    uint64_t v12 = std::string::append(&v44, (const std::string::value_type *)v10, v11);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    uint64_t v14 = std::string::append(&v45, ", max-norm ");
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v46.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    kaldi::nnet1::ToString<float>();
    if ((v37 & 0x80u) == 0) {
      uint64_t v16 = v36;
    }
    else {
      uint64_t v16 = (void **)v36[0];
    }
    if ((v37 & 0x80u) == 0) {
      std::string::size_type v17 = v37;
    }
    else {
      std::string::size_type v17 = (std::string::size_type)v36[1];
    }
    uint64_t v18 = std::string::append(&v46, (const std::string::value_type *)v16, v17);
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v47.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    uint64_t v20 = std::string::append(&v47, "\n  bias_grad");
    long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v48.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    kaldi::nnet1::MomentStatistics<float>((void *)this + 20);
    if ((v35 & 0x80u) == 0) {
      uint64_t v22 = v34;
    }
    else {
      uint64_t v22 = (void **)v34[0];
    }
    if ((v35 & 0x80u) == 0) {
      std::string::size_type v23 = v35;
    }
    else {
      std::string::size_type v23 = (std::string::size_type)v34[1];
    }
    unint64_t v24 = std::string::append(&v48, (const std::string::value_type *)v22, v23);
    long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    unint64_t v26 = std::string::append(&v49, ", lr-coef ");
    long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    kaldi::nnet1::ToString<float>();
    if ((v33 & 0x80u) == 0) {
      unint64_t v28 = __p;
    }
    else {
      unint64_t v28 = (void **)__p[0];
    }
    if ((v33 & 0x80u) == 0) {
      std::string::size_type v29 = v33;
    }
    else {
      std::string::size_type v29 = (std::string::size_type)__p[1];
    }
    uint64_t v30 = std::string::append(&v50, (const std::string::value_type *)v28, v29);
    long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    a2[2] = *((void *)&v30->__r_.__value_.__l + 2);
    *(_OWORD *)a2 = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    if ((char)v33 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v50.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v49.__r_.__value_.__l.__data_);
    }
    if ((char)v35 < 0) {
      operator delete(v34[0]);
    }
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v48.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v47.__r_.__value_.__l.__data_);
    }
    if ((char)v37 < 0) {
      operator delete(v36[0]);
    }
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v46.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v45.__r_.__value_.__l.__data_);
    }
    if ((char)v39 < 0) {
      operator delete(v38[0]);
    }
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v44.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v43.__r_.__value_.__l.__data_);
    }
    if ((char)v41 < 0) {
      operator delete(v40[0]);
    }
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v42.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "\n  linearity_grad is uninitialized\n  bias_grad is uninitialized");
  }
}

void sub_1B210ACD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v64 - 41) < 0) {
    operator delete(*(void **)(v64 - 64));
  }
  if (*(char *)(v64 - 73) < 0) {
    operator delete(*(void **)(v64 - 96));
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (*(char *)(v64 - 105) < 0) {
    operator delete(*(void **)(v64 - 128));
  }
  if (*(char *)(v64 - 137) < 0) {
    operator delete(*(void **)(v64 - 160));
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (*(char *)(v64 - 169) < 0) {
    operator delete(*(void **)(v64 - 192));
  }
  if (a64 < 0) {
    operator delete(a59);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a57 < 0) {
    operator delete(a52);
  }
  if (a50 < 0) {
    operator delete(a45);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  _Unwind_Resume(a1);
}

void sub_1B210AE00()
{
}

void sub_1B210AE08()
{
}

void sub_1B210AE10()
{
}

void sub_1B210AE18()
{
}

void sub_1B210AE20()
{
}

void kaldi::nnet1::AffineTransform::InitData(uint64_t a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  float v80 = 2.0;
  int v81 = -1073741824;
  int v79 = 1036831949;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)2, &v78);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 244), &v77);
  int v76 = -1;
  memset(v75, 0, sizeof(v75));
  while (2)
  {
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 2) != 0) {
      goto LABEL_147;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)v75);
    if ((SHIBYTE(v75[2]) & 0x80000000) == 0)
    {
      switch(HIBYTE(v75[2]))
      {
        case 9:
          BOOL v6 = v75[0] == (void *)0x6D726F4E78614D3CLL && LOBYTE(v75[1]) == 62;
          long long v7 = (float *)(a1 + 252);
          if (v6) {
            goto LABEL_107;
          }
          BOOL v8 = v75[0] == (void *)0x6461724778614D3CLL && LOBYTE(v75[1]) == 62;
          long long v7 = (float *)(a1 + 248);
          if (v8) {
            goto LABEL_107;
          }
          if (v75[0] != (void *)0x78616D74666F533CLL || LOBYTE(v75[1]) != 62) {
            goto LABEL_182;
          }
          goto LABEL_32;
        case 0xA:
          if (v75[0] != (void *)0x61654D736169423CLL || LOWORD(v75[1]) != 15982) {
            goto LABEL_182;
          }
          goto LABEL_100;
        case 0xB:
          if (v75[0] != (void *)0x6E6152736169423CLL || *(void **)((char *)v75 + 3) != (void *)0x3E65676E61527361) {
            goto LABEL_182;
          }
          goto LABEL_86;
        case 0xC:
          if (v75[0] == (void *)0x536D6F646E61523CLL && LODWORD(v75[1]) == 1046766949) {
            goto LABEL_136;
          }
          unsigned __int8 v37 = v75;
          goto LABEL_142;
        case 0xD:
          if (v75[0] != (void *)0x74536D617261503CLL || *(void **)((char *)v75 + 5) != (void *)0x3E7665646474536DLL) {
            goto LABEL_182;
          }
          goto LABEL_106;
        case 0xF:
          BOOL v15 = v75[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v75 + 7) == (void *)0x3E66656F43657461;
          long long v7 = (float *)(a1 + 236);
          if (!v15) {
            goto LABEL_182;
          }
          goto LABEL_107;
        case 0x12:
          if (v75[0] != (void *)0x6E6569646172473CLL
            || v75[1] != (void *)0x7079546D726F4E74
            || LOWORD(v75[2]) != 15973)
          {
            goto LABEL_182;
          }
          goto LABEL_135;
        case 0x13:
          BOOL v18 = v75[0] == (void *)0x61654C736169423CLL
             && v75[1] == (void *)0x6F43657461526E72
             && *(void **)((char *)&v75[1] + 3) == (void *)0x3E66656F43657461;
          long long v7 = (float *)(a1 + 240);
          if (v18) {
            goto LABEL_107;
          }
          if (v75[0] != (void *)0x61725474696E493CLL
            || v75[1] != (void *)0x79546D726F66736ELL
            || *(void **)((char *)&v75[1] + 3) != (void *)0x3E657079546D726FLL)
          {
            goto LABEL_182;
          }
          goto LABEL_137;
        default:
          goto LABEL_182;
      }
    }
    char v10 = 0;
    switch((unint64_t)v75[1])
    {
      case 9uLL:
        BOOL v11 = *(void *)v75[0] == 0x6D726F4E78614D3CLL && *((unsigned char *)v75[0] + 8) == 62;
        long long v7 = (float *)(a1 + 252);
        if (v11) {
          goto LABEL_107;
        }
        BOOL v12 = *(void *)v75[0] == 0x6461724778614D3CLL && *((unsigned char *)v75[0] + 8) == 62;
        long long v7 = (float *)(a1 + 248);
        if (v12) {
          goto LABEL_107;
        }
        if (*(void *)v75[0] != 0x78616D74666F533CLL || *((unsigned char *)v75[0] + 8) != 62) {
          goto LABEL_140;
        }
LABEL_32:
        *(unsigned char *)(a1 + 128) = 1;
        goto LABEL_139;
      case 0xAuLL:
        if (*(void *)v75[0] != 0x61654D736169423CLL || *((_WORD *)v75[0] + 4) != 15982) {
          goto LABEL_112;
        }
LABEL_100:
        long long v7 = (float *)&v81;
        goto LABEL_107;
      case 0xBuLL:
        if (*(void *)v75[0] != 0x6E6152736169423CLL || *(void *)((char *)v75[0] + 3) != 0x3E65676E61527361) {
          goto LABEL_112;
        }
LABEL_86:
        long long v7 = &v80;
        goto LABEL_107;
      case 0xDuLL:
        if (*(void *)v75[0] != 0x74536D617261503CLL || *(void *)((char *)v75[0] + 5) != 0x3E7665646474536DLL) {
          goto LABEL_182;
        }
LABEL_106:
        long long v7 = (float *)&v79;
        goto LABEL_107;
      case 0xFuLL:
        BOOL v30 = *(void *)v75[0] == 0x61526E7261654C3CLL && *(void *)((char *)v75[0] + 7) == 0x3E66656F43657461;
        long long v7 = (float *)(a1 + 236);
        if (v30) {
          goto LABEL_107;
        }
LABEL_112:
        char v10 = 0;
        goto LABEL_113;
      case 0x13uLL:
        BOOL v27 = *(void *)v75[0] == 0x61654C736169423CLL
           && *((void *)v75[0] + 1) == 0x6F43657461526E72
           && *(void *)((char *)v75[0] + 11) == 0x3E66656F43657461;
        long long v7 = (float *)(a1 + 240);
        if (v27)
        {
LABEL_107:
          kaldi::ReadBasicType<float>(a2, 0, v7);
          goto LABEL_139;
        }
        char v10 = 1;
LABEL_113:
        if (v75[1] == (void *)12
          && *(void *)v75[0] == 0x536D6F646E61523CLL
          && *((_DWORD *)v75[0] + 2) == 1046766949)
        {
LABEL_136:
          kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v76);
          goto LABEL_139;
        }
        if (v10)
        {
          BOOL v32 = *(void *)v75[0] == 0x61725474696E493CLL && *((void *)v75[0] + 1) == 0x79546D726F66736ELL;
          if (v32 && *(void *)((char *)v75[0] + 11) == 0x3E657079546D726FLL)
          {
LABEL_137:
            unint64_t v36 = &v78;
            goto LABEL_138;
          }
        }
        if (v75[1] == (void *)18)
        {
          BOOL v34 = *(void *)v75[0] == 0x6E6569646172473CLL && *((void *)v75[0] + 1) == 0x7079546D726F4E74;
          if (v34 && *((_WORD *)v75[0] + 8) == 15973)
          {
LABEL_135:
            unint64_t v36 = &v77;
LABEL_138:
            kaldi::ReadToken(a2, 0, (uint64_t)v36);
LABEL_139:
            std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
            continue;
          }
        }
LABEL_140:
        if (v75[1] != (void *)12) {
          goto LABEL_182;
        }
        unsigned __int8 v37 = (void **)v75[0];
LABEL_142:
        uint64_t v38 = *v37;
        int v39 = *((_DWORD *)v37 + 2);
        if (v38 != (void *)0x6E6F706D6F432F3CLL || v39 != 1047817829)
        {
LABEL_182:
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v74);
          long long v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)"Unknown token ", 14);
          if (SHIBYTE(v75[2]) >= 0) {
            long long v61 = v75;
          }
          else {
            long long v61 = (void **)v75[0];
          }
          if (SHIBYTE(v75[2]) >= 0) {
            uint64_t v62 = HIBYTE(v75[2]);
          }
          else {
            uint64_t v62 = (uint64_t)v75[1];
          }
          long long v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)v61, v62);
          uint64_t v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)", a typo in config?", 19);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)" (ParamStddev|BiasMean|BiasRange|LearnRateCoef|BiasLearnRateCoef|MaxNorm|InitTransformType|GradientNormType|MaxGrad|RandomSeed)", 127);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v74);
        }
LABEL_147:
        int inited = kaldi::nnet1::Component::MarkerToMatrixInitType((kaldi::nnet1::Component *)&v78);
        *(_DWORD *)(a1 + 244) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&v77);
        if (v76 >= 1) {
          kaldi::UniformRandomNumber::SetRandomSeeds(a3, v76);
        }
        kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)v70, a3);
        kaldi::Matrix<float>::Matrix((uint64_t)v68, *(unsigned int *)(a1 + 12), *(unsigned int *)(a1 + 8), 0, 0);
        int v42 = *(_DWORD *)(a1 + 12);
        if (v42 < 1) {
          goto LABEL_165;
        }
        uint64_t v43 = 0;
        int v44 = *(_DWORD *)(a1 + 8);
        while (2)
        {
          if (v44 < 1) {
            goto LABEL_164;
          }
          uint64_t v45 = 0;
          while (2)
          {
            switch(inited)
            {
              case 0:
                if (v43 == v45) {
                  float v47 = 1.0;
                }
                else {
                  float v47 = 0.0;
                }
                goto LABEL_161;
              case 2:
                float v48 = *(float *)&v79;
                kaldi::GaussRandomNumber::Rand((kaldi::GaussRandomNumber *)v70, 0);
                float v47 = v48 * v49;
LABEL_161:
                *(float *)(*(void *)v68 + 4 * (int)v43 * v69 + 4 * v45) = v47;
                int v44 = *(_DWORD *)(a1 + 8);
                break;
              case 1:
                float v46 = *(float *)&v79;
                float v47 = (kaldi::UniformRandomNumber::RandUniform(a3, 0) + -0.5) * (float)(v46 + v46);
                goto LABEL_161;
            }
            if (++v45 < v44) {
              continue;
            }
            break;
          }
          int v42 = *(_DWORD *)(a1 + 12);
LABEL_164:
          if (++v43 < v42) {
            continue;
          }
          break;
        }
LABEL_165:
        int v50 = *(_DWORD *)(kaldi::nnet1::AffineTransform::Linearity((kaldi::nnet1::AffineTransform *)a1) + 20);
        if (v50 != kaldi::MatrixBase<float>::NumRows((uint64_t)v68)
          || (int v51 = *(_DWORD *)(kaldi::nnet1::AffineTransform::Linearity((kaldi::nnet1::AffineTransform *)a1) + 16),
              v51 != kaldi::MatrixBase<float>::NumCols((uint64_t)v68)))
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v74);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)"Linearity().NumRows() == mat.NumRows() && Linearity().NumCols() == mat.NumCols()", 80);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v74);
        }
        uint64_t v52 = kaldi::nnet1::AffineTransform::Linearity((kaldi::nnet1::AffineTransform *)a1);
        kaldi::CuMatrixBase<float>::CopyFromMat(v52, v68, 111);
        uint64_t v53 = *(unsigned int *)(a1 + 12);
        uint64_t v66 = 0;
        uint64_t v67 = 0;
        long long v65 = 0;
        kaldi::Vector<float>::Resize((void **)&v65, v53, 0);
        if (*(int *)(a1 + 12) >= 1)
        {
          uint64_t v54 = 0;
          do
          {
            float v55 = *(float *)&v81;
            float v56 = kaldi::UniformRandomNumber::RandUniform(a3, 0);
            float v57 = v55 + (v56 + -0.5) * v80;
            v65[v54++] = v57;
          }
          while (v54 < *(int *)(a1 + 12));
        }
        uint64_t v58 = kaldi::nnet1::AffineTransform::Bias((kaldi::nnet1::AffineTransform *)a1);
        if (*(_DWORD *)(v58 + 16) != v66)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v74);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)"Bias().Dim() == vec.Dim()", 25);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v74);
        }
        long long v59 = (void *)kaldi::nnet1::AffineTransform::Bias((kaldi::nnet1::AffineTransform *)a1);
        kaldi::CuVectorBase<float>::CopyFromVec<float>(v59, (uint64_t)&v65);
        kaldi::Vector<float>::Destroy((uint64_t)&v65);
        kaldi::Matrix<float>::~Matrix((uint64_t)v68);
        if (__p)
        {
          long long v73 = __p;
          operator delete(__p);
        }
        v74[0] = (void **)&v71;
        std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](v74);
        if (SHIBYTE(v75[2]) < 0) {
          operator delete(v75[0]);
        }
        if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v77.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v78.__r_.__value_.__l.__data_);
        }
        return;
      default:
        goto LABEL_113;
    }
  }
}

void kaldi::nnet1::AffineTransform::WriteData(uint64_t *a1, void *a2, int a3, int a4)
{
  (*(void (**)(uint64_t *))(*a1 + 168))(a1);
  kaldi::CuMatrixBase<float>::Write(a1[14], a2, a3, a4);
  uint64_t v8 = a1[15];
  kaldi::CuVectorBase<float>::Write(v8, a2, a3);
}

void kaldi::nnet1::AffineTransform::BackpropagateFnc(kaldi::nnet1::AffineTransform *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v8 = *((void *)this + 44);
  if (v8 == *((void *)this + 45) || !*(_DWORD *)(v8 + 48 * a6 + 20))
  {
    uint64_t v10 = kaldi::nnet1::AffineTransform::Linearity(this);
    kaldi::CuMatrixBase<float>::AddMatMat(a5, a4, CblasNoTrans, v10, CblasNoTrans, 1.0, 0.0);
  }
  else
  {
    uint64_t v9 = kaldi::nnet1::AffineTransform::Linearity(this);
    kaldi::CuMatrixBase<float>::AddMatMatMasked(a5, a4, CblasNoTrans, v9, CblasNoTrans, 1.0);
  }
}

void kaldi::nnet1::AffineTransform::GetUnitOutputFnc(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  kaldi::CuVectorBase<float>::Set(a4, *(float *)(*(void *)(*(void *)(a1 + 120) + 8) + 4 * a3));
  uint64_t v8 = *(void *)(a1 + 112);
  uint64_t v9 = *(void *)(v8 + 8) + 4 * *(_DWORD *)(v8 + 24) * a3;
  unsigned int v10 = *(_DWORD *)(v8 + 16);
  uint64_t v11 = *(void *)(v8 + 32);
  v12[1] = v9;
  v12[0] = &unk_1F0A472D0;
  v12[2] = v10;
  void v12[3] = v11;
  kaldi::CuVectorBase<float>::AddMatVec(a4, a2, CblasNoTrans, (uint64_t)v12, 1.0, 1.0);
}

float kaldi::nnet1::AffineTransform::GetUnitOutputFnc(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = *(void *)(a1 + 112);
  float v4 = *(float *)(*(void *)(*(void *)(a1 + 120) + 8) + 4 * a3);
  uint64_t v5 = *(void *)(v3 + 8) + 4 * *(_DWORD *)(v3 + 24) * a3;
  unsigned int v6 = *(_DWORD *)(v3 + 16);
  uint64_t v7 = *(void *)(v3 + 32);
  v9[1] = v5;
  v9[0] = &unk_1F0A472D0;
  uint64_t v9[2] = v6;
  void v9[3] = v7;
  return v4 + kaldi::VecVec<float>(a2, (uint64_t)v9);
}

uint64_t kaldi::nnet1::AffineTransform::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  while (kaldi::Peek(a2, a3) == 60)
  {
    memset(v34, 0, 24);
    kaldi::ReadToken(a2, a3, (uint64_t)v34);
    if (SHIBYTE(v34[2]) < 0)
    {
      uint64_t v9 = v34[1];
      if (v34[1] == (void *)15)
      {
        BOOL v10 = *(void *)v34[0] == 0x61526E7261654C3CLL && *(void *)((char *)v34[0] + 7) == 0x3E66656F43657461;
        uint64_t v8 = (float *)(a1 + 236);
        if (v10) {
          goto LABEL_82;
        }
      }
      if (v34[1] == (void *)19)
      {
        BOOL v12 = *(void *)v34[0] == 0x61654C736169423CLL
           && *((void *)v34[0] + 1) == 0x6F43657461526E72
           && *(void *)((char *)v34[0] + 11) == 0x3E66656F43657461;
        uint64_t v8 = (float *)(a1 + 240);
        if (v12) {
          goto LABEL_82;
        }
        uint64_t v9 = v34[1];
      }
      if (v9 == (void *)9)
      {
        BOOL v13 = *(void *)v34[0] == 0x6D726F4E78614D3CLL && *((unsigned char *)v34[0] + 8) == 62;
        uint64_t v8 = (float *)(a1 + 252);
        if (v13) {
          goto LABEL_82;
        }
        uint64_t v9 = v34[1];
      }
      if (v9 == (void *)18)
      {
        if (*(void *)v34[0] == 0x6E6569646172473CLL
          && *((void *)v34[0] + 1) == 0x7079546D726F4E74
          && *((_WORD *)v34[0] + 8) == 15973)
        {
LABEL_87:
          __p[0] = 0;
          __p[1] = 0;
          uint64_t v33 = 0;
          kaldi::ReadToken(a2, a3, (uint64_t)__p);
          *(_DWORD *)(a1 + 244) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
          if (SHIBYTE(v33) < 0) {
            operator delete(__p[0]);
          }
          goto LABEL_83;
        }
        uint64_t v9 = v34[1];
      }
      if (v9 != (void *)9) {
        goto LABEL_90;
      }
      BOOL v16 = *(void *)v34[0] == 0x6461724778614D3CLL && *((unsigned char *)v34[0] + 8) == 62;
      uint64_t v8 = (float *)(a1 + 248);
      if (!v16)
      {
        if (v34[1] != (void *)9) {
          goto LABEL_90;
        }
        std::string::size_type v17 = (void **)v34[0];
        goto LABEL_76;
      }
    }
    else if (HIBYTE(v34[2]) > 0x11u)
    {
      if (HIBYTE(v34[2]) == 18)
      {
        if (v34[0] == (void *)0x6E6569646172473CLL && v34[1] == (void *)0x7079546D726F4E74 && LOWORD(v34[2]) == 15973) {
          goto LABEL_87;
        }
LABEL_70:
        if (HIBYTE(v34[2]) != 9) {
          goto LABEL_90;
        }
        BOOL v23 = v34[0] == (void *)0x6461724778614D3CLL && LOBYTE(v34[1]) == 62;
        uint64_t v8 = (float *)(a1 + 248);
        if (!v23)
        {
          std::string::size_type v17 = v34;
LABEL_76:
          unint64_t v24 = *v17;
          int v25 = *((unsigned __int8 *)v17 + 8);
          if (v24 != (void *)0x78616D74666F533CLL || v25 != 62) {
            goto LABEL_90;
          }
          *(unsigned char *)(a1 + 128) = 1;
          goto LABEL_83;
        }
        goto LABEL_82;
      }
      if (HIBYTE(v34[2]) != 19
        || (v34[0] == (void *)0x61654C736169423CLL ? (BOOL v18 = v34[1] == (void *)0x6F43657461526E72) : (BOOL v18 = 0),
            v18 ? (BOOL v19 = *(void **)((char *)&v34[1] + 3) == (void *)0x3E66656F43657461) : (BOOL v19 = 0),
            uint64_t v8 = (float *)(a1 + 240),
            !v19))
      {
LABEL_90:
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        unint64_t v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
        if (SHIBYTE(v34[2]) >= 0) {
          std::string::size_type v29 = v34;
        }
        else {
          std::string::size_type v29 = (void **)v34[0];
        }
        if (SHIBYTE(v34[2]) >= 0) {
          uint64_t v30 = HIBYTE(v34[2]);
        }
        else {
          uint64_t v30 = (uint64_t)v34[1];
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v29, v30);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
      }
    }
    else if (HIBYTE(v34[2]) == 9)
    {
      BOOL v20 = v34[0] == (void *)0x6D726F4E78614D3CLL && LOBYTE(v34[1]) == 62;
      uint64_t v8 = (float *)(a1 + 252);
      if (!v20) {
        goto LABEL_70;
      }
    }
    else
    {
      if (HIBYTE(v34[2]) != 15) {
        goto LABEL_90;
      }
      BOOL v7 = v34[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v34 + 7) == (void *)0x3E66656F43657461;
      uint64_t v8 = (float *)(a1 + 236);
      if (!v7) {
        goto LABEL_90;
      }
    }
LABEL_82:
    kaldi::ReadBasicType<float>(a2, a3, v8);
LABEL_83:
    if (SHIBYTE(v34[2]) < 0) {
      operator delete(v34[0]);
    }
  }
  (***(void (****)(void, uint64_t *, uint64_t, uint64_t))(a1 + 112))(*(void *)(a1 + 112), a2, a3, a4);
  (***(void (****)(void))(a1 + 120))();
  *(unsigned char *)(a1 + 16) = 0;
  kaldi::nnet1::AffineTransform::Linearity((kaldi::nnet1::AffineTransform *)a1);
  kaldi::nnet1::AffineTransform::Linearity((kaldi::nnet1::AffineTransform *)a1);
  return kaldi::nnet1::AffineTransform::Bias((kaldi::nnet1::AffineTransform *)a1);
}

void sub_1B210C054()
{
}

void *kaldi::nnet1::AffineTransform::WriteConfig(uint64_t a1, void *a2, uint64_t a3)
{
  kaldi::WriteToken(a2, a3, "<LearnRateCoef>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<BiasLearnRateCoef>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<MaxNorm>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<GradientNormType>");
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 244), &__p);
  kaldi::WriteToken(a2, a3, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  kaldi::WriteToken(a2, a3, "<MaxGrad>");
  uint64_t result = kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  if (*(unsigned char *)(a1 + 128)) {
    return kaldi::WriteToken(a2, a3, "<Softmax>");
  }
  return result;
}

void sub_1B210C198(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::AffineTransform::NumParams(kaldi::nnet1::AffineTransform *this)
{
  return (*(_DWORD *)(*((void *)this + 15) + 16)
                      + *(_DWORD *)(*((void *)this + 14) + 16) * *(_DWORD *)(*((void *)this + 14) + 20));
}

const void **kaldi::nnet1::AffineTransform::GetParams(void *a1, void **a2)
{
  uint64_t v4 = (*(uint64_t (**)(void *))(*a1 + 176))(a1);
  kaldi::Vector<float>::Resize(a2, v4, 0);
  uint64_t v5 = a1[14];
  int v6 = *(_DWORD *)(v5 + 16) * *(_DWORD *)(v5 + 20);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  BOOL v10 = (char *)*a2;
  LODWORD(v11) = v6;
  kaldi::VectorBase<float>::CopyRowsFromMat((void **)&v10, v5);
  uint64_t v7 = a1[15];
  int v8 = *(_DWORD *)(v7 + 16);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  BOOL v10 = (char *)*a2 + 4 * v6;
  LODWORD(v11) = v8;
  return kaldi::CuVectorBase<float>::CopyToVec<float>((const void **)v7, (uint64_t)&v10);
}

void *kaldi::nnet1::AffineTransform::SetParams(kaldi::nnet1::AffineTransform *a1, char **a2)
{
  (*(void (**)(kaldi::nnet1::AffineTransform *))(*(void *)a1 + 176))(a1);
  int v4 = *(_DWORD *)(kaldi::nnet1::AffineTransform::Linearity(a1) + 20);
  int v5 = *(_DWORD *)(kaldi::nnet1::AffineTransform::Linearity(a1) + 16) * v4;
  uint64_t v6 = kaldi::nnet1::AffineTransform::Linearity(a1);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  BOOL v10 = *a2;
  LODWORD(v11) = v5;
  kaldi::CuMatrixBase<float>::CopyRowsFromVec(v6, &v10);
  uint64_t v7 = (void *)kaldi::nnet1::AffineTransform::Bias(a1);
  int v8 = *(_DWORD *)(kaldi::nnet1::AffineTransform::Bias(a1) + 16);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  BOOL v10 = &(*a2)[4 * v5];
  LODWORD(v11) = v8;
  return kaldi::CuVectorBase<float>::CopyFromVec<float>(v7, (uint64_t)&v10);
}

float kaldi::nnet1::AffineTransform::GetNormalizedLearningRate(kaldi::nnet1::AffineTransform *this, int a2)
{
  if (!*((unsigned char *)this + 84)) {
    return *((float *)this + 14);
  }
  uint64_t v2 = *((void *)this + 35);
  unint64_t v3 = *((void *)this + 36) - v2;
  if (!v3) {
    return NAN;
  }
  unint64_t v4 = v3 >> 2;
  if ((int)v4 <= a2) {
    return NAN;
  }
  int v5 = v4 - 1;
  if (a2 >= 0) {
    int v5 = a2;
  }
  return *(float *)(v2 + 4 * v5);
}

float kaldi::nnet1::AffineTransform::SumParams(kaldi::nnet1::AffineTransform *this)
{
  float v2 = kaldi::CuMatrixBase<float>::Sum(*((void *)this + 14));
  double v3 = kaldi::CuVectorBase<float>::Sum(*((void *)this + 15));
  return v2 + *(float *)&v3;
}

uint64_t kaldi::nnet1::AffineTransform::PerturbParams(kaldi::nnet1::AffineTransform *this, float a2)
{
  uint64_t v4 = *(unsigned int *)(kaldi::nnet1::AffineTransform::Linearity(this) + 20);
  uint64_t v5 = kaldi::nnet1::AffineTransform::Linearity(this);
  kaldi::CuMatrix<float>::CuMatrix(v11, v4, *(unsigned int *)(v5 + 16), 1, 0, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v11);
  uint64_t v6 = kaldi::nnet1::AffineTransform::Linearity(this);
  kaldi::CuMatrixBase<float>::AddMat(v6, (uint64_t)v11, 111, a2, 1.0);
  uint64_t v7 = *(unsigned int *)(kaldi::nnet1::AffineTransform::Bias(this) + 16);
  memset(&v10[1], 0, 24);
  v10[0] = &unk_1F0A517C0;
  kaldi::CuVector<float>::Resize((uint64_t)v10, v7, 1);
  kaldi::CuVectorBase<float>::SetRandn((uint64_t)v10);
  uint64_t v8 = kaldi::nnet1::AffineTransform::Bias(this);
  kaldi::CuVectorBase<float>::AddVec(v8, (uint64_t)v10, a2, 1.0);
  kaldi::CuVector<float>::~CuVector(v10);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v11);
}

void sub_1B210C4C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::AffineTransform::GetGradient(void *a1, uint64_t a2, uint64_t a3, void **a4)
{
  uint64_t v8 = (kaldi::nnet1::AffineTransform *)(*(uint64_t (**)(void *))(*a1 + 16))(a1);
  (*(void (**)(kaldi::nnet1::AffineTransform *, uint64_t, uint64_t, void, void))(*(void *)v8 + 232))(v8, a2, a3, 0, 0);
  LODWORD(a3) = *(_DWORD *)(a1[14] + 16) * *(_DWORD *)(a1[14] + 20);
  uint64_t v9 = (*(uint64_t (**)(void *))(*a1 + 176))(a1);
  kaldi::Vector<float>::Resize(a4, v9, 0);
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v14 = (char *)*a4;
  LODWORD(v15) = a3;
  uint64_t v10 = kaldi::nnet1::AffineTransform::LinearityCorr(v8, 0);
  kaldi::VectorBase<float>::CopyRowsFromMat((void **)&v14, v10);
  int v11 = *(_DWORD *)(a1[15] + 16);
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v14 = (char *)*a4 + 4 * (int)a3;
  LODWORD(v15) = v11;
  uint64_t v12 = (const void **)kaldi::nnet1::AffineTransform::BiasCorr(v8, 0);
  kaldi::CuVectorBase<float>::CopyToVec<float>(v12, (uint64_t)&v14);
  return (*(uint64_t (**)(kaldi::nnet1::AffineTransform *))(*(void *)v8 + 8))(v8);
}

void kaldi::nnet1::AffineTransform::AccumGradients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  kaldi::nnet1::AffineTransform::EnsureCorrs((kaldi::nnet1::AffineTransform *)a1);
  *(void *)(kaldi::nnet1::AffineTransform::LinearityCorr((kaldi::nnet1::AffineTransform *)a1, a5) + 32) = a4;
  *(void *)(kaldi::nnet1::AffineTransform::BiasCorr((kaldi::nnet1::AffineTransform *)a1, a5) + 24) = a4;
  float v10 = *(float *)(a1 + 60);
  *(_DWORD *)(*(void *)(a1 + 256) + 4 * a5) = *(_DWORD *)(a2 + 20);
  uint64_t v11 = *(void *)(a1 + 352);
  if (v11 == *(void *)(a1 + 360) || !*(_DWORD *)(v11 + 48 * a5 + 20))
  {
    uint64_t v13 = kaldi::nnet1::AffineTransform::LinearityCorr((kaldi::nnet1::AffineTransform *)a1, a5);
    kaldi::CuMatrixBase<float>::AddMatMat(v13, a3, CblasTrans, a2, CblasNoTrans, 1.0, v10);
  }
  else
  {
    uint64_t v12 = kaldi::nnet1::AffineTransform::LinearityCorr((kaldi::nnet1::AffineTransform *)a1, a5);
    if (v10 == 0.0) {
      kaldi::CuMatrixBase<float>::SetZero(v12);
    }
    else {
      kaldi::CuMatrixBase<float>::Scale(v12, v10);
    }
    uint64_t v14 = kaldi::nnet1::AffineTransform::LinearityCorr((kaldi::nnet1::AffineTransform *)a1, a5);
    kaldi::CuMatrixBase<float>::AddMatMatMasked(v14, a3, CblasTrans, a2, CblasNoTrans, 1.0);
  }
  uint64_t v15 = kaldi::nnet1::AffineTransform::BiasCorr((kaldi::nnet1::AffineTransform *)a1, a5);
  kaldi::CuVectorBase<float>::AddRowSumMat(v15, a3, 1.0, v10);
}

uint64_t kaldi::nnet1::AffineTransform::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  *(float *)(result + 248) = a3;
  *(_DWORD *)(result + 244) = a2;
  *(unsigned char *)(result + 232) = 0;
  return result;
}

void kaldi::nnet1::AffineTransform::NormalizeGradients(kaldi::nnet1::AffineTransform *this, float a2, int a3)
{
  float v4 = a2;
  int v6 = *((_DWORD *)this + 61);
  if (v6 == 3)
  {
    if (a2 >= 0.0 && a2 <= 1.0)
    {
      uint64_t v10 = kaldi::nnet1::AffineTransform::LinearityCorr(this, a3);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v10, *((void *)this + 23) + 48 * a3, v4);
      uint64_t v11 = kaldi::nnet1::AffineTransform::BiasCorr(this, a3);
      uint64_t v12 = *((void *)this + 26) + 32 * a3;
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v11, v12, v4);
    }
  }
  else if (v6 == 2)
  {
    if (a2 > 0.0)
    {
      uint64_t v13 = a3;
      if (*((unsigned char *)this + 84)) {
        float v4 = (float)*(int *)(*((void *)this + 32) + 4 * a3) * a2;
      }
      uint64_t v14 = kaldi::nnet1::AffineTransform::LinearityCorr(this, a3);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v14, (int *)(*((void *)this + 23) + 48 * (int)v13), v4);
      uint64_t v15 = kaldi::nnet1::AffineTransform::BiasCorr(this, a3);
      uint64_t v16 = (void *)(*((void *)this + 26) + 32 * v13);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v15, v16, v4);
    }
  }
  else if (v6 == 1 && a2 > 0.0)
  {
    if (*((unsigned char *)this + 84)) {
      float v4 = (float)*(int *)(*((void *)this + 32) + 4 * a3) * a2;
    }
    uint64_t v7 = kaldi::nnet1::AffineTransform::LinearityCorr(this, a3);
    kaldi::nnet1::UpdatableComponent::ClipGradient(v7, v4);
    uint64_t v8 = kaldi::nnet1::AffineTransform::BiasCorr(this, a3);
    kaldi::nnet1::UpdatableComponent::ClipGradient(v8, v4);
  }
}

void kaldi::nnet1::AffineTransform::UpdateWeights(kaldi::nnet1::AffineTransform *this, void *a2, int a3)
{
  kaldi::nnet1::AffineTransform::EnsureCorrs(this);
  float v6 = *((float *)this + 16);
  float v7 = *((float *)this + 17);
  float v8 = *((float *)this + 18);
  int v9 = *((_DWORD *)this + 19);
  *(void *)(kaldi::nnet1::AffineTransform::Linearity(this) + 32) = a2;
  *(void *)(kaldi::nnet1::AffineTransform::Bias(this) + 24) = a2;
  if (a3 >= 0) {
    int v10 = a3;
  }
  else {
    int v10 = *((_DWORD *)this + 20);
  }
  if (*((_DWORD *)this + 20) == 1) {
    int v11 = 0;
  }
  else {
    int v11 = v10;
  }
  *(void *)(kaldi::nnet1::AffineTransform::LinearityCorr(this, v11) + 32) = a2;
  *(void *)(kaldi::nnet1::AffineTransform::BiasCorr(this, v11) + 24) = a2;
  unint64_t v12 = v11;
  *(void *)(*((void *)this + 23) + 48 * v11 + 32) = a2;
  *(void *)(*((void *)this + 26) + 32 * v11 + 24) = a2;
  if (v11 == *((_DWORD *)this + 20))
  {
    uint64_t v13 = kaldi::nnet1::AffineTransform::LinearityCorr(this, v11);
    uint64_t v14 = kaldi::nnet1::AffineTransform::LinearityCorr(this, 0);
    kaldi::CuMatrixBase<float>::AddMat(v13, v14, 111, 1.0, 0.0);
    uint64_t v15 = kaldi::nnet1::AffineTransform::BiasCorr(this, v12);
    uint64_t v16 = kaldi::nnet1::AffineTransform::BiasCorr(this, 0);
    kaldi::CuVectorBase<float>::AddVec(v15, v16, 1.0, 0.0);
    if (*((int *)this + 20) > 1)
    {
      int v17 = 1;
      do
      {
        uint64_t v18 = kaldi::nnet1::AffineTransform::LinearityCorr(this, v12);
        uint64_t v19 = kaldi::nnet1::AffineTransform::LinearityCorr(this, v17);
        kaldi::CuMatrixBase<float>::AddMat(v18, v19, 111, 1.0, 1.0);
        uint64_t v20 = kaldi::nnet1::AffineTransform::BiasCorr(this, v12);
        uint64_t v21 = kaldi::nnet1::AffineTransform::BiasCorr(this, v17);
        kaldi::CuVectorBase<float>::AddVec(v20, v21, 1.0, 1.0);
        ++v17;
      }
      while (v17 < *((_DWORD *)this + 20));
    }
    uint64_t v22 = (int *)*((void *)this + 32);
    v22[v12] = 0;
    if ((int)v12 >= 1)
    {
      int v23 = 0;
      uint64_t v24 = v12;
      int v25 = v22;
      do
      {
        int v26 = *v25++;
        v23 += v26;
        v22[v12] = v23;
        --v24;
      }
      while (v24);
    }
  }
  float v27 = *((float *)this + 14);
  if (*((unsigned char *)this + 84)) {
    float v27 = v27 / (float)*(int *)(*((void *)this + 32) + 4 * v12);
  }
  uint64_t v28 = *((void *)this + 35);
  if (v12 >= (*((void *)this + 36) - v28) >> 2)
  {
    LODWORD(v42[0]) = 2143289344;
    std::vector<float>::resize((uint64_t)this + 280, (int)v12 + 1, v42);
    uint64_t v28 = *((void *)this + 35);
  }
  *(float *)(v28 + 4 * v12) = v27;
  if (*((float *)this + 62) >= 0.0) {
    (*(void (**)(kaldi::nnet1::AffineTransform *, unint64_t))(*(void *)this + 248))(this, v12);
  }
  if (v6 != 0.0)
  {
    uint64_t v29 = kaldi::nnet1::AffineTransform::Linearity(this);
    float v30 = (float)-(float)(v27 * v6) * (float)*(int *)(*((void *)this + 32) + 4 * v12);
    uint64_t v31 = kaldi::nnet1::AffineTransform::Linearity(this);
    kaldi::CuMatrixBase<float>::AddMat(v29, v31, 111, v30, 1.0);
  }
  if (v7 != 0.0)
  {
    uint64_t v32 = kaldi::nnet1::AffineTransform::Linearity(this);
    uint64_t v33 = kaldi::nnet1::AffineTransform::LinearityCorr(this, v12);
    kaldi::cu::RegularizeL1<float>(v32, v33, (float)(v7 * v27) * (float)*(int *)(*((void *)this + 32) + 4 * v12), v27);
  }
  if (v8 > 0.0)
  {
    if (*((int *)this + 20) >= 2)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v42);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v42, "the multi batch gradient quantization does not work yet");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v42);
    }
    if (*((void *)this + 48) == *((void *)this + 47)) {
      kaldi::nnet1::AffineTransform::InitResidualAggregator(this, (kaldi::nnet1::AffineTransform *)((char *)this + 376));
    }
    kaldi::nnet1::QuantizerResidualAggregator::Quantize((kaldi::nnet1::AffineTransform *)((char *)this + 376), v9, v8);
  }
  kaldi::nnet1::AffineTransform::ApplyCorr(this, v27, v12);
  if (*((float *)this + 63) > 0.0)
  {
    *((void *)this + 42) = a2;
    uint64_t v34 = kaldi::nnet1::AffineTransform::Linearity(this);
    kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)this + 76, v34, 111);
    uint64_t v35 = kaldi::nnet1::AffineTransform::Linearity(this);
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)this + 304, v35);
    uint64_t v36 = *((unsigned int *)this + 3);
    v42[2] = 0;
    uint64_t v43 = 0;
    v42[0] = &unk_1F0A517C0;
    v42[1] = 0;
    kaldi::CuVector<float>::Resize((uint64_t)v42, v36, 0);
    uint64_t v43 = a2;
    kaldi::CuVectorBase<float>::AddColSumMat((uint64_t)v42, (uint64_t)this + 304, 1.0, 0.0);
    kaldi::CuVectorBase<float>::ApplyPow((uint64_t)v42, 0.5);
    kaldi::CuVector<float>::CuVector(v41, (uint64_t)v42);
    kaldi::CuVectorBase<float>::Scale((uint64_t)v41, 1.0 / *((float *)this + 63));
    kaldi::CuVectorBase<float>::ApplyFloor((uint64_t)v41, 1.0);
    kaldi::CuVectorBase<float>::InvertElements((uint64_t)v41);
    uint64_t v37 = kaldi::nnet1::AffineTransform::Linearity(this);
    kaldi::CuMatrixBase<float>::MulRowsVec(v37, (uint64_t)v41);
    uint64_t v38 = kaldi::nnet1::AffineTransform::Bias(this);
    kaldi::CuVectorBase<float>::ApplyMaxNorm(v38, *((float *)this + 63));
    kaldi::CuVector<float>::~CuVector(v41);
    kaldi::CuVector<float>::~CuVector(v42);
  }
  int v39 = (unsigned char *)*((void *)this + 32);
  if (v12 == *((_DWORD *)this + 20))
  {
    unint64_t v40 = (unsigned char *)*((void *)this + 33);
    if (v39 != v40) {
      bzero(v39, ((v40 - v39 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
    }
  }
  else
  {
    *(_DWORD *)&v39[4 * v12] = 0;
  }
}

void sub_1B210CE20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  kaldi::CuVector<float>::~CuVector((uint64_t *)va);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'kaldi::nnet1::AffineTransform::~AffineTransform(kaldi::nnet1::AffineTransform *this)
{
}

{
  uint64_t vars8;

  kaldi::nnet1::AffineTransform::~AffineTransform((kaldi::nnet1::AffineTransform *)((char *)this - 88));
  JUMPOUT(0x1B3EA8670);
}

{
  kaldi::nnet1::AffineTransform::~AffineTransform((kaldi::nnet1::AffineTransform *)((char *)this - 96));
}

{
  uint64_t vars8;

  kaldi::nnet1::AffineTransform::~AffineTransform((kaldi::nnet1::AffineTransform *)((char *)this - 96));
  JUMPOUT(0x1B3EA8670);
}

{
  kaldi::nnet1::AffineTransform::~AffineTransform((kaldi::nnet1::AffineTransform *)((char *)this - 104));
}

{
  uint64_t vars8;

  kaldi::nnet1::AffineTransform::~AffineTransform((kaldi::nnet1::AffineTransform *)((char *)this - 104));
  JUMPOUT(0x1B3EA8670);
}

kaldi::nnet1::AffineTransform *kaldi::nnet1::AffineTransform::AffineTransform(kaldi::nnet1::AffineTransform *this, const kaldi::nnet1::AffineTransform *a2)
{
  *(void *)this = &unk_1F0A4FA88;
  uint64_t v4 = *((void *)a2 + 1);
  *((_WORD *)this + 8) = *((_WORD *)a2 + 8);
  *((void *)this + 1) = v4;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((void *)this + 3, *((const void **)a2 + 3), *((void *)a2 + 4), (uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3);
  *(void *)this = &unk_1F0A4BA20;
  *((void *)this + 6) = &unk_1F0A4A6D0;
  long long v5 = *(_OWORD *)((char *)a2 + 56);
  *(_OWORD *)((char *)this + 71) = *(_OWORD *)((char *)a2 + 71);
  *(_OWORD *)((char *)this + 56) = v5;
  *(void *)this = &unk_1F0A49CD0;
  *((void *)this + 11) = &unk_1F0A49E10;
  *((void *)this + 12) = &unk_1F0A49E38;
  *((void *)this + 13) = &unk_1F0A49E60;
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  *((unsigned char *)this + 128) = *((unsigned char *)a2 + 128);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)this + 17, (uint64_t)(*((void *)a2 + 18) - *((void *)a2 + 17)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::vector((void *)this + 20, (uint64_t)(*((void *)a2 + 21) - *((void *)a2 + 20)) >> 3);
  *((void *)this + 23) = 0;
  *((void *)this + 24) = 0;
  *((void *)this + 25) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 23, *((void *)a2 + 23), *((void *)a2 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 24) - *((void *)a2 + 23)) >> 4));
  *((void *)this + 26) = 0;
  *((void *)this + 27) = 0;
  *((void *)this + 28) = 0;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((void *)this + 26, *((void *)a2 + 26), *((void *)a2 + 27), (uint64_t)(*((void *)a2 + 27) - *((void *)a2 + 26)) >> 5);
  *((unsigned char *)this + 232) = *((unsigned char *)a2 + 232);
  *(void *)((char *)this + 236) = *(void *)((char *)a2 + 236);
  *((_DWORD *)this + 61) = *((_DWORD *)a2 + 61);
  *((void *)this + 31) = *((void *)a2 + 31);
  *((void *)this + 33) = 0;
  *((void *)this + 34) = 0;
  *((void *)this + 32) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)this + 32, *((const void **)a2 + 32), *((void *)a2 + 33), (uint64_t)(*((void *)a2 + 33) - *((void *)a2 + 32)) >> 2);
  *((void *)this + 35) = 0;
  *((void *)this + 36) = 0;
  *((void *)this + 37) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)this + 35, *((const void **)a2 + 35), *((void *)a2 + 36), (uint64_t)(*((void *)a2 + 36) - *((void *)a2 + 35)) >> 2);
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 304, (char *)a2 + 304, 111);
  *((void *)this + 44) = 0;
  *((void *)this + 45) = 0;
  *((void *)this + 46) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 44, *((void *)a2 + 44), *((void *)a2 + 45), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 45) - *((void *)a2 + 44)) >> 4));
  *((void *)this + 55) = 0;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  if (*((unsigned char *)this + 16))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v15);
  }
  uint64_t v6 = *((void *)a2 + 14);
  if (v6) {
    kaldi::NewCuSubOrMat<float>(v6, 0);
  }
  if (*((void *)a2 + 15)) {
    kaldi::NewCuSubOrVec<float>();
  }
  uint64_t v8 = *((void *)this + 17);
  uint64_t v7 = *((void *)this + 18);
  if (v7 != v8)
  {
    unint64_t v9 = 0;
    do
    {
      if (*(void *)(*((void *)a2 + 17) + 8 * v9))
      {
        uint64_t v10 = kaldi::nnet1::AffineTransform::LinearityCorr(a2, v9);
        kaldi::NewCuSubOrMat<float>(v10, *((unsigned __int8 *)this + 16));
      }
      ++v9;
    }
    while (v9 < (v7 - v8) >> 3);
  }
  uint64_t v12 = *((void *)this + 20);
  uint64_t v11 = *((void *)this + 21);
  if (v11 != v12)
  {
    unint64_t v13 = 0;
    do
    {
      if (*(void *)(*((void *)a2 + 20) + 8 * v13))
      {
        kaldi::nnet1::AffineTransform::BiasCorr(a2, v13);
        kaldi::NewCuSubOrVec<float>();
      }
      ++v13;
    }
    while (v13 < (v11 - v12) >> 3);
  }
  if (*((void *)a2 + 48) != *((void *)a2 + 47)) {
    kaldi::nnet1::AffineTransform::InitResidualAggregator(this, (kaldi::nnet1::AffineTransform *)((char *)this + 376));
  }
  return this;
}

void sub_1B210D624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, void **a12, quasar::Bitmap *a13, quasar::Bitmap *a14, quasar::Bitmap *a15, uint64_t a16)
{
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v18);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  kaldi::CuMatrix<float>::~CuMatrix(a10);
  uint64_t v20 = *a11;
  if (*a11)
  {
    *((void *)v16 + 36) = v20;
    operator delete(v20);
  }
  uint64_t v21 = *a12;
  if (*a12)
  {
    *((void *)v16 + 33) = v21;
    operator delete(v21);
  }
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  uint64_t v22 = *((void *)v16 + 15);
  *((void *)v16 + 15) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 16))(v22);
  }
  uint64_t v23 = *v17;
  *int v17 = 0;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 24))(v23);
  }
  quasar::Bitmap::~Bitmap(a13);
  quasar::Bitmap::~Bitmap(a14);
  quasar::Bitmap::~Bitmap(a15);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v16);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::AffineTransform::InitResidualAggregator(kaldi::nnet1::AffineTransform *this, kaldi::nnet1::QuantizerResidualAggregator *a2)
{
  kaldi::nnet1::AffineTransform::EnsureCorrs(this);
  uint64_t v4 = kaldi::nnet1::AffineTransform::LinearityCorr(this, ((*((void *)this + 18) - *((void *)this + 17)) >> 3) - 1);
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup((uint64_t *)a2, v4);
  uint64_t v5 = kaldi::nnet1::AffineTransform::BiasCorr(this, ((*((void *)this + 21) - *((void *)this + 20)) >> 3) - 1);
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup((uint64_t *)a2, v5);
}

void kaldi::nnet1::AffineTransform::ApplyCorr(kaldi::nnet1::AffineTransform *this, float a2, int a3)
{
  kaldi::nnet1::AffineTransform::EnsureCorrs(this);
  uint64_t v6 = kaldi::nnet1::AffineTransform::Linearity(this);
  float v7 = -(float)(a2 * *((float *)this + 59));
  uint64_t v8 = kaldi::nnet1::AffineTransform::LinearityCorr(this, a3);
  kaldi::CuMatrixBase<float>::AddMat(v6, v8, 111, v7, 1.0);
  uint64_t v9 = kaldi::nnet1::AffineTransform::Bias(this);
  float v10 = -(float)(a2 * *((float *)this + 60));
  uint64_t v11 = kaldi::nnet1::AffineTransform::BiasCorr(this, a3);
  kaldi::CuVectorBase<float>::AddVec(v9, v11, v10, 1.0);
}

uint64_t kaldi::nnet1::QuantizedAffineTransform<signed char>::QuantizedAffineTransform(uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = a2[1];
  *(_WORD *)(a1 + 16) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1F0A4D838;
  kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(a1 + 48, a2[14]);
  kaldi::CuVector<float>::CuVector(a1 + 96, a2[15]);
  return a1;
}

void sub_1B210DA44(_Unwind_Exception *a1)
{
  kaldi::QuantizedMatrixBase<signed char>::~QuantizedMatrixBase(v2);
  kaldi::nnet1::Component::~Component(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::QuantizedAffineTransform<short>::QuantizedAffineTransform(uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = a2[1];
  *(_WORD *)(a1 + 16) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1F0A4D8F8;
  kaldi::QuantizedMatrix<short>::QuantizedMatrix(a1 + 48, a2[14]);
  kaldi::CuVector<float>::CuVector(a1 + 96, a2[15]);
  return a1;
}

void sub_1B210DAE4(_Unwind_Exception *a1)
{
  kaldi::QuantizedMatrixBase<short>::~QuantizedMatrixBase(v2);
  kaldi::nnet1::Component::~Component(v1);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::VectorwiseQuantizedAffineTransform<signed char>::VectorwiseQuantizedAffineTransform(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1F0A4EEC8;
  kaldi::VectorwiseQuantizedMatrix<signed char>::VectorwiseQuantizedMatrix(a1 + 48, *(void *)(a2 + 112));
}

void sub_1B210DB84(_Unwind_Exception *a1)
{
  kaldi::VectorwiseQuantizedMatrix<signed char>::~VectorwiseQuantizedMatrix(v2);
  kaldi::nnet1::Component::~Component(v1);
  _Unwind_Resume(a1);
}

void setInputFormatHelper(uint64_t *a1, uint64_t a2)
{
  unint64_t v2 = a2 - 1;
  if (v2 >= 4)
  {
    double v3 = EarLmLogger();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl(&dword_1B1A86000, v3, OS_LOG_TYPE_DEFAULT, "Input type not recognized", v4, 2u);
    }
  }
  else
  {
    quasar::LmData::setInputType(*a1, v2);
  }
}

void sub_1B210DC30(void *a1, int a2)
{
  double v3 = __cxa_begin_catch(a1);
  uint64_t v4 = EarLmLogger();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (a2 == 2) {
    setInputFormatHelper(v5, (uint64_t)v3, v4);
  }
  else {
    setInputFormatHelper(v5, v4);
  }
  JUMPOUT(0x1B210DC1CLL);
}

id EarLmLogger(void)
{
  uint64_t v0 = &unk_1E9C2D000;
  {
    uint64_t v0 = (void *)&unk_1E9C2D000;
    if (v3)
    {
      EarLmLogger(void)::logger = (uint64_t)os_log_create("com.apple.siri", "quasar.lm");
      uint64_t v0 = (void *)&unk_1E9C2D000;
    }
  }
  uint64_t v1 = (void *)v0[502];
  return v1;
}

void sub_1B210E104(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,long long buf,int a23,__int16 a24,char a25,char a26)
{
  if (a2)
  {
    if (a18) {
      (*(void (**)(uint64_t))(*(void *)a18 + 8))(a18);
    }
    uint64_t v28 = __cxa_begin_catch(exception_object);
    uint64_t v29 = EarLmLogger();
    BOOL v30 = os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v30)
      {
        uint64_t v31 = (*(uint64_t (**)(void *))(*(void *)v28 + 16))(v28);
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v31;
        _os_log_impl(&dword_1B1A86000, v29, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }
    }
    else if (v30)
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_1B1A86000, v29, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1B210E0B4);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B210E388(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, long long buf, int a17, __int16 a18, char a19, char a20)
{
  if (a2)
  {
    if (a15 < 0) {
      operator delete(__p);
    }
    if (a20 < 0) {
      operator delete((void *)buf);
    }
    uint64_t v22 = __cxa_begin_catch(exception_object);
    uint64_t v23 = EarLmLogger();
    BOOL v24 = os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v24)
      {
        uint64_t v25 = (*(uint64_t (**)(void *))(*(void *)v22 + 16))(v22);
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v25;
        _os_log_impl(&dword_1B1A86000, v23, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }
    }
    else if (v24)
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_1B1A86000, v23, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1B210E34CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B210E664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, long long __p, int a17, __int16 a18, char a19, char a20)
{
  if (a2)
  {
    if (a20 < 0) {
      operator delete((void *)__p);
    }
    uint64_t v22 = __cxa_begin_catch(exception_object);
    uint64_t v23 = EarLmLogger();
    BOOL v24 = os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v24)
      {
        uint64_t v25 = (*(uint64_t (**)(void *))(*(void *)v22 + 16))(v22);
        LODWORD(__p) = 136315138;
        *(void *)((char *)&__p + 4) = v25;
        _os_log_impl(&dword_1B1A86000, v23, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&__p, 0xCu);
      }
    }
    else if (v24)
    {
      LOWORD(__p) = 0;
      _os_log_impl(&dword_1B1A86000, v23, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&__p, 2u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1B210E61CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B210E89C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, long long buf, int a17, __int16 a18, char a19, char a20)
{
  if (a2)
  {
    if (a14 < 0) {
      operator delete(__p);
    }
    if (a20 < 0) {
      operator delete((void *)buf);
    }
    uint64_t v22 = __cxa_begin_catch(exception_object);
    uint64_t v23 = EarLmLogger();
    BOOL v24 = os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v24)
      {
        uint64_t v25 = (*(uint64_t (**)(void *))(*(void *)v22 + 16))(v22);
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v25;
        _os_log_impl(&dword_1B1A86000, v23, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }
    }
    else if (v24)
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_1B1A86000, v23, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1B210E860);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B210EAE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, long long buf, int a17, __int16 a18, char a19, char a20)
{
  if (a2)
  {
    if (a14 < 0) {
      operator delete(__p);
    }
    if (a20 < 0) {
      operator delete((void *)buf);
    }
    uint64_t v22 = __cxa_begin_catch(exception_object);
    uint64_t v23 = EarLmLogger();
    BOOL v24 = os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v24)
      {
        uint64_t v25 = (*(uint64_t (**)(void *))(*(void *)v22 + 16))(v22);
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v25;
        _os_log_impl(&dword_1B1A86000, v23, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }
    }
    else if (v24)
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_1B1A86000, v23, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1B210EAA8);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B210ECC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long __p, int a10, __int16 a11, char a12, char a13)
{
  if (a2)
  {
    if (a13 < 0) {
      operator delete((void *)__p);
    }
    uint64_t v15 = __cxa_begin_catch(exception_object);
    uint64_t v16 = EarLmLogger();
    BOOL v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v17)
      {
        uint64_t v18 = (*(uint64_t (**)(void *))(*(void *)v15 + 16))(v15);
        LODWORD(__p) = 136315138;
        *(void *)((char *)&__p + 4) = v18;
        _os_log_impl(&dword_1B1A86000, v16, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&__p, 0xCu);
      }
    }
    else if (v17)
    {
      LOWORD(__p) = 0;
      _os_log_impl(&dword_1B1A86000, v16, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&__p, 2u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1B210EC90);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B210EE40(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B210EFBC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, long long buf)
{
  if (a2)
  {
    uint64_t v12 = __cxa_begin_catch(a1);
    unint64_t v13 = EarLmLogger();
    BOOL v14 = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v14)
      {
        uint64_t v15 = (*(uint64_t (**)(void *))(*(void *)v12 + 16))(v12);
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v15;
        _os_log_impl(&dword_1B1A86000, v13, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }
    }
    else if (v14)
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_1B1A86000, v13, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1B210EF7CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1B210F200(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9)
{
  if (a2)
  {
    quasar::PTree::~PTree((quasar::PTree *)&a9);
    uint64_t v11 = __cxa_begin_catch(exception_object);
    uint64_t v12 = EarLmLogger();
    BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v13)
      {
        uint64_t v14 = (*(uint64_t (**)(void *))(*(void *)v11 + 16))(v11);
        LODWORD(a9) = 136315138;
        *(void *)((char *)&a9 + 4) = v14;
        _os_log_impl(&dword_1B1A86000, v12, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&a9, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v13)
      {
        LOWORD(a9) = 0;
        _os_log_impl(&dword_1B1A86000, v12, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&a9, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1B210F1BCLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B210F3F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  float v10 = __cxa_begin_catch(exception_object);
  uint64_t v11 = EarLmLogger();
  BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
  if (a2 == 2)
  {
    if (v12)
    {
      uint64_t v13 = (*(uint64_t (**)(void *))(*(void *)v10 + 16))(v10);
      LODWORD(a9) = 136315138;
      *(void *)((char *)&a9 + 4) = v13;
      uint64_t v14 = "Internal C++ exception: %s";
      uint64_t v15 = v11;
      uint32_t v16 = 12;
LABEL_7:
      _os_log_impl(&dword_1B1A86000, v15, OS_LOG_TYPE_DEFAULT, v14, (uint8_t *)&a9, v16);
    }
  }
  else if (v12)
  {
    LOWORD(a9) = 0;
    uint64_t v14 = "Internal unknown exception";
    uint64_t v15 = v11;
    uint32_t v16 = 2;
    goto LABEL_7;
  }

  __cxa_end_catch();
  JUMPOUT(0x1B210F3ACLL);
}

void sub_1B210F7F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, long long __p,int a21,__int16 a22,char a23,char a24)
{
  if (a2)
  {
    if (a24 < 0) {
      operator delete((void *)__p);
    }
    int v26 = __cxa_begin_catch(exception_object);
    float v27 = EarLmLogger();
    BOOL v28 = os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v28)
      {
        uint64_t v29 = (*(uint64_t (**)(void *))(*(void *)v26 + 16))(v26);
        LODWORD(__p) = 136315138;
        *(void *)((char *)&__p + 4) = v29;
        _os_log_impl(&dword_1B1A86000, v27, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&__p, 0xCu);
      }
    }
    else if (v28)
    {
      LOWORD(__p) = 0;
      _os_log_impl(&dword_1B1A86000, v27, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&__p, 2u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1B210F738);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B210FB7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,std::__shared_weak_count *a23,char a24)
{
  if (a2)
  {
    if (a24 && a23) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a23);
    }
    if (*(char *)(v24 - 57) < 0) {
      operator delete(*(void **)(v24 - 80));
    }
    float v27 = __cxa_begin_catch(exception_object);
    BOOL v28 = EarLmLogger();
    BOOL v29 = os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v29)
      {
        uint64_t v30 = (*(uint64_t (**)(void *))(*(void *)v27 + 16))(v27);
        *(_DWORD *)(v24 - 80) = 136315138;
        *(void *)(v24 - 76) = v30;
        _os_log_impl(&dword_1B1A86000, v28, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)(v24 - 80), 0xCu);
      }
    }
    else if (v29)
    {
      *(_WORD *)(v24 - 80) = 0;
      _os_log_impl(&dword_1B1A86000, v28, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)(v24 - 80), 2u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1B210FB38);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B210FFE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long buf, int a14, __int16 a15, char a16, char a17)
{
  if (a2)
  {
    uint64_t v18 = __cxa_begin_catch(exception_object);
    uint64_t v19 = EarLmLogger();
    BOOL v20 = os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v20)
      {
        uint64_t v21 = (*(uint64_t (**)(void *))(*(void *)v18 + 16))(v18);
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v21;
        _os_log_impl(&dword_1B1A86000, v19, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v20)
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1B1A86000, v19, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1B210FFB0);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B2110150(void *a1, int a2)
{
  __cxa_begin_catch(a1);
  int v3 = EarLmLogger();
  char v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (a2 == 2) {
    -[_EARPhoneticMatchBuilder buildGFsts](v4);
  }
  else {
    [(_EARPhoneticMatchBuilder *)v4 buildGFsts];
  }

  __cxa_end_catch();
  JUMPOUT(0x1B2110140);
}

void sub_1B211024C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long __p, int a10, __int16 a11, char a12, char a13)
{
  if (a2)
  {
    uint64_t v14 = __cxa_begin_catch(exception_object);
    uint64_t v15 = EarLmLogger();
    BOOL v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v16)
      {
        uint64_t v17 = (*(uint64_t (**)(void *))(*(void *)v14 + 16))(v14);
        LODWORD(__p) = 136315138;
        *(void *)((char *)&__p + 4) = v17;
        _os_log_impl(&dword_1B1A86000, v15, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&__p, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v16)
      {
        LOWORD(__p) = 0;
        _os_log_impl(&dword_1B1A86000, v15, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&__p, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1B2110214);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B21103FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long __p, int a10, __int16 a11, char a12, char a13)
{
  if (a2)
  {
    uint64_t v14 = __cxa_begin_catch(exception_object);
    uint64_t v15 = EarLmLogger();
    BOOL v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v16)
      {
        uint64_t v17 = (*(uint64_t (**)(void *))(*(void *)v14 + 16))(v14);
        LODWORD(__p) = 136315138;
        *(void *)((char *)&__p + 4) = v17;
        _os_log_impl(&dword_1B1A86000, v15, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&__p, 0xCu);
      }
    }
    else if (v16)
    {
      LOWORD(__p) = 0;
      _os_log_impl(&dword_1B1A86000, v15, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&__p, 2u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1B21103C8);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B2110924(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B2110BF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B2110C44(void *a1, int a2)
{
  __cxa_begin_catch(a1);
  int v3 = EarLmLogger();
  char v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (a2 == 2) {
    -[_EARPhoneticMatchBuilder buildGFsts](v4);
  }
  else {
    [(_EARPhoneticMatchBuilder *)v4 buildGFsts];
  }

  __cxa_end_catch();
  JUMPOUT(0x1B2110C34);
}

void sub_1B2110D44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long __p, int a10, __int16 a11, char a12, char a13)
{
  if (a2)
  {
    uint64_t v14 = __cxa_begin_catch(exception_object);
    uint64_t v15 = EarLmLogger();
    BOOL v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v16)
      {
        uint64_t v17 = (*(uint64_t (**)(void *))(*(void *)v14 + 16))(v14);
        LODWORD(__p) = 136315138;
        *(void *)((char *)&__p + 4) = v17;
        _os_log_impl(&dword_1B1A86000, v15, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&__p, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v16)
      {
        LOWORD(__p) = 0;
        _os_log_impl(&dword_1B1A86000, v15, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&__p, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1B2110D0CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B2111070(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9)
{
  if (a2)
  {
    quasar::PTree::~PTree((quasar::PTree *)&a9);
    uint64_t v11 = __cxa_begin_catch(exception_object);
    BOOL v12 = EarLmLogger();
    BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v13)
      {
        uint64_t v14 = (*(uint64_t (**)(void *))(*(void *)v11 + 16))(v11);
        LODWORD(a9) = 136315138;
        *(void *)((char *)&a9 + 4) = v14;
        _os_log_impl(&dword_1B1A86000, v12, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&a9, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v13)
      {
        LOWORD(a9) = 0;
        _os_log_impl(&dword_1B1A86000, v12, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&a9, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1B211102CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B21113E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  _Unwind_Resume(a1);
}

void sub_1B21117E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B211198C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B2111B44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long __p, int a10, __int16 a11, char a12, char a13)
{
  if (a2)
  {
    uint64_t v14 = __cxa_begin_catch(exception_object);
    uint64_t v15 = EarLmLogger();
    BOOL v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v16)
      {
        uint64_t v17 = (*(uint64_t (**)(void *))(*(void *)v14 + 16))(v14);
        LODWORD(__p) = 136315138;
        *(void *)((char *)&__p + 4) = v17;
        _os_log_impl(&dword_1B1A86000, v15, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&__p, 0xCu);
      }
    }
    else if (v16)
    {
      LOWORD(__p) = 0;
      _os_log_impl(&dword_1B1A86000, v15, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&__p, 2u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1B2111ADCLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B2111D74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long __p, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete((void *)__p);
  }
  if (a2 == 1)
  {
    BOOL v20 = __cxa_begin_catch(a1);
    uint64_t v21 = EarLmLogger();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v22 = (*(uint64_t (**)(void *))(*(void *)v20 + 16))(v20);
      LODWORD(__p) = 136315138;
      *(void *)((char *)&__p + 4) = v22;
      _os_log_impl(&dword_1B1A86000, v21, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&__p, 0xCu);
    }

    __cxa_end_catch();
    JUMPOUT(0x1B2111D2CLL);
  }

  _Unwind_Resume(a1);
}

void sub_1B21122E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long __p, int a10, __int16 a11, char a12, char a13)
{
  if (a2)
  {
    uint64_t v14 = __cxa_begin_catch(exception_object);
    uint64_t v15 = EarLmLogger();
    BOOL v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v16)
      {
        uint64_t v17 = (*(uint64_t (**)(void *))(*(void *)v14 + 16))(v14);
        LODWORD(__p) = 136315138;
        *(void *)((char *)&__p + 4) = v17;
        _os_log_impl(&dword_1B1A86000, v15, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&__p, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v16)
      {
        LOWORD(__p) = 0;
        _os_log_impl(&dword_1B1A86000, v15, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&__p, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1B21122A8);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B2112634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, long long __p, int a17, __int16 a18, char a19, char a20)
{
  if (a2)
  {
    if (a20 < 0) {
      operator delete((void *)__p);
    }
    if (a15 < 0) {
      operator delete(a10);
    }
    uint64_t v22 = __cxa_begin_catch(exception_object);
    uint64_t v23 = EarLmLogger();
    BOOL v24 = os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v24)
      {
        uint64_t v25 = (*(uint64_t (**)(void *))(*(void *)v22 + 16))(v22);
        LODWORD(__p) = 136315138;
        *(void *)((char *)&__p + 4) = v25;
        _os_log_impl(&dword_1B1A86000, v23, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&__p, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v24)
      {
        LOWORD(__p) = 0;
        _os_log_impl(&dword_1B1A86000, v23, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&__p, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1B21125F0);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B2112A80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, void *__p, std::__shared_weak_count *a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,std::__shared_weak_count *a21,long long buf,int a23,__int16 a24,char a25,char a26)
{
  if (a2)
  {
    if (a11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a11);
    }
    if (a15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a15);
    }
    if (a21) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a21);
    }
    BOOL v28 = __cxa_begin_catch(exception_object);
    BOOL v29 = EarLmLogger();
    BOOL v30 = os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v30)
      {
        uint64_t v31 = (*(uint64_t (**)(void *))(*(void *)v28 + 16))(v28);
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v31;
        _os_log_impl(&dword_1B1A86000, v29, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }
    }
    else if (v30)
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_1B1A86000, v29, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1B21128B8);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B2112E74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a2)
  {
    if (a10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a10);
    }
    if (v25) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v25);
    }
    if (a19 && a18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a18);
    }
    if (*(char *)(v26 - 41) < 0) {
      operator delete(*(void **)(v26 - 64));
    }
    BOOL v29 = __cxa_begin_catch(exception_object);
    BOOL v30 = EarLmLogger();
    BOOL v31 = os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v31)
      {
        uint64_t v32 = (*(uint64_t (**)(void *))(*(void *)v29 + 16))(v29);
        *(_DWORD *)(v26 - 64) = 136315138;
        *(void *)(v26 - 60) = v32;
        _os_log_impl(&dword_1B1A86000, v30, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)(v26 - 64), 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v31)
      {
        *(_WORD *)(v26 - 64) = 0;
        _os_log_impl(&dword_1B1A86000, v30, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)(v26 - 64), 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1B2112E2CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B21130C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long __p, int a10, __int16 a11, char a12, char a13)
{
  if (a2)
  {
    uint64_t v14 = __cxa_begin_catch(exception_object);
    uint64_t v15 = EarLmLogger();
    BOOL v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v16)
      {
        uint64_t v17 = (*(uint64_t (**)(void *))(*(void *)v14 + 16))(v14);
        LODWORD(__p) = 136315138;
        *(void *)((char *)&__p + 4) = v17;
        _os_log_impl(&dword_1B1A86000, v15, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&__p, 0xCu);
      }
    }
    else if (v16)
    {
      LOWORD(__p) = 0;
      _os_log_impl(&dword_1B1A86000, v15, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&__p, 2u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1B2113090);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B2113370(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, long long __p,int a21,__int16 a22,char a23,char a24)
{
  if (a2)
  {
    if (a24 < 0) {
      operator delete((void *)__p);
    }
    uint64_t v26 = __cxa_begin_catch(exception_object);
    float v27 = EarLmLogger();
    BOOL v28 = os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v28)
      {
        uint64_t v29 = (*(uint64_t (**)(void *))(*(void *)v26 + 16))(v26);
        LODWORD(__p) = 136315138;
        *(void *)((char *)&__p + 4) = v29;
        _os_log_impl(&dword_1B1A86000, v27, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&__p, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v28)
      {
        LOWORD(__p) = 0;
        _os_log_impl(&dword_1B1A86000, v27, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&__p, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1B211331CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B21139C0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,void *a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,std::__shared_weak_count *a35,uint64_t a36,uint64_t a37,uint64_t a38,long long buf)
{
  if (a2)
  {
    if (a14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a14);
    }
    if (a16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a16);
    }
    if (a35) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a35);
    }
    *(void *)(v39 - 224) = &a17;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v39 - 224));
    if (a21) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a21);
    }
    quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)&buf);
    int v42 = __cxa_begin_catch(a1);
    uint64_t v43 = EarLmLogger();
    BOOL v44 = os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v44)
      {
        uint64_t v45 = (*(uint64_t (**)(void *))(*(void *)v42 + 16))(v42);
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v45;
        _os_log_impl(&dword_1B1A86000, v43, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v44)
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1B1A86000, v43, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1B2113944);
  }
  _Unwind_Resume(a1);
}

void sub_1B21140F8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,std::__shared_weak_count *a33,uint64_t a34,uint64_t a35,uint64_t a36,long long buf)
{
  if (a2)
  {
    if (a14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a14);
    }
    if (a33) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a33);
    }
    *(void *)(v37 - 224) = &a15;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v37 - 224));
    if (a19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a19);
    }
    quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)&buf);
    unint64_t v40 = __cxa_begin_catch(a1);
    unsigned __int8 v41 = EarLmLogger();
    BOOL v42 = os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v42)
      {
        uint64_t v43 = (*(uint64_t (**)(void *))(*(void *)v40 + 16))(v40);
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v43;
        _os_log_impl(&dword_1B1A86000, v41, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v42)
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1B1A86000, v41, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1B211407CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1B2114608(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,long long buf,int a28,__int16 a29,char a30,char a31)
{
  if (a2)
  {
    if (a20 < 0) {
      operator delete(__p);
    }
    if (a31 < 0) {
      operator delete((void *)buf);
    }
    uint64_t v33 = __cxa_begin_catch(exception_object);
    uint64_t v34 = EarLmLogger();
    BOOL v35 = os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v35)
      {
        uint64_t v36 = (*(uint64_t (**)(void *))(*(void *)v33 + 16))(v33);
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v36;
        _os_log_impl(&dword_1B1A86000, v34, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }
    }
    else if (v35)
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_1B1A86000, v34, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1B2114518);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B21148F4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, long long buf)
{
  if (a2)
  {
    if (a12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a12);
    }
    quasar::PTree::~PTree((quasar::PTree *)&buf);
    uint64_t v15 = __cxa_begin_catch(a1);
    BOOL v16 = EarLmLogger();
    BOOL v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v17)
      {
        uint64_t v18 = (*(uint64_t (**)(void *))(*(void *)v15 + 16))(v15);
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v18;
        _os_log_impl(&dword_1B1A86000, v16, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v17)
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1B1A86000, v16, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1B21148B4);
  }
  _Unwind_Resume(a1);
}

void sub_1B2114B64(void *a1, int a2)
{
  __cxa_begin_catch(a1);
  int v3 = EarLmLogger();
  char v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (a2 == 2) {
    -[_EARPhoneticMatchBuilder buildGFsts](v4);
  }
  else {
    [(_EARPhoneticMatchBuilder *)v4 buildGFsts];
  }

  __cxa_end_catch();
  JUMPOUT(0x1B2114B48);
}

void sub_1B2114BC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B2114D3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, long long buf, int a16, __int16 a17, char a18, char a19)
{
  if (a2)
  {
    if (a10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a10);
    }
    if (a14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a14);
    }
    uint64_t v21 = __cxa_begin_catch(exception_object);
    uint64_t v22 = EarLmLogger();
    BOOL v23 = os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v23)
      {
        uint64_t v24 = (*(uint64_t (**)(void *))(*(void *)v21 + 16))(v21);
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v24;
        _os_log_impl(&dword_1B1A86000, v22, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v23)
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1B1A86000, v22, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1B2114CECLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B2115098(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26,long long buf,int a28,__int16 a29,char a30,char a31)
{
  if (a2)
  {
    if (a10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a10);
    }
    if (a26) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a26);
    }
    uint64_t v33 = __cxa_begin_catch(exception_object);
    uint64_t v34 = EarLmLogger();
    BOOL v35 = os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v35)
      {
        uint64_t v36 = (*(uint64_t (**)(void *))(*(void *)v33 + 16))(v33);
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v36;
        _os_log_impl(&dword_1B1A86000, v34, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v35)
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1B1A86000, v34, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1B211503CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B2115280(void *a1, int a2)
{
  __cxa_begin_catch(a1);
  int v3 = EarLmLogger();
  char v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (a2 == 2) {
    -[_EARPhoneticMatchBuilder buildGFsts](v4);
  }
  else {
    [(_EARPhoneticMatchBuilder *)v4 buildGFsts];
  }

  __cxa_end_catch();
  JUMPOUT(0x1B2115270);
}

void sub_1B2115448(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, long long buf, int a16, __int16 a17, char a18, char a19)
{
  if (a2)
  {
    BOOL v20 = __cxa_begin_catch(exception_object);
    uint64_t v21 = EarLmLogger();
    BOOL v22 = os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v22)
      {
        uint64_t v23 = (*(uint64_t (**)(void *))(*(void *)v20 + 16))(v20);
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v23;
        _os_log_impl(&dword_1B1A86000, v21, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v22)
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1B1A86000, v21, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1B2115408);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B21156D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, long long buf, int a16, __int16 a17, char a18, char a19)
{
  if (a2)
  {
    if (a10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a10);
    }
    if (a14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a14);
    }
    uint64_t v21 = __cxa_begin_catch(exception_object);
    BOOL v22 = EarLmLogger();
    BOOL v23 = os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v23)
      {
        uint64_t v24 = (*(uint64_t (**)(void *))(*(void *)v21 + 16))(v21);
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v24;
        _os_log_impl(&dword_1B1A86000, v22, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v23)
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1B1A86000, v22, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1B2115680);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B2115A2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26,long long buf,int a28,__int16 a29,char a30,char a31)
{
  if (a2)
  {
    if (a10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a10);
    }
    if (a26) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a26);
    }
    uint64_t v33 = __cxa_begin_catch(exception_object);
    uint64_t v34 = EarLmLogger();
    BOOL v35 = os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v35)
      {
        uint64_t v36 = (*(uint64_t (**)(void *))(*(void *)v33 + 16))(v33);
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v36;
        _os_log_impl(&dword_1B1A86000, v34, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v35)
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1B1A86000, v34, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1B21159D0);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B2115C14(void *a1, int a2)
{
  __cxa_begin_catch(a1);
  int v3 = EarLmLogger();
  char v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (a2 == 2) {
    -[_EARPhoneticMatchBuilder buildGFsts](v4);
  }
  else {
    [(_EARPhoneticMatchBuilder *)v4 buildGFsts];
  }

  __cxa_end_catch();
  JUMPOUT(0x1B2115C04);
}

void sub_1B2115D18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_EAROovToken *_earOovToken(const quasar::AppLmData::Oov *a1)
{
  unint64_t v2 = [_EAROovToken alloc];
  if (*((char *)a1 + 23) >= 0) {
    int v3 = a1;
  }
  else {
    int v3 = *(const quasar::AppLmData::Oov **)a1;
  }
  char v4 = [NSString stringWithUTF8String:v3];
  uint64_t v5 = EARHelpers::ContainerToNSSet<std::set<std::string>>((void *)a1 + 3);
  uint64_t v6 = [(_EAROovToken *)v2 initWithOrthography:v4 prons:v5 frequency:*((unsigned int *)a1 + 12)];

  return v6;
}

void sub_1B2115E28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B2116068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, long long buf, int a14, __int16 a15, char a16, char a17)
{
  if (a2)
  {

    *(void *)&buf = &a10;
    std::vector<quasar::AppLmData::Oov>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
    BOOL v20 = __cxa_begin_catch(exception_object);
    uint64_t v21 = EarLmLogger();
    BOOL v22 = os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v22)
      {
        uint64_t v23 = (*(uint64_t (**)(void *))(*(void *)v20 + 16))(v20);
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v23;
        _os_log_impl(&dword_1B1A86000, v21, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v22)
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1B1A86000, v21, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1B2116020);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B21165CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,long long buf,int a23,__int16 a24,char a25,char a26)
{
  if (a2)
  {
    if (a18) {
      (*(void (**)(uint64_t))(*(void *)a18 + 8))(a18);
    }
    BOOL v28 = __cxa_begin_catch(exception_object);
    uint64_t v29 = EarLmLogger();
    BOOL v30 = os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v30)
      {
        uint64_t v31 = (*(uint64_t (**)(void *))(*(void *)v28 + 16))(v28);
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v31;
        _os_log_impl(&dword_1B1A86000, v29, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }
    }
    else if (v30)
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_1B1A86000, v29, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1B211657CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B211688C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, long long __p, int a17, __int16 a18, char a19, char a20)
{
  if (a2)
  {
    if (a20 < 0) {
      operator delete((void *)__p);
    }
    BOOL v22 = __cxa_begin_catch(exception_object);
    uint64_t v23 = EarLmLogger();
    BOOL v24 = os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v24)
      {
        uint64_t v25 = (*(uint64_t (**)(void *))(*(void *)v22 + 16))(v22);
        LODWORD(__p) = 136315138;
        *(void *)((char *)&__p + 4) = v25;
        _os_log_impl(&dword_1B1A86000, v23, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&__p, 0xCu);
      }
    }
    else if (v24)
    {
      LOWORD(__p) = 0;
      _os_log_impl(&dword_1B1A86000, v23, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&__p, 2u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1B2116850);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B2116AF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, long long __p, int a17, __int16 a18, char a19, char a20)
{
  if (a2)
  {
    if (a20 < 0) {
      operator delete((void *)__p);
    }
    BOOL v22 = __cxa_begin_catch(exception_object);
    uint64_t v23 = EarLmLogger();
    BOOL v24 = os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v24)
      {
        uint64_t v25 = (*(uint64_t (**)(void *))(*(void *)v22 + 16))(v22);
        LODWORD(__p) = 136315138;
        *(void *)((char *)&__p + 4) = v25;
        _os_log_impl(&dword_1B1A86000, v23, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&__p, 0xCu);
      }
    }
    else if (v24)
    {
      LOWORD(__p) = 0;
      _os_log_impl(&dword_1B1A86000, v23, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&__p, 2u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1B2116AB8);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B2116CE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long __p, int a10, __int16 a11, char a12, char a13)
{
  if (a2)
  {
    uint64_t v14 = __cxa_begin_catch(exception_object);
    uint64_t v15 = EarLmLogger();
    BOOL v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v16)
      {
        uint64_t v17 = (*(uint64_t (**)(void *))(*(void *)v14 + 16))(v14);
        LODWORD(__p) = 136315138;
        *(void *)((char *)&__p + 4) = v17;
        _os_log_impl(&dword_1B1A86000, v15, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&__p, 0xCu);
      }
    }
    else if (v16)
    {
      LOWORD(__p) = 0;
      _os_log_impl(&dword_1B1A86000, v15, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&__p, 2u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1B2116CB4);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B2116E78(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B2116F84(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, long long buf)
{
  if (a2)
  {
    uint64_t v14 = __cxa_begin_catch(a1);
    uint64_t v15 = EarLmLogger();
    BOOL v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v16)
      {
        uint64_t v17 = (*(uint64_t (**)(void *))(*(void *)v14 + 16))(v14);
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v17;
        _os_log_impl(&dword_1B1A86000, v15, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v16)
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1B1A86000, v15, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1B2116F3CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1B21172B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,long long buf,int a29,__int16 a30,char a31,char a32)
{
  if (a2)
  {
    uint64_t v33 = __cxa_begin_catch(exception_object);
    uint64_t v34 = EarLmLogger();
    BOOL v35 = os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v35)
      {
        uint64_t v36 = (*(uint64_t (**)(void *))(*(void *)v33 + 16))(v33);
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v36;
        _os_log_impl(&dword_1B1A86000, v34, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v35)
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1B1A86000, v34, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1B2117268);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B2117638(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,long long buf,int a27,__int16 a28,char a29,char a30)
{
  if (a2)
  {
    uint64_t v31 = __cxa_begin_catch(exception_object);
    uint64_t v32 = EarLmLogger();
    BOOL v33 = os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v33)
      {
        uint64_t v34 = (*(uint64_t (**)(void *))(*(void *)v31 + 16))(v31);
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v34;
        _os_log_impl(&dword_1B1A86000, v32, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v33)
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1B1A86000, v32, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1B21175F0);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B2117880(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long __p, int a10, __int16 a11, char a12, char a13)
{
  if (a2)
  {
    uint64_t v14 = __cxa_begin_catch(exception_object);
    uint64_t v15 = EarLmLogger();
    BOOL v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v16)
      {
        uint64_t v17 = (*(uint64_t (**)(void *))(*(void *)v14 + 16))(v14);
        LODWORD(__p) = 136315138;
        *(void *)((char *)&__p + 4) = v17;
        _os_log_impl(&dword_1B1A86000, v15, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&__p, 0xCu);
      }
    }
    else if (v16)
    {
      LOWORD(__p) = 0;
      _os_log_impl(&dword_1B1A86000, v15, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&__p, 2u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1B211784CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B2117A38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B2117B08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9)
{
  if (a2)
  {
    quasar::PTree::~PTree((quasar::PTree *)&a9);
    uint64_t v11 = __cxa_begin_catch(exception_object);
    BOOL v12 = EarLmLogger();
    BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v13)
      {
        uint64_t v14 = (*(uint64_t (**)(void *))(*(void *)v11 + 16))(v11);
        LODWORD(a9) = 136315138;
        *(void *)((char *)&a9 + 4) = v14;
        _os_log_impl(&dword_1B1A86000, v12, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&a9, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v13)
      {
        LOWORD(a9) = 0;
        _os_log_impl(&dword_1B1A86000, v12, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&a9, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1B2117AC4);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<quasar::PersonalizedLmData,std::allocator<quasar::PersonalizedLmData>,std::string,char const(&)[1],std::unique_ptr<quasar::TextTokenizer>,std::string,BOOL,BOOL,void>@<X0>(uint64_t a1@<X1>, char *a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, unsigned __int8 *a5@<X5>, unsigned __int8 *a6@<X6>, void *a7@<X8>)
{
  uint64_t v14 = operator new(0x468uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::PersonalizedLmData>::__shared_ptr_emplace[abi:ne180100]<std::string,char const(&)[1],std::unique_ptr<quasar::TextTokenizer>,std::string,BOOL,BOOL,std::allocator<quasar::PersonalizedLmData>,0>(v14, a1, a2, a3, a4, a5, a6);
  *a7 = v14 + 3;
  a7[1] = v14;
  return result;
}

void sub_1B2117D10(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::PersonalizedLmData>::__shared_ptr_emplace[abi:ne180100]<std::string,char const(&)[1],std::unique_ptr<quasar::TextTokenizer>,std::string,BOOL,BOOL,std::allocator<quasar::PersonalizedLmData>,0>(void *a1, uint64_t a2, char *a3, uint64_t *a4, uint64_t a5, unsigned __int8 *a6, unsigned __int8 *a7)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A60640;
  std::allocator<quasar::PersonalizedLmData>::construct[abi:ne180100]<quasar::PersonalizedLmData,std::string,char const(&)[1],std::unique_ptr<quasar::TextTokenizer>,std::string,BOOL,BOOL>((int)&v9, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7);
  return a1;
}

void sub_1B2117D94(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::PersonalizedLmData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60640;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::PersonalizedLmData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60640;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::PersonalizedLmData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::allocator<quasar::PersonalizedLmData>::construct[abi:ne180100]<quasar::PersonalizedLmData,std::string,char const(&)[1],std::unique_ptr<quasar::TextTokenizer>,std::string,BOOL,BOOL>(int a1, uint64_t a2, uint64_t a3, char *__s, uint64_t *a5, uint64_t a6, unsigned __int8 *a7, unsigned __int8 *a8)
{
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  uint64_t v14 = *a5;
  *a5 = 0;
  uint64_t v16 = v14;
  quasar::PersonalizedLmData::PersonalizedLmData(a2, a3, __p, &v16, a6, *a7, *a8);
  uint64_t v15 = v16;
  uint64_t v16 = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  if (v18 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B2117F08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (a2) {
    -[_EARPhoneticMatchBuilder initWithModelRoot:jsonConfigFile:dataFeeds:](a2);
  }
  std::allocator<quasar::RecogAudioBuffer>::construct[abi:ne180100]<quasar::RecogAudioBuffer,unsigned long &,int,int,BOOL,char const(&)[1],std::shared_ptr<kaldi::Timer const>,int>((uint64_t)va);
  _Unwind_Resume(a1);
}

quasar::lm::TokenStringAndCount *std::vector<quasar::lm::TokenStringAndCount>::__init_with_size[abi:ne180100]<quasar::lm::TokenStringAndCount*,quasar::lm::TokenStringAndCount*>(quasar::lm::TokenStringAndCount *result, quasar::lm::TokenStringAndCount *a2, quasar::lm::TokenStringAndCount *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<quasar::lm::TokenStringAndCount>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::lm::TokenStringAndCount>,quasar::lm::TokenStringAndCount*,quasar::lm::TokenStringAndCount*,quasar::lm::TokenStringAndCount*>((uint64_t)v6 + 16, a2, a3, *((quasar::lm::TokenStringAndCount **)v6 + 1));
    *((void *)v6 + 1) = result;
  }
  return result;
}

void sub_1B2117F94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<quasar::lm::TokenStringAndCount>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<quasar::lm::TokenStringAndCount>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 57) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::lm::TokenStringAndCount>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[128 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::lm::TokenStringAndCount>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 57) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(a2 << 7);
}

quasar::lm::TokenStringAndCount *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::lm::TokenStringAndCount>,quasar::lm::TokenStringAndCount*,quasar::lm::TokenStringAndCount*,quasar::lm::TokenStringAndCount*>(uint64_t a1, quasar::lm::TokenStringAndCount *a2, quasar::lm::TokenStringAndCount *a3, quasar::lm::TokenStringAndCount *this)
{
  uint64_t v4 = this;
  uint64_t v10 = this;
  uint64_t v11 = this;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      quasar::lm::TokenStringAndCount::TokenStringAndCount(v4, v6);
      uint64_t v6 = (const quasar::lm::TokenStringAndCount *)((char *)v6 + 128);
      uint64_t v4 = (quasar::lm::TokenStringAndCount *)((char *)v11 + 128);
      uint64_t v11 = (quasar::lm::TokenStringAndCount *)((char *)v11 + 128);
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::lm::TokenStringAndCount>,quasar::lm::TokenStringAndCount*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B21180C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::lm::TokenStringAndCount>,quasar::lm::TokenStringAndCount*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::lm::TokenStringAndCount>,quasar::lm::TokenStringAndCount*>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::lm::TokenStringAndCount>,quasar::lm::TokenStringAndCount*>::operator()[abi:ne180100](uint64_t *a1)
{
  unint64_t v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 128;
      std::allocator<quasar::lm::TokenStringAndCount>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

void std::allocator<quasar::lm::TokenStringAndCount>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void **)(a2 + 104);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v3 = *(void **)(a2 + 80);
  if (v3)
  {
    *(void *)(a2 + 88) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a2 + 56);
  if (v4)
  {
    *(void *)(a2 + 64) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void **)(a2 + 32);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  if (*(char *)(a2 + 31) < 0) {
    operator delete(*(void **)(a2 + 8));
  }
}

void std::vector<quasar::lm::TokenStringAndCount>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 128;
        std::allocator<quasar::lm::TokenStringAndCount>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::allocate_shared[abi:ne180100]<quasar::NgramSrilmInterpolationConfig,std::allocator<quasar::NgramSrilmInterpolationConfig>,quasar::SystemConfig &,std::string,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0xC8uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::NgramSrilmInterpolationConfig>::__shared_ptr_emplace[abi:ne180100]<quasar::SystemConfig &,std::string,std::allocator<quasar::NgramSrilmInterpolationConfig>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1B21182C0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::NgramSrilmInterpolationConfig>::__shared_ptr_emplace[abi:ne180100]<quasar::SystemConfig &,std::string,std::allocator<quasar::NgramSrilmInterpolationConfig>,0>(void *a1, uint64_t a2, uint64_t a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A61B78;
  std::allocator<quasar::NgramSrilmInterpolationConfig>::construct[abi:ne180100]<quasar::NgramSrilmInterpolationConfig,quasar::SystemConfig &,std::string>((uint64_t)&v5, (uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1B2118334(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::NgramSrilmInterpolationConfig>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61B78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::NgramSrilmInterpolationConfig>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61B78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::NgramSrilmInterpolationConfig>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::allocator<quasar::NgramSrilmInterpolationConfig>::construct[abi:ne180100]<quasar::NgramSrilmInterpolationConfig,quasar::SystemConfig &,std::string>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  quasar::NgramSrilmInterpolationConfig::NgramSrilmInterpolationConfig(a2, a3, a4, __p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B2118450(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<quasar::LmEvaluator,std::allocator<quasar::LmEvaluator>,std::string,std::string,std::string,void>@<X0>(void *a1@<X8>)
{
  unint64_t v2 = operator new(0x100uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::LmEvaluator>::__shared_ptr_emplace[abi:ne180100]<std::string,std::string,std::string,std::allocator<quasar::LmEvaluator>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B21184CC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::LmEvaluator>::__shared_ptr_emplace[abi:ne180100]<std::string,std::string,std::string,std::allocator<quasar::LmEvaluator>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5F808;
  quasar::LmEvaluator::LmEvaluator(a1 + 3);
  return a1;
}

void sub_1B2118528(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::LmEvaluator>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F808;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::LmEvaluator>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F808;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<quasar::LmEvaluator>::__on_zero_shared(uint64_t a1)
{
}

void *std::allocate_shared[abi:ne180100]<quasar::LmLoader2,std::allocator<quasar::LmLoader2>,char const(&)[1],void>@<X0>(char *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x80uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::LmLoader2>::__shared_ptr_emplace[abi:ne180100]<char const(&)[1],std::allocator<quasar::LmLoader2>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B2118604(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::LmLoader2>::__shared_ptr_emplace[abi:ne180100]<char const(&)[1],std::allocator<quasar::LmLoader2>,0>(void *a1, char *__s)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A626A0;
  std::allocator<quasar::LmLoader2>::construct[abi:ne180100]<quasar::LmLoader2,char const(&)[1]>((int)&v4, (uint64_t)(a1 + 3), __s);
  return a1;
}

void sub_1B2118674(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::LmLoader2>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A626A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::LmLoader2>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A626A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<quasar::LmLoader2>::__on_zero_shared(uint64_t a1)
{
}

void std::allocator<quasar::LmLoader2>::construct[abi:ne180100]<quasar::LmLoader2,char const(&)[1]>(int a1, uint64_t a2, char *__s)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, __s);
  quasar::LmLoader2::LmLoader2(a2);
  if (v5 < 0) {
    operator delete(__p);
  }
}

void sub_1B2118758(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<quasar::LmLoader2,std::allocator<quasar::LmLoader2>,std::string,void>@<X0>(void *a1@<X8>)
{
  unint64_t v2 = operator new(0x80uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::LmLoader2>::__shared_ptr_emplace[abi:ne180100]<std::string,std::allocator<quasar::LmLoader2>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B21187BC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::LmLoader2>::__shared_ptr_emplace[abi:ne180100]<std::string,std::allocator<quasar::LmLoader2>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A626A0;
  quasar::LmLoader2::LmLoader2(a1 + 3);
  return a1;
}

void sub_1B2118818(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<quasar::AppLmData,std::allocator<quasar::AppLmData>,std::string,char const(&)[1],std::unique_ptr<quasar::TextTokenizer>,std::string,void>@<X0>(uint64_t a1@<X1>, char *a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, void *a5@<X8>)
{
  uint64_t v10 = operator new(0x4B8uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::AppLmData>::__shared_ptr_emplace[abi:ne180100]<std::string,char const(&)[1],std::unique_ptr<quasar::TextTokenizer>,std::string,std::allocator<quasar::AppLmData>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_1B2118894(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::AppLmData>::__shared_ptr_emplace[abi:ne180100]<std::string,char const(&)[1],std::unique_ptr<quasar::TextTokenizer>,std::string,std::allocator<quasar::AppLmData>,0>(void *a1, uint64_t a2, char *a3, uint64_t *a4, uint64_t a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A62588;
  std::allocator<quasar::AppLmData>::construct[abi:ne180100]<quasar::AppLmData,std::string,char const(&)[1],std::unique_ptr<quasar::TextTokenizer>,std::string>((int)&v7, (uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_1B2118910(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::AppLmData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62588;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::AppLmData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62588;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::AppLmData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::allocator<quasar::AppLmData>::construct[abi:ne180100]<quasar::AppLmData,std::string,char const(&)[1],std::unique_ptr<quasar::TextTokenizer>,std::string>(int a1, uint64_t a2, uint64_t a3, char *__s, uint64_t *a5, uint64_t a6)
{
  std::string::basic_string[abi:ne180100]<0>(v16, __s);
  uint64_t v10 = *a5;
  *a5 = 0;
  uint64_t v15 = v10;
  std::string::basic_string[abi:ne180100]<0>(__p, "\\unknown-first");
  int v12 = 10000;
  quasar::AppLmData::AppLmData(a2, a3, v16, &v15, a6, __p, &v12);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v11 = v15;
  uint64_t v15 = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  if (v17 < 0) {
    operator delete(v16[0]);
  }
}

void sub_1B2118A9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a16) {
    (*(void (**)(uint64_t))(*(void *)a16 + 8))(a16);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B2118C94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::InterpolateLogScoresLinearly(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *(uint64_t **)a1;
  uint64_t v4 = *(void *)(a1 + 8) - *(void *)a1;
  if (!v4) {
    return 1;
  }
  unint64_t v6 = v4 / 24;
  char v7 = *(float **)a2;
  if (v4 / 24 == (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2)
  {
    uint64_t v8 = v3[1] - *v3;
    if (v8)
    {
      unint64_t v11 = v8 >> 2;
      float v12 = *v7;
      if (v6 >= 2)
      {
        unint64_t v13 = v6 - 1;
        char v14 = v3 + 4;
        uint64_t v15 = v7 + 1;
        while (v11 == (uint64_t)(*v14 - *(v14 - 1)) >> 2)
        {
          float v16 = *v15++;
          float v12 = v12 + v16;
          v14 += 3;
          if (!--v13) {
            goto LABEL_8;
          }
        }
        if (kaldi::g_kaldi_verbose_level < -1) {
          return 0;
        }
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v44);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"there are different number of items in each vector", 50);
        goto LABEL_40;
      }
LABEL_8:
      if (v12 != 1.0
        && (COERCE_INT(fabs(v12 + -1.0)) > 2139095039 || fabsf(v12 + -1.0) > (float)((float)(fabsf(v12) + 1.0) * 0.001)))
      {
        if (kaldi::g_kaldi_verbose_level < -1) {
          return 0;
        }
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v44);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"weights should sum to one (i.e. not in log scale)", 49);
        goto LABEL_40;
      }
      std::vector<float>::vector(v44, v6);
      char v17 = *(float **)a2;
      char v18 = (float *)v44[0];
      if (v6 <= 1) {
        uint64_t v19 = 1;
      }
      else {
        uint64_t v19 = v6;
      }
      uint64_t v20 = v19;
      do
      {
        float v21 = *v17++;
        *v18++ = logf(v21);
        --v20;
      }
      while (v20);
      std::vector<float>::vector(&__p, v6);
      uint64_t v22 = 0;
      uint64_t v23 = (float *)v44[0];
      BOOL v24 = *(uint64_t **)a1;
      uint64_t v26 = (float *)__p;
      uint64_t v25 = v43;
      uint64_t v27 = ((char *)v43 - (unsigned char *)__p) >> 2;
      unsigned __int8 v41 = (float *)((char *)__p + 4);
      uint64_t v28 = *a3;
      if (v11 <= 1) {
        unint64_t v11 = 1;
      }
      do
      {
        uint64_t v29 = 0;
        BOOL v30 = v24;
        do
        {
          uint64_t v31 = *v30;
          v30 += 3;
          v26[v29] = v23[v29] + *(float *)(v31 + 4 * v22);
          ++v29;
        }
        while (v19 != v29);
        if (v27)
        {
          if (v27 == 1)
          {
            float v32 = *v26;
          }
          else
          {
            float v33 = *v26;
            for (uint64_t i = v41; i != v25; ++i)
            {
              float v35 = *i;
              float v36 = v35;
              if (v35 > v33) {
                float v33 = v36;
              }
            }
            float v37 = 0.0;
            if (v26 != v25)
            {
              uint64_t v38 = v26;
              do
              {
                float v39 = *v38 - v33;
                if (v39 >= -15.942) {
                  float v37 = v37 + expf(v39);
                }
                ++v38;
              }
              while (v38 != v25);
            }
            float v32 = v33 + logf(v37);
          }
        }
        else
        {
          float v32 = -INFINITY;
        }
        *(float *)(v28 + 4 * v22++) = v32;
      }
      while (v22 != v11);
      if (__p)
      {
        uint64_t v43 = (float *)__p;
        operator delete(__p);
      }
      if (v44[0])
      {
        v44[1] = v44[0];
        operator delete(v44[0]);
      }
    }
    return 1;
  }
  if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v44);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"there are different number of items in the weights list", 55);
LABEL_40:
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v44);
  }
  return 0;
}

void sub_1B2118FDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
}

uint64_t kaldi::quasar::EstimateLinearWeights(uint64_t a1, float **a2, uint64_t a3, float a4)
{
  uint64_t v4 = *a2;
  a2[1] = *a2;
  unint64_t v6 = *(void **)a1;
  char v5 = *(void **)(a1 + 8);
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(void *)a1) >> 3);
  if (!v7) {
    return 1;
  }
  unint64_t v9 = v7 - 1;
  if (v7 == 1)
  {
    uint64_t v10 = (uint64_t)(a2 + 2);
    unint64_t v11 = (unint64_t)a2[2];
    if ((unint64_t)v4 >= v11)
    {
      uint64_t v82 = v11 - (void)v4;
      uint64_t v83 = v82 >> 1;
      if ((unint64_t)(v82 >> 1) <= 1) {
        uint64_t v83 = 1;
      }
      if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v84 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v84 = v83;
      }
      uint64_t v85 = (float *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v10, v84);
      long long v86 = *a2;
      unint64_t v87 = a2[1];
      long long v89 = &v85[v88];
      *uint64_t v85 = 1.0;
      float v12 = v85 + 1;
      while (v87 != v86)
      {
        int v90 = *((_DWORD *)v87-- - 1);
        *((_DWORD *)v85-- - 1) = v90;
      }
      *a2 = v85;
      a2[1] = v12;
      a2[2] = v89;
      if (v86) {
        operator delete(v86);
      }
    }
    else
    {
      *uint64_t v4 = 1.0;
      float v12 = v4 + 1;
    }
    a2[1] = v12;
    return 1;
  }
  uint64_t v13 = v6[1] - *v6;
  if (!v13) {
    return 1;
  }
  uint64_t v15 = (void **)a1;
  unint64_t v16 = v13 >> 2;
  char v17 = v6 + 4;
  do
  {
    if (v16 != (uint64_t)(*v17 - *(v17 - 1)) >> 2)
    {
      if (kaldi::g_kaldi_verbose_level >= -1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v111);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v111, (uint64_t)"there are different number of items in each vector", 50);
        kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v111);
      }
      return 0;
    }
    v17 += 3;
    --v9;
  }
  while (v9);
  std::vector<float>::resize((uint64_t)a2, v7);
  std::vector<float>::vector(&v109, v7);
  std::vector<float>::vector(&v107, v7);
  double v18 = log(1.0 / (double)v7);
  if (v5 != v6)
  {
    float v19 = v18;
    uint64_t v20 = (float *)v109;
    unint64_t v21 = v7;
    do
    {
      *v20++ = v19;
      --v21;
    }
    while (v21);
  }
  std::vector<std::vector<float>>::vector(v106, v16);
  std::vector<float>::vector(v105, v16);
  unint64_t v96 = a2;
  std::vector<float>::vector(&__p, v16);
  uint64_t v22 = 0;
  unint64_t v23 = v7;
  if (v16 <= 1) {
    unint64_t v16 = 1;
  }
  unint64_t v97 = v7;
  unint64_t v98 = v15;
  while (v22 != a3)
  {
    uint64_t v100 = v22;
    uint64_t v24 = 0;
    uint64_t v25 = v106[0];
    do
    {
      std::vector<float>::resize(v25 + 24 * v24, v7);
      uint64_t v25 = v106[0];
      if (v5 == v6)
      {
        uint64_t v29 = *(float **)(v106[0] + 24 * v24);
      }
      else
      {
        uint64_t v26 = 0;
        uint64_t v27 = (float *)v109;
        uint64_t v28 = *v15;
        uint64_t v29 = *(float **)(v106[0] + 24 * v24);
        do
        {
          uint64_t v30 = *v28;
          v28 += 3;
          v29[v26] = v27[v26] + *(float *)(v30 + 4 * v24);
          ++v26;
        }
        while (v23 != v26);
      }
      uint64_t v31 = *(float **)(v25 + 24 * v24 + 8);
      uint64_t v32 = v31 - v29;
      if (v32)
      {
        if (v32 == 1)
        {
          float v33 = *v29;
        }
        else
        {
          uint64_t v34 = v29 + 1;
          float v35 = *v29;
          while (v34 != v31)
          {
            float v36 = *v34++;
            float v37 = v36;
            if (v36 > v35) {
              float v35 = v37;
            }
          }
          float v38 = 0.0;
          while (v29 != v31)
          {
            float v39 = *v29 - v35;
            if (v39 >= -15.942) {
              float v38 = v38 + expf(v39);
            }
            ++v29;
          }
          float v33 = v35 + logf(v38);
        }
      }
      else
      {
        float v33 = -INFINITY;
      }
      *((float *)v105[0] + v24++) = v33;
    }
    while (v24 != v16);
    unint64_t v40 = v6;
    uint64_t v41 = 0;
    BOOL v42 = (float *)v105[0];
    uint64_t v43 = v106[0];
    do
    {
      while (v5 == v6)
      {
        if (++v41 == v16) {
          goto LABEL_63;
        }
      }
      BOOL v44 = *(float **)(v43 + 24 * v41);
      unint64_t v45 = v23;
      do
      {
        *BOOL v44 = *v44 - v42[v41];
        ++v44;
        --v45;
      }
      while (v45);
      ++v41;
    }
    while (v41 != v16);
    uint64_t v46 = 0;
    float v47 = (float *)v107;
    float v48 = (uint64_t *)v106[0];
    int v50 = (float *)__p;
    float v49 = v104;
    uint64_t v51 = ((char *)v104 - (unsigned char *)__p) >> 2;
    int v101 = (float *)((char *)__p + 4);
    int v102 = (float *)v107;
    do
    {
      uint64_t v52 = 0;
      uint64_t v53 = v48;
      do
      {
        uint64_t v54 = *v53;
        v53 += 3;
        v50[v52++] = *(float *)(v54 + 4 * v46);
      }
      while (v16 != v52);
      if (v51)
      {
        if (v51 == 1)
        {
          float v55 = *v50;
        }
        else
        {
          float v56 = *v50;
          for (uint64_t i = v101; i != v49; ++i)
          {
            float v58 = *i;
            float v59 = v58;
            if (v58 > v56) {
              float v56 = v59;
            }
          }
          float v60 = 0.0;
          if (v50 != v49)
          {
            long long v61 = v50;
            do
            {
              float v62 = *v61 - v56;
              if (v62 >= -15.942) {
                float v60 = v60 + expf(v62);
              }
              ++v61;
            }
            while (v61 != v49);
          }
          float v55 = v56 + logf(v60);
          float v47 = v102;
        }
      }
      else
      {
        float v55 = -INFINITY;
      }
      v47[v46++] = v55;
    }
    while (v46 != v23);
LABEL_63:
    uint64_t v64 = (float *)v107;
    long long v63 = (float *)v108;
    uint64_t v65 = (uint64_t)(v108 - (void)v107) >> 2;
    if (v65)
    {
      if (v65 != 1)
      {
        long long v68 = (float *)((char *)v107 + 4);
        float v69 = *(float *)v107;
        unint64_t v6 = v40;
        if ((char *)v107 + 4 != (void *)v108)
        {
          do
          {
            float v70 = *v68++;
            float v71 = v70;
            if (v70 > v69) {
              float v69 = v71;
            }
          }
          while (v68 != (float *)v108);
        }
        unint64_t v7 = v97;
        uint64_t v67 = v100;
        float v72 = 0.0;
        if (v107 != (void *)v108)
        {
          long long v73 = (float *)v107;
          do
          {
            float v74 = *v73 - v69;
            if (v74 >= -15.942) {
              float v72 = v72 + expf(v74);
            }
            ++v73;
          }
          while (v73 != v63);
        }
        float v66 = v69 + logf(v72);
        goto LABEL_78;
      }
      float v66 = *(float *)v107;
    }
    else
    {
      float v66 = -INFINITY;
    }
    unint64_t v6 = v40;
    unint64_t v7 = v97;
    uint64_t v67 = v100;
LABEL_78:
    int v75 = v64;
    unint64_t v76 = v23;
    if (v5 != v6)
    {
      do
      {
        *int v75 = *v75 - v66;
        ++v75;
        --v76;
      }
      while (v76);
    }
    uint64_t v15 = v98;
    if (v5 == v6)
    {
      BOOL v77 = 0;
    }
    else if (vabds_f32(*v64, *(float *)v109) <= a4)
    {
      uint64_t v78 = 1;
      do
      {
        unint64_t v79 = v78;
        if (v23 == v78) {
          break;
        }
        float v80 = vabds_f32(v64[v78], *((float *)v109 + v78));
        ++v78;
      }
      while (v80 <= a4);
      BOOL v77 = v79 < v7;
    }
    else
    {
      BOOL v77 = 1;
    }
    uint64_t v22 = v67 + 1;
    uint64_t v107 = v109;
    long long v81 = v110;
    long long v109 = v64;
    *(void *)&long long v110 = v63;
    *((void *)&v110 + 1) = *((void *)&v108 + 1);
    long long v108 = v81;
    if (!v77) {
      break;
    }
  }
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v111);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v111, (uint64_t)"linear weights converged after ", 31);
    unsigned int v91 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)" iterations", 11);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v111);
  }
  if (v5 != v6)
  {
    unsigned int v92 = (float *)v109;
    long long v93 = *v96;
    do
    {
      float v94 = *v92++;
      *v93++ = expf(v94);
      --v23;
    }
    while (v23);
  }
  if (__p)
  {
    std::string v104 = (float *)__p;
    operator delete(__p);
  }
  if (v105[0])
  {
    v105[1] = v105[0];
    operator delete(v105[0]);
  }
  v111[0] = (void **)v106;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](v111);
  if (v107)
  {
    *(void *)&long long v108 = v107;
    operator delete(v107);
  }
  if (v109)
  {
    *(void *)&long long v110 = v109;
    operator delete(v109);
  }
  return 1;
}

void sub_1B21196DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
}

float kaldi::quasar::GetTotalCostFromLinearCompactLattice(void *a1, unsigned char *a2)
{
  uint64_t v4 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
  uint64_t v13 = 0;
  char v14 = 0;
  uint64_t v15 = 0;
  float v5 = 0.0;
  while (1)
  {
    (*(void (**)(uint64_t *__return_ptr, void *, uint64_t))(*a1 + 32))(&v9, a1, v4);
    uint64_t v12 = v9;
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v13, (char *)__p, (uint64_t)v11, (v11 - (unsigned char *)__p) >> 2);
    float v18 = *((float *)&v12 + 1);
    int v19 = v12;
    int v17 = 2139095040;
    float v16 = INFINITY;
    BOOL v6 = *(float *)&v12 == INFINITY && v18 == v16 && v14 == v13;
    if (__p)
    {
      unint64_t v11 = __p;
      operator delete(__p);
    }
    if (!v6)
    {
      *a2 = 1;
      float v5 = v5 + *(float *)&v12;
      goto LABEL_15;
    }
    uint64_t v7 = *(void *)(*(void *)(*(void *)(a1[1] + 64) + 8 * (int)v4) + 48);
    if (*(void *)(*(void *)(*(void *)(a1[1] + 64) + 8 * (int)v4) + 56) == v7) {
      break;
    }
    float v5 = v5 + *(float *)(v7 + 8);
    uint64_t v4 = *(unsigned int *)(v7 + 40);
  }
  if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)"Last state of linear clat is not a final state (perhaps text contains \\CS-xx-start without \\CS-xx-end?) LM score will not be accurate.", 134);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v9);
  }
  *a2 = 0;
LABEL_15:
  if (v13)
  {
    char v14 = v13;
    operator delete(v13);
  }
  return v5;
}

void sub_1B2119954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
  uint64_t v13 = *(void **)(v11 - 120);
  if (v13)
  {
    *(void *)(v11 - 112) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(a1);
}

void kaldi::quasar::ConvertLmeFsts(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (*a1 != v3)
  {
    do
    {
      int v5 = *(_DWORD *)(v2 + 24);
      if (v5)
      {
        unint64_t v6 = a2[1];
        if (v6 >= a2[2])
        {
          uint64_t v8 = std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__push_back_slow_path<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&>(a2, v2);
        }
        else
        {
          *(_DWORD *)unint64_t v6 = *(_DWORD *)v2;
          *(void *)(v6 + 8) = *(void *)(v2 + 8);
          uint64_t v7 = *(void *)(v2 + 16);
          *(void *)(v6 + 16) = v7;
          if (v7)
          {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
            int v5 = *(_DWORD *)(v2 + 24);
          }
          *(_DWORD *)(v6 + 24) = v5;
          uint64_t v8 = v6 + 32;
        }
        a2[1] = v8;
      }
      else
      {
        uint64_t v9 = *(const void **)(v2 + 8);
        if (v9
        {
          uint64_t v11 = *(std::__shared_weak_count **)(v2 + 16);
          if (v11) {
            atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          int v12 = *(_DWORD *)v2;
          fst::quasar::MergeTrieFst::CurrentUnigramFst((uint64_t)v10, &v21);
          long long v13 = v21;
          long long v21 = 0uLL;
          int v14 = *(_DWORD *)(v2 + 24);
          int v22 = v12;
          long long v23 = v13;
          if (*((void *)&v13 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          int v24 = v14;
          std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::push_back[abi:ne180100](a2, (uint64_t)&v22);
          if (*((void *)&v23 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v23 + 1));
          }
          if (*((void *)&v13 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v13 + 1));
          }
          if (*((void *)&v21 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v21 + 1));
          }
          if (!v11) {
            goto LABEL_36;
          }
          uint64_t v15 = v11;
        }
        else
        {
          int v19 = v9;
          float v16 = *(std::__shared_weak_count **)(v2 + 16);
          uint64_t v20 = v16;
          if (v16) {
            atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          kaldi::quasar::LmeFst::ConvertLmeFstForRescore((uint64_t *)&v19, &v21);
          if (v20) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v20);
          }
          int v17 = *(_DWORD *)v2;
          long long v18 = v21;
          if (*((void *)&v21 + 1))
          {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v21 + 1) + 8), 1uLL, memory_order_relaxed);
            long long v23 = v18;
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          else
          {
            long long v23 = (unint64_t)v21;
          }
          int v22 = v17;
          int v24 = 0;
          std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::push_back[abi:ne180100](a2, (uint64_t)&v22);
          if (*((void *)&v23 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v23 + 1));
          }
          if (*((void *)&v18 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v18 + 1));
          }
          uint64_t v15 = (std::__shared_weak_count *)*((void *)&v21 + 1);
          if (!*((void *)&v21 + 1)) {
            goto LABEL_36;
          }
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
LABEL_36:
      v2 += 32;
    }
    while (v2 != v3);
  }
}

void sub_1B2119BC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, void **a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

void **std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = (unint64_t)*(result - 1);
  if (v7 >= v6)
  {
    uint64_t v9 = (uint64_t)(v7 - *a1) >> 5;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 59) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v5 - *a1;
    if (v11 >> 4 > v10) {
      unint64_t v10 = v11 >> 4;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    void v16[4] = result;
    long long v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)result, v12);
    int v14 = &v13[32 * v9];
    v16[0] = v13;
    v16[1] = v14;
    void v16[3] = &v13[32 * v15];
    *(_DWORD *)int v14 = *(_DWORD *)a2;
    *(_OWORD *)(v14 + 8) = *(_OWORD *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *((_DWORD *)v14 + 6) = *(_DWORD *)(a2 + 24);
    v16[2] = v14 + 32;
    std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__swap_out_circular_buffer(a1, v16);
    uint64_t v8 = a1[1];
    uint64_t result = std::__split_buffer<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~__split_buffer(v16);
  }
  else
  {
    *(_DWORD *)unint64_t v7 = *(_DWORD *)a2;
    *(_OWORD *)(v7 + 8) = *(_OWORD *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(_DWORD *)(v7 + 24) = *(_DWORD *)(a2 + 24);
    uint64_t v8 = v7 + 32;
    a1[1] = v7 + 32;
  }
  a1[1] = v8;
  return result;
}

void sub_1B2119D5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void kaldi::quasar::GetBestInterpWeights(void **a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  memset(v3, 0, sizeof(v3));
  std::vector<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::__init_with_size[abi:ne180100]<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>*,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>*>(v3, *a1, a1[1], ((char *)a1[1] - (char *)*a1) >> 4);
  kaldi::quasar::InterpolateLmWeightEstimator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::InterpolateLmWeightEstimator(v4, v3);
  uint64_t v2 = (void **)v3;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v2);
  fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::VectorFst();
}

void sub_1B2119EFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (__p)
  {
    a15 = (uint64_t)__p;
    operator delete(__p);
  }
  a10 = &a17;
  std::vector<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~ImplToFst(&a20);
  kaldi::quasar::InterpolateLmWeightEstimator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~InterpolateLmWeightEstimator((void **)(v21 - 96));
  long long v23 = *(void **)v20;
  if (*(void *)v20)
  {
    *(void *)(v20 + 8) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::InterpolateLmWeightEstimator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::ProcessOneSentence(uint64_t *a1, uint64_t *a2)
{
  if (a2[1] == *a2) {
    return 1;
  }
  std::string __p = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v3 = *a1;
  if (a1[1] == *a1) {
    return 1;
  }
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  unint64_t v7 = 0;
  do
  {
    uint64_t v8 = kaldi::quasar::CalculateSequenceScoresFromDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(*(void *)(v3 + v6), a2, &__p);
    if ((v8 & 1) == 0) {
      break;
    }
    std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>(a1[3] + v5, *(void *)(a1[3] + v5 + 8), (char *)__p, v11, (v11 - (unsigned char *)__p) >> 2);
    ++v7;
    uint64_t v3 = *a1;
    v6 += 16;
    v5 += 24;
  }
  while (v7 < (a1[1] - *a1) >> 4);
  if (__p)
  {
    uint64_t v11 = (char *)__p;
    operator delete(__p);
  }
  return v8;
}

void sub_1B211A05C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::InterpolateLmWeightEstimator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::GetBestWeights(uint64_t a1, float **a2, int a3, uint64_t a4, float a5)
{
  if (a3)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"only linear weight estimation has been implemented now", 54);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
    }
    return 0;
  }
  else
  {
    uint64_t v6 = a1 + 24;
    return kaldi::quasar::EstimateLinearWeights(v6, a2, a4, a5);
  }
}

void sub_1B211A108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void **kaldi::quasar::InterpolateLmWeightEstimator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~InterpolateLmWeightEstimator(void **a1)
{
  uint64_t v3 = a1 + 3;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = a1;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

void kaldi::quasar::DeterminizeCompactLattice()
{
}

{
  fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst();
}

void sub_1B211A23C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~ImplToFst((void *)(v9 - 48));
  _Unwind_Resume(a1);
}

void fst::DeterminizeLattice<fst::LatticeWeightTpl<float>,int>(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 280))(a2, v8);
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 288))(a2, v9);
  fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::LatticeDeterminizer((uint64_t)&v10, a1, a3, a4);
}

void sub_1B211A3B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t kaldi::quasar::LoadRescoreInterpedLMs(uint64_t *a1, uint64_t *a2, uint64_t *a3, int a4, uint64_t **a5, uint64_t *a6, uint64_t a7, __int32 **a8, uint64_t *a9, unsigned int a10, uint64_t a11, int a12, unsigned int a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  int v86 = a4;
  kaldi::quasar::ConvertLmeFsts(a6, (uint64_t *)v85);
  uint64_t v74 = *a9;
  uint64_t v82 = 0;
  uint64_t v83 = 0;
  unint64_t v84 = 0;
  memset(v81, 0, sizeof(v81));
  uint64_t v18 = *a1;
  if (a1[1] != *a1)
  {
    unint64_t v19 = 0;
    do
    {
      long long v20 = *(_OWORD *)(v18 + 16 * v19);
      uint64_t v21 = *(std::__shared_weak_count **)(v18 + 16 * v19 + 8);
      if (v21)
      {
        atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
        *(_OWORD *)((char *)v77 + 8) = v20;
        atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        *((void *)&v77[0] + 1) = *(void *)(v18 + 16 * v19);
        *(void *)&v77[1] = 0;
      }
      LODWORD(v77[0]) = a10;
      DWORD2(v77[1]) = -1;
      *((void *)&v79 + 1) = 0;
      uint64_t v80 = 0;
      *(void *)&long long v79 = (char *)&v79 + 8;
      kaldi::quasar::DeterministicOnDemandFstCreator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::AddBackoffFst((uint64_t)v81, (unsigned int *)v77, (uint64_t *)v85, 1, 0, a13, 0x20000, (uint64_t)&v79);
      std::__tree<int>::destroy((uint64_t)&v79, *((void **)&v79 + 1));
      if (*(void *)&v77[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v77[1]);
      }
      if (v21) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v21);
      }
      int v22 = v83;
      if (v83 >= v84)
      {
        int v24 = v82;
        uint64_t v25 = (v83 - (char *)v82) >> 2;
        unint64_t v26 = v25 + 1;
        if ((unint64_t)(v25 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v27 = v84 - (char *)v82;
        if ((v84 - (char *)v82) >> 1 > v26) {
          unint64_t v26 = v27 >> 1;
        }
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v28 = v26;
        }
        if (v28)
        {
          uint64_t v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v84, v28);
          int v24 = v82;
          int v22 = v83;
        }
        else
        {
          uint64_t v29 = 0;
        }
        uint64_t v30 = &v29[4 * v25];
        *(_DWORD *)uint64_t v30 = 1065353216;
        long long v23 = v30 + 4;
        while (v22 != (char *)v24)
        {
          int v31 = *((_DWORD *)v22 - 1);
          v22 -= 4;
          *((_DWORD *)v30 - 1) = v31;
          v30 -= 4;
        }
        uint64_t v82 = (float *)v30;
        uint64_t v83 = v23;
        unint64_t v84 = &v29[4 * v28];
        if (v24) {
          operator delete(v24);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v83 = 1065353216;
        long long v23 = v22 + 4;
      }
      uint64_t v83 = v23;
      ++v19;
      uint64_t v18 = *a1;
    }
    while (v19 < (a1[1] - *a1) >> 4);
  }
  float v33 = *a5;
  uint64_t v32 = a5[1];
  if (*a5 == v32) {
    goto LABEL_100;
  }
  char v34 = 0;
  float v35 = *a5;
  do
  {
    uint64_t v36 = *v35;
    v35 += 2;
    v34 |= *(unsigned char *)(v36 + 8) != 0;
  }
  while (v35 != v32);
  if ((v34 & 1) == 0)
  {
LABEL_100:
    uint64_t v37 = *a2;
    if (a2[1] != *a2)
    {
      unint64_t v38 = 0;
      do
      {
        float v39 = *(const void **)(v37 + 16 * v38);
        *((void *)&v79 + 1) = 0;
        uint64_t v80 = 0;
        *(void *)&long long v79 = (char *)&v79 + 8;
        memset(v77, 0, sizeof(v77));
        int v78 = 1065353216;
        float v71 = v77;
        kaldi::quasar::DeterministicOnDemandFstCreator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::AddNnlm((uint64_t)v81, v39, v85, a7, a8, (uint64_t)&v79, v74, 1u, 0, a14);
        std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v77);
        std::__tree<int>::destroy((uint64_t)&v79, *((void **)&v79 + 1));
        unint64_t v40 = v83;
        if (v83 >= v84)
        {
          BOOL v42 = v82;
          uint64_t v43 = (v83 - (char *)v82) >> 2;
          unint64_t v44 = v43 + 1;
          if ((unint64_t)(v43 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v45 = v84 - (char *)v82;
          if ((v84 - (char *)v82) >> 1 > v44) {
            unint64_t v44 = v45 >> 1;
          }
          if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v46 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v46 = v44;
          }
          if (v46)
          {
            float v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v84, v46);
            BOOL v42 = v82;
            unint64_t v40 = v83;
          }
          else
          {
            float v47 = 0;
          }
          float v48 = &v47[4 * v43];
          *(_DWORD *)float v48 = 1065353216;
          uint64_t v41 = v48 + 4;
          while (v40 != (char *)v42)
          {
            int v49 = *((_DWORD *)v40 - 1);
            v40 -= 4;
            *((_DWORD *)v48 - 1) = v49;
            v48 -= 4;
          }
          uint64_t v82 = (float *)v48;
          uint64_t v83 = v41;
          unint64_t v84 = &v47[4 * v46];
          if (v42) {
            operator delete(v42);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v83 = 1065353216;
          uint64_t v41 = v40 + 4;
        }
        uint64_t v83 = v41;
        ++v38;
        uint64_t v37 = *a2;
      }
      while (v38 < (a2[1] - *a2) >> 4);
      float v33 = *a5;
      uint64_t v32 = a5[1];
    }
  }
  for (; v33 != v32; v33 += 2)
  {
    uint64_t v50 = *v33;
    float v51 = *(float *)(*v33 + 16);
    if (v51 > 0.0)
    {
      *((void *)&v77[0] + 1) = 0;
      *(void *)&v77[1] = 0;
      *(void *)&v77[0] = (char *)v77 + 8;
      (*(void (**)(uint64_t, _OWORD *, unsigned int **, void, uint64_t, uint64_t, void, _OWORD *, uint64_t, uint64_t, _OWORD *))(*(void *)v50 + 16))(v50, v81, v85, a10, 1, 1, a13, v77, a7, a14, v71);
      std::__tree<int>::destroy((uint64_t)v77, *((void **)&v77[0] + 1));
      uint64_t v52 = v83;
      if (v83 >= v84)
      {
        uint64_t v54 = v82;
        uint64_t v55 = (v83 - (char *)v82) >> 2;
        unint64_t v56 = v55 + 1;
        if ((unint64_t)(v55 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v57 = v84 - (char *)v82;
        if ((v84 - (char *)v82) >> 1 > v56) {
          unint64_t v56 = v57 >> 1;
        }
        if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v58 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v58 = v56;
        }
        if (v58)
        {
          float v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v84, v58);
          uint64_t v54 = v82;
          uint64_t v52 = v83;
        }
        else
        {
          float v59 = 0;
        }
        float v60 = (float *)&v59[4 * v55];
        *float v60 = v51;
        uint64_t v53 = v60 + 1;
        while (v52 != (char *)v54)
        {
          int v61 = *((_DWORD *)v52 - 1);
          v52 -= 4;
          *((_DWORD *)v60-- - 1) = v61;
        }
        uint64_t v82 = v60;
        uint64_t v83 = (char *)v53;
        unint64_t v84 = &v59[4 * v58];
        if (v54) {
          operator delete(v54);
        }
      }
      else
      {
        *(float *)uint64_t v83 = v51;
        uint64_t v53 = (float *)(v52 + 4);
      }
      uint64_t v83 = (char *)v53;
    }
  }
  if (*(void *)&v81[0] == *((void *)&v81[0] + 1))
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v77);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"no new LM defined", 17);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v77);
    }
    goto LABEL_91;
  }
  uint64_t v62 = *a3;
  uint64_t v63 = a3[1];
  if (a15 && v62 == v63) {
    kaldi::quasar::GetBestInterpWeights((void **)v81, v77);
  }
  if ((v63 - v62) >> 2 != (uint64_t)(*((void *)&v81[0] + 1) - *(void *)&v81[0]) >> 4)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v77);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"total number of new LMs is ", 27);
      float v69 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)" , but the number of interpolation weights is ", 46);
      std::ostream::operator<<();
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v77);
    }
LABEL_91:
    uint64_t v68 = 0;
    goto LABEL_92;
  }
  memset(v77, 0, 24);
  if (v63 != v62)
  {
    unint64_t v64 = 0;
    do
    {
      long long v65 = *(_OWORD *)(*(void *)&v81[0] + 16 * v64);
      long long v79 = v65;
      if (*((void *)&v65 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v65 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      LODWORD(v80) = *(_DWORD *)(v62 + 4 * v64);
      std::vector<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>>::push_back[abi:ne180100]((uint64_t *)v77, (uint64_t)&v79);
      if (*((void *)&v79 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v79 + 1));
      }
      ++v64;
      uint64_t v62 = *a3;
    }
    while (v64 < (a3[1] - *a3) >> 2);
  }
  std::allocate_shared[abi:ne180100]<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::vector<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>> &,fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::WeightType &,void>((uint64_t *)v77, &v86, &v79);
  long long v66 = v79;
  long long v79 = 0uLL;
  uint64_t v67 = *(std::__shared_weak_count **)(a16 + 8);
  *(_OWORD *)a16 = v66;
  if (v67)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v67);
    if (*((void *)&v79 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v79 + 1));
    }
  }
  *(void *)&long long v79 = v77;
  std::vector<quasar::AlternativeSelectionSpan::Alternative>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
  uint64_t v68 = 1;
LABEL_92:
  *(void *)&v77[0] = (char *)&v81[1] + 8;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)v77);
  *(void *)&v77[0] = v81;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)v77);
  if (v82)
  {
    uint64_t v83 = (char *)v82;
    operator delete(v82);
  }
  *(void *)&v77[0] = v85;
  std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v77);
  return v68;
}

void sub_1B211AB7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a19);
  kaldi::quasar::DeterministicOnDemandFstCreator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~DeterministicOnDemandFstCreator((void **)(v19 - 208));
  uint64_t v21 = *(void **)(v19 - 160);
  if (v21)
  {
    *(void *)(v19 - 152) = v21;
    operator delete(v21);
  }
  a19 = (void **)(v19 - 136);
  std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100](&a19);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::LimitWeights(float **a1, float **a2)
{
  if (kaldi::g_kaldi_verbose_level >= 5)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v45, 5);
    uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"max_weights: ", 13);
    kaldi::JoinVectorToString<float>(a1, ",");
    if ((v44 & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if ((v44 & 0x80u) == 0) {
      uint64_t v6 = v44;
    }
    else {
      uint64_t v6 = v43;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)p_p, v6);
    if ((char)v44 < 0) {
      operator delete(__p);
    }
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v45);
    if (kaldi::g_kaldi_verbose_level >= 5)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v45, 5);
      unint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"Initial weights ", 16);
      kaldi::JoinVectorToString<float>(a2, ",");
      if ((v44 & 0x80u) == 0) {
        uint64_t v8 = &__p;
      }
      else {
        uint64_t v8 = __p;
      }
      if ((v44 & 0x80u) == 0) {
        uint64_t v9 = v44;
      }
      else {
        uint64_t v9 = v43;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
      if ((char)v44 < 0) {
        operator delete(__p);
      }
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v45);
    }
  }
  uint64_t v10 = *a2;
  uint64_t v11 = a2[1];
  uint64_t v12 = (char *)v11 - (char *)*a2;
  long long v13 = *a1;
  int v14 = a1[1];
  if (v12 == (char *)v14 - (char *)*a1)
  {
    if (v13 != v14)
    {
      int v15 = 0;
      float v16 = v13;
      do
      {
        if (*v16 <= 0.0)
        {
          if (kaldi::g_kaldi_verbose_level < -1) {
            return 0;
          }
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v45);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"LM should not have been added to DeterministicOnDemandFstCreator. max_weight <= 0: ", 83);
          std::ostream::operator<<();
          goto LABEL_55;
        }
        if (*v16 < 1.0) {
          ++v15;
        }
        ++v16;
      }
      while (v16 != v14);
      if (v15)
      {
        if (v15 != 1)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v45);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"Unimplemented. num_effective_max_weights > 1: ", 46);
          std::ostream::operator<<();
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v45);
        }
        if (v11 != v10)
        {
          int v17 = 0;
          unint64_t v18 = v12 >> 2;
          if (v18 <= 1) {
            unint64_t v18 = 1;
          }
          float v19 = 0.0;
          unint64_t v20 = v18;
          uint64_t v21 = *a2;
          int v22 = v13;
          float v23 = 0.0;
          do
          {
            float v24 = *v21++;
            float v25 = v24;
            float v26 = *v22++;
            float v27 = v25 - v26;
            BOOL v28 = v25 <= v26;
            if (v25 > v26) {
              float v29 = v27;
            }
            else {
              float v29 = -0.0;
            }
            float v23 = v23 + v29;
            if (!v28) {
              float v25 = -0.0;
            }
            float v19 = v19 + v25;
            if (v28) {
              ++v17;
            }
            --v20;
          }
          while (v20);
          if (v23 > 0.001)
          {
            float v30 = 0.0;
            do
            {
              float v31 = *v10;
              float v32 = *v13;
              if (*v10 <= *v13)
              {
                double v33 = 1.0 / (double)v17;
                if (v19 >= 0.001) {
                  double v33 = (float)(v31 / v19);
                }
                float v34 = v33;
                float v32 = v31 + (float)(v34 * v23);
              }
              *v10++ = v32;
              float v30 = v30 + v32;
              ++v13;
              --v18;
            }
            while (v18);
            if (v30 == 1.0)
            {
LABEL_61:
              int v38 = kaldi::g_kaldi_verbose_level;
            }
            else
            {
              BOOL v35 = COERCE_INT(fabs(v30 + -1.0)) <= 2139095039
                 && fabsf(v30 + -1.0) <= (float)((float)(fabsf(v30) + 1.0) * 0.001);
              int v38 = kaldi::g_kaldi_verbose_level;
              if (!v35 && kaldi::g_kaldi_verbose_level >= -1)
              {
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v45);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"weights should sum to one (i.e. not in log scale)", 49);
                kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v45);
                goto LABEL_61;
              }
            }
            if (v38 >= 5)
            {
              kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v45, 5);
              float v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"Final weights: ", 15);
              kaldi::JoinVectorToString<float>(a2, ",");
              if ((v44 & 0x80u) == 0) {
                unint64_t v40 = &__p;
              }
              else {
                unint64_t v40 = __p;
              }
              if ((v44 & 0x80u) == 0) {
                uint64_t v41 = v44;
              }
              else {
                uint64_t v41 = v43;
              }
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)v40, v41);
              if ((char)v44 < 0) {
                operator delete(__p);
              }
              kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v45);
            }
          }
        }
      }
    }
    return 1;
  }
  else
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v45);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"Total number of weights is ", 27);
      uint64_t v36 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" , but the number of max weights is ", 36);
      std::ostream::operator<<();
LABEL_55:
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v45);
    }
    return 0;
  }
}

void sub_1B211B140(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)va);
  JUMPOUT(0x1B211B138);
}

uint64_t kaldi::quasar::RescoreLatticeWithLanguageModels(void *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t **a6, uint64_t *a7, uint64_t a8, __int32 **a9, uint64_t *a10, unsigned int a11, uint64_t a12, uint64_t *a13, float *a14, int a15, int a16, unsigned int **a17, int a18, char a19, int a20,unsigned int a21,unint64_t a22,unsigned int a23,void *a24)
{
  uint64_t v72 = 0;
  long long v73 = 0;
  uint64_t v70 = 0;
  float v71 = 0;
  uint64_t v67 = 0;
  uint64_t v68 = 0;
  uint64_t v69 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v67, *(const void **)a12, *(void *)(a12 + 8), (uint64_t)(*(void *)(a12 + 8) - *(void *)a12) >> 2);
  BOOL v28 = (std::__shared_weak_count *)a10[1];
  v66[0] = *a10;
  v66[1] = (uint64_t)v28;
  if (v28) {
    atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char RescoreInterpedLMs = kaldi::quasar::LoadRescoreInterpedLMs(a2, a4, (uint64_t *)&v67, a15, a6, a7, a8, a9, v66, a11, v41, a18, a21, a22, (uint64_t)a1, (uint64_t)&v72);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  if ((RescoreInterpedLMs & 1) == 0)
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v65);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"Failed to load rescore old LMs", 30);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v65);
    }
    goto LABEL_62;
  }
  float v30 = (std::__shared_weak_count *)a10[1];
  v64[0] = *a10;
  v64[1] = (uint64_t)v30;
  if (v30) {
    atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v31 = kaldi::quasar::LoadRescoreInterpedLMs(a3, a5, a13, a16, a6, a7, a8, a9, v64, a11, v42, a18, a21, a22, (uint64_t)a1, (uint64_t)&v70);
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  if ((v31 & 1) == 0)
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v65);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"Failed to load rescore new LMs", 30);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v65);
    }
    if (!a24) {
      goto LABEL_62;
    }
    uint64_t v37 = v72;
    uint64_t v36 = v73;
    if (v73) {
      atomic_fetch_add_explicit(&v73->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v38 = (std::__shared_weak_count *)a24[1];
    *a24 = v37;
    a24[1] = v36;
    if (!v38) {
      goto LABEL_62;
    }
LABEL_61:
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
LABEL_62:
    uint64_t v39 = 0;
    goto LABEL_63;
  }
  if (a24)
  {
    uint64_t v33 = v70;
    float v32 = v71;
    if (v71) {
      atomic_fetch_add_explicit(&v71->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    float v34 = (std::__shared_weak_count *)a24[1];
    *a24 = v33;
    a24[1] = v32;
    if (v34) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v34);
    }
  }
  uint64_t v56 = v72;
  uint64_t v57 = v73;
  if (v73) {
    atomic_fetch_add_explicit(&v73->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v54 = v70;
  uint64_t v55 = v71;
  if (v71) {
    atomic_fetch_add_explicit(&v71->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v65[0] = (uint64_t (***)(void))0x3F800000BF800000;
  fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComposeDeterministicOnDemandFst((uint64_t)v58, &v56, &v54, v65);
  if (v55) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v55);
  }
  if (v57) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v57);
  }
  v65[0] = (uint64_t (***)(void))v58;
  std::allocate_shared[abi:ne180100]<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>,std::allocator<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>>,fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *,std::vector<int> const&,void>(v65, a17, &v52);
  uint64_t v49 = v52;
  uint64_t v50 = v53;
  if (v53) {
    atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CacheDeterministicOnDemandFst(&v51, &v49, a22);
  if (v50) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v50);
  }
  float v47 = 0;
  float v48 = 0;
  char v35 = kaldi::RescoreCompactLatticeWithDeterministicOnDemandFst((uint64_t)&v51, a20, a1, &v47, a23);
  if (v48) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v48);
  }
  if ((v35 & 1) == 0)
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v65);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"can not perform LM rescoring on the lattice", 43);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v65);
    }
    fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheDeterministicOnDemandFst(&v51);
    if (v53) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v53);
    }
    v58[0] = &unk_1F0A3F818;
    if (__p)
    {
      uint64_t v63 = __p;
      operator delete(__p);
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v61);
    if (v60) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v60);
    }
    int v38 = v59;
    if (!v59) {
      goto LABEL_62;
    }
    goto LABEL_61;
  }
  fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheDeterministicOnDemandFst(&v51);
  if (v53) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v53);
  }
  v58[0] = &unk_1F0A3F818;
  if (__p)
  {
    uint64_t v63 = __p;
    operator delete(__p);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v61);
  if (v60) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v60);
  }
  if (v59) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v59);
  }
  if (a19) {
    kaldi::quasar::DeterminizeCompactLattice();
  }
  if (*a14 > 0.0) {
    fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::VectorFst();
  }
  uint64_t v39 = 1;
LABEL_63:
  if (v67)
  {
    uint64_t v68 = v67;
    operator delete(v67);
  }
  if (v71) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v71);
  }
  if (v73) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v73);
  }
  return v39;
}

void sub_1B211B738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a61);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~ImplToFst(&a29);
  uint64_t v63 = *(void **)(v61 - 160);
  if (v63)
  {
    *(void *)(v61 - 152) = v63;
    operator delete(v63);
  }
  unint64_t v64 = *(std::__shared_weak_count **)(v61 - 128);
  if (v64) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v64);
  }
  long long v65 = *(std::__shared_weak_count **)(v61 - 112);
  if (v65) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v65);
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::JoinVectorToString<float>(void *a1, const char *a2)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v9);
  if (a1[1] != *a1)
  {
    unint64_t v4 = 0;
    do
    {
      std::ostream::operator<<();
      ++v4;
      uint64_t v5 = a1[1] - *a1;
      if (v4 < v5 >> 2)
      {
        size_t v6 = strlen(a2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)a2, v6);
        uint64_t v5 = a1[1] - *a1;
      }
    }
    while (v4 < v5 >> 2);
  }
  std::stringbuf::str();
  v9[0] = *MEMORY[0x1E4FBA408];
  uint64_t v7 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v9 + *(void *)(v9[0] - 2std::__tree<int>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v10[0] = v7;
  v10[1] = MEMORY[0x1E4FBA470] + 16;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EA8520](&v12);
}

void sub_1B211BA74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::reverse_iterator<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*>,std::reverse_iterator<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*>,std::reverse_iterator<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__push_back_slow_path<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  void v15[4] = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  char v11 = &v10[32 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v15[3] = &v10[32 * v9];
  *(_DWORD *)char v11 = *(_DWORD *)a2;
  *((void *)v11 + 1) = *(void *)(a2 + 8);
  uint64_t v12 = *(void *)(a2 + 16);
  *((void *)v11 + 2) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)v11 + 6) = *(_DWORD *)(a2 + 24);
  void v15[2] = v11 + 32;
  std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__swap_out_circular_buffer(a1, v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~__split_buffer(v15);
  return v13;
}

void sub_1B211BBF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void *kaldi::quasar::InterpolateLmWeightEstimator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::InterpolateLmWeightEstimator(void *a1, void **a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::__init_with_size[abi:ne180100]<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>*,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>*>(a1, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  std::vector<std::vector<float>>::resize(a1 + 3, (uint64_t)(a1[1] - *a1) >> 4);
  return a1;
}

void sub_1B211BC84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<float>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<float>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      uint64_t v8 = a1[1];
      do
      {
        uint64_t v10 = *(void **)(v8 - 24);
        v8 -= 24;
        unint64_t v9 = v10;
        if (v10)
        {
          *(void *)(v3 - 16) = v9;
          operator delete(v9);
        }
        uint64_t v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

uint64_t kaldi::quasar::CalculateSequenceScoresFromDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(uint64_t a1, uint64_t *a2, void *a3)
{
  if ((**(unsigned int (***)(uint64_t))a1)(a1) != -1)
  {
    a3[1] = *a3;
    std::vector<float>::resize((uint64_t)a3, (a2[1] - *a2) >> 2);
    if (a2[1] != *a2)
    {
      uint64_t v6 = (**(uint64_t (***)(uint64_t))a1)(a1);
      uint64_t v7 = *a2;
      if (*a2 != a2[1])
      {
        uint64_t v8 = 0;
        uint64_t v9 = -1;
        while (((*(uint64_t (**)(uint64_t, uint64_t, void, float *))(*(void *)a1 + 32))(a1, v6, *(unsigned int *)(v7 + v8), v13) & 1) != 0)
        {
          *(float *)(*a3 + v8) = -v13[2];
          uint64_t v6 = LODWORD(v13[3]);
          ++v9;
          v8 += 4;
          if (v7 + v8 == a2[1]) {
            goto LABEL_11;
          }
        }
        if (kaldi::g_kaldi_verbose_level < -1) {
          return 0;
        }
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"can not find label ", 19);
        char v11 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" from state ", 12);
        uint64_t v12 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" . Wrong LM input?", 18);
        goto LABEL_15;
      }
      uint64_t v9 = -1;
LABEL_11:
      *(float *)(*a3 + 4 * v9) = *(float *)(*a3 + 4 * v9)
                               - (*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v6);
    }
    return 1;
  }
  if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"invalid deterministic on-demand FST", 35);
LABEL_15:
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
  }
  return 0;
}

void sub_1B211BF7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Determinize(uint64_t a1, unsigned char *a2)
{
  fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::InitializeDeterminization(a1);
  while (1)
  {
    uint64_t v4 = *(void *)(a1 + 176);
    if (*(void *)(a1 + 168) == v4) {
      break;
    }
    int v5 = *(_DWORD *)(v4 - 4);
    *(void *)(a1 + 176) = v4 - 4;
    fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::ProcessFinal(a1, v5);
    fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::ProcessTransitions(a1, v5);
    if (a2)
    {
      if (*a2) {
        fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Debug((fst *)a1);
      }
    }
    if ((fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::CheckMemoryUsage(a1) & 1) == 0) {
      return 0;
    }
  }
  uint64_t result = 1;
  *(unsigned char *)(a1 + 84) = 1;
  return result;
}

void sub_1B211C040(_Unwind_Exception *exception_object, int a2, ...)
{
  va_start(va, a2);
  if (a2 == 2)
  {
    __cxa_get_exception_ptr(exception_object);
    *(void *)(v3 - 64) = MEMORY[0x1E4FBA508] + 16;
    __cxa_begin_catch(exception_object);
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)va);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((uint64_t *)va, (uint64_t)"Memory allocation error doing lattice determinization; using ",
        61);
      int v5 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" bytes (max = ", 14);
      uint64_t v6 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" (repo,arcs,elems) = (", 22);
      uint64_t v7 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)",", 1);
      uint64_t v8 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)",", 1);
      uint64_t v9 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)")", 1);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)va);
    }
    *(unsigned char *)(v2 + 84) = 0;
    std::bad_alloc::~bad_alloc((std::bad_alloc *)(v3 - 64));
  }
  else
  {
    if (a2 != 1) {
      _Unwind_Resume(exception_object);
    }
    exception_ptr = (const std::runtime_error *)__cxa_get_exception_ptr(exception_object);
    std::runtime_error::runtime_error((std::runtime_error *)(v3 - 64), exception_ptr);
    __cxa_begin_catch(exception_object);
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)va);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((uint64_t *)va, (uint64_t)"Caught exception doing lattice determinization\n", 47);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)va);
    }
    *(unsigned char *)(v2 + 84) = 0;
    std::runtime_error::~runtime_error((std::runtime_error *)(v3 - 64));
  }
  __cxa_end_catch();
  JUMPOUT(0x1B211C018);
}

void fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Output(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3);
  if (a3) {
    fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::FreeMostMemory(a1);
  }
  (*(void (**)(uint64_t))(*(void *)a2 + 224))(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 176))(a2, 0xFFFFFFFFLL);
  if (v5)
  {
    if ((int)v5 < 1)
    {
      (*(void (**)(uint64_t, void))(*(void *)a2 + 176))(a2, 0);
    }
    else
    {
      int v6 = v5;
      do
      {
        (*(void (**)(uint64_t))(*(void *)a2 + 200))(a2);
        --v6;
      }
      while (v6);
      (*(void (**)(uint64_t, void))(*(void *)a2 + 176))(a2, 0);
      uint64_t v7 = 0;
      uint64_t v12 = v5;
      do
      {
        uint64_t v8 = (void **)(*(void *)(a1 + 24) + 24 * v7);
        uint64_t v9 = (char *)*v8;
        uint64_t v10 = (char *)v8[1];
        while (v9 != v10)
        {
          float v24 = 0;
          float v25 = 0;
          uint64_t v26 = 0;
          memset(&v22, 0, sizeof(v22));
          fst::LatticeStringRepository<int>::ConvertToVector(a1 + 240, *((uint64_t **)v9 + 1), &v22);
          unint64_t v18 = *(void ***)(v9 + 20);
          unint64_t v20 = 0;
          uint64_t v21 = 0;
          float v19 = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v19, v22.__begin_, (uint64_t)v22.__end_, v22.__end_ - v22.__begin_);
          if (*((_DWORD *)v9 + 4) == -1)
          {
            int v14 = v18;
            float v16 = 0;
            uint64_t v17 = 0;
            std::string __p = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v19, (uint64_t)v20, (v20 - (unsigned char *)v19) >> 2);
            (*(void (**)(uint64_t, uint64_t, void ***))(*(void *)a2 + 184))(a2, v7, &v14);
            if (__p)
            {
              float v16 = __p;
              operator delete(__p);
            }
          }
          else
          {
            int v27 = *((_DWORD *)v9 + 4);
            LODWORD(v23) = *(_DWORD *)v9;
            DWORD1(v23) = v23;
            *((void *)&v23 + 1) = v18;
            std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v24, (char *)v19, (uint64_t)v20, (v20 - (unsigned char *)v19) >> 2);
            (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)a2 + 208))(a2, v7, &v23);
          }
          if (v19)
          {
            unint64_t v20 = v19;
            operator delete(v19);
          }
          if (v22.__begin_)
          {
            v22.__end_ = v22.__begin_;
            operator delete(v22.__begin_);
          }
          if (v24)
          {
            float v25 = v24;
            operator delete(v24);
          }
          v9 += 32;
        }
        if (a3)
        {
          char v11 = *v8;
          v8[1] = 0;
          v8[2] = 0;
          void *v8 = 0;
          if (v11) {
            operator delete(v11);
          }
        }
        ++v7;
      }
      while (v7 != v12);
    }
    if (a3)
    {
      long long v23 = *(_OWORD *)(a1 + 24);
      *(void *)(a1 + 24) = 0;
      *(void *)(a1 + 32) = 0;
      float v24 = *(void **)(a1 + 40);
      *(void *)(a1 + 40) = 0;
      unint64_t v18 = (void **)&v23;
      std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v18);
    }
  }
}

void sub_1B211C564(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  if (__p) {
    operator delete(__p);
  }
  if (a17) {
    operator delete(a17);
  }
  if (a20) {
    operator delete(a20);
  }
  if (a25) {
    operator delete(a25);
  }
  _Unwind_Resume(exception_object);
}

void fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::LatticeDeterminizer(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  uint64_t v7 = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 88))(a2, 0);
  *(_DWORD *)(a1 + 80) = a3;
  *(void *)(a1 + 56) = v7;
  *(void *)(a1 + 64) = a3;
  *(_DWORD *)(a1 + 72) = a4;
  *(unsigned char *)(a1 + 84) = 0;
  std::unordered_map<std::vector<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element>> const*,int,fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::SubsetKey,fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::SubsetEqual,std::allocator<std::pair<std::vector<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element>> const* const,int>>>::unordered_map(a1 + 88, 3uLL, a1 + 76, (int *)(a1 + 80));
  std::unordered_map<std::vector<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element>> const*,fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element,fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::SubsetKey,fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::SubsetEqual,std::allocator<std::pair<std::vector<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element>> const* const,fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element>>>::unordered_map(a1 + 128, 3uLL, a1 + 76, (int *)(a1 + 80));
  *(_OWORD *)(a1 + 168) = 0u;
  *(void *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  fst::LatticeStringRepository<int>::LatticeStringRepository(a1 + 240);
}

void sub_1B211C6B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  float v16 = *(void **)(v10 + 216);
  if (v16)
  {
    *(void *)(v10 + 224) = v16;
    operator delete(v16);
  }
  fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::LatticeDeterminizer(v14, v13, v12, v10);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v11);
  a10 = (void **)(v10 + 24);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a10);
  uint64_t v17 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(v10 + 8) = v17;
    operator delete(v17);
  }
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::vector<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element>> const*,int,fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::SubsetKey,fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::SubsetEqual,std::allocator<std::pair<std::vector<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element>> const* const,int>>>::unordered_map(uint64_t a1, size_t a2, uint64_t a3, int *a4)
{
  int v5 = *a4;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_DWORD *)(a1 + 36) = v5;
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, a2);
  return a1;
}

void sub_1B211C754(_Unwind_Exception *a1)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::vector<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element>> const*,fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element,fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::SubsetKey,fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::SubsetEqual,std::allocator<std::pair<std::vector<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element>> const* const,fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element>>>::unordered_map(uint64_t a1, size_t a2, uint64_t a3, int *a4)
{
  int v5 = *a4;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_DWORD *)(a1 + 36) = v5;
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, a2);
  return a1;
}

void sub_1B211C7A4(_Unwind_Exception *a1)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::InitializeDeterminization(uint64_t a1)
{
  if ((*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56), 1, 0))
  {
    int v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 160))(*(void *)(a1 + 56));
    if (v2 >= 0) {
      int v3 = v2;
    }
    else {
      int v3 = v2 + 1;
    }
    size_t v4 = (v3 >> 1) + 3;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1 + 88, v4);
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1 + 128, v4);
  }
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 24))(*(void *)(a1 + 56));
  if (result != -1)
  {
    int v6 = result;
    uint64_t v13 = 0;
    int v14 = 0;
    int v15 = 0;
    uint64_t v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v15, 1uLL);
    uint64_t v9 = &v7[24 * v8];
    *(_DWORD *)uint64_t v7 = v6;
    uint64_t v10 = v7 + 24;
    *((void *)v7 + 1) = 0;
    *((void *)v7 + 2) = 0;
    uint64_t v12 = (char *)v13;
    uint64_t v11 = v14;
    if (v14 != v13)
    {
      do
      {
        *(_OWORD *)(v7 - 24) = *(_OWORD *)(v11 - 24);
        *((void *)v7 - 1) = *((void *)v11 - 1);
        v7 -= 24;
        v11 -= 24;
      }
      while (v11 != v12);
      uint64_t v11 = (char *)v13;
    }
    uint64_t v13 = v7;
    int v14 = v10;
    int v15 = v9;
    if (v11) {
      operator delete(v11);
    }
    int v14 = v10;
    fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::EpsilonClosure(a1, (uint64_t *)&v13);
    fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::ConvertToMinimal(a1, (unsigned int **)&v13);
    operator new();
  }
  return result;
}

void sub_1B211CB48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  _Unwind_Resume(exception_object);
}

void fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Debug(fst *a1)
{
  int v2 = (void *)fst::cerr(a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Debug function called (probably SIGUSR1 caught).\n", 49);
  memset(v51, 0, sizeof(v51));
  uint64_t v52 = 0x3A8000003F800000;
  std::__hash_table<std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>,std::__unordered_map_hasher<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetKey,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetEqual,true>,std::__unordered_map_equal<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetEqual,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetKey,false>,std::allocator<std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>>>::swap((uint64_t)v51, (uint64_t)a1 + 88);
  int v3 = (fst *)std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v51);
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a1 + 4) - *((void *)a1 + 3)) >> 3);
  unint64_t v5 = v4 - 2;
  if (v4 <= 2)
  {
    int v6 = (void *)fst::cerr(v3);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v6, "Nothing to trace back");
    exit(1);
  }
  uint64_t v7 = (fst *)std::vector<int>::vector((std::vector<int> *)v51, v4 - 1, &fst::kNoStateId);
  if (v5)
  {
    unint64_t v8 = 0;
    uint64_t v9 = *((void *)a1 + 3);
    do
    {
      uint64_t v10 = (uint64_t *)(v9 + 24 * v8);
      uint64_t v11 = *v10;
      uint64_t v12 = v10[1] - *v10;
      if (v12)
      {
        unint64_t v13 = v12 >> 5;
        uint64_t v14 = *(void *)v51;
        if (v13 <= 1) {
          unint64_t v13 = 1;
        }
        int v15 = (int *)(v11 + 16);
        do
        {
          unint64_t v17 = *v15;
          v15 += 8;
          unint64_t v16 = v17;
          if (v5 >= v17 && v8 < v16) {
            *(_DWORD *)(v14 + 4 * v16) = v8;
          }
          --v13;
        }
        while (v13);
      }
      ++v8;
    }
    while (v8 != v5);
    float v48 = 0;
    uint64_t v49 = 0;
    uint64_t v50 = 0;
    if ((v5 - 1) <= 0xFFFFFFFD)
    {
      float v19 = 0;
      do
      {
        int v20 = v5;
        LODWORD(v5) = *(_DWORD *)(*(void *)v51 + 4 * (int)v5);
        uint64_t v21 = *(void *)(*((void *)a1 + 3) + 24 * (int)v5);
        uint64_t v22 = *(void *)(*((void *)a1 + 3) + 24 * (int)v5 + 8) - v21;
        if (v22)
        {
          unint64_t v23 = v22 >> 5;
          if (v23 <= 1) {
            unint64_t v23 = 1;
          }
          float v24 = (uint64_t *)(v21 + 8);
          while (*((_DWORD *)v24 + 2) != v20)
          {
            v24 += 4;
            if (!--v23) {
              goto LABEL_43;
            }
          }
          int v25 = *((_DWORD *)v24 - 2);
          uint64_t v26 = *v24;
          if (v19 >= v50)
          {
            uint64_t v27 = (v19 - v48) >> 4;
            if ((unint64_t)(v27 + 1) >> 60) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v28 = (v50 - v48) >> 3;
            if (v28 <= v27 + 1) {
              unint64_t v28 = v27 + 1;
            }
            if ((unint64_t)(v50 - v48) >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v29 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v29 = v28;
            }
            if (v29) {
              uint64_t v7 = (fst *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)&v50, v29);
            }
            else {
              uint64_t v7 = 0;
            }
            float v30 = (char *)v7 + 16 * v27;
            *(_DWORD *)float v30 = v25;
            *((void *)v30 + 1) = v26;
            float v32 = v48;
            char v31 = v49;
            uint64_t v33 = v30;
            if (v49 != v48)
            {
              do
              {
                *((_OWORD *)v33 - 1) = *((_OWORD *)v31 - 1);
                v33 -= 16;
                v31 -= 16;
              }
              while (v31 != v32);
              char v31 = v48;
            }
            float v19 = v30 + 16;
            float v48 = v33;
            uint64_t v49 = v30 + 16;
            uint64_t v50 = (char *)v7 + 16 * v29;
            if (v31) {
              operator delete(v31);
            }
          }
          else
          {
            *(_DWORD *)float v19 = v25;
            *((void *)v19 + 1) = v26;
            v19 += 16;
          }
          uint64_t v49 = v19;
        }
LABEL_43:
        ;
      }
      while ((v5 - 1) < 0xFFFFFFFE);
    }
    if (v5 == -1)
    {
      float v34 = (void *)fst::cerr(v7);
      uint64_t v7 = (fst *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"Traceback did not reach start state (possibly debug-code error)", 63);
    }
  }
  else
  {
    float v48 = 0;
    uint64_t v49 = 0;
    uint64_t v50 = 0;
  }
  char v35 = (void *)fst::cerr(v7);
  std::vector<std::string>::pointer begin = (fst *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"Traceback below (or on standard error) in format ilabel (olabel olabel) ilabel (olabel) ...\n", 92);
  if (v49 - v48 >= 1)
  {
    uint64_t v37 = (unint64_t)(v49 - v48) >> 4;
    int v38 = a1 + 240;
    do
    {
      fst::cerr(begin);
      uint64_t v39 = (void *)std::ostream::operator<<();
      LOBYTE(__p.__begin_) = 32;
      unint64_t v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)&__p, 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"( ", 2);
      memset(&__p, 0, sizeof(__p));
      fst::LatticeStringRepository<int>::ConvertToVector(v38, *(uint64_t **)&v48[16 * v37 - 8], &__p);
      if (__p.__end_ != __p.__begin_)
      {
        unint64_t v42 = 0;
        do
        {
          fst::cerr(v41);
          uint64_t v43 = (void *)std::ostream::operator<<();
          char v53 = 32;
          uint64_t v41 = (fst *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)&v53, 1);
          ++v42;
        }
        while (v42 < __p.__end_ - __p.__begin_);
      }
      unsigned __int8 v44 = (void *)fst::cerr(v41);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)") ", 2);
      std::vector<std::string>::pointer begin = (fst *)__p.__begin_;
      if (__p.__begin_)
      {
        __p.__end_ = __p.__begin_;
        operator delete(__p.__begin_);
      }
    }
    while (v37-- > 1);
  }
  unint64_t v46 = (void *)fst::cerr(begin);
  LOBYTE(__p.__begin_) = 10;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)&__p, 1);
  exit(1);
}

void sub_1B211CF58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  if (a15) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::CheckMemoryUsage(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 68);
  if (v1 < 1) {
    return 1;
  }
  int v3 = 24 * *(_DWORD *)(a1 + 52) + 32 * *(_DWORD *)(a1 + 48);
  if (v3 + 32 * *(_DWORD *)(a1 + 272) <= v1) {
    return 1;
  }
  fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::RebuildRepository((uint64_t *)a1);
  int v4 = *(_DWORD *)(a1 + 272);
  if (kaldi::g_kaldi_verbose_level >= 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v12, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Rebuilt repository in determinize-lattice: repository shrank from ", 66);
    unint64_t v5 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" to ", 4);
    int v6 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" bytes (approximately)", 22);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v12);
  }
  if (v3 + 32 * v4 <= (int)((double)*(int *)(a1 + 68) * 0.8)) {
    return 1;
  }
  if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Failure in determinize-lattice: size exceeds maximum ", 53);
    uint64_t v7 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" bytes; (repo,arcs,elems) = (",
      29);
    unint64_t v8 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)",", 1);
    uint64_t v9 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)",", 1);
    uint64_t v10 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"), after rebuilding, repo size was ", 35);
    std::ostream::operator<<();
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
  }
  return 0;
}

void sub_1B211D16C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::EpsilonClosure(uint64_t a1, uint64_t *a2)
{
  long long v54 = 0u;
  long long v55 = 0u;
  int v56 = 1065353216;
  int v4 = (char *)*a2;
  if (a2[1] != *a2)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    do
    {
      uint64_t v7 = &v4[v5];
      LODWORD(v46) = *(_DWORD *)v7;
      long long v47 = *(_OWORD *)v7;
      float v48 = (_DWORD *)*((void *)v7 + 2);
      std::__hash_table<std::__hash_value_type<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,std::__unordered_map_hasher<int,std::__hash_value_type<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>>::__emplace_unique_key_args<int,std::pair<int const,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> const&>((uint64_t)&v54, (int *)&v46, (uint64_t)&v46);
      ++v6;
      int v4 = (char *)*a2;
      v5 += 24;
    }
    while (v6 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  }
  int v8 = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56), 0x10000000, 0);
  long long v53 = 0u;
  memset(v52, 0, sizeof(v52));
  uint64_t v9 = *a2;
  if (*a2 == a2[1]) {
    goto LABEL_44;
  }
  int v10 = v8;
  do
  {
    std::deque<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element>>::push_back(v52, v9);
    v9 += 24;
  }
  while (v9 != a2[1]);
  uint64_t v11 = *((void *)&v53 + 1);
  if (!*((void *)&v53 + 1)) {
    goto LABEL_44;
  }
  int v12 = 0;
  char v13 = 0;
  do
  {
    unint64_t v14 = *(void *)(v52[1] + 8 * ((unint64_t)v53 / 0xAA)) + 24 * ((unint64_t)v53 % 0xAA);
    long long v50 = *(_OWORD *)v14;
    uint64_t v51 = *(void *)(v14 + 16);
    *(void *)&long long v53 = v53 + 1;
    *((void *)&v53 + 1) = v11 - 1;
    if ((unint64_t)v53 >= 0x154)
    {
      operator delete(*(void **)v52[1]);
      v52[1] += 8;
      *(void *)&long long v53 = v53 - 170;
    }
    if (v13)
    {
      unint64_t v46 = &v50;
      int v15 = std::__hash_table<std::__hash_value_type<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,std::__unordered_map_hasher<int,std::__hash_value_type<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)&v54, (int *)&v50, (uint64_t)&std::piecewise_construct, (_DWORD **)&v46);
      if (fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element::operator!=((uint64_t)(v15 + 3), (uint64_t)&v50))
      {
        char v13 = 1;
        goto LABEL_43;
      }
    }
    int v16 = *(_DWORD *)(a1 + 72);
    if (v16 >= 1)
    {
      if (v12 > v16)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v46);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v46, (uint64_t)"Lattice determinization aborted since looped more than ", 55);
        uint64_t v43 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)" times during epsilon closure.\n", 31);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v46);
      }
      ++v12;
    }
    uint64_t v17 = *(void *)(a1 + 56);
    unint64_t v49 = 0;
    (*(void (**)(uint64_t, void, long long **))(*(void *)v17 + 136))(v17, v50, &v46);
    while (1)
    {
      if (!v46)
      {
        if (v49 >= *((void *)&v47 + 1)) {
          goto LABEL_41;
        }
LABEL_23:
        uint64_t v20 = v47 + 20 * v49;
        goto LABEL_24;
      }
      char v18 = (*(uint64_t (**)(long long *))(*(void *)v46 + 24))(v46);
      float v19 = v46;
      if (v18) {
        goto LABEL_39;
      }
      if (!v46) {
        goto LABEL_23;
      }
      uint64_t v20 = (*(uint64_t (**)(void))(*(void *)v46 + 32))();
LABEL_24:
      int v21 = *(_DWORD *)v20;
      if ((v10 & 0x10000000) != 0)
      {
        if (v21) {
          break;
        }
      }
      if (!v21)
      {
        v44[0] = 0;
        float v22 = *(float *)(v20 + 8);
        float v23 = *(float *)(v20 + 12);
        *(float *)unsigned __int8 v44 = v22;
        *(float *)&float v59 = v23;
        int v58 = 2139095040;
        float v57 = INFINITY;
        if (v22 != INFINITY || *(float *)&v59 != v57)
        {
          v44[0] = *(_DWORD *)(v20 + 16);
          *(float *)&uint64_t v45 = *(float *)&v51 + v22;
          *((float *)&v45 + 1) = *((float *)&v51 + 1) + v23;
          int v24 = *(_DWORD *)(v20 + 4);
          uint64_t v25 = *((void *)&v50 + 1);
          if (v24) {
            uint64_t v25 = fst::LatticeStringRepository<int>::Successor((uint64_t **)(a1 + 240), *((uint64_t *)&v50 + 1), v24);
          }
          *(void *)&v44[2] = v25;
          uint64_t v26 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(&v54, v44);
          uint64_t v27 = v26;
          if (v26)
          {
            if (fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Compare(a1, (float *)&v45, *(uint64_t **)&v44[2], (float *)v26 + 10, (uint64_t *)v26[4]) == 1)
            {
              void v27[4] = *(void *)&v44[2];
              void v27[5] = v45;
              std::deque<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element>>::push_back(v52, (uint64_t)v44);
              char v13 = 1;
            }
          }
          else
          {
            float v59 = v44;
            unint64_t v28 = std::__hash_table<std::__hash_value_type<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,std::__unordered_map_hasher<int,std::__hash_value_type<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)&v54, v44, (uint64_t)&std::piecewise_construct, &v59);
            *(_OWORD *)(v28 + 3) = *(_OWORD *)v44;
            void v28[5] = v45;
            std::deque<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element>>::push_back(v52, (uint64_t)v44);
          }
        }
      }
      if (v46) {
        (*(void (**)(long long *))(*(void *)v46 + 40))(v46);
      }
      else {
        ++v49;
      }
    }
    float v19 = v46;
LABEL_39:
    if (v19)
    {
      (*(void (**)(long long *))(*(void *)v19 + 8))(v19);
      goto LABEL_43;
    }
LABEL_41:
    if (v48) {
      --*v48;
    }
LABEL_43:
    uint64_t v11 = *((void *)&v53 + 1);
  }
  while (*((void *)&v53 + 1));
LABEL_44:
  a2[1] = *a2;
  std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>::reserve((void **)a2, *((unint64_t *)&v55 + 1));
  unint64_t v29 = (void *)v55;
  if ((void)v55)
  {
    float v30 = a2 + 2;
    char v31 = (char *)a2[1];
    do
    {
      float v32 = v29 + 3;
      if ((unint64_t)v31 >= *v30)
      {
        unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v31[-*a2] >> 3);
        unint64_t v34 = v33 + 1;
        if (v33 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * ((*v30 - *a2) >> 3) > v34) {
          unint64_t v34 = 0x5555555555555556 * ((*v30 - *a2) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((*v30 - *a2) >> 3) >= 0x555555555555555) {
          unint64_t v35 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v35 = v34;
        }
        uint64_t v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)(a2 + 2), v35);
        int v38 = &v36[24 * v33];
        *(_OWORD *)int v38 = *v32;
        *((void *)v38 + 2) = v29[5];
        unint64_t v40 = (char *)*a2;
        uint64_t v39 = (char *)a2[1];
        uint64_t v41 = v38;
        if (v39 != (char *)*a2)
        {
          do
          {
            *(_OWORD *)(v41 - 24) = *(_OWORD *)(v39 - 24);
            *((void *)v41 - 1) = *((void *)v39 - 1);
            v41 -= 24;
            v39 -= 24;
          }
          while (v39 != v40);
          uint64_t v39 = (char *)*a2;
        }
        char v31 = v38 + 24;
        *a2 = (uint64_t)v41;
        a2[1] = (uint64_t)(v38 + 24);
        a2[2] = (uint64_t)&v36[24 * v37];
        if (v39) {
          operator delete(v39);
        }
      }
      else
      {
        *(_OWORD *)char v31 = *v32;
        *((void *)v31 + 2) = v29[5];
        v31 += 24;
      }
      a2[1] = (uint64_t)v31;
      unint64_t v29 = (void *)*v29;
    }
    while (v29);
  }
  std::deque<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element>>::~deque[abi:ne180100](v52);
  return std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v54);
}

void sub_1B211D7CC(_Unwind_Exception *a1)
{
  std::deque<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element>>::~deque[abi:ne180100]((void *)(v1 - 208));
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1 - 160);
  _Unwind_Resume(a1);
}

void sub_1B211D7DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _DWORD *a16)
{
  if (a13)
  {
    (*(void (**)(uint64_t))(*(void *)a13 + 8))(a13);
  }
  else if (a16)
  {
    --*a16;
  }
  std::deque<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element>>::~deque[abi:ne180100](v16 - 208);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v16 - 160);
  _Unwind_Resume(a1);
}

void fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::ConvertToMinimal(uint64_t a1, unsigned int **a2)
{
  int v3 = *a2;
  int v4 = a2[1];
  if (*a2 == v4)
  {
    unint64_t v6 = *a2;
  }
  else
  {
    unint64_t v6 = *a2;
    do
    {
      if (fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::IsIsymbolOrFinal(a1, *v3))
      {
        *(_OWORD *)unint64_t v6 = *(_OWORD *)v3;
        *((void *)v6 + 2) = *((void *)v3 + 2);
        v6 += 6;
      }
      v3 += 6;
    }
    while (v3 != v4);
    int v3 = *a2;
  }
  std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>::resize((uint64_t)a2, 0xAAAAAAAAAAAAAAABLL * (((char *)v6 - (char *)v3) >> 3));
}

uint64_t std::vector<std::vector<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::TempArc,std::allocator<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::TempArc>>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(void **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    void v16[4] = result;
    char v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(result, v12);
    unint64_t v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    void v16[3] = &v13[24 * v15];
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = 0;
    *(void *)unint64_t v14 = 0;
    *(_OWORD *)unint64_t v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::vector<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::TempArc,std::allocator<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::TempArc>>>::__swap_out_circular_buffer(a1, v16);
    int v8 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)v16);
  }
  else
  {
    *uint64_t v7 = 0;
    v7[1] = 0;
    void v7[2] = 0;
    *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
    void v7[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    int v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_1B211DA20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

double std::deque<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element>>::push_back(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 170 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA);
  *(_OWORD *)unint64_t v8 = *(_OWORD *)a2;
  double result = *(double *)(a2 + 16);
  *(double *)(v8 + 16) = result;
  ++a1[5];
  return result;
}

uint64_t fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Compare(int a1, float *a2, uint64_t *a3, float *a4, uint64_t *a5)
{
  float v5 = *a2;
  float v6 = *a2 + a2[1];
  float v7 = *a4;
  float v8 = *a4 + a4[1];
  if (v6 < v8) {
    return 1;
  }
  if (v6 > v8) {
    return 0xFFFFFFFFLL;
  }
  if (v5 < v7) {
    return 1;
  }
  if (v5 > v7) {
    return 0xFFFFFFFFLL;
  }
  if (a3 == a5) {
    return 0;
  }
  memset(&v23, 0, sizeof(v23));
  memset(&v22, 0, sizeof(v22));
  int v11 = a1 + 240;
  fst::LatticeStringRepository<int>::ConvertToVector(a1 + 240, a3, &v23);
  fst::LatticeStringRepository<int>::ConvertToVector(v11, a5, &v22);
  std::vector<unsigned int>::pointer begin = v23.__begin_;
  unint64_t v13 = (unint64_t)((char *)v23.__end_ - (char *)v23.__begin_) >> 2;
  unint64_t v14 = (unint64_t)((char *)v22.__end_ - (char *)v22.__begin_) >> 2;
  if ((int)v13 > (int)v14)
  {
    uint64_t v9 = 0xFFFFFFFFLL;
    goto LABEL_22;
  }
  if ((int)v13 < (int)v14)
  {
    uint64_t v9 = 1;
    goto LABEL_22;
  }
  if ((int)v13 < 1)
  {
    uint64_t v9 = 0;
LABEL_22:
    if (!v22.__begin_) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  uint64_t v16 = ((unint64_t)((char *)v23.__end_ - (char *)v23.__begin_) >> 2);
  std::vector<unsigned int>::pointer v17 = v22.__begin_;
  while (1)
  {
    unsigned int v19 = *begin++;
    signed int v18 = v19;
    signed int v20 = *v17++;
    BOOL v21 = v18 <= v20;
    if (v18 < v20) {
      break;
    }
    if (!v21)
    {
      uint64_t v9 = 1;
      goto LABEL_23;
    }
    if (!--v16)
    {
      uint64_t v9 = 0;
      goto LABEL_23;
    }
  }
  uint64_t v9 = 0xFFFFFFFFLL;
LABEL_23:
  v22.__end_ = v22.__begin_;
  operator delete(v22.__begin_);
  std::vector<unsigned int>::pointer begin = v23.__begin_;
LABEL_24:
  if (begin)
  {
    v23.__end_ = begin;
    operator delete(begin);
  }
  return v9;
}

void sub_1B211DC2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

void std::deque<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0xAA;
  unint64_t v4 = v2 - 170;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    float v6 = (char *)a1[3];
    a1[4] = v4;
    float v7 = (void *)a1[1];
    float v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)float v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      unint64_t v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      int v38 = (uint64_t *)a1[1];
      float v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        float v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    unsigned int v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    float v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFF0uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFF0uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    unsigned __int8 v44 = (void *)a1[1];
    float v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      unint64_t v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      float v48 = (uint64_t *)a1[1];
      float v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        float v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        float v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  int v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  long long v53 = operator new(0xFF0uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  unint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1B211DF24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::deque<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element>>::~deque[abi:ne180100](void *a1)
{
  unint64_t v2 = (void **)a1[1];
  BOOL v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      BOOL v3 = (void **)a1[2];
      unint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 85;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 170;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    float v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::~__split_buffer((uint64_t)a1);
}

uint64_t fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::IsIsymbolOrFinal(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 216);
  unint64_t v5 = (uint64_t *)(a1 + 216);
  unint64_t v6 = *(void *)(a1 + 224) - v4;
  uint64_t v7 = (int)a2;
  if (v6 <= (int)a2)
  {
    unint64_t v8 = (int)a2 + 1;
    __x[0] = 0;
    if (v8 <= v6)
    {
      if ((int)a2 + 1 < v6) {
        *(void *)(a1 + 224) = v4 + v8;
      }
    }
    else
    {
      std::vector<char>::__append((std::vector<char> *)(a1 + 216), v8 - v6, __x);
      uint64_t v4 = *v5;
    }
  }
  int v9 = *(unsigned __int8 *)(v4 + v7);
  if (v9 == 1) {
    return 0;
  }
  if (v9 == 2) {
    return 1;
  }
  *(unsigned char *)(v4 + v7) = 1;
  (*(void (**)(std::vector<char>::value_type *__return_ptr))(**(void **)(a1 + 56) + 32))(__x);
  float v24 = *(float *)__x;
  float v23 = *(float *)&__x[4];
  int v22 = 2139095040;
  float v21 = INFINITY;
  v10.n128_u32[0] = *(_DWORD *)__x;
  if (*(float *)__x != INFINITY || (v10.n128_f32[0] = v23, v23 != v21)) {
    *(unsigned char *)(*v5 + v7) = 2;
  }
  uint64_t v11 = *(void *)(a1 + 56);
  unint64_t v20 = 0;
  (*(void (**)(uint64_t, uint64_t, std::vector<char>::value_type *, __n128))(*(void *)v11 + 136))(v11, a2, __x, v10);
  while (*(void *)__x)
  {
    if ((*(uint64_t (**)(void))(**(void **)__x + 24))(*(void *)__x)) {
      goto LABEL_26;
    }
    if (!*(void *)__x) {
      goto LABEL_17;
    }
    uint64_t v13 = (*(uint64_t (**)(void))(**(void **)__x + 32))(*(void *)__x);
LABEL_18:
    if (*(_DWORD *)v13)
    {
      float v24 = 0.0;
      float v24 = *(float *)(v13 + 8);
      float v23 = 0.0;
      float v23 = *(float *)(v13 + 12);
      int v22 = 2139095040;
      float v21 = INFINITY;
      v12.n128_f32[0] = v24;
      if (v24 != INFINITY || (v12.n128_f32[0] = v23, v23 != v21))
      {
        char v15 = 0;
        *(unsigned char *)(*v5 + v7) = 2;
        goto LABEL_27;
      }
    }
    if (*(void *)__x) {
      (*(void (**)(void))(**(void **)__x + 40))(*(void *)__x);
    }
    else {
      ++v20;
    }
  }
  if (v20 < v18)
  {
LABEL_17:
    uint64_t v13 = v17 + 20 * v20;
    goto LABEL_18;
  }
LABEL_26:
  char v15 = 1;
LABEL_27:
  if (*(void *)__x)
  {
    (*(void (**)(void, __n128))(**(void **)__x + 8))(*(void *)__x, v12);
  }
  else if (v19)
  {
    --*v19;
  }
  if (v15) {
    return fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::IsIsymbolOrFinal(a1, a2);
  }
  return 1;
}

void sub_1B211E304(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::IsIsymbolOrFinal((uint64_t *)va);
  _Unwind_Resume(a1);
}

char *std::vector<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element>>::__init_with_size[abi:ne180100]<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element*,fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element*>(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    double result = std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = *((void *)v6 + 1);
    while (a2 != a3)
    {
      *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
      *(void *)(v7 + 16) = *(void *)(a2 + 16);
      v7 += 24;
      a2 += 24;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_1B211E384(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::vector<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::TempArc,std::allocator<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::TempArc>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::TempArc,std::allocator<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::TempArc>>>,std::reverse_iterator<std::vector<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::TempArc,std::allocator<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::TempArc>>*>,std::reverse_iterator<std::vector<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::TempArc,std::allocator<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::TempArc>>*>,std::reverse_iterator<std::vector<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::TempArc,std::allocator<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::TempArc>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::TempArc,std::allocator<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::TempArc>>>,std::reverse_iterator<std::vector<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::TempArc,std::allocator<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::TempArc>>*>,std::reverse_iterator<std::vector<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::TempArc,std::allocator<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::TempArc>>*>,std::reverse_iterator<std::vector<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::TempArc,std::allocator<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::TempArc>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  uint64_t v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::TempArc,std::allocator<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::TempArc>>>,std::reverse_iterator<std::vector<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::TempArc,std::allocator<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::TempArc>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::TempArc,std::allocator<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::TempArc>>>,std::reverse_iterator<std::vector<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::TempArc,std::allocator<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::TempArc>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::ProcessFinal(uint64_t a1, int a2)
{
  unint64_t v2 = *(float32x2_t ***)(*(void *)a1 + 8 * a2);
  int32x2_t v31 = vdup_n_s32(0x7F800000u);
  BOOL v3 = *v2;
  uint64_t v4 = v2[1];
  if (*v2 == v4) {
    return;
  }
  char v6 = 0;
  uint64_t v7 = 0;
  do
  {
    (*(void (**)(float32x2_t *__return_ptr))(**(void **)(a1 + 56) + 32))(&v29);
    float32x2_t v9 = vadd_f32(v3[2], v29);
    float32x2_t v30 = v9;
    __n128 v10 = (uint64_t *)v3[1];
    float v34 = v9.f32[1];
    v29.i32[0] = v9.i32[0];
    int v33 = 2139095040;
    float v32 = INFINITY;
    if (v9.f32[0] != INFINITY || v34 != v32)
    {
      if ((v6 & 1) == 0) {
        goto LABEL_8;
      }
      if (fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Compare(a1, (float *)&v30, v10, (float *)&v31, v7) == 1)
      {
        float32x2_t v9 = v30;
LABEL_8:
        int32x2_t v31 = (int32x2_t)v9;
        char v6 = 1;
        uint64_t v7 = v10;
        goto LABEL_10;
      }
      char v6 = 1;
    }
LABEL_10:
    v3 += 3;
  }
  while (v3 != v4);
  if (v6)
  {
    int32x2_t v11 = v31;
    char v12 = (char **)(*(void *)(a1 + 24) + 24 * a2);
    long long v14 = (void **)(v12 + 1);
    unint64_t v13 = (unint64_t)v12[1];
    uint64_t v16 = v12 + 2;
    unint64_t v15 = (unint64_t)v12[2];
    if (v13 >= v15)
    {
      uint64_t v18 = (uint64_t)(v13 - (void)*v12) >> 5;
      unint64_t v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 59) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v20 = v15 - (void)*v12;
      if (v20 >> 4 > v19) {
        unint64_t v19 = v20 >> 4;
      }
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v21 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v21 = v19;
      }
      int v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)v16, v21);
      float v23 = &v22[32 * v18];
      unint64_t v25 = &v22[32 * v24];
      *(_DWORD *)float v23 = 0;
      *((void *)v23 + 1) = v7;
      *((_DWORD *)v23 + 4) = -1;
      *(int32x2_t *)(v23 + 20) = v11;
      uint64_t v17 = v23 + 32;
      uint64_t v26 = (char *)*v14;
      uint64_t v27 = *v12;
      if (*v14 != *v12)
      {
        do
        {
          long long v28 = *((_OWORD *)v26 - 2);
          *((_DWORD *)v23 - 4) = *((_DWORD *)v26 - 4);
          *((_OWORD *)v23 - 2) = v28;
          *(void *)(v23 - 12) = *(void *)(v26 - 12);
          v23 -= 32;
          v26 -= 32;
        }
        while (v26 != v27);
        uint64_t v26 = *v12;
      }
      *char v12 = v23;
      *long long v14 = v17;
      *uint64_t v16 = v25;
      if (v26) {
        operator delete(v26);
      }
    }
    else
    {
      *(_DWORD *)unint64_t v13 = 0;
      *(void *)(v13 + 8) = v7;
      *(_DWORD *)(v13 + 16) = -1;
      uint64_t v17 = (void *)(v13 + 32);
      *(int32x2_t *)(v13 + 20) = v11;
    }
    *long long v14 = v17;
    ++*(_DWORD *)(a1 + 48);
  }
}

void fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::ProcessTransitions(uint64_t a1, int a2)
{
  BOOL v3 = (uint64_t *)(a1 + 192);
  uint64_t v4 = *(float32x2_t ***)(*(void *)a1 + 8 * a2);
  uint64_t v5 = *v4;
  char v6 = v4[1];
  if (*v4 == v6) {
    goto LABEL_26;
  }
  do
  {
    uint64_t v7 = *(void *)(a1 + 56);
    uint64_t v8 = v5->u32[0];
    unint64_t v42 = 0;
    (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v7 + 136))(v7, v8, &__p);
    while (1)
    {
      if (!__p)
      {
        if (v42 >= (unint64_t)v40) {
          goto LABEL_23;
        }
LABEL_8:
        __n128 v10 = (float32x2_t *)&v39[20 * v42];
        goto LABEL_9;
      }
      if ((*(unsigned int (**)(void *))(*(void *)__p + 24))(__p)) {
        break;
      }
      if (!__p) {
        goto LABEL_8;
      }
      __n128 v10 = (float32x2_t *)(*(uint64_t (**)(void))(*(void *)__p + 32))();
LABEL_9:
      if (v10->i32[0])
      {
        float v35 = 0.0;
        float v35 = v10[1].f32[0];
        float v45 = 0.0;
        float v45 = v10[1].f32[1];
        int v44 = 2139095040;
        float v43 = INFINITY;
        if (v35 != INFINITY || (v9.n128_f32[0] = v45, v45 != v43))
        {
          long long v36 = 0uLL;
          float32x2_t v37 = 0;
          __int32 v11 = v10[2].i32[0];
          float v35 = v10->f32[0];
          LODWORD(v36) = v11;
          float32x2_t v37 = vadd_f32(v5[2], v10[1]);
          int v12 = v10->i32[1];
          uint64_t v13 = (uint64_t)v5[1];
          if (v12) {
            uint64_t v13 = fst::LatticeStringRepository<int>::Successor((uint64_t **)(a1 + 240), v13, v12);
          }
          *((void *)&v36 + 1) = v13;
          unint64_t v14 = *(void *)(a1 + 200);
          if (v14 >= *(void *)(a1 + 208))
          {
            uint64_t v15 = std::vector<std::pair<int,fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element>>::__push_back_slow_path<std::pair<int,fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element> const&>(v3, (uint64_t)&v35);
          }
          else
          {
            *(float *)unint64_t v14 = v35;
            v9.n128_u64[1] = *((void *)&v36 + 1);
            *(_OWORD *)(v14 + 8) = v36;
            v9.n128_u64[0] = (unint64_t)v37;
            *(float32x2_t *)(v14 + 24) = v37;
            uint64_t v15 = v14 + 32;
          }
          *(void *)(a1 + 200) = v15;
        }
      }
      if (__p) {
        (*(void (**)(void *, __n128))(*(void *)__p + 40))(__p, v9);
      }
      else {
        ++v42;
      }
    }
    if (__p)
    {
      (*(void (**)(void))(*(void *)__p + 8))();
      goto LABEL_25;
    }
LABEL_23:
    if (v41) {
      --*v41;
    }
LABEL_25:
    v5 += 3;
  }
  while (v5 != v6);
LABEL_26:
  uint64_t v16 = *(int **)(a1 + 192);
  uint64_t v17 = *(int **)(a1 + 200);
  unint64_t v18 = 126 - 2 * __clz(((char *)v17 - (char *)v16) >> 5);
  if (v17 == v16) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = v18;
  }
  std::__introsort<std::_ClassicAlgPolicy,fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element> *,false>(v16, v17, (uint64_t)&__p, v19, 1);
  uint64_t v20 = *(void *)(a1 + 192);
  uint64_t v21 = *(void *)(a1 + 200);
  std::vector<unsigned int> __p = 0;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  while (v20 != v21)
  {
    int v22 = *(_DWORD *)v20;
    float v23 = (char *)__p;
    uint64_t v39 = (char *)__p;
    while (*(_DWORD *)v20 == v22)
    {
      uint64_t v24 = (_OWORD *)(v20 + 8);
      if (v23 >= v40)
      {
        unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((v23 - (unsigned char *)__p) >> 3);
        unint64_t v26 = v25 + 1;
        if (v25 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * ((v40 - (unsigned char *)__p) >> 3) > v26) {
          unint64_t v26 = 0x5555555555555556 * ((v40 - (unsigned char *)__p) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v40 - (unsigned char *)__p) >> 3) >= 0x555555555555555) {
          unint64_t v27 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v27 = v26;
        }
        long long v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v40, v27);
        float32x2_t v30 = &v28[24 * v25];
        *(_OWORD *)float32x2_t v30 = *v24;
        *((void *)v30 + 2) = *(void *)(v20 + 24);
        float v32 = (char *)__p;
        int32x2_t v31 = v39;
        int v33 = v30;
        if (v39 != __p)
        {
          do
          {
            *(_OWORD *)(v33 - 24) = *(_OWORD *)(v31 - 24);
            *((void *)v33 - 1) = *((void *)v31 - 1);
            v33 -= 24;
            v31 -= 24;
          }
          while (v31 != v32);
          int32x2_t v31 = (char *)__p;
        }
        float v23 = v30 + 24;
        std::vector<unsigned int> __p = v33;
        uint64_t v39 = v30 + 24;
        uint64_t v40 = &v28[24 * v29];
        if (v31) {
          operator delete(v31);
        }
      }
      else
      {
        *(_OWORD *)float v23 = *v24;
        *((void *)v23 + 2) = *(void *)(v20 + 24);
        v23 += 24;
      }
      uint64_t v39 = v23;
      v20 += 32;
      if (v20 == v21)
      {
        uint64_t v20 = v21;
        break;
      }
    }
    fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::ProcessTransition(a1, a2, v22, (float **)&__p);
  }
  *(void *)(a1 + 200) = *(void *)(a1 + 192);
  if (__p)
  {
    uint64_t v39 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1B211EB7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::ProcessTransition(uint64_t a1, int a2, int a3, float **a4)
{
  fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::MakeSubsetUnique(a1, a4);
  uint64_t v32 = 0;
  fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::NormalizeSubset(a1, a4, (uint64_t)&v31, &v32);
  uint64_t v29 = 0;
  int v8 = fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::InitialToStateId(a1, (uint64_t *)a4, &v30, &v29);
  uint64_t v9 = fst::LatticeStringRepository<int>::Concatenate((uint64_t **)(a1 + 240), v32, v29);
  uint64_t v10 = v9;
  uint64_t v32 = v9;
  float32x2_t v11 = vadd_f32(v31, v30);
  float32x2_t v31 = v11;
  int v12 = (char **)(*(void *)(a1 + 24) + 24 * a2);
  unint64_t v14 = (void **)(v12 + 1);
  unint64_t v13 = (unint64_t)v12[1];
  uint64_t v16 = v12 + 2;
  unint64_t v15 = (unint64_t)v12[2];
  if (v13 >= v15)
  {
    uint64_t v18 = (uint64_t)(v13 - (void)*v12) >> 5;
    unint64_t v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 59) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v20 = v15 - (void)*v12;
    if (v20 >> 4 > v19) {
      unint64_t v19 = v20 >> 4;
    }
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v21 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v21 = v19;
    }
    int v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)v16, v21);
    float v23 = &v22[32 * v18];
    unint64_t v25 = &v22[32 * v24];
    *(_DWORD *)float v23 = a3;
    *((void *)v23 + 1) = v10;
    *((_DWORD *)v23 + 4) = v8;
    *(float32x2_t *)(v23 + 20) = v11;
    uint64_t v17 = v23 + 32;
    unint64_t v26 = (char *)*v14;
    unint64_t v27 = *v12;
    if (*v14 != *v12)
    {
      do
      {
        long long v28 = *((_OWORD *)v26 - 2);
        *((_DWORD *)v23 - 4) = *((_DWORD *)v26 - 4);
        *((_OWORD *)v23 - 2) = v28;
        *(void *)(v23 - 12) = *(void *)(v26 - 12);
        v23 -= 32;
        v26 -= 32;
      }
      while (v26 != v27);
      unint64_t v26 = *v12;
    }
    *int v12 = v23;
    *unint64_t v14 = v17;
    *uint64_t v16 = v25;
    if (v26) {
      operator delete(v26);
    }
  }
  else
  {
    *(_DWORD *)unint64_t v13 = a3;
    *(void *)(v13 + 8) = v9;
    *(_DWORD *)(v13 + 16) = v8;
    uint64_t v17 = (void *)(v13 + 32);
    *(float32x2_t *)(v13 + 20) = v11;
  }
  *unint64_t v14 = v17;
  ++*(_DWORD *)(a1 + 48);
}

uint64_t std::vector<std::pair<int,fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element>>::__push_back_slow_path<std::pair<int,fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  unint64_t v19 = a1 + 2;
  uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v7, v9);
  float32x2_t v11 = &v10[32 * v4];
  std::vector<unsigned int> __p = v10;
  uint64_t v16 = v11;
  uint64_t v18 = &v10[32 * v12];
  *(_DWORD *)float32x2_t v11 = *(_DWORD *)a2;
  *(_OWORD *)(v11 + 8) = *(_OWORD *)(a2 + 8);
  *((void *)v11 + 3) = *(void *)(a2 + 24);
  uint64_t v17 = v11 + 32;
  std::vector<std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>::__swap_out_circular_buffer(a1, &__p);
  uint64_t v13 = a1[1];
  if (v17 != v16) {
    v17 += (v16 - v17 + 31) & 0xFFFFFFFFFFFFFFE0;
  }
  if (__p) {
    operator delete(__p);
  }
  return v13;
}

void sub_1B211EEA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__introsort<std::_ClassicAlgPolicy,fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element> *,false>(int *a1, int *a2, uint64_t a3, uint64_t a4, char a5)
{
BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 5;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      int v6 = *(_DWORD *)(a2 - 32);
      int v7 = *(_DWORD *)a1;
      if (v6 < *(_DWORD *)a1 || v6 <= v7 && *(_DWORD *)(a2 - 24) < *(_DWORD *)(a1 + 8))
      {
        *(_DWORD *)a1 = v6;
        *(_DWORD *)(a2 - 32) = v7;
        long long v8 = *(_OWORD *)(a1 + 8);
        uint64_t v9 = *(void *)(a1 + 24);
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 - 24);
        *(void *)(a1 + 24) = *(void *)(a2 - 8);
        *(_OWORD *)(a2 - 24) = v8;
        *(void *)(a2 - 8) = v9;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>((int *)a1, (int *)(a1 + 32), (int *)(a2 - 32));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>(a1, a1 + 32, a1 + 64, a2 - 32);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>(a1, a1 + 32, a1 + 64, a1 + 96, (int *)(a2 - 32));
      return 1;
    default:
      uint64_t v10 = a1 + 64;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>((int *)a1, (int *)(a1 + 32), (int *)(a1 + 64));
      uint64_t v11 = a1 + 96;
      if (a1 + 96 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  do
  {
    int v14 = *(_DWORD *)v11;
    if (*(_DWORD *)v11 >= *(_DWORD *)v10)
    {
      if (v14 > *(_DWORD *)v10) {
        goto LABEL_20;
      }
      int v15 = *(_DWORD *)(v11 + 8);
      if (v15 >= *(_DWORD *)(v10 + 8)) {
        goto LABEL_20;
      }
    }
    else
    {
      int v15 = *(_DWORD *)(v11 + 8);
    }
    uint64_t v22 = *(void *)(v11 + 12);
    int v23 = *(_DWORD *)(v11 + 20);
    uint64_t v16 = *(void *)(v11 + 24);
    *(_DWORD *)uint64_t v11 = *(_DWORD *)v10;
    uint64_t v17 = (_DWORD *)(v10 + 8);
    *(_OWORD *)(v11 + 8) = *(_OWORD *)(v10 + 8);
    *(void *)(v11 + 24) = *(void *)(v10 + 24);
    if (v10 == a1)
    {
LABEL_15:
      uint64_t v10 = a1;
    }
    else
    {
      uint64_t v18 = v12;
      while (1)
      {
        uint64_t v19 = a1 + v18;
        int v20 = *(_DWORD *)(a1 + v18 + 32);
        if (v14 >= v20)
        {
          if (v14 > v20) {
            goto LABEL_16;
          }
          uint64_t v21 = a1 + v18;
          if (v15 >= *(_DWORD *)(a1 + v18 + 40)) {
            break;
          }
        }
        uint64_t v17 = (_DWORD *)(v10 - 24);
        v10 -= 32;
        *(_DWORD *)(v19 + 64) = v20;
        *(_OWORD *)(v19 + 72) = *(_OWORD *)(v19 + 40);
        *(void *)(v19 + 88) = *(void *)(v19 + 56);
        v18 -= 32;
        if (v18 == -64)
        {
          uint64_t v17 = (_DWORD *)(a1 + 8);
          goto LABEL_15;
        }
      }
      uint64_t v17 = (_DWORD *)(v21 + 72);
      uint64_t v10 = v21 + 64;
    }
LABEL_16:
    *(_DWORD *)uint64_t v10 = v14;
    *uint64_t v17 = v15;
    *(void *)(v10 + 12) = v22;
    *(_DWORD *)(v10 + 20) = v23;
    *(void *)(v10 + 24) = v16;
    if (++v13 == 8) {
      return v11 + 32 == a2;
    }
LABEL_20:
    uint64_t v10 = v11;
    v12 += 32;
    v11 += 32;
  }
  while (v11 != a2);
  return 1;
}

void fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::MakeSubsetUnique(int a1, float **a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 == v4)
  {
    unint64_t v6 = 0;
  }
  else
  {
    unint64_t v6 = 0;
    int v7 = *a2;
    while (1)
    {
      if (v3 != v7)
      {
        *(_OWORD *)int v7 = *(_OWORD *)v3;
        *((void *)v7 + 2) = *((void *)v3 + 2);
      }
      if (v3 + 6 == v4) {
        break;
      }
      long long v8 = v3 + 10;
      while (*((_DWORD *)v8 - 4) == *(_DWORD *)v7)
      {
        if (fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Compare(a1, v8, *((uint64_t **)v8 - 1), v7 + 4, *((uint64_t **)v7 + 1)) == 1)
        {
          *((void *)v7 + 1) = *((void *)v8 - 1);
          *((void *)v7 + 2) = *(void *)v8;
        }
        uint64_t v9 = v8 + 2;
        v8 += 6;
        if (v9 == v4) {
          goto LABEL_14;
        }
      }
      v7 += 6;
      ++v6;
      uint64_t v3 = v8 - 4;
      if (v8 - 4 == v4) {
        goto LABEL_16;
      }
    }
LABEL_14:
    ++v6;
  }
LABEL_16:
  std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>::resize((uint64_t)a2, v6);
}

void fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::NormalizeSubset(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  if (*a2 == v7)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v37);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"[empty subset]", 14);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v37);
    }
    *a4 = 0;
    *(int32x2_t *)a3 = vdup_n_s32(0x7F800000u);
  }
  else
  {
    memset(&v36, 0, sizeof(v36));
    uint64_t v9 = (uint64_t **)(a1 + 240);
    fst::LatticeStringRepository<int>::ConvertToVector(a1 + 240, *(uint64_t **)(v6 + 8), &v36);
    unint64_t v10 = (v7 - v6) / 24;
    float v12 = *(float *)(*a2 + 16);
    float v11 = *(float *)(*a2 + 20);
    float v35 = a4;
    if (v10 >= 2)
    {
      uint64_t v13 = 0;
      unint64_t v14 = v10 - 1;
      do
      {
        uint64_t v15 = *a2 + v13;
        float v16 = *(float *)(v15 + 40);
        float v17 = *(float *)(v15 + 44);
        if ((float)(v12 + v11) >= (float)(v16 + v17))
        {
          if ((float)(v12 + v11) > (float)(v16 + v17) || (v12 >= v16 ? (BOOL v18 = v12 <= v16) : (BOOL v18 = 1), !v18))
          {
            float v11 = *(float *)(v15 + 44);
            float v12 = *(float *)(v15 + 40);
          }
        }
        fst::LatticeStringRepository<int>::ReduceToCommonPrefix((int)v9, *(uint64_t **)(v15 + 32), &v36);
        v13 += 24;
        --v14;
      }
      while (v14);
    }
    uint64_t v19 = 0;
    unint64_t v20 = v36.__end_ - v36.__begin_;
    if (v10 <= 1) {
      uint64_t v21 = 1;
    }
    else {
      uint64_t v21 = v10;
    }
    uint64_t v22 = *a2;
    do
    {
      float v23 = *(float *)(v22 + v19 + 16) - v12;
      float v24 = *(float *)(v22 + v19 + 20) - v11;
      if (v23 == -INFINITY || v24 == -INFINITY)
      {
        if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v37);
          uint64_t v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"LatticeWeightTpl::Divide, NaN or invalid number produced. ", 58);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"[dividing by zero?]  Returning zero.", 36);
          kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v37);
          uint64_t v22 = *a2;
        }
        float v24 = INFINITY;
        float v23 = INFINITY;
      }
      else
      {
        BOOL v27 = v23 == INFINITY;
        if (v24 == INFINITY) {
          BOOL v27 = 1;
        }
        if (v27)
        {
          float v24 = INFINITY;
          float v23 = INFINITY;
        }
      }
      uint64_t v28 = v22 + v19;
      *(float *)(v28 + 16) = v23;
      *(float *)(v28 + 20) = v24;
      uint64_t v29 = fst::LatticeStringRepository<int>::RemovePrefix(v9, *(uint64_t **)(v28 + 8), v20);
      uint64_t v22 = *a2;
      *(void *)(*a2 + v19 + 8) = v29;
      v19 += 24;
      --v21;
    }
    while (v21);
    std::vector<unsigned int>::pointer begin = v36.__begin_;
    if (v36.__end_ == v36.__begin_)
    {
      uint64_t v32 = 0;
      int v33 = v35;
    }
    else
    {
      unint64_t v31 = 0;
      uint64_t v32 = 0;
      int v33 = v35;
      do
      {
        uint64_t v32 = fst::LatticeStringRepository<int>::Successor(v9, v32, begin[v31++]);
        std::vector<unsigned int>::pointer begin = v36.__begin_;
      }
      while (v31 < v36.__end_ - v36.__begin_);
    }
    *int v33 = v32;
    *(float *)a3 = v12;
    *(float *)(a3 + 4) = v11;
    if (begin)
    {
      v36.__end_ = begin;
      operator delete(begin);
    }
  }
}

void sub_1B211F96C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14)
{
}

uint64_t fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::InitialToStateId(uint64_t a1, uint64_t *a2, void *a3, void *a4)
{
  v15[0] = a2;
  long long v8 = std::__hash_table<std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,std::__unordered_map_hasher<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetKey,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetEqual,true>,std::__unordered_map_equal<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetEqual,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetKey,false>,std::allocator<std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>>::find<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*>((void *)(a1 + 128), v15);
  if (!v8)
  {
    memset(__p, 0, sizeof(__p));
    std::vector<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element>>::__init_with_size[abi:ne180100]<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element*,fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element*>((char *)__p, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
    fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::EpsilonClosure(a1, (uint64_t *)__p);
    fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::ConvertToMinimal(a1, (unsigned int **)__p);
    fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::NormalizeSubset(a1, __p, (uint64_t)&v13, (uint64_t *)&v12 + 1);
    fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::MinimalToStateId(a1, __p);
    uint64_t v10 = v13;
    *a3 = v13;
    *a4 = *((void *)&v12 + 1);
    LODWORD(v15[0]) = v10;
    int v17 = 2139095040;
    float v16 = INFINITY;
    if (*(float *)&v10 == INFINITY && *((float *)&v10 + 1) == v16 && kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Zero weight!", 12);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    }
    operator new();
  }
  uint64_t v9 = v8;
  *a3 = v8[5];
  *a4 = v8[4];
  LODWORD(v15[0]) = 0;
  LODWORD(v15[0]) = *((_DWORD *)v8 + 10);
  LODWORD(__p[0]) = 0;
  LODWORD(__p[0]) = *((_DWORD *)v8 + 11);
  if (*(float *)v15 == INFINITY && *(float *)__p == INFINITY && kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Zero weight!", 12);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
  }
  return *((unsigned int *)v9 + 6);
}

void sub_1B211FC68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::MinimalToStateId(uint64_t a1, void *a2)
{
  std::vector<unsigned int> __p = a2;
  unint64_t v2 = std::__hash_table<std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,std::__unordered_map_hasher<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetKey,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetEqual,true>,std::__unordered_map_equal<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetEqual,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetKey,false>,std::allocator<std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>>::find<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*>((void *)(a1 + 88), (uint64_t **)&__p);
  if (!v2) {
    operator new();
  }
  return *((unsigned int *)v2 + 6);
}

void sub_1B211FF78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::RebuildRepository(uint64_t *a1)
{
  std::vector<unsigned int> __p = 0;
  float v59 = 0;
  float v60 = 0;
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4];
  if (v3 == v2)
  {
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    do
    {
      uint64_t v6 = *(void *)(v2 + 24 * v5);
      if (*(void *)(v2 + 24 * v5 + 8) != v6)
      {
        unint64_t v7 = 0;
        do
        {
          long long v8 = (uint64_t *)(v6 + 32 * v7 + 8);
          if (v4 >= (uint64_t *)v60)
          {
            uint64_t v9 = ((char *)v4 - (unsigned char *)__p) >> 3;
            if ((unint64_t)(v9 + 1) >> 61) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v10 = (v60 - (unsigned char *)__p) >> 2;
            if (v10 <= v9 + 1) {
              unint64_t v10 = v9 + 1;
            }
            if ((unint64_t)(v60 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v11 = v10;
            }
            if (v11) {
              long long v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v60, v11);
            }
            else {
              long long v12 = 0;
            }
            uint64_t v13 = (uint64_t *)&v12[8 * v9];
            *uint64_t v13 = *v8;
            uint64_t v4 = v13 + 1;
            uint64_t v15 = (uint64_t *)__p;
            unint64_t v14 = v59;
            if (v59 != __p)
            {
              do
              {
                uint64_t v16 = *--v14;
                *--uint64_t v13 = v16;
              }
              while (v14 != v15);
              unint64_t v14 = (uint64_t *)__p;
            }
            std::vector<unsigned int> __p = v13;
            float v59 = v4;
            float v60 = &v12[8 * v11];
            if (v14) {
              operator delete(v14);
            }
          }
          else
          {
            *v4++ = *v8;
          }
          float v59 = v4;
          ++v7;
          uint64_t v2 = a1[3];
          int v17 = (uint64_t *)(v2 + 24 * v5);
          uint64_t v6 = *v17;
        }
        while (v7 < (v17[1] - *v17) >> 5);
        uint64_t v3 = a1[4];
      }
      ++v5;
    }
    while (v5 < 0xAAAAAAAAAAAAAAABLL * ((v3 - v2) >> 3));
  }
  uint64_t v18 = *a1;
  uint64_t v19 = a1[1];
  if (v19 != *a1)
  {
    unint64_t v20 = 0;
    do
    {
      uint64_t v21 = **(void **)(v18 + 8 * v20);
      if (*(void *)(*(void *)(v18 + 8 * v20) + 8) != v21)
      {
        unint64_t v22 = 0;
        do
        {
          float v23 = (uint64_t *)(v21 + 24 * v22 + 8);
          if (v4 >= (uint64_t *)v60)
          {
            uint64_t v24 = ((char *)v4 - (unsigned char *)__p) >> 3;
            if ((unint64_t)(v24 + 1) >> 61) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v25 = (v60 - (unsigned char *)__p) >> 2;
            if (v25 <= v24 + 1) {
              unint64_t v25 = v24 + 1;
            }
            if ((unint64_t)(v60 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v26 = v25;
            }
            if (v26) {
              BOOL v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v60, v26);
            }
            else {
              BOOL v27 = 0;
            }
            uint64_t v28 = (uint64_t *)&v27[8 * v24];
            *uint64_t v28 = *v23;
            uint64_t v4 = v28 + 1;
            float32x2_t v30 = (uint64_t *)__p;
            uint64_t v29 = v59;
            if (v59 != __p)
            {
              do
              {
                uint64_t v31 = *--v29;
                *--uint64_t v28 = v31;
              }
              while (v29 != v30);
              uint64_t v29 = (uint64_t *)__p;
            }
            std::vector<unsigned int> __p = v28;
            float v59 = v4;
            float v60 = &v27[8 * v26];
            if (v29) {
              operator delete(v29);
            }
          }
          else
          {
            *v4++ = *v23;
          }
          float v59 = v4;
          ++v22;
          uint64_t v18 = *a1;
          uint64_t v32 = *(uint64_t **)(*a1 + 8 * v20);
          uint64_t v21 = *v32;
        }
        while (v22 < 0xAAAAAAAAAAAAAAABLL * ((v32[1] - *v32) >> 3));
        uint64_t v19 = a1[1];
      }
      ++v20;
    }
    while (v20 < (v19 - v18) >> 3);
  }
  for (uint64_t i = (void *)a1[18]; i; uint64_t i = (void *)*i)
  {
    float v34 = (uint64_t *)i[2];
    uint64_t v57 = i[4];
    uint64_t v35 = *v34;
    if (v34[1] != *v34)
    {
      unint64_t v36 = 0;
      do
      {
        float32x2_t v37 = (uint64_t *)(v35 + 24 * v36 + 8);
        if (v4 >= (uint64_t *)v60)
        {
          uint64_t v38 = ((char *)v4 - (unsigned char *)__p) >> 3;
          if ((unint64_t)(v38 + 1) >> 61) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v39 = (v60 - (unsigned char *)__p) >> 2;
          if (v39 <= v38 + 1) {
            unint64_t v39 = v38 + 1;
          }
          if ((unint64_t)(v60 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v40 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v40 = v39;
          }
          if (v40) {
            uint64_t v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v60, v40);
          }
          else {
            uint64_t v41 = 0;
          }
          unint64_t v42 = (uint64_t *)&v41[8 * v38];
          *unint64_t v42 = *v37;
          uint64_t v4 = v42 + 1;
          int v44 = (uint64_t *)__p;
          float v43 = v59;
          if (v59 != __p)
          {
            do
            {
              uint64_t v45 = *--v43;
              *--unint64_t v42 = v45;
            }
            while (v43 != v44);
            float v43 = (uint64_t *)__p;
          }
          std::vector<unsigned int> __p = v42;
          float v59 = v4;
          float v60 = &v41[8 * v40];
          if (v43) {
            operator delete(v43);
          }
        }
        else
        {
          *v4++ = *v37;
        }
        float v59 = v4;
        ++v36;
        uint64_t v35 = *v34;
      }
      while (v36 < 0xAAAAAAAAAAAAAAABLL * ((v34[1] - *v34) >> 3));
    }
    if (v4 >= (uint64_t *)v60)
    {
      uint64_t v46 = ((char *)v4 - (unsigned char *)__p) >> 3;
      if ((unint64_t)(v46 + 1) >> 61) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v47 = (v60 - (unsigned char *)__p) >> 2;
      if (v47 <= v46 + 1) {
        unint64_t v47 = v46 + 1;
      }
      if ((unint64_t)(v60 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v48 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v48 = v47;
      }
      if (v48) {
        uint64_t v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v60, v48);
      }
      else {
        uint64_t v49 = 0;
      }
      uint64_t v50 = (uint64_t *)&v49[8 * v46];
      uint64_t *v50 = v57;
      uint64_t v4 = v50 + 1;
      uint64_t v52 = (uint64_t *)__p;
      uint64_t v51 = v59;
      if (v59 != __p)
      {
        do
        {
          uint64_t v53 = *--v51;
          *--uint64_t v50 = v53;
        }
        while (v51 != v52);
        uint64_t v51 = (uint64_t *)__p;
      }
      std::vector<unsigned int> __p = v50;
      float v59 = v4;
      float v60 = &v49[8 * v48];
      if (v51) {
        operator delete(v51);
      }
    }
    else
    {
      *v4++ = v57;
    }
    float v59 = v4;
  }
  unint64_t v54 = 126 - 2 * __clz(((char *)v4 - (unsigned char *)__p) >> 3);
  if (v4 == __p) {
    uint64_t v55 = 0;
  }
  else {
    uint64_t v55 = v54;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**,false>((uint64_t)__p, (unint64_t *)v4, (uint64_t)&v61, v55, 1);
  int v56 = std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<fst::LatticeStringRepository<int>::Entry const**>,std::__wrap_iter<fst::LatticeStringRepository<int>::Entry const**>,std::__equal_to &>((uint64_t *)__p, v59);
  if (v59 != v56) {
    float v59 = v56;
  }
  fst::LatticeStringRepository<int>::Rebuild((uint64_t)(a1 + 30), (uint64_t ***)&__p);
  if (__p)
  {
    float v59 = (uint64_t *)__p;
    operator delete(__p);
  }
}

void sub_1B21204DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::FreeMostMemory(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 56) = 0;
  }
  for (uint64_t i = *(void **)(a1 + 104); i; uint64_t i = (void *)*i)
  {
    uint64_t v4 = i[2];
    if (v4)
    {
      unint64_t v5 = *(void **)v4;
      if (*(void *)v4)
      {
        *(void *)(v4 + 8) = v5;
        operator delete(v5);
      }
      MEMORY[0x1B3EA8670](v4, 0x20C40960023A9);
    }
  }
  long long v13 = 0u;
  long long v14 = 0u;
  uint64_t v15 = 0x3A8000003F800000;
  std::__hash_table<std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>,std::__unordered_map_hasher<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetKey,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetEqual,true>,std::__unordered_map_equal<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetEqual,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetKey,false>,std::allocator<std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>>>::swap((uint64_t)&v13, a1 + 88);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v13);
  for (uint64_t j = *(void **)(a1 + 144); j; uint64_t j = (void *)*j)
  {
    uint64_t v7 = j[2];
    if (v7)
    {
      long long v8 = *(void **)v7;
      if (*(void *)v7)
      {
        *(void *)(v7 + 8) = v8;
        operator delete(v8);
      }
      MEMORY[0x1B3EA8670](v7, 0x20C40960023A9);
    }
  }
  long long v13 = 0u;
  long long v14 = 0u;
  uint64_t v15 = 0x3A8000003F800000;
  std::__hash_table<std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>,std::__unordered_map_hasher<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetKey,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetEqual,true>,std::__unordered_map_equal<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetEqual,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetKey,false>,std::allocator<std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>>>::swap((uint64_t)&v13, a1 + 128);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v13);
  uint64_t v9 = *(void **)a1;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  if (v9) {
    operator delete(v9);
  }
  unint64_t v10 = *(void **)(a1 + 216);
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 216) = 0;
  if (v10) {
    operator delete(v10);
  }
  unint64_t v11 = *(void **)(a1 + 168);
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 168) = 0;
  if (v11) {
    operator delete(v11);
  }
  long long v12 = *(void **)(a1 + 192);
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 192) = 0;
  if (v12) {
    operator delete(v12);
  }
}

uint64_t fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::~LatticeDeterminizer(uint64_t a1)
{
  fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::FreeMostMemory(a1);
  fst::LatticeStringRepository<int>::~LatticeStringRepository((void *)(a1 + 240));
  uint64_t v2 = *(void **)(a1 + 216);
  if (v2)
  {
    *(void *)(a1 + 224) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 192);
  if (v3)
  {
    *(void *)(a1 + 200) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 168);
  if (v4)
  {
    *(void *)(a1 + 176) = v4;
    operator delete(v4);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 128);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 88);
  uint64_t v7 = (void **)(a1 + 24);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v7);
  unint64_t v5 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v5;
    operator delete(v5);
  }
  return a1;
}

void *std::allocate_shared[abi:ne180100]<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::vector<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>> &,fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::WeightType &,void>@<X0>(uint64_t *a1@<X1>, int *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x88uLL);
  BOOL result = std::__shared_ptr_emplace<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__shared_ptr_emplace[abi:ne180100]<std::vector<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>> &,fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::WeightType &,std::allocator<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1B2120790(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__shared_ptr_emplace[abi:ne180100]<std::vector<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>> &,fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::WeightType &,std::allocator<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,0>(void *a1, uint64_t *a2, int *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5E420;
  fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::InterpolateDeterministicOnDemandFst((uint64_t)(a1 + 3), a2, *a3, 1);
  return a1;
}

void sub_1B21207F4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>,std::allocator<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>>,fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *,std::vector<int> const&,void>@<X0>(uint64_t (****a1)(void)@<X1>, unsigned int **a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x30uLL);
  BOOL result = std::__shared_ptr_emplace<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>>::__shared_ptr_emplace[abi:ne180100]<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *,std::vector<int> const&,std::allocator<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1B2120858(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>>::__shared_ptr_emplace[abi:ne180100]<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *,std::vector<int> const&,std::allocator<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>>,0>(void *a1, uint64_t (****a2)(void), unsigned int **a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5E490;
  fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>::LeftContextDeterministicOnDemandFst((uint64_t)(a1 + 3), *a2, a3);
  return a1;
}

void sub_1B21208B8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void NgramProbArrayTrie::~NgramProbArrayTrie(NgramProbArrayTrie *this)
{
  *(void *)this = &unk_1F0A340D0;
  Trie<unsigned int,ZeroArray<double>>::~Trie((char *)this + 24);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F0A340D0;
  Trie<unsigned int,ZeroArray<double>>::~Trie((char *)this + 24);
  JUMPOUT(0x1B3EA8670);
}

void BayesMix::BayesMix(BayesMix *this, Vocab *a2, LM *a3, LM *a4, double a5, double a6)
{
  LM::LM(this, a2);
  *(void *)uint64_t v6 = &unk_1F0A34CD8;
  *(_DWORD *)(v6 + 152) = 2;
  *(void *)(v6 + 160) = 0x200000000;
  *(void *)(v6 + 168) = 0;
  *(_DWORD *)(v6 + 176) = 0;
  Array<double>::alloc();
}

void sub_1B2120B1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  *((void *)v10 + 30) = &unk_1F0A340D0;
  Trie<unsigned int,ZeroArray<double>>::~Trie((char *)v10 + 264);
  uint64_t v12 = *((void *)v10 + 27);
  if (v12) {
    MEMORY[0x1B3EA8630](v12, 0x20C8093837F09);
  }
  uint64_t v13 = *((void *)v10 + 21);
  if (v13) {
    MEMORY[0x1B3EA8630](v13, 0x1000C8000313F17);
  }
  LM::~LM(v10);
  _Unwind_Resume(a1);
}

void BayesMix::~BayesMix(BayesMix *this)
{
  *(void *)this = &unk_1F0A34CD8;
  if (*((unsigned char *)this + 232) && *((_DWORD *)this + 38))
  {
    unint64_t v2 = 0;
    do
    {
      uint64_t v3 = *(void *)Array<LM *>::operator[]((int *)this + 52, v2);
      if (v3) {
        (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
      }
      ++v2;
    }
    while (v2 < *((unsigned int *)this + 38));
  }
  *((void *)this + 30) = &unk_1F0A340D0;
  Trie<unsigned int,ZeroArray<double>>::~Trie((char *)this + 264);
  uint64_t v4 = *((void *)this + 27);
  if (v4) {
    MEMORY[0x1B3EA8630](v4, 0x20C8093837F09);
  }
  uint64_t v5 = *((void *)this + 21);
  if (v5) {
    MEMORY[0x1B3EA8630](v5, 0x1000C8000313F17);
  }
  LM::~LM(this);
}

{
  uint64_t vars8;

  BayesMix::~BayesMix(this);
  JUMPOUT(0x1B3EA8670);
}

uint64_t BayesMix::readMixLMs(BayesMix *this, File *a2)
{
  uint64_t v2 = MEMORY[0x1F4188790](this, a2);
  int v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = v2;
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(v2 + 232))
  {
    if (*(_DWORD *)(v2 + 152))
    {
      unint64_t v8 = 0;
      do
      {
        uint64_t v9 = *(void *)Array<LM *>::operator[]((int *)(v7 + 208), v8);
        if (v9) {
          (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
        }
        ++v8;
      }
      while (v8 < *(unsigned int *)(v7 + 152));
    }
    *(unsigned char *)(v7 + 232) = 0;
  }
  uint64_t v10 = *(void *)(v7 + 216);
  if (v10) {
    MEMORY[0x1B3EA8630](v10, 0x20C8093837F09);
  }
  *(void *)(v7 + 220) = 0;
  *(void *)(v7 + 212) = 0;
  uint64_t v11 = *(void *)(v7 + 168);
  if (v11) {
    MEMORY[0x1B3EA8630](v11, 0x1000C8000313F17);
  }
  *(void *)(v7 + 172) = 0;
  *(void *)(v7 + 164) = 0;
  NgramProbArrayTrie::clear((NgramProbArrayTrie *)(v7 + 240));
  *(unsigned char *)(v7 + 233) = 0;
  uint64_t v12 = File::getline(v6);
  if (v12)
  {
    while (1)
    {
      long long v86 = 0u;
      long long v87 = 0u;
      long long v84 = 0u;
      long long v85 = 0u;
      long long v82 = 0u;
      long long v83 = 0u;
      long long v80 = 0u;
      long long v81 = 0u;
      long long v78 = 0u;
      long long v79 = 0u;
      long long v76 = 0u;
      long long v77 = 0u;
      long long v74 = 0u;
      long long v75 = 0u;
      long long v72 = 0u;
      long long v73 = 0u;
      long long v70 = 0u;
      long long v71 = 0u;
      long long v68 = 0u;
      long long v69 = 0u;
      long long v66 = 0u;
      long long v67 = 0u;
      long long v64 = 0u;
      long long v65 = 0u;
      long long v62 = 0u;
      long long v63 = 0u;
      long long v60 = 0u;
      long long v61 = 0u;
      long long v58 = 0u;
      long long v59 = 0u;
      *(_OWORD *)int v56 = 0u;
      long long v57 = 0u;
      unsigned int v14 = Vocab::parseWords((Vocab *)v12, v56, (const char **)0xC351, v13);
      if (v14 >= 0xC351)
      {
        int v17 = File::position((const char **)v6, MEMORY[0x1E4FBA240]);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"too many words in line\n", 23);
        return 0;
      }
      if (v14) {
        break;
      }
      uint64_t v12 = File::getline(v6);
      if (!v12)
      {
        *(_DWORD *)(v7 + 152) = 0;
        *(_DWORD *)(v7 + 260) = 1;
        uint64_t result = 1;
        *(unsigned char *)(v7 + 232) = 1;
        return result;
      }
    }
    uint64_t v15 = *(const char **)v56;
    unsigned int v31 = 3;
    __s1 = "ARPA";
    uint64_t v30 = 0x3FF0000000000000;
    uint64_t v27 = 0;
    __s = 0;
    int v32 = -2;
    int v33 = "order";
    float v34 = &v31;
    uint64_t v35 = "lm ngram order";
    int v36 = -5;
    float32x2_t v37 = "weight";
    uint64_t v38 = &v30;
    unint64_t v39 = "lm prior weight";
    int v40 = -3;
    uint64_t v41 = "type";
    p_s1 = &__s1;
    float v43 = "lm type";
    int v44 = -3;
    uint64_t v45 = "classes";
    p_s = &__s;
    unint64_t v47 = "class definitions";
    int v48 = 1;
    uint64_t v49 = "simple-classes";
    uint64_t v50 = (char *)&v27 + 4;
    uint64_t v51 = "use unique class model";
    int v52 = 1;
    uint64_t v53 = "cache-served-ngrams";
    unint64_t v54 = &v27;
    uint64_t v55 = "enable client side caching";
    if (Opt_Parse(v14, (const char **)v56, (unint64_t)&v32, 6, 4u) == 1)
    {
      uint64_t v16 = __s1;
      if (!strcmp(__s1, "ARPA"))
      {
        if (__s) {
          operator new();
        }
        operator new();
      }
      if (v4)
      {
        if (!strcmp(v16, "MAXENT")) {
          goto LABEL_19;
        }
      }
      else
      {
        if (!strcmp(v16, "COUNTLM"))
        {
          File::File((File *)v26, v15, "r", 1);
          operator new();
        }
        if (!strcmp(v16, "MAXENT"))
        {
LABEL_19:
          File::File((File *)v26, v15, "r", 1);
          operator new();
        }
        if (!strcmp(v16, "LMCLIENT")) {
          operator new();
        }
      }
      float v23 = File::position((const char **)v6, MEMORY[0x1E4FBA240]);
      size_t v24 = strlen(__s1);
      unint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)__s1, v24);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" is not a valid LM type\n", 24);
    }
    else
    {
      uint64_t v19 = File::position((const char **)v6, MEMORY[0x1E4FBA240]);
      unint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"allowed options for mixture LM ", 31);
      size_t v21 = strlen(v15);
      unint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v15, v21);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" are\n", 5);
      Opt_PrintUsage(0, (uint64_t)&v32, 6);
    }
    return 0;
  }
  else
  {
    *(_DWORD *)(v7 + 152) = 0;
    uint64_t result = 1;
    *(_DWORD *)(v7 + 260) = 1;
    *(unsigned char *)(v7 + 232) = 1;
  }
  return result;
}

void sub_1B212184C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::locale a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,std::locale a42)
{
}

int *BayesMix::findPriors(BayesMix *this, Vocab *a2)
{
  if (!*((unsigned char *)this + 233)) {
    return (int *)((char *)this + 160);
  }
  unsigned int v4 = Vocab::length((uint64_t)a2, (const unsigned int *)a2);
  unsigned int v5 = *((_DWORD *)this + 48);
  if (v4 >= v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = v4;
  }
  int v7 = *((_DWORD *)a2 + v6);
  *((_DWORD *)a2 + v6) = -1;
  int v12 = 0;
  PrefixTrie = Trie<unsigned int,ZeroArray<double>>::findPrefixTrie((_DWORD **)this + 33, (unsigned int *)a2, &v12);
  if (!*((_DWORD *)this + 38))
  {
LABEL_9:
    *((_DWORD *)a2 + v6) = v7;
    return (int *)((char *)this + 160);
  }
  uint64_t v9 = 0;
  uint64_t v10 = (int *)(PrefixTrie + 1);
  while (*(double *)Array<double>::operator[](v10, v9) == 0.0)
  {
    if (++v9 >= (unint64_t)*((unsigned int *)this + 38)) {
      goto LABEL_9;
    }
  }
  *((_DWORD *)a2 + v6) = v7;
  return v10;
}

void sub_1B2121A20(_Unwind_Exception *a1)
{
  *(_DWORD *)(v1 + 4 * v2) = v3;
  _Unwind_Resume(a1);
}

float BayesMix::wordProb(uint64_t a1, uint64_t a2, Vocab *a3)
{
  if (*(_DWORD *)(a1 + 152)) {
    Array<double>::alloc();
  }
  Priors = BayesMix::findPriors((BayesMix *)a1, a3);
  if (!*(_DWORD *)(a1 + 152))
  {
LABEL_19:
    LODWORD(v8) = 0;
    double v9 = 0.0;
    goto LABEL_20;
  }
  int v7 = Priors;
  unint64_t v8 = 0;
  double v9 = 0.0;
  char v10 = 1;
  do
  {
    uint64_t v11 = (void *)Array<LM *>::operator[]((int *)(a1 + 208), v8);
    float v12 = (*(float (**)(void, uint64_t, Vocab *))(*(void *)*v11 + 48))(*v11, a2, a3);
    double v13 = 0.0;
    if (v12 != -INFINITY) {
      double v13 = exp(v12 * 2.30258509);
    }
    *(double *)(8 * (int)v8) = v13;
    unsigned int v14 = (double *)Array<double>::operator[](v7, v8);
    double v15 = *v14;
    *(double *)(8 * (int)v8) = *v14;
    double v16 = *(double *)(a1 + 200);
    if (v16 > 0.0)
    {
      int v17 = (void *)Array<LM *>::operator[]((int *)(a1 + 208), v8);
      double v18 = v16
          * (*(float (**)(void, Vocab *, void))(*(void *)*v17 + 104))(*v17, a3, *(unsigned int *)(a1 + 192));
      double v19 = 0.0;
      if (v18 != -INFINITY) {
        double v19 = exp(v18 * 2.30258509);
      }
      double v15 = v19 * *(double *)(8 * (int)v8);
      *(double *)(8 * (int)v8) = v15;
    }
    if (v15 != 0.0) {
      char v10 = 0;
    }
    double v9 = v9 + v15;
    ++v8;
    unint64_t v20 = *(unsigned int *)(a1 + 152);
  }
  while (v8 < v20);
  if (v10)
  {
    if (v20)
    {
      unint64_t v8 = 0;
      double v9 = 0.0;
      do
      {
        size_t v21 = (double *)Array<double>::operator[](v7, v8);
        double v22 = *v21;
        *(double *)(8 * (int)v8) = *v21;
        double v9 = v9 + v22;
        ++v8;
      }
      while (v8 < *(unsigned int *)(a1 + 152));
      goto LABEL_20;
    }
    goto LABEL_19;
  }
LABEL_20:
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 264))(a1)
    && !*(unsigned char *)(a1 + 8)
    && (Debug::debugAll > 1 || *(_DWORD *)(a1 + 12) >= 2u)
    && *(_DWORD *)(a1 + 192))
  {
    float v23 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"[post=", 6);
    if (v8)
    {
      (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
      std::ostream::operator<<();
    }
    if (*(_DWORD *)(a1 + 152) >= 2u)
    {
      unsigned int v24 = 1;
      do
      {
        unint64_t v25 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)",", 1);
        std::ostream::operator<<();
        ++v24;
      }
      while (v24 < *(_DWORD *)(a1 + 152));
    }
    unint64_t v26 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"]", 1);
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 264))(a1)
    && !*(unsigned char *)(a1 + 8)
    && (Debug::debugAll > 2 || *(_DWORD *)(a1 + 12) >= 3u))
  {
    uint64_t v27 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"[probs=", 7);
    if (v8)
    {
      (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
      std::ostream::operator<<();
    }
    if (*(_DWORD *)(a1 + 152) >= 2u)
    {
      unsigned int v28 = 1;
      do
      {
        uint64_t v29 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)",", 1);
        std::ostream::operator<<();
        ++v28;
      }
      while (v28 < *(_DWORD *)(a1 + 152));
    }
    uint64_t v30 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"]", 1);
  }
  int v31 = *(_DWORD *)(a1 + 152);
  if (v31)
  {
    int v32 = 0;
    int v33 = 0;
    double v34 = 0.0;
    do
    {
      double v34 = v34 + *(double *)(8 * v32++) * *(double *)(8 * v33++);
      --v31;
    }
    while (v31);
    MEMORY[0x1B3EA8630](0, 0x1000C8000313F17);
  }
  else
  {
    double v34 = 0.0;
  }
  return log10(v34 / v9);
}

void sub_1B2122024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13) {
    MEMORY[0x1B3EA8630](a13, 0x1000C8000313F17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BayesMix::contextID(BayesMix *this, unsigned int a2, const unsigned int *a3, unsigned int *a4)
{
  if (*((_DWORD *)this + 38))
  {
    unint64_t v7 = 0;
    unsigned int v8 = 0;
    uint64_t v9 = 0;
    char v10 = (int *)((char *)this + 208);
    do
    {
      unsigned int v14 = 0;
      uint64_t v11 = (void *)Array<LM *>::operator[](v10, v7);
      uint64_t v12 = (*(uint64_t (**)(void, const unsigned int *, unsigned int *))(*(void *)*v11 + 200))(*v11, a3, &v14);
      if (v14 > v8)
      {
        uint64_t v9 = v12;
        unsigned int v8 = v14;
      }
      ++v7;
    }
    while (v7 < *((unsigned int *)this + 38));
  }
  else
  {
    uint64_t v9 = 0;
    unsigned int v8 = 0;
  }
  *a4 = v8;
  return v9;
}

BOOL BayesMix::isNonWord(BayesMix *this, uint64_t a2)
{
  if (!*((_DWORD *)this + 38)) {
    return 0;
  }
  unint64_t v4 = 0;
  unsigned int v5 = (int *)((char *)this + 208);
  do
  {
    uint64_t v6 = (void *)Array<LM *>::operator[](v5, v4);
    int v7 = (*(uint64_t (**)(void, uint64_t))(*(void *)*v6 + 232))(*v6, a2);
    BOOL result = v7 != 0;
    if (v7) {
      break;
    }
    ++v4;
  }
  while (v4 < *((unsigned int *)this + 38));
  return result;
}

uint64_t BayesMix::setState(uint64_t this, const char *a2)
{
  if (*(_DWORD *)(this + 152))
  {
    uint64_t v3 = this;
    unint64_t v4 = 0;
    unsigned int v5 = (int *)(this + 208);
    do
    {
      uint64_t v6 = (void *)Array<LM *>::operator[](v5, v4);
      this = (*(uint64_t (**)(void, const char *))(*(void *)*v6 + 152))(*v6, a2);
      ++v4;
    }
    while (v4 < *(unsigned int *)(v3 + 152));
  }
  return this;
}

BOOL BayesMix::addUnkWords(BayesMix *this)
{
  if (!*((_DWORD *)this + 38)) {
    return 0;
  }
  unint64_t v2 = 0;
  uint64_t v3 = (int *)((char *)this + 208);
  do
  {
    unint64_t v4 = (void *)Array<LM *>::operator[](v3, v2);
    int v5 = (*(uint64_t (**)(void))(*(void *)*v4 + 224))(*v4);
    BOOL result = v5 != 0;
    if (v5) {
      break;
    }
    ++v2;
  }
  while (v2 < *((unsigned int *)this + 38));
  return result;
}

uint64_t BayesMix::running(BayesMix *this, uint64_t a2)
{
  uint64_t v2 = *((unsigned __int8 *)this + 147);
  *((unsigned char *)this + 147) = a2;
  if (*((_DWORD *)this + 38))
  {
    unint64_t v5 = 0;
    uint64_t v6 = (int *)((char *)this + 208);
    do
    {
      int v7 = (void *)Array<LM *>::operator[](v6, v5);
      (*(void (**)(void, uint64_t))(*(void *)*v7 + 272))(*v7, a2);
      ++v5;
    }
    while (v5 < *((unsigned int *)this + 38));
  }
  return v2;
}

_DWORD *BayesMix::debugme(_DWORD *this, uint64_t a2)
{
  uint64_t v3 = this;
  if (this[38])
  {
    unint64_t v4 = 0;
    do
    {
      unint64_t v5 = (void *)Array<LM *>::operator[](v3 + 52, v4);
      this = (_DWORD *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 16))(*v5, a2);
      ++v4;
    }
    while (v4 < v3[38]);
  }
  v3[3] = a2;
  return this;
}

uint64_t BayesMix::dout(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 152))
  {
    unint64_t v4 = 0;
    do
    {
      unint64_t v5 = (void *)Array<LM *>::operator[]((int *)(a1 + 208), v4);
      (*(void (**)(void, uint64_t))(*(void *)*v5 + 32))(*v5, a2);
      ++v4;
    }
    while (v4 < *(unsigned int *)(a1 + 152));
  }
  *(void *)(a1 + 16) = a2;
  return a2;
}

uint64_t BayesMix::prefetchingNgrams(BayesMix *this)
{
  if (!*((_DWORD *)this + 38)) {
    return 0;
  }
  unint64_t v2 = 0;
  LODWORD(v3) = 0;
  unint64_t v4 = (int *)((char *)this + 208);
  do
  {
    unint64_t v5 = (void *)Array<LM *>::operator[](v4, v2);
    unsigned int v6 = (*(uint64_t (**)(void))(*(void *)*v5 + 296))(*v5);
    if (v6 <= v3) {
      uint64_t v3 = v3;
    }
    else {
      uint64_t v3 = v6;
    }
    ++v2;
  }
  while (v2 < *((unsigned int *)this + 38));
  return v3;
}

uint64_t BayesMix::prefetchNgrams(uint64_t result, uint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(result + 152);
  if (!v2) {
    return 1;
  }
  uint64_t v4 = result;
  unint64_t v5 = 0;
  unsigned int v6 = (int *)(result + 208);
  LOBYTE(result) = 1;
  do
  {
    if ((_BYTE)result)
    {
      int v7 = (void *)Array<LM *>::operator[](v6, v5);
      BOOL result = (*(unsigned int (**)(void, uint64_t))(*(void *)*v7 + 304))(*v7, a2) != 0;
      unint64_t v2 = *(unsigned int *)(v4 + 152);
    }
    else
    {
      BOOL result = 0;
    }
    ++v5;
  }
  while (v5 < v2);
  return result;
}

{
  unint64_t v2;
  uint64_t v4;
  unint64_t v5;
  int *v6;
  void *v7;

  unint64_t v2 = *(unsigned int *)(result + 152);
  if (!v2) {
    return 1;
  }
  uint64_t v4 = result;
  unint64_t v5 = 0;
  unsigned int v6 = (int *)(result + 208);
  LOBYTE(result) = 1;
  do
  {
    if ((_BYTE)result)
    {
      int v7 = (void *)Array<LM *>::operator[](v6, v5);
      BOOL result = (*(unsigned int (**)(void, uint64_t))(*(void *)*v7 + 312))(*v7, a2) != 0;
      unint64_t v2 = *(unsigned int *)(v4 + 152);
    }
    else
    {
      BOOL result = 0;
    }
    ++v5;
  }
  while (v5 < v2);
  return result;
}

{
  unint64_t v2;
  uint64_t v4;
  unint64_t v5;
  int *v6;
  void *v7;

  unint64_t v2 = *(unsigned int *)(result + 152);
  if (!v2) {
    return 1;
  }
  uint64_t v4 = result;
  unint64_t v5 = 0;
  unsigned int v6 = (int *)(result + 208);
  LOBYTE(result) = 1;
  do
  {
    if ((_BYTE)result)
    {
      int v7 = (void *)Array<LM *>::operator[](v6, v5);
      BOOL result = (*(unsigned int (**)(void, uint64_t))(*(void *)*v7 + 320))(*v7, a2) != 0;
      unint64_t v2 = *(unsigned int *)(v4 + 152);
    }
    else
    {
      BOOL result = 0;
    }
    ++v5;
  }
  while (v5 < v2);
  return result;
}

uint64_t BayesMix::read(BayesMix *this, File *a2)
{
  return BayesMix::readMixLMs(this, a2);
}

void SubVocab::SubVocab(SubVocab *this, Vocab *a2, int a3)
{
  Vocab::Vocab(this, 0, -2);
  *unsigned int v6 = &unk_1F0A34F98;
  v6[12] = a2;
  Vocab::setOutputVocab(a2, v7);
  if (a3)
  {
    unsigned int v8 = (unsigned int *)(*(uint64_t (**)(Vocab *))(*(void *)a2 + 88))(a2);
    *((_DWORD *)this + 16) = (*(uint64_t (**)(SubVocab *, void))(*(void *)this + 360))(this, *v8);
    uint64_t v9 = (unsigned int *)(*(uint64_t (**)(Vocab *))(*(void *)a2 + 104))(a2);
    *((_DWORD *)this + 17) = (*(uint64_t (**)(SubVocab *, void))(*(void *)this + 360))(this, *v9);
    char v10 = (unsigned int *)(*(uint64_t (**)(Vocab *))(*(void *)a2 + 120))(a2);
    *((_DWORD *)this + 18) = (*(uint64_t (**)(SubVocab *, void))(*(void *)this + 360))(this, *v10);
    uint64_t v11 = (unsigned int *)(*(uint64_t (**)(Vocab *))(*(void *)a2 + 136))(a2);
    *((_DWORD *)this + 19) = (*(uint64_t (**)(SubVocab *, void))(*(void *)this + 360))(this, *v11);
    *((unsigned char *)this + 80) = *(unsigned char *)(*(uint64_t (**)(Vocab *))(*(void *)a2 + 152))(a2);
  }
  else
  {
    (*(void (**)(SubVocab *, void))(*(void *)this + 64))(this, *((unsigned int *)this + 16));
    (*(void (**)(SubVocab *, void))(*(void *)this + 64))(this, *((unsigned int *)this + 17));
    (*(void (**)(SubVocab *, void))(*(void *)this + 64))(this, *((unsigned int *)this + 18));
    (*(void (**)(SubVocab *, void))(*(void *)this + 64))(this, *((unsigned int *)this + 19));
  }
}

void sub_1B2122AA4(_Unwind_Exception *a1)
{
  Vocab::~Vocab(v1);
  _Unwind_Resume(a1);
}

uint64_t SubVocab::addWord(SubVocab *this, const char *a2)
{
  uint64_t result = (*(uint64_t (**)(void, const char *))(**((void **)this + 12) + 16))(*((void *)this + 12), a2);
  if (result != -1)
  {
    uint64_t v4 = *(uint64_t (**)(SubVocab *, uint64_t))(*(void *)this + 360);
    return v4(this, result);
  }
  return result;
}

uint64_t SubVocab::addWord(SubVocab *this, uint64_t a2)
{
  uint64_t v4 = (char *)(*(uint64_t (**)(void))(**((void **)this + 12) + 32))(*((void *)this + 12));
  if (!v4) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v5 = v4;
  char v10 = 0;
  unsigned int v6 = LHash<char const*,unsigned int>::insert((void *)this + 1, v4, &v10);
  if (!v10)
  {
    *(_DWORD *)unsigned int v6 = a2;
    char v11 = 0;
    uint64_t InternalKey = LHash<char const*,unsigned int>::getInternalKey((_DWORD **)this + 1, v5, &v11);
    *(void *)Array<char const*>::operator[]((int *)this + 4, a2) = InternalKey;
    uint64_t v8 = *((unsigned int *)this + 10);
    if (v8 < a2)
    {
      do
        *(void *)Array<char const*>::operator[]((int *)this + 4, v8++) = 0;
      while (a2 != v8);
      LODWORD(v8) = *((_DWORD *)this + 10);
    }
    if ((int)a2 + 1 > v8) {
      *((_DWORD *)this + 10) = a2 + 1;
    }
  }
  return a2;
}

void SubVocab::~SubVocab(SubVocab *this)
{
  Vocab::~Vocab(this);
  JUMPOUT(0x1B3EA8670);
}

uint64_t SubVocab::unkIsWord(SubVocab *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 12) + 152))();
}

uint64_t SubVocab::toLower(SubVocab *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 12) + 160))();
}

BOOL SubVocab::isNonEvent(SubVocab *this, uint64_t a2)
{
  return Vocab::isNonEvent(this, a2)
      || (*(unsigned int (**)(void, uint64_t))(**((void **)this + 12) + 176))(*((void *)this + 12), a2) != 0;
}

uint64_t SubVocab::metaTag(SubVocab *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 12) + 216))();
}

uint64_t SubVocab::isMetaTag(SubVocab *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 12) + 224))();
}

uint64_t SubVocab::typeOfMetaTag(SubVocab *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 12) + 232))();
}

uint64_t SubVocab::metaTagOfType(SubVocab *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 12) + 240))();
}

_DWORD *quasar::GeoVersionChecker::GeoVersionChecker(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

_DWORD *quasar::GeoVersionChecker::enforceVersion(_DWORD *result, uint64_t a2, int a3, int a4, uint64_t a5)
{
  if (*result < a3 || *result > a4)
  {
    memset(v16, 0, sizeof(v16));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
    int v7 = *(char *)(a2 + 23);
    if (v7 >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = *(void *)a2;
    }
    if (v7 >= 0) {
      uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v9 = *(void *)(a2 + 8);
    }
    char v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v8, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" in geo config version ", 23);
    char v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", upgrade to latest version (or version ", 40);
    uint64_t v12 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"..", 2);
    double v13 = (void *)std::ostream::operator<<();
    unsigned int v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)") ", 2);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v14, a5);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v16);
  }
  return result;
}

BOOL quasar::GeoVersionChecker::checkVersion(_DWORD *a1, int a2, int a3)
{
  return *a1 >= a2 && *a1 <= a3;
}

uint64_t quasar::RecognitionResultIterator::iterateWithCallback(uint64_t a1, uint64_t a2)
{
  do
  {
    int v4 = (**(uint64_t (***)(uint64_t))a1)(a1);
    if (!v4) {
      break;
    }
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
    uint64_t v6 = *(void *)(a2 + 24);
    if (!v6) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
  }
  while (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 48))(v6, v5) & 1) != 0);
  return v4 ^ 1u;
}

void quasar::createJSONResultRecognitionResultIterator()
{
}

void sub_1B212303C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C40B1B69422);
  _Unwind_Resume(a1);
}

uint64_t quasar::JSONRecognitionResultIterator::JSONRecognitionResultIterator(uint64_t a1, kaldi::quasar::Vocab *a2, const void ***a3)
{
  *(void *)a1 = &unk_1F0A57088;
  std::set<std::string>::set[abi:ne180100]((uint64_t *)(a1 + 8), a3);
  *(void *)a1 = &unk_1F0A579B0;
  kaldi::quasar::Vocab::OOvWord(a2, &__p);
  std::ifstream::basic_ifstream((uint64_t *)(a1 + 32));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(_DWORD *)(a1 + 672) = 0;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  std::istream::peek();
  return a1;
}

void sub_1B2123138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  unint64_t v20 = v19;
  quasar::RecognitionResultIterator::Record::~Record(v20);
  std::ifstream::~ifstream(v18);
  *(void *)uint64_t v15 = v17;
  std::__tree<std::string>::destroy(v16, *(char **)(v15 + 16));
  _Unwind_Resume(a1);
}

void quasar::RecognitionResultIterator::Record::~Record(quasar::RecognitionResultIterator::Record *this)
{
  unint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (void **)((char *)this + 24);
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

BOOL quasar::JSONRecognitionResultIterator::hasNext(quasar::JSONRecognitionResultIterator *this)
{
  return (*((unsigned char *)this + *(void *)(*((void *)this + 4) - 24) + 64) & 2) == 0;
}

uint64_t quasar::JSONRecognitionResultIterator::next(quasar::JSONRecognitionResultIterator *this)
{
  uint64_t v1 = (void *)((char *)this + 32);
  unint64_t v2 = (const std::ios_base *)((char *)this + *(void *)(*((void *)this + 4) - 24) + 32);
  if ((v2->__rdstate_ & 2) == 0)
  {
    memset(&v8, 0, sizeof(v8));
    std::ios_base::getloc(v2);
    uint64_t v3 = std::locale::use_facet(&v6, MEMORY[0x1E4FBA258]);
    unsigned __int8 v4 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
    std::locale::~locale(&v6);
    std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v1, (uint64_t)&v8, v4);
    std::istream::peek();
    quasar::PTree::PTree((quasar::PTree *)v7);
    std::istringstream::basic_istringstream[abi:ne180100]((uint64_t *)&v6, &v8, 8);
    quasar::PTree::readJson();
  }
  return 0;
}

void sub_1B2123568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,std::locale a23)
{
  std::istringstream::~istringstream((uint64_t)&a23);
  quasar::PTree::~PTree((quasar::PTree *)(v23 - 144));
  if (*(char *)(v23 - 57) < 0) {
    operator delete(*(void **)(v23 - 80));
  }
  _Unwind_Resume(a1);
}

BOOL quasar::RecognitionResultIterator::shouldConsiderUtterance(uint64_t a1, const void **a2)
{
  return !*(void *)(a1 + 24)
      || a1 + 16 != std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 8, a2);
}

void quasar::JSONRecognitionResultIterator::~JSONRecognitionResultIterator(quasar::JSONRecognitionResultIterator *this)
{
  quasar::JSONRecognitionResultIterator::~JSONRecognitionResultIterator(this);
  JUMPOUT(0x1B3EA8670);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;

  *(void *)this = &unk_1F0A579B0;
  unint64_t v2 = (std::__shared_weak_count *)*((void *)this + 83);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v5 = (void **)((char *)this + 632);
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v5);
  if (*((char *)this + 631) < 0) {
    operator delete(*((void **)this + 76));
  }
  uint64_t v3 = MEMORY[0x1E4FBA3F8];
  unsigned __int8 v4 = *MEMORY[0x1E4FBA3F8];
  *((void *)this + 4) = *MEMORY[0x1E4FBA3F8];
  *(void *)((char *)this + *(void *)(v4 - 24) + 32) = *(void *)(v3 + 24);
  MEMORY[0x1B3EA7CF0]((char *)this + 48);
  std::istream::~istream();
  MEMORY[0x1B3EA8520]((char *)this + 456);
  *(void *)this = &unk_1F0A57088;
  std::__tree<std::string>::destroy((uint64_t)this + 8, *((char **)this + 2));
}

void *std::shared_ptr<kaldi::FeatureMatrixItf>::operator=[abi:ne180100]<kaldi::FeatureMatrixItf,std::default_delete<kaldi::FeatureMatrixItf>,void>(void *a1, uint64_t *a2)
{
  std::shared_ptr<kaldi::FeatureMatrixItf>::shared_ptr[abi:ne180100]<kaldi::FeatureMatrixItf,std::default_delete<kaldi::FeatureMatrixItf>,void>((uint64_t *)&v6, a2);
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  long long v4 = v6;
  *(void *)&long long v6 = *a1;
  *((void *)&v6 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

uint64_t *std::shared_ptr<kaldi::FeatureMatrixItf>::shared_ptr[abi:ne180100]<kaldi::FeatureMatrixItf,std::default_delete<kaldi::FeatureMatrixItf>,void>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *uint64_t result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

void std::__shared_ptr_pointer<kaldi::FeatureMatrixItf  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_pointer<kaldi::FeatureMatrixItf  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<kaldi::FeatureMatrixItf  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::set<std::string>::set[abi:ne180100]<std::__wrap_iter<std::string const*>>(uint64_t a1, const void **a2, const void **a3)
{
  *(void *)(a1 + 8) = 0;
  long long v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    long long v6 = a2;
    do
    {
      std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>((uint64_t **)a1, v4, v6, (uint64_t)v6);
      v6 += 3;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_1B21239D4(_Unwind_Exception *a1)
{
  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_1B2123B48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long __p, long long a10, long long a11, long long a12, long long a13, long long a14, long long a15, long long a16, long long a17, long long a18, long long a19, long long a20,long long a21,long long a22,long long a23,long long a24,long long a25)
{
  if (a2 == 1)
  {
    uint64_t v29 = __cxa_begin_catch(a1);
    if (quasar::gLogLevel >= 1)
    {
      uint64_t v30 = v29;
      a24 = 0u;
      a25 = 0u;
      a22 = 0u;
      a23 = 0u;
      a20 = 0u;
      a21 = 0u;
      a18 = 0u;
      a19 = 0u;
      a16 = 0u;
      a17 = 0u;
      a14 = 0u;
      a15 = 0u;
      a12 = 0u;
      a13 = 0u;
      a10 = 0u;
      a11 = 0u;
      std::string __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      int v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"EAR Initialization failed for custom-lm, error:", 47);
      int v32 = (const char *)(*(uint64_t (**)(void *))(*(void *)v30 + 16))(v30);
      size_t v33 = strlen(v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v32, v33);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&__p);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B2123B20);
  }

  _Unwind_Resume(a1);
}

void sub_1B2123F94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  _Block_object_dispose(&a23, 8);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__9(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__9(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void sub_1B21241D8(_Unwind_Exception *__p, uint64_t a2, int a3, __int16 a4, char a5, char a6, std::__split_buffer<std::wstring> *a7, uint64_t a8, void *__pa, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&a15);
  if (a14 < 0) {
    operator delete(__pa);
  }

  _Unwind_Resume(__p);
}

quasar::CustomLMBuilder *std::unique_ptr<quasar::CustomLMBuilder>::reset[abi:ne180100](quasar::CustomLMBuilder **a1, quasar::CustomLMBuilder *a2)
{
  __n128 result = *a1;
  *a1 = a2;
  if (result)
  {
    quasar::CustomLMBuilder::~CustomLMBuilder(result);
    JUMPOUT(0x1B3EA8670);
  }
  return result;
}

void quasar::CustomLMBuilder::~CustomLMBuilder(quasar::CustomLMBuilder *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 34);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *((void *)this + 32);
  *((void *)this + 32) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v5 = (void **)((char *)this + 232);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v5);
  if (*((char *)this + 223) < 0) {
    operator delete(*((void **)this + 25));
  }
  quasar::PTree::~PTree((quasar::CustomLMBuilder *)((char *)this + 136));
  if (*((char *)this + 135) < 0) {
    operator delete(*((void **)this + 14));
  }
  if (*((char *)this + 111) < 0) {
    operator delete(*((void **)this + 11));
  }
  if (*((char *)this + 87) < 0) {
    operator delete(*((void **)this + 8));
  }
  long long v4 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void sub_1B21244A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B2124750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  _Unwind_Resume(a1);
}

void sub_1B2124860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B2124A18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B2124E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1B2124F48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)EARPSRAudioProcessor;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<quasar::PSRAudioProcessor,std::allocator<quasar::PSRAudioProcessor>,quasar::SystemConfig &,std::string,unsigned long &,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, unsigned int *a3@<X3>, void *a4@<X8>)
{
  std::string v8 = operator new(0x68uLL);
  __n128 result = std::__shared_ptr_emplace<quasar::PSRAudioProcessor>::__shared_ptr_emplace[abi:ne180100]<quasar::SystemConfig &,std::string,unsigned long &,std::allocator<quasar::PSRAudioProcessor>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1B21250E0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::PSRAudioProcessor>::__shared_ptr_emplace[abi:ne180100]<quasar::SystemConfig &,std::string,unsigned long &,std::allocator<quasar::PSRAudioProcessor>,0>(void *a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A603D8;
  std::allocator<quasar::PSRAudioProcessor>::construct[abi:ne180100]<quasar::PSRAudioProcessor,quasar::SystemConfig &,std::string,unsigned long &>((uint64_t)&v6, (uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_1B2125158(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::PSRAudioProcessor>::construct[abi:ne180100]<quasar::PSRAudioProcessor,quasar::SystemConfig &,std::string,unsigned long &>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
}

void sub_1B21251BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void *quasar::tennessee::memory_mapping::operator<<(void *a1, int a2)
{
  if (a2 == 2)
  {
    uint64_t v3 = "MEMORY_BUFFER";
    uint64_t v4 = 13;
  }
  else if (a2 == 1)
  {
    uint64_t v3 = "MEMORY_MAP";
    uint64_t v4 = 10;
  }
  else
  {
    uint64_t v3 = "UNKNOWN";
    uint64_t v4 = 7;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v3, v4);
  return a1;
}

uint64_t quasar::tennessee::memory_mapping::VirtualMemoryFile::VirtualMemoryFile(uint64_t a1, uint64_t a2, int a3, unint64_t a4, off_t a5)
{
  *(void *)a1 = &unk_1F0A599B8;
  *(_DWORD *)(a1 + 8) = a3;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  unint64_t v5 = a4 - a5;
  if (a4 <= a5) {
    goto LABEL_24;
  }
  char v11 = *(char *)(a2 + 23) >= 0 ? (const char *)a2 : *(const char **)a2;
  int v12 = open(v11, 0);
  if (v12 <= 0) {
    goto LABEL_24;
  }
  int v13 = v12;
  if (quasar::gLogLevel >= 4)
  {
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v26 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v26);
    unsigned int v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Loading ", 8);
    uint64_t v15 = v14;
    uint64_t v16 = *(unsigned __int8 *)(a2 + 23);
    if ((v16 & 0x80u) == 0) {
      uint64_t v17 = (unsigned char *)a2;
    }
    else {
      uint64_t v17 = *(unsigned char **)a2;
    }
    if ((v16 & 0x80u) != 0) {
      uint64_t v16 = *(void *)(a2 + 8);
    }
    std::__quoted_output[abi:ne180100]<char,std::char_traits<char>>(v14, v17, &v17[v16], 0x22u, 0x5Cu);
    double v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" using ", 7);
    double v19 = quasar::tennessee::memory_mapping::operator<<(v18, a3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)".", 1);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v26);
  }
  int v20 = *(_DWORD *)(a1 + 8);
  if (v20 == 2)
  {
    if (a5 < 1 || lseek(v13, a5, 0) == a5)
    {
      *(void *)(a1 + 32) = v5;
      if ((a4 & 0x8000000000000000) == 0) {
        operator new[]();
      }
    }
    goto LABEL_24;
  }
  if (v20 == 1)
  {
    uint64_t v21 = sysconf(29);
    size_t v22 = a5 % v21 + a4;
    *(void *)(a1 + 24) = a5 % v21;
    *(void *)(a1 + 32) = v22;
    uint64_t v23 = mmap(0, v22, 1, 1, v13, a5 / v21 * v21);
    *(void *)(a1 + 16) = v23;
    if (v23 == (void *)-1) {
      goto LABEL_24;
    }
  }
  else if (quasar::gLogLevel >= -1)
  {
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v26 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v26);
    unint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Unsupported mode: ", 18);
    quasar::tennessee::memory_mapping::operator<<(v25, *(_DWORD *)(a1 + 8));
LABEL_25:
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v26);
  }
  if (close(v13))
  {
LABEL_24:
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v26 = 0u;
    quasar::QuasarExceptionMessage::QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v26);
    goto LABEL_25;
  }
  return a1;
}

void sub_1B2125504(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B2125514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void quasar::tennessee::memory_mapping::VirtualMemoryFile::~VirtualMemoryFile(quasar::tennessee::memory_mapping::VirtualMemoryFile *this)
{
  *(void *)this = &unk_1F0A599B8;
  int v1 = *((_DWORD *)this + 2);
  if (v1 == 2)
  {
    uint64_t v2 = *((void *)this + 2);
    if (v2) {
      MEMORY[0x1B3EA8630](v2, 0x1000C8077774924);
    }
  }
  else if (v1 == 1)
  {
    if (munmap(*((void **)this + 2), *((void *)this + 4)))
    {
      memset(v3, 0, sizeof(v3));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v3);
    }
  }
}

{
  uint64_t vars8;

  quasar::tennessee::memory_mapping::VirtualMemoryFile::~VirtualMemoryFile(this);
  JUMPOUT(0x1B3EA8670);
}

uint64_t quasar::tennessee::memory_mapping::VirtualMemoryFile::Data(quasar::tennessee::memory_mapping::VirtualMemoryFile *this)
{
  return *((void *)this + 2) + *((void *)this + 3);
}

void quasar::rescoring::PreItnTokenExtractor::PreItnTokenExtractor(void *a1, uint64_t a2, void *a3)
{
  void v9[3] = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(__p, "\\CS-");
  std::string::basic_string[abi:ne180100]<0>(v9, "\\PM-");
  std::set<std::string>::set[abi:ne180100]((uint64_t)a1, (const void **)__p, 2);
  uint64_t v5 = 0;
  while (1)
  {
    if (SHIBYTE(v9[v5 + 2]) < 0) {
      operator delete((void *)v9[v5]);
    }
    v5 -= 3;
    if (v5 == -6)
    {
      char v6 = operator new(0x30uLL);
      v6[1] = 0;
      _OWORD v6[2] = 0;
      *char v6 = &unk_1F0A60090;
      void v6[4] = 0;
      void v6[5] = 0;
      void v6[3] = 0;
      a1[3] = v6 + 3;
      a1[4] = v6;
      a1[5] = *a3;
      uint64_t v7 = a3[1];
      a1[6] = v7;
      if (v7) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "•|\\(|\\)|\"|\\[|\\]|\\{|\\}|®|,|;|\\?|\\!|\\\\"");
      quasar::BasicTextSanitizer::BasicTextSanitizer((quasar::TextSanitizer *)(a1 + 7));
    }
  }
}

void sub_1B21257CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  quasar::BasicTextSanitizer::~BasicTextSanitizer(v18);
  int v20 = *(std::__shared_weak_count **)(v17 + 48);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  uint64_t v21 = *(std::__shared_weak_count **)(v17 + 32);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  std::__tree<std::string>::destroy(v17, *(char **)(v17 + 8));
  _Unwind_Resume(a1);
}

void quasar::rescoring::PreItnTokenExtractor::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__s, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __s = *(std::string *)a2;
  }
  std::string::basic_string[abi:ne180100]<0>(v17, "~w00");
  std::string::basic_string[abi:ne180100]<0>(__p, " ");
  quasar::replaceAll((uint64_t)&__s, (uint64_t)v17, (char *)__p);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE7(v18) < 0) {
    operator delete(v17[0]);
  }
  uint64_t v13 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, " ");
  char v6 = operator new(0x20uLL);
  *char v6 = &unk_1F0A5D0F0;
  v6[1] = a3;
  _OWORD v6[2] = a1;
  void v6[3] = &v13;
  *((void *)&v18 + 1) = v6;
  quasar::splitAndTrimNoEmpty(&__s, (char *)__p, (uint64_t)v17);
  std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100](v17);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  if (v13 && quasar::gLogLevel >= 4)
  {
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    *(_OWORD *)uint64_t v17 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
    uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Text '", 6);
    int v8 = *(char *)(a2 + 23);
    if (v8 >= 0) {
      uint64_t v9 = a2;
    }
    else {
      uint64_t v9 = *(void *)a2;
    }
    if (v8 >= 0) {
      uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v10 = *(void *)(a2 + 8);
    }
    char v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"' contains ", 11);
    int v12 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" OOVs.", 6);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v17);
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
}

void sub_1B2125A8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
}

BOOL quasar::rescoring::PreItnTokenExtractor::matchesAnyUnallowedTokenPrefix(void *a1, const void **a2)
{
  uint64_t v4 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    do
    {
      BOOL v6 = std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), (const void **)(v5 + 32), a2);
      uint64_t v7 = (uint64_t *)(v5 + 8);
      if (!v6)
      {
        uint64_t v7 = (uint64_t *)v5;
        uint64_t v4 = (void *)v5;
      }
      uint64_t v5 = *v7;
    }
    while (*v7);
  }
  if (v4 == (void *)*a1) {
    return 0;
  }
  uint64_t v8 = *((unsigned __int8 *)v4 + 55);
  if ((v8 & 0x80u) == 0) {
    uint64_t v9 = (const void *)*((unsigned __int8 *)v4 + 55);
  }
  else {
    uint64_t v9 = (const void *)v4[5];
  }
  int v10 = *((char *)a2 + 23);
  if (v10 >= 0) {
    char v11 = (const void *)*((unsigned __int8 *)a2 + 23);
  }
  else {
    char v11 = a2[1];
  }
  if (v9 != v11) {
    goto LABEL_22;
  }
  int v12 = (const void **)(v4 + 4);
  if (v10 >= 0) {
    uint64_t v13 = (unsigned __int8 *)a2;
  }
  else {
    uint64_t v13 = (unsigned __int8 *)*a2;
  }
  if ((v8 & 0x80) == 0)
  {
    if (*((unsigned char *)v4 + 55))
    {
      while (*(unsigned __int8 *)v12 == *v13)
      {
        int v12 = (const void **)((char *)v12 + 1);
        ++v13;
        if (!--v8) {
          return 1;
        }
      }
      goto LABEL_22;
    }
    return 1;
  }
  if (!memcmp(*v12, v13, v4[5])) {
    return 1;
  }
LABEL_22:
  unsigned int v14 = (void *)*v4;
  if (*v4)
  {
    do
    {
      char v15 = v14;
      unsigned int v14 = (void *)v14[1];
    }
    while (v14);
  }
  else
  {
    do
    {
      char v15 = (void *)v4[2];
      BOOL v16 = *v15 == (void)v4;
      uint64_t v4 = v15;
    }
    while (v16);
  }
  if (v10 >= 0) {
    uint64_t v17 = (unsigned __int8 *)a2;
  }
  else {
    uint64_t v17 = (unsigned __int8 *)*a2;
  }
  long long v20 = (unsigned __int8 *)v15[4];
  long long v19 = (unsigned __int8 *)(v15 + 4);
  long long v18 = v20;
  int v21 = (char)v19[23];
  if (v21 >= 0) {
    long long v18 = v19;
  }
  uint64_t v22 = *((void *)v19 + 1);
  if (v21 >= 0) {
    uint64_t v22 = v21;
  }
  if (v11 && v22)
  {
    uint64_t v23 = v22 - 1;
    uint64_t v24 = (uint64_t)v11 - 1;
    long long v25 = v18;
    while (*v17 == *v25)
    {
      ++v25;
      if (v24)
      {
        ++v17;
        uint64_t v26 = v23--;
        --v24;
        if (v26) {
          continue;
        }
      }
      return v25 == &v18[v22];
    }
    return 0;
  }
  long long v25 = v18;
  return v25 == &v18[v22];
}

void std::__function::__func<quasar::rescoring::PreItnTokenExtractor::operator()(std::string const&,std::vector<std::string> *)::$_0,std::allocator<quasar::rescoring::PreItnTokenExtractor::operator()(std::string const&,std::vector<std::string> *)::$_0>,void ()(std::string const&)>::~__func()
{
}

__n128 std::__function::__func<quasar::rescoring::PreItnTokenExtractor::operator()(std::string const&,std::vector<std::string> *)::$_0,std::allocator<quasar::rescoring::PreItnTokenExtractor::operator()(std::string const&,std::vector<std::string> *)::$_0>,void ()(std::string const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F0A5D0F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<quasar::rescoring::PreItnTokenExtractor::operator()(std::string const&,std::vector<std::string> *)::$_0,std::allocator<quasar::rescoring::PreItnTokenExtractor::operator()(std::string const&,std::vector<std::string> *)::$_0>,void ()(std::string const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F0A5D0F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<quasar::rescoring::PreItnTokenExtractor::operator()(std::string const&,std::vector<std::string> *)::$_0,std::allocator<quasar::rescoring::PreItnTokenExtractor::operator()(std::string const&,std::vector<std::string> *)::$_0>,void ()(std::string const&)>::operator()(uint64_t a1, uint64_t a2)
{
  if (!quasar::rescoring::PreItnTokenExtractor::matchesAnyUnallowedTokenPrefix(*(void **)(a1 + 16), (const void **)a2))
  {
    if (quasar::SymbolTableList::strToSymbolId(*(void *)(*(void *)(a1 + 16) + 24), a2) == -1)
    {
      if (*(char *)(a2 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v84, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      }
      else {
        std::string v84 = *(std::string *)a2;
      }
      if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int64_t size = HIBYTE(v84.__r_.__value_.__r.__words[2]);
      }
      else {
        int64_t size = v84.__r_.__value_.__l.__size_;
      }
      if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v8 = &v84;
      }
      else {
        uint64_t v8 = (std::string *)v84.__r_.__value_.__r.__words[0];
      }
      if (size >= 1)
      {
        uint64_t v9 = (char *)v8 + size;
        int v10 = v8;
        do
        {
          char v11 = memchr(v10, 92, size);
          if (!v11) {
            break;
          }
          if (*v11 == 92)
          {
            if (v11 != v9 && v11 - (unsigned char *)v8 != -1) {
              std::string::erase(&v84, v11 - (unsigned char *)v8, 0xFFFFFFFFFFFFFFFFLL);
            }
            break;
          }
          int v10 = (std::string *)(v11 + 1);
          int64_t size = v9 - (unsigned char *)v10;
        }
        while (v9 - (unsigned char *)v10 >= 1);
      }
      if (quasar::SymbolTableList::strToSymbolId(*(void *)(*(void *)(a1 + 16) + 24), (uint64_t)&v84) == -1)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "_");
        std::string::basic_string[abi:ne180100]<0>(&v81, " ");
        quasar::replaceAll((uint64_t)&v84, (uint64_t)__p, (char *)&v81);
        if (SHIBYTE(v83) < 0) {
          operator delete(v81);
        }
        if (SBYTE7(v65) < 0) {
          operator delete(__p[0]);
        }
        __p[0] = 0;
        __p[1] = 0;
        *(void *)&long long v65 = 0;
        if (quasar::TextSanitizer::sanitize(*(void *)(a1 + 16) + 56, (uint64_t)&v84) != 1) {
          std::string::operator=(&v84, (const std::string *)__p);
        }
        if (SBYTE7(v65) < 0) {
          operator delete(__p[0]);
        }
        std::string::size_type v15 = HIBYTE(v84.__r_.__value_.__r.__words[2]);
        if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v15 = v84.__r_.__value_.__l.__size_;
        }
        if (v15)
        {
          BOOL v16 = *(uint64_t **)(a1 + 8);
          uint64_t v17 = *v16;
          uint64_t v18 = v16[1];
          uint64_t v19 = *(void *)(*(void *)(a1 + 16) + 40);
          if (v19)
          {
            if (quasar::gLogLevel >= 4)
            {
              long long v79 = 0u;
              long long v80 = 0u;
              long long v77 = 0u;
              long long v78 = 0u;
              long long v75 = 0u;
              long long v76 = 0u;
              long long v73 = 0u;
              long long v74 = 0u;
              long long v71 = 0u;
              long long v72 = 0u;
              long long v69 = 0u;
              long long v70 = 0u;
              long long v67 = 0u;
              long long v68 = 0u;
              long long v65 = 0u;
              long long v66 = 0u;
              *(_OWORD *)std::string __p = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
              long long v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Token '", 7);
              int v21 = *(char *)(a2 + 23);
              if (v21 >= 0) {
                uint64_t v22 = a2;
              }
              else {
                uint64_t v22 = *(void *)a2;
              }
              if (v21 >= 0) {
                uint64_t v23 = *(unsigned __int8 *)(a2 + 23);
              }
              else {
                uint64_t v23 = *(void *)(a2 + 8);
              }
              uint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v22, v23);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"' is OOV.", 9);
              quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
              uint64_t v19 = *(void *)(*(void *)(a1 + 16) + 40);
            }
            long long v81 = 0;
            uint64_t v82 = 0;
            uint64_t v83 = 0;
            if (((*(uint64_t (**)(uint64_t, std::string *, uint64_t **))(*(void *)v19 + 16))(v19, &v84, &v81) & 1) == 0)
            {
              long long v79 = 0u;
              long long v80 = 0u;
              long long v77 = 0u;
              long long v78 = 0u;
              long long v75 = 0u;
              long long v76 = 0u;
              long long v73 = 0u;
              long long v74 = 0u;
              long long v71 = 0u;
              long long v72 = 0u;
              long long v69 = 0u;
              long long v70 = 0u;
              long long v67 = 0u;
              long long v68 = 0u;
              long long v65 = 0u;
              long long v66 = 0u;
              *(_OWORD *)std::string __p = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
              unint64_t v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Tokenizer failed to tokenize '", 30);
              if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v55 = &v84;
              }
              else {
                uint64_t v55 = (std::string *)v84.__r_.__value_.__r.__words[0];
              }
              if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v56 = HIBYTE(v84.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v56 = v84.__r_.__value_.__l.__size_;
              }
              long long v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)v55, v56);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"'.", 2);
              quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
            }
            if (v82 - (void)v81 != 32)
            {
              long long v79 = 0u;
              long long v80 = 0u;
              long long v77 = 0u;
              long long v78 = 0u;
              long long v75 = 0u;
              long long v76 = 0u;
              long long v73 = 0u;
              long long v74 = 0u;
              long long v71 = 0u;
              long long v72 = 0u;
              long long v69 = 0u;
              long long v70 = 0u;
              long long v67 = 0u;
              long long v68 = 0u;
              long long v65 = 0u;
              long long v66 = 0u;
              *(_OWORD *)std::string __p = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Tokenizer returned ", 19);
              long long v58 = (void *)std::ostream::operator<<();
              long long v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)" hypotheses, ", 13);
              long long v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)"instead of expected singleton for '", 35);
              if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                long long v61 = &v84;
              }
              else {
                long long v61 = (std::string *)v84.__r_.__value_.__r.__words[0];
              }
              if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v62 = HIBYTE(v84.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v62 = v84.__r_.__value_.__l.__size_;
              }
              long long v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)v61, v62);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)"'.", 2);
              quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
            }
            uint64_t v25 = *v81;
            uint64_t v26 = v81[1];
            if (*v81 != v26)
            {
              do
              {
                if (quasar::gLogLevel >= 4)
                {
                  long long v79 = 0u;
                  long long v80 = 0u;
                  long long v77 = 0u;
                  long long v78 = 0u;
                  long long v75 = 0u;
                  long long v76 = 0u;
                  long long v73 = 0u;
                  long long v74 = 0u;
                  long long v71 = 0u;
                  long long v72 = 0u;
                  long long v69 = 0u;
                  long long v70 = 0u;
                  long long v67 = 0u;
                  long long v68 = 0u;
                  long long v65 = 0u;
                  long long v66 = 0u;
                  *(_OWORD *)std::string __p = 0u;
                  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
                  long long v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Extracted token '", 17);
                  int v28 = *(char *)(v25 + 23);
                  if (v28 >= 0) {
                    uint64_t v29 = v25;
                  }
                  else {
                    uint64_t v29 = *(void *)v25;
                  }
                  if (v28 >= 0) {
                    uint64_t v30 = *(unsigned __int8 *)(v25 + 23);
                  }
                  else {
                    uint64_t v30 = *(void *)(v25 + 8);
                  }
                  long long v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, v29, v30);
                  long long v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"' from '", 8);
                  if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    long long v33 = &v84;
                  }
                  else {
                    long long v33 = (std::string *)v84.__r_.__value_.__r.__words[0];
                  }
                  if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    std::string::size_type v34 = HIBYTE(v84.__r_.__value_.__r.__words[2]);
                  }
                  else {
                    std::string::size_type v34 = v84.__r_.__value_.__l.__size_;
                  }
                  long long v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)v33, v34);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"'.", 2);
                  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
                }
                std::string::basic_string[abi:ne180100]<0>(__p, " ");
                quasar::splitAndTrimNoEmpty((const std::string *)v25, (char *)__p, *(void *)(a1 + 8));
                if (SBYTE7(v65) < 0) {
                  operator delete(__p[0]);
                }
                v25 += 32;
              }
              while (v25 != v26);
            }
            __p[0] = &v81;
            std::vector<quasar::TextTokenizer::TokenString>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          }
          else
          {
            std::string::basic_string[abi:ne180100]<0>(__p, " ");
            quasar::splitAndTrimNoEmpty(&v84, (char *)__p, *(void *)(a1 + 8));
            if (SBYTE7(v65) < 0) {
              operator delete(__p[0]);
            }
            if (quasar::gLogLevel >= 4)
            {
              long long v79 = 0u;
              long long v80 = 0u;
              long long v77 = 0u;
              long long v78 = 0u;
              long long v75 = 0u;
              long long v76 = 0u;
              long long v73 = 0u;
              long long v74 = 0u;
              long long v71 = 0u;
              long long v72 = 0u;
              long long v69 = 0u;
              long long v70 = 0u;
              long long v67 = 0u;
              long long v68 = 0u;
              long long v65 = 0u;
              long long v66 = 0u;
              *(_OWORD *)std::string __p = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
              long long v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Token '", 7);
              int v43 = *(char *)(a2 + 23);
              if (v43 >= 0) {
                uint64_t v44 = a2;
              }
              else {
                uint64_t v44 = *(void *)a2;
              }
              if (v43 >= 0) {
                uint64_t v45 = *(unsigned __int8 *)(a2 + 23);
              }
              else {
                uint64_t v45 = *(void *)(a2 + 8);
              }
              uint64_t v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, v44, v45);
              unint64_t v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"' is OOV and was converted to '", 31);
              if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                int v48 = &v84;
              }
              else {
                int v48 = (std::string *)v84.__r_.__value_.__r.__words[0];
              }
              if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v49 = HIBYTE(v84.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v49 = v84.__r_.__value_.__l.__size_;
              }
              uint64_t v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)v48, v49);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"'.", 2);
              quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
            }
          }
          unint64_t v51 = (v18 - v17) / 24;
          uint64_t v52 = **(void **)(a1 + 8);
          if (v51 < 0xAAAAAAAAAAAAAAABLL * ((*(void *)(*(void *)(a1 + 8) + 8) - v52) >> 3))
          {
            uint64_t v53 = 24 * v51;
            do
            {
              if (quasar::SymbolTableList::strToSymbolId(*(void *)(*(void *)(a1 + 16) + 24), v52 + v53) == -1) {
                ++**(void **)(a1 + 24);
              }
              ++v51;
              uint64_t v52 = **(void **)(a1 + 8);
              v53 += 24;
            }
            while (v51 < 0xAAAAAAAAAAAAAAABLL * ((*(void *)(*(void *)(a1 + 8) + 8) - v52) >> 3));
          }
        }
        else if (quasar::gLogLevel >= 4)
        {
          long long v79 = 0u;
          long long v80 = 0u;
          long long v77 = 0u;
          long long v78 = 0u;
          long long v75 = 0u;
          long long v76 = 0u;
          long long v73 = 0u;
          long long v74 = 0u;
          long long v71 = 0u;
          long long v72 = 0u;
          long long v69 = 0u;
          long long v70 = 0u;
          long long v67 = 0u;
          long long v68 = 0u;
          long long v65 = 0u;
          long long v66 = 0u;
          *(_OWORD *)std::string __p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          long long v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Token '", 7);
          int v38 = *(char *)(a2 + 23);
          if (v38 >= 0) {
            uint64_t v39 = a2;
          }
          else {
            uint64_t v39 = *(void *)a2;
          }
          if (v38 >= 0) {
            uint64_t v40 = *(unsigned __int8 *)(a2 + 23);
          }
          else {
            uint64_t v40 = *(void *)(a2 + 8);
          }
          long long v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, v39, v40);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"' was converted to the empty string.", 36);
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
        }
      }
      else
      {
        uint64_t v12 = *(void *)(a1 + 8);
        unint64_t v13 = *(void *)(v12 + 8);
        if (v13 >= *(void *)(v12 + 16))
        {
          uint64_t v36 = std::vector<std::string>::__emplace_back_slow_path<std::string&>(*(uint64_t **)(a1 + 8), (long long *)&v84);
        }
        else
        {
          if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(*(std::string **)(v12 + 8), v84.__r_.__value_.__l.__data_, v84.__r_.__value_.__l.__size_);
          }
          else
          {
            long long v14 = *(_OWORD *)&v84.__r_.__value_.__l.__data_;
            *(void *)(v13 + 16) = *((void *)&v84.__r_.__value_.__l + 2);
            *(_OWORD *)unint64_t v13 = v14;
          }
          uint64_t v36 = v13 + 24;
          *(void *)(v12 + 8) = v13 + 24;
        }
        *(void *)(v12 + 8) = v36;
      }
      if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v84.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      uint64_t v4 = *(uint64_t **)(a1 + 8);
      unint64_t v5 = v4[1];
      if (v5 >= v4[2])
      {
        uint64_t v6 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>(v4, (long long *)a2);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v4, (long long *)a2);
        uint64_t v6 = v5 + 24;
      }
      v4[1] = v6;
    }
  }
}

void sub_1B2126540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::string __p = (void *)(v16 - 136);
  std::vector<quasar::TextTokenizer::TokenString>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (*(char *)(v16 - 89) < 0) {
    operator delete(*(void **)(v16 - 112));
  }
  _Unwind_Resume(a1);
}

void sub_1B21265C8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  std::string __p = (void *)(v16 - 136);
  std::vector<quasar::TextTokenizer::TokenString>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  JUMPOUT(0x1B2126604);
}

void sub_1B21265E0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 89) < 0) {
    operator delete(*(void **)(v1 - 112));
  }
  _Unwind_Resume(exception_object);
}

void sub_1B21265E8(uint64_t a1, uint64_t a2, ...)
{
  va_start(va, a2);
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)va);
  JUMPOUT(0x1B21265F4);
}

uint64_t std::__function::__func<quasar::rescoring::PreItnTokenExtractor::operator()(std::string const&,std::vector<std::string> *)::$_0,std::allocator<quasar::rescoring::PreItnTokenExtractor::operator()(std::string const&,std::vector<std::string> *)::$_0>,void ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::rescoring::PreItnTokenExtractor::operator()(std::string const&,std::vector<std::string> *)::$_0,std::allocator<quasar::rescoring::PreItnTokenExtractor::operator()(std::string const&,std::vector<std::string> *)::$_0>,void ()(std::string const&)>::target_type()
{
}

uint64_t std::vector<std::string>::__emplace_back_slow_path<std::string&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9) {
    int v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  }
  else {
    int v10 = 0;
  }
  std::__split_buffer<std::string>::pointer end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    std::__split_buffer<std::string>::pointer end = __v.__end_;
  }
  else
  {
    long long v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  uint64_t v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
  return v13;
}

void sub_1B2126778(_Unwind_Exception *a1, std::__split_buffer<std::wstring> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void *std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void quasar::QsrTextSymbolTable::Register(quasar::QsrTextSymbolTable *this, quasar::SystemConfig *a2, int a3, int a4, int a5, int a6)
{
  std::string::basic_string[abi:ne180100]<0>(v18, "word-syms-marisa-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Base word symbol table in MARISA trie format (overrides other format files)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v18, (uint64_t)this, (uint64_t)__p, 0, a3, a4, a5, a6);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v18, "word-syms-map-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Base word symbol table mappable format filename (overrides text and binary format file)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v18, (uint64_t)this + 24, (uint64_t)__p, 0, a3, a4, a5, a6);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v18, "word-syms-binary-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Base word symbol table binary format filename (overrides text format file)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v18, (uint64_t)this + 48, (uint64_t)__p, 0, a3, a4, a5, a6);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v18, "word-syms-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Base word symbol table text format filename");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v18, (uint64_t)this + 72, (uint64_t)__p, 0, a3, a4, a5, a6);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  ModelLoaderPtr = (uint64_t *)quasar::SystemConfig::getModelLoaderPtr(a2);
  uint64_t v14 = *ModelLoaderPtr;
  uint64_t v13 = ModelLoaderPtr[1];
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  std::string::size_type v15 = (std::__shared_weak_count *)*((void *)this + 17);
  *((void *)this + 16) = v14;
  *((void *)this + 17) = v13;
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
}

void sub_1B2126A28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::QsrTextSymbolTable::init(const std::string *this, const quasar::SystemConfig::Version *a2, char a3, int a4, int a5)
{
  if (!this[5].__r_.__value_.__l.__size_)
  {
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v17 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v17);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v17, "Model loader is deallocated");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v17);
  }
  std::string::basic_string[abi:ne180100]<0>(&v16, "");
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    if (this->__r_.__value_.__l.__size_) {
      goto LABEL_4;
    }
  }
  else if (*((unsigned char *)&this->__r_.__value_.__s + 23))
  {
LABEL_4:
    std::string::operator=(&v16, this);
    int v10 = 1;
    goto LABEL_17;
  }
  if (SHIBYTE(this[1].__r_.__value_.__r.__words[2]) < 0)
  {
    if (this[1].__r_.__value_.__l.__size_) {
      goto LABEL_8;
    }
  }
  else if (*((unsigned char *)&this[1].__r_.__value_.__s + 23))
  {
LABEL_8:
    std::string::operator=(&v16, this + 1);
    int v10 = 2;
    goto LABEL_17;
  }
  if (SHIBYTE(this[2].__r_.__value_.__r.__words[2]) < 0)
  {
    if (this[2].__r_.__value_.__l.__size_) {
      goto LABEL_12;
    }
  }
  else if (*((unsigned char *)&this[2].__r_.__value_.__s + 23))
  {
LABEL_12:
    std::string::operator=(&v16, this + 2);
    int v10 = 3;
    goto LABEL_17;
  }
  if (SHIBYTE(this[3].__r_.__value_.__r.__words[2]) < 0)
  {
    if (this[3].__r_.__value_.__l.__size_) {
      goto LABEL_16;
    }
  }
  else if (*((unsigned char *)&this[3].__r_.__value_.__s + 23))
  {
LABEL_16:
    std::string::operator=(&v16, this + 3);
    int v10 = 4;
LABEL_17:
    quasar::ModelLoader::readSymbolTable(this[5].__r_.__value_.__l.__size_, (uint64_t)&v16, v10, a4, &v17);
    long long v11 = v17;
    long long v17 = 0uLL;
    int64_t size = (std::__shared_weak_count *)this[4].__r_.__value_.__l.__size_;
    *(_OWORD *)&this[4].__r_.__value_.__l.__data_ = v11;
    if (size)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](size);
      if (*((void *)&v17 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v17 + 1));
      }
    }
    if (a3)
    {
      int v13 = 3;
    }
    else
    {
      quasar::SystemConfig::Version::Version(&v17, 79, 0);
      if (quasar::SystemConfig::Version::operator>=(a2, &v17)) {
        int v13 = 3;
      }
      else {
        int v13 = 2;
      }
    }
    LODWORD(this[4].__r_.__value_.__r.__words[2]) = v13;
    uint64_t v14 = 1;
    goto LABEL_26;
  }
  if (a5)
  {
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v17 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)"No word symbol table file specified.", 36);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v17);
  }
  uint64_t v14 = 0;
LABEL_26:
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  return v14;
}

void sub_1B2126CD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::QsrTextSymbolTable::AddSymbol(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 32))(*(void *)(a1 + 96));
  if ((result & 0x8000000000000000) == 0) {
    result += *(void *)(a1 + 120);
  }
  return result;
}

void quasar::QsrTextSymbolTable::Find(quasar::QsrTextSymbolTable *this@<X0>, void *a2@<X8>)
{
  unint64_t v4 = (quasar::QsrText *)(*(void *(**)(long long *__return_ptr))(**((void **)this + 12) + 88))(&v12);
  if (*((_DWORD *)this + 28) == 2)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    uint64_t v5 = quasar::QsrText::SingletonInstance(v4);
    char v6 = quasar::QsrText::hatToQsrToken(v5, (uint64_t)&v12, (uint64_t)a2);
    if (quasar::gLogLevel < 1) {
      char v7 = 1;
    }
    else {
      char v7 = v6;
    }
    if ((v7 & 1) == 0)
    {
      memset(v11, 0, sizeof(v11));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
      unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Failed to convert HatText token to QsrText token:", 49);
      if (v13 >= 0) {
        unint64_t v9 = &v12;
      }
      else {
        unint64_t v9 = (long long *)v12;
      }
      if (v13 >= 0) {
        uint64_t v10 = HIBYTE(v13);
      }
      else {
        uint64_t v10 = *((void *)&v12 + 1);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v11);
    }
  }
  else
  {
    *(_OWORD *)a2 = v12;
    a2[2] = v13;
    uint64_t v13 = 0;
    long long v12 = 0uLL;
  }
  if (SHIBYTE(v13) < 0) {
    operator delete((void *)v12);
  }
}

void sub_1B2126E88(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  if (*(char *)(v2 - 33) < 0) {
    operator delete(*(void **)(v2 - 56));
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::QsrTextSymbolTable::Find(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 112) == 2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    quasar::QsrText::SingletonInstance((quasar::QsrText *)a1);
    quasar::QsrText::qsrSubTokenToHatToken();
  }
  uint64_t v3 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 96) + 96))(*(void *)(a1 + 96), a2);
  uint64_t v4 = v3;
  if ((v3 & 0x8000000000000000) == 0) {
    return *(void *)(a1 + 120) + v3;
  }
  return v4;
}

void sub_1B2127038(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 33) < 0) {
    operator delete(*(void **)(v1 - 56));
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::QsrTextSymbolTable::Find(quasar::QsrTextSymbolTable *this, char *a2)
{
  if (*((_DWORD *)this + 28) == 2)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    quasar::QsrText::SingletonInstance(this);
    std::string::basic_string[abi:ne180100]<0>(__p, a2);
    quasar::QsrText::qsrSubTokenToHatToken();
  }
  uint64_t v4 = (*(uint64_t (**)(void, char *))(**((void **)this + 12) + 104))(*((void *)this + 12), a2);
  uint64_t v5 = v4;
  if ((v4 & 0x8000000000000000) == 0) {
    return *((void *)this + 15) + v4;
  }
  return v5;
}

void sub_1B2127200(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (*(char *)(v14 - 33) < 0) {
    operator delete(*(void **)(v14 - 56));
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::QsrTextSymbolTable::NumSymbols(quasar::QsrTextSymbolTable *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 12) + 120))();
}

uint64_t quasar::QsrTextSymbolTable::GetNthKey(quasar::QsrTextSymbolTable *this)
{
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 12) + 128))(*((void *)this + 12));
  if ((result & 0x8000000000000000) == 0) {
    result += *((void *)this + 15);
  }
  return result;
}

uint64_t quasar::QsrTextSymbolTable::Write(uint64_t a1, uint64_t a2, int a3, int a4)
{
  if (*(void *)(a1 + 120))
  {
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v17 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    *(_OWORD *)long long v11 = 0u;
    long long v12 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v11, "Calling Write() when offset is nonzero is unsupported");
    goto LABEL_17;
  }
  int v5 = *(_DWORD *)(a1 + 112);
  if (v5 != a3)
  {
    if (a3 == 3 && v5 == 2) {
      fst::SymbolTable::SymbolTable((fst::SymbolTable *)v10);
    }
    if (a3 == 2 && v5 == 3) {
      fst::SymbolTable::SymbolTable((fst::SymbolTable *)v10);
    }
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v17 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    *(_OWORD *)long long v11 = 0u;
    long long v12 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v11, "Programming error: Invalid output encoding");
LABEL_17:
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v11);
  }
  uint64_t v6 = *(void *)(a1 + 96);
  if (a4)
  {
    uint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)v6 + 72);
    return v7(v6);
  }
  else
  {
    fst::SymbolTableTextOptions::SymbolTableTextOptions((fst::SymbolTableTextOptions *)v11);
    uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, void **))(*(void *)v6 + 80))(v6, a2, v11);
    if (SHIBYTE(v12) < 0) {
      operator delete(v11[1]);
    }
    return v9;
  }
}

void sub_1B2127840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, int a20,__int16 a21,char a22,char a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  fst::SymbolTable::~SymbolTable((fst::SymbolTable *)&a16);
  _Unwind_Resume(a1);
}

double kaldi::nnet1::GlobalAttentionComponent::GlobalAttentionComponent(kaldi::nnet1::GlobalAttentionComponent *this, int a2, int a3)
{
  *((_DWORD *)this + 220) = a2;
  *((_DWORD *)this + 221) = a3;
  *((_WORD *)this + 444) = 0;
  *((void *)this + 112) = 0;
  *((void *)this + 114) = 0;
  *((void *)this + 113) = 0;
  *((void *)this + 115) = &unk_1F0A4A6D0;
  *((_OWORD *)this + 58) = xmmword_1B255E480;
  *((void *)this + 118) = 0x3BF800000;
  *((_DWORD *)this + 238) = 1;
  *((_WORD *)this + 478) = 0;
  *((unsigned char *)this + 958) = 0;
  *((void *)this + 1) = -1;
  *(void *)this = off_1F0A4CDB0;
  *((void *)this + 109) = off_1F0A4CFB8;
  double result = 0.0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((void *)this + 6) = &unk_1F0A51768;
  *((unsigned char *)this + 88) = 0;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((void *)this + 12) = &unk_1F0A51768;
  *((unsigned char *)this + 136) = 0;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *((void *)this + 18) = &unk_1F0A51768;
  *((unsigned char *)this + 184) = 0;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *((void *)this + 24) = &unk_1F0A51768;
  *((unsigned char *)this + 232) = 0;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((void *)this + 30) = &unk_1F0A51768;
  *((unsigned char *)this + 280) = 0;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *((void *)this + 36) = &unk_1F0A51768;
  *((unsigned char *)this + 328) = 0;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *((void *)this + 42) = &unk_1F0A51768;
  *((unsigned char *)this + 376) = 0;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *((void *)this + 48) = &unk_1F0A51768;
  *((unsigned char *)this + 424) = 0;
  *(_OWORD *)((char *)this + 440) = 0u;
  *(_OWORD *)((char *)this + 456) = 0u;
  *((void *)this + 54) = &unk_1F0A51768;
  *((unsigned char *)this + 472) = 0;
  *(_OWORD *)((char *)this + 504) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  *((void *)this + 60) = &unk_1F0A51768;
  *((unsigned char *)this + 520) = 0;
  *(_OWORD *)((char *)this + 552) = 0u;
  *(_OWORD *)((char *)this + 536) = 0u;
  *((void *)this + 66) = &unk_1F0A51768;
  *((unsigned char *)this + 568) = 0;
  *(_OWORD *)((char *)this + 600) = 0u;
  *(_OWORD *)((char *)this + 584) = 0u;
  *((void *)this + 72) = &unk_1F0A51768;
  *((unsigned char *)this + 616) = 0;
  *((void *)this + 80) = 0;
  *((void *)this + 79) = 0;
  *((void *)this + 81) = 0;
  *((void *)this + 78) = &unk_1F0A517C0;
  *(_OWORD *)((char *)this + 680) = 0u;
  *(_OWORD *)((char *)this + 664) = 0u;
  *((void *)this + 82) = &unk_1F0A51768;
  *((unsigned char *)this + 696) = 0;
  *((void *)this + 90) = 0;
  *((void *)this + 89) = 0;
  *((void *)this + 91) = 0;
  *((void *)this + 88) = &unk_1F0A517C0;
  *((void *)this + 94) = 0;
  *((void *)this + 93) = 0;
  *((void *)this + 95) = 0;
  *((void *)this + 92) = &unk_1F0A517C0;
  *(_OWORD *)((char *)this + 792) = 0u;
  *(_OWORD *)((char *)this + 776) = 0u;
  *((void *)this + 96) = &unk_1F0A51768;
  *((unsigned char *)this + 808) = 0;
  *((_OWORD *)this + 52) = 0u;
  *((_OWORD *)this + 53) = 0u;
  *((_OWORD *)this + 51) = 0u;
  *((_DWORD *)this + 216) = -1;
  *((unsigned char *)this + 868) = 0;
  return result;
}

kaldi::nnet1::GlobalAttentionComponent *kaldi::nnet1::GlobalAttentionComponent::GlobalAttentionComponent(kaldi::nnet1::GlobalAttentionComponent *this, const kaldi::nnet1::GlobalAttentionComponent *a2)
{
  *((void *)this + 110) = *(void *)((char *)a2 + *(void *)(*(void *)a2 - 24) + 8);
  *((_WORD *)this + 444) = 0;
  *((void *)this + 112) = 0;
  *((void *)this + 114) = 0;
  *((void *)this + 113) = 0;
  *((void *)this + 115) = &unk_1F0A4A6D0;
  *((_OWORD *)this + 58) = xmmword_1B255E480;
  *((_DWORD *)this + 236) = -1082130432;
  *(void *)((char *)this + 948) = 0x100000003;
  *((_WORD *)this + 478) = 0;
  *((unsigned char *)this + 958) = 0;
  *((void *)this + 1) = -1;
  *(void *)this = off_1F0A4CDB0;
  *((void *)this + 109) = off_1F0A4CFB8;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  long long v23 = (int32x2_t *)((char *)this + 48);
  *((void *)this + 6) = &unk_1F0A51768;
  *((unsigned char *)this + 88) = 0;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  long long v22 = (int32x2_t *)((char *)this + 96);
  *((void *)this + 12) = &unk_1F0A51768;
  *((unsigned char *)this + 136) = 0;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  long long v21 = (int32x2_t *)((char *)this + 144);
  *((void *)this + 18) = &unk_1F0A51768;
  *((unsigned char *)this + 184) = 0;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  long long v20 = (int32x2_t *)((char *)this + 192);
  *((void *)this + 24) = &unk_1F0A51768;
  *((unsigned char *)this + 232) = 0;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  long long v19 = (int32x2_t *)((char *)this + 240);
  *((void *)this + 30) = &unk_1F0A51768;
  *((unsigned char *)this + 280) = 0;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  long long v18 = (int32x2_t *)((char *)this + 288);
  *((void *)this + 36) = &unk_1F0A51768;
  *((unsigned char *)this + 328) = 0;
  uint64_t v4 = (int32x2_t *)((char *)this + 336);
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *((void *)this + 42) = &unk_1F0A51768;
  *((unsigned char *)this + 376) = 0;
  int v5 = (int32x2_t *)((char *)this + 384);
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *((void *)this + 48) = &unk_1F0A51768;
  *((unsigned char *)this + 424) = 0;
  uint64_t v6 = (int32x2_t *)((char *)this + 432);
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  *((void *)this + 54) = &unk_1F0A51768;
  *((unsigned char *)this + 472) = 0;
  uint64_t v7 = (int32x2_t *)((char *)this + 480);
  *(_OWORD *)((char *)this + 504) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  *((void *)this + 60) = &unk_1F0A51768;
  *((unsigned char *)this + 520) = 0;
  uint64_t v8 = (int32x2_t *)((char *)this + 528);
  *(_OWORD *)((char *)this + 552) = 0u;
  *(_OWORD *)((char *)this + 536) = 0u;
  *((void *)this + 66) = &unk_1F0A51768;
  *((unsigned char *)this + 568) = 0;
  uint64_t v9 = (int32x2_t *)((char *)this + 576);
  *(_OWORD *)((char *)this + 600) = 0u;
  *(_OWORD *)((char *)this + 584) = 0u;
  *((void *)this + 72) = &unk_1F0A51768;
  *((unsigned char *)this + 616) = 0;
  *((void *)this + 80) = 0;
  *((void *)this + 79) = 0;
  *((void *)this + 81) = 0;
  long long v17 = (char *)this + 624;
  *((void *)this + 78) = &unk_1F0A517C0;
  uint64_t v10 = (int32x2_t *)((char *)this + 656);
  *(_OWORD *)((char *)this + 680) = 0u;
  *(_OWORD *)((char *)this + 664) = 0u;
  *((void *)this + 82) = &unk_1F0A51768;
  *((unsigned char *)this + 696) = 0;
  *((void *)this + 90) = 0;
  *((void *)this + 89) = 0;
  *((void *)this + 91) = 0;
  long long v16 = (char *)this + 704;
  *((void *)this + 88) = &unk_1F0A517C0;
  *((void *)this + 94) = 0;
  *((void *)this + 93) = 0;
  *((void *)this + 95) = 0;
  long long v15 = (char *)this + 736;
  *((void *)this + 92) = &unk_1F0A517C0;
  long long v11 = (int32x2_t *)((char *)this + 768);
  *(_OWORD *)((char *)this + 792) = 0u;
  *(_OWORD *)((char *)this + 776) = 0u;
  *((void *)this + 96) = &unk_1F0A51768;
  *((unsigned char *)this + 808) = 0;
  long long v13 = (char *)this + 840;
  long long v14 = (char *)this + 816;
  *((_OWORD *)this + 52) = 0u;
  *((_OWORD *)this + 53) = 0u;
  *((_OWORD *)this + 51) = 0u;
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)this + 2) = (*(uint64_t (**)(void))(**((void **)a2 + 2) + 16))(*((void *)a2 + 2));
  *((void *)this + 3) = (*(uint64_t (**)(void))(**((void **)a2 + 3) + 16))(*((void *)a2 + 3));
  *((void *)this + 4) = (*(uint64_t (**)(void))(**((void **)a2 + 4) + 16))(*((void *)a2 + 4));
  *((void *)this + 5) = (*(uint64_t (**)(void))(**((void **)a2 + 5) + 16))(*((void *)a2 + 5));
  kaldi::CuMatrix<float>::operator=(v23, (int32x2_t *)a2 + 6);
  kaldi::CuMatrix<float>::operator=(v22, (int32x2_t *)a2 + 12);
  kaldi::CuMatrix<float>::operator=(v21, (int32x2_t *)a2 + 18);
  kaldi::CuMatrix<float>::operator=(v20, (int32x2_t *)a2 + 24);
  kaldi::CuMatrix<float>::operator=(v19, (int32x2_t *)a2 + 30);
  kaldi::CuMatrix<float>::operator=(v18, (int32x2_t *)a2 + 36);
  kaldi::CuMatrix<float>::operator=(v4, (int32x2_t *)a2 + 42);
  kaldi::CuMatrix<float>::operator=(v5, (int32x2_t *)a2 + 48);
  kaldi::CuMatrix<float>::operator=(v6, (int32x2_t *)a2 + 54);
  kaldi::CuMatrix<float>::operator=(v7, (int32x2_t *)a2 + 60);
  kaldi::CuMatrix<float>::operator=(v8, (int32x2_t *)a2 + 66);
  kaldi::CuMatrix<float>::operator=(v9, (int32x2_t *)a2 + 72);
  kaldi::CuVector<float>::operator=((uint64_t)v17, (uint64_t)a2 + 624);
  kaldi::CuMatrix<float>::operator=(v10, (int32x2_t *)a2 + 82);
  kaldi::CuVector<float>::operator=((uint64_t)v16, (uint64_t)a2 + 704);
  kaldi::CuVector<float>::operator=((uint64_t)v15, (uint64_t)a2 + 736);
  kaldi::CuMatrix<float>::operator=(v11, (int32x2_t *)a2 + 96);
  if (this != a2)
  {
    std::vector<std::vector<int>>::__assign_with_size[abi:ne180100]<std::vector<int>*,std::vector<int>*>((uint64_t)v14, *((void *)a2 + 102), *((void *)a2 + 103), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 103) - *((void *)a2 + 102)) >> 3));
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v13, *((char **)a2 + 105), *((void *)a2 + 106), (uint64_t)(*((void *)a2 + 106) - *((void *)a2 + 105)) >> 2);
  }
  *((_DWORD *)this + 216) = *((_DWORD *)a2 + 216);
  *((unsigned char *)this + 868) = *((unsigned char *)a2 + 868);
  return this;
}

void sub_1B21282C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, kaldi::nnet1::UpdatableComponent *a10, void **a11, uint64_t a12, void *a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  long long v32 = *a11;
  if (*a11)
  {
    *((void *)v21 + 106) = v32;
    operator delete(v32);
  }
  *(void *)(v30 - 88) = a12;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 88));
  kaldi::CuMatrix<float>::~CuMatrix(v28);
  kaldi::CuVector<float>::~CuVector(a13);
  kaldi::CuVector<float>::~CuVector(a14);
  kaldi::CuMatrix<float>::~CuMatrix(v27);
  kaldi::CuVector<float>::~CuVector(a15);
  kaldi::CuMatrix<float>::~CuMatrix(v26);
  kaldi::CuMatrix<float>::~CuMatrix(v25);
  kaldi::CuMatrix<float>::~CuMatrix(v24);
  kaldi::CuMatrix<float>::~CuMatrix(v23);
  kaldi::CuMatrix<float>::~CuMatrix(v22);
  kaldi::CuMatrix<float>::~CuMatrix(v29);
  kaldi::CuMatrix<float>::~CuMatrix(a16);
  kaldi::CuMatrix<float>::~CuMatrix(a17);
  kaldi::CuMatrix<float>::~CuMatrix(a18);
  kaldi::CuMatrix<float>::~CuMatrix(a19);
  kaldi::CuMatrix<float>::~CuMatrix(a20);
  kaldi::CuMatrix<float>::~CuMatrix(a21);
  quasar::Bitmap::~Bitmap(v21);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(a10);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::GlobalAttentionComponent::~GlobalAttentionComponent(kaldi::nnet1::GlobalAttentionComponent *this, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v3 - 2std::__tree<int>::destroy((uint64_t)this + 24, *((void **)this + 4)) = a2[3];
  uint64_t v4 = *((void *)this + 2);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 3);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)this + 4);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *((void *)this + 5);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = (void *)*((void *)this + 105);
  if (v8)
  {
    *((void *)this + 106) = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void **)((char *)this + 816);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v9);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 768);
  kaldi::CuVector<float>::~CuVector((void *)this + 92);
  kaldi::CuVector<float>::~CuVector((void *)this + 88);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 656);
  kaldi::CuVector<float>::~CuVector((void *)this + 78);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 576);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 528);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 480);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 432);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 384);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 336);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 288);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 240);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 192);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 144);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 96);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 48);
  quasar::Bitmap::~Bitmap(this);
}

void kaldi::nnet1::GlobalAttentionComponent::~GlobalAttentionComponent(kaldi::nnet1::GlobalAttentionComponent *this)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 872));
}

{
  uint64_t v1;
  uint64_t vars8;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 872));
  JUMPOUT(0x1B3EA8670);
}

void virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::~GlobalAttentionComponent(kaldi::nnet1::GlobalAttentionComponent *this)
{
  uint64_t v2 = (kaldi::nnet1::UpdatableComponent *)(v1 + 872);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v2);
}

{
  kaldi::nnet1::GlobalAttentionComponent::~GlobalAttentionComponent((kaldi::nnet1::GlobalAttentionComponent *)((char *)this + *(void *)(*(void *)this - 24)));
}

void kaldi::nnet1::GlobalAttentionComponent::Copy(kaldi::nnet1::GlobalAttentionComponent *this)
{
}

void sub_1B21286F8(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B1C40813A3384);
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::Copy(kaldi::nnet1::GlobalAttentionComponent *this)
{
  kaldi::nnet1::GlobalAttentionComponent::Copy((kaldi::nnet1::GlobalAttentionComponent *)((char *)this
                                                                                        + *(void *)(*(void *)this - 32)));
}

uint64_t kaldi::nnet1::GlobalAttentionComponent::GetType(kaldi::nnet1::GlobalAttentionComponent *this)
{
  return 282;
}

uint64_t virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::GetType(kaldi::nnet1::GlobalAttentionComponent *this)
{
  return 282;
}

void kaldi::nnet1::GlobalAttentionComponent::InitData(void *a1, uint64_t *a2, uint64_t a3)
{
  memset(v59, 0, 24);
  uint64_t v4 = a2 + 4;
  uint64_t v5 = (char *)a1 + 12;
  uint64_t v6 = a1 + 1;
  while (1)
  {
    if ((*((unsigned char *)v4 + *(void *)(*a2 - 24)) & 2) != 0) {
      goto LABEL_44;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)v59);
    if (SHIBYTE(v59[2]) < 0) {
      break;
    }
    if (HIBYTE(v59[2]) == 15)
    {
      BOOL v14 = v59[0] == (void *)0x6574744178614D3CLL && *(void **)((char *)v59 + 7) == (void *)0x3E736E6F69746E65;
      uint64_t v9 = (uint64_t)v5;
      if (!v14)
      {
LABEL_35:
        if (HIBYTE(v59[2]) == 12)
        {
          long long v15 = v59;
          goto LABEL_39;
        }
        goto LABEL_65;
      }
    }
    else
    {
      if (HIBYTE(v59[2]) != 22) {
        goto LABEL_35;
      }
      BOOL v8 = v59[0] == (void *)0x53656372756F533CLL
        && v59[1] == (void *)0x656D694465746174
        && *(void **)((char *)&v59[1] + 6) == (void *)0x3E6E6F69736E656DLL;
      uint64_t v9 = (uint64_t)v6;
      if (!v8) {
        goto LABEL_65;
      }
    }
LABEL_34:
    kaldi::ReadBasicType<int>(a2, 0, v9);
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  uint64_t v10 = v59[1];
  if (v59[1] != (void *)15)
  {
    if (v59[1] != (void *)22) {
      goto LABEL_37;
    }
    BOOL v11 = *(void *)v59[0] == 0x53656372756F533CLL && *((void *)v59[0] + 1) == 0x656D694465746174;
    BOOL v12 = v11 && *(void *)((char *)v59[0] + 14) == 0x3E6E6F69736E656DLL;
    uint64_t v9 = (uint64_t)v6;
    if (!v12) {
      goto LABEL_37;
    }
    goto LABEL_34;
  }
  BOOL v13 = *(void *)v59[0] == 0x6574744178614D3CLL && *(void *)((char *)v59[0] + 7) == 0x3E736E6F69746E65;
  uint64_t v9 = (uint64_t)v5;
  if (v13) {
    goto LABEL_34;
  }
  uint64_t v10 = v59[1];
LABEL_37:
  if (v10 != (void *)12) {
    goto LABEL_65;
  }
  long long v15 = (void **)v59[0];
LABEL_39:
  long long v16 = *v15;
  int v17 = *((_DWORD *)v15 + 2);
  if (v16 != (void *)0x6E6F706D6F432F3CLL || v17 != 1047817829)
  {
LABEL_65:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v58);
    long long v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"Unknown token ", 14);
    if (SHIBYTE(v59[2]) >= 0) {
      uint64_t v36 = v59;
    }
    else {
      uint64_t v36 = (void **)v59[0];
    }
    if (SHIBYTE(v59[2]) >= 0) {
      uint64_t v37 = HIBYTE(v59[2]);
    }
    else {
      uint64_t v37 = (uint64_t)v59[1];
    }
    int v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)v36, v37);
    uint64_t v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)", a typo in config?", 19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)" (SourceStateDimension|MaxAttentions)", 37);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v58);
  }
LABEL_44:
  uint64_t v19 = a1[2];
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  uint64_t v20 = a1[3];
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  uint64_t v21 = a1[4];
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  uint64_t v22 = a1[5];
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
  std::string __p = 0;
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  uint64_t v54 = 0;
  kaldi::ExpectToken(a2, 0, "<SourceDotTransform>");
  kaldi::ReadToken(a2, 0, (uint64_t)&__p);
  uint64_t v23 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::MarkerToComponentType((std::string::size_type *)&__p);
  kaldi::ExpectToken(a2, 0, "<InputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v54 + 4);
  kaldi::ExpectToken(a2, 0, "<OutputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v54);
  kaldi::nnet1::Component::NewComponentOfType(v23);
  if (!v24)
  {
    a1[2] = 0;
LABEL_73:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v58);
    uint64_t v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"this is not an updatable component, you used ", 45);
    if (v57 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if (v57 >= 0) {
      uint64_t v42 = HIBYTE(v57);
    }
    else {
      uint64_t v42 = v56;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)p_p, v42);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v58);
  }
  a1[2] = v25;
  if (!v25) {
    goto LABEL_73;
  }
  (*(void (**)(void *, uint64_t *, uint64_t))(*(void *)v25 + 96))(v25, a2, a3);
  kaldi::ExpectToken(a2, 0, "<TargetDotTransform>");
  kaldi::ReadToken(a2, 0, (uint64_t)&__p);
  uint64_t v26 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::MarkerToComponentType((std::string::size_type *)&__p);
  kaldi::ExpectToken(a2, 0, "<InputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v54 + 4);
  kaldi::ExpectToken(a2, 0, "<OutputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v54);
  kaldi::nnet1::Component::NewComponentOfType(v26);
  if (!v27)
  {
    a1[3] = 0;
LABEL_81:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v58);
    int v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"this is not an updatable component, you used ", 45);
    if (v57 >= 0) {
      uint64_t v44 = &__p;
    }
    else {
      uint64_t v44 = __p;
    }
    if (v57 >= 0) {
      uint64_t v45 = HIBYTE(v57);
    }
    else {
      uint64_t v45 = v56;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)v44, v45);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v58);
  }
  a1[3] = v28;
  if (!v28) {
    goto LABEL_81;
  }
  (*(void (**)(void *, uint64_t *, uint64_t))(*(void *)v28 + 96))(v28, a2, a3);
  kaldi::ExpectToken(a2, 0, "<SourceAddTransform>");
  kaldi::ReadToken(a2, 0, (uint64_t)&__p);
  uint64_t v29 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::MarkerToComponentType((std::string::size_type *)&__p);
  kaldi::ExpectToken(a2, 0, "<InputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v54 + 4);
  kaldi::ExpectToken(a2, 0, "<OutputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v54);
  kaldi::nnet1::Component::NewComponentOfType(v29);
  if (!v30)
  {
    a1[4] = 0;
LABEL_89:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v58);
    uint64_t v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"this is not an updatable component, you used ", 45);
    if (v57 >= 0) {
      unint64_t v47 = &__p;
    }
    else {
      unint64_t v47 = __p;
    }
    if (v57 >= 0) {
      uint64_t v48 = HIBYTE(v57);
    }
    else {
      uint64_t v48 = v56;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)v47, v48);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v58);
  }
  a1[4] = v31;
  if (!v31) {
    goto LABEL_89;
  }
  (*(void (**)(void *, uint64_t *, uint64_t))(*(void *)v31 + 96))(v31, a2, a3);
  kaldi::ExpectToken(a2, 0, "<TargetAddTransform>");
  kaldi::ReadToken(a2, 0, (uint64_t)&__p);
  long long v32 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::MarkerToComponentType((std::string::size_type *)&__p);
  kaldi::ExpectToken(a2, 0, "<InputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v54 + 4);
  kaldi::ExpectToken(a2, 0, "<OutputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v54);
  kaldi::nnet1::Component::NewComponentOfType(v32);
  if (!v33)
  {
    a1[5] = 0;
LABEL_97:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v58);
    std::string::size_type v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"this is not an updatable component, you used ", 45);
    if (v57 >= 0) {
      uint64_t v50 = &__p;
    }
    else {
      uint64_t v50 = __p;
    }
    if (v57 >= 0) {
      uint64_t v51 = HIBYTE(v57);
    }
    else {
      uint64_t v51 = v56;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)v50, v51);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v58);
  }
  a1[5] = v34;
  if (!v34) {
    goto LABEL_97;
  }
  (*(void (**)(void *, uint64_t *, uint64_t))(*(void *)v34 + 96))(v34, a2, a3);
  kaldi::nnet1::GlobalAttentionComponent::Check((uint64_t)a1);
  if (SHIBYTE(v57) < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v59[2]) < 0) {
    operator delete(v59[0]);
  }
}

uint64_t kaldi::nnet1::GlobalAttentionComponent::Check(uint64_t this)
{
  if (!*(unsigned char *)(this + 868))
  {
    if (*(int *)(this + 12) < 1 || (int v1 = *(_DWORD *)(this + 8), v1 <= 0))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"component is not initialized, max attention is ", 47);
      uint64_t v9 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", source state dimension is ", 28);
      std::ostream::operator<<();
    }
    else
    {
      uint64_t v2 = *(void *)(this + 16);
      if (v1 == *(_DWORD *)(v2 + 8))
      {
        uint64_t v3 = *(void *)(this + 32);
        if (v1 == *(_DWORD *)(v3 + 8))
        {
          uint64_t v4 = this + *(void *)(*(void *)this - 24);
          int v5 = *(_DWORD *)(v4 + 8);
          uint64_t v6 = *(void *)(this + 24);
          if (v5 == *(_DWORD *)(v6 + 8))
          {
            uint64_t v7 = *(void *)(this + 40);
            if (v5 == *(_DWORD *)(v7 + 8))
            {
              if (*(_DWORD *)(v2 + 12) == *(_DWORD *)(v6 + 12))
              {
                int v8 = *(_DWORD *)(v3 + 12);
                if (v8 == *(_DWORD *)(v7 + 12))
                {
                  if (*(_DWORD *)(v4 + 12) == v8)
                  {
                    *(unsigned char *)(this + 868) = 1;
                    return this;
                  }
                  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"the source/target add transform has output dim ", 47);
                  long long v16 = (void *)std::ostream::operator<<();
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" , but the component has output dim ", 36);
                  std::ostream::operator<<();
                }
                else
                {
                  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"the source and target add transform has different output dim ", 61);
                  long long v15 = (void *)std::ostream::operator<<();
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" vs ", 4);
                  std::ostream::operator<<();
                }
              }
              else
              {
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"the source and target dot transform has different output dim ", 61);
                BOOL v14 = (void *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" vs ", 4);
                std::ostream::operator<<();
              }
            }
            else
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"the component has input dim ", 28);
              BOOL v13 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" , but the target add transform has input dim ", 46);
              std::ostream::operator<<();
            }
          }
          else
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"the component has input dim ", 28);
            BOOL v12 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" , but the target dot transform has input dim ", 46);
            std::ostream::operator<<();
          }
        }
        else
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"source state dimension is ", 26);
          BOOL v11 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" , but the source add transform has input dim ", 46);
          std::ostream::operator<<();
        }
      }
      else
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"source state dimension is ", 26);
        uint64_t v10 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" , but the source dot transform has input dim ", 46);
        std::ostream::operator<<();
      }
    }
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17);
  }
  return this;
}

void virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::InitData(void *a1, uint64_t *a2, uint64_t a3)
{
}

void kaldi::nnet1::GlobalAttentionComponent::ReadData(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v36);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"Reading attention model", 23);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v36);
  }
  memset(__p, 0, sizeof(__p));
  while (1)
  {
    if (kaldi::Peek(a2, a3) != 60) {
      goto LABEL_46;
    }
    kaldi::ReadToken(a2, a3, (uint64_t)__p);
    if (SHIBYTE(__p[2]) < 0) {
      break;
    }
    if (HIBYTE(__p[2]) == 15)
    {
      BOOL v14 = __p[0] == (void *)0x6574744178614D3CLL && *(void **)((char *)__p + 7) == (void *)0x3E736E6F69746E65;
      uint64_t v9 = (uint64_t)a1 + 12;
      if (!v14)
      {
LABEL_37:
        if (HIBYTE(__p[2]) == 12)
        {
          long long v15 = __p;
          goto LABEL_41;
        }
        goto LABEL_65;
      }
    }
    else
    {
      if (HIBYTE(__p[2]) != 22) {
        goto LABEL_37;
      }
      BOOL v8 = __p[0] == (void *)0x53656372756F533CLL
        && __p[1] == (void *)0x656D694465746174
        && *(void **)((char *)&__p[1] + 6) == (void *)0x3E6E6F69736E656DLL;
      uint64_t v9 = (uint64_t)(a1 + 1);
      if (!v8) {
        goto LABEL_65;
      }
    }
LABEL_36:
    kaldi::ReadBasicType<int>(a2, a3, v9);
  }
  uint64_t v10 = __p[1];
  if (__p[1] != (void *)15)
  {
    if (__p[1] != (void *)22) {
      goto LABEL_39;
    }
    BOOL v11 = *(void *)__p[0] == 0x53656372756F533CLL && *((void *)__p[0] + 1) == 0x656D694465746174;
    BOOL v12 = v11 && *(void *)((char *)__p[0] + 14) == 0x3E6E6F69736E656DLL;
    uint64_t v9 = (uint64_t)(a1 + 1);
    if (!v12) {
      goto LABEL_39;
    }
    goto LABEL_36;
  }
  BOOL v13 = *(void *)__p[0] == 0x6574744178614D3CLL && *(void *)((char *)__p[0] + 7) == 0x3E736E6F69746E65;
  uint64_t v9 = (uint64_t)a1 + 12;
  if (v13) {
    goto LABEL_36;
  }
  uint64_t v10 = __p[1];
LABEL_39:
  if (v10 != (void *)12) {
    goto LABEL_65;
  }
  long long v15 = (void **)__p[0];
LABEL_41:
  long long v16 = *v15;
  int v17 = *((_DWORD *)v15 + 2);
  if (v16 != (void *)0x6E6F706D6F432F3CLL || v17 != 1047817829)
  {
LABEL_65:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v36);
    long long v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"Unrecognized token ", 19);
    if (SHIBYTE(__p[2]) >= 0) {
      long long v32 = __p;
    }
    else {
      long long v32 = (void **)__p[0];
    }
    if (SHIBYTE(__p[2]) >= 0) {
      uint64_t v33 = HIBYTE(__p[2]);
    }
    else {
      uint64_t v33 = (uint64_t)__p[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v32, v33);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v36);
  }
LABEL_46:
  uint64_t v19 = a1[2];
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  uint64_t v20 = a1[3];
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  uint64_t v21 = a1[4];
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  uint64_t v22 = a1[5];
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
  kaldi::ExpectToken(a2, a3, "<SourceDotTransform>");
  uint64_t v23 = (const void *)kaldi::nnet1::Component::Read(a2, a3, a4);
  if (!v23)
  {
    a1[2] = 0;
LABEL_73:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v36);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"read source dot transform failed", 32);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v36);
  }
  a1[2] = v24;
  if (!v24) {
    goto LABEL_73;
  }
  kaldi::ExpectToken(a2, a3, "</Component>");
  kaldi::ExpectToken(a2, a3, "<TargetDotTransform>");
  uint64_t v25 = (const void *)kaldi::nnet1::Component::Read(a2, a3, a4);
  if (!v25)
  {
    a1[3] = 0;
LABEL_75:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v36);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"read target dot transform failed", 32);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v36);
  }
  a1[3] = v26;
  if (!v26) {
    goto LABEL_75;
  }
  kaldi::ExpectToken(a2, a3, "</Component>");
  kaldi::ExpectToken(a2, a3, "<SourceAddTransform>");
  uint64_t v27 = (const void *)kaldi::nnet1::Component::Read(a2, a3, a4);
  if (!v27)
  {
    a1[4] = 0;
LABEL_77:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v36);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"read source add transform failed", 32);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v36);
  }
  a1[4] = v28;
  if (!v28) {
    goto LABEL_77;
  }
  kaldi::ExpectToken(a2, a3, "</Component>");
  kaldi::ExpectToken(a2, a3, "<TargetAddTransform>");
  uint64_t v29 = (const void *)kaldi::nnet1::Component::Read(a2, a3, a4);
  if (!v29)
  {
    a1[5] = 0;
LABEL_79:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v36);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"read target dot transform failed", 32);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v36);
  }
  a1[5] = v30;
  if (!v30) {
    goto LABEL_79;
  }
  kaldi::ExpectToken(a2, a3, "</Component>");
  kaldi::nnet1::GlobalAttentionComponent::Check((uint64_t)a1);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B2129A60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::ReadData(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
}

void *kaldi::nnet1::GlobalAttentionComponent::WriteConfig(int a1, void *a2, int a3)
{
  kaldi::WriteToken(a2, a3, "<SourceStateDimension>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<MaxAttentions>");
  kaldi::WriteBasicType<int>(a2, a3);
  return kaldi::WriteToken(a2, a3, "</Component>");
}

void *virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::WriteConfig(void *a1, void *a2, int a3)
{
  return kaldi::nnet1::GlobalAttentionComponent::WriteConfig(a1 + *(void *)(*a1 - 184), a2, a3);
}

void *kaldi::nnet1::GlobalAttentionComponent::WriteData(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(uint64_t *))(*a1 + 96))(a1);
  kaldi::WriteToken(a2, a3, "<SourceDotTransform>");
  kaldi::nnet1::Component::Write(a1[2], a2, a3, a4);
  kaldi::WriteToken(a2, a3, "</Component>");
  kaldi::WriteToken(a2, a3, "<TargetDotTransform>");
  kaldi::nnet1::Component::Write(a1[3], a2, a3, a4);
  kaldi::WriteToken(a2, a3, "</Component>");
  kaldi::WriteToken(a2, a3, "<SourceAddTransform>");
  kaldi::nnet1::Component::Write(a1[4], a2, a3, a4);
  kaldi::WriteToken(a2, a3, "</Component>");
  kaldi::WriteToken(a2, a3, "<TargetAddTransform>");
  kaldi::nnet1::Component::Write(a1[5], a2, a3, a4);
  return kaldi::WriteToken(a2, a3, "</Component>");
}

void *virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::WriteData(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return kaldi::nnet1::GlobalAttentionComponent::WriteData((void *)((char *)a1 + *(void *)(*a1 - 120)), a2, a3, a4);
}

uint64_t kaldi::nnet1::GlobalAttentionComponent::NumParams(kaldi::nnet1::GlobalAttentionComponent *this)
{
  int v2 = (*(uint64_t (**)(void))(**((void **)this + 2) + 176))(*((void *)this + 2));
  int v3 = (*(uint64_t (**)(void))(**((void **)this + 3) + 176))(*((void *)this + 3)) + v2;
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 4) + 176))(*((void *)this + 4));
  return v3 + v4 + (*(unsigned int (**)(void))(**((void **)this + 5) + 176))(*((void *)this + 5));
}

uint64_t virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::NumParams(kaldi::nnet1::GlobalAttentionComponent *this)
{
  return kaldi::nnet1::GlobalAttentionComponent::NumParams((kaldi::nnet1::GlobalAttentionComponent *)((char *)this + *(void *)(*(void *)this - 192)));
}

void kaldi::nnet1::GlobalAttentionComponent::GetParams(void **a1, void **a2)
{
  uint64_t v4 = ((uint64_t (*)(void **))(*a1)[14])(a1);
  kaldi::Vector<float>::Resize(a2, v4, 1);
  BOOL v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  (*(void (**)(void *, const void **))(*a1[2] + 184))(a1[2], &v11);
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  BOOL v8 = (char *)*a2;
  LODWORD(v9) = v12;
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v8, &v11);
  uint64_t v5 = (int)v12;
  (*(void (**)(void *, const void **))(*a1[3] + 184))(a1[3], &v11);
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  BOOL v8 = (char *)*a2 + 4 * v5;
  LODWORD(v9) = v12;
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v8, &v11);
  int v6 = v12;
  (*(void (**)(void *, const void **))(*a1[4] + 184))(a1[4], &v11);
  LODWORD(v5) = v6 + v5;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  BOOL v8 = (char *)*a2 + 4 * (int)v5;
  LODWORD(v9) = v12;
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v8, &v11);
  int v7 = v12;
  (*(void (**)(void *, const void **))(*a1[5] + 184))(a1[5], &v11);
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  BOOL v8 = (char *)*a2 + 4 * v7 + 4 * (int)v5;
  LODWORD(v9) = v12;
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v8, &v11);
  kaldi::Vector<float>::Destroy((uint64_t)&v11);
}

void sub_1B2129F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::GetParams(void *a1, void **a2)
{
}

uint64_t kaldi::nnet1::GlobalAttentionComponent::SetParams(void *a1, uint64_t *a2)
{
  uint64_t v4 = a1[2];
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 176))(v4);
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v13 = *a2;
  LODWORD(v14) = v5;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v4 + 192))(v4, &v13);
  LODWORD(v4) = (*(uint64_t (**)(void))(*(void *)a1[2] + 176))(a1[2]);
  uint64_t v6 = a1[3];
  int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 176))(v6);
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v13 = *a2 + 4 * (int)v4;
  LODWORD(v14) = v7;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v6 + 192))(v6, &v13);
  LODWORD(v6) = (*(uint64_t (**)(void))(*(void *)a1[3] + 176))(a1[3]) + v4;
  uint64_t v8 = a1[4];
  int v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 176))(v8);
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v13 = *a2 + 4 * (int)v6;
  LODWORD(v14) = v9;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v8 + 192))(v8, &v13);
  LODWORD(v6) = (*(uint64_t (**)(void))(*(void *)a1[4] + 176))(a1[4]) + v6;
  uint64_t v10 = a1[5];
  int v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 176))(v10);
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v13 = *a2 + 4 * (int)v6;
  LODWORD(v14) = v11;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v10 + 192))(v10, &v13);
  return (*(uint64_t (**)(void))(*(void *)a1[5] + 176))(a1[5]);
}

uint64_t virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::SetParams(void *a1, uint64_t *a2)
{
  return kaldi::nnet1::GlobalAttentionComponent::SetParams((void *)((char *)a1 + *(void *)(*a1 - 208)), a2);
}

float kaldi::nnet1::GlobalAttentionComponent::SumParams(kaldi::nnet1::GlobalAttentionComponent *this)
{
  float v2 = (*(float (**)(void))(**((void **)this + 2) + 208))(*((void *)this + 2));
  float v3 = v2 + (*(float (**)(void))(**((void **)this + 3) + 208))(*((void *)this + 3));
  float v4 = v3 + (*(float (**)(void))(**((void **)this + 4) + 208))(*((void *)this + 4));
  return v4 + (*(float (**)(void))(**((void **)this + 5) + 208))(*((void *)this + 5));
}

float virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::SumParams(kaldi::nnet1::GlobalAttentionComponent *this)
{
  return kaldi::nnet1::GlobalAttentionComponent::SumParams((kaldi::nnet1::GlobalAttentionComponent *)((char *)this + *(void *)(*(void *)this - 224)));
}

uint64_t kaldi::nnet1::GlobalAttentionComponent::PerturbParams(kaldi::nnet1::GlobalAttentionComponent *this, float a2)
{
  (*(void (**)(void))(**((void **)this + 2) + 216))(*((void *)this + 2));
  (*(void (**)(void, float))(**((void **)this + 3) + 216))(*((void *)this + 3), a2);
  (*(void (**)(void, float))(**((void **)this + 4) + 216))(*((void *)this + 4), a2);
  float v4 = *(uint64_t (**)(__n128))(**((void **)this + 5) + 216);
  v5.n128_f32[0] = a2;
  return v4(v5);
}

uint64_t virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::PerturbParams(kaldi::nnet1::GlobalAttentionComponent *this, float a2)
{
  return kaldi::nnet1::GlobalAttentionComponent::PerturbParams((kaldi::nnet1::GlobalAttentionComponent *)((char *)this + *(void *)(*(void *)this - 232)), a2);
}

uint64_t kaldi::nnet1::GlobalAttentionComponent::Info(kaldi::nnet1::GlobalAttentionComponent *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v34);
  (*(void (**)(kaldi::nnet1::GlobalAttentionComponent *, void *, void))(*(void *)this + 96))(this, v34, 0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"\n## Source Dot Transform: input-dim ", 36);
  float v2 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", output-dim ", 13);
  float v3 = (void *)std::ostream::operator<<();
  float v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"\n", 1);
  (*(void (**)(void **__return_ptr))(**((void **)this + 2) + 64))(v32);
  if ((v33 & 0x80u) == 0) {
    __n128 v5 = v32;
  }
  else {
    __n128 v5 = (void **)v32[0];
  }
  if ((v33 & 0x80u) == 0) {
    uint64_t v6 = v33;
  }
  else {
    uint64_t v6 = (uint64_t)v32[1];
  }
  int v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v5, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"\n## Target Dot Transform: input-dim ", 36);
  uint64_t v8 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)", output-dim ", 13);
  int v9 = (void *)std::ostream::operator<<();
  uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"\n", 1);
  (*(void (**)(void **__return_ptr))(**((void **)this + 3) + 64))(v30);
  if ((v31 & 0x80u) == 0) {
    int v11 = v30;
  }
  else {
    int v11 = (void **)v30[0];
  }
  if ((v31 & 0x80u) == 0) {
    uint64_t v12 = v31;
  }
  else {
    uint64_t v12 = (uint64_t)v30[1];
  }
  uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"\n## Source Add Transform: input-dim ", 36);
  uint64_t v14 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", output-dim ", 13);
  uint64_t v15 = (void *)std::ostream::operator<<();
  long long v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"\n", 1);
  (*(void (**)(void **__return_ptr))(**((void **)this + 4) + 64))(v28);
  if ((v29 & 0x80u) == 0) {
    int v17 = v28;
  }
  else {
    int v17 = (void **)v28[0];
  }
  if ((v29 & 0x80u) == 0) {
    uint64_t v18 = v29;
  }
  else {
    uint64_t v18 = (uint64_t)v28[1];
  }
  uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"\n## Target Add Transform: input-dim ", 36);
  uint64_t v20 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)", output-dim ", 13);
  uint64_t v21 = (void *)std::ostream::operator<<();
  uint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"\n", 1);
  (*(void (**)(void **__return_ptr))(**((void **)this + 5) + 64))(__p);
  if ((v27 & 0x80u) == 0) {
    uint64_t v23 = __p;
  }
  else {
    uint64_t v23 = (void **)__p[0];
  }
  if ((v27 & 0x80u) == 0) {
    uint64_t v24 = v27;
  }
  else {
    uint64_t v24 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v23, v24);
  if ((char)v27 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v29 < 0) {
    operator delete(v28[0]);
  }
  if ((char)v31 < 0) {
    operator delete(v30[0]);
  }
  if ((char)v33 < 0) {
    operator delete(v32[0]);
  }
  std::stringbuf::str();
  v34[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v34 + *(void *)(v34[0] - 2std::__tree<int>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v34[1] = MEMORY[0x1E4FBA470] + 16;
  if (v35 < 0) {
    operator delete((void *)v34[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](&v36);
}

void sub_1B212A874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  std::ostringstream::~ostringstream((uint64_t)&a34);
  _Unwind_Resume(a1);
}

uint64_t virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::Info(kaldi::nnet1::GlobalAttentionComponent *this)
{
  return kaldi::nnet1::GlobalAttentionComponent::Info((kaldi::nnet1::GlobalAttentionComponent *)((char *)this
                                                                                               + *(void *)(*(void *)this - 80)));
}

void kaldi::nnet1::GlobalAttentionComponent::InfoGradient(kaldi::nnet1::GlobalAttentionComponent *this@<X0>, std::string *a2@<X8>)
{
  (*(void (**)(std::string *__return_ptr))(**((void **)this + 2) + 72))(&v27);
  (*(void (**)(void **__return_ptr))(**((void **)this + 3) + 72))(v25);
  if ((v26 & 0x80u) == 0) {
    float v4 = v25;
  }
  else {
    float v4 = (void **)v25[0];
  }
  if ((v26 & 0x80u) == 0) {
    std::string::size_type v5 = v26;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)v25[1];
  }
  uint64_t v6 = std::string::append(&v27, (const std::string::value_type *)v4, v5);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  (*(void (**)(void **__return_ptr))(**((void **)this + 4) + 72))(v23);
  if ((v24 & 0x80u) == 0) {
    uint64_t v8 = v23;
  }
  else {
    uint64_t v8 = (void **)v23[0];
  }
  if ((v24 & 0x80u) == 0) {
    std::string::size_type v9 = v24;
  }
  else {
    std::string::size_type v9 = (std::string::size_type)v23[1];
  }
  uint64_t v10 = std::string::append(&v28, (const std::string::value_type *)v8, v9);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  (*(void (**)(void **__return_ptr))(**((void **)this + 5) + 72))(v21);
  if ((v22 & 0x80u) == 0) {
    uint64_t v12 = v21;
  }
  else {
    uint64_t v12 = (void **)v21[0];
  }
  if ((v22 & 0x80u) == 0) {
    std::string::size_type v13 = v22;
  }
  else {
    std::string::size_type v13 = (std::string::size_type)v21[1];
  }
  uint64_t v14 = std::string::append(&v29, (const std::string::value_type *)v12, v13);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "\n");
  if ((v20 & 0x80u) == 0) {
    long long v16 = __p;
  }
  else {
    long long v16 = (void **)__p[0];
  }
  if ((v20 & 0x80u) == 0) {
    std::string::size_type v17 = v20;
  }
  else {
    std::string::size_type v17 = (std::string::size_type)__p[1];
  }
  uint64_t v18 = std::string::append(&v30, (const std::string::value_type *)v16, v17);
  *a2 = *v18;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if ((char)v20 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if ((char)v22 < 0) {
    operator delete(v21[0]);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if ((char)v24 < 0) {
    operator delete(v23[0]);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  if ((char)v26 < 0) {
    operator delete(v25[0]);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
}

void sub_1B212AB7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v45 - 41) < 0) {
    operator delete(*(void **)(v45 - 64));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v45 - 73) < 0) {
    operator delete(*(void **)(v45 - 96));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  _Unwind_Resume(exception_object);
}

void virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::InfoGradient(kaldi::nnet1::GlobalAttentionComponent *this@<X0>, std::string *a2@<X8>)
{
}

uint64_t kaldi::nnet1::GlobalAttentionComponent::SetTrainOptions(kaldi::nnet1::GlobalAttentionComponent *this, const kaldi::nnet1::NnetTrainOptions *a2)
{
  float v3 = (char *)this + *(void *)(*(void *)this - 24);
  long long v4 = *(_OWORD *)((char *)a2 + 8);
  *(_OWORD *)(v3 + 71) = *(_OWORD *)((char *)a2 + 23);
  *(_OWORD *)(v3 + 56) = v4;
  (*(void (**)(void))(**((void **)this + 2) + 264))();
  (*(void (**)(void))(**((void **)this + 3) + 264))();
  (*(void (**)(void))(**((void **)this + 4) + 264))();
  std::string::size_type v5 = *(uint64_t (**)(void))(**((void **)this + 5) + 264);
  return v5();
}

uint64_t virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::SetTrainOptions(kaldi::nnet1::GlobalAttentionComponent *this, const kaldi::nnet1::NnetTrainOptions *a2)
{
  return kaldi::nnet1::GlobalAttentionComponent::SetTrainOptions((kaldi::nnet1::GlobalAttentionComponent *)((char *)this + *(void *)(*(void *)this - 280)), a2);
}

void kaldi::nnet1::GlobalAttentionComponent::SetSourceStates(uint64_t a1, int32x2_t *a2, char **a3)
{
  kaldi::nnet1::GlobalAttentionComponent::Check(a1);
  long long v7 = *a3;
  uint64_t v6 = a3[1];
  kaldi::CuMatrix<float>::operator=((int32x2_t *)(a1 + 384), a2);
  if ((char **)(a1 + 840) != a3) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 840), *a3, (uint64_t)a3[1], (a3[1] - *a3) >> 2);
  }
  uint64_t v8 = *a3 + 4;
  int v9 = *(_DWORD *)*a3;
  *(_DWORD *)(a1 + 864) = v9;
  uint64_t v10 = a3[1];
  while (v8 != v10)
  {
    int v11 = *(_DWORD *)v8;
    if (*(_DWORD *)v8 > v9)
    {
      *(_DWORD *)(a1 + 864) = v11;
      int v9 = v11;
    }
    v8 += 4;
  }
  kaldi::nnet1::Component::Propagate(*(_DWORD **)(a1 + 16), a1 + 384, (int32x2_t *)(a1 + 48), 0);
  kaldi::nnet1::Component::Propagate(*(_DWORD **)(a1 + 32), a1 + 384, (int32x2_t *)(a1 + 144), 0);
  std::string __p = 0;
  std::string::size_type v13 = 0;
  uint64_t v14 = 0;
  std::vector<std::vector<int>>::assign((uint64_t *)(a1 + 816), (int)((v6 - v7) >> 2), (uint64_t)&__p);
  if (__p)
  {
    std::string::size_type v13 = __p;
    operator delete(__p);
  }
}

void sub_1B212AECC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::vector<int>>::assign(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6 = (char *)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= a2)
  {
    unint64_t v13 = (a1[1] - (uint64_t)v6) / 24;
    if (v13 >= a2) {
      uint64_t v14 = a2;
    }
    else {
      uint64_t v14 = (a1[1] - (uint64_t)v6) / 24;
    }
    for (; v14; --v14)
    {
      if (v6 != (char *)a3) {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v6, *(char **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
      }
      v6 += 24;
    }
    if (a2 <= v13)
    {
      uint64_t v18 = a1[1];
      uint64_t v19 = *a1 + 24 * a2;
      if (v18 != v19)
      {
        uint64_t v20 = a1[1];
        do
        {
          unsigned __int8 v22 = *(void **)(v20 - 24);
          v20 -= 24;
          uint64_t v21 = v22;
          if (v22)
          {
            *(void *)(v18 - 16) = v21;
            operator delete(v21);
          }
          uint64_t v18 = v20;
        }
        while (v20 != v19);
      }
      a1[1] = v19;
    }
    else
    {
      long long v15 = (void *)a1[1];
      long long v16 = &v15[3 * (a2 - v13)];
      uint64_t v17 = -24 * v13 + 24 * a2;
      do
      {
        *long long v15 = 0;
        v15[1] = 0;
        void v15[2] = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v15, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
        v15 += 3;
        v17 -= 24;
      }
      while (v17);
      a1[1] = (uint64_t)v16;
    }
  }
  else
  {
    std::vector<std::vector<int>>::__vdeallocate(a1);
    if (a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v7 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
    if (v7 <= a2) {
      unint64_t v7 = a2;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555) {
      unint64_t v8 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v8 = v7;
    }
    std::vector<std::string>::__vallocate[abi:ne180100](a1, v8);
    int v9 = (void *)a1[1];
    uint64_t v10 = 3 * a2;
    int v11 = &v9[3 * a2];
    uint64_t v12 = 8 * v10;
    do
    {
      *int v9 = 0;
      v9[1] = 0;
      void v9[2] = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v9, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
      v9 += 3;
      v12 -= 24;
    }
    while (v12);
    a1[1] = (uint64_t)v11;
  }
}

void sub_1B212B0C0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::GlobalAttentionComponent::GetSourceDiffs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  kaldi::nnet1::GlobalAttentionComponent::Check(a1);
  return kaldi::CuMatrix<float>::Swap(a1 + 432, a4);
}

uint64_t kaldi::nnet1::GlobalAttentionComponent::GetCurrentAlignment(uint64_t a1, std::vector<unsigned int> *this)
{
  int v4 = -1431655765 * ((uint64_t)(*(void *)(a1 + 824) - *(void *)(a1 + 816)) >> 3);
  std::vector<int>::resize(this, v4);
  if (v4 >= 1)
  {
    std::vector<unsigned int>::pointer begin = this->__begin_;
    uint64_t v6 = v4;
    unint64_t v7 = (uint64_t *)(*(void *)(a1 + 816) + 8);
    do
    {
      uint64_t v8 = *v7;
      v7 += 3;
      *begin++ = *(_DWORD *)(v8 - 4);
      --v6;
    }
    while (v6);
  }
  return 1;
}

uint64_t kaldi::nnet1::GlobalAttentionComponent::GetOverallAlignment(uint64_t a1, uint64_t a2)
{
  if (a1 + 816 != a2) {
    std::vector<std::vector<int>>::__assign_with_size[abi:ne180100]<std::vector<int>*,std::vector<int>*>(a2, *(void *)(a1 + 816), *(void *)(a1 + 824), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 824) - *(void *)(a1 + 816)) >> 3));
  }
  return 1;
}

uint64_t kaldi::nnet1::GlobalAttentionComponent::SetSourceVectorDimension(uint64_t this, int a2)
{
  if (*(_DWORD *)(this + 8) != a2)
  {
    *(_DWORD *)(this + 8) = a2;
    *(unsigned char *)(this + 868) = 0;
  }
  return this;
}

uint64_t kaldi::nnet1::GlobalAttentionComponent::SetMaxAttentions(uint64_t this, int a2)
{
  if (*(_DWORD *)(this + 12) != a2)
  {
    *(_DWORD *)(this + 12) = a2;
    *(unsigned char *)(this + 868) = 0;
  }
  return this;
}

void kaldi::nnet1::GlobalAttentionComponent::PropagateFnc(int32x2_t *a1, uint64_t a2, uint64_t a3)
{
  kaldi::nnet1::GlobalAttentionComponent::Check((uint64_t)a1);
  int32x2_t v5 = a1[106];
  int32x2_t v6 = a1[105];
  uint64_t v7 = *(unsigned int *)(a2 + 20);
  __int32 v8 = a1[50].i32[1];
  kaldi::nnet1::Component::Propagate(*(_DWORD **)&a1[3], a2, a1 + 12, 0);
  kaldi::nnet1::Component::Propagate(*(_DWORD **)&a1[5], a2, a1 + 24, 0);
  int v9 = (const void **)&a1[78];
  kaldi::CuVector<float>::Resize((uint64_t)&a1[78], a1[50].u32[1], 0);
  uint64_t v10 = a1[50].u32[1];
  memset(v91, 0, 24);
  kaldi::Vector<float>::Resize(v91, v10, 1);
  kaldi::Matrix<float>::Matrix((uint64_t)v89);
  uint64_t v11 = *(void *)&v5 - *(void *)&v6;
  uint64_t v12 = (*(void *)&v5 - *(void *)&v6) >> 2;
  unsigned int v73 = v8 / (int)v12;
  kaldi::CuMatrix<float>::Resize(a1 + 60, v7, (v8 / (int)v12), 1, 0);
  int v71 = (int)v7 / (int)v12;
  if ((int)v7 / (int)v12 >= 1)
  {
    int v75 = 0;
    long long v74 = a1 + 72;
    uint64_t v13 = (int)(v11 >> 2);
    uint64_t v77 = ((unint64_t)v11 >> 2);
    do
    {
      kaldi::CuMatrix<float>::operator=(v74, a1 + 6);
      int v76 = v75 * v12;
      if (a1[108].i32[0] >= 1)
      {
        int v14 = 0;
        __int32 v15 = 0;
        do
        {
          __int32 v16 = a1[75].i32[0];
          uint64_t v17 = *(void *)&a1[73] + 4 * v16 * v14;
          int v18 = a1[75].i32[1] - v16 * v14;
          int32x2_t v19 = a1[76];
          DWORD2(v87) = a1[74].i32[0];
          HIDWORD(v87) = v12;
          *(void *)&long long v88 = __PAIR64__(v18, v16);
          *((int32x2_t *)&v88 + 1) = v19;
          long long v86 = &unk_1F0A472A0;
          *(void *)&long long v87 = v17;
          __int32 v20 = a1[15].i32[0];
          uint64_t v21 = *(void *)&a1[13] + 4 * v20 * v76;
          int v22 = a1[15].i32[1] - v20 * v76;
          int32x2_t v23 = a1[16];
          DWORD2(v84) = a1[14].i32[0];
          HIDWORD(v84) = v12;
          *(void *)&long long v85 = __PAIR64__(v22, v20);
          *((int32x2_t *)&v85 + 1) = v23;
          uint64_t v83 = &unk_1F0A472A0;
          *(void *)&long long v84 = v21;
          kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v86, (uint64_t)&v83);
          uint64_t v83 = &unk_1F0A472A0;
          long long v84 = 0u;
          long long v85 = 0u;
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v83);
          long long v86 = &unk_1F0A472A0;
          long long v87 = 0u;
          long long v88 = 0u;
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v86);
          ++v15;
          v14 += v12;
        }
        while (v15 < a1[108].i32[0]);
      }
      kaldi::CuVectorBase<float>::AddColSumMat((uint64_t)v9, (uint64_t)v74, 1.0, 0.0);
      kaldi::CuVectorBase<float>::CopyToVec<float>(v9, (uint64_t)v91);
      kaldi::Matrix<float>::Resize(v89, v12, v73, 0, 0);
      if ((int)v12 >= 1)
      {
        uint64_t v24 = 0;
        do
        {
          uint64_t v25 = *(unsigned int *)(*(void *)&a1[105] + 4 * v24);
          if ((int)v25 < 1)
          {
            int v27 = -1;
            float v28 = -INFINITY;
          }
          else
          {
            int v26 = 0;
            int v27 = -1;
            float v28 = -INFINITY;
            uint64_t v29 = v24;
            do
            {
              if (*((float *)v91[0] + v29) > v28)
              {
                int v27 = v26;
                float v28 = *((float *)v91[0] + v29);
              }
              ++v26;
              v29 += v13;
            }
            while (v25 != v26);
          }
          uint64_t v30 = *(void *)&a1[102] + 24 * v24;
          long long v32 = (int **)(v30 + 8);
          unsigned __int8 v31 = *(int **)(v30 + 8);
          std::string::size_type v34 = (void *)(v30 + 16);
          unint64_t v33 = *(void *)(v30 + 16);
          if ((unint64_t)v31 >= v33)
          {
            uint64_t v36 = *(int **)v30;
            uint64_t v37 = ((uint64_t)v31 - *(void *)v30) >> 2;
            unint64_t v38 = v37 + 1;
            if ((unint64_t)(v37 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v39 = v33 - (void)v36;
            if (v39 >> 1 > v38) {
              unint64_t v38 = v39 >> 1;
            }
            if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v40 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v40 = v38;
            }
            if (v40)
            {
              long long v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v34, v40);
              unsigned __int8 v31 = *v32;
              uint64_t v36 = *(int **)v30;
            }
            else
            {
              long long v41 = 0;
            }
            uint64_t v42 = (int *)&v41[4 * v37];
            *uint64_t v42 = v27;
            char v35 = v42 + 1;
            while (v31 != v36)
            {
              int v43 = *--v31;
              *--uint64_t v42 = v43;
            }
            *(void *)uint64_t v30 = v42;
            *long long v32 = v35;
            *std::string::size_type v34 = &v41[4 * v40];
            if (v36) {
              operator delete(v36);
            }
          }
          else
          {
            *unsigned __int8 v31 = v27;
            char v35 = v31 + 1;
          }
          *long long v32 = v35;
          if ((int)v25 >= 1)
          {
            float v44 = 0.0;
            uint64_t v45 = (float *)v91[0];
            int v46 = v25;
            uint64_t v47 = v24;
            do
            {
              float v48 = expf(v45[v47] - v28);
              v45[v47] = v48;
              float v44 = v44 + v48;
              v47 += v13;
              --v46;
            }
            while (v46);
            uint64_t v49 = 0;
            uint64_t v50 = (float *)v91[0];
            uint64_t v51 = *(void *)v89 + 4 * v90 * (int)v24;
            uint64_t v52 = v24;
            do
            {
              *(float *)(v51 + 4 * v49++) = (float)(1.0 / v44) * v50[v52];
              v52 += v13;
            }
            while (v25 != v49);
          }
          ++v24;
        }
        while (v24 != v77);
      }
      __int32 v53 = a1[63].i32[0];
      uint64_t v54 = *(void *)&a1[61] + 4 * v53 * v76;
      int v55 = a1[63].i32[1] - v53 * v76;
      int32x2_t v56 = a1[64];
      DWORD2(v87) = a1[62].i32[0];
      HIDWORD(v87) = v12;
      *(void *)&long long v88 = __PAIR64__(v55, v53);
      *((int32x2_t *)&v88 + 1) = v56;
      long long v86 = &unk_1F0A472A0;
      *(void *)&long long v87 = v54;
      kaldi::CuMatrixBase<float>::CopyFromMat((uint64_t)&v86, (int *)v89, 111);
      unsigned int v57 = *(_DWORD *)(a3 + 24);
      uint64_t v58 = *(void *)(a3 + 8) + 4 * (int)(v57 * v76);
      int v59 = *(_DWORD *)(a3 + 28) - v57 * v76;
      uint64_t v60 = *(void *)(a3 + 32);
      DWORD2(v84) = *(_DWORD *)(a3 + 16);
      HIDWORD(v84) = v12;
      *(void *)&long long v85 = __PAIR64__(v59, v57);
      *((void *)&v85 + 1) = v60;
      uint64_t v83 = &unk_1F0A472A0;
      *(void *)&long long v84 = v58;
      __int32 v61 = a1[27].i32[0];
      uint64_t v62 = *(void *)&a1[25] + 4 * v61 * v76;
      int v63 = a1[27].i32[1] - v61 * v76;
      int32x2_t v64 = a1[28];
      DWORD2(v81) = a1[26].i32[0];
      HIDWORD(v81) = v12;
      *(void *)&long long v82 = __PAIR64__(v63, v61);
      *((int32x2_t *)&v82 + 1) = v64;
      long long v80 = &unk_1F0A472A0;
      *(void *)&long long v81 = v62;
      kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v83, (uint64_t)&v80, 111);
      long long v80 = &unk_1F0A472A0;
      long long v81 = 0u;
      long long v82 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v80);
      if ((int)v12 >= 1)
      {
        uint64_t v65 = 0;
        do
        {
          unsigned int v66 = *(_DWORD *)(*(void *)&a1[105] + 4 * v65);
          v79[0] = &unk_1F0A472D0;
          v79[1] = v84 + 4 * (int)v85 * (int)v65;
          v79[3] = *((void *)&v85 + 1);
          v79[2] = DWORD2(v84);
          __int32 v67 = a1[21].i32[0];
          uint64_t v68 = *(void *)&a1[19] + 4 * v67 * (int)v65;
          unsigned int v69 = a1[21].i32[1] - v67 * v65;
          int32x2_t v70 = a1[22];
          DWORD2(v81) = a1[20].i32[0];
          HIDWORD(v81) = v66 * v12;
          *(void *)&long long v82 = __PAIR64__(v69, v67);
          *((int32x2_t *)&v82 + 1) = v70;
          long long v80 = &unk_1F0A472A0;
          *(void *)&long long v81 = v68;
          if (v12 >= 2) {
            kaldi::CuMatrixBase<float>::SetStride((uint64_t)&v80, v67 * v12);
          }
          v78[1] = v87 + 4 * (int)v88 * (int)v65;
          v78[0] = &unk_1F0A472D0;
          v78[2] = v66;
          v78[3] = *((void *)&v88 + 1);
          kaldi::CuVectorBase<float>::AddMatVec((uint64_t)v79, (uint64_t)&v80, CblasTrans, (uint64_t)v78, 1.0, 1.0);
          long long v80 = &unk_1F0A472A0;
          long long v81 = 0u;
          long long v82 = 0u;
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v80);
          ++v65;
        }
        while (v77 != v65);
      }
      uint64_t v83 = &unk_1F0A472A0;
      long long v84 = 0u;
      long long v85 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v83);
      long long v86 = &unk_1F0A472A0;
      long long v87 = 0u;
      long long v88 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v86);
      ++v75;
      int v9 = (const void **)&a1[78];
    }
    while (v75 != v71);
  }
  kaldi::Matrix<float>::~Matrix((uint64_t)v89);
  kaldi::Vector<float>::Destroy((uint64_t)v91);
}

void sub_1B212B958(_Unwind_Exception *a1)
{
  kaldi::Matrix<float>::~Matrix(v1 - 184);
  kaldi::Vector<float>::Destroy(v1 - 144);
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::PropagateFnc(void *a1, uint64_t a2, uint64_t a3)
{
}

void kaldi::nnet1::GlobalAttentionComponent::BackpropagateFnc(int32x2_t *a1, uint64_t a2, uint64_t a3, int32x2_t *a4, uint64_t a5)
{
  kaldi::nnet1::GlobalAttentionComponent::Check((uint64_t)a1);
  unint64_t v7 = *(void *)&a1[106] - *(void *)&a1[105];
  unint64_t v8 = v7 >> 2;
  uint64_t v9 = (*(_DWORD *)(a2 + 20) / (int)(v7 >> 2));
  kaldi::CuMatrix<float>::Resize(a1 + 30, a1[50].u32[1], *(unsigned int *)(*(void *)&a1[2] + 12), 0, 0);
  uint64_t v41 = a2;
  kaldi::CuMatrix<float>::Resize(a1 + 36, *(unsigned int *)(a2 + 20), *(unsigned int *)(*(void *)&a1[3] + 12), 0, 0);
  kaldi::CuMatrix<float>::Resize(a1 + 42, a1[50].u32[1], *(unsigned int *)(*(void *)&a1[4] + 12), 0, 0);
  if ((int)v9 >= 1)
  {
    uint64_t v10 = 0;
    uint64_t v48 = (uint64_t)&a1[92];
    uint64_t v49 = (uint64_t)&a1[88];
    uint64_t v44 = (v7 >> 2);
    int v45 = 0;
    int v46 = a1 + 96;
    do
    {
      uint64_t v43 = v10;
      if ((int)v8 >= 1)
      {
        uint64_t v11 = 0;
        do
        {
          uint64_t v12 = *(unsigned int *)(*(void *)&a1[105] + 4 * v11);
          kaldi::CuVector<float>::Resize(v49, v12, 1);
          __int32 v13 = a1[21].i32[0];
          uint64_t v14 = *(void *)&a1[19] + 4 * v13 * (int)v11;
          unsigned int v15 = a1[21].i32[1] - v13 * v11;
          int32x2_t v16 = a1[22];
          DWORD2(v59) = a1[20].i32[0];
          HIDWORD(v59) = v12 * v8;
          *(void *)&long long v60 = __PAIR64__(v15, v13);
          *((int32x2_t *)&v60 + 1) = v16;
          uint64_t v58 = &unk_1F0A472A0;
          *(void *)&long long v59 = v14;
          if (v8 >= 2) {
            kaldi::CuMatrixBase<float>::SetStride((uint64_t)&v58, v13 * v8);
          }
          int v17 = v45 + v11;
          unsigned int v18 = a4[2].u32[0];
          int32x2_t v19 = a4[4];
          uint64_t v55 = *(void *)&a4[1] + 4 * a4[3].i32[0] * (v45 + (int)v11);
          uint64_t v54 = &unk_1F0A472D0;
          uint64_t v56 = v18;
          int32x2_t v57 = v19;
          kaldi::CuVectorBase<float>::AddMatVec(v49, (uint64_t)&v58, CblasNoTrans, (uint64_t)&v54, 1.0, 0.0);
          uint64_t v58 = &unk_1F0A472A0;
          long long v59 = 0u;
          long long v60 = 0u;
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v58);
          int32x2_t v20 = a1[64];
          uint64_t v55 = *(void *)&a1[61] + 4 * a1[63].i32[0] * (v45 + (int)v11);
          uint64_t v54 = &unk_1F0A472D0;
          uint64_t v56 = v12;
          int32x2_t v57 = v20;
          kaldi::CuMatrix<float>::Resize(a1 + 82, v12, v12, 0, 0);
          kaldi::CuMatrixBase<float>::AddToDiag((uint64_t)&a1[82], (uint64_t)&v54, 1.0, 0.0);
          kaldi::CuMatrixBase<float>::AddVecVec((uint64_t)&a1[82], (uint64_t)&v54, (uint64_t)&v54, -1.0, 1.0);
          kaldi::CuVector<float>::Resize(v48, v12, 1);
          kaldi::CuVectorBase<float>::AddMatVec(v48, (uint64_t)&a1[82], CblasNoTrans, v49, 1.0, 0.0);
          __int32 v21 = a1[33].i32[0];
          uint64_t v22 = *(void *)&a1[31] + 4 * v21 * (int)v11;
          unsigned int v23 = a1[33].i32[1] - v21 * v11;
          int32x2_t v24 = a1[34];
          DWORD2(v59) = a1[32].i32[0];
          HIDWORD(v59) = v12 * v8;
          *(void *)&long long v60 = __PAIR64__(v23, v21);
          *((int32x2_t *)&v60 + 1) = v24;
          uint64_t v58 = &unk_1F0A472A0;
          *(void *)&long long v59 = v22;
          if (v8 >= 2) {
            kaldi::CuMatrixBase<float>::SetStride((uint64_t)&v58, v21 * v8);
          }
          unsigned __int32 v25 = a1[14].u32[0];
          int32x2_t v26 = a1[16];
          uint64_t v51 = *(void *)&a1[13] + 4 * a1[15].i32[0] * v17;
          uint64_t v50 = &unk_1F0A472D0;
          uint64_t v52 = v25;
          int32x2_t v53 = v26;
          kaldi::CuMatrixBase<float>::AddVecVec((uint64_t)&v58, v48, (uint64_t)&v50, 1.0, 1.0);
          uint64_t v58 = &unk_1F0A472A0;
          long long v59 = 0u;
          long long v60 = 0u;
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v58);
          __int32 v28 = a1[45].i32[0];
          uint64_t v29 = *(void *)&a1[43] + 4 * v28 * (int)v11;
          unsigned int v30 = a1[45].i32[1] - v28 * v11;
          int32x2_t v31 = a1[46];
          DWORD2(v59) = a1[44].i32[0];
          HIDWORD(v59) = v12 * v8;
          *(void *)&long long v60 = __PAIR64__(v30, v28);
          *((int32x2_t *)&v60 + 1) = v31;
          uint64_t v58 = &unk_1F0A472A0;
          *(void *)&long long v59 = v29;
          if (v8 >= 2) {
            kaldi::CuMatrixBase<float>::SetStride(v27, v28 * v8);
          }
          unsigned int v32 = a4[2].u32[0];
          int32x2_t v33 = a4[4];
          uint64_t v51 = *(void *)&a4[1] + 4 * a4[3].i32[0] * v17;
          uint64_t v50 = &unk_1F0A472D0;
          uint64_t v52 = v32;
          int32x2_t v53 = v33;
          kaldi::CuMatrixBase<float>::AddVecVec((uint64_t)&v58, (uint64_t)&v54, (uint64_t)&v50, 1.0, 1.0);
          uint64_t v58 = &unk_1F0A472A0;
          long long v59 = 0u;
          long long v60 = 0u;
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v58);
          kaldi::CuMatrix<float>::Resize(v46, v12, *(unsigned int *)(*(void *)&a1[3] + 12), 0, 0);
          __int32 v34 = a1[9].i32[0];
          uint64_t v35 = *(void *)&a1[7] + 4 * v34 * (int)v11;
          unsigned int v36 = a1[9].i32[1] - v34 * v11;
          int32x2_t v37 = a1[10];
          DWORD2(v59) = a1[8].i32[0];
          HIDWORD(v59) = v12 * v8;
          *(void *)&long long v60 = __PAIR64__(v36, v34);
          *((int32x2_t *)&v60 + 1) = v37;
          uint64_t v58 = &unk_1F0A472A0;
          *(void *)&long long v59 = v35;
          if (v8 >= 2) {
            kaldi::CuMatrixBase<float>::SetStride((uint64_t)&v58, v34 * v8);
          }
          kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)v46, (uint64_t)&a1[82], CblasNoTrans, (uint64_t)&v58, CblasNoTrans, 1.0, 0.0);
          uint64_t v58 = &unk_1F0A472A0;
          long long v59 = 0u;
          long long v60 = 0u;
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v58);
          unsigned __int32 v38 = a1[38].u32[0];
          int32x2_t v39 = a1[40];
          *(void *)&long long v59 = *(void *)&a1[37] + 4 * a1[39].i32[0] * v17;
          uint64_t v58 = &unk_1F0A472D0;
          *((void *)&v59 + 1) = v38;
          *(int32x2_t *)&long long v60 = v39;
          kaldi::CuVectorBase<float>::AddMatVec(v40, (uint64_t)v46, CblasTrans, v49, 1.0, 1.0);
          ++v11;
        }
        while (v44 != v11);
      }
      uint64_t v10 = v43 + 1;
      v45 += v8;
    }
    while (v43 + 1 != v9);
  }
  kaldi::CuMatrix<float>::Resize(a1 + 66, *(unsigned int *)(v41 + 20), *(unsigned int *)(*(void *)&a1[5] + 8), 0, 0);
  (*(void (**)(void, uint64_t, int32x2_t *, int32x2_t *, int32x2_t *, void))(**(void **)&a1[5] + 128))(*(void *)&a1[5], v41, a1 + 24, a4, a1 + 66, 0);
  (*(void (**)(void, uint64_t, int32x2_t *, int32x2_t *, uint64_t, void))(**(void **)&a1[3] + 128))(*(void *)&a1[3], v41, a1 + 12, a1 + 36, a5, 0);
  kaldi::CuMatrixBase<float>::AddMat(a5, (uint64_t)&a1[66], 111, 1.0, 1.0);
  kaldi::CuMatrix<float>::Resize(a1 + 66, a1[50].u32[1], *(unsigned int *)(*(void *)&a1[4] + 8), 0, 0);
  kaldi::CuMatrix<float>::Resize(a1 + 54, a1[50].u32[1], *(unsigned int *)(*(void *)&a1[4] + 8), 0, 0);
  (*(void (**)(void, int32x2_t *, int32x2_t *, int32x2_t *, int32x2_t *, void))(**(void **)&a1[4]
                                                                                             + 128))(*(void *)&a1[4], a1 + 48, a1 + 18, a1 + 42, a1 + 66, 0);
  (*(void (**)(void, int32x2_t *, int32x2_t *, int32x2_t *, int32x2_t *, void))(**(void **)&a1[2]
                                                                                             + 128))(*(void *)&a1[2], a1 + 48, a1 + 6, a1 + 30, a1 + 54, 0);
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)&a1[54], (uint64_t)&a1[66], 111, 1.0, 1.0);
}

void sub_1B212C160(_Unwind_Exception *a1)
{
  *(void *)(v3 - 128) = v1;
  *uint64_t v2 = 0u;
  v2[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)(v3 - 128));
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::BackpropagateFnc(void *a1, uint64_t a2, uint64_t a3, int32x2_t *a4, uint64_t a5)
{
}

uint64_t kaldi::nnet1::GlobalAttentionComponent::SetGradientNormalization(void **a1, uint64_t a2, float a3)
{
  (*(void (**)(void *))(*a1[2] + 240))(a1[2]);
  (*(void (**)(void *, uint64_t, float))(*a1[3] + 240))(a1[3], a2, a3);
  (*(void (**)(void *, uint64_t, float))(*a1[4] + 240))(a1[4], a2, a3);
  int32x2_t v6 = *(uint64_t (**)(__n128))(*a1[5] + 240);
  v7.n128_f32[0] = a3;
  return v6(v7);
}

uint64_t virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::SetGradientNormalization(void *a1, uint64_t a2, float a3)
{
  return kaldi::nnet1::GlobalAttentionComponent::SetGradientNormalization((void **)((char *)a1 + *(void *)(*a1 - 256)), a2, a3);
}

uint64_t kaldi::nnet1::GlobalAttentionComponent::AccumGradients(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  kaldi::nnet1::GlobalAttentionComponent::Check((uint64_t)a1);
  (*(void (**)(void *, void **, void **, uint64_t, uint64_t))(*a1[2] + 232))(a1[2], a1 + 48, a1 + 30, a4, a5);
  (*(void (**)(void *, uint64_t, void **, uint64_t, uint64_t))(*a1[3] + 232))(a1[3], a2, a1 + 36, a4, a5);
  (*(void (**)(void *, void **, void **, uint64_t, uint64_t))(*a1[4] + 232))(a1[4], a1 + 48, a1 + 42, a4, a5);
  uint64_t v9 = *(uint64_t (**)(void))(*a1[5] + 232);
  return v9();
}

uint64_t virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::AccumGradients(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return kaldi::nnet1::GlobalAttentionComponent::AccumGradients((void **)((char *)a1 + *(void *)(*a1 - 248)), a2, a3, a4, a5);
}

uint64_t kaldi::nnet1::GlobalAttentionComponent::UpdateWeights(kaldi::nnet1::GlobalAttentionComponent *this, void *a2, uint64_t a3)
{
  kaldi::nnet1::GlobalAttentionComponent::Check((uint64_t)this);
  (*(void (**)(void, void *, uint64_t))(**((void **)this + 2) + 256))(*((void *)this + 2), a2, a3);
  (*(void (**)(void))(**((void **)this + 3) + 256))();
  (*(void (**)(void))(**((void **)this + 4) + 256))();
  int32x2_t v6 = *(uint64_t (**)(void))(**((void **)this + 5) + 256);
  return v6();
}

uint64_t virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::UpdateWeights(kaldi::nnet1::GlobalAttentionComponent *this, void *a2, uint64_t a3)
{
  return kaldi::nnet1::GlobalAttentionComponent::UpdateWeights((kaldi::nnet1::GlobalAttentionComponent *)((char *)this + *(void *)(*(void *)this - 272)), a2, a3);
}

void kaldi::nnet1::GlobalAttentionComponent::GetGradient(uint64_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  kaldi::Vector<float>::Resize(a4, v8, 1);
  uint64_t v9 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  if (v9) {
  else
  }
    uint64_t v10 = 0;
  kaldi::CuMatrix<float>::CuMatrix(v21, *(unsigned int *)(a2 + 20), *(unsigned int *)(a3 + 16), 0, 0, 0);
  long long v18 = 0u;
  long long v19 = 0u;
  int32x2_t v17 = (int32x2_t)&unk_1F0A51768;
  char v20 = 0;
  kaldi::nnet1::Component::Backpropagate((void **)((char *)v10 + *(*v10 - 3)), a2, (uint64_t)v21, a3, &v17, 0);
  uint64_t v11 = a1 + 384;
  (*(void (**)(void *, uint64_t, void **, const void **))(*v10[2] + 224))(v10[2], v11, v10 + 30, &v22);
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v14 = (char *)*a4;
  LODWORD(v15) = v23;
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v14, &v22);
  uint64_t v12 = (int)v23;
  (*(void (**)(void *, uint64_t, void **, const void **))(*v10[3] + 224))(v10[3], a2, v10 + 36, &v22);
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v14 = (char *)*a4 + 4 * v12;
  LODWORD(v15) = v23;
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v14, &v22);
  int v13 = v23;
  (*(void (**)(void *, uint64_t, void **, const void **))(*v10[4] + 224))(v10[4], v11, v10 + 42, &v22);
  LODWORD(v11) = v13 + v12;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v14 = (char *)*a4 + 4 * v13 + 4 * (int)v12;
  LODWORD(v15) = v23;
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v14, &v22);
  LODWORD(v12) = v23;
  (*(void (**)(void *, uint64_t, uint64_t, const void **))(*v10[5] + 224))(v10[5], a2, a3, &v22);
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v14 = (char *)*a4 + 4 * (int)v12 + 4 * (int)v11;
  LODWORD(v15) = v23;
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v14, &v22);
  ((void (*)(void **))(*v10)[1])(v10);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v17);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v21);
  kaldi::Vector<float>::Destroy((uint64_t)&v22);
}

void sub_1B212C8C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va1);
  kaldi::Vector<float>::Destroy(v4 - 88);
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::GetGradient(void *a1, uint64_t a2, uint64_t a3, void **a4)
{
}

uint64_t EARCSpeechRecognizerCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = [_EARSpeechRecognizer alloc];
  if (a2 && a3 && a4)
  {
    return (uint64_t)[(_EARSpeechRecognizer *)v8 initWithConfiguration:a1 withGeneralVoc:a2 withLexiconEnh:a3 withItnEnh:a4];
  }
  else
  {
    return (uint64_t)[(_EARSpeechRecognizer *)v8 initWithConfiguration:a1];
  }
}

uint64_t EARCSpeechRecognizerSetUserProfileData(void *a1, const char *a2)
{
  return [a1 setUserProfileData:a2];
}

uint64_t EARCSpeechRecognizerUpdateUserProfileData(void *a1, const char *a2)
{
  return [a1 updateUserProfileData:a2];
}

uint64_t EARCSpeechRecognizerSetJitProfileData(void *a1, const char *a2)
{
  return [a1 setJitProfileData:a2];
}

uint64_t EARCSpeechRecognizerUpdateJitProfileData(void *a1, const char *a2)
{
  return [a1 updateJitProfileData:a2];
}

uint64_t EARCSpeechRecognizerSetLeftContext(void *a1, const char *a2)
{
  return [a1 setLeftContext:a2];
}

uint64_t EARCSpeechRecognizerSetLeftContextText(void *a1, const char *a2)
{
  return [a1 setLeftContextText:a2];
}

uint64_t EARCSpeechRecognizerSetDetectUtterances(void *a1, const char *a2)
{
  return [a1 setDetectUtterances:a2 != 0];
}

uint64_t EARCSpeechRecognizerSetEnableVoiceCommands(void *a1, const char *a2)
{
  return [a1 setEnableVoiceCommands:a2 != 0];
}

uint64_t EARCSpeechRecognitionTokenHasSpaceAfter(void *a1)
{
  return [a1 hasSpaceAfter];
}

uint64_t EARCSpeechRecognizerCreateRecognitionBuffer(void *a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  uint64_t v9 = [[EARCSpeechRecognitionResultStreamGlue alloc] initWithStream:a5];
  uint64_t v10 = [a1 runRecognitionWithResultStream:v9 language:a2 task:a3 samplingRate:a4];

  return v10;
}

uint64_t EARCSpeechRecognizerSetConcatenateUtterances(void *a1, const char *a2)
{
  return [a1 setConcatenateUtterances:a2 != 0];
}

uint64_t EARCSpeechRecognizerSetRecognizeEagerCandidates(void *a1, const char *a2)
{
  return [a1 setRecognizeEagerCandidates:a2 != 0];
}

uint64_t EARCSpeechRecognizerSetFarField(void *a1, const char *a2)
{
  return [a1 setFarField:a2 != 0];
}

uint64_t EARCSpeechRecognizerSetHighPriority(void *a1, const char *a2)
{
  return [a1 setHighPriority:a2 != 0];
}

uint64_t EARCSpeechRecognizerSetRecognitionReplacements(void *a1, const char *a2)
{
  return [a1 setRecognitionReplacements:a2];
}

uint64_t EARCSpeechRecognizerSetRecognitionConfidenceSubtraction(void *a1, const char *a2)
{
  return [a1 setRecognitionConfidenceSubtraction:a2];
}

uint64_t EARCSpeechRecognizerSetInputOrigin(void *a1, const char *a2)
{
  return [a1 setInputOrigin:a2];
}

uint64_t EARCSpeechRecognizerSetDeviceId(void *a1, const char *a2)
{
  return [a1 setDeviceId:a2];
}

uint64_t EARCSpeechRecognizerSetRefTranscriptForErrorBlaming(void *a1, const char *a2)
{
  return [a1 setRefTranscriptForErrorBlaming:a2];
}

uint64_t EARCSpeechRecognizerSetBluetoothDeviceId(void *a1, const char *a2)
{
  return [a1 setBluetoothDeviceId:a2];
}

uint64_t EARCSpeechRecognizerSetUserId(void *a1, const char *a2)
{
  return [a1 setUserId:a2];
}

uint64_t EARCSpeechRecognizerSetSessionId(void *a1, const char *a2)
{
  return [a1 setSessionId:a2];
}

uint64_t EARCSpeechRecognitionAudioBufferAddAudioSampleData(void *a1, const char *a2)
{
  return [a1 addAudioSampleData:a2];
}

uint64_t EARCSpeechRecognitionAudioBufferAddAudioSamples(void *a1, const char *a2, uint64_t a3)
{
  return [a1 addAudioSamples:a2 count:a3];
}

uint64_t EARCWordPartCreate(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v8 = [_EARWordPart alloc];
  return (uint64_t)[(_EARWordPart *)v8 initWithOrthography:a1 pronunciations:a2 tagName:a3 frequency:a4];
}

uint64_t EARCWordPartGetFrequency(void *a1)
{
  return [a1 frequency];
}

_EARUserProfileBuilder *EARCUserProfileCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return [[_EARUserProfileBuilder alloc] initWithConfiguration:a1 language:a2 sdapiOverrides:a3 generalVoc:a4 emptyVoc:a5 pgVoc:a6 lexiconEnh:a7 tokenEnh:a8 paramsetHolder:a9];
}

uint64_t EARCUserProfileAddWord(void *a1, const char *a2, uint64_t a3)
{
  return [a1 addWordWithParts:a2 templateName:a3];
}

uint64_t EARCUserProfileCopyDataProfile(void *a1)
{
  return objc_claimAutoreleasedReturnValue();
}

uint64_t EARCUserProfileCopyPronunciationsForOrthography(void *a1, uint64_t a2)
{
  return objc_claimAutoreleasedReturnValue();
}

uint64_t EARCUserProfileReadDataProfile(void *a1, const char *a2)
{
  return [a1 readUserProfile:a2];
}

uint64_t EARCUserProfileCopySanitizedString(void *a1, uint64_t a2)
{
  return objc_claimAutoreleasedReturnValue();
}

uint64_t EARCCommandTaggerCreate(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = [_EARCommandTagger alloc];
  return (uint64_t)[(_EARCommandTagger *)v4 initWithConfiguration:a1 usage:a2];
}

uint64_t EARCCommandTaggingTokensForTag(void *a1, const char *a2)
{
  return [a1 tokensForTag:a2];
}

uint64_t EARCCommandTaggerCreateCommandTaggingResults(void *a1, uint64_t a2, uint64_t a3)
{
  return objc_claimAutoreleasedReturnValue();
}

uint64_t EARCCommandTaggerGetParameterTagForIndex(void *a1, const char *a2)
{
  return [a1 parameterTagForIndex:a2];
}

uint64_t EARCCommandTaggerGetCommandPhraseForIndex(void *a1, const char *a2)
{
  return [a1 commandPhraseTagForIndex:a2];
}

uint64_t EARCCommandTaggerIsParameterTag(void *a1, uint64_t a2)
{
  return [a1 isParameterTag:a2];
}

uint64_t EARCCommandTaggerIsCommandPhraseTag(void *a1, uint64_t a2)
{
  return [a1 isCommandPhraseTag:a2];
}

void ReverseArray(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v7 = v1;
    unint64_t v3 = [v1 count];
    uint64_t v2 = v7;
    if (v3 >= 2)
    {
      uint64_t v4 = 0;
      unint64_t v5 = v3 >> 1;
      unint64_t v6 = v3 - 1;
      do
      {
        [v2 exchangeObjectAtIndex:v4 withObjectAtIndex:v6];
        uint64_t v2 = v7;
        ++v4;
        --v6;
      }
      while (v5 != v4);
    }
  }
}

kaldi::nnet1::RecurrentAttentionBaseComponent *kaldi::nnet1::RecurrentAttentionBaseComponent::RecurrentAttentionBaseComponent(kaldi::nnet1::RecurrentAttentionBaseComponent *this, uint64_t *a2)
{
  uint64_t v4 = a2[1];
  *(void *)this = v4;
  *(void *)((char *)this + *(void *)(v4 - 2std::__tree<int>::destroy((uint64_t)this + 24, *((void **)this + 4)) = a2[2];
  *((void *)this + 1) = -1;
  kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent((kaldi::nnet1::RecurrentAttentionBaseComponent *)((char *)this + 16), a2 + 3);
  uint64_t v5 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v5 - 2std::__tree<int>::destroy((uint64_t)this + 24, *((void **)this + 4)) = a2[5];
  *((void *)this + 2) = a2[6];
  return this;
}

void sub_1B212E204(_Unwind_Exception *a1)
{
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::GlobalRecurrentAttention::GlobalRecurrentAttention(kaldi::nnet1::GlobalRecurrentAttention *this, int a2, int a3)
{
  *((_DWORD *)this + 170) = a2;
  *((_DWORD *)this + 171) = a3;
  *((_WORD *)this + 344) = 0;
  *((void *)this + 87) = 0;
  *((void *)this + 89) = 0;
  *((void *)this + 88) = 0;
  *((void *)this + 84) = &unk_1F0A4BA20;
  *((void *)this + 90) = &unk_1F0A4A6D0;
  *(_OWORD *)((char *)this + 728) = xmmword_1B255E480;
  *((void *)this + 93) = 0x3BF800000;
  *((_DWORD *)this + 188) = 1;
  *((_WORD *)this + 378) = 0;
  *((unsigned char *)this + 758) = 0;
  kaldi::nnet1::RecurrentAttentionBaseComponent::RecurrentAttentionBaseComponent(this, (uint64_t *)&off_1F0A324A0);
  *(void *)this = off_1F0A4D0E8;
  *((void *)this + 84) = off_1F0A4D3D8;
  *((void *)this + 2) = off_1F0A4D230;
  *((void *)this + 22) = 0;
  *((void *)this + 23) = 0;
  operator new();
}

void sub_1B212E4E4(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;
  MEMORY[0x1B3EA8670](v4, 0x10B0C4082B712C9);
  kaldi::nnet1::RecurrentAttentionBaseComponent::~RecurrentAttentionBaseComponent(v1, (uint64_t)&off_1F0A324A0);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v2);
  _Unwind_Resume(a1);
}

kaldi::nnet1::GlobalRecurrentAttention *kaldi::nnet1::GlobalRecurrentAttention::GlobalRecurrentAttention(kaldi::nnet1::GlobalRecurrentAttention *this, const kaldi::nnet1::GlobalRecurrentAttention *a2)
{
  *((void *)this + 85) = *(void *)((char *)a2 + *(void *)(*(void *)a2 - 24) + 8);
  *((_WORD *)this + 344) = 0;
  *((void *)this + 89) = 0;
  *((void *)this + 88) = 0;
  *((void *)this + 87) = 0;
  *((void *)this + 84) = &unk_1F0A4BA20;
  *((void *)this + 90) = &unk_1F0A4A6D0;
  *(_OWORD *)((char *)this + 728) = xmmword_1B255E480;
  *((_DWORD *)this + 186) = -1082130432;
  *(void *)((char *)this + 748) = 0x100000003;
  *((_WORD *)this + 378) = 0;
  *((unsigned char *)this + 758) = 0;
  kaldi::nnet1::RecurrentAttentionBaseComponent::RecurrentAttentionBaseComponent(this, (uint64_t *)&off_1F0A324A0);
  *(void *)this = off_1F0A4D0E8;
  *((void *)this + 84) = off_1F0A4D3D8;
  *((void *)this + 2) = off_1F0A4D230;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((void *)this + 25) = &unk_1F0A51768;
  *((unsigned char *)this + 240) = 0;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((void *)this + 31) = &unk_1F0A51768;
  *((unsigned char *)this + 288) = 0;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((void *)this + 37) = &unk_1F0A51768;
  *((unsigned char *)this + 336) = 0;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((void *)this + 43) = &unk_1F0A51768;
  *((unsigned char *)this + 384) = 0;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((void *)this + 49) = &unk_1F0A51768;
  *((unsigned char *)this + 432) = 0;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *((void *)this + 55) = &unk_1F0A51768;
  *((unsigned char *)this + 480) = 0;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 32) = 0u;
  *((void *)this + 61) = &unk_1F0A51768;
  *((unsigned char *)this + 528) = 0;
  *((_OWORD *)this + 34) = 0u;
  *((_OWORD *)this + 35) = 0u;
  *((void *)this + 67) = &unk_1F0A51768;
  *((unsigned char *)this + 576) = 0;
  *((void *)this + 75) = 0;
  *((void *)this + 74) = 0;
  *((void *)this + 76) = 0;
  *((void *)this + 73) = &unk_1F0A517C0;
  *(_OWORD *)((char *)this + 632) = 0u;
  *(_OWORD *)((char *)this + 648) = 0u;
  *(_OWORD *)((char *)this + 616) = 0u;
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)this + 22) = (*(uint64_t (**)(void))(**((void **)a2 + 22) + 16))(*((void *)a2 + 22));
  *((void *)this + 23) = (*(uint64_t (**)(void))(**((void **)a2 + 23) + 16))(*((void *)a2 + 23));
  kaldi::CuMatrix<float>::operator=((int32x2_t *)this + 25, (int32x2_t *)a2 + 25);
  kaldi::CuMatrix<float>::operator=((int32x2_t *)this + 31, (int32x2_t *)a2 + 31);
  kaldi::CuMatrix<float>::operator=((int32x2_t *)this + 37, (int32x2_t *)a2 + 37);
  kaldi::CuMatrix<float>::operator=((int32x2_t *)this + 55, (int32x2_t *)a2 + 55);
  kaldi::CuMatrix<float>::operator=((int32x2_t *)this + 61, (int32x2_t *)a2 + 61);
  kaldi::CuMatrix<float>::operator=((int32x2_t *)this + 67, (int32x2_t *)a2 + 67);
  kaldi::CuVector<float>::operator=((uint64_t)this + 584, (uint64_t)a2 + 584);
  if (this != a2)
  {
    std::vector<std::vector<int>>::__assign_with_size[abi:ne180100]<std::vector<int>*,std::vector<int>*>((uint64_t)this + 616, *((void *)a2 + 77), *((void *)a2 + 78), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 78) - *((void *)a2 + 77)) >> 3));
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)this + 640, *((char **)a2 + 80), *((void *)a2 + 81), (uint64_t)(*((void *)a2 + 81) - *((void *)a2 + 80)) >> 2);
  }
  *((_DWORD *)this + 166) = *((_DWORD *)a2 + 166);
  *((unsigned char *)this + 668) = 0;
  if ((kaldi::nnet1::Nnet::IsRnn(*((kaldi::nnet1::Nnet **)this + 24)) & 1) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"it doesn't make sense to use a non-reccurent network here", 57);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5);
  }
  (*(void (**)(kaldi::nnet1::GlobalRecurrentAttention *))(*(void *)this + 296))(this);
  return this;
}

void sub_1B212E9AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, kaldi::nnet1::UpdatableComponent *a12, void **a13, uint64_t a14)
{
  uint64_t v23 = *a13;
  if (*a13)
  {
    *((void *)v14 + 81) = v23;
    operator delete(v23);
  }
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  kaldi::CuVector<float>::~CuVector(v19);
  kaldi::CuMatrix<float>::~CuMatrix(v18);
  kaldi::CuMatrix<float>::~CuMatrix(v21);
  kaldi::CuMatrix<float>::~CuMatrix(v20);
  kaldi::CuMatrix<float>::~CuMatrix(a10);
  kaldi::CuMatrix<float>::~CuMatrix(a11);
  kaldi::CuMatrix<float>::~CuMatrix(v17);
  kaldi::CuMatrix<float>::~CuMatrix(v16);
  kaldi::CuMatrix<float>::~CuMatrix(v15);
  kaldi::nnet1::RecurrentAttentionBaseComponent::~RecurrentAttentionBaseComponent(v14, (uint64_t)&off_1F0A324A0);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(a12);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::GlobalRecurrentAttention::~GlobalRecurrentAttention(kaldi::nnet1::GlobalRecurrentAttention *this, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v4 - 2std::__tree<int>::destroy((uint64_t)this + 24, *((void **)this + 4)) = a2[8];
  *((void *)this + 2) = a2[9];
  uint64_t v5 = *((void *)this + 22);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)this + 23);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  id v7 = (kaldi::nnet1::Nnet *)*((void *)this + 24);
  if (v7)
  {
    kaldi::nnet1::Nnet::~Nnet(v7);
    MEMORY[0x1B3EA8670]();
  }
  uint64_t v8 = (void *)*((void *)this + 80);
  if (v8)
  {
    *((void *)this + 81) = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void **)((char *)this + 616);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v9);
  kaldi::CuVector<float>::~CuVector((void *)this + 73);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 536);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 488);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 440);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 392);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 344);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 296);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 248);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 200);
  kaldi::nnet1::RecurrentAttentionBaseComponent::~RecurrentAttentionBaseComponent(this, (uint64_t)(a2 + 1));
}

void kaldi::nnet1::GlobalRecurrentAttention::~GlobalRecurrentAttention(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 672));
}

{
  uint64_t v1;
  uint64_t vars8;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 672));
  JUMPOUT(0x1B3EA8670);
}

void non-virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::~GlobalRecurrentAttention(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::GlobalRecurrentAttention *)((char *)this + 656));
}

{
  kaldi::nnet1::GlobalRecurrentAttention::~GlobalRecurrentAttention((kaldi::nnet1::GlobalRecurrentAttention *)((char *)this - 16));
}

void virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::~GlobalRecurrentAttention(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  uint64_t v2 = (kaldi::nnet1::UpdatableComponent *)(v1 + 672);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v2);
}

{
  kaldi::nnet1::GlobalRecurrentAttention::~GlobalRecurrentAttention((kaldi::nnet1::GlobalRecurrentAttention *)((char *)this + *(void *)(*(void *)this - 24)));
}

void kaldi::nnet1::GlobalRecurrentAttention::Copy(kaldi::nnet1::GlobalRecurrentAttention *this)
{
}

void sub_1B212EDB4(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B1C40F96FF2AFLL);
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::Copy(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  kaldi::nnet1::GlobalRecurrentAttention::Copy((kaldi::nnet1::GlobalRecurrentAttention *)((char *)this
                                                                                        + *(void *)(*(void *)this - 32)));
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::GetType(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  return 283;
}

uint64_t virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::GetType(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  return 283;
}

void kaldi::nnet1::GlobalRecurrentAttention::InitData(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  memset(v62, 0, sizeof(v62));
  uint64_t v4 = a2 + 4;
  uint64_t v5 = a1 + 12;
  uint64_t v6 = a1 + 8;
  while (1)
  {
    if ((*((unsigned char *)v4 + *(void *)(*a2 - 24)) & 2) != 0) {
      goto LABEL_44;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)v62);
    if (SHIBYTE(v62[2]) < 0) {
      break;
    }
    if (HIBYTE(v62[2]) == 15)
    {
      BOOL v14 = v62[0] == (void *)0x6574744178614D3CLL && *(void **)((char *)v62 + 7) == (void *)0x3E736E6F69746E65;
      uint64_t v9 = v5;
      if (!v14)
      {
LABEL_35:
        if (HIBYTE(v62[2]) == 12)
        {
          uint64_t v15 = v62;
          goto LABEL_39;
        }
        goto LABEL_78;
      }
    }
    else
    {
      if (HIBYTE(v62[2]) != 22) {
        goto LABEL_35;
      }
      BOOL v8 = v62[0] == (void *)0x53656372756F533CLL
        && v62[1] == (void *)0x656D694465746174
        && *(void **)((char *)&v62[1] + 6) == (void *)0x3E6E6F69736E656DLL;
      uint64_t v9 = v6;
      if (!v8) {
        goto LABEL_78;
      }
    }
LABEL_34:
    kaldi::ReadBasicType<int>(a2, 0, v9);
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  uint64_t v10 = v62[1];
  if (v62[1] != (void *)15)
  {
    if (v62[1] != (void *)22) {
      goto LABEL_37;
    }
    BOOL v11 = *(void *)v62[0] == 0x53656372756F533CLL && *((void *)v62[0] + 1) == 0x656D694465746174;
    BOOL v12 = v11 && *(void *)((char *)v62[0] + 14) == 0x3E6E6F69736E656DLL;
    uint64_t v9 = v6;
    if (!v12) {
      goto LABEL_37;
    }
    goto LABEL_34;
  }
  BOOL v13 = *(void *)v62[0] == 0x6574744178614D3CLL && *(void *)((char *)v62[0] + 7) == 0x3E736E6F69746E65;
  uint64_t v9 = v5;
  if (v13) {
    goto LABEL_34;
  }
  uint64_t v10 = v62[1];
LABEL_37:
  if (v10 != (void *)12) {
    goto LABEL_78;
  }
  uint64_t v15 = (void **)v62[0];
LABEL_39:
  uint64_t v16 = *v15;
  int v17 = *((_DWORD *)v15 + 2);
  if (v16 != (void *)0x6E6F706D6F432F3CLL || v17 != 1047817829)
  {
LABEL_78:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v57);
    unsigned int v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v57, (uint64_t)"Unknown token ", 14);
    if (SHIBYTE(v62[2]) >= 0) {
      int32x2_t v37 = v62;
    }
    else {
      int32x2_t v37 = (void **)v62[0];
    }
    if (SHIBYTE(v62[2]) >= 0) {
      uint64_t v38 = HIBYTE(v62[2]);
    }
    else {
      uint64_t v38 = (uint64_t)v62[1];
    }
    int32x2_t v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)v37, v38);
    uint64_t v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)", a typo in config?", 19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)" (SourceStateDimension|MaxAttentions)", 37);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v57);
  }
LABEL_44:
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  uint64_t v53 = 0;
  kaldi::ExpectToken(a2, 0, "<SourceDotTransform>");
  kaldi::ReadToken(a2, 0, (uint64_t)&v54);
  long long v19 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::MarkerToComponentType((std::string::size_type *)&v54);
  kaldi::ExpectToken(a2, 0, "<InputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v53 + 4);
  kaldi::ExpectToken(a2, 0, "<OutputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v53);
  kaldi::nnet1::Component::NewComponentOfType(v19);
  if (!v20)
  {
    *(void *)(a1 + 176) = 0;
LABEL_86:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v57);
    uint64_t v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v57, (uint64_t)"cannot initialize source dot transform from ", 44);
    if (v56 >= 0) {
      uint64_t v42 = &v54;
    }
    else {
      uint64_t v42 = v54;
    }
    if (v56 >= 0) {
      uint64_t v43 = HIBYTE(v56);
    }
    else {
      uint64_t v43 = v55;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)v42, v43);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v57);
  }
  *(void *)(a1 + 176) = v21;
  if (!v21) {
    goto LABEL_86;
  }
  (*(void (**)(void *, uint64_t *, uint64_t))(*(void *)v21 + 96))(v21, a2, a3);
  kaldi::ExpectToken(a2, 0, "<TargetDotTransform>");
  kaldi::ReadToken(a2, 0, (uint64_t)&v54);
  uint64_t v22 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::MarkerToComponentType((std::string::size_type *)&v54);
  kaldi::ExpectToken(a2, 0, "<InputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v53 + 4);
  kaldi::ExpectToken(a2, 0, "<OutputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v53);
  kaldi::nnet1::Component::NewComponentOfType(v22);
  if (!v23)
  {
    *(void *)(a1 + 184) = 0;
LABEL_94:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v57);
    uint64_t v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v57, (uint64_t)"cannot initialize target dot transform from ", 44);
    if (v56 >= 0) {
      int v45 = &v54;
    }
    else {
      int v45 = v54;
    }
    if (v56 >= 0) {
      uint64_t v46 = HIBYTE(v56);
    }
    else {
      uint64_t v46 = v55;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)v45, v46);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v57);
  }
  *(void *)(a1 + 184) = v24;
  if (!v24) {
    goto LABEL_94;
  }
  (*(void (**)(void *, uint64_t *, uint64_t))(*(void *)v24 + 96))(v24, a2, a3);
  uint64_t v50 = 0;
  size_t v51 = 0;
  uint64_t v52 = 0;
  std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)));
  unsigned __int32 v25 = std::locale::use_facet(&v57, MEMORY[0x1E4FBA258]);
  unsigned __int8 v26 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10);
  std::locale::~locale(&v57);
  std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&v50, v26);
  size_t v27 = HIBYTE(v52);
  char v28 = HIBYTE(v52);
  unsigned int v30 = (char *)v50;
  size_t v29 = v51;
  int32x2_t v31 = (char *)v50 + v51;
  if (v52 >= 0)
  {
    int32x2_t v31 = (char *)&v50 + HIBYTE(v52);
    unsigned int v30 = (char *)&v50;
  }
  if (v30 != v31)
  {
    do
    {
      int v32 = *v30;
      if (v32 == 124) {
        LOBYTE(v32) = 10;
      }
      *v30++ = v32;
    }
    while (v30 != v31);
    size_t v27 = HIBYTE(v52);
    size_t v29 = v51;
    char v28 = HIBYTE(v52);
  }
  if (v28 >= 0) {
    size_t v33 = v27;
  }
  else {
    size_t v33 = v29;
  }
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v33 + 1);
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    __int32 v34 = __p;
  }
  else {
    __int32 v34 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
  }
  if (v33)
  {
    if (v52 >= 0) {
      uint64_t v35 = &v50;
    }
    else {
      uint64_t v35 = v50;
    }
    memmove(v34, v35, v33);
  }
  *(_WORD *)((char *)&v34->__r_.__value_.__l.__data_ + v33) = 10;
  std::istringstream::basic_istringstream[abi:ne180100]((uint64_t *)&v57, __p, 8);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  kaldi::nnet1::Nnet::Init(*(kaldi::nnet1::Nnet **)(a1 + 192), (uint64_t *)&v57, a3);
  kaldi::nnet1::Nnet::ValidateNnet(*(kaldi::nnet1::Nnet **)(a1 + 192));
  if ((kaldi::nnet1::Nnet::IsRnn(*(kaldi::nnet1::Nnet **)(a1 + 192)) & 1) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"it doesn't make sense to use a non-recurrent network here", 57);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 296))(a1);
  v57.__locale_ = (std::locale::__imp *)*MEMORY[0x1E4FBA410];
  *(std::locale *)((char *)&v57 + *((void *)v57.__locale_ - 3)) = *(std::locale *)(MEMORY[0x1E4FBA410] + 24);
  uint64_t v58 = MEMORY[0x1E4FBA470] + 16;
  if (v60 < 0) {
    operator delete(v59);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1B3EA8520](&v61);
  if (SHIBYTE(v52) < 0) {
    operator delete(v50);
  }
  if (SHIBYTE(v56) < 0) {
    operator delete(v54);
  }
  if (SHIBYTE(v62[2]) < 0) {
    operator delete(v62[0]);
  }
}

void virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::InitData(void *a1, uint64_t *a2, uint64_t a3)
{
}

void kaldi::nnet1::GlobalRecurrentAttention::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  memset(v30, 0, 24);
  uint64_t v7 = a1 + 12;
  uint64_t v8 = a1 + 8;
  while (1)
  {
    if (kaldi::Peek(a2, a3) != 60) {
      goto LABEL_44;
    }
    kaldi::ReadToken(a2, a3, (uint64_t)v30);
    if (SHIBYTE(v30[2]) < 0) {
      break;
    }
    if (HIBYTE(v30[2]) == 15)
    {
      BOOL v16 = v30[0] == (void *)0x6574744178614D3CLL && *(void **)((char *)v30 + 7) == (void *)0x3E736E6F69746E65;
      uint64_t v11 = v7;
      if (!v16)
      {
LABEL_35:
        if (HIBYTE(v30[2]) == 12)
        {
          int v17 = v30;
          goto LABEL_39;
        }
        goto LABEL_52;
      }
    }
    else
    {
      if (HIBYTE(v30[2]) != 22) {
        goto LABEL_35;
      }
      BOOL v10 = v30[0] == (void *)0x53656372756F533CLL
         && v30[1] == (void *)0x656D694465746174
         && *(void **)((char *)&v30[1] + 6) == (void *)0x3E6E6F69736E656DLL;
      uint64_t v11 = v8;
      if (!v10) {
        goto LABEL_52;
      }
    }
LABEL_34:
    kaldi::ReadBasicType<int>(a2, a3, v11);
  }
  BOOL v12 = v30[1];
  if (v30[1] != (void *)15)
  {
    if (v30[1] != (void *)22) {
      goto LABEL_37;
    }
    BOOL v13 = *(void *)v30[0] == 0x53656372756F533CLL && *((void *)v30[0] + 1) == 0x656D694465746174;
    BOOL v14 = v13 && *(void *)((char *)v30[0] + 14) == 0x3E6E6F69736E656DLL;
    uint64_t v11 = v8;
    if (!v14) {
      goto LABEL_37;
    }
    goto LABEL_34;
  }
  BOOL v15 = *(void *)v30[0] == 0x6574744178614D3CLL && *(void *)((char *)v30[0] + 7) == 0x3E736E6F69746E65;
  uint64_t v11 = v7;
  if (v15) {
    goto LABEL_34;
  }
  BOOL v12 = v30[1];
LABEL_37:
  if (v12 != (void *)12) {
    goto LABEL_52;
  }
  int v17 = (void **)v30[0];
LABEL_39:
  uint64_t v18 = *v17;
  int v19 = *((_DWORD *)v17 + 2);
  if (v18 != (void *)0x6E6F706D6F432F3CLL || v19 != 1047817829)
  {
LABEL_52:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v29);
    unsigned __int32 v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Unrecognized token ", 19);
    if (SHIBYTE(v30[2]) >= 0) {
      unsigned __int8 v26 = v30;
    }
    else {
      unsigned __int8 v26 = (void **)v30[0];
    }
    if (SHIBYTE(v30[2]) >= 0) {
      uint64_t v27 = HIBYTE(v30[2]);
    }
    else {
      uint64_t v27 = (uint64_t)v30[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v26, v27);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v29);
  }
LABEL_44:
  kaldi::ExpectToken(a2, a3, "<SourceDotTransform>");
  uint64_t v21 = (const void *)kaldi::nnet1::Component::Read(a2, a3, a4);
  if (!v21)
  {
    *(void *)(a1 + 176) = 0;
LABEL_60:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"read source dot transform failed", 32);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v29);
  }
  *(void *)(a1 + 176) = v22;
  if (!v22) {
    goto LABEL_60;
  }
  kaldi::ExpectToken(a2, a3, "</Component>");
  kaldi::ExpectToken(a2, a3, "<TargetDotTransform>");
  uint64_t v23 = (const void *)kaldi::nnet1::Component::Read(a2, a3, a4);
  if (!v23)
  {
    *(void *)(a1 + 184) = 0;
LABEL_62:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"read target dot transform failed", 32);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v29);
  }
  *(void *)(a1 + 184) = v24;
  if (!v24) {
    goto LABEL_62;
  }
  kaldi::ExpectToken(a2, a3, "</Component>");
  kaldi::nnet1::Nnet::Read(*(uint64_t ***)(a1 + 192), a2, a3, a4);
  kaldi::nnet1::Nnet::ValidateNnet(*(kaldi::nnet1::Nnet **)(a1 + 192));
  if ((kaldi::nnet1::Nnet::IsRnn(*(kaldi::nnet1::Nnet **)(a1 + 192)) & 1) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"it doesn't make sense to use a non-reccurent network here", 57);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v29);
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 296))(a1);
  if (SHIBYTE(v30[2]) < 0) {
    operator delete(v30[0]);
  }
}

void sub_1B212FB24(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 89) < 0) {
    operator delete(*(void **)(v1 - 112));
  }
  _Unwind_Resume(exception_object);
}

void virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::ReadData(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
}

void *kaldi::nnet1::GlobalRecurrentAttention::WriteConfig(int a1, void *a2, int a3)
{
  kaldi::WriteToken(a2, a3, "<SourceStateDimension>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<MaxAttentions>");
  kaldi::WriteBasicType<int>(a2, a3);
  return kaldi::WriteToken(a2, a3, "</Component>");
}

void *virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::WriteConfig(void *a1, void *a2, int a3)
{
  return kaldi::nnet1::GlobalRecurrentAttention::WriteConfig(a1 + *(void *)(*a1 - 184), a2, a3);
}

void *kaldi::nnet1::GlobalRecurrentAttention::WriteData(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(uint64_t *))(*a1 + 96))(a1);
  kaldi::WriteToken(a2, a3, "<SourceDotTransform>");
  kaldi::nnet1::Component::Write(a1[22], a2, a3, a4);
  kaldi::WriteToken(a2, a3, "</Component>");
  kaldi::WriteToken(a2, a3, "<TargetDotTransform>");
  kaldi::nnet1::Component::Write(a1[23], a2, a3, a4);
  kaldi::WriteToken(a2, a3, "</Component>");
  uint64_t v8 = (uint64_t *)a1[24];
  return kaldi::nnet1::Nnet::Write(v8, a2, a3, a4);
}

void *virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::WriteData(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return kaldi::nnet1::GlobalRecurrentAttention::WriteData((void *)((char *)a1 + *(void *)(*a1 - 120)), a2, a3, a4);
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::NumParams(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  int v2 = (*(uint64_t (**)(void))(**((void **)this + 22) + 176))(*((void *)this + 22));
  int v3 = (*(uint64_t (**)(void))(**((void **)this + 23) + 176))(*((void *)this + 23)) + v2;
  return v3 + kaldi::nnet1::Nnet::NumParams(*((kaldi::nnet1::Nnet **)this + 24));
}

uint64_t virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::NumParams(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  return kaldi::nnet1::GlobalRecurrentAttention::NumParams((kaldi::nnet1::GlobalRecurrentAttention *)((char *)this + *(void *)(*(void *)this - 192)));
}

void kaldi::nnet1::GlobalRecurrentAttention::GetParams(uint64_t a1, void **a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  kaldi::Vector<float>::Resize(a2, v4, 1);
  BOOL v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  (*(void (**)(void, void **))(**(void **)(a1 + 176) + 184))(*(void *)(a1 + 176), &v10);
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v7 = (char *)*a2;
  LODWORD(v8) = v11;
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v7, (const void **)&v10);
  uint64_t v5 = (int)v11;
  (*(void (**)(void, void **))(**(void **)(a1 + 184) + 184))(*(void *)(a1 + 184), &v10);
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v7 = (char *)*a2 + 4 * v5;
  LODWORD(v8) = v11;
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v7, (const void **)&v10);
  int v6 = v11;
  kaldi::nnet1::Nnet::GetParams(*(kaldi::nnet1::Nnet **)(a1 + 192), &v10);
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v7 = (char *)*a2 + 4 * v6 + 4 * (int)v5;
  LODWORD(v8) = v11;
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v7, (const void **)&v10);
  kaldi::Vector<float>::Destroy((uint64_t)&v10);
}

void sub_1B212FF18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::GetParams(void *a1, void **a2)
{
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::SetParams(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 176);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 176))(v4);
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v11 = *a2;
  LODWORD(v12) = v5;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v4 + 192))(v4, &v11);
  LODWORD(v4) = (*(uint64_t (**)(void))(**(void **)(a1 + 176) + 176))(*(void *)(a1 + 176));
  uint64_t v6 = *(void *)(a1 + 184);
  int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 176))(v6);
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v11 = *a2 + 4 * (int)v4;
  LODWORD(v12) = v7;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v6 + 192))(v6, &v11);
  LODWORD(v6) = (*(uint64_t (**)(void))(**(void **)(a1 + 184) + 176))(*(void *)(a1 + 184)) + v4;
  uint64_t v8 = *(kaldi::nnet1::Nnet **)(a1 + 192);
  int v9 = kaldi::nnet1::Nnet::NumParams(v8);
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v11 = *a2 + 4 * (int)v6;
  LODWORD(v12) = v9;
  kaldi::nnet1::Nnet::SetParams(v8, &v11);
  return kaldi::nnet1::Nnet::NumParams(*(kaldi::nnet1::Nnet **)(a1 + 192));
}

uint64_t virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::SetParams(void *a1, uint64_t *a2)
{
  return kaldi::nnet1::GlobalRecurrentAttention::SetParams((uint64_t)a1 + *(void *)(*a1 - 208), a2);
}

float kaldi::nnet1::GlobalRecurrentAttention::SumParams(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  float v2 = (*(float (**)(void))(**((void **)this + 22) + 208))(*((void *)this + 22));
  float v3 = v2 + (*(float (**)(void))(**((void **)this + 23) + 208))(*((void *)this + 23));
  return v3 + kaldi::nnet1::Nnet::SumParams(*((kaldi::nnet1::Nnet **)this + 24));
}

float virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::SumParams(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  return kaldi::nnet1::GlobalRecurrentAttention::SumParams((kaldi::nnet1::GlobalRecurrentAttention *)((char *)this + *(void *)(*(void *)this - 224)));
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::PerturbParams(kaldi::nnet1::GlobalRecurrentAttention *this, float a2)
{
  (*(void (**)(void))(**((void **)this + 22) + 216))(*((void *)this + 22));
  uint64_t v4 = *(uint64_t (**)(__n128))(**((void **)this + 23) + 216);
  v5.n128_f32[0] = a2;
  return v4(v5);
}

uint64_t virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::PerturbParams(kaldi::nnet1::GlobalRecurrentAttention *this, float a2)
{
  float v3 = (char *)this + *(void *)(*(void *)this - 232);
  (*(void (**)(void))(**((void **)v3 + 22) + 216))(*((void *)v3 + 22));
  uint64_t v4 = *(uint64_t (**)(__n128))(**((void **)v3 + 23) + 216);
  v5.n128_f32[0] = a2;
  return v4(v5);
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::Info(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v24);
  (*(void (**)(kaldi::nnet1::GlobalRecurrentAttention *, void *, void))(*(void *)this + 96))(this, v24, 0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"\n## Source Dot Transform: input-dim ", 36);
  float v2 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", output-dim ", 13);
  float v3 = (void *)std::ostream::operator<<();
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"\n", 1);
  (*(void (**)(void **__return_ptr))(**((void **)this + 22) + 64))(v22);
  if ((v23 & 0x80u) == 0) {
    __n128 v5 = v22;
  }
  else {
    __n128 v5 = (void **)v22[0];
  }
  if ((v23 & 0x80u) == 0) {
    uint64_t v6 = v23;
  }
  else {
    uint64_t v6 = (uint64_t)v22[1];
  }
  int v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v5, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"\n## Target Dot Transform: input-dim ", 36);
  uint64_t v8 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)", output-dim ", 13);
  int v9 = (void *)std::ostream::operator<<();
  BOOL v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"\n", 1);
  (*(void (**)(void **__return_ptr))(**((void **)this + 23) + 64))(v20);
  if ((v21 & 0x80u) == 0) {
    uint64_t v11 = v20;
  }
  else {
    uint64_t v11 = (void **)v20[0];
  }
  if ((v21 & 0x80u) == 0) {
    uint64_t v12 = v21;
  }
  else {
    uint64_t v12 = (uint64_t)v20[1];
  }
  uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
  BOOL v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"\n## Internal recurrent network info ", 36);
  kaldi::nnet1::Nnet::Info((uint64_t *)__p, *((kaldi::nnet1::Nnet **)this + 24));
  if ((v19 & 0x80u) == 0) {
    BOOL v15 = __p;
  }
  else {
    BOOL v15 = (void **)__p[0];
  }
  if ((v19 & 0x80u) == 0) {
    uint64_t v16 = v19;
  }
  else {
    uint64_t v16 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
  if ((char)v19 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v21 < 0) {
    operator delete(v20[0]);
  }
  if ((char)v23 < 0) {
    operator delete(v22[0]);
  }
  std::stringbuf::str();
  v24[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v24 + *(void *)(v24[0] - 2std::__tree<int>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v24[1] = MEMORY[0x1E4FBA470] + 16;
  if (v25 < 0) {
    operator delete((void *)v24[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](&v26);
}

void sub_1B21305EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  std::ostringstream::~ostringstream((uint64_t)&a27);
  _Unwind_Resume(a1);
}

uint64_t virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::Info(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  return kaldi::nnet1::GlobalRecurrentAttention::Info((kaldi::nnet1::GlobalRecurrentAttention *)((char *)this
                                                                                               + *(void *)(*(void *)this - 80)));
}

void kaldi::nnet1::GlobalRecurrentAttention::InfoGradient(kaldi::nnet1::GlobalRecurrentAttention *this@<X0>, std::string *a2@<X8>)
{
  (*(void (**)(std::string *__return_ptr))(**((void **)this + 22) + 72))(&v21);
  (*(void (**)(void **__return_ptr))(**((void **)this + 23) + 72))(v19);
  if ((v20 & 0x80u) == 0) {
    uint64_t v4 = v19;
  }
  else {
    uint64_t v4 = (void **)v19[0];
  }
  if ((v20 & 0x80u) == 0) {
    std::string::size_type v5 = v20;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)v19[1];
  }
  uint64_t v6 = std::string::append(&v21, (const std::string::value_type *)v4, v5);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::Nnet::InfoGradient(*((kaldi::nnet1::Nnet **)this + 24), v17);
  if ((v18 & 0x80u) == 0) {
    uint64_t v8 = v17;
  }
  else {
    uint64_t v8 = (void **)v17[0];
  }
  if ((v18 & 0x80u) == 0) {
    std::string::size_type v9 = v18;
  }
  else {
    std::string::size_type v9 = (std::string::size_type)v17[1];
  }
  BOOL v10 = std::string::append(&v22, (const std::string::value_type *)v8, v9);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "\n");
  if ((v16 & 0x80u) == 0) {
    uint64_t v12 = __p;
  }
  else {
    uint64_t v12 = (void **)__p[0];
  }
  if ((v16 & 0x80u) == 0) {
    std::string::size_type v13 = v16;
  }
  else {
    std::string::size_type v13 = (std::string::size_type)__p[1];
  }
  BOOL v14 = std::string::append(&v23, (const std::string::value_type *)v12, v13);
  *a2 = *v14;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if ((char)v16 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if ((char)v18 < 0) {
    operator delete(v17[0]);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if ((char)v20 < 0) {
    operator delete(v19[0]);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
}

void sub_1B213082C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v38 - 41) < 0) {
    operator delete(*(void **)(v38 - 64));
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  _Unwind_Resume(exception_object);
}

void virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::InfoGradient(kaldi::nnet1::GlobalRecurrentAttention *this@<X0>, std::string *a2@<X8>)
{
}

void kaldi::nnet1::GlobalRecurrentAttention::SetTrainOptions(kaldi::nnet1::GlobalRecurrentAttention *this, const kaldi::nnet1::NnetTrainOptions *a2)
{
  uint64_t v4 = (char *)this + *(void *)(*(void *)this - 24);
  long long v5 = *(_OWORD *)((char *)a2 + 8);
  *(_OWORD *)(v4 + 71) = *(_OWORD *)((char *)a2 + 23);
  *(_OWORD *)(v4 + 56) = v5;
  (*(void (**)(void))(**((void **)this + 22) + 264))();
  (*(void (**)(void))(**((void **)this + 23) + 264))();
  uint64_t v6 = (kaldi::nnet1::Nnet *)*((void *)this + 24);
  kaldi::nnet1::Nnet::SetTrainOptions(v6, a2, 0);
}

void non-virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::SetTrainOptions(kaldi::nnet1::GlobalRecurrentAttention *this, const kaldi::nnet1::NnetTrainOptions *a2)
{
}

void virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::SetTrainOptions(kaldi::nnet1::GlobalRecurrentAttention *this, const kaldi::nnet1::NnetTrainOptions *a2)
{
}

int32x2_t *kaldi::nnet1::GlobalRecurrentAttention::SetSourceStates(uint64_t a1, int32x2_t *a2, char **a3)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 296))(a1);
  long long v7 = *a3;
  uint64_t v6 = a3[1];
  kaldi::CuMatrix<float>::operator=((int32x2_t *)(a1 + 296), a2);
  if ((char **)(a1 + 640) != a3) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 640), *a3, (uint64_t)a3[1], (a3[1] - *a3) >> 2);
  }
  uint64_t v8 = v6 - v7;
  std::string::size_type v9 = *a3 + 4;
  int v10 = *(_DWORD *)*a3;
  *(_DWORD *)(a1 + 664) = v10;
  long long v11 = a3[1];
  while (v9 != v11)
  {
    int v12 = *(_DWORD *)v9;
    if (*(_DWORD *)v9 > v10)
    {
      *(_DWORD *)(a1 + 664) = v12;
      int v10 = v12;
    }
    v9 += 4;
  }
  kaldi::nnet1::Component::Propagate(*(_DWORD **)(a1 + 176), a1 + 296, (int32x2_t *)(a1 + 200), 0);
  memset(__p, 0, 24);
  std::vector<std::vector<int>>::assign((uint64_t *)(a1 + 616), (int)(v8 >> 2), (uint64_t)__p);
  uint64_t v13 = (unint64_t)v8 >> 2;
  if (*(void *)__p)
  {
    *(void *)&__p[8] = *(void *)__p;
    operator delete(*(void **)__p);
  }
  uint64_t v14 = kaldi::nnet1::Nnet::InputDim(*(kaldi::nnet1::Nnet **)(a1 + 192));
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(a1 + 344), v13, v14, 0, 0);
  uint64_t v15 = *(void *)(a1 + 352);
  int v16 = *(_DWORD *)(a1 + 372);
  uint64_t v17 = *(void *)(a1 + 376);
  *(_DWORD *)&__p[16] = *(_DWORD *)(a1 + 8);
  *(void *)&__p[20] = *(void *)(a1 + 364);
  *(_DWORD *)&__p[28] = v16;
  *(void *)&__p[32] = v17;
  *(void *)std::string __p = &unk_1F0A472A0;
  *(void *)&__p[8] = v15;
  uint64_t v18 = *(void *)(a1 + 304);
  uint64_t v19 = *(void *)(a1 + 328);
  DWORD2(v22) = *(_DWORD *)(a1 + 312);
  HIDWORD(v22) = v13;
  *(void *)&long long v23 = *(void *)(a1 + 320);
  *((void *)&v23 + 1) = v19;
  std::string v21 = &unk_1F0A472A0;
  *(void *)&long long v22 = v18;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)__p, (uint64_t)&v21, 111);
  std::string v21 = &unk_1F0A472A0;
  long long v22 = 0u;
  long long v23 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v21);
  *(void *)std::string __p = &unk_1F0A472A0;
  memset(&__p[8], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)__p);
  kaldi::nnet1::Nnet::ResetHistoryStateIfExists(*(void *)(a1 + 192));
  return kaldi::nnet1::Nnet::Propagate<kaldi::CuSubMatrix<float>>(*(uint64_t **)(a1 + 192), (int32x2_t *)(a1 + 344), (int32x2_t *)(a1 + 392), 0);
}

void sub_1B2130C04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  *int v16 = 0u;
  v16[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a9);
  *uint64_t v15 = 0u;
  v15[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&__p);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::GetSourceDiffs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 296))(a1);
  return kaldi::CuMatrix<float>::Swap(a1 + 440, a4);
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::GetCurrentAlignment(uint64_t a1, std::vector<unsigned int> *this)
{
  int v4 = -1431655765 * ((uint64_t)(*(void *)(a1 + 624) - *(void *)(a1 + 616)) >> 3);
  std::vector<int>::resize(this, v4);
  if (v4 >= 1)
  {
    std::vector<unsigned int>::pointer begin = this->__begin_;
    uint64_t v6 = v4;
    long long v7 = (uint64_t *)(*(void *)(a1 + 616) + 8);
    do
    {
      uint64_t v8 = *v7;
      v7 += 3;
      *begin++ = *(_DWORD *)(v8 - 4);
      --v6;
    }
    while (v6);
  }
  return 1;
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::GetOverallAlignment(uint64_t a1, uint64_t a2)
{
  if (a1 + 616 != a2) {
    std::vector<std::vector<int>>::__assign_with_size[abi:ne180100]<std::vector<int>*,std::vector<int>*>(a2, *(void *)(a1 + 616), *(void *)(a1 + 624), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 624) - *(void *)(a1 + 616)) >> 3));
  }
  return 1;
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::SetSourceVectorDimension(uint64_t this, int a2)
{
  if (*(_DWORD *)(this + 8) != a2)
  {
    *(_DWORD *)(this + 8) = a2;
    *(unsigned char *)(this + 668) = 0;
  }
  return this;
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::SetMaxAttentions(uint64_t this, int a2)
{
  if (*(_DWORD *)(this + 12) != a2)
  {
    *(_DWORD *)(this + 12) = a2;
    *(unsigned char *)(this + 668) = 0;
  }
  return this;
}

void kaldi::nnet1::GlobalRecurrentAttention::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 296))(a1);
  unint64_t v5 = *(void *)(a1 + 648) - *(void *)(a1 + 640);
  uint64_t v6 = v5 >> 2;
  uint64_t v69 = a2;
  LODWORD(a2) = *(_DWORD *)(a2 + 20);
  uint64_t v7 = *(unsigned int *)(a1 + 316);
  uint64_t v8 = ((int)v7 / (int)(v5 >> 2));
  long long v72 = (const void **)(a1 + 584);
  kaldi::CuVector<float>::Resize(a1 + 584, v7, 0);
  unsigned int v70 = v8;
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(a1 + 488), v5 >> 2, v8, 1, 0);
  uint64_t v9 = *(unsigned int *)(a1 + 316);
  memset(v88, 0, 24);
  kaldi::Vector<float>::Resize(v88, v9, 1);
  kaldi::Matrix<float>::Matrix((uint64_t)v86);
  int v67 = (int)a2 / (int)(v5 >> 2);
  if (v67 >= 1)
  {
    int v73 = 0;
    int v71 = (int32x2_t *)(a1 + 536);
    int v10 = (int32x2_t *)(a1 + 248);
    uint64_t v11 = (int)((uint64_t)v5 >> 2);
    uint64_t v12 = (v5 >> 2);
    long long v74 = (int32x2_t *)(a1 + 392);
    uint64_t v75 = v12;
    do
    {
      kaldi::CuMatrix<float>::operator=(v71, (int32x2_t *)(a1 + 200));
      kaldi::nnet1::Component::Propagate(*(_DWORD **)(a1 + 184), (uint64_t)v74, v10, 0);
      if (*(int *)(a1 + 664) >= 1)
      {
        int v13 = 0;
        int v14 = 0;
        do
        {
          unsigned int v15 = *(_DWORD *)(a1 + 560);
          uint64_t v16 = *(void *)(a1 + 544) + 4 * (int)(v15 * v13);
          int v17 = *(_DWORD *)(a1 + 564) - v15 * v13;
          uint64_t v18 = *(void *)(a1 + 568);
          LODWORD(v85[1]) = *(_DWORD *)(a1 + 552);
          HIDWORD(v85[1]) = v6;
          v85[2] = __PAIR64__(v17, v15);
          v85[3] = v18;
          long long v84 = &unk_1F0A472A0;
          v85[0] = v16;
          kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v84, (uint64_t)v10);
          long long v84 = &unk_1F0A472A0;
          memset(v85, 0, sizeof(v85));
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v84);
          ++v14;
          v13 += v6;
        }
        while (v14 < *(_DWORD *)(a1 + 664));
      }
      kaldi::CuVectorBase<float>::AddColSumMat((uint64_t)v72, (uint64_t)v71, 1.0, 0.0);
      kaldi::CuVectorBase<float>::CopyToVec<float>(v72, (uint64_t)v88);
      kaldi::Matrix<float>::Resize(v86, v6, v70, 0, 0);
      if ((int)v6 >= 1)
      {
        uint64_t v19 = 0;
        do
        {
          uint64_t v20 = *(unsigned int *)(*(void *)(a1 + 640) + 4 * v19);
          if ((int)v20 < 1)
          {
            int v22 = -1;
            float v23 = -INFINITY;
          }
          else
          {
            int v21 = 0;
            int v22 = -1;
            float v23 = -INFINITY;
            uint64_t v24 = v19;
            do
            {
              if (*((float *)v88[0] + v24) > v23)
              {
                int v22 = v21;
                float v23 = *((float *)v88[0] + v24);
              }
              ++v21;
              v24 += v11;
            }
            while (v20 != v21);
          }
          uint64_t v25 = *(void *)(a1 + 616) + 24 * v19;
          uint64_t v27 = (int **)(v25 + 8);
          uint64_t v26 = *(int **)(v25 + 8);
          size_t v29 = (void *)(v25 + 16);
          unint64_t v28 = *(void *)(v25 + 16);
          if ((unint64_t)v26 >= v28)
          {
            int32x2_t v31 = *(int **)v25;
            uint64_t v32 = ((uint64_t)v26 - *(void *)v25) >> 2;
            unint64_t v33 = v32 + 1;
            if ((unint64_t)(v32 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v34 = v28 - (void)v31;
            if (v34 >> 1 > v33) {
              unint64_t v33 = v34 >> 1;
            }
            if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v35 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v35 = v33;
            }
            if (v35)
            {
              unsigned int v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v29, v35);
              uint64_t v26 = *v27;
              int32x2_t v31 = *(int **)v25;
            }
            else
            {
              unsigned int v36 = 0;
            }
            int32x2_t v37 = (int *)&v36[4 * v32];
            int *v37 = v22;
            unsigned int v30 = v37 + 1;
            while (v26 != v31)
            {
              int v38 = *--v26;
              *--int32x2_t v37 = v38;
            }
            *(void *)uint64_t v25 = v37;
            *uint64_t v27 = v30;
            *size_t v29 = &v36[4 * v35];
            if (v31) {
              operator delete(v31);
            }
          }
          else
          {
            *uint64_t v26 = v22;
            unsigned int v30 = v26 + 1;
          }
          *uint64_t v27 = v30;
          uint64_t v12 = v75;
          if ((int)v20 >= 1)
          {
            float v39 = 0.0;
            uint64_t v40 = (float *)v88[0];
            int v41 = v20;
            uint64_t v42 = v19;
            do
            {
              float v43 = expf(v40[v42] - v23);
              v40[v42] = v43;
              float v39 = v39 + v43;
              v42 += v11;
              --v41;
            }
            while (v41);
            uint64_t v44 = 0;
            int v45 = (float *)v88[0];
            uint64_t v46 = *(void *)v86 + 4 * v87 * (int)v19;
            uint64_t v47 = v19;
            do
            {
              *(float *)(v46 + 4 * v44++) = (float)(1.0 / v39) * v45[v47];
              v47 += v11;
            }
            while (v20 != v44);
          }
          ++v19;
        }
        while (v19 != v75);
      }
      kaldi::CuMatrixBase<float>::CopyFromMat(a1 + 488, (int *)v86, 111);
      if ((int)v6 >= 1)
      {
        uint64_t v48 = 0;
        do
        {
          unsigned int v49 = *(_DWORD *)(*(void *)(a1 + 640) + 4 * v48);
          int v50 = *(_DWORD *)(a1 + 364);
          uint64_t v51 = *(void *)(a1 + 352);
          uint64_t v52 = *(void *)(a1 + 376);
          LODWORD(v85[1]) = *(_DWORD *)(a1 + 8);
          HIDWORD(v85[1]) = v50;
          v85[2] = *(void *)(a1 + 368);
          v85[3] = v52;
          long long v84 = &unk_1F0A472A0;
          v85[0] = v51;
          long long v80 = &unk_1F0A472D0;
          uint64_t v81 = v51 + 4 * LODWORD(v85[2]) * (int)v48;
          uint64_t v83 = v52;
          uint64_t v82 = LODWORD(v85[1]);
          unsigned int v53 = *(_DWORD *)(a1 + 320);
          uint64_t v54 = *(void *)(a1 + 304) + 4 * (int)(v53 * v48);
          unsigned int v55 = *(_DWORD *)(a1 + 324) - v53 * v48;
          uint64_t v56 = *(void *)(a1 + 328);
          DWORD2(v78) = *(_DWORD *)(a1 + 312);
          HIDWORD(v78) = v49 * v6;
          *(void *)&long long v79 = __PAIR64__(v55, v53);
          *((void *)&v79 + 1) = v56;
          uint64_t v77 = &unk_1F0A472A0;
          *(void *)&long long v78 = v54;
          if (v6 >= 2) {
            kaldi::CuMatrixBase<float>::SetStride((uint64_t)&v77, v53 * v6);
          }
          uint64_t v57 = *(void *)(a1 + 520);
          v76[1] = *(void *)(a1 + 496) + 4 * *(_DWORD *)(a1 + 512) * (int)v48;
          v76[0] = &unk_1F0A472D0;
          v76[2] = v49;
          v76[3] = v57;
          kaldi::CuVectorBase<float>::AddMatVec((uint64_t)&v80, (uint64_t)&v77, CblasTrans, (uint64_t)v76, 1.0, 0.0);
          uint64_t v77 = &unk_1F0A472A0;
          long long v78 = 0u;
          long long v79 = 0u;
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v77);
          long long v80 = &unk_1F0A472D0;
          uint64_t v81 = 0;
          LODWORD(v82) = 0;
          uint64_t v83 = 0;
          long long v84 = &unk_1F0A472A0;
          memset(v85, 0, sizeof(v85));
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v84);
          ++v48;
        }
        while (v12 != v48);
      }
      uint64_t v58 = *(int *)(a1 + 8);
      uint64_t v59 = *(void *)(a1 + 352) + 4 * v58;
      LODWORD(v58) = *(_DWORD *)(a1 + 372) - v58;
      uint64_t v60 = *(void *)(a1 + 376);
      LODWORD(v85[1]) = *(_DWORD *)(a1 + 8 + *(void *)(*(void *)a1 - 24));
      *(void *)((char *)&v85[1] + 4) = *(void *)(a1 + 364);
      HIDWORD(v85[2]) = v58;
      v85[3] = v60;
      long long v84 = &unk_1F0A472A0;
      v85[0] = v59;
      LODWORD(v59) = *(_DWORD *)(v69 + 24);
      uint64_t v61 = *(void *)(v69 + 8) + 4 * (int)v59 * v73 * (int)v6;
      LODWORD(v60) = *(_DWORD *)(v69 + 28) - v59 * v73 * v6;
      uint64_t v62 = *(void *)(v69 + 32);
      DWORD2(v78) = *(_DWORD *)(v69 + 16);
      HIDWORD(v78) = v6;
      *(void *)&long long v79 = __PAIR64__(v60, v59);
      *((void *)&v79 + 1) = v62;
      uint64_t v77 = &unk_1F0A472A0;
      *(void *)&long long v78 = v61;
      kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v84, (uint64_t)&v77, 111);
      uint64_t v77 = &unk_1F0A472A0;
      long long v78 = 0u;
      long long v79 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v77);
      long long v84 = &unk_1F0A472A0;
      memset(v85, 0, sizeof(v85));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v84);
      kaldi::nnet1::Nnet::Propagate<kaldi::CuSubMatrix<float>>(*(uint64_t **)(a1 + 192), (int32x2_t *)(a1 + 344), v74, 0);
      int v10 = (int32x2_t *)(a1 + 248);
      unsigned int v63 = *(_DWORD *)(a3 + 24);
      uint64_t v64 = *(void *)(a3 + 8) + 4 * (int)(v63 * v73 * v6);
      unsigned int v65 = *(_DWORD *)(a3 + 28) - v63 * v73 * v6;
      uint64_t v66 = *(void *)(a3 + 32);
      LODWORD(v85[1]) = *(_DWORD *)(a3 + 16);
      HIDWORD(v85[1]) = v6;
      v85[2] = __PAIR64__(v65, v63);
      v85[3] = v66;
      long long v84 = &unk_1F0A472A0;
      v85[0] = v64;
      kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v84, (uint64_t)v74, 111);
      long long v84 = &unk_1F0A472A0;
      memset(v85, 0, sizeof(v85));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v84);
      ++v73;
    }
    while (v73 != v67);
  }
  kaldi::Matrix<float>::~Matrix((uint64_t)v86);
  kaldi::Vector<float>::Destroy((uint64_t)v88);
}

void sub_1B2131550(_Unwind_Exception *a1)
{
  kaldi::Vector<float>::Destroy(v1 - 144);
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::PropagateFnc(void *a1, uint64_t a2, uint64_t a3)
{
}

void kaldi::nnet1::GlobalRecurrentAttention::BackpropagateFnc()
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "not implemented yet");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::BackpropagateFnc()
{
}

void *kaldi::nnet1::GlobalRecurrentAttention::SetGradientNormalization(uint64_t a1, uint64_t a2, float a3)
{
  (*(void (**)(void))(**(void **)(a1 + 176) + 240))(*(void *)(a1 + 176));
  (*(void (**)(void, uint64_t, float))(**(void **)(a1 + 184) + 240))(*(void *)(a1 + 184), a2, a3);
  uint64_t v6 = *(void **)(a1 + 192);
  return kaldi::nnet1::Nnet::SetGradientNormalization(v6, a2, 0, 0, a3);
}

void *virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::SetGradientNormalization(void *a1, uint64_t a2, float a3)
{
  return kaldi::nnet1::GlobalRecurrentAttention::SetGradientNormalization((uint64_t)a1 + *(void *)(*a1 - 256), a2, a3);
}

void kaldi::nnet1::GlobalRecurrentAttention::AccumGradients()
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "not implemented yet");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::AccumGradients()
{
}

void kaldi::nnet1::GlobalRecurrentAttention::UpdateWeights(kaldi::nnet1::GlobalRecurrentAttention *this, void *a2, uint64_t a3)
{
  (*(void (**)(kaldi::nnet1::GlobalRecurrentAttention *))(*(void *)this + 296))(this);
  (*(void (**)(void))(**((void **)this + 22) + 256))();
  (*(void (**)(void))(**((void **)this + 23) + 256))();
  uint64_t v6 = (kaldi::nnet1::Nnet *)*((void *)this + 24);
  kaldi::nnet1::Nnet::Update(v6, a2, a3);
}

void virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::UpdateWeights(kaldi::nnet1::GlobalRecurrentAttention *this, void *a2, uint64_t a3)
{
}

void kaldi::nnet1::GlobalRecurrentAttention::GetGradient()
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "not implemented yet");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::GetGradient()
{
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::HistoryStateSize(kaldi::nnet1::Nnet **this)
{
  (*((void (**)(kaldi::nnet1::Nnet **))*this + 37))(this);
  float v2 = this[24];
  return kaldi::nnet1::Nnet::HistoryStateSize(v2);
}

uint64_t non-virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::HistoryStateSize(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  uint64_t v1 = (char *)this - 16;
  (*(void (**)(char *))(*((void *)this - 2) + 296))((char *)this - 16);
  float v2 = (kaldi::nnet1::Nnet *)*((void *)v1 + 24);
  return kaldi::nnet1::Nnet::HistoryStateSize(v2);
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::ResetHistoryState(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(void *))(*a1 + 296))(a1);
  uint64_t v8 = a1[24];
  return kaldi::nnet1::Nnet::ResetHistoryStateIfExists(v8, a2, a3, a4);
}

uint64_t non-virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::ResetHistoryState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a1 - 16;
  (*(void (**)(uint64_t))(*(void *)(a1 - 16) + 296))(a1 - 16);
  uint64_t v8 = *(void *)(v7 + 192);
  return kaldi::nnet1::Nnet::ResetHistoryStateIfExists(v8, a2, a3, a4);
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::ResetHistoryState(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  (*(void (**)(kaldi::nnet1::GlobalRecurrentAttention *))(*(void *)this + 296))(this);
  uint64_t v2 = *((void *)this + 24);
  return kaldi::nnet1::Nnet::ResetHistoryStateIfExists(v2);
}

uint64_t non-virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::ResetHistoryState(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  uint64_t v1 = (char *)this - 16;
  (*(void (**)(char *))(*((void *)this - 2) + 296))((char *)this - 16);
  uint64_t v2 = *((void *)v1 + 24);
  return kaldi::nnet1::Nnet::ResetHistoryStateIfExists(v2);
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::GetHistoryState(void *a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void *))(*a1 + 296))(a1);
  uint64_t v6 = a1[24];
  return kaldi::nnet1::Nnet::GetHistoryState(v6, a2, a3);
}

uint64_t non-virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::GetHistoryState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 - 16;
  (*(void (**)(uint64_t))(*(void *)(a1 - 16) + 296))(a1 - 16);
  uint64_t v6 = *(void *)(v5 + 192);
  return kaldi::nnet1::Nnet::GetHistoryState(v6, a2, a3);
}

void *kaldi::nnet1::GlobalRecurrentAttention::GetHistoryState(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(void *))(*a1 + 296))(a1);
  uint64_t v8 = (void *)a1[24];
  return kaldi::nnet1::Nnet::GetHistoryState(v8, a2, a3, a4);
}

void *non-virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::GetHistoryState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a1 - 16;
  (*(void (**)(uint64_t))(*(void *)(a1 - 16) + 296))(a1 - 16);
  uint64_t v8 = *(void **)(v7 + 192);
  return kaldi::nnet1::Nnet::GetHistoryState(v8, a2, a3, a4);
}

void kaldi::nnet1::GlobalRecurrentAttention::SetHistoryState(void *a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void *))(*a1 + 296))(a1);
  uint64_t v6 = a1[24];
  kaldi::nnet1::Nnet::SetHistoryState(v6, a2, a3);
}

void non-virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::SetHistoryState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 - 16;
  (*(void (**)(uint64_t))(*(void *)(a1 - 16) + 296))(a1 - 16);
  uint64_t v6 = *(void *)(v5 + 192);
  kaldi::nnet1::Nnet::SetHistoryState(v6, a2, a3);
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::SetHistoryState(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(void *))(*a1 + 296))(a1);
  uint64_t v8 = a1[24];
  return kaldi::nnet1::Nnet::SetHistoryState(v8, a2, a3, a4);
}

uint64_t non-virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::SetHistoryState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a1 - 16;
  (*(void (**)(uint64_t))(*(void *)(a1 - 16) + 296))(a1 - 16);
  uint64_t v8 = *(void *)(v7 + 192);
  return kaldi::nnet1::Nnet::SetHistoryState(v8, a2, a3, a4);
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::SetInternalBoundary(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return kaldi::nnet1::Nnet::SetInternalBoundary(*(void *)(a1 + 192), a2, a3);
}

uint64_t non-virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::SetInternalBoundary(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return kaldi::nnet1::Nnet::SetInternalBoundary(*(void *)(a1 + 176), a2, a3);
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::Check(uint64_t this)
{
  if (!*(unsigned char *)(this + 668))
  {
    uint64_t v1 = this;
    if (*(int *)(this + 12) < 1 || (int v2 = *(_DWORD *)(this + 8), v2 <= 0))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"component is not initialized, max attention is ", 47);
      uint64_t v7 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)", source state dimension is ", 28);
      std::ostream::operator<<();
    }
    else if (v2 == *(_DWORD *)(*(void *)(this + 176) + 8))
    {
      int v3 = kaldi::nnet1::Nnet::OutputDim(*(kaldi::nnet1::Nnet **)(this + 192));
      uint64_t v4 = *(void *)(v1 + 184);
      if (v3 == *(_DWORD *)(v4 + 8))
      {
        if (*(_DWORD *)(*(void *)(v1 + 176) + 12) == *(_DWORD *)(v4 + 12))
        {
          int v5 = *(_DWORD *)(v1 + *(void *)(*(void *)v1 - 24) + 8) + *(_DWORD *)(v1 + 8);
          if (v5 == kaldi::nnet1::Nnet::InputDim(*(kaldi::nnet1::Nnet **)(v1 + 192)))
          {
            int v6 = *(_DWORD *)(v1 + *(void *)(*(void *)v1 - 24) + 12);
            this = kaldi::nnet1::Nnet::OutputDim(*(kaldi::nnet1::Nnet **)(v1 + 192));
            if (v6 == this)
            {
              *(unsigned char *)(v1 + 668) = 1;
              return this;
            }
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"the internal network has output dim ", 36);
            kaldi::nnet1::Nnet::OutputDim(*(kaldi::nnet1::Nnet **)(v1 + 192));
            unsigned int v15 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" , but the component has output dim ", 36);
            std::ostream::operator<<();
          }
          else
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"the internal network takes input dimension ", 43);
            kaldi::nnet1::Nnet::InputDim(*(kaldi::nnet1::Nnet **)(v1 + 192));
            uint64_t v11 = (void *)std::ostream::operator<<();
            uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" , that is not equal the sum of ", 32);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"source vector dimension ", 24);
            int v13 = (void *)std::ostream::operator<<();
            int v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" and ", 5);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"target input network dim ", 25);
            std::ostream::operator<<();
          }
        }
        else
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"the source and target dot transform has different output dim ", 61);
          int v10 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" vs ", 4);
          std::ostream::operator<<();
        }
      }
      else
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"the internal recurrent network has output dim ", 46);
        kaldi::nnet1::Nnet::OutputDim(*(kaldi::nnet1::Nnet **)(v1 + 192));
        uint64_t v9 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" , but the target dot transform has input dim ", 46);
        std::ostream::operator<<();
      }
    }
    else
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"source state dimension is ", 26);
      uint64_t v8 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" , but the source dot transform has input dim ", 46);
      std::ostream::operator<<();
    }
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v16);
  }
  return this;
}

uint64_t non-virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::Check(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  return kaldi::nnet1::GlobalRecurrentAttention::Check((uint64_t)this - 16);
}

uint64_t TLocaleInfo::composeCharacter(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if ((int)a3 < 768)
  {
LABEL_2:
    if (a3 == 3634 && a2 == 3661) {
      return 3635;
    }
    else {
      return 0;
    }
  }
  if (a3 >= 0x370)
  {
    if (a3 > 0xE30)
    {
      if (a3 > 0xE4E) {
        goto LABEL_2;
      }
      if (a3 > 0xE33)
      {
        if (a3 - 3655 >= 0xFFFFFFF4) {
          goto LABEL_2;
        }
      }
      else if (a3 != 3633)
      {
        goto LABEL_2;
      }
    }
    else
    {
      if (a3 == 1600) {
        return a2;
      }
      if (a3 < 0x64B) {
        goto LABEL_2;
      }
      if (a3 < 0x660 || (a3 & 0xFFFFFFFB) == 0x670) {
        return a2;
      }
      if (a3 != 2364 || *(void *)(a1 + 72) <= 3uLL) {
        goto LABEL_2;
      }
      if ((a2 - 2356) >= 0xFFFFFFE1) {
        return s_szTableNuktaComposition0915to0933[(a2 - 2325)];
      }
    }
    return 0;
  }
  if (a3 > 0x345) {
    return 0;
  }
  uint64_t v4 = (int *)*(&s_szTableCharacterComposition0300to0345 + a3 - 768);
  if (!v4) {
    return 0;
  }
  int v5 = *v4 - 1;
  if (*v4 < 1) {
    return 0;
  }
  if (*v4 == 1)
  {
    int v6 = 0;
LABEL_36:
    if (*(int *)((char *)v4 + ((4 * v6) | 4)) == a2) {
      return v4[v6 + 2];
    }
    return 0;
  }
  int v7 = 0;
  while (1)
  {
    uint64_t v8 = (v5 + v7) | 1;
    int v9 = v4[v8];
    if (v9 == a2) {
      return v4[v8 + 1];
    }
    int v10 = (v5 + v7) / 2;
    if (v9 >= (int)a2) {
      int v5 = v10 - 1;
    }
    else {
      int v7 = v10 + 1;
    }
    if (v7 >= v5)
    {
      int v6 = 2 * v7;
      goto LABEL_36;
    }
  }
}

uint64_t TLocaleInfo::splitDiacritic(uint64_t a1, unsigned int a2)
{
  if ((int)a2 <= 191)
  {
    if (a2 == 105 && *(unsigned char *)(a1 + 80)) {
      return 0x30700000131;
    }
    return a2;
  }
  if (a2 <= 0x233) {
    return s_szTableBaseCharacter00C0to0233[a2 - 192] | ((unint64_t)s_szTableDiacritic00C0to0233[a2 - 192] << 32);
  }
  unsigned int v3 = a2 - 902;
  if (a2 < 0x386) {
    return a2;
  }
  if (a2 <= 0x3D4)
  {
    uint64_t v4 = (unsigned int *)&s_szTableBaseCharacter0386to03D4;
    int v5 = (unsigned int *)&s_szTableDiacritic0386to03D4;
    return v4[v3] | ((unint64_t)v5[v3] << 32);
  }
  unsigned int v3 = a2 - 1024;
  if (a2 < 0x400) {
    return a2;
  }
  if (a2 <= 0x4F9)
  {
    uint64_t v4 = (unsigned int *)&s_szTableBaseCharacter0400to04F9;
    int v5 = (unsigned int *)&s_szTableDiacritic0400to04F9;
    return v4[v3] | ((unint64_t)v5[v3] << 32);
  }
  unsigned int v6 = a2 - 2345;
  if (a2 < 0x929) {
    return a2;
  }
  if (a2 > 0x95F)
  {
    unsigned int v3 = a2 - 7680;
    if (a2 - 7680 <= 0x1FC)
    {
      uint64_t v4 = (unsigned int *)&s_szTableBaseCharacter1E00to1FFC;
      int v5 = (unsigned int *)&s_szTableDiacritic1E00to1FFC;
      return v4[v3] | ((unint64_t)v5[v3] << 32);
    }
    return a2;
  }
  if (a2 < 0x958)
  {
    if (v6 <= 0xB && ((1 << v6) & 0x901) != 0)
    {
      uint64_t v7 = a2 - 1;
      return v7 | 0x93C00000000;
    }
    return a2;
  }
  uint64_t v7 = s_szTableNuktaBaseCharacter0958to095F[a2 - 2392];
  return v7 | 0x93C00000000;
}

unint64_t TLocaleInfo::decomposeCharacter(uint64_t a1, int a2, uint64_t *a3)
{
  unsigned int v4 = a2;
  unint64_t v6 = a3[2];
  int v16 = a2;
  TBuffer<wchar_t>::insert((uint64_t)a3, v6, &v16, 1uLL);
  unint64_t result = TLocaleInfo::splitDiacritic(a1, v4);
  if (v4)
  {
    unint64_t v8 = HIDWORD(result);
    if (HIDWORD(result))
    {
      if (HIDWORD(result) != v4)
      {
        LODWORD(v9) = 0;
        do
        {
          unsigned int v10 = v4;
          unsigned int v4 = result;
          int v17 = v8;
          TBuffer<wchar_t>::insert((uint64_t)a3, a3[2], &v17, 1uLL);
          unint64_t result = TLocaleInfo::splitDiacritic(a1, v4);
          unint64_t v9 = (v9 + 1);
          if (v10 == v4) {
            break;
          }
          unint64_t v8 = HIDWORD(result);
          if (!HIDWORD(result)) {
            break;
          }
        }
        while (v4 != HIDWORD(result));
        if (v9)
        {
          uint64_t v11 = *a3;
          if (v9 != 1)
          {
            unint64_t v12 = v9 >> 1;
            int v13 = (int *)(v11 + 4 * v6 + 4);
            int v14 = (int *)(v11 + 4 * (v6 + v9));
            do
            {
              int v15 = *v13;
              *v13++ = *v14;
              *v14-- = v15;
              --v12;
            }
            while (v12);
          }
          *(_DWORD *)(v11 + 4 * v6) = v4;
        }
      }
    }
  }
  return result;
}

uint64_t TLocaleInfo::removeDiacritics(uint64_t a1, uint64_t a2)
{
  do
  {
    uint64_t v3 = a2;
    a2 = TLocaleInfo::splitDiacritic(a1, a2);
  }
  while (v3 != a2);
  return v3;
}

uint64_t TLocaleInfo::isKtivMenukad(uint64_t a1, unsigned int *a2)
{
  while (1)
  {
    unsigned int v2 = *a2;
    if ((int)*a2 <= 8202)
    {
      if (v2 == 32 || v2 == 160) {
        goto LABEL_21;
      }
      if (!v2) {
        return 0;
      }
    }
    else
    {
      if (v2 == 8203) {
        goto LABEL_21;
      }
      if (v2 == 12288 || v2 == 65279) {
        goto LABEL_21;
      }
    }
    if ((int)v2 < 1425) {
      return 0;
    }
    if (v2 < 0x5F5) {
      break;
    }
    if (v2 - 64285 >= 0x33) {
      return 0;
    }
    uint64_t result = 1;
    if (v2 >> 5 < 0x7D9 || v2 - 64298 < 0x25) {
      return result;
    }
LABEL_21:
    ++a2;
  }
  if (v2 >= 0x5AF)
  {
    if (v2 <= 0x5C7)
    {
      uint64_t result = 1;
      unsigned int v5 = v2 - 1470;
      if (v5 > 8 || ((1 << v5) & 0x125) == 0) {
        return result;
      }
    }
    goto LABEL_21;
  }
  return 1;
}

uint64_t TLocaleInfo::ktivMenukadToKtivMaleh(uint64_t a1, int *a2, void *a3)
{
  unint64_t v5 = a3[2];
  char v6 = 1;
  while (1)
  {
    int v7 = *a2;
    if (*a2 <= 8202)
    {
      if (v7 == 32 || v7 == 160) {
        goto LABEL_11;
      }
      if (!v7) {
        goto LABEL_78;
      }
    }
    else
    {
      BOOL v8 = v7 == 8203 || v7 == 65279;
      if (v8 || v7 == 12288)
      {
LABEL_11:
        int v19 = *a2;
        char v6 = 1;
        TBuffer<wchar_t>::insert((uint64_t)a3, a3[2], &v19, 1uLL);
        goto LABEL_12;
      }
    }
    if (v7 < 1425) {
      goto LABEL_78;
    }
    if (v7 >= 0x5F5) {
      break;
    }
    if (v7 >= 0x5AF)
    {
      if (v7 > 0x5C7) {
        goto LABEL_23;
      }
      if ((v7 & 0xFFFFFFFE) == 0x5BA)
      {
        unint64_t v9 = a3[2];
        if (v9 <= v5 || *(_DWORD *)(*a3 + 4 * v9 - 4) == 1493) {
          goto LABEL_73;
        }
LABEL_49:
        int v19 = 1493;
LABEL_72:
        TBuffer<wchar_t>::insert((uint64_t)a3, v9, &v19, 1uLL);
        goto LABEL_73;
      }
      char v6 = 0;
      if ((v7 - 1460) > 0x12) {
        goto LABEL_12;
      }
      if (((1 << (v7 + 76)) & 0x49400) != 0) {
        goto LABEL_52;
      }
      if (v7 != 1460) {
        goto LABEL_12;
      }
      unint64_t v9 = a3[2];
      if (v9 > v5 && *(_DWORD *)(*a3 + 4 * v9 - 4) != 1497)
      {
        int v15 = a2[1];
        if (!v15 || v15 != 1456 && a2[2] != 1456) {
          goto LABEL_44;
        }
      }
    }
LABEL_73:
    char v6 = 0;
LABEL_12:
    ++a2;
  }
  if ((v7 - 64285) < 0x33)
  {
LABEL_23:
    if (v7 > 64284)
    {
      if (v7 <= 64286)
      {
        if (v7 != 64285) {
          goto LABEL_73;
        }
        goto LABEL_42;
      }
      if (v7 == 64287) {
        goto LABEL_45;
      }
      if (v7 == 64313)
      {
LABEL_42:
        unint64_t v9 = a3[2];
        if (!(v6 & 1 | (v9 <= v5)))
        {
          __int32 v10 = *(_DWORD *)(*a3 + 4 * v9 - 4);
          v11.i32[0] = v10 & 0xFFFFFFFB;
          v11.i32[1] = v10;
          v11.i32[2] = v10;
          v11.i32[3] = v10 & 0xFFFFFFFD;
          unsigned int v12 = a2[1];
          int32x4_t v13 = vdupq_n_s32(v12);
          if ((vmaxvq_u8((uint8x16_t)vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v11, (int32x4_t)xmmword_1B2592430), (int16x8_t)vceqq_s32(v13, (int32x4_t)xmmword_1B2592420)), (int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v13, (int32x4_t)xmmword_1B2592440), (int16x8_t)vceqq_s32(v13, (int32x4_t)xmmword_1B2592450)))) & 1) == 0&& v12 != 64309&& v12 != 64313)
          {
            int v19 = 1497;
            TBuffer<wchar_t>::insert((uint64_t)a3, v9, &v19, 1uLL);
            unint64_t v9 = a3[2];
          }
        }
LABEL_44:
        int v19 = 1497;
        goto LABEL_72;
      }
      if (v7 != 64309) {
        goto LABEL_39;
      }
    }
    else
    {
      if (v7 > 1519)
      {
        if (v7 == 1520)
        {
LABEL_69:
          int v14 = 1493;
          int v19 = 1493;
          TBuffer<wchar_t>::insert((uint64_t)a3, a3[2], &v19, 1uLL);
          goto LABEL_70;
        }
        if (v7 == 1521)
        {
          int v19 = 1493;
          TBuffer<wchar_t>::insert((uint64_t)a3, a3[2], &v19, 1uLL);
          int v19 = 1497;
LABEL_71:
          unint64_t v9 = a3[2];
          goto LABEL_72;
        }
        if (v7 != 1522)
        {
LABEL_39:
          if (v7 >= 0xFB2A)
          {
            if (v7 > 0xFB2D)
            {
              if (v7 > 0xFB30)
              {
                if (v7 > 0xFB4A)
                {
                  switch(v7)
                  {
                    case 64331:
                      goto LABEL_69;
                    case 64332:
                      int v7 = 1489;
                      goto LABEL_52;
                    case 64333:
                      int v7 = 1499;
                      goto LABEL_52;
                    case 64334:
                      int v7 = 1492;
                      goto LABEL_52;
                    case 64335:
                      int v19 = 1488;
                      TBuffer<wchar_t>::insert((uint64_t)a3, a3[2], &v19, 1uLL);
                      int v7 = 1500;
                      goto LABEL_52;
                    default:
                      goto LABEL_52;
                  }
                }
                v7 -= 62816;
              }
              else
              {
                int v7 = 1488;
              }
            }
            else
            {
              int v7 = 1513;
            }
          }
LABEL_52:
          int v19 = v7;
          goto LABEL_71;
        }
LABEL_45:
        int v14 = 1497;
        int v19 = 1497;
        TBuffer<wchar_t>::insert((uint64_t)a3, a3[2], &v19, 1uLL);
LABEL_70:
        int v19 = v14;
        goto LABEL_71;
      }
      if (v7 != 1493)
      {
        if (v7 != 1497) {
          goto LABEL_39;
        }
        goto LABEL_42;
      }
    }
    unint64_t v9 = a3[2];
    if (!(v6 & 1 | (v9 <= v5)) && *(_DWORD *)(*a3 + 4 * v9 - 4) != 1493)
    {
      int v19 = 1493;
      TBuffer<wchar_t>::insert((uint64_t)a3, v9, &v19, 1uLL);
      unint64_t v9 = a3[2];
    }
    goto LABEL_49;
  }
LABEL_78:
  uint64_t v16 = 0;
  while (a2[v16++])
    ;
  return TBuffer<wchar_t>::insert((uint64_t)a3, a3[2], a2, v16 - 1);
}

uint64_t TLocaleInfo::getDigitExtended(uint64_t a1, unsigned int a2)
{
  if ((int)a2 >= 65296)
  {
    unsigned int v2 = a2 - 65296;
    BOOL v3 = a2 >= 0xFF1A;
    goto LABEL_3;
  }
  uint64_t result = a2 - 1632;
  if ((int)a2 < 1632) {
    return 0xFFFFFFFFLL;
  }
  if (a2 <= 0x669) {
    return result;
  }
  uint64_t result = a2 - 1776;
  if (a2 < 0x6F0) {
    return 0xFFFFFFFFLL;
  }
  if (a2 <= 0x6F9) {
    return result;
  }
  uint64_t result = a2 - 1984;
  if (a2 < 0x7C0) {
    return 0xFFFFFFFFLL;
  }
  if (a2 <= 0x7C9) {
    return result;
  }
  uint64_t result = a2 - 2406;
  if (a2 < 0x966) {
    return 0xFFFFFFFFLL;
  }
  if (a2 <= 0x96F) {
    return result;
  }
  uint64_t result = a2 - 2534;
  if (a2 < 0x9E6) {
    return 0xFFFFFFFFLL;
  }
  if (a2 <= 0x9EF) {
    return result;
  }
  uint64_t result = a2 - 2662;
  if (a2 < 0xA66) {
    return 0xFFFFFFFFLL;
  }
  if (a2 <= 0xA6F) {
    return result;
  }
  uint64_t result = a2 - 2790;
  if (a2 < 0xAE6) {
    return 0xFFFFFFFFLL;
  }
  if (a2 <= 0xAEF) {
    return result;
  }
  uint64_t result = a2 - 2918;
  if (a2 < 0xB66) {
    return 0xFFFFFFFFLL;
  }
  if (a2 <= 0xB6F) {
    return result;
  }
  uint64_t result = a2 - 3046;
  if (a2 < 0xBE6) {
    return 0xFFFFFFFFLL;
  }
  if (a2 <= 0xBEF) {
    return result;
  }
  uint64_t result = a2 - 3174;
  if (a2 < 0xC66) {
    return 0xFFFFFFFFLL;
  }
  if (a2 <= 0xC6F) {
    return result;
  }
  uint64_t result = a2 - 3302;
  if (a2 < 0xCE6) {
    return 0xFFFFFFFFLL;
  }
  if (a2 <= 0xCEF) {
    return result;
  }
  uint64_t result = a2 - 3430;
  if (a2 < 0xD66) {
    return 0xFFFFFFFFLL;
  }
  if (a2 <= 0xD6F) {
    return result;
  }
  uint64_t result = a2 - 3664;
  if (a2 < 0xE50) {
    return 0xFFFFFFFFLL;
  }
  if (a2 <= 0xE59) {
    return result;
  }
  uint64_t result = a2 - 3792;
  if (a2 < 0xED0) {
    return 0xFFFFFFFFLL;
  }
  if (a2 <= 0xED9) {
    return result;
  }
  uint64_t result = a2 - 3872;
  if (a2 < 0xF20) {
    return 0xFFFFFFFFLL;
  }
  if (a2 <= 0xF29) {
    return result;
  }
  if (a2 >> 6 < 0x41) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v5 = a2 >> 1;
  if (a2 >> 1 <= 0x824)
  {
    int v6 = -4160;
    return a2 + v6;
  }
  unsigned int v7 = a2 >> 4;
  if (a2 >> 4 < 0x109) {
    return 0xFFFFFFFFLL;
  }
  if (v5 <= 0x84C)
  {
    int v6 = -4240;
    return a2 + v6;
  }
  if (a2 < 0x1369) {
    return 0xFFFFFFFFLL;
  }
  if (v5 <= 0x9B8)
  {
    int v6 = -4968;
    return a2 + v6;
  }
  if (a2 >> 5 < 0xBF) {
    return 0xFFFFFFFFLL;
  }
  if (v5 <= 0xBF4)
  {
    int v6 = -6112;
    return a2 + v6;
  }
  if (v7 < 0x181) {
    return 0xFFFFFFFFLL;
  }
  if (v5 <= 0xC0C)
  {
    int v6 = -6160;
    return a2 + v6;
  }
  if (v5 < 0xCA3) {
    return 0xFFFFFFFFLL;
  }
  if (v7 <= 0x194)
  {
    int v6 = -6470;
    return a2 + v6;
  }
  if (v7 < 0x19D) {
    return 0xFFFFFFFFLL;
  }
  if (v5 <= 0xCEC)
  {
    int v6 = -6608;
    return a2 + v6;
  }
  if (a2 == 6618) {
    return 1;
  }
  if (a2 >> 7 < 0x35) {
    return 0xFFFFFFFFLL;
  }
  if (v5 <= 0xD44)
  {
    int v6 = -6784;
    return a2 + v6;
  }
  if (v7 < 0x1A9) {
    return 0xFFFFFFFFLL;
  }
  if (v5 <= 0xD4C)
  {
    int v6 = -6800;
    return a2 + v6;
  }
  if (v7 < 0x1B5) {
    return 0xFFFFFFFFLL;
  }
  if (v5 <= 0xDAC)
  {
    int v6 = -6992;
    return a2 + v6;
  }
  if (v7 < 0x1BB) {
    return 0xFFFFFFFFLL;
  }
  if (v5 <= 0xDDC)
  {
    int v6 = -7088;
    return a2 + v6;
  }
  if (a2 >> 6 < 0x71) {
    return 0xFFFFFFFFLL;
  }
  if (v5 <= 0xE24)
  {
    int v6 = -7232;
    return a2 + v6;
  }
  if (v7 < 0x1C5) {
    return 0xFFFFFFFFLL;
  }
  if (v5 <= 0xE2C)
  {
    int v6 = -7248;
    return a2 + v6;
  }
  if (a2 >> 5 < 0x531) {
    return 0xFFFFFFFFLL;
  }
  if (a2 <= 0xA629)
  {
    int v6 = -42528;
    return a2 + v6;
  }
  if (v7 < 0xA8D) {
    return 0xFFFFFFFFLL;
  }
  if (a2 <= 0xA8D9)
  {
    int v6 = -43216;
    return a2 + v6;
  }
  if (a2 >> 8 < 0xA9) {
    return 0xFFFFFFFFLL;
  }
  if (a2 <= 0xA909)
  {
    int v6 = -43264;
    return a2 + v6;
  }
  if (v7 < 0xA9D) {
    return 0xFFFFFFFFLL;
  }
  if (a2 <= 0xA9D9)
  {
    int v6 = -43472;
    return a2 + v6;
  }
  if (v7 < 0xAA5) {
    return 0xFFFFFFFFLL;
  }
  if (a2 <= 0xAA59)
  {
    int v6 = -43600;
    return a2 + v6;
  }
  unsigned int v2 = a2 - 44016;
  BOOL v3 = a2 - 44016 >= 0xA;
LABEL_3:
  if (v3) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v2;
  }
}

uint64_t TLocaleInfo::stringToUInt(uint64_t DigitExtended, unsigned int *a2, unsigned int **a3)
{
  unsigned int v4 = a2;
  for (uint64_t i = a2 + 1; ; ++i)
  {
    signed int v6 = *(i - 1);
    if (v6 > 159) {
      break;
    }
    if (v6 > 0x20 || ((1 << v6) & 0x100002600) == 0) {
      goto LABEL_18;
    }
LABEL_17:
    ;
  }
  if (v6 >= 12288)
  {
    if (v6 != 65279 && v6 != 12288) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  if (v6 == 160 || v6 == 8203) {
    goto LABEL_17;
  }
LABEL_18:
  uint64_t v9 = (v6 - 48);
  if (v6 < 48
    || v6 > 0x39
    && (v6 < 0x660
     || (DigitExtended = TLocaleInfo::getDigitExtended(DigitExtended, v6),
         uint64_t v9 = DigitExtended,
         DigitExtended == -1)))
  {
    uint64_t v9 = 0;
  }
  else
  {
    unsigned int v10 = *i;
    if ((int)*i >= 48)
    {
      unsigned int v4 = i;
      while (1)
      {
        if (v10 > 0x39)
        {
          if (v10 < 0x660) {
            goto LABEL_31;
          }
          DigitExtended = TLocaleInfo::getDigitExtended(DigitExtended, v10);
          if (DigitExtended == -1) {
            goto LABEL_31;
          }
        }
        else
        {
          DigitExtended = v10 - 48;
        }
        uint64_t v9 = (DigitExtended + 10 * v9);
        int v11 = v4[1];
        ++v4;
        unsigned int v10 = v11;
        if (v11 <= 47) {
          goto LABEL_31;
        }
      }
    }
    unsigned int v4 = i;
  }
LABEL_31:
  *a3 = v4;
  return v9;
}

uint64_t TLocaleInfo::stringToUInt(uint64_t a1, unsigned int *a2, BOOL *a3)
{
  unsigned int v10 = 0;
  LODWORD(result) = TLocaleInfo::stringToInt(a1, a2, &v10);
  signed int v6 = v10;
  if (v10 == a2)
  {
    uint64_t result = 0;
    *a3 = 1;
    return result;
  }
  while (1)
  {
    int v7 = *v6;
    if ((int)*v6 > 159) {
      break;
    }
    if (v7 > 0x20 || ((1 << v7) & 0x100002600) == 0) {
      goto LABEL_18;
    }
LABEL_17:
    ++v6;
  }
  if (v7 >= 12288)
  {
    if (v7 != 65279 && v7 != 12288) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  if (v7 == 160 || v7 == 8203) {
    goto LABEL_17;
  }
LABEL_18:
  *a3 = v7 != 0;
  if (v7) {
    return 0;
  }
  else {
    return result;
  }
}

uint64_t TLocaleInfo::stringToInt(uint64_t DigitExtended, unsigned int *a2, unsigned int **a3)
{
  for (uint64_t i = a2 + 1; ; ++i)
  {
    int v6 = *(i - 1);
    if (v6 <= 159) {
      break;
    }
    if (v6 >= 12288)
    {
      if (v6 != 65279 && v6 != 12288) {
        goto LABEL_17;
      }
    }
    else if (v6 != 160 && v6 != 8203)
    {
      goto LABEL_17;
    }
LABEL_14:
    ;
  }
  if (v6 > 0x2D) {
    goto LABEL_17;
  }
  if (((1 << v6) & 0x100002600) != 0) {
    goto LABEL_14;
  }
  if (((1 << v6) & 0x280000000000) != 0)
  {
    unsigned int v8 = *i;
    goto LABEL_18;
  }
LABEL_17:
  --i;
  unsigned int v8 = v6;
  int v6 = 0;
LABEL_18:
  unsigned int v9 = v8 - 48;
  if ((int)v8 < 48
    || v8 > 0x39
    && (v8 < 0x660
     || (DigitExtended = TLocaleInfo::getDigitExtended(DigitExtended, v8),
         unsigned int v9 = DigitExtended,
         DigitExtended == -1)))
  {
    uint64_t result = 0;
    *a3 = a2;
  }
  else
  {
    int v12 = i[1];
    int v11 = i + 1;
    unsigned int v10 = v12;
    if (v12 >= 48)
    {
      do
      {
        if (v10 > 0x39)
        {
          if (v10 < 0x660) {
            break;
          }
          DigitExtended = TLocaleInfo::getDigitExtended(DigitExtended, v10);
          if (DigitExtended == -1) {
            break;
          }
        }
        else
        {
          DigitExtended = v10 - 48;
        }
        unsigned int v9 = DigitExtended + 10 * v9;
        int v13 = v11[1];
        ++v11;
        unsigned int v10 = v13;
      }
      while (v13 > 47);
    }
    *a3 = v11;
    if (v6 == 45) {
      return -v9;
    }
    else {
      return v9;
    }
  }
  return result;
}

BOOL TLocaleInfo::stringToBool(uint64_t DigitExtended, uint64_t a2, void *a3)
{
  for (uint64_t i = (unsigned int *)(a2 + 4); ; ++i)
  {
    signed int v6 = *(i - 1);
    if (v6 > 159) {
      break;
    }
    if (v6 > 0x20 || ((1 << v6) & 0x100002600) == 0) {
      goto LABEL_18;
    }
LABEL_17:
    ;
  }
  if (v6 >= 12288)
  {
    if (v6 != 65279 && v6 != 12288) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  if (v6 == 160 || v6 == 8203) {
    goto LABEL_17;
  }
LABEL_18:
  *a3 = i - 1;
  unsigned int v9 = v6 - 48;
  if (v6 < 48
    || v6 > 0x39
    && (v6 < 0x660
     || (DigitExtended = TLocaleInfo::getDigitExtended(DigitExtended, v6),
         unsigned int v9 = DigitExtended,
         DigitExtended == -1)))
  {
    uint64_t v12 = wcsncasecmp((const __int32 *)i - 1, dword_1B2594B0C, 4uLL);
    uint64_t v13 = *a3;
    if v12 || (TLocaleInfo::isAlpha(v12, *(_DWORD *)(v13 + 16)))
    {
      uint64_t v14 = wcsncasecmp((const __int32 *)v13, dword_1B2594B20, 5uLL);
      if (v14) {
        goto LABEL_32;
      }
      int v15 = (signed int *)(*a3 + 20);
      if (TLocaleInfo::isAlpha(v14, *v15)) {
        goto LABEL_32;
      }
      BOOL result = 0;
      *a3 = v15;
    }
    else
    {
      *a3 = v13 + 16;
      return 1;
    }
  }
  else
  {
    if (v9 <= 1)
    {
      unsigned int v10 = *i;
      if ((int)*i < 48
        || v10 >= 0x3A && (v10 < 0x660 || TLocaleInfo::getDigitExtended(DigitExtended, v10) == -1))
      {
        *a3 = i;
        return v9 != 0;
      }
    }
LABEL_32:
    BOOL result = 0;
    *a3 = a2;
  }
  return result;
}

uint64_t TLocaleInfo::isAlpha(uint64_t a1, signed int a2)
{
  uint64_t result = 0;
  if (BYTE1(a2) <= 0x1Du)
  {
    switch(BYTE1(a2))
    {
      case 0:
        BOOL v11 = (a2 & 0xFFFFFFC0) == 0xC0 && (a2 & 0xFFFFFFDF) != 215;
        return (a2 & 0xFFFFFFDF) - 65 < 0x1A || v11;
      case 1:
        uint64_t v3 = a2 - 256;
        if (s_szTableLowercase0100to024F[v3] != a2) {
          return 1;
        }
        unsigned int v4 = s_szTableUppercase0100to0292;
        return v4[v3] != a2;
      case 2:
        if (a2 > 658) {
          return 0;
        }
        uint64_t v3 = a2 - 256;
        if (s_szTableUppercase0100to0292[v3] != a2) {
          return 1;
        }
        if (a2 > 591) {
          return 0;
        }
        unsigned int v4 = s_szTableLowercase0100to024F;
        break;
      case 3:
        uint64_t v3 = (a2 - 880);
        if (a2 < 880) {
          return 0;
        }
        if (s_szTableLowercase0370to03FF[v3] != a2) {
          return 1;
        }
        unsigned int v4 = &s_szTableUppercase0370to03FF;
        return v4[v3] != a2;
      case 4:
      case 5:
        uint64_t result = 1;
        if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vcgtq_u32((uint32x4_t)xmmword_1B2592490, (uint32x4_t)vaddq_s32(vdupq_n_s32(a2), (int32x4_t)xmmword_1B2592480)))) & 1) == 0)
        {
          BOOL v5 = (a2 - 1329) < 0x26 || (a2 - 1377) < 0x26;
          if (a2 == 1231) {
            BOOL v5 = 1;
          }
          unsigned int v6 = a2 == 1216 || v5;
          if ((a2 - 1024) >= 0x60) {
            return v6;
          }
          else {
            return 1;
          }
        }
        return result;
      case 0x10:
        return (a2 - 4256) < 0x26;
      default:
        return result;
    }
    return v4[v3] != a2;
  }
  if (BYTE1(a2) > 0x2Cu)
  {
    if (BYTE1(a2) <= 0xA6u)
    {
      BOOL v7 = (a2 - 42560) < 0x2E || (a2 - 42624) < 0x18;
      if (BYTE1(a2) != 166) {
        BOOL v7 = 0;
      }
      if (BYTE1(a2) == 45) {
        return a2 < 11558;
      }
      else {
        return v7;
      }
    }
    if (BYTE1(a2) != 167)
    {
      BOOL v9 = (a2 - 65313) < 0x1A || (a2 - 65345) < 0x1A;
      return BYTE1(a2) == 255 && v9;
    }
    if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vcgtq_u32((uint32x4_t)xmmword_1B2592470, (uint32x4_t)vaddq_s32(vdupq_n_s32(a2), (int32x4_t)xmmword_1B2592460)))) & 1) == 0)
    {
      if ((a2 - 42877) >= 0x10) {
        return 0;
      }
      else {
        return (0xC001u >> (a2 - 125)) & 1;
      }
    }
    return 1;
  }
  if (BYTE1(a2) > 0x20u)
  {
    if (BYTE1(a2) == 33)
    {
      uint64_t result = 1;
      if ((a2 - 8526) > 0x36 || ((1 << (a2 - 78)) & 0x60000000000001) == 0) {
        return a2 == 8498;
      }
      return result;
    }
    if (BYTE1(a2) != 44) {
      return result;
    }
    if (a2 >> 5 != 355)
    {
      BOOL v15 = a2 != 11311 && (a2 - 11264) < 0x5F;
      unsigned int v16 = (a2 - 11499) < 4 || v15;
      if ((a2 - 11392) >= 0xF) {
        return v16;
      }
      else {
        return 1;
      }
    }
    uint64_t v3 = (a2 - 11360);
    if (s_szTableLowercase2C60to2C7F[v3] == a2)
    {
      unsigned int v4 = &s_szTableUppercase2C60to2C76;
      return v4[v3] != a2;
    }
    return 1;
  }
  if (BYTE1(a2) == 30)
  {
    BOOL v13 = a2 == 7838 || a2 == 7835;
    return (a2 - 7840) < 0xFFFFFFF6 || v13;
  }
  else if (BYTE1(a2) == 31)
  {
    if (a2 > 8188) {
      return 0;
    }
    uint64_t v3 = a2 - 7936;
    if (s_szTableLowercase1F00to1FFC[v3] == a2)
    {
      if (a2 <= 8179)
      {
        unsigned int v4 = &s_szTableUppercase1F00to1FF3;
        return v4[v3] != a2;
      }
      return 0;
    }
    return 1;
  }
  return result;
}

uint64_t TLocaleInfo::stringToBool(uint64_t a1, uint64_t a2, BOOL *a3)
{
  unsigned int v10 = 0;
  LODWORD(result) = TLocaleInfo::stringToBool(a1, a2, &v10);
  unsigned int v6 = v10;
  if (v10 == (int *)a2)
  {
    uint64_t result = 0;
    *a3 = 1;
    return result;
  }
  while (1)
  {
    int v7 = *v6;
    if (*v6 > 159) {
      break;
    }
    if (v7 > 0x20 || ((1 << v7) & 0x100002600) == 0) {
      goto LABEL_18;
    }
LABEL_17:
    ++v6;
  }
  if (v7 >= 12288)
  {
    if (v7 != 65279 && v7 != 12288) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  if (v7 == 160 || v7 == 8203) {
    goto LABEL_17;
  }
LABEL_18:
  *a3 = v7 != 0;
  if (v7) {
    return 0;
  }
  else {
    return result;
  }
}

uint64_t TLocaleInfo::toNarrow(uint64_t a1, uint64_t a2)
{
  if (a2 == 12288) {
    return 32;
  }
  uint64_t result = a2;
  if ((int)a2 >= 65281)
  {
    if (a2 > 0xFF5E)
    {
      switch((int)a2)
      {
        case 65504:
          uint64_t result = 162;
          break;
        case 65505:
          uint64_t result = 163;
          break;
        case 65506:
          uint64_t result = 172;
          break;
        case 65507:
          uint64_t result = 175;
          break;
        case 65508:
          uint64_t result = 166;
          break;
        case 65509:
          uint64_t result = 165;
          break;
        case 65510:
          uint64_t result = 8361;
          break;
        default:
          if (a2 == 65376) {
            unsigned int v3 = 10630;
          }
          else {
            unsigned int v3 = a2;
          }
          if (a2 == 65375) {
            uint64_t result = 10629;
          }
          else {
            uint64_t result = v3;
          }
          break;
      }
    }
    else
    {
      return (a2 - 65248);
    }
  }
  return result;
}

uint64_t TLocaleInfo::normalizeWidth(uint64_t a1, uint64_t a2)
{
  if ((a2 - 65377) > 0x7B) {
    return TLocaleInfo::toNarrow(a1, a2);
  }
  else {
    return s_szTableNormalizeWidthFF61toFFDC[(a2 - 65377)];
  }
}

uint64_t TLocaleInfo::isUpper(uint64_t a1, int a2)
{
  uint64_t result = 0;
  if (BYTE1(a2) <= 0x1Du)
  {
    switch(BYTE1(a2))
    {
      case 0:
        BOOL v9 = a2 != 215 && (a2 - 192) < 0x1F;
        return (a2 - 65) < 0x1A || v9;
      case 1:
        goto LABEL_43;
      case 2:
        if (a2 > 591) {
          return 0;
        }
LABEL_43:
        int v10 = s_szTableLowercase0100to024F[a2 - 256];
        return v10 != a2;
      case 3:
        int v11 = a2 - 880;
        if (a2 < 880) {
          return 0;
        }
        uint64_t v12 = s_szTableLowercase0370to03FF;
        goto LABEL_49;
      case 4:
      case 5:
        if ((a2 - 1120) <= 0x21 || (a2 - 1162) <= 0x35) {
          return (a2 & 1) == 0;
        }
        if ((a2 - 1217) <= 0xD) {
          return a2 & 1;
        }
        BOOL v14 = (a2 - 1024) < 0x30 || (a2 - 1329) < 0x26;
        if (a2 == 1216) {
          BOOL v14 = 1;
        }
        BOOL v15 = (a2 & 1) == 0;
        BOOL v16 = (a2 - 1232) > 0x55;
        goto LABEL_79;
      case 0x10:
        return (a2 - 4256) < 0x26;
      default:
        return result;
    }
  }
  if (BYTE1(a2) > 0x2Bu)
  {
    if (BYTE1(a2) <= 0xA6u)
    {
      if (BYTE1(a2) != 44)
      {
        BOOL v4 = (a2 - 42624) <= 0x17 && (a2 & 1) == 0;
        if ((a2 - 42560) <= 0x2D) {
          BOOL v5 = (a2 & 1) == 0;
        }
        else {
          BOOL v5 = v4;
        }
        BOOL v6 = BYTE1(a2) == 166;
        return v6 && v5;
      }
      if (a2 >> 5 == 355)
      {
        int v11 = a2 - 11360;
        uint64_t v12 = s_szTableLowercase2C60to2C7F;
LABEL_49:
        int v10 = v12[v11];
        return v10 != a2;
      }
      if ((a2 - 11499) <= 3) {
        BOOL v14 = (a2 & 1) == 0;
      }
      else {
        BOOL v14 = (a2 - 11264) < 0x2F;
      }
      BOOL v15 = (a2 & 1) == 0;
      BOOL v16 = (a2 - 11392) > 0xE;
LABEL_79:
      if (v16) {
        return v14;
      }
      else {
        return v15;
      }
    }
    if (BYTE1(a2) != 167)
    {
      BOOL v5 = (a2 - 65313) < 0x1A;
      BOOL v6 = BYTE1(a2) == 255;
      return v6 && v5;
    }
    if ((a2 - 42786) > 0xD && (a2 - 42802) > 0x3D)
    {
      if ((a2 - 42873) <= 3) {
        return (a2 & 1) == 0;
      }
      if ((a2 - 42878) > 9) {
        return a2 == 42877 || a2 == 42891;
      }
    }
    return a2 & 1;
  }
  if (BYTE1(a2) != 30)
  {
    if (BYTE1(a2) != 31)
    {
      BOOL v5 = a2 == 8498 || a2 == 8579;
      BOOL v6 = BYTE1(a2) == 33;
      return v6 && v5;
    }
    if (a2 > 8188) {
      return 0;
    }
    int v10 = s_szTableLowercase1F00to1FFC[a2 - 7936];
    return v10 != a2;
  }
  if (a2 >> 5 >= 0xF5) {
    BOOL v13 = (a2 & 1) == 0;
  }
  else {
    BOOL v13 = a2 == 7838;
  }
  if (a2 <= 7829) {
    return (a2 & 1) == 0;
  }
  else {
    return v13;
  }
}

uint64_t TLocaleInfo::isLower(uint64_t a1, int a2)
{
  if (BYTE1(a2) <= 0x1Eu)
  {
    switch(BYTE1(a2))
    {
      case 0:
        BOOL v11 = a2 != 247 && (a2 - 223) < 0x21;
        return (a2 - 97) < 0x1A || v11;
      case 1:
        goto LABEL_51;
      case 2:
        if (a2 > 658) {
          return 0;
        }
LABEL_51:
        int v12 = s_szTableUppercase0100to0292[a2 - 256];
        return v12 != a2;
      case 3:
        unsigned int v5 = a2 - 880;
        if (a2 < 880) {
          return 0;
        }
        BOOL v6 = &s_szTableUppercase0370to03FF;
        goto LABEL_54;
      case 4:
      case 5:
        if ((a2 - 1120) <= 0x21 || (a2 - 1162) <= 0x35) {
          return a2 & 1;
        }
        if ((a2 - 1217) <= 0xD) {
          return (a2 & 1) == 0;
        }
        if ((a2 - 1232) <= 0x55) {
          return a2 & 1;
        }
        uint64_t result = 1;
        if (a2 != 1231) {
          uint64_t result = (a2 - 1072) < 0x30 || (a2 - 1377) < 0x26;
        }
        break;
      default:
        if (a2 >> 5 >= 0xF5) {
          int v9 = a2 & 1;
        }
        else {
          int v9 = a2 == 7835;
        }
        if (a2 <= 7829) {
          unsigned int v7 = a2 & 1;
        }
        else {
          unsigned int v7 = v9;
        }
        BOOL v8 = BYTE1(a2) == 30;
        goto LABEL_38;
    }
    return result;
  }
  if (BYTE1(a2) <= 0x2Cu)
  {
    switch(BYTE1(a2))
    {
      case 0x1Fu:
        if (a2 <= 8179)
        {
          int v12 = s_szTableUppercase1F00to1FF3[a2 - 7936];
          return v12 != a2;
        }
        break;
      case 0x21u:
        return a2 == 8526 || a2 == 8580;
      case 0x2Cu:
        unsigned int v5 = a2 - 11360;
        if ((a2 - 11360) > 0x16)
        {
          if ((a2 - 11392) > 0xE && (a2 - 11499) > 3) {
            return (a2 - 11312) < 0x2F;
          }
          return a2 & 1;
        }
        BOOL v6 = &s_szTableUppercase2C60to2C76;
LABEL_54:
        int v12 = v6[v5];
        return v12 != a2;
    }
    return 0;
  }
  if (BYTE1(a2) > 0xA6u)
  {
    if (BYTE1(a2) != 167)
    {
      unsigned int v7 = (a2 - 65345) < 0x1A;
      BOOL v8 = BYTE1(a2) == 255;
LABEL_38:
      if (v8) {
        return v7;
      }
      else {
        return 0;
      }
    }
    if ((a2 - 42786) > 0xD && (a2 - 42802) > 0x3D)
    {
      if ((a2 - 42873) <= 3) {
        return (a2 & 1) == 0;
      }
      if ((a2 - 42878) > 9) {
        return a2 == 42892;
      }
    }
    return a2 & 1;
  }
  if ((a2 - 42624) <= 0x17) {
    int v3 = a2 & 1;
  }
  else {
    int v3 = 0;
  }
  if ((a2 - 42560) <= 0x2D) {
    unsigned int v4 = a2 & 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (BYTE1(a2) != 166) {
    unsigned int v4 = 0;
  }
  if (BYTE1(a2) == 45) {
    return a2 < 11558;
  }
  else {
    return v4;
  }
}

uint64_t TLocaleInfo::toLower(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if ((int)a2 <= 127)
  {
    if (a2 == 73 && *(unsigned char *)(a1 + 80)) {
      return 305;
    }
    else {
      return __tolower(a2);
    }
  }
  if (!TLocaleInfo::isUpper(a1, a2)) {
    return v2;
  }
  if (BYTE1(v2) <= 0x1Du)
  {
    switch(BYTE1(v2))
    {
      case 0:
        if (v2 != 215 && (v2 - 192) <= 0x1E) {
          return (v2 + 32);
        }
        return v2;
      case 1:
        return s_szTableLowercase0100to024F[(int)v2 - 256];
      case 2:
        if (v2 <= 0x24F) {
          return s_szTableLowercase0100to024F[(int)v2 - 256];
        }
        return v2;
      case 3:
        int v4 = v2 - 880;
        if (v2 < 0x370) {
          return v2;
        }
        unsigned int v5 = s_szTableLowercase0370to03FF;
        return v5[v4];
      case 4:
      case 5:
        if ((v2 - 1120) <= 0x21 || (v2 - 1162) <= 0x35) {
          return v2 | 1;
        }
        if ((v2 - 1217) <= 0xD) {
          return (v2 & 1) + v2;
        }
        if ((v2 - 1232) <= 0x55) {
          return v2 | 1;
        }
        if ((v2 & 0xFFFFFFF0) == 0x400) {
          return (v2 + 80);
        }
        if ((v2 - 1040) <= 0x1F) {
          return (v2 + 32);
        }
        if (v2 == 1216) {
          return 1231;
        }
        if ((v2 - 1329) <= 0x25) {
          return (v2 + 48);
        }
        return v2;
      case 0x10:
        if ((v2 - 4256) <= 0x25) {
          return (v2 + 7264);
        }
        return v2;
      default:
        return v2;
    }
  }
  if (BYTE1(v2) <= 0x2Bu)
  {
    switch(BYTE1(v2))
    {
      case 0x1Eu:
        if (v2 >> 1 <= 0xF4A || v2 >> 5 >= 0xF5) {
          return v2 | 1;
        }
        if (v2 == 7838) {
          return 223;
        }
        break;
      case 0x1Fu:
        if (v2 <= 0x1FFC) {
          return s_szTableLowercase1F00to1FFC[(int)v2 - 7936];
        }
        break;
      case 0x21u:
        if (v2 == 8498)
        {
          return 8526;
        }
        else if (v2 == 8579)
        {
          return 8580;
        }
        break;
    }
  }
  else if (BYTE1(v2) > 0xA6u)
  {
    if (BYTE1(v2) == 167)
    {
      if ((v2 - 42786) <= 0xD || (v2 - 42802) <= 0x3D) {
        return (v2 & 1) + v2;
      }
      if ((v2 - 42873) <= 3) {
        return v2 | 1;
      }
      if ((v2 - 42878) <= 9) {
        return (v2 & 1) + v2;
      }
      if (v2 == 42877)
      {
        return 7545;
      }
      else if (v2 == 42891)
      {
        return 42892;
      }
    }
    else if (BYTE1(v2) == 255 && (v2 - 65313) <= 0x19)
    {
      return (v2 + 32);
    }
  }
  else
  {
    if (BYTE1(v2) != 44)
    {
      if (BYTE1(v2) != 166 || (v2 - 42560) > 0x2D && (v2 - 42624) > 0x17) {
        return v2;
      }
      return v2 | 1;
    }
    if (v2 >> 5 == 355)
    {
      int v4 = v2 - 11360;
      unsigned int v5 = s_szTableLowercase2C60to2C7F;
      return v5[v4];
    }
    else
    {
      if ((v2 - 11392) <= 0xE || (v2 - 11499) <= 3) {
        return v2 | 1;
      }
      if ((v2 - 11264) <= 0x2E) {
        return (v2 + 48);
      }
    }
  }
  return v2;
}

double TLocaleInfo::stringToFloat(uint64_t a1, __int32 *a2, BOOL *a3)
{
  double v10 = 0.0;
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&__p, a2);
  std::wistringstream::basic_istringstream[abi:ne180100]((uint64_t)v7, &__p, 8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  MEMORY[0x1B3EA7E30](v7, &v10);
  *a3 = (*(_DWORD *)((unsigned char *)&v7[4] + *(void *)(v7[0] - 24)) & 7) != 2;
  double v4 = v10;
  if (v8 < 0) {
    operator delete((void *)v7[10]);
  }
  std::wstreambuf::~wstreambuf();
  std::wistream::~wistream();
  MEMORY[0x1B3EA8530](&v9);
  return v4;
}

void sub_1B2134478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

uint64_t std::wistringstream::basic_istringstream[abi:ne180100](uint64_t a1, const std::wstring *a2, int a3)
{
  uint64_t v6 = a1 + 16;
  *(void *)a1 = &unk_1F0A23080;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 120) = &unk_1F0A230A8;
  std::ios_base::init((std::ios_base *)(a1 + 120), (void *)(a1 + 16));
  *(void *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = -1;
  std::wstringbuf::basic_stringbuf[abi:ne180100](v6, a2, a3 | 8);
  return a1;
}

void sub_1B2134584(_Unwind_Exception *a1)
{
  std::wistream::~wistream();
  MEMORY[0x1B3EA8530](v1);
  _Unwind_Resume(a1);
}

uint64_t std::wistringstream::~wistringstream(uint64_t a1)
{
  uint64_t v2 = a1 + 120;
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  std::wstreambuf::~wstreambuf();
  std::wistream::~wistream();
  MEMORY[0x1B3EA8530](v2);
  return a1;
}

uint64_t TLocaleInfo::stringToULong(uint64_t a1, uint64_t a2, BOOL *a3, int a4)
{
  for (uint64_t i = (unsigned int *)(a2 + 4); ; ++i)
  {
    int v7 = *(i - 1);
    {
      operator new();
    }
    if (v7 > 159) {
      break;
    }
    BOOL v8 = v7 > 0x20 || ((1 << v7) & 0x100002600) == 0;
    if (v8) {
      goto LABEL_21;
    }
LABEL_18:
    ;
  }
  if (v7 >= 12288)
  {
    if (v7 != 65279 && v7 != 12288) {
      goto LABEL_21;
    }
    goto LABEL_18;
  }
  if (v7 == 160 || v7 == 8203) {
    goto LABEL_18;
  }
LABEL_21:
  unsigned int v10 = *(i - 1);
  if (!a4)
  {
    if ((explicit & 1) == 0
    {
      operator new();
    }
    uint64_t v12 = v10 - 48;
    if ((int)v10 >= 48)
    {
      if (v10 <= 0x39) {
        goto LABEL_34;
      }
      if (v10 >= 0x660)
      {
        LODWORD(v12) = TLocaleInfo::getDigitExtended(v12, v10);
        goto LABEL_33;
      }
    }
LABEL_83:
    uint64_t result = 0;
    *a3 = 1;
    return result;
  }
  if ((explicit & 1) == 0
  {
    operator new();
  }
  LODWORD(v12) = v10 - 48;
  if ((int)v10 < 48) {
    goto LABEL_83;
  }
  if (v10 <= 0x39) {
    goto LABEL_34;
  }
  if (v10 < 0x41) {
    goto LABEL_83;
  }
  if (v10 <= 0x46)
  {
    LODWORD(v12) = v10 - 55;
    goto LABEL_34;
  }
  if (v10 - 97 >= 6) {
    goto LABEL_83;
  }
  LODWORD(v12) = v10 - 87;
LABEL_33:
  if (v12 == -1) {
    goto LABEL_83;
  }
LABEL_34:
  uint64_t v13 = (int)v12;
  unsigned int v14 = *i;
  if (!*i) {
    goto LABEL_59;
  }
  if (a4) {
    uint64_t v15 = 16;
  }
  else {
    uint64_t v15 = 10;
  }
  while (2)
  {
    if (a4)
    {
      if ((v16 & 1) == 0
      {
        operator new();
      }
      LODWORD(v17) = v14 - 48;
      if ((int)v14 < 48) {
        break;
      }
      if (v14 <= 0x39) {
        goto LABEL_53;
      }
      if (v14 < 0x41) {
        break;
      }
      if (v14 <= 0x46)
      {
        LODWORD(v17) = v14 - 55;
        goto LABEL_53;
      }
      if (v14 - 97 >= 6) {
        break;
      }
      LODWORD(v17) = v14 - 87;
      goto LABEL_52;
    }
    if ((v16 & 1) == 0
    {
      operator new();
    }
    uint64_t v17 = v14 - 48;
    if ((int)v14 >= 48)
    {
      if (v14 <= 0x39)
      {
LABEL_53:
        uint64_t v13 = v13 * v15 + (int)v17;
        unsigned int v18 = i[1];
        ++i;
        unsigned int v14 = v18;
        if (!v18) {
          break;
        }
        continue;
      }
      if (v14 < 0x660) {
        break;
      }
      LODWORD(v17) = TLocaleInfo::getDigitExtended(v17, v14);
LABEL_52:
      if (v17 == -1) {
        break;
      }
      goto LABEL_53;
    }
    break;
  }
LABEL_59:
  while (2)
  {
    int v19 = *i;
    {
      operator new();
    }
    if (v19 <= 159)
    {
      if (v19 > 0x20 || ((1 << v19) & 0x100002600) == 0) {
        goto LABEL_78;
      }
      goto LABEL_75;
    }
    if (v19 >= 12288)
    {
      if (v19 != 65279 && v19 != 12288) {
        goto LABEL_78;
      }
LABEL_75:
      ++i;
      continue;
    }
    break;
  }
  if (v19 == 160 || v19 == 8203) {
    goto LABEL_75;
  }
LABEL_78:
  BOOL v8 = *i == 0;
  *a3 = *i != 0;
  if (v8) {
    return v13;
  }
  else {
    return 0;
  }
}

void sub_1B2134A70(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

uint64_t TLocaleInfo::valueToString(uint64_t a1, unint64_t a2, uint64_t a3, int a4)
{
  unint64_t v5 = a2;
  if (a4) {
    unint64_t v6 = 16;
  }
  else {
    unint64_t v6 = 10;
  }
  if (v6 <= a2)
  {
    unint64_t v7 = 1;
    unint64_t v8 = a2;
    do
    {
      v8 /= v6;
      v7 *= v6;
    }
    while (v6 <= v8);
    if (v7)
    {
      do
      {
        if (v5 / v7 >= 0xA) {
          int v9 = 55;
        }
        else {
          int v9 = 48;
        }
        int v12 = v9 + v5 / v7;
        TBuffer<wchar_t>::insert(a3, *(void *)(a3 + 16), &v12, 1uLL);
        v5 %= v7;
        v7 /= v6;
      }
      while (v7 > 1);
    }
  }
  if (v5 >= 0xA) {
    int v10 = 55;
  }
  else {
    int v10 = 48;
  }
  int v13 = v10 + v5;
  return TBuffer<wchar_t>::insert(a3, *(void *)(a3 + 16), &v13, 1uLL);
}

void virtual thunk to'std::wistringstream::~wistringstream(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  if (v1[103] < 0) {
    operator delete(*((void **)v1 + 10));
  }
  std::wstreambuf::~wstreambuf();
  std::wistream::~wistream();
  JUMPOUT(0x1B3EA8530);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  if (v1[103] < 0) {
    operator delete(*((void **)v1 + 10));
  }
  std::wstreambuf::~wstreambuf();
  std::wistream::~wistream();
  MEMORY[0x1B3EA8530](v1 + 120);
  JUMPOUT(0x1B3EA8670);
}

void std::wistringstream::~wistringstream(uint64_t a1)
{
  uint64_t v1 = a1 + 120;
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  std::wstreambuf::~wstreambuf();
  std::wistream::~wistream();
  MEMORY[0x1B3EA8530](v1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::wstringbuf::~wstringbuf(uint64_t a1)
{
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  return std::wstreambuf::~wstreambuf();
}

void std::wstringbuf::~wstringbuf(uint64_t a1)
{
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  std::wstreambuf::~wstreambuf();
  JUMPOUT(0x1B3EA8670);
}

std::wstringbuf::pos_type *__cdecl std::wstringbuf::seekoff(std::wstringbuf::pos_type *__return_ptr retstr, std::wstringbuf::pos_type *this, std::wstringbuf::off_type a3, std::ios_base::seekdir __way, std::ios_base::openmode __wch)
{
  unint64_t v5 = *(&this->__st_._mbstateL + 11);
  unint64_t v6 = *(&this->__st_._mbstateL + 6);
  if (v5 < v6)
  {
    *(&this->__st_._mbstateL + 11) = v6;
    unint64_t v5 = v6;
  }
  if ((__wch & 0x18) == 0 || __way == cur && (__wch & 0x18) == 0x18) {
    goto LABEL_14;
  }
  if (!v5)
  {
    uint64_t v8 = 0;
    if (__way) {
      goto LABEL_10;
    }
LABEL_17:
    uint64_t v11 = __way;
    goto LABEL_21;
  }
  unint64_t v7 = &this->__st_._mbstateL + 8;
  if (this->__st_.__mbstate8[87] < 0) {
    unint64_t v7 = (uint64_t *)*v7;
  }
  uint64_t v8 = (uint64_t)(v5 - (void)v7) >> 2;
  if (__way == beg) {
    goto LABEL_17;
  }
LABEL_10:
  if (__way == end)
  {
    uint64_t v11 = v8;
    goto LABEL_21;
  }
  if (__way != cur)
  {
LABEL_14:
    std::streamoff v10 = -1;
    goto LABEL_15;
  }
  if ((__wch & 8) != 0) {
    uint64_t v9 = *(&this->__st_._mbstateL + 3) - *(&this->__st_._mbstateL + 2);
  }
  else {
    uint64_t v9 = v6 - *(&this->__st_._mbstateL + 5);
  }
  uint64_t v11 = v9 >> 2;
LABEL_21:
  std::streamoff v10 = -1;
  uint64_t v12 = v11 + a3;
  if (v12 >= 0
    && v8 >= v12
    && (!v12 || ((__wch & 8) == 0 || *(&this->__st_._mbstateL + 3)) && ((__wch & 0x10) == 0 || v6)))
  {
    if ((__wch & 8) != 0)
    {
      *(&this->__st_._mbstateL + 3) = *(&this->__st_._mbstateL + 2) + 4 * v12;
      *(&this->__st_._mbstateL + 4) = v5;
    }
    if ((__wch & 0x10) != 0) {
      *(&this->__st_._mbstateL + 6) = *(&this->__st_._mbstateL + 5) + 4 * v12;
    }
    std::streamoff v10 = v12;
  }
LABEL_15:
  *((_OWORD *)&retstr->__st_._mbstateL + 6) = 0u;
  *((_OWORD *)&retstr->__st_._mbstateL + 7) = 0u;
  *((_OWORD *)&retstr->__st_._mbstateL + 4) = 0u;
  *((_OWORD *)&retstr->__st_._mbstateL + 5) = 0u;
  *((_OWORD *)&retstr->__st_._mbstateL + 2) = 0u;
  *((_OWORD *)&retstr->__st_._mbstateL + 3) = 0u;
  *(_OWORD *)retstr->__st_.__mbstate8 = 0u;
  *((_OWORD *)&retstr->__st_._mbstateL + 1) = 0u;
  retstr->__off_ = v10;
  return this;
}

std::wstringbuf::pos_type *__cdecl std::wstringbuf::seekpos(std::wstringbuf::pos_type *__return_ptr retstr, std::wstringbuf *this, std::wstringbuf::pos_type *__sp, std::ios_base::openmode __wch)
{
  return (std::wstringbuf::pos_type *)((std::wstringbuf::pos_type *(*)(std::wstringbuf::pos_type *__return_ptr))this->seekoff)(retstr);
}

std::wstringbuf::int_type std::wstringbuf::underflow(std::wstringbuf *this)
{
  hm = this->__hm_;
  nout = this->__nout_;
  if (hm < nout)
  {
    this->__hm_ = nout;
    hm = nout;
  }
  if ((this->__mode_ & 8) == 0) {
    return -1;
  }
  einp = this->__einp_;
  if (einp < hm)
  {
    this->__einp_ = hm;
    einp = hm;
  }
  ninp = this->__ninp_;
  if (ninp < einp) {
    return *ninp;
  }
  else {
    return -1;
  }
}

std::wstringbuf::int_type std::wstringbuf::pbackfail(std::wstringbuf *this, std::wstringbuf::int_type __c)
{
  hm = this->__hm_;
  nout = this->__nout_;
  if (hm < nout)
  {
    this->__hm_ = nout;
    hm = nout;
  }
  ninp = this->__ninp_;
  if (this->__binp_ < ninp)
  {
    if (__c == -1)
    {
      __c = 0;
      unint64_t v5 = ninp - 1;
      goto LABEL_10;
    }
    if ((this->__mode_ & 0x10) != 0 || *(ninp - 1) == __c)
    {
      *(ninp - 1) = __c;
      unint64_t v5 = ninp - 1;
LABEL_10:
      this->__ninp_ = v5;
      this->__einp_ = hm;
      return __c;
    }
  }
  return -1;
}

std::wstringbuf::int_type std::wstringbuf::overflow(std::wstringbuf *this, std::wstringbuf::int_type __c)
{
  if (__c == -1)
  {
    LODWORD(v2) = 0;
    return v2;
  }
  uint64_t v2 = *(void *)&__c;
  binp = this->__binp_;
  ninp = this->__ninp_;
  nout = this->__nout_;
  eout = this->__eout_;
  if (nout != eout)
  {
    hm = this->__hm_;
    goto LABEL_14;
  }
  if ((this->__mode_ & 0x10) == 0)
  {
    LODWORD(v2) = -1;
    return v2;
  }
  bout = this->__bout_;
  std::streamoff v10 = this->__hm_;
  p_str = &this->__str_;
  std::wstring::push_back(&this->__str_, 0);
  if (SHIBYTE(this->__str_.__r_.__value_.__r.__words[2]) < 0) {
    std::wstring::size_type v12 = (this->__str_.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  }
  else {
    std::wstring::size_type v12 = 4;
  }
  std::wstring::resize(&this->__str_, v12, 0);
  if (SHIBYTE(this->__str_.__r_.__value_.__r.__words[2]) < 0)
  {
    p_str = (std::wstringbuf::string_type *)this->__str_.__r_.__value_.__l.__data_;
    std::wstring::size_type size = this->__str_.__r_.__value_.__l.__size_;
  }
  else
  {
    std::wstring::size_type size = HIBYTE(this->__str_.__r_.__value_.__r.__words[2]);
  }
  eout = (std::wstreambuf::char_type *)((char *)p_str + 4 * size);
  nout = (std::wstreambuf::char_type *)((char *)p_str + 4 * (nout - bout));
  this->__bout_ = (std::wstreambuf::char_type *)p_str;
  this->__nout_ = nout;
  this->__eout_ = eout;
  hm = (std::wstringbuf::char_type *)((char *)p_str + 4 * (v10 - bout));
LABEL_14:
  if (nout + 1 >= hm) {
    hm = nout + 1;
  }
  this->__hm_ = hm;
  if ((this->__mode_ & 8) != 0)
  {
    unsigned int v14 = &this->__str_;
    if (SHIBYTE(this->__str_.__r_.__value_.__r.__words[2]) < 0) {
      unsigned int v14 = (std::wstringbuf::string_type *)v14->__r_.__value_.__r.__words[0];
    }
    this->__binp_ = (std::wstreambuf::char_type *)v14;
    this->__ninp_ = (std::wstreambuf::char_type *)((char *)v14 + 4 * (ninp - binp));
    this->__einp_ = hm;
  }
  if (nout != eout)
  {
    this->__nout_ = nout + 1;
    std::wstreambuf::char_type *nout = v2;
    return v2;
  }
  overflow = this->overflow;
  return ((uint64_t (*)(std::wstringbuf *, uint64_t))overflow)(this, v2);
}

void sub_1B21352AC(void *a1)
{
}

uint64_t std::wstringbuf::basic_stringbuf[abi:ne180100](uint64_t a1, const std::wstring *a2, int a3)
{
  uint64_t v6 = std::wstreambuf::basic_streambuf();
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_DWORD *)(v6 + 96) = a3;
  std::wstring::operator=((std::wstring *)(v6 + 64), a2);
  std::wstringbuf::__init_buf_ptrs[abi:ne180100](a1);
  return a1;
}

void sub_1B2135334(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*v2);
  }
  std::wstreambuf::~wstreambuf();
  _Unwind_Resume(a1);
}

void std::wstringbuf::__init_buf_ptrs[abi:ne180100](uint64_t a1)
{
  *(void *)(a1 + 88) = 0;
  uint64_t v2 = (std::wstring *)(a1 + 64);
  char v3 = *(unsigned char *)(a1 + 87);
  if (v3 < 0)
  {
    double v4 = *(std::wstring **)(a1 + 64);
    unint64_t v5 = *(void *)(a1 + 72);
  }
  else
  {
    double v4 = v2;
    unint64_t v5 = *(unsigned __int8 *)(a1 + 87);
  }
  int v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    unint64_t v7 = (char *)v4 + 4 * v5;
    *(void *)(a1 + 88) = v7;
    *(void *)(a1 + 16) = v4;
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = v7;
  }
  if ((v6 & 0x10) != 0)
  {
    *(void *)(a1 + 88) = (char *)v4 + 4 * v5;
    std::wstring::size_type v8 = v3 < 0 ? (*(void *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 4;
    std::wstring::resize(v2, v8, 0);
    uint64_t v9 = *(char *)(a1 + 87) < 0 ? *(void *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(void *)(a1 + 40) = v4;
    *(void *)(a1 + 48) = v4;
    *(void *)(a1 + 56) = (char *)v4 + 4 * v9;
    if ((*(unsigned char *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        uint64_t v10 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        unint64_t v11 = (v10 + ((v5 - 0x80000000 - v10) >> 1)) >> 30;
        double v4 = (std::wstring *)((char *)v4 + 0x1FFFFFFFCLL * v11 + 0x1FFFFFFFCLL);
        unint64_t v5 = v5 - 0x7FFFFFFF - 0x7FFFFFFF * v11;
        *(void *)(a1 + 48) = v4;
      }
      if (v5) {
        *(void *)(a1 + 48) = (char *)v4 + 4 * v5;
      }
    }
  }
}

BOOL WebCore::isCharacterSmartReplaceExempt(WebCore *this, int a2)
{
  {
    WebCore::getSmartSet(BOOL)::preSmartSet = WebCore::getSmartSetImpl((WebCore *)1);
  }
  {
    WebCore::getSmartSet(BOOL)::postSmartSet = WebCore::getSmartSetImpl(0);
  }
  double v4 = &WebCore::getSmartSet(BOOL)::preSmartSet;
  if (!a2) {
    double v4 = &WebCore::getSmartSet(BOOL)::postSmartSet;
  }
  return MEMORY[0x1B3EAA5B0](*v4, this) != 0;
}

void sub_1B2135538(_Unwind_Exception *a1)
{
}

uint64_t WebCore::getSmartSetImpl(WebCore *this)
{
  int v1 = (int)this;
  int v11 = 0;
  std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(&__dst, (char *)L"[[:WSpace:] [\\u000A\\u000B\\u000C\\u000D\\u0085]]");
  uint64_t v2 = uset_openPattern();
  if (v11 >= 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to create uset with patterns: white space and new line");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v3 = v2;
  MEMORY[0x1B3EAA590](v2, 4352, 4607);
  MEMORY[0x1B3EAA590](v3, 11904, 12255);
  MEMORY[0x1B3EAA590](v3, 12272, 12735);
  MEMORY[0x1B3EAA590](v3, 12800, 42191);
  MEMORY[0x1B3EAA590](v3, 44032, 55215);
  MEMORY[0x1B3EAA590](v3, 63744, 64095);
  MEMORY[0x1B3EAA590](v3, 65072, 65103);
  MEMORY[0x1B3EAA590](v3, 65280, 65519);
  MEMORY[0x1B3EAA590](v3, 0x20000, 173782);
  MEMORY[0x1B3EAA590](v3, 194560, 195101);
  if (v1)
  {
    WebCore::addAllCodePoints(v3, (uint64_t *)&__p);
  }
  else
  {
    std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(&__p, ")");
    WebCore::addAllCodePoints(v3, (uint64_t *)&__p);
    if (v8 < 0) {
      operator delete(__p);
    }
    std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(&__p, "[");
    uint64_t v4 = uset_openPattern();
    MEMORY[0x1B3EAA580](v3, v4);
    uset_close();
  }
  if (v8 < 0) {
    operator delete(__p);
  }
  if (v10 < 0) {
    operator delete(__dst);
  }
  return v3;
}

void sub_1B21357C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  __cxa_free_exception(v21);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

uint64_t WebCore::addAllCodePoints(uint64_t result, uint64_t *a2)
{
  BOOL v2 = *((char *)a2 + 23) < 0;
  uint64_t v3 = *((unsigned __int8 *)a2 + 23);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = a2[1];
  }
  if (v3)
  {
    uint64_t v5 = result;
    unint64_t v6 = 0;
    do
    {
      if (v2) {
        unint64_t v7 = (uint64_t *)*a2;
      }
      else {
        unint64_t v7 = a2;
      }
      uint64_t result = MEMORY[0x1B3EAA570](v5, *((unsigned __int16 *)v7 + v6++));
      BOOL v2 = *((char *)a2 + 23) < 0;
      unint64_t v8 = *((unsigned __int8 *)a2 + 23);
      if ((v8 & 0x80u) != 0) {
        unint64_t v8 = a2[1];
      }
    }
    while (v6 < v8);
  }
  return result;
}

unsigned char *std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(unsigned char *__dst, char *__src)
{
  if (!*(_WORD *)__src)
  {
    unint64_t v7 = 0;
    __dst[23] = 0;
    goto LABEL_9;
  }
  uint64_t v4 = 0;
  size_t v5 = 0;
  do
  {
    int v6 = *(unsigned __int16 *)&__src[v5 + 2];
    v5 += 2;
    --v4;
  }
  while (v6);
  unint64_t v7 = -v4;
  if ((unint64_t)-v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v7 >= 0xB)
  {
    uint64_t v9 = (v7 & 0xFFFFFFFFFFFFFFFCLL) + 4;
    if ((v7 | 3) != 0xB) {
      uint64_t v9 = v7 | 3;
    }
    unint64_t v8 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>((uint64_t)__dst, v9 + 1);
    *((void *)__dst + 1) = v7;
    *((void *)__dst + 2) = v10 | 0x8000000000000000;
    *(void *)__dst = v8;
    goto LABEL_13;
  }
  __dst[23] = v7;
  unint64_t v8 = __dst;
  if (v4)
  {
LABEL_13:
    memmove(v8, __src, v5);
    goto LABEL_14;
  }
  unint64_t v7 = 0;
LABEL_9:
  unint64_t v8 = __dst;
LABEL_14:
  *((_WORD *)v8 + v7) = 0;
  return __dst;
}

void quasar::ConvertLocaleToThreeLetterLocale(const void **a1@<X0>, std::string *a2@<X8>)
{
  v42[7] = *MEMORY[0x1E4F143B8];
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[8],0>(&v33, "ar_AE", "ara-XWW");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[8],0>(v35, "zh_CN", "cmn-CHN");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[8],0>(v37, "zh_TW", "cmn-TWN");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[8],0>(v39, "nb_NO", "nor-NOR");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[8],0>(v40, "zh_HK", "yue-HKG");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[8],0>(v41, "zh_MO", "yue-MAC");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[8],0>(v42, "ms_MY", "zlm-MYS");
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v31, (const void **)&v33, 7);
  uint64_t v4 = 21;
  do
  {
    size_t v5 = (void **)&v34[v4 - 1];
    if (*((char *)&v34[v4 - 1] - 1) < 0) {
      operator delete(*(v5 - 3));
    }
    if (*((char *)v5 - 25) < 0) {
      operator delete(*(v5 - 6));
    }
    v4 -= 3;
  }
  while (v4 * 16);
  if (&v32 == (void **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)v31, a1))
  {
    unint64_t v28 = 0;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t ISO3Language = uloc_getISO3Language();
    uint64_t ISO3Country = uloc_getISO3Country();
    if (ISO3Language)
    {
      uint64_t v10 = ISO3Country;
      if (ISO3Country)
      {
        MEMORY[0x1B3EA7B20](&v28, ISO3Language);
        MEMORY[0x1B3EA7B20](&v25, v10);
      }
    }
    uint64_t v11 = HIBYTE(v30);
    if (v30 < 0) {
      uint64_t v11 = v29;
    }
    if (!v11) {
      goto LABEL_39;
    }
    uint64_t v12 = HIBYTE(v27);
    if (v27 < 0) {
      uint64_t v12 = v26;
    }
    if (!v12)
    {
LABEL_39:
      memset(v41, 0, 32);
      memset(v40, 0, sizeof(v40));
      memset(v39, 0, sizeof(v39));
      long long v38 = 0u;
      long long v36 = 0u;
      memset(v37, 0, sizeof(v37));
      memset(v35, 0, sizeof(v35));
      long long v33 = 0u;
      memset(v34, 0, sizeof(v34));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v33);
      uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)"Unable to resolve 3-letter locale for ", 38);
      int v21 = *((char *)a1 + 23);
      if (v21 >= 0) {
        uint64_t v22 = (uint64_t)a1;
      }
      else {
        uint64_t v22 = (uint64_t)*a1;
      }
      if (v21 >= 0) {
        uint64_t v23 = *((unsigned __int8 *)a1 + 23);
      }
      else {
        uint64_t v23 = (uint64_t)a1[1];
      }
      uint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v22, v23);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)".", 1);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v33);
    }
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v33);
    if (v30 >= 0) {
      int v13 = &v28;
    }
    else {
      int v13 = v28;
    }
    if (v30 >= 0) {
      uint64_t v14 = HIBYTE(v30);
    }
    else {
      uint64_t v14 = v29;
    }
    uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v13, v14);
    unsigned __int8 v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"-", 1);
    if (v27 >= 0) {
      uint64_t v17 = &v25;
    }
    else {
      uint64_t v17 = v25;
    }
    if (v27 >= 0) {
      uint64_t v18 = HIBYTE(v27);
    }
    else {
      uint64_t v18 = v26;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
    std::stringbuf::str();
    *(void *)&long long v33 = *MEMORY[0x1E4FBA408];
    uint64_t v19 = *(void *)(MEMORY[0x1E4FBA408] + 72);
    *(void *)((char *)&v34[-1] + *(void *)(v33 - 2std::__tree<int>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
    *(void *)&v34[0] = v19;
    *((void *)&v34[0] + 1) = MEMORY[0x1E4FBA470] + 16;
    if (SHIBYTE(v37[1]) < 0) {
      operator delete(*((void **)&v36 + 1));
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1B3EA8520](&v38);
    if (SHIBYTE(v27) < 0) {
      operator delete(v25);
    }
    if (SHIBYTE(v30) < 0) {
      operator delete(v28);
    }
  }
  else
  {
    uint64_t v6 = std::map<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::at((uint64_t)v31, a1);
    if (*(char *)(v6 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v6, *(void *)(v6 + 8));
    }
    else
    {
      long long v7 = *(_OWORD *)v6;
      a2->__r_.__value_.__r.__words[2] = *(void *)(v6 + 16);
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v7;
    }
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v31, v32);
}

void sub_1B2135E40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void quasar::Locale::fromInternalShortIdentifier(uint64_t a1@<X0>, char *a2@<X1>, std::string *a3@<X8>)
{
  quasar::splitAndTrimNoEmpty((const std::string *)a1, a2, v11);
  if ((long long *)((char *)v11[1] - (char *)v11[0]) != (long long *)48)
  {
    memset(v10, 0, sizeof(v10));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    size_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Identifier '", 12);
    int v6 = *(char *)(a1 + 23);
    if (v6 >= 0) {
      uint64_t v7 = a1;
    }
    else {
      uint64_t v7 = *(void *)a1;
    }
    if (v6 >= 0) {
      uint64_t v8 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      uint64_t v8 = *(void *)(a1 + 8);
    }
    uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v7, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"' does not parse into two elements.", 35);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v10);
  }
  quasar::Locale::Locale(a3, v11[0], (long long *)((char *)v11[0] + 24));
  *(void *)&v10[0] = v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v10);
}

void sub_1B2135FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  a9 = (void **)(v9 - 56);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *quasar::Locale::Locale(std::string *this, long long *a2, long long *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  int v6 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v7 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return this;
}

void sub_1B2136088(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::Locale::toInternalShortIdentifier(uint64_t a1, uint64_t a2)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v20);
  int v4 = *(char *)(a1 + 23);
  if (v4 >= 0) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = *(void *)a1;
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v6 = *(void *)(a1 + 8);
  }
  long long v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, v5, v6);
  int v8 = *(char *)(a2 + 23);
  if (v8 >= 0) {
    uint64_t v9 = a2;
  }
  else {
    uint64_t v9 = *(void *)a2;
  }
  if (v8 >= 0) {
    uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v10 = *(void *)(a2 + 8);
  }
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
  uint64_t v14 = *(void *)(a1 + 24);
  uint64_t v13 = a1 + 24;
  uint64_t v12 = v14;
  int v15 = *(char *)(v13 + 23);
  if (v15 >= 0) {
    uint64_t v16 = v13;
  }
  else {
    uint64_t v16 = v12;
  }
  if (v15 >= 0) {
    uint64_t v17 = *(unsigned __int8 *)(v13 + 23);
  }
  else {
    uint64_t v17 = *(void *)(v13 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v16, v17);
  std::stringbuf::str();
  v20[0] = *MEMORY[0x1E4FBA408];
  uint64_t v18 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v20 + *(void *)(v20[0] - 2std::__tree<int>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v21[0] = v18;
  v21[1] = MEMORY[0x1E4FBA470] + 16;
  if (v22 < 0) {
    operator delete((void *)v21[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EA8520](&v23);
}

void sub_1B213626C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::Locale::toInternalLongIdentifier(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(v4, "_");
  quasar::Locale::toInternalShortIdentifier(a1, (uint64_t)v4);
  quasar::ConvertLocaleToThreeLetterLocale((const void **)&__p, a2);
  if (v7 < 0) {
    operator delete(__p);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_1B21362F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

BOOL quasar::Locale::isCompatible(quasar::Locale *this, const Locale *data)
{
  uint64_t v2 = *((unsigned __int8 *)this + 23);
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = *((unsigned __int8 *)this + 23);
  }
  else {
    uint64_t v3 = *((void *)this + 1);
  }
  unint64_t size = *((unsigned __int8 *)&data->var0.__r_.__value_.var0.var1 + 23);
  int v5 = (char)size;
  if ((size & 0x80u) != 0) {
    unint64_t size = data->var0.__r_.__value_.var0.var1.__size_;
  }
  if (v3 != size) {
    return 0;
  }
  uint64_t v6 = data;
  if (v5 < 0) {
    std::string::pointer data = (const Locale *)data->var0.__r_.__value_.var0.var1.__data_;
  }
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*(const void **)this, data, *((void *)this + 1))) {
      return 0;
    }
  }
  else if (*((unsigned char *)this + 23))
  {
    int v8 = this;
    while (*(unsigned __int8 *)v8 == data->var0.__r_.__value_.var0.var0.__data_[0])
    {
      int v8 = (quasar::Locale *)((char *)v8 + 1);
      std::string::pointer data = (const Locale *)((char *)data + 1);
      if (!--v2) {
        goto LABEL_16;
      }
    }
    return 0;
  }
LABEL_16:
  uint64_t v9 = *((unsigned __int8 *)this + 47);
  if ((v9 & 0x80u) == 0) {
    uint64_t v10 = *((unsigned __int8 *)this + 47);
  }
  else {
    uint64_t v10 = *((void *)this + 4);
  }
  int64_t var0 = v6[1].var0.__r_.__value_.var0.var0.__data_[7];
  int v12 = (char)var0;
  if ((var0 & 0x80u) != 0) {
    int64_t var0 = v6->var0.var0;
  }
  if (v10 != var0) {
    return 0;
  }
  uint64_t v13 = (const void **)((char *)this + 24);
  uint64_t v16 = *(unsigned __int8 **)&v6->var0.__r_.var0;
  p_int64_t var0 = &v6->var0.__r_.var0;
  uint64_t v14 = v16;
  if (v12 >= 0) {
    uint64_t v17 = p_var0;
  }
  else {
    uint64_t v17 = (int *)v14;
  }
  if ((v9 & 0x80) != 0) {
    return memcmp(*v13, v17, *((void *)this + 4)) == 0;
  }
  if (!*((unsigned char *)this + 47)) {
    return 1;
  }
  uint64_t v18 = v9 - 1;
  do
  {
    int v20 = *(unsigned __int8 *)v13;
    uint64_t v13 = (const void **)((char *)v13 + 1);
    int v19 = v20;
    int v22 = *(unsigned __int8 *)v17;
    uint64_t v17 = (int *)((char *)v17 + 1);
    int v21 = v22;
    BOOL v24 = v18-- != 0;
    BOOL result = v19 == v21;
  }
  while (v19 == v21 && v24);
  return result;
}

BOOL quasar::Locale::operator!=(quasar::Locale *a1, const Locale *a2)
{
  return !quasar::Locale::isCompatible(a1, a2);
}

uint64_t std::map<std::string,std::string>::map[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  int v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 48 * a3;
    do
    {
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>((uint64_t **)a1, v4, a2, (long long *)a2);
      a2 += 6;
      v6 -= 48;
    }
    while (v6);
  }
  return a1;
}

void sub_1B21364E0(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void *LHash<unsigned int,Trie<unsigned int,double>>::~LHash(void *a1)
{
  return a1;
}

uint64_t LHashIter<unsigned int,Trie<unsigned int,double>>::LHashIter(uint64_t result, _DWORD **a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  *(void *)BOOL result = *a2;
  *(_DWORD *)(result + 8) = 0;
  if (v3)
  {
    *(_DWORD *)(result + 12) = *v3 >> 5;
    *(void *)(result + 16) = a3;
    *(void *)(result + 24) = 0;
    LHashIter<unsigned int,Trie<unsigned int,double>>::sortKeys();
  }
  *(_DWORD *)(result + 12) = 0;
  *(void *)(result + 16) = a3;
  *(void *)(result + 24) = 0;
  return result;
}

void LHashIter<unsigned int,Trie<unsigned int,double>>::sortKeys()
{
}

void sub_1B21366D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    MEMORY[0x1B3EA8630](a12, 0x1000C8052888210);
  }
  _Unwind_Resume(exception_object);
}

uint64_t LHashIter<unsigned int,Trie<unsigned int,double>>::init(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    uint64_t result = MEMORY[0x1B3EA8630](result, 0x1000C8052888210);
  }
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  if (*(void *)a1)
  {
    *(_DWORD *)(a1 + 12) = **(_DWORD **)a1 >> 5;
    LHashIter<unsigned int,Trie<unsigned int,double>>::sortKeys();
  }
  *(_DWORD *)(a1 + 12) = 0;
  return result;
}

uint64_t LHashIter<unsigned int,Trie<unsigned int,double>>::next(uint64_t a1, _DWORD *a2)
{
  uint64_t v2 = *(_DWORD **)a1;
  if (!*(void *)a1) {
    return 0;
  }
  unsigned int v10 = 0;
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  if (v4 == *(_DWORD *)(a1 + 12)) {
    return 0;
  }
  uint64_t v9 = v2;
  uint64_t v7 = *(void *)(a1 + 24);
  *(_DWORD *)(a1 + 8) = v4 + 1;
  LHash<unsigned int,Trie<unsigned int,unsigned int>>::locate(&v9, *(_DWORD *)(v7 + 4 * v4), &v10);
  uint64_t v8 = *(void *)a1 + 24 * v10;
  uint64_t result = v8 + 8;
  *a2 = *(_DWORD *)(v8 + 24);
  return result;
}

void sub_1B2136800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

_DWORD **Trie<unsigned int,double>::~Trie(_DWORD **a1)
{
  LHashIter<unsigned int,Trie<unsigned int,double>>::LHashIter((uint64_t)v4, a1, 0);
  int v3 = 0;
  while (LHashIter<unsigned int,Trie<unsigned int,double>>::next((uint64_t)v4, &v3))
    Trie<unsigned int,double>::~Trie();
  if (v5) {
    MEMORY[0x1B3EA8630](v5, 0x1000C8052888210);
  }
  LHash<unsigned int,Trie<unsigned int,unsigned long>>::clear(a1, 0);
  return a1;
}

uint64_t Trie<unsigned int,double>::remove(unsigned int **a1, unsigned int *a2, void *a3)
{
  long long v6 = 0uLL;
  uint64_t v4 = Trie<unsigned int,double>::removeTrie(a1, a2, &v6);
  if (a3) {
    *a3 = *((void *)&v6 + 1);
  }
  Trie<unsigned int,double>::~Trie((_DWORD **)&v6);
  return v4;
}

void sub_1B21368F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9)
{
}

uint64_t Trie<unsigned int,double>::removeTrie(unsigned int **a1, unsigned int *a2, _OWORD *a3)
{
  if (!a2) {
    return 0;
  }
  unsigned int v4 = *a2;
  if (v4 == -1) {
    return 0;
  }
  unsigned int v8 = a2[1];
  uint64_t v7 = a2 + 1;
  if (v8 != -1)
  {
    LODWORD(v11) = 0;
    if (LHash<unsigned int,Trie<unsigned int,unsigned int>>::locate(a1, v4, &v11)) {
      return Trie<unsigned int,double>::removeTrie(&(*a1)[6 * v11 + 2], v7, a3);
    }
    return 0;
  }
  if (!a3)
  {
    long long v11 = 0uLL;
    if (LHash<unsigned int,Trie<unsigned int,unsigned long>>::remove(a1, v4, &v11))
    {
      Trie<unsigned int,double>::~Trie((_DWORD **)&v11);
      uint64_t v9 = 1;
    }
    else
    {
      uint64_t v9 = 0;
    }
    Trie<unsigned int,double>::~Trie((_DWORD **)&v11);
    return v9;
  }
  return LHash<unsigned int,Trie<unsigned int,unsigned long>>::remove(a1, v4, a3);
}

void sub_1B2136A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9)
{
}

uint64_t Trie<unsigned int,double>::memStats(_DWORD **a1, uint64_t *a2)
{
  *a2 += 8;
  LHash<unsigned int,Trie<unsigned int,unsigned long>>::memStats(a1, a2);
  LHashIter<unsigned int,Trie<unsigned int,double>>::LHashIter((uint64_t)v7, a1, 0);
  int v6 = 0;
  while (1)
  {
    uint64_t v4 = LHashIter<unsigned int,Trie<unsigned int,double>>::next((uint64_t)v7, &v6);
    if (!v4) {
      break;
    }
    *a2 -= 16;
    Trie<unsigned int,double>::memStats(v4, a2);
  }
  uint64_t result = v8;
  if (v8) {
    return MEMORY[0x1B3EA8630](v8, 0x1000C8052888210);
  }
  return result;
}

void sub_1B2136AAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14) {
    MEMORY[0x1B3EA8630](a14, 0x1000C8052888210);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TrieIter2<unsigned int,double>::TrieIter2(uint64_t a1, _DWORD **a2, _DWORD *a3, int a4, uint64_t a5)
{
  int v6 = a3;
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(_DWORD *)(a1 + 16) = a4;
  *(void *)(a1 + 24) = a5;
  LHashIter<unsigned int,Trie<unsigned int,double>>::LHashIter(a1 + 32, a2, a5);
  *(void *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 72) = 0;
  if (!a4) {
    goto LABEL_4;
  }
  if (a4 == 1)
  {
    ++v6;
LABEL_4:
    *int v6 = -1;
  }
  return a1;
}

uint64_t TrieIter2<unsigned int,double>::init(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  if (v2)
  {
    uint64_t v3 = TrieIter2<unsigned int,unsigned int>::~TrieIter2(v2);
    MEMORY[0x1B3EA8670](v3, 0x10F0C40A7879D68);
  }
  *(void *)(a1 + 64) = 0;
  uint64_t result = LHashIter<unsigned int,Trie<unsigned int,double>>::init(a1 + 32);
  *(unsigned char *)(a1 + 72) = 0;
  return result;
}

uint64_t TrieIter2<unsigned int,double>::next(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if (v2)
  {
    if (v2 == 1)
    {
      uint64_t v3 = a1 + 32;
      uint64_t v4 = *(_DWORD **)(a1 + 8);
      return LHashIter<unsigned int,Trie<unsigned int,double>>::next(v3, v4);
    }
    else
    {
      uint64_t v6 = *(void *)(a1 + 64);
      if (v6)
      {
        uint64_t result = TrieIter2<unsigned int,double>::next(v6);
        if (result) {
          return result;
        }
        uint64_t v7 = *(void *)(a1 + 64);
        if (v7)
        {
          uint64_t v8 = TrieIter2<unsigned int,unsigned int>::~TrieIter2(v7);
          MEMORY[0x1B3EA8670](v8, 0x10F0C40A7879D68);
        }
        *(void *)(a1 + 64) = 0;
      }
      uint64_t result = LHashIter<unsigned int,Trie<unsigned int,double>>::next(a1 + 32, *(_DWORD **)(a1 + 8));
      if (result) {
        operator new();
      }
    }
  }
  else if (*(unsigned char *)(a1 + 72))
  {
    return 0;
  }
  else
  {
    *(unsigned char *)(a1 + 72) = 1;
    return *(void *)a1;
  }
  return result;
}

void sub_1B2136CA8(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F0C40A7879D68);
  _Unwind_Resume(a1);
}

void NgramCounts<double>::NgramCounts(LMStats *a1, Vocab *a2, int a3)
{
  LMStats::LMStats(a1, a2);
  *(void *)uint64_t v4 = &unk_1F0A32F40;
  *(unsigned char *)(v4 + 152) = 0;
  *(_DWORD *)(v4 + 156) = a3;
  *(void *)(v4 + 160) = 0;
  *(void *)(v4 + 168) = 0;
}

void NgramCounts<double>::~NgramCounts(quasar::Bitmap *a1)
{
  *(void *)a1 = &unk_1F0A32F40;
  Trie<unsigned int,double>::~Trie((_DWORD **)a1 + 20);
  quasar::Bitmap::~Bitmap(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_1F0A32F40;
  Trie<unsigned int,double>::~Trie((_DWORD **)a1 + 20);
  quasar::Bitmap::~Bitmap(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t NgramCounts<double>::countSentence(uint64_t a1)
{
  return (*(uint64_t (**)(double))(*(void *)a1 + 104))(1.0);
}

{
  return (*(uint64_t (**)(double))(*(void *)a1 + 136))(1.0);
}

uint64_t NgramCounts<double>::countSentence(uint64_t a1, uint64_t a2, char *a3)
{
  double v6 = 0.0;
  if (sscanf(a3, "%lf", &v6) == 1) {
    return (*(uint64_t (**)(uint64_t, uint64_t, double))(*(void *)a1 + 104))(a1, a2, v6);
  }
  else {
    return 0;
  }
}

uint64_t NgramCounts<double>::countSentence(uint64_t a1, uint64_t a2, double a3)
{
  double v6 = (void *)_ZTW20countSentenceWidsTLS();
  uint64_t v7 = (void *)*v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    uint64_t v7 = malloc_type_calloc(0xC353uLL, 4uLL, 0x100004052888210uLL);
    void *v8 = v7;
  }
  uint64_t v9 = *(uint64_t **)(a1 + 24);
  uint64_t v10 = *v9;
  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v10 + 256))(v9, a2, (uint64_t)v7 + 4, 50001);
  }
  else
  {
    uint64_t v13 = (unsigned int *)(*(uint64_t (**)(uint64_t *))(v10 + 88))(v9);
    uint64_t v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t, void))(*v9 + 272))(v9, a2, (uint64_t)v7 + 4, 50001, *v13);
  }
  uint64_t v14 = *(uint64_t (**)(uint64_t, void *, uint64_t, __n128))(*(void *)a1 + 128);
  v12.n128_f64[0] = a3;
  return v14(a1, v7, v11, v12);
}

{
  void *v6;
  void *v7;
  void *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  unsigned int *v13;
  uint64_t (*v14)(uint64_t, void *, uint64_t, __n128);
  uint64_t vars8;

  double v6 = (void *)_ZTW20countSentenceWidsTLS();
  uint64_t v7 = (void *)*v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    uint64_t v7 = malloc_type_calloc(0xC353uLL, 4uLL, 0x100004052888210uLL);
    void *v8 = v7;
  }
  uint64_t v9 = *(uint64_t **)(a1 + 24);
  uint64_t v10 = *v9;
  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v10 + 264))(v9, a2, (uint64_t)v7 + 4, 50001);
  }
  else
  {
    uint64_t v13 = (unsigned int *)(*(uint64_t (**)(uint64_t *))(v10 + 88))(v9);
    uint64_t v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t, void))(*v9 + 280))(v9, a2, (uint64_t)v7 + 4, 50001, *v13);
  }
  uint64_t v14 = *(uint64_t (**)(uint64_t, void *, uint64_t, __n128))(*(void *)a1 + 128);
  v12.n128_f64[0] = a3;
  return v14(a1, v7, v11, v12);
}

uint64_t NgramCounts<double>::countSentence(uint64_t a1, uint64_t *a2, double a3)
{
  double v6 = (void *)_ZTW20countSentenceWidsTLS();
  uint64_t v8 = (_DWORD *)*v6;
  if (!*v6)
  {
    uint64_t v9 = v6;
    uint64_t v8 = malloc_type_calloc(0xC353uLL, 4uLL, 0x100004052888210uLL);
    *uint64_t v9 = v8;
  }
  uint64_t v10 = 0;
  uint64_t v11 = *a2;
  uint64_t v12 = (a2[1] - *a2) >> 2;
  while (v12 != v10)
  {
    v8[v10 + 1] = *(_DWORD *)(v11 + 4 * v10);
    if (++v10 == 50000) {
      goto LABEL_8;
    }
  }
  v8[(v12 + 1)] = -1;
LABEL_8:
  uint64_t v13 = *(uint64_t (**)(uint64_t, __n128))(*(void *)a1 + 128);
  v7.n128_f64[0] = a3;
  return v13(a1, v7);
}

uint64_t NgramCounts<double>::countSentenceHelper(uint64_t a1, _DWORD *a2, unsigned int a3, __n128 a4)
{
  if (a3 == 50001) {
    return 0;
  }
  unint64_t v6 = a4.n128_u64[0];
  if (*(unsigned char *)(a1 + 32)) {
    BOOL v10 = 1;
  }
  else {
    BOOL v10 = a3 == 0;
  }
  if (!v10)
  {
    unsigned int v11 = 1;
    do
    {
      int v12 = a2[v11];
      if (v12 == *(_DWORD *)(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 88))(*(void *)(a1 + 24))) {
        *(double *)(a1 + 72) = *(double *)(a1 + 72) + 1.0;
      }
      ++v11;
    }
    while (v11 <= a3);
  }
  if (*(unsigned char *)(a1 + 33)
    && (int v13 = a2[1],
        v13 != *(_DWORD *)(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 104))(*(void *)(a1 + 24))))
  {
    *a2 = *(_DWORD *)(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 104))(*(void *)(a1 + 24));
    uint64_t v14 = a2;
  }
  else
  {
    uint64_t v14 = a2 + 1;
  }
  if (*(unsigned char *)(a1 + 34))
  {
    int v15 = a2[a3];
    if (v15 != *(_DWORD *)(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 120))(*(void *)(a1 + 24)))
    {
      a2[a3 + 1] = *(_DWORD *)(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 120))(*(void *)(a1 + 24));
      a2[a3 + 2] = -1;
    }
  }
  uint64_t v16 = *(uint64_t (**)(uint64_t, _DWORD *, __n128))(*(void *)a1 + 136);
  a4.n128_u64[0] = v6;
  return v16(a1, v14, a4);
}

uint64_t NgramCounts<double>::countSentence(uint64_t a1, int *a2, double a3)
{
  uint64_t v3 = a2;
  if (*a2 == -1)
  {
    uint64_t v6 = 0;
    int v7 = -1;
  }
  else
  {
    LODWORD(v6) = 0;
    do
    {
      NgramCounts<double>::incrementCounts(a1, (uint64_t)a2, 1u, a3);
      uint64_t v6 = (v6 + 1);
      a2 = &v3[v6];
    }
    while (*a2 != -1);
    int v7 = *v3;
  }
  *(double *)(a1 + 64) = *(double *)(a1 + 64) + (double)v6;
  if (v7 == *(_DWORD *)(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 104))(*(void *)(a1 + 24))) {
    *(double *)(a1 + 64) = *(double *)(a1 + 64) + -1.0;
  }
  if (v6)
  {
    int v8 = v3[(v6 - 1)];
    if (v8 == *(_DWORD *)(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 120))(*(void *)(a1 + 24))) {
      *(double *)(a1 + 64) = *(double *)(a1 + 64) + -1.0;
    }
  }
  *(double *)(a1 + 56) = *(double *)(a1 + 56) + 1.0;
  return v6;
}

uint64_t NgramCounts<double>::incrementCounts(uint64_t result, uint64_t a2, unsigned int a3, double a4)
{
  if (*(_DWORD *)(result + 156))
  {
    uint64_t v6 = result;
    unint64_t v7 = 0;
    result += 160;
    unint64_t v8 = a3;
    do
    {
      unsigned int v9 = *(_DWORD *)(a2 + 4 * v7);
      if (v9 == -1) {
        break;
      }
      char v10 = 0;
      uint64_t result = LHash<unsigned int,Trie<unsigned int,unsigned long>>::insert((void *)result, v9, &v10);
      if (!v10) {
        *(_DWORD *)uint64_t result = 0;
      }
      if (++v7 >= v8) {
        *(double *)(result + 8) = *(double *)(result + 8) + a4;
      }
    }
    while (v7 < *(unsigned int *)(v6 + 156));
  }
  return result;
}

uint64_t NgramCounts<double>::read(uint64_t a1, File *a2)
{
  return NgramCounts<double>::read(a1, a2, *(_DWORD *)(a1 + 156), 0);
}

uint64_t NgramCounts<double>::read(uint64_t a1, File *this, unsigned int a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = File::getline(this);
  if (v8)
  {
    memset(v15, 0, 512);
    int v13 = 0;
    if (!strcmp(v8, "SRILM_BINARY_COUNTS_001\n"))
    {
      File::File((File *)v12, *(const char **)this, "rb", 1);
      uint64_t Binary = NgramCounts<double>::readBinary(a1, (File *)v12, a3, a4);
      File::~File((File *)v12);
      return Binary;
    }
    File::ungetline((uint64_t)this);
    for (unsigned int i = NgramCounts<double>::readNgram(this, v15, (const char **)0x65, &v13);
          i;
          unsigned int i = NgramCounts<double>::readNgram(this, v15, (const char **)0x65, &v13))
    {
      NgramCounts<double>::updateCounts(a1, i, a3, a4, (uint64_t)v15, v14, *(double *)&v13);
    }
  }
  return 1;
}

void sub_1B21377B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  File::~File((File *)va);
  _Unwind_Resume(a1);
}

uint64_t NgramCounts<double>::readBinary(uint64_t a1, File *this, int a3, uint64_t a4)
{
  unint64_t v8 = File::getline(this);
  if (!v8 || strcmp(v8, "SRILM_BINARY_COUNTS_001\n"))
  {
    unsigned int v9 = File::position((const char **)this, MEMORY[0x1E4FBA240]);
    char v10 = "bad binary format\n";
    uint64_t v11 = 18;
LABEL_4:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    return 0;
  }
  uint64_t v14 = File::getline(this);
  int v25 = 0;
  if (sscanf(v14, "maxorder %u", &v25) != 1)
  {
    unsigned int v9 = File::position((const char **)this, MEMORY[0x1E4FBA240]);
    char v10 = "could not read ngram order\n";
    uint64_t v11 = 27;
    goto LABEL_4;
  }
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  int v24 = 0;
  if ((*(unsigned int (**)(void, File *, uint64_t *, uint64_t))(**(void **)(a1 + 24) + 336))(*(void *)(a1 + 24), this, &v22, a4))
  {
    off_t v21 = File::ftell(this);
    if ((v21 & 0x8000000000000000) == 0)
    {
      uint64_t v12 = NgramCounts<double>::readBinaryNode(a1, (_DWORD **)(a1 + 160), a3, v25, this, &v21, a4, (int *)&v22);
      goto LABEL_13;
    }
    int v15 = File::position((const char **)this, MEMORY[0x1E4FBA240]);
    uint64_t v16 = __error();
    uint64_t v17 = srilm_ts_strerror(*v16);
    size_t v18 = strlen(v17);
    int v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v17, v18);
    std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(void *)(*v19 - 24)));
    int v20 = std::locale::use_facet(&v26, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
    std::locale::~locale(&v26);
    std::ostream::put();
    std::ostream::flush();
  }
  uint64_t v12 = 0;
LABEL_13:
  if (v23) {
    MEMORY[0x1B3EA8630](v23, 0x1000C8052888210);
  }
  return v12;
}

void sub_1B21379F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  std::locale::~locale((std::locale *)(v13 - 40));
  if (a13) {
    MEMORY[0x1B3EA8630](a13, 0x1000C8052888210);
  }
  _Unwind_Resume(a1);
}

Vocab *NgramCounts<double>::readNgram(File *a1, char *a2, const char **a3, char **a4)
{
  uint64_t result = (Vocab *)File::getline(a1);
  if (result)
  {
    uint64_t result = (Vocab *)NgramCounts<double>::parseNgram(result, a2, a3, a4);
    if (!result)
    {
      unsigned int v9 = File::position((const char **)a1, MEMORY[0x1E4FBA240]);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"malformed N-gram count or more than ", 36);
      char v10 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" words per line\n", 16);
      return 0;
    }
  }
  return result;
}

uint64_t NgramCounts<double>::updateCounts(uint64_t result, unsigned int a2, unsigned int a3, int a4, uint64_t a5, unsigned int *a6, double a7)
{
  if (a2 <= a3)
  {
    uint64_t v21 = v10;
    uint64_t v22 = v9;
    uint64_t v23 = v7;
    uint64_t v24 = v8;
    uint64_t v14 = result;
    if (a4)
    {
      uint64_t result = (*(uint64_t (**)(void, uint64_t, unsigned int *, uint64_t))(**(void **)(result + 24) + 288))(*(void *)(result + 24), a5, a6, 100);
      if (!result) {
        return result;
      }
    }
    else
    {
      int v15 = *(uint64_t **)(result + 24);
      uint64_t v16 = *v15;
      if (*(unsigned char *)(result + 32))
      {
        (*(void (**)(uint64_t *, uint64_t, unsigned int *, uint64_t))(v16 + 256))(v15, a5, a6, 100);
      }
      else
      {
        uint64_t v17 = (unsigned int *)(*(uint64_t (**)(uint64_t *))(v16 + 88))(v15);
        (*(void (**)(uint64_t *, uint64_t, unsigned int *, uint64_t, void))(*v15 + 272))(v15, a5, a6, 100, *v17);
      }
    }
    size_t v18 = (_DWORD **)(v14 + 160);
    if (*(unsigned char *)(v14 + 152))
    {
      char v19 = 0;
      uint64_t result = Trie<unsigned int,unsigned int>::findTrie(v18, a6, &v19);
      if (!result) {
        return result;
      }
    }
    else
    {
      char v20 = 0;
      uint64_t result = (uint64_t)Trie<unsigned int,unsigned long>::insertTrie(v18, a6, &v20);
    }
    *(double *)(result + 8) = *(double *)(result + 8) + a7;
  }
  return result;
}

uint64_t NgramCounts<double>::read(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  memset(v16, 0, 512);
  while ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 24))(a2))
  {
    uint64_t v8 = *(uint64_t **)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
    uint64_t v14 = v8;
    double v9 = (double)*v8;
    if (v8[10] == v8[11])
    {
      unsigned int Ngram = NgramCounts<unsigned long>::readNgram(v8 + 4, (uint64_t ***)v16, 0x65u);
      if (!Ngram)
      {
        char v11 = 0;
        goto LABEL_8;
      }
      NgramCounts<double>::updateCounts(a1, Ngram, a3, a4, (uint64_t)v16, v15, v9);
    }
    else
    {
      NgramCounts<double>::updateCounts(a1, a3, a4, v8 + 10, v15, (double)*v8);
    }
    char v11 = 1;
LABEL_8:
    uint64_t v12 = (uint64_t)v14;
    uint64_t v14 = 0;
    if (v12) {
      std::default_delete<quasar::lm::TokenStringAndCount const>::operator()[abi:ne180100]((uint64_t)&v14, v12);
    }
    if ((v11 & 1) == 0) {
      return 1;
    }
  }
  return 1;
}

void sub_1B2137DF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  uint64_t v10 = a9;
  a9 = 0;
  if (v10) {
    std::default_delete<quasar::lm::TokenStringAndCount const>::operator()[abi:ne180100]((uint64_t)&a9, v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t NgramCounts<double>::updateCounts(uint64_t result, unsigned int a2, int a3, void *a4, unsigned int *a5, double a6)
{
  if (a2 >= (unint64_t)((uint64_t)(a4[1] - *a4) >> 2))
  {
    uint64_t v8 = result;
    uint64_t result = (*(uint64_t (**)(void, void *, unsigned int *, uint64_t, BOOL))(**(void **)(result + 24)
                                                                                        + 296))(*(void *)(result + 24), a4, a5, 100, a3 != 0);
    if (result)
    {
      double v9 = (_DWORD **)(v8 + 160);
      if (*(unsigned char *)(v8 + 152))
      {
        char v10 = 0;
        uint64_t result = Trie<unsigned int,unsigned int>::findTrie(v9, a5, &v10);
        if (!result) {
          return result;
        }
      }
      else
      {
        char v11 = 0;
        uint64_t result = (uint64_t)Trie<unsigned int,unsigned long>::insertTrie(v9, a5, &v11);
      }
      *(double *)(result + 8) = *(double *)(result + 8) + a6;
    }
  }
  return result;
}

uint64_t NgramCounts<double>::readGoogle(uint64_t a1, char *__s, unsigned int a3, unsigned int a4)
{
  size_t v5 = strlen(__s);
  *(_DWORD *)&v27[8] = 0;
  int v28 = 0;
  size_t v6 = v5 + 20;
  int v26 = 0;
  *(void *)uint64_t v27 = (v5 + 20);
  if (v5 != -20) {
    Array<char>::alloc();
  }
  snprintf(0, v6, "%s/1gms/vocab%s", __s, ".gz");
  File::File((File *)v25, (const char *)(*(void *)&v27[4] - v26), "r", 0);
  if (File::error((File *)v25))
  {
    snprintf((char *)(*(void *)&v27[4] - v26), v6, "%s/1gms/vocab", __s);
    File::reopen((File *)v25, (const char *)(*(void *)&v27[4] - v26), "r");
  }
  if (!File::error((File *)v25))
  {
    if (!*(unsigned char *)(a1 + 8) && (Debug::debugAll || *(_DWORD *)(a1 + 12)))
    {
      uint64_t v7 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
      uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"reading ", 8);
      size_t v9 = strlen((const char *)(*(void *)&v27[4] - v26));
      char v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(void *)&v27[4] - v26, v9);
      std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(*v10 - 24)));
      char v11 = std::locale::use_facet(&v21, MEMORY[0x1E4FBA258]);
      ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
      std::locale::~locale(&v21);
      std::ostream::put();
      std::ostream::flush();
    }
    int v12 = NgramCounts<double>::read(a1, (File *)v25, 1u, a4);
    File::~File((File *)v25);
    if (!v12) {
      goto LABEL_28;
    }
    if (a3 < 2)
    {
      uint64_t v13 = 1;
      goto LABEL_29;
    }
    int v14 = 2;
    while (1)
    {
      snprintf((char *)(*(void *)&v27[4] - v26), v6, "%s/%dgms/%dgm.idx", __s, v14, v14);
      File::File((File *)v25, (const char *)(*(void *)&v27[4] - v26), "r", 0);
      if (File::error((File *)v25)) {
        break;
      }
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      int v24 = 0;
      int v15 = File::getline((File *)v25);
      if (v15)
      {
        strdup(v15);
        operator new[]();
      }
      if (File::error((File *)v25))
      {
        perror((const char *)(*(void *)&v27[4] - v26));
        uint64_t v13 = 0;
      }
      else
      {
        uint64_t v13 = 1;
      }
      if (v23) {
        MEMORY[0x1B3EA8630](v23, 0x80C80B8603338);
      }
      File::~File((File *)v25);
      if (v14 + 1 <= a3) {
        char v16 = v13;
      }
      else {
        char v16 = 0;
      }
      ++v14;
      if ((v16 & 1) == 0) {
        goto LABEL_29;
      }
    }
  }
  perror((const char *)(*(void *)&v27[4] - v26));
  File::~File((File *)v25);
LABEL_28:
  uint64_t v13 = 0;
LABEL_29:
  if (*(void *)&v27[4]) {
    MEMORY[0x1B3EA8630](*(void *)&v27[4], 0x1000C8077774924);
  }
  return v13;
}

void sub_1B213855C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::locale a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  std::locale::~locale(&a15);
  File::~File((File *)&a31);
  uint64_t v33 = *(void *)(v31 - 112);
  if (v33) {
    MEMORY[0x1B3EA8630](v33, 0x1000C8077774924);
  }
  _Unwind_Resume(a1);
}

uint64_t NgramCounts<double>::readMinCounts(int a1, File *this)
{
  uint64_t v3 = File::getline(this);
  if (!v3) {
    return 1;
  }
  if (strcmp(v3, "SRILM_BINARY_COUNTS_001\n"))
  {
    File::ungetline((uint64_t)this);
    operator new[]();
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"binary format not yet support in readMinCounts\n", 47);
  return 0;
}

void sub_1B2138964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a18) {
    MEMORY[0x1B3EA8630](a18, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

double *NgramCounts<double>::updateCountsMinCounts(double *result, unsigned int a2, unsigned int a3, uint64_t a4, int a5, uint64_t a6, Vocab *a7, uint64_t a8, double a9, uint64_t a10, uint64_t a11)
{
  if (a2 > a3) {
    return result;
  }
  uint64_t v17 = (uint64_t)result;
  if ((double)*(unint64_t *)(a4 + 8 * (a2 - 1)) <= a9)
  {
    uint64_t v18 = 0xFFFFFFFFLL;
    if (a5)
    {
LABEL_7:
      uint64_t result = (double *)(*(uint64_t (**)(void, uint64_t, Vocab *, uint64_t))(**(void **)(v17 + 24) + 288))(*(void *)(v17 + 24), a6, a7, 100);
      if (!result) {
        return result;
      }
      goto LABEL_13;
    }
  }
  else
  {
    if (!a9) {
      return result;
    }
    uint64_t result = (double *)(*(uint64_t (**)(void))(**((void **)result + 3) + 240))(*((void *)result + 3));
    uint64_t v18 = (uint64_t)result;
    if (result == -1) {
      return result;
    }
    if (a5) {
      goto LABEL_7;
    }
  }
  char v19 = *(uint64_t **)(v17 + 24);
  uint64_t v20 = *v19;
  if (*(unsigned char *)(v17 + 32))
  {
    (*(void (**)(uint64_t *, uint64_t, Vocab *, uint64_t))(v20 + 256))(v19, a6, a7, 100);
  }
  else
  {
    std::locale v21 = (unsigned int *)(*(uint64_t (**)(uint64_t *))(v20 + 88))(v19);
    (*(void (**)(uint64_t *, uint64_t, Vocab *, uint64_t, void))(*v19 + 272))(v19, a6, a7, 100, *v21);
  }
LABEL_13:
  return NgramCounts<double>::updateMinCountsHelper(v17, a2, (const unsigned int *)v18, a7, a8, a10, a11, a9);
}

uint64_t NgramCounts<double>::addCounts(uint64_t a1, unsigned int *a2, _DWORD **a3)
{
  int v4 = *(unsigned __int8 *)(a1 + 152);
  size_t v5 = (_DWORD **)(a1 + 160);
  v12[0] = 0;
  if (v4) {
    uint64_t result = Trie<unsigned int,unsigned int>::findTrie(v5, a2, v12);
  }
  else {
    uint64_t result = (uint64_t)Trie<unsigned int,unsigned long>::insertTrie(v5, a2, v12);
  }
  uint64_t v7 = (void *)result;
  if (result)
  {
    LHashIter<unsigned int,double>::LHashIter((uint64_t)v12, a3, 0);
    unsigned int v11 = 0;
    while (1)
    {
      uint64_t v8 = (double *)LHashIter<unsigned int,double>::next((uint64_t)v12, &v11);
      if (!v8) {
        break;
      }
      double v9 = *v8;
      char v14 = 0;
      uint64_t v10 = LHash<unsigned int,Trie<unsigned int,unsigned long>>::insert(v7, v11, &v14);
      if (!v14) {
        *(_DWORD *)uint64_t v10 = 0;
      }
      *(double *)(v10 + 8) = v9 + *(double *)(v10 + 8);
    }
    uint64_t result = v13;
    if (v13) {
      return MEMORY[0x1B3EA8630](v13, 0x1000C8052888210);
    }
  }
  return result;
}

void sub_1B2138CB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13) {
    MEMORY[0x1B3EA8630](a13, 0x1000C8052888210);
  }
  _Unwind_Resume(exception_object);
}

void NgramCounts<double>::readMinCounts()
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v6 = 0u;
  long long v7 = 0u;
  long long v4 = 0u;
  long long v5 = 0u;
  long long v2 = 0u;
  long long v3 = 0u;
  long long v0 = 0u;
  long long v1 = 0u;
  operator new[]();
}

void sub_1B21390CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a18) {
    MEMORY[0x1B3EA8630](a18, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

double *NgramCounts<double>::updateCountsMinCounts(double *result, unsigned int a2, uint64_t a3, int a4, void *a5, Vocab *a6, uint64_t a7, uint64_t a8, double a9, uint64_t a10)
{
  unint64_t v10 = (uint64_t)(a5[1] - *a5) >> 2;
  if (v10 <= a2)
  {
    uint64_t v17 = (uint64_t)result;
    if ((double)*(unint64_t *)(a3 + 8 * (v10 - 1)) <= a9)
    {
      uint64_t v18 = 0xFFFFFFFFLL;
    }
    else
    {
      if (!a9) {
        return result;
      }
      uint64_t result = (double *)(*(uint64_t (**)(void))(**((void **)result + 3) + 240))(*((void *)result + 3));
      uint64_t v18 = (uint64_t)result;
      if (result == -1) {
        return result;
      }
    }
    uint64_t result = (double *)(*(uint64_t (**)(void, void *, Vocab *, uint64_t, BOOL))(**(void **)(v17 + 24)
                                                                                           + 296))(*(void *)(v17 + 24), a5, a6, 100, a4 != 0);
    if (result)
    {
      uint64_t v19 = (a5[1] - *a5) >> 2;
      return NgramCounts<double>::updateMinCountsHelper(v17, v19, (const unsigned int *)v18, a6, a7, a8, a10, a9);
    }
  }
  return result;
}

uint64_t NgramCounts<double>::write(uint64_t a1, File *a2)
{
  return NgramCounts<double>::write(a1, a2, *(_DWORD *)(a1 + 156), 0);
}

uint64_t NgramCounts<double>::write(uint64_t a1, File *a2, unsigned int a3, unsigned int a4)
{
  long long v8 = (char **)_ZTW14writeBufferTLS();
  long long v9 = *v8;
  if (!*v8)
  {
    unint64_t v10 = v8;
    long long v9 = (char *)malloc_type_calloc(0x2710uLL, 1uLL, 0x100004077774924uLL);
    *unint64_t v10 = v9;
  }
  return NgramCounts<double>::writeNode(a1, (_DWORD **)(a1 + 160), a2, v9, v9, 1u, a3, a4);
}

uint64_t NgramCounts<double>::writeNode(uint64_t a1, _DWORD **a2, File *a3, const char *a4, char *a5, unsigned int a6, unsigned int a7, unsigned int a8)
{
  if (a8) {
    long long v14 = Vocab::compareIndex(*(Vocab **)(a1 + 24));
  }
  else {
    long long v14 = 0;
  }
  unsigned int v33 = 0;
  LHashIter<unsigned int,Trie<unsigned int,double>>::LHashIter((uint64_t)v31, a2, (uint64_t)v14);
  if (a7) {
    BOOL v15 = a6 == a7;
  }
  else {
    BOOL v15 = 1;
  }
  int v16 = v15;
  int v30 = v16;
  while (!File::error(a3))
  {
    uint64_t v17 = LHashIter<unsigned int,Trie<unsigned int,double>>::next((uint64_t)v31, &v33);
    if (!v17) {
      break;
    }
    uint64_t v18 = (const char *)(*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24), v33);
    uint64_t v19 = v18;
    if (v18)
    {
      long long v20 = &a5[strlen(v18)];
      if (v20 + 1 <= a4 + 10000)
      {
        strcpy(a5, v19);
        if (v30)
        {
          snprintf(ctsBuffer, 0x64uLL, "%lg", *(double *)(v17 + 8));
          File::fprintf(a3, "%s\t%s\n", a4, ctsBuffer);
        }
        if (a7 - 1 >= a6)
        {
          *long long v20 = 32;
          NgramCounts<double>::writeNode(a1, v17, a3, a4, v20 + 1, a6 + 1, a7, a8);
        }
      }
      else
      {
        *a5 = 48;
        long long v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"ngram [", 7);
        size_t v22 = strlen(a4);
        long long v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)a4, v22);
        size_t v24 = strlen(v19);
        long long v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v19, v24);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"] exceeds write buffer\n", 23);
      }
    }
    else
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"undefined word index ", 21);
      long long v26 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"\n", 1);
    }
  }
  uint64_t result = v32;
  if (v32) {
    return MEMORY[0x1B3EA8630](v32, 0x1000C8052888210);
  }
  return result;
}

void sub_1B21395C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a17) {
    MEMORY[0x1B3EA8630](a17, 0x1000C8052888210);
  }
  _Unwind_Resume(exception_object);
}

uint64_t NgramCounts<double>::writeBinary(uint64_t a1, File *this, uint64_t a3)
{
  File::fprintf(this, "%s", "SRILM_BINARY_COUNTS_001\n");
  int v6 = a3;
  if (!a3) {
    int v6 = *(_DWORD *)(a1 + 156);
  }
  File::fprintf(this, "maxorder %u\n", v6);
  (*(void (**)(void))(**(void **)(a1 + 24) + 344))();
  off_t v14 = File::ftell(this);
  if ((v14 & 0x8000000000000000) == 0) {
    return NgramCounts<double>::writeBinaryNode(a1, (_DWORD **)(a1 + 160), 1u, a3, this, &v14);
  }
  long long v8 = File::position((const char **)this, MEMORY[0x1E4FBA240]);
  long long v9 = __error();
  unint64_t v10 = srilm_ts_strerror(*v9);
  size_t v11 = strlen(v10);
  long long v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v10, v11);
  std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  long long v13 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  return 0;
}

void sub_1B2139794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::locale a12)
{
}

uint64_t NgramCounts<double>::writeBinaryNode(uint64_t a1, _DWORD **a2, unsigned int a3, uint64_t a4, File *a5, off_t *a6)
{
  unsigned int v11 = a4;
  if (!a4) {
    unsigned int v11 = *(_DWORD *)(a1 + 156);
  }
  if (v11 < a3) {
    return 1;
  }
  if (v11 - a3 >= 4) {
    int v13 = 8;
  }
  else {
    int v13 = 4;
  }
  if (v11 == a3) {
    unsigned int v14 = 2;
  }
  else {
    unsigned int v14 = v13;
  }
  off_t v15 = *a6;
  uint64_t result = writeBinaryCount(a5, 0, v14);
  if (result)
  {
    if (a4) {
      BOOL v16 = a3 > a4;
    }
    else {
      BOOL v16 = 0;
    }
    char v17 = v16;
    char v37 = v17;
    while (1)
    {
      off_t v18 = *a6 + result;
      *a6 = v18;
      if ((v37 & 1) == 0)
      {
        LHashIter<unsigned int,Trie<unsigned int,double>>::LHashIter((uint64_t)v39, a2, (uint64_t)SArray_compareKey<unsigned int>);
        unsigned int v38 = 0;
        do
        {
          uint64_t v19 = LHashIter<unsigned int,Trie<unsigned int,double>>::next((uint64_t)v39, &v38);
          if (!v19) {
            break;
          }
          unsigned int v20 = writeBinaryCount(a5, v38, 0);
          if (!v20) {
            break;
          }
          *a6 += v20;
          double v21 = 0.0;
          if (a3 >= a4) {
            double v21 = *(double *)(v19 + 8);
          }
          unsigned int v22 = writeBinaryCount(a5, v21);
          if (!v22) {
            break;
          }
          *a6 += v22;
        }
        while (NgramCounts<double>::writeBinaryNode(a1, v19, a3 + 1, a4, a5, a6));
        if (v40) {
          MEMORY[0x1B3EA8630](v40, 0x1000C8052888210);
        }
        if (v19) {
          return 0;
        }
        off_t v18 = *a6;
      }
      if ((File::fseek(a5, v15, 0) & 0x80000000) != 0) {
        break;
      }
      uint64_t result = writeBinaryCount(a5, v18 - v15, v14);
      if (!result) {
        return result;
      }
      unsigned int v23 = result;
      if (result <= v14)
      {
        if ((File::fseek(a5, v18, 0) & 0x80000000) == 0) {
          return 1;
        }
        break;
      }
      size_t v24 = File::offset((uint64_t)a5, MEMORY[0x1E4FBA240]);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"increasing offset bytes from ", 29);
      long long v25 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" to ", 4);
      long long v26 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" (order ", 8);
      long long v27 = (void *)std::ostream::operator<<();
      long long v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)",", 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" level ", 7);
      long long v29 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)")\n", 2);
      if ((File::fseek(a5, v15, 0) & 0x80000000) != 0) {
        break;
      }
      *a6 = v15;
      uint64_t result = writeBinaryCount(a5, 0, v23);
      unsigned int v14 = v23;
      if (!result) {
        return result;
      }
    }
    int v30 = File::offset((uint64_t)a5, MEMORY[0x1E4FBA240]);
    long long v31 = __error();
    uint64_t v32 = srilm_ts_strerror(*v31);
    size_t v33 = strlen(v32);
    uint64_t v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)v32, v33);
    std::ios_base::getloc((const std::ios_base *)((char *)v34 + *(void *)(*v34 - 24)));
    unint64_t v35 = std::locale::use_facet(v39, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v35->__vftable[2].~facet_0)(v35, 10);
    std::locale::~locale(v39);
    std::ostream::put();
    std::ostream::flush();
    return 0;
  }
  return result;
}

void sub_1B2139AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::locale a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
}

uint64_t NgramCounts<double>::parseNgram(Vocab *a1, char *a2, const char **a3, char **a4)
{
  int v5 = (int)a3;
  int v7 = Vocab::parseWords(a1, a2, a3, a4);
  if (v7 == v5) {
    return 0;
  }
  uint64_t v8 = (v7 - 1);
  long long v9 = *(const char **)&a2[8 * v8];
  unsigned int v11 = 0;
  if (sscanf(v9, "%lf", &v11) != 1) {
    return 0;
  }
  *a4 = v11;
  *(void *)&a2[8 * v8] = 0;
  return v8;
}

double NgramCounts<double>::sumCounts(uint64_t a1, uint64_t a2)
{
  return NgramCounts<double>::sumNode(a1, a1 + 160, 1u, a2);
}

double NgramCounts<double>::sumNode(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 > a4 || !*(void *)a2 || **(_DWORD **)a2 <= 0x1Fu) {
    return *(double *)(a2 + 8);
  }
  LHashIter<unsigned int,Trie<unsigned int,double>>::LHashIter((uint64_t)v13, (_DWORD **)a2, 0);
  int v12 = 0;
  uint64_t v10 = a3 + 1;
  for (double i = 0.0; ; double i = i + NgramCounts<double>::sumNode(a1, v11, v10, a4))
  {
    uint64_t v11 = LHashIter<unsigned int,Trie<unsigned int,double>>::next((uint64_t)v13, &v12);
    if (!v11) {
      break;
    }
  }
  *(double *)(a2 + 8) = i;
  if (v14) {
    MEMORY[0x1B3EA8630](v14, 0x1000C8052888210);
  }
  return i;
}

void sub_1B2139C98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14) {
    MEMORY[0x1B3EA8630](a14, 0x1000C8052888210);
  }
  _Unwind_Resume(exception_object);
}

uint64_t NgramCounts<double>::setCounts(uint64_t a1, double a2)
{
  int v4 = *(_DWORD *)(a1 + 156);
  *(_DWORD *)&unsigned char v10[8] = 0;
  int v11 = 0;
  int v9 = 0;
  *(void *)uint64_t v10 = (v4 + 1);
  if (v4 != -1) {
    Array<unsigned int>::alloc();
  }
  unsigned int v5 = 1;
  do
  {
    TrieIter2<unsigned int,double>::TrieIter2((uint64_t)v8, (_DWORD **)(a1 + 160), (_DWORD *)(*(void *)&v10[4] - 4 * v9), v5, 0);
    while (1)
    {
      uint64_t v6 = TrieIter2<unsigned int,double>::next((uint64_t)v8);
      if (!v6) {
        break;
      }
      *(double *)(v6 + 8) = a2;
    }
    TrieIter2<unsigned int,unsigned int>::~TrieIter2((uint64_t)v8);
    ++v5;
  }
  while (v5 <= *(_DWORD *)(a1 + 156));
  uint64_t result = *(void *)&v10[4];
  if (*(void *)&v10[4]) {
    return MEMORY[0x1B3EA8630](*(void *)&v10[4], 0x1000C8052888210);
  }
  return result;
}

void sub_1B2139D98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v12 = *(void *)(v10 - 64);
  if (v12) {
    MEMORY[0x1B3EA8630](v12, 0x1000C8052888210);
  }
  _Unwind_Resume(exception_object);
}

uint64_t NgramCounts<double>::memStats(uint64_t a1, uint64_t *a2)
{
  *a2 += 64;
  (*(void (**)(void))(**(void **)(a1 + 24) + 352))(*(void *)(a1 + 24));
  return Trie<unsigned int,double>::memStats((_DWORD **)(a1 + 160), a2);
}

uint64_t NgramCounts<double>::readBinaryNode(uint64_t a1, _DWORD **a2, int a3, int a4, File *a5, off_t *a6, uint64_t a7, int *a8)
{
  if (!a4) {
    return 1;
  }
  unint64_t v38 = 0;
  uint64_t result = readBinaryCount(a5, &v38);
  if (!result) {
    return result;
  }
  off_t v17 = v38 + *a6;
  off_t v18 = *a6 + result;
  *a6 = v18;
  if (a3)
  {
    if (v18 < v17)
    {
      uint64_t v19 = (a3 - 1);
      uint64_t v20 = (a4 - 1);
      do
      {
        *(double *)&v39.__locale_ = 0.0;
        uint64_t result = readBinaryCount(a5, (unint64_t *)&v39);
        if (!result) {
          return result;
        }
        unsigned int locale = v39.__locale_;
        *a6 += result;
        if (a8[1] <= locale)
        {
          char v37 = File::offset((uint64_t)a5, MEMORY[0x1E4FBA240]);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"word index ", 11);
          long long v28 = (void *)std::ostream::operator<<();
          long long v29 = " out of range\n";
          uint64_t v30 = 14;
          goto LABEL_28;
        }
        unsigned int v22 = *(_DWORD *)Array<unsigned int>::operator[](a8, locale);
        if (v22 != -1)
        {
          if (*(unsigned char *)(a1 + 152))
          {
            LODWORD(v39.__locale_) = 0;
            if (LHash<unsigned int,Trie<unsigned int,unsigned int>>::locate(a2, v22, &v39))
            {
              uint64_t v23 = (uint64_t)&(*a2)[6 * LODWORD(v39.__locale_) + 2];
LABEL_17:
              *(double *)&v39.__locale_ = 0.0;
              uint64_t result = readBinaryCount(a5, (double *)&v39);
              if (!result) {
                return result;
              }
              *(double *)(v23 + 8) = *(double *)&v39.__locale_ + *(double *)(v23 + 8);
              *a6 += result;
              uint64_t v25 = a1;
              long long v26 = (_DWORD **)v23;
              uint64_t v27 = v19;
              goto LABEL_19;
            }
          }
          else
          {
            LOBYTE(v39.__locale_) = 0;
            size_t v24 = (_DWORD *)LHash<unsigned int,Trie<unsigned int,unsigned long>>::insert(a2, v22, &v39);
            uint64_t v23 = (uint64_t)v24;
            if (!LOBYTE(v39.__locale_))
            {
              *size_t v24 = 0;
              goto LABEL_17;
            }
            if (v24) {
              goto LABEL_17;
            }
          }
        }
        *(double *)&v39.__locale_ = 0.0;
        uint64_t result = readBinaryCount(a5, (double *)&v39);
        if (!result) {
          return result;
        }
        *a6 += result;
        uint64_t v25 = a1;
        long long v26 = a2;
        uint64_t v27 = 0;
LABEL_19:
        uint64_t result = NgramCounts<double>::readBinaryNode(v25, v26, v27, v20, a5, a6, a7, a8);
        if (!result) {
          return result;
        }
        off_t v18 = *a6;
      }
      while (*a6 < v17);
    }
    if (v18 != v17)
    {
      long long v28 = File::offset((uint64_t)a5, MEMORY[0x1E4FBA240]);
      long long v29 = "data misaligned\n";
      uint64_t v30 = 16;
LABEL_28:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v29, v30);
      return 0;
    }
    return 1;
  }
  if ((File::fseek(a5, v17, 0) & 0x80000000) == 0)
  {
    *a6 = v17;
    return 1;
  }
  long long v31 = File::offset((uint64_t)a5, MEMORY[0x1E4FBA240]);
  uint64_t v32 = __error();
  size_t v33 = srilm_ts_strerror(*v32);
  size_t v34 = strlen(v33);
  unint64_t v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v33, v34);
  std::ios_base::getloc((const std::ios_base *)((char *)v35 + *(void *)(*v35 - 24)));
  long long v36 = std::locale::use_facet(&v39, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v36->__vftable[2].~facet_0)(v36, 10);
  std::locale::~locale(&v39);
  std::ostream::put();
  std::ostream::flush();
  return 0;
}

void sub_1B213A15C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

double *NgramCounts<double>::updateMinCountsHelper(uint64_t a1, int a2, const unsigned int *a3, Vocab *this, uint64_t a5, uint64_t a6, uint64_t a7, double a8)
{
  unsigned int v12 = a3;
  uint64_t v15 = (a2 - 1);
  unsigned int v16 = *((_DWORD *)this + v15);
  *((_DWORD *)this + v15) = -1;
  if (Vocab::compare(this, *(const unsigned int **)(a5 + 8 * v15), a3))
  {
    if (*(unsigned char *)(a6 + v15))
    {
      NgramCounts<double>::addCounts(a1, *(unsigned int **)(a5 + 8 * v15), (_DWORD **)(a7 + 8 * v15));
      *(unsigned char *)(a6 + v15) = 0;
    }
    LHash<unsigned int,double>::clear((void *)(a7 + 8 * v15), 0);
    Vocab::copy(*(void *)(a5 + 8 * v15), (unsigned int *)this, v17);
  }
  if (v12 != -1)
  {
    char v19 = 0;
    uint64_t result = (double *)LHash<unsigned int,double>::insert((void *)(a7 + 8 * v15), v12, &v19);
    *uint64_t result = *result + 1.0;
    return result;
  }
  if (!*(unsigned char *)(a1 + 152))
  {
    uint64_t result = (double *)NgramCounts<unsigned long>::insertCount(a1, (unsigned int *)this, v16);
    if (!result) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  uint64_t result = (double *)NgramCounts<unsigned long>::findCount(a1, (unsigned int *)this, v16);
  if (result) {
LABEL_9:
  }
    *uint64_t result = *result + a8;
LABEL_10:
  *(unsigned char *)(a6 + v15) = 1;
  return result;
}

void sub_1B213A434(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::AudioAnalyticsFrameInfo::ComputeBacktraces(uint64_t *a1, uint64_t a2, uint64_t a3, const float **a4, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v14 = *(unsigned int *)(a3 + 8);
  memset(v75, 0, sizeof(v75));
  kaldi::Vector<float>::Resize((void **)v75, v14, 1);
  kaldi::ComputeLocalCost((const float **)a3, a4, a2, (uint64_t)v75);
  double v15 = log(*(float *)(a2 + 40) + 1.0);
  float v16 = *(float *)(a2 + 28);
  uint64_t v17 = *a5;
  uint64_t v18 = *a7;
  if (*a6 == a6[1]) {
    std::vector<std::pair<int,int>>::resize((uint64_t)a6, (int)v14);
  }
  float v19 = v15 * v15;
  float v20 = v16 * v19;
  if (kaldi::pitch_use_naive_search1)
  {
    if ((int)v14 >= 1)
    {
      int v21 = 0;
      uint64_t v22 = 0;
      uint64_t v23 = *a1;
      do
      {
        uint64_t v24 = 0;
        int v25 = -1;
        float v26 = INFINITY;
        do
        {
          float v27 = *(float *)(v17 + 4 * v24);
          if ((float)(v27 + (float)((float)((v21 + v24) * (v21 + v24)) * v20)) < v26)
          {
            float v26 = v27 + (float)((float)((v21 + v24) * (v21 + v24)) * v20);
            int v25 = v24;
          }
          ++v24;
        }
        while (v14 != v24);
        *(float *)(v18 + 4 * v22) = v26;
        *(_DWORD *)(v23 + 8 * v22++) = v25;
        --v21;
      }
      while (v22 != v14);
    }
  }
  else if ((int)v14 >= 1)
  {
    uint64_t v28 = 0;
    int v29 = 0;
    uint64_t v30 = *a1;
    uint64_t v31 = *a6;
    int v32 = 1;
    while (1)
    {
      int v33 = v29;
      uint64_t v34 = v29;
      float v35 = *(float *)(v17 + 4 * v29) + (float)((float)((v29 - v28) * (v29 - v28)) * v20);
      if ((int)v14 <= v29 + 1) {
        int v36 = v29 + 1;
      }
      else {
        int v36 = v14;
      }
      int v29 = v36 - 1;
      uint64_t v37 = v34 + 1;
      do
      {
        float v38 = v35;
        if (v37 >= v14) {
          goto LABEL_21;
        }
        float v35 = *(float *)(v17 + 4 * v37) + (float)((float)((v32 + v33) * (v32 + v33)) * v20);
        ++v33;
        ++v37;
      }
      while (v35 < v38);
      int v29 = v33 - 1;
LABEL_21:
      *(_DWORD *)(v30 + 8 * v28) = v29;
      *(float *)(v18 + 4 * v28) = v38;
      std::locale v39 = (_DWORD *)(v31 + 8 * v28);
      _DWORD *v39 = v29;
      v39[1] = v14 - 1;
      ++v28;
      --v32;
      if (v28 == v14)
      {
        int v40 = 0;
        uint64_t v41 = *a6;
        while (1)
        {
          if (v40)
          {
            uint64_t v60 = 0;
            char v61 = 0;
            int v62 = 0;
LABEL_45:
            int v63 = -(int)v60;
            int v64 = v62;
            do
            {
              unsigned int v65 = (int *)(v41 + 8 * v60);
              int v66 = v65[1];
              if (v64 <= *v65) {
                int v67 = *v65;
              }
              else {
                int v67 = v64;
              }
              if (v66 == v67)
              {
                int v64 = v67;
              }
              else
              {
                uint64_t v68 = *a1;
                int v69 = *(_DWORD *)(*a1 + 8 * v60);
                int v64 = v67;
                if (v69 != v67)
                {
                  int v64 = *(_DWORD *)(*a1 + 8 * v60);
                  if (v67 >= v66 - 1)
                  {
                    *unsigned int v65 = v69;
                  }
                  else
                  {
                    float v70 = *(float *)(v18 + 4 * v60);
                    uint64_t v71 = v67;
                    int v72 = ~v67 + v66;
                    int v62 = *(_DWORD *)(*a1 + 8 * v60);
                    do
                    {
                      int v73 = (v63 + v71) * (v63 + v71);
                      float v74 = *(float *)(v17 + 4 * v71);
                      if ((float)(v74 + (float)((float)v73 * v20)) >= v70)
                      {
                        if (v71 > v62) {
                          break;
                        }
                      }
                      else
                      {
                        float v70 = v74 + (float)((float)v73 * v20);
                        int v62 = v71;
                      }
                      ++v71;
                      --v72;
                    }
                    while (v72);
                    *unsigned int v65 = v62;
                    if (v62 != v69)
                    {
                      *(float *)(v18 + 4 * v60) = v70;
                      *(_DWORD *)(v68 + 8 * v60++) = v62;
                      char v61 = 1;
                      if (v60 != v14) {
                        goto LABEL_45;
                      }
                      goto LABEL_66;
                    }
                  }
                }
              }
              ++v60;
              --v63;
            }
            while (v60 != v14);
            if ((v61 & 1) == 0) {
              goto LABEL_67;
            }
          }
          else
          {
            char v42 = 0;
            int v43 = 1 - v14;
            uint64_t v44 = v14;
            int v45 = v14 - 1;
            do
            {
              uint64_t v46 = v44--;
              int v47 = *(_DWORD *)(v41 + 8 * v44);
              uint64_t v48 = v41 + 8 * v44;
              int v51 = *(_DWORD *)(v48 + 4);
              int v50 = (int *)(v48 + 4);
              int v49 = v51;
              if (v51 >= v45) {
                int v52 = v45;
              }
              else {
                int v52 = v49;
              }
              if (v52 == v47)
              {
                int v45 = *(_DWORD *)(v41 + 8 * v44);
              }
              else
              {
                unsigned int v53 = (int *)(*a1 + 8 * v44);
                int v45 = *v53;
                if (*v53 == v52)
                {
                  int v45 = v52;
                }
                else
                {
                  uint64_t v54 = v47 + 1;
                  if (v52 <= (int)v54)
                  {
                    int *v50 = v45;
                  }
                  else
                  {
                    float v55 = *(float *)(v18 + 4 * v44);
                    uint64_t v56 = v52;
                    int v57 = *v53;
                    do
                    {
                      int v58 = (v43 + v56) * (v43 + v56);
                      float v59 = *(float *)(v17 + 4 * v56);
                      if ((float)(v59 + (float)((float)v58 * v20)) >= v55)
                      {
                        if (v56 < v57) {
                          break;
                        }
                      }
                      else
                      {
                        float v55 = v59 + (float)((float)v58 * v20);
                        int v57 = v56;
                      }
                      --v56;
                    }
                    while (v56 > v54);
                    int *v50 = v57;
                    if (v57 != v45)
                    {
                      *(float *)(v18 + 4 * v44) = v55;
                      *unsigned int v53 = v57;
                      char v42 = 1;
                      int v45 = v57;
                    }
                  }
                }
              }
              ++v43;
            }
            while (v46 > 1);
            if ((v42 & 1) == 0) {
              goto LABEL_67;
            }
          }
LABEL_66:
          if (++v40 == v14) {
            goto LABEL_67;
          }
        }
      }
    }
  }
LABEL_67:
  *((_DWORD *)a1 + 7) = -1;
  kaldi::VectorBase<float>::AddVec<float>((uint64_t)a7, v75, 1.0);
  kaldi::Vector<float>::Destroy((uint64_t)v75);
}

void sub_1B213A878(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::OnlineAudioAnalyticsFeatureImpl::OnlineAudioAnalyticsFeatureImpl(uint64_t a1, _OWORD *a2)
{
  *(_OWORD *)a1 = *a2;
  long long v2 = a2[1];
  long long v3 = a2[2];
  long long v4 = a2[4];
  *(_OWORD *)(a1 + 48) = a2[3];
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(void *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_DWORD *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(unsigned char *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  operator new();
}

void sub_1B213AAD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x1B3EA8670](v6, 0x1020C403D3F9D26);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  kaldi::Vector<float>::Destroy((uint64_t)(v2 + 41));
  int v9 = (void *)v2[34];
  if (v9)
  {
    v2[35] = v9;
    operator delete(v9);
  }
  uint64_t v10 = (void *)v2[31];
  if (v10)
  {
    v2[32] = v10;
    operator delete(v10);
  }
  kaldi::Vector<float>::Destroy(v5);
  int v11 = *v7;
  if (*v7)
  {
    v2[24] = v11;
    operator delete(v11);
  }
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100](v4);
  kaldi::Vector<float>::Destroy(v3);
  _Unwind_Resume(a1);
}

void std::deque<kaldi::AudioAnalyticsFrameInfo *>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<kaldi::AudioAnalyticsFrameInfo *>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void kaldi::OnlineAudioAnalyticsFeatureImpl::Compute(kaldi::OnlineAudioAnalyticsFeatureImpl *this, uint64_t a2, int32x2_t *a3)
{
  int v6 = *((_DWORD *)this + 15);
  if (v6)
  {
    int v7 = *(_DWORD *)(a2 + 8);
    if (v7 >= 1)
    {
      int v8 = 0;
      int v9 = (int)((float)(*(float *)this * (float)v6) * 0.001 * *((float *)this + 1));
      do
      {
        int v10 = v7 - v8;
        if (v10 >= v9) {
          int v10 = v9;
        }
        uint64_t v22 = 0;
        uint64_t v23 = 0;
        int v11 = v10 + v8;
        uint64_t v21 = *(void *)a2 + 4 * v8;
        LODWORD(v22) = v10;
        kaldi::OnlineAudioAnalyticsFeatureImpl::AcceptWaveform((uint64_t)this, (uint64_t)&v21);
        int v7 = *(_DWORD *)(a2 + 8);
        int v8 = v11;
      }
      while (v11 < v7);
    }
  }
  else
  {
    kaldi::OnlineAudioAnalyticsFeatureImpl::AcceptWaveform((uint64_t)this, a2);
  }
  kaldi::OnlineAudioAnalyticsFeatureImpl::InputFinished(this);
  int v12 = *((_DWORD *)this + 44);
  int v13 = *((_DWORD *)this + 52);
  uint64_t v14 = (v12 - v13);
  if (v12 == v13)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v21);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"No frames output in pitch extraction", 36);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v21);
    }
    kaldi::Matrix<float>::Resize(a3, 0, 0, 0, 0);
  }
  else
  {
    kaldi::Matrix<float>::Resize(a3, (v12 - v13), 4, 0, 0);
    if ((int)v14 >= 1)
    {
      uint64_t v15 = 0;
      uint64_t v16 = 4;
      do
      {
        uint64_t v17 = *(void *)a3 + 4 * a3[2].i32[0] * (int)v15;
        kaldi::MatrixBase<float>::NumCols((uint64_t)a3);
        uint64_t v18 = (_DWORD *)(*((void *)this + 31) + v16);
        *(_DWORD *)uint64_t v17 = *v18;
        uint64_t v19 = (int)*(v18 - 1);
        uint64_t v20 = *((void *)this + 11);
        *(float *)(v17 + 4) = 1.0 / *(float *)(v20 + 4 * v19);
        *(_DWORD *)(v17 + 8) = *(_DWORD *)(v20 + 4 * v19);
        *(_DWORD *)(v17 + 12) = *(_DWORD *)(*((void *)this + 34) + 4 * v15++);
        v16 += 8;
      }
      while (v14 != v15);
    }
  }
}

void sub_1B213AE20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void kaldi::OnlineAudioAnalyticsFeatureImpl::AcceptWaveform(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a1 + 296);
  long long v88 = 0;
  uint64_t v89 = 0;
  uint64_t v90 = 0;
  kaldi::LinearResample::Resample(*(void *)(a1 + 120), a2, v3, (void **)&v88);
  double v4 = *(double *)(a1 + 304);
  double v5 = *(double *)(a1 + 312);
  uint64_t v6 = *(void *)(a1 + 320);
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v7 = (int)v89;
    uint64_t v8 = *(void *)(a1 + 320);
  }
  else
  {
    float v9 = kaldi::VecVec<float>((uint64_t)&v88, (const float **)&v88);
    double v10 = kaldi::VectorBase<float>::Sum((uint64_t)&v88);
    double v4 = v4 + v9;
    double v5 = v5 + *(float *)&v10;
    uint64_t v7 = (int)v89;
    uint64_t v8 = v6 + (int)v89;
    uint64_t v6 = *(void *)(a1 + 320);
  }
  int v11 = kaldi::OnlineAudioAnalyticsFeatureImpl::NumFramesAvailable((kaldi::OnlineAudioAnalyticsFeatureImpl *)a1, v6 + v7, *(unsigned char *)(a1 + 73));
  uint64_t v68 = *(int *)(a1 + 176);
  uint64_t v12 = (v11 - v68);
  if (v11 == v68)
  {
    kaldi::OnlineAudioAnalyticsFeatureImpl::UpdateRemainder(a1, (uint64_t)&v88);
  }
  else
  {
    int v13 = v11;
    int v15 = *(_DWORD *)(a1 + 80);
    int v14 = *(_DWORD *)(a1 + 84);
    uint64_t v16 = *(unsigned int *)(a1 + 96);
    double v17 = *(float *)(a1 + 36) * 0.001;
    float v18 = *(float *)(a1 + 4);
    int v67 = (int)(v17 * *(float *)(a1 + 8));
    int v19 = v14 + v67;
    memset(v87, 0, sizeof(v87));
    kaldi::Vector<float>::Resize(v87, (v14 + v67), 0);
    uint64_t v20 = (v14 - v15 + 1);
    memset(v86, 0, sizeof(v86));
    kaldi::Vector<float>::Resize(v86, v20, 0);
    memset(v85, 0, sizeof(v85));
    kaldi::Vector<float>::Resize(v85, v20, 0);
    kaldi::Matrix<float>::Matrix((uint64_t)v83, v12, v20, 0, 0);
    kaldi::Matrix<float>::Matrix((uint64_t)v81, v12, v20, 0, 0);
    uint64_t v66 = v12;
    memset(v80, 0, sizeof(v80));
    kaldi::Vector<float>::Resize(v80, v16, 0);
    if ((int)v68 < v13)
    {
      int v21 = 0;
      uint64_t v22 = (int)(v17 * v18);
      uint64_t v23 = v68;
      do
      {
        kaldi::OnlineAudioAnalyticsFeatureImpl::ExtractFrame(a1, (uint64_t)&v88, v23 * v22, (uint64_t)v87);
        if (*(unsigned char *)(a1 + 72))
        {
          if (v23 * v22 + v19 - *(void *)(a1 + 320) >= (int)v89) {
            LODWORD(v24) = v89;
          }
          else {
            uint64_t v24 = v23 * v22 + v19 - *(void *)(a1 + 320);
          }
          uint64_t v71 = 0;
          int v69 = &v88[4 * v21];
          uint64_t v70 = (v24 - v21);
          float v25 = kaldi::VecVec<float>((uint64_t)&v69, (const float **)&v69);
          double v26 = kaldi::VectorBase<float>::Sum((uint64_t)&v69);
          v8 += (int)v24 - v21;
          double v4 = v4 + v25;
          double v5 = v5 + *(float *)&v26;
          int v21 = v24;
        }
        kaldi::ComputeCorrelation((uint64_t)v87, *(_DWORD *)(a1 + 80), *(_DWORD *)(a1 + 84), v67, v86, v85);
        float v27 = *(float *)(a1 + 44);
        kaldi::VectorBase<float>::Sum((uint64_t)v85);
        uint64_t v70 = 0;
        uint64_t v71 = 0;
        int v69 = (char *)(*(void *)v83 + 4 * (v23 - v68) * v84);
        double v28 = v4 / (double)v8 - v5 / (double)v8 * (v5 / (double)v8);
        LODWORD(v70) = kaldi::MatrixBase<float>::NumCols((uint64_t)v83);
        float v29 = v28 * (double)v67 * (v28 * (double)v67) * v27;
        kaldi::ComputeNccf((uint64_t *)v86, (uint64_t *)v85, (uint64_t *)&v69, v29);
        uint64_t v78 = 0;
        uint64_t v79 = 0;
        uint64_t v77 = *(void *)v81 + 4 * (v23 - v68) * v82;
        LODWORD(v78) = kaldi::MatrixBase<float>::NumCols((uint64_t)v81);
        kaldi::ComputeNccf((uint64_t *)v86, (uint64_t *)v85, &v77, 0.0);
        if (v23 < *(int *)(a1 + 68)) {
          operator new();
        }
        ++v23;
      }
      while (v13 != v23);
    }
    kaldi::Matrix<float>::Matrix((uint64_t)&v77, v66, v16, 0, 0);
    kaldi::ArbitraryResample::Resample(*(void **)(a1 + 112), (uint64_t)v83, (uint64_t)&v77);
    kaldi::Matrix<float>::Resize(v83, 0, 0, 0, 0);
    kaldi::Matrix<float>::Matrix((uint64_t)v76, v66, v16, 0, 0);
    kaldi::ArbitraryResample::Resample(*(void **)(a1 + 112), (uint64_t)v81, (uint64_t)v76);
    kaldi::Matrix<float>::Resize(v81, 0, 0, 0, 0);
    kaldi::OnlineAudioAnalyticsFeatureImpl::UpdateRemainder(a1, (uint64_t)&v88);
    std::wstring __p = 0;
    float v74 = 0;
    uint64_t v75 = 0;
    if ((int)v68 < v13)
    {
      uint64_t v72 = 0;
      operator new();
    }
    LODWORD(v72) = 0;
    kaldi::VectorBase<float>::Min((uint64_t *)(a1 + 216), (int *)&v72);
    std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize(a1 + 248, *(unsigned int *)(a1 + 176));
    unint64_t v30 = *(void *)(a1 + 168) + *(void *)(a1 + 160) - 1;
    kaldi::PitchFrameInfo::SetBestState(*(uint64_t **)(*(void *)(*(void *)(a1 + 136) + ((v30 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v30 & 0x1FF)), v72, *(void *)(a1 + 256) - 8);
    unint64_t v31 = *(void *)(a1 + 168);
    *(_DWORD *)(a1 + 208) = kaldi::PitchFrameInfo::ComputeLatency(*(kaldi::PitchFrameInfo **)(*(void *)(*(void *)(a1 + 136)+ (((v31 + *(void *)(a1 + 160) - 1) >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * ((v31 + *(void *)(a1 + 160) - 1) & 0x1FF)), *(_DWORD *)(a1 + 56));
    unint64_t v32 = *(int *)(a1 + 76);
    if (v32 != -1)
    {
      uint64_t v33 = v31 - v32;
      if (v31 > v32)
      {
        uint64_t v34 = 0;
        do
        {
          uint64_t v35 = *(void *)(*(void *)(*(void *)(a1 + 136)
                                      + (((unint64_t)(v34 + *(void *)(a1 + 160)) >> 6) & 0x3FFFFFFFFFFFFF8))
                          + 8 * ((v34 + *(void *)(a1 + 160)) & 0x1FF));
          if (v35)
          {
            int v36 = *(void **)v35;
            if (*(void *)v35)
            {
              *(void *)(v35 + 8) = v36;
              operator delete(v36);
            }
            MEMORY[0x1B3EA8670](v35, 0x1020C403D3F9D26);
          }
          ++v34;
        }
        while (v33 != v34);
        unint64_t v37 = *(void *)(a1 + 160);
        uint64_t v38 = *(void *)(a1 + 136);
        std::locale v39 = (char *)(v38 + 8 * (v37 >> 9));
        if (*(void *)(a1 + 144) == v38) {
          uint64_t v40 = 0;
        }
        else {
          uint64_t v40 = *(void *)v39 + 8 * (*(void *)(a1 + 160) & 0x1FFLL);
        }
        int v69 = (char *)(v38 + 8 * (v37 >> 9));
        uint64_t v70 = v40;
        uint64_t v41 = (char *)std::__deque_iterator<kaldi::AudioAnalyticsFrameInfo *,kaldi::AudioAnalyticsFrameInfo **,kaldi::AudioAnalyticsFrameInfo *&,kaldi::AudioAnalyticsFrameInfo ***,long,512l>::operator+[abi:ne180100]((uint64_t)&v69, v33);
        std::deque<kaldi::AudioAnalyticsFrameInfo *>::erase((void *)(a1 + 128), v39, v40, v41, v42);
        *(void *)(*(void *)(*(void *)(*(void *)(a1 + 136) + ((*(void *)(a1 + 160) >> 6) & 0x3FFFFFFFFFFFFF8))
                              + 8 * (*(void *)(a1 + 160) & 0x1FFLL))
                  + 32) = 0;
      }
    }
    if (kaldi::g_kaldi_verbose_level >= 4)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v69, 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v69, (uint64_t)"Latency is ", 11);
      std::ostream::operator<<();
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v69);
    }
    int v43 = (uint64_t *)(a1 + 272);
    std::vector<float>::resize(a1 + 272, *(unsigned int *)(a1 + 176));
    if (*(_DWORD *)(a1 + 176))
    {
      int v44 = v89;
      int v69 = 0;
      uint64_t v70 = 0;
      uint64_t v71 = 0;
      kaldi::Vector<float>::Resize((void **)&v69, v89, 1);
      kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v69, (const void **)&v88);
      kaldi::VectorBase<float>::ApplyAbs((uint64_t)&v69);
      if ((int)v66 >= 1)
      {
        uint64_t v45 = 0;
        uint64_t v46 = v69;
        int v47 = v44 / (int)v66;
        int v48 = 3 * (v44 / (int)v66);
        uint64_t v49 = *v43;
        int v50 = 4 * (v44 / (int)v66);
        int v51 = -2 * (v44 / (int)v66);
        do
        {
          if (v44 >= (uint64_t)v50) {
            uint64_t v52 = v50;
          }
          else {
            uint64_t v52 = v44;
          }
          uint64_t v53 = v45 + 1;
          int v54 = v47 * (v45 + 1);
          unsigned int v55 = (v54 - v48) & ~((v54 - v48) >> 31);
          int v56 = v48 + v54;
          if (v56 >= v44) {
            int v57 = v44;
          }
          else {
            int v57 = v56;
          }
          int v58 = (float *)&v46[4 * v55];
          float v59 = v58 + 1;
          if (v55 != v57 && v59 != (float *)&v46[4 * v57])
          {
            uint64_t v61 = 4 * v52 - 4 * (v51 & ~(v51 >> 31)) - 4;
            float v62 = *v58;
            int v63 = v58 + 1;
            do
            {
              float v64 = *v63++;
              float v65 = v64;
              if (v62 < v64)
              {
                float v62 = v65;
                int v58 = v59;
              }
              float v59 = v63;
              v61 -= 4;
            }
            while (v61);
          }
          *(float *)(v49 + 4 * (v45 + v68)) = *v58;
          v50 += v47;
          v51 += v47;
          ++v45;
        }
        while (v53 != v66);
      }
      kaldi::Vector<float>::Destroy((uint64_t)&v69);
    }
    if (__p)
    {
      float v74 = __p;
      operator delete(__p);
    }
    kaldi::Matrix<float>::~Matrix((uint64_t)v76);
    kaldi::Matrix<float>::~Matrix((uint64_t)&v77);
    kaldi::Vector<float>::Destroy((uint64_t)v80);
    kaldi::Matrix<float>::~Matrix((uint64_t)v81);
    kaldi::Matrix<float>::~Matrix((uint64_t)v83);
    kaldi::Vector<float>::Destroy((uint64_t)v85);
    kaldi::Vector<float>::Destroy((uint64_t)v86);
    kaldi::Vector<float>::Destroy((uint64_t)v87);
  }
  kaldi::Vector<float>::Destroy((uint64_t)&v88);
}

void sub_1B213B854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (__p) {
    operator delete(__p);
  }
  kaldi::Matrix<float>::~Matrix((uint64_t)&a55);
  kaldi::Matrix<float>::~Matrix((uint64_t)&a60);
  kaldi::Vector<float>::Destroy((uint64_t)&a65);
  kaldi::Matrix<float>::~Matrix((uint64_t)&a68);
  kaldi::Matrix<float>::~Matrix((uint64_t)&STACK[0x200]);
  kaldi::Vector<float>::Destroy(v68 - 248);
  kaldi::Vector<float>::Destroy(v68 - 224);
  kaldi::Vector<float>::Destroy(v68 - 200);
  kaldi::Vector<float>::Destroy(v68 - 176);
  _Unwind_Resume(a1);
}

void kaldi::OnlineAudioAnalyticsFeatureImpl::InputFinished(kaldi::OnlineAudioAnalyticsFeatureImpl *this)
{
  *((unsigned char *)this + 296) = 1;
  memset(v4, 0, 24);
  kaldi::OnlineAudioAnalyticsFeatureImpl::AcceptWaveform((uint64_t)this, (uint64_t)v4);
  kaldi::Vector<float>::Destroy((uint64_t)v4);
  if (*((_DWORD *)this + 44) < *((_DWORD *)this + 17) && !*((unsigned char *)this + 72)) {
    kaldi::OnlineAudioAnalyticsFeatureImpl::RecomputeBacktraces(this);
  }
  *((_DWORD *)this + 52) = 0;
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v4, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Pitch-tracking Viterbi cost is ", 31);
    long long v2 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" per frame, over ", 17);
    char v3 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" frames.", 8);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v4);
  }
}

void sub_1B213BABC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::OnlineAudioAnalyticsFeatureImpl::NumFramesAvailable(kaldi::OnlineAudioAnalyticsFeatureImpl *this, uint64_t a2, char a3)
{
  double v3 = *((float *)this + 9) * 0.001;
  int v4 = (int)(v3 * *((float *)this + 2));
  if (!*((unsigned char *)this + 296)) {
    v4 += *((_DWORD *)this + 21);
  }
  if (a2 < v4) {
    return 0;
  }
  int v6 = (int)(v3 * *((float *)this + 1));
  if (!*((unsigned char *)this + 296) || (a3 & 1) != 0) {
    return ((a2 - v4) / v6) + 1;
  }
  else {
    return (int)(float)((float)((float)a2 / (float)v6) + 0.5);
  }
}

void kaldi::OnlineAudioAnalyticsFeatureImpl::UpdateRemainder(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 176);
  uint64_t v5 = (int)(*(float *)(a1 + 36) * 0.001 * *(float *)(a1 + 4));
  uint64_t v6 = v5 * v4;
  *(double *)(a1 + 304) = *(double *)(a1 + 304) + kaldi::VecVec<float>(a2, (const float **)a2);
  double v7 = kaldi::VectorBase<float>::Sum(a2);
  *(double *)(a1 + 312) = *(double *)(a1 + 312) + *(float *)&v7;
  uint64_t v8 = *(void *)(a1 + 320) + *(int *)(a2 + 8);
  if (v8 >= v5 * v4)
  {
    memset(v18, 0, sizeof(v18));
    kaldi::Vector<float>::Resize(v18, (v8 - v6), 0);
    if (v8 > v6)
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v11 = *(void *)(a1 + 320);
      uint64_t v12 = *(const float **)a2;
      int v13 = (char *)v18[0];
      uint64_t v14 = (v5 * v4);
      uint64_t v15 = (v14 << 32) - (v11 << 32);
      int v16 = v14 - v11;
      do
      {
        if (v6 + v10 >= v11) {
          double v17 = (_DWORD *)((char *)v12 + ((v15 + v9) >> 30));
        }
        else {
          double v17 = (_DWORD *)(*(void *)(a1 + 328) + 4 * (v16 + (int)v10 + *(_DWORD *)(a1 + 336)));
        }
        *(_DWORD *)&v13[v9 >> 30] = *v17;
        ++v10;
        v9 += 0x100000000;
      }
      while (v6 + v10 < v8);
    }
    kaldi::Vector<float>::Swap((uint64_t *)(a1 + 328), (uint64_t *)v18);
    kaldi::Vector<float>::Destroy((uint64_t)v18);
  }
  else
  {
    kaldi::Vector<float>::Resize((void **)(a1 + 328), 0, 0);
  }
  *(void *)(a1 + 320) = v8;
}

void sub_1B213BCE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

float kaldi::OnlineAudioAnalyticsFeatureImpl::ExtractFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7 = *(_DWORD *)(a4 + 8);
  uint64_t v8 = a3 - *(void *)(a1 + 320);
  unsigned int v9 = v7 + v8;
  int v10 = *(_DWORD *)(a2 + 8);
  if (v7 + (int)v8 <= v10)
  {
    if ((v8 & 0x80000000) != 0)
    {
      unsigned int v16 = *(_DWORD *)(a1 + 336) + v8;
      unsigned int v17 = *(_DWORD *)(a1 + 320) - a3;
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      float v18 = *(float **)a4;
      uint64_t v28 = 0;
      uint64_t v29 = (uint64_t)v18;
      LODWORD(v30) = v17;
      uint64_t v26 = *(void *)(a1 + 328) + 4 * v16;
      uint64_t v27 = v17;
      kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v29, (const void **)&v26);
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v19 = *(void *)a4 + 4 * v17;
      uint64_t v28 = 0;
      uint64_t v29 = v19;
      LODWORD(v30) = v9;
      uint64_t v26 = *(void *)a2;
      uint64_t v27 = v9;
      uint64_t v15 = &v29;
      uint64_t v14 = &v26;
    }
    else
    {
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v29 = *(void *)a2 + 4 * v8;
      LODWORD(v30) = v7;
      uint64_t v14 = &v29;
      uint64_t v15 = (uint64_t *)a4;
    }
    kaldi::VectorBase<float>::CopyFromVec((uint64_t)v15, (const void **)v14);
    float v20 = *(float *)(a1 + 12);
    if (v20 != 0.0)
    {
      double v21 = v20;
      unint64_t v22 = *(unsigned int *)(a4 + 8);
      if ((int)v22 >= 2)
      {
        uint64_t v23 = *(float **)a4;
        float v24 = -v20;
        do
          v23[(v22 - 1)] = v23[(v22 - 1)] + (float)(v24 * v23[(v22 - 2)]);
        while (v22-- > 2);
      }
      float result = (1.0 - v21) * **(float **)a4;
      **(float **)a4 = result;
    }
  }
  else
  {
    int v12 = v10 - v8;
    kaldi::VectorBase<float>::SetZero(a4);
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    uint64_t v29 = *(void *)a4;
    LODWORD(v30) = v12;
    kaldi::OnlineAudioAnalyticsFeatureImpl::ExtractFrame(a1, a2, a3, &v29);
  }
  return result;
}

void kaldi::OnlineAudioAnalyticsFeatureImpl::RecomputeBacktraces(kaldi::OnlineAudioAnalyticsFeatureImpl *this)
{
  if (*((_DWORD *)this + 19) == -1)
  {
    int v2 = *((_DWORD *)this + 42);
    if (v2 != 1)
    {
      int v3 = *((_DWORD *)this + 44);
      uint64_t v5 = *((void *)this + 23);
      uint64_t v4 = *((void *)this + 24);
      if (!v3) {
        goto LABEL_26;
      }
      char v6 = 0;
      unint64_t v7 = (unint64_t)(v4 - v5) >> 3;
      float v8 = *((double *)this + 38) / (double)*((uint64_t *)this + 40)
         - *((double *)this + 39)
         / (double)*((uint64_t *)this + 40)
         * (*((double *)this + 39)
          / (double)*((uint64_t *)this + 40));
      int v9 = v3 - v2 + 1;
      float v10 = fabsf(v8);
      uint64_t v11 = *((void *)this + 23);
      do
      {
        float v12 = *(float *)(*(void *)v11 + 28);
        if (v12 != v8
          && (COERCE_INT(fabs(v12 - v8)) > 2139095039 || fabsf(v12 - v8) > (float)((float)(v10 + fabsf(v12)) * 0.01)))
        {
          char v6 = 1;
        }
        v11 += 8;
        --v7;
      }
      while (v7);
      if (v6)
      {
        uint64_t v13 = *((unsigned int *)this + 56);
        float v14 = *((float *)this + 9);
        float v15 = *((float *)this + 2);
        float v16 = *((float *)this + 11);
        int v48 = 0;
        uint64_t v49 = 0;
        uint64_t v50 = 0;
        kaldi::Vector<float>::Resize(&v48, v13, 0);
        memset(v47, 0, sizeof(v47));
        kaldi::Vector<float>::Resize(v47, v49, 1);
        kaldi::VectorBase<float>::CopyFromVec((uint64_t)v47, (const void **)&v48);
        int v44 = 0;
        uint64_t v45 = 0;
        double v17 = 0.0;
        uint64_t v46 = 0;
        if (v2 >= 2)
        {
          uint64_t v18 = 0;
          float v19 = (float)(int)(v14 * 0.001 * v15);
          float v20 = (float)(v8 * v19) * (float)(v8 * v19) * v16;
          uint64_t v21 = 8 * v9;
          do
          {
            uint64_t v22 = *((void *)this + 23) + v21;
            uint64_t v23 = *(void *)(v22 + 8 * v18);
            float v24 = (float)(*(float *)(v23 + 28) * v19) * (float)(*(float *)(v23 + 28) * v19) * *((float *)this + 11);
            float v25 = (float)(*(float *)(v23 + 24) + v24) / (float)(*(float *)(v23 + 24) + v20);
            float v26 = fabsf(sqrtf(v25));
            BOOL v27 = v25 == -INFINITY;
            float v28 = INFINITY;
            if (!v27) {
              float v28 = v26;
            }
            kaldi::VectorBase<float>::Scale(*(void *)(v22 + 8 * v18++), v28);
            kaldi::AudioAnalyticsFrameInfo::ComputeBacktraces(*(uint64_t **)(*(void *)(*((void *)this + 17)+ (((unint64_t)(v18 + *((void *)this + 20)) >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * ((v18 + *((void *)this + 20)) & 0x1FF)), (uint64_t)this, v23, (const float **)this + 11, (uint64_t *)&v48, (uint64_t *)&v44, (uint64_t *)v47);
            kaldi::Vector<float>::Swap((uint64_t *)&v48, (uint64_t *)v47);
            kaldi::VectorBase<float>::Min((uint64_t *)&v48);
            float v30 = v29;
            kaldi::VectorBase<float>::Add((uint64_t)&v48, -v29);
            double v17 = v17 + v30;
          }
          while (v2 - 1 != v18);
        }
        if (kaldi::g_kaldi_verbose_level > 2)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v43, 3);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"Forward-cost per frame changed from ", 36);
          uint64_t v31 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" to ", 4);
          std::ostream::operator<<();
          kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v43);
        }
        *((double *)this + 30) = v17;
        kaldi::Vector<float>::Swap((uint64_t *)this + 27, (uint64_t *)&v48);
        LODWORD(v43[0]) = 0;
        kaldi::VectorBase<float>::Min((uint64_t *)this + 27, (int *)v43);
        uint64_t v32 = *((void *)this + 32);
        unint64_t v33 = *((unsigned int *)this + 44);
        if (v33 != (v32 - *((void *)this + 31)) >> 3)
        {
          std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)this + 248, v33);
          uint64_t v32 = *((void *)this + 32);
        }
        uint64_t v34 = v32 - 8;
        unint64_t v35 = *((void *)this + 21) + *((void *)this + 20) - 1;
        kaldi::PitchFrameInfo::SetBestState(*(uint64_t **)(*(void *)(*((void *)this + 17) + ((v35 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v35 & 0x1FF)), v43[0], v34);
        unint64_t v36 = *((void *)this + 21) + *((void *)this + 20) - 1;
        *((_DWORD *)this + 52) = kaldi::PitchFrameInfo::ComputeLatency(*(kaldi::PitchFrameInfo **)(*(void *)(*((void *)this + 17)+ ((v36 >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * (v36 & 0x1FF)), *((_DWORD *)this + 14));
        uint64_t v38 = *((void *)this + 23);
        uint64_t v37 = *((void *)this + 24);
        if (v37 == v38)
        {
          uint64_t v38 = *((void *)this + 24);
        }
        else
        {
          unint64_t v39 = 0;
          do
          {
            uint64_t v40 = *(void *)(v38 + 8 * v39);
            if (v40)
            {
              kaldi::Vector<float>::Destroy(*(void *)(v38 + 8 * v39));
              MEMORY[0x1B3EA8670](v40, 0x1080C4066DFD6F0);
              uint64_t v38 = *((void *)this + 23);
              uint64_t v37 = *((void *)this + 24);
            }
            ++v39;
          }
          while (v39 < (v37 - v38) >> 3);
        }
        *((void *)this + 24) = v38;
        if (v44)
        {
          uint64_t v45 = v44;
          operator delete(v44);
        }
        kaldi::Vector<float>::Destroy((uint64_t)v47);
        kaldi::Vector<float>::Destroy((uint64_t)&v48);
      }
      else
      {
LABEL_26:
        if (v4 == v5)
        {
          uint64_t v5 = *((void *)this + 24);
        }
        else
        {
          unint64_t v41 = 0;
          do
          {
            uint64_t v42 = *(void *)(v5 + 8 * v41);
            if (v42)
            {
              kaldi::Vector<float>::Destroy(*(void *)(v5 + 8 * v41));
              MEMORY[0x1B3EA8670](v42, 0x1080C4066DFD6F0);
              uint64_t v5 = *((void *)this + 23);
              uint64_t v4 = *((void *)this + 24);
            }
            ++v41;
          }
          while (v41 < (v4 - v5) >> 3);
        }
        *((void *)this + 24) = v5;
      }
    }
  }
}

void sub_1B213C2F4(_Unwind_Exception *a1)
{
  int v3 = *(void **)(v1 - 200);
  if (v3)
  {
    *(void *)(v1 - 192) = v3;
    operator delete(v3);
  }
  kaldi::Vector<float>::Destroy(v1 - 176);
  kaldi::Vector<float>::Destroy(v1 - 152);
  _Unwind_Resume(a1);
}

void kaldi::OnlineAudioAnalyticsFeatureImpl::~OnlineAudioAnalyticsFeatureImpl(kaldi::OnlineAudioAnalyticsFeatureImpl *this)
{
  uint64_t v2 = *((void *)this + 14);
  if (v2)
  {
    double v17 = (void **)(v2 + 40);
    std::vector<kaldi::Vector<float>>::__destroy_vector::operator()[abi:ne180100](&v17);
    int v3 = *(void **)(v2 + 16);
    if (v3)
    {
      *(void *)(v2 + 24) = v3;
      operator delete(v3);
    }
    MEMORY[0x1B3EA8670](v2, 0x1030C40864D17A3);
  }
  uint64_t v4 = *((void *)this + 15);
  if (v4)
  {
    kaldi::Vector<float>::Destroy(v4 + 88);
    double v17 = (void **)(v4 + 48);
    std::vector<kaldi::Vector<float>>::__destroy_vector::operator()[abi:ne180100](&v17);
    uint64_t v5 = *(void **)(v4 + 24);
    if (v5)
    {
      *(void *)(v4 + 32) = v5;
      operator delete(v5);
    }
    MEMORY[0x1B3EA8670](v4, 0x10B0C40587FD9DDLL);
  }
  unint64_t v6 = *((void *)this + 21);
  if (v6)
  {
    for (unint64_t i = 0; i < v6; ++i)
    {
      uint64_t v8 = *(void *)(*(void *)(*((void *)this + 17) + (((i + *((void *)this + 20)) >> 6) & 0x3FFFFFFFFFFFFF8))
                     + 8 * ((i + *((void *)this + 20)) & 0x1FF));
      if (v8)
      {
        int v9 = *(void **)v8;
        if (*(void *)v8)
        {
          *(void *)(v8 + 8) = v9;
          operator delete(v9);
        }
        MEMORY[0x1B3EA8670](v8, 0x1020C403D3F9D26);
        unint64_t v6 = *((void *)this + 21);
      }
    }
  }
  uint64_t v11 = *((void *)this + 23);
  uint64_t v10 = *((void *)this + 24);
  if (v10 != v11)
  {
    unint64_t v12 = 0;
    do
    {
      uint64_t v13 = *(void *)(v11 + 8 * v12);
      if (v13)
      {
        kaldi::Vector<float>::Destroy(*(void *)(v11 + 8 * v12));
        MEMORY[0x1B3EA8670](v13, 0x1080C4066DFD6F0);
        uint64_t v11 = *((void *)this + 23);
        uint64_t v10 = *((void *)this + 24);
      }
      ++v12;
    }
    while (v12 < (v10 - v11) >> 3);
  }
  kaldi::Vector<float>::Destroy((uint64_t)this + 328);
  float v14 = (void *)*((void *)this + 34);
  if (v14)
  {
    *((void *)this + 35) = v14;
    operator delete(v14);
  }
  float v15 = (void *)*((void *)this + 31);
  if (v15)
  {
    *((void *)this + 32) = v15;
    operator delete(v15);
  }
  kaldi::Vector<float>::Destroy((uint64_t)this + 216);
  float v16 = (void *)*((void *)this + 23);
  if (v16)
  {
    *((void *)this + 24) = v16;
    operator delete(v16);
  }
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)this + 16);
  kaldi::Vector<float>::Destroy((uint64_t)this + 88);
}

void *std::deque<kaldi::AudioAnalyticsFrameInfo *>::erase(void *a1, char *a2, uint64_t a3, char *a4, uint64_t a5)
{
  if (a5 == a3) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((a5 - *(void *)a4) >> 3) + ((a4 - a2) << 6) - ((a3 - *(void *)a2) >> 3);
  }
  uint64_t v7 = a1[1];
  uint64_t v8 = (char *)(v7 + 8 * (a1[4] >> 9));
  if (a1[2] == v7) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = *(void *)v8 + 8 * (a1[4] & 0x1FFLL);
  }
  unint64_t v33 = (char **)(v7 + 8 * (a1[4] >> 9));
  uint64_t v34 = (char *)v9;
  if (v9 == a3) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = ((a3 - *(void *)a2) >> 3) + ((a2 - v8) << 6) - ((v9 - *(void *)v8) >> 3);
  }
  uint64_t v11 = (char **)std::__deque_iterator<kaldi::AudioAnalyticsFrameInfo *,kaldi::AudioAnalyticsFrameInfo **,kaldi::AudioAnalyticsFrameInfo *&,kaldi::AudioAnalyticsFrameInfo ***,long,512l>::operator+[abi:ne180100]((uint64_t)&v33, v10);
  v32.n128_u64[0] = (unint64_t)v11;
  v32.n128_u64[1] = (unint64_t)v12;
  if (v6 >= 1)
  {
    if (v10 <= (unint64_t)(a1[5] - v6) >> 1)
    {
      float v19 = v11;
      float v20 = v12;
      uint64_t v21 = v33;
      uint64_t v22 = v34;
      uint64_t v23 = std::__deque_iterator<kaldi::AudioAnalyticsFrameInfo *,kaldi::AudioAnalyticsFrameInfo **,kaldi::AudioAnalyticsFrameInfo *&,kaldi::AudioAnalyticsFrameInfo ***,long,512l>::operator+[abi:ne180100]((uint64_t)&v32, v6);
      std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__deque_iterator<kaldi::AudioAnalyticsFrameInfo *,kaldi::AudioAnalyticsFrameInfo **,kaldi::AudioAnalyticsFrameInfo *&,kaldi::AudioAnalyticsFrameInfo ***,long,512l>,std::__deque_iterator<kaldi::AudioAnalyticsFrameInfo *,kaldi::AudioAnalyticsFrameInfo **,kaldi::AudioAnalyticsFrameInfo *&,kaldi::AudioAnalyticsFrameInfo ***,long,512l>,0>(v21, v22, v19, v20, v23, v24, &v35);
      float v25 = v34;
      if (v34 != v36)
      {
        float v26 = v33;
        do
        {
          v25 += 8;
          uint64_t v34 = v25;
          if (v25 - *v26 == 4096)
          {
            BOOL v27 = v26[1];
            ++v26;
            float v25 = v27;
            unint64_t v33 = v26;
            uint64_t v34 = v27;
          }
        }
        while (v25 != v36);
      }
      uint64_t v28 = a1[5] - v6;
      a1[4] += v6;
      a1[5] = v28;
      while ((std::deque<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1, 1) & 1) != 0);
    }
    else
    {
      uint64_t v13 = (char **)std::__deque_iterator<kaldi::AudioAnalyticsFrameInfo *,kaldi::AudioAnalyticsFrameInfo **,kaldi::AudioAnalyticsFrameInfo *&,kaldi::AudioAnalyticsFrameInfo ***,long,512l>::operator+[abi:ne180100]((uint64_t)&v32, v6);
      unint64_t v15 = a1[4] + a1[5];
      uint64_t v16 = a1[1];
      double v17 = (char **)(v16 + 8 * (v15 >> 9));
      if (a1[2] == v16) {
        uint64_t v18 = 0;
      }
      else {
        uint64_t v18 = &(*v17)[8 * (v15 & 0x1FF)];
      }
      __n128 v35 = v32;
      std::__for_each_segment[abi:ne180100]<std::__deque_iterator<kaldi::AudioAnalyticsFrameInfo *,kaldi::AudioAnalyticsFrameInfo **,kaldi::AudioAnalyticsFrameInfo *&,kaldi::AudioAnalyticsFrameInfo ***,long,512l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<kaldi::AudioAnalyticsFrameInfo *,kaldi::AudioAnalyticsFrameInfo **,kaldi::AudioAnalyticsFrameInfo *&,kaldi::AudioAnalyticsFrameInfo ***,long,512l>,std::__deque_iterator<kaldi::AudioAnalyticsFrameInfo *,kaldi::AudioAnalyticsFrameInfo **,kaldi::AudioAnalyticsFrameInfo *&,kaldi::AudioAnalyticsFrameInfo ***,long,512l>>>(v13, v14, v17, v18, (uint64_t)&v35);
      a1[5] -= v6;
      while ((std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::__maybe_remove_back_spare[abi:ne180100](a1, 1) & 1) != 0);
    }
  }
  uint64_t v29 = a1[1];
  if (a1[2] == v29) {
    uint64_t v30 = 0;
  }
  else {
    uint64_t v30 = *(void *)(v29 + 8 * (a1[4] >> 9)) + 8 * (a1[4] & 0x1FFLL);
  }
  v35.n128_u64[0] = v29 + 8 * (a1[4] >> 9);
  v35.n128_u64[1] = v30;
  return std::__deque_iterator<kaldi::AudioAnalyticsFrameInfo *,kaldi::AudioAnalyticsFrameInfo **,kaldi::AudioAnalyticsFrameInfo *&,kaldi::AudioAnalyticsFrameInfo ***,long,512l>::operator+[abi:ne180100]((uint64_t)&v35, v10);
}

void *std::__deque_iterator<kaldi::AudioAnalyticsFrameInfo *,kaldi::AudioAnalyticsFrameInfo **,kaldi::AudioAnalyticsFrameInfo *&,kaldi::AudioAnalyticsFrameInfo ***,long,512l>::operator+[abi:ne180100](uint64_t a1, uint64_t a2)
{
  float result = *(void **)a1;
  if (a2)
  {
    uint64_t v4 = a2 + ((uint64_t)(*(void *)(a1 + 8) - *result) >> 3);
    if (v4 < 1) {
      result -= (unint64_t)(511 - v4) >> 9;
    }
    else {
      result += (unint64_t)v4 >> 9;
    }
  }
  return result;
}

uint64_t kaldi::OnlineAudioAnalyticsFeature::NumFramesReady(kaldi::OnlineAudioAnalyticsFeature *this)
{
  return (*(_DWORD *)(*((void *)this + 1) + 176) - *(_DWORD *)(*((void *)this + 1) + 208));
}

void kaldi::OnlineAudioAnalyticsFeature::OnlineAudioAnalyticsFeature(void *a1)
{
  *a1 = &unk_1F0A481F8;
  operator new();
}

void sub_1B213C85C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10A0C40C1799B43);
  _Unwind_Resume(a1);
}

BOOL kaldi::OnlineAudioAnalyticsFeature::IsLastFrame(kaldi::OnlineAudioAnalyticsFeature *this, int a2)
{
  uint64_t v2 = *((void *)this + 1);
  return *(unsigned char *)(v2 + 296) && a2 + 1 == *(_DWORD *)(v2 + 176) - *(_DWORD *)(v2 + 208);
}

float kaldi::OnlineAudioAnalyticsFeature::GetFrame(uint64_t a1, int a2, uint64_t *a3)
{
  int v3 = *(void **)(a1 + 8);
  uint64_t v4 = (int *)(v3[31] + 8 * a2);
  uint64_t v5 = *a3;
  *(_DWORD *)uint64_t v5 = v4[1];
  uint64_t v6 = *v4;
  uint64_t v7 = v3[11];
  *(float *)(v5 + 4) = 1.0 / *(float *)(v7 + 4 * v6);
  *(_DWORD *)(v5 + 8) = *(_DWORD *)(v7 + 4 * v6);
  float result = *(float *)(v3[34] + 4 * a2);
  *(float *)(v5 + 12) = result;
  return result;
}

void kaldi::OnlineAudioAnalyticsFeature::AcceptWaveform(uint64_t a1, uint64_t a2)
{
}

void kaldi::OnlineAudioAnalyticsFeature::InputFinished(kaldi::OnlineAudioAnalyticsFeatureImpl **this)
{
}

void kaldi::OnlineAudioAnalyticsFeature::Compute(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
}

void kaldi::OnlineAudioAnalyticsFeature::~OnlineAudioAnalyticsFeature(kaldi::OnlineAudioAnalyticsFeature *this)
{
  *(void *)this = &unk_1F0A481F8;
  uint64_t v1 = (kaldi::OnlineAudioAnalyticsFeatureImpl *)*((void *)this + 1);
  if (v1)
  {
    kaldi::OnlineAudioAnalyticsFeatureImpl::~OnlineAudioAnalyticsFeatureImpl(v1);
    MEMORY[0x1B3EA8670]();
  }
}

{
  uint64_t vars8;

  kaldi::OnlineAudioAnalyticsFeature::~OnlineAudioAnalyticsFeature(this);
  JUMPOUT(0x1B3EA8670);
}

uint64_t kaldi::OnlineProcessAudioAnalytics::OnlineProcessAudioAnalytics(uint64_t a1, long long *a2, void (***a3)(void))
{
  long long v4 = *a2;
  long long v5 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)a1 = v4;
  int v6 = *((unsigned __int8 *)a2 + 40);
  int v7 = *((unsigned __int8 *)a2 + 41);
  int v8 = *((unsigned __int8 *)a2 + 42);
  int v9 = *((unsigned __int8 *)a2 + 43);
  int v10 = *((unsigned __int8 *)a2 + 44);
  int v11 = *((unsigned __int8 *)a2 + 45);
  int v12 = *((unsigned __int8 *)a2 + 46);
  int v13 = *((unsigned __int8 *)a2 + 47);
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 48) = a3;
  *(_DWORD *)(a1 + 56) = v6 + v7 + v8 + v9 + v10 + v11 + v12 + v13 + 1;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  (**a3)(a3);
  int v14 = *(unsigned __int8 *)(a1 + 40);
  *(_DWORD *)(a1 + 60) = v14;
  if (*(unsigned char *)(a1 + 41))
  {
    v14 |= 2u;
    *(_DWORD *)(a1 + 60) = v14;
  }
  if (*(unsigned char *)(a1 + 42))
  {
    v14 |= 4u;
    *(_DWORD *)(a1 + 60) = v14;
  }
  if (*(unsigned char *)(a1 + 43))
  {
    v14 |= 8u;
    *(_DWORD *)(a1 + 60) = v14;
  }
  if (*(unsigned char *)(a1 + 44))
  {
    v14 |= 0x10u;
    *(_DWORD *)(a1 + 60) = v14;
  }
  if (*(unsigned char *)(a1 + 45))
  {
    v14 |= 0x20u;
    *(_DWORD *)(a1 + 60) = v14;
  }
  if (*(unsigned char *)(a1 + 46))
  {
    v14 |= 0x40u;
    *(_DWORD *)(a1 + 60) = v14;
  }
  if (*(unsigned char *)(a1 + 47)) {
    *(_DWORD *)(a1 + 60) = v14 | 0x80;
  }
  return a1;
}

void sub_1B213CAF0(_Unwind_Exception *exception_object)
{
  long long v4 = (void *)v1[11];
  if (v4)
  {
    v1[12] = v4;
    operator delete(v4);
  }
  long long v5 = *v2;
  if (*v2)
  {
    v1[9] = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::OnlineProcessAudioAnalytics::NumFramesReady(kaldi::OnlineProcessAudioAnalytics *this)
{
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 6) + 8))(*((void *)this + 6));
  if (result)
  {
    int v3 = result;
    if ((*(unsigned int (**)(void, void))(**((void **)this + 6) + 16))(*((void *)this + 6), (result - 1)))
    {
      return (*((_DWORD *)this + 9) + v3);
    }
    else
    {
      int v4 = v3 - *((_DWORD *)this + 7) + *((_DWORD *)this + 9);
      return v4 & ~(v4 >> 31);
    }
  }
  return result;
}

void kaldi::OnlineProcessAudioAnalytics::GetFrame(uint64_t a1, int a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(a1 + 36);
  BOOL v6 = __OFSUB__(a2, v5);
  int v7 = a2 - v5;
  if (v7 < 0 != v6) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = v7;
  }
  kaldi::OnlineProcessAudioAnalytics::NumFramesReady((kaldi::OnlineProcessAudioAnalytics *)a1);
  **(float **)a3 = (float)*(unsigned int *)(a1 + 60);
  if (*(unsigned char *)(a1 + 40))
  {
    double v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    kaldi::Vector<float>::Resize((void **)&v17, 4, 0);
    int v9 = (kaldi *)(*(uint64_t (**)(void, uint64_t, float **))(**(void **)(a1 + 48) + 24))(*(void *)(a1 + 48), v8, &v17);
    float v10 = *(float *)(a1 + 4);
    float v11 = kaldi::NccfToPovFeature(v9, *v17);
    float v12 = *(float *)(a1 + 8);
    kaldi::Vector<float>::Destroy((uint64_t)&v17);
    *(float *)(*(void *)a3 + 4) = v12 + (float)(v10 * v11);
    unsigned int v13 = 2;
  }
  else
  {
    unsigned int v13 = 1;
  }
  if (*(unsigned char *)(a1 + 41)) {
    *(float *)(*(void *)a3 + 4 * v13++) = kaldi::OnlineProcessAudioAnalytics::GetNormalizedLogPitchFeature((kaldi::OnlineProcessAudioAnalytics *)a1, v8);
  }
  if (*(unsigned char *)(a1 + 42)) {
    *(float *)(*(void *)a3 + 4 * v13++) = kaldi::OnlineProcessAudioAnalytics::GetDeltaPitchFeature((kaldi::OnlineProcessAudioAnalytics *)a1, v8, 1u);
  }
  if (*(unsigned char *)(a1 + 43)) {
    *(float *)(*(void *)a3 + 4 * v13++) = kaldi::OnlineProcessAudioAnalytics::GetDeltaPitchFeature((kaldi::OnlineProcessAudioAnalytics *)a1, v8, 2u);
  }
  if (*(unsigned char *)(a1 + 44))
  {
    double v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    kaldi::Vector<float>::Resize((void **)&v17, 4, 0);
    (*(void (**)(void, uint64_t, float **))(**(void **)(a1 + 48) + 24))(*(void *)(a1 + 48), v8, &v17);
    float v14 = v17[1];
    kaldi::Vector<float>::Destroy((uint64_t)&v17);
    *(float *)(*(void *)a3 + 4 * v13++) = logf(v14);
  }
  if (*(unsigned char *)(a1 + 45))
  {
    double v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    kaldi::Vector<float>::Resize((void **)&v17, 4, 0);
    (*(void (**)(void, uint64_t, float **))(**(void **)(a1 + 48) + 24))(*(void *)(a1 + 48), v8, &v17);
    int v15 = *((_DWORD *)v17 + 2);
    kaldi::Vector<float>::Destroy((uint64_t)&v17);
    *(_DWORD *)(*(void *)a3 + 4 * v13++) = v15;
  }
  if (*(unsigned char *)(a1 + 46)) {
    *(float *)(*(void *)a3 + 4 * v13++) = kaldi::OnlineProcessAudioAnalytics::GetSmoothedPov((kaldi::OnlineProcessAudioAnalytics *)a1, v8);
  }
  if (*(unsigned char *)(a1 + 47))
  {
    double v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    kaldi::Vector<float>::Resize((void **)&v17, 4, 0);
    (*(void (**)(void, uint64_t, float **))(**(void **)(a1 + 48) + 24))(*(void *)(a1 + 48), v8, &v17);
    int v16 = *((_DWORD *)v17 + 3);
    kaldi::Vector<float>::Destroy((uint64_t)&v17);
    *(_DWORD *)(*(void *)a3 + 4 * v13) = v16;
  }
}

void sub_1B213CE80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

float kaldi::OnlineProcessAudioAnalytics::GetNormalizedLogPitchFeature(kaldi::OnlineProcessAudioAnalytics *this, uint64_t a2)
{
  kaldi::OnlineProcessAudioAnalytics::UpdateNormalizationStats(this, a2);
  memset(v9, 0, sizeof(v9));
  kaldi::Vector<float>::Resize(v9, 4, 0);
  (*(void (**)(void, uint64_t, void **))(**((void **)this + 6) + 24))(*((void *)this + 6), a2, v9);
  float v4 = *((float *)v9[0] + 1);
  kaldi::Vector<float>::Destroy((uint64_t)v9);
  float v5 = logf(v4);
  uint64_t v6 = *((void *)this + 11) + 24 * (int)a2;
  float v7 = *(double *)(v6 + 16) / *(double *)(v6 + 8);
  return *(float *)this * (float)(v5 - v7);
}

void sub_1B213CFA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

float kaldi::OnlineProcessAudioAnalytics::GetDeltaPitchFeature(kaldi::OnlineProcessAudioAnalytics *this, int a2, unsigned int a3)
{
  int v6 = *((_DWORD *)this + 8);
  int v7 = (a2 - v6) & ~((a2 - v6) >> 31);
  int v8 = a2 + v6;
  int v9 = a2 + v6 + 1;
  int v10 = (*(uint64_t (**)(void))(**((void **)this + 6) + 8))(*((void *)this + 6));
  if (v10 >= v9) {
    int v11 = v8 + 1;
  }
  else {
    int v11 = v10;
  }
  kaldi::Matrix<float>::Matrix((uint64_t)v42, (v11 - v7), 1, 0, 0);
  kaldi::Matrix<float>::Matrix((uint64_t)v40);
  BOOL v12 = __OFSUB__(v11, v7);
  int v13 = v11 - v7;
  if (!((v13 < 0) ^ v12 | (v13 == 0)))
  {
    int v14 = 0;
    do
    {
      memset(v44, 0, 24);
      kaldi::Vector<float>::Resize(v44, 4, 0);
      (*(void (**)(void, void, void **))(**((void **)this + 6) + 24))(*((void *)this + 6), (v7 + v14), v44);
      float v15 = *((float *)v44[0] + 1);
      kaldi::Vector<float>::Destroy((uint64_t)v44);
      *(float *)(v42[0] + 4 * v43 * v14++) = logf(v15);
    }
    while (v13 != v14);
  }
  v44[0] = (void *)__PAIR64__(*((_DWORD *)this + 8), a3);
  kaldi::ComputeDeltas((unsigned int *)v44, (uint64_t)v42, v40);
  uint64_t v16 = *((void *)this + 8);
  double v17 = (void **)((char *)this + 64);
  if (a2 >= (unint64_t)((*((void *)this + 9) - v16) >> 2))
  {
    unsigned int v39 = a3;
    do
    {
      int v18 = kaldi::Rand(0);
      int v19 = kaldi::Rand(0);
      float v20 = ((double)v18 + 1.0) / 2147483650.0;
      float v21 = sqrtf(logf(v20) * -2.0);
      float v22 = ((double)v19 + 1.0) / 2147483650.0;
      float v23 = v22 * 6.28318531;
      float v24 = (float)(v21 * cosf(v23)) * *((float *)this + 5);
      float v26 = (float *)*((void *)this + 9);
      unint64_t v25 = *((void *)this + 10);
      if ((unint64_t)v26 >= v25)
      {
        uint64_t v28 = (float *)*v17;
        uint64_t v29 = ((char *)v26 - (unsigned char *)*v17) >> 2;
        unint64_t v30 = v29 + 1;
        if ((unint64_t)(v29 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v31 = v25 - (void)v28;
        if (v31 >> 1 > v30) {
          unint64_t v30 = v31 >> 1;
        }
        if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v32 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v32 = v30;
        }
        if (v32)
        {
          unint64_t v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this + 80, v32);
          uint64_t v28 = (float *)*((void *)this + 8);
          float v26 = (float *)*((void *)this + 9);
        }
        else
        {
          unint64_t v33 = 0;
        }
        uint64_t v34 = (float *)&v33[4 * v29];
        *uint64_t v34 = v24;
        BOOL v27 = v34 + 1;
        while (v26 != v28)
        {
          int v35 = *((_DWORD *)v26-- - 1);
          *((_DWORD *)v34-- - 1) = v35;
        }
        *((void *)this + 8) = v34;
        *((void *)this + 9) = v27;
        *((void *)this + 10) = &v33[4 * v32];
        if (v28) {
          operator delete(v28);
        }
      }
      else
      {
        *float v26 = v24;
        BOOL v27 = v26 + 1;
      }
      *((void *)this + 9) = v27;
      uint64_t v16 = *((void *)this + 8);
    }
    while (a2 >= (unint64_t)(((uint64_t)v27 - v16) >> 2));
    a3 = v39;
  }
  if (a2 >= v6) {
    int v36 = v6;
  }
  else {
    int v36 = a2;
  }
  if (a3 == 1) {
    float v37 = (float)(*(float *)(*(void *)v40 + 4 * v41 * v36 + 4) + *(float *)(v16 + 4 * a2)) * *((float *)this + 3);
  }
  else {
    float v37 = (*(float *)(*(void *)v40 + 4 * v41 * v36 + 4 * (int)a3) + *(float *)(v16 + 4 * a2) * 0.1)
  }
        * *((float *)this + 4);
  kaldi::Matrix<float>::~Matrix((uint64_t)v40);
  kaldi::Matrix<float>::~Matrix((uint64_t)v42);
  return v37;
}

void sub_1B213D30C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  kaldi::Matrix<float>::~Matrix((uint64_t)va1);
  _Unwind_Resume(a1);
}

float kaldi::OnlineProcessAudioAnalytics::GetSmoothedPov(kaldi::OnlineProcessAudioAnalytics *this, int a2)
{
  memset(v17, 0, sizeof(v17));
  kaldi::Vector<float>::Resize(v17, 4, 0);
  if (a2 <= 4) {
    uint64_t v4 = 4;
  }
  else {
    uint64_t v4 = a2;
  }
  int v5 = (*(uint64_t (**)(void))(**((void **)this + 6) + 8))(*((void *)this + 6));
  uint64_t v6 = (v4 - 4);
  if (v5 >= a2 + 1) {
    int v7 = a2 + 1;
  }
  else {
    int v7 = v5;
  }
  int v8 = v7 - v6;
  memset(v16, 0, sizeof(v16));
  kaldi::Vector<float>::Resize(v16, (v7 - v6), 0);
  if (v7 > (int)v6)
  {
    uint64_t v9 = v4 - v6 - 4;
    do
    {
      memset(v15, 0, sizeof(v15));
      kaldi::Vector<float>::Resize(v15, 4, 0);
      int v10 = (kaldi *)(*(uint64_t (**)(void, uint64_t, void **))(**((void **)this + 6) + 24))(*((void *)this + 6), v6, v15);
      float v11 = kaldi::NccfToPov(v10, *(float *)v15[0]);
      *((float *)v16[0] + v9) = v11;
      kaldi::Vector<float>::Destroy((uint64_t)v15);
      ++v9;
      uint64_t v6 = (v6 + 1);
    }
    while (v7 != v6);
  }
  if (v8 <= 0)
  {
    float v13 = 0.0;
  }
  else
  {
    double v12 = kaldi::VectorBase<float>::Sum((uint64_t)v16);
    float v13 = *(float *)&v12 / (float)v8;
  }
  kaldi::Vector<float>::Destroy((uint64_t)v16);
  kaldi::Vector<float>::Destroy((uint64_t)v17);
  return v13;
}

void sub_1B213D4C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  kaldi::Vector<float>::Destroy((uint64_t)va1);
  _Unwind_Resume(a1);
}

void kaldi::AudioAnalyticsHelper::ExtractDesiredAudioAnalytics(float **a1, int a2, uint64_t a3)
{
  if ((int)kaldi::MatrixBase<float>::NumRows((uint64_t)a1) >= 1)
  {
    uint64_t v6 = *a1;
    kaldi::MatrixBase<float>::NumCols((uint64_t)a1);
    uint64_t v7 = 0;
    int v8 = 0;
    unsigned int v9 = *v6;
    int v10 = 1;
    do
    {
      int v11 = kaldi::AudioAnalyticsHelper::FeatsArray[v7];
      if ((v11 & v9) != 0)
      {
        if ((v11 & a2) != 0)
        {
          int v12 = kaldi::MatrixBase<float>::NumRows((uint64_t)a1);
          kaldi::SubMatrix<float>::SubMatrix((uint64_t)v15, (uint64_t)a1, 0, v12, v10, 1);
          int v13 = kaldi::MatrixBase<float>::NumRows((uint64_t)a1);
          kaldi::SubMatrix<float>::SubMatrix((uint64_t)v14, a3, 0, v13, v8, 1);
          kaldi::MatrixBase<float>::CopyFromMat<float>(v14, v15, 111);
          ++v8;
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)v14);
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)v15);
        }
        ++v10;
      }
      ++v7;
    }
    while (v7 != 8);
  }
}

void sub_1B213D628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

uint64_t kaldi::OnlineAudioAnalyticsFeature::Dim(kaldi::OnlineAudioAnalyticsFeature *this)
{
  return 4;
}

void kaldi::OnlineProcessAudioAnalytics::UpdateNormalizationStats(kaldi::OnlineProcessAudioAnalytics *this, unsigned int a2)
{
  uint64_t v5 = *((void *)this + 11);
  uint64_t v6 = *((void *)this + 12);
  uint64_t v4 = (char *)this + 88;
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v5) >> 3) <= a2) {
    std::vector<kaldi::OnlineProcessPitch::NormalizationStats>::resize((uint64_t)v4, a2 + 1);
  }
  int v8 = (*(uint64_t (**)(void))(**((void **)this + 6) + 8))(*((void *)this + 6));
  int v9 = (*(uint64_t (**)(void, void))(**((void **)this + 6) + 16))(*((void *)this + 6), (v8 - 1));
  uint64_t v10 = *((void *)this + 11);
  uint64_t v11 = v10 + 24 * a2;
  if (*(_DWORD *)v11 != v8 || *(unsigned __int8 *)(v10 + 24 * a2 + 4) != v9)
  {
    uint64_t v12 = (a2 - *((_DWORD *)this + 6)) & ~((int)(a2 - *((_DWORD *)this + 6)) >> 31);
    unsigned int v13 = a2 + *((_DWORD *)this + 7);
    if ((int)(v13 + 1) < v8) {
      int v14 = v13 + 1;
    }
    else {
      int v14 = v8;
    }
    if (a2
      && (unsigned int v15 = a2 - 1, v16 = v10 + 24 * (a2 - 1), *(_DWORD *)v16 == v8)
      && *(unsigned __int8 *)(v10 + 24 * v15 + 4) == v9)
    {
      *(_OWORD *)uint64_t v11 = *(_OWORD *)v16;
      *(void *)(v11 + 16) = *(void *)(v16 + 16);
      uint64_t v17 = (v15 - *((_DWORD *)this + 6)) & ~((int)(v15 - *((_DWORD *)this + 6)) >> 31);
      int v18 = *((_DWORD *)this + 7) + a2;
      if (v18 >= v8) {
        uint64_t v19 = v8;
      }
      else {
        uint64_t v19 = v18;
      }
      if (v12 != v17)
      {
        uint64_t v34 = 0;
        uint64_t v35 = 0;
        uint64_t v36 = 0;
        kaldi::Vector<float>::Resize((void **)&v34, 4, 0);
        float v20 = (kaldi *)(*(uint64_t (**)(void, uint64_t, float **))(**((void **)this + 6) + 24))(*((void *)this + 6), v17, &v34);
        float v31 = kaldi::NccfToPov(v20, *v34);
        float v21 = logf(v34[1]);
        v22.f32[0] = v31;
        v22.f32[1] = v31 * v21;
        *(float64x2_t *)(v10 + 24 * a2 + 8) = vsubq_f64(*(float64x2_t *)(v10 + 24 * a2 + 8), vcvtq_f64_f32(v22));
        kaldi::Vector<float>::Destroy((uint64_t)&v34);
      }
      if (v14 != v19)
      {
        uint64_t v34 = 0;
        uint64_t v35 = 0;
        uint64_t v36 = 0;
        kaldi::Vector<float>::Resize((void **)&v34, 4, 0);
        float v23 = (kaldi *)(*(uint64_t (**)(void, uint64_t, float **))(**((void **)this + 6) + 24))(*((void *)this + 6), v19, &v34);
        float v32 = kaldi::NccfToPov(v23, *v34);
        float v24 = logf(v34[1]);
        v25.f32[0] = v32;
        v25.f32[1] = v32 * v24;
        *(float64x2_t *)(v10 + 24 * a2 + 8) = vaddq_f64(*(float64x2_t *)(v10 + 24 * a2 + 8), vcvtq_f64_f32(v25));
        kaldi::Vector<float>::Destroy((uint64_t)&v34);
      }
    }
    else
    {
      uint64_t v26 = v10 + 24 * a2;
      *(void *)(v26 + 8) = 0;
      uint64_t v27 = v26 + 8;
      *(_DWORD *)uint64_t v11 = v8;
      *(unsigned char *)(v27 - 4) = v9;
      *(void *)(v27 + 8) = 0;
      uint64_t v34 = 0;
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      kaldi::Vector<float>::Resize((void **)&v34, 4, 0);
      if ((int)v12 < v14)
      {
        do
        {
          uint64_t v28 = (kaldi *)(*(uint64_t (**)(void, uint64_t, float **))(**((void **)this + 6) + 24))(*((void *)this + 6), v12, &v34);
          float v33 = kaldi::NccfToPov(v28, *v34);
          float v29 = logf(v34[1]);
          v30.f32[0] = v33;
          v30.f32[1] = v33 * v29;
          *(float64x2_t *)uint64_t v27 = vaddq_f64(*(float64x2_t *)v27, vcvtq_f64_f32(v30));
          uint64_t v12 = (v12 + 1);
        }
        while (v14 != v12);
      }
      kaldi::Vector<float>::Destroy((uint64_t)&v34);
    }
  }
}

void sub_1B213D9A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::vector<kaldi::AudioAnalyticsFrameInfo::StateInfo>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1B213DA58(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::deque<kaldi::AudioAnalyticsFrameInfo *>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    int v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    int v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)int v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      float v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      int v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        int v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        int v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)int v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      int v9 = (char *)a1[1];
    }
    int v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    int v44 = (void *)a1[1];
    int v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    int v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      float v37 = &v34[8 * v47];
      int v48 = (uint64_t *)a1[1];
      int v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        int v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        int v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)int v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      int v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        int v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  int v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0x1000uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  float v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1B213DD40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

__n128 std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__deque_iterator<kaldi::AudioAnalyticsFrameInfo *,kaldi::AudioAnalyticsFrameInfo **,kaldi::AudioAnalyticsFrameInfo *&,kaldi::AudioAnalyticsFrameInfo ***,long,512l>,std::__deque_iterator<kaldi::AudioAnalyticsFrameInfo *,kaldi::AudioAnalyticsFrameInfo **,kaldi::AudioAnalyticsFrameInfo *&,kaldi::AudioAnalyticsFrameInfo ***,long,512l>,0>@<Q0>(char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, void *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  if (a1 == a3)
  {
    uint64_t v19 = a2;
    uint64_t v18 = a4;
    uint64_t v15 = a5;
    uint64_t v16 = a6;
  }
  else
  {
    uint64_t v13 = a3 - 1;
    uint64_t v12 = *a3;
    BOOL v14 = a4;
    uint64_t v15 = a5;
    uint64_t v16 = a6;
    while (1)
    {
      std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<kaldi::AudioAnalyticsFrameInfo **,std::__deque_iterator<kaldi::AudioAnalyticsFrameInfo *,kaldi::AudioAnalyticsFrameInfo **,kaldi::AudioAnalyticsFrameInfo *&,kaldi::AudioAnalyticsFrameInfo ***,long,512l>,0>(v12, v14, v15, v16, &v21);
      uint64_t v16 = (char *)v22.n128_u64[1];
      uint64_t v15 = (void *)v22.n128_u64[0];
      if (v13 == a1) {
        break;
      }
      uint64_t v17 = *v13--;
      uint64_t v12 = v17;
      BOOL v14 = v17 + 4096;
    }
    uint64_t v18 = *a1 + 4096;
    uint64_t v19 = a2;
  }
  std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<kaldi::AudioAnalyticsFrameInfo **,std::__deque_iterator<kaldi::AudioAnalyticsFrameInfo *,kaldi::AudioAnalyticsFrameInfo **,kaldi::AudioAnalyticsFrameInfo *&,kaldi::AudioAnalyticsFrameInfo ***,long,512l>,0>(v19, v18, v15, v16, &v21);
  __n128 result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<kaldi::AudioAnalyticsFrameInfo **,std::__deque_iterator<kaldi::AudioAnalyticsFrameInfo *,kaldi::AudioAnalyticsFrameInfo **,kaldi::AudioAnalyticsFrameInfo *&,kaldi::AudioAnalyticsFrameInfo ***,long,512l>,0>@<X0>(char *a1@<X1>, char *a2@<X2>, void *a3@<X3>, char *a4@<X4>, void *a5@<X8>)
{
  uint64_t v6 = a3;
  if (a1 == a2)
  {
    int v9 = a1;
  }
  else
  {
    int v9 = a2;
    uint64_t v10 = *a3;
    uint64_t v11 = a2;
    while (1)
    {
      uint64_t v12 = (uint64_t)&a4[-v10];
      if ((v11 - a1) >> 3 >= v12 >> 3) {
        uint64_t v13 = v12 >> 3;
      }
      else {
        uint64_t v13 = (v11 - a1) >> 3;
      }
      v11 -= 8 * v13;
      a4 -= 8 * v13;
      if (v13) {
        __n128 result = memmove(a4, v11, 8 * v13);
      }
      if (v11 == a1) {
        break;
      }
      uint64_t v15 = *--v6;
      uint64_t v10 = v15;
      a4 = (char *)(v15 + 4096);
    }
    if ((char *)(*v6 + 4096) == a4)
    {
      uint64_t v16 = (char *)v6[1];
      ++v6;
      a4 = v16;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

double std::__for_each_segment[abi:ne180100]<std::__deque_iterator<kaldi::AudioAnalyticsFrameInfo *,kaldi::AudioAnalyticsFrameInfo **,kaldi::AudioAnalyticsFrameInfo *&,kaldi::AudioAnalyticsFrameInfo ***,long,512l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<kaldi::AudioAnalyticsFrameInfo *,kaldi::AudioAnalyticsFrameInfo **,kaldi::AudioAnalyticsFrameInfo *&,kaldi::AudioAnalyticsFrameInfo ***,long,512l>,std::__deque_iterator<kaldi::AudioAnalyticsFrameInfo *,kaldi::AudioAnalyticsFrameInfo **,kaldi::AudioAnalyticsFrameInfo *&,kaldi::AudioAnalyticsFrameInfo ***,long,512l>>>(char **a1, char *__src, char **a3, char *a4, uint64_t a5)
{
  if (a1 == a3)
  {
    uint64_t v11 = *(void ***)a5;
    uint64_t v12 = *(char **)(a5 + 8);
    uint64_t v10 = __src;
  }
  else
  {
    int v8 = a1 + 1;
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,kaldi::AudioAnalyticsFrameInfo **,kaldi::AudioAnalyticsFrameInfo **,std::__deque_iterator<kaldi::AudioAnalyticsFrameInfo *,kaldi::AudioAnalyticsFrameInfo **,kaldi::AudioAnalyticsFrameInfo *&,kaldi::AudioAnalyticsFrameInfo ***,long,512l>,0>(__src, *(char **)(a5 + 8), *a1 + 4096, *(void ***)a5, &v14);
    for (*(_OWORD *)a5 = v15; v8 != a3; *(_OWORD *)a5 = v15)
    {
      int v9 = *v8++;
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,kaldi::AudioAnalyticsFrameInfo **,kaldi::AudioAnalyticsFrameInfo **,std::__deque_iterator<kaldi::AudioAnalyticsFrameInfo *,kaldi::AudioAnalyticsFrameInfo **,kaldi::AudioAnalyticsFrameInfo *&,kaldi::AudioAnalyticsFrameInfo ***,long,512l>,0>(v9, *(char **)(a5 + 8), v9 + 4096, *(void ***)a5, &v14);
    }
    uint64_t v10 = *a3;
    uint64_t v11 = *(void ***)a5;
    uint64_t v12 = *(char **)(a5 + 8);
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,kaldi::AudioAnalyticsFrameInfo **,kaldi::AudioAnalyticsFrameInfo **,std::__deque_iterator<kaldi::AudioAnalyticsFrameInfo *,kaldi::AudioAnalyticsFrameInfo **,kaldi::AudioAnalyticsFrameInfo *&,kaldi::AudioAnalyticsFrameInfo ***,long,512l>,0>(v10, v12, a4, v11, &v14);
  double result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

char *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,kaldi::AudioAnalyticsFrameInfo **,kaldi::AudioAnalyticsFrameInfo **,std::__deque_iterator<kaldi::AudioAnalyticsFrameInfo *,kaldi::AudioAnalyticsFrameInfo **,kaldi::AudioAnalyticsFrameInfo *&,kaldi::AudioAnalyticsFrameInfo ***,long,512l>,0>@<X0>(char *__src@<X0>, char *__dst@<X3>, char *a3@<X1>, void **a4@<X2>, char **a5@<X8>)
{
  uint64_t v6 = a4;
  if (__src != a3)
  {
    int v9 = __src;
    uint64_t v6 = a4 + 1;
    uint64_t v10 = (char *)*a4;
    while (1)
    {
      uint64_t v11 = v10 - __dst + 4096;
      uint64_t v12 = (a3 - v9) >> 3 >= v11 >> 3 ? v11 >> 3 : (a3 - v9) >> 3;
      if (v12) {
        long long __src = (char *)memmove(__dst, v9, 8 * v12);
      }
      v9 += 8 * v12;
      if (v9 == a3) {
        break;
      }
      uint64_t v13 = (char *)*v6++;
      uint64_t v10 = v13;
      __dst = v13;
    }
    __dst += 8 * v12;
    if ((char *)*(v6 - 1) + 4096 == __dst) {
      __dst = (char *)*v6;
    }
    else {
      --v6;
    }
  }
  *a5 = a3;
  a5[1] = (char *)v6;
  a5[2] = __dst;
  return __src;
}

void quasar::tennessee::nashville::CreateTextNormalizer(quasar::tennessee::nashville **a1)
{
}

void sub_1B213E1B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  if (a2) {
    quasar::tennessee::nashville::CreateTextNormalizer();
  }
  quasar::tennessee::nashville::CreateTextNormalizer((uint64_t *)va, (uint64_t *)va1);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<quasar::tennessee::nashville::TextNormalizer<std::unique_ptr<quasar::tennessee::archive::ImmutableArchive>,std::unique_ptr<quasar::tennessee::nashville::GenericNashvilleLexicon<std::string_view,quasar::tennessee::nashville::flatbuf::TokenInfoToUTF8StringViewFunctor>>>,std::unique_ptr<quasar::tennessee::archive::ImmutableArchive>,std::unique_ptr<quasar::tennessee::nashville::GenericNashvilleLexicon<std::string_view,quasar::tennessee::nashville::flatbuf::TokenInfoToUTF8StringViewFunctor>>,quasar::tennessee::nashville::TextNormalizerOptions const&>()
{
}

void sub_1B213E2C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (a2) {
    quasar::tennessee::nashville::CreateTextNormalizer();
  }
  std::make_unique[abi:ne180100]<quasar::tennessee::nashville::TextNormalizer<std::unique_ptr<quasar::tennessee::archive::ImmutableArchive>,std::unique_ptr<quasar::tennessee::nashville::GenericNashvilleLexicon<std::string_view,quasar::tennessee::nashville::flatbuf::TokenInfoToUTF8StringViewFunctor>>>,std::unique_ptr<quasar::tennessee::archive::ImmutableArchive>,std::unique_ptr<quasar::tennessee::nashville::GenericNashvilleLexicon<std::string_view,quasar::tennessee::nashville::flatbuf::TokenInfoToUTF8StringViewFunctor>>,quasar::tennessee::nashville::TextNormalizerOptions const&>((uint64_t *)va);
  MEMORY[0x1B3EA8670](v2, 0x10F3C40974A0BF2);
  _Unwind_Resume(a1);
}

void quasar::tennessee::nashville::TextNormalizer<std::unique_ptr<quasar::tennessee::archive::ImmutableArchive>,std::unique_ptr<quasar::tennessee::nashville::GenericNashvilleLexicon<std::string_view,quasar::tennessee::nashville::flatbuf::TokenInfoToUTF8StringViewFunctor>>>::TextNormalizer(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  *(void *)a1 = &unk_1F0A5A2A8;
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t *)(a1 + 8), (const void ***)a4);
  long long v8 = *(_OWORD *)(a4 + 24);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a4 + 40);
  *(_OWORD *)(a1 + 32) = v8;
  uint64_t v9 = *a2;
  *a2 = 0;
  *(void *)(a1 + 56) = v9;
  uint64_t v10 = *a3;
  *a3 = 0;
  *(void *)(a1 + 64) = v10;
  operator new();
}

void sub_1B213E8F0(_Unwind_Exception *a1)
{
  TTokenizer::~TTokenizer(v4);
  TLexicon::~TLexicon(v3);
  uint64_t v6 = *(void *)(v1 + 64);
  *(void *)(v1 + 64) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *(void *)(v1 + 56);
  *(void *)(v1 + 56) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v2, *(void **)(v1 + 16));
  _Unwind_Resume(a1);
}

void sub_1B213E8F8()
{
}

void sub_1B213E904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  TTokenizer::~TTokenizer(v23);
  TLexicon::~TLexicon(v22);
  uint64_t v25 = *(void *)(v20 + 64);
  *(void *)(v20 + 64) = 0;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  uint64_t v26 = *(void *)(v20 + 56);
  *(void *)(v20 + 56) = 0;
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v21, *(void **)(v20 + 16));
  _Unwind_Resume(a1);
}

uint64_t TParamManager::nameToParam(uint64_t a1, const __int32 *a2)
{
  TParamManager::find(a1, a2, &v8);
  TParamManager::end(a1, &v7);
  if (v8 == v7) {
    return 0;
  }
  uint64_t v3 = *(void *)(v8 + 40);
  if (!v3) {
    return 0;
  }
  unint64_t v4 = v3 - 1;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v4 >= (*(void *)(a1 + 24) - v5) >> 3) {
    return 0;
  }
  else {
    return *(void *)(v5 + 8 * v4);
  }
}

uint64_t quasar::tennessee::nashville::TextNormalizer<std::unique_ptr<quasar::tennessee::archive::ImmutableArchive>,std::unique_ptr<quasar::tennessee::nashville::GenericNashvilleLexicon<std::string_view,quasar::tennessee::nashville::flatbuf::TokenInfoToUTF8StringViewFunctor>>>::~TextNormalizer(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A5A2A8;
  TTokenizer::~TTokenizer((TTokenizer *)(a1 + 592));
  TLexicon::~TLexicon((TLexicon *)(a1 + 72));
  uint64_t v2 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1 + 8, *(void **)(a1 + 16));
  return a1;
}

void quasar::tennessee::nashville::TextNormalizer<std::unique_ptr<quasar::tennessee::archive::ImmutableArchive>,std::unique_ptr<quasar::tennessee::nashville::GenericNashvilleLexicon<std::string_view,quasar::tennessee::nashville::flatbuf::TokenInfoToUTF8StringViewFunctor>>>::~TextNormalizer(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A5A2A8;
  TTokenizer::~TTokenizer((TTokenizer *)(a1 + 592));
  TLexicon::~TLexicon((TLexicon *)(a1 + 72));
  uint64_t v2 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1 + 8, *(void **)(a1 + 16));
  JUMPOUT(0x1B3EA8670);
}

void *quasar::tennessee::nashville::TextNormalizer<std::unique_ptr<quasar::tennessee::archive::ImmutableArchive>,std::unique_ptr<quasar::tennessee::nashville::GenericNashvilleLexicon<std::string_view,quasar::tennessee::nashville::flatbuf::TokenInfoToUTF8StringViewFunctor>>>::normalize(uint64_t a1, char *a2, void *a3)
{
  if (*a3 != a3[1])
  {
    memset(v15, 0, sizeof(v15));
    quasar::QuasarExceptionMessage::QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v15);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v15);
  }
  uint64_t v6 = (TParam *)(*(void *)(a1 + 3184) + 13600);
  uint64_t ValidConfig = TParam::getValidConfig(v6, *(void *)(a1 + 3192));
  TWordBlockMaker::TWordBlockMaker((uint64_t)v15, *((int *)v6 + ValidConfig + 40), a1 + 296);
  if (a2[23] >= 0) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = *(char **)a2;
  }
  TTokenizer::tokenize(a1 + 592, v8, 0, 0, *(void *)(a1 + 3192), v15);
  BOOL v14 = 0;
  int v13 = 0;
  TWordBlockMaker::save((uint64_t)v15, &v14, &v13);
  std::vector<std::string>::size_type v10 = v9;
  if (a2[23] >= 0) {
    uint64_t v11 = (uint64_t)a2;
  }
  else {
    uint64_t v11 = *(void *)a2;
  }
  quasar::tennessee::nashville::ExtractResult(v11, (int *)v14, v10, *(_DWORD *)(a1 + 36), *(unsigned int *)(a1 + 40), *(unsigned __int8 *)(a1 + 44), (uint64_t)a3);
  free(v14);
  *(void *)&v15[0] = &unk_1F0A33D58;
  return TAllocator::clear((TAllocator *)((char *)&v15[4] + 8));
}

void sub_1B213ED04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  TWordBlockMaker::~TWordBlockMaker((TWordBlockMaker *)va);
  _Unwind_Resume(a1);
}

quasar::tennessee::nashville::ArchiveDataManager *quasar::tennessee::nashville::ArchiveDataManager::ArchiveDataManager(quasar::tennessee::nashville::ArchiveDataManager *this, const quasar::tennessee::archive::ImmutableArchive *a2, const std::__fs::filesystem::path *a3)
{
  *(void *)this = &unk_1F0A336E8;
  *((void *)this + 1) = 1;
  std::string::basic_string[abi:ne180100]<0>((void *)this + 2, "");
  *(void *)this = &unk_1F0A5A2D8;
  *((void *)this + 5) = a2;
  uint64_t v6 = (std::string *)((char *)this + 48);
  if (SHIBYTE(a3->__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v6, a3->__pn_.__r_.__value_.__l.__data_, a3->__pn_.__r_.__value_.__l.__size_);
  }
  else
  {
    long long v7 = *(_OWORD *)&a3->__pn_.__r_.__value_.__l.__data_;
    *((void *)this + 8) = *((void *)&a3->__pn_.__r_.__value_.__l + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return this;
}

void sub_1B213EDD8(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v2;
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v3);
  }
  _Unwind_Resume(exception_object);
}

void quasar::tennessee::nashville::ArchiveDataManager::~ArchiveDataManager(void **this)
{
  *this = &unk_1F0A5A2D8;
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  *this = &unk_1F0A336E8;
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
}

{
  uint64_t vars8;

  *this = &unk_1F0A5A2D8;
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  *this = &unk_1F0A336E8;
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
  JUMPOUT(0x1B3EA8670);
}

unint64_t quasar::tennessee::nashville::ArchiveDataManager::getVar(quasar::tennessee::nashville::ArchiveDataManager *this, char *a2, char *a3, unint64_t a4)
{
  v17[2] = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  long long v7 = std::string::append(&v14, ".dat");
  std::string::size_type v8 = v7->__r_.__value_.__r.__words[0];
  v17[0] = v7->__r_.__value_.__l.__size_;
  *(void *)((char *)v17 + 7) = *(std::string::size_type *)((char *)&v7->__r_.__value_.__r.__words[1] + 7);
  char v9 = HIBYTE(v7->__r_.__value_.__r.__words[2]);
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  *(std::string::size_type *)((char *)&__p.__pn_.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v17 + 7);
  __p.__pn_.__r_.__value_.__r.__words[0] = v8;
  __p.__pn_.__r_.__value_.__l.__size_ = v17[0];
  *((unsigned char *)&__p.__pn_.__r_.__value_.__s + 23) = v9;
  std::__fs::filesystem::operator/[abi:ne180100](&__p, (uint64_t)this + 48, &v16);
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if ((*(uint64_t (**)(void, std::__fs::filesystem::path *))(**((void **)this + 5) + 32))(*((void *)this + 5), &v16))
  {
    uint64_t v10 = (*(uint64_t (**)(void, std::__fs::filesystem::path *))(**((void **)this + 5) + 40))(*((void *)this + 5), &v16);
    unint64_t v11 = v10;
    if (a4 && v10)
    {
      (*(void (**)(std::__fs::filesystem::path *__return_ptr))(**((void **)this + 5) + 16))(&__p);
      std::istream::get();
      if (v11 < a4) {
        a3[v11] = 0;
      }
      std::string::size_type v12 = __p.__pn_.__r_.__value_.__r.__words[0];
      __p.__pn_.__r_.__value_.__r.__words[0] = 0;
      if (v12) {
        (*(void (**)(std::string::size_type))(*(void *)v12 + 8))(v12);
      }
    }
  }
  else
  {
    unint64_t v11 = 0;
  }
  if (SHIBYTE(v16.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__pn_.__r_.__value_.__l.__data_);
  }
  return v11;
}

void sub_1B213F0F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a15) {
    quasar::artifact::CreatePhraseCountsArtifact();
  }
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::tennessee::nashville::ExtractResult(uint64_t a1, int *a2, std::vector<std::string>::size_type __n, int a4, uint64_t a5, int a6, uint64_t a7)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  if (!a4)
  {
    memset(__p, 0, 24);
    std::vector<std::string>::reserve((std::vector<std::string> *)__p, __n);
    if (__n)
    {
      unsigned int v29 = 1;
      do
      {
        std::string __s = (char *)v62;
        long long v61 = xmmword_1B25607E0;
        char v63 = 1;
        quasar::tennessee::nashville::FormatToken((uint64_t)&__s, "{wordname}{origin_start}", a2, a1, 0);
        if (*((void *)&v61 + 1) >= (unint64_t)v61)
        {
          if (v63)
          {
            LOBYTE(v45) = 0;
            TBuffer<char>::insert((uint64_t)&__s, *((unint64_t *)&v61 + 1), (char *)&v45, 1uLL);
            --*((void *)&v61 + 1);
          }
          else if ((void)v61)
          {
            __s[(void)v61 - 1] = 0;
          }
        }
        else
        {
          __s[*((void *)&v61 + 1)] = 0;
        }
        std::string::basic_string[abi:ne180100]<0>(&v54, __s);
        quasar::tennessee::nashville::ConvertToken(&v54, a6, 1);
        long long v30 = *(_OWORD **)&__p[8];
        if (*(void *)&__p[8] >= *(void *)&__p[16])
        {
          uint64_t v32 = std::vector<std::string>::__emplace_back_slow_path<std::string&>((uint64_t *)__p, (long long *)&v54);
        }
        else
        {
          if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(*(std::string **)&__p[8], v54.__r_.__value_.__l.__data_, v54.__r_.__value_.__l.__size_);
          }
          else
          {
            long long v31 = *(_OWORD *)&v54.__r_.__value_.__l.__data_;
            *(void *)(*(void *)&__p[8] + 16) = *((void *)&v54.__r_.__value_.__l + 2);
            *long long v30 = v31;
          }
          uint64_t v32 = (uint64_t)v30 + 24;
        }
        *(void *)&__p[8] = v32;
        int v33 = *a2;
        if ((*a2 & 3) != 0)
        {
          long long v49 = 0u;
          memset(v50, 0, 144);
          long long v47 = 0u;
          long long v48 = 0u;
          memset(v46, 0, sizeof(v46));
          long long v45 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v45);
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v45);
        }
        if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v54.__r_.__value_.__l.__data_);
        }
        if (v63 && __s != (char *)v62 && __s) {
          MEMORY[0x1B3EA8630]();
        }
        a2 = (int *)((char *)a2 + (v33 & 0xFFFFFFFC));
        std::vector<std::string>::size_type v34 = v29++;
      }
      while (v34 < __n);
    }
    if (*(void *)(a7 + 8) < *(void *)(a7 + 16)) {
      quasar::tennessee::ImmutableVector<std::string>::ImmutableVector<std::__wrap_iter<std::string const*>,true>(*(void **)(a7 + 8), *(uint64_t *)__p, *(uint64_t *)&__p[8]);
    }
    std::vector<quasar::tennessee::ImmutableVector<std::string>>::__emplace_back_slow_path<std::vector<std::string> &>((uint64_t *)a7, (uint64_t *)__p);
  }
  memset(&v54, 0, sizeof(v54));
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  int v51 = &v52;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v45);
  std::vector<std::string>::size_type v40 = __n;
  if (__n)
  {
    int v9 = 0;
    int v10 = 0;
    uint64_t v38 = *(void *)(MEMORY[0x1E4FBA408] + 64);
    uint64_t v39 = *MEMORY[0x1E4FBA408];
    uint64_t v37 = *(void *)(MEMORY[0x1E4FBA408] + 72);
    unsigned int v11 = 1;
    do
    {
      std::string __s = (char *)v62;
      long long v61 = xmmword_1B25607E0;
      char v63 = 1;
      quasar::tennessee::nashville::FormatToken((uint64_t)&__s, "{wordname}{origin_start}", a2, a1, 0);
      int v12 = a2[1];
      if (*((void *)&v61 + 1) >= (unint64_t)v61)
      {
        if (v63)
        {
          __p[0] = 0;
          TBuffer<char>::insert((uint64_t)&__s, *((unint64_t *)&v61 + 1), __p, 1uLL);
          --*((void *)&v61 + 1);
        }
        else if ((void)v61)
        {
          __s[(void)v61 - 1] = 0;
        }
      }
      else
      {
        __s[*((void *)&v61 + 1)] = 0;
      }
      std::string::basic_string[abi:ne180100]<0>(&v44, __s);
      quasar::tennessee::nashville::ConvertToken(&v44, a6, 1);
      int v13 = (char *)v46 + *(void *)(*(void *)&v46[0] - 24);
      if ((v13[32] & 5) == 0)
      {
        (*(void (**)(unsigned char *__return_ptr))(**((void **)v13 + 5) + 32))(__p);
        if (v59[0] >= 1) {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)" ", 1);
        }
      }
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string v14 = &v44;
      }
      else {
        std::string v14 = (std::string *)v44.__r_.__value_.__r.__words[0];
      }
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v44.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)v14, size);
      int v10 = ((v12 & 8) == 0) & (v10 | ((v12 & 4) >> 2));
      int v9 = ((v12 & 2) == 0) & (v9 | v12);
      if (v9 != 1 || (v10 & 1) != 0)
      {
        if ((v9 & 1) == 0)
        {
          std::stringbuf::str();
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)&v51, (const void **)__p, (uint64_t)__p);
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
          std::string::size_type v16 = v54.__r_.__value_.__l.__size_;
          if (v54.__r_.__value_.__l.__size_ >= v54.__r_.__value_.__r.__words[2])
          {
            std::string::size_type v17 = std::vector<std::set<std::string>>::__push_back_slow_path<std::set<std::string> const&>((uint64_t *)&v54, (const void ***)&v51);
          }
          else
          {
            std::set<std::string>::set[abi:ne180100]((uint64_t *)v54.__r_.__value_.__l.__size_, (const void ***)&v51);
            std::string::size_type v17 = v16 + 24;
          }
          v54.__r_.__value_.__l.__size_ = v17;
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::swap[abi:ne180100]((uint64_t *)__p, &v45);
          *(void *)std::__fs::filesystem::path __p = v39;
          *(void *)&__p[*(void *)(v39 - 24)] = v38;
          *(void *)&__p[16] = v37;
          *(void *)&__p[24] = MEMORY[0x1E4FBA470] + 16;
          if (SHIBYTE(v57) < 0) {
            operator delete(*((void **)&v56 + 1));
          }
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x1B3EA8520](v59);
          std::__tree<std::string>::destroy((uint64_t)&v51, v52);
          uint64_t v52 = 0;
          uint64_t v53 = 0;
          int v51 = &v52;
        }
      }
      else
      {
        std::stringbuf::str();
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)&v51, (const void **)__p, (uint64_t)__p);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::swap[abi:ne180100]((uint64_t *)__p, &v45);
        *(void *)std::__fs::filesystem::path __p = v39;
        *(void *)&__p[*(void *)(v39 - 24)] = v38;
        *(void *)&__p[16] = v37;
        *(void *)&__p[24] = MEMORY[0x1E4FBA470] + 16;
        if (SHIBYTE(v57) < 0) {
          operator delete(*((void **)&v56 + 1));
        }
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x1B3EA8520](v59);
      }
      int v18 = *a2;
      if ((*a2 & 3) != 0)
      {
        long long v58 = 0u;
        memset(v59, 0, 144);
        long long v56 = 0u;
        long long v57 = 0u;
        memset(__p, 0, sizeof(__p));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
      }
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v44.__r_.__value_.__l.__data_);
      }
      if (v63 && __s != (char *)v62 && __s) {
        MEMORY[0x1B3EA8630]();
      }
      a2 = (int *)((char *)a2 + (v18 & 0xFFFFFFFC));
      std::vector<std::string>::size_type v19 = v11++;
    }
    while (v19 < v40);
  }
  if (a4 == 1) {
    operator new();
  }
  if (a4 == 2 && v54.__r_.__value_.__l.__size_ != v54.__r_.__value_.__r.__words[0])
  {
    uint64_t v20 = 0;
    unsigned int v21 = 0;
    do
    {
      __n128 v22 = (void *)(v54.__r_.__value_.__r.__words[0] + 24 * v20);
      uint64_t v23 = (void *)*v22;
      if ((void *)*v22 != v22 + 1)
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__s);
        uint64_t v24 = (void *)std::ostream::operator<<();
        uint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" ", 1);
        int v26 = *((char *)v23 + 55);
        if (v26 >= 0) {
          uint64_t v27 = (uint64_t)(v23 + 4);
        }
        else {
          uint64_t v27 = v23[4];
        }
        if (v26 >= 0) {
          uint64_t v28 = *((unsigned __int8 *)v23 + 55);
        }
        else {
          uint64_t v28 = v23[5];
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, v27, v28);
        std::stringbuf::str();
        v44.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        v44.__r_.__value_.__l.__size_ = 1;
        if (*(void *)(a7 + 8) < *(void *)(a7 + 16)) {
          quasar::tennessee::ImmutableVector<std::string>::ImmutableVector<std::__wrap_iter<std::string const*>,true>(*(void **)(a7 + 8), (uint64_t)__p, (uint64_t)&__p[24]);
        }
        std::vector<quasar::tennessee::ImmutableVector<std::string>>::__emplace_back_slow_path<std::initializer_list<std::string>>((uint64_t *)a7, (uint64_t *)&v44);
      }
      uint64_t v20 = ++v21;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v54.__r_.__value_.__l.__size_ - v54.__r_.__value_.__r.__words[0]) >> 3) > v21);
  }
  *(void *)&long long v45 = *MEMORY[0x1E4FBA408];
  uint64_t v35 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)&v46[-1] + *(void *)(v45 - 2std::__tree<int>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  *(void *)&v46[0] = v35;
  *((void *)&v46[0] + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v48) < 0) {
    operator delete(*((void **)&v47 + 1));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1B3EA8520](v50);
  std::__tree<std::string>::destroy((uint64_t)&v51, v52);
  std::string __s = (char *)&v54;
  std::vector<std::set<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s);
}

void sub_1B213FFE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  std::unique_ptr<std::vector<quasar::tennessee::ImmutableVector<std::string>>>::reset[abi:ne180100]((void ***)&a24, 0);
  std::unique_ptr<std::vector<quasar::tennessee::ImmutableVector<std::string>>>::reset[abi:ne180100]((void ***)&a69, 0);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a27);
  std::__tree<std::string>::destroy((uint64_t)&a63, (char *)a64);
  STACK[0x300] = (unint64_t)&__p;
  std::vector<std::set<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x300]);
  _Unwind_Resume(a1);
}

void TWordBlockMaker::~TWordBlockMaker(TWordBlockMaker *this)
{
  *(void *)this = &unk_1F0A33D58;
  TAllocator::clear((TWordBlockMaker *)((char *)this + 72));
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F0A33D58;
  TAllocator::clear((TWordBlockMaker *)((char *)this + 72));
  JUMPOUT(0x1B3EA8670);
}

uint64_t quasar::tennessee::nashville::FormatToken(uint64_t result, char *__s, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = result;
  LODWORD(v7) = 0;
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v33 = (uint64_t)(a3 + 5);
  uint64_t v8 = MEMORY[0x1E4F14390];
  int v9 = "{wordname}";
  int v10 = "{text}";
  while (1)
  {
    while (1)
    {
      int v11 = *__s;
      if (v11 != 58) {
        break;
      }
      std::string v14 = __s + 1;
      double result = atoi(__s + 1);
      do
      {
        std::string __s = v14;
        int v15 = *v14;
        if (v15 < 0) {
          break;
        }
        ++v14;
      }
      while ((*(_DWORD *)(v8 + 4 * v15 + 60) & 0x400) != 0);
      unint64_t v7 = (result + v7);
      while (1)
      {
        unint64_t v16 = *(void *)(v6 + 16);
        if (v16 >= v7) {
          break;
        }
        __str[0] = 32;
        double result = TBuffer<char>::insert(v6, v16, __str, 1uLL);
      }
    }
    if (v11 != 123) {
      break;
    }
    int v12 = strchr(__s, 125);
    if (v12)
    {
      size_t v13 = v12 - __s + 1;
      if (!strncmp(__s, v9, v13))
      {
        double result = tildeEscape(v33, v6);
        goto LABEL_57;
      }
      if (!strncmp(__s, v10, v13))
      {
        std::string::size_type v17 = v10;
        int v18 = v9;
        *(void *)__str = v38;
        long long v37 = xmmword_1B25607E0;
        char v39 = 1;
        uint64_t v20 = a3[2];
        int v19 = a3[3];
        TBuffer<char>::resize((uint64_t)__str, 0);
        TBuffer<char>::insert((uint64_t)__str, 0, (char *)(a4 + v20), (v19 - v20));
        if (*((void *)&v37 + 1) >= (unint64_t)v37)
        {
          if (v39)
          {
            char v35 = 0;
            TBuffer<char>::insert((uint64_t)__str, *((unint64_t *)&v37 + 1), &v35, 1uLL);
            --*((void *)&v37 + 1);
          }
          else if ((void)v37)
          {
            *(unsigned char *)(v37 + *(void *)__str - 1) = 0;
          }
        }
        else
        {
          *(unsigned char *)(*(void *)__str + *((void *)&v37 + std::__tree<int>::destroy((uint64_t)this, *((void **)this + 1)) = 0;
        }
        double result = slashEscape(*(uint64_t *)__str, v6);
        if (v39)
        {
          double result = *(void *)__str;
          if (*(unsigned char **)__str != v38)
          {
            if (*(void *)__str) {
              double result = MEMORY[0x1B3EA8630]();
            }
          }
        }
        int v9 = v18;
        int v10 = v17;
      }
      else
      {
        if (!strncmp(__s, "{text_start_index}", v13))
        {
          uint64_t v21 = (int)a3[2];
          if (v21 == -1) {
            uint64_t v22 = -1;
          }
          else {
            uint64_t v22 = v21 + a5;
          }
          snprintf(__str, 0x40uLL, "%lli", v22);
          uint64_t v23 = 0;
          unint64_t v24 = *(void *)(v6 + 16);
          while (__str[v23++])
            ;
          goto LABEL_34;
        }
        if (!strncmp(__s, "{text_end_index}", v13))
        {
          uint64_t v28 = (int)a3[3];
          if (v28 == -1) {
            uint64_t v29 = -1;
          }
          else {
            uint64_t v29 = v28 + a5;
          }
          snprintf(__str, 0x40uLL, "%lli", v29);
          uint64_t v23 = 0;
          unint64_t v24 = *(void *)(v6 + 16);
          while (__str[v23++])
            ;
LABEL_34:
          double result = TBuffer<char>::insert(v6, v24, __str, v23 - 1);
          goto LABEL_57;
        }
        if (!strncmp(__s, "{origin_start}", v13) || !strncmp(__s, "{origin_end}", v13))
        {
          __str[0] = 60;
          TBuffer<char>::insert(v6, *(void *)(v6 + 16), __str, 1uLL);
          if (!strncmp(__s, "{origin_end}", v13))
          {
            __str[0] = 47;
            TBuffer<char>::insert(v6, *(void *)(v6 + 16), __str, 1uLL);
          }
          int v26 = a3[1];
          if ((v26 & 0x40) != 0)
          {
            double result = TBuffer<char>::insert(v6, *(void *)(v6 + 16), "voc>", 4uLL);
          }
          else if ((v26 & 0x10) != 0)
          {
            double result = TBuffer<char>::insert(v6, *(void *)(v6 + 16), "junk>", 5uLL);
          }
          else
          {
            unint64_t v27 = *(void *)(v6 + 16);
            if ((v26 & 0x20) != 0) {
              double result = TBuffer<char>::insert(v6, v27, "debug>", 6uLL);
            }
            else {
              double result = TBuffer<char>::insert(v6, v27, "oov>", 4uLL);
            }
          }
        }
        else
        {
          double result = strncmp(__s, "{alt_start}", v13);
          if (result)
          {
            double result = strncmp(__s, "{alt_end}", v13);
            if (result)
            {
              double result = strncmp(__s, "{seq_start}", v13);
              if (result)
              {
                double result = strncmp(__s, "{seq_end}", v13);
                if (result)
                {
                  __str[0] = 123;
                  double result = TBuffer<char>::insert(v6, *(void *)(v6 + 16), __str, 1uLL);
                  size_t v13 = 1;
                }
                else if ((a3[1] & 8) != 0)
                {
                  double result = TBuffer<char>::insert(v6, *(void *)(v6 + 16), "</seq>", 6uLL);
                }
              }
              else if ((a3[1] & 4) != 0)
              {
                double result = TBuffer<char>::insert(v6, *(void *)(v6 + 16), "<seq>", 5uLL);
              }
            }
            else if ((a3[1] & 2) != 0)
            {
              double result = TBuffer<char>::insert(v6, *(void *)(v6 + 16), "</alt>", 6uLL);
            }
          }
          else if (a3[1])
          {
            double result = TBuffer<char>::insert(v6, *(void *)(v6 + 16), "<alt>", 5uLL);
          }
        }
      }
LABEL_57:
      __s += v13;
    }
    else
    {
      __str[0] = 123;
      double result = TBuffer<char>::insert(v6, *(void *)(v6 + 16), __str, 1uLL);
LABEL_25:
      ++__s;
    }
  }
  if (*__s)
  {
    __str[0] = *__s;
    double result = TBuffer<char>::insert(v6, *(void *)(v6 + 16), __str, 1uLL);
    goto LABEL_25;
  }
  return result;
}

void sub_1B21407F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  if (a54) {
    quasar::tennessee::nashville::FormatToken(&a19, a16);
  }
  _Unwind_Resume(exception_object);
}

std::string *quasar::tennessee::nashville::ConvertToken(std::string *result, int a2, int a3)
{
  uint64_t v5 = result;
  char v6 = HIBYTE(result->__r_.__value_.__r.__words[2]);
  if (v6 >= 0) {
    uint64_t size = HIBYTE(result->__r_.__value_.__r.__words[2]);
  }
  else {
    uint64_t size = result->__r_.__value_.__l.__size_;
  }
  if (v6 >= 0) {
    uint64_t v8 = result;
  }
  else {
    uint64_t v8 = (std::string *)result->__r_.__value_.__r.__words[0];
  }
  int v9 = (std::string *)((char *)v8 + size);
  if (size > 5)
  {
    uint64_t v10 = size;
    double result = v8;
    do
    {
      double result = (std::string *)memchr(result, 60, v10 - 5);
      if (!result) {
        break;
      }
      if (LODWORD(result->__r_.__value_.__l.__data_) == 1853188668
        && WORD2(result->__r_.__value_.__r.__words[0]) == 15979)
      {
        if (result == v9 || (char *)result - (char *)v8 == -1) {
          break;
        }
        int v12 = "<JUNK>";
LABEL_19:
        double result = (std::string *)MEMORY[0x1B3EA7B20](v5, v12);
        goto LABEL_62;
      }
      double result = (std::string *)((char *)result + 1);
      uint64_t v10 = (char *)v9 - (char *)result;
    }
    while ((char *)v9 - (char *)result > 5);
  }
  if (size >= 5)
  {
    uint64_t v13 = size;
    std::string v14 = v8;
    do
    {
      int v15 = (std::string *)memchr(v14, 60, v13 - 4);
      if (!v15) {
        break;
      }
      if (LODWORD(v15->__r_.__value_.__l.__data_) == 1668249148 && v15->__r_.__value_.__s.__data_[4] == 62)
      {
        if (v15 != v9 && (char *)v15 - (char *)v8 != -1)
        {
          double result = std::string::erase(v5, (char *)v15 - (char *)v8, 5uLL);
          goto LABEL_62;
        }
        break;
      }
      std::string v14 = (std::string *)((char *)&v15->__r_.__value_.__l.__data_ + 1);
      uint64_t v13 = (char *)v9 - (char *)v14;
    }
    while ((char *)v9 - (char *)v14 >= 5);
    double result = v8;
    do
    {
      double result = (std::string *)memchr(result, 60, size - 4);
      if (!result) {
        break;
      }
      if (LODWORD(result->__r_.__value_.__l.__data_) == 1987014460 && result->__r_.__value_.__s.__data_[4] == 62)
      {
        if (result != v9 && (char *)result - (char *)v8 != -1)
        {
          double result = std::string::erase(v5, (char *)result - (char *)v8, 5uLL);
          if (a2)
          {
            uint64_t v18 = HIBYTE(v5->__r_.__value_.__r.__words[2]);
            BOOL v19 = (v18 & 0x80u) != 0;
            if ((v18 & 0x80u) != 0) {
              uint64_t v18 = v5->__r_.__value_.__l.__size_;
            }
            if (v19) {
              uint64_t v20 = (std::string *)v5->__r_.__value_.__r.__words[0];
            }
            else {
              uint64_t v20 = v5;
            }
            if (v18 >= 9)
            {
              uint64_t v21 = (std::string *)((char *)v20 + v18);
              uint64_t v22 = v20;
              do
              {
                double result = (std::string *)memchr(v22, 70, v18 - 8);
                if (!result) {
                  break;
                }
                if (result->__r_.__value_.__r.__words[0] == 0x4D414E5453524946
                  && result->__r_.__value_.__s.__data_[8] == 69)
                {
                  if (result == v21 || (char *)result - (char *)v20 == -1) {
                    break;
                  }
                  goto LABEL_62;
                }
                uint64_t v22 = (std::string *)((char *)&result->__r_.__value_.__l.__data_ + 1);
                uint64_t v18 = (char *)v21 - (char *)v22;
              }
              while ((char *)v21 - (char *)v22 >= 9);
            }
            double result = (std::string *)std::string::find[abi:ne180100]((uint64_t *)v5, "MIDDLENAME", 0);
            if (result == (std::string *)-1)
            {
              double result = (std::string *)std::string::find[abi:ne180100]((uint64_t *)v5, "LASTNAME", 0);
              if (result == (std::string *)-1)
              {
                double result = (std::string *)std::string::find[abi:ne180100]((uint64_t *)v5, "LME", 0);
                if (result == (std::string *)-1)
                {
                  int v12 = "<UNK>";
                  goto LABEL_19;
                }
              }
            }
          }
        }
        break;
      }
      double result = (std::string *)((char *)result + 1);
      uint64_t size = (char *)v9 - (char *)result;
    }
    while ((char *)v9 - (char *)result >= 5);
  }
LABEL_62:
  if (a3)
  {
    std::string::size_type v24 = HIBYTE(v5->__r_.__value_.__r.__words[2]);
    char v25 = v24;
    std::string::size_type v26 = v5->__r_.__value_.__l.__size_;
    if ((v24 & 0x80u) == 0) {
      uint64_t v27 = HIBYTE(v5->__r_.__value_.__r.__words[2]);
    }
    else {
      uint64_t v27 = v5->__r_.__value_.__l.__size_;
    }
    if ((v24 & 0x80u) == 0) {
      uint64_t v28 = v5;
    }
    else {
      uint64_t v28 = (std::string *)v5->__r_.__value_.__r.__words[0];
    }
    uint64_t v29 = (std::string *)((char *)v28 + v27);
    if (v27 >= 1)
    {
      size_t v30 = v27;
      long long v31 = v28;
      do
      {
        uint64_t v32 = (std::string *)memchr(v31, 92, v30);
        if (!v32) {
          break;
        }
        if (v32->__r_.__value_.__s.__data_[0] == 92) {
          goto LABEL_75;
        }
        long long v31 = (std::string *)((char *)&v32->__r_.__value_.__l.__data_ + 1);
        size_t v30 = (char *)v29 - (char *)v31;
      }
      while ((char *)v29 - (char *)v31 > 0);
    }
    uint64_t v32 = (std::string *)((char *)v28 + v27);
LABEL_75:
    if (v32 == v29) {
      std::string::size_type v33 = -1;
    }
    else {
      std::string::size_type v33 = (char *)v32 - (char *)v28;
    }
    double result = (std::string *)((char *)&v28->__r_.__value_.__l.__data_ + v33 + 1);
    int64_t v34 = (char *)v29 - (char *)result;
    if (v27 >= v33 + 1 && v34 >= 1)
    {
      do
      {
        double result = (std::string *)memchr(result, 92, v34);
        if (!result) {
          break;
        }
        if (result->__r_.__value_.__s.__data_[0] == 92)
        {
          if (result != v29 && (char *)result - (char *)v28 != -1)
          {
            double result = std::string::erase(v5, (char *)result - (char *)v28, 0xFFFFFFFFFFFFFFFFLL);
            std::string::size_type v24 = HIBYTE(v5->__r_.__value_.__r.__words[2]);
            std::string::size_type v26 = v5->__r_.__value_.__l.__size_;
            char v25 = HIBYTE(v5->__r_.__value_.__r.__words[2]);
          }
          break;
        }
        double result = (std::string *)((char *)result + 1);
        int64_t v34 = (char *)v29 - (char *)result;
      }
      while ((char *)v29 - (char *)result >= 1);
    }
    if (v25 >= 0) {
      std::string::size_type v36 = v24;
    }
    else {
      std::string::size_type v36 = v26;
    }
    if (v33 == v36 - 1)
    {
      return std::string::erase(v5, v33, 0xFFFFFFFFFFFFFFFFLL);
    }
  }
  return result;
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::swap[abi:ne180100](uint64_t *a1, void *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  a1[1] = a2[1];
  a2[1] = v4;
  char v6 = (std::ios_base *)((char *)a1 + *(void *)(v5 - 24));
  unint64_t v7 = (std::ios_base *)((char *)a2 + *(void *)(*a2 - 24));
  std::ios_base::swap(v6, v7);
  uint64_t v8 = v6[1].__vftable;
  v6[1].__vftable = v7[1].__vftable;
  v7[1].__vftable = v8;
  LODWORD(v8) = v6[1].__fmtflags_;
  v6[1].__fmtflags_ = v7[1].__fmtflags_;
  v7[1].__fmtflags_ = v8;
  return MEMORY[0x1F417E9A0](a1 + 3, a2 + 3);
}

unint64_t std::string::find[abi:ne180100](uint64_t *a1, char *__s, unint64_t a3)
{
  uint64_t v5 = (uint64_t)a1;
  if (*((char *)a1 + 23) < 0)
  {
    uint64_t v5 = *a1;
    unint64_t v6 = a1[1];
  }
  else
  {
    unint64_t v6 = *((unsigned __int8 *)a1 + 23);
  }
  size_t v7 = strlen(__s);
  if (v6 < a3) {
    return -1;
  }
  int64_t v8 = v7;
  if (v7)
  {
    int v9 = (void *)(v5 + a3);
    uint64_t v10 = (char *)(v5 + v6);
    int64_t v11 = v6 - a3;
    if ((uint64_t)(v6 - a3) >= v8)
    {
      int v14 = *__s;
      do
      {
        uint64_t v15 = v11 - v8;
        if (v15 == -1) {
          break;
        }
        unint64_t v16 = (char *)memchr(v9, v14, v15 + 1);
        if (!v16) {
          break;
        }
        int v12 = v16;
        if (!memcmp(v16, __s, v8)) {
          goto LABEL_9;
        }
        int v9 = v12 + 1;
        int64_t v11 = v10 - (v12 + 1);
      }
      while (v11 >= v8);
    }
    int v12 = v10;
LABEL_9:
    if (v12 == v10) {
      return -1;
    }
    else {
      return (unint64_t)&v12[-v5];
    }
  }
  return a3;
}

void std::vector<quasar::tennessee::ImmutableVector<std::string>>::__emplace_back_slow_path<std::vector<std::string> &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 <= 0xAAAAAAAAAAAAAAALL)
  {
    uint64_t v7 = (uint64_t)(a1 + 2);
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
    if (2 * v8 > v5) {
      unint64_t v5 = 2 * v8;
    }
    if (v8 >= 0x555555555555555) {
      unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v9 = v5;
    }
    uint64_t v15 = a1 + 2;
    if (v9) {
      uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
    }
    else {
      uint64_t v10 = 0;
    }
    int64_t v11 = v10;
    int v12 = &v10[24 * v4];
    uint64_t v13 = v12;
    int v14 = &v10[24 * v9];
    quasar::tennessee::ImmutableVector<std::string>::ImmutableVector<std::__wrap_iter<std::string const*>,true>(v12, *a2, a2[1]);
  }
  std::vector<int>::__throw_length_error[abi:ne180100]();
}

void sub_1B2140E5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::tennessee::ImmutableVector<std::string>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::tennessee::ImmutableVector<std::string>::ImmutableVector<std::__wrap_iter<std::string const*>,true>(void *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = (a3 - a2) / 24;
  *a1 = &unk_1F0A599D8;
  a1[1] = v3;
  a1[2] = 0;
  is_mul_ok(v3, 0x18uLL);
  operator new[]();
}

void quasar::tennessee::ImmutableVector<std::string>::~ImmutableVector(void *a1)
{
  quasar::tennessee::ImmutableVector<std::string>::~ImmutableVector(a1);
  JUMPOUT(0x1B3EA8670);
}

void *quasar::tennessee::ImmutableVector<std::string>::~ImmutableVector(void *a1)
{
  *a1 = &unk_1F0A599D8;
  uint64_t v2 = a1[2];
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 - 8);
    if (v3)
    {
      uint64_t v4 = 24 * v3;
      do
      {
        if (*(char *)(v2 + v4 - 1) < 0) {
          operator delete(*(void **)(v2 + v4 - 24));
        }
        v4 -= 24;
      }
      while (v4);
    }
    MEMORY[0x1B3EA8630](v2 - 16, 0x1012C80EC159624);
  }
  return a1;
}

uint64_t std::vector<quasar::tennessee::ImmutableVector<std::string>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::tennessee::ImmutableVector<std::string>>,std::reverse_iterator<quasar::tennessee::ImmutableVector<std::string>*>,std::reverse_iterator<quasar::tennessee::ImmutableVector<std::string>*>,std::reverse_iterator<quasar::tennessee::ImmutableVector<std::string>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::tennessee::ImmutableVector<std::string>>,std::reverse_iterator<quasar::tennessee::ImmutableVector<std::string>*>,std::reverse_iterator<quasar::tennessee::ImmutableVector<std::string>*>,std::reverse_iterator<quasar::tennessee::ImmutableVector<std::string>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5) {
    quasar::tennessee::ImmutableVector<std::string>::ImmutableVector((void *)(a7 - 24), a3 - 24);
  }
  return a6;
}

void quasar::tennessee::ImmutableVector<std::string>::ImmutableVector(void *a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 8);
  *a1 = &unk_1F0A599D8;
  a1[1] = v2;
  is_mul_ok(v2, 0x18uLL);
  operator new[]();
}

uint64_t std::__split_buffer<quasar::tennessee::ImmutableVector<std::string>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = *(void (***)(void))(i - 24);
    *(void *)(a1 + 16) = i - 24;
    (*v4)();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::vector<std::set<std::string>>::__push_back_slow_path<std::set<std::string> const&>(uint64_t *a1, const void ***a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  std::string::size_type v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v13 = v10;
  int v14 = (uint64_t *)&v10[24 * v4];
  unint64_t v16 = &v10[24 * v9];
  std::set<std::string>::set[abi:ne180100](v14, a2);
  uint64_t v15 = v14 + 3;
  std::vector<std::set<std::string>>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<std::set<std::string>>::~__split_buffer(&v13);
  return v11;
}

void sub_1B2141394(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::set<std::string>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::vector<quasar::tennessee::ImmutableVector<std::string>>::__emplace_back_slow_path<std::initializer_list<std::string>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 <= 0xAAAAAAAAAAAAAAALL)
  {
    uint64_t v7 = (uint64_t)(a1 + 2);
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
    if (2 * v8 > v5) {
      unint64_t v5 = 2 * v8;
    }
    if (v8 >= 0x555555555555555) {
      unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v9 = v5;
    }
    uint64_t v15 = a1 + 2;
    if (v9) {
      uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v11 = v10;
    int v12 = &v10[24 * v4];
    uint64_t v13 = v12;
    int v14 = &v10[24 * v9];
    quasar::tennessee::ImmutableVector<std::string>::ImmutableVector<std::__wrap_iter<std::string const*>,true>(v12, *a2, *a2 + 24 * a2[1]);
  }
  std::vector<int>::__throw_length_error[abi:ne180100]();
}

void sub_1B21414A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::tennessee::ImmutableVector<std::string>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::vector<quasar::tennessee::ImmutableVector<std::string>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v4 = (void *)a1[1];
    unint64_t v5 = &v4[3 * a2];
    uint64_t v6 = v4;
    do
    {
      v6[1] = 0;
      _OWORD v6[2] = 0;
      *uint64_t v6 = &unk_1F0A599D8;
      v6 += 3;
      v4 += 3;
    }
    while (v6 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_1B2141540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void ***std::unique_ptr<std::vector<quasar::tennessee::ImmutableVector<std::string>>>::reset[abi:ne180100](void ***result, void **a2)
{
  unint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    uint64_t v3 = v2;
    std::vector<quasar::tennessee::ImmutableVector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
    return (void ***)MEMORY[0x1B3EA8670](v2, 0x20C40960023A9);
  }
  return result;
}

void std::vector<quasar::tennessee::ImmutableVector<std::string>>::__emplace_back_slow_path<quasar::tennessee::ImmutableVector<std::string> const&,std::string const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 <= 0xAAAAAAAAAAAAAAALL)
  {
    uint64_t v7 = (uint64_t)(a1 + 2);
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
    if (2 * v8 > v5) {
      unint64_t v5 = 2 * v8;
    }
    if (v8 >= 0x555555555555555) {
      unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v9 = v5;
    }
    uint64_t v15 = a1 + 2;
    if (v9) {
      uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v11 = v10;
    int v12 = &v10[24 * v4];
    uint64_t v13 = (uint64_t)v12;
    int v14 = &v10[24 * v9];
    quasar::tennessee::ImmutableVector<std::string>::ImmutableVector((uint64_t)v12, a2);
  }
  std::vector<int>::__throw_length_error[abi:ne180100]();
}

void sub_1B21416A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::tennessee::ImmutableVector<std::string>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::tennessee::ImmutableVector<std::string>::ImmutableVector(uint64_t a1, uint64_t a2)
{
}

void sub_1B21417D0(_Unwind_Exception *a1)
{
  quasar::tennessee::ImmutableVector<std::string>::~ImmutableVector(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::tennessee::ImmutableVector<std::string>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(void **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    void v16[4] = result;
    uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(result, v12);
    int v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    void v16[3] = &v13[24 * v15];
    *(void *)int v14 = &unk_1F0A599D8;
    *((void *)v14 + 1) = *(void *)(a2 + 8);
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<quasar::tennessee::ImmutableVector<std::string>>::__swap_out_circular_buffer(a1, v16);
    unint64_t v8 = (void *)a1[1];
    uint64_t result = std::__split_buffer<quasar::tennessee::ImmutableVector<std::string>>::~__split_buffer((uint64_t)v16);
  }
  else
  {
    *uint64_t v7 = &unk_1F0A599D8;
    v7[1] = *(void *)(a2 + 8);
    void v7[2] = *(void *)(a2 + 16);
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    unint64_t v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_1B2141930(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::tennessee::ImmutableVector<std::string>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::SymbolMap::ReadFstText<std::shared_ptr<fst::SymbolTable>>(uint64_t a1@<X0>, void *a2@<X8>)
{
  fst::SymbolTableTextOptions::SymbolTableTextOptions((fst::SymbolTableTextOptions *)&v5);
  uint64_t Text = fst::SymbolTable::ReadText(a1);
  std::shared_ptr<fst::SymbolTable>::shared_ptr[abi:ne180100]<fst::SymbolTable,void>(a2, Text);
}

void sub_1B21419A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::SymbolMap::ReadFstBinary<std::shared_ptr<fst::SymbolTable>>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = fst::SymbolTable::Read(a1);
  std::shared_ptr<fst::SymbolTable>::shared_ptr[abi:ne180100]<fst::SymbolTable,void>(a2, v3);
}

uint64_t fst::SymbolTable::Read(uint64_t a1)
{
  v15[19] = *MEMORY[0x1E4F143B8];
  std::ifstream::basic_ifstream(v13);
  if (*(_DWORD *)&v14[*(void *)(v13[0] - 24) + 16])
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    unint64_t v2 = fst::LogMessage::LogMessage((fst *)&v12, (uint64_t)__p);
    uint64_t v3 = (void *)fst::cerr(v2);
    unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"SymbolTable::Read: Can't open file ", 35);
    int v5 = *(char *)(a1 + 23);
    if (v5 >= 0) {
      uint64_t v6 = a1;
    }
    else {
      uint64_t v6 = *(void *)a1;
    }
    if (v5 >= 0) {
      uint64_t v7 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      uint64_t v7 = *(void *)(a1 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v6, v7);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v12);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = fst::SymbolTable::Read(v13, (const std::string *)a1);
  }
  v13[0] = *MEMORY[0x1E4FBA3F8];
  *(uint64_t *)((char *)v13 + *(void *)(v13[0] - 2std::__tree<int>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x1E4FBA3F8] + 24);
  MEMORY[0x1B3EA7CF0](v14);
  std::istream::~istream();
  MEMORY[0x1B3EA8520](v15);
  return v8;
}

void sub_1B2141BC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, uint64_t a20)
{
}

uint64_t quasar::SymbolMap::ReadQuasarBinary<std::shared_ptr<fst::SymbolTable>>@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  v40[19] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = MEMORY[0x1E4FBA460] + 64;
  v40[0] = MEMORY[0x1E4FBA460] + 64;
  int v5 = (void *)MEMORY[0x1E4FBA3F8];
  uint64_t v6 = *(void *)(MEMORY[0x1E4FBA3F8] + 16);
  v38[0] = *(void *)(MEMORY[0x1E4FBA3F8] + 8);
  *(void *)((char *)v38 + *(void *)(v38[0] - 2std::__tree<int>::destroy((uint64_t)this + 24, *((void **)this + 4)) = v6;
  v38[1] = 0;
  uint64_t v7 = (std::ios_base *)((char *)v38 + *(void *)(v38[0] - 24));
  std::ios_base::init(v7, v39);
  uint64_t v8 = MEMORY[0x1E4FBA460] + 24;
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  v38[0] = v8;
  v40[0] = v4;
  MEMORY[0x1B3EA7CE0](v39);
  std::ifstream::open();
  unint64_t v9 = (void *)std::istream::read();
  if ((*((unsigned char *)v9 + *(void *)(*v9 - 24) + 32) & 5) != 0)
  {
    if (quasar::gLogLevel >= 1)
    {
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v19 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Could not read magic header", 27);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v19);
    }
  }
  else if (v36 == 0x5F4D59535F525351 && v37 == 808464470)
  {
    int v17 = 0;
    char v11 = (void *)std::istream::read();
    if ((*((unsigned char *)v11 + *(void *)(*v11 - 24) + 32) & 5) == 0)
    {
      fst::FstReadOptions::FstReadOptions(__p, a1, 0, 0, 0);
      int v16 = 2;
      std::istream::tellg();
      std::istream::seekg();
      std::istream::tellg();
      uint64_t v13 = v27;
      uint64_t v14 = v18;
      std::istream::seekg();
      fst::MappedFile::Map((uint64_t)v38, (uint64_t)__p, (fst::MappedFile *)(v13 - v14));
    }
    if (quasar::gLogLevel >= 1)
    {
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v19 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Could not read number of words", 30);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v19);
    }
  }
  else if (quasar::gLogLevel >= 1)
  {
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v19 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Magic header was wrong", 22);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v19);
  }
  *a2 = 0;
  a2[1] = 0;
  v38[0] = *v5;
  *(void *)((char *)v38 + *(void *)(v38[0] - 2std::__tree<int>::destroy((uint64_t)this + 24, *((void **)this + 4)) = v5[3];
  MEMORY[0x1B3EA7CF0](v39);
  std::istream::~istream();
  return MEMORY[0x1B3EA8520](v40);
}

{
  return quasar::SymbolMap::ReadQuasarBinary<std::shared_ptr<fst::SymbolTable>>(a1, a2);
}

void sub_1B2142200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (a20 < 0) {
    operator delete(__p);
  }
  std::ifstream::~ifstream(&STACK[0x228]);
  _Unwind_Resume(a1);
}

uint64_t quasar::SymbolMap::ReadAndSortQuasarBinary<std::shared_ptr<fst::SymbolTable>>@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return quasar::SymbolMap::ReadQuasarBinary<std::shared_ptr<fst::SymbolTable>>(a1, a2);
}

void quasar::SymbolMap::ReadMarisa<std::shared_ptr<fst::SymbolTable>>(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = MEMORY[0x1E4FBA460] + 64;
  uint64_t v12 = MEMORY[0x1E4FBA460] + 64;
  uint64_t v3 = *(void *)(MEMORY[0x1E4FBA3F8] + 16);
  v10[0] = *(void *)(MEMORY[0x1E4FBA3F8] + 8);
  *(void *)((char *)v10 + *(void *)(v10[0] - 2std::__tree<int>::destroy((uint64_t)this + 24, *((void **)this + 4)) = v3;
  v10[1] = 0;
  uint64_t v4 = (std::ios_base *)((char *)v10 + *(void *)(v10[0] - 24));
  std::ios_base::init(v4, v11);
  uint64_t v5 = MEMORY[0x1E4FBA460] + 24;
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v10[0] = v5;
  uint64_t v12 = v2;
  MEMORY[0x1B3EA7CE0](v11);
  std::ifstream::open();
  fst::FstReadOptions::FstReadOptions(__p, a1, 0, 0, 0);
  int v8 = 2;
  std::istream::seekg();
  std::istream::tellg();
  uint64_t v6 = (fst::MappedFile *)v9;
  std::istream::seekg();
  fst::MappedFile::Map((uint64_t)v10, (uint64_t)__p, v6);
}

void sub_1B21426E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a18 < 0) {
    operator delete(__p);
  }
  std::ifstream::~ifstream(&a59);
  _Unwind_Resume(a1);
}

void quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(fst::SymbolTable *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = a3[1];
  uint64_t v4 = *a3;
  uint64_t v5 = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  quasar::SymbolMap::SymbolMapQuasarImpl::SymbolMapQuasarImpl(a1);
}

void sub_1B21429EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a9);
  uint64_t v12 = *v10;
  if (*v10)
  {
    *((void *)v9 + 8) = v12;
    operator delete(v12);
  }
  quasar::SymbolMap::SymbolMapQuasarImpl::~SymbolMapQuasarImpl(v9);
  _Unwind_Resume(a1);
}

void quasar::SymbolMap::SymbolMapQuasarImpl::SymbolMapQuasarImpl(fst::SymbolTable *a1)
{
}

void sub_1B2142BD0(_Unwind_Exception *a1)
{
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v1 + 4);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  fst::SymbolTable::~SymbolTable(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<char const*,int>>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 4)
  {
    if (a2 >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    long long v9 = &v6[16 * v8];
    char v11 = (char *)*a1;
    unint64_t v10 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v10 - 1);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      unint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void quasar::SymbolMap::SymbolMapQuasarImpl::~SymbolMapQuasarImpl(quasar::SymbolMap::SymbolMapQuasarImpl *this)
{
  *(void *)this = &unk_1F0A59738;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  fst::SymbolTable::~SymbolTable(this);
}

{
  uint64_t vars8;

  quasar::SymbolMap::SymbolMapQuasarImpl::~SymbolMapQuasarImpl(this);
  JUMPOUT(0x1B3EA8670);
}

void quasar::SymbolMap::SortedSymbolMapQuasarImpl::~SortedSymbolMapQuasarImpl(quasar::SymbolMap::SortedSymbolMapQuasarImpl *this)
{
  *(void *)this = &unk_1F0A597E0;
  uint64_t v2 = (void *)*((void *)this + 7);
  if (v2)
  {
    *((void *)this + 8) = v2;
    operator delete(v2);
  }
  quasar::SymbolMap::SymbolMapQuasarImpl::~SymbolMapQuasarImpl(this);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F0A597E0;
  uint64_t v2 = (void *)*((void *)this + 7);
  if (v2)
  {
    *((void *)this + 8) = v2;
    operator delete(v2);
  }
  quasar::SymbolMap::SymbolMapQuasarImpl::~SymbolMapQuasarImpl(this);
  JUMPOUT(0x1B3EA8670);
}

void quasar::SymbolMap::SortedSymbolMapQuasarImpl::Copy(quasar::SymbolMap::SortedSymbolMapQuasarImpl *this)
{
}

void sub_1B2142E30(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F1C4048FD5E85);
  _Unwind_Resume(a1);
}

uint64_t quasar::SymbolMap::SymbolMapQuasarImpl::AddSymbol(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1);
  if (result == -1)
  {
    uint64_t v7 = a3 - *(unsigned int *)(a1 + 16);
    fst::SymbolTable::MutateCheck(a1);
    return fst::SymbolTableImpl::AddSymbol(*(void *)(a1 + 8), a2, v7) + *(unsigned int *)(a1 + 16);
  }
  return result;
}

uint64_t quasar::SymbolMap::SymbolMapQuasarImpl::AddSymbol(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1);
  if (result == -1)
  {
    fst::SymbolTable::MutateCheck(a1);
    return fst::SymbolTableImpl::AddSymbol(*(void *)(a1 + 8), a2, *(void *)(*(void *)(a1 + 8) + 24))
         + *(unsigned int *)(a1 + 16);
  }
  return result;
}

void quasar::SymbolMap::SymbolMapQuasarImpl::AddTable(quasar::SymbolMap::SymbolMapQuasarImpl *this, const fst::SymbolTable *a2)
{
  unint64_t v4 = (*(uint64_t (**)(const fst::SymbolTable *))(*(void *)a2 + 120))(a2);
  uint64_t v5 = (*(uint64_t (**)(const fst::SymbolTable *, void))(*(void *)a2 + 128))(a2, 0);
  if (v4)
  {
    uint64_t v6 = v5;
    uint64_t v7 = 0;
    do
    {
      (*(void (**)(void **__return_ptr, const fst::SymbolTable *, uint64_t))(*(void *)a2 + 88))(__p, a2, v6);
      uint64_t v8 = (*(uint64_t (**)(quasar::SymbolMap::SymbolMapQuasarImpl *, void **))(*(void *)this + 96))(this, __p);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
      if (v8 == -1)
      {
        (*(void (**)(void **__return_ptr, const fst::SymbolTable *, uint64_t))(*(void *)a2 + 88))(__p, a2, v6);
        (*(void (**)(quasar::SymbolMap::SymbolMapQuasarImpl *, void **))(*(void *)this + 32))(this, __p);
        if (v10 < 0) {
          operator delete(__p[0]);
        }
      }
      if (++v7 < v4) {
        uint64_t v6 = (*(uint64_t (**)(const fst::SymbolTable *, uint64_t))(*(void *)a2 + 128))(a2, v7);
      }
    }
    while (v4 != v7);
  }
}

void sub_1B2143110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *quasar::SymbolMap::SymbolMapQuasarImpl::Find@<X0>(quasar::SymbolMap::SymbolMapQuasarImpl *this@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = *((unsigned int *)this + 4);
  BOOL v4 = __OFSUB__(a2, v3);
  int64_t v5 = a2 - v3;
  if (v5 < 0 != v4) {
    return std::string::basic_string[abi:ne180100]<0>(a3, (char *)(*((void *)this + 6) + *(unsigned int *)(*((void *)this + 5) + 4 * a2)));
  }
  else {
    return fst::SymbolTableImpl::Find(*((fst::SymbolTableImpl **)this + 1), v5, a3);
  }
}

uint64_t quasar::SymbolMap::SortedSymbolMapQuasarImpl::Find(uint64_t a1, uint64_t *a2)
{
  if (*((char *)a2 + 23) < 0) {
    a2 = (uint64_t *)*a2;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 104))(a1, a2);
}

uint64_t quasar::SymbolMap::SortedSymbolMapQuasarImpl::Find(quasar::SymbolMap::SortedSymbolMapQuasarImpl *this, char *__s2)
{
  uint64_t v4 = 0;
  uint64_t v5 = (*((_DWORD *)this + 4) - 1);
  uint64_t v6 = *((void *)this + 7);
  do
  {
    uint64_t v7 = v5 - v4;
    if (v5 < v4) {
      ++v7;
    }
    uint64_t v8 = v4 + (v7 >> 1);
    int v9 = strcmp(*(const char **)(v6 + 16 * v8), __s2);
    if (!v9) {
      return *(int *)(v6 + 16 * v8 + 8);
    }
    if (v9 >= 0) {
      uint64_t v5 = v8 - 1;
    }
    else {
      uint64_t v4 = v8 + 1;
    }
  }
  while (v4 <= v5);
  uint64_t result = fst::SymbolTableImpl::Find(*((fst::SymbolTableImpl **)this + 1), __s2);
  if (result != -1) {
    result += *((unsigned int *)this + 4);
  }
  return result;
}

uint64_t quasar::SymbolMap::SymbolMapQuasarImpl::AvailableKey(quasar::SymbolMap::SymbolMapQuasarImpl *this)
{
  return *(void *)(*((void *)this + 1) + 24) + *((unsigned int *)this + 4);
}

uint64_t quasar::SymbolMap::SymbolMapQuasarImpl::NumSymbols(quasar::SymbolMap::SymbolMapQuasarImpl *this)
{
  return *((unsigned int *)this + 4)
       + ((uint64_t)(*(void *)(*((void *)this + 1) + 56) - *(void *)(*((void *)this + 1) + 48)) >> 3);
}

uint64_t quasar::SymbolMap::SymbolMapQuasarImpl::GetNthKey(quasar::SymbolMap::SymbolMapQuasarImpl *this, uint64_t a2)
{
  return a2;
}

uint64_t quasar::SymbolMap::SortedSymbolMapQuasarImpl::SupportsEfficientReverseSymbolLookup(quasar::SymbolMap::SortedSymbolMapQuasarImpl *this)
{
  return 1;
}

void quasar::SymbolMap::SymbolMapQuasarImpl::Copy(quasar::SymbolMap::SymbolMapQuasarImpl *this)
{
}

void sub_1B2143300(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F1C404CE4771ALL);
  _Unwind_Resume(a1);
}

uint64_t quasar::SymbolMap::SymbolMapQuasarImpl::Find(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v4 = (const char *)a2;
  }
  else {
    uint64_t v4 = *(const char **)a2;
  }
  uint64_t v5 = *(unsigned int *)(a1 + 16);
  if (v5)
  {
    uint64_t v6 = 0;
    uint64_t v8 = *(void *)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 48);
    while (strcmp((const char *)(v7 + *(unsigned int *)(v8 + 4 * v6)), v4))
    {
      if (v5 == ++v6) {
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    int v9 = *(void **)(a1 + 8);
    uint64_t v10 = fst::internal::DenseSymbolMap::Find(v9 + 5, a2);
    if (v10 == -1) {
      return -1;
    }
    uint64_t v11 = v9[4];
    BOOL v12 = __OFSUB__(v10, v11);
    uint64_t v13 = v10 - v11;
    if (v13 < 0 == v12 && (uint64_t v10 = *(void *)(v9[15] + 8 * v13), v10 == -1)) {
      return -1;
    }
    else {
      return v10 + *(unsigned int *)(a1 + 16);
    }
  }
  return v6;
}

uint64_t quasar::SymbolMap::SymbolMapQuasarImpl::Find(quasar::SymbolMap::SymbolMapQuasarImpl *this, char *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  uint64_t v3 = (*(uint64_t (**)(quasar::SymbolMap::SymbolMapQuasarImpl *, void **))(*(void *)this + 96))(this, __p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  return v3;
}

void sub_1B214345C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::SymbolMap::SymbolMapQuasarImpl::SupportsEfficientReverseSymbolLookup(quasar::SymbolMap::SymbolMapQuasarImpl *this)
{
  return 0;
}

__n128 quasar::SymbolMap::SymbolMapQuasarImpl::SymbolMapQuasarImpl(quasar::SymbolMap::SymbolMapQuasarImpl *this, const quasar::SymbolMap::SymbolMapQuasarImpl *a2)
{
  uint64_t v2 = *((void *)a2 + 1);
  *((void *)this + 1) = v2;
  ++*(_DWORD *)(v2 + 168);
  *(void *)this = &unk_1F0A59738;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  uint64_t v3 = *((void *)a2 + 4);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)this + 4) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)((char *)a2 + 40);
  *(__n128 *)((char *)this + 40) = result;
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &,std::pair<char const*,int>*,false>(uint64_t result, const char **a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v10 = result;
LABEL_2:
  unint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    unint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (uint64_t)a2 - v11;
    unint64_t v15 = (uint64_t)((uint64_t)a2 - v11) >> 4;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          long long v22 = *(a2 - 2);
          long long v23 = *(const char **)v11;
          __n128 result = strcmp(v22, *(const char **)v11);
          if ((result & 0x80000000) != 0)
          {
            *(void *)unint64_t v11 = v22;
            *(a2 - 2) = v23;
            int v24 = *(_DWORD *)(v11 + 8);
            *(_DWORD *)(v11 + 8) = *((_DWORD *)a2 - 2);
            *((_DWORD *)a2 - 2) = v24;
          }
          break;
        case 3uLL:
          __n128 result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &,std::pair<char const*,int>*>(v11, v11 + 16, (uint64_t)(a2 - 2));
          break;
        case 4uLL:
          __n128 result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &,std::pair<char const*,int>*>(v11, v11 + 16, v11 + 32, (uint64_t)(a2 - 2));
          break;
        case 5uLL:
          __n128 result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &,std::pair<char const*,int>*>(v11, v11 + 16, v11 + 32, v11 + 48, (uint64_t)(a2 - 2));
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 383) {
      break;
    }
    if (v13 == 1)
    {
      if ((const char **)v11 != a2)
      {
        return std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &,std::pair<char const*,int>*,std::pair<char const*,int>*>(v11, (uint64_t)a2, (uint64_t)a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    uint64_t v17 = v11 + 16 * (v15 >> 1);
    if ((unint64_t)v14 >= 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &,std::pair<char const*,int>*>(v11, v11 + 16 * (v15 >> 1), (uint64_t)(a2 - 2));
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &,std::pair<char const*,int>*>(v11 + 16, v17 - 16, (uint64_t)(a2 - 4));
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &,std::pair<char const*,int>*>(v11 + 32, v11 + 16 + 16 * v16, (uint64_t)(a2 - 6));
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &,std::pair<char const*,int>*>(v17 - 16, v17, v11 + 16 + 16 * v16);
      uint64_t v18 = *(const char **)v11;
      *(void *)unint64_t v11 = *(void *)v17;
      *(void *)uint64_t v17 = v18;
      LODWORD(v18) = *(_DWORD *)(v11 + 8);
      *(_DWORD *)(v11 + 8) = *(_DWORD *)(v17 + 8);
      *(_DWORD *)(v17 + 8) = v18;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &,std::pair<char const*,int>*>(v11 + 16 * (v15 >> 1), v11, (uint64_t)(a2 - 2));
      if (a5) {
        goto LABEL_14;
      }
    }
    if ((strcmp(*(const char **)(v11 - 16), *(const char **)v11) & 0x80000000) == 0)
    {
      __n128 result = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<char const*,int> *,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &>(v11, (unint64_t)a2);
      unint64_t v11 = result;
      goto LABEL_19;
    }
LABEL_14:
    unint64_t v19 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<char const*,int> *,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &>(v11, a2);
    if ((v20 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &,std::pair<char const*,int>*>(v11, v19);
    unint64_t v11 = v19 + 16;
    __n128 result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &,std::pair<char const*,int>*>(v19 + 16, (uint64_t)a2);
    if (result)
    {
      a4 = -v13;
      a2 = (const char **)v19;
      if (v21) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v21)
    {
LABEL_17:
      __n128 result = std::__introsort<std::_ClassicAlgPolicy,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &,std::pair<char const*,int>*,false>(v10, v19, a3, -v13, a5 & 1);
      unint64_t v11 = v19 + 16;
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &,std::pair<char const*,int>*>(v11, (uint64_t)a2);
  }
  else
  {
    return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &,std::pair<char const*,int>*>(v11, (uint64_t)a2);
  }
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &,std::pair<char const*,int>*>(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result + 16;
    if (result + 16 != a2)
    {
      uint64_t v5 = 0;
      uint64_t v6 = result;
      do
      {
        uint64_t v7 = v4;
        uint64_t v8 = *(const char **)(v6 + 16);
        int v9 = *(const char **)v6;
        __n128 result = strcmp(v8, *(const char **)v6);
        if ((result & 0x80000000) != 0)
        {
          int v10 = *(_DWORD *)(v6 + 24);
          uint64_t v11 = v5;
          while (1)
          {
            uint64_t v12 = v3 + v11;
            *(void *)(v12 + 16) = v9;
            *(_DWORD *)(v12 + 24) = *(_DWORD *)(v3 + v11 + 8);
            if (!v11) {
              break;
            }
            int v9 = *(const char **)(v12 - 16);
            __n128 result = strcmp(v8, v9);
            v11 -= 16;
            if ((result & 0x80000000) == 0)
            {
              uint64_t v13 = v3 + v11 + 16;
              goto LABEL_10;
            }
          }
          uint64_t v13 = v3;
LABEL_10:
          *(void *)uint64_t v13 = v8;
          *(_DWORD *)(v13 + 8) = v10;
        }
        uint64_t v4 = v7 + 16;
        v5 += 16;
        uint64_t v6 = v7;
      }
      while (v7 + 16 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &,std::pair<char const*,int>*>(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result + 16;
    if (result + 16 != a2)
    {
      uint64_t v5 = (_DWORD *)(result + 24);
      do
      {
        uint64_t v6 = v4;
        uint64_t v7 = *(const char **)(v3 + 16);
        uint64_t v8 = *(const char **)v3;
        __n128 result = strcmp(v7, *(const char **)v3);
        if ((result & 0x80000000) != 0)
        {
          int v9 = *(_DWORD *)(v3 + 24);
          int v10 = v5;
          do
          {
            uint64_t v11 = v10;
            *((void *)v10 - 1) = v8;
            int v12 = *(v10 - 4);
            v10 -= 4;
            *uint64_t v11 = v12;
            uint64_t v8 = (const char *)*((void *)v11 - 5);
            __n128 result = strcmp(v7, v8);
          }
          while ((result & 0x80000000) != 0);
          *((void *)v10 - 1) = v7;
          *int v10 = v9;
        }
        uint64_t v4 = v6 + 16;
        v5 += 4;
        uint64_t v3 = v6;
      }
      while (v6 + 16 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &,std::pair<char const*,int>*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(const char **)a2;
  uint64_t v7 = *(const char **)a1;
  int v8 = strcmp(*(const char **)a2, *(const char **)a1);
  int v9 = *(const char **)a3;
  int v10 = strcmp(*(const char **)a3, v6);
  if (v8 < 0)
  {
    if (v10 < 0)
    {
      *(void *)a1 = v9;
      *(void *)a3 = v7;
      int v11 = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(a3 + 8) = v11;
      return 1;
    }
    *(void *)a1 = v6;
    *(void *)a2 = v7;
    int v16 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 8) = v16;
    uint64_t v17 = *(const char **)a3;
    if ((strcmp(*(const char **)a3, v7) & 0x80000000) == 0) {
      return 1;
    }
    *(void *)a2 = v17;
    *(void *)a3 = v7;
    *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
    *(_DWORD *)(a3 + 8) = v16;
    return 2;
  }
  if (v10 < 0)
  {
    *(void *)a2 = v9;
    *(void *)a3 = v6;
    int v12 = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
    *(_DWORD *)(a3 + 8) = v12;
    uint64_t v13 = *(const char **)a2;
    uint64_t v14 = *(const char **)a1;
    if ((strcmp(*(const char **)a2, *(const char **)a1) & 0x80000000) == 0) {
      return 1;
    }
    *(void *)a1 = v13;
    *(void *)a2 = v14;
    int v15 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 8) = v15;
    return 2;
  }
  return 0;
}

unint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<char const*,int> *,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &>(unint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v4 = *(const char **)a1;
  int v5 = *(_DWORD *)(a1 + 8);
  if (strcmp(*(const char **)a1, *(const char **)(a2 - 16)) < 0)
  {
    unint64_t v6 = a1;
    do
    {
      uint64_t v7 = *(const char **)(v6 + 16);
      v6 += 16;
    }
    while ((strcmp(v4, v7) & 0x80000000) == 0);
  }
  else
  {
    unint64_t v8 = a1 + 16;
    do
    {
      unint64_t v6 = v8;
      if (v8 >= v2) {
        break;
      }
      v8 += 16;
    }
    while ((strcmp(v4, *(const char **)v6) & 0x80000000) == 0);
  }
  if (v6 < v2)
  {
    do
    {
      int v9 = *(const char **)(v2 - 16);
      v2 -= 16;
    }
    while (strcmp(v4, v9) < 0);
  }
  if (v6 < v2)
  {
    int v10 = *(const char **)v6;
    int v11 = *(const char **)v2;
    do
    {
      *(void *)unint64_t v6 = v11;
      *(void *)unint64_t v2 = v10;
      int v12 = *(_DWORD *)(v6 + 8);
      *(_DWORD *)(v6 + 8) = *(_DWORD *)(v2 + 8);
      *(_DWORD *)(v2 + 8) = v12;
      do
      {
        uint64_t v13 = *(const char **)(v6 + 16);
        v6 += 16;
        int v10 = v13;
      }
      while ((strcmp(v4, v13) & 0x80000000) == 0);
      do
      {
        uint64_t v14 = *(const char **)(v2 - 16);
        v2 -= 16;
        int v11 = v14;
      }
      while (strcmp(v4, v14) < 0);
    }
    while (v6 < v2);
  }
  if (v6 - 16 != a1)
  {
    *(void *)a1 = *(void *)(v6 - 16);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(v6 - 8);
  }
  *(void *)(v6 - 16) = v4;
  *(_DWORD *)(v6 - 8) = v5;
  return v6;
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<char const*,int> *,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &>(uint64_t a1, const char **a2)
{
  uint64_t v4 = 0;
  int v5 = *(const char **)a1;
  int v6 = *(_DWORD *)(a1 + 8);
  do
  {
    uint64_t v7 = *(const char **)(a1 + v4 + 16);
    v4 += 16;
  }
  while (strcmp(v7, v5) < 0);
  unint64_t v8 = a1 + v4;
  if (v4 == 16)
  {
    do
    {
      if (v8 >= (unint64_t)a2) {
        break;
      }
      int v10 = *(a2 - 2);
      a2 -= 2;
    }
    while ((strcmp(v10, v5) & 0x80000000) == 0);
  }
  else
  {
    do
    {
      int v9 = *(a2 - 2);
      a2 -= 2;
    }
    while ((strcmp(v9, v5) & 0x80000000) == 0);
  }
  if (v8 >= (unint64_t)a2)
  {
    unint64_t v12 = a1 + v4;
  }
  else
  {
    int v11 = *a2;
    unint64_t v12 = v8;
    uint64_t v13 = a2;
    do
    {
      *(void *)unint64_t v12 = v11;
      *uint64_t v13 = v7;
      int v14 = *(_DWORD *)(v12 + 8);
      *(_DWORD *)(v12 + 8) = *((_DWORD *)v13 + 2);
      *((_DWORD *)v13 + 2) = v14;
      do
      {
        int v15 = *(const char **)(v12 + 16);
        v12 += 16;
        uint64_t v7 = v15;
      }
      while (strcmp(v15, v5) < 0);
      do
      {
        int v16 = *(v13 - 2);
        v13 -= 2;
        int v11 = v16;
      }
      while ((strcmp(v16, v5) & 0x80000000) == 0);
    }
    while (v12 < (unint64_t)v13);
  }
  unint64_t result = v12 - 16;
  if (v12 - 16 != a1)
  {
    *(void *)a1 = *(void *)(v12 - 16);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(v12 - 8);
  }
  *(void *)(v12 - 16) = v5;
  *(_DWORD *)(v12 - 8) = v6;
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &,std::pair<char const*,int>*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      int v6 = *(const char **)(a2 - 16);
      uint64_t v7 = *(const char **)a1;
      if (strcmp(v6, *(const char **)a1) < 0)
      {
        *(void *)a1 = v6;
        *(void *)(a2 - 16) = v7;
        int v8 = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 - 8);
        *(_DWORD *)(a2 - 8) = v8;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &,std::pair<char const*,int>*>(a1, a1 + 16, a2 - 16);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &,std::pair<char const*,int>*>(a1, a1 + 16, a1 + 32, a2 - 16);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &,std::pair<char const*,int>*>(a1, a1 + 16, a1 + 32, a1 + 48, a2 - 16);
      return 1;
    default:
      int v9 = (const char **)(a1 + 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &,std::pair<char const*,int>*>(a1, a1 + 16, a1 + 32);
      uint64_t v10 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    uint64_t v13 = *(const char **)v10;
    int v14 = *v9;
    if (strcmp(*(const char **)v10, v14) < 0)
    {
      int v15 = *(_DWORD *)(v10 + 8);
      uint64_t v16 = v11;
      while (1)
      {
        uint64_t v17 = a1 + v16;
        *(void *)(v17 + 48) = v14;
        *(_DWORD *)(v17 + 56) = *(_DWORD *)(a1 + v16 + 40);
        if (v16 == -32) {
          break;
        }
        int v14 = *(const char **)(v17 + 16);
        v16 -= 16;
        if ((strcmp(v13, v14) & 0x80000000) == 0)
        {
          uint64_t v18 = a1 + v16 + 48;
          goto LABEL_12;
        }
      }
      uint64_t v18 = a1;
LABEL_12:
      *(void *)uint64_t v18 = v13;
      *(_DWORD *)(v18 + 8) = v15;
      if (++v12 == 8) {
        return v10 + 16 == a2;
      }
    }
    int v9 = (const char **)v10;
    v11 += 16;
    v10 += 16;
    if (v10 == a2) {
      return 1;
    }
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &,std::pair<char const*,int>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &,std::pair<char const*,int>*>(a1, a2, a3);
  int v8 = *(const char **)a4;
  int v9 = *(const char **)a3;
  uint64_t result = strcmp(*(const char **)a4, *(const char **)a3);
  if ((result & 0x80000000) != 0)
  {
    *(void *)a3 = v8;
    *(void *)a4 = v9;
    int v11 = *(_DWORD *)(a3 + 8);
    *(_DWORD *)(a3 + 8) = *(_DWORD *)(a4 + 8);
    *(_DWORD *)(a4 + 8) = v11;
    int v12 = *(const char **)a3;
    uint64_t v13 = *(const char **)a2;
    uint64_t result = strcmp(*(const char **)a3, *(const char **)a2);
    if ((result & 0x80000000) != 0)
    {
      *(void *)a2 = v12;
      *(void *)a3 = v13;
      int v14 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(a3 + 8) = v14;
      int v15 = *(const char **)a2;
      uint64_t v16 = *(const char **)a1;
      uint64_t result = strcmp(*(const char **)a2, *(const char **)a1);
      if ((result & 0x80000000) != 0)
      {
        *(void *)a1 = v15;
        *(void *)a2 = v16;
        int v17 = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
        *(_DWORD *)(a2 + 8) = v17;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &,std::pair<char const*,int>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &,std::pair<char const*,int>*>(a1, a2, a3, a4);
  uint64_t v10 = *(const char **)a5;
  int v11 = *(const char **)a4;
  uint64_t result = strcmp(*(const char **)a5, *(const char **)a4);
  if ((result & 0x80000000) != 0)
  {
    *(void *)a4 = v10;
    *(void *)a5 = v11;
    int v13 = *(_DWORD *)(a4 + 8);
    *(_DWORD *)(a4 + 8) = *(_DWORD *)(a5 + 8);
    *(_DWORD *)(a5 + 8) = v13;
    int v14 = *(const char **)a4;
    int v15 = *(const char **)a3;
    uint64_t result = strcmp(*(const char **)a4, *(const char **)a3);
    if ((result & 0x80000000) != 0)
    {
      *(void *)a3 = v14;
      *(void *)a4 = v15;
      int v16 = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(a3 + 8) = *(_DWORD *)(a4 + 8);
      *(_DWORD *)(a4 + 8) = v16;
      int v17 = *(const char **)a3;
      uint64_t v18 = *(const char **)a2;
      uint64_t result = strcmp(*(const char **)a3, *(const char **)a2);
      if ((result & 0x80000000) != 0)
      {
        *(void *)a2 = v17;
        *(void *)a3 = v18;
        int v19 = *(_DWORD *)(a2 + 8);
        *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
        *(_DWORD *)(a3 + 8) = v19;
        char v20 = *(const char **)a2;
        BOOL v21 = *(const char **)a1;
        uint64_t result = strcmp(*(const char **)a2, *(const char **)a1);
        if ((result & 0x80000000) != 0)
        {
          *(void *)a1 = v20;
          *(void *)a2 = v21;
          int v22 = *(_DWORD *)(a1 + 8);
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
          *(_DWORD *)(a2 + 8) = v22;
        }
      }
    }
  }
  return result;
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &,std::pair<char const*,int>*,std::pair<char const*,int>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) >> 4;
    if (a2 - a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = a1 + 16 * v10;
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &,std::pair<char const*,int>*>(a1, a4, v9, v12);
        v12 -= 16;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = a2;
    if (a2 != a3)
    {
      uint64_t v14 = a2;
      do
      {
        int v15 = *(const char **)v14;
        int v16 = *(const char **)a1;
        if (strcmp(*(const char **)v14, *(const char **)a1) < 0)
        {
          *(void *)uint64_t v14 = v16;
          *(void *)a1 = v15;
          int v17 = *(_DWORD *)(v14 + 8);
          *(_DWORD *)(v14 + 8) = *(_DWORD *)(a1 + 8);
          *(_DWORD *)(a1 + 8) = v17;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &,std::pair<char const*,int>*>(a1, a4, v9, a1);
        }
        v14 += 16;
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 17)
    {
      uint64_t v18 = (unint64_t)v8 >> 4;
      uint64_t v19 = a2 - 16;
      do
      {
        char v20 = *(const char **)a1;
        int v21 = *(_DWORD *)(a1 + 8);
        uint64_t v22 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &,std::pair<char const*,int>*>(a1, a4, v18);
        if (v19 == v22)
        {
          *(void *)uint64_t v22 = v20;
          *(_DWORD *)(v22 + 8) = v21;
        }
        else
        {
          *(void *)uint64_t v22 = *(void *)v19;
          *(_DWORD *)(v22 + 8) = *(_DWORD *)(v19 + 8);
          *(void *)uint64_t v19 = v20;
          *(_DWORD *)(v19 + 8) = v21;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &,std::pair<char const*,int>*>(a1, v22 + 16, a4, (v22 + 16 - a1) >> 4);
        }
        v19 -= 16;
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &,std::pair<char const*,int>*>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v5 = a4;
    uint64_t v6 = result;
    uint64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (a4 - result) >> 4)
    {
      uint64_t v8 = a3;
      uint64_t v9 = (a4 - result) >> 3;
      uint64_t v10 = v9 + 1;
      uint64_t v11 = result + 16 * (v9 + 1);
      uint64_t v12 = v9 + 2;
      if (v9 + 2 >= a3)
      {
        uint64_t v14 = *(const char **)v11;
      }
      else
      {
        uint64_t v13 = *(const char **)v11;
        uint64_t v14 = *(const char **)(v11 + 16);
        if (strcmp(*(const char **)v11, v14) < 0)
        {
          v11 += 16;
          uint64_t v10 = v12;
        }
        else
        {
          uint64_t v14 = v13;
        }
      }
      int v15 = *(const char **)v5;
      uint64_t result = strcmp(v14, *(const char **)v5);
      if ((result & 0x80000000) == 0)
      {
        int v21 = *(_DWORD *)(v5 + 8);
        uint64_t v22 = v8;
        do
        {
          uint64_t v16 = v5;
          uint64_t v5 = v11;
          *(void *)uint64_t v16 = v14;
          *(_DWORD *)(v16 + 8) = *(_DWORD *)(v11 + 8);
          if (v7 < v10) {
            break;
          }
          uint64_t v17 = (2 * v10) | 1;
          uint64_t v11 = v6 + 16 * v17;
          uint64_t v18 = 2 * v10 + 2;
          if (v18 >= v8)
          {
            uint64_t v14 = *(const char **)v11;
            uint64_t v10 = (2 * v10) | 1;
          }
          else
          {
            uint64_t v14 = *(const char **)v11;
            uint64_t v19 = *(const char **)(v11 + 16);
            int v20 = strcmp(*(const char **)v11, v19);
            if (v20 < 0)
            {
              uint64_t v14 = v19;
              v11 += 16;
            }
            uint64_t v8 = v22;
            uint64_t v10 = v20 >= 0 ? v17 : v18;
          }
          uint64_t result = strcmp(v14, v15);
        }
        while ((result & 0x80000000) == 0);
        *(void *)uint64_t v5 = v15;
        *(_DWORD *)(v5 + 8) = v21;
      }
    }
  }
  return result;
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &,std::pair<char const*,int>*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = a3 - 2;
  if (a3 < 2) {
    uint64_t v6 = a3 - 1;
  }
  uint64_t v7 = v6 >> 1;
  do
  {
    uint64_t v8 = a1 + 16 * v5 + 16;
    uint64_t v9 = (2 * v5) | 1;
    uint64_t v10 = 2 * v5 + 2;
    if (v10 >= a3)
    {
      uint64_t v14 = *(const char **)v8;
      uint64_t v5 = (2 * v5) | 1;
    }
    else
    {
      uint64_t v11 = *(const char **)v8;
      uint64_t v12 = *(const char **)(a1 + 16 * v5 + 32);
      int v13 = strcmp(*(const char **)v8, v12);
      if (v13 >= 0) {
        uint64_t v14 = v11;
      }
      else {
        uint64_t v14 = v12;
      }
      if (v13 >= 0)
      {
        uint64_t v5 = v9;
      }
      else
      {
        v8 += 16;
        uint64_t v5 = v10;
      }
    }
    *(void *)a1 = v14;
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(v8 + 8);
    a1 = v8;
  }
  while (v5 <= v7);
  return v8;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &,std::pair<char const*,int>*>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v6 = result;
    unint64_t v7 = v4 >> 1;
    uint64_t v8 = result + 16 * (v4 >> 1);
    uint64_t v10 = a2 - 16;
    uint64_t v9 = *(const char **)(a2 - 16);
    uint64_t v11 = *(const char **)v8;
    uint64_t result = strcmp(*(const char **)v8, v9);
    if ((result & 0x80000000) != 0)
    {
      int v12 = *(_DWORD *)(a2 - 8);
      do
      {
        uint64_t v13 = v10;
        uint64_t v10 = v8;
        *(void *)uint64_t v13 = v11;
        *(_DWORD *)(v13 + 8) = *(_DWORD *)(v8 + 8);
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        uint64_t v8 = v6 + 16 * v7;
        uint64_t v11 = *(const char **)v8;
        uint64_t result = strcmp(*(const char **)v8, v9);
      }
      while ((result & 0x80000000) != 0);
      *(void *)uint64_t v10 = v9;
      *(_DWORD *)(v10 + 8) = v12;
    }
  }
  return result;
}

quasar::SymbolMap::SortedSymbolMapQuasarImpl *quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(quasar::SymbolMap::SortedSymbolMapQuasarImpl *this, long long **a2)
{
  quasar::SymbolMap::SymbolMapQuasarImpl::SymbolMapQuasarImpl(this, (const quasar::SymbolMap::SymbolMapQuasarImpl *)a2);
  *(void *)uint64_t v4 = &unk_1F0A597E0;
  *(void *)(v4 + 64) = 0;
  *(void *)(v4 + 72) = 0;
  *(void *)(v4 + 56) = 0;
  std::vector<std::pair<char const*,int>>::__init_with_size[abi:ne180100]<std::pair<char const*,int>*,std::pair<char const*,int>*>((char *)(v4 + 56), a2[7], a2[8], a2[8] - a2[7]);
  return this;
}

void sub_1B2144674(_Unwind_Exception *a1)
{
  quasar::SymbolMap::SymbolMapQuasarImpl::~SymbolMapQuasarImpl(v1);
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<char const*,int>>::__init_with_size[abi:ne180100]<std::pair<char const*,int>*,std::pair<char const*,int>*>(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](result, a4);
    unint64_t v7 = (_OWORD *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_1B21446E0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void quasar::SymbolMap::SymbolMapMarisaImpl::SymbolMapMarisaImpl(fst::SymbolTable *a1)
{
}

void sub_1B21447AC(_Unwind_Exception *a1)
{
  marisa::Trie::~Trie(v2);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)v1 + 4);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  fst::SymbolTable::~SymbolTable(v1);
  _Unwind_Resume(a1);
}

void quasar::SymbolMap::SymbolMapMarisaImpl::~SymbolMapMarisaImpl(quasar::SymbolMap::SymbolMapMarisaImpl *this)
{
  quasar::SymbolMap::SymbolMapMarisaImpl::~SymbolMapMarisaImpl(this);
  JUMPOUT(0x1B3EA8670);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F0A59660;
  *((void *)this + 2) = &unk_1F0A59710;
  marisa::Trie::~Trie((quasar::SymbolMap::SymbolMapMarisaImpl *)((char *)this + 48));
  unint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  fst::SymbolTable::~SymbolTable(this);
}

void quasar::SymbolMap::SymbolMapMarisaImpl::Copy(quasar::SymbolMap::SymbolMapMarisaImpl *this)
{
}

void sub_1B2144860(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10A1C40AEBB0618);
  _Unwind_Resume(a1);
}

uint64_t quasar::SymbolMap::SymbolMapMarisaImpl::AddSymbol(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(uint64_t *))(*a1 + 96))(a1);
  if (result == -1)
  {
    uint64_t v7 = ~marisa::Trie::num_keys((marisa::Trie *)(a1 + 6)) + a3;
    fst::SymbolTable::MutateCheck((uint64_t)a1);
    uint64_t v8 = fst::SymbolTableImpl::AddSymbol(a1[1], a2, v7);
    return v8 + marisa::Trie::num_keys((marisa::Trie *)(a1 + 6)) + 1;
  }
  return result;
}

uint64_t quasar::SymbolMap::SymbolMapMarisaImpl::AddSymbol(uint64_t *a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t *))(*a1 + 96))(a1);
  if (result == -1)
  {
    fst::SymbolTable::MutateCheck((uint64_t)a1);
    uint64_t v5 = fst::SymbolTableImpl::AddSymbol(a1[1], a2, *(void *)(a1[1] + 24));
    return v5 + marisa::Trie::num_keys((marisa::Trie *)(a1 + 6)) + 1;
  }
  return result;
}

void quasar::SymbolMap::SymbolMapMarisaImpl::AddTable(quasar::SymbolMap::SymbolMapMarisaImpl *this, const fst::SymbolTable *a2)
{
  unint64_t v4 = (*(uint64_t (**)(const fst::SymbolTable *))(*(void *)a2 + 120))(a2);
  uint64_t v5 = (*(uint64_t (**)(const fst::SymbolTable *, void))(*(void *)a2 + 128))(a2, 0);
  if (v4)
  {
    uint64_t v6 = v5;
    uint64_t v7 = 0;
    do
    {
      (*(void (**)(void **__return_ptr, const fst::SymbolTable *, uint64_t))(*(void *)a2 + 88))(__p, a2, v6);
      uint64_t v8 = (*(uint64_t (**)(quasar::SymbolMap::SymbolMapMarisaImpl *, void **))(*(void *)this + 96))(this, __p);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
      if (v8 == -1)
      {
        (*(void (**)(void **__return_ptr, const fst::SymbolTable *, uint64_t))(*(void *)a2 + 88))(__p, a2, v6);
        (*(void (**)(quasar::SymbolMap::SymbolMapMarisaImpl *, void **))(*(void *)this + 32))(this, __p);
        if (v10 < 0) {
          operator delete(__p[0]);
        }
      }
      if (++v7 < v4) {
        uint64_t v6 = (*(uint64_t (**)(const fst::SymbolTable *, uint64_t))(*(void *)a2 + 128))(a2, v7);
      }
    }
    while (v4 != v7);
  }
}

void sub_1B2144B64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::SymbolMap::SymbolMapMarisaImpl::Find(quasar::SymbolMap::SymbolMapMarisaImpl *this@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (a2)
  {
    uint64_t v6 = (marisa::grimoire::trie::LoudsTrie **)((char *)this + 48);
    uint64_t v7 = marisa::Trie::num_keys((quasar::SymbolMap::SymbolMapMarisaImpl *)((char *)this + 48));
    int64_t v8 = a2 - (v7 + 1);
    if (a2 >= v7 + 1)
    {
      uint64_t v9 = (fst::SymbolTableImpl *)*((void *)this + 1);
      fst::SymbolTableImpl::Find(v9, v8, a3);
    }
    else
    {
      marisa::Agent::Agent((marisa::Agent *)v10);
      marisa::Agent::set_query((uint64_t)v10, a2 - 1);
      marisa::Trie::reverse_lookup(v6, (marisa::Agent *)v10);
      std::string::basic_string[abi:ne180100](a3, __src, __len);
      marisa::Agent::~Agent((marisa::Agent *)v10);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a3, "<eps>");
  }
}

void sub_1B2144C78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t quasar::SymbolMap::SymbolMapMarisaImpl::Find(uint64_t a1, uint64_t *a2)
{
  if (*((char *)a2 + 23) < 0) {
    a2 = (uint64_t *)*a2;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 104))(a1, a2);
}

uint64_t quasar::SymbolMap::SymbolMapMarisaImpl::Find(fst::SymbolTableImpl **this, char *__s1)
{
  if (!strcmp(__s1, "<eps>")) {
    return 0;
  }
  marisa::Agent::Agent((marisa::Agent *)v8);
  marisa::Agent::set_query(v8, __s1);
  if (marisa::Trie::lookup(this + 6, (marisa::Agent *)v8))
  {
    uint64_t v4 = v9 + 1;
  }
  else
  {
    uint64_t v5 = marisa::Trie::num_keys((marisa::Trie *)(this + 6));
    uint64_t v6 = fst::SymbolTableImpl::Find(this[1], __s1);
    if (v6 == -1) {
      uint64_t v4 = -1;
    }
    else {
      uint64_t v4 = v5 + v6 + 1;
    }
  }
  marisa::Agent::~Agent((marisa::Agent *)v8);
  return v4;
}

void sub_1B2144D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t quasar::SymbolMap::SymbolMapMarisaImpl::AvailableKey(quasar::SymbolMap::SymbolMapMarisaImpl *this)
{
  return marisa::Trie::num_keys((quasar::SymbolMap::SymbolMapMarisaImpl *)((char *)this + 48))
       + *(void *)(*((void *)this + 1) + 24)
       + 1;
}

uint64_t quasar::SymbolMap::SymbolMapMarisaImpl::NumSymbols(quasar::SymbolMap::SymbolMapMarisaImpl *this)
{
  return marisa::Trie::num_keys((quasar::SymbolMap::SymbolMapMarisaImpl *)((char *)this + 48))
       + ((uint64_t)(*(void *)(*((void *)this + 1) + 56) - *(void *)(*((void *)this + 1) + 48)) >> 3)
       + 1;
}

uint64_t quasar::SymbolMap::SymbolMapMarisaImpl::GetNthKey(quasar::SymbolMap::SymbolMapMarisaImpl *this, uint64_t a2)
{
  return a2;
}

void quasar::SymbolMap::SymbolMapMarisaImpl::FindSymbolsWithPrefix(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  marisa::Agent::Agent((marisa::Agent *)v39);
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v6 = (const char *)a2;
  }
  else {
    uint64_t v6 = *(const char **)a2;
  }
  marisa::Agent::set_query(v39, v6);
  while (marisa::Trie::predictive_search((marisa::grimoire::trie::LoudsTrie **)(a1 + 48), (marisa::Agent *)v39))
  {
    uint64_t v7 = v40 + 1;
    unsigned int v9 = a3[1];
    unint64_t v8 = (unint64_t)a3[2];
    if ((unint64_t)v9 >= v8)
    {
      uint64_t v11 = *a3;
      uint64_t v12 = v9 - *a3;
      unint64_t v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 61) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v14 = v8 - (void)v11;
      if (v14 >> 2 > v13) {
        unint64_t v13 = v14 >> 2;
      }
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v13;
      }
      if (v15)
      {
        uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a3 + 2), v15);
        uint64_t v11 = *a3;
        unsigned int v9 = a3[1];
      }
      else
      {
        uint64_t v16 = 0;
      }
      uint64_t v17 = (uint64_t *)&v16[8 * v12];
      *uint64_t v17 = v7;
      char v10 = v17 + 1;
      while (v9 != v11)
      {
        uint64_t v18 = *--v9;
        *--uint64_t v17 = v18;
      }
      *a3 = v17;
      a3[1] = v10;
      a3[2] = (uint64_t *)&v16[8 * v15];
      if (v11) {
        operator delete(v11);
      }
    }
    else
    {
      *unsigned int v9 = v7;
      char v10 = v9 + 1;
    }
    a3[1] = v10;
  }
  uint64_t v19 = marisa::Trie::num_keys((marisa::Trie *)(a1 + 48));
  int v20 = *(fst::SymbolTableImpl **)(a1 + 8);
  if (*((void *)v20 + 7) != *((void *)v20 + 6))
  {
    unint64_t v21 = 0;
    uint64_t v22 = v19 + 1;
    do
    {
      fst::SymbolTableImpl::Find(v20, v21, __p);
      BOOL v23 = quasar::startsWith((unsigned __int8 *)__p, (unsigned __int8 *)a2);
      BOOL v24 = v23;
      if (v38 < 0)
      {
        operator delete(__p[0]);
        if (v24)
        {
LABEL_29:
          unint64_t v25 = v22 + v21;
          long long v27 = a3[1];
          unint64_t v26 = (unint64_t)a3[2];
          if ((unint64_t)v27 >= v26)
          {
            long long v29 = *a3;
            uint64_t v30 = v27 - *a3;
            unint64_t v31 = v30 + 1;
            if ((unint64_t)(v30 + 1) >> 61) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v32 = v26 - (void)v29;
            if (v32 >> 2 > v31) {
              unint64_t v31 = v32 >> 2;
            }
            if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v33 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v33 = v31;
            }
            if (v33)
            {
              long long v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a3 + 2), v33);
              long long v29 = *a3;
              long long v27 = a3[1];
            }
            else
            {
              long long v34 = 0;
            }
            long long v35 = (uint64_t *)&v34[8 * v30];
            *long long v35 = v25;
            long long v28 = v35 + 1;
            while (v27 != v29)
            {
              uint64_t v36 = *--v27;
              *--long long v35 = v36;
            }
            *a3 = v35;
            a3[1] = v28;
            a3[2] = (uint64_t *)&v34[8 * v33];
            if (v29) {
              operator delete(v29);
            }
          }
          else
          {
            *long long v27 = v25;
            long long v28 = v27 + 1;
          }
          a3[1] = v28;
        }
      }
      else if (v23)
      {
        goto LABEL_29;
      }
      ++v21;
      int v20 = *(fst::SymbolTableImpl **)(a1 + 8);
    }
    while (v21 < (uint64_t)(*((void *)v20 + 7) - *((void *)v20 + 6)) >> 3);
  }
  marisa::Agent::~Agent((marisa::Agent *)v39);
}

void sub_1B214508C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  marisa::Agent::~Agent((marisa::Agent *)&a16);
  uint64_t v18 = *(void **)v16;
  if (*(void *)v16)
  {
    *(void *)(v16 + 8) = v18;
    operator delete(v18);
  }
  _Unwind_Resume(a1);
}

void non-virtual thunk to'quasar::SymbolMap::SymbolMapMarisaImpl::FindSymbolsWithPrefix(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X8>)
{
}

void non-virtual thunk to'quasar::SymbolMap::SymbolMapMarisaImpl::~SymbolMapMarisaImpl(quasar::SymbolMap::SymbolMapMarisaImpl *this)
{
}

{
  uint64_t vars8;

  quasar::SymbolMap::SymbolMapMarisaImpl::~SymbolMapMarisaImpl((quasar::SymbolMap::SymbolMapMarisaImpl *)((char *)this - 16));
  JUMPOUT(0x1B3EA8670);
}

quasar::SymbolMap::SymbolMapMarisaImpl *quasar::SymbolMap::SymbolMapMarisaImpl::SymbolMapMarisaImpl(quasar::SymbolMap::SymbolMapMarisaImpl *this, const quasar::SymbolMap::SymbolMapMarisaImpl *a2)
{
  uint64_t v3 = *((void *)a2 + 1);
  *((void *)this + 1) = v3;
  ++*(_DWORD *)(v3 + 168);
  *(void *)this = &unk_1F0A59660;
  uint64_t v5 = *((void *)a2 + 3);
  uint64_t v4 = *((void *)a2 + 4);
  *((void *)this + 2) = &unk_1F0A59710;
  *((void *)this + 3) = v5;
  *((void *)this + 4) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 5) = *((void *)a2 + 5);
  marisa::Trie::Trie((void *)this + 6);
  marisa::Trie::map((marisa::grimoire::trie::LoudsTrie **)this + 6, *(const void **)(*((void *)this + 3) + 8), *((void *)this + 5));
  return this;
}

void sub_1B2145268(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  marisa::Trie::~Trie(v3);
  uint64_t v5 = (std::__shared_weak_count *)*((void *)v1 + 4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  fst::SymbolTable::~SymbolTable(v1);
  _Unwind_Resume(a1);
}

void std::shared_ptr<fst::SymbolTable>::shared_ptr[abi:ne180100]<quasar::SymbolMap::SortedSymbolMapQuasarImpl,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1B2145304(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<fst::SymbolTable>::shared_ptr[abi:ne180100]<fst::SymbolTable,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<quasar::SymbolMap::SortedSymbolMapQuasarImpl *,std::shared_ptr<fst::SymbolTable>::__shared_ptr_default_delete<fst::SymbolTable,quasar::SymbolMap::SortedSymbolMapQuasarImpl>,std::allocator<quasar::SymbolMap::SortedSymbolMapQuasarImpl>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_pointer<quasar::SymbolMap::SortedSymbolMapQuasarImpl *,std::shared_ptr<fst::SymbolTable>::__shared_ptr_default_delete<fst::SymbolTable,quasar::SymbolMap::SortedSymbolMapQuasarImpl>,std::allocator<quasar::SymbolMap::SortedSymbolMapQuasarImpl>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<quasar::SymbolMap::SortedSymbolMapQuasarImpl *,std::shared_ptr<fst::SymbolTable>::__shared_ptr_default_delete<fst::SymbolTable,quasar::SymbolMap::SortedSymbolMapQuasarImpl>,std::allocator<quasar::SymbolMap::SortedSymbolMapQuasarImpl>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::shared_ptr<fst::SymbolTable>::shared_ptr[abi:ne180100]<quasar::SymbolMap::SymbolMapQuasarImpl,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1B2145434(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<fst::SymbolTable>::shared_ptr[abi:ne180100]<fst::SymbolTable,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<quasar::SymbolMap::SymbolMapQuasarImpl *,std::shared_ptr<fst::SymbolTable>::__shared_ptr_default_delete<fst::SymbolTable,quasar::SymbolMap::SymbolMapQuasarImpl>,std::allocator<quasar::SymbolMap::SymbolMapQuasarImpl>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_pointer<quasar::SymbolMap::SymbolMapQuasarImpl *,std::shared_ptr<fst::SymbolTable>::__shared_ptr_default_delete<fst::SymbolTable,quasar::SymbolMap::SymbolMapQuasarImpl>,std::allocator<quasar::SymbolMap::SymbolMapQuasarImpl>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<quasar::SymbolMap::SymbolMapQuasarImpl *,std::shared_ptr<fst::SymbolTable>::__shared_ptr_default_delete<fst::SymbolTable,quasar::SymbolMap::SymbolMapQuasarImpl>,std::allocator<quasar::SymbolMap::SymbolMapQuasarImpl>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::shared_ptr<fst::SymbolTable>::shared_ptr[abi:ne180100]<quasar::SymbolMap::SymbolMapMarisaImpl,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1B2145564(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<fst::SymbolTable>::shared_ptr[abi:ne180100]<fst::SymbolTable,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<quasar::SymbolMap::SymbolMapMarisaImpl *,std::shared_ptr<fst::SymbolTable>::__shared_ptr_default_delete<fst::SymbolTable,quasar::SymbolMap::SymbolMapMarisaImpl>,std::allocator<quasar::SymbolMap::SymbolMapMarisaImpl>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_pointer<quasar::SymbolMap::SymbolMapMarisaImpl *,std::shared_ptr<fst::SymbolTable>::__shared_ptr_default_delete<fst::SymbolTable,quasar::SymbolMap::SymbolMapMarisaImpl>,std::allocator<quasar::SymbolMap::SymbolMapMarisaImpl>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<quasar::SymbolMap::SymbolMapMarisaImpl *,std::shared_ptr<fst::SymbolTable>::__shared_ptr_default_delete<fst::SymbolTable,quasar::SymbolMap::SymbolMapMarisaImpl>,std::allocator<quasar::SymbolMap::SymbolMapMarisaImpl>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t quasar::SyncPSRAudioProcessor::SyncPSRAudioProcessor(uint64_t a1, quasar::SystemConfig *a2, uint64_t a3, int a4, char a5, int a6)
{
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 80) = 27;
  *(unsigned char *)(a1 + 84) = 0;
  kaldi::Matrix<float>::Matrix(a1 + 88);
  Ptree = (quasar::PTree *)quasar::SystemConfig::getPtree((uint64_t)a2, a3);
  LODWORD(v27[0]) = a4;
  v27[1] = 0;
  char v28 = 0;
  int v34 = 0;
  char v35 = 0;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  memset(v33, 0, sizeof(v33));
  long long v36 = 0u;
  long long v37 = 0u;
  uint64_t v38 = 0;
  char v39 = 1;
  uint64_t v13 = quasar::PTree::begin(Ptree);
  if (v13 != quasar::PTree::end(Ptree))
  {
    if (*(char *)(v13 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)v13, *(void *)(v13 + 8));
    }
    else
    {
      long long v14 = *(_OWORD *)v13;
      v26.__r_.__value_.__r.__words[2] = *(void *)(v13 + 16);
      *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v14;
    }
    if (*(char *)(a3 + 23) >= 0) {
      size_t v15 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      size_t v15 = *(void *)(a3 + 8);
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&v23, v15 + 1);
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v16 = &v23;
    }
    else {
      uint64_t v16 = (std::string *)v23.__r_.__value_.__r.__words[0];
    }
    if (v15)
    {
      if (*(char *)(a3 + 23) >= 0) {
        uint64_t v17 = (const void *)a3;
      }
      else {
        uint64_t v17 = *(const void **)a3;
      }
      memmove(v16, v17, v15);
    }
    *(_WORD *)((char *)&v16->__r_.__value_.__l.__data_ + v15) = 46;
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v18 = &v26;
    }
    else {
      uint64_t v18 = (std::string *)v26.__r_.__value_.__r.__words[0];
    }
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v26.__r_.__value_.__l.__size_;
    }
    int v20 = std::string::append(&v23, (const std::string::value_type *)v18, size);
    long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    quasar::FeatureExtractorSimpleFactory::createFeatureExtractor(&__p, &v25);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
    quasar::FeatureExtractor::init(v25, a2);
  }
  *(_DWORD *)(a1 + 132) = a4;
  *(_DWORD *)(a1 + 136) = a6;
  *(unsigned char *)(a1 + 140) = a5;
  quasar::FeatureExtractorArgs::~FeatureExtractorArgs(v27);
  return a1;
}

void sub_1B2145884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33)
{
  quasar::FeatureExtractorArgs::~FeatureExtractorArgs((void **)&a33);
  kaldi::Matrix<float>::~Matrix(a9);
  char v35 = *(std::__shared_weak_count **)(v33 + 72);
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  a33 = v33 + 40;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  long long v36 = *(std::__shared_weak_count **)(v33 + 32);
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  a33 = v33;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  _Unwind_Resume(a1);
}

uint64_t quasar::SyncPSRAudioProcessor::SyncPSRAudioProcessor(uint64_t a1, quasar::SystemConfig *a2, uint64_t a3, int a4, int a5)
{
  return quasar::SyncPSRAudioProcessor::SyncPSRAudioProcessor(a1, a2, a3, a4, 0, a5);
}

void quasar::SyncPSRAudioProcessor::reset(quasar::SyncPSRAudioProcessor *this)
{
  std::allocate_shared[abi:ne180100]<quasar::SyncRecogAudioBuffer,std::allocator<quasar::SyncRecogAudioBuffer>,unsigned int &,int &,void>((unsigned int *)this + 33, (int *)this + 34, &v42);
  long long v2 = v42;
  long long v42 = 0uLL;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 4);
  *(_OWORD *)((char *)this + 24) = v2;
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    if (*((void *)&v42 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v42 + 1));
    }
  }
  uint64_t v4 = (void *)((char *)this + 40);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__clear[abi:ne180100]((uint64_t *)this + 5);
  LODWORD(v42) = *((_DWORD *)this + 33);
  *((void *)&v42 + 1) = 0;
  char v43 = 0;
  int v49 = 0;
  char v50 = 0;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  memset(v48, 0, sizeof(v48));
  long long v51 = 0u;
  long long v52 = 0u;
  uint64_t v53 = 0;
  char v54 = 1;
  uint64_t v5 = *(uint64_t **)this;
  uint64_t v6 = (uint64_t *)*((void *)this + 1);
  if (*(uint64_t **)this != v6)
  {
    do
    {
      uint64_t v7 = *v5;
      uint64_t v8 = *((void *)this + 3);
      uint64_t v9 = *((void *)this + 6);
      if (v9 == *((void *)this + 5))
      {
        uint64_t v39 = 0;
        unsigned int v40 = 0;
      }
      else
      {
        uint64_t v39 = *(void *)(v9 - 16);
        char v10 = *(std::__shared_weak_count **)(v9 - 8);
        unsigned int v40 = v10;
        if (v10) {
          atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      quasar::FeatureExtractor::createOnlineFeInput(v7, v8, &v39);
      uint64_t v11 = (_OWORD *)*((void *)this + 6);
      unint64_t v12 = *((void *)this + 7);
      if ((unint64_t)v11 >= v12)
      {
        uint64_t v13 = ((uint64_t)v11 - *v4) >> 4;
        unint64_t v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 60) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = v12 - *v4;
        if (v15 >> 3 > v14) {
          unint64_t v14 = v15 >> 3;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v14;
        }
        long long v58 = (char *)this + 56;
        uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)this + 56, v16);
        uint64_t v18 = &v17[16 * v13];
        *(void *)&long long v55 = v17;
        *((void *)&v55 + 1) = v18;
        long long v57 = &v17[16 * v19];
        *(_OWORD *)uint64_t v18 = v41;
        long long v41 = 0uLL;
        long long v56 = v18 + 16;
        std::vector<std::shared_ptr<kaldi::OnlineFeatInputItf>>::__swap_out_circular_buffer((uint64_t *)this + 5, &v55);
        uint64_t v20 = *((void *)this + 6);
        std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((void **)&v55);
        long long v21 = (std::__shared_weak_count *)*((void *)&v41 + 1);
        *((void *)this + 6) = v20;
        if (v21) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v21);
        }
      }
      else
      {
        *uint64_t v11 = v41;
        long long v41 = 0uLL;
        *((void *)this + 6) = v11 + 1;
      }
      if (v40) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v40);
      }
      if ((*(unsigned int (**)(void))(*(void *)*v5 + 16))())
      {
        uint64_t v38 = *(kaldi::OnlineFeatInputItf **)(*((void *)this + 6) - 16);
        std::allocate_shared[abi:ne180100]<kaldi::OnlineBufferingInput,std::allocator<kaldi::OnlineBufferingInput>,kaldi::OnlineFeatInputItf *,void>(&v38, &v41);
        long long v22 = v41;
        long long v41 = 0uLL;
        BOOL v24 = (_OWORD *)*((void *)this + 6);
        unint64_t v23 = *((void *)this + 7);
        if ((unint64_t)v24 >= v23)
        {
          long long v36 = v22;
          uint64_t v25 = ((uint64_t)v24 - *v4) >> 4;
          unint64_t v26 = v25 + 1;
          if ((unint64_t)(v25 + 1) >> 60) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v27 = v23 - *v4;
          if (v27 >> 3 > v26) {
            unint64_t v26 = v27 >> 3;
          }
          if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v28 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v28 = v26;
          }
          long long v58 = (char *)this + 56;
          long long v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)this + 56, v28);
          long long v30 = &v29[16 * v25];
          *(void *)&long long v55 = v29;
          *((void *)&v55 + 1) = v30;
          long long v57 = &v29[16 * v31];
          *(_OWORD *)long long v30 = v36;
          long long v56 = v30 + 16;
          std::vector<std::shared_ptr<kaldi::OnlineFeatInputItf>>::__swap_out_circular_buffer((uint64_t *)this + 5, &v55);
          uint64_t v32 = *((void *)this + 6);
          std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((void **)&v55);
          uint64_t v33 = (std::__shared_weak_count *)*((void *)&v41 + 1);
          *((void *)this + 6) = v32;
          if (v33) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v33);
          }
        }
        else
        {
          *BOOL v24 = v22;
          *((void *)this + 6) = v24 + 1;
        }
      }
      v5 += 2;
    }
    while (v5 != v6);
  }
  (*(void (**)(void))(**(void **)(*((void *)this + 6) - 16) + 56))(*(void *)(*((void *)this + 6)
                                                                                                  - 16));
  *(void *)&long long v41 = *(void *)(*((void *)this + 6) - 16);
  char v37 = 0;
  std::allocate_shared[abi:ne180100]<kaldi::OnlineFeatureMatrix,std::allocator<kaldi::OnlineFeatureMatrix>,kaldi::OnlineFeatureMatrixOptions &,kaldi::OnlineFeatInputItf *,BOOL,void>((void *)this + 10, (uint64_t *)&v41, &v37, &v55);
  long long v34 = v55;
  long long v55 = 0uLL;
  char v35 = (std::__shared_weak_count *)*((void *)this + 9);
  *((_OWORD *)this + 4) = v34;
  if (v35)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
    if (*((void *)&v55 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v55 + 1));
    }
  }
  *((_DWORD *)this + 32) = 0;
  quasar::FeatureExtractorArgs::~FeatureExtractorArgs((void **)&v42);
}

void sub_1B2145CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  quasar::FeatureExtractorArgs::~FeatureExtractorArgs((void **)va);
  _Unwind_Resume(a1);
}

void quasar::SyncPSRAudioProcessor::compute(quasar::SyncPSRAudioProcessor *this)
{
  uint64_t v15 = 0;
  unint64_t v16 = 0;
  unint64_t v17 = 0;
  for (signed int i = *((_DWORD *)this + 32);
        kaldi::OnlineFeatureMatrix::IsValidFrame(*((int32x2_t **)this + 8), i, 1);
        *((_DWORD *)this + 32) = i)
  {
    if (*((unsigned char *)this + 140))
    {
      if (v16 - v15 != 24) {
        std::vector<kaldi::Vector<float>>::resize(&v15, 1uLL);
      }
      kaldi::OnlineFeatureMatrix::GetFrame(*((kaldi::OnlineFeatureMatrix **)this + 8), *((_DWORD *)this + 32), (uint64_t *)&v11);
      uint64_t v3 = v16 - 24;
      kaldi::Vector<float>::Resize((void **)(v16 - 24), v12, 1);
      kaldi::VectorBase<float>::CopyFromVec(v3, (const void **)&v11);
    }
    else
    {
      kaldi::OnlineFeatureMatrix::GetFrame(*((kaldi::OnlineFeatureMatrix **)this + 8), *((_DWORD *)this + 32), (uint64_t *)&v11);
      unint64_t v4 = v16;
      if (v16 >= v17)
      {
        uint64_t v5 = std::vector<kaldi::Vector<float>>::__emplace_back_slow_path<kaldi::SubVector<float>>(&v15, (uint64_t)&v11);
      }
      else
      {
        std::vector<kaldi::Vector<float>>::__construct_one_at_end[abi:ne180100]<kaldi::SubVector<float>>((uint64_t)&v15, (uint64_t)&v11);
        uint64_t v5 = v4 + 24;
      }
      unint64_t v16 = v5;
    }
    signed int i = *((_DWORD *)this + 32) + 1;
  }
  if (v16 != v15)
  {
    kaldi::Matrix<float>::Resize((int32x2_t *)this + 11, -1431655765 * ((v16 - v15) >> 3), *(unsigned int *)(*((void *)this + 8) + 24), 1, 0);
    if (v16 != v15)
    {
      uint64_t v6 = 0;
      unint64_t v7 = 0;
      do
      {
        uint64_t v8 = *((void *)this + 11);
        int v9 = *((_DWORD *)this + 26);
        unsigned int v10 = kaldi::MatrixBase<float>::NumCols((uint64_t)this + 88);
        int v13 = 0;
        uint64_t v14 = 0;
        uint64_t v11 = (void **)(v8 + 4 * v9 * (int)v7);
        unsigned int v12 = v10;
        kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v11, (const void **)(v15 + v6));
        ++v7;
        v6 += 24;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - v15) >> 3) > v7);
    }
  }
  uint64_t v11 = (void **)&v15;
  std::vector<kaldi::Vector<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
}

void sub_1B2145F2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, char a12)
{
  a9 = (void **)&a12;
  std::vector<kaldi::Vector<float>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void quasar::SyncPSRAudioProcessor::addAudio(quasar::SyncRecogAudioBuffer **this, const __int16 *a2, uint64_t a3, int a4)
{
  quasar::SyncRecogAudioBuffer::addAudio(this[3], a2, a3);
  if (a4) {
    quasar::SyncRecogAudioBuffer::endAudio((uint64_t)this[3]);
  }
  quasar::SyncPSRAudioProcessor::compute((quasar::SyncPSRAudioProcessor *)this);
}

void quasar::SyncPSRAudioProcessor::endAudio(quasar::SyncPSRAudioProcessor *this)
{
  quasar::SyncRecogAudioBuffer::endAudio(*((void *)this + 3));
  quasar::SyncPSRAudioProcessor::compute(this);
}

uint64_t quasar::SyncPSRAudioProcessor::getSpeakerRecogMatrix@<X0>(quasar::SyncPSRAudioProcessor *this@<X0>, uint64_t a2@<X8>)
{
  return kaldi::Matrix<float>::Matrix(a2, (char *)this + 88);
}

uint64_t quasar::SyncPSRAudioProcessor::processedAudioDurationMs(quasar::SyncPSRAudioProcessor *this)
{
  return *((_DWORD *)this + 32)
       * (*(unsigned int (**)(void))(**(void **)(*((void *)this + 6) - 16) + 24))(*(void *)(*((void *)this + 6) - 16));
}

void *std::allocate_shared[abi:ne180100]<quasar::SyncRecogAudioBuffer,std::allocator<quasar::SyncRecogAudioBuffer>,unsigned int &,int &,void>@<X0>(unsigned int *a1@<X1>, int *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x60uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::SyncRecogAudioBuffer>::__shared_ptr_emplace[abi:ne180100]<unsigned int &,int &,std::allocator<quasar::SyncRecogAudioBuffer>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1B214609C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::SyncRecogAudioBuffer>::__shared_ptr_emplace[abi:ne180100]<unsigned int &,int &,std::allocator<quasar::SyncRecogAudioBuffer>,0>(void *a1, unsigned int *a2, int *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A60C28;
  quasar::SyncRecogAudioBuffer::SyncRecogAudioBuffer((quasar::SyncRecogAudioBuffer *)(a1 + 3), *a2, *a3, 120, 0);
  return a1;
}

void sub_1B2146108(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<kaldi::OnlineFeatureMatrix,std::allocator<kaldi::OnlineFeatureMatrix>,kaldi::OnlineFeatureMatrixOptions &,kaldi::OnlineFeatInputItf *,BOOL,void>@<X0>(void *a1@<X1>, uint64_t *a2@<X2>, char *a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0x210uLL);
  uint64_t result = std::__shared_ptr_emplace<kaldi::OnlineFeatureMatrix>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineFeatureMatrixOptions &,kaldi::OnlineFeatInputItf *,BOOL,std::allocator<kaldi::OnlineFeatureMatrix>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1B214617C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<kaldi::OnlineFeatureMatrix>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineFeatureMatrixOptions &,kaldi::OnlineFeatInputItf *,BOOL,std::allocator<kaldi::OnlineFeatureMatrix>,0>(void *a1, void *a2, uint64_t *a3, char *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5EBC8;
  kaldi::OnlineFeatureMatrix::OnlineFeatureMatrix((uint64_t)(a1 + 3), a2, *a3, *a4);
  return a1;
}

void sub_1B21461E0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void *std::vector<kaldi::Vector<float>>::__construct_one_at_end[abi:ne180100]<kaldi::SubVector<float>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)uint64_t v4 = 0;
  *(void *)(v4 + 8) = 0;
  *(void *)(v4 + 16) = 0;
  kaldi::Vector<float>::Resize((void **)v4, *(unsigned int *)(a2 + 8), 1);
  uint64_t result = kaldi::VectorBase<float>::CopyFromVec(v4, (const void **)a2);
  *(void *)(a1 + 8) = v4 + 24;
  return result;
}

void sub_1B2146250(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<kaldi::Vector<float>>::__emplace_back_slow_path<kaldi::SubVector<float>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  unint64_t v17 = a1 + 2;
  if (v9) {
    unsigned int v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  }
  else {
    unsigned int v10 = 0;
  }
  uint64_t v11 = (uint64_t)&v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  uint64_t v15 = v11;
  unint64_t v16 = &v10[24 * v9];
  *(void *)uint64_t v11 = 0;
  *(void *)(v11 + 8) = 0;
  *(void *)(v11 + 16) = 0;
  kaldi::Vector<float>::Resize((void **)v11, *(unsigned int *)(a2 + 8), 1);
  kaldi::VectorBase<float>::CopyFromVec(v11, (const void **)a2);
  v15 += 24;
  std::vector<kaldi::Vector<float>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<kaldi::Vector<float>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1B2146364(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<kaldi::Vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 quasar::MetaInfo::Sense::Sense(uint64_t a1, long long *a2, long long *a3, __n128 *a4)
{
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  long long v5 = *a3;
  *(void *)(a1 + 40) = *((void *)a3 + 2);
  *(_OWORD *)(a1 + 24) = v5;
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = 0;
  *(void *)a3 = 0;
  __n128 result = *a4;
  *(void *)(a1 + 64) = a4[1].n128_u64[0];
  *(__n128 *)(a1 + 48) = result;
  a4->n128_u64[1] = 0;
  a4[1].n128_u64[0] = 0;
  a4->n128_u64[0] = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 136) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(unsigned char *)(a1 + 168) = 0;
  *(unsigned char *)(a1 + 192) = 0;
  *(unsigned char *)(a1 + 200) = 0;
  *(unsigned char *)(a1 + 224) = 0;
  *(unsigned char *)(a1 + 232) = 0;
  *(unsigned char *)(a1 + 256) = 0;
  *(unsigned char *)(a1 + 264) = 0;
  *(unsigned char *)(a1 + 288) = 0;
  return result;
}

void quasar::MetaInfo::MetaInfo(quasar::MetaInfo *this)
{
}

void sub_1B2146490(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1032C40AAD8FF0BLL);
  _Unwind_Resume(a1);
}

void quasar::MetaInfo::fromJson(quasar::MetaInfo *a1@<X8>)
{
}

void sub_1B2146540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = v10;
  MEMORY[0x1B3EA8670](v11, 0x1032C40AAD8FF0BLL);
  quasar::MetaInfo::Impl::~Impl((quasar::MetaInfo::Impl *)&a9);
  std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](v9, 0);
  _Unwind_Resume(a1);
}

void quasar::MetaInfo::Impl::fromJson(const void *a1@<X0>, std::string::size_type a2@<X1>, uint64_t a3@<X8>)
{
  if (a2)
  {
    quasar::PTree::PTree((quasar::PTree *)a3);
    *(void *)(a3 + 160) = 0;
    *(unsigned char *)(a3 + 64) = 0;
    *(unsigned char *)(a3 + 88) = 0;
    *(void *)(a3 + 112) = 0;
    *(void *)(a3 + 104) = 0;
    *(void *)(a3 + 96) = a3 + 104;
    *(unsigned char *)(a3 + 120) = 0;
    *(unsigned char *)(a3 + 144) = 0;
    *(void *)(a3 + 168) = 0;
    *(void *)(a3 + 152) = a3 + 160;
    if (a2 < 0x7FFFFFFFFFFFFFF8)
    {
      if (a2 >= 0x17)
      {
        uint64_t v8 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((a2 | 7) != 0x17) {
          uint64_t v8 = a2 | 7;
        }
        uint64_t v9 = v8 + 1;
        uint64_t v6 = (std::string *)operator new(v8 + 1);
        __p[0].__r_.__value_.__l.__size_ = a2;
        __p[0].__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
        __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
      }
      else
      {
        *((unsigned char *)&__p[0].__r_.__value_.__s + 23) = a2;
        uint64_t v6 = __p;
      }
      memmove(v6, a1, a2);
      v6->__r_.__value_.__s.__data_[a2] = 0;
      std::istringstream::basic_istringstream[abi:ne180100](&v11, __p, 8);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
      quasar::PTree::readJson();
    }
    std::string::__throw_length_error[abi:ne180100]();
  }
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 160) = 0u;
  uint64_t v7 = (void *)(a3 + 160);
  quasar::PTree::PTree((quasar::PTree *)a3);
  *(unsigned char *)(a3 + 64) = 0;
  *(void *)(a3 + 104) = 0;
  *(unsigned char *)(a3 + 88) = 0;
  *(void *)(a3 + 112) = 0;
  *(void *)(a3 + 96) = a3 + 104;
  *(unsigned char *)(a3 + 120) = 0;
  *(unsigned char *)(a3 + 144) = 0;
  *uint64_t v7 = 0;
  *(void *)(a3 + 168) = 0;
  *(void *)(a3 + 152) = v7;
}

void sub_1B21467DC()
{
}

void sub_1B21468BC()
{
}

void sub_1B21468D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  quasar::MetaInfo::Impl::~Impl(v14);
  _Unwind_Resume(a1);
}

void quasar::MetaInfo::~MetaInfo(quasar::MetaInfo::Impl **this)
{
}

void quasar::MetaInfo::MetaInfo(quasar::MetaInfo *this, const quasar::MetaInfo *a2)
{
}

void sub_1B2146984(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1032C40AAD8FF0BLL);
  _Unwind_Resume(a1);
}

uint64_t quasar::MetaInfo::operator=(uint64_t result, uint64_t a2)
{
  if (result != a2) {
    operator new();
  }
  return result;
}

void sub_1B2146A14(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1032C40AAD8FF0BLL);
  _Unwind_Resume(a1);
}

void *quasar::MetaInfo::MetaInfo(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  *__n128 result = v2;
  return result;
}

quasar::MetaInfo::Impl **quasar::MetaInfo::operator=(quasar::MetaInfo::Impl **a1, quasar::MetaInfo::Impl **a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](a1, v3);
  return a1;
}

void quasar::MetaInfo::update(quasar::MetaInfo::Impl **this, const quasar::PTree *a2)
{
}

void quasar::MetaInfo::Impl::update(quasar::MetaInfo::Impl *this, const quasar::PTree *a2)
{
  uint64_t v4 = quasar::PTree::begin(a2);
  uint64_t v5 = quasar::PTree::end(a2);
  if (v4 != v5)
  {
    uint64_t v6 = v5;
    do
    {
      quasar::PTree::putChild((uint64_t)this, v4, v4 + 24, 1);
      v4 += 88;
    }
    while (v4 != v6);
  }
}

void quasar::MetaInfo::update(uint64_t ***this, uint64_t ***a2)
{
}

void quasar::MetaInfo::Impl::update(uint64_t **this, uint64_t **a2)
{
  quasar::MetaInfo::Impl::update((quasar::MetaInfo::Impl *)this, (const quasar::PTree *)a2);
  if (this != a2) {
    std::__tree<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::__tree_node<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,void *> *,long>>(this + 12, (long long *)a2[12], (long long *)(a2 + 13));
  }
  std::__optional_storage_base<std::vector<quasar::MetaInfo::Sense>,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::vector<quasar::MetaInfo::Sense>,false> const&>((uint64_t)(this + 8), (uint64_t)(a2 + 8));
  std::__optional_storage_base<std::vector<quasar::AlternativeSelectionSpan>,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::vector<quasar::AlternativeSelectionSpan>,false> const&>((uint64_t)(this + 15), (uint64_t)(a2 + 15));
}

void quasar::MetaInfo::replace(uint64_t *a1, uint64_t a2)
{
}

void quasar::MetaInfo::Impl::replace(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  std::string::operator=((std::string *)(a1 + 8), (const std::string *)(a2 + 8));
  if (a1 != a2) {
    std::vector<std::pair<std::string,quasar::PTree>>::__assign_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>(a1 + 32, *(std::string **)(a2 + 32), *(std::string **)(a2 + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3));
  }
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
}

uint64_t quasar::MetaInfo::get(quasar::MetaInfo *this)
{
  return *(void *)this;
}

void quasar::MetaInfo::setRomanization(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  quasar::MetaInfo::Impl::setRomanization(v2, (uint64_t)__p);
  if (SHIBYTE(v4) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B2146C30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::MetaInfo::Impl::setRomanization(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(v5, "romanization");
  quasar::PTree::PTree(v4, a2);
  quasar::PTree::putChild(a1, (uint64_t)v5, (uint64_t)v4, 1);
  quasar::PTree::~PTree((quasar::PTree *)v4);
  if (v6 < 0) {
    operator delete(v5[0]);
  }
}

void sub_1B2146CC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  quasar::PTree::~PTree((quasar::PTree *)va);
  if (*(char *)(v2 - 17) < 0) {
    operator delete(*(void **)(v2 - 40));
  }
  _Unwind_Resume(a1);
}

void quasar::MetaInfo::hasRomanization(quasar::MetaInfo::Impl **this)
{
}

void quasar::MetaInfo::Impl::hasRomanization(quasar::MetaInfo::Impl *this)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "romanization");
  quasar::PTree::getChildOptional((uint64_t)this, (uint64_t)__p);
}

void sub_1B2146D54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::MetaInfo::romanization(quasar::MetaInfo::Impl **this)
{
}

void quasar::MetaInfo::Impl::romanization(quasar::MetaInfo::Impl *this)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "romanization");
  quasar::PTree::getStringOptional((uint64_t)this, (uint64_t)__p);
}

void sub_1B2146DD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::MetaInfo::json(quasar::MetaInfo::Impl **this@<X0>, void *a2@<X8>)
{
}

void quasar::MetaInfo::Impl::json(quasar::MetaInfo::Impl *this@<X0>, void *a2@<X8>)
{
  int v5 = *(_DWORD *)this;
  if (*((char *)this + 31) < 0) {
    std::string::__init_copy_ctor_external(&v6, *((const std::string::value_type **)this + 1), *((void *)this + 2));
  }
  else {
    std::string v6 = *(std::string *)((char *)this + 8);
  }
  memset(&v7, 0, sizeof(v7));
  std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>(&v7, *((void *)this + 4), *((void *)this + 5), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((void *)this + 5) - *((void *)this + 4)) >> 3));
  char v8 = *((unsigned char *)this + 56);
  quasar::MetaInfo::Impl::updatePTreeWithStructuredPredictions(this, (quasar::PTree *)&v5);
  quasar::MetaInfo::Impl::updatePTreeWithStructuredPredictionAlignments(this, (quasar::PTree *)&v5);
  if (!quasar::PTree::empty((quasar::PTree *)&v5))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v4);
    quasar::PTree::writeJson();
  }
  std::string::basic_string[abi:ne180100]<0>(a2, "");
  quasar::PTree::~PTree((quasar::PTree *)&v5);
}

void sub_1B214701C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  std::ostringstream::~ostringstream((uint64_t)va);
  quasar::PTree::~PTree((quasar::PTree *)(v3 - 96));
  _Unwind_Resume(a1);
}

void quasar::MetaInfo::setAmbiguityAnnotatorSenses(quasar::MetaInfo::Impl **a1, long long *a2)
{
  uint64_t v2 = *a1;
  long long v3 = *a2;
  uint64_t v4 = *((void *)a2 + 2);
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  quasar::MetaInfo::Impl::setAmbiguityAnnotatorSenses(v2, &v3);
  int v5 = (void **)&v3;
  std::vector<quasar::MetaInfo::Sense>::__destroy_vector::operator()[abi:ne180100](&v5);
}

void sub_1B21470CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<quasar::MetaInfo::Sense>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void quasar::MetaInfo::Impl::setAmbiguityAnnotatorSenses(quasar::MetaInfo::Impl *a1, void *a2)
{
  if (*a2 != a2[1])
  {
    quasar::MetaInfo::Impl::eraseSenses(a1);
    std::optional<std::vector<quasar::MetaInfo::Sense>>::operator=[abi:ne180100]<std::vector<quasar::MetaInfo::Sense>,void>((uint64_t)a1 + 64, (uint64_t)a2);
    quasar::MetaInfo::Impl::updatePTreeWithAmbiguityAnnotatorSenses(a1);
  }
}

BOOL quasar::MetaInfo::hasSenses(quasar::MetaInfo *this)
{
  return *(unsigned char *)(*(void *)this + 88)
      && *(void *)(*(void *)this + 64) != *(void *)(*(void *)this + 72);
}

uint64_t quasar::MetaInfo::getSenses(quasar::MetaInfo *this)
{
  return *(void *)this + 64;
}

void quasar::MetaInfo::eraseSenses(quasar::MetaInfo::Impl **this)
{
}

void quasar::MetaInfo::Impl::eraseSenses(quasar::MetaInfo::Impl *this)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "syn");
  quasar::PTree::erase((uint64_t)this, (unsigned __int8 *)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "def");
  quasar::PTree::erase((uint64_t)this, (unsigned __int8 *)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "defLocale");
  quasar::PTree::erase((uint64_t)this, (unsigned __int8 *)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "source match");
  quasar::PTree::erase((uint64_t)this, (unsigned __int8 *)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "source index");
  quasar::PTree::erase((uint64_t)this, (unsigned __int8 *)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "source length");
  quasar::PTree::erase((uint64_t)this, (unsigned __int8 *)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "target match");
  quasar::PTree::erase((uint64_t)this, (unsigned __int8 *)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "target index");
  quasar::PTree::erase((uint64_t)this, (unsigned __int8 *)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "target length");
  quasar::PTree::erase((uint64_t)this, (unsigned __int8 *)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "att");
  quasar::PTree::erase((uint64_t)this, (unsigned __int8 *)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "formality");
  quasar::PTree::erase((uint64_t)this, (unsigned __int8 *)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "gender");
  quasar::PTree::erase((uint64_t)this, (unsigned __int8 *)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "reg");
  quasar::PTree::erase((uint64_t)this, (unsigned __int8 *)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "explicit");
  quasar::PTree::erase((uint64_t)this, (unsigned __int8 *)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "senses");
  quasar::PTree::erase((uint64_t)this, (unsigned __int8 *)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (*((unsigned char *)this + 88))
  {
    __p[0] = (char *)this + 64;
    std::vector<quasar::MetaInfo::Sense>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    *((unsigned char *)this + 88) = 0;
  }
}

void sub_1B2147458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::MetaInfo::setStructuredPrediction(quasar::MetaInfo::Impl **a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  int v5 = *(_DWORD *)(a2 + 24);
  long long v6 = *(_OWORD *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 4std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = 0;
  *(void *)(a2 + 48) = 0;
  quasar::MetaInfo::Impl::setStructuredPrediction(v2, (const void **)__p);
  char v8 = (void **)&v6;
  std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__destroy_vector::operator()[abi:ne180100](&v8);
  if (SHIBYTE(v4) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B2147538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void quasar::MetaInfo::Impl::setStructuredPrediction(quasar::MetaInfo::Impl *a1, const void **a2)
{
  uint64_t v4 = (uint64_t **)((char *)a1 + 96);
  uint64_t v5 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)a1 + 96, a2);
  uint64_t v6 = v5;
  if ((quasar::MetaInfo::Impl *)((char *)a1 + 104) == (quasar::MetaInfo::Impl *)v5)
  {
    std::__tree<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>>>::__emplace_hint_unique_key_args<std::string,std::string&,quasar::MetaInfo::StructuredPrediction>(v4, (uint64_t *)v5, a2, (long long *)a2, (long long *)a2);
    quasar::MetaInfo::Impl::updatePTreeWithStructuredPredictions(a1, a1);
  }
  else
  {
    uint64_t v7 = (void **)(v5 + 56);
    if (*(char *)(v5 + 79) < 0) {
      operator delete(*v7);
    }
    long long v8 = *(_OWORD *)a2;
    *(void *)(v6 + 72) = a2[2];
    *(_OWORD *)uint64_t v7 = v8;
    *((unsigned char *)a2 + 23) = 0;
    *(unsigned char *)a2 = 0;
    *(_DWORD *)(v6 + 8std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = *((_DWORD *)a2 + 6);
    std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__vdeallocate((void **)(v6 + 88));
    *(_OWORD *)(v6 + 88) = *((_OWORD *)a2 + 2);
    *(void *)(v6 + 104) = a2[6];
    a2[4] = 0;
    a2[5] = 0;
    a2[6] = 0;
  }
}

BOOL quasar::MetaInfo::hasStructuredPrediction(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *a1;
  v5[0] = a2;
  v5[1] = a3;
  return std::__tree<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>>>::__count_multi<std::string_view>(v3 + 96, (uint64_t)v5) != 0;
}

uint64_t quasar::MetaInfo::structuredPrediction(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *a1;
  v6[0] = a2;
  v6[1] = a3;
  uint64_t v4 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string_view>(v3 + 96, (uint64_t)v6);
  if (v3 + 104 == v4) {
    return 0;
  }
  else {
    return v4 + 56;
  }
}

void quasar::MetaInfo::eraseStructuredPrediction(uint64_t *a1, uint64_t a2, uint64_t a3)
{
}

void quasar::MetaInfo::Impl::eraseStructuredPrediction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v7[0] = a2;
  v7[1] = a3;
  uint64_t v4 = (uint64_t **)(a1 + 96);
  uint64_t v5 = (uint64_t *)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string_view>(a1 + 96, (uint64_t)v7);
  if ((uint64_t *)(a1 + 104) != v5)
  {
    uint64_t v6 = v5;
    std::__tree<std::string>::__remove_node_pointer(v4, v5);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::MetaInfo::StructuredPrediction>,0>((uint64_t)(v6 + 4));
    operator delete(v6);
  }
}

void quasar::MetaInfo::setAlternativeSelectionSpans(uint64_t *a1, long long *a2)
{
  uint64_t v2 = *a1;
  long long v3 = *a2;
  uint64_t v4 = *((void *)a2 + 2);
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  std::optional<std::vector<quasar::AlternativeSelectionSpan>>::operator=[abi:ne180100]<std::vector<quasar::AlternativeSelectionSpan>,void>(v2 + 120, (uint64_t)&v3);
  uint64_t v5 = (void **)&v3;
  std::vector<quasar::AlternativeSelectionSpan>::__destroy_vector::operator()[abi:ne180100](&v5);
}

void sub_1B214777C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<quasar::AlternativeSelectionSpan>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t quasar::MetaInfo::getAlternativeSelectionSpans(quasar::MetaInfo *this)
{
  return *(void *)this + 120;
}

void quasar::MetaInfo::setStructurePredictionToSourceTokenAlignments(uint64_t *a1, uint64_t a2, uint64_t a3, long long *a4)
{
  uint64_t v4 = *a1;
  long long v5 = *a4;
  uint64_t v6 = *((void *)a4 + 2);
  *((void *)a4 + 1) = 0;
  *((void *)a4 + 2) = 0;
  *(void *)a4 = 0;
  quasar::MetaInfo::Impl::setStructurePredictionToSourceTokenAlignments(v4, a2, a3, (uint64_t)&v5);
  uint64_t v7 = (void **)&v5;
  std::vector<std::map<int,quasar::Expansion::SegmentTypeData>>::__destroy_vector::operator()[abi:ne180100](&v7);
}

void sub_1B21477FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::map<int,quasar::Expansion::SegmentTypeData>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void quasar::MetaInfo::Impl::setStructurePredictionToSourceTokenAlignments(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[0] = a2;
  v9[1] = a3;
  uint64_t v6 = (uint64_t **)(a1 + 152);
  uint64_t v7 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string_view>(a1 + 152, (uint64_t)v9);
  uint64_t v8 = v7;
  if (a1 + 160 == v7)
  {
    std::__tree<std::__value_type<std::string,std::vector<std::set<int>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::set<int>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::vector<std::set<int>>>>>::__emplace_hint_unique_impl<std::string_view &,std::vector<std::set<int>>>(v6, (uint64_t *)v7, (uint64_t)v9, a4);
  }
  else
  {
    std::vector<std::set<int>>::__vdeallocate((void **)(v7 + 56));
    *(_OWORD *)(v8 + 56) = *(_OWORD *)a4;
    *(void *)(v8 + 72) = *(void *)(a4 + 16);
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
  }
}

void quasar::MetaInfo::eraseStructuredPredictionToSourceTokenAlignments(uint64_t *a1, uint64_t a2, uint64_t a3)
{
}

void quasar::MetaInfo::Impl::eraseStructuredPredictionToSourceTokenAlignments(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v7[0] = a2;
  v7[1] = a3;
  uint64_t v4 = (uint64_t **)(a1 + 152);
  long long v5 = (uint64_t *)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string_view>(a1 + 152, (uint64_t)v7);
  if ((uint64_t *)(a1 + 160) != v5)
  {
    uint64_t v6 = v5;
    std::__tree<std::string>::__remove_node_pointer(v4, v5);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::set<int>>>,0>((uint64_t)(v6 + 4));
    operator delete(v6);
  }
}

void quasar::MetaInfo::Impl::extractDataFromPTree(quasar::MetaInfo::Impl *this)
{
}

char *quasar::MetaInfo::Impl::setStructuredPredictionFromPTree(quasar::MetaInfo::Impl *this)
{
  uint64_t v2 = (void *)((char *)this + 104);
  std::__tree<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>>>::destroy((uint64_t)this + 96, *((void **)this + 13));
  *((void *)this + 12) = v2;
  *((void *)this + 14) = 0;
  *uint64_t v2 = 0;
  uint64_t v3 = quasar::PTree::begin(this);
  __n128 result = (char *)quasar::PTree::end(this);
  for (signed int i = result; (char *)v3 != i; v3 += 88)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      uint64_t v6 = *(char **)v3;
      uint64_t v5 = *(void *)(v3 + 8);
    }
    else
    {
      uint64_t v5 = *(unsigned __int8 *)(v3 + 23);
      uint64_t v6 = (char *)v3;
    }
    if (v5 >= 13)
    {
      uint64_t v7 = &v6[v5];
      __n128 result = v6;
      do
      {
        __n128 result = (char *)memchr(result, 95, v5 - 12);
        if (!result) {
          break;
        }
        if (*(void *)result == 0x616E7265746C615FLL && *(void *)(result + 5) == 0x7365766974616E72)
        {
          if (result != v7 && result - v6 != -1)
          {
            std::string::basic_string(&v11, (const std::string *)v3, 0, result - v6, (std::allocator<char> *)__p);
            std::string::basic_string[abi:ne180100]<0>(__p, "spans");
            quasar::PTree::getChildOptional(v3 + 24, (uint64_t)__p);
          }
          break;
        }
        ++result;
        uint64_t v5 = v7 - result;
      }
      while (v7 - result >= 13);
    }
  }
  return result;
}

void sub_1B2147FC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42)
{
  quasar::LmePackedWord::~LmePackedWord((quasar::LmePackedWord *)&a22);
  if (a42 && a41 < 0) {
    operator delete(__p);
  }
  if (*(unsigned char *)(v42 - 144) && *(char *)(v42 - 145) < 0) {
    operator delete(*(void **)(v42 - 168));
  }
  a16 = (void *)(v42 - 136);
  std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  if (*(char *)(v42 - 89) < 0) {
    operator delete(*(void **)(v42 - 112));
  }
  _Unwind_Resume(a1);
}

void quasar::MetaInfo::Impl::setAmbiguityAnnotatorSensesFromPTree(quasar::MetaInfo::Impl *this)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "senses");
  quasar::PTree::getChildOptional((uint64_t)this, (uint64_t)__p);
}

void sub_1B21482A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  std::string __p = (void *)(v61 - 88);
  std::vector<quasar::MetaInfo::Sense>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void quasar::MetaInfo::Impl::setPhrasebookSenseFromPTree(quasar::MetaInfo::Impl *this)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  int v2 = *(_DWORD *)this;
  if (*((char *)this + 31) < 0) {
    std::string::__init_copy_ctor_external(&v3, *((const std::string::value_type **)this + 1), *((void *)this + 2));
  }
  else {
    std::string v3 = *(std::string *)((char *)this + 8);
  }
  memset(&v4, 0, sizeof(v4));
  std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>(&v4, *((void *)this + 4), *((void *)this + 5), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((void *)this + 5) - *((void *)this + 4)) >> 3));
  char v5 = *((unsigned char *)this + 56);
}

void sub_1B21484A0(_Unwind_Exception *a1)
{
}

void quasar::MetaInfo::Impl::updatePTreeWithStructuredPredictions(quasar::MetaInfo::Impl *this, quasar::PTree *a2)
{
  int v2 = (char *)*((void *)this + 12);
  uint64_t v15 = (char *)this + 104;
  if (v2 != (char *)this + 104)
  {
    do
    {
      if (*((void *)v2 + 11) != *((void *)v2 + 12))
      {
        quasar::PTree::PTree((quasar::PTree *)v25);
        uint64_t v4 = *((void *)v2 + 11);
        uint64_t v3 = *((void *)v2 + 12);
        while (v4 != v3)
        {
          quasar::PTree::PTree((quasar::PTree *)v24);
          quasar::PTree::PTree(&v18, v4);
          quasar::PTree::putChild((uint64_t)v24, (uint64_t)(v2 + 56), (uint64_t)&v18, 1);
          quasar::PTree::~PTree((quasar::PTree *)&v18);
          std::operator+<char>();
          quasar::PTree::PTree(&v18, v4 + 24);
          quasar::PTree::putChild((uint64_t)v24, (uint64_t)__p, (uint64_t)&v18, 1);
          quasar::PTree::~PTree((quasar::PTree *)&v18);
          if (v17 < 0) {
            operator delete(__p[0]);
          }
          std::string::basic_string[abi:ne180100]<0>(__p, "source");
          quasar::MetaInfo::Impl::toPTree((int *)(v4 + 48), (quasar::PTree *)&v18);
          quasar::PTree::putChild((uint64_t)v24, (uint64_t)__p, (uint64_t)&v18, 1);
          quasar::PTree::~PTree((quasar::PTree *)&v18);
          if (v17 < 0) {
            operator delete(__p[0]);
          }
          if (*(void *)(v4 + 56) != *(void *)(v4 + 64))
          {
            quasar::PTree::PTree((quasar::PTree *)&v18);
            uint64_t v6 = *(int **)(v4 + 56);
            char v5 = *(int **)(v4 + 64);
            while (v6 != v5)
            {
              quasar::MetaInfo::Impl::toPTree(v6, (quasar::PTree *)__p);
              quasar::PTree::addChild((quasar::PTree *)&v18, (const quasar::PTree *)__p);
              quasar::PTree::~PTree((quasar::PTree *)__p);
              v6 += 2;
            }
            std::string::basic_string[abi:ne180100]<0>(__p, "projections");
            quasar::PTree::putChild((uint64_t)v24, (uint64_t)__p, (uint64_t)&v18, 1);
            if (v17 < 0) {
              operator delete(__p[0]);
            }
            quasar::PTree::~PTree((quasar::PTree *)&v18);
          }
          quasar::PTree::addChild((quasar::PTree *)v25, (const quasar::PTree *)v24);
          quasar::PTree::~PTree((quasar::PTree *)v24);
          v4 += 80;
        }
        quasar::PTree::PTree((quasar::PTree *)v24);
        std::string::basic_string[abi:ne180100]<0>(__p, "group");
        unsigned int v7 = *((_DWORD *)v2 + 20);
        LODWORD(v18) = quasar::getType((quasar *)v7);
        std::to_string(&v19, v7);
        uint64_t v20 = 0;
        uint64_t v21 = 0;
        uint64_t v22 = 0;
        char v23 = 1;
        quasar::PTree::putChild((uint64_t)v24, (uint64_t)__p, (uint64_t)&v18, 1);
        quasar::PTree::~PTree((quasar::PTree *)&v18);
        if (v17 < 0) {
          operator delete(__p[0]);
        }
        std::string::basic_string[abi:ne180100]<0>(&v18, "spans");
        quasar::PTree::putChild((uint64_t)v24, (uint64_t)&v18, (uint64_t)v25, 1);
        if (v19.__r_.__value_.__s.__data_[15] < 0) {
          operator delete(v18);
        }
        if (v2[79] >= 0) {
          size_t v8 = v2[79];
        }
        else {
          size_t v8 = *((void *)v2 + 8);
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v18, v8 + 13);
        if (v19.__r_.__value_.__s.__data_[15] >= 0) {
          uint64_t v9 = &v18;
        }
        else {
          uint64_t v9 = v18;
        }
        if (v8)
        {
          if (v2[79] >= 0) {
            uint64_t v10 = v2 + 56;
          }
          else {
            uint64_t v10 = (const void *)*((void *)v2 + 7);
          }
          memmove(v9, v10, v8);
        }
        strcpy((char *)v9 + v8, "_alternatives");
        quasar::PTree::putChild((uint64_t)a2, (uint64_t)&v18, (uint64_t)v24, 1);
        if (v19.__r_.__value_.__s.__data_[15] < 0) {
          operator delete(v18);
        }
        quasar::PTree::~PTree((quasar::PTree *)v24);
        quasar::PTree::~PTree((quasar::PTree *)v25);
      }
      std::string v11 = (char *)*((void *)v2 + 1);
      if (v11)
      {
        do
        {
          uint64_t v12 = v11;
          std::string v11 = *(char **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          uint64_t v12 = (char *)*((void *)v2 + 2);
          BOOL v13 = *(void *)v12 == (void)v2;
          int v2 = v12;
        }
        while (!v13);
      }
      int v2 = v12;
    }
    while (v12 != v15);
  }
}

void sub_1B21488A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  quasar::PTree::~PTree((quasar::PTree *)&a34);
  quasar::PTree::~PTree((quasar::PTree *)(v34 - 152));
  _Unwind_Resume(a1);
}

void quasar::MetaInfo::Impl::updatePTreeWithStructuredPredictionAlignments(quasar::MetaInfo::Impl *this, quasar::PTree *a2)
{
  int v2 = (char *)*((void *)this + 19);
  uint64_t v3 = (char *)this + 160;
  if (v2 != (char *)this + 160)
  {
    do
    {
      if (*((void *)v2 + 7) != *((void *)v2 + 8))
      {
        quasar::PTree::PTree((quasar::PTree *)v25);
        char v5 = (void *)*((void *)v2 + 7);
        uint64_t v4 = (void *)*((void *)v2 + 8);
        while (v5 != v4)
        {
          quasar::PTree::PTree((quasar::PTree *)__p);
          uint64_t v6 = (void *)*v5;
          if ((void *)*v5 != v5 + 1)
          {
            do
            {
              unsigned int v7 = *((_DWORD *)v6 + 7);
              int Type = quasar::getType((quasar *)v7);
              std::to_string(&v18, v7);
              uint64_t v19 = 0;
              uint64_t v20 = 0;
              uint64_t v21 = 0;
              char v22 = 1;
              quasar::PTree::addChild((quasar::PTree *)__p, (const quasar::PTree *)&Type);
              quasar::PTree::~PTree((quasar::PTree *)&Type);
              size_t v8 = (void *)v6[1];
              if (v8)
              {
                do
                {
                  uint64_t v9 = v8;
                  size_t v8 = (void *)*v8;
                }
                while (v8);
              }
              else
              {
                do
                {
                  uint64_t v9 = (void *)v6[2];
                  BOOL v10 = *v9 == (void)v6;
                  uint64_t v6 = v9;
                }
                while (!v10);
              }
              uint64_t v6 = v9;
            }
            while (v9 != v5 + 1);
          }
          quasar::PTree::addChild((quasar::PTree *)v25, (const quasar::PTree *)__p);
          quasar::PTree::~PTree((quasar::PTree *)__p);
          v5 += 3;
        }
        if (v2[55] >= 0) {
          size_t v11 = v2[55];
        }
        else {
          size_t v11 = *((void *)v2 + 5);
        }
        std::string::basic_string[abi:ne180100]((uint64_t)__p, v11 + 24);
        if (v24 >= 0) {
          uint64_t v12 = __p;
        }
        else {
          uint64_t v12 = (void **)__p[0];
        }
        if (v11)
        {
          if (v2[55] >= 0) {
            BOOL v13 = v2 + 32;
          }
          else {
            BOOL v13 = (const void *)*((void *)v2 + 4);
          }
          memmove(v12, v13, v11);
        }
        strcpy((char *)v12 + v11, "_source_token_alignments");
        quasar::PTree::putChild((uint64_t)a2, (uint64_t)__p, (uint64_t)v25, 1);
        if (v24 < 0) {
          operator delete(__p[0]);
        }
        quasar::PTree::~PTree((quasar::PTree *)v25);
      }
      uint64_t v14 = (char *)*((void *)v2 + 1);
      if (v14)
      {
        do
        {
          uint64_t v15 = v14;
          uint64_t v14 = *(char **)v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          uint64_t v15 = (char *)*((void *)v2 + 2);
          BOOL v10 = *(void *)v15 == (void)v2;
          int v2 = v15;
        }
        while (!v10);
      }
      int v2 = v15;
    }
    while (v15 != v3);
  }
}

void sub_1B2148B88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  quasar::PTree::~PTree((quasar::PTree *)&a29);
  _Unwind_Resume(a1);
}

uint64_t std::optional<std::vector<quasar::MetaInfo::Sense>>::operator=[abi:ne180100]<std::vector<quasar::MetaInfo::Sense>,void>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    std::vector<quasar::MetaInfo::Sense>::__vdeallocate((void **)a1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
  return a1;
}

void quasar::MetaInfo::Impl::updatePTreeWithAmbiguityAnnotatorSenses(quasar::MetaInfo::Impl *this)
{
  quasar::PTree::PTree((quasar::PTree *)v15);
  int v2 = (char *)*((void *)this + 8);
  uint64_t v3 = (char *)*((void *)this + 9);
  size_t v8 = this;
  if (v2 != v3)
  {
    uint64_t v4 = v2 + 287;
    do
    {
      quasar::PTree::PTree((quasar::PTree *)v13);
      std::string::basic_string[abi:ne180100]<0>(__p, "syn");
      quasar::PTree::PTree(v10, v4 - 287);
      quasar::PTree::putChild((uint64_t)v13, (uint64_t)__p, (uint64_t)v10, 1);
      quasar::PTree::~PTree((quasar::PTree *)v10);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "def");
      quasar::PTree::PTree(v10, v4 - 263);
      quasar::PTree::putChild((uint64_t)v13, (uint64_t)__p, (uint64_t)v10, 1);
      quasar::PTree::~PTree((quasar::PTree *)v10);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "defLocale");
      quasar::PTree::PTree(v10, v4 - 239);
      quasar::PTree::putChild((uint64_t)v13, (uint64_t)__p, (uint64_t)v10, 1);
      quasar::PTree::~PTree((quasar::PTree *)v10);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "source match");
      quasar::PTree::PTree(v10, v4 - 215);
      quasar::PTree::putChild((uint64_t)v13, (uint64_t)__p, (uint64_t)v10, 1);
      quasar::PTree::~PTree((quasar::PTree *)v10);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "source index");
      std::to_string(&v9, *(_DWORD *)(v4 - 191));
      quasar::PTree::PTree(v10, &v9);
      quasar::PTree::putChild((uint64_t)v13, (uint64_t)__p, (uint64_t)v10, 1);
      quasar::PTree::~PTree((quasar::PTree *)v10);
      if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v9.__r_.__value_.__l.__data_);
      }
      if (v12 < 0) {
        operator delete(__p[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "source length");
      std::to_string(&v9, *(_DWORD *)(v4 - 187));
      quasar::PTree::PTree(v10, &v9);
      quasar::PTree::putChild((uint64_t)v13, (uint64_t)__p, (uint64_t)v10, 1);
      quasar::PTree::~PTree((quasar::PTree *)v10);
      if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v9.__r_.__value_.__l.__data_);
      }
      if (v12 < 0) {
        operator delete(__p[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "target match");
      char v5 = v4 - 183;
      quasar::PTree::PTree(v10, v4 - 183);
      quasar::PTree::putChild((uint64_t)v13, (uint64_t)__p, (uint64_t)v10, 1);
      quasar::PTree::~PTree((quasar::PTree *)v10);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "target index");
      std::to_string(&v9, *(_DWORD *)(v4 - 159));
      quasar::PTree::PTree(v10, &v9);
      quasar::PTree::putChild((uint64_t)v13, (uint64_t)__p, (uint64_t)v10, 1);
      quasar::PTree::~PTree((quasar::PTree *)v10);
      if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v9.__r_.__value_.__l.__data_);
      }
      if (v12 < 0) {
        operator delete(__p[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "target length");
      std::to_string(&v9, *(_DWORD *)(v4 - 155));
      quasar::PTree::PTree(v10, &v9);
      quasar::PTree::putChild((uint64_t)v13, (uint64_t)__p, (uint64_t)v10, 1);
      quasar::PTree::~PTree((quasar::PTree *)v10);
      if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v9.__r_.__value_.__l.__data_);
      }
      if (v12 < 0) {
        operator delete(__p[0]);
      }
      if (*(v4 - 127))
      {
        if (*(v4 - 128) < 0)
        {
          if (!*(void *)(v4 - 143)) {
            goto LABEL_36;
          }
        }
        else if (!*(v4 - 128))
        {
          goto LABEL_36;
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "att");
        quasar::PTree::PTree(v10, v4 - 151);
        quasar::PTree::putChild((uint64_t)v13, (uint64_t)__p, (uint64_t)v10, 1);
        quasar::PTree::~PTree((quasar::PTree *)v10);
        if (v12 < 0) {
          operator delete(__p[0]);
        }
      }
LABEL_36:
      if (!*(v4 - 95)) {
        goto LABEL_43;
      }
      if (*(v4 - 96) < 0)
      {
        if (!*(void *)(v4 - 111)) {
          goto LABEL_43;
        }
      }
      else if (!*(v4 - 96))
      {
        goto LABEL_43;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "formality");
      quasar::PTree::PTree(v10, v4 - 119);
      quasar::PTree::putChild((uint64_t)v13, (uint64_t)__p, (uint64_t)v10, 1);
      quasar::PTree::~PTree((quasar::PTree *)v10);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
LABEL_43:
      if (!*(v4 - 63)) {
        goto LABEL_50;
      }
      if (*(v4 - 64) < 0)
      {
        if (!*(void *)(v4 - 79)) {
          goto LABEL_50;
        }
      }
      else if (!*(v4 - 64))
      {
        goto LABEL_50;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "gender");
      quasar::PTree::PTree(v10, v4 - 87);
      quasar::PTree::putChild((uint64_t)v13, (uint64_t)__p, (uint64_t)v10, 1);
      quasar::PTree::~PTree((quasar::PTree *)v10);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
LABEL_50:
      if (!*(v4 - 31)) {
        goto LABEL_57;
      }
      if (*(v4 - 32) < 0)
      {
        if (!*(void *)(v4 - 47)) {
          goto LABEL_57;
        }
      }
      else if (!*(v4 - 32))
      {
        goto LABEL_57;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "reg");
      quasar::PTree::PTree(v10, v4 - 55);
      quasar::PTree::putChild((uint64_t)v13, (uint64_t)__p, (uint64_t)v10, 1);
      quasar::PTree::~PTree((quasar::PTree *)v10);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
LABEL_57:
      if (v4[1])
      {
        int v6 = *v4;
        if (v6 < 0)
        {
          if (*(void *)(v4 - 15) == 4)
          {
            unsigned int v7 = *(char **)(v4 - 23);
LABEL_63:
            if (*(_DWORD *)v7 == 1702195828)
            {
              std::string::basic_string[abi:ne180100]<0>(__p, "explicit");
              quasar::PTree::PTree(v10, v4 - 23);
              quasar::PTree::putChild((uint64_t)v13, (uint64_t)__p, (uint64_t)v10, 1);
              quasar::PTree::~PTree((quasar::PTree *)v10);
              if (v12 < 0) {
                operator delete(__p[0]);
              }
            }
          }
        }
        else
        {
          unsigned int v7 = v4 - 23;
          if (v6 == 4) {
            goto LABEL_63;
          }
        }
      }
      quasar::PTree::addChild((quasar::PTree *)v15, (const quasar::PTree *)v13);
      quasar::PTree::~PTree((quasar::PTree *)v13);
      v4 += 296;
    }
    while (v5 + 192 != v3);
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "senses");
  quasar::PTree::putChild((uint64_t)v8, (uint64_t)v13, (uint64_t)v15, 1);
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  quasar::PTree::~PTree((quasar::PTree *)v15);
}

void sub_1B2149288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  quasar::PTree::~PTree((quasar::PTree *)(v35 - 152));
  _Unwind_Resume(a1);
}

void quasar::anonymous namespace'::getSenseFromPTree(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "syn");
  quasar::PTree::getStringOptional(a1, (uint64_t)__p);
}

void sub_1B2149B3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38)
{
  if (a22 && a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  quasar::MetaInfo::Sense::~Sense(&a38);
  if (*(unsigned char *)(v38 - 120) && *(char *)(v38 - 121) < 0) {
    operator delete(*(void **)(v38 - 144));
  }
  if (*(unsigned char *)(v38 - 88) && *(char *)(v38 - 89) < 0) {
    operator delete(*(void **)(v38 - 112));
  }
  if (*(unsigned char *)(v38 - 56))
  {
    if (*(char *)(v38 - 57) < 0) {
      operator delete(*(void **)(v38 - 80));
    }
  }
  _Unwind_Resume(a1);
}

void sub_1B2149C7C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  JUMPOUT(0x1B2149C2CLL);
}

void sub_1B2149CAC()
{
}

void sub_1B2149CB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0) {
    JUMPOUT(0x1B2149C40);
  }
  JUMPOUT(0x1B2149C44);
}

void sub_1B2149CC8()
{
}

void sub_1B2149CD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0) {
    JUMPOUT(0x1B2149C58);
  }
  JUMPOUT(0x1B2149C5CLL);
}

void sub_1B2149CE4()
{
}

void sub_1B2149CEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0) {
    JUMPOUT(0x1B2149C70);
  }
  JUMPOUT(0x1B2149C74);
}

void quasar::MetaInfo::Impl::toPTree(int *a1@<X0>, quasar::PTree *a2@<X8>)
{
  quasar::PTree::PTree(a2);
  std::string::basic_string[abi:ne180100]<0>(v6, "start");
  std::to_string(&__p, *a1);
  quasar::PTree::PTree(v5, &__p);
  quasar::PTree::putChild((uint64_t)a2, (uint64_t)v6, (uint64_t)v5, 1);
  quasar::PTree::~PTree((quasar::PTree *)v5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "end");
  std::to_string(&__p, a1[1]);
  quasar::PTree::PTree(v5, &__p);
  quasar::PTree::putChild((uint64_t)a2, (uint64_t)v6, (uint64_t)v5, 1);
  quasar::PTree::~PTree((quasar::PTree *)v5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_1B2149DFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  quasar::PTree::~PTree((quasar::PTree *)&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v16 - 17) < 0) {
    operator delete(*(void **)(v16 - 40));
  }
  quasar::PTree::~PTree(v15);
  _Unwind_Resume(a1);
}

uint64_t std::optional<std::vector<quasar::AlternativeSelectionSpan>>::operator=[abi:ne180100]<std::vector<quasar::AlternativeSelectionSpan>,void>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    std::vector<quasar::AlternativeSelectionSpan>::__vdeallocate((void **)a1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
  return a1;
}

BOOL quasar::operator<(_DWORD *a1, _DWORD *a2)
{
  if (*a1 < *a2) {
    return 1;
  }
  if (*a2 >= *a1) {
    return a1[1] < a2[1];
  }
  return 0;
}

void quasar::MetaInfo::Impl::~Impl(quasar::MetaInfo::Impl *this)
{
  std::__tree<std::__value_type<std::string,std::vector<std::set<int>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::set<int>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::vector<std::set<int>>>>>::destroy((uint64_t)this + 152, *((void **)this + 20));
  if (*((unsigned char *)this + 144))
  {
    int v2 = (void **)((char *)this + 120);
    std::vector<quasar::AlternativeSelectionSpan>::__destroy_vector::operator()[abi:ne180100](&v2);
  }
  std::__tree<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>>>::destroy((uint64_t)this + 96, *((void **)this + 13));
  if (*((unsigned char *)this + 88))
  {
    int v2 = (void **)((char *)this + 64);
    std::vector<quasar::MetaInfo::Sense>::__destroy_vector::operator()[abi:ne180100](&v2);
  }
  quasar::PTree::~PTree(this);
}

void std::__tree<std::__value_type<std::string,std::vector<std::set<int>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::set<int>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::vector<std::set<int>>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::vector<std::set<int>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::set<int>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::vector<std::set<int>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::vector<std::set<int>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::set<int>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::vector<std::set<int>>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::set<int>>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::set<int>>>,0>(uint64_t a1)
{
  int v2 = (void **)(a1 + 24);
  std::vector<std::map<int,quasar::Expansion::SegmentTypeData>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

void std::__tree<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::MetaInfo::StructuredPrediction>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::MetaInfo::StructuredPrediction>,0>(uint64_t a1)
{
  int v2 = (void **)(a1 + 56);
  std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

void std::__optional_storage_base<std::vector<quasar::MetaInfo::Sense>,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::vector<quasar::MetaInfo::Sense>,false> const&>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    if (a1 != a2 && *(unsigned char *)(a1 + 24))
    {
      uint64_t v3 = *(std::string **)(a2 + 8);
      unint64_t v4 = 0x14C1BACF914C1BADLL * (((uint64_t)v3 - *(void *)a2) >> 3);
      char v5 = *(std::string **)a2;
      std::vector<quasar::MetaInfo::Sense>::__assign_with_size[abi:ne180100]<quasar::MetaInfo::Sense*,quasar::MetaInfo::Sense*>(a1, v5, v3, v4);
    }
  }
  else if (*(unsigned char *)(a1 + 24))
  {
    int v6 = (void **)a1;
    std::vector<quasar::MetaInfo::Sense>::__destroy_vector::operator()[abi:ne180100](&v6);
    *(unsigned char *)(a1 + 24) = 0;
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    std::vector<quasar::MetaInfo::Sense>::__init_with_size[abi:ne180100]<quasar::MetaInfo::Sense*,quasar::MetaInfo::Sense*>((void *)a1, *(void *)a2, *(void *)(a2 + 8), 0x14C1BACF914C1BADLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
    *(unsigned char *)(a1 + 24) = 1;
  }
}

void std::vector<quasar::MetaInfo::Sense>::__assign_with_size[abi:ne180100]<quasar::MetaInfo::Sense*,quasar::MetaInfo::Sense*>(uint64_t a1, std::string *__str, std::string *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  std::string v9 = *(std::string **)a1;
  if (0x14C1BACF914C1BADLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    std::vector<quasar::MetaInfo::Sense>::__vdeallocate((void **)a1);
    if (a4 > 0xDD67C8A60DD67CLL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x2983759F2298375ALL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if ((unint64_t)(0x14C1BACF914C1BADLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3)) >= 0x6EB3E45306EB3ELL) {
      unint64_t v11 = 0xDD67C8A60DD67CLL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<quasar::MetaInfo::Sense>::__vallocate[abi:ne180100]((void *)a1, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::MetaInfo::Sense>,quasar::MetaInfo::Sense*,quasar::MetaInfo::Sense*,quasar::MetaInfo::Sense*>(v8, (uint64_t)__str, (uint64_t)a3, *(void *)(a1 + 8));
    goto LABEL_11;
  }
  if (0x14C1BACF914C1BADLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    BOOL v13 = (std::string *)((char *)__str + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::MetaInfo::Sense *,quasar::MetaInfo::Sense *,quasar::MetaInfo::Sense *>((int)&v17, __str, v13, v9);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::MetaInfo::Sense>,quasar::MetaInfo::Sense*,quasar::MetaInfo::Sense*,quasar::MetaInfo::Sense*>(v8, (uint64_t)v13, (uint64_t)a3, *(void *)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::MetaInfo::Sense *,quasar::MetaInfo::Sense *,quasar::MetaInfo::Sense *>((int)&v18, __str, a3, v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
      quasar::MetaInfo::Sense::~Sense((void **)(v16 - 296));
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_1B214A3BC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B214A3C4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<quasar::MetaInfo::Sense>::__vdeallocate(void **a1)
{
  uint64_t v1 = (void **)*a1;
  if (*a1)
  {
    uint64_t v3 = (void **)a1[1];
    unint64_t v4 = v1;
    if (v3 != v1)
    {
      do
        quasar::MetaInfo::Sense::~Sense(v3 - 37);
      while (v3 != v1);
      unint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *std::vector<quasar::MetaInfo::Sense>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xDD67C8A60DD67DLL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::MetaInfo::Sense>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[296 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::MetaInfo::Sense>,quasar::MetaInfo::Sense*,quasar::MetaInfo::Sense*,quasar::MetaInfo::Sense*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      quasar::MetaInfo::Sense::Sense((std::string *)(a4 + v7), (const quasar::MetaInfo::Sense *)(a2 + v7));
      v7 += 296;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1B214A4E4(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 296;
    do
    {
      quasar::MetaInfo::Sense::~Sense((void **)(v4 + v2));
      v2 -= 296;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::MetaInfo::Sense *,quasar::MetaInfo::Sense *,quasar::MetaInfo::Sense *>(int a1, std::string *__str, std::string *a3, std::string *this)
{
  char v5 = __str;
  if (__str == a3) {
    return __str;
  }
  int v6 = a3;
  do
  {
    std::string::operator=(this, v5);
    std::string::operator=(this + 1, v5 + 1);
    std::string::operator=(this + 2, v5 + 2);
    std::string::operator=(this + 3, v5 + 3);
    this[4].__r_.__value_.__r.__words[0] = v5[4].__r_.__value_.__r.__words[0];
    std::string::operator=((std::string *)((char *)this + 104), (std::string *)((char *)v5 + 104));
    this[5].__r_.__value_.__l.__size_ = v5[5].__r_.__value_.__l.__size_;
    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::string,false> const&>((std::string *)((char *)this + 136), (std::string *)((char *)v5 + 136));
    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::string,false> const&>(this + 7, v5 + 7);
    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::string,false> const&>((std::string *)((char *)this + 200), (std::string *)((char *)v5 + 200));
    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::string,false> const&>((std::string *)((char *)this + 232), (std::string *)((char *)v5 + 232));
    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::string,false> const&>(this + 11, v5 + 11);
    this = (std::string *)((char *)this + 296);
    char v5 = (std::string *)((char *)v5 + 296);
  }
  while (v5 != v6);
  return v6;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::MetaInfo::Sense>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xDD67C8A60DD67DLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(296 * a2);
}

void *std::vector<quasar::MetaInfo::Sense>::__init_with_size[abi:ne180100]<quasar::MetaInfo::Sense*,quasar::MetaInfo::Sense*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    std::vector<quasar::MetaInfo::Sense>::__vallocate[abi:ne180100](result, a4);
    __n128 result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::MetaInfo::Sense>,quasar::MetaInfo::Sense*,quasar::MetaInfo::Sense*,quasar::MetaInfo::Sense*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B214A69C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<quasar::MetaInfo::Sense>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::vector<quasar::MetaInfo::Sense>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    char v5 = v2;
    if (v4 != v2)
    {
      do
        quasar::MetaInfo::Sense::~Sense(v4 - 37);
      while (v4 != v2);
      char v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__vdeallocate(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 80;
        std::allocator<quasar::MetaInfo::StructuredPrediction::Span>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(uint64_t a1@<X0>, char *a2@<X1>, std::string *a3@<X8>)
{
  if (*(unsigned char *)(a1 + 24))
  {
    if (*(char *)(a1 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a3->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a3, a2);
  }
}

uint64_t std::__optional_destruct_base<quasar::MetaInfo::Sense,false>::__optional_destruct_base[abi:ne180100]<quasar::MetaInfo::Sense>(uint64_t result, long long *a2)
{
  long long v2 = *a2;
  *(void *)(result + 16) = *((void *)a2 + 2);
  *(_OWORD *)__n128 result = v2;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  long long v3 = *(long long *)((char *)a2 + 24);
  *(void *)(result + 4std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = *((void *)a2 + 5);
  *(_OWORD *)(result + 24) = v3;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  *((void *)a2 + 3) = 0;
  long long v4 = a2[3];
  *(void *)(result + 64) = *((void *)a2 + 8);
  *(_OWORD *)(result + 48) = v4;
  *((void *)a2 + 7) = 0;
  *((void *)a2 + 8) = 0;
  *((void *)a2 + 6) = 0;
  long long v5 = *(long long *)((char *)a2 + 72);
  *(void *)(result + 88) = *((void *)a2 + 11);
  *(_OWORD *)(result + 72) = v5;
  *((void *)a2 + 9) = 0;
  *((void *)a2 + 1std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = 0;
  *((void *)a2 + 11) = 0;
  *(void *)(result + 96) = *((void *)a2 + 12);
  long long v6 = *(long long *)((char *)a2 + 104);
  *(void *)(result + 12std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = *((void *)a2 + 15);
  *(_OWORD *)(result + 104) = v6;
  *((void *)a2 + 14) = 0;
  *((void *)a2 + 15) = 0;
  *((void *)a2 + 13) = 0;
  uint64_t v7 = *((void *)a2 + 16);
  *(unsigned char *)(result + 136) = 0;
  *(void *)(result + 128) = v7;
  *(unsigned char *)(result + 16std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = 0;
  if (*((unsigned char *)a2 + 160))
  {
    long long v8 = *(long long *)((char *)a2 + 136);
    *(void *)(result + 152) = *((void *)a2 + 19);
    *(_OWORD *)(result + 136) = v8;
    *((void *)a2 + 18) = 0;
    *((void *)a2 + 19) = 0;
    *((void *)a2 + 17) = 0;
    *(unsigned char *)(result + 16std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = 1;
  }
  *(unsigned char *)(result + 168) = 0;
  *(unsigned char *)(result + 192) = 0;
  if (*((unsigned char *)a2 + 192))
  {
    long long v9 = *(long long *)((char *)a2 + 168);
    *(void *)(result + 184) = *((void *)a2 + 23);
    *(_OWORD *)(result + 168) = v9;
    *((void *)a2 + 22) = 0;
    *((void *)a2 + 23) = 0;
    *((void *)a2 + 21) = 0;
    *(unsigned char *)(result + 192) = 1;
  }
  *(unsigned char *)(result + 20std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = 0;
  *(unsigned char *)(result + 224) = 0;
  if (*((unsigned char *)a2 + 224))
  {
    long long v10 = *(long long *)((char *)a2 + 200);
    *(void *)(result + 216) = *((void *)a2 + 27);
    *(_OWORD *)(result + 20std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = v10;
    *((void *)a2 + 26) = 0;
    *((void *)a2 + 27) = 0;
    *((void *)a2 + 25) = 0;
    *(unsigned char *)(result + 224) = 1;
  }
  *(unsigned char *)(result + 232) = 0;
  *(unsigned char *)(result + 256) = 0;
  if (*((unsigned char *)a2 + 256))
  {
    long long v11 = *(long long *)((char *)a2 + 232);
    *(void *)(result + 248) = *((void *)a2 + 31);
    *(_OWORD *)(result + 232) = v11;
    *((void *)a2 + 3std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = 0;
    *((void *)a2 + 31) = 0;
    *((void *)a2 + 29) = 0;
    *(unsigned char *)(result + 256) = 1;
  }
  *(unsigned char *)(result + 264) = 0;
  *(unsigned char *)(result + 288) = 0;
  if (*((unsigned char *)a2 + 288))
  {
    long long v12 = *(long long *)((char *)a2 + 264);
    *(void *)(result + 28std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = *((void *)a2 + 35);
    *(_OWORD *)(result + 264) = v12;
    *((void *)a2 + 34) = 0;
    *((void *)a2 + 35) = 0;
    *((void *)a2 + 33) = 0;
    *(unsigned char *)(result + 288) = 1;
  }
  *(unsigned char *)(result + 296) = 1;
  return result;
}

std::string *quasar::MetaInfo::Sense::Sense(std::string *this, const quasar::MetaInfo::Sense *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(_OWORD *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v6 = *((_OWORD *)a2 + 3);
    this[2].__r_.__value_.__r.__words[2] = *((void *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v6;
  }
  if (*((char *)a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(this + 3, *((const std::string::value_type **)a2 + 9), *((void *)a2 + 10));
  }
  else
  {
    long long v7 = *(_OWORD *)((char *)a2 + 72);
    this[3].__r_.__value_.__r.__words[2] = *((void *)a2 + 11);
    *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = v7;
  }
  this[4].__r_.__value_.__r.__words[0] = *((void *)a2 + 12);
  if (*((char *)a2 + 127) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 104), *((const std::string::value_type **)a2 + 13), *((void *)a2 + 14));
  }
  else
  {
    long long v8 = *(_OWORD *)((char *)a2 + 104);
    this[5].__r_.__value_.__r.__words[0] = *((void *)a2 + 15);
    *(_OWORD *)&this[4].__r_.__value_.__r.__words[1] = v8;
  }
  this[5].__r_.__value_.__l.__size_ = *((void *)a2 + 16);
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)this + 136), (long long *)((char *)a2 + 136));
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](this + 7, (long long *)((char *)a2 + 168));
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)this + 200), (long long *)((char *)a2 + 200));
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)this + 232), (long long *)((char *)a2 + 232));
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](this + 11, (long long *)((char *)a2 + 264));
  return this;
}

void sub_1B214AB10(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 95) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void quasar::MetaInfo::Sense::~Sense(void **this)
{
  if (*((unsigned char *)this + 288) && *((char *)this + 287) < 0) {
    operator delete(this[33]);
  }
  if (*((unsigned char *)this + 256) && *((char *)this + 255) < 0) {
    operator delete(this[29]);
  }
  if (*((unsigned char *)this + 224) && *((char *)this + 223) < 0) {
    operator delete(this[25]);
  }
  if (*((unsigned char *)this + 192) && *((char *)this + 191) < 0) {
    operator delete(this[21]);
  }
  if (*((unsigned char *)this + 160) && *((char *)this + 159) < 0) {
    operator delete(this[17]);
  }
  if (*((char *)this + 127) < 0) {
    operator delete(this[13]);
  }
  if (*((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

quasar::MetaInfo::Impl *std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](quasar::MetaInfo::Impl **a1, quasar::MetaInfo::Impl *a2)
{
  __n128 result = *a1;
  *a1 = a2;
  if (result)
  {
    quasar::MetaInfo::Impl::~Impl(result);
    JUMPOUT(0x1B3EA8670);
  }
  return result;
}

uint64_t quasar::MetaInfo::Impl::Impl(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = 0;
  *(void *)(a1 + 48) = 0;
  std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>((std::string *)(a1 + 32), *(void *)(a2 + 32), *(void *)(a2 + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3));
  char v5 = *(unsigned char *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 56) = v5;
  *(unsigned char *)(a1 + 88) = 0;
  if (*(unsigned char *)(a2 + 88))
  {
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 72) = 0;
    *(void *)(a1 + 8std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = 0;
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 8std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = *(void *)(a2 + 80);
    *(void *)(a2 + 64) = 0;
    *(void *)(a2 + 72) = 0;
    *(void *)(a2 + 8std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = 0;
    *(unsigned char *)(a1 + 88) = 1;
  }
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  long long v6 = (void *)(a2 + 104);
  uint64_t v7 = *(void *)(a2 + 104);
  *(void *)(a1 + 104) = v7;
  uint64_t v8 = a1 + 104;
  uint64_t v9 = *(void *)(a2 + 112);
  *(void *)(a1 + 112) = v9;
  if (v9)
  {
    *(void *)(v7 + 16) = v8;
    *(void *)(a2 + 96) = v6;
    *long long v6 = 0;
    *(void *)(a2 + 112) = 0;
  }
  else
  {
    *(void *)(a1 + 96) = v8;
  }
  *(unsigned char *)(a1 + 12std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = 0;
  *(unsigned char *)(a1 + 144) = 0;
  if (*(unsigned char *)(a2 + 144))
  {
    *(void *)(a1 + 12std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = 0;
    *(void *)(a1 + 128) = 0;
    *(void *)(a1 + 136) = 0;
    *(_OWORD *)(a1 + 12std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = *(_OWORD *)(a2 + 120);
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(void *)(a2 + 12std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = 0;
    *(void *)(a2 + 128) = 0;
    *(void *)(a2 + 136) = 0;
    *(unsigned char *)(a1 + 144) = 1;
  }
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  long long v10 = (void *)(a2 + 160);
  uint64_t v11 = *(void *)(a2 + 160);
  *(void *)(a1 + 16std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = v11;
  uint64_t v12 = a1 + 160;
  uint64_t v13 = *(void *)(a2 + 168);
  *(void *)(a1 + 168) = v13;
  if (v13)
  {
    *(void *)(v11 + 16) = v12;
    *(void *)(a2 + 152) = v10;
    *long long v10 = 0;
    *(void *)(a2 + 168) = 0;
  }
  else
  {
    *(void *)(a1 + 152) = v12;
  }
  return a1;
}

void sub_1B214AED0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

quasar::MetaInfo::Impl *quasar::MetaInfo::Impl::Impl(quasar::MetaInfo::Impl *this, const quasar::MetaInfo::Impl *a2)
{
  *(_DWORD *)this = *(_DWORD *)a2;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else
  {
    long long v4 = *(_OWORD *)((char *)a2 + 8);
    *((void *)this + 3) = *((void *)a2 + 3);
    *(_OWORD *)((char *)this + 8) = v4;
  }
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>((std::string *)((char *)this + 32), *((void *)a2 + 4), *((void *)a2 + 5), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 3));
  *((unsigned char *)this + 56) = *((unsigned char *)a2 + 56);
  std::__optional_copy_base<std::vector<quasar::MetaInfo::Sense>,false>::__optional_copy_base[abi:ne180100]((uint64_t)this + 64, (uint64_t)a2 + 64);
  std::map<std::string,quasar::MetaInfo::StructuredPrediction>::map[abi:ne180100]((uint64_t *)this + 12, (const void ***)a2 + 12);
  std::__optional_copy_base<std::vector<quasar::AlternativeSelectionSpan>,false>::__optional_copy_base[abi:ne180100]((uint64_t)this + 120, (uint64_t)a2 + 120);
  std::map<std::string,std::vector<std::set<int>>>::map[abi:ne180100]((uint64_t *)this + 19, (const void ***)a2 + 19);
  return this;
}

void sub_1B214AFD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(unsigned char *)(v2 + 144)) {
    std::vector<quasar::AlternativeSelectionSpan>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  }
  std::__tree<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>>>::destroy(v3, *(void **)(v2 + 104));
  if (*(unsigned char *)(v2 + 88)) {
    std::vector<quasar::MetaInfo::Sense>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  }
  quasar::PTree::~PTree((quasar::PTree *)v2);
  _Unwind_Resume(a1);
}

void sub_1B214B038()
{
  if (*(char *)(v0 + 31) < 0) {
    operator delete(*v1);
  }
  JUMPOUT(0x1B214B030);
}

uint64_t std::__optional_copy_base<std::vector<quasar::MetaInfo::Sense>,false>::__optional_copy_base[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  std::__optional_storage_base<std::vector<quasar::MetaInfo::Sense>,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::vector<quasar::MetaInfo::Sense>,false> const&>((void *)a1, a2);
  return a1;
}

void sub_1B214B088(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (*(unsigned char *)(v10 + 24))
  {
    a10 = v10;
    std::vector<quasar::MetaInfo::Sense>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  }
  _Unwind_Resume(exception_object);
}

void *std::__optional_storage_base<std::vector<quasar::MetaInfo::Sense>,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::vector<quasar::MetaInfo::Sense>,false> const&>(void *result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 24))
  {
    uint64_t v2 = result;
    *__n128 result = 0;
    result[1] = 0;
    result[2] = 0;
    __n128 result = std::vector<quasar::MetaInfo::Sense>::__init_with_size[abi:ne180100]<quasar::MetaInfo::Sense*,quasar::MetaInfo::Sense*>(result, *(void *)a2, *(void *)(a2 + 8), 0x14C1BACF914C1BADLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
    *((unsigned char *)v2 + 24) = 1;
  }
  return result;
}

uint64_t *std::map<std::string,quasar::MetaInfo::StructuredPrediction>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,quasar::MetaInfo::StructuredPrediction>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::__tree_node<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_1B214B148(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,quasar::MetaInfo::StructuredPrediction>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::__tree_node<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    long long v4 = a2;
    char v5 = (uint64_t **)result;
    long long v6 = result + 1;
    do
    {
      __n128 result = std::__tree<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,quasar::MetaInfo::StructuredPrediction> const&>(v5, v6, v4 + 4, (long long *)v4 + 2);
      uint64_t v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = (const void ***)v7;
          uint64_t v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          long long v4 = (const void **)v8;
        }
        while (!v9);
      }
      long long v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,quasar::MetaInfo::StructuredPrediction> const&>(uint64_t **a1, uint64_t *a2, const void **a3, long long *a4)
{
  long long v6 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>>>::__construct_node<std::pair<std::string const,quasar::MetaInfo::StructuredPrediction> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>>>::__construct_node<std::pair<std::string const,quasar::MetaInfo::StructuredPrediction> const&>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  long long v6 = (char *)operator new(0x70uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  __n128 result = std::pair<std::string const,quasar::MetaInfo::StructuredPrediction>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1B214B2D8(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,quasar::MetaInfo::StructuredPrediction>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  int v6 = *((_DWORD *)a2 + 12);
  this[2].__r_.__value_.__l.__size_ = 0;
  LODWORD(this[2].__r_.__value_.__l.__data_) = v6;
  this[2].__r_.__value_.__r.__words[2] = 0;
  this[3].__r_.__value_.__r.__words[0] = 0;
  std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__init_with_size[abi:ne180100]<quasar::MetaInfo::StructuredPrediction::Span*,quasar::MetaInfo::StructuredPrediction::Span*>((std::string *)((char *)this + 56), *((long long **)a2 + 7), *((long long **)a2 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 4));
  return this;
}

void sub_1B214B3A8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::MetaInfo::StructuredPrediction>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t *std::map<std::string,std::vector<std::set<int>>>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,std::vector<std::set<int>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::vector<std::set<int>>>,std::__tree_node<std::__value_type<std::string,std::vector<std::set<int>>>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_1B214B474(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::vector<std::set<int>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::set<int>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::vector<std::set<int>>>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::vector<std::set<int>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::vector<std::set<int>>>,std::__tree_node<std::__value_type<std::string,std::vector<std::set<int>>>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    long long v4 = a2;
    long long v5 = (uint64_t **)result;
    int v6 = result + 1;
    do
    {
      __n128 result = std::__tree<std::__value_type<std::string,std::vector<std::set<int>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::set<int>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::vector<std::set<int>>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::vector<std::set<int>>> const&>(v5, v6, v4 + 4, (long long *)v4 + 2);
      uint64_t v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = (const void ***)v7;
          uint64_t v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          long long v4 = (const void **)v8;
        }
        while (!v9);
      }
      long long v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<std::set<int>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::set<int>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::vector<std::set<int>>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::vector<std::set<int>>> const&>(uint64_t **a1, uint64_t *a2, const void **a3, long long *a4)
{
  int v6 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,std::vector<std::set<int>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::set<int>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::vector<std::set<int>>>>>::__construct_node<std::pair<std::string const,std::vector<std::set<int>>> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::set<int>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::set<int>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,std::vector<std::set<int>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::set<int>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::vector<std::set<int>>>>>::__construct_node<std::pair<std::string const,std::vector<std::set<int>>> const&>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  int v6 = (char *)operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  __n128 result = std::pair<std::string const,std::vector<std::set<int>>>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1B214B604(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::set<int>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::set<int>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::vector<std::set<int>>>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::set<int>>::__init_with_size[abi:ne180100]<std::set<int>*,std::set<int>*>((uint64_t *)&this[1], *((void *)a2 + 3), *((void *)a2 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3));
  return this;
}

void sub_1B214B694(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<std::set<int>>::__init_with_size[abi:ne180100]<std::set<int>*,std::set<int>*>(uint64_t *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    __n128 result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::set<int>>,std::set<int>*,std::set<int>*,std::set<int>*>((uint64_t)(v6 + 2), a2, a3, (uint64_t *)v6[1]);
    v6[1] = (uint64_t)result;
  }
  return result;
}

void sub_1B214B718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::map<int,quasar::Expansion::SegmentTypeData>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::set<int>>,std::set<int>*,std::set<int>*,std::set<int>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  long long v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::set<int>::set[abi:ne180100](v4, v6);
      v6 += 24;
      long long v4 = v11 + 3;
      v11 += 3;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::set<int>>,std::set<int>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B214B7C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::set<int>>,std::set<int>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::set<int>>,std::set<int>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::set<int>>,std::set<int>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  if (v1 != v2)
  {
    do
    {
      uint64_t v3 = v1 - 24;
      std::__tree<int>::destroy(v1 - 24, *(void **)(v1 - 16));
      uint64_t v1 = v3;
    }
    while (v3 != v2);
  }
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::set<int>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::set<int>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::set<int>>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t **std::__tree<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::__tree_node<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,void *> *,long>>(uint64_t **result, long long *a2, long long *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    uint64_t v7 = result[1];
    *__n128 result = (uint64_t *)(result + 1);
    void v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      uint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v8 = v6;
    }
    uint64_t v15 = result;
    uint64_t v16 = v8;
    char v17 = (const void **)v8;
    if (v8)
    {
      uint64_t v16 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        char v9 = a2;
        do
        {
          v18[0] = (uint64_t)(v8 + 4);
          v18[1] = (uint64_t)(v8 + 7);
          std::pair<std::string &,quasar::MetaInfo::StructuredPrediction &>::operator=[abi:ne180100]<std::string const,quasar::MetaInfo::StructuredPrediction,(void *)0>((uint64_t)v18, (uint64_t)(v9 + 2));
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_leaf_high((uint64_t)v5, v18, v17 + 4);
          std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(v5, v18[0], leaf_high, (uint64_t *)v17);
          char v17 = (const void **)v16;
          if (v16) {
            uint64_t v16 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          }
          uint64_t v11 = (long long *)*((void *)v9 + 1);
          if (v11)
          {
            do
            {
              a2 = v11;
              uint64_t v11 = *(long long **)v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (long long *)*((void *)v9 + 2);
              BOOL v12 = *(void *)a2 == (void)v9;
              char v9 = a2;
            }
            while (!v12);
          }
          uint64_t v8 = (uint64_t *)v17;
          if (v17) {
            BOOL v12 = a2 == a3;
          }
          else {
            BOOL v12 = 1;
          }
          char v9 = a2;
        }
        while (!v12);
      }
    }
    __n128 result = (uint64_t **)std::__tree<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      __n128 result = (uint64_t **)std::__tree<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>>>::__emplace_multi<std::pair<std::string const,quasar::MetaInfo::StructuredPrediction> const&>(v5, a2 + 2);
      uint64_t v13 = (long long *)*((void *)a2 + 1);
      if (v13)
      {
        do
        {
          uint64_t v14 = v13;
          uint64_t v13 = *(long long **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          uint64_t v14 = (long long *)*((void *)a2 + 2);
          BOOL v12 = *(void *)v14 == (void)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_1B214BA34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string &,quasar::MetaInfo::StructuredPrediction &>::operator=[abi:ne180100]<std::string const,quasar::MetaInfo::StructuredPrediction,(void *)0>(uint64_t a1, uint64_t a2)
{
  std::string::operator=(*(std::string **)a1, (const std::string *)a2);
  uint64_t v4 = *(void *)(a1 + 8);
  std::string::operator=((std::string *)v4, (const std::string *)(a2 + 24));
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a2 + 48);
  if (v4 != a2 + 24) {
    std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__assign_with_size[abi:ne180100]<quasar::MetaInfo::StructuredPrediction::Span*,quasar::MetaInfo::StructuredPrediction::Span*>(v4 + 32, *(std::string **)(a2 + 56), *(long long **)(a2 + 64), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 4));
  }
  return a1;
}

void std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__assign_with_size[abi:ne180100]<quasar::MetaInfo::StructuredPrediction::Span*,quasar::MetaInfo::StructuredPrediction::Span*>(uint64_t a1, std::string *__str, long long *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  char v9 = *(std::string **)a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) < a4)
  {
    std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__vdeallocate((void **)a1);
    if (a4 > 0x333333333333333) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x999999999999999ALL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) >= 0x199999999999999) {
      unint64_t v11 = 0x333333333333333;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__vallocate[abi:ne180100]((void *)a1, v11);
    BOOL v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>,quasar::MetaInfo::StructuredPrediction::Span*,quasar::MetaInfo::StructuredPrediction::Span*,quasar::MetaInfo::StructuredPrediction::Span*>(v8, (long long *)__str, a3, *(std::string **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4) < a4)
  {
    uint64_t v13 = (std::string *)((char *)__str + 16 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::MetaInfo::StructuredPrediction::Span *,quasar::MetaInfo::StructuredPrediction::Span *,quasar::MetaInfo::StructuredPrediction::Span *>((int)&v17, __str, v13, v9);
    BOOL v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>,quasar::MetaInfo::StructuredPrediction::Span*,quasar::MetaInfo::StructuredPrediction::Span*,quasar::MetaInfo::StructuredPrediction::Span*>(v8, (long long *)v13, a3, *(std::string **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::MetaInfo::StructuredPrediction::Span *,quasar::MetaInfo::StructuredPrediction::Span *,quasar::MetaInfo::StructuredPrediction::Span *>((int)&v18, __str, (std::string *)a3, v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 80;
      std::allocator<quasar::MetaInfo::StructuredPrediction::Span>::destroy[abi:ne180100](v8, v16);
    }
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_1B214BC38(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B214BC40(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

std::string *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::MetaInfo::StructuredPrediction::Span *,quasar::MetaInfo::StructuredPrediction::Span *,quasar::MetaInfo::StructuredPrediction::Span *>(int a1, std::string *__str, std::string *a3, std::string *this)
{
  uint64_t v5 = __str;
  if (__str == a3) {
    return __str;
  }
  uint64_t v6 = a3;
  do
  {
    std::string::operator=(this, v5);
    std::string::operator=(this + 1, v5 + 1);
    this[2].__r_.__value_.__r.__words[0] = v5[2].__r_.__value_.__r.__words[0];
    if (this != v5) {
      std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(&this[2].__r_.__value_.__s.__data_[8], (char *)v5[2].__r_.__value_.__l.__size_, v5[2].__r_.__value_.__r.__words[2], (uint64_t)(v5[2].__r_.__value_.__r.__words[2] - v5[2].__r_.__value_.__l.__size_) >> 3);
    }
    this = (std::string *)((char *)this + 80);
    uint64_t v5 = (std::string *)((char *)v5 + 80);
  }
  while (v5 != v6);
  return v6;
}

uint64_t std::__tree<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>>>::destroy(*(void *)a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>>>::destroy(*(void *)a1, v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>>>::__emplace_multi<std::pair<std::string const,quasar::MetaInfo::StructuredPrediction> const&>(uint64_t **a1, long long *a2)
{
  std::__tree<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>>>::__construct_node<std::pair<std::string const,quasar::MetaInfo::StructuredPrediction> const&>((uint64_t)a1, a2, (uint64_t)v7);
  leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_leaf_high((uint64_t)a1, &v6, (const void **)v7[0] + 4);
  std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v6, leaf_high, v7[0]);
  uint64_t v4 = v7[0];
  v7[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return v4;
}

void sub_1B214BDA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__emplace_back_slow_path<quasar::MetaInfo::StructuredPrediction::Span>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x333333333333333) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x199999999999999) {
    unint64_t v9 = 0x333333333333333;
  }
  else {
    unint64_t v9 = v5;
  }
  void v17[4] = a1 + 2;
  unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>>(v7, v9);
  unint64_t v11 = &v10[80 * v4];
  v17[0] = v10;
  v17[1] = v11;
  void v17[3] = &v10[80 * v12];
  uint64_t v13 = *(void *)(a2 + 16);
  *(_OWORD *)unint64_t v11 = *(_OWORD *)a2;
  *((void *)v11 + 2) = v13;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v14 = *(void *)(a2 + 40);
  *(_OWORD *)(v11 + 24) = *(_OWORD *)(a2 + 24);
  *((void *)v11 + 5) = v14;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 4std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = 0;
  *(void *)(a2 + 24) = 0;
  *((void *)v11 + 6) = *(void *)(a2 + 48);
  *((void *)v11 + 7) = 0;
  *((void *)v11 + 8) = 0;
  *((void *)v11 + 9) = 0;
  *(_OWORD *)(v11 + 56) = *(_OWORD *)(a2 + 56);
  *((void *)v11 + 9) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  v17[2] = v11 + 80;
  std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__swap_out_circular_buffer(a1, v17);
  uint64_t v15 = a1[1];
  std::__split_buffer<quasar::MetaInfo::StructuredPrediction::Span>::~__split_buffer(v17);
  return v15;
}

void sub_1B214BEE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::MetaInfo::StructuredPrediction::Span>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<std::string&,int &&,std::vector<quasar::MetaInfo::StructuredPrediction::Span> &>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4, long long *a5)
{
  unint64_t v8 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v13, a2);
  unint64_t v9 = *v8;
  if (!*v8)
  {
    unint64_t v10 = v8;
    std::__tree<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<std::string&,int &&,std::vector<quasar::MetaInfo::StructuredPrediction::Span> &>>((uint64_t)a1, a4, a5, (uint64_t)v12);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v13, v10, v12[0]);
    unint64_t v9 = v12[0];
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,void *>>>>::reset[abi:ne180100]((uint64_t)v12, 0);
  }
  return v9;
}

std::string *std::__tree<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<std::string&,int &&,std::vector<quasar::MetaInfo::StructuredPrediction::Span> &>>@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, long long *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  unint64_t v8 = (char *)operator new(0x70uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  unint64_t v9 = *a2;
  long long v11 = *a3;
  uint64_t v12 = *((void *)a3 + 2);
  uint64_t v13 = v9;
  __n128 result = std::pair<std::string const,quasar::MetaInfo::StructuredPrediction>::pair[abi:ne180100]<std::string const&,std::string&,int &&,std::vector<quasar::MetaInfo::StructuredPrediction::Span> &,0ul,0ul,1ul,2ul>((std::string *)(v8 + 32), &v13, (long long **)&v11);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1B214C01C(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,quasar::MetaInfo::StructuredPrediction>::pair[abi:ne180100]<std::string const&,std::string&,int &&,std::vector<quasar::MetaInfo::StructuredPrediction::Span> &,0ul,0ul,1ul,2ul>(std::string *this, long long **a2, long long **a3)
{
  unint64_t v5 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)v5, *((void *)v5 + 1));
  }
  else
  {
    long long v6 = *v5;
    this->__r_.__value_.__r.__words[2] = *((void *)v5 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v6;
  }
  uint64_t v7 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)v7, *((void *)v7 + 1));
  }
  else
  {
    long long v8 = *v7;
    v13.__r_.__value_.__r.__words[2] = *((void *)v7 + 2);
    *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v8;
  }
  unint64_t v9 = (long long **)a3[2];
  int v10 = *(_DWORD *)a3[1];
  memset(&v12, 0, sizeof(v12));
  std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__init_with_size[abi:ne180100]<quasar::MetaInfo::StructuredPrediction::Span*,quasar::MetaInfo::StructuredPrediction::Span*>(&v12, *v9, v9[1], 0xCCCCCCCCCCCCCCCDLL * (v9[1] - *v9));
  this[1] = v13;
  memset(&v13, 0, sizeof(v13));
  LODWORD(this[2].__r_.__value_.__l.__data_) = v10;
  *(std::string *)((char *)this + 56) = v12;
  memset(&v12, 0, sizeof(v12));
  uint64_t v14 = &v12;
  std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  return this;
}

void sub_1B214C14C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (*(char *)(v18 + 23) < 0) {
    operator delete(*(void **)v18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>>>::__emplace_hint_unique_key_args<std::string,std::string&,quasar::MetaInfo::StructuredPrediction>(uint64_t **a1, uint64_t *a2, const void **a3, long long *a4, long long *a5)
{
  long long v8 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(a1, a2, &v14, &v13, a3);
  unint64_t v9 = (uint64_t *)*v8;
  if (!*v8)
  {
    int v10 = (uint64_t **)v8;
    std::__tree<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>>>::__construct_node<std::string&,quasar::MetaInfo::StructuredPrediction>((uint64_t)a1, a4, a5, (uint64_t)v12);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v14, v10, v12[0]);
    unint64_t v9 = v12[0];
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,void *>>>>::reset[abi:ne180100]((uint64_t)v12, 0);
  }
  return v9;
}

std::string *std::__tree<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>>>::__construct_node<std::string&,quasar::MetaInfo::StructuredPrediction>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  long long v8 = (char *)operator new(0x70uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  __n128 result = std::pair<std::string const,quasar::MetaInfo::StructuredPrediction>::pair[abi:ne180100]<std::string&,quasar::MetaInfo::StructuredPrediction,0>((std::string *)(v8 + 32), a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1B214C284(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,quasar::MetaInfo::StructuredPrediction>::pair[abi:ne180100]<std::string&,quasar::MetaInfo::StructuredPrediction,0>(std::string *this, long long *a2, long long *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  long long v6 = *a3;
  this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v6;
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = 0;
  *(void *)a3 = 0;
  LODWORD(this[2].__r_.__value_.__l.__data_) = *((_DWORD *)a3 + 6);
  this[2].__r_.__value_.__r.__words[2] = 0;
  this[3].__r_.__value_.__r.__words[0] = 0;
  this[2].__r_.__value_.__l.__size_ = 0;
  *(_OWORD *)&this[2].__r_.__value_.__r.__words[1] = a3[2];
  this[3].__r_.__value_.__r.__words[0] = *((void *)a3 + 6);
  *((void *)a3 + 4) = 0;
  *((void *)a3 + 5) = 0;
  *((void *)a3 + 6) = 0;
  return this;
}

uint64_t std::__tree<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>>>::__count_multi<std::string_view>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  uint64_t v3 = *(uint64_t **)(a1 + 8);
  if (!v3) {
    return 0;
  }
  uint64_t v5 = a1 + 16;
  while ((std::less<void>::operator()[abi:ne180100]<std::string_view const&,std::string const&>(v5, a2, (const void **)v3 + 4) & 1) != 0)
  {
    uint64_t v2 = v3;
LABEL_7:
    uint64_t v3 = (uint64_t *)*v3;
    if (!v3) {
      return 0;
    }
  }
  if (std::less<void>::operator()[abi:ne180100]<std::string const&,std::string_view const&>(v5, (const void **)v3 + 4, a2))
  {
    ++v3;
    goto LABEL_7;
  }
  uint64_t v7 = *v3;
  long long v8 = v3;
  if (*v3)
  {
    long long v8 = v3;
    do
    {
      int v9 = std::less<void>::operator()[abi:ne180100]<std::string const&,std::string_view const&>(v5, (const void **)(v7 + 32), a2);
      int v10 = (uint64_t *)(v7 + 8);
      if (!v9)
      {
        int v10 = (uint64_t *)v7;
        long long v8 = (void *)v7;
      }
      uint64_t v7 = *v10;
    }
    while (*v10);
  }
  uint64_t v11 = v3[1];
  if (v11)
  {
    do
    {
      int v12 = std::less<void>::operator()[abi:ne180100]<std::string_view const&,std::string const&>(v5, a2, (const void **)(v11 + 32));
      uint64_t v13 = (uint64_t *)(v11 + 8);
      if (v12)
      {
        uint64_t v13 = (uint64_t *)v11;
        uint64_t v2 = (void *)v11;
      }
      uint64_t v11 = *v13;
    }
    while (*v13);
  }
  if (v8 == v2) {
    return 0;
  }
  uint64_t result = 0;
  do
  {
    uint64_t v14 = (void *)v8[1];
    if (v14)
    {
      do
      {
        uint64_t v15 = v14;
        uint64_t v14 = (void *)*v14;
      }
      while (v14);
    }
    else
    {
      do
      {
        uint64_t v15 = (void *)v8[2];
        BOOL v16 = *v15 == (void)v8;
        long long v8 = v15;
      }
      while (!v16);
    }
    ++result;
    long long v8 = v15;
  }
  while (v15 != v2);
  return result;
}

void std::vector<std::set<int>>::__vdeallocate(void **a1)
{
  uint64_t v1 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    unint64_t v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        uint64_t v5 = v3 - 24;
        std::__tree<int>::destroy((uint64_t)(v3 - 24), *((void **)v3 - 2));
        uint64_t v3 = v5;
      }
      while (v5 != v1);
      unint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<std::set<int>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::set<int>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::vector<std::set<int>>>>>::__emplace_hint_unique_impl<std::string_view &,std::vector<std::set<int>>>(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  std::__tree<std::__value_type<std::string,std::vector<std::set<int>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::set<int>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::vector<std::set<int>>>>>::__construct_node<std::string_view &,std::vector<std::set<int>>>((uint64_t)a1, a3, a4, (uint64_t)v11);
  long long v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(a1, a2, &v10, &v9, (const void **)v11[0] + 4);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v10, v6, v11[0]);
    uint64_t v7 = v11[0];
    v11[0] = 0;
  }
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::set<int>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::set<int>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v11, 0);
  return v7;
}

void sub_1B214C560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::set<int>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::set<int>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

char *std::__tree<std::__value_type<std::string,std::vector<std::set<int>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::set<int>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::vector<std::set<int>>>>>::__construct_node<std::string_view &,std::vector<std::set<int>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  long long v8 = (char *)operator new(0x50uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  uint64_t result = std::pair<std::string const,std::vector<std::set<int>>>::pair[abi:ne180100]<std::string_view &,std::vector<std::set<int>>,0>(v8 + 32, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1B214C5D4(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::set<int>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::set<int>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

char *std::pair<std::string const,std::vector<std::set<int>>>::pair[abi:ne180100]<std::string_view &,std::vector<std::set<int>>,0>(char *__dst, uint64_t a2, uint64_t a3)
{
  size_t v4 = *(void *)(a2 + 8);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  long long v6 = *(const void **)a2;
  if (v4 >= 0x17)
  {
    uint64_t v8 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v8 = v4 | 7;
    }
    uint64_t v9 = v8 + 1;
    uint64_t v7 = operator new(v8 + 1);
    *((void *)__dst + 1) = v4;
    *((void *)__dst + 2) = v9 | 0x8000000000000000;
    *(void *)__dst = v7;
  }
  else
  {
    __dst[23] = v4;
    uint64_t v7 = __dst;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v7, v6, v4);
LABEL_9:
  *((unsigned char *)v7 + v4) = 0;
  *((void *)__dst + 3) = 0;
  *((void *)__dst + 4) = 0;
  *((void *)__dst + 5) = 0;
  *(_OWORD *)(__dst + 24) = *(_OWORD *)a3;
  *((void *)__dst + 5) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  return __dst;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::MetaInfo::Sense>,quasar::MetaInfo::Sense const*,quasar::MetaInfo::Sense const*,quasar::MetaInfo::Sense*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      quasar::MetaInfo::Sense::Sense((std::string *)(a4 + v7), (const quasar::MetaInfo::Sense *)(a2 + v7));
      v7 += 296;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1B214C71C(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 296;
    do
    {
      quasar::MetaInfo::Sense::~Sense((void **)(v4 + v2));
      v2 -= 296;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<quasar::MetaInfo::Sense>::__emplace_back_slow_path<quasar::MetaInfo::Sense&>(uint64_t *a1, const quasar::MetaInfo::Sense *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x14C1BACF914C1BADLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0xDD67C8A60DD67CLL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x14C1BACF914C1BADLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x6EB3E45306EB3ELL) {
    unint64_t v9 = 0xDD67C8A60DD67CLL;
  }
  else {
    unint64_t v9 = v5;
  }
  char v17 = a1 + 2;
  if (v9) {
    int v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::MetaInfo::Sense>>(v7, v9);
  }
  else {
    int v10 = 0;
  }
  uint64_t v13 = v10;
  uint64_t v14 = (std::string *)&v10[296 * v4];
  BOOL v16 = &v10[296 * v9];
  quasar::MetaInfo::Sense::Sense(v14, a2);
  uint64_t v15 = &v14[12].__r_.__value_.__s.__data_[8];
  std::vector<quasar::MetaInfo::Sense>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<quasar::MetaInfo::Sense>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1B214C84C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::MetaInfo::Sense>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<quasar::MetaInfo::Sense>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  unint64_t v5 = (long long *)*a1;
  uint64_t v4 = (long long *)a1[1];
  uint64_t v6 = a2[1];
  if (v4 != (long long *)*a1)
  {
    do
    {
      v6 -= 296;
      uint64_t v4 = (long long *)((char *)v4 - 296);
      std::allocator<quasar::MetaInfo::Sense>::construct[abi:ne180100]<quasar::MetaInfo::Sense,quasar::MetaInfo::Sense>((uint64_t)(a1 + 2), v6, v4);
    }
    while (v4 != v5);
  }
  a2[1] = v6;
  uint64_t v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

__n128 std::allocator<quasar::MetaInfo::Sense>::construct[abi:ne180100]<quasar::MetaInfo::Sense,quasar::MetaInfo::Sense>(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v3 = *a3;
  *(void *)(a2 + 16) = *((void *)a3 + 2);
  *(_OWORD *)a2 = v3;
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = 0;
  *(void *)a3 = 0;
  long long v4 = *(long long *)((char *)a3 + 24);
  *(void *)(a2 + 4std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = *((void *)a3 + 5);
  *(_OWORD *)(a2 + 24) = v4;
  *((void *)a3 + 4) = 0;
  *((void *)a3 + 5) = 0;
  *((void *)a3 + 3) = 0;
  long long v5 = a3[3];
  *(void *)(a2 + 64) = *((void *)a3 + 8);
  *(_OWORD *)(a2 + 48) = v5;
  *((void *)a3 + 7) = 0;
  *((void *)a3 + 8) = 0;
  *((void *)a3 + 6) = 0;
  long long v6 = *(long long *)((char *)a3 + 72);
  *(void *)(a2 + 88) = *((void *)a3 + 11);
  *(_OWORD *)(a2 + 72) = v6;
  *((void *)a3 + 9) = 0;
  *((void *)a3 + 1std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = 0;
  *((void *)a3 + 11) = 0;
  *(void *)(a2 + 96) = *((void *)a3 + 12);
  __n128 result = *(__n128 *)((char *)a3 + 104);
  *(void *)(a2 + 12std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = *((void *)a3 + 15);
  *(__n128 *)(a2 + 104) = result;
  *((void *)a3 + 14) = 0;
  *((void *)a3 + 15) = 0;
  *((void *)a3 + 13) = 0;
  uint64_t v8 = *((void *)a3 + 16);
  *(unsigned char *)(a2 + 136) = 0;
  *(void *)(a2 + 128) = v8;
  *(unsigned char *)(a2 + 16std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = 0;
  if (*((unsigned char *)a3 + 160))
  {
    __n128 result = *(__n128 *)((char *)a3 + 136);
    *(void *)(a2 + 152) = *((void *)a3 + 19);
    *(__n128 *)(a2 + 136) = result;
    *((void *)a3 + 18) = 0;
    *((void *)a3 + 19) = 0;
    *((void *)a3 + 17) = 0;
    *(unsigned char *)(a2 + 16std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = 1;
  }
  *(unsigned char *)(a2 + 168) = 0;
  *(unsigned char *)(a2 + 192) = 0;
  if (*((unsigned char *)a3 + 192))
  {
    __n128 result = *(__n128 *)((char *)a3 + 168);
    *(void *)(a2 + 184) = *((void *)a3 + 23);
    *(__n128 *)(a2 + 168) = result;
    *((void *)a3 + 22) = 0;
    *((void *)a3 + 23) = 0;
    *((void *)a3 + 21) = 0;
    *(unsigned char *)(a2 + 192) = 1;
  }
  *(unsigned char *)(a2 + 20std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = 0;
  *(unsigned char *)(a2 + 224) = 0;
  if (*((unsigned char *)a3 + 224))
  {
    __n128 result = *(__n128 *)((char *)a3 + 200);
    *(void *)(a2 + 216) = *((void *)a3 + 27);
    *(__n128 *)(a2 + 20std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = result;
    *((void *)a3 + 26) = 0;
    *((void *)a3 + 27) = 0;
    *((void *)a3 + 25) = 0;
    *(unsigned char *)(a2 + 224) = 1;
  }
  *(unsigned char *)(a2 + 232) = 0;
  *(unsigned char *)(a2 + 256) = 0;
  if (*((unsigned char *)a3 + 256))
  {
    __n128 result = *(__n128 *)((char *)a3 + 232);
    *(void *)(a2 + 248) = *((void *)a3 + 31);
    *(__n128 *)(a2 + 232) = result;
    *((void *)a3 + 3std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = 0;
    *((void *)a3 + 31) = 0;
    *((void *)a3 + 29) = 0;
    *(unsigned char *)(a2 + 256) = 1;
  }
  *(unsigned char *)(a2 + 264) = 0;
  *(unsigned char *)(a2 + 288) = 0;
  if (*((unsigned char *)a3 + 288))
  {
    __n128 result = *(__n128 *)((char *)a3 + 264);
    *(void *)(a2 + 28std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = *((void *)a3 + 35);
    *(__n128 *)(a2 + 264) = result;
    *((void *)a3 + 34) = 0;
    *((void *)a3 + 35) = 0;
    *((void *)a3 + 33) = 0;
    *(unsigned char *)(a2 + 288) = 1;
  }
  return result;
}

uint64_t std::__split_buffer<quasar::MetaInfo::Sense>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 296;
    quasar::MetaInfo::Sense::~Sense((void **)(i - 296));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t getPropCheckTokenExistence(void)
{
  {
    operator new();
  }
  return getPropCheckTokenExistence(void)::p;
}

void sub_1B214CB74(_Unwind_Exception *a1)
{
}

void sub_1B214CC2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__int32 **TWord::TWord(__int32 **a1, __int32 *a2, __int32 *a3, __int32 *a4, __int32 *a5)
{
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
  a1[3] = a5;
  a1[4] = 0;
  uint64_t v8 = v10;
  long long v9 = xmmword_1B25607E0;
  char v11 = 1;
  getThirdField(a2, (uint64_t)&v8);
  unint64_t v6 = (unint64_t)a1[4] & 0xFFFFFFFFFFFFFFFCLL;
  if (!*((void *)&v9 + 1)) {
    v6 |= 2uLL;
  }
  a1[4] = (__int32 *)v6;
  if (v11 && v8 != v10 && v8) {
    MEMORY[0x1B3EA8630]();
  }
  return a1;
}

void sub_1B214CD24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (LOBYTE(STACK[0x418])) {
    TPatternManager::addArrayObject((uint64_t)&a9);
  }
  _Unwind_Resume(a1);
}

BOOL TWord::applyMask(uint64_t *a1, _DWORD *a2)
{
  return TLexicon::applyMask(a1[1], a1[2], a2, a1 + 4);
}

BOOL TLexicon::applyMask(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t *a4)
{
  BOOL v4 = *a3 != 33;
  BOOL v5 = *a3 == 33;
  if (a2)
  {
    unint64_t v6 = 0;
    uint64_t v7 = &a3[*a3 == 33];
    while (1)
    {
      int v8 = v7[v6];
      if (v8 != 48) {
        break;
      }
      ++v6;
    }
    if (v8)
    {
      int v12 = v14;
      long long v13 = xmmword_1B25607E0;
      char v15 = 1;
      TLexicon::getOptionalTagBits(a1, a2, (uint64_t)&v12, a4);
      if (v6 < *((void *)&v13 + 1))
      {
        do
        {
          int v9 = v7[v6];
          if (!v9) {
            break;
          }
          if (v9 != 48 && *(_DWORD *)&v12[4 * v6] == 49)
          {
            if (v15 && v12 != v14) {
              MEMORY[0x1B3EA8630](v12, 0x1000C8052888210);
            }
            return v4;
          }
          ++v6;
        }
        while (*((void *)&v13 + 1) != v6);
      }
      if (v15)
      {
        if (v12 != v14 && v12 != 0) {
          MEMORY[0x1B3EA8630]();
        }
      }
    }
  }
  return v5;
}

void sub_1B214CE7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (LOBYTE(STACK[0x418])) {
    TPatternManager::addArrayObject((uint64_t)&a9);
  }
  _Unwind_Resume(a1);
}

BOOL TLexicon::checkBits(uint64_t a1, uint64_t a2, void *a3, unint64_t a4, uint64_t *a5)
{
  if (!a2) {
    return 1;
  }
  if ((*(unsigned char *)a5 & 4) == 0) {
    TLexicon::getOptionalTagBits(a1, a2, 0, a5);
  }
  if (!a4) {
    return 0;
  }
  if (((unint64_t)*a5 >> *a3)) {
    return 1;
  }
  uint64_t v9 = 1;
  do
  {
    unint64_t v10 = v9;
    if (a4 == v9) {
      break;
    }
    ++v9;
  }
  while ((((unint64_t)*a5 >> a3[v10]) & 1) == 0);
  return v10 < a4;
}

void TWord::getCategoryTag(uint64_t a1, void *a2)
{
}

void TLexicon::getCategoryTag(void *a1, uint64_t a2, void *a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  TBuffer<wchar_t>::assign((uint64_t)a3, dword_1B259BC30);
  if (a2)
  {
    uint64_t v6 = a1[47];
    if (v6)
    {
      if (a1[48])
      {
        unint64_t v7 = v6 + 7;
        if (v7 <= 0x807)
        {
          SDWord_GetTagBits(a1[11], a2, 1, v13, v7 >> 3);
          uint64_t v8 = a1[47];
          if (v8)
          {
            unint64_t v9 = 0;
            uint64_t v10 = 0;
            do
            {
              v10 |= ((uint64_t)(*((unsigned __int8 *)v13 + (v9 >> 3)) >> (v9 & 7) << 63) >> 63) & (1 << v9);
              ++v9;
            }
            while (v8 != v9);
          }
          else
          {
            uint64_t v10 = 0;
          }
          TBuffer<wchar_t>::resize((uint64_t)a3, 0);
          TLocaleInfo::multiByteToUnicode((uint64_t)(a1 + 28), (unsigned __int8 *)(a1[50] + v10 + v10 * a1[49]), a1[49], (uint64_t)a3);
          uint64_t v11 = a3[2];
          if (v11)
          {
            unint64_t v12 = 0;
            while (*(_DWORD *)(*a3 + 4 * v12) != 32)
            {
              if (v11 == ++v12) {
                return;
              }
            }
            TBuffer<wchar_t>::resize((uint64_t)a3, v12);
          }
        }
      }
    }
  }
}

void TLexicon::getOptionalTagBits(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    TBuffer<wchar_t>::resize(a3, 0);
    unint64_t v8 = *(void *)(a1 + 368);
    if (*(unsigned char *)(a3 + 1048) && *(void *)(a3 + 8) < v8)
    {
      *(void *)(a3 + 8) = v8 + 1;
      operator new[]();
    }
    unint64_t v9 = *(void *)(a3 + 16);
    if (v9 < v8)
    {
      uint64_t v10 = *(void *)(a1 + 368);
      if (*(unsigned char *)(a3 + 1048)
        || ((v11 = *(void *)(a3 + 8), v11 >= v8) ? (uint64_t v10 = *(void *)(a1 + 368)) : (uint64_t v10 = *(void *)(a3 + 8)),
            v9 < v11 && v10 != v9))
      {
        memset_pattern16((void *)(*(void *)a3 + 4 * v9), "0", 4 * (v10 - v9));
      }
    }
    *(void *)(a3 + 16) = v8;
  }
  if (a2)
  {
    uint64_t v12 = *(void *)(a1 + 368);
    if (v12)
    {
      unint64_t v13 = v12 + 7;
      if (v13 <= 0x807)
      {
        SDWord_GetTagBits(*(void *)(a1 + 88), a2, 2, v19, v13 >> 3);
        if (a3)
        {
          uint64_t v14 = *(void *)(a1 + 368);
          if (v14)
          {
            for (unint64_t i = 0; i != v14; ++i)
            {
              if ((*((unsigned __int8 *)v19 + (i >> 3)) >> (i & 7))) {
                *(_DWORD *)(*(void *)a3 + 4 * i) = 49;
              }
            }
          }
        }
        if (a4)
        {
          uint64_t v16 = 0;
          uint64_t v17 = *a4 | 4;
          do
          {
            uint64_t v18 = v17 & ~(8 << v16);
            v17 |= 8 << v16;
            if (((*((unsigned __int8 *)v19 + (*(void *)&TWord::ms_pnOTBIndex[8 * v16] >> 3)) >> (*(void *)&TWord::ms_pnOTBIndex[8 * v16] & 7)) & 1) == 0) {
              uint64_t v17 = v18;
            }
            *a4 = v17;
            ++v16;
          }
          while (v16 != 5);
        }
      }
    }
  }
}

uint64_t *TWord::getOptionalTagBits(TWord *this)
{
  uint64_t v1 = (uint64_t *)((char *)this + 32);
  if ((*((unsigned char *)this + 32) & 4) == 0) {
    TLexicon::getOptionalTagBits(*((void *)this + 1), *((void *)this + 2), 0, v1);
  }
  return v1;
}

uint64_t TWord::getWrittenForm(__int32 **a1, uint64_t a2)
{
  return TLexicon::getWrittenForm((int)a1, *a1, a2);
}

uint64_t TLexicon::getWrittenForm(int a1, __int32 *__s, uint64_t a3)
{
  BOOL v5 = wcschr(__s, 92);
  if (v5)
  {
    if (v5 == __s)
    {
      __int32 v6 = __s[1];
      if (v6 == 92 || v6 == 0) {
        BOOL v5 = __s + 1;
      }
      else {
        BOOL v5 = __s;
      }
    }
    unint64_t v8 = v5 - __s;
    TBuffer<wchar_t>::resize(a3, 0);
    return TBuffer<wchar_t>::insert(a3, 0, __s, v8);
  }
  else
  {
    return TBuffer<wchar_t>::assign(a3, __s);
  }
}

uint64_t TWord::getTokenName(__int32 **a1, uint64_t a2)
{
  return TLexicon::getTokenName((int)a1, *a1, a2);
}

uint64_t TLexicon::getTokenName(int a1, __int32 *a2, uint64_t a3)
{
  TLexicon::getWrittenForm(a1, a2, a3);
  __int32 v6 = v8;
  long long v7 = xmmword_1B25607E0;
  char v9 = 1;
  uint64_t result = (uint64_t)getSecondField(a2, (uint64_t)&v6);
  if (*((void *)&v7 + 1))
  {
    TBuffer<wchar_t>::insert(a3, *(void *)(a3 + 16), dword_1B259BC24, 1uLL);
    uint64_t result = TBuffer<wchar_t>::operator+=(a3, (uint64_t)&v6);
  }
  if (v9)
  {
    uint64_t result = (uint64_t)v6;
    if (v6 != v8)
    {
      if (v6) {
        return MEMORY[0x1B3EA8630]();
      }
    }
  }
  return result;
}

void sub_1B214D4AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (LOBYTE(STACK[0x418])) {
    TPatternManager::addArrayObject((uint64_t)&a9);
  }
  _Unwind_Resume(a1);
}

uint64_t TWord::getWordSpec(TWord *this)
{
  if (*((void *)this + 2)) {
    return *(void *)(*((void *)this + 1) + 88);
  }
  else {
    return 0;
  }
}

uint64_t TLexicon::findHeadClone(void *a1, __int32 *a2)
{
  char v9 = (__int32 *)v11;
  long long v10 = xmmword_1B25607E0;
  char v12 = 1;
  TLexicon::getTokenName((int)a1, a2, (uint64_t)&v9);
  if (*((void *)&v10 + 1) >= (unint64_t)v10)
  {
    if (v12)
    {
      int v13 = 0;
      TBuffer<wchar_t>::insert((uint64_t)&v9, *((unint64_t *)&v10 + 1), &v13, 1uLL);
      uint64_t v3 = v9;
      --*((void *)&v10 + 1);
    }
    else
    {
      uint64_t v3 = v9;
      if ((void)v10) {
        v9[(void)v10 - 1] = 0;
      }
    }
  }
  else
  {
    uint64_t v3 = v9;
    v9[*((void *)&v10 + 1)] = 0;
  }
  uint64_t Word = TLexicon::findWord(a1, v3);
  uint64_t v5 = Word;
  if (!Word || (*(unsigned char *)(Word + 32) & 2) == 0)
  {
    if (*((void *)&v10 + 1) >= (unint64_t)v10)
    {
      if (v12)
      {
        int v13 = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v9, *((unint64_t *)&v10 + 1), &v13, 1uLL);
        __int32 v6 = v9;
        --*((void *)&v10 + 1);
      }
      else
      {
        __int32 v6 = v9;
        if ((void)v10) {
          v9[(void)v10 - 1] = 0;
        }
      }
    }
    else
    {
      __int32 v6 = v9;
      v9[*((void *)&v10 + 1)] = 0;
    }
    uint64_t v7 = TLexicon::computeClones((uint64_t)a1, v6);
    if (v7) {
      uint64_t v5 = **(void **)(v7 + 16);
    }
    else {
      uint64_t v5 = 0;
    }
  }
  if (v12 && v9 != (__int32 *)v11 && v9) {
    MEMORY[0x1B3EA8630]();
  }
  return v5;
}

void sub_1B214D65C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (LOBYTE(STACK[0x420]))
  {
    if (a10 != v10 && a10 != 0) {
      MEMORY[0x1B3EA8630]();
    }
  }
  _Unwind_Resume(a1);
}

void TWord::getClones(uint64_t a1, uint64_t a2)
{
  std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize(a2, 0);
  unint64_t v26 = (__int32 *)v28;
  long long v27 = xmmword_1B25607E0;
  char v29 = 1;
  TLexicon::getTokenName(v4, *(__int32 **)a1, (uint64_t)&v26);
  uint64_t v5 = *(void *)(a1 + 8);
  if (*((void *)&v27 + 1) >= (unint64_t)v27)
  {
    if (v29)
    {
      int v30 = 0;
      TBuffer<wchar_t>::insert((uint64_t)&v26, *((unint64_t *)&v27 + 1), &v30, 1uLL);
      __int32 v6 = v26;
      --*((void *)&v27 + 1);
    }
    else
    {
      __int32 v6 = v26;
      if ((void)v27) {
        v26[(void)v27 - 1] = 0;
      }
    }
  }
  else
  {
    __int32 v6 = v26;
    v26[*((void *)&v27 + 1)] = 0;
  }
  uint64_t v7 = TLexicon::computeClones(v5, v6);
  uint64_t v8 = v7;
  if (v7)
  {
    std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)a2, *(void *)(v7 + 8) - 1);
    uint64_t v9 = *(void *)(v8 + 8);
    if (v9)
    {
      uint64_t v10 = *(uint64_t **)(v8 + 16);
      unint64_t v11 = v10;
      do
      {
        uint64_t v12 = *v11;
        if (*v11 != a1)
        {
          uint64_t v14 = *(void **)(a2 + 8);
          unint64_t v13 = *(void *)(a2 + 16);
          if ((unint64_t)v14 >= v13)
          {
            uint64_t v16 = ((uint64_t)v14 - *(void *)a2) >> 3;
            if ((unint64_t)(v16 + 1) >> 61) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v17 = v13 - *(void *)a2;
            uint64_t v18 = v17 >> 2;
            if (v17 >> 2 <= (unint64_t)(v16 + 1)) {
              uint64_t v18 = v16 + 1;
            }
            if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v19 = v18;
            }
            if (v19)
            {
              uint64_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a2 + 16, v19);
              uint64_t v12 = *v11;
            }
            else
            {
              uint64_t v20 = 0;
            }
            uint64_t v21 = &v20[8 * v16];
            *(void *)uint64_t v21 = v12;
            char v15 = v21 + 8;
            char v23 = *(char **)a2;
            char v22 = *(char **)(a2 + 8);
            if (v22 != *(char **)a2)
            {
              do
              {
                uint64_t v24 = *((void *)v22 - 1);
                v22 -= 8;
                *((void *)v21 - 1) = v24;
                v21 -= 8;
              }
              while (v22 != v23);
              char v22 = *(char **)a2;
            }
            *(void *)a2 = v21;
            *(void *)(a2 + 8) = v15;
            *(void *)(a2 + 16) = &v20[8 * v19];
            if (v22) {
              operator delete(v22);
            }
          }
          else
          {
            *uint64_t v14 = v12;
            char v15 = v14 + 1;
          }
          *(void *)(a2 + 8) = v15;
          uint64_t v9 = *(void *)(v8 + 8);
          uint64_t v10 = *(uint64_t **)(v8 + 16);
        }
        ++v11;
      }
      while (v11 != &v10[v9]);
    }
  }
  if (v29)
  {
    if (v26 != (__int32 *)v28 && v26 != 0) {
      MEMORY[0x1B3EA8630]();
    }
  }
}

void sub_1B214D8B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (LOBYTE(STACK[0x420]))
  {
    if (a10 != v10 && a10 != 0) {
      MEMORY[0x1B3EA8630]();
    }
  }
  _Unwind_Resume(a1);
}

uint64_t TLexicon::computeClones(uint64_t a1, __int32 *a2)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  ++*(void *)(a1 + 464);
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&__p, a2);
  int v4 = std::__tree<std::__value_type<std::wstring,unsigned long>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,unsigned long>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,unsigned long>>>::find<std::wstring>(a1 + 160, (uint64_t)&__p);
  if (SHIBYTE(v50) < 0) {
    operator delete(__p);
  }
  if ((void *)(a1 + 168) != v4)
  {
    ++*(void *)(a1 + 488);
    return v4[7];
  }
  uint64_t Word = TLexicon::findWord((void *)a1, a2);
  if (Word && (*(unsigned char *)(Word + 32) & 1) != 0)
  {
    uint64_t v5 = 0;
    ++*(void *)(a1 + 488);
    return v5;
  }
  std::string __p = v51;
  long long v50 = xmmword_1B25607E0;
  char v52 = 1;
  getSecondField(a2, (uint64_t)&__p);
  long long v57 = v59;
  long long v58 = xmmword_1B25607E0;
  char v60 = 1;
  TLocaleInfo::unicodeToMultiByte(a1 + 224, (unsigned int *)a2, (uint64_t)&v57);
  unint64_t v48 = 0;
  unint64_t v47 = 0;
  uint64_t v46 = 0;
  char v45 = 0;
  uint64_t v8 = *(void **)(a1 + 88);
  if (*((void *)&v58 + 1) >= (unint64_t)v58)
  {
    if (v60)
    {
      LOBYTE(v38) = 0;
      TBuffer<char>::insert((uint64_t)&v57, *((unint64_t *)&v58 + 1), (char *)&v38, 1uLL);
      --*((void *)&v58 + 1);
    }
    else if ((void)v58)
    {
      v57[(void)v58 - 1] = 0;
    }
  }
  else
  {
    v57[*((void *)&v58 + 1)] = 0;
  }
  if (*((void *)&v50 + 1)) {
    uint64_t v9 = "\\"";
  }
  else {
    uint64_t v9 = "\\\\"";
  }
  SDVoc_GetWords(v8, 2, v57, v9, *(void *)(a1 + 424), *(void *)(a1 + 408), &v48, &v46, &v47, (uint64_t)callBackMRECArrayReallocator, 0, &v45);
  char v43 = 0;
  uint64_t v42 = 0;
  unint64_t v44 = 0;
  if (v48)
  {
    for (unint64_t i = 0; i < v48; ++i)
    {
      ++*(void *)(a1 + 504);
      uint64_t v12 = *(char **)(v46 + 8 * i);
      unint64_t v13 = TStringParam::get((TStringParam *)(*(void *)(a1 + 320) + 488));
      if (!TLexicon::applyMask(a1, (uint64_t)v12, v13, 0))
      {
        if ((unint64_t)SDWord_GetName(*(void **)(a1 + 88), v12, v56, 0x100uLL) < 0x101)
        {
          uint64_t v38 = v40;
          long long v39 = xmmword_1B25607E0;
          char v41 = 1;
          if (TLocaleInfo::multiByteToUnicode(a1 + 224, (unsigned __int8 *)v56, (uint64_t)&v38))
          {
            tknPrintf("Warning: '%s' : Can't convert to Unicode. Ignored.\n", v15, v56);
          }
          else
          {
            if (*((void *)&v39 + 1) >= (unint64_t)v39)
            {
              if (v41)
              {
                LODWORD(v53[0]) = 0;
                TBuffer<wchar_t>::insert((uint64_t)&v38, *((unint64_t *)&v39 + 1), (int *)v53, 1uLL);
                uint64_t v16 = (const __int32 *)v38;
                --*((void *)&v39 + 1);
              }
              else
              {
                uint64_t v16 = (const __int32 *)v38;
                if ((void)v39) {
                  *((_DWORD *)v38 + v39 - 1) = 0;
                }
              }
            }
            else
            {
              uint64_t v16 = (const __int32 *)v38;
              *((_DWORD *)v38 + *((void *)&v39 + std::__tree<int>::destroy((uint64_t)this, *((void **)this + 1)) = 0;
            }
            v55[0] = v16;
            v55[1] = 0;
            THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::find(a1 + 184, v55, v53);
            if (!v54 || (uint64_t v17 = *(void *)(v54 + 16)) == 0) {
              operator new[]();
            }
            uint64_t v18 = (char *)v43;
            if ((unint64_t)v43 >= v44)
            {
              int64_t v20 = ((unsigned char *)v43 - (unsigned char *)v42) >> 3;
              if ((unint64_t)(v20 + 1) >> 61) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v21 = (uint64_t)(v44 - (void)v42) >> 2;
              if (v21 <= v20 + 1) {
                unint64_t v21 = v20 + 1;
              }
              if (v44 - (unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v10 = v21;
              }
              if (v10) {
                char v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v44, v10);
              }
              else {
                char v22 = 0;
              }
              char v23 = &v22[8 * v20];
              *(void *)char v23 = v17;
              unint64_t v19 = v23 + 8;
              uint64_t v24 = (char *)v43;
              uint64_t v25 = (char *)v42;
              if (v43 != v42)
              {
                do
                {
                  uint64_t v26 = *((void *)v24 - 1);
                  v24 -= 8;
                  *((void *)v23 - 1) = v26;
                  v23 -= 8;
                }
                while (v24 != v25);
                uint64_t v24 = (char *)v42;
              }
              uint64_t v42 = v23;
              char v43 = v19;
              unint64_t v44 = (unint64_t)&v22[8 * v10];
              if (v24) {
                operator delete(v24);
              }
            }
            else
            {
              *(void *)char v43 = v17;
              unint64_t v19 = v18 + 8;
            }
            char v43 = v19;
          }
          if (v41)
          {
            if (v38 != v40 && v38 != 0) {
              MEMORY[0x1B3EA8630]();
            }
          }
        }
        else
        {
          tknPrintf("Warning: The voc contains a >= %llu-byte word name, prefix is '%s'. Ignored.\n", v14, 256, v56);
        }
      }
    }
  }
  if (v46 != *(void *)(a1 + 424))
  {
    tknPrintf("Warning: Inefficient head-clone search. Required dynamic allocation of size %llu\n", v10, v47);
    uint64_t v28 = *(void *)(a1 + 424);
    if (v28) {
      MEMORY[0x1B3EA8630](v28, 0x80C80B8603338);
    }
    *(void *)(a1 + 424) = v46;
    *(void *)(a1 + 408) = v47;
  }
  char v29 = (char *)v42;
  int v30 = v43;
  if (v42 == v43)
  {
    uint64_t v5 = 0;
    if (!v42) {
      goto LABEL_68;
    }
  }
  else
  {
    uint64_t v31 = *(void *)v42;
    uint64_t v32 = *(void *)(*(void *)v42 + 32);
    *(void *)(*(void *)v42 + 32) = v32 | 1;
    uint64_t v33 = v30 - v29;
    if ((unint64_t)v33 > 8 || (v32 & 2) == 0)
    {
      *(void *)(v31 + 32) = v32 | 3;
      if ((unint64_t)v33 >= 9)
      {
        unint64_t v34 = v33 >> 3;
        if (v34 <= 2) {
          unint64_t v34 = 2;
        }
        unint64_t v35 = v34 - 1;
        long long v36 = (uint64_t *)(v29 + 8);
        do
        {
          uint64_t v37 = *v36++;
          *(void *)(v37 + 32) |= 1uLL;
          --v35;
        }
        while (v35);
      }
      TWordBlock::create();
    }
    uint64_t v5 = 0;
  }
  char v43 = v29;
  operator delete(v29);
LABEL_68:
  if (v60 && v57 != v59 && v57) {
    MEMORY[0x1B3EA8630]();
  }
  if (v52 && __p != v51 && __p) {
    MEMORY[0x1B3EA8630]();
  }
  return v5;
}

void sub_1B214E008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  uint64_t v26 = (void *)STACK[0x478];
  if (STACK[0x478])
  {
    STACK[0x480] = (unint64_t)v26;
    operator delete(v26);
  }
  if (LOBYTE(STACK[0xB18]))
  {
    unint64_t v27 = STACK[0xA00];
    if (STACK[0xA00] != a15)
    {
      if (v27) {
        MEMORY[0x1B3EA8630](v27, 0x1000C8077774924);
      }
    }
  }
  if (LOBYTE(STACK[0x8C8]))
  {
    unint64_t v28 = STACK[0x4B0];
    if (STACK[0x4B0] != a16)
    {
      if (v28) {
        MEMORY[0x1B3EA8630](v28, 0x1000C8052888210);
      }
    }
  }
  _Unwind_Resume(a1);
}

uint64_t *TLexiconScore::TLexiconScore(uint64_t *a1, const __int32 *a2, unsigned int *a3, size_t a4, size_t a5, uint64_t a6)
{
  *((unsigned char *)a1 + 8) = 0;
  *a1 = 0;
  size_t v12 = wcslen((const __int32 *)a3);
  if (wcsncmp(a2, (const __int32 *)a3, v12))
  {
    size_t v39 = a4;
    if (*a2)
    {
      unint64_t v13 = (unsigned int *)a2;
      uint64_t v14 = a3;
      while (1)
      {
        if (!*v14) {
          goto LABEL_77;
        }
        unint64_t v49 = 0;
        TCollation::collateNext((void *)(a6 + 16), v13, &v49);
        unint64_t v48 = 0;
        TCollation::collateNext((void *)(a6 + 16), v14, &v48);
        if (v49 != v48
          || (uint64_t v15 = TLocaleInfo::removeDiacritics(a6, *v13),
              int v16 = TLocaleInfo::toLower(a6, v15),
              uint64_t v17 = TLocaleInfo::removeDiacritics(a6, *v14),
              v16 != TLocaleInfo::toLower(a6, v17)))
        {
          ++*((unsigned char *)a1 + 8);
        }
        signed int v18 = *v13;
        {
          operator new();
        }
        if (TLocaleInfo::isAlpha(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v18))
        {
          signed int v19 = *v14;
          {
            operator new();
          }
          if (TLocaleInfo::isAlpha(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v19)) {
            break;
          }
        }
LABEL_59:
        v13 += v49;
        v14 += v48;
        if (!*v13) {
          goto LABEL_77;
        }
      }
      int v20 = *v13;
      {
        operator new();
      }
      if (!TLocaleInfo::isLower(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v20)) {
        goto LABEL_18;
      }
      int v21 = *v14;
      {
        operator new();
      }
      if (TLocaleInfo::isUpper(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v21))
      {
        uint64_t v22 = *a1;
        if (v14 == a3) {
          uint64_t v23 = v22 | 1;
        }
        else {
          uint64_t v23 = v22 | 4;
        }
      }
      else
      {
LABEL_18:
        int v24 = *v13;
        {
          operator new();
        }
        if (!TLocaleInfo::isUpper(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v24)) {
          goto LABEL_27;
        }
        int v25 = *v14;
        {
          operator new();
        }
        if (!TLocaleInfo::isLower(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v25))
        {
LABEL_27:
          unint64_t v44 = v46;
          long long v45 = xmmword_1B25607E0;
          char v47 = 1;
          unsigned int v40 = v42;
          long long v41 = xmmword_1B25607E0;
          char v43 = 1;
          TLocaleInfo::decomposeCharacter(a6, *v13, (uint64_t *)&v44);
          TLocaleInfo::decomposeCharacter(a6, *v14, (uint64_t *)&v40);
          if (*((void *)&v45 + 1) >= (unint64_t)v45)
          {
            if (v47)
            {
              v50[0] = 0;
              TBuffer<wchar_t>::insert((uint64_t)&v44, *((unint64_t *)&v45 + 1), v50, 1uLL);
              uint64_t v27 = (uint64_t)v44;
              --*((void *)&v45 + 1);
            }
            else
            {
              uint64_t v27 = (uint64_t)v44;
              if ((void)v45) {
                *(_DWORD *)&v44[4 * v45 - 4] = 0;
              }
            }
          }
          else
          {
            uint64_t v27 = (uint64_t)v44;
            *(_DWORD *)&v44[4 * *((void *)&v45 + 1)] = 0;
          }
          if (*((void *)&v41 + 1) >= (unint64_t)v41)
          {
            if (v43)
            {
              v50[0] = 0;
              TBuffer<wchar_t>::insert((uint64_t)&v40, *((unint64_t *)&v41 + 1), v50, 1uLL);
              uint64_t v28 = (uint64_t)v40;
              --*((void *)&v41 + 1);
            }
            else
            {
              uint64_t v28 = (uint64_t)v40;
              if ((void)v41) {
                *(_DWORD *)&v40[4 * v41 - 4] = 0;
              }
            }
          }
          else
          {
            uint64_t v28 = (uint64_t)v40;
            *(_DWORD *)&v40[4 * *((void *)&v41 + 1)] = 0;
          }
          if (!wcscmp((const __int32 *)(v27 + 4), (const __int32 *)(v28 + 4))) {
            goto LABEL_51;
          }
          int v29 = *v13;
          {
            operator new();
          }
          if (TLocaleInfo::isUpper(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v29))
          {
            if (*((void *)&v45 + 1) < 2uLL) {
              goto LABEL_51;
            }
            int v30 = *v14;
            {
              operator new();
            }
            char isLower = TLocaleInfo::isLower(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v30);
            char v32 = *((void *)&v41 + 1) > 1uLL ? 1 : isLower;
            if ((v32 & 1) == 0) {
              goto LABEL_51;
            }
            uint64_t v33 = 32;
          }
          else
          {
            uint64_t v33 = 16;
          }
          *a1 |= v33;
LABEL_51:
          if (v43 && v40 != v42 && v40) {
            MEMORY[0x1B3EA8630]();
          }
          if (v47 && v44 != v46 && v44) {
            MEMORY[0x1B3EA8630]();
          }
          goto LABEL_59;
        }
        uint64_t v26 = *a1;
        if (v13 == (unsigned int *)a2) {
          uint64_t v23 = v26 | 2;
        }
        else {
          uint64_t v23 = v26 | 8;
        }
      }
      *a1 = v23;
      goto LABEL_27;
    }
LABEL_77:
    size_t v34 = wcslen((const __int32 *)a3);
    uint64_t v35 = *a1;
    if ((*a1 & 5) != 0 && v34 < a5) {
      v35 |= 0x40uLL;
    }
    BOOL v37 = (v35 & 0x30) != 0 && v34 < v39;
    if ((*a1 & 5) != 0 && v34 < a5 || v37)
    {
      if (v37) {
        v35 |= 0x80uLL;
      }
      *a1 = v35;
    }
  }
  return a1;
}

void sub_1B214E7D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  MEMORY[0x1B3EA8670](a10, 0x1070C40ADD13FEBLL);
  if (LOBYTE(STACK[0x458]) && a17 != a15 && a17) {
    MEMORY[0x1B3EA8630]();
  }
  if (LOBYTE(STACK[0x878]))
  {
    unint64_t v18 = STACK[0x460];
    if (STACK[0x460] != a16)
    {
      if (v18) {
        MEMORY[0x1B3EA8630](v18, 0x1000C8052888210);
      }
    }
  }
  _Unwind_Resume(a1);
}

uint64_t TCollation::collateNext(void *a1, unsigned int *a2, unint64_t *a3)
{
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  uint64_t result = *a2;
  BOOL v7 = v4 == v5 || result == 0;
  if (!v7 && a2[1]) {
    return TCollation::collateCharSlow((uint64_t)a1, a2, a3);
  }
  *a3 = 1;
  uint64_t v8 = a1[2];
  if (v8)
  {
    if ((unint64_t)(int)result < 0x10000) {
      return *(unsigned int *)(v8 + 4 * (int)result);
    }
  }
  return result;
}

void TLexiconParamManager::TLexiconParamManager(TLexiconParamManager *this, TLexicon *a2)
{
  TParamManager::TParamManager(this, 1, (TLexicon *)((char *)a2 + 224));
  *uint64_t v3 = &unk_1F0A341B8;
  uint64_t v4 = (TParam *)(v3 + 17);
  TIntParam::TIntParam((TIntParam *)(v3 + 17), (uint64_t)&unk_1B2598768, (uint64_t)&unk_1B25987C4, 256, 2, 4, 4, (uint64_t)&unk_1B2598BB4, (uint64_t)&unk_1B2598BEC);
  TStringParam::TStringParam((char *)this + 488, &unk_1B2598BF0, &unk_1B2598C28, 0, &unk_1B2598FDC, &unk_1B25990F4, &unk_1B2598BEC);
  TIntParam::TIntParam((TLexiconParamManager *)((char *)this + 1864), (uint64_t)&unk_1B259912C, (uint64_t)&unk_1B25991B8, 0, 1, 256, 4, (uint64_t)&unk_1B25990F4, (uint64_t)&unk_1B2599944);
  TIntParam::TIntParam((TLexiconParamManager *)((char *)this + 2216), (uint64_t)&unk_1B2599984, (uint64_t)&unk_1B2599A08, 0, 1, 256, 4, (uint64_t)&unk_1B25990F4, (uint64_t)&unk_1B2599944);
  TIntParam::TIntParam((TLexiconParamManager *)((char *)this + 2568), (uint64_t)&unk_1B259A228, (uint64_t)&unk_1B259A2D0, 0, 0, 0x7FFFFFFF, 2000, (uint64_t)&unk_1B25990F4, (uint64_t)&unk_1B2598BEC);
  TIntParam::TIntParam((TLexiconParamManager *)((char *)this + 2920), (uint64_t)&unk_1B259A440, (uint64_t)&unk_1B259A4F0, 0, 0, 0x7FFFFFFF, 5000, (uint64_t)&unk_1B25990F4, (uint64_t)&unk_1B2598BEC);
  TStringParam::TStringParam((char *)this + 3272, &unk_1B259A6FC, &unk_1B259A730, 256, &unk_1B2598BEC, &unk_1B259A84C, &unk_1B2598BEC);
  TStringParam::TStringParam((char *)this + 4648, &unk_1B259A884, &unk_1B259A8B4, 0, &unk_1B2598BEC, &unk_1B259A9D4, &unk_1B2598BEC);
  TStringParam::TStringParam((char *)this + 6024, &unk_1B259AA0C, &unk_1B259AA48, 0, &unk_1B2598BEC, &unk_1B259A9D4, &unk_1B2598BEC);
  TStringParam::TStringParam((char *)this + 7400, &unk_1B259AB70, &unk_1B259ABB8, 0, &unk_1B2598BEC, &unk_1B259A9D4, &unk_1B2598BEC);
  TStringParam::TStringParam((char *)this + 8776, &unk_1B259ACF8);
  TStringParam::TStringParam((char *)this + 10152, &unk_1B259AD58, &unk_1B259ADA0, 0, &unk_1B2598BEC, &unk_1B259A9D4, &unk_1B2598BEC);
  TStringParam::TStringParam((char *)this + 11528, &unk_1B259AE40, &unk_1B259AE84, 0, &unk_1B2598BEC, &unk_1B259A9D4, &unk_1B2598BEC);
  TStringParam::TStringParam((char *)this + 12904, &unk_1B259AFB0, &unk_1B259B00C, 0, &unk_1B2598BEC, &unk_1B259A9D4, &unk_1B2598BEC);
  TStringParam::TStringParam((char *)this + 14280, &unk_1B259B0C4, &unk_1B259B11C, 0, &unk_1B2598BEC, &unk_1B259A9D4, &unk_1B2598BEC);
  TStringParam::TStringParam((char *)this + 15656, &unk_1B259B248);
  TStringParam::TStringParam((char *)this + 17032, &unk_1B259B2A0, &unk_1B259B2D8, 0, &unk_1B2598BEC, &unk_1B259A9D4, &unk_1B2598BEC);
  TStringParam::TStringParam((char *)this + 18408, &unk_1B259B3E0, &unk_1B259B414, 0, &unk_1B2598BEC, &unk_1B259A9D4, &unk_1B2598BEC);
  TStringParam::TStringParam((char *)this + 19784, &unk_1B259B480, &unk_1B259B4B4, 0, &unk_1B2598BEC, &unk_1B259A9D4, &unk_1B2598BEC);
  TIntParam::TIntParam((TLexiconParamManager *)((char *)this + 21160), (uint64_t)&unk_1B259B520, (uint64_t)&unk_1B259B564, 0, 0, 99, 29, (uint64_t)&unk_1B259A9D4, (uint64_t)&unk_1B2598BEC);
  TBoolParam::TBoolParam((uint64_t)this + 21512, (uint64_t)&unk_1B259B7F4, (uint64_t)&unk_1B259B840, 0, 0, (uint64_t)&unk_1B25990F4, (uint64_t)&unk_1B2598BEC);
  TParamManager::add(this, v4);
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 488));
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 1864));
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 2216));
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 2568));
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 2920));
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 3272));
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 4648));
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 6024));
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 7400));
  MEMORY[0x1B3EA7C30]((char *)this + 8816, &unk_1B259B8A8);
  MEMORY[0x1B3EA7C30]((char *)this + 8840, &unk_1B259A9D4);
  MEMORY[0x1B3EA7C30]((char *)this + 8864, &unk_1B2598BEC);
  std::vector<std::wstring>::vector(&v13, 4uLL);
  std::vector<std::wstring>::vector(&v12, 4uLL);
  uint64_t v5 = 0;
  __int32 v6 = (const __int32 *)&unk_1B259B9A0;
  do
  {
    MEMORY[0x1B3EA7C30](&v13.__begin_[v5], v6);
    v6 += wcslen(v6) + 1;
    ++v5;
  }
  while (v5 != 4);
  TStringParam::setAllowables((uint64_t)this + 8776, (uint64_t)&v13, 0, 0);
  TStringParam::setOriginal((void *)this + 1097, 0, dword_1B259B9FC);
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 8776));
  v14[0] = (void **)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v14);
  v12.__begin_ = (std::vector<std::wstring>::pointer)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 10152));
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 11528));
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 12904));
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 14280));
  MEMORY[0x1B3EA7C30]((char *)this + 15696, &unk_1B259BA10);
  MEMORY[0x1B3EA7C30]((char *)this + 15720, &unk_1B259BAF8);
  MEMORY[0x1B3EA7C30]((char *)this + 15744, &unk_1B2598BEC);
  std::vector<std::wstring>::vector(&v13, 3uLL);
  std::vector<std::wstring>::vector(&v12, 3uLL);
  uint64_t v7 = 0;
  uint64_t v8 = (const __int32 *)&unk_1B259BB38;
  uint64_t v9 = (const __int32 *)&unk_1B259BBD0;
  do
  {
    MEMORY[0x1B3EA7C30](&v13.__begin_[v7], v8);
    if (v9)
    {
      MEMORY[0x1B3EA7C30](&v12.__begin_[v7], v9);
      v9 += wcslen(v9) + 1;
    }
    v8 += wcslen(v8) + 1;
    ++v7;
  }
  while (v7 != 3);
  if (v9) {
    unint64_t v10 = &v12;
  }
  else {
    unint64_t v10 = 0;
  }
  TStringParam::setAllowables((uint64_t)this + 15656, (uint64_t)&v13, (uint64_t)v10, 0);
  TStringParam::setOriginal((void *)this + 1957, 0, dword_1B259BBEC);
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 15656));
  v14[0] = (void **)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v14);
  v12.__begin_ = (std::vector<std::wstring>::pointer)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 17032));
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 18408));
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 19784));
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 21160));
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 21512));
  *((void *)this + 272std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = a2;
}

void sub_1B214F100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, void **a13, void **a14, void **a15, void **a16, void **a17, void **a18, void **a19, void **a20,void **a21,void **a22,void **a23,void **a24,void **a25,void **a26,uint64_t a27)
{
  a27 = v34 - 120;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a27);
  TBoolParam::~TBoolParam(v32);
  TParam::~TParam(v31);
  TStringParam::~TStringParam(v30);
  TStringParam::~TStringParam(v28);
  TStringParam::~TStringParam(a13);
  TStringParam::~TStringParam(v33);
  TStringParam::~TStringParam(a14);
  TStringParam::~TStringParam(a15);
  TStringParam::~TStringParam(a16);
  TStringParam::~TStringParam(a17);
  TStringParam::~TStringParam(v29);
  TStringParam::~TStringParam(a18);
  TStringParam::~TStringParam(a19);
  TStringParam::~TStringParam(a20);
  TStringParam::~TStringParam(a21);
  TParam::~TParam(a22);
  TParam::~TParam(a23);
  TParam::~TParam(a24);
  TParam::~TParam(a25);
  TStringParam::~TStringParam(a26);
  TParam::~TParam(a11);
  TParamManager::~TParamManager(v27);
  _Unwind_Resume(a1);
}

char *TLexiconParamManager::notifyChange(char *this, const TParam *a2)
{
  if (this + 4648 == (char *)a2)
  {
    uint64_t v2 = *((void *)this + 2720);
    this = TStringParam::get(a2);
    *(void *)(v2 + 232) = this;
  }
  return this;
}

void TLexicon::TLexicon(TLexicon *this, TDataManager *a2, void *a3)
{
  TAllocator::TAllocator(this, 2048);
  *(void *)(v5 + 56) = 0;
  *(void *)(v5 + 64) = 0;
  *(void *)(v5 + 72) = 0;
  *(void *)(v5 + 96) = 0;
  *(void *)(v5 + 104) = 0;
  *(void *)(v5 + 112) = 0;
  *(void *)(v5 + 136) = 0;
  *(void *)(v5 + 144) = 0;
  *(unsigned char *)(v5 + 154) = 1;
  *(void *)(v5 + 12std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = &unk_1F0A35138;
  *(void *)(v5 + 128) = 0;
  *(void *)(v5 + 168) = 0;
  *(void *)(v5 + 16std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = v5 + 168;
  *(void *)(v5 + 20std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = 0;
  *(void *)(v5 + 208) = 0;
  *(void *)(v5 + 192) = 0;
  *(unsigned char *)(v5 + 218) = 1;
  *(void *)(v5 + 176) = 0;
  *(void *)(v5 + 184) = &unk_1F0A35118;
  TLocaleInfo::TLocaleInfo((TLocaleInfo *)(v5 + 224));
  *((void *)this + 11) = a3;
  operator new();
}

void sub_1B214FFEC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, void *a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a46 < 0)
  {
    operator delete(__p);
    if ((v51 & 1) == 0)
    {
LABEL_6:
      if (a24 < 0) {
        operator delete(a19);
      }
      TEnvManager::~TEnvManager(&a31);
      if (a2 == 1)
      {
        __cxa_begin_catch(a1);
        long long v55 = *(TDataSaver **)(v46 + 336);
        if (v55)
        {
          TDataSaver::~TDataSaver(v55);
          MEMORY[0x1B3EA8670]();
        }
        uint64_t v56 = *(void *)(v46 + 320);
        if (v56) {
          (*(void (**)(uint64_t))(*(void *)v56 + 8))(v56);
        }
        uint64_t v57 = *(void *)(v46 + 328);
        if (v57) {
          (*(void (**)(uint64_t))(*(void *)v57 + 8))(v57);
        }
        uint64_t v58 = *(void *)(v46 + 400);
        if (v58) {
          MEMORY[0x1B3EA8630](v58, 0x1000C8077774924);
        }
        uint64_t v59 = *(void *)(v46 + 424);
        if (v59) {
          MEMORY[0x1B3EA8630](v59, 0x80C80B8603338);
        }
        uint64_t v60 = *(void *)(v46 + 432);
        if (v60) {
          MEMORY[0x1B3EA8630](v60, 0x80C80B8603338);
        }
        __cxa_rethrow();
      }
      TCollation::~TCollation((TCollation *)(v46 + 240));
      THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::~THashBase(v49);
      std::__tree<std::string>::destroy(v48, *v52);
      THashBase<std::pair<wchar_t * const,TWordBlock *>,THashMapCompare<std::pair<wchar_t * const,TWordBlock *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t * const,TWordBlock *>,THash<wchar_t const*>>>::~THashBase(a15);
      uint64_t v61 = *a14;
      if (*a14)
      {
        *(void *)(v46 + 104) = v61;
        operator delete(v61);
      }
      if (*(char *)(v46 + 79) < 0) {
        operator delete(*v47);
      }
      TAllocator::clear((TAllocator *)v46);
      _Unwind_Resume(a1);
    }
  }
  else if (!v51)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v50);
  goto LABEL_6;
}

void sub_1B2150308()
{
}

void sub_1B2150364(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1B2150370);
  }
  __clang_call_terminate(a1);
}

void TLexicon::overrideCollation(TLexicon *this)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (uint64_t *)*((void *)this + 12);
  uint64_t v3 = (uint64_t *)*((void *)this + 13);
  if (v3 == v2)
  {
    uint64_t v2 = (uint64_t *)*((void *)this + 13);
  }
  else
  {
    unint64_t v4 = 0;
    uint64_t v5 = 1;
    do
    {
      uint64_t v6 = v2[v5];
      if (v6)
      {
        MEMORY[0x1B3EA8630](v6, 0x1000C8052888210);
        uint64_t v2 = (uint64_t *)*((void *)this + 12);
        uint64_t v3 = (uint64_t *)*((void *)this + 13);
      }
      ++v4;
      v5 += 2;
    }
    while (v4 < ((char *)v3 - (char *)v2) >> 4);
  }
  *((void *)this + 13) = v2;
  unint64_t v7 = *((void *)this + 30);
  uint64_t v8 = (unsigned int *)*((void *)this + 31);
  unsigned int v40 = (__int32 *)v42;
  long long v41 = xmmword_1B25607E0;
  char v43 = 1;
  std::string __s = v47;
  long long v46 = xmmword_1B25607E0;
  char v48 = 1;
  memset(&v39, 0, sizeof(v39));
  uint64_t v9 = (uint64_t)v2;
  unint64_t v34 = v7;
  if (v7)
  {
    unint64_t v35 = 1;
    do
    {
      TBuffer<wchar_t>::resize((uint64_t)&v40, 0);
      std::vector<std::string>::resize(&v39, 0);
      long long v36 = v8;
      if (*v8)
      {
        do
        {
          TBuffer<char>::resize((uint64_t)&__s, 0);
          TLocaleInfo::unicodeToMultiByte((uint64_t)this + 224, v8, (uint64_t)&__s);
          std::vector<std::string>::pointer begin = v39.__begin_;
          if (v39.__end_ == v39.__begin_) {
            goto LABEL_27;
          }
          uint64_t v11 = 0;
          unint64_t v12 = 1;
          do
          {
            std::vector<std::wstring> v13 = (const char *)&begin[v11];
            if (SHIBYTE(begin[v11].__r_.__value_.__r.__words[2]) < 0) {
              std::vector<std::wstring> v13 = *(const char **)v13;
            }
            uint64_t v14 = (void *)*((void *)this + 11);
            int v15 = *((_DWORD *)this + 20);
            if (*((void *)&v46 + 1) >= (unint64_t)v46)
            {
              if (v48)
              {
                LOBYTE(__v.__first_) = 0;
                TBuffer<char>::insert((uint64_t)&__s, *((unint64_t *)&v46 + 1), (char *)&__v, 1uLL);
                --*((void *)&v46 + 1);
              }
              else if ((void)v46)
              {
                __s[(void)v46 - 1] = 0;
              }
            }
            else
            {
              __s[*((void *)&v46 + 1)] = 0;
            }
            int v16 = SDColl_StringCompare(v14, v15, v13, __s);
            std::vector<std::string>::pointer begin = v39.__begin_;
            BOOL v17 = v12++ >= 0xAAAAAAAAAAAAAAABLL * (((char *)v39.__end_ - (char *)v39.__begin_) >> 3);
            ++v11;
          }
          while (!v17 && v16 != 0);
          if (v16)
          {
LABEL_27:
            uint64_t v19 = 0;
            while (v8[v19++])
              ;
            TBuffer<wchar_t>::insert((uint64_t)&v40, *((unint64_t *)&v41 + 1), (int *)v8, v19 - 1);
            LODWORD(__v.__first_) = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v40, *((unint64_t *)&v41 + 1), (int *)&__v, 1uLL);
            if (*((void *)&v46 + 1) >= (unint64_t)v46)
            {
              if (v48)
              {
                LOBYTE(__v.__first_) = 0;
                TBuffer<char>::insert((uint64_t)&__s, *((unint64_t *)&v46 + 1), (char *)&__v, 1uLL);
                --*((void *)&v46 + 1);
              }
              else if ((void)v46)
              {
                __s[(void)v46 - 1] = 0;
              }
            }
            else
            {
              __s[*((void *)&v46 + 1)] = 0;
            }
            std::string::basic_string[abi:ne180100]<0>(__p, __s);
            std::vector<std::string>::pointer end = v39.__end_;
            if (v39.__end_ >= v39.__end_cap_.__value_)
            {
              unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * (((char *)v39.__end_ - (char *)v39.__begin_) >> 3);
              unint64_t v24 = v23 + 1;
              if (v23 + 1 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              if (0x5555555555555556 * (((char *)v39.__end_cap_.__value_ - (char *)v39.__begin_) >> 3) > v24) {
                unint64_t v24 = 0x5555555555555556 * (((char *)v39.__end_cap_.__value_ - (char *)v39.__begin_) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * (((char *)v39.__end_cap_.__value_ - (char *)v39.__begin_) >> 3) >= 0x555555555555555) {
                unint64_t v25 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v25 = v24;
              }
              __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v39.__end_cap_;
              if (v25) {
                uint64_t v26 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v39.__end_cap_, v25);
              }
              else {
                uint64_t v26 = 0;
              }
              uint64_t v27 = v26 + v23;
              __v.__first_ = v26;
              __v.__begin_ = v27;
              __v.__end_cap_.__value_ = &v26[v25];
              long long v28 = *(_OWORD *)__p;
              v27->__r_.__value_.__r.__words[2] = v38;
              *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v28;
              __p[1] = 0;
              std::string::size_type v38 = 0;
              __p[0] = 0;
              __v.__end_ = v27 + 1;
              std::vector<std::string>::__swap_out_circular_buffer(&v39, &__v);
              int v29 = v39.__end_;
              std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
              v39.__end_ = v29;
              if (SHIBYTE(v38) < 0) {
                operator delete(__p[0]);
              }
            }
            else
            {
              long long v22 = *(_OWORD *)__p;
              v39.__end_->__r_.__value_.__r.__words[2] = v38;
              *(_OWORD *)&end->__r_.__value_.__l.__data_ = v22;
              v39.__end_ = end + 1;
            }
          }
          int v30 = &v8[wcslen((const __int32 *)v8)];
          unsigned int v31 = v30[1];
          uint64_t v8 = v30 + 1;
        }
        while (v31);
      }
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v39.__end_ - (char *)v39.__begin_) >> 3) >= 2)
      {
        LODWORD(__v.__first_) = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v40, *((unint64_t *)&v41 + 1), (int *)&__v, 1uLL);
        uint64_t v8 = v36;
        if (*v36) {
          operator new[]();
        }
      }
      ++v8;
      ++v35;
    }
    while (v35 <= v34);
    uint64_t v9 = *((void *)this + 12);
    uint64_t v2 = (uint64_t *)*((void *)this + 13);
  }
  unint64_t v32 = 126 - 2 * __clz(((uint64_t)v2 - v9) >> 4);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)sortByFirst;
  if (v2 == (uint64_t *)v9) {
    uint64_t v33 = 0;
  }
  else {
    uint64_t v33 = v32;
  }
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*,false>(v9, v2, (uint64_t (**)(uint64_t *, uint64_t *))&__v, v33, 1);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v39;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  if (v48 && __s != v47 && __s) {
    MEMORY[0x1B3EA8630]();
  }
  if (v43 && v40 != (__int32 *)v42)
  {
    if (v40) {
      MEMORY[0x1B3EA8630]();
    }
  }
}

void sub_1B21509FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  std::string __p = &a19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (LOBYTE(STACK[0x5C8]))
  {
    if (STACK[0x4B0] != a9 && STACK[0x4B0] != 0) {
      MEMORY[0x1B3EA8630]();
    }
  }
  if (LOBYTE(STACK[0x480]) && a22 != a10)
  {
    if (a22) {
      MEMORY[0x1B3EA8630]();
    }
  }
  _Unwind_Resume(a1);
}

uint64_t TLexicon::validateLexicon(TLexicon *this)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  unint64_t v19 = 0;
  unint64_t v18 = 0;
  uint64_t v17 = 0;
  char v16 = 0;
  SDVoc_GetWords(*((void **)this + 11), 1, "", "", 0, 0, &v19, &v17, &v18, (uint64_t)callBackMRECArrayReallocator, 0, &v16);
  uint64_t result = v17;
  if (v17)
  {
    if (!v19) {
      return MEMORY[0x1B3EA8630]();
    }
    for (unint64_t i = 0; i < v19; ++i)
    {
      unint64_t v4 = *(char **)(v17 + 8 * i);
      uint64_t v5 = TStringParam::get((TStringParam *)(*((void *)this + 40) + 488));
      if (!TLexicon::applyMask((uint64_t)this, (uint64_t)v4, v5, 0))
      {
        if ((unint64_t)SDWord_GetName(*((void **)this + 11), v4, v21, 0x100uLL) < 0x101)
        {
          unint64_t v12 = (int *)v14;
          long long v13 = xmmword_1B25607E0;
          char v15 = 1;
          char v8 = TLocaleInfo::multiByteToUnicode((uint64_t)this + 224, (unsigned __int8 *)v21, (uint64_t)&v12);
          uint64_t v9 = "Warning: '%s' : Can't convert to Unicode.\n";
          if (v8) {
            goto LABEL_15;
          }
          if (*((void *)&v13 + 1) >= (unint64_t)v13)
          {
            if (v15)
            {
              int v20 = 0;
              TBuffer<wchar_t>::insert((uint64_t)&v12, *((unint64_t *)&v13 + 1), &v20, 1uLL);
              unint64_t v10 = v12;
              --*((void *)&v13 + 1);
            }
            else
            {
              unint64_t v10 = v12;
              if ((void)v13) {
                v12[(void)v13 - 1] = 0;
              }
            }
          }
          else
          {
            unint64_t v10 = v12;
            v12[*((void *)&v13 + 1)] = 0;
          }
          int v11 = TLexicon::checkName((uint64_t)this, v10, 0, 0xFFFFFFFFFFFFFFFFLL);
          uint64_t v9 = "Warning: '%s' : Invalid word found in voc.\n";
          if (v11) {
LABEL_15:
          }
            tknPrintf(v9, v7, v21);
          if (v15 && v12 != (int *)v14)
          {
            if (v12) {
              MEMORY[0x1B3EA8630]();
            }
          }
        }
        else
        {
          tknPrintf("Warning: The voc contains a >= %llu-byte word name, prefix is '%s'.\n", v6, 256, v21);
        }
      }
    }
    uint64_t result = v17;
    if (v17) {
      return MEMORY[0x1B3EA8630]();
    }
  }
  return result;
}

void sub_1B2150D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  if (LOBYTE(STACK[0x450])) {
    TPatternManager::addArrayObject((uint64_t)va);
  }
  _Unwind_Resume(a1);
}

void THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::resize(uint64_t a1, uint64_t a2)
{
}

void TLexicon::~TLexicon(TLexicon *this)
{
  uint64_t v2 = *((void *)this + 50);
  if (v2) {
    MEMORY[0x1B3EA8630](v2, 0x1000C8077774924);
  }
  uint64_t v3 = *((void *)this + 53);
  if (v3) {
    MEMORY[0x1B3EA8630](v3, 0x80C80B8603338);
  }
  uint64_t v4 = *((void *)this + 54);
  if (v4) {
    MEMORY[0x1B3EA8630](v4, 0x80C80B8603338);
  }
  uint64_t v5 = *((void *)this + 40);
  uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(v5 + 136));
  uint64_t v7 = *(int *)(v5 + 4 * TParam::getValidConfig((TParam *)(v5 + 136), ActiveConfigHandle) + 296);
  uint64_t v8 = *(int *)(*((void *)this + 40) + 288);
  if (v7 > v8)
  {
    uint64_t v9 = 0;
    unint64_t v10 = v7 - v8;
    if (v10 <= 1) {
      uint64_t v11 = 1;
    }
    else {
      uint64_t v11 = v10;
    }
    do
    {
      uint64_t v12 = *((void *)this + 44);
      uint64_t v13 = *(void *)(v12 + 8 * v9);
      if (v13)
      {
        std::__tree<int>::destroy(*(void *)(v12 + 8 * v9), *(void **)(v13 + 8));
        MEMORY[0x1B3EA8670](v13, 0x1020C4062D53EE8);
      }
      uint64_t v14 = *((void *)this + 45);
      uint64_t v15 = *(void *)(v14 + 8 * v9);
      if (v15)
      {
        std::__tree<int>::destroy(*(void *)(v14 + 8 * v9), *(void **)(v15 + 8));
        MEMORY[0x1B3EA8670](v15, 0x1020C4062D53EE8);
      }
      uint64_t v16 = *((void *)this + 5);
      uint64_t v17 = *(void *)(v16 + 8 * v9);
      if (v17)
      {
        TAllocator::clear(*(TAllocator **)(v16 + 8 * v9));
        MEMORY[0x1B3EA8670](v17, 0x1010C40CCBCF24ELL);
      }
      uint64_t v18 = *((void *)this + 6);
      uint64_t v19 = *(void *)(v18 + 8 * v9);
      if (v19)
      {
        TAllocator::clear(*(TAllocator **)(v18 + 8 * v9));
        MEMORY[0x1B3EA8670](v19, 0x1010C40CCBCF24ELL);
      }
      ++v9;
    }
    while (v11 != v9);
    uint64_t v20 = *((void *)this + 44);
    if (v20) {
      MEMORY[0x1B3EA8630](v20, 0x20C8093837F09);
    }
    uint64_t v21 = *((void *)this + 45);
    if (v21) {
      MEMORY[0x1B3EA8630](v21, 0x20C8093837F09);
    }
    uint64_t v22 = *((void *)this + 5);
    if (v22) {
      MEMORY[0x1B3EA8630](v22, 0x20C8093837F09);
    }
    uint64_t v23 = *((void *)this + 6);
    if (v23) {
      MEMORY[0x1B3EA8630](v23, 0x20C8093837F09);
    }
  }
  uint64_t v24 = *((void *)this + 25);
  if (v24 >= 1)
  {
    unint64_t v25 = (void *)*((void *)this + 24);
    uint64_t v26 = &v25[v24];
    while (1)
    {
      uint64_t v27 = (void *)*v25;
      if (*v25) {
        break;
      }
      if (++v25 >= v26) {
        goto LABEL_32;
      }
    }
    do
    {
LABEL_65:
      uint64_t v58 = (void *)v27[2];
      if (!*v58 || (MEMORY[0x1B3EA8630](*v58, 0x1000C8052888210), v27[2])) {
        MEMORY[0x1B3EA8670]();
      }
      uint64_t v27 = (void *)*v27;
    }
    while (v27);
    uint64_t v59 = v25 + 1;
    while (v59 < v26)
    {
      uint64_t v60 = (void *)*v59++;
      uint64_t v27 = v60;
      if (v60)
      {
        unint64_t v25 = v59 - 1;
        goto LABEL_65;
      }
    }
  }
LABEL_32:
  uint64_t v28 = *((void *)this + 17);
  if (v28 >= 1)
  {
    int v29 = (void *)*((void *)this + 16);
    int v30 = &v29[v28];
    while (1)
    {
      unsigned int v31 = (void *)*v29;
      if (*v29) {
        break;
      }
      if (++v29 >= v30) {
        goto LABEL_36;
      }
    }
    do
    {
LABEL_73:
      uint64_t v61 = v31[1];
      if (v61) {
        MEMORY[0x1B3EA8630](v61, 0x1000C8052888210);
      }
      uint64_t v62 = v31[2];
      if (v62)
      {
        uint64_t v63 = *(void *)(v62 + 16);
        if (v63) {
          MEMORY[0x1B3EA8630](v63, 0x20C8093837F09);
        }
        MEMORY[0x1B3EA8670](v62, 0x1080C40925F9CD7);
      }
      unsigned int v31 = (void *)*v31;
    }
    while (v31);
    uint64_t v64 = v29 + 1;
    while (v64 < v30)
    {
      float v65 = (void *)*v64++;
      unsigned int v31 = v65;
      if (v65)
      {
        int v29 = v64 - 1;
        goto LABEL_73;
      }
    }
  }
LABEL_36:
  unint64_t v32 = (TLexicon *)*((void *)this + 20);
  if (v32 != (TLexicon *)((char *)this + 168))
  {
    do
    {
      uint64_t v33 = *((void *)v32 + 7);
      if (v33)
      {
        uint64_t v34 = *(void *)(v33 + 16);
        if (v34) {
          MEMORY[0x1B3EA8630](v34, 0x20C8093837F09);
        }
        MEMORY[0x1B3EA8670](v33, 0x1080C40925F9CD7);
      }
      unint64_t v35 = (TLexicon *)*((void *)v32 + 1);
      if (v35)
      {
        do
        {
          long long v36 = v35;
          unint64_t v35 = *(TLexicon **)v35;
        }
        while (v35);
      }
      else
      {
        do
        {
          long long v36 = (TLexicon *)*((void *)v32 + 2);
          BOOL v37 = *(void *)v36 == (void)v32;
          unint64_t v32 = v36;
        }
        while (!v37);
      }
      unint64_t v32 = v36;
    }
    while (v36 != (TLexicon *)((char *)this + 168));
  }
  uint64_t v39 = *((void *)this + 12);
  uint64_t v38 = *((void *)this + 13);
  if (v38 != v39)
  {
    unint64_t v40 = 0;
    uint64_t v41 = 8;
    do
    {
      uint64_t v42 = *(void *)(v39 + v41);
      if (v42)
      {
        MEMORY[0x1B3EA8630](v42, 0x1000C8052888210);
        uint64_t v39 = *((void *)this + 12);
        uint64_t v38 = *((void *)this + 13);
      }
      ++v40;
      v41 += 16;
    }
    while (v40 < (v38 - v39) >> 4);
  }
  uint64_t v43 = *((void *)this + 40);
  uint64_t v44 = TParam::getActiveConfigHandle((TParam *)(v43 + 21512));
  if (*(unsigned char *)(v43 + TParam::getValidConfig((TParam *)(v43 + 21512), v44) + 21664))
  {
    tknPrintString("-- TLexicon --\n");
    tknPrintf("  Clean calls   : %llu\n", v45, *((void *)this + 64));
    tknPrintString("findWord\n");
    tknPrintf("  Cache lookups : %llu\n", v46, *((void *)this + 56));
    tknPrintf("  Cache hits    : %llu\n", v47, *((void *)this + 59));
    tknPrintString("collationSearch\n");
    tknPrintf("  Cache lookups : %llu\n", v48, *((void *)this + 57));
    tknPrintf("  Cache hits    : %llu\n", v49, *((void *)this + 60));
    tknPrintf("  Iterations    : %llu\n", v50, *((void *)this + 62));
    tknPrintString("computeClones\n");
    tknPrintf("  Cache lookups : %llu\n", v51, *((void *)this + 58));
    tknPrintf("  Cache hits    : %llu\n", v52, *((void *)this + 61));
    tknPrintf("  Iterations    : %llu\n", v53, *((void *)this + 63));
  }
  uint64_t v54 = (TDataSaver *)*((void *)this + 42);
  if (v54)
  {
    TDataSaver::~TDataSaver(v54);
    MEMORY[0x1B3EA8670]();
  }
  uint64_t v55 = *((void *)this + 40);
  if (v55) {
    (*(void (**)(uint64_t))(*(void *)v55 + 8))(v55);
  }
  uint64_t v56 = *((void *)this + 41);
  if (v56) {
    (*(void (**)(uint64_t))(*(void *)v56 + 8))(v56);
  }
  TCollation::~TCollation((TLexicon *)((char *)this + 240));
  THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::~THashBase((void *)this + 23);
  std::__tree<std::string>::destroy((uint64_t)this + 160, *((char **)this + 21));
  THashBase<std::pair<wchar_t * const,TWordBlock *>,THashMapCompare<std::pair<wchar_t * const,TWordBlock *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t * const,TWordBlock *>,THash<wchar_t const*>>>::~THashBase((void *)this + 15);
  uint64_t v57 = (void *)*((void *)this + 12);
  if (v57)
  {
    *((void *)this + 13) = v57;
    operator delete(v57);
  }
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
  TAllocator::clear(this);
}

uint64_t TLexicon::checkName(uint64_t a1, int *a2, char a3, unint64_t a4)
{
  unint64_t v4 = a4;
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  if (a4 == -1)
  {
    uint64_t v8 = (TParam *)(*(void *)(a1 + 320) + 136);
    uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle(v8);
    unint64_t v4 = *((int *)v8 + TParam::getValidConfig(v8, ActiveConfigHandle) + 40);
  }
  std::string __s = (__int32 *)v48;
  long long v47 = xmmword_1B25607E0;
  char v49 = 1;
  TBuffer<wchar_t>::assign((uint64_t)&__s, a2);
  unint64_t v10 = *((void *)&v47 + 1);
  unint64_t v11 = v47;
  if (*((void *)&v47 + 1) >= (unint64_t)v47)
  {
    if (v49)
    {
      LODWORD(v51) = 0;
      TBuffer<wchar_t>::insert((uint64_t)&__s, *((unint64_t *)&v47 + 1), (int *)&v51, 1uLL);
      unint64_t v10 = --*((void *)&v47 + 1);
      uint64_t v12 = (unsigned int *)__s;
      unint64_t v11 = v47;
    }
    else
    {
      uint64_t v12 = (unsigned int *)__s;
      if (!(void)v47) {
        goto LABEL_11;
      }
      __s[(void)v47 - 1] = 0;
    }
  }
  else
  {
    uint64_t v12 = (unsigned int *)__s;
    __s[*((void *)&v47 + 1)] = 0;
  }
  if (v10 >= v11)
  {
    if (v49)
    {
      LODWORD(v51) = 0;
      TBuffer<wchar_t>::insert((uint64_t)&__s, v10, (int *)&v51, 1uLL);
      uint64_t v13 = __s;
      --*((void *)&v47 + 1);
      goto LABEL_14;
    }
    if (v11) {
      v12[v11 - 1] = 0;
    }
  }
  else
  {
    v12[v10] = 0;
  }
LABEL_11:
  uint64_t v13 = (__int32 *)v12;
LABEL_14:
  uint64_t v14 = wcschr(v13, 92);
  if (!v14) {
    goto LABEL_163;
  }
  unint64_t v15 = *((void *)&v47 + 1);
  if (*((void *)&v47 + 1) >= (unint64_t)v47)
  {
    if (v49)
    {
      LODWORD(v51) = 0;
      TBuffer<wchar_t>::insert((uint64_t)&__s, *((unint64_t *)&v47 + 1), (int *)&v51, 1uLL);
      uint64_t v16 = __s;
      unint64_t v15 = --*((void *)&v47 + 1);
    }
    else
    {
      uint64_t v16 = __s;
      if ((void)v47) {
        __s[(void)v47 - 1] = 0;
      }
    }
  }
  else
  {
    uint64_t v16 = __s;
    __s[*((void *)&v47 + 1)] = 0;
  }
  if (v14 == v16)
  {
    __int32 v17 = v14[1];
    if (v17) {
      uint64_t v18 = v14;
    }
    else {
      uint64_t v18 = v14 + 1;
    }
    if (v17 == 92) {
      ++v14;
    }
    else {
      uint64_t v14 = v18;
    }
  }
  if (!*v14)
  {
LABEL_163:
    if (*v12)
    {
      LODWORD(v19) = 0;
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      BOOL v22 = 0;
      goto LABEL_35;
    }
    goto LABEL_96;
  }
  if (v15 >= (unint64_t)v47)
  {
    if (v49)
    {
      LODWORD(v51) = 0;
      TBuffer<wchar_t>::insert((uint64_t)&__s, v15, (int *)&v51, 1uLL);
      --*((void *)&v47 + 1);
    }
    else if ((void)v47)
    {
      v16[(void)v47 - 1] = 0;
    }
  }
  else
  {
    v16[v15] = 0;
  }
  *uint64_t v14 = 0;
  uint64_t v20 = v14 + 1;
  uint64_t v24 = wcschr(v20, 92);
  BOOL v22 = v24 != 0;
  if (!v24)
  {
    if (*v20)
    {
      uint64_t v21 = 0;
LABEL_99:
      if (*v12)
      {
        LODWORD(v19) = 1;
      }
      else
      {
        uint64_t v19 = 1;
        if (!*v20) {
          goto LABEL_156;
        }
      }
LABEL_35:
      BOOL v43 = v22;
      uint64_t v51 = v53;
      long long v52 = xmmword_1B25607E0;
      char v54 = 1;
      uint64_t v23 = a1 + 224;
      if (TLocaleInfo::unicodeToMultiByte(v23, v12, (uint64_t)&v51))
      {
        uint64_t v19 = 2;
LABEL_152:
        if (v54 && v51 != v53 && v51) {
          MEMORY[0x1B3EA8630]();
        }
        goto LABEL_156;
      }
      if (*((void *)&v52 + 1) >= (unint64_t)v52)
      {
        if (v54)
        {
          v45[0] = 0;
          TBuffer<char>::insert((uint64_t)&v51, *((unint64_t *)&v52 + 1), v45, 1uLL);
          --*((void *)&v52 + 1);
        }
        else if ((void)v52)
        {
          v51[(void)v52 - 1] = 0;
        }
      }
      else
      {
        v51[*((void *)&v52 + 1)] = 0;
      }
      unint64_t v25 = v51;
      TSegmenter::TSegmenter(v45, v51, v23, 0);
      for (; *v25; unint64_t v25 = *(char **)(v27 + 8))
      {
        uint64_t Segment = TSegmenter::getSegment((TSegmenter *)v45, v25);
        uint64_t v27 = Segment;
        int v28 = *(_DWORD *)(Segment + 24);
        if (v28 == 5 || v4 >= 3 && *(void *)(Segment + 16))
        {
LABEL_92:
          uint64_t v19 = 2;
          goto LABEL_151;
        }
        if (!v28)
        {
          int v29 = **(_DWORD **)Segment;
          {
            operator new();
          }
          if (v29 <= 8202)
          {
            if (v29 != 32 && v29 != 160) {
              continue;
            }
          }
          else
          {
            BOOL v30 = v29 == 8203 || v29 == 65279;
            if (!v30 && v29 != 12288) {
              continue;
            }
          }
          if (*((void *)&v52 + 1) >= (unint64_t)v52)
          {
            if (v54)
            {
              v44[0] = 0;
              TBuffer<char>::insert((uint64_t)&v51, *((unint64_t *)&v52 + 1), v44, 1uLL);
              --*((void *)&v52 + 1);
            }
            else if ((void)v52)
            {
              v51[(void)v52 - 1] = 0;
            }
          }
          else
          {
            v51[*((void *)&v52 + 1)] = 0;
          }
          if (v25 != v51 || **(unsigned char **)(v27 + 8))
          {
            if (*((void *)&v52 + 1) >= (unint64_t)v52)
            {
              if (v54)
              {
                v44[0] = 0;
                TBuffer<char>::insert((uint64_t)&v51, *((unint64_t *)&v52 + 1), v44, 1uLL);
                --*((void *)&v52 + 1);
              }
              else if ((void)v52)
              {
                v51[(void)v52 - 1] = 0;
              }
            }
            else
            {
              v51[*((void *)&v52 + 1)] = 0;
            }
            if (v25 == v51 || !**(unsigned char **)(v27 + 8)) {
              goto LABEL_92;
            }
          }
        }
      }
      if (v19)
      {
        TBuffer<char>::resize((uint64_t)&v51, 0);
        if (TLocaleInfo::unicodeToMultiByte(v23, (unsigned int *)v20, (uint64_t)&v51))
        {
          uint64_t v19 = 5;
          goto LABEL_151;
        }
        unsigned int v31 = (char *)TBuffer<char>::c_str((uint64_t)&v51);
        TSegmenter::TSegmenter(v44, v31, v23, 0);
        if (*v31)
        {
          while (1)
          {
            uint64_t v32 = TSegmenter::getSegment((TSegmenter *)v44, v31);
            uint64_t v33 = (int **)v32;
            int v34 = *(_DWORD *)(v32 + 24);
            if (v34 == 5 || v4 >= 3 && *(void *)(v32 + 16)) {
              break;
            }
            if (!v34)
            {
              if (*((void *)&v52 + 1) >= (unint64_t)v52)
              {
                if (v54)
                {
                  char v50 = 0;
                  uint64_t v32 = TBuffer<char>::insert((uint64_t)&v51, *((unint64_t *)&v52 + 1), &v50, 1uLL);
                  --*((void *)&v52 + 1);
                }
                else if ((void)v52)
                {
                  v51[(void)v52 - 1] = 0;
                }
              }
              else
              {
                v51[*((void *)&v52 + 1)] = 0;
              }
              if (v31 == v51 || !*(unsigned char *)v33[1] || (*v33)[1]) {
                break;
              }
              int v35 = **v33;
              TLocaleInfo::getGlobalLocaleInfo((TLocaleInfo *)v32);
              if (v35 <= 8202)
              {
                if (v35 != 32 && v35 != 160) {
                  break;
                }
              }
              else if (v35 != 8203 && v35 != 65279 && v35 != 12288)
              {
                break;
              }
            }
            unsigned int v31 = (char *)v33[1];
            if (!*v31) {
              goto LABEL_127;
            }
          }
          TSegmenter::~TSegmenter((TSegmenter *)v44);
          uint64_t v19 = 5;
          goto LABEL_151;
        }
LABEL_127:
        TSegmenter::~TSegmenter((TSegmenter *)v44);
      }
      if (v43)
      {
        TBuffer<char>::resize((uint64_t)&v51, 0);
        if (TLocaleInfo::unicodeToMultiByte(v23, v21, (uint64_t)&v51))
        {
LABEL_148:
          uint64_t v19 = 3;
LABEL_151:
          TSegmenter::~TSegmenter((TSegmenter *)v45);
          goto LABEL_152;
        }
        long long v36 = (char *)TBuffer<char>::c_str((uint64_t)&v51);
        TSegmenter::TSegmenter(v44, v36, v23, 0);
        if (*v36)
        {
          while (1)
          {
            uint64_t v37 = TSegmenter::getSegment((TSegmenter *)v44, v36);
            uint64_t v38 = (int **)v37;
            int v39 = *(_DWORD *)(v37 + 24);
            if (v39 == 5 || v4 >= 3 && (*(void *)(v37 + 16) & 0xFFFFFFFFFFFFFFFBLL) != 0) {
              break;
            }
            if (!v39)
            {
              unint64_t v40 = (TLocaleInfo *)TBuffer<char>::c_str((uint64_t)&v51);
              if (v36 == (char *)v40 || !*(unsigned char *)v38[1] || (*v38)[1]) {
                break;
              }
              int v41 = **v38;
              TLocaleInfo::getGlobalLocaleInfo(v40);
              if (v41 <= 8202)
              {
                if (v41 != 32 && v41 != 160) {
                  break;
                }
              }
              else if (v41 != 8203 && v41 != 65279 && v41 != 12288)
              {
                break;
              }
            }
            long long v36 = (char *)v38[1];
            if (!*v36) {
              goto LABEL_149;
            }
          }
          TSegmenter::~TSegmenter((TSegmenter *)v44);
          goto LABEL_148;
        }
LABEL_149:
        TSegmenter::~TSegmenter((TSegmenter *)v44);
      }
      uint64_t v19 = 0;
      goto LABEL_151;
    }
LABEL_96:
    uint64_t v19 = 1;
    goto LABEL_156;
  }
  if (*((void *)&v47 + 1) >= (unint64_t)v47)
  {
    if (v49)
    {
      LODWORD(v51) = 0;
      TBuffer<wchar_t>::insert((uint64_t)&__s, *((unint64_t *)&v47 + 1), (int *)&v51, 1uLL);
      --*((void *)&v47 + 1);
    }
    else if ((void)v47)
    {
      __s[(void)v47 - 1] = 0;
    }
  }
  else
  {
    __s[*((void *)&v47 + 1)] = 0;
  }
  *uint64_t v24 = 0;
  uint64_t v21 = (unsigned int *)(v24 + 1);
  if (wcschr((__int32 *)v21, 92)) {
    goto LABEL_96;
  }
  uint64_t v19 = 1;
  if (*v21 && (a3 & 1) == 0) {
    goto LABEL_99;
  }
LABEL_156:
  if (v49 && __s != (__int32 *)v48 && __s) {
    MEMORY[0x1B3EA8630]();
  }
  return v19;
}

void sub_1B2151D3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  MEMORY[0x1B3EA8670](a11, 0x1070C40ADD13FEBLL);
  TSegmenter::~TSegmenter((TSegmenter *)&a28);
  if (LOBYTE(STACK[0x648]))
  {
    unint64_t v44 = STACK[0x530];
    if (STACK[0x530] != a9)
    {
      if (v44) {
        MEMORY[0x1B3EA8630](v44, 0x1000C8077774924);
      }
    }
  }
  if (LOBYTE(STACK[0x520]) && a42 != v42)
  {
    if (a42) {
      MEMORY[0x1B3EA8630]();
    }
  }
  _Unwind_Resume(a1);
}

void callBackMRECArrayReallocator(void *a1, unint64_t a2, unint64_t a3, void *a4, unint64_t a5, void **a6, unint64_t *a7)
{
  *a7 = a3;
  operator new[]();
}

uint64_t TLexicon::findWord(void *a1, __int32 *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  ++a1[39];
  ++a1[56];
  v7[0] = a2;
  v7[1] = 0;
  THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::find((size_t)(a1 + 23), v7, &v8);
  if (*((void *)&v9 + 1) && (uint64_t v4 = *(void *)(*((void *)&v9 + 1) + 16)) != 0)
  {
    *(void *)(v4 + 24) = a1[39];
    ++a1[59];
  }
  else
  {
    uint64_t v8 = v10;
    long long v9 = xmmword_1B25607E0;
    char v11 = 1;
    TLocaleInfo::unicodeToMultiByte((uint64_t)(a1 + 28), (unsigned int *)a2, (uint64_t)&v8);
    uint64_t v5 = (void *)a1[11];
    if (*((void *)&v9 + 1) >= (unint64_t)v9)
    {
      if (v11)
      {
        LOBYTE(v7[0]) = 0;
        TBuffer<char>::insert((uint64_t)&v8, *((unint64_t *)&v9 + 1), (char *)v7, 1uLL);
        --*((void *)&v9 + 1);
      }
      else if ((void)v9)
      {
        v8[(void)v9 - 1] = 0;
      }
    }
    else
    {
      v8[*((void *)&v9 + 1)] = 0;
    }
    if (SDWord_GetHandle(v5, v8))
    {
      wcslen(a2);
      operator new[]();
    }
    uint64_t v4 = 0;
    if (v11 && v8 != v10 && v8) {
      MEMORY[0x1B3EA8630]();
    }
  }
  return v4;
}

void sub_1B2152090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  MEMORY[0x1B3EA8670](v51, 0x10F0C4030D8D1E0);
  if (a51 && a16 != v52)
  {
    if (a16) {
      MEMORY[0x1B3EA8630]();
    }
  }
  _Unwind_Resume(a1);
}

void TWordBlock::create()
{
}

void sub_1B2152158(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1080C40925F9CD7);
  _Unwind_Resume(a1);
}

BOOL TLexicon::findHeadClonesCollated(void *a1, __int32 *a2, _DWORD *a3, size_t a4, size_t a5, void **a6)
{
  size_t v34 = wcslen(a2);
  uint64_t v37 = (__int32 *)v39;
  long long v38 = xmmword_1B25607E0;
  char v40 = 1;
  unint64_t v10 = TLexicon::collationSearch(a1, (unsigned int *)a2);
  char v11 = v10;
  if (v10[1])
  {
    uint64_t v12 = (__int32 ***)v10[2];
    uint64_t v13 = (uint64_t)(a1 + 28);
    do
    {
      uint64_t v14 = *v12;
      BOOL v15 = TLexicon::applyMask((uint64_t)(*v12)[1], (uint64_t)(*v12)[2], a3, (uint64_t *)*v12 + 4);
      if (!v15)
      {
        TLexicon::getWrittenForm(v15, *v14, (uint64_t)&v37);
        if (*((void *)&v38 + 1) >= (unint64_t)v38)
        {
          if (v40)
          {
            LODWORD(v41[0]) = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v37, *((unint64_t *)&v38 + 1), (int *)v41, 1uLL);
            uint64_t v16 = v37;
            --*((void *)&v38 + 1);
          }
          else
          {
            uint64_t v16 = v37;
            if ((void)v38) {
              v37[(void)v38 - 1] = 0;
            }
          }
        }
        else
        {
          uint64_t v16 = v37;
          v37[*((void *)&v38 + 1)] = 0;
        }
        TLexiconScore::TLexiconScore(v41, a2, (unsigned int *)v16, a4, a5, v13);
        uint64_t v18 = v41[0];
        uint64_t v17 = v41[1];
        uint64_t v19 = (__int32 ***)a6[1];
        unint64_t v20 = (unint64_t)a6[2];
        if ((unint64_t)v19 >= v20)
        {
          uint64_t v22 = ((char *)v19 - (unsigned char *)*a6) >> 5;
          unint64_t v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 59) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v24 = v20 - (void)*a6;
          if (v24 >> 4 > v23) {
            unint64_t v23 = v24 >> 4;
          }
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v25 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v25 = v23;
          }
          if (v25) {
            uint64_t v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)(a6 + 2), v25);
          }
          else {
            uint64_t v26 = 0;
          }
          uint64_t v27 = (__int32 ***)&v26[32 * v22];
          *uint64_t v27 = v14;
          v27[1] = (__int32 **)v34;
          v27[2] = (__int32 **)v18;
          v27[3] = (__int32 **)v17;
          int v29 = (char *)*a6;
          int v28 = (char *)a6[1];
          BOOL v30 = v27;
          if (v28 != *a6)
          {
            do
            {
              long long v31 = *((_OWORD *)v28 - 1);
              *((_OWORD *)v30 - 2) = *((_OWORD *)v28 - 2);
              *((_OWORD *)v30 - 1) = v31;
              v30 -= 4;
              v28 -= 32;
            }
            while (v28 != v29);
            int v28 = (char *)*a6;
          }
          uint64_t v21 = v27 + 4;
          *a6 = v30;
          a6[1] = v27 + 4;
          a6[2] = &v26[32 * v25];
          if (v28) {
            operator delete(v28);
          }
        }
        else
        {
          *uint64_t v19 = v14;
          v19[1] = (__int32 **)v34;
          uint64_t v21 = v19 + 4;
          void v19[2] = (__int32 **)v18;
          v19[3] = (__int32 **)v17;
        }
        a6[1] = v21;
      }
      ++v12;
    }
    while (v12 != (__int32 ***)(v11[2] + 8 * v11[1]));
  }
  int v32 = *((unsigned __int8 *)v11 + 24);
  if (v40 && v37 != (__int32 *)v39 && v37) {
    MEMORY[0x1B3EA8630]();
  }
  return v32 != 0;
}

void sub_1B21523E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (LOBYTE(STACK[0x440]))
  {
    if (a14 != a9 && a14 != 0) {
      MEMORY[0x1B3EA8630]();
    }
  }
  _Unwind_Resume(a1);
}

void *TLexicon::collationSearch(void *a1, unsigned int *a2)
{
  ++a1[39];
  ++a1[57];
  uint64_t v24 = (__int32 *)v26;
  long long v25 = xmmword_1B25607E0;
  char v27 = 1;
  TCollation::collate(a1 + 30, a2, (uint64_t)&v24);
  uint64_t v17 = v24;
  *(void *)&long long v18 = 0;
  THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::find((size_t)(a1 + 15), (const __int32 **)&v17, &v22);
  if (!v23)
  {
    memset(v21, 0, sizeof(v21));
    if (!wcschr((__int32 *)a2, 92) || !wcscmp((const __int32 *)a2, dword_1B259BC24))
    {
      if (a1[12] == a1[13])
      {
        TLexicon::collationSearchInternal((uint64_t)a1, a2, v21, 0, 0, 0);
      }
      else
      {
        long long v18 = xmmword_1B25607E0;
        char v20 = 1;
        uint64_t v16 = 100;
        uint64_t v17 = (__int32 *)v19;
        TLexicon::collationSearchRec((uint64_t)a1, (const __int32 *)a2, v21, (uint64_t)&v17, &v16);
        if (!v16)
        {
          loggableUnicode(a2, &__p);
          char v11 = v15 >= 0 ? &__p : (void **)__p;
          tknPrintf("Warning: '%s' : Ran over 100 voc searches due to mismatched collation tables. Giving up.\n", v10, v11);
          if (v15 < 0) {
            operator delete(__p);
          }
        }
        if (v20 && v17 != (__int32 *)v19 && v17) {
          MEMORY[0x1B3EA8630]();
        }
      }
    }
    operator new[]();
  }
  uint64_t v4 = *(void **)(v23 + 16);
  uint64_t v5 = a1[39];
  *uint64_t v4 = v5;
  uint64_t v6 = v4[1];
  if (v6)
  {
    uint64_t v7 = (uint64_t *)v4[2];
    uint64_t v8 = 8 * v6;
    do
    {
      uint64_t v9 = *v7++;
      *(void *)(v9 + 24) = v5;
      v8 -= 8;
    }
    while (v8);
  }
  ++a1[60];
  if (v27)
  {
    if (v24 != (__int32 *)v26 && v24 != 0) {
      MEMORY[0x1B3EA8630]();
    }
  }
  return v4;
}

void sub_1B2152738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (LOBYTE(STACK[0x458]) && a20 != v21 && a20) {
    MEMORY[0x1B3EA8630]();
  }
  uint64_t v23 = (void *)STACK[0x460];
  if (STACK[0x460])
  {
    STACK[0x468] = (unint64_t)v23;
    operator delete(v23);
  }
  if (LOBYTE(STACK[0x8A8]))
  {
    if (STACK[0x490] != v20 && STACK[0x490] != 0) {
      MEMORY[0x1B3EA8630]();
    }
  }
  _Unwind_Resume(a1);
}

uint64_t TLexicon::makeScore(uint64_t a1, const __int32 *a2, unsigned int *a3, size_t a4, size_t a5)
{
  TLexiconScore::TLexiconScore(&v6, a2, a3, a4, a5, a1 + 224);
  return v6;
}

BOOL TLexicon::findHeadClonesCollated(void *a1, unsigned int *a2, void *a3, unint64_t a4, size_t a5, size_t a6, void **a7)
{
  uint64_t v10 = a2;
  size_t v41 = wcslen((const __int32 *)a2);
  unint64_t v44 = (__int32 *)v46;
  long long v45 = xmmword_1B25607E0;
  char v47 = 1;
  uint64_t v12 = TLexicon::collationSearch(a1, v10);
  uint64_t v13 = v12;
  if (v12[1])
  {
    uint64_t v14 = (__int32 ***)v12[2];
    uint64_t v15 = (uint64_t)(a1 + 28);
    char v40 = v12;
    do
    {
      uint64_t v16 = *v14;
      BOOL v17 = TLexicon::checkBits((uint64_t)(*v14)[1], (uint64_t)(*v14)[2], a3, a4, (uint64_t *)*v14 + 4);
      if (v17)
      {
        TLexicon::getWrittenForm(v17, *v16, (uint64_t)&v44);
        if (*((void *)&v45 + 1) >= (unint64_t)v45)
        {
          if (v47)
          {
            LODWORD(v48[0]) = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v44, *((unint64_t *)&v45 + 1), (int *)v48, 1uLL);
            long long v18 = v44;
            --*((void *)&v45 + 1);
          }
          else
          {
            long long v18 = v44;
            if ((void)v45) {
              v44[(void)v45 - 1] = 0;
            }
          }
        }
        else
        {
          long long v18 = v44;
          v44[*((void *)&v45 + 1)] = 0;
        }
        TLexiconScore::TLexiconScore(v48, (const __int32 *)v10, (unsigned int *)v18, a5, a6, v15);
        uint64_t v20 = v48[0];
        uint64_t v19 = v48[1];
        uint64_t v21 = (__int32 ***)a7[1];
        unint64_t v22 = (unint64_t)a7[2];
        if ((unint64_t)v21 >= v22)
        {
          uint64_t v24 = a3;
          unint64_t v25 = a4;
          uint64_t v26 = v10;
          uint64_t v27 = v15;
          uint64_t v28 = ((char *)v21 - (unsigned char *)*a7) >> 5;
          unint64_t v29 = v28 + 1;
          if ((unint64_t)(v28 + 1) >> 59) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v30 = v22 - (void)*a7;
          if (v30 >> 4 > v29) {
            unint64_t v29 = v30 >> 4;
          }
          if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v31 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v31 = v29;
          }
          if (v31) {
            int v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)(a7 + 2), v31);
          }
          else {
            int v32 = 0;
          }
          uint64_t v33 = (__int32 ***)&v32[32 * v28];
          *uint64_t v33 = v16;
          v33[1] = (__int32 **)v41;
          v33[2] = (__int32 **)v20;
          v33[3] = (__int32 **)v19;
          int v35 = (char *)*a7;
          size_t v34 = (char *)a7[1];
          long long v36 = v33;
          uint64_t v15 = v27;
          if (v34 != *a7)
          {
            do
            {
              long long v37 = *((_OWORD *)v34 - 1);
              *((_OWORD *)v36 - 2) = *((_OWORD *)v34 - 2);
              *((_OWORD *)v36 - 1) = v37;
              v36 -= 4;
              v34 -= 32;
            }
            while (v34 != v35);
            size_t v34 = (char *)*a7;
          }
          uint64_t v10 = v26;
          uint64_t v23 = v33 + 4;
          *a7 = v36;
          a7[1] = v33 + 4;
          a7[2] = &v32[32 * v31];
          a4 = v25;
          if (v34) {
            operator delete(v34);
          }
          a3 = v24;
          uint64_t v13 = v40;
        }
        else
        {
          void *v21 = v16;
          v21[1] = (__int32 **)v41;
          uint64_t v23 = v21 + 4;
          v21[2] = (__int32 **)v20;
          v21[3] = (__int32 **)v19;
        }
        a7[1] = v23;
      }
      ++v14;
    }
    while (v14 != (__int32 ***)(v13[2] + 8 * v13[1]));
  }
  int v38 = *((unsigned __int8 *)v13 + 24);
  if (v47 && v44 != (__int32 *)v46 && v44) {
    MEMORY[0x1B3EA8630]();
  }
  return v38 != 0;
}

void sub_1B2152AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (LOBYTE(STACK[0x450]))
  {
    if (a16 != a10 && a16 != 0) {
      MEMORY[0x1B3EA8630]();
    }
  }
  _Unwind_Resume(a1);
}

void TLexicon::findHeadClonesCollatedPrefix(void *a1, char *a2, TSegmenter *a3, _DWORD *a4, size_t a5, size_t a6, void **a7)
{
  uint64_t v9 = a2;
  char v51 = 0;
  *(void *)uint64_t v63 = v65;
  long long v64 = xmmword_1B25607E0;
  char v66 = 1;
  uint64_t v59 = (__int32 *)v61;
  long long v60 = xmmword_1B25607E0;
  char v62 = 1;
  uint64_t v53 = (uint64_t)(a1 + 28);
  uint64_t v50 = (uint64_t)(a7 + 2);
  while (1)
  {
    uint64_t Segment = TSegmenter::getSegment(a3, v9);
    char v11 = (const __int32 **)Segment;
    if (!Segment) {
      break;
    }
    int v12 = *(_DWORD *)(Segment + 24);
    if (v12 == 5) {
      break;
    }
    uint64_t v9 = *(char **)(Segment + 8);
    if (v12)
    {
      uint64_t v13 = 0;
      uint64_t v14 = *(int **)Segment;
      while (v14[v13++])
        ;
      TBuffer<wchar_t>::insert((uint64_t)v63, *((unint64_t *)&v64 + 1), v14, v13 - 1);
LABEL_8:
      if (*((void *)&v64 + 1) > 0xFFuLL) {
        break;
      }
      if (*((void *)&v64 + 1) >= (unint64_t)v64)
      {
        if (v66)
        {
          LODWORD(__p[0]) = 0;
          TBuffer<wchar_t>::insert((uint64_t)v63, *((unint64_t *)&v64 + 1), (int *)__p, 1uLL);
          uint64_t v16 = *(unsigned int **)v63;
          --*((void *)&v64 + 1);
        }
        else
        {
          uint64_t v16 = *(unsigned int **)v63;
          if ((void)v64) {
            *(_DWORD *)(*(void *)v63 + 4 * v64 - 4) = 0;
          }
        }
      }
      else
      {
        uint64_t v16 = *(unsigned int **)v63;
        *(_DWORD *)(*(void *)v63 + 4 * *((void *)&v64 + std::__tree<int>::destroy((uint64_t)this, *((void **)this + 1)) = 0;
      }
      uint64_t v19 = TLexicon::collationSearch(a1, v16);
      if (!v19[1]) {
        goto LABEL_88;
      }
      int v20 = *(_DWORD *)(*(void *)v63 + 4 * *((void *)&v64 + 1) - 4);
      {
        operator new();
      }
      if (v20 <= 8202)
      {
        if (v20 == 32 || v20 == 160) {
          goto LABEL_35;
        }
      }
      else
      {
        BOOL v21 = v20 == 8203 || v20 == 65279;
        if (v21 || v20 == 12288)
        {
LABEL_35:
          loggableUnicode(**(unsigned int ***)v19[2], __p);
          uint64_t v23 = __p;
          if (v58 < 0) {
            uint64_t v23 = (void **)__p[0];
          }
          tknPrintf("Warning: '%s' : found a match that ends with a space. Ignored.\n", v22, v23);
          if (v58 < 0) {
            operator delete(__p[0]);
          }
          goto LABEL_88;
        }
      }
      if (v19[1])
      {
        uint64_t v27 = (__int32 ***)v19[2];
        uint64_t v28 = (__int32 **)(v9 - a2);
        do
        {
          unint64_t v29 = *v27;
          BOOL v30 = TLexicon::applyMask((uint64_t)(*v27)[1], (uint64_t)(*v27)[2], a4, (uint64_t *)*v27 + 4);
          if (!v30)
          {
            TLexicon::getWrittenForm(v30, *v29, (uint64_t)&v59);
            if (*((void *)&v64 + 1) >= (unint64_t)v64)
            {
              if (v66)
              {
                LODWORD(__p[0]) = 0;
                TBuffer<wchar_t>::insert((uint64_t)v63, *((unint64_t *)&v64 + 1), (int *)__p, 1uLL);
                unint64_t v31 = *(const __int32 **)v63;
                --*((void *)&v64 + 1);
              }
              else
              {
                unint64_t v31 = *(const __int32 **)v63;
                if ((void)v64) {
                  *(_DWORD *)(*(void *)v63 + 4 * v64 - 4) = 0;
                }
              }
            }
            else
            {
              unint64_t v31 = *(const __int32 **)v63;
              *(_DWORD *)(*(void *)v63 + 4 * *((void *)&v64 + std::__tree<int>::destroy((uint64_t)this, *((void **)this + 1)) = 0;
            }
            if (*((void *)&v60 + 1) >= (unint64_t)v60)
            {
              if (v62)
              {
                LODWORD(__p[0]) = 0;
                TBuffer<wchar_t>::insert((uint64_t)&v59, *((unint64_t *)&v60 + 1), (int *)__p, 1uLL);
                int v32 = v59;
                --*((void *)&v60 + 1);
              }
              else
              {
                int v32 = v59;
                if ((void)v60) {
                  v59[(void)v60 - 1] = 0;
                }
              }
            }
            else
            {
              int v32 = v59;
              v59[*((void *)&v60 + 1)] = 0;
            }
            TLexiconScore::TLexiconScore((uint64_t *)__p, v31, (unsigned int *)v32, a5, a6, v53);
            uint64_t v33 = (__int32 **)__p[0];
            size_t v34 = (__int32 **)__p[1];
            int v35 = (__int32 ***)a7[1];
            unint64_t v36 = (unint64_t)a7[2];
            if ((unint64_t)v35 >= v36)
            {
              uint64_t v38 = ((char *)v35 - (unsigned char *)*a7) >> 5;
              unint64_t v39 = v38 + 1;
              if ((unint64_t)(v38 + 1) >> 59) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v40 = v36 - (void)*a7;
              if (v40 >> 4 > v39) {
                unint64_t v39 = v40 >> 4;
              }
              if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFE0) {
                unint64_t v41 = 0x7FFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v41 = v39;
              }
              if (v41) {
                uint64_t v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v50, v41);
              }
              else {
                uint64_t v42 = 0;
              }
              BOOL v43 = (__int32 ***)&v42[32 * v38];
              *BOOL v43 = v29;
              v43[1] = v28;
              v43[2] = v33;
              v43[3] = v34;
              long long v45 = (char *)*a7;
              unint64_t v44 = (char *)a7[1];
              uint64_t v46 = v43;
              if (v44 != *a7)
              {
                do
                {
                  long long v47 = *((_OWORD *)v44 - 1);
                  *((_OWORD *)v46 - 2) = *((_OWORD *)v44 - 2);
                  *((_OWORD *)v46 - 1) = v47;
                  v46 -= 4;
                  v44 -= 32;
                }
                while (v44 != v45);
                unint64_t v44 = (char *)*a7;
              }
              long long v37 = v43 + 4;
              *a7 = v46;
              a7[1] = v43 + 4;
              a7[2] = &v42[32 * v41];
              if (v44) {
                operator delete(v44);
              }
            }
            else
            {
              *int v35 = v29;
              v35[1] = v28;
              long long v37 = v35 + 4;
              v35[2] = v33;
              v35[3] = v34;
            }
            a7[1] = v37;
          }
          ++v27;
        }
        while (v27 != (__int32 ***)(v19[2] + 8 * v19[1]));
      }
LABEL_88:
      if (!*((unsigned char *)v19 + 24)) {
        break;
      }
    }
    else
    {
      if (!*((void *)&v64 + 1)) {
        break;
      }
      BOOL v17 = *(const __int32 **)Segment;
      int v18 = **(_DWORD **)Segment;
      if (v18 == 9) {
        break;
      }
      if (*(_DWORD *)(*(void *)v63 + 4 * *((void *)&v64 + 1) - 4) == 32) {
        goto LABEL_42;
      }
      {
        operator new();
      }
      if (v18 <= 8202)
      {
        if (v18 == 32 || v18 == 160)
        {
LABEL_41:
          BOOL v17 = *v11;
          if (wcslen(*v11) > 2) {
            break;
          }
          goto LABEL_42;
        }
      }
      else if (v18 == 8203 || v18 == 12288 || v18 == 65279)
      {
        goto LABEL_41;
      }
      BOOL v17 = *v11;
LABEL_42:
      __int32 v24 = *v17;
      {
        operator new();
      }
      if (v24 != 13 && v24 != 10) {
        goto LABEL_53;
      }
      if (v51) {
        break;
      }
      char v51 = 1;
      if (*(_DWORD *)(*(void *)v63 + 4 * *((void *)&v64 + 1) - 4) != 45)
      {
        uint64_t v26 = TSegmenter::getSegment(a3, v9);
        if (!v26 || *(_DWORD *)(v26 + 24) == 5) {
          break;
        }
        char v51 = 1;
        if (**(_DWORD **)v26 != 45)
        {
LABEL_53:
          if (*(_DWORD *)(*(void *)v63 + 4 * *((void *)&v64 + 1) - 4) != 32)
          {
            TBuffer<wchar_t>::insert((uint64_t)v63, *((unint64_t *)&v64 + 1), (int *)&unk_1B259BC1C, 1uLL);
            goto LABEL_8;
          }
        }
      }
    }
  }
  if (v62)
  {
    if (v59 != (__int32 *)v61 && v59 != 0) {
      MEMORY[0x1B3EA8630]();
    }
  }
  if (v66 && *(unsigned char **)v63 != v65)
  {
    if (*(void *)v63) {
      MEMORY[0x1B3EA8630]();
    }
  }
}

void sub_1B215317C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24)
{
  MEMORY[0x1B3EA8670](v24, 0x1070C40ADD13FEBLL);
  if (LOBYTE(STACK[0x490]))
  {
    if (a24 != a12 && a24 != 0) {
      MEMORY[0x1B3EA8630]();
    }
  }
  if (LOBYTE(STACK[0x8B0]))
  {
    unint64_t v27 = STACK[0x498];
    if (STACK[0x498] != a13)
    {
      if (v27) {
        MEMORY[0x1B3EA8630](v27, 0x1000C8052888210);
      }
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sortByFirst(const __int32 **a1, const __int32 **a2)
{
  return wcscmp(*a1, *a2) >> 31;
}

BOOL TLexicon::collationSearchInternal(uint64_t a1, unsigned int *a2, void **a3, _DWORD *a4, int a5, unint64_t a6)
{
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  char v11 = v78;
  int v76 = v78;
  long long v77 = xmmword_1B25607E0;
  char v79 = 1;
  uint64_t v12 = a1 + 224;
  TLocaleInfo::unicodeToMultiByte(a1 + 224, a2, (uint64_t)&v76);
  unint64_t v73 = 0;
  unint64_t v72 = 0;
  uint64_t v71 = 0;
  unsigned __int8 v70 = 0;
  uint64_t v13 = *(void **)(a1 + 88);
  int v14 = *(_DWORD *)(a1 + 80);
  if (*((void *)&v77 + 1) >= (unint64_t)v77)
  {
    if (v79)
    {
      LOBYTE(v66) = 0;
      TBuffer<char>::insert((uint64_t)&v76, *((unint64_t *)&v77 + 1), (char *)&v66, 1uLL);
      --*((void *)&v77 + 1);
    }
    else if ((void)v77)
    {
      v76[(void)v77 - 1] = 0;
    }
  }
  else
  {
    v76[*((void *)&v77 + 1)] = 0;
  }
  if (a5) {
    uint64_t v15 = "";
  }
  else {
    uint64_t v15 = "\\"";
  }
  SDVoc_GetWords(v13, v14, v76, v15, *(void *)(a1 + 432), *(void *)(a1 + 416), &v73, &v71, &v72, (uint64_t)callBackMRECArrayReallocator, 0, &v70);
  char v66 = (int *)v68;
  long long v67 = xmmword_1B25607E0;
  char v69 = 1;
  if (v73)
  {
    unint64_t v16 = 0;
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    uint64_t v55 = (void *)(a1 + 240);
    do
    {
      ++*(void *)(a1 + 496);
      BOOL v17 = *(char **)(v71 + 8 * v16);
      int v18 = TStringParam::get((TStringParam *)(*(void *)(a1 + 320) + 488));
      if (!TLexicon::applyMask(a1, (uint64_t)v17, v18, 0) && (!a4 || !TLexicon::applyMask(a1, (uint64_t)v17, a4, 0)))
      {
        if ((unint64_t)SDWord_GetName(*(void **)(a1 + 88), v17, v75, 0x100uLL) < 0x101)
        {
          std::string __p = v64;
          long long v63 = xmmword_1B25607E0;
          char v65 = 1;
          int v20 = TLocaleInfo::multiByteToUnicode(v12, (unsigned __int8 *)v75, (uint64_t)&__p);
          if (v20)
          {
            tknPrintf("Warning: '%s' : Can't convert to Unicode. Ignored.\n", v21, v75);
          }
          else
          {
            if (!a6) {
              goto LABEL_31;
            }
            char v58 = v60;
            long long v59 = xmmword_1B25607E0;
            char v61 = 1;
            if (*((void *)&v63 + 1) >= (unint64_t)v63)
            {
              if (v65)
              {
                LODWORD(v74[0]) = 0;
                int v20 = TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v63 + 1), (int *)v74, 1uLL);
                uint64_t v22 = (__int32 *)__p;
                --*((void *)&v63 + 1);
              }
              else
              {
                uint64_t v22 = (__int32 *)__p;
                if ((void)v63) {
                  *((_DWORD *)__p + v63 - 1) = 0;
                }
              }
            }
            else
            {
              uint64_t v22 = (__int32 *)__p;
              *((_DWORD *)__p + *((void *)&v63 + std::__tree<int>::destroy((uint64_t)this, *((void **)this + 1)) = 0;
            }
            TLexicon::getWrittenForm(v20, v22, (uint64_t)&v58);
            unint64_t v23 = *((void *)&v59 + 1);
            if (v61 && v58 != v60 && v58) {
              MEMORY[0x1B3EA8630]();
            }
            if (v23 <= a6)
            {
LABEL_31:
              unint64_t v24 = *((void *)&v67 + 1);
              if (!*((void *)&v67 + 1))
              {
                TCollation::collate(v55, a2, (uint64_t)&v66);
                unint64_t v24 = *((void *)&v67 + 1);
              }
              if (v24 >= (unint64_t)v67)
              {
                if (v69)
                {
                  LODWORD(v58) = 0;
                  TBuffer<wchar_t>::insert((uint64_t)&v66, v24, (int *)&v58, 1uLL);
                  unint64_t v25 = v66;
                  --*((void *)&v67 + 1);
                }
                else
                {
                  unint64_t v25 = v66;
                  if ((void)v67) {
                    v66[(void)v67 - 1] = 0;
                  }
                }
              }
              else
              {
                unint64_t v25 = v66;
                v66[v24] = 0;
              }
              if (*((void *)&v63 + 1) >= (unint64_t)v63)
              {
                if (v65)
                {
                  LODWORD(v58) = 0;
                  TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v63 + 1), (int *)&v58, 1uLL);
                  uint64_t v26 = __p;
                  --*((void *)&v63 + 1);
                }
                else
                {
                  uint64_t v26 = __p;
                  if ((void)v63) {
                    *((_DWORD *)__p + v63 - 1) = 0;
                  }
                }
              }
              else
              {
                uint64_t v26 = __p;
                *((_DWORD *)__p + *((void *)&v63 + std::__tree<int>::destroy((uint64_t)this, *((void **)this + 1)) = 0;
              }
              if (!TCollation::collprefixcmp(v55, v25, (uint64_t)v26))
              {
                uint64_t v53 = v11;
                if (*((void *)&v63 + 1) >= (unint64_t)v63)
                {
                  if (v65)
                  {
                    LODWORD(v58) = 0;
                    TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v63 + 1), (int *)&v58, 1uLL);
                    unint64_t v27 = (const __int32 *)__p;
                    --*((void *)&v63 + 1);
                  }
                  else
                  {
                    unint64_t v27 = (const __int32 *)__p;
                    if ((void)v63) {
                      *((_DWORD *)__p + v63 - 1) = 0;
                    }
                  }
                }
                else
                {
                  unint64_t v27 = (const __int32 *)__p;
                  *((_DWORD *)__p + *((void *)&v63 + std::__tree<int>::destroy((uint64_t)this, *((void **)this + 1)) = 0;
                }
                v74[0] = v27;
                v74[1] = 0;
                THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::find(a1 + 184, v74, &v58);
                if (!*((void *)&v59 + 1) || (uint64_t v28 = *(void *)(*((void *)&v59 + 1) + 16)) == 0) {
                  operator new[]();
                }
                ++v57;
                if ((*(unsigned char *)(v28 + 32) & 2) != 0
                  || TLexicon::findHeadClone(*(void **)(v28 + 8), *(__int32 **)v28) == v28)
                {
                  BOOL v30 = a3[1];
                  unint64_t v29 = (unint64_t)a3[2];
                  if ((unint64_t)v30 >= v29)
                  {
                    uint64_t v32 = ((char *)v30 - (unsigned char *)*a3) >> 3;
                    if ((unint64_t)(v32 + 1) >> 61) {
                      std::vector<int>::__throw_length_error[abi:ne180100]();
                    }
                    uint64_t v33 = v29 - (void)*a3;
                    uint64_t v34 = v33 >> 2;
                    if (v33 >> 2 <= (unint64_t)(v32 + 1)) {
                      uint64_t v34 = v32 + 1;
                    }
                    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v35 = v34;
                    }
                    if (v35) {
                      unint64_t v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a3 + 2), v35);
                    }
                    else {
                      unint64_t v36 = 0;
                    }
                    long long v37 = &v36[8 * v32];
                    *(void *)long long v37 = v28;
                    unint64_t v31 = v37 + 8;
                    unint64_t v39 = (char *)*a3;
                    uint64_t v38 = (char *)a3[1];
                    if (v38 == *a3)
                    {
                      char v11 = v53;
                    }
                    else
                    {
                      char v11 = v53;
                      do
                      {
                        uint64_t v40 = *((void *)v38 - 1);
                        v38 -= 8;
                        *((void *)v37 - 1) = v40;
                        v37 -= 8;
                      }
                      while (v38 != v39);
                      uint64_t v38 = (char *)*a3;
                    }
                    *a3 = v37;
                    a3[1] = v31;
                    a3[2] = &v36[8 * v35];
                    if (v38) {
                      operator delete(v38);
                    }
                  }
                  else
                  {
                    *BOOL v30 = v28;
                    unint64_t v31 = v30 + 1;
                    char v11 = v53;
                  }
                  a3[1] = v31;
                  ++v56;
                }
                else
                {
                  char v11 = v53;
                }
              }
            }
          }
          if (v65)
          {
            if (__p != v64 && __p != 0) {
              MEMORY[0x1B3EA8630]();
            }
          }
        }
        else
        {
          tknPrintf("Warning: The voc contains a >= %llu-byte word name, prefix is '%s'. Ignored.\n", v19, 256, v75);
        }
      }
      ++v16;
    }
    while (v16 < v73);
  }
  else
  {
    uint64_t v56 = 0;
    uint64_t v57 = 0;
  }
  if (v71 != *(void *)(a1 + 432))
  {
    loggableUnicode(a2, &__p);
    if (v63 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    tknPrintf("Warning: '%s' : Inefficient voc search. Required dynamic allocation of size %llu\n", v42, p_p, v72);
    if (SHIBYTE(v63) < 0) {
      operator delete(__p);
    }
    uint64_t v44 = *(void *)(a1 + 432);
    if (v44) {
      MEMORY[0x1B3EA8630](v44, 0x80C80B8603338);
    }
    *(void *)(a1 + 432) = v71;
    *(void *)(a1 + 416) = v72;
  }
  if (v57 == v56)
  {
    unint64_t v45 = ((unsigned char *)a3[1] - (unsigned char *)*a3) >> 3;
    if (v45 - v57 < v45)
    {
      uint64_t v46 = -v57;
      uint64_t v47 = (uint64_t)*a3 + 8 * v45;
      do
        *(void *)(*(void *)(v47 + 8 * v46) + 32) |= 1uLL;
      while (!__CFADD__(v46++, 1));
    }
  }
  int v49 = v70;
  if (v69)
  {
    if (v66 != (int *)v68 && v66 != 0) {
      MEMORY[0x1B3EA8630]();
    }
  }
  if (v79)
  {
    if (v76 != v11 && v76 != 0) {
      MEMORY[0x1B3EA8630]();
    }
  }
  return v49 != 0;
}

void sub_1B2153AB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (LOBYTE(STACK[0x8B8]))
  {
    unint64_t v19 = STACK[0x4A0];
    if (STACK[0x4A0] != v17)
    {
      if (v19) {
        MEMORY[0x1B3EA8630](v19, 0x1000C8052888210);
      }
    }
  }
  if (LOBYTE(STACK[0xCD8]))
  {
    if (STACK[0x8C0] != a17 && STACK[0x8C0] != 0) {
      MEMORY[0x1B3EA8630]();
    }
  }
  if (LOBYTE(STACK[0xF28]))
  {
    if (STACK[0xE10] != a15 && STACK[0xE10] != 0) {
      MEMORY[0x1B3EA8630]();
    }
  }
  _Unwind_Resume(a1);
}

uint64_t TLexicon::collationSearchRec(uint64_t a1, const __int32 *a2, void **a3, uint64_t a4, void *a5)
{
  if (*a5)
  {
    uint64_t v5 = a5;
    uint64_t v7 = a3;
    int v10 = 0;
    while (*a2)
    {
      uint64_t v12 = *(void *)(a1 + 96);
      uint64_t v11 = *(void *)(a1 + 104);
      uint64_t v13 = (v11 - v12) >> 4;
      if (v11 == v12)
      {
        size_t v16 = 0;
        uint64_t v20 = *(void *)(a1 + 104);
      }
      else
      {
        uint64_t v14 = 0;
        unint64_t v15 = 0;
        size_t v16 = 0;
        uint64_t v11 = *(void *)(a1 + 96);
        do
        {
          uint64_t v17 = *(const __int32 **)(v11 + v14);
          size_t v18 = wcslen(v17);
          int v19 = wcsncmp(v17, a2, v18);
          uint64_t v11 = *(void *)(a1 + 96);
          uint64_t v20 = *(void *)(a1 + 104);
          if (v19 >= 1) {
            break;
          }
          if (v19 == 0 && v18 > v16)
          {
            uint64_t v13 = v15;
            size_t v16 = v18;
          }
          ++v15;
          v14 += 16;
        }
        while (v15 < (v20 - v11) >> 4);
        uint64_t v5 = a5;
        uint64_t v7 = a3;
      }
      uint64_t v21 = v20 - v11;
      if (v13 == (v20 - v11) >> 4)
      {
        int v22 = *a2++;
        int v36 = v22;
        TBuffer<wchar_t>::insert(a4, *(void *)(a4 + 16), &v36, 1uLL);
      }
      else
      {
        unint64_t v23 = *(int **)(v11 + 16 * v13 + 8);
        if (!*v23) {
          return v10 & 1;
        }
        uint64_t v35 = v20 - v11;
        a2 += v16;
        unint64_t v24 = *(void *)(a4 + 16);
        do
        {
          uint64_t v25 = 0;
          while (v23[v25++])
            ;
          TBuffer<wchar_t>::insert(a4, *(void *)(a4 + 16), v23, v25 - 1);
          v10 |= TLexicon::collationSearchRec(a1, a2, v7, a4, v5);
          TBuffer<wchar_t>::resize(a4, v24);
          unint64_t v27 = &v23[wcslen(v23)];
          int v28 = v27[1];
          unint64_t v23 = v27 + 1;
        }
        while (v28);
        uint64_t v21 = v35;
      }
      if (v13 != v21 >> 4) {
        return v10 & 1;
      }
    }
    --*v5;
    unint64_t v30 = *(void *)(a4 + 8);
    unint64_t v29 = *(void *)(a4 + 16);
    if (v29 >= v30)
    {
      if (*(unsigned char *)(a4 + 1048))
      {
        int v37 = 0;
        TBuffer<wchar_t>::insert(a4, v29, &v37, 1uLL);
        --*(void *)(a4 + 16);
        unint64_t v31 = *(unsigned int **)a4;
      }
      else
      {
        unint64_t v31 = *(unsigned int **)a4;
        if (v30) {
          v31[v30 - 1] = 0;
        }
      }
    }
    else
    {
      unint64_t v31 = *(unsigned int **)a4;
      *(_DWORD *)(*(void *)a4 + 4 * v29) = 0;
    }
    LOBYTE(v1std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = TLexicon::collationSearchInternal(a1, v31, v7, 0, 0, 0);
  }
  else
  {
    LOBYTE(v1std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = 0;
  }
  return v10 & 1;
}

uint64_t THashBase<std::pair<wchar_t * const,TWordBlock *>,THashMapCompare<std::pair<wchar_t * const,TWordBlock *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t * const,TWordBlock *>,THash<wchar_t const*>>>::insert@<X0>(uint64_t a1@<X0>, const __int32 **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 24);
  if (v6 == *(void *)(a1 + 16))
  {
    if (v6)
    {
      if (*(unsigned char *)(a1 + 34))
      {
        tknPrintf("Warning: hashtable resizing, size was %llu\n", (uint64_t)a2, *(void *)(a1 + 24));
        uint64_t v6 = *(void *)(a1 + 16);
      }
      uint64_t v7 = 2 * v6;
    }
    else
    {
      uint64_t v7 = 10781;
    }
    THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::resize(a1, v7);
  }
  uint64_t v8 = *a2;
  size_t v9 = wcslen(*a2);
  unint64_t v10 = 0;
  uint64_t v11 = 4 * v9;
  if (4 * v9)
  {
    do
    {
      uint64_t v12 = *(char *)v8;
      uint64_t v8 = (const __int32 *)((char *)v8 + 1);
      unint64_t v10 = 33 * v10 + v12;
      --v11;
    }
    while (v11);
  }
  unint64_t v13 = v10 % *(void *)(a1 + 16);
  uint64_t v14 = *(void *)(a1 + 8) + 8 * v13;
  do
  {
    uint64_t v14 = *(void *)v14;
    if (!v14) {
      operator new();
    }
    uint64_t result = wcscmp(*(const __int32 **)(v14 + 8), *a2);
  }
  while (result);
  uint64_t v16 = *(void *)(a1 + 8);
  uint64_t v17 = v16 + 8 * v13;
  uint64_t v18 = v16 + 8 * *(void *)(a1 + 16);
  *(void *)a3 = v17;
  *(void *)(a3 + 8) = v18;
  *(void *)(a3 + 16) = v14;
  *(unsigned char *)(a3 + 24) = 0;
  return result;
}

void *TLexicon::addTempWord(TAllocator *a1, int *a2, int *a3, int *a4, const __int32 *a5)
{
  uint64_t v20 = (__int32 *)v22;
  long long v21 = xmmword_1B25607E0;
  char v23 = 1;
  if (!a2
    || (TBuffer<wchar_t>::assign((uint64_t)&v20, a2), (a2 = (int *)*((void *)&v21 + 1)) == 0)
    || a3 && *a3
    || a4 && *a4)
  {
    TBuffer<wchar_t>::insert((uint64_t)&v20, (unint64_t)a2, dword_1B259BC24, 1uLL);
  }
  if (a3)
  {
    uint64_t v9 = 0;
    while (a3[v9++])
      ;
    TBuffer<wchar_t>::insert((uint64_t)&v20, *((unint64_t *)&v21 + 1), a3, v9 - 1);
  }
  if (a4 && *a4)
  {
    TBuffer<wchar_t>::insert((uint64_t)&v20, *((unint64_t *)&v21 + 1), dword_1B259BC24, 1uLL);
    uint64_t v11 = 0;
    while (a4[v11++])
      ;
    TBuffer<wchar_t>::insert((uint64_t)&v20, *((unint64_t *)&v21 + 1), a4, v11 - 1);
  }
  if (a5) {
    size_t v13 = wcslen(a5) + 2;
  }
  else {
    size_t v13 = 1;
  }
  size_t v14 = v13 + *((void *)&v21 + 1);
  if (v14 >> 62) {
    uint64_t v15 = -1;
  }
  else {
    uint64_t v15 = 4 * v14;
  }
  uint64_t v16 = (__int32 *)TAllocator::allocate(a1, v15);
  if (*((void *)&v21 + 1) >= (unint64_t)v21)
  {
    if (v23)
    {
      int v24 = 0;
      TBuffer<wchar_t>::insert((uint64_t)&v20, *((unint64_t *)&v21 + 1), &v24, 1uLL);
      uint64_t v17 = v20;
      --*((void *)&v21 + 1);
    }
    else
    {
      uint64_t v17 = v20;
      if ((void)v21) {
        v20[(void)v21 - 1] = 0;
      }
    }
  }
  else
  {
    uint64_t v17 = v20;
    v20[*((void *)&v21 + 1)] = 0;
  }
  wcscpy(v16, v17);
  if (a5) {
    wcscpy(&v16[*((void *)&v21 + 1) + 1], a5);
  }
  uint64_t v18 = (void *)TAllocator::allocate(a1, 40);
  *uint64_t v18 = v16;
  v18[1] = a1;
  uint64_t v18[2] = 0;
  v18[3] = 0;
  void v18[4] = 7;
  if (v23 && v20 != (__int32 *)v22 && v20) {
    MEMORY[0x1B3EA8630]();
  }
  return v18;
}

void sub_1B2154188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (LOBYTE(STACK[0x420]) && a10 != v10)
  {
    if (a10) {
      MEMORY[0x1B3EA8630]();
    }
  }
  _Unwind_Resume(a1);
}

uint64_t THashBase<std::pair<wchar_t * const,TWordBlock *>,THashMapCompare<std::pair<wchar_t * const,TWordBlock *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t * const,TWordBlock *>,THash<wchar_t const*>>>::erase(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = **(void ***)a2;
  uint64_t v4 = *(void **)(a2 + 16);
  if (v3 != v4)
  {
    do
    {
      uint64_t v5 = v3;
      uint64_t v3 = (void *)*v3;
    }
    while (v3 != v4);
    *uint64_t v5 = *v4;
    --*(void *)(a1 + 24);
LABEL_5:
    JUMPOUT(0x1B3EA8670);
  }
  **(void **)a2 = *v3;
  uint64_t result = *(void *)(a2 + 16);
  --*(void *)(a1 + 24);
  if (result) {
    goto LABEL_5;
  }
  return result;
}

uint64_t TLexicon::cleanCache(TLexicon *this)
{
  ++*((void *)this + 64);
  TAllocator::clear(this);
  unint64_t v2 = *((void *)this + 26);
  uint64_t v3 = (TParam *)(*((void *)this + 40) + 2568);
  uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle(v3);
  uint64_t result = TParam::getValidConfig(v3, ActiveConfigHandle);
  if (v2 < *((int *)v3 + result + 40)) {
    return result;
  }
  uint64_t v6 = (TParam *)(*((void *)this + 40) + 2920);
  uint64_t v7 = TParam::getActiveConfigHandle(v6);
  uint64_t result = TParam::getValidConfig(v6, v7);
  uint64_t v39 = *((int *)v6 + result + 40);
  unint64_t v8 = *((void *)this + 39) - v39;
  uint64_t v9 = *((void *)this + 17);
  if (v9 >= 1)
  {
    uint64_t v10 = (void *)*((void *)this + 16);
    uint64_t v11 = &v10[v9];
    while (1)
    {
      uint64_t v12 = (void *)*v10;
      if (*v10) {
        break;
      }
      if (++v10 >= v11) {
        goto LABEL_6;
      }
    }
    while (1)
    {
      while (1)
      {
        uint64_t v18 = (unint64_t *)v12[2];
        if (*v18 > v8) {
          break;
        }
        uint64_t v17 = v12[1];
        if (!v17 || (MEMORY[0x1B3EA8630](v17, 0x1000C8052888210), (uint64_t v18 = (unint64_t *)v12[2]) != 0))
        {
          unint64_t v19 = v18[2];
          if (v19) {
            MEMORY[0x1B3EA8630](v19, 0x20C8093837F09);
          }
          MEMORY[0x1B3EA8670](v18, 0x1080C40925F9CD7);
        }
        v47[0] = v10;
        v47[1] = v11;
        v47[2] = v12;
        uint64_t v12 = (void *)*v12;
        if (!v12)
        {
          uint64_t v20 = v10 + 1;
          while (1)
          {
            uint64_t v10 = v20;
            if (v20 >= v11) {
              break;
            }
            ++v20;
            uint64_t v12 = (void *)*v10;
            if (*v10) {
              goto LABEL_23;
            }
          }
          uint64_t v12 = 0;
        }
LABEL_23:
        uint64_t result = THashBase<std::pair<wchar_t * const,TWordBlock *>,THashMapCompare<std::pair<wchar_t * const,TWordBlock *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t * const,TWordBlock *>,THash<wchar_t const*>>>::erase((uint64_t)this + 120, (uint64_t)v47);
        if (!v12) {
          goto LABEL_6;
        }
      }
      *v18 -= v8;
      uint64_t v12 = (void *)*v12;
      if (!v12) {
        break;
      }
LABEL_30:
      if (!v12) {
        goto LABEL_6;
      }
    }
    long long v21 = v10 + 1;
    while (v21 < v11)
    {
      int v22 = (void *)*v21++;
      uint64_t v12 = v22;
      if (v22)
      {
        uint64_t v10 = v21 - 1;
        goto LABEL_30;
      }
    }
  }
LABEL_6:
  uint64_t v13 = *((void *)this + 25);
  if (v13 < 1) {
    goto LABEL_10;
  }
  size_t v14 = (void *)*((void *)this + 24);
  uint64_t v15 = &v14[v13];
  while (1)
  {
    uint64_t v16 = (void *)*v14;
    if (*v14) {
      break;
    }
    if (++v14 >= v15) {
      goto LABEL_10;
    }
  }
  while (1)
  {
    uint64_t v23 = v16[2];
    unint64_t v24 = *(void *)(v23 + 24);
    BOOL v25 = v24 > v8;
    unint64_t v26 = v24 - v8;
    if (!v25)
    {
      BOOL v43 = (__int32 *)v45;
      long long v44 = xmmword_1B25607E0;
      char v46 = 1;
      TLexicon::getTokenName(result, *(__int32 **)v23, (uint64_t)&v43);
      if (*((void *)&v44 + 1) >= (unint64_t)v44)
      {
        if (v46)
        {
          v48[0] = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v43, *((unint64_t *)&v44 + 1), v48, 1uLL);
          unint64_t v29 = v43;
          --*((void *)&v44 + 1);
        }
        else
        {
          unint64_t v29 = v43;
          if ((void)v44) {
            v43[(void)v44 - 1] = 0;
          }
        }
      }
      else
      {
        unint64_t v29 = v43;
        v43[*((void *)&v44 + 1)] = 0;
      }
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, v29);
      unint64_t v30 = std::__tree<std::__value_type<std::wstring,unsigned long>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,unsigned long>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,unsigned long>>>::find<std::wstring>((uint64_t)this + 160, (uint64_t)__p);
      if (v42 < 0) {
        operator delete(__p[0]);
      }
      if ((void *)((char *)this + 168) != v30)
      {
        uint64_t v31 = v30[7];
        uint64_t v32 = *(const __int32 ****)(v31 + 16);
        if (*(void *)(v31 + 8))
        {
          do
          {
            if (*((void *)&v44 + 1) >= (unint64_t)v44)
            {
              if (v46)
              {
                LODWORD(__p[0]) = 0;
                TBuffer<wchar_t>::insert((uint64_t)&v43, *((unint64_t *)&v44 + 1), (int *)__p, 1uLL);
                uint64_t v33 = v43;
                --*((void *)&v44 + 1);
              }
              else
              {
                uint64_t v33 = v43;
                if ((void)v44) {
                  v43[(void)v44 - 1] = 0;
                }
              }
            }
            else
            {
              uint64_t v33 = v43;
              v43[*((void *)&v44 + 1)] = 0;
            }
            int v34 = wcscmp(v33, **v32);
            uint64_t v35 = *v32++;
            void v35[4] = (const __int32 *)((unint64_t)v35[4] & 0xFFFFFFFFFFFFFFFCLL | (2 * (v34 == 0)));
          }
          while (v32 != (const __int32 ***)(*(void *)(v31 + 16) + 8 * *(void *)(v31 + 8)));
          uint64_t v32 = *(const __int32 ****)(v31 + 16);
        }
        if (v32) {
          MEMORY[0x1B3EA8630](v32, 0x20C8093837F09);
        }
        MEMORY[0x1B3EA8670](v31, 0x1080C40925F9CD7);
        std::__tree<std::string>::erase((uint64_t **)this + 20, (uint64_t)v30);
      }
      int v36 = (void *)v16[2];
      if (!*v36 || (MEMORY[0x1B3EA8630](*v36, 0x1000C8052888210), v16[2])) {
        MEMORY[0x1B3EA8670]();
      }
      v40[0] = v14;
      v40[1] = v15;
      int32x2_t v40[2] = v16;
      uint64_t v16 = (void *)*v16;
      if (!v16)
      {
        int v37 = v14 + 1;
        while (1)
        {
          size_t v14 = v37;
          if (v37 >= v15) {
            break;
          }
          ++v37;
          uint64_t v16 = (void *)*v14;
          if (*v14) {
            goto LABEL_69;
          }
        }
        uint64_t v16 = 0;
      }
LABEL_69:
      uint64_t result = THashBase<std::pair<wchar_t * const,TWordBlock *>,THashMapCompare<std::pair<wchar_t * const,TWordBlock *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t * const,TWordBlock *>,THash<wchar_t const*>>>::erase((uint64_t)this + 184, (uint64_t)v40);
      if (v46)
      {
        uint64_t result = (uint64_t)v43;
        if (v43 != (__int32 *)v45 && v43 != 0) {
          uint64_t result = MEMORY[0x1B3EA8630]();
        }
      }
      goto LABEL_75;
    }
    *(void *)(v23 + 24) = v26;
    uint64_t v16 = (void *)*v16;
    if (!v16) {
      break;
    }
LABEL_75:
    if (!v16) {
      goto LABEL_10;
    }
  }
  unint64_t v27 = v14 + 1;
  while (v27 < v15)
  {
    int v28 = (void *)*v27++;
    uint64_t v16 = v28;
    if (v28)
    {
      size_t v14 = v27 - 1;
      goto LABEL_75;
    }
  }
LABEL_10:
  *((void *)this + 39) = v39;
  return result;
}

void sub_1B21546CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (LOBYTE(STACK[0x470]) && a20 != a9)
  {
    if (a20) {
      MEMORY[0x1B3EA8630]();
    }
  }
  _Unwind_Resume(a1);
}

__int32 *getSecondField(__int32 *a1, uint64_t a2)
{
  TBuffer<wchar_t>::resize(a2, 0);
  if (*a1 != 92)
  {
LABEL_4:
    uint64_t result = wcschr(a1, 92);
    a1 = result;
    if (!result) {
      return result;
    }
    goto LABEL_7;
  }
  __int32 v4 = a1[1];
  if (v4 == 92)
  {
    ++a1;
  }
  else if (!v4)
  {
    goto LABEL_4;
  }
LABEL_7:
  uint64_t v6 = a1 + 1;
  uint64_t v7 = wcschr(v6, 92);
  if (v7)
  {
    unint64_t v8 = v7 - v6;
    TBuffer<wchar_t>::resize(a2, 0);
    return (__int32 *)TBuffer<wchar_t>::insert(a2, 0, v6, v8);
  }
  else
  {
    return (__int32 *)TBuffer<wchar_t>::assign(a2, v6);
  }
}

__int32 *getThirdField(__int32 *a1, uint64_t a2)
{
  TBuffer<wchar_t>::resize(a2, 0);
  if (*a1 != 92)
  {
LABEL_4:
    uint64_t result = wcschr(a1, 92);
    a1 = result;
    if (!result) {
      return result;
    }
    goto LABEL_7;
  }
  __int32 v4 = a1[1];
  if (v4 == 92)
  {
    ++a1;
  }
  else if (!v4)
  {
    goto LABEL_4;
  }
LABEL_7:
  uint64_t result = wcschr(a1 + 1, 92);
  if (result)
  {
    return (__int32 *)TBuffer<wchar_t>::assign(a2, result + 1);
  }
  return result;
}

uint64_t respellRoot(uint64_t a1, int *a2)
{
  unint64_t v5 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  if (v4 >= v5)
  {
    if (*(unsigned char *)(a1 + 1048))
    {
      int v17 = 0;
      TBuffer<wchar_t>::insert(a1, v4, &v17, 1uLL);
      --*(void *)(a1 + 16);
      uint64_t v6 = *(const __int32 **)a1;
    }
    else
    {
      uint64_t v6 = *(const __int32 **)a1;
      if (v5) {
        v6[v5 - 1] = 0;
      }
    }
  }
  else
  {
    uint64_t v6 = *(const __int32 **)a1;
    *(_DWORD *)(*(void *)a1 + 4 * v4) = 0;
  }
  if (!wcscmp(v6, dword_1B259BC3C)) {
    return 1;
  }
  unint64_t StressPosition = findStressPosition(a2, 0);
  unint64_t v9 = *(void *)(a1 + 8);
  unint64_t v8 = *(void *)(a1 + 16);
  if (v8 >= v9)
  {
    if (*(unsigned char *)(a1 + 1048))
    {
      int v18 = 0;
      TBuffer<wchar_t>::insert(a1, v8, &v18, 1uLL);
      --*(void *)(a1 + 16);
      uint64_t v10 = *(int **)a1;
    }
    else
    {
      uint64_t v10 = *(int **)a1;
      if (v9) {
        v10[v9 - 1] = 0;
      }
    }
  }
  else
  {
    uint64_t v10 = *(int **)a1;
    *(_DWORD *)(*(void *)a1 + 4 * v8) = 0;
  }
  uint64_t v11 = findStressPosition(v10, 1);
  if (StressPosition >= *(void *)(a1 + 16)) {
    return 0;
  }
  __int32 v12 = *(_DWORD *)(*(void *)a1 + 4 * StressPosition);
  if (StressPosition == v11)
  {
    uint64_t v13 = s_pszAccentedVowels;
    size_t v14 = wcschr(s_pszAccentedVowels, v12);
    if (v14)
    {
      uint64_t v15 = s_pszUnaccentedVowels;
LABEL_21:
      *(_DWORD *)(*(void *)a1 + 4 * StressPosition) = *(__int32 *)((char *)v15 + (char *)v14 - (char *)v13);
    }
  }
  else
  {
    uint64_t v13 = s_pszUnaccentedVowels;
    size_t v14 = wcschr(s_pszUnaccentedVowels, v12);
    if (v14)
    {
      uint64_t v15 = s_pszAccentedVowels;
      goto LABEL_21;
    }
  }
  return 1;
}

uint64_t findStressPosition(int *a1, int a2)
{
  __int32 v4 = *a1;
  if (!*a1)
  {
    uint64_t v7 = 0;
LABEL_7:
    unint64_t v8 = 0;
    char v9 = 1;
    goto LABEL_8;
  }
  uint64_t v5 = 0;
  while (1)
  {
    uint64_t v6 = wcschr(s_pszAccentedVowels, v4);
    if (v6) {
      break;
    }
    uint64_t v7 = v5 + 1;
    __int32 v4 = a1[++v5];
    if (!v4) {
      goto LABEL_7;
    }
  }
  if (a2)
  {
    unint64_t v8 = v6;
    char v9 = 0;
    uint64_t v7 = v5;
LABEL_8:
    int v17 = v19;
    long long v18 = xmmword_1B25607E0;
    char v20 = 1;
    TBuffer<wchar_t>::assign((uint64_t)&v17, a1);
    uint64_t v10 = v17;
    if ((v9 & 1) == 0) {
      *(_DWORD *)&v17[4 * v7] = *(__int32 *)((char *)s_pszUnaccentedVowels + (char *)v8 - (char *)s_pszAccentedVowels);
    }
    int v11 = DWORD2(v18) - 1;
    if (wcschr((__int32 *)"s", *(_DWORD *)&v10[4 * DWORD2(v18) - 4]))
    {
      if (*((void *)&v18 + 1) >= (unint64_t)v18)
      {
        if (v20)
        {
          int v21 = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v17, *((unint64_t *)&v18 + 1), &v21, 1uLL);
          uint64_t v12 = (uint64_t)v17;
          --*((void *)&v18 + 1);
        }
        else
        {
          uint64_t v12 = (uint64_t)v17;
          if ((void)v18) {
            *(_DWORD *)&v17[4 * v18 - 4] = 0;
          }
        }
      }
      else
      {
        uint64_t v12 = (uint64_t)v17;
        *(_DWORD *)&v17[4 * *((void *)&v18 + 1)] = 0;
      }
      int PreviousVowel = findPreviousVowel(v12, v11);
      if (PreviousVowel >= 0) {
        int v11 = PreviousVowel;
      }
    }
    if (*((void *)&v18 + 1) >= (unint64_t)v18)
    {
      if (v20)
      {
        int v21 = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v17, *((unint64_t *)&v18 + 1), &v21, 1uLL);
        uint64_t v14 = (uint64_t)v17;
        --*((void *)&v18 + 1);
      }
      else
      {
        uint64_t v14 = (uint64_t)v17;
        if ((void)v18) {
          *(_DWORD *)&v17[4 * v18 - 4] = 0;
        }
      }
    }
    else
    {
      uint64_t v14 = (uint64_t)v17;
      *(_DWORD *)&v17[4 * *((void *)&v18 + 1)] = 0;
    }
    int v15 = findPreviousVowel(v14, v11);
    if (v15 >= 0) {
      uint64_t v5 = v15;
    }
    else {
      uint64_t v5 = v11;
    }
    if (v20 && v17 != v19 && v17) {
      MEMORY[0x1B3EA8630]();
    }
  }
  return v5;
}

void sub_1B2154C54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (LOBYTE(STACK[0x420]) && a10 != v10)
  {
    if (a10) {
      MEMORY[0x1B3EA8630]();
    }
  }
  _Unwind_Resume(a1);
}

void TLexiconParamManager::~TLexiconParamManager(TLexiconParamManager *this)
{
  TLexiconParamManager::~TLexiconParamManager(this);
  JUMPOUT(0x1B3EA8670);
}

{
  uint64_t v2;
  void **v3;
  char *v4;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  uint64_t n;
  uint64_t ii;
  uint64_t jj;
  uint64_t kk;
  uint64_t mm;
  uint64_t nn;
  uint64_t i1;
  uint64_t i2;
  uint64_t i3;
  uint64_t v18;
  void **v19;

  unint64_t v2 = 0;
  *(void *)this = &unk_1F0A341B8;
  uint64_t v3 = (void **)((char *)this + 21512);
  *((void *)this + 2689) = &unk_1F0A32E48;
  __int32 v4 = (char *)this + 21759;
  do
  {
    if (v4[v2] < 0) {
      operator delete(*(void **)((char *)this + v2 + 21736));
    }
    v2 -= 24;
  }
  while (v2 != -48);
  TParam::~TParam(v3);
  TParam::~TParam((void **)this + 2645);
  *((void *)this + 2473) = &unk_1F0A337B0;
  unint64_t v19 = (void **)((char *)this + 21136);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  unint64_t v19 = (void **)((char *)this + 21112);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  unint64_t v19 = (void **)((char *)this + 21088);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  for (unint64_t i = 0; i != -1152; i -= 24)
  {
    if (*((char *)this + i + 21087) < 0) {
      operator delete(*(void **)((char *)this + i + 21064));
    }
  }
  TParam::~TParam((void **)this + 2473);
  *((void *)this + 2301) = &unk_1F0A337B0;
  unint64_t v19 = (void **)((char *)this + 19760);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  unint64_t v19 = (void **)((char *)this + 19736);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  unint64_t v19 = (void **)((char *)this + 19712);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  for (uint64_t j = 0; j != -1152; j -= 24)
  {
    if (*((char *)this + j + 19711) < 0) {
      operator delete(*(void **)((char *)this + j + 19688));
    }
  }
  TParam::~TParam((void **)this + 2301);
  *((void *)this + 2129) = &unk_1F0A337B0;
  unint64_t v19 = (void **)((char *)this + 18384);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  unint64_t v19 = (void **)((char *)this + 18360);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  unint64_t v19 = (void **)((char *)this + 18336);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  for (k = 0; k != -1152; k -= 24)
  {
    if (*((char *)this + k + 18335) < 0) {
      operator delete(*(void **)((char *)this + k + 18312));
    }
  }
  TParam::~TParam((void **)this + 2129);
  *((void *)this + 1957) = &unk_1F0A337B0;
  unint64_t v19 = (void **)((char *)this + 17008);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  unint64_t v19 = (void **)((char *)this + 16984);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  unint64_t v19 = (void **)((char *)this + 16960);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  for (m = 0; m != -1152; m -= 24)
  {
    if (*((char *)this + m + 16959) < 0) {
      operator delete(*(void **)((char *)this + m + 16936));
    }
  }
  TParam::~TParam((void **)this + 1957);
  *((void *)this + 1785) = &unk_1F0A337B0;
  unint64_t v19 = (void **)((char *)this + 15632);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  unint64_t v19 = (void **)((char *)this + 15608);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  unint64_t v19 = (void **)((char *)this + 15584);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  for (n = 0; n != -1152; n -= 24)
  {
    if (*((char *)this + n + 15583) < 0) {
      operator delete(*(void **)((char *)this + n + 15560));
    }
  }
  TParam::~TParam((void **)this + 1785);
  *((void *)this + 1613) = &unk_1F0A337B0;
  unint64_t v19 = (void **)((char *)this + 14256);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  unint64_t v19 = (void **)((char *)this + 14232);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  unint64_t v19 = (void **)((char *)this + 14208);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  for (iunint64_t i = 0; ii != -1152; ii -= 24)
  {
    if (*((char *)this + ii + 14207) < 0) {
      operator delete(*(void **)((char *)this + ii + 14184));
    }
  }
  TParam::~TParam((void **)this + 1613);
  *((void *)this + 1441) = &unk_1F0A337B0;
  unint64_t v19 = (void **)((char *)this + 12880);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  unint64_t v19 = (void **)((char *)this + 12856);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  unint64_t v19 = (void **)((char *)this + 12832);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  for (juint64_t j = 0; jj != -1152; jj -= 24)
  {
    if (*((char *)this + jj + 12831) < 0) {
      operator delete(*(void **)((char *)this + jj + 12808));
    }
  }
  TParam::~TParam((void **)this + 1441);
  *((void *)this + 1269) = &unk_1F0A337B0;
  unint64_t v19 = (void **)((char *)this + 11504);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  unint64_t v19 = (void **)((char *)this + 11480);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  unint64_t v19 = (void **)((char *)this + 11456);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  for (kk = 0; kk != -1152; kk -= 24)
  {
    if (*((char *)this + kk + 11455) < 0) {
      operator delete(*(void **)((char *)this + kk + 11432));
    }
  }
  TParam::~TParam((void **)this + 1269);
  *((void *)this + 1097) = &unk_1F0A337B0;
  unint64_t v19 = (void **)((char *)this + 10128);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  unint64_t v19 = (void **)((char *)this + 10104);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  unint64_t v19 = (void **)((char *)this + 10080);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  for (mm = 0; mm != -1152; mm -= 24)
  {
    if (*((char *)this + mm + 10079) < 0) {
      operator delete(*(void **)((char *)this + mm + 10056));
    }
  }
  TParam::~TParam((void **)this + 1097);
  *((void *)this + 925) = &unk_1F0A337B0;
  unint64_t v19 = (void **)((char *)this + 8752);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  unint64_t v19 = (void **)((char *)this + 8728);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  unint64_t v19 = (void **)((char *)this + 8704);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  for (nn = 0; nn != -1152; nn -= 24)
  {
    if (*((char *)this + nn + 8703) < 0) {
      operator delete(*(void **)((char *)this + nn + 8680));
    }
  }
  TParam::~TParam((void **)this + 925);
  *((void *)this + 753) = &unk_1F0A337B0;
  unint64_t v19 = (void **)((char *)this + 7376);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  unint64_t v19 = (void **)((char *)this + 7352);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  unint64_t v19 = (void **)((char *)this + 7328);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  for (i1 = 0; i1 != -1152; i1 -= 24)
  {
    if (*((char *)this + i1 + 7327) < 0) {
      operator delete(*(void **)((char *)this + i1 + 7304));
    }
  }
  TParam::~TParam((void **)this + 753);
  *((void *)this + 581) = &unk_1F0A337B0;
  unint64_t v19 = (void **)((char *)this + 6000);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  unint64_t v19 = (void **)((char *)this + 5976);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  unint64_t v19 = (void **)((char *)this + 5952);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  for (i2 = 0; i2 != -1152; i2 -= 24)
  {
    if (*((char *)this + i2 + 5951) < 0) {
      operator delete(*(void **)((char *)this + i2 + 5928));
    }
  }
  TParam::~TParam((void **)this + 581);
  *((void *)this + 409) = &unk_1F0A337B0;
  unint64_t v19 = (void **)((char *)this + 4624);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  unint64_t v19 = (void **)((char *)this + 4600);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  unint64_t v19 = (void **)((char *)this + 4576);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  for (i3 = 0; i3 != -1152; i3 -= 24)
  {
    if (*((char *)this + i3 + 4575) < 0) {
      operator delete(*(void **)((char *)this + i3 + 4552));
    }
  }
  TParam::~TParam((void **)this + 409);
  TParam::~TParam((void **)this + 365);
  TParam::~TParam((void **)this + 321);
  TParam::~TParam((void **)this + 277);
  TParam::~TParam((void **)this + 233);
  *((void *)this + 61) = &unk_1F0A337B0;
  unint64_t v19 = (void **)((char *)this + 1840);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  unint64_t v19 = (void **)((char *)this + 1816);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  unint64_t v19 = (void **)((char *)this + 1792);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  long long v18 = 1152;
  do
  {
    if (*((char *)this + v18 + 639) < 0) {
      operator delete(*(void **)((char *)this + v18 + 616));
    }
    v18 -= 24;
  }
  while (v18);
  TParam::~TParam((void **)this + 61);
  TParam::~TParam((void **)this + 17);
  TParamManager::~TParamManager(this);
}

void *THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::~THashBase(void *a1)
{
  *a1 = &unk_1F0A358C0;
  THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::clear(a1);
  uint64_t v2 = a1[1];
  if (v2) {
    MEMORY[0x1B3EA8630](v2, 0x20C8093837F09);
  }
  return a1;
}

void *THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::clear(void *result)
{
  uint64_t v1 = result;
  unint64_t v2 = result[2];
  if (v2)
  {
    for (unint64_t i = 0; i < v2; ++i)
    {
      uint64_t v4 = v1[1];
      uint64_t result = *(void **)(v4 + 8 * i);
      if (result)
      {
        do
        {
          uint64_t v5 = (void *)*result;
          MEMORY[0x1B3EA8670]();
          uint64_t result = v5;
        }
        while (v5);
        uint64_t v4 = v1[1];
        unint64_t v2 = v1[2];
      }
      *(void *)(v4 + 8 * i) = 0;
    }
  }
  v1[3] = 0;
  return result;
}

void THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::~THashBase(void *a1)
{
  THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::~THashBase(a1);
  JUMPOUT(0x1B3EA8670);
}

void *THashBase<std::pair<wchar_t * const,TWordBlock *>,THashMapCompare<std::pair<wchar_t * const,TWordBlock *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t * const,TWordBlock *>,THash<wchar_t const*>>>::~THashBase(void *a1)
{
  *a1 = &unk_1F0A358E0;
  THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::clear(a1);
  uint64_t v2 = a1[1];
  if (v2) {
    MEMORY[0x1B3EA8630](v2, 0x20C8093837F09);
  }
  return a1;
}

void THashBase<std::pair<wchar_t * const,TWordBlock *>,THashMapCompare<std::pair<wchar_t * const,TWordBlock *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t * const,TWordBlock *>,THash<wchar_t const*>>>::~THashBase(void *a1)
{
  THashBase<std::pair<wchar_t * const,TWordBlock *>,THashMapCompare<std::pair<wchar_t * const,TWordBlock *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t * const,TWordBlock *>,THash<wchar_t const*>>>::~THashBase(a1);
  JUMPOUT(0x1B3EA8670);
}

void TWordBlock::TWordBlock(uint64_t a1, void *a2, uint64_t a3, char a4)
{
  *(unsigned char *)(a1 + 24) = a4;
  *(void *)(a1 + 8) = (uint64_t)(a2[1] - *a2) >> 3;
  operator new[]();
}

size_t THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::find@<X0>(size_t result@<X0>, const __int32 **a2@<X1>, void *a3@<X8>)
{
  unint64_t v4 = *(void *)(result + 16);
  if (v4)
  {
    size_t v6 = result;
    uint64_t v7 = *a2;
    uint64_t result = wcslen(*a2);
    unint64_t v8 = 0;
    uint64_t v9 = 4 * result;
    if (4 * result)
    {
      do
      {
        uint64_t v10 = *(char *)v7;
        uint64_t v7 = (const __int32 *)((char *)v7 + 1);
        unint64_t v8 = 33 * v8 + v10;
        --v9;
      }
      while (v9);
    }
    unint64_t v11 = v8 % v4;
    uint64_t v12 = *(void *)(v6 + 8) + 8 * v11;
    while (1)
    {
      uint64_t v12 = *(void *)v12;
      if (!v12) {
        break;
      }
      uint64_t result = wcscmp(*(const __int32 **)(v12 + 8), *a2);
      if (!result)
      {
        uint64_t v13 = *(void *)(v6 + 8);
        uint64_t v14 = v13 + 8 * v11;
        uint64_t v15 = v13 + 8 * *(void *)(v6 + 16);
        *a3 = v14;
        a3[1] = v15;
        a3[2] = v12;
        return result;
      }
    }
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  return result;
}

uint64_t findPreviousVowel(uint64_t a1, int a2)
{
  LODWORD(v2) = a2;
  unsigned int v4 = a2 - 1;
  if (a2 >= 1
    && wcschr((__int32 *)"a", *(_DWORD *)(a1 + 4 * a2))
    && wcschr((__int32 *)"i", *(_DWORD *)(a1 + 4 * v4)))
  {
    LODWORD(v2) = v4;
  }
  uint64_t v5 = (__int32 *)(a1 + 4 * v2);
  do
  {
    BOOL v6 = __OFSUB__(v2, 1);
    uint64_t v2 = (v2 - 1);
    if ((int)v2 < 0 != v6) {
      return 0xFFFFFFFFLL;
    }
    __int32 v7 = *--v5;
  }
  while (!wcschr(s_pszUnaccentedVowels, v7));
  if ((v2 + 1) < 2) {
    return 0;
  }
  if (wcschr((__int32 *)"i", *v5))
  {
    if (wcschr((__int32 *)"a", *(_DWORD *)(a1 + 4 * (v2 - 1)))) {
      return (v2 - 1);
    }
    else {
      return v2;
    }
  }
  return v2;
}

void THashMap<wchar_t *,TWordBlock *,THash<wchar_t const*>,TWideCharEqualTo>::~THashMap(void *a1)
{
  THashBase<std::pair<wchar_t * const,TWordBlock *>,THashMapCompare<std::pair<wchar_t * const,TWordBlock *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t * const,TWordBlock *>,THash<wchar_t const*>>>::~THashBase(a1);
  JUMPOUT(0x1B3EA8670);
}

void THashMap<wchar_t const*,TWord *,THash<wchar_t const*>,TWideCharEqualTo>::~THashMap(void *a1)
{
  THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::~THashBase(a1);
  JUMPOUT(0x1B3EA8670);
}

double THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::findNextPrime(uint64_t a1)
{
  unint64_t v1 = a1 | 1;
  double result = sqrt((double)v1);
  unint64_t v3 = (unint64_t)result;
  if ((unint64_t)result >= 4)
  {
    do
    {
      unint64_t v4 = 3;
      while (v1 % v4)
      {
        v4 += 2;
        if (v4 >= v3) {
          return result;
        }
      }
      v1 += 2;
      double result = sqrt((double)v1);
      unint64_t v3 = (unint64_t)result;
    }
    while ((unint64_t)result > 3);
  }
  return result;
}

_OWORD *std::__tree<std::__value_type<std::wstring,TWordBlock *>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,TWordBlock *>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,TWordBlock *>>>::__emplace_unique_key_args<std::wstring,std::piecewise_construct_t const&,std::tuple<std::wstring&&>,std::tuple<>>(uint64_t **a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  BOOL v6 = (void **)std::__tree<std::wstring>::__find_equal<std::wstring>((uint64_t)a1, &v12, a2);
  __int32 v7 = *v6;
  if (!*v6)
  {
    unint64_t v8 = (uint64_t **)v6;
    __int32 v7 = operator new(0x40uLL);
    uint64_t v9 = *a4;
    uint64_t v10 = *((void *)*a4 + 2);
    void v7[2] = **a4;
    *((void *)v7 + 6) = v10;
    v9[1] = 0;
    void v9[2] = 0;
    *uint64_t v9 = 0;
    *((void *)v7 + 7) = 0;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v12, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*,false>(uint64_t result, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *), uint64_t a4, char a5)
{
  uint64_t v10 = (uint64_t *)result;
LABEL_2:
  unint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    uint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = ((char *)a2 - (char *)v11) >> 4;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          double result = (*a3)(a2 - 2, v11);
          if (result)
          {
            uint64_t v22 = *v11;
            *unint64_t v11 = *(a2 - 2);
            *(a2 - 2) = v22;
            uint64_t v23 = v11[1];
            v11[1] = *(a2 - 1);
            *(a2 - 1) = v23;
          }
          break;
        case 3uLL:
          double result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(v11, v11 + 2, a2 - 2, a3);
          break;
        case 4uLL:
          double result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(v11, v11 + 2, v11 + 4, a2 - 2, a3);
          break;
        case 5uLL:
          double result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(v11, v11 + 2, v11 + 4, v11 + 6, a2 - 2, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 383) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*,std::pair<wchar_t const*,wchar_t *>*>((uint64_t)v11, a2, a2, (unsigned int (**)(uint64_t, uint64_t))a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    int v17 = &v11[2 * (v15 >> 1)];
    if ((unint64_t)v14 >= 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(v11, &v11[2 * (v15 >> 1)], a2 - 2, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(v11 + 2, v17 - 2, a2 - 4, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(v11 + 4, &v11[2 * v16 + 2], a2 - 6, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(v17 - 2, v17, &v11[2 * v16 + 2], a3);
      long long v18 = *(_OWORD *)v11;
      *(_OWORD *)unint64_t v11 = *(_OWORD *)v17;
      *(_OWORD *)int v17 = v18;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(&v11[2 * (v15 >> 1)], v11, a2 - 2, a3);
      if (a5) {
        goto LABEL_14;
      }
    }
    if (((*a3)(v11 - 2, v11) & 1) == 0)
    {
      double result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<wchar_t const*,wchar_t *> *,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&)>(v11, a2, (uint64_t (**)(long long *, void *))a3);
      unint64_t v11 = (uint64_t *)result;
      goto LABEL_19;
    }
LABEL_14:
    unint64_t v19 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<wchar_t const*,wchar_t *> *,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&)>(v11, a2, (uint64_t (**)(void *, long long *))a3);
    if ((v20 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(v11, v19, a3);
    unint64_t v11 = v19 + 2;
    double result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(v19 + 2, a2, a3);
    if (result)
    {
      a4 = -v13;
      a2 = v19;
      if (v21) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v21)
    {
LABEL_17:
      double result = std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*,false>(v10, v19, a3, -v13, a5 & 1);
      unint64_t v11 = v19 + 2;
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>((uint64_t)v11, a2, (uint64_t (**)(_OWORD *, void))a3);
  }
  else
  {
    return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>((uint64_t)v11, a2, (uint64_t (**)(_OWORD *, void *))a3);
  }
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(uint64_t result, _OWORD *a2, uint64_t (**a3)(_OWORD *, void))
{
  if ((_OWORD *)result != a2)
  {
    uint64_t v18 = v3;
    uint64_t v19 = v4;
    char v6 = (void *)result;
    __int32 v7 = (_OWORD *)(result + 16);
    if ((_OWORD *)(result + 16) != a2)
    {
      uint64_t v9 = 0;
      uint64_t v10 = (_OWORD *)result;
      do
      {
        unint64_t v11 = v10;
        uint64_t v10 = v7;
        double result = (*a3)(v7, v11);
        if (result)
        {
          long long v17 = *v10;
          uint64_t v12 = v9;
          while (1)
          {
            uint64_t v13 = (char *)v6 + v12;
            uint64_t v14 = *(void *)((char *)v6 + v12 + 8);
            *((void *)v13 + 2) = *(void *)((char *)v6 + v12);
            *((void *)v13 + 3) = v14;
            if (!v12) {
              break;
            }
            v12 -= 16;
            double result = (*a3)(&v17, (char *)v6 + v12);
            if ((result & 1) == 0)
            {
              unint64_t v15 = (void *)((char *)v6 + v12 + 16);
              goto LABEL_10;
            }
          }
          unint64_t v15 = v6;
LABEL_10:
          uint64_t v16 = *((void *)&v17 + 1);
          *unint64_t v15 = v17;
          v15[1] = v16;
        }
        __int32 v7 = v10 + 1;
        v9 += 16;
      }
      while (v10 + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(uint64_t result, _OWORD *a2, uint64_t (**a3)(_OWORD *, void *))
{
  if ((_OWORD *)result != a2)
  {
    uint64_t v15 = v3;
    uint64_t v16 = v4;
    char v6 = (_OWORD *)result;
    __int32 v7 = (_OWORD *)(result + 16);
    if ((_OWORD *)(result + 16) != a2)
    {
      uint64_t v9 = (void *)(result - 16);
      do
      {
        uint64_t v10 = v6;
        char v6 = v7;
        double result = (*a3)(v7, v10);
        if (result)
        {
          long long v14 = *v6;
          unint64_t v11 = v9;
          do
          {
            uint64_t v12 = v11[3];
            void v11[4] = v11[2];
            void v11[5] = v12;
            double result = (*a3)(&v14, v11);
            v11 -= 2;
          }
          while ((result & 1) != 0);
          uint64_t v13 = *((void *)&v14 + 1);
          void v11[4] = v14;
          void v11[5] = v13;
        }
        __int32 v7 = v6 + 1;
        v9 += 2;
      }
      while (v6 + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t (**a4)(uint64_t *, uint64_t *))
{
  char v8 = (*a4)(a2, a1);
  uint64_t result = (*a4)(a3, a2);
  if (v8)
  {
    uint64_t v10 = *a1;
    if (result)
    {
      *a1 = *a3;
      *a3 = v10;
      unint64_t v11 = a3 + 1;
      uint64_t result = 1;
      uint64_t v12 = a1 + 1;
LABEL_9:
      uint64_t v15 = v11;
      goto LABEL_10;
    }
    *a1 = *a2;
    *a2 = v10;
    uint64_t v17 = a1[1];
    a1[1] = a2[1];
    a2[1] = v17;
    if ((*a4)(a3, a2))
    {
      uint64_t v18 = *a2;
      *a2 = *a3;
      *a3 = v18;
      unint64_t v11 = a3 + 1;
      uint64_t result = 2;
      uint64_t v12 = a2 + 1;
      goto LABEL_9;
    }
  }
  else
  {
    if (!result) {
      return result;
    }
    uint64_t v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
    uint64_t v15 = a2 + 1;
    uint64_t v14 = a2[1];
    a2[1] = a3[1];
    a3[1] = v14;
    if ((*a4)(a2, a1))
    {
      uint64_t v16 = *a1;
      *a1 = *a2;
      uint64_t v12 = a1 + 1;
      *a2 = v16;
      uint64_t result = 2;
LABEL_10:
      uint64_t v19 = *v12;
      *uint64_t v12 = *v15;
      *uint64_t v15 = v19;
      return result;
    }
  }
  return 1;
}

void *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<wchar_t const*,wchar_t *> *,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&)>(void *a1, void *a2, uint64_t (**a3)(long long *, void *))
{
  uint64_t v4 = a2;
  long long v12 = *(_OWORD *)a1;
  if ((*a3)(&v12, a2 - 2))
  {
    char v6 = a1;
    do
      v6 += 2;
    while (((*a3)(&v12, v6) & 1) == 0);
  }
  else
  {
    __int32 v7 = a1 + 2;
    do
    {
      char v6 = v7;
      if (v7 >= v4) {
        break;
      }
      int v8 = (*a3)(&v12, v7);
      __int32 v7 = v6 + 2;
    }
    while (!v8);
  }
  if (v6 < v4)
  {
    do
      v4 -= 2;
    while (((*a3)(&v12, v4) & 1) != 0);
  }
  while (v6 < v4)
  {
    uint64_t v9 = *v6;
    *char v6 = *v4;
    *uint64_t v4 = v9;
    uint64_t v10 = v6[1];
    v6[1] = v4[1];
    v4[1] = v10;
    do
      v6 += 2;
    while (!(*a3)(&v12, v6));
    do
      v4 -= 2;
    while (((*a3)(&v12, v4) & 1) != 0);
  }
  if (v6 - 2 != a1)
  {
    *a1 = *(v6 - 2);
    a1[1] = *(v6 - 1);
  }
  *((_OWORD *)v6 - 1) = v12;
  return v6;
}

void *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<wchar_t const*,wchar_t *> *,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&)>(void *a1, void *a2, uint64_t (**a3)(void *, long long *))
{
  uint64_t v6 = 0;
  long long v13 = *(_OWORD *)a1;
  do
    v6 += 2;
  while (((*a3)(&a1[v6], &v13) & 1) != 0);
  __int32 v7 = &a1[v6];
  if (v6 == 2)
  {
    do
    {
      if (v7 >= a2) {
        break;
      }
      a2 -= 2;
    }
    while (((*a3)(a2, &v13) & 1) == 0);
  }
  else
  {
    do
      a2 -= 2;
    while (!(*a3)(a2, &v13));
  }
  int v8 = &a1[v6];
  if (v7 < a2)
  {
    uint64_t v9 = a2;
    do
    {
      uint64_t v10 = *v8;
      void *v8 = *v9;
      *uint64_t v9 = v10;
      uint64_t v11 = v8[1];
      v8[1] = v9[1];
      v9[1] = v11;
      do
        v8 += 2;
      while (((*a3)(v8, &v13) & 1) != 0);
      do
        v9 -= 2;
      while (!(*a3)(v9, &v13));
    }
    while (v8 < v9);
  }
  uint64_t result = v8 - 2;
  if (v8 - 2 != a1)
  {
    *a1 = *(v8 - 2);
    a1[1] = *(v8 - 1);
  }
  *((_OWORD *)v8 - 1) = v13;
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  uint64_t v6 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if ((*a3)(a2 - 2, a1))
      {
        uint64_t v8 = *a1;
        *a1 = *(a2 - 2);
        *(a2 - 2) = v8;
        uint64_t v9 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(a1, a1 + 2, a2 - 2, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(a1, a1 + 2, a1 + 4, a2 - 2, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2, a3);
      return 1;
    default:
      uint64_t v10 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(a1, a1 + 2, a1 + 4, a3);
      uint64_t v11 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(v11, v10))
    {
      long long v19 = *(_OWORD *)v11;
      uint64_t v14 = v12;
      while (1)
      {
        uint64_t v15 = (uint64_t *)((char *)a1 + v14);
        uint64_t v16 = *(uint64_t *)((char *)a1 + v14 + 40);
        v15[6] = *(uint64_t *)((char *)a1 + v14 + 32);
        v15[7] = v16;
        if (v14 == -32) {
          break;
        }
        v14 -= 16;
        if (((*a3)((uint64_t *)&v19, v15 + 2) & 1) == 0)
        {
          uint64_t v17 = (uint64_t *)((char *)a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      uint64_t v17 = a1;
LABEL_12:
      uint64_t v18 = *((void *)&v19 + 1);
      *uint64_t v17 = v19;
      v17[1] = v18;
      if (++v13 == 8) {
        return v11 + 2 == a2;
      }
    }
    uint64_t v10 = v11;
    v12 += 16;
    v11 += 2;
    if (v11 == a2) {
      return 1;
    }
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t (**a5)(uint64_t *, uint64_t *))
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(a1, a2, a3, a5);
  uint64_t result = (*a5)(a4, a3);
  if (result)
  {
    uint64_t v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    uint64_t v12 = a3[1];
    a3[1] = a4[1];
    a4[1] = v12;
    uint64_t result = (*a5)(a3, a2);
    if (result)
    {
      uint64_t v13 = *a2;
      *a2 = *a3;
      *a3 = v13;
      uint64_t v14 = a2[1];
      a2[1] = a3[1];
      a3[1] = v14;
      uint64_t result = (*a5)(a2, a1);
      if (result)
      {
        uint64_t v15 = *a1;
        *a1 = *a2;
        *a2 = v15;
        uint64_t v16 = a1[1];
        a1[1] = a2[1];
        a2[1] = v16;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t (**a6)(uint64_t *, uint64_t *))
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(a1, a2, a3, a4, a6);
  uint64_t result = (*a6)(a5, a4);
  if (result)
  {
    uint64_t v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    uint64_t v14 = a4[1];
    a4[1] = a5[1];
    a5[1] = v14;
    uint64_t result = (*a6)(a4, a3);
    if (result)
    {
      uint64_t v15 = *a3;
      *a3 = *a4;
      *a4 = v15;
      uint64_t v16 = a3[1];
      a3[1] = a4[1];
      a4[1] = v16;
      uint64_t result = (*a6)(a3, a2);
      if (result)
      {
        uint64_t v17 = *a2;
        *a2 = *a3;
        *a3 = v17;
        uint64_t v18 = a2[1];
        a2[1] = a3[1];
        a3[1] = v18;
        uint64_t result = (*a6)(a2, a1);
        if (result)
        {
          uint64_t v19 = *a1;
          *a1 = *a2;
          *a2 = v19;
          uint64_t v20 = a1[1];
          a1[1] = a2[1];
          a2[1] = v20;
        }
      }
    }
  }
  return result;
}

uint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*,std::pair<wchar_t const*,wchar_t *>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unsigned int (**a4)(uint64_t, uint64_t))
{
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v8 = (uint64_t)a2 - a1;
    uint64_t v9 = ((uint64_t)a2 - a1) >> 4;
    if ((uint64_t)a2 - a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = (_OWORD *)(a1 + 16 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = a2;
    if (a2 != a3)
    {
      uint64_t v14 = a2;
      do
      {
        if ((*a4)((uint64_t)v14, a1))
        {
          uint64_t v15 = *v14;
          *uint64_t v14 = *(void *)a1;
          *(void *)a1 = v15;
          uint64_t v16 = v14[1];
          v14[1] = *(void *)(a1 + 8);
          *(void *)(a1 + 8) = v16;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(a1, a4, v9, (_OWORD *)a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 17)
    {
      uint64_t v17 = (unint64_t)v8 >> 4;
      uint64_t v18 = a2 - 2;
      do
      {
        uint64_t v20 = *(void *)a1;
        uint64_t v19 = *(void *)(a1 + 8);
        BOOL v21 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>((void *)a1, a4, v17);
        if (v18 == v21)
        {
          uint64_t *v21 = v20;
          v21[1] = v19;
        }
        else
        {
          uint64_t *v21 = *v18;
          v21[1] = v18[1];
          *uint64_t v18 = v20;
          v18[1] = v19;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(a1, (uint64_t)(v21 + 2), (uint64_t (**)(void *, long long *))a4, ((uint64_t)v21 - a1 + 16) >> 4);
        }
        v18 -= 2;
      }
      while (v17-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(uint64_t result, unsigned int (**a2)(void, void), uint64_t a3, _OWORD *a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v20 = v4;
    uint64_t v21 = v5;
    __int32 v7 = a4;
    uint64_t v8 = result;
    int64_t v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= ((uint64_t)a4 - result) >> 4)
    {
      uint64_t v12 = ((uint64_t)a4 - result) >> 3;
      uint64_t v13 = v12 + 1;
      uint64_t v14 = (void *)(result + 16 * (v12 + 1));
      uint64_t v15 = v12 + 2;
      if (v12 + 2 < a3 && (*a2)(v14, v14 + 2))
      {
        v14 += 2;
        uint64_t v13 = v15;
      }
      uint64_t result = ((uint64_t (*)(void *, _OWORD *))*a2)(v14, v7);
      if ((result & 1) == 0)
      {
        long long v19 = *v7;
        do
        {
          uint64_t v16 = v14;
          *(void *)__int32 v7 = *v14;
          *((void *)v7 + 1) = v14[1];
          if (v9 < v13) {
            break;
          }
          uint64_t v17 = (2 * v13) | 1;
          uint64_t v14 = (void *)(v8 + 16 * v17);
          uint64_t v18 = 2 * v13 + 2;
          if (v18 < a3)
          {
            if ((*a2)(v8 + 16 * v17, v14 + 2))
            {
              v14 += 2;
              uint64_t v17 = v18;
            }
          }
          uint64_t result = ((uint64_t (*)(void *, long long *))*a2)(v14, &v19);
          __int32 v7 = v16;
          uint64_t v13 = v17;
        }
        while (!result);
        *uint64_t v16 = v19;
      }
    }
  }
  return result;
}

void *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(void *a1, unsigned int (**a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    int64_t v9 = &a1[2 * v6 + 2];
    uint64_t v10 = (2 * v6) | 1;
    uint64_t v11 = 2 * v6 + 2;
    if (v11 < a3 && (*a2)((uint64_t)&a1[2 * v6 + 2], (uint64_t)&a1[2 * v6 + 4]))
    {
      v9 += 2;
      uint64_t v10 = v11;
    }
    *a1 = *v9;
    a1[1] = v9[1];
    a1 = v9;
    uint64_t v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

double std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(void *, long long *), uint64_t a4)
{
  unint64_t v6 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v15 = v4;
    uint64_t v16 = v5;
    unint64_t v9 = v6 >> 1;
    uint64_t v10 = (void *)(a1 + 16 * (v6 >> 1));
    uint64_t v11 = (_OWORD *)(a2 - 16);
    if ((*a3)(v10, (long long *)(a2 - 16)))
    {
      long long v14 = *v11;
      do
      {
        uint64_t v13 = v10;
        *(void *)uint64_t v11 = *v10;
        *((void *)v11 + 1) = v10[1];
        if (!v9) {
          break;
        }
        unint64_t v9 = (v9 - 1) >> 1;
        uint64_t v10 = (void *)(a1 + 16 * v9);
        uint64_t v11 = v13;
      }
      while (((*a3)(v10, &v14) & 1) != 0);
      double result = *(double *)&v14;
      *uint64_t v13 = v14;
    }
  }
  return result;
}

void quasar::SilencePosteriorGeneratorConfig::SilencePosteriorGeneratorConfig(uint64_t a1, quasar::SystemConfig *a2, const void **a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = xmmword_1B259BE80;
  *(unsigned char *)(a1 + 4std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "spg");
  quasar::SystemConfig::enforceMinVersion((uint64_t)a2, 46, 0, (uint64_t)&__p);
  if (v26.__r_.__value_.__s.__data_[15] < 0) {
    operator delete(__p);
  }
  if (*((char *)a3 + 23) >= 0) {
    size_t v5 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v5 = (size_t)a3[1];
  }
  std::string::basic_string[abi:ne180100]((uint64_t)v29, v5 + 9);
  if ((v30 & 0x80u) == 0) {
    unint64_t v6 = v29;
  }
  else {
    unint64_t v6 = (void *)v29[0];
  }
  if (v5)
  {
    if (*((char *)a3 + 23) >= 0) {
      uint64_t v7 = a3;
    }
    else {
      uint64_t v7 = *a3;
    }
    memmove(v6, v7, v5);
  }
  strcpy((char *)v6 + v5, ".frontend");
  uint64_t Ptree = quasar::SystemConfig::getPtree((uint64_t)a2, (uint64_t)v29);
  LODWORD(__p) = *(_DWORD *)Ptree;
  if (*(char *)(Ptree + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)(Ptree + 8), *(void *)(Ptree + 16));
  }
  else
  {
    long long v9 = *(_OWORD *)(Ptree + 8);
    v26.__r_.__value_.__r.__words[2] = *(void *)(Ptree + 24);
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v9;
  }
  memset(&v27, 0, sizeof(v27));
  std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>(&v27, *(void *)(Ptree + 32), *(void *)(Ptree + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(Ptree + 40) - *(void *)(Ptree + 32)) >> 3));
  char v28 = *(unsigned char *)(Ptree + 56);
  uint64_t v10 = quasar::PTree::begin((quasar::PTree *)&__p);
  if (v10 != quasar::PTree::end((quasar::PTree *)&__p))
  {
    if ((v30 & 0x80u) == 0) {
      size_t v11 = v30;
    }
    else {
      size_t v11 = v29[1];
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&v22, v11 + 1);
    if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v12 = &v22;
    }
    else {
      uint64_t v12 = (std::string *)v22.__r_.__value_.__r.__words[0];
    }
    if (v11)
    {
      if ((v30 & 0x80u) == 0) {
        uint64_t v13 = v29;
      }
      else {
        uint64_t v13 = (void *)v29[0];
      }
      memmove(v12, v13, v11);
    }
    *(_WORD *)((char *)&v12->__r_.__value_.__l.__data_ + v11) = 46;
    int v14 = *(char *)(v10 + 23);
    if (v14 >= 0) {
      uint64_t v15 = (const std::string::value_type *)v10;
    }
    else {
      uint64_t v15 = *(const std::string::value_type **)v10;
    }
    if (v14 >= 0) {
      std::string::size_type v16 = *(unsigned __int8 *)(v10 + 23);
    }
    else {
      std::string::size_type v16 = *(void *)(v10 + 8);
    }
    uint64_t v17 = std::string::append(&v22, v15, v16);
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    quasar::FeatureExtractorSimpleFactory::createFeatureExtractor(&v23, &v24);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
    quasar::FeatureExtractor::init(v24, a2);
  }
  if (*((char *)a3 + 23) >= 0) {
    size_t v19 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v19 = (size_t)a3[1];
  }
  std::string::basic_string[abi:ne180100]((uint64_t)&v23, v19 + 6);
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v20 = &v23;
  }
  else {
    uint64_t v20 = (std::string *)v23.__r_.__value_.__r.__words[0];
  }
  if (v19)
  {
    if (*((char *)a3 + 23) >= 0) {
      uint64_t v21 = a3;
    }
    else {
      uint64_t v21 = *a3;
    }
    memmove(v20, v21, v19);
  }
  strcpy((char *)v20 + v19, ".nfhat");
  quasar::SystemConfig::hasParam((uint64_t)a2, (uint64_t)&v23);
}

void sub_1B21570B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,int a26,__int16 a27,char a28,char a29,int a30,__int16 a31,char a32,char a33)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  quasar::PTree::~PTree((quasar::PTree *)&a24);
  if (*(char *)(v33 - 97) < 0) {
    operator delete(*(void **)(v33 - 120));
  }
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  _Unwind_Resume(a1);
}

void quasar::SilencePosteriorGenerator::SilencePosteriorGenerator(uint64_t a1, void *a2, uint64_t *a3, int a4)
{
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(unsigned char *)(a1 + 8std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = 1;
  *(_DWORD *)(a1 + 84) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  uint64_t v4 = a2[1];
  v7[0] = *a2;
  v7[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = a3[1];
  v6[0] = *a3;
  v6[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  quasar::SilencePosteriorGenerator::init(a1, (uint64_t)v7, v6, a4);
}

void sub_1B2157264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  uint64_t v10 = v8;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  uint64_t v12 = (void *)*v9;
  *long long v9 = 0;
  if (v12) {
    std::default_delete<quasar::NFHatTransformer>::operator()[abi:ne180100]((uint64_t)v9, v12);
  }
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  uint64_t v13 = (std::__shared_weak_count *)v6[5];
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  int v14 = (std::__shared_weak_count *)v6[3];
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  uint64_t v15 = (std::__shared_weak_count *)v6[1];
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  _Unwind_Resume(a1);
}

void quasar::SilencePosteriorGenerator::init(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  uint64_t v9 = *a3;
  uint64_t v8 = a3[1];
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 24);
  *(void *)(a1 + 16) = v9;
  *(void *)(a1 + 24) = v8;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  size_t v11 = *(uint64_t ***)a2;
  uint64_t v12 = *(void *)(a2 + 8);
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = *(std::__shared_weak_count **)(a1 + 8);
  *(void *)a1 = v11;
  *(void *)(a1 + 8) = v12;
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  int v57 = a4;
  uint64_t v58 = 0;
  char v59 = 0;
  int v65 = 0;
  char v66 = 0;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  memset(v64, 0, sizeof(v64));
  long long v67 = 0u;
  long long v68 = 0u;
  uint64_t v69 = 0;
  char v70 = 1;
  int v14 = *(uint64_t ***)a2;
  uint64_t v15 = **(uint64_t ***)a2;
  std::string::size_type v16 = *(uint64_t **)(*(void *)a2 + 8);
  if (v15 != v16)
  {
    uint64_t v17 = (void *)(a1 + 48);
    do
    {
      uint64_t v18 = *v15;
      if (*a3) {
        uint64_t v19 = *a3 + 16;
      }
      else {
        uint64_t v19 = 0;
      }
      uint64_t v20 = *(std::__shared_weak_count **)(a1 + 40);
      uint64_t v54 = *(void *)(a1 + 32);
      uint64_t v55 = v20;
      if (v20) {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      quasar::FeatureExtractor::createOnlineFeInput(v18, v19, &v54);
      uint64_t v21 = *(_OWORD **)(a1 + 56);
      unint64_t v22 = *(void *)(a1 + 64);
      if ((unint64_t)v21 >= v22)
      {
        uint64_t v23 = ((uint64_t)v21 - *v17) >> 4;
        unint64_t v24 = v23 + 1;
        if ((unint64_t)(v23 + 1) >> 60) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v25 = v22 - *v17;
        if (v25 >> 3 > v24) {
          unint64_t v24 = v25 >> 3;
        }
        if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v26 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v26 = v24;
        }
        uint64_t v75 = a1 + 64;
        std::string v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(a1 + 64, v26);
        char v28 = &v27[16 * v23];
        uint64_t v71 = v27;
        unint64_t v72 = v28;
        float v74 = &v27[16 * v29];
        *(_OWORD *)char v28 = v56;
        long long v56 = 0uLL;
        unint64_t v73 = v28 + 16;
        std::vector<std::shared_ptr<kaldi::OnlineFeatInputItf>>::__swap_out_circular_buffer((uint64_t *)(a1 + 48), &v71);
        uint64_t v30 = *(void *)(a1 + 56);
        std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer(&v71);
        uint64_t v31 = (std::__shared_weak_count *)*((void *)&v56 + 1);
        *(void *)(a1 + 56) = v30;
        if (v31) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v31);
        }
      }
      else
      {
        _OWORD *v21 = v56;
        long long v56 = 0uLL;
        *(void *)(a1 + 56) = v21 + 1;
      }
      if (v55) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v55);
      }
      uint64_t v32 = *(void *)(a1 + 56);
      uint64_t v34 = *(void *)(v32 - 16);
      uint64_t v33 = *(void *)(v32 - 8);
      if (v33) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v33 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v35 = *(std::__shared_weak_count **)(a1 + 40);
      *(void *)(a1 + 32) = v34;
      *(void *)(a1 + 4std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = v33;
      if (v35) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v35);
      }
      v15 += 2;
    }
    while (v15 != v16);
    int v14 = *(uint64_t ***)a2;
  }
  if (*((unsigned char *)v14 + 40))
  {
    uint64_t v53 = *(kaldi::OnlineFeatInputItf **)(a1 + 32);
    std::allocate_shared[abi:ne180100]<kaldi::OnlineBufferingInput,std::allocator<kaldi::OnlineBufferingInput>,kaldi::OnlineFeatInputItf *,void>(&v53, &v56);
    long long v36 = v56;
    long long v56 = 0uLL;
    unint64_t v37 = *(void *)(a1 + 64);
    uint64_t v38 = *(_OWORD **)(a1 + 56);
    if ((unint64_t)v38 >= v37)
    {
      long long v52 = v36;
      uint64_t v40 = *(void *)(a1 + 48);
      uint64_t v41 = ((uint64_t)v38 - v40) >> 4;
      if ((unint64_t)(v41 + 1) >> 60) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v42 = v37 - v40;
      uint64_t v43 = v42 >> 3;
      if (v42 >> 3 <= (unint64_t)(v41 + 1)) {
        uint64_t v43 = v41 + 1;
      }
      if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v44 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v44 = v43;
      }
      uint64_t v75 = a1 + 64;
      unint64_t v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(a1 + 64, v44);
      char v46 = &v45[16 * v41];
      uint64_t v71 = v45;
      unint64_t v72 = v46;
      float v74 = &v45[16 * v47];
      *(_OWORD *)char v46 = v52;
      unint64_t v73 = v46 + 16;
      std::vector<std::shared_ptr<kaldi::OnlineFeatInputItf>>::__swap_out_circular_buffer((uint64_t *)(a1 + 48), &v71);
      uint64_t v39 = *(_OWORD **)(a1 + 56);
      std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer(&v71);
      uint64_t v48 = (std::__shared_weak_count *)*((void *)&v56 + 1);
      *(void *)(a1 + 56) = v39;
      if (v48)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v48);
        uint64_t v39 = *(_OWORD **)(a1 + 56);
      }
    }
    else
    {
      _OWORD *v38 = v36;
      uint64_t v39 = v38 + 1;
      *(void *)(a1 + 56) = v39;
    }
    uint64_t v50 = *((void *)v39 - 2);
    uint64_t v49 = *((void *)v39 - 1);
    if (v49) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v49 + 8), 1uLL, memory_order_relaxed);
    }
    char v51 = *(std::__shared_weak_count **)(a1 + 40);
    *(void *)(a1 + 32) = v50;
    *(void *)(a1 + 4std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = v49;
    if (v51) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v51);
    }
  }
  *(_DWORD *)(a1 + 88) = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32));
  operator new();
}

void sub_1B21576A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, ...)
{
  va_start(va, a12);
  std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((void **)(v12 - 136));
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  quasar::FeatureExtractorArgs::~FeatureExtractorArgs((void **)va);
  _Unwind_Resume(a1);
}

void quasar::SilencePosteriorGenerator::SilencePosteriorGenerator(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  int v25 = a5;
  int v26 = a3;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(unsigned char *)(a1 + 8std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = 1;
  *(_DWORD *)(a1 + 84) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  quasar::SystemConfig::SystemConfig((quasar::SystemConfig *)v24);
  memset(v23, 0, sizeof(v23));
  long long v6 = 0u;
  long long v7 = 0u;
  LODWORD(v8) = 1065353216;
  LODWORD(a2) = quasar::SystemConfig::readJsonFile((uint64_t)v24, a2, v23, (uint64_t)&v6, 0, 0);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v6);
  *(void *)&long long v6 = v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v6);
  if (a2 != 2) {
    std::allocate_shared[abi:ne180100]<quasar::SilencePosteriorGeneratorConfig,std::allocator<quasar::SilencePosteriorGeneratorConfig>,quasar::SystemConfig &,char const(&)[4],void>((uint64_t)v23, (quasar::SystemConfig *)v24, "spg");
  }
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v6 = 0u;
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v6, (uint64_t)"Silence posterior generator created with incorrect version", 58);
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v6);
}

void sub_1B2157904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void **a50)
{
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)&a50);
  long long v52 = (void *)v50[9];
  v50[9] = 0;
  if (v52) {
    std::default_delete<quasar::NFHatTransformer>::operator()[abi:ne180100]((uint64_t)(v50 + 9), v52);
  }
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a50);
  uint64_t v53 = (std::__shared_weak_count *)v50[5];
  if (v53) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v53);
  }
  uint64_t v54 = (std::__shared_weak_count *)v50[3];
  if (v54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v54);
  }
  uint64_t v55 = (std::__shared_weak_count *)v50[1];
  if (v55) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v55);
  }
  _Unwind_Resume(a1);
}

void sub_1B21579BC()
{
}

uint64_t quasar::SilencePosteriorGenerator::estimateSilenceDuration(uint64_t a1, uint64_t a2)
{
  kaldi::Matrix<float>::Matrix((uint64_t)v10, 1, 2, 0, 0);
  uint64_t v4 = *(uint64_t (****)(void, void *))(a1 + 32);
  kaldi::OnlineFeatInputItfIO::OnlineFeatInputItfIO(v9, (uint64_t)v10, 0, 0, 0, 0, 0);
  *(unsigned char *)(a1 + 8std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = (**v4)(v4, v9);
  if ((int)kaldi::MatrixBase<float>::NumRows((uint64_t)v10) >= 1)
  {
    if (*(unsigned char *)(*(void *)a1 + 40) && kaldi::MatrixBase<float>::NumRows((uint64_t)v10) != 1)
    {
      memset(v8, 0, sizeof(v8));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"frameByFrame requires output batch size of 1", 44);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v8);
    }
    quasar::NFHatTransformer::estimateSilenceDuration(*(quasar::NFHatTransformer **)(a1 + 72), (uint64_t)v10, *(_DWORD *)(a1 + 88), a2);
    *(_DWORD *)(a1 + 84) += *(_DWORD *)(a1 + 88) * kaldi::MatrixBase<float>::NumRows((uint64_t)v10);
    int v5 = kaldi::MatrixBase<float>::NumRows((uint64_t)v10);
    *(_DWORD *)(a1 + 92) = *(_DWORD *)(v10[0] + 4 * v11 * (v5 - 1));
  }
  uint64_t v6 = *(unsigned __int8 *)(a1 + 80);
  kaldi::Matrix<float>::~Matrix((uint64_t)v10);
  return v6;
}

void sub_1B2157B4C(_Unwind_Exception *a1)
{
  kaldi::Matrix<float>::~Matrix(v1 - 72);
  _Unwind_Resume(a1);
}

uint64_t quasar::SilencePosteriorGenerator::hasMoreAudio(quasar::SilencePosteriorGenerator *this)
{
  return *((unsigned __int8 *)this + 80);
}

double quasar::SilencePosteriorGenerator::getSilenceFramesCountMs(quasar::SilencePosteriorGenerator *this)
{
  return (double)(*((_DWORD *)this + 22) * *(_DWORD *)(*((void *)this + 9) + 80));
}

double quasar::SilencePosteriorGenerator::getSilenceProbability(quasar::SilencePosteriorGenerator *this)
{
  return *(double *)(*((void *)this + 9) + 72);
}

double quasar::SilencePosteriorGenerator::getSilenceDurationMs(double **this)
{
  return *this[9];
}

double quasar::SilencePosteriorGenerator::getSilencePosterior(quasar::SilencePosteriorGenerator *this)
{
  return *((float *)this + 23);
}

uint64_t quasar::SilencePosteriorGenerator::getProcessedAudioMs(quasar::SilencePosteriorGenerator *this)
{
  return *((unsigned int *)this + 21);
}

uint64_t quasar::SilencePosteriorGenerator::getFrameDurationMs(quasar::SilencePosteriorGenerator *this)
{
  return *((unsigned int *)this + 22);
}

void std::allocate_shared[abi:ne180100]<quasar::SilencePosteriorGeneratorConfig,std::allocator<quasar::SilencePosteriorGeneratorConfig>,quasar::SystemConfig &,char const(&)[4],void>(uint64_t a1, quasar::SystemConfig *a2, char *a3)
{
  int v5 = operator new(0x48uLL);
  std::__shared_ptr_emplace<quasar::SilencePosteriorGeneratorConfig>::__shared_ptr_emplace[abi:ne180100]<quasar::SystemConfig &,char const(&)[4],std::allocator<quasar::SilencePosteriorGeneratorConfig>,0>(v5, a2, a3);
}

void sub_1B2157C08(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::SilencePosteriorGeneratorConfig>::__shared_ptr_emplace[abi:ne180100]<quasar::SystemConfig &,char const(&)[4],std::allocator<quasar::SilencePosteriorGeneratorConfig>,0>(void *a1, quasar::SystemConfig *a2, char *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A61EC0;
  std::allocator<quasar::SilencePosteriorGeneratorConfig>::construct[abi:ne180100]<quasar::SilencePosteriorGeneratorConfig,quasar::SystemConfig &,char const(&)[4]>((int)&v3, (uint64_t)(a1 + 3), a2, a3);
}

void sub_1B2157C7C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::SilencePosteriorGeneratorConfig>::construct[abi:ne180100]<quasar::SilencePosteriorGeneratorConfig,quasar::SystemConfig &,char const(&)[4]>(int a1, uint64_t a2, quasar::SystemConfig *a3, char *__s)
{
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  quasar::SilencePosteriorGeneratorConfig::SilencePosteriorGeneratorConfig(a2, a3, (const void **)__p);
}

void sub_1B2157CE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<quasar::RecogAudioBuffer,std::allocator<quasar::RecogAudioBuffer>,unsigned int const&,int &,void>(uint64_t a1, int *a2, int *a3)
{
  int v5 = operator new(0x160uLL);
  std::__shared_ptr_emplace<quasar::RecogAudioBuffer>::__shared_ptr_emplace[abi:ne180100]<unsigned int const&,int &,std::allocator<quasar::RecogAudioBuffer>,0>(v5, a2, a3);
}

void sub_1B2157D54(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::RecogAudioBuffer>::__shared_ptr_emplace[abi:ne180100]<unsigned int const&,int &,std::allocator<quasar::RecogAudioBuffer>,0>(void *a1, int *a2, int *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A60250;
  std::allocator<quasar::RecogAudioBuffer>::construct[abi:ne180100]<quasar::RecogAudioBuffer,unsigned int const&,int &>((uint64_t)&v3, (uint64_t)(a1 + 3), a2, a3);
}

void sub_1B2157DC8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::RecogAudioBuffer>::construct[abi:ne180100]<quasar::RecogAudioBuffer,unsigned int const&,int &>(uint64_t a1, uint64_t a2, int *a3, int *a4)
{
  int v5 = *a3;
  int v6 = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  _ZNSt3__115allocate_sharedB8ne180100IKN5kaldi5TimerENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v7);
  quasar::RecogAudioBuffer::RecogAudioBuffer(a2, v5, v6, 0, 1, &__p, &v7, 120, 0, 4000);
}

void sub_1B2157E7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::defaultFallbackItnLeftContext(std::string **a1@<X8>)
{
  *(void *)&long long v7 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(&v5, "hey");
  std::string::basic_string[abi:ne180100]<0>(v6, "Siri");
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  char v3 = (std::string *)operator new(0x30uLL);
  *a1 = v3;
  a1[1] = v3;
  a1[2] = v3 + 2;
  uint64_t v4 = 0;
  a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)(a1 + 2), &v5, &v7, v3);
  do
  {
    if (SHIBYTE(v6[v4 + 2]) < 0) {
      operator delete((void *)v6[v4]);
    }
    v4 -= 3;
  }
  while (v4 != -6);
}

void sub_1B2157F94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v25 = v24;
  *(void *)(v23 + 8) = v25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  uint64_t v27 = 0;
  while (1)
  {
    if (*(&a23 + v27) < 0) {
      operator delete(*(void **)((char *)&a18 + v27));
    }
    v27 -= 24;
    if (v27 == -48) {
      _Unwind_Resume(a1);
    }
  }
}

uint64_t std::vector<std::string>::vector[abi:ne180100](uint64_t a1, long long *a2, unint64_t a3)
{
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = a1 + 16;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  if (a3)
  {
    std::vector<std::string>::__vallocate[abi:ne180100]((void *)a1, a3);
    *(void *)(a1 + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(v4, a2, (long long *)((char *)a2 + 24 * a3), *(std::string **)(a1 + 8));
  }
  return a1;
}

void sub_1B2158080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void quasar::defaultLeadingSpaceTokens(uint64_t a1@<X8>)
{
  v5[3] = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(v4, "¿");
  std::string::basic_string[abi:ne180100]<0>(v5, "¡");
  std::unordered_set<std::string>::unordered_set(a1, v4, 2);
  for (uint64_t i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v5[i + 2]) < 0) {
      operator delete(*(void **)&v4[i * 8 + 24]);
    }
  }
}

void sub_1B2158158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v17 = 0;
  while (1)
  {
    if (*(char *)(v15 + v17 + 47) < 0) {
      operator delete(*(void **)(v15 + v17 + 24));
    }
    v17 -= 24;
    if (v17 == -48) {
      _Unwind_Resume(exception_object);
    }
  }
}

void quasar::formatWords(std::string *a1@<X0>, std::string *a2@<X1>, char a3@<W2>, std::string *a4@<X3>, unsigned int a5@<W4>, int a6@<W5>, uint64_t *a7@<X6>, void *a8@<X7>, std::string *a9@<X8>, char a10, std::string *a11, uint64_t a12, unsigned __int8 a13, uint64_t a14, uint64_t a15)
{
  std::string::size_type v22 = a4->__r_.__value_.__r.__words[0];
  for (std::string::size_type i = a4->__r_.__value_.__l.__size_; i != v22; quasar::Token::~Token((void **)(i - 224)))
    ;
  a4->__r_.__value_.__l.__size_ = v22;
  if (quasar::gLogLevel >= 5)
  {
    unsigned int v23 = a5;
    char v24 = a3;
    long long v129 = 0u;
    long long v130 = 0u;
    long long v128 = 0u;
    long long v126 = 0u;
    memset(v127, 0, sizeof(v127));
    long long v124 = 0u;
    long long v125 = 0u;
    memset(v123, 0, sizeof(v123));
    long long v122 = 0u;
    long long v120 = 0u;
    memset(v121, 0, sizeof(v121));
    memset(v119, 0, sizeof(v119));
    long long v118 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v118);
    uint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v118, (uint64_t)"ContinuousListening ITN Input Tokens: ", 38);
    quasar::tokens2Str((uint64_t *)a1, (std::string *)&__p);
    if ((SBYTE7(v109) & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (long long *)__p;
    }
    if ((SBYTE7(v109) & 0x80u) == 0) {
      uint64_t v27 = BYTE7(v109);
    }
    else {
      uint64_t v27 = *((void *)&__p + 1);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)p_p, v27);
    a3 = v24;
    if (SBYTE7(v109) < 0) {
      operator delete((void *)__p);
    }
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v118);
    a5 = v23;
    if (quasar::gLogLevel >= 5)
    {
      long long v129 = 0u;
      long long v130 = 0u;
      long long v128 = 0u;
      long long v126 = 0u;
      memset(v127, 0, sizeof(v127));
      long long v124 = 0u;
      long long v125 = 0u;
      memset(v123, 0, sizeof(v123));
      long long v122 = 0u;
      long long v120 = 0u;
      memset(v121, 0, sizeof(v121));
      memset(v119, 0, sizeof(v119));
      long long v118 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v118);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v118, (uint64_t)"ContinuousListening ITN LeftContext: ", 37);
      char v28 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" tokens with leftContextProvidedByClient ", 41);
      std::ostream::operator<<();
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v118);
      if (quasar::gLogLevel >= 5)
      {
        long long v129 = 0u;
        long long v130 = 0u;
        long long v128 = 0u;
        long long v126 = 0u;
        memset(v127, 0, sizeof(v127));
        long long v124 = 0u;
        long long v125 = 0u;
        memset(v123, 0, sizeof(v123));
        long long v122 = 0u;
        long long v120 = 0u;
        memset(v121, 0, sizeof(v121));
        memset(v119, 0, sizeof(v119));
        long long v118 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v118);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v118, (uint64_t)"ContinuousListening ITN RightContext: ", 38);
        uint64_t v29 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)" tokens", 7);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v118);
      }
    }
  }
  uint64_t v30 = (uint64_t *)a11;
  if (*a7 || a10) && (a2->__r_.__value_.__r.__words[0] != a2->__r_.__value_.__l.__size_ || (a3) {
    || *(void *)a12 != *(void *)(a12 + 8))
  }
  {
    a9->__r_.__value_.__r.__words[0] = 0;
    a9->__r_.__value_.__l.__size_ = 0;
    a9->__r_.__value_.__r.__words[2] = 0;
    memset(&v116, 0, sizeof(v116));
    memset(&v115, 0, sizeof(v115));
    long long v113 = 0uLL;
    uint64_t v114 = 0;
    unsigned int v112 = 0;
    unsigned int v111 = 0x7FFFFFFF;
    if (a10)
    {
      std::string::size_type size = a2->__r_.__value_.__l.__size_;
      if (size != a2->__r_.__value_.__r.__words[0]) {
        a5 += *(_DWORD *)(size - 192);
      }
    }
    quasar::prependLeftContext(a1, a2, (uint64_t *)&v116, &v112, a5);
    quasar::appendRightContext((uint64_t *)&v116, (const quasar::Token **)a12, (uint64_t *)&v115, &v111);
    uint64_t v32 = *(void *)(a15 + 24);
    if (!v32) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(long long *__return_ptr))(*(void *)v32 + 48))(&v118);
    std::vector<quasar::Token>::__vdeallocate((void **)&a9->__r_.__value_.__l.__data_);
    *(_OWORD *)&a9->__r_.__value_.__l.__data_ = v118;
    a9->__r_.__value_.__r.__words[2] = v119[0];
    v119[0] = 0;
    long long v118 = 0uLL;
    *(void *)&long long __p = &v118;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    long long __p = 0u;
    long long v109 = 0u;
    int v110 = 1065353216;
    uint64_t v33 = *a7;
    if (*a7)
    {
      if (&__p != (long long *)(v33 + 80))
      {
        int v110 = *(_DWORD *)(v33 + 112);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(&__p, *(uint64_t **)(v33 + 96), 0);
      }
    }
    else if (a10)
    {
      quasar::defaultLeadingSpaceTokens((uint64_t)&v118);
      std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__move_assign((uint64_t)&__p, (uint64_t *)&v118);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v118);
    }
    int v106 = 0;
    uint64_t v107 = 0;
    quasar::getPreItnTokenToPostItnCharAlignment(&v115, a9, &v106, (uint64_t *)&v118);
    unsigned int v83 = a5;
    int v82 = a4;
    int v84 = (void *)v118;
    long long v113 = v118;
    uint64_t v114 = v119[0];
    v119[0] = 0;
    long long v118 = 0uLL;
    if (v107) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v107);
    }
    __int16 v105 = 0;
    int v39 = -1227133513 * ((a2->__r_.__value_.__l.__size_ - a2->__r_.__value_.__r.__words[0]) >> 5);
    int hasInterUtteranceItn = quasar::hasInterUtteranceItn((int **)&v113, v39, v39- 1227133513* ((a1->__r_.__value_.__l.__size_ - a1->__r_.__value_.__r.__words[0]) >> 5)- 1, (unsigned char *)&v105 + 1, &v105);
    uint64_t v41 = v84;
    if ((_BYTE)v105)
    {
      uint64_t v42 = *(void *)(a15 + 24);
      if (!v42) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(long long *__return_ptr))(*(void *)v42 + 48))(&v118);
      std::vector<quasar::Token>::__vdeallocate((void **)&a9->__r_.__value_.__l.__data_);
      *(_OWORD *)&a9->__r_.__value_.__l.__data_ = v118;
      a9->__r_.__value_.__r.__words[2] = v119[0];
      v119[0] = 0;
      long long v118 = 0uLL;
      v138.__r_.__value_.__r.__words[0] = (std::string::size_type)&v118;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v138);
      uint64_t v103 = 0;
      std::string v104 = 0;
      quasar::getPreItnTokenToPostItnCharAlignment(&v116, a9, &v103, (uint64_t *)&v118);
      if (v84)
      {
        *((void *)&v113 + 1) = v84;
        operator delete(v84);
      }
      uint64_t v43 = (void *)v118;
      long long v113 = v118;
      uint64_t v114 = v119[0];
      v119[0] = 0;
      long long v118 = 0uLL;
      if (v104)
      {
        long long v85 = v43;
        std::__shared_weak_count::__release_shared[abi:ne180100](v104);
        uint64_t v43 = v85;
      }
      uint64_t v41 = v43;
    }
    if (!hasInterUtteranceItn
      || (int v44 = -1227133513 * ((a2->__r_.__value_.__l.__size_ - a2->__r_.__value_.__r.__words[0]) >> 5),
          (quasar::hasInterUtteranceItn((int **)&v113, v44, v44- 1227133513 * ((a1->__r_.__value_.__l.__size_ - a1->__r_.__value_.__r.__words[0]) >> 5)- 1, (unsigned char *)&v105 + 1, &v105) & 1) == 0))
    {
      quasar::stripLeftAndRightContext(a9, v112, v111, a8, v83, (uint64_t)&__p);
      if (a11 != a9) {
        std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>((uint64_t)a11, a9->__r_.__value_.__r.__words[0], a9->__r_.__value_.__l.__size_, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a9->__r_.__value_.__l.__size_ - a9->__r_.__value_.__r.__words[0]) >> 5));
      }
      quasar::removeTokenTimestampOffsets((uint64_t *)a9, v83, a6);
      if ((a3 & 1) != 0 || a13)
      {
        uint64_t v49 = *(void *)(a14 + 8);
        v102[0] = *(unsigned char **)a14;
        v102[1] = (unsigned char *)v49;
        if (v49) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v49 + 8), 1uLL, memory_order_relaxed);
        }
        quasar::separatePunctuation(a9, v82, a13, v102);
        if (v49) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v49);
        }
      }
      if (quasar::gLogLevel >= 5)
      {
        long long v129 = 0u;
        long long v130 = 0u;
        long long v128 = 0u;
        long long v126 = 0u;
        memset(v127, 0, sizeof(v127));
        long long v124 = 0u;
        long long v125 = 0u;
        memset(v123, 0, sizeof(v123));
        long long v122 = 0u;
        long long v120 = 0u;
        memset(v121, 0, sizeof(v121));
        memset(v119, 0, sizeof(v119));
        long long v118 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v118);
        uint64_t v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v118, (uint64_t)"ContinuousListening ITN Output Tokens: ", 39);
        quasar::tokens2Str((uint64_t *)a9, &v138);
        if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          char v51 = &v138;
        }
        else {
          char v51 = (std::string *)v138.__r_.__value_.__r.__words[0];
        }
        if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v52 = HIBYTE(v138.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v52 = v138.__r_.__value_.__l.__size_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)v51, v52);
        if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v138.__r_.__value_.__l.__data_);
        }
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v118);
      }
      goto LABEL_167;
    }
    memset(&v101, 0, sizeof(v101));
    uint64_t v45 = *a7;
    if (!*a7
      || (char v46 = *(std::string **)(v45 + 56),
          uint64_t v47 = *(long long **)(v45 + 64),
          uint64_t v48 = (std::vector<std::wstring> *)(v45 + 56),
          v46 == (std::string *)v47))
    {
      if (a10)
      {
        quasar::defaultFallbackItnLeftContext((std::string **)&v118);
        std::vector<std::string>::__vdeallocate(&v101);
        *(_OWORD *)&v101.__begin_ = v118;
        v101.__end_cap_.__value_ = (std::wstring *)v119[0];
        v119[0] = 0;
        long long v118 = 0uLL;
        v138.__r_.__value_.__r.__words[0] = (std::string::size_type)&v118;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v138);
      }
    }
    else if (&v101 != v48)
    {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v101, v46, v47, 0xAAAAAAAAAAAAAAABLL * (((char *)v47 - (char *)v46) >> 3));
    }
    if (a2->__r_.__value_.__r.__words[0] == a2->__r_.__value_.__l.__size_) {
      goto LABEL_128;
    }
    std::vector<std::wstring>::pointer begin = v101.__begin_;
    std::vector<std::wstring>::pointer end = v101.__end_;
    if (v101.__begin_ == v101.__end_) {
      goto LABEL_128;
    }
    int v54 = 0;
    memset(&v100, 0, sizeof(v100));
    do
    {
      if (SHIBYTE(begin->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v138, (const std::string::value_type *)begin->__r_.__value_.__l.__data_, begin->__r_.__value_.__l.__size_);
      }
      else
      {
        long long v55 = *(_OWORD *)&begin->__r_.__value_.__l.__data_;
        v138.__r_.__value_.__r.__words[2] = begin->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v55;
      }
      std::string::basic_string[abi:ne180100]<0>(&v136, "");
      std::string::basic_string[abi:ne180100]<0>(&v134, "");
      memset(v133, 0, sizeof(v133));
      std::string::basic_string[abi:ne180100]<0>(&v131, "");
      quasar::Token::Token((std::string *)&v118, (long long *)&v138, v54, v54 + 11, v54 + 11, 1, 0, &v136, 0.0, &v134, v133, 0, &v131, 0, 0);
      std::string::size_type v56 = v100.__r_.__value_.__l.__size_;
      if (v100.__r_.__value_.__l.__size_ >= v100.__r_.__value_.__r.__words[2])
      {
        v100.__r_.__value_.__l.__size_ = std::vector<quasar::Token>::__push_back_slow_path<quasar::Token>((uint64_t *)&v100, &v118);
        if (SHIBYTE(v127[0]) < 0) {
          operator delete((void *)v126);
        }
      }
      else
      {
        long long v57 = v118;
        *(void *)(v100.__r_.__value_.__l.__size_ + 16) = v119[0];
        *(_OWORD *)std::string::size_type v56 = v57;
        v119[0] = 0;
        long long v118 = 0uLL;
        uint64_t v58 = *(void *)((char *)&v119[2] + 6);
        *(_OWORD *)(v56 + 24) = *(_OWORD *)&v119[1];
        *(void *)(v56 + 38) = v58;
        uint64_t v59 = v121[0];
        *(_OWORD *)(v56 + 48) = v120;
        *(void *)(v56 + 64) = v59;
        *(void *)(v56 + 72) = 0;
        v121[0] = 0;
        long long v120 = 0uLL;
        *(void *)(v56 + 8std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = 0;
        *(void *)(v56 + 88) = 0;
        *(_OWORD *)(v56 + 72) = *(_OWORD *)&v121[1];
        *(void *)(v56 + 88) = v121[3];
        memset(&v121[1], 0, 24);
        long long v60 = v122;
        *(void *)(v56 + 112) = v123[0];
        *(void *)(v56 + 12std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = 0;
        *(_OWORD *)(v56 + 96) = v60;
        v123[0] = 0;
        long long v122 = 0uLL;
        *(void *)(v56 + 128) = 0;
        *(void *)(v56 + 136) = 0;
        *(_OWORD *)(v56 + 12std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = *(_OWORD *)&v123[1];
        *(void *)(v56 + 136) = v123[3];
        memset(&v123[1], 0, 24);
        long long v61 = v124;
        *(void *)(v56 + 16std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = v125;
        *(_OWORD *)(v56 + 144) = v61;
        *(void *)&long long v125 = 0;
        long long v124 = 0uLL;
        LODWORD(v59) = DWORD2(v125);
        *(_WORD *)(v56 + 172) = WORD6(v125);
        *(_DWORD *)(v56 + 168) = v59;
        long long v62 = v126;
        *(void *)(v56 + 192) = v127[0];
        *(_OWORD *)(v56 + 176) = v62;
        v127[0] = 0;
        long long v126 = 0uLL;
        long long v63 = *(_OWORD *)&v127[1];
        *(_DWORD *)(v56 + 216) = v127[3];
        *(_OWORD *)(v56 + 20std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = v63;
        v100.__r_.__value_.__l.__size_ = v56 + 224;
      }
      if (SBYTE7(v125) < 0) {
        operator delete((void *)v124);
      }
      v139[0] = (void **)&v123[1];
      std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v139);
      if (SHIBYTE(v123[0]) < 0) {
        operator delete((void *)v122);
      }
      v139[0] = (void **)&v121[1];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v139);
      if (SHIBYTE(v121[0]) < 0) {
        operator delete((void *)v120);
      }
      if (SHIBYTE(v119[0]) < 0) {
        operator delete((void *)v118);
      }
      if (v132 < 0) {
        operator delete((void *)v131);
      }
      *(void *)&long long v131 = v133;
      std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v131);
      if (v135 < 0) {
        operator delete((void *)v134);
      }
      if (v137 < 0) {
        operator delete((void *)v136);
      }
      if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v138.__r_.__value_.__l.__data_);
      }
      ++begin;
      v54 += 11;
    }
    while (begin != end);
    if (v100.__r_.__value_.__r.__words[0] == v100.__r_.__value_.__l.__size_) {
      unsigned int v64 = v83;
    }
    else {
      unsigned int v64 = *(_DWORD *)(v100.__r_.__value_.__l.__size_ - 192) + v83;
    }
    quasar::prependLeftContext(a1, &v100, (uint64_t *)&v116, &v112, v64);
    if ((_BYTE)v105)
    {
      uint64_t v65 = *(void *)(a15 + 24);
      if (!v65) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(long long *__return_ptr))(*(void *)v65 + 48))(&v118);
      std::vector<quasar::Token>::__vdeallocate((void **)&a9->__r_.__value_.__l.__data_);
      *(_OWORD *)&a9->__r_.__value_.__l.__data_ = v118;
      a9->__r_.__value_.__r.__words[2] = v119[0];
      v119[0] = 0;
      long long v118 = 0uLL;
      v138.__r_.__value_.__r.__words[0] = (std::string::size_type)&v118;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v138);
      unint64_t v96 = 0;
      unint64_t v97 = 0;
      quasar::getPreItnTokenToPostItnCharAlignment(&v116, a9, &v96, (uint64_t *)&v118);
      if (v41)
      {
        operator delete(v41);
        long long v113 = 0uLL;
        uint64_t v114 = 0;
      }
      char v66 = (void *)v118;
      long long v113 = v118;
      uint64_t v114 = v119[0];
      v119[0] = 0;
      long long v118 = 0uLL;
      long long v67 = v97;
      if (!v97) {
        goto LABEL_118;
      }
    }
    else
    {
      quasar::appendRightContext((uint64_t *)&v116, (const quasar::Token **)a12, (uint64_t *)&v115, &v111);
      std::function<std::vector<quasar::Token> ()(std::vector<quasar::Token> const&)>::operator()(a15);
      std::vector<quasar::Token>::__vdeallocate((void **)&a9->__r_.__value_.__l.__data_);
      *(_OWORD *)&a9->__r_.__value_.__l.__data_ = v118;
      a9->__r_.__value_.__r.__words[2] = v119[0];
      v119[0] = 0;
      long long v118 = 0uLL;
      v138.__r_.__value_.__r.__words[0] = (std::string::size_type)&v118;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v138);
      unint64_t v98 = 0;
      unint64_t v99 = 0;
      quasar::getPreItnTokenToPostItnCharAlignment(&v115, a9, &v98, (uint64_t *)&v118);
      if (v41)
      {
        operator delete(v41);
        long long v113 = 0uLL;
        uint64_t v114 = 0;
      }
      char v66 = (void *)v118;
      long long v113 = v118;
      uint64_t v114 = v119[0];
      v119[0] = 0;
      long long v118 = 0uLL;
      long long v67 = v99;
      if (!v99) {
        goto LABEL_118;
      }
    }
    uint64_t v90 = v66;
    std::__shared_weak_count::__release_shared[abi:ne180100](v67);
    char v66 = v90;
LABEL_118:
    uint64_t v41 = v66;
    std::string::size_type v68 = v100.__r_.__value_.__l.__size_;
    int v69 = quasar::hasInterUtteranceItn((int **)&v113, -1227133513 * ((v100.__r_.__value_.__l.__size_ - v100.__r_.__value_.__r.__words[0]) >> 5), -1227133513 * ((v100.__r_.__value_.__l.__size_ - v100.__r_.__value_.__r.__words[0]) >> 5)- 1227133513 * ((a1->__r_.__value_.__l.__size_ - a1->__r_.__value_.__r.__words[0]) >> 5)- 1, (unsigned char *)&v105 + 1, &v105);
    if ((_BYTE)v105)
    {
      uint64_t v70 = *(void *)(a15 + 24);
      if (!v70) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(long long *__return_ptr))(*(void *)v70 + 48))(&v118);
      std::vector<quasar::Token>::__vdeallocate((void **)&a9->__r_.__value_.__l.__data_);
      *(_OWORD *)&a9->__r_.__value_.__l.__data_ = v118;
      a9->__r_.__value_.__r.__words[2] = v119[0];
      v119[0] = 0;
      long long v118 = 0uLL;
      v138.__r_.__value_.__r.__words[0] = (std::string::size_type)&v118;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v138);
      float v94 = 0;
      long long v95 = 0;
      quasar::getPreItnTokenToPostItnCharAlignment(&v116, a9, &v94, (uint64_t *)&v118);
      if (v41)
      {
        *((void *)&v113 + 1) = v41;
        operator delete(v41);
      }
      uint64_t v71 = (void *)v118;
      long long v113 = v118;
      uint64_t v114 = v119[0];
      v119[0] = 0;
      long long v118 = 0uLL;
      if (v95)
      {
        unsigned int v91 = v71;
        std::__shared_weak_count::__release_shared[abi:ne180100](v95);
        uint64_t v71 = v91;
      }
      std::string::size_type v68 = v100.__r_.__value_.__l.__size_;
      uint64_t v41 = v71;
    }
    if (!v69
      || (quasar::hasInterUtteranceItn((int **)&v113, -1227133513 * ((v68 - v100.__r_.__value_.__r.__words[0]) >> 5), -1227133513 * ((v68 - v100.__r_.__value_.__r.__words[0]) >> 5)- 1227133513 * ((a1->__r_.__value_.__l.__size_ - a1->__r_.__value_.__r.__words[0]) >> 5)- 1, (unsigned char *)&v105 + 1, &v105) & 1) == 0)
    {
      unsigned int v77 = *(_DWORD *)(v68 - 192);
      long long v118 = 0uLL;
      v119[0] = 0;
      quasar::stripLeftAndRightContext(a9, v77, v111, &v118, v64, (uint64_t)&__p);
      v138.__r_.__value_.__r.__words[0] = (std::string::size_type)&v118;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v138);
      if (a11 != a9) {
        std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>((uint64_t)a11, a9->__r_.__value_.__r.__words[0], a9->__r_.__value_.__l.__size_, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a9->__r_.__value_.__l.__size_ - a9->__r_.__value_.__r.__words[0]) >> 5));
      }
      quasar::removeTokenTimestampOffsets((uint64_t *)a9, v64, a6);
      if ((a3 & 1) != 0 || a13)
      {
        uint64_t v78 = *(void *)(a14 + 8);
        v93[0] = *(unsigned char **)a14;
        v93[1] = (unsigned char *)v78;
        if (v78) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v78 + 8), 1uLL, memory_order_relaxed);
        }
        quasar::separatePunctuation(a9, v82, a13, v93);
        if (v78) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v78);
        }
      }
      if (quasar::gLogLevel >= 5)
      {
        long long v129 = 0u;
        long long v130 = 0u;
        long long v128 = 0u;
        long long v126 = 0u;
        memset(v127, 0, sizeof(v127));
        long long v124 = 0u;
        long long v125 = 0u;
        memset(v123, 0, sizeof(v123));
        long long v122 = 0u;
        long long v120 = 0u;
        memset(v121, 0, sizeof(v121));
        memset(v119, 0, sizeof(v119));
        long long v118 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v118);
        char v79 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v118, (uint64_t)"ContinuousListening ITN Output Tokens: ", 39);
        quasar::tokens2Str((uint64_t *)a9, &v138);
        if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v80 = &v138;
        }
        else {
          uint64_t v80 = (std::string *)v138.__r_.__value_.__r.__words[0];
        }
        if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v81 = HIBYTE(v138.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v81 = v138.__r_.__value_.__l.__size_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)v80, v81);
        if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v138.__r_.__value_.__l.__data_);
        }
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v118);
      }
      *(void *)&long long v118 = &v100;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v118);
      goto LABEL_166;
    }
    *(void *)&long long v118 = &v100;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v118);
    uint64_t v30 = (uint64_t *)a11;
LABEL_128:
    uint64_t v72 = *(void *)(a15 + 24);
    if (!v72) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(long long *__return_ptr))(*(void *)v72 + 48))(&v118);
    std::vector<quasar::Token>::__vdeallocate((void **)&a9->__r_.__value_.__l.__data_);
    *(_OWORD *)&a9->__r_.__value_.__l.__data_ = v118;
    a9->__r_.__value_.__r.__words[2] = v119[0];
    v119[0] = 0;
    long long v118 = 0uLL;
    v138.__r_.__value_.__r.__words[0] = (std::string::size_type)&v118;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v138);
    if (v30 != (uint64_t *)a9) {
      std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>((uint64_t)v30, a9->__r_.__value_.__r.__words[0], a9->__r_.__value_.__l.__size_, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a9->__r_.__value_.__l.__size_ - a9->__r_.__value_.__r.__words[0]) >> 5));
    }
    if ((a3 & 1) != 0 || a13)
    {
      uint64_t v73 = *(void *)(a14 + 8);
      v92[0] = *(unsigned char **)a14;
      v92[1] = (unsigned char *)v73;
      if (v73) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v73 + 8), 1uLL, memory_order_relaxed);
      }
      quasar::separatePunctuation(a9, v82, a13, v92);
      if (v73) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v73);
      }
    }
    if (quasar::gLogLevel >= 5)
    {
      long long v129 = 0u;
      long long v130 = 0u;
      long long v128 = 0u;
      long long v126 = 0u;
      memset(v127, 0, sizeof(v127));
      long long v124 = 0u;
      long long v125 = 0u;
      memset(v123, 0, sizeof(v123));
      long long v122 = 0u;
      long long v120 = 0u;
      memset(v121, 0, sizeof(v121));
      memset(v119, 0, sizeof(v119));
      long long v118 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v118);
      float v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v118, (uint64_t)"ContinuousListening ITN Output Tokens: ", 39);
      quasar::tokens2Str((uint64_t *)a9, &v138);
      if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v75 = &v138;
      }
      else {
        uint64_t v75 = (std::string *)v138.__r_.__value_.__r.__words[0];
      }
      if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v76 = HIBYTE(v138.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v76 = v138.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)v75, v76);
      if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v138.__r_.__value_.__l.__data_);
      }
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v118);
    }
LABEL_166:
    *(void *)&long long v118 = &v101;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v118);
LABEL_167:
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
    if (v41)
    {
      *((void *)&v113 + 1) = v41;
      operator delete(v41);
    }
    *(void *)&long long v118 = &v115;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v118);
    *(void *)&long long v118 = &v116;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v118);
    return;
  }
  uint64_t v34 = *(void *)(a15 + 24);
  if (!v34) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(long long *__return_ptr))(*(void *)v34 + 48))(&v118);
  std::vector<quasar::Token>::__vdeallocate((void **)&a11->__r_.__value_.__l.__data_);
  *(_OWORD *)&a11->__r_.__value_.__l.__data_ = v118;
  a11->__r_.__value_.__r.__words[2] = v119[0];
  v119[0] = 0;
  long long v118 = 0uLL;
  *(void *)&long long __p = &v118;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  quasar::removeTokenTimestampOffsets((uint64_t *)a11, 0, a6);
  if (a13)
  {
    uint64_t v35 = *(void *)(a14 + 8);
    v117[0] = *(unsigned char **)a14;
    v117[1] = (unsigned char *)v35;
    if (v35) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v35 + 8), 1uLL, memory_order_relaxed);
    }
    quasar::separatePunctuation(a11, a4, 1, v117);
    if (v35) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v35);
    }
  }
  if (quasar::gLogLevel >= 5)
  {
    long long v129 = 0u;
    long long v130 = 0u;
    long long v128 = 0u;
    long long v126 = 0u;
    memset(v127, 0, sizeof(v127));
    long long v124 = 0u;
    long long v125 = 0u;
    memset(v123, 0, sizeof(v123));
    long long v122 = 0u;
    long long v120 = 0u;
    memset(v121, 0, sizeof(v121));
    memset(v119, 0, sizeof(v119));
    long long v118 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v118);
    long long v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v118, (uint64_t)"ContinuousListening ITN Output Tokens: ", 39);
    quasar::tokens2Str((uint64_t *)a11, (std::string *)&__p);
    if ((SBYTE7(v109) & 0x80u) == 0) {
      unint64_t v37 = &__p;
    }
    else {
      unint64_t v37 = (long long *)__p;
    }
    if ((SBYTE7(v109) & 0x80u) == 0) {
      uint64_t v38 = BYTE7(v109);
    }
    else {
      uint64_t v38 = *((void *)&__p + 1);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)v37, v38);
    uint64_t v30 = (uint64_t *)a11;
    if (SBYTE7(v109) < 0) {
      operator delete((void *)__p);
    }
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v118);
  }
  a9->__r_.__value_.__r.__words[0] = 0;
  a9->__r_.__value_.__l.__size_ = 0;
  a9->__r_.__value_.__r.__words[2] = 0;
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(a9, *v30, v30[1], 0x6DB6DB6DB6DB6DB7 * ((v30[1] - *v30) >> 5));
}

void sub_1B21594A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (*(char *)(v71 - 105) < 0) {
    operator delete(*(void **)(v71 - 128));
  }
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&STACK[0x210]);
  STACK[0x210] = (unint64_t)&a44;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x210]);
  STACK[0x210] = (unint64_t)&a47;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x210]);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a57);
  if (v70)
  {
    a64 = (uint64_t)v70;
    operator delete(v70);
  }
  STACK[0x210] = (unint64_t)&a67;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x210]);
  STACK[0x210] = (unint64_t)&a70;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x210]);
  STACK[0x210] = a18;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x210]);
  _Unwind_Resume(a1);
}

uint64_t std::function<std::vector<quasar::Token> ()(std::vector<quasar::Token> const&)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);
  return v2();
}

uint64_t *quasar::removeTokenTimestampOffsets(uint64_t *result, unsigned int a2, int a3)
{
  if (a2 || a3)
  {
    uint64_t v3 = *result;
    uint64_t v4 = result[1];
    if (*result != v4 && *(_DWORD *)(v3 + 28) >= a2)
    {
      int32x2_t v5 = vdup_n_s32(a2);
      do
      {
        if (a3)
        {
          *(void *)(v3 + 32) = 0;
          *(_DWORD *)(v3 + 28) = 0;
        }
        else
        {
          *(int32x2_t *)(v3 + 28) = vsub_s32(*(int32x2_t *)(v3 + 28), v5);
          *(_DWORD *)(v3 + 36) -= a2;
        }
        v3 += 224;
      }
      while (v3 != v4);
    }
  }
  return result;
}

void quasar::separatePunctuation(std::string *a1, std::string *a2, int a3, unsigned char **a4)
{
  uint64_t v9 = (std::string *)a2->__r_.__value_.__r.__words[0];
  for (std::string::size_type i = (std::string *)a2->__r_.__value_.__l.__size_;
        i != v9;
  a2->__r_.__value_.__l.__size_ = (std::string::size_type)v9;
  uint64_t v10 = *a4;
  if (*a4) {
    *uint64_t v10 = 0;
  }
  std::string::size_type v12 = a1->__r_.__value_.__r.__words[0];
  std::string::size_type size = (long long *)a1->__r_.__value_.__l.__size_;
  if ((long long *)a1->__r_.__value_.__l.__data_ != size)
  {
    for (unsigned int j = -1227133513 * (((unint64_t)size - v12) >> 5) - 1; (j & 0x80000000) == 0; --j)
    {
      unsigned int v14 = j;
      std::string::size_type v15 = v12 + 224 * j;
      if (*(char *)(v15 + 23) < 0) {
        uint64_t v16 = *(void *)(v15 + 8);
      }
      else {
        uint64_t v16 = *(unsigned __int8 *)(v15 + 23);
      }
      if (v16)
      {
        unsigned int v17 = v14;
        if (*(unsigned char *)(v12 + 224 * v14 + 172))
        {
          if (a3)
          {
            if (v10) {
              *uint64_t v10 = 1;
            }
          }
          else
          {
            if ((unint64_t)v9 >= a2->__r_.__value_.__r.__words[2])
            {
              p_std::string::size_type size = std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>((uint64_t *)a2, (const quasar::Token *)v15);
            }
            else
            {
              quasar::Token::Token(v9, (const quasar::Token *)v15);
              p_std::string::size_type size = (uint64_t)&v9[9].__r_.__value_.__l.__size_;
              a2->__r_.__value_.__l.__size_ = (std::string::size_type)&v9[9].__r_.__value_.__l.__size_;
            }
            a2->__r_.__value_.__l.__size_ = p_size;
            std::string::size_type v12 = a1->__r_.__value_.__r.__words[0];
            std::string::size_type size = (long long *)a1->__r_.__value_.__l.__size_;
          }
          std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,quasar::Token *,quasar::Token *,quasar::Token *,0>((long long *)(v12 + 224 * v17 + 224), size, v12 + 224 * v17);
          std::string::size_type v20 = v19;
          std::string::size_type v21 = a1->__r_.__value_.__l.__size_;
          if (v21 != v19)
          {
            do
              quasar::Token::~Token((void **)(v21 - 224));
            while (v21 != v20);
          }
          a1->__r_.__value_.__l.__size_ = v20;
          if (quasar::gLogLevel >= 6)
          {
            memset(v34, 0, sizeof(v34));
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v34);
            std::string::size_type v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"Separate post-ITN output: ", 26);
            quasar::formatResultTokensSimple(a1, 0);
            if ((v33 & 0x80u) == 0) {
              unsigned int v23 = v32;
            }
            else {
              unsigned int v23 = (void **)v32[0];
            }
            if ((v33 & 0x80u) == 0) {
              uint64_t v24 = v33;
            }
            else {
              uint64_t v24 = (uint64_t)v32[1];
            }
            uint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v23, v24);
            int v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"; ", 2);
            uint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"Separate post-ITN punctuation: ", 31);
            quasar::formatResultTokensSimple(a2, 0);
            if ((v31 & 0x80u) == 0) {
              char v28 = __p;
            }
            else {
              char v28 = (void **)__p[0];
            }
            if ((v31 & 0x80u) == 0) {
              uint64_t v29 = v31;
            }
            else {
              uint64_t v29 = (uint64_t)__p[1];
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v28, v29);
            if ((char)v31 < 0) {
              operator delete(__p[0]);
            }
            if ((char)v33 < 0) {
              operator delete(v32[0]);
            }
            quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v34);
          }
        }
        return;
      }
    }
  }
}

void sub_1B2159AC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  *(void *)(v21 + 8) = v22;
  _Unwind_Resume(exception_object);
}

void quasar::prependLeftContext(std::string *a1, std::string *a2, uint64_t *a3, _DWORD *a4, unsigned int a5)
{
  uint64_t v11 = *a3;
  for (uint64_t i = a3[1]; i != v11; quasar::Token::~Token((void **)(i - 224)))
    ;
  a3[1] = v11;
  std::vector<quasar::Token>::reserve(a3, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a1->__r_.__value_.__l.__size_ - a1->__r_.__value_.__r.__words[0]) >> 5)+ 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a2->__r_.__value_.__l.__size_ - a2->__r_.__value_.__r.__words[0]) >> 5));
  uint64_t v12 = a2->__r_.__value_.__r.__words[0];
  uint64_t size = a2->__r_.__value_.__l.__size_;
  if (a2->__r_.__value_.__r.__words[0] == size)
  {
    unsigned int v14 = (const quasar::Token *)a1->__r_.__value_.__r.__words[0];
    std::string::size_type v15 = (const quasar::Token *)a1->__r_.__value_.__l.__size_;
  }
  else
  {
    if (a3 != (uint64_t *)a2)
    {
      std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>((uint64_t)a3, v12, size, 0x6DB6DB6DB6DB6DB7 * ((size - v12) >> 5));
      uint64_t v12 = a2->__r_.__value_.__r.__words[0];
      uint64_t size = a2->__r_.__value_.__l.__size_;
    }
    *(unsigned char *)(a3[1] - 18std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = 1;
    *a4 = *(_DWORD *)(size - 192);
    unsigned int v14 = (const quasar::Token *)a1->__r_.__value_.__r.__words[0];
    std::string::size_type v15 = (const quasar::Token *)a1->__r_.__value_.__l.__size_;
    if (v12 != size && v14 != v15)
    {
      int v16 = *((_DWORD *)v14 + 7);
      unsigned int v17 = v16 + a5;
      unsigned int v18 = *(_DWORD *)(size - 192);
      unsigned int v19 = v18 - v16;
      if (v18 > v17) {
        a5 = v19;
      }
    }
  }
  std::string::size_type v20 = (std::string *)a3[1];
  if (v14 != v15)
  {
    int32x2_t v21 = vdup_n_s32(a5);
    do
    {
      if ((unint64_t)v20 >= a3[2])
      {
        std::string::size_type v20 = (std::string *)std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>(a3, v14);
      }
      else
      {
        quasar::Token::Token(v20, v14);
        std::string::size_type v20 = (std::string *)((char *)v20 + 224);
        a3[1] = (uint64_t)v20;
      }
      a3[1] = (uint64_t)v20;
      *(int32x2_t *)((char *)&v20[-9].__r_.__value_.__r.__words[2] + 4) = vadd_s32(*(int32x2_t *)((char *)&v20[-9].__r_.__value_.__r.__words[2]+ 4), v21);
      HIDWORD(v20[-8].__r_.__value_.__r.__words[0]) += a5;
      unsigned int v14 = (const quasar::Token *)((char *)v14 + 224);
    }
    while (v14 != v15);
  }
  if ((std::string *)*a3 != v20) {
    v20[-8].__r_.__value_.__s.__data_[12] = 1;
  }
  if (quasar::gLogLevel >= 6)
  {
    memset(v34, 0, sizeof(v34));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v34);
    uint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"preITN leftContext: ", 20);
    quasar::formatResultTokensSimple(a2, 0);
    if ((v33 & 0x80u) == 0) {
      unsigned int v23 = v32;
    }
    else {
      unsigned int v23 = (void **)v32[0];
    }
    if ((v33 & 0x80u) == 0) {
      uint64_t v24 = v33;
    }
    else {
      uint64_t v24 = (uint64_t)v32[1];
    }
    uint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v23, v24);
    int v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"; ", 2);
    uint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"preITN currentContext: ", 23);
    quasar::formatResultTokensSimple(a1, 0);
    if ((v31 & 0x80u) == 0) {
      char v28 = __p;
    }
    else {
      char v28 = (void **)__p[0];
    }
    if ((v31 & 0x80u) == 0) {
      uint64_t v29 = v31;
    }
    else {
      uint64_t v29 = (uint64_t)__p[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v28, v29);
    if ((char)v31 < 0) {
      operator delete(__p[0]);
    }
    if ((char)v33 < 0) {
      operator delete(v32[0]);
    }
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v34);
  }
}

void sub_1B2159DD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&a21);
  _Unwind_Resume(a1);
}

void quasar::appendRightContext(uint64_t *a1, const quasar::Token **a2, uint64_t *a3, _DWORD *a4)
{
  uint64_t v9 = *a3;
  for (uint64_t i = a3[1]; i != v9; quasar::Token::~Token((void **)(i - 224)))
    ;
  a3[1] = v9;
  std::vector<quasar::Token>::reserve(a3, 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5) + 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5));
  if (a3 != a1) {
    std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>((uint64_t)a3, *a1, a1[1], 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5));
  }
  uint64_t v10 = *a2;
  uint64_t v11 = a2[1];
  if (v10 != v11)
  {
    *a4 = *((_DWORD *)v10 + 7);
    uint64_t v12 = a1[1];
    if (*a1 == v12)
    {
      unsigned int v17 = 0;
    }
    else
    {
      unsigned int v13 = *(_DWORD *)(v12 - 192);
      unsigned int v14 = *((_DWORD *)v10 + 7);
      BOOL v15 = v13 >= v14;
      unsigned int v16 = v13 - v14;
      if (v15) {
        unsigned int v17 = v16 + 1;
      }
      else {
        unsigned int v17 = 0;
      }
    }
    unsigned int v18 = (std::string *)a3[1];
    int32x2_t v19 = vdup_n_s32(v17);
    do
    {
      if ((unint64_t)v18 >= a3[2])
      {
        unsigned int v18 = (std::string *)std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>(a3, v10);
      }
      else
      {
        quasar::Token::Token(v18, v10);
        unsigned int v18 = (std::string *)((char *)v18 + 224);
        a3[1] = (uint64_t)v18;
      }
      a3[1] = (uint64_t)v18;
      *(int32x2_t *)((char *)&v18[-9].__r_.__value_.__r.__words[2] + 4) = vadd_s32(*(int32x2_t *)((char *)&v18[-9].__r_.__value_.__r.__words[2]+ 4), v19);
      HIDWORD(v18[-8].__r_.__value_.__r.__words[0]) += v17;
      uint64_t v10 = (const quasar::Token *)((char *)v10 + 224);
    }
    while (v10 != v11);
    *a4 += v17;
  }
}

void sub_1B2159F90(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t quasar::hasInterUtteranceItn(int **a1, int a2, int a3, unsigned char *a4, unsigned char *a5)
{
  *a4 = 0;
  *a5 = 0;
  int32x2_t v5 = *a1;
  int v6 = a1[1];
  if (*a1 != v6)
  {
    long long v7 = *a1;
    do
    {
      int v8 = *v7;
      if (*v7 < a2 && v7[1] >= a2)
      {
        *a4 = 1;
        goto LABEL_13;
      }
      v7 += 4;
    }
    while (v8 < a2 && v7 != v6);
  }
  do
  {
LABEL_13:
    if (v6 == v5) {
      break;
    }
    int v11 = *(v6 - 3);
    if (*(v6 - 4) <= a3 && v11 > a3)
    {
      BOOL v13 = 1;
      *a5 = 1;
      return *a4 || v13;
    }
    v6 -= 4;
  }
  while (v11 > a3);
  BOOL v13 = *a5 != 0;
  return *a4 || v13;
}

void quasar::stripLeftAndRightContext(std::string *a1, unsigned int a2, unsigned int a3, void *a4, unsigned int a5, uint64_t a6)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  if (a2 || a3 != 0x7FFFFFFF)
  {
    memset(&v64, 0, sizeof(v64));
    std::string::basic_string[abi:ne180100]<0>(v51, "");
    std::string::basic_string[abi:ne180100]<0>(v34, "");
    std::string::basic_string[abi:ne180100]<0>(v47, "");
    v65[1] = 0;
    v65[0] = 0;
    *(void *)&long long v66 = 0;
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    quasar::Token::Token(&v53, (long long *)v51, 0, 0, 0, 0, 0, (long long *)v34, 0.0, (long long *)v47, (long long **)v65, 0, (long long *)__p, 0, 0);
    if (v50 < 0) {
      operator delete(__p[0]);
    }
    __p[0] = v65;
    std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    if ((char)v48 < 0) {
      operator delete(v47[0]);
    }
    if (SHIBYTE(v34[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v34[0].__r_.__value_.__l.__data_);
    }
    if (v52 < 0) {
      operator delete(v51[0]);
    }
    uint64_t v10 = (const quasar::Token *)a1->__r_.__value_.__r.__words[0];
    uint64_t size = (const quasar::Token *)a1->__r_.__value_.__l.__size_;
    if ((const quasar::Token *)a1->__r_.__value_.__l.__data_ != size)
    {
      char v12 = 0;
      uint32x2_t v13 = (uint32x2_t)vdup_n_s32(a5);
      do
      {
        quasar::Token::Token(v34, v10);
        if (HIDWORD(v34[1].__r_.__value_.__r.__words[0]) >= a3 && BYTE12(v40) == 0)
        {
          int v15 = 2;
          char v12 = 1;
        }
        else if (HIDWORD(v34[1].__r_.__value_.__r.__words[0]) >= a2)
        {
          BOOL v16 = LODWORD(v34[1].__r_.__value_.__r.__words[1]) != a2 || BYTE12(v40) == 0;
          if (v16 || (uint64_t v17 = a4[1], *a4 != v17) && *(unsigned char *)(v17 - 52))
          {
            if (v64.__r_.__value_.__r.__words[0] == v64.__r_.__value_.__l.__size_ && *(void *)(a6 + 24)) {
              operator new();
            }
            std::string::size_type v18 = (std::string::size_type)vmax_u32(*(uint32x2_t *)((char *)v34[1].__r_.__value_.__r.__words + 4), v13);
            unsigned int v19 = HIDWORD(v34[1].__r_.__value_.__r.__words[1]);
            if (HIDWORD(v34[1].__r_.__value_.__r.__words[1]) <= a5) {
              unsigned int v19 = a5;
            }
            HIDWORD(v34[1].__r_.__value_.__r.__words[1]) = v19;
            *(std::string::size_type *)((char *)v34[1].__r_.__value_.__r.__words + 4) = v18;
            if (quasar::Token::isAutoPunctuation((quasar::Token *)v34))
            {
              HIDWORD(v34[1].__r_.__value_.__r.__words[0]) = v34[1].__r_.__value_.__r.__words[1];
              HIDWORD(v34[1].__r_.__value_.__r.__words[1]) = v34[1].__r_.__value_.__r.__words[1];
            }
            std::string::size_type v20 = v64.__r_.__value_.__l.__size_;
            if (v64.__r_.__value_.__l.__size_ >= v64.__r_.__value_.__r.__words[2])
            {
              std::string::size_type v21 = std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>((uint64_t *)&v64, (const quasar::Token *)v34);
            }
            else
            {
              quasar::Token::Token((std::string *)v64.__r_.__value_.__l.__size_, (const quasar::Token *)v34);
              std::string::size_type v21 = v20 + 224;
            }
            int v15 = 0;
            v64.__r_.__value_.__l.__size_ = v21;
          }
          else
          {
            int v15 = 3;
          }
        }
        else
        {
          int v15 = 0;
        }
        if (SBYTE7(v42) < 0) {
          operator delete(v41[0]);
        }
        if (SBYTE7(v40) < 0) {
          operator delete(v39[0]);
        }
        v47[0] = (char *)v38 + 8;
        std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v47);
        if (SBYTE7(v38[0]) < 0) {
          operator delete(v37[0]);
        }
        v47[0] = (char *)v36 + 8;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v47);
        if (SBYTE7(v36[0]) < 0) {
          operator delete(v35[0]);
        }
        if (SHIBYTE(v34[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v34[0].__r_.__value_.__l.__data_);
        }
        if (v15 != 3 && v15) {
          break;
        }
        uint64_t v10 = (const quasar::Token *)((char *)v10 + 224);
      }
      while (v10 != size);
      if ((v12 & 1) != 0 && v64.__r_.__value_.__r.__words[0] != v64.__r_.__value_.__l.__size_) {
        *(unsigned char *)(v64.__r_.__value_.__l.__size_ - 18std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = 0;
      }
    }
    if (quasar::gLogLevel >= 6)
    {
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      *(_OWORD *)uint64_t v41 = 0u;
      long long v42 = 0u;
      *(_OWORD *)int v39 = 0u;
      long long v40 = 0u;
      memset(v38, 0, sizeof(v38));
      *(_OWORD *)unint64_t v37 = 0u;
      *(_OWORD *)uint64_t v35 = 0u;
      memset(v36, 0, sizeof(v36));
      memset(v34, 0, sizeof(v34));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v34);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"strip before milliseconds: ", 27);
      uint64_t v22 = (void *)std::ostream::operator<<();
      unsigned int v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"; ", 2);
      uint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"prependedOutputs: ", 18);
      quasar::formatResultTokensSimple(a1, 0);
      if ((v48 & 0x80u) == 0) {
        uint64_t v25 = v47;
      }
      else {
        uint64_t v25 = (void **)v47[0];
      }
      if ((v48 & 0x80u) == 0) {
        uint64_t v26 = v48;
      }
      else {
        uint64_t v26 = (uint64_t)v47[1];
      }
      uint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v25, v26);
      char v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"; ", 2);
      uint64_t v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"output: ", 8);
      quasar::formatResultTokensSimple(&v64, 0);
      if ((SBYTE7(v66) & 0x80u) == 0) {
        uint64_t v30 = v65;
      }
      else {
        uint64_t v30 = (void **)v65[0];
      }
      if ((SBYTE7(v66) & 0x80u) == 0) {
        uint64_t v31 = BYTE7(v66);
      }
      else {
        uint64_t v31 = (uint64_t)v65[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)v30, v31);
      if (SBYTE7(v66) < 0) {
        operator delete(v65[0]);
      }
      if ((char)v48 < 0) {
        operator delete(v47[0]);
      }
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v34);
    }
    if (&v64 != a1) {
      std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>((uint64_t)a1, (uint64_t)v64.__r_.__value_.__l.__data_, v64.__r_.__value_.__l.__size_, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v64.__r_.__value_.__l.__size_ - v64.__r_.__value_.__r.__words[0]) >> 5));
    }
    if (v63 < 0) {
      operator delete(v62);
    }
    if (v61 < 0) {
      operator delete(v60);
    }
    v34[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v59;
    std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v34);
    if (v58 < 0) {
      operator delete(v57);
    }
    v34[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v56;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v34);
    if (v55 < 0) {
      operator delete(v54);
    }
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v53.__r_.__value_.__l.__data_);
    }
    v34[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v64;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v34);
  }
}

void sub_1B215A964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  quasar::Token::~Token((void **)&STACK[0x230]);
  if (a69 < 0) {
    operator delete(__p);
  }
  long long __p = &a70;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (a73 < 0) {
    operator delete(a72);
  }
  if (SLOBYTE(STACK[0x217]) < 0) {
    operator delete((void *)STACK[0x200]);
  }
  if (SLOBYTE(STACK[0x22F]) < 0) {
    operator delete((void *)STACK[0x218]);
  }
  if (SLOBYTE(STACK[0x327]) < 0) {
    operator delete((void *)STACK[0x310]);
  }
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert((uint64_t)&STACK[0x440]);
  quasar::Token::~Token(&a29);
  quasar::Token::~Token((void **)&STACK[0x340]);
  a29 = &STACK[0x420];
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  _Unwind_Resume(a1);
}

quasar::ContinuousListeningConfig *quasar::ContinuousListeningConfig::ContinuousListeningConfig(quasar::ContinuousListeningConfig *this)
{
  void v40[3] = *MEMORY[0x1E4F143B8];
  *(void *)this = 0x640000001ELL;
  *((_DWORD *)this + 2) = 0;
  *((unsigned char *)this + 12) = 0;
  std::string::basic_string[abi:ne180100]<0>(v4, "zero");
  std::string::basic_string[abi:ne180100]<0>(v5, "One");
  std::string::basic_string[abi:ne180100]<0>(v6, "one\\number");
  std::string::basic_string[abi:ne180100]<0>(v7, "one\\pronoun");
  std::string::basic_string[abi:ne180100]<0>(v8, "two");
  std::string::basic_string[abi:ne180100]<0>(v9, "three");
  std::string::basic_string[abi:ne180100]<0>(v10, "four");
  std::string::basic_string[abi:ne180100]<0>(v11, "five");
  std::string::basic_string[abi:ne180100]<0>(v12, "six");
  std::string::basic_string[abi:ne180100]<0>(v13, "seven");
  std::string::basic_string[abi:ne180100]<0>(v14, "eight");
  std::string::basic_string[abi:ne180100]<0>(v15, "nine");
  std::string::basic_string[abi:ne180100]<0>(v16, "ten");
  std::string::basic_string[abi:ne180100]<0>(v17, "eleven");
  std::string::basic_string[abi:ne180100]<0>(v18, "twelve");
  std::string::basic_string[abi:ne180100]<0>(v19, "thirteen");
  std::string::basic_string[abi:ne180100]<0>(v20, "fourteen");
  std::string::basic_string[abi:ne180100]<0>(v21, "fifteen");
  std::string::basic_string[abi:ne180100]<0>(v22, "sixteen");
  std::string::basic_string[abi:ne180100]<0>(v23, "seventeen");
  std::string::basic_string[abi:ne180100]<0>(v24, "eighteen");
  std::string::basic_string[abi:ne180100]<0>(v25, "nineteen");
  std::string::basic_string[abi:ne180100]<0>(v26, "twenty");
  std::string::basic_string[abi:ne180100]<0>(v27, "thirty");
  std::string::basic_string[abi:ne180100]<0>(v28, "forty");
  std::string::basic_string[abi:ne180100]<0>(v29, "fifty");
  std::string::basic_string[abi:ne180100]<0>(v30, "sixty");
  std::string::basic_string[abi:ne180100]<0>(v31, "seventy");
  std::string::basic_string[abi:ne180100]<0>(v32, "eighty");
  std::string::basic_string[abi:ne180100]<0>(v33, "ninety");
  std::string::basic_string[abi:ne180100]<0>(v34, "hundred");
  std::string::basic_string[abi:ne180100]<0>(v35, "thousand");
  std::string::basic_string[abi:ne180100]<0>(v36, "million");
  std::string::basic_string[abi:ne180100]<0>(v37, "billion");
  std::string::basic_string[abi:ne180100]<0>(v38, "trillion");
  std::string::basic_string[abi:ne180100]<0>(v39, "¿\\inverted-question-mark");
  std::string::basic_string[abi:ne180100]<0>(v40, "¡\\inverted-exclamation-mark");
  std::unordered_set<std::string>::unordered_set((uint64_t)this + 16, (unsigned __int8 *)v4, 37);
  uint64_t v2 = 111;
  do
  {
    if (SHIBYTE(v4[v2 - 1]) < 0) {
      operator delete((void *)v4[v2 - 3]);
    }
    v2 -= 3;
  }
  while (v2 * 8);
  quasar::defaultFallbackItnLeftContext((std::string **)this + 7);
  quasar::defaultLeadingSpaceTokens((uint64_t)this + 80);
  return this;
}

void sub_1B215AF24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v9);
  _Unwind_Resume(a1);
}

void quasar::ContinuousListeningConfig::init(uint64_t a1, uint64_t a2)
{
  quasar::SystemConfig::SystemConfig((quasar::SystemConfig *)v8);
  memset(v7, 0, sizeof(v7));
  *(_OWORD *)long long __p = 0u;
  long long v5 = 0u;
  int v6 = 1065353216;
  quasar::SystemConfig::readJsonFile((uint64_t)v8, a2, v7, (uint64_t)__p, 0, 0);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)__p);
  __p[0] = v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "continuous-listening.");
  quasar::ContinuousListeningConfig::registerParams(a1, (quasar::SystemConfig *)v8, (const void **)__p);
  if (SBYTE7(v5) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "continuous-listening");
  quasar::SystemConfig::readPtree((uint64_t)v8, (uint64_t)__p);
}

void sub_1B215B098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)&a21);
  _Unwind_Resume(a1);
}

void quasar::ContinuousListeningConfig::registerParams(uint64_t a1, quasar::SystemConfig *this, const void **a3)
{
  quasar::SystemConfig::getPrefix(this, &v9);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v9.__r_.__value_.__l.__data_, a3, (uint64_t)&__p);
  quasar::SystemConfig::setPrefix((std::string *)this, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "delay-finalization-tokens");
  std::string::basic_string[abi:ne180100]<0>(v6, "Interesting tokens that will delay the finalization");
  quasar::SystemConfig::Register<std::unordered_set<std::string>>((uint64_t)this, (const void **)&__p.__r_.__value_.__l.__data_, a1 + 16, (uint64_t)v6, 0, 215, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "fallback-itn-left-context");
  std::string::basic_string[abi:ne180100]<0>(v6, "The fallback left context for across-utterances ITN");
  quasar::SystemConfig::Register<std::vector<std::string>>((uint64_t)this, (const void **)&__p.__r_.__value_.__l.__data_, a1 + 56, (uint64_t)v6, 0, 215, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "itn-left-context-max-length");
  std::string::basic_string[abi:ne180100]<0>(v6, "The maximum token number of left context");
  quasar::SystemConfig::Register<int>((uint64_t)this, (const void **)&__p.__r_.__value_.__l.__data_, a1, (uint64_t)v6, 0, 215, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "delay-finalization-max-length");
  std::string::basic_string[abi:ne180100]<0>(v6, "The maximum token number for the delayed finalization buffer");
  quasar::SystemConfig::Register<int>((uint64_t)this, (const void **)&__p.__r_.__value_.__l.__data_, a1 + 4, (uint64_t)v6, 0, 215, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "delay-finalization-length");
  std::string::basic_string[abi:ne180100]<0>(v6, "Finalization would be delayed if token number is no larger than this length");
  quasar::SystemConfig::Register<int>((uint64_t)this, (const void **)&__p.__r_.__value_.__l.__data_, a1 + 8, (uint64_t)v6, 0, 217, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "left-context");
  std::string::basic_string[abi:ne180100]<0>(v6, "Using previous utterance as left context");
  quasar::SystemConfig::Register<BOOL>((uint64_t)this, (const void **)&__p.__r_.__value_.__l.__data_, a1 + 12, (uint64_t)v6, 0, 227, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "leading-inter-utterance-space-tokens");
  std::string::basic_string[abi:ne180100]<0>(v6, "Tokens may add leading inter-utterance space based on itn left context");
  quasar::SystemConfig::Register<std::unordered_set<std::string>>((uint64_t)this, (const void **)&__p.__r_.__value_.__l.__data_, a1 + 80, (uint64_t)v6, 0, 227, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  quasar::SystemConfig::setPrefix((std::string *)this, &v9);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
}

void sub_1B215B468(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::ItnLeftContext::update(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(uint64_t **)a2;
  if (*(void *)a2 != *(void *)(a2 + 8))
  {
    uint64_t v49 = 0;
    char v50 = 0;
    uint64_t v51 = 0;
    std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(&v49, *v4, v4[1], 0x6DB6DB6DB6DB6DB7 * ((v4[1] - *v4) >> 5));
    std::string::basic_string[abi:ne180100]<0>(v52, "\\caps-on");
    std::string::basic_string[abi:ne180100]<0>(v52[1].__r_.__value_.__r.__words, "\\no-caps-on");
    std::string::basic_string[abi:ne180100]<0>(&v53, "\\no-space-on");
    std::string::basic_string[abi:ne180100]<0>((void *)&v54 + 1, "\\all-caps-on");
    std::unordered_set<std::string>::unordered_set((uint64_t)v48, (unsigned __int8 *)v52, 4);
    for (uint64_t i = 0; i != -96; i -= 24)
    {
      if (*((char *)&v55 + i + 15) < 0) {
        operator delete(*(void **)((char *)&v54 + i + 8));
      }
    }
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v52, "\\caps-off", "\\caps-on");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(&v53, "\\no-caps-off", "\\no-caps-on");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v56, "\\no-space-off", "\\no-space-on");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v57, "\\all-caps-off", "\\all-caps-on");
    std::unordered_map<std::string,std::string>::unordered_map((uint64_t)v47, (unsigned __int8 *)v52, 4);
    for (unint64_t j = 0; j != -192; j -= 48)
    {
      std::string v9 = &v52[j / 0x18];
      if (SHIBYTE(v57[j / 0x10 + 2]) < 0) {
        operator delete(v9[7].__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v9[6].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v9[6].__r_.__value_.__l.__data_);
      }
    }
    unint64_t v44 = 0;
    long long v45 = 0;
    unint64_t v46 = 0;
    int v10 = -1227133513 * ((unint64_t)(v50 - v49) >> 5);
    if (v10 - 1 >= 0)
    {
      uint64_t v11 = 224 * (v10 - 1);
      do
      {
        if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)((uint64_t)v45 - v44) >> 5) >= (unint64_t)*a1) {
          break;
        }
        char v12 = &v49[v11];
        if ((char)v49[v11 + 23] < 0)
        {
          std::string::__init_copy_ctor_external(v52, *(const std::string::value_type **)v12, *((void *)v12 + 1));
        }
        else
        {
          long long v13 = *(_OWORD *)v12;
          v52[0].__r_.__value_.__r.__words[2] = *((void *)v12 + 2);
          *(_OWORD *)&v52[0].__r_.__value_.__l.__data_ = v13;
        }
        std::string::size_type size = HIBYTE(v52[0].__r_.__value_.__r.__words[2]);
        if ((v52[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = v52[0].__r_.__value_.__l.__size_;
        }
        if (size
          && !std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v48, (unsigned __int8 *)v52)&& !std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v47, (unsigned __int8 *)v52))
        {
          int v15 = (const quasar::Token *)&v49[v11];
          BOOL v16 = v45;
          if ((unint64_t)v45 >= v46)
          {
            uint64_t v17 = (std::string *)std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>((uint64_t *)&v44, v15);
          }
          else
          {
            quasar::Token::Token(v45, v15);
            uint64_t v17 = (std::string *)((char *)v16 + 224);
          }
          long long v45 = v17;
        }
        if (SHIBYTE(v52[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v52[0].__r_.__value_.__l.__data_);
        }
        --v10;
        v11 -= 224;
      }
      while (v10 > 0);
    }
    unsigned int v19 = (const quasar::Token *)*((void *)a1 + 2);
    std::string::size_type v18 = (std::string *)(a1 + 2);
    if (v19 == *((const quasar::Token **)a1 + 1))
    {
      std::string::size_type v20 = v45;
    }
    else
    {
      std::string::size_type v20 = v45;
      do
      {
        if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)((uint64_t)v20 - v44) >> 5) >= (unint64_t)*a1) {
          break;
        }
        unsigned int v19 = (const quasar::Token *)((char *)v19 - 224);
        if ((unint64_t)v20 >= v46)
        {
          std::string::size_type v20 = (std::string *)std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>((uint64_t *)&v44, v19);
        }
        else
        {
          quasar::Token::Token(v20, v19);
          std::string::size_type v20 = (std::string *)((char *)v20 + 224);
        }
        long long v45 = v20;
      }
      while (v19 != (const quasar::Token *)v18->__r_.__value_.__l.__data_);
    }
    unint64_t v21 = v44;
    uint64_t v22 = (long long *)&v20[-10].__r_.__value_.__r.__words[2];
    if ((std::string *)v44 != v20 && (unint64_t)v22 > v44)
    {
      do
      {
        std::swap[abi:ne180100]<quasar::Token>(v21, v22);
        v21 += 224;
        v22 -= 14;
      }
      while (v21 < (unint64_t)v22);
    }
    if (v18 != (std::string *)&v44) {
      std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>((uint64_t)(a1 + 2), v44, (uint64_t)v45, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)((uint64_t)v45 - v44) >> 5));
    }
    long long v41 = 0u;
    long long v42 = 0u;
    int v43 = 1065353216;
    uint64_t v24 = v49;
    for (k = v50; v24 != k; v24 += 224)
    {
      if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v48, v24))
      {
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v41, v24, (uint64_t)v24);
      }
      else if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v47, v24))
      {
        v39[0] = v24;
        uint64_t v26 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v47, v24, (uint64_t)&std::piecewise_construct, (long long **)v39);
        std::__hash_table<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>>>::__erase_unique<std::string>(&v41, v26 + 40);
      }
    }
    uint64_t v27 = (uint64_t)(a1 + 14);
    if (a1 + 14 != (int *)&v41)
    {
      a1[22] = v43;
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>((void *)a1 + 7, (uint64_t *)v42, 0);
    }
    char v28 = *(uint64_t **)a4;
    if (*(void *)a4 != *(void *)(a4 + 8) && a1 + 8 != (int *)v28) {
      std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>((uint64_t)(a1 + 8), *v28, v28[1], 0x6DB6DB6DB6DB6DB7 * ((v28[1] - *v28) >> 5));
    }
    if (quasar::gLogLevel >= 6)
    {
      memset(v57, 0, sizeof(v57));
      long long v55 = 0u;
      memset(v56, 0, sizeof(v56));
      long long v53 = 0u;
      long long v54 = 0u;
      memset(v52, 0, sizeof(v52));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v52);
      uint64_t v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"left context: ", 14);
      quasar::formatResultTokensSimple(v18, 0);
      if ((v40 & 0x80u) == 0) {
        uint64_t v30 = v39;
      }
      else {
        uint64_t v30 = (void **)v39[0];
      }
      if ((v40 & 0x80u) == 0) {
        uint64_t v31 = v40;
      }
      else {
        uint64_t v31 = (uint64_t)v39[1];
      }
      uint64_t v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)v30, v31);
      unsigned __int8 v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"; commands: ", 12);
      v36[0] = (uint64_t)" ";
      v36[1] = 1;
      quasar::join<std::unordered_set<std::string>>(v27, v36);
      if ((v38 & 0x80u) == 0) {
        uint64_t v34 = __p;
      }
      else {
        uint64_t v34 = (void **)__p[0];
      }
      if ((v38 & 0x80u) == 0) {
        uint64_t v35 = v38;
      }
      else {
        uint64_t v35 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)v34, v35);
      if ((char)v38 < 0) {
        operator delete(__p[0]);
      }
      if ((char)v40 < 0) {
        operator delete(v39[0]);
      }
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v52);
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v41);
    v52[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v44;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v52);
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v47);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v48);
    v52[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v49;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v52);
  }
}

void sub_1B215BB38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,char *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a50 < 0) {
    operator delete(__p);
  }
  std::string __p = &a29;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a37);
  std::string __p = &a42;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void quasar::ContinuousListeningResultHelper::ContinuousListeningResultHelper(uint64_t a1, char a2, char a3, char a4, uint64_t a5, void *a6)
{
  *(void *)a1 = &unk_1F0A581C0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = a2;
  *(unsigned char *)(a1 + 33) = a3;
  *(void *)(a1 + 4std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = 0;
  int v8 = (uint64_t *)(a1 + 40);
  *(unsigned char *)(a1 + 34) = a4;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 30;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 8std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 144) = 1065353216;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_DWORD *)(a1 + 20std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = 0;
  *(void *)(a1 + 208) = *a6;
  uint64_t v9 = a6[1];
  *(void *)(a1 + 216) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 232) = 0;
  *(unsigned char *)(a1 + 224) = 1;
  *(void *)(a1 + 24std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = 0;
  *(void *)(a1 + 248) = 0;
  _ZNSt3__115allocate_sharedB8ne180100IN6quasar25ContinuousListeningConfigENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v12);
  long long v10 = v12;
  long long v12 = 0uLL;
  uint64_t v11 = *(std::__shared_weak_count **)(a1 + 48);
  *(_OWORD *)(a1 + 4std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = v10;
  if (v11)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    if (*((void *)&v12 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v12 + 1));
    }
  }
  quasar::ContinuousListeningConfig::init(*v8, a5);
}

void sub_1B215BDFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  if (*(char *)(v9 + 255) < 0) {
    operator delete(*v11);
  }
  long long v13 = *(std::__shared_weak_count **)(v9 + 216);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  unsigned int v14 = *(void **)(v9 + 176);
  if (v14)
  {
    *(void *)(v9 + 184) = v14;
    operator delete(v14);
  }
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&a9);
  quasar::ItnLeftContext::~ItnLeftContext(v10);
  int v15 = *(std::__shared_weak_count **)(v9 + 48);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void quasar::ItnLeftContext::~ItnLeftContext(quasar::ItnLeftContext *this)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 56);
  uint64_t v2 = (void **)((char *)this + 32);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = (void **)((char *)this + 8);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void quasar::ContinuousListeningResultHelper::~ContinuousListeningResultHelper(void **this)
{
  *this = &unk_1F0A581C0;
  if (*((char *)this + 255) < 0) {
    operator delete(this[29]);
  }
  uint64_t v2 = (std::__shared_weak_count *)this[27];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = this[22];
  if (v3)
  {
    this[23] = v3;
    operator delete(v3);
  }
  long long v5 = this + 19;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v5);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(this + 14));
  long long v5 = this + 11;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v5);
  long long v5 = this + 8;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v4 = (std::__shared_weak_count *)this[6];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  long long v5 = this + 1;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v5);
}

void quasar::ContinuousListeningResultHelper::writePartial(uint64_t a1, uint64_t **a2, unsigned int a3, uint64_t a4, uint64_t *a5, uint64_t a6, char a7, uint64_t *a8)
{
  quasar::getTopChoice((uint64_t)a2, 1, &v47);
  BOOL v16 = (void **)(a1 + 232);
  if (*(char *)(a1 + 255) < 0) {
    operator delete(*v16);
  }
  *(_OWORD *)BOOL v16 = v47;
  *(void *)(a1 + 248) = v48;
  uint64_t v64 = 0;
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(&v64, *a5, a5[1], 0x6DB6DB6DB6DB6DB7 * ((a5[1] - *a5) >> 5));
  uint64_t v18 = v64;
  uint64_t v17 = v65;
  if (v64 != v65 && *(void *)(a1 + 152) != *(void *)(a1 + 160))
  {
    if (quasar::gLogLevel >= 2)
    {
      long long v62 = 0u;
      long long v63 = 0u;
      long long v60 = 0u;
      long long v61 = 0u;
      long long v58 = 0u;
      long long v59 = 0u;
      long long v56 = 0u;
      long long v57 = 0u;
      long long v54 = 0u;
      long long v55 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      long long v47 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v47);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v47, (uint64_t)"Partials: currentTokens should be empty when client left context is provided", 76);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v47);
      uint64_t v18 = v64;
      uint64_t v17 = v65;
    }
    while (v17 != v18)
      quasar::Token::~Token((void **)(v17 - 224));
    uint64_t v65 = v18;
  }
  long long v47 = 0uLL;
  *(void *)&long long v48 = 0;
  unint64_t v44 = 0;
  long long v45 = 0;
  uint64_t v46 = 0;
  if (!*(unsigned char *)(a1 + 34))
  {
    unsigned int v19 = a3;
    if (*(void *)(a1 + 152) != *(void *)(a1 + 160)) {
      unsigned int v19 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(a1 + 20std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = v19;
  }
  memset(v43, 0, sizeof(v43));
  std::vector<std::vector<quasar::Token>>::__init_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(v43, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
  std::string __p = 0;
  long long v41 = 0;
  uint64_t v42 = 0;
  quasar::ContinuousListeningResultHelper::prependTokens((char *)a1, (uint64_t *)&v47, (char *)&v44, v43, (uint64_t *)&__p, a3);
  if (__p)
  {
    long long v41 = __p;
    operator delete(__p);
  }
  v38[0] = (void **)v43;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](v38);
  if (*(unsigned char *)(a1 + 34))
  {
    if (*((void *)&v47 + 1) != (void)v47)
    {
      uint64_t v20 = *(void *)v47;
      unint64_t v21 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(v47 + 8) - *(void *)v47) >> 5);
      uint64_t v23 = *(void *)(a1 + 8);
      uint64_t v22 = *(void *)(a1 + 16);
      unint64_t v24 = 0x6DB6DB6DB6DB6DB7 * ((v22 - v23) >> 5);
      if (v21 >= v24)
      {
        if (v22 != v23)
        {
          if (v24 <= 1) {
            uint64_t v25 = 1;
          }
          else {
            uint64_t v25 = 0x6DB6DB6DB6DB6DB7 * ((v22 - v23) >> 5);
          }
          uint64_t v26 = (_DWORD *)(v20 + 36);
          uint64_t v27 = (_DWORD *)(v23 + 36);
          do
          {
            *uint64_t v26 = *v27;
            *((void *)v26 - 1) = *((void *)v27 - 1);
            v26 += 56;
            v27 += 56;
            --v25;
          }
          while (v25);
        }
        if (v21 > (int)v24)
        {
          unint64_t v24 = (int)v24;
          char v28 = (_DWORD *)(v20 + 224 * (int)v24 + 36);
          do
          {
            *char v28 = 0;
            *((void *)v28 - 1) = 0;
            ++v24;
            v28 += 56;
          }
          while (v21 > v24);
        }
      }
    }
  }
  if (*(void *)(a1 + 208))
  {
    uint64_t v29 = (uint64_t *)v47;
    if (*((void *)&v47 + 1) != (void)v47 && *(void *)v47 != *(void *)(v47 + 8))
    {
      uint64_t v30 = *(void *)(a1 + 216);
      v39[0] = *(void *)(a1 + 208);
      v39[1] = v30;
      if (v30) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v30 + 8), 1uLL, memory_order_relaxed);
      }
      quasar::getCommandStartCharIndex(v39, v29);
    }
  }
  uint64_t v31 = *(unsigned int *)(a1 + 200);
  if (v64 == v65)
  {
    unsigned __int8 v33 = (std::__shared_weak_count *)a8[1];
    uint64_t v34 = *a8;
    uint64_t v35 = v33;
    if (v33) {
      atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, long long *, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, char, uint64_t *, _BYTE))(*(void *)a1 + 16))(a1, &v47, v31, a4, a1 + 64, a1 + 88, 0, a6, a7, &v34, 0);
    if (v35) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v35);
    }
  }
  else
  {
    memset(v38, 0, sizeof(v38));
    uint64_t v32 = (std::__shared_weak_count *)a8[1];
    uint64_t v36 = *a8;
    unint64_t v37 = v32;
    if (v32) {
      atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t **, uint64_t, uint64_t, uint64_t *, void ***, uint64_t, uint64_t, char, uint64_t *, _BYTE))(*(void *)a1 + 16))(a1, a2, v31, a4, &v64, v38, 1, a6, a7, &v36, 0);
    if (v37) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v37);
    }
    uint64_t v67 = v38;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
  }
  if (v44)
  {
    long long v45 = v44;
    operator delete(v44);
  }
  unint64_t v44 = &v47;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
  *(void *)&long long v47 = &v64;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
}

void sub_1B215C3D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,uint64_t a31)
{
  quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&a31);
  a31 = v31 - 112;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  _Unwind_Resume(a1);
}

void quasar::ContinuousListeningResultHelper::prependTokens(char *a1, uint64_t *a2, char *a3, uint64_t *a4, uint64_t *a5, unsigned int a6)
{
  uint64_t v11 = a1;
  if (a1 + 152 != (char *)a2) {
    std::vector<std::vector<quasar::Token>>::__assign_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>((uint64_t)a2, *((uint64_t **)a1 + 19), *((uint64_t **)a1 + 20), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a1 + 20) - *((void *)a1 + 19)) >> 3));
  }
  if (v11 + 176 != a3) {
    a1 = std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(a3, *((char **)v11 + 22), *((void *)v11 + 23), (uint64_t)(*((void *)v11 + 23) - *((void *)v11 + 22)) >> 3);
  }
  quasar::ContinuousListeningResultHelper::prependCommands((uint64_t)a1, a2, (uint64_t)a3, (uint64_t)(v11 + 112), (uint64_t)a4);
  if (a5[1] == *a5)
  {
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
    uint64_t v38 = 0;
    std::vector<fst::LatticeWeightTpl<float>>::resize((uint64_t)a5, v13, &v38);
    if (a6) {
      goto LABEL_20;
    }
  }
  else if (a6)
  {
    goto LABEL_20;
  }
  uint64_t v14 = *((void *)v11 + 9);
  if (*((void *)v11 + 8) != v14)
  {
    unsigned int v15 = *(_DWORD *)(v14 - 192);
    uint64_t v16 = *a2;
    uint64_t v17 = a2[1];
    uint64_t v18 = v17 - *a2;
    if (v17 != *a2)
    {
      uint64_t v19 = 0;
      unint64_t v20 = v18 / 24;
      if (v20 <= 1) {
        unint64_t v20 = 1;
      }
      do
      {
        unint64_t v21 = (uint64_t *)(v16 + 24 * v19);
        uint64_t v22 = *v21;
        uint64_t v23 = v21[1] - *v21;
        if (v23)
        {
          unint64_t v24 = v23 / 224;
          unsigned int v25 = *((_DWORD *)v11 + 50);
          if (v24 <= 1) {
            unint64_t v24 = 1;
          }
          v12.n128_u64[0] = (unint64_t)vdup_n_s32(v25);
          uint64_t v26 = (int32x2_t *)(v22 + 36);
          do
          {
            v26->i32[0] += v25;
            v26[-1] = vadd_s32(v26[-1], (int32x2_t)v12.n128_u64[0]);
            v26 += 28;
            --v24;
          }
          while (v24);
        }
        ++v19;
      }
      while (v19 != v20);
    }
    goto LABEL_23;
  }
LABEL_20:
  unsigned int v27 = *((_DWORD *)v11 + 50);
  if (v27 > a6) {
    unsigned int v27 = 0;
  }
  unsigned int v15 = a6 - v27;
LABEL_23:
  uint64_t v28 = *a4;
  uint64_t v29 = a4[1];
  uint64_t v30 = v29 - *a4;
  if (v29 != *a4)
  {
    uint64_t v31 = 0;
    unint64_t v32 = v30 / 24;
    if (v32 <= 1) {
      unint64_t v32 = 1;
    }
    v12.n128_u64[0] = (unint64_t)vdup_n_s32(v15);
    do
    {
      unsigned __int8 v33 = (uint64_t *)(v28 + 24 * v31);
      uint64_t v34 = *v33;
      uint64_t v35 = v33[1] - *v33;
      if (v35)
      {
        unint64_t v36 = v35 / 224;
        if (v36 <= 1) {
          unint64_t v36 = 1;
        }
        unint64_t v37 = (int32x2_t *)(v34 + 36);
        do
        {
          v37->i32[0] += v15;
          v37[-1] = vadd_s32(v37[-1], (int32x2_t)v12.n128_u64[0]);
          v37 += 28;
          --v36;
        }
        while (v36);
      }
      ++v31;
    }
    while (v31 != v32);
  }
  quasar::concatNbest(a2, (uint64_t)a3, a4, a5, 0, 0xAu, v12);
}

void quasar::ContinuousListeningResultHelper::writeFinal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, int a6, uint64_t *a7, char a8, uint64_t a9, char a10, char a11)
{
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(&v31, *a7, a7[1], 0x6DB6DB6DB6DB6DB7 * ((a7[1] - *a7) >> 5));
  memset(v30, 0, sizeof(v30));
  unsigned int v27 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v19 = v31;
  uint64_t v18 = v32;
  if (v31 != v32)
  {
    if (*(void *)(a1 + 152) != *(void *)(a1 + 160))
    {
      if (quasar::gLogLevel >= 2)
      {
        memset(v26, 0, sizeof(v26));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v26);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"Final: currentTokens should be empty when client left context is provided", 73);
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)v26);
        uint64_t v19 = v31;
        uint64_t v18 = v32;
      }
      uint64_t v20 = v19;
      if (v18 != v19)
      {
        do
          quasar::Token::~Token((void **)(v18 - 224));
        while (v18 != v19);
        uint64_t v20 = v31;
      }
      uint64_t v32 = v19;
      uint64_t v18 = v19;
      uint64_t v19 = v20;
    }
    if (v19 != v18)
    {
      uint64_t v21 = *(void *)(a1 + 152);
      uint64_t v22 = *(void *)(a1 + 160);
      while (v22 != v21)
      {
        v22 -= 24;
        *(void *)&v26[0] = v22;
        std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v26);
      }
      *(void *)(a1 + 16std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = v21;
      *(void *)(a1 + 184) = *(void *)(a1 + 176);
      *(_DWORD *)(a1 + 20std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = 0;
      quasar::ItnLeftContext::clear((quasar::ItnLeftContext *)(a1 + 56));
      MEMORY[0x1B3EA7B20](a1 + 232, "");
    }
  }
  if (*(void *)(a1 + 208))
  {
    if (a11)
    {
      uint64_t v23 = *(uint64_t **)a2;
      if (*(void *)a2 != *(void *)(a2 + 8) && *v23 != v23[1])
      {
        uint64_t v24 = *(void *)(a1 + 216);
        v25[0] = *(void *)(a1 + 208);
        v25[1] = v24;
        if (v24)
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
          uint64_t v23 = *(uint64_t **)a2;
        }
        quasar::getCommandStartCharIndex(v25, v23);
      }
    }
  }
  quasar::ContinuousListeningResultHelper::writeFinalWithLeftContext(a1, (uint64_t **)a2, a3, (uint64_t)v30, (char *)&v27, a4, a5, a6 + a5, &v31, a8, a9, a10, a11, 0);
  if (v27)
  {
    uint64_t v28 = v27;
    operator delete(v27);
  }
  *(void *)&v26[0] = v30;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)v26);
  *(void *)&v26[0] = &v31;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v26);
}

void sub_1B215C990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void **a15)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  uint64_t v17 = *(void **)(v15 - 152);
  if (v17)
  {
    *(void *)(v15 - 144) = v17;
    operator delete(v17);
  }
  a15 = (void **)(v15 - 128);
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&a15);
  a15 = (void **)(v15 - 104);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&a15);
  _Unwind_Resume(a1);
}

void quasar::ItnLeftContext::clear(quasar::ItnLeftContext *this)
{
  uint64_t v2 = *((void *)this + 2);
  uint64_t v3 = *((void *)this + 1);
  while (v2 != v3)
    quasar::Token::~Token((void **)(v2 - 224));
  *((void *)this + 2) = v3;
  uint64_t v5 = *((void *)this + 4);
  for (uint64_t i = *((void *)this + 5); i != v5; quasar::Token::~Token((void **)(i - 224)))
    ;
  *((void *)this + 5) = v5;
  std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::clear((uint64_t)this + 56);
}

void quasar::ContinuousListeningResultHelper::writeFinalWithLeftContext(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t a4, char *a5, uint64_t a6, unsigned int a7, unsigned int a8, uint64_t *a9, char a10, uint64_t a11, char a12, char a13, char a14)
{
  uint64_t v20 = a9;
  uint64_t v102 = *MEMORY[0x1E4F143B8];
  uint64_t v80 = a9[1];
  uint64_t v81 = *a9;
  if (!a13)
  {
    uint64_t v37 = a1 + 152;
    unsigned int v38 = a7;
    if (*(void *)(a1 + 152) != *(void *)(a1 + 160)) {
      unsigned int v38 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(a1 + 20std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = v38;
    memset(v86, 0, sizeof(v86));
    std::vector<std::vector<quasar::Token>>::__init_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(v86, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
    std::string __p = 0;
    int v84 = 0;
    uint64_t v85 = 0;
    std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(&__p, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3);
    quasar::ContinuousListeningResultHelper::prependTokens((char *)a1, (uint64_t *)a4, a5, v86, (uint64_t *)&__p, a7);
    if (__p)
    {
      int v84 = __p;
      operator delete(__p);
    }
    unsigned int v91 = v86;
    std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v91);
    if (a6)
    {
      if (*(void *)a4 == *(void *)(a4 + 8) && *(void *)(a1 + 64) != *(void *)(a1 + 72))
      {
        unsigned int v91 = 0;
        uint64_t v92 = 0;
        long long v93 = 0;
        std::vector<std::vector<quasar::Token>>::push_back[abi:ne180100]((uint64_t *)a4, (uint64_t)&v91);
        unint64_t v99 = &v91;
        std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v99);
        int v39 = (char *)*((void *)a5 + 2);
        unsigned __int8 v40 = (char *)*((void *)a5 + 1);
        if (v40 >= v39)
        {
          long long v57 = *(char **)a5;
          uint64_t v58 = (uint64_t)&v40[-*(void *)a5] >> 3;
          unint64_t v59 = v58 + 1;
          if ((unint64_t)(v58 + 1) >> 61) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v60 = v39 - v57;
          if (v60 >> 2 > v59) {
            unint64_t v59 = v60 >> 2;
          }
          if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v61 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v61 = v59;
          }
          if (v61)
          {
            long long v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a5 + 16), v61);
            long long v57 = *(char **)a5;
            unsigned __int8 v40 = (char *)*((void *)a5 + 1);
          }
          else
          {
            long long v62 = 0;
          }
          long long v63 = &v62[8 * v58];
          uint64_t v64 = &v62[8 * v61];
          *(void *)long long v63 = 0;
          long long v41 = v63 + 8;
          while (v40 != v57)
          {
            uint64_t v65 = *((void *)v40 - 1);
            v40 -= 8;
            *((void *)v63 - 1) = v65;
            v63 -= 8;
          }
          *(void *)a5 = v63;
          *((void *)a5 + 1) = v41;
          *((void *)a5 + 2) = v64;
          if (v57) {
            operator delete(v57);
          }
        }
        else
        {
          *(void *)unsigned __int8 v40 = 0;
          long long v41 = v40 + 8;
        }
        *((void *)a5 + 1) = v41;
      }
LABEL_80:
      unsigned int v91 = 0;
      uint64_t v92 = 0;
      long long v93 = 0;
      uint64_t v66 = *(unsigned int *)(a1 + 200);
      unint64_t v99 = 0;
      uint64_t v100 = 0;
      uint64_t v101 = 0;
      if (v81 == v80)
      {
        std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(&v99, *(void *)(a1 + 88), *(void *)(a1 + 96), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 5));
        uint64_t v20 = (uint64_t *)(a1 + 64);
      }
      HIBYTE(v78) = a10;
      LOBYTE(v78) = v81 != v80;
      (*(void (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t, void, void, uint64_t *, void ***, void **, __int16, uint64_t, char))(*(void *)a1 + 24))(a1, a4, a5, a6, v66, a8 - v66, a6 ^ 1, v20, &v99, &v91, v78, a11, a12);
      long long v88 = &v99;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v88);
      if (a10)
      {
        quasar::ItnLeftContext::clear((quasar::ItnLeftContext *)(a1 + 56));
      }
      else
      {
        if (!*(unsigned char *)(a1 + 224))
        {
LABEL_95:
          unint64_t v99 = &v91;
          goto LABEL_96;
        }
        quasar::ItnLeftContext::update((int *)(a1 + 56), a4, v67, (uint64_t)&v91);
      }
      std::string::size_type v68 = *(void ***)(a1 + 152);
      int v69 = *(void ***)(a1 + 160);
      while (v69 != v68)
      {
        v69 -= 3;
        unint64_t v99 = v69;
        std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v99);
      }
      *(void *)(a1 + 16std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = v68;
      *(void *)(a1 + 184) = *(void *)(a1 + 176);
      *(_DWORD *)(a1 + 20std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = 0;
      if (*(unsigned char *)(a1 + 34))
      {
        uint64_t v71 = *(void *)(a1 + 8);
        for (uint64_t i = *(void *)(a1 + 16); i != v71; quasar::Token::~Token((void **)(i - 224)))
          ;
        *(void *)(a1 + 16) = v71;
      }
      MEMORY[0x1B3EA7B20](a1 + 232, "");
      goto LABEL_95;
    }
    if (!quasar::ContinuousListeningResultHelper::shouldBePartial(a1, a4) || (a10 & 1) != 0) {
      goto LABEL_80;
    }
    if (!*(unsigned char *)(a1 + 34))
    {
      quasar::getTopChoice((uint64_t)a2, 1, &v91);
      uint64_t v42 = *(unsigned __int8 *)(a1 + 255);
      if ((v42 & 0x80u) == 0) {
        uint64_t v43 = *(unsigned __int8 *)(a1 + 255);
      }
      else {
        uint64_t v43 = *(void *)(a1 + 240);
      }
      uint64_t v44 = HIBYTE(v93);
      int v45 = SHIBYTE(v93);
      if (SHIBYTE(v93) < 0) {
        uint64_t v44 = v92;
      }
      if (v43 == v44)
      {
        uint64_t v46 = (const void **)(a1 + 232);
        if (SHIBYTE(v93) >= 0) {
          long long v47 = (unsigned __int8 *)&v91;
        }
        else {
          long long v47 = (unsigned __int8 *)v91;
        }
        if ((v42 & 0x80) != 0)
        {
          BOOL v52 = memcmp(*v46, v47, *(void *)(a1 + 240)) != 0;
        }
        else if (*(unsigned char *)(a1 + 255))
        {
          uint64_t v48 = v42 - 1;
          do
          {
            int v50 = *(unsigned __int8 *)v46;
            uint64_t v46 = (const void **)((char *)v46 + 1);
            int v49 = v50;
            int v51 = *v47++;
            BOOL v52 = v49 != v51;
          }
          while (v49 == v51 && v48-- != 0);
        }
        else
        {
          BOOL v52 = 0;
        }
      }
      else
      {
        BOOL v52 = 1;
      }
      if (v45 < 0) {
        operator delete(v91);
      }
      if (v52)
      {
        v82[0] = 0;
        v82[1] = 0;
        quasar::ContinuousListeningResultHelper::writePartial(a1, a2, a7, a8, a9, a11, 0, v82);
      }
    }
    if (v37 != a4) {
      std::vector<std::vector<quasar::Token>>::__assign_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(a1 + 152, *(uint64_t **)a4, *(uint64_t **)(a4 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3));
    }
    if ((char *)(a1 + 176) != a5) {
      std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((char *)(a1 + 176), *(char **)a5, *((void *)a5 + 1), (uint64_t)(*((void *)a5 + 1) - *(void *)a5) >> 3);
    }
    if (!*(unsigned char *)(a1 + 34)) {
      goto LABEL_114;
    }
    if (a1 + 8 == *(void *)a4)
    {
      *(_DWORD *)(*(void *)(a1 + 16) - 192) += 1000;
    }
    else
    {
      std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(a1 + 8, **(void **)a4, *(void *)(*(void *)a4 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(*(void *)a4 + 8) - **(void **)a4) >> 5));
      int v72 = *(unsigned __int8 *)(a1 + 34);
      *(_DWORD *)(*(void *)(a1 + 16) - 192) += 1000;
      if (!v72) {
        goto LABEL_114;
      }
    }
    if (*(unsigned char *)(a1 + 33))
    {
LABEL_118:
      if (*a9 == a9[1]) {
        return;
      }
      uint64_t v75 = (quasar::ItnLeftContext *)(a1 + 56);
      quasar::ItnLeftContext::clear(v75);
      unsigned int v91 = 0;
      uint64_t v92 = 0;
      long long v93 = 0;
      uint64_t v92 = std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>((uint64_t *)&v91, a9);
      unint64_t v99 = 0;
      uint64_t v100 = 0;
      uint64_t v101 = 0;
      quasar::ItnLeftContext::update((int *)v75, (uint64_t)&v91, v76, (uint64_t)&v99);
      long long v88 = &v99;
      std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v88);
      unint64_t v99 = &v91;
LABEL_96:
      std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v99);
      return;
    }
LABEL_114:
    uint64_t v73 = *(unsigned int *)(a1 + 200);
    unsigned int v91 = 0;
    uint64_t v92 = 0;
    if (v81 == v80)
    {
      long long v93 = 0;
      std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(&v91, *(void *)(a1 + 88), *(void *)(a1 + 96), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 5));
      float v74 = (uint64_t *)(a1 + 64);
    }
    else
    {
      float v74 = a9;
      long long v93 = 0;
    }
    (*(void (**)(uint64_t, uint64_t, char *, uint64_t, void, uint64_t *, void **, BOOL, uint64_t, _WORD))(*(void *)a1 + 32))(a1, a4, a5, v73, a8 - v73, v74, &v91, v81 != v80, a11, 0);
    unint64_t v99 = &v91;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v99);
    goto LABEL_118;
  }
  if (!*(unsigned char *)(a1 + 34))
  {
    unsigned int v21 = a7;
    if (*(void *)(a1 + 152) != *(void *)(a1 + 160)) {
      unsigned int v21 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(a1 + 20std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = v21;
  }
  memset(v97, 0, sizeof(v97));
  std::vector<std::vector<quasar::Token>>::__init_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(v97, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
  float v94 = 0;
  long long v95 = 0;
  uint64_t v96 = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(&v94, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3);
  quasar::ContinuousListeningResultHelper::prependTokens((char *)a1, (uint64_t *)a4, a5, v97, (uint64_t *)&v94, a7);
  if (v94)
  {
    long long v95 = v94;
    operator delete(v94);
  }
  unsigned int v91 = v97;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v91);
  uint64_t v22 = *(uint64_t **)a4;
  if (*(unsigned char *)(a1 + 34))
  {
    uint64_t v23 = *v22;
    if (*(uint64_t **)(a4 + 8) != v22)
    {
      uint64_t v24 = v22[1];
      unint64_t v25 = 0x6DB6DB6DB6DB6DB7 * ((v24 - v23) >> 5);
      uint64_t v27 = *(void *)(a1 + 8);
      uint64_t v26 = *(void *)(a1 + 16);
      unint64_t v28 = 0x6DB6DB6DB6DB6DB7 * ((v26 - v27) >> 5);
      if (v25 >= v28)
      {
        if (v26 != v27)
        {
          if (v28 <= 1) {
            unint64_t v28 = 1;
          }
          uint64_t v29 = (_DWORD *)(v23 + 36);
          uint64_t v30 = (_DWORD *)(v27 + 36);
          do
          {
            *uint64_t v29 = *v30;
            *((void *)v29 - 1) = *((void *)v30 - 1);
            v29 += 56;
            v30 += 56;
            --v28;
          }
          while (v28);
        }
        if (v24 != v23)
        {
          uint64_t v31 = 0;
          unsigned int v32 = 0;
          if (v25 <= 1) {
            unint64_t v25 = 1;
          }
          uint64_t v33 = (int32x2_t *)(v23 + 32);
          do
          {
            if (v31)
            {
              unsigned __int32 v34 = v33[-1].u32[1];
              unsigned __int32 v35 = v33[-28].u32[0];
              if (v34 < v35) {
                unsigned int v32 = v32 - v34 + v35;
              }
            }
            else
            {
              unsigned __int32 v34 = *(_DWORD *)(v23 + 28);
            }
            v33[-1].i32[1] = v34 + v32;
            *uint64_t v33 = vadd_s32(*v33, vdup_n_s32(v32));
            v33 += 28;
            ++v31;
          }
          while (v25 != v31);
        }
      }
    }
  }
  else
  {
    uint64_t v23 = *v22;
  }
  uint64_t v100 = 0;
  uint64_t v101 = 0;
  unint64_t v99 = 0;
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(&v99, v23, v22[1], 0x6DB6DB6DB6DB6DB7 * ((v22[1] - v23) >> 5));
  unsigned int v91 = 0;
  uint64_t v92 = 0;
  long long v93 = 0;
  long long v88 = &v91;
  LOBYTE(v89) = 0;
  unsigned int v91 = operator new(0x18uLL);
  uint64_t v92 = (uint64_t)v91;
  long long v93 = (char *)v91 + 24;
  uint64_t v92 = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<quasar::Token>>,std::vector<quasar::Token> const*,std::vector<quasar::Token> const*,std::vector<quasar::Token>*>((uint64_t)&v93, (uint64_t *)&v99, &v102, v91);
  uint64_t v54 = **(void **)a5;
  long long v55 = operator new(8uLL);
  *long long v55 = v54;
  uint64_t v89 = v55 + 1;
  uint64_t v90 = v55 + 1;
  long long v88 = v55;
  uint64_t v56 = *(unsigned int *)(a1 + 200);
  memset(v87, 0, sizeof(v87));
  if (v81 == v80)
  {
    std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v87, *(void *)(a1 + 88), *(void *)(a1 + 96), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 5));
    uint64_t v20 = (uint64_t *)(a1 + 64);
  }
  HIBYTE(v77) = a14;
  LOBYTE(v77) = 1;
  (*(void (**)(uint64_t, void **, void **, uint64_t, void, uint64_t *, void **, BOOL, uint64_t, __int16))(*(void *)a1 + 32))(a1, &v91, &v88, v56, a8 - v56, v20, v87, v81 != v80, a11, v77);
  unint64_t v98 = v87;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v98);
  if (v88)
  {
    uint64_t v89 = v88;
    operator delete(v88);
  }
  long long v88 = &v91;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v88);
  long long v88 = &v99;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v88);
  if (*(unsigned char *)(a1 + 34))
  {
    if (a1 + 8 != *(void *)a4) {
      std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(a1 + 8, **(void **)a4, *(void *)(*(void *)a4 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(*(void *)a4 + 8) - **(void **)a4) >> 5));
    }
  }
}

void sub_1B215D460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  *(void *)(v34 - 12std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = v33;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)(v34 - 120));
  _Unwind_Resume(a1);
}

uint64_t quasar::ContinuousListeningResultHelper::setEnableFinalization(uint64_t this, char a2)
{
  *(unsigned char *)(this + 224) = a2;
  return this;
}

uint64_t quasar::ContinuousListeningResultHelper::getContinuousListeningConfig@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 48);
  *a2 = *(void *)(this + 40);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t quasar::ContinuousListeningResultHelper::shouldBePartial(uint64_t a1, uint64_t a2)
{
  void v32[3] = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a1 + 224)) {
    return 1;
  }
  if (!*(unsigned char *)(a1 + 32)) {
    return 0;
  }
  uint64_t v3 = *(uint64_t **)a2;
  if (*(void *)a2 == *(void *)(a2 + 8)) {
    return 0;
  }
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(&v27, *v3, v3[1], 0x6DB6DB6DB6DB6DB7 * ((v3[1] - *v3) >> 5));
  if (v27 == v28 || (unint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((v28 - v27) >> 5), v5 = *(void *)(a1 + 40), v4 > *(int *)(v5 + 4)))
  {
    uint64_t v6 = 0;
  }
  else if (v4 <= *(int *)(v5 + 8))
  {
    uint64_t v6 = 1;
  }
  else
  {
    if (*(char *)(v28 - 201) < 0)
    {
      std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)(v28 - 224), *(void *)(v28 - 216));
      uint64_t v5 = *(void *)(a1 + 40);
    }
    else
    {
      long long v8 = *(_OWORD *)(v28 - 224);
      v26.__r_.__value_.__r.__words[2] = *(void *)(v28 - 208);
      *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v8;
    }
    if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((void *)(v5 + 16), (unsigned __int8 *)&v26))
    {
      uint64_t v6 = 1;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v30, "\\letter");
      std::string::basic_string[abi:ne180100]<0>(v31, "\\uppercase-letter");
      std::string::basic_string[abi:ne180100]<0>(v32, "\\lowercase-letter");
      std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v24, &v30, 3uLL);
      for (uint64_t i = 0; i != -9; i -= 3)
      {
        if (SHIBYTE(v32[i + 2]) < 0) {
          operator delete((void *)v32[i]);
        }
      }
      uint64_t v10 = v24;
      uint64_t v11 = v25;
      if (v24 == v25)
      {
LABEL_49:
        uint64_t v6 = 0;
      }
      else
      {
        if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          __n128 v12 = &v26;
        }
        else {
          __n128 v12 = (std::string *)v26.__r_.__value_.__r.__words[0];
        }
        if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int64_t size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
        }
        else {
          int64_t size = v26.__r_.__value_.__l.__size_;
        }
        uint64_t v14 = (char *)v12 + size;
        while (1)
        {
          int v15 = *(char *)(v10 + 23);
          uint64_t v16 = v15 >= 0 ? (char *)v10 : *(char **)v10;
          int64_t v17 = v15 >= 0 ? *(unsigned __int8 *)(v10 + 23) : *(void *)(v10 + 8);
          if (!v17) {
            break;
          }
          if (size >= v17)
          {
            int v18 = *v16;
            int64_t v19 = size;
            uint64_t v20 = v12;
            do
            {
              int64_t v21 = v19 - v17;
              if (v21 == -1) {
                break;
              }
              uint64_t v22 = (char *)memchr(v20, v18, v21 + 1);
              if (!v22) {
                break;
              }
              uint64_t v23 = v22;
              if (!memcmp(v22, v16, v17))
              {
                if (v23 == v14 || v23 - (char *)v12 == -1) {
                  break;
                }
                goto LABEL_48;
              }
              uint64_t v20 = (std::string *)(v23 + 1);
              int64_t v19 = v14 - (v23 + 1);
            }
            while (v19 >= v17);
          }
          v10 += 24;
          if (v10 == v11) {
            goto LABEL_49;
          }
        }
LABEL_48:
        uint64_t v6 = 1;
      }
      *(void *)&long long v30 = &v24;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
    }
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v26.__r_.__value_.__l.__data_);
    }
  }
  *(void *)&long long v30 = &v27;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
  return v6;
}

void sub_1B215D894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,char *a22)
{
  uint64_t v24 = 0;
  while (1)
  {
    if (*(char *)(v22 + v24 + 71) < 0) {
      operator delete(*(void **)(v22 + v24 + 48));
    }
    v24 -= 24;
    if (v24 == -72)
    {
      if (a18 < 0) {
        operator delete(__p);
      }
      a22 = &a19;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
      _Unwind_Resume(a1);
    }
  }
}

void quasar::ContinuousListeningResultHelper::prependCommands(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(void *)(a4 + 24))
  {
    uint64_t v61 = 0;
    long long v62 = 0;
    unint64_t v63 = 0;
    uint64_t v5 = *(uint64_t **)a5;
    float v6 = 0.0;
    if (*(void *)a5 == *(void *)(a5 + 8) || (uint64_t v7 = *v5, *v5 == v5[1]))
    {
      int v8 = 0;
    }
    else
    {
      int v8 = *(_DWORD *)(v7 + 28);
      float v6 = *(float *)(v7 + 40);
    }
    for (uint64_t i = *(uint64_t **)(a4 + 16); i; uint64_t i = (uint64_t *)*i)
    {
      if (*((char *)i + 39) < 0) {
        std::string::__init_copy_ctor_external(&v42, (const std::string::value_type *)i[2], i[3]);
      }
      else {
        std::string v42 = *(std::string *)(i + 2);
      }
      std::string::basic_string[abi:ne180100]<0>(v40, "");
      std::string::basic_string[abi:ne180100]<0>(v38, "");
      memset(v37, 0, sizeof(v37));
      std::string::basic_string[abi:ne180100]<0>(v35, "");
      quasar::Token::Token(&v43, (long long *)&v42, v8, v8, v8, 0, 0, (long long *)v40, v6, (long long *)v38, v37, 0, (long long *)v35, 0, 0);
      uint64_t v10 = v62;
      if ((unint64_t)v62 >= v63)
      {
        long long v62 = (long long *)std::vector<quasar::Token>::__push_back_slow_path<quasar::Token>(&v61, (long long *)&v43);
        if (SHIBYTE(v58) < 0) {
          operator delete((void *)__p);
        }
      }
      else
      {
        long long v11 = *(_OWORD *)&v43.__r_.__value_.__l.__data_;
        *((void *)v62 + 2) = *((void *)&v43.__r_.__value_.__l + 2);
        *uint64_t v10 = v11;
        memset(&v43, 0, sizeof(v43));
        uint64_t v12 = *(void *)&v44[14];
        *(long long *)((char *)v10 + 24) = *(_OWORD *)v44;
        *(void *)((char *)v10 + 38) = v12;
        uint64_t v13 = v46;
        void v10[3] = v45;
        *((void *)v10 + 8) = v13;
        *((void *)v10 + 9) = 0;
        uint64_t v46 = 0;
        long long v45 = 0uLL;
        *((void *)v10 + 1std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = 0;
        *((void *)v10 + 11) = 0;
        *(long long *)((char *)v10 + 72) = v47;
        *((void *)v10 + 11) = v48;
        long long v47 = 0uLL;
        uint64_t v48 = 0;
        long long v14 = v49;
        *((void *)v10 + 14) = v50;
        *((void *)v10 + 15) = 0;
        v10[6] = v14;
        uint64_t v50 = 0;
        long long v49 = 0uLL;
        *((void *)v10 + 16) = 0;
        *((void *)v10 + 17) = 0;
        *(long long *)((char *)v10 + 12std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = v51;
        *((void *)v10 + 17) = v52;
        long long v51 = 0uLL;
        uint64_t v52 = 0;
        long long v15 = v53;
        *((void *)v10 + 2std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = v54;
        v10[9] = v15;
        uint64_t v54 = 0;
        long long v53 = 0uLL;
        LODWORD(v13) = v55;
        *((_WORD *)v10 + 86) = v56;
        *((_DWORD *)v10 + 42) = v13;
        long long v16 = __p;
        *((void *)v10 + 24) = v58;
        void v10[11] = v16;
        uint64_t v58 = 0;
        long long __p = 0uLL;
        long long v17 = v59;
        *((_DWORD *)v10 + 54) = v60;
        *(long long *)((char *)v10 + 20std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = v17;
        long long v62 = v10 + 14;
      }
      if (SHIBYTE(v54) < 0) {
        operator delete((void *)v53);
      }
      v64[0] = (void **)&v51;
      std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v64);
      if (SHIBYTE(v50) < 0) {
        operator delete((void *)v49);
      }
      v64[0] = (void **)&v47;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v64);
      if (SHIBYTE(v46) < 0) {
        operator delete((void *)v45);
      }
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v43.__r_.__value_.__l.__data_);
      }
      if (v36 < 0) {
        operator delete(v35[0]);
      }
      v35[0] = v37;
      std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v35);
      if (v39 < 0) {
        operator delete(v38[0]);
      }
      if (v41 < 0) {
        operator delete(v40[0]);
      }
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v42.__r_.__value_.__l.__data_);
      }
    }
    int v18 = (uint64_t *)*a2;
    if (*a2 == a2[1])
    {
      if ((unint64_t)v18 >= a2[2])
      {
        uint64_t v20 = std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>(a2, &v61);
        uint64_t v19 = a3;
      }
      else
      {
        std::vector<std::vector<quasar::Token>>::__construct_one_at_end[abi:ne180100]<std::vector<quasar::Token> const&>((uint64_t)a2, &v61);
        uint64_t v19 = a3;
        uint64_t v20 = (uint64_t)(v18 + 3);
      }
      a2[1] = v20;
      unint64_t v21 = *(void *)(v19 + 16);
      uint64_t v22 = *(void **)(v19 + 8);
      if ((unint64_t)v22 >= v21)
      {
        uint64_t v24 = *(void **)v19;
        uint64_t v25 = ((uint64_t)v22 - *(void *)v19) >> 3;
        unint64_t v26 = v25 + 1;
        if ((unint64_t)(v25 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v27 = v21 - (void)v24;
        if (v27 >> 2 > v26) {
          unint64_t v26 = v27 >> 2;
        }
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v28 = v26;
        }
        if (v28)
        {
          uint64_t v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v19 + 16, v28);
          uint64_t v24 = *(void **)v19;
          uint64_t v22 = *(void **)(v19 + 8);
        }
        else
        {
          uint64_t v29 = 0;
        }
        long long v30 = &v29[8 * v25];
        uint64_t v31 = &v29[8 * v28];
        *(void *)long long v30 = 0;
        uint64_t v23 = v30 + 8;
        while (v22 != v24)
        {
          uint64_t v32 = *--v22;
          *((void *)v30 - 1) = v32;
          v30 -= 8;
        }
        *(void *)uint64_t v19 = v30;
        *(void *)(v19 + 8) = v23;
        *(void *)(v19 + 16) = v31;
        if (v24) {
          operator delete(v24);
        }
      }
      else
      {
        void *v22 = 0;
        uint64_t v23 = v22 + 1;
      }
      *(void *)(v19 + 8) = v23;
    }
    else
    {
      memset(&v43, 0, sizeof(v43));
      std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(&v43, *v18, v18[1], 0x6DB6DB6DB6DB6DB7 * ((v18[1] - *v18) >> 5));
      std::vector<quasar::Token>::__insert_with_size[abi:ne180100]<std::__wrap_iter<quasar::Token*>,std::__wrap_iter<quasar::Token*>>(&v61, v62, (const quasar::Token *)v43.__r_.__value_.__l.__data_, v43.__r_.__value_.__l.__size_, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v43.__r_.__value_.__l.__size_ - v43.__r_.__value_.__r.__words[0]) >> 5));
      if ((uint64_t *)*a2 != &v61) {
        std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(*a2, v61, (uint64_t)v62, 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v62 - v61) >> 5));
      }
      v40[0] = &v43;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v40);
    }
    v43.__r_.__value_.__r.__words[0] = (std::string::size_type)&v61;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
  }
}

void sub_1B215DE04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47)
{
  a47 = v47 - 144;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a47);
  _Unwind_Resume(a1);
}

uint64_t quasar::isContinuousListening(quasar *this, int a2, int a3, int a4)
{
  if (this) {
    return (a3 | a4) & (a2 ^ 1u);
  }
  else {
    return 0;
  }
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B215DF18(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B215DF6C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::swap[abi:ne180100]<quasar::Token>(uint64_t a1, long long *a2)
{
  *(_OWORD *)int v8 = *(_OWORD *)a1;
  uint64_t v9 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(_OWORD *)uint64_t v10 = *(_OWORD *)(a1 + 24);
  *(void *)&v10[14] = *(void *)(a1 + 38);
  *(_OWORD *)long long v11 = *(_OWORD *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 64);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  long long v13 = *(_OWORD *)(a1 + 72);
  uint64_t v14 = *(void *)(a1 + 88);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 8std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = 0;
  *(void *)(a1 + 88) = 0;
  long long v3 = *(_OWORD *)(a1 + 96);
  uint64_t v16 = *(void *)(a1 + 112);
  *(_OWORD *)long long v15 = v3;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  long long v17 = *(_OWORD *)(a1 + 120);
  uint64_t v18 = *(void *)(a1 + 136);
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 12std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  long long v4 = *(_OWORD *)(a1 + 144);
  uint64_t v20 = *(void *)(a1 + 160);
  *(_OWORD *)uint64_t v19 = v4;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 16std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = 0;
  int v5 = *(_DWORD *)(a1 + 168);
  __int16 v22 = *(_WORD *)(a1 + 172);
  int v21 = v5;
  long long v6 = *(_OWORD *)(a1 + 176);
  uint64_t v24 = *(void *)(a1 + 192);
  *(_OWORD *)long long __p = v6;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  long long v7 = *(_OWORD *)(a1 + 200);
  int v26 = *(_DWORD *)(a1 + 216);
  long long v25 = v7;
  quasar::Token::operator=(a1, a2);
  quasar::Token::operator=((uint64_t)a2, (long long *)v8);
  if (SHIBYTE(v24) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v20) < 0) {
    operator delete(v19[0]);
  }
  uint64_t v27 = (void **)&v17;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v27);
  if (SHIBYTE(v16) < 0) {
    operator delete(v15[0]);
  }
  uint64_t v27 = (void **)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v27);
  if (SHIBYTE(v12) < 0) {
    operator delete(v11[0]);
  }
  if (SHIBYTE(v9) < 0) {
    operator delete(v8[0]);
  }
}

void *_ZNSt3__115allocate_sharedB8ne180100IN6quasar25ContinuousListeningConfigENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x90uLL);
  double result = _ZNSt3__120__shared_ptr_emplaceIN6quasar25ContinuousListeningConfigENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B215E144(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *_ZNSt3__120__shared_ptr_emplaceIN6quasar25ContinuousListeningConfigENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A61670;
  quasar::ContinuousListeningConfig::ContinuousListeningConfig((quasar::ContinuousListeningConfig *)(a1 + 3));
  return a1;
}

void sub_1B215E1A0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::ContinuousListeningConfig>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61670;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::ContinuousListeningConfig>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61670;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::ContinuousListeningConfig>::__on_zero_shared(uint64_t a1)
{
  return std::allocator<quasar::ContinuousListeningConfig>::destroy[abi:ne180100]((uint64_t)&v2, a1 + 24);
}

uint64_t std::allocator<quasar::ContinuousListeningConfig>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a2 + 80);
  long long v4 = (void **)(a2 + 56);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a2 + 16);
}

uint64_t kaldi::quasar::isLowEndDevice(kaldi::quasar *this)
{
  {
    kaldi::quasar::isLowEndDevice(void)::ret = MGGetSInt64Answer() < 32;
  }
  return kaldi::quasar::isLowEndDevice(void)::ret;
}

void sub_1B215E30C(_Unwind_Exception *a1)
{
}

BOOL kaldi::quasar::IsUniversalIntelChip(kaldi::quasar *this)
{
  return !MGGetSInt64Answer() || MGGetSInt64Answer() == 32786;
}

uint64_t kaldi::quasar::IsVirtualMachine(kaldi::quasar *this)
{
  {
    kaldi::quasar::IsVirtualMachine(void)::ret = MGGetBoolAnswer();
  }
  return kaldi::quasar::IsVirtualMachine(void)::ret;
}

void sub_1B215E3D4(_Unwind_Exception *a1)
{
}

uint64_t kaldi::quasar::onDeviceCompile(uint64_t a1, unsigned __int16 **a2, uint64_t *a3)
{
  if (kaldi::quasar::checkCompiledCacheWithProgramLibrary(a1, a2, a3))
  {
    if (*a3 == a3[1])
    {
      if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
        uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Already compiled v2 model: ", 27);
        int v13 = *(char *)(a1 + 23);
        if (v13 >= 0) {
          uint64_t v14 = a1;
        }
        else {
          uint64_t v14 = *(void *)a1;
        }
        if (v13 >= 0) {
          uint64_t v15 = *(unsigned __int8 *)(a1 + 23);
        }
        else {
          uint64_t v15 = *(void *)(a1 + 8);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
        goto LABEL_20;
      }
    }
    else if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
      long long v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Already compiled v2 model: ", 27);
      int v7 = *(char *)(a1 + 23);
      if (v7 >= 0) {
        uint64_t v8 = a1;
      }
      else {
        uint64_t v8 = *(void *)a1;
      }
      if (v7 >= 0) {
        uint64_t v9 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        uint64_t v9 = *(void *)(a1 + 8);
      }
      uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" for specified functions", 24);
LABEL_20:
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v17);
    }
    return 1;
  }
  v17[0] = 0;
  uint64_t v11 = kaldi::quasar::compileWithProgramLibrary(a1, a2, v17, 1, a3);
  e5rt_program_library_release();
  return v11;
}

void sub_1B215E50C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t kaldi::quasar::checkCompiledCacheWithProgramLibrary(uint64_t a1, unsigned __int16 **a2, uint64_t *a3)
{
  uint64_t v53 = 0;
  v54[0] = 0;
  if (e5rt_e5_compiler_create())
  {
    if (kaldi::g_kaldi_verbose_level >= -1) {
      goto LABEL_65;
    }
    goto LABEL_66;
  }
  isLowEndDevice = (kaldi::quasar *)e5rt_e5_compiler_options_create();
  if (isLowEndDevice)
  {
    if (kaldi::g_kaldi_verbose_level >= -1) {
      goto LABEL_65;
    }
    goto LABEL_66;
  }
  long long v6 = *a2;
  int v7 = a2[1];
  if (*a2 != v7)
  {
    uint64_t v8 = 0;
    while (1)
    {
      if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v49);
        uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"Setting compilation options computeDeviceType to: ", 50);
        int v10 = *((char *)v6 + 23);
        if (v10 >= 0) {
          uint64_t v11 = v6;
        }
        else {
          uint64_t v11 = *(unsigned __int16 **)v6;
        }
        if (v10 >= 0) {
          uint64_t v12 = *((unsigned __int8 *)v6 + 23);
        }
        else {
          uint64_t v12 = *((void *)v6 + 1);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v11, v12);
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v49);
      }
      if ((*((char *)v6 + 23) & 0x80000000) == 0) {
        break;
      }
      uint64_t v15 = *((void *)v6 + 1);
      if (v15 == 3 && **(_WORD **)v6 == 20547 && *(unsigned char *)(*(void *)v6 + 2) == 85) {
        goto LABEL_54;
      }
      if (v15 == 7)
      {
        if (**(_DWORD **)v6 == 1599426627 && *(_DWORD *)(*(void *)v6 + 3) == 1414283615) {
          goto LABEL_54;
        }
        uint64_t v15 = *((void *)v6 + 1);
      }
      if (v15 == 3)
      {
        if (**(_WORD **)v6 == 20033 && *(unsigned char *)(*(void *)v6 + 2) == 69)
        {
LABEL_55:
          v8 |= 4uLL;
          isLowEndDevice = (kaldi::quasar *)kaldi::quasar::isLowEndDevice(isLowEndDevice);
          if (isLowEndDevice) {
            isLowEndDevice = (kaldi::quasar *)e5rt_e5_compiler_options_set_force_classic_aot_old_hw();
          }
          goto LABEL_62;
        }
        if (*((void *)v6 + 1) == 3)
        {
          uint64_t v19 = *(unsigned __int16 **)v6;
LABEL_52:
          unsigned int v22 = bswap32(*v19) >> 16;
          if (v22 == 18256)
          {
            int v23 = *((unsigned __int8 *)v19 + 2) - 85;
          }
          else if (v22 >> 4 < 0x475)
          {
            int v23 = -1;
          }
          else
          {
            int v23 = 1;
          }
          if (!v23) {
            v8 |= 2uLL;
          }
        }
      }
LABEL_62:
      v6 += 12;
      if (v6 == v7) {
        goto LABEL_63;
      }
    }
    int v13 = *((unsigned __int8 *)v6 + 23);
    if (v13 == 3)
    {
      if (*v6 != 20547 || *((unsigned char *)v6 + 2) != 85)
      {
        if (*v6 == 20033 && *((unsigned char *)v6 + 2) == 69) {
          goto LABEL_55;
        }
        uint64_t v19 = v6;
        goto LABEL_52;
      }
    }
    else
    {
      if (v13 != 7) {
        goto LABEL_62;
      }
      if (*(_DWORD *)v6 != 1599426627 || *(_DWORD *)((char *)v6 + 3) != 1414283615) {
        goto LABEL_62;
      }
    }
LABEL_54:
    v8 |= 1uLL;
    goto LABEL_62;
  }
LABEL_63:
  if (e5rt_e5_compiler_options_set_compute_device_types_mask())
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
LABEL_65:
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v49);
      last_error_message = (const char *)e5rt_get_last_error_message();
      size_t v25 = strlen(last_error_message);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)last_error_message, v25);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v49);
    }
LABEL_66:
    kaldi::quasar::releaseE5OptionsAndHandles(&v53, v54);
    return 0;
  }
  uint64_t v50 = 0;
  long long v51 = 0;
  uint64_t v52 = 0;
  uint64_t v27 = *a3;
  uint64_t v28 = a3[1];
  if (*a3 == v28) {
    goto LABEL_100;
  }
  do
  {
    uint64_t v29 = v27;
    if (*(char *)(v27 + 23) < 0) {
      uint64_t v29 = *(void *)v27;
    }
    long long v30 = v51;
    if (v51 >= v52)
    {
      uint64_t v32 = (v51 - v50) >> 3;
      if ((unint64_t)(v32 + 1) >> 61) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v33 = (v52 - v50) >> 2;
      if (v33 <= v32 + 1) {
        unint64_t v33 = v32 + 1;
      }
      if ((unint64_t)(v52 - v50) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v34 = v33;
      }
      if (v34) {
        unsigned __int32 v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v52, v34);
      }
      else {
        unsigned __int32 v35 = 0;
      }
      char v36 = (uint64_t *)&v35[8 * v32];
      *char v36 = v29;
      uint64_t v31 = (char *)(v36 + 1);
      unsigned int v38 = v50;
      uint64_t v37 = v51;
      if (v51 != v50)
      {
        do
        {
          uint64_t v39 = *((void *)v37 - 1);
          v37 -= 8;
          *--char v36 = v39;
        }
        while (v37 != v38);
        uint64_t v37 = v50;
      }
      uint64_t v50 = (char *)v36;
      long long v51 = v31;
      uint64_t v52 = &v35[8 * v34];
      if (v37) {
        operator delete(v37);
      }
    }
    else
    {
      *(void *)long long v51 = v29;
      uint64_t v31 = v30 + 8;
    }
    long long v51 = v31;
    if (kaldi::g_kaldi_verbose_level >= 5)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v49, 5);
      unsigned __int8 v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"Adding function to compile: ", 28);
      int v41 = *(char *)(v27 + 23);
      if (v41 >= 0) {
        uint64_t v42 = v27;
      }
      else {
        uint64_t v42 = *(void *)v27;
      }
      if (v41 >= 0) {
        uint64_t v43 = *(unsigned __int8 *)(v27 + 23);
      }
      else {
        uint64_t v43 = *(void *)(v27 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, v42, v43);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v49);
    }
    v27 += 24;
  }
  while (v27 != v28);
  if (!e5rt_e5_compiler_options_set_mil_entry_points())
  {
LABEL_100:
    int is_new_compile_required = e5rt_e5_compiler_is_new_compile_required();
    kaldi::quasar::releaseE5OptionsAndHandles(&v53, v54);
    if (is_new_compile_required && kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v49);
      uint64_t v47 = (const char *)e5rt_get_last_error_message();
      size_t v48 = strlen(v47);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)v47, v48);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v49);
    }
  }
  else
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v49);
      uint64_t v44 = (const char *)e5rt_get_last_error_message();
      size_t v45 = strlen(v44);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)v44, v45);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v49);
    }
    kaldi::quasar::releaseE5OptionsAndHandles(&v53, v54);
  }
  if (v50)
  {
    long long v51 = v50;
    operator delete(v50);
  }
  return 0;
}

void sub_1B215EAAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v12 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(v10 + 8) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::compileWithProgramLibrary(uint64_t a1, unsigned __int16 **a2, void *a3, int a4, uint64_t *a5)
{
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v95);
    uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95, (uint64_t)"Starting to compile v2 model: ", 30);
    int v11 = *(char *)(a1 + 23);
    if (v11 >= 0) {
      uint64_t v12 = a1;
    }
    else {
      uint64_t v12 = *(void *)a1;
    }
    if (v11 >= 0) {
      uint64_t v13 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      uint64_t v13 = *(void *)(a1 + 8);
    }
    uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v12, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" behavior: ", 11);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v95);
  }
  uint64_t v93 = 0;
  uint64_t v94 = 0;
  if (e5rt_e5_compiler_create())
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v95);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95, (uint64_t)"e5rt_e5_compiler_create error, code: ", 37);
      uint64_t v15 = (void *)std::ostream::operator<<();
      uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" last_error_message: ", 21);
      last_error_message = (const char *)e5rt_get_last_error_message();
      size_t v18 = strlen(last_error_message);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)last_error_message, v18);
LABEL_74:
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v95);
      goto LABEL_75;
    }
    goto LABEL_75;
  }
  isLowEndDevice = (kaldi::quasar *)e5rt_e5_compiler_options_create();
  if (isLowEndDevice)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v95);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95, (uint64_t)"e5rt_e5_compiler_options_create error, code: ", 45);
      uint64_t v20 = (void *)std::ostream::operator<<();
      int v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" last_error_message: ", 21);
      unsigned int v22 = (const char *)e5rt_get_last_error_message();
      size_t v23 = strlen(v22);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
      goto LABEL_74;
    }
LABEL_75:
    kaldi::quasar::releaseE5OptionsAndHandles(&v93, &v94);
    return 0;
  }
  uint64_t v89 = a3;
  uint64_t v24 = *a2;
  size_t v25 = a2[1];
  if (*a2 != v25)
  {
    uint64_t v26 = 0;
    while (1)
    {
      if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v95);
        uint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95, (uint64_t)"Setting compilation options computeDeviceType to: ", 50);
        int v28 = *((char *)v24 + 23);
        if (v28 >= 0) {
          uint64_t v29 = v24;
        }
        else {
          uint64_t v29 = *(unsigned __int16 **)v24;
        }
        if (v28 >= 0) {
          uint64_t v30 = *((unsigned __int8 *)v24 + 23);
        }
        else {
          uint64_t v30 = *((void *)v24 + 1);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v29, v30);
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v95);
      }
      if ((*((char *)v24 + 23) & 0x80000000) == 0) {
        break;
      }
      uint64_t v33 = *((void *)v24 + 1);
      if (v33 == 3 && **(_WORD **)v24 == 20547 && *(unsigned char *)(*(void *)v24 + 2) == 85) {
        goto LABEL_62;
      }
      if (v33 == 7)
      {
        if (**(_DWORD **)v24 == 1599426627 && *(_DWORD *)(*(void *)v24 + 3) == 1414283615) {
          goto LABEL_62;
        }
        uint64_t v33 = *((void *)v24 + 1);
      }
      if (v33 == 3)
      {
        if (**(_WORD **)v24 == 20033 && *(unsigned char *)(*(void *)v24 + 2) == 69)
        {
LABEL_63:
          v26 |= 4uLL;
          isLowEndDevice = (kaldi::quasar *)kaldi::quasar::isLowEndDevice(isLowEndDevice);
          if (isLowEndDevice) {
            isLowEndDevice = (kaldi::quasar *)e5rt_e5_compiler_options_set_force_classic_aot_old_hw();
          }
          goto LABEL_70;
        }
        if (*((void *)v24 + 1) == 3)
        {
          uint64_t v37 = *(unsigned __int16 **)v24;
LABEL_60:
          unsigned int v40 = bswap32(*v37) >> 16;
          if (v40 == 18256)
          {
            int v41 = *((unsigned __int8 *)v37 + 2) - 85;
          }
          else if (v40 >> 4 < 0x475)
          {
            int v41 = -1;
          }
          else
          {
            int v41 = 1;
          }
          if (!v41) {
            v26 |= 2uLL;
          }
        }
      }
LABEL_70:
      v24 += 12;
      if (v24 == v25) {
        goto LABEL_71;
      }
    }
    int v31 = *((unsigned __int8 *)v24 + 23);
    if (v31 == 3)
    {
      if (*v24 != 20547 || *((unsigned char *)v24 + 2) != 85)
      {
        if (*v24 == 20033 && *((unsigned char *)v24 + 2) == 69) {
          goto LABEL_63;
        }
        uint64_t v37 = v24;
        goto LABEL_60;
      }
    }
    else
    {
      if (v31 != 7) {
        goto LABEL_70;
      }
      if (*(_DWORD *)v24 != 1599426627 || *(_DWORD *)((char *)v24 + 3) != 1414283615) {
        goto LABEL_70;
      }
    }
LABEL_62:
    v26 |= 1uLL;
    goto LABEL_70;
  }
LABEL_71:
  if (e5rt_e5_compiler_options_set_compute_device_types_mask())
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v95);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95, (uint64_t)"e5rt_e5_compiler_options_set_compute_device_types_mask error, code: ", 68);
      uint64_t v42 = (void *)std::ostream::operator<<();
      uint64_t v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)" last_error_message: ", 21);
      uint64_t v44 = (const char *)e5rt_get_last_error_message();
      size_t v45 = strlen(v44);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)v44, v45);
      goto LABEL_74;
    }
    goto LABEL_75;
  }
  long long __p = 0;
  unsigned int v91 = 0;
  uint64_t v92 = 0;
  uint64_t v48 = *a5;
  uint64_t v49 = a5[1];
  if (*a5 != v49)
  {
    do
    {
      uint64_t v50 = v48;
      if (*(char *)(v48 + 23) < 0) {
        uint64_t v50 = *(void *)v48;
      }
      if (v91 >= v92)
      {
        uint64_t v52 = (v91 - __p) >> 3;
        if ((unint64_t)(v52 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v53 = (v92 - __p) >> 2;
        if (v53 <= v52 + 1) {
          unint64_t v53 = v52 + 1;
        }
        if ((unint64_t)(v92 - __p) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v54 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v54 = v53;
        }
        if (v54) {
          int v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v92, v54);
        }
        else {
          int v55 = 0;
        }
        __int16 v56 = (uint64_t *)&v55[8 * v52];
        *__int16 v56 = v50;
        long long v51 = (char *)(v56 + 1);
        long long v57 = v91;
        if (v91 != __p)
        {
          do
          {
            uint64_t v58 = *((void *)v57 - 1);
            v57 -= 8;
            *--__int16 v56 = v58;
          }
          while (v57 != __p);
          long long v57 = __p;
        }
        long long __p = (char *)v56;
        uint64_t v92 = &v55[8 * v54];
        if (v57) {
          operator delete(v57);
        }
      }
      else
      {
        *(void *)unsigned int v91 = v50;
        long long v51 = v91 + 8;
      }
      unsigned int v91 = v51;
      if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v95);
        long long v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95, (uint64_t)"Adding function to compile: ", 28);
        int v60 = *(char *)(v48 + 23);
        if (v60 >= 0) {
          uint64_t v61 = v48;
        }
        else {
          uint64_t v61 = *(void *)v48;
        }
        if (v60 >= 0) {
          uint64_t v62 = *(unsigned __int8 *)(v48 + 23);
        }
        else {
          uint64_t v62 = *(void *)(v48 + 8);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, v61, v62);
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v95);
      }
      v48 += 24;
    }
    while (v48 != v49);
    if (e5rt_e5_compiler_options_set_mil_entry_points())
    {
      if (kaldi::g_kaldi_verbose_level >= -1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v95);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95, (uint64_t)"e5rt_e5_compiler_options_set_mil_entry_points error, code: ", 59);
        unint64_t v63 = (void *)std::ostream::operator<<();
        uint64_t v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)" last_error_message: ", 21);
        uint64_t v65 = (const char *)e5rt_get_last_error_message();
        size_t v66 = strlen(v65);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)v65, v66);
        kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v95);
      }
LABEL_116:
      kaldi::quasar::releaseE5OptionsAndHandles(&v93, &v94);
      goto LABEL_117;
    }
  }
  if (a4 == 2)
  {
    uint64_t v67 = v89;
    if (e5rt_e5_compiler_options_set_force_fetch_from_cache())
    {
      if (kaldi::g_kaldi_verbose_level >= -1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v95);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95, (uint64_t)"e5rt_e5_compiler_options_set_force_fetch_from_cache error, code: ", 65);
        int v72 = (void *)std::ostream::operator<<();
        uint64_t v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)" last_error_message: ", 21);
        float v74 = (const char *)e5rt_get_last_error_message();
        size_t v75 = strlen(v74);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)v74, v75);
        kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v95);
      }
      goto LABEL_116;
    }
  }
  else
  {
    uint64_t v67 = v89;
    if (a4 == 1 && e5rt_e5_compiler_options_set_force_recompilation())
    {
      if (kaldi::g_kaldi_verbose_level >= -1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v95);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95, (uint64_t)"e5rt_e5_compiler_options_set_force_recompilation error, code: ", 62);
        std::string::size_type v68 = (void *)std::ostream::operator<<();
        int v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)" last_error_message: ", 21);
        uint64_t v70 = (const char *)e5rt_get_last_error_message();
        size_t v71 = strlen(v70);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)v70, v71);
        kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v95);
      }
      goto LABEL_116;
    }
  }
  int v76 = e5rt_e5_compiler_compile();
  kaldi::quasar::releaseE5OptionsAndHandles(&v93, &v94);
  if (v76)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v95);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95, (uint64_t)"e5rt_e5_compiler_compile error, code: ", 38);
      __int16 v77 = (void *)std::ostream::operator<<();
      __int16 v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)" last_error_message: ", 21);
      char v79 = (const char *)e5rt_get_last_error_message();
      size_t v80 = strlen(v79);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)v79, v80);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v95);
    }
  }
  else
  {
    if (*v67)
    {
      if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v95);
        uint64_t v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95, (uint64_t)"Ondevice compilation succeeded for v2 model path: ", 50);
        int v82 = *(char *)(a1 + 23);
        if (v82 >= 0) {
          uint64_t v83 = a1;
        }
        else {
          uint64_t v83 = *(void *)a1;
        }
        if (v82 >= 0) {
          uint64_t v84 = *(unsigned __int8 *)(a1 + 23);
        }
        else {
          uint64_t v84 = *(void *)(a1 + 8);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, v83, v84);
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v95);
      }
      uint64_t v46 = 1;
      goto LABEL_118;
    }
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v95);
      uint64_t v85 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95, (uint64_t)"Program library NULL, Ondevice compilation fail for v2 model path: ", 67);
      int v86 = *(char *)(a1 + 23);
      if (v86 >= 0) {
        uint64_t v87 = a1;
      }
      else {
        uint64_t v87 = *(void *)a1;
      }
      if (v86 >= 0) {
        uint64_t v88 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        uint64_t v88 = *(void *)(a1 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, v87, v88);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v95);
    }
  }
LABEL_117:
  uint64_t v46 = 0;
LABEL_118:
  if (__p) {
    operator delete(__p);
  }
  return v46;
}

void sub_1B215F3BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *kaldi::quasar::releaseE5OptionsAndHandles(void *result, void *a2)
{
  if (*result) {
    double result = (void *)e5rt_e5_compiler_options_release();
  }
  if (*a2)
  {
    return (void *)MEMORY[0x1F4118198](a2);
  }
  return result;
}

void kaldi::quasar::deduceComputePlatformsWithBestEffort(uint64_t a1, char a2)
{
  kaldi::quasar::EspressoV2NetworkConfig::EspressoV2NetworkConfig(v9, a1);
  v9[33] = a2;
  char v8 = 0;
  kaldi::Input::Input(v7, a1, &v8);
  long long v4 = (void *)kaldi::Input::Stream((kaldi::Input *)v7);
  std::string::__init_with_sentinel[abi:ne180100]<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>(&v6, *(void **)((char *)v4 + *(void *)(*v4 - 24) + 40), 0);
  kaldi::Input::Close((kaldi::Input *)v7);
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](&v5, "</Engine>", 0);
}

void sub_1B215F880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, std::locale a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57,char a58,uint64_t a59,void *a60)
{
  a9 = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  std::istringstream::~istringstream((uint64_t)&a15);
  if (a57 < 0) {
    operator delete(__p);
  }
  kaldi::Input::~Input((kaldi::Input *)&a58);
  kaldi::quasar::EspressoV2NetworkConfig::~EspressoV2NetworkConfig(&a60);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::purgeE5BundlesForMil(uint64_t a1)
{
  void v16[34] = 0;
  if (e5rt_e5_compiler_create())
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
      char v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"purgeE5BundlesForMil failed for: ", 33);
      int v3 = *(char *)(a1 + 23);
      if (v3 >= 0) {
        uint64_t v4 = a1;
      }
      else {
        uint64_t v4 = *(void *)a1;
      }
      if (v3 >= 0) {
        uint64_t v5 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        uint64_t v5 = *(void *)(a1 + 8);
      }
LABEL_17:
      int v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, v4, v5);
      char v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" - ", 3);
      last_error_message = (const char *)e5rt_get_last_error_message();
      size_t v10 = strlen(last_error_message);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)last_error_message, v10);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
      return 0;
    }
    return 0;
  }
  if (e5rt_e5_compiler_purge_e5_bundles_for_input_model())
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
      char v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"purgeE5BundlesForMil failed for : ", 34);
      int v6 = *(char *)(a1 + 23);
      if (v6 >= 0) {
        uint64_t v4 = a1;
      }
      else {
        uint64_t v4 = *(void *)a1;
      }
      if (v6 >= 0) {
        uint64_t v5 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        uint64_t v5 = *(void *)(a1 + 8);
      }
      goto LABEL_17;
    }
    return 0;
  }
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"purged E5 bundles for: ", 23);
    int v13 = *(char *)(a1 + 23);
    if (v13 >= 0) {
      uint64_t v14 = a1;
    }
    else {
      uint64_t v14 = *(void *)a1;
    }
    if (v13 >= 0) {
      uint64_t v15 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      uint64_t v15 = *(void *)(a1 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v16);
  }
  return 1;
}

void sub_1B215FAF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)va);
  _Unwind_Resume(a1);
}

BOOL std::string::__init_with_sentinel[abi:ne180100]<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>(std::string *a1, void *a2, void *a3)
{
  int v11 = a3;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = 0;
  while (1)
  {
    if (a2)
    {
      if (a2[3] == a2[4])
      {
        int v6 = (*(uint64_t (**)(void *))(*a2 + 72))(a2);
        int v5 = v6 == -1;
        if (v6 == -1) {
          a2 = 0;
        }
      }
      else
      {
        int v5 = 0;
      }
    }
    else
    {
      int v5 = 1;
    }
    BOOL result = std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100](&v11);
    if (v5 == result) {
      break;
    }
    char v8 = (std::string::value_type *)a2[3];
    if (v8 == (std::string::value_type *)a2[4]) {
      std::string::value_type v9 = (*(uint64_t (**)(void *))(*a2 + 72))(a2);
    }
    else {
      std::string::value_type v9 = *v8;
    }
    std::string::push_back(a1, v9);
    uint64_t v10 = a2[3];
    if (v10 == a2[4]) {
      (*(void (**)(void *))(*a2 + 80))(a2);
    }
    else {
      a2[3] = v10 + 1;
    }
  }
  return result;
}

void sub_1B215FC5C(void *a1)
{
  __cxa_begin_catch(a1);
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  __cxa_rethrow();
}

void sub_1B215FC78(_Unwind_Exception *a1)
{
}

void sub_1B215FD88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void QuasarCPDecTranslator_new()
{
}

void sub_1B215FF0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long __p, long long a12, long long a13, long long a14, long long a15, long long a16, long long a17, long long a18, long long a19, long long a20,long long a21,long long a22,long long a23,long long a24,long long a25,long long a26,long long a27)
{
  int v31 = *(std::__shared_weak_count **)(v28 - 104);
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  if (*(char *)(v28 - 73) < 0) {
    operator delete(*(void **)(v28 - 96));
  }
  if (*(char *)(v28 - 49) < 0) {
    operator delete(*(void **)(v28 - 72));
  }
  if (SBYTE7(a12) < 0) {
    operator delete((void *)__p);
  }
  MEMORY[0x1B3EA8670](v27, 0x10B3C40CFFE25C2);
  if (a2 == 1)
  {
    uint64_t v32 = (quasar *)__cxa_begin_catch(a1);
    uint64_t v33 = v32;
    if (quasar::gLogLevel >= 1)
    {
      a26 = 0u;
      a27 = 0u;
      a24 = 0u;
      a25 = 0u;
      a22 = 0u;
      a23 = 0u;
      a20 = 0u;
      a21 = 0u;
      a18 = 0u;
      a19 = 0u;
      a16 = 0u;
      a17 = 0u;
      a14 = 0u;
      a15 = 0u;
      a12 = 0u;
      a13 = 0u;
      long long __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      unint64_t v34 = (const char *)(*(uint64_t (**)(quasar *))(*(void *)v33 + 16))(v33);
      size_t v35 = strlen(v34);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)v34, v35);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&__p);
    }
    char v36 = quasar::QuasarCLogger(v32);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_FAULT)) {
      QuasarCPDecTranslator_new_cold_1();
    }
    __cxa_end_catch();
    JUMPOUT(0x1B215FEF0);
  }
  _Unwind_Resume(a1);
}

uint64_t QuasarCPDecTranslator_delete(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

char *QuasarCPDecTranslator_translate(uint64_t a1, char *a2)
{
  *(void *)&long long v14 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(&v12, a2);
  int v6 = 0;
  int v7 = 0;
  char v8 = 0;
  *(void *)__s1 = &v6;
  char v10 = 0;
  int v6 = (std::string *)operator new(0x18uLL);
  int v7 = v6;
  char v8 = v6 + 1;
  int v7 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v8, &v12, &v14, v6);
  if (v13 < 0) {
    operator delete((void *)v12);
  }
  (*(void (**)(long long *__return_ptr, uint64_t, std::string **, void, void, uint64_t))(*(void *)a1 + 16))(&v12, a1, &v6, 0, 0, 1);
  if ((void)v12 == *((void *)&v12 + 1))
  {
    int v3 = 0;
  }
  else
  {
    quasar::TranslationPhrase::convertTokensToString((uint64_t *)__s1, (quasar::TranslationPhrase *)v12);
    if (v11 < 0)
    {
      uint64_t v4 = *(char **)__s1;
      int v3 = strdup(*(const char **)__s1);
      operator delete(v4);
    }
    else
    {
      int v3 = strdup(__s1);
    }
  }
  *(void *)__s1 = &v12;
  std::vector<quasar::TranslationPhrase>::__destroy_vector::operator()[abi:ne180100]((void ***)__s1);
  *(void *)&long long v12 = &v6;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
  return v3;
}

void sub_1B2160224(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10, long long a11, long long a12, long long a13, long long a14, long long a15, long long a16, long long a17, long long a18, long long a19, long long a20,long long a21,long long a22,long long a23,long long a24,long long a25)
{
  *(void *)(v25 - 88) = v25 - 64;
  std::vector<quasar::TranslationPhrase>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 88));
  *(void *)(v25 - 64) = &a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 64));
  if (a2 == 1)
  {
    uint64_t v28 = (quasar *)__cxa_begin_catch(a1);
    uint64_t v29 = v28;
    if (quasar::gLogLevel >= 1)
    {
      a24 = 0u;
      a25 = 0u;
      a22 = 0u;
      a23 = 0u;
      a20 = 0u;
      a21 = 0u;
      a18 = 0u;
      a19 = 0u;
      a16 = 0u;
      a17 = 0u;
      a14 = 0u;
      a15 = 0u;
      a12 = 0u;
      a13 = 0u;
      a10 = 0u;
      a11 = 0u;
      a9 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
      uint64_t v30 = (const char *)(*(uint64_t (**)(quasar *))(*(void *)v29 + 16))(v29);
      size_t v31 = strlen(v30);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a9, (uint64_t)v30, v31);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a9);
    }
    uint64_t v32 = quasar::QuasarCLogger(v28);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_FAULT)) {
      QuasarCPDecTranslator_new_cold_1();
    }
    __cxa_end_catch();
    JUMPOUT(0x1B21601F0);
  }
  _Unwind_Resume(a1);
}

uint64_t QuasarCPDecTranslator_translateResult(uint64_t a1, char *a2)
{
  *(void *)&long long v11 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(&v9, a2);
  uint64_t v4 = 0;
  int v5 = 0;
  int v6 = 0;
  int v7 = (void **)&v4;
  char v8 = 0;
  uint64_t v4 = (std::string *)operator new(0x18uLL);
  int v5 = v4;
  int v6 = v4 + 1;
  int v5 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v6, &v9, &v11, v4);
  if (v10 < 0) {
    operator delete((void *)v9);
  }
  (*(void (**)(long long *__return_ptr, uint64_t, std::string **, void, void, uint64_t))(*(void *)a1 + 16))(&v9, a1, &v4, 0, 0, 1);
  if ((void)v9 != *((void *)&v9 + 1)) {
    operator new();
  }
  int v7 = (void **)&v9;
  std::vector<quasar::TranslationPhrase>::__destroy_vector::operator()[abi:ne180100](&v7);
  *(void *)&long long v9 = &v4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v9);
  return 0;
}

void sub_1B21604FC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10, long long a11, long long a12, long long a13, long long a14, long long a15, long long a16, long long a17, long long a18, long long a19, long long a20,long long a21,long long a22,long long a23,long long a24,long long a25)
{
  uint64_t v28 = v25;
  MEMORY[0x1B3EA8670](v28, 0x1032C402CDA8D36);
  *(void *)(v26 - 8std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = v26 - 64;
  std::vector<quasar::TranslationPhrase>::__destroy_vector::operator()[abi:ne180100]((void ***)(v26 - 80));
  *(void *)(v26 - 64) = &a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v26 - 64));
  if (a2 == 1)
  {
    uint64_t v30 = (quasar *)__cxa_begin_catch(a1);
    size_t v31 = v30;
    if (quasar::gLogLevel >= 1)
    {
      a24 = 0u;
      a25 = 0u;
      a22 = 0u;
      a23 = 0u;
      a20 = 0u;
      a21 = 0u;
      a18 = 0u;
      a19 = 0u;
      a16 = 0u;
      a17 = 0u;
      a14 = 0u;
      a15 = 0u;
      a12 = 0u;
      a13 = 0u;
      a10 = 0u;
      a11 = 0u;
      a9 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
      uint64_t v32 = (const char *)(*(uint64_t (**)(quasar *))(*(void *)v31 + 16))(v31);
      size_t v33 = strlen(v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a9, (uint64_t)v32, v33);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a9);
    }
    unint64_t v34 = quasar::QuasarCLogger(v30);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_FAULT)) {
      QuasarCPDecTranslator_new_cold_1();
    }
    __cxa_end_catch();
    JUMPOUT(0x1B21604C8);
  }
  _Unwind_Resume(a1);
}

uint64_t QuasarCPDecTranslator_align(uint64_t a1, char *a2, char *a3)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  v29[0] = 0;
  v29[1] = 0;
  uint64_t v28 = (uint64_t *)v29;
  unint64_t v11 = 0xBF80000000000000;
  char v12 = 0;
  char v18 = 0;
  char v19 = 0;
  char v20 = 0;
  long long v13 = 0u;
  *(_OWORD *)long long v14 = 0u;
  long long v15 = 0u;
  LOBYTE(v16) = 0;
  __int16 v21 = 1;
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  long long v42 = *(_OWORD *)__p;
  *(void *)&long long v43 = v27;
  __p[1] = 0;
  uint64_t v27 = 0;
  __p[0] = 0;
  WORD4(v43) = 0;
  *(void *)&long long v45 = 0;
  long long v44 = 0uLL;
  *((void *)&v45 + 1) = 3212836864;
  LODWORD(v46) = -1;
  *((void *)&v13 + 1) = std::vector<quasar::TranslationToken>::__push_back_slow_path<quasar::TranslationToken>((uint64_t *)&v13, &v42);
  if ((void)v44)
  {
    *((void *)&v44 + 1) = v44;
    operator delete((void *)v44);
  }
  if (SBYTE7(v43) < 0) {
    operator delete((void *)v42);
  }
  if (SHIBYTE(v27) < 0) {
    operator delete(__p[0]);
  }
  quasar::TranslationPhrase::TranslationPhrase((quasar::TranslationPhrase *)&v42, (const quasar::TranslationPhrase *)&v11);
  std::string::basic_string[abi:ne180100]<0>(v31, "source");
  v22[0] = v31;
  int v5 = std::__tree<std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v28, (const void **)v31, (uint64_t)&std::piecewise_construct, (_OWORD **)v22);
  std::vector<quasar::TranslationPhrase>::__assign_with_size[abi:ne180100]<quasar::TranslationPhrase const*,quasar::TranslationPhrase const*>((uint64_t)v5 + 56, (quasar::TranslationPhrase *)&v42, (quasar::TranslationPhrase *)&v52, 1uLL);
  if (SHIBYTE(v32) < 0) {
    operator delete(v31[0]);
  }
  if (v50)
  {
    v31[0] = (quasar::TranslationPhrase *)v49;
    std::vector<quasar::AlternativeSelectionSpan>::__destroy_vector::operator()[abi:ne180100]((void ***)v31);
  }
  if (v48 && v47 < 0) {
    operator delete(v46);
  }
  if (SHIBYTE(v45) < 0) {
    operator delete(*((void **)&v44 + 1));
  }
  v31[0] = (quasar::TranslationPhrase *)&v43;
  std::vector<quasar::TranslationToken>::__destroy_vector::operator()[abi:ne180100]((void ***)v31);
  *(void *)&long long v42 = 0xBF80000000000000;
  BYTE8(v42) = 0;
  char v48 = 0;
  v49[0] = 0;
  char v50 = 0;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  LOBYTE(v46) = 0;
  __int16 v51 = 1;
  std::string::basic_string[abi:ne180100]<0>(&v24, a3);
  *(_OWORD *)size_t v31 = v24;
  uint64_t v32 = v25;
  uint64_t v25 = 0;
  long long v24 = 0uLL;
  __int16 v33 = 0;
  v34[1] = 0;
  uint64_t v35 = 0;
  v34[0] = 0;
  uint64_t v36 = 3212836864;
  LODWORD(v37) = -1;
  uint64_t v6 = *((void *)&v43 + 1);
  if (*((void *)&v43 + 1) >= (unint64_t)v44)
  {
    *((void *)&v43 + 1) = std::vector<quasar::TranslationToken>::__push_back_slow_path<quasar::TranslationToken>((uint64_t *)&v43, (long long *)v31);
    if (v34[0])
    {
      v34[1] = v34[0];
      operator delete(v34[0]);
    }
  }
  else
  {
    long long v7 = *(_OWORD *)v31;
    *(void *)(*((void *)&v43 + 1) + 16) = v32;
    *(_OWORD *)uint64_t v6 = v7;
    v31[1] = 0;
    uint64_t v32 = 0;
    v31[0] = 0;
    *(_WORD *)(v6 + 24) = v33;
    *(void *)(v6 + 4std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = 0;
    *(void *)(v6 + 48) = 0;
    *(void *)(v6 + 32) = 0;
    *(_OWORD *)(v6 + 32) = *(_OWORD *)v34;
    *(void *)(v6 + 48) = v35;
    v34[0] = 0;
    v34[1] = 0;
    uint64_t v35 = 0;
    uint64_t v8 = v36;
    *(_DWORD *)(v6 + 64) = v37;
    *(void *)(v6 + 56) = v8;
    *((void *)&v43 + 1) = v6 + 72;
  }
  if (SHIBYTE(v32) < 0) {
    operator delete(v31[0]);
  }
  if (SHIBYTE(v25) < 0) {
    operator delete((void *)v24);
  }
  quasar::TranslationPhrase::TranslationPhrase((quasar::TranslationPhrase *)v31, (const quasar::TranslationPhrase *)&v42);
  std::string::basic_string[abi:ne180100]<0>(v22, "target");
  uint64_t v30 = v22;
  long long v9 = std::__tree<std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v28, (const void **)v22, (uint64_t)&std::piecewise_construct, (_OWORD **)&v30);
  std::vector<quasar::TranslationPhrase>::__assign_with_size[abi:ne180100]<quasar::TranslationPhrase const*,quasar::TranslationPhrase const*>((uint64_t)v9 + 56, (quasar::TranslationPhrase *)v31, (quasar::TranslationPhrase *)&v41, 1uLL);
  if (v23 < 0) {
    operator delete(v22[0]);
  }
  if (v40[24])
  {
    v22[0] = v40;
    std::vector<quasar::AlternativeSelectionSpan>::__destroy_vector::operator()[abi:ne180100]((void ***)v22);
  }
  if (v39 && v38 < 0) {
    operator delete(v37);
  }
  if (SHIBYTE(v36) < 0) {
    operator delete(v34[1]);
  }
  v22[0] = &v32;
  std::vector<quasar::TranslationToken>::__destroy_vector::operator()[abi:ne180100]((void ***)v22);
  (*(void (**)(quasar::TranslationPhrase **__return_ptr, uint64_t, uint64_t **, void, void))(*(void *)a1 + 40))(v31, a1, &v28, 0, 0);
  if (v31[0] != v31[1]) {
    operator new();
  }
  v22[0] = v31;
  std::vector<quasar::TranslationPhrase>::__destroy_vector::operator()[abi:ne180100]((void ***)v22);
  if (v50)
  {
    v31[0] = (quasar::TranslationPhrase *)v49;
    std::vector<quasar::AlternativeSelectionSpan>::__destroy_vector::operator()[abi:ne180100]((void ***)v31);
  }
  if (v48 && v47 < 0) {
    operator delete(v46);
  }
  if (SHIBYTE(v45) < 0) {
    operator delete(*((void **)&v44 + 1));
  }
  v31[0] = (quasar::TranslationPhrase *)&v43;
  std::vector<quasar::TranslationToken>::__destroy_vector::operator()[abi:ne180100]((void ***)v31);
  if (v20)
  {
    *(void *)&long long v42 = &v19;
    std::vector<quasar::AlternativeSelectionSpan>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
  }
  if (v18 && v17 < 0) {
    operator delete(v16);
  }
  if (SHIBYTE(v15) < 0) {
    operator delete(v14[1]);
  }
  *(void *)&long long v42 = &v13;
  std::vector<quasar::TranslationToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
  std::__tree<std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>>>::destroy((uint64_t)&v28, v29[0]);
  return 0;
}

void sub_1B2160C2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, long long a10, long long a11, long long a12, long long a13, long long a14, long long a15, long long a16, long long a17, long long a18, long long a19, long long a20,long long a21,long long a22,long long a23,long long a24,long long a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,char a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  quasar::TranslationToken::~TranslationToken((quasar::TranslationToken *)&a49);
  if (a37 < 0) {
    operator delete(__p);
  }
  quasar::TranslationPhrase::~TranslationPhrase((quasar::TranslationPhrase *)(v54 - 224));
  quasar::TranslationPhrase::~TranslationPhrase((quasar::TranslationPhrase *)&a9);
  std::__tree<std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>>>::destroy((uint64_t)&a44, a45);
  if (a2 == 1)
  {
    long long v57 = (quasar *)__cxa_begin_catch(a1);
    uint64_t v58 = v57;
    if (quasar::gLogLevel >= 1)
    {
      a24 = 0u;
      a25 = 0u;
      a22 = 0u;
      a23 = 0u;
      a20 = 0u;
      a21 = 0u;
      a18 = 0u;
      a19 = 0u;
      a16 = 0u;
      a17 = 0u;
      a14 = 0u;
      a15 = 0u;
      a12 = 0u;
      a13 = 0u;
      a10 = 0u;
      a11 = 0u;
      a9 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
      long long v59 = (const char *)(*(uint64_t (**)(quasar *))(*(void *)v58 + 16))(v58);
      size_t v60 = strlen(v59);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a9, (uint64_t)v59, v60);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a9);
    }
    uint64_t v61 = quasar::QuasarCLogger(v57);
    if (os_log_type_enabled(v61, OS_LOG_TYPE_FAULT)) {
      QuasarCPDecTranslator_new_cold_1();
    }
    __cxa_end_catch();
    JUMPOUT(0x1B2160BECLL);
  }
  _Unwind_Resume(a1);
}

uint64_t QuasarCPDecTranslationResult_delete(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (*(unsigned char *)(result + 120))
    {
      char v2 = (void **)(result + 96);
      std::vector<quasar::AlternativeSelectionSpan>::__destroy_vector::operator()[abi:ne180100](&v2);
    }
    if (*(unsigned char *)(v1 + 88) && *(char *)(v1 + 87) < 0) {
      operator delete(*(void **)(v1 + 64));
    }
    if (*(char *)(v1 + 63) < 0) {
      operator delete(*(void **)(v1 + 40));
    }
    char v2 = (void **)(v1 + 16);
    std::vector<quasar::TranslationToken>::__destroy_vector::operator()[abi:ne180100](&v2);
    return MEMORY[0x1B3EA8670](v1, 0x1032C402CDA8D36);
  }
  return result;
}

float QuasarCPDecTranslationResult_score(uint64_t a1)
{
  return *(float *)a1;
}

float QuasarCPDecTranslationResult_confidence(uint64_t a1)
{
  return *(float *)(a1 + 4);
}

uint64_t QuasarCPDecTranslationResult_isLowConfidence(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

char *QuasarCPDecTranslationResult_string(quasar::TranslationPhrase *a1)
{
  quasar::TranslationPhrase::convertTokensToString((uint64_t *)__s1, a1);
  if ((v5 & 0x80000000) == 0) {
    return strdup((const char *)__s1);
  }
  char v2 = __s1[0];
  uint64_t v1 = strdup(__s1[0]);
  operator delete(v2);
  return v1;
}

uint64_t QuasarCPDecTranslationResult_numberOfTokens(uint64_t a1)
{
  return 954437177 * ((*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3);
}

float QuasarCPDecTranslationResult_tokenScore(uint64_t a1, unsigned int a2)
{
  if ((a2 & 0x80000000) != 0
    || (uint64_t v2 = *(void *)(a1 + 16), 0x8E38E38E38E38E39 * ((*(void *)(a1 + 24) - v2) >> 3) <= a2))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "tokenScore: tokenIndex argument is out of range");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E5FFDF20, MEMORY[0x1E4FBA1D0]);
  }
  return *(float *)(v2 + 72 * a2 + 60);
}

void sub_1B2161138(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, long long a10, long long a11, long long a12, long long a13, long long a14, long long a15, long long a16, long long a17, long long a18, long long a19, long long a20,long long a21,long long a22,long long a23,long long a24,long long a25)
{
  if (a2 == 1)
  {
    uint64_t v25 = (quasar *)__cxa_begin_catch(exception_object);
    uint64_t v26 = v25;
    if (quasar::gLogLevel >= 1)
    {
      a24 = 0u;
      a25 = 0u;
      a22 = 0u;
      a23 = 0u;
      a20 = 0u;
      a21 = 0u;
      a18 = 0u;
      a19 = 0u;
      a16 = 0u;
      a17 = 0u;
      a14 = 0u;
      a15 = 0u;
      a12 = 0u;
      a13 = 0u;
      a10 = 0u;
      a11 = 0u;
      a9 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
      uint64_t v27 = (const char *)(*(uint64_t (**)(quasar *))(*(void *)v26 + 16))(v26);
      size_t v28 = strlen(v27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a9, (uint64_t)v27, v28);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a9);
    }
    uint64_t v29 = quasar::QuasarCLogger(v25);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_FAULT)) {
      QuasarCPDecTranslator_new_cold_1();
    }
    __cxa_end_catch();
    JUMPOUT(0x1B21610CCLL);
  }
  _Unwind_Resume(exception_object);
}

char *QuasarCPDecTranslationResult_tokenString(uint64_t a1, unsigned int a2)
{
  if ((a2 & 0x80000000) != 0
    || (uint64_t v2 = *(void *)(a1 + 16), 0x8E38E38E38E38E39 * ((*(void *)(a1 + 24) - v2) >> 3) <= a2))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "tokenString: tokenIndex argument is out of range");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E5FFDF20, MEMORY[0x1E4FBA1D0]);
  }
  int v3 = (long long *)(v2 + 72 * a2);
  if (*((char *)v3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(__s1, *(const std::string::value_type **)v3, *((void *)v3 + 1));
  }
  else
  {
    long long v4 = *v3;
    __s1[0].__r_.__value_.__r.__words[2] = *((void *)v3 + 2);
    *(_OWORD *)&__s1[0].__r_.__value_.__l.__data_ = v4;
  }
  if ((SHIBYTE(__s1[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    return strdup((const char *)__s1);
  }
  uint64_t v6 = (void *)__s1[0].__r_.__value_.__r.__words[0];
  char v5 = strdup(__s1[0].__r_.__value_.__l.__data_);
  operator delete(v6);
  return v5;
}

void sub_1B2161364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, long long a10, long long a11, long long a12, long long a13, long long a14, long long a15, long long a16, long long a17, long long a18, long long a19, long long a20,long long a21,long long a22,long long a23,long long a24,long long a25)
{
  if (a2 == 1)
  {
    uint64_t v25 = (quasar *)__cxa_begin_catch(exception_object);
    uint64_t v26 = v25;
    if (quasar::gLogLevel >= 1)
    {
      a24 = 0u;
      a25 = 0u;
      a22 = 0u;
      a23 = 0u;
      a20 = 0u;
      a21 = 0u;
      a18 = 0u;
      a19 = 0u;
      a16 = 0u;
      a17 = 0u;
      a14 = 0u;
      a15 = 0u;
      a12 = 0u;
      a13 = 0u;
      a10 = 0u;
      a11 = 0u;
      a9 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
      uint64_t v27 = (const char *)(*(uint64_t (**)(quasar *))(*(void *)v26 + 16))(v26);
      size_t v28 = strlen(v27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a9, (uint64_t)v27, v28);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a9);
    }
    uint64_t v29 = quasar::QuasarCLogger(v25);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_FAULT)) {
      QuasarCPDecTranslator_new_cold_1();
    }
    __cxa_end_catch();
    JUMPOUT(0x1B21612F4);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<quasar::TranslationPhrase>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    char v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 136;
        std::allocator<quasar::TranslationPhrase>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      char v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<quasar::TranslationPhrase>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 120))
  {
    int v3 = (void **)(a2 + 96);
    std::vector<quasar::AlternativeSelectionSpan>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  if (*(unsigned char *)(a2 + 88) && *(char *)(a2 + 87) < 0) {
    operator delete(*(void **)(a2 + 64));
  }
  if (*(char *)(a2 + 63) < 0) {
    operator delete(*(void **)(a2 + 40));
  }
  int v3 = (void **)(a2 + 16);
  std::vector<quasar::TranslationToken>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void std::__tree<std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<quasar::TranslationPhrase>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<quasar::TranslationPhrase>>,0>(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 24);
  std::vector<quasar::TranslationPhrase>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

uint64_t std::vector<quasar::TranslationToken>::__push_back_slow_path<quasar::TranslationToken>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x38E38E38E38E38ELL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x8E38E38E38E38E39 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x1C71C71C71C71C7) {
    unint64_t v9 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v9 = v5;
  }
  void v16[4] = a1 + 2;
  if (v9) {
    char v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TranslationToken>>(v7, v9);
  }
  else {
    char v10 = 0;
  }
  unint64_t v11 = &v10[72 * v4];
  v16[0] = v10;
  v16[1] = v11;
  void v16[3] = &v10[72 * v9];
  long long v12 = *a2;
  *((void *)v11 + 2) = *((void *)a2 + 2);
  *(_OWORD *)unint64_t v11 = v12;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  *((_WORD *)v11 + 12) = *((_WORD *)a2 + 12);
  *((void *)v11 + 5) = 0;
  *((void *)v11 + 6) = 0;
  *((void *)v11 + 4) = 0;
  *((_OWORD *)v11 + 2) = a2[2];
  *((void *)v11 + 6) = *((void *)a2 + 6);
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  *((void *)a2 + 6) = 0;
  uint64_t v13 = *((void *)a2 + 7);
  *((_DWORD *)v11 + 16) = *((_DWORD *)a2 + 16);
  *((void *)v11 + 7) = v13;
  v16[2] = v11 + 72;
  std::vector<quasar::TranslationToken>::__swap_out_circular_buffer(a1, v16);
  uint64_t v14 = a1[1];
  std::__split_buffer<quasar::TranslationToken>::~__split_buffer(v16);
  return v14;
}

void sub_1B216177C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::TranslationToken>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

_OWORD *std::__tree<std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v6 = (void **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    unint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = operator new(0x50uLL);
    v12[1] = a1 + 1;
    unint64_t v9 = *a4;
    uint64_t v10 = *((void *)*a4 + 2);
    void v7[2] = **a4;
    *((void *)v7 + 6) = v10;
    v9[1] = 0;
    void v9[2] = 0;
    *unint64_t v9 = 0;
    *((void *)v7 + 8) = 0;
    *((void *)v7 + 9) = 0;
    *((void *)v7 + 7) = 0;
    char v13 = 1;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v14, v8, (uint64_t *)v7);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>,void *>>>>::reset[abi:ne180100]((uint64_t)v12, 0);
  }
  return v7;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<quasar::TranslationPhrase>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void std::vector<quasar::TranslationPhrase>::__assign_with_size[abi:ne180100]<quasar::TranslationPhrase const*,quasar::TranslationPhrase const*>(uint64_t a1, quasar::TranslationPhrase *a2, quasar::TranslationPhrase *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  unint64_t v9 = *(void **)a1;
  if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    std::vector<quasar::TranslationPhrase>::__vdeallocate((void **)a1);
    if (a4 > 0x1E1E1E1E1E1E1E1) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xE1E1E1E1E1E1E1E2 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0xF0F0F0F0F0F0F0) {
      unint64_t v11 = 0x1E1E1E1E1E1E1E1;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<quasar::TranslationTokenInternal>::__vallocate[abi:ne180100]((void *)a1, v11);
    long long v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::TranslationPhrase>,quasar::TranslationPhrase const*,quasar::TranslationPhrase const*,quasar::TranslationPhrase*>(v8, a2, a3, *(quasar::TranslationPhrase **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    char v13 = (quasar::TranslationPhrase *)((char *)a2 + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::TranslationPhrase const*,quasar::TranslationPhrase const*,quasar::TranslationPhrase*>((uint64_t)&v17, (uint64_t)a2, (uint64_t)v13, (uint64_t)v9);
    long long v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::TranslationPhrase>,quasar::TranslationPhrase const*,quasar::TranslationPhrase const*,quasar::TranslationPhrase*>(v8, v13, a3, *(quasar::TranslationPhrase **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::TranslationPhrase const*,quasar::TranslationPhrase const*,quasar::TranslationPhrase*>((uint64_t)&v18, (uint64_t)a2, (uint64_t)a3, (uint64_t)v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 136;
      std::allocator<quasar::TranslationPhrase>::destroy[abi:ne180100](v8, v16);
    }
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_1B2161A24(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B2161A2C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<quasar::TranslationPhrase>::__vdeallocate(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    unint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 136;
        std::allocator<quasar::TranslationPhrase>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      unint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

quasar::TranslationPhrase *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::TranslationPhrase>,quasar::TranslationPhrase const*,quasar::TranslationPhrase const*,quasar::TranslationPhrase*>(uint64_t a1, quasar::TranslationPhrase *a2, quasar::TranslationPhrase *a3, quasar::TranslationPhrase *this)
{
  unint64_t v4 = this;
  unint64_t v10 = this;
  unint64_t v11 = this;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      quasar::TranslationPhrase::TranslationPhrase(v4, v6);
      uint64_t v6 = (const quasar::TranslationPhrase *)((char *)v6 + 136);
      unint64_t v4 = (quasar::TranslationPhrase *)((char *)v11 + 136);
      unint64_t v11 = (quasar::TranslationPhrase *)((char *)v11 + 136);
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TranslationPhrase>,quasar::TranslationPhrase*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B2161B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TranslationPhrase>,quasar::TranslationPhrase*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TranslationPhrase>,quasar::TranslationPhrase*>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TranslationPhrase>,quasar::TranslationPhrase*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 136;
      std::allocator<quasar::TranslationPhrase>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::TranslationPhrase const*,quasar::TranslationPhrase const*,quasar::TranslationPhrase*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 == a3) {
    return a2;
  }
  uint64_t v5 = a3;
  uint64_t v6 = a2 + 24;
  do
  {
    uint64_t v8 = v6 - 24;
    uint64_t v7 = *(void *)(v6 - 24);
    *(unsigned char *)(a4 + 8) = *(unsigned char *)(v6 - 16);
    *(void *)a4 = v7;
    if (a4 != v6 - 24) {
      std::vector<quasar::TranslationToken>::__assign_with_size[abi:ne180100]<quasar::TranslationToken*,quasar::TranslationToken*>(a4 + 16, *(std::string **)(v6 - 8), *(long long **)v6, 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)v6 - *(void *)(v6 - 8)) >> 3));
    }
    std::string::operator=((std::string *)(a4 + 40), (const std::string *)(v6 + 16));
    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::string,false> const&>((std::string *)(a4 + 64), (const std::string *)(v6 + 40));
    std::__optional_storage_base<std::vector<quasar::AlternativeSelectionSpan>,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::vector<quasar::AlternativeSelectionSpan>,false> const&>(a4 + 96, v6 + 72);
    *(_WORD *)(a4 + 128) = *(_WORD *)(v6 + 104);
    a4 += 136;
    v6 += 136;
  }
  while (v8 + 136 != v5);
  return v5;
}

uint64_t kaldi::quasar::BNNSGraphNetworkConfig::BNNSGraphNetworkConfig(uint64_t a1, long long *a2, long long *a3)
{
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 32) = 0;
  *(void *)a1 = &unk_1F0A510A8;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 40), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    *(void *)(a1 + 56) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 4std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = v5;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 64), *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v6 = *a3;
    *(void *)(a1 + 8std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + 64) = v6;
  }
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 88), "main");
  *(_WORD *)(a1 + 112) = 1;
  *(unsigned char *)(a1 + 114) = 0;
  *(_DWORD *)(a1 + 116) = 0;
  *(_WORD *)(a1 + 12std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 152) = 0;
  return a1;
}

void sub_1B2161D8C(_Unwind_Exception *a1)
{
  if (v1[63] < 0) {
    operator delete(*v2);
  }
  kaldi::quasar::ComputeEngineConfigItf::~ComputeEngineConfigItf((kaldi::quasar::ComputeEngineConfigItf *)v1);
  _Unwind_Resume(a1);
}

void kaldi::quasar::BNNSGraphNetworkConfig::Read(uint64_t a1, uint64_t *a2, int a3, uint64_t a4)
{
  uint64_t v4 = a2 + 4;
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 2) == 0)
  {
    uint64_t v8 = (char *)(a1 + 152);
    char v9 = (char *)(a1 + 121);
    int v76 = (char *)(a1 + 114);
    __int16 v77 = (char *)(a1 + 120);
    int v72 = (std::vector<std::pair<std::string, std::string>> *)(a1 + 128);
    uint64_t v73 = a1 + 116;
    unint64_t v10 = (char *)(a1 + 113);
    float v74 = (char *)(a1 + 112);
    uint64_t v75 = a1 + 88;
    while (1)
    {
      char v79 = 0;
      size_t v80 = 0;
      uint64_t v81 = 0;
      kaldi::ReadToken(a2, a3, (uint64_t)&v79);
      uint64_t v11 = *(unsigned __int8 *)(a4 + 23);
      int v12 = (char)v11;
      if ((v11 & 0x80u) != 0) {
        uint64_t v11 = *(void *)(a4 + 8);
      }
      int v13 = HIBYTE(v81);
      if (!v11 || (v81 >= 0 ? (size_t v14 = HIBYTE(v81)) : (size_t v14 = v80), v14 != v11))
      {
LABEL_21:
        if ((v81 & 0x8000000000000000) == 0)
        {
          int v19 = 0;
          int v20 = 0;
          int v21 = 0;
          int v22 = 0;
          int v23 = 0;
          long long v24 = &v79;
          switch(HIBYTE(v81))
          {
            case 0xB:
              goto LABEL_47;
            case 0xE:
              goto LABEL_26;
            case 0x11:
              goto LABEL_80;
            case 0x13:
              goto LABEL_69;
            case 0x14:
              goto LABEL_127;
            case 0x18:
              goto LABEL_114;
            case 0x19:
              goto LABEL_55;
            default:
              goto LABEL_141;
          }
        }
        goto LABEL_24;
      }
      uint64_t v15 = v12 >= 0 ? (unsigned __int8 *)a4 : *(unsigned __int8 **)a4;
      if (v81 < 0) {
        break;
      }
      if (!HIBYTE(v81)) {
        return;
      }
      uint64_t v16 = &v79;
      uint64_t v17 = HIBYTE(v81);
      do
      {
        if (*(unsigned __int8 *)v16 != *v15) {
          goto LABEL_21;
        }
        uint64_t v16 = (void **)((char *)v16 + 1);
        ++v15;
        --v17;
      }
      while (v17);
      int v18 = 0;
      if ((v81 & 0x8000000000000000) == 0)
      {
LABEL_137:
        if (!v18) {
          return;
        }
        goto LABEL_138;
      }
LABEL_19:
      operator delete(v79);
      if ((v18 & 1) == 0) {
        return;
      }
LABEL_138:
      if ((*((unsigned char *)v4 + *(void *)(*a2 - 24)) & 2) != 0) {
        return;
      }
    }
    uint64_t v25 = v79;
    if (!memcmp(v79, v15, v80))
    {
      operator delete(v25);
      return;
    }
LABEL_24:
    size_t v26 = v80;
    if (v80 == 14)
    {
      int v19 = 1;
      long long v24 = (void **)v79;
LABEL_26:
      uint64_t v27 = *v24;
      uint64_t v28 = *(uint64_t *)((char *)v24 + 6);
      if (v27 == (void *)0x6F6974636E75463CLL && v28 == 0x3E656D614E6E6F69)
      {
        kaldi::ReadToken(a2, a3, v75);
        goto LABEL_136;
      }
      if (!v19)
      {
        long long v24 = &v79;
        if (v13 == 11)
        {
          int v20 = 0;
          goto LABEL_47;
        }
        if (v13 != 14) {
          goto LABEL_141;
        }
        goto LABEL_36;
      }
      size_t v26 = v80;
      if (v80 == 14)
      {
        long long v24 = (void **)v79;
LABEL_36:
        uint64_t v30 = *v24;
        uint64_t v31 = *(uint64_t *)((char *)v24 + 6);
        BOOL v32 = v30 == (void *)0x54656C676E69533CLL && v31 == 0x3E64616572685465;
        __int16 v33 = v74;
        if (v32) {
          goto LABEL_135;
        }
        if (!v19)
        {
          if (v13 != 11) {
            goto LABEL_141;
          }
          int v20 = 0;
          long long v24 = &v79;
          goto LABEL_47;
        }
        size_t v26 = v80;
      }
    }
    if (v26 != 11) {
      goto LABEL_53;
    }
    int v20 = 1;
    long long v24 = (void **)v79;
LABEL_47:
    unint64_t v34 = *v24;
    uint64_t v35 = *(uint64_t *)((char *)v24 + 3);
    BOOL v36 = v34 == (void *)0x6E4967756265443CLL && v35 == 0x3E6F666E49677562;
    __int16 v33 = v10;
    if (v36) {
      goto LABEL_135;
    }
    if (!v20) {
      goto LABEL_141;
    }
    size_t v26 = v80;
LABEL_53:
    if (v26 == 25)
    {
      int v21 = 1;
      long long v24 = (void **)v79;
LABEL_55:
      uint64_t v37 = *v24;
      char v38 = v24[1];
      char v39 = v24[2];
      int v40 = *((unsigned __int8 *)v24 + 24);
      if (v37 == (void *)0x696665646572503CLL
        && v38 == (void *)0x6D6974704F64656ELL
        && v39 == (void *)0x736E6F6974617A69
        && v40 == 62)
      {
        kaldi::ReadBasicType<unsigned int>(a2, a3, v73);
        goto LABEL_136;
      }
      if (!v21)
      {
        int v22 = 0;
        int v23 = 0;
        long long v24 = &v79;
        switch(v13)
        {
          case 17:
            goto LABEL_80;
          case 19:
            goto LABEL_69;
          case 20:
            goto LABEL_127;
          case 24:
            goto LABEL_114;
          default:
            goto LABEL_141;
        }
      }
      size_t v26 = v80;
    }
    if (v26 == 19)
    {
      int v22 = 1;
      long long v24 = (void **)v79;
LABEL_69:
      long long v44 = *v24;
      long long v45 = v24[1];
      uint64_t v46 = *(uint64_t *)((char *)v24 + 11);
      BOOL v48 = v44 == (void *)0x7A696D6974704F3CLL && v45 == (void *)0x69535249726F4665 && v46 == 0x3E657A6953524972;
      __int16 v33 = v77;
      if (v48) {
        goto LABEL_135;
      }
      if (!v22)
      {
        int v23 = 0;
        long long v24 = &v79;
        if (v13 != 17)
        {
          if (v13 == 20) {
            goto LABEL_127;
          }
          if (v13 != 24) {
            goto LABEL_141;
          }
          goto LABEL_114;
        }
        goto LABEL_80;
      }
      size_t v26 = v80;
    }
    if (v26 != 17) {
      goto LABEL_106;
    }
    int v23 = 1;
    long long v24 = (void **)v79;
LABEL_80:
    uint64_t v49 = *v24;
    char v50 = v24[1];
    int v51 = *((unsigned __int8 *)v24 + 16);
    BOOL v53 = v49 == (void *)0x65766E6F4370553CLL && v50 == (void *)0x323370466F547472 && v51 == 62;
    __int16 v33 = v76;
    if (v53) {
      goto LABEL_135;
    }
    if (!v23)
    {
      long long v24 = &v79;
      if (v13 != 17)
      {
LABEL_111:
        if (v13 == 20) {
          goto LABEL_127;
        }
        if (v13 != 24) {
          goto LABEL_141;
        }
        int v23 = 0;
LABEL_114:
        long long v59 = *v24;
        size_t v60 = v24[1];
        uint64_t v61 = v24[2];
        BOOL v63 = v59 == (void *)0x656C69706D6F433CLL
           && v60 == (void *)0x5374756F68746957
           && v61 == (void *)0x3E5249676E697661;
        __int16 v33 = v9;
        if (!v63)
        {
          if (!v23)
          {
            if (v13 != 20) {
              goto LABEL_141;
            }
            long long v24 = &v79;
            goto LABEL_127;
          }
          size_t v26 = v80;
          goto LABEL_123;
        }
LABEL_135:
        kaldi::ReadBasicType<BOOL>(a2, a3, v33);
        goto LABEL_136;
      }
LABEL_97:
      uint64_t v54 = *v24;
      int v55 = v24[1];
      int v56 = *((unsigned __int8 *)v24 + 16);
      if (v54 == (void *)0x416465726168533CLL && v55 == (void *)0x4F49737365726464 && v56 == 62)
      {
        memset(__p, 0, 24);
        kaldi::ReadToken(a2, a3, (uint64_t)__p);
        kaldi::SplitStringToStringPair(__p, "|", v72);
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p[0].__r_.__value_.__l.__data_);
        }
LABEL_136:
        std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
        int v18 = 1;
        if ((v81 & 0x8000000000000000) == 0) {
          goto LABEL_137;
        }
        goto LABEL_19;
      }
      if (v23)
      {
        size_t v26 = v80;
        goto LABEL_106;
      }
      long long v24 = &v79;
      goto LABEL_111;
    }
    size_t v26 = v80;
    if (v80 == 17)
    {
      long long v24 = (void **)v79;
      goto LABEL_97;
    }
LABEL_106:
    if (v26 != 24)
    {
LABEL_123:
      if (v26 != 20) {
        goto LABEL_141;
      }
      long long v24 = (void **)v79;
LABEL_127:
      uint64_t v64 = *v24;
      uint64_t v65 = v24[1];
      int v66 = *((_DWORD *)v24 + 4);
      BOOL v68 = v64 == (void *)0x63696D616E79443CLL && v65 == (void *)0x6E49646570616853 && v66 == 1047819632;
      __int16 v33 = v8;
      if (!v68)
      {
LABEL_141:
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        int v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Unknown BNNS Graph configuration: ", 34);
        if (v81 >= 0) {
          uint64_t v70 = &v79;
        }
        else {
          uint64_t v70 = (void **)v79;
        }
        if (v81 >= 0) {
          uint64_t v71 = HIBYTE(v81);
        }
        else {
          uint64_t v71 = v80;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)v70, v71);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
      }
      goto LABEL_135;
    }
    int v23 = 1;
    long long v24 = (void **)v79;
    goto LABEL_114;
  }
}

void sub_1B216246C()
{
}

void kaldi::quasar::BNNSGraphNetworkConfig::CreateComputeEngine(kaldi::quasar::BNNSGraphNetworkConfig *this)
{
}

void sub_1B216253C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C4049B2BEB8);
  _Unwind_Resume(a1);
}

void kaldi::quasar::BNNSGraphNetworkConfig::CompiledBNNSGraph(kaldi::quasar::BNNSGraphNetworkConfig *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  BNNSGraphCompileOptionsMakeDefault();
  BNNSGraphCompileOptionsSetTargetSingleThread();
  BNNSGraphCompileOptionsSetGenerateDebugInfo();
  uint64_t v4 = (kaldi::quasar *)BNNSGraphCompileOptionsSetPredefinedOptimizations();
  if (*((unsigned char *)this + 120))
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v87);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v87, (uint64_t)"Set IR size optimization preference", 35);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v87);
    }
    uint64_t v4 = (kaldi::quasar *)BNNSGraphCompileOptionsSetOptimizationPreference();
  }
  if (*((unsigned char *)this + 114) || kaldi::quasar::isDeviceFp32Compute(v4)) {
    BNNSGraphCompileOptionsSetUpconvertMode();
  }
  uint64_t v5 = *((void *)this + 16);
  for (uint64_t i = *((void *)this + 17); v5 != i; v5 += 48)
    BNNSGraphCompileOptionShareIOPointer();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  if (!*((unsigned char *)this + 121))
  {
    if (*((char *)this + 87) < 0)
    {
      if (!*((void *)this + 9)) {
        goto LABEL_86;
      }
    }
    else if (!*((unsigned char *)this + 87))
    {
      goto LABEL_86;
    }
    std::random_device::random_device[abi:ne180100](&v83);
    if (*((char *)this + 87) >= 0) {
      size_t v7 = *((unsigned __int8 *)this + 87);
    }
    else {
      size_t v7 = *((void *)this + 9);
    }
    uint64_t v8 = &v87;
    std::string::basic_string[abi:ne180100]((uint64_t)&v87, v7 + 1);
    if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v8 = (std::string *)v87.__r_.__value_.__r.__words[0];
    }
    if (v7)
    {
      if (*((char *)this + 87) >= 0) {
        char v9 = (char *)this + 64;
      }
      else {
        char v9 = (char *)*((void *)this + 8);
      }
      memmove(v8, v9, v7);
    }
    *(_WORD *)((char *)&v8->__r_.__value_.__l.__data_ + v7) = 46;
    uint32_t v10 = arc4random();
    std::to_string(&v82, v10);
    if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v11 = &v82;
    }
    else {
      uint64_t v11 = (std::string *)v82.__r_.__value_.__r.__words[0];
    }
    if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v82.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v82.__r_.__value_.__l.__size_;
    }
    int v13 = std::string::append(&v87, (const std::string::value_type *)v11, size);
    size_t v14 = (void *)v13->__r_.__value_.__r.__words[0];
    v88.__r_.__value_.__r.__words[0] = v13->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v88.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
    unsigned __int8 v15 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if ((char)v86 < 0) {
      operator delete(__p);
    }
    long long __p = v14;
    *(void *)uint64_t v85 = v88.__r_.__value_.__r.__words[0];
    *(void *)&v85[7] = *(std::string::size_type *)((char *)v88.__r_.__value_.__r.__words + 7);
    unsigned __int8 v86 = v15;
    if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v82.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v87.__r_.__value_.__l.__data_);
    }
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v87);
      uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v87, (uint64_t)"Using temp BNNSIR path: ", 24);
      uint64_t v17 = (v86 & 0x80u) == 0 ? &__p : (void **)__p;
      uint64_t v18 = (v86 & 0x80u) == 0 ? v86 : *(void *)v85;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v87);
      if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v87);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v87, (uint64_t)"Enabling BNNSIR atomic write", 28);
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v87);
      }
    }
    BNNSGraphCompileOptionsSetFileWriteFSyncBarrier();
    int v19 = (const std::__fs::filesystem::path *)std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v88, (char *)this + 64);
    std::__fs::filesystem::path::parent_path[abi:ne180100](v19, (uint64_t)&v87);
    if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v82, v87.__r_.__value_.__l.__data_, v87.__r_.__value_.__l.__size_);
      if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v87.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      std::string v82 = v87;
    }
    if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v88.__r_.__value_.__l.__data_);
    }
    int v20 = &v82;
    if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int v20 = (std::string *)v82.__r_.__value_.__r.__words[0];
    }
    *(void *)&v81.__val_ = v20;
    std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&v87, (char **)&v81);
    std::__fs::filesystem::__status((const std::__fs::filesystem::path *)&v87, 0);
    unsigned __int8 v21 = v88.__r_.__value_.__s.__data_[0];
    if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v87.__r_.__value_.__l.__data_);
    }
    if (v21 == 255 || !v21)
    {
      v81.__val_ = 0;
      v81.__cat_ = std::system_category();
      if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v87);
        int v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v87, (uint64_t)"Creating base folder for bnnsIr: ", 33);
        if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v23 = &v82;
        }
        else {
          int v23 = (std::string *)v82.__r_.__value_.__r.__words[0];
        }
        if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v24 = HIBYTE(v82.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v24 = v82.__r_.__value_.__l.__size_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v23, v24);
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v87);
      }
      uint64_t v25 = &v82;
      if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v25 = (std::string *)v82.__r_.__value_.__r.__words[0];
      }
      v88.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
      std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&v87, &v88.__r_.__value_.__l.__data_);
      BOOL v26 = std::__fs::filesystem::__create_directories((const std::__fs::filesystem::path *)&v87, &v81);
      if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v87.__r_.__value_.__l.__data_);
      }
      char v27 = kaldi::g_kaldi_verbose_level < 0 || v26;
      if ((v27 & 1) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v87);
        uint64_t v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v87, (uint64_t)"creation for bnnsIr base directory not successful with err: ", 60);
        std::error_code::message(&v88, &v81);
        if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v29 = &v88;
        }
        else {
          uint64_t v29 = (std::string *)v88.__r_.__value_.__r.__words[0];
        }
        if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v30 = HIBYTE(v88.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v30 = v88.__r_.__value_.__l.__size_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v29, v30);
        if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v88.__r_.__value_.__l.__data_);
        }
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v87);
      }
    }
    BNNSGraphCompileOptionsSetOutputPathWithPermissionsAndProtectionClass();
    if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v82.__r_.__value_.__l.__data_);
    }
    std::random_device::~random_device(&v83);
  }
LABEL_86:
  if ((_get_cpu_capabilities() & 0x78000000) == 0x8000000) {
    BNNSGraphCompileOptionsSetTarget();
  }
  std::string::basic_string[abi:ne180100]<0>(&v82, "");
  *(void *)&v81.__val_ = 0;
  v81.__cat_ = (const std::error_category *)&v82;
  BNNSGraphCompileOptionsSetMessageLogMask();
  BNNSGraphCompileOptionsSetMessageLogCallback();
  uint64_t v32 = BNNSGraphCompileFromFile_v2();
  if (!v32 || (uint64_t v33 = v31) == 0)
  {
    int v58 = *__error();
    if ((char)v86 < 0)
    {
      if (!*(void *)v85) {
        goto LABEL_135;
      }
      p_p = (const std::__fs::filesystem::path *)__p;
    }
    else
    {
      if (!v86) {
        goto LABEL_135;
      }
      p_p = (const std::__fs::filesystem::path *)&__p;
    }
    remove(p_p, v57);
LABEL_135:
    size_t v60 = strerror(v58);
    std::string::basic_string[abi:ne180100]<0>(&v88, v60);
    BNNSGraphCompileOptionsDestroy();
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v87);
    uint64_t v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v87, (uint64_t)"Failed to compile MIL: ", 23);
    int v62 = *((char *)this + 63);
    if (v62 >= 0) {
      BOOL v63 = (char *)this + 40;
    }
    else {
      BOOL v63 = (char *)*((void *)this + 5);
    }
    if (v62 >= 0) {
      uint64_t v64 = *((unsigned __int8 *)this + 63);
    }
    else {
      uint64_t v64 = *((void *)this + 6);
    }
    uint64_t v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)v63, v64);
    int v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)" to BNNS IR: ", 13);
    uint64_t v69 = *((void *)this + 8);
    BOOL v68 = (char *)this + 64;
    uint64_t v67 = v69;
    int v70 = v68[23];
    if (v70 >= 0) {
      uint64_t v71 = (uint64_t)v68;
    }
    else {
      uint64_t v71 = v67;
    }
    if (v70 >= 0) {
      uint64_t v72 = v68[23];
    }
    else {
      uint64_t v72 = *((void *)v68 + 1);
    }
    uint64_t v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, v71, v72);
    float v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)" no graph, errno error: ", 24);
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v75 = &v88;
    }
    else {
      uint64_t v75 = (std::string *)v88.__r_.__value_.__r.__words[0];
    }
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v76 = HIBYTE(v88.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v76 = v88.__r_.__value_.__l.__size_;
    }
    __int16 v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)v75, v76);
    __int16 v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)", bnns error message: ", 22);
    if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v79 = &v82;
    }
    else {
      char v79 = (std::string *)v82.__r_.__value_.__r.__words[0];
    }
    if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v80 = HIBYTE(v82.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v80 = v82.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)v79, v80);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v87);
  }
  if (*((unsigned char *)this + 121))
  {
    BNNSGraphCompileOptionsDestroy();
    *(void *)a2 = v32;
    *(void *)(a2 + 8) = v33;
    *(unsigned char *)(a2 + 16) = 0;
    goto LABEL_124;
  }
  BNNSGraphCompileOptionsDestroy();
  if ((char)v86 < 0)
  {
    if (*(void *)v85)
    {
      unint64_t v34 = (const char *)__p;
LABEL_97:
      v88.__r_.__value_.__r.__words[0] = 67589;
      if (fsctl(v34, 0xC0084A44uLL, &v88, 0))
      {
        if (kaldi::g_kaldi_verbose_level >= -1)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v87);
          uint64_t v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v87, (uint64_t)"Fail to mark ", 13);
          size_t v36 = strlen(v34);
          uint64_t v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)v34, v36);
          char v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"as purgeable: error: ", 21);
          char v39 = __error();
          int v40 = strerror(*v39);
          size_t v41 = strlen(v40);
          long long v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)v40, v41);
          long long v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)" flags: 0x", 10);
          *(_DWORD *)((char *)v43 + *(void *)(*v43 - 24) + 8) = *(_DWORD *)((unsigned char *)v43
                                                                              + *(void *)(*v43 - 24)
                                                                              + 8) & 0xFFFFFFB5 | 8;
          std::ostream::operator<<();
          kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v87);
          goto LABEL_102;
        }
      }
      else if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v87);
        long long v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v87, (uint64_t)"Marked ", 7);
        size_t v45 = strlen(v34);
        uint64_t v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)v34, v45);
        char v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)" as purgeable: flags: 0x", 24);
        *(_DWORD *)((char *)v47 + *(void *)(*v47 - 24) + 8) = *(_DWORD *)((unsigned char *)v47 + *(void *)(*v47 - 24)
                                                                                           + 8) & 0xFFFFFFB5 | 8;
        std::ostream::operator<<();
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v87);
LABEL_102:
        if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v87);
          BOOL v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v87, (uint64_t)"Moving compiled BNNSIR from ", 28);
          if ((v86 & 0x80u) == 0) {
            uint64_t v49 = &__p;
          }
          else {
            uint64_t v49 = __p;
          }
          if ((v86 & 0x80u) == 0) {
            uint64_t v50 = v86;
          }
          else {
            uint64_t v50 = *(void *)v85;
          }
          int v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)v49, v50);
          uint64_t v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)" to ", 4);
          int v53 = *((char *)this + 87);
          if (v53 >= 0) {
            uint64_t v54 = (char *)this + 64;
          }
          else {
            uint64_t v54 = (char *)*((void *)this + 8);
          }
          if (v53 >= 0) {
            uint64_t v55 = *((unsigned __int8 *)this + 87);
          }
          else {
            uint64_t v55 = *((void *)this + 9);
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)v54, v55);
          kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v87);
        }
      }
      std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v87, (char *)&__p);
      std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v88, (char *)this + 64);
      std::__fs::filesystem::__rename((const std::__fs::filesystem::path *)&v87, (const std::__fs::filesystem::path *)&v88, 0);
      if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v88.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v87.__r_.__value_.__l.__data_);
      }
    }
  }
  else if (v86)
  {
    unint64_t v34 = (const char *)&__p;
    goto LABEL_97;
  }
  if (*((char *)this + 87) < 0) {
    uint64_t v56 = *((void *)this + 9);
  }
  else {
    uint64_t v56 = *((unsigned __int8 *)this + 87);
  }
  *(void *)a2 = v32;
  *(void *)(a2 + 8) = v33;
  *(unsigned char *)(a2 + 16) = v56 != 0;
LABEL_124:
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v82.__r_.__value_.__l.__data_);
  }
  if ((char)v86 < 0) {
    operator delete(__p);
  }
}

void sub_1B2162F70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, int a18, std::random_device a19, std::random_device a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *kaldi::quasar::BNNSGraphNetworkConfig::MapBNNSIRFile(uint64_t a1)
{
  uint64_t v1 = a1;
  if (*(char *)(a1 + 23) < 0) {
    a1 = *(void *)a1;
  }
  int v2 = open((const char *)a1, 0);
  if (v2 == -1)
  {
    if (kaldi::g_kaldi_verbose_level < 0) {
      return 0;
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v44);
    int v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"Could not read open() BNNSIR: ", 30);
    int v14 = *(char *)(v1 + 23);
    if (v14 >= 0) {
      uint64_t v15 = v1;
    }
    else {
      uint64_t v15 = *(void *)v1;
    }
    if (v14 >= 0) {
      uint64_t v16 = *(unsigned __int8 *)(v1 + 23);
    }
    else {
      uint64_t v16 = *(void *)(v1 + 8);
    }
    uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v15, v16);
    uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)": ", 2);
    int v19 = __error();
    int v20 = strerror(*v19);
    size_t v21 = strlen(v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v20, v21);
LABEL_22:
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v44);
    return 0;
  }
  int v3 = v2;
  if (fstat(v2, &v43))
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v44);
      uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"Could not fstat() BNNSIR: ", 26);
      int v5 = *(char *)(v1 + 23);
      if (v5 >= 0) {
        uint64_t v6 = v1;
      }
      else {
        uint64_t v6 = *(void *)v1;
      }
      if (v5 >= 0) {
        uint64_t v7 = *(unsigned __int8 *)(v1 + 23);
      }
      else {
        uint64_t v7 = *(void *)(v1 + 8);
      }
      uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v6, v7);
      char v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)": ", 2);
      uint32_t v10 = __error();
      uint64_t v11 = strerror(*v10);
      size_t v12 = strlen(v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v11, v12);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v44);
    }
    close(v3);
    return 0;
  }
  st_std::string::size_type size = v43.st_size;
  int v22 = mmap(0, v43.st_size, 1, 1, v3, 0);
  close(v3);
  if (v22 == (void *)-1)
  {
    if (kaldi::g_kaldi_verbose_level < 0) {
      return 0;
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v44);
    unint64_t v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"Could not mmap() BNNSIR: ", 25);
    int v35 = *(char *)(v1 + 23);
    if (v35 >= 0) {
      uint64_t v36 = v1;
    }
    else {
      uint64_t v36 = *(void *)v1;
    }
    if (v35 >= 0) {
      uint64_t v37 = *(unsigned __int8 *)(v1 + 23);
    }
    else {
      uint64_t v37 = *(void *)(v1 + 8);
    }
    char v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, v36, v37);
    char v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)": ", 2);
    int v40 = __error();
    size_t v41 = strerror(*v40);
    size_t v42 = strlen(v41);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)v41, v42);
    goto LABEL_22;
  }
  if (BNNSGraphGetWorkspaceSize_v2() != -1) {
    return v22;
  }
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v44);
    uint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"Could not BNNSGraphGetWorkspaceSize() BNNSIR: ", 46);
    int v26 = *(char *)(v1 + 23);
    if (v26 >= 0) {
      uint64_t v27 = v1;
    }
    else {
      uint64_t v27 = *(void *)v1;
    }
    if (v26 >= 0) {
      uint64_t v28 = *(unsigned __int8 *)(v1 + 23);
    }
    else {
      uint64_t v28 = *(void *)(v1 + 8);
    }
    uint64_t v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, v27, v28);
    std::string::size_type v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)": ", 2);
    uint64_t v31 = __error();
    uint64_t v32 = strerror(*v31);
    size_t v33 = strlen(v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)v32, v33);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v44);
  }
  munmap(v22, st_size);
  return 0;
}

void sub_1B2163458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

kaldi::quasar::BNNSGraphNetworkPlan *kaldi::quasar::BNNSGraphNetworkPlan::BNNSGraphNetworkPlan(kaldi::quasar::BNNSGraphNetworkPlan *this, const kaldi::quasar::BNNSGraphNetworkConfig *a2)
{
  *(void *)this = &unk_1F0A50E48;
  kaldi::quasar::BNNSGraphNetworkConfig::BNNSGraphNetworkConfig((kaldi::quasar::BNNSGraphNetworkPlan *)((char *)this + 8), a2);
  *((void *)this + 27) = 0;
  *((void *)this + 26) = (char *)this + 216;
  *((void *)this + 28) = 0;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((unsigned char *)this + 20std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = 0;
  kaldi::quasar::BNNSGraphNetworkPlan::CompileAndLoadGraph(this);
  return this;
}

void sub_1B21634F8(_Unwind_Exception *a1)
{
  uint64_t v5 = v3;
  std::__tree<int>::destroy(v5, *v4);
  kaldi::quasar::BNNSGraphNetworkConfig::~BNNSGraphNetworkConfig(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::BNNSGraphNetworkPlan::CompileAndLoadGraph(kaldi::quasar::BNNSGraphNetworkPlan *this)
{
  if (*((char *)this + 95) < 0)
  {
    if (!*((void *)this + 10)) {
      goto LABEL_16;
    }
  }
  else if (!*((unsigned char *)this + 95))
  {
    goto LABEL_16;
  }
  if (!*((unsigned char *)this + 129))
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v12);
      int v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"loading model from bnnsIr path: ", 32);
      int v3 = *((char *)this + 95);
      if (v3 >= 0) {
        uint64_t v4 = (char *)this + 72;
      }
      else {
        uint64_t v4 = (char *)*((void *)this + 9);
      }
      if (v3 >= 0) {
        uint64_t v5 = *((unsigned __int8 *)this + 95);
      }
      else {
        uint64_t v5 = *((void *)this + 10);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v4, v5);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v12);
    }
    uint64_t v6 = kaldi::quasar::BNNSGraphNetworkConfig::MapBNNSIRFile((uint64_t)this + 72);
    *((void *)this + 21) = v6;
    *((void *)this + 22) = v7;
    if (v6) {
      *((unsigned char *)this + 20std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = 1;
    }
  }
LABEL_16:
  if (!*((void *)this + 21))
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"No graph is loaded, compiling to bnnsIr", 39);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v12);
    }
    kaldi::quasar::BNNSGraphNetworkConfig::CompiledBNNSGraph((kaldi::quasar::BNNSGraphNetworkPlan *)((char *)this + 8), (uint64_t)&v12);
    *(_OWORD *)((char *)this + 168) = v12;
    *((unsigned char *)this + 20std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = v13;
    if (!*((void *)this + 21))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v12);
      uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"Could not load or compile ", 26);
      std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v11, (uint64_t)this + 48);
LABEL_26:
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v12);
    }
  }
  uint64_t result = BNNSGraphContextMake();
  *((void *)this + 23) = result;
  *((void *)this + 24) = v9;
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v12);
    uint32_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"BNNSGraphContextCreate failed for ", 34);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10, (uint64_t)this + 48);
    goto LABEL_26;
  }
  if (*((unsigned char *)this + 160))
  {
    BNNSGraphContextSetArgumentType();
    BNNSGraphContextSetWorkspaceAllocationCallback_v2();
    return BNNSGraphContextSetOutputAllocationCallback_v2();
  }
  return result;
}

void kaldi::quasar::BNNSGraphNetworkPlan::~BNNSGraphNetworkPlan(kaldi::quasar::BNNSGraphNetworkPlan *this)
{
  *(void *)this = &unk_1F0A50E48;
  BNNSGraphContextDestroy_v2();
  int v2 = (void *)*((void *)this + 21);
  if (!*((unsigned char *)this + 200))
  {
    if (!v2) {
      goto LABEL_8;
    }
    free(v2);
    *((void *)this + 21) = 0;
    *((void *)this + 22) = 0;
LABEL_6:
    if (!*((unsigned char *)this + 200)) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  if (v2 != (void *)-1)
  {
    munmap(v2, *((void *)this + 22));
    *((void *)this + 21) = -1;
    *((void *)this + 22) = 0;
    goto LABEL_6;
  }
LABEL_7:
  *((unsigned char *)this + 20std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = 0;
LABEL_8:
  if (*((void *)this + 28)) {
    kaldi::quasar::BNNSGraphNetworkPlan::WorkSpaceFreeCallback((kaldi::quasar::BNNSGraphNetworkPlan **)this + 26, (void *)0x18);
  }
  std::__tree<int>::destroy((uint64_t)this + 208, *((void **)this + 27));
  kaldi::quasar::BNNSGraphNetworkConfig::~BNNSGraphNetworkConfig((void **)this + 1);
  quasar::Bitmap::~Bitmap(this);
}

{
  uint64_t vars8;

  kaldi::quasar::BNNSGraphNetworkPlan::~BNNSGraphNetworkPlan(this);
  JUMPOUT(0x1B3EA8670);
}

void kaldi::quasar::BNNSGraphNetworkPlan::WorkSpaceFreeCallback(kaldi::quasar::BNNSGraphNetworkPlan **this, void *a2)
{
  if (a2 != (void *)24)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v8, "sizeof(MemoryCallbackContext) == user_memory_context_size");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8);
  }
  int v3 = this + 1;
  uint64_t v4 = *this;
  if (*this != (kaldi::quasar::BNNSGraphNetworkPlan *)(this + 1))
  {
    do
    {
      munmap(*((void **)v4 + 4), *((void *)v4 + 6));
      uint64_t v5 = (kaldi::quasar::BNNSGraphNetworkPlan *)*((void *)v4 + 1);
      if (v5)
      {
        do
        {
          uint64_t v6 = (kaldi::quasar::BNNSGraphNetworkPlan **)v5;
          uint64_t v5 = *(kaldi::quasar::BNNSGraphNetworkPlan **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          uint64_t v6 = (kaldi::quasar::BNNSGraphNetworkPlan **)*((void *)v4 + 2);
          BOOL v7 = *v6 == v4;
          uint64_t v4 = (kaldi::quasar::BNNSGraphNetworkPlan *)v6;
        }
        while (!v7);
      }
      uint64_t v4 = (kaldi::quasar::BNNSGraphNetworkPlan *)v6;
    }
    while (v6 != v3);
  }
  std::__tree<int>::destroy((uint64_t)this, this[1]);
  this[1] = 0;
  this[2] = 0;
  *this = (kaldi::quasar::BNNSGraphNetworkPlan *)v3;
}

uint64_t kaldi::quasar::BNNSGraphNetworkPlan::WorkSpaceAllocationCallback(uint64_t **this, void *a2, unint64_t *a3, uint64_t a4, uint64_t a5)
{
  if (!a3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v26);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v26, "memptr");
    goto LABEL_17;
  }
  if (a2 != (void *)24)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v26);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v26, "sizeof(MemoryCallbackContext) == user_memory_context_size");
    goto LABEL_17;
  }
  if (!this)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v26);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v26, "space_info != nullptr");
    goto LABEL_17;
  }
  uint64_t v8 = (char *)(a5 + a4);
  unint64_t v9 = *a3;
  if (!*a3)
  {
LABEL_21:
    unint64_t v18 = (unint64_t)&v8[a4 - 1] & -a4;
    int v19 = mmap(0, v18 + a4, 3, 4098, -1, 0);
    uint64_t v25 = v19;
    if (v19 != (void *)-1)
    {
      *a3 = (unint64_t)v19;
      v26[0] = (uint64_t *)&v25;
      std::__tree<std::__value_type<void *,kaldi::quasar::BNNSGraphNetworkPlan::MemoryCallbackContextInfo>,std::__map_value_compare<void *,std::__value_type<void *,kaldi::quasar::BNNSGraphNetworkPlan::MemoryCallbackContextInfo>,std::less<void *>,true>,std::allocator<std::__value_type<void *,kaldi::quasar::BNNSGraphNetworkPlan::MemoryCallbackContextInfo>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void * const&>,std::tuple<>>(this, (unint64_t *)&v25, (uint64_t)&std::piecewise_construct, v26)[5] = v18;
      v26[0] = (uint64_t *)&v25;
      std::__tree<std::__value_type<void *,kaldi::quasar::BNNSGraphNetworkPlan::MemoryCallbackContextInfo>,std::__map_value_compare<void *,std::__value_type<void *,kaldi::quasar::BNNSGraphNetworkPlan::MemoryCallbackContextInfo>,std::less<void *>,true>,std::allocator<std::__value_type<void *,kaldi::quasar::BNNSGraphNetworkPlan::MemoryCallbackContextInfo>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void * const&>,std::tuple<>>(this, (unint64_t *)&v25, (uint64_t)&std::piecewise_construct, v26)[6] = v18 + a4;
      mprotect((void *)(*a3 + v18), a4, 0);
      return 0;
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"Could not mmap ", 15);
    size_t v21 = (void *)std::ostream::operator<<();
    int v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"bytes: ", 7);
    int v23 = __error();
    std::string::size_type v24 = strerror(*v23);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v22, v24);
LABEL_17:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v26);
  }
  uint32_t v10 = this[1];
  if (!v10) {
    goto LABEL_16;
  }
  uint64_t v11 = this + 1;
  do
  {
    unint64_t v12 = v10[4];
    BOOL v13 = v12 >= v9;
    if (v12 >= v9) {
      int v14 = (uint64_t **)v10;
    }
    else {
      int v14 = (uint64_t **)(v10 + 1);
    }
    if (v13) {
      uint64_t v11 = (uint64_t **)v10;
    }
    uint32_t v10 = *v14;
  }
  while (*v14);
  if (v11 == this + 1 || v9 < (unint64_t)v11[4])
  {
LABEL_16:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v26);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v26, "space_info->find(*memptr) != space_info->end()");
    goto LABEL_17;
  }
  uint64_t v15 = std::map<void *,kaldi::quasar::BNNSGraphNetworkPlan::MemoryCallbackContextInfo>::at((uint64_t)this, a3);
  uint64_t v16 = (void *)*a3;
  if (*v15 < (unint64_t)v8)
  {
    uint64_t v17 = std::map<void *,kaldi::quasar::BNNSGraphNetworkPlan::MemoryCallbackContextInfo>::at((uint64_t)this, a3);
    munmap(v16, v17[1]);
    std::__tree<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>::__erase_unique<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>((uint64_t)this, a3);
    *a3 = 0;
    goto LABEL_21;
  }
  if (!v16) {
    goto LABEL_21;
  }
  return 0;
}

void sub_1B2163B88(uint64_t a1, ...)
{
  va_start(va, a1);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void *std::map<void *,kaldi::quasar::BNNSGraphNetworkPlan::MemoryCallbackContextInfo>::at(uint64_t a1, unint64_t *a2)
{
  int v2 = *(void **)(a1 + 8);
  if (!v2) {
LABEL_8:
  }
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  unint64_t v3 = *a2;
  while (1)
  {
    while (1)
    {
      unint64_t v4 = v2[4];
      if (v3 >= v4) {
        break;
      }
      int v2 = (void *)*v2;
      if (!v2) {
        goto LABEL_8;
      }
    }
    if (v4 >= v3) {
      return v2 + 5;
    }
    int v2 = (void *)v2[1];
    if (!v2) {
      goto LABEL_8;
    }
  }
}

void kaldi::quasar::BNNSGraphNetworkPlan::CreateData(uint64_t a1, void *a2, char a3)
{
  long long __p = 0;
  int v19 = 0;
  int v20 = 0;
  if (a3)
  {
    unint64_t v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v20, 1uLL);
    uint64_t v6 = &v4[8 * v5];
    *(void *)unint64_t v4 = 1;
    BOOL v7 = v4 + 8;
    long long __p = v4;
    int v20 = v6;
    int v19 = v4 + 8;
    uint64_t v8 = (uint64_t)(a2[1] - *a2) >> 2;
    if (v7 < v6)
    {
      *((void *)v4 + 1) = v8;
      goto LABEL_20;
    }
  }
  else
  {
    BOOL v7 = 0;
    uint64_t v6 = 0;
    uint64_t v8 = (uint64_t)(a2[1] - *a2) >> 2;
  }
  unint64_t v9 = __p;
  uint64_t v10 = (v7 - __p) >> 3;
  unint64_t v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 61) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v12 = v6 - __p;
  if (v12 >> 2 > v11) {
    unint64_t v11 = v12 >> 2;
  }
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v13 = v11;
  }
  if (v13)
  {
    int v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v20, v13);
    unint64_t v9 = __p;
    BOOL v7 = v19;
  }
  else
  {
    int v14 = 0;
  }
  uint64_t v15 = (uint64_t *)&v14[8 * v10];
  uint64_t v16 = &v14[8 * v13];
  *uint64_t v15 = v8;
  while (v7 != v9)
  {
    uint64_t v17 = *((void *)v7 - 1);
    v7 -= 8;
    *--uint64_t v15 = v17;
  }
  int v20 = v16;
  if (v9) {
    operator delete(v9);
  }
LABEL_20:
  operator new();
}

{
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  char *__p;
  char *v19;
  char *v20;

  long long __p = 0;
  int v19 = 0;
  int v20 = 0;
  if (a3)
  {
    unint64_t v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v20, 1uLL);
    uint64_t v6 = &v4[8 * v5];
    *(void *)unint64_t v4 = 1;
    BOOL v7 = v4 + 8;
    long long __p = v4;
    int v20 = v6;
    int v19 = v4 + 8;
    uint64_t v8 = (uint64_t)(a2[1] - *a2) >> 2;
    if (v7 < v6)
    {
      *((void *)v4 + 1) = v8;
      goto LABEL_20;
    }
  }
  else
  {
    BOOL v7 = 0;
    uint64_t v6 = 0;
    uint64_t v8 = (uint64_t)(a2[1] - *a2) >> 2;
  }
  unint64_t v9 = __p;
  uint64_t v10 = (v7 - __p) >> 3;
  unint64_t v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 61) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v12 = v6 - __p;
  if (v12 >> 2 > v11) {
    unint64_t v11 = v12 >> 2;
  }
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v13 = v11;
  }
  if (v13)
  {
    int v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v20, v13);
    unint64_t v9 = __p;
    BOOL v7 = v19;
  }
  else
  {
    int v14 = 0;
  }
  uint64_t v15 = (uint64_t *)&v14[8 * v10];
  uint64_t v16 = &v14[8 * v13];
  *uint64_t v15 = v8;
  while (v7 != v9)
  {
    uint64_t v17 = *((void *)v7 - 1);
    v7 -= 8;
    *--uint64_t v15 = v17;
  }
  int v20 = v16;
  if (v9) {
    operator delete(v9);
  }
LABEL_20:
  operator new();
}

void sub_1B2163DC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::BNNSGraphData::CopyFromStdVector<int>(uint64_t a1, int **a2)
{
  if (*(unsigned char *)(a1 + 64))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v19, "CopyFromStdVector(const std::vector<T> &vec) not implemented for fp16");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19);
  }
  if (*(_DWORD *)(a1 + 56) != 1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  unint64_t v4 = (void **)(a1 + 32);
  *(void *)(a1 + 4std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = *(void *)(a1 + 32);
  std::vector<float>::reserve((void **)(a1 + 32), a2[1] - *a2);
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (*a2 != v6)
  {
    BOOL v7 = (void *)(a1 + 48);
    uint64_t v8 = *(float **)(a1 + 40);
    do
    {
      float v9 = (float)*v5;
      if ((unint64_t)v8 >= *v7)
      {
        unint64_t v11 = (float *)*v4;
        uint64_t v12 = ((char *)v8 - (unsigned char *)*v4) >> 2;
        unint64_t v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v14 = *v7 - (void)v11;
        if (v14 >> 1 > v13) {
          unint64_t v13 = v14 >> 1;
        }
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v13;
        }
        if (v15)
        {
          uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 48, v15);
          unint64_t v11 = *(float **)(a1 + 32);
          uint64_t v8 = *(float **)(a1 + 40);
        }
        else
        {
          uint64_t v16 = 0;
        }
        uint64_t v17 = (float *)&v16[4 * v12];
        *uint64_t v17 = v9;
        uint64_t v10 = v17 + 1;
        while (v8 != v11)
        {
          int v18 = *((_DWORD *)v8-- - 1);
          *((_DWORD *)v17-- - 1) = v18;
        }
        *(void *)(a1 + 32) = v17;
        *(void *)(a1 + 4std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = v10;
        *(void *)(a1 + 48) = &v16[4 * v15];
        if (v11) {
          operator delete(v11);
        }
      }
      else
      {
        float *v8 = v9;
        uint64_t v10 = v8 + 1;
      }
      *(void *)(a1 + 4std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = v10;
      ++v5;
      uint64_t v8 = v10;
    }
    while (v5 != v6);
  }
}

void sub_1B2163FBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B2164190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::BNNSGraphData::CopyFromStdVector<float>(uint64_t a1, int **a2)
{
  if (*(unsigned char *)(a1 + 64))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v19, "CopyFromStdVector(const std::vector<T> &vec) not implemented for fp16");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19);
  }
  if (*(_DWORD *)(a1 + 56) != 1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  unint64_t v4 = (void **)(a1 + 32);
  *(void *)(a1 + 4std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = *(void *)(a1 + 32);
  std::vector<float>::reserve((void **)(a1 + 32), a2[1] - *a2);
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (*a2 != v6)
  {
    BOOL v7 = (void *)(a1 + 48);
    uint64_t v8 = *(char **)(a1 + 40);
    do
    {
      int v9 = *v5;
      if ((unint64_t)v8 >= *v7)
      {
        unint64_t v11 = (char *)*v4;
        uint64_t v12 = (v8 - (unsigned char *)*v4) >> 2;
        unint64_t v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v14 = *v7 - (void)v11;
        if (v14 >> 1 > v13) {
          unint64_t v13 = v14 >> 1;
        }
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v13;
        }
        if (v15)
        {
          uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 48, v15);
          unint64_t v11 = *(char **)(a1 + 32);
          uint64_t v8 = *(char **)(a1 + 40);
        }
        else
        {
          uint64_t v16 = 0;
        }
        uint64_t v17 = &v16[4 * v12];
        *(_DWORD *)uint64_t v17 = v9;
        uint64_t v10 = v17 + 4;
        while (v8 != v11)
        {
          int v18 = *((_DWORD *)v8 - 1);
          v8 -= 4;
          *((_DWORD *)v17 - 1) = v18;
          v17 -= 4;
        }
        *(void *)(a1 + 32) = v17;
        *(void *)(a1 + 4std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = v10;
        *(void *)(a1 + 48) = &v16[4 * v15];
        if (v11) {
          operator delete(v11);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v8 = v9;
        uint64_t v10 = v8 + 4;
      }
      *(void *)(a1 + 4std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = v10;
      ++v5;
      uint64_t v8 = v10;
    }
    while (v5 != v6);
  }
}

void sub_1B2164384(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void kaldi::quasar::BNNSGraphNetworkPlan::CreateData(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(int *)(a2 + 16);
  uint64_t v2 = *(int *)(a2 + 20);
  unint64_t v4 = operator new(0x10uLL);
  uint64_t v6 = v4 + 2;
  BOOL v7 = v4 + 2;
  *unint64_t v4 = v2;
  v4[1] = v3;
  long long __p = v4;
  operator new();
}

{
  int v3;
  int v4;
  void *v5;
  void *__p;
  void *v7;
  void *v8;

  uint64_t v3 = kaldi::MatrixBase<float>::NumRows(a2);
  unint64_t v4 = kaldi::MatrixBase<float>::NumCols(a2);
  uint64_t v5 = operator new(0x10uLL);
  BOOL v7 = v5 + 2;
  uint64_t v8 = v5 + 2;
  *uint64_t v5 = v3;
  v5[1] = v4;
  long long __p = v5;
  operator new();
}

void sub_1B216442C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B216454C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void kaldi::quasar::BNNSGraphNetworkPlan::CreateZeroedDataFloat()
{
}

void sub_1B2164610(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1093C40A6484513);
  _Unwind_Resume(a1);
}

void kaldi::quasar::BNNSGraphNetworkPlan::CreateZeroedDataInt32()
{
}

void sub_1B216468C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1093C40A6484513);
  _Unwind_Resume(a1);
}

void kaldi::quasar::BNNSGraphNetworkPlan::CreateZeroedDataFloat16()
{
}

void sub_1B2164708(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1093C40A6484513);
  _Unwind_Resume(a1);
}

void kaldi::quasar::BNNSGraphNetworkPlan::CreateConcat()
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "unimplemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

uint64_t kaldi::quasar::BNNSGraphNetworkPlan::CreateSlice(kaldi::quasar::BNNSGraphNetworkPlan *this, const kaldi::quasar::ComputeEngineBufferItf *lpsrc, int a3, int a4)
{
  if (!lpsrc
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v8, "bnns_graph_data");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8);
  }
  return kaldi::quasar::BNNSGraphData::Slice(v6, a3, a4);
}

uint64_t kaldi::quasar::BNNSGraphData::Slice(kaldi::quasar::BNNSGraphData *this, int a2, int a3)
{
  if ((*(unsigned int (**)(kaldi::quasar::BNNSGraphData *))(*(void *)this + 168))(this))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&__p, "std::unique_ptr<ComputeEngineBufferItf> Slice(int start, int end) not implemented for fp16");
    goto LABEL_13;
  }
  if (*((_DWORD *)this + 14) != 1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&__p, "Slice(int start, int end) fail - data not assigned with std::vector<float>");
LABEL_13:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
  }
  long long v6 = *(_OWORD *)((char *)this + 72);
  BOOL v7 = (void *)*((void *)this + 9);
  if (!*v7)
  {
    long long __p = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    operator new();
  }
  if (a2 || *v7 != a3)
  {
    long long __p = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(&__p, v7, *((uint64_t *)&v6 + 1), (uint64_t)(*((void *)&v6 + 1) - (void)v7) >> 3);
    *(void *)long long __p = a3 - a2;
    operator new();
  }
  uint64_t v8 = *(uint64_t (**)(kaldi::quasar::BNNSGraphData *))(*(void *)this + 16);
  return v8(this);
}

void sub_1B2164A58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B2164ADC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void **kaldi::quasar::BNNSGraphNetworkPlan::CreateSplit@<X0>(const kaldi::quasar::ComputeEngineBufferItf *lpsrc@<X1>, uint64_t *a2@<X8>)
{
  if (!lpsrc
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v6, "bnns_graph_data");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v6);
  }
  return kaldi::quasar::BNNSGraphData::Split(v4, a2);
}

void **kaldi::quasar::BNNSGraphData::Split@<X0>(kaldi::quasar::BNNSGraphData *this@<X0>, uint64_t *a2@<X8>)
{
  if (*((unsigned char *)this + 64))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v21);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v21, "std::vector<std::unique_ptr<ComputeEngineBufferItf>> Split() not implemented for fp16");
    goto LABEL_24;
  }
  if (*((_DWORD *)this + 14) != 1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v21);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v21, "Split() fail - data not assigned with std::vector<float>");
LABEL_24:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v21);
  }
  unint64_t v4 = (unint64_t *)*((void *)this + 9);
  if (*((void *)this + 10) - (void)v4 == 8)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    (*(void (**)(void **__return_ptr, kaldi::quasar::BNNSGraphData *))(*(void *)this + 16))(__p, this);
    unint64_t v5 = a2[2];
    long long v6 = (void *)a2[1];
    if ((unint64_t)v6 >= v5)
    {
      uint64_t v13 = ((uint64_t)v6 - *a2) >> 3;
      if ((unint64_t)(v13 + 1) >> 61) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v14 = v5 - *a2;
      uint64_t v15 = v14 >> 2;
      if (v14 >> 2 <= (unint64_t)(v13 + 1)) {
        uint64_t v15 = v13 + 1;
      }
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v15;
      }
      void v21[4] = a2 + 2;
      if (v16) {
        uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a2 + 2), v16);
      }
      else {
        uint64_t v17 = 0;
      }
      int v18 = &v17[8 * v13];
      v21[0] = v17;
      v21[1] = v18;
      void v21[3] = &v17[8 * v16];
      int v19 = __p[0];
      __p[0] = 0;
      *(void *)int v18 = v19;
      v21[2] = v18 + 8;
      std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__swap_out_circular_buffer(a2, v21);
      uint64_t v8 = (void *)a2[1];
      std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer(v21);
    }
    else
    {
      BOOL v7 = __p[0];
      __p[0] = 0;
      *long long v6 = v7;
      uint64_t v8 = v6 + 1;
      a2[1] = (uint64_t)v8;
    }
    a2[1] = (uint64_t)v8;
    uint64_t result = (void **)__p[0];
    __p[0] = 0;
    if (result) {
      return (void **)(*((uint64_t (**)(void **))*result + 1))(result);
    }
  }
  else
  {
    unint64_t v9 = *v4;
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    uint64_t result = std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::reserve(a2, v9);
    if (v9)
    {
      if (*((_DWORD *)this + 14) == 1)
      {
        uint64_t v11 = *((void *)this + 10);
        uint64_t v12 = (const void *)(*((void *)this + 9) + 8);
        memset(__p, 0, sizeof(__p));
        std::vector<long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<long long const*>,std::__wrap_iter<long long const*>>(__p, v12, v11, (v11 - (uint64_t)v12) >> 3);
        operator new();
      }
      std::__throw_bad_variant_access[abi:ne180100]();
    }
  }
  return result;
}

void sub_1B2164EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, void *a12)
{
  std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer(&a12);
  uint64_t v13 = a9;
  a9 = 0;
  if (v13) {
    (*((void (**)(void **))*v13 + 1))(v13);
  }
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_1B2164F40()
{
}

void sub_1B2164F4C(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void sub_1B2164F60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12)
{
  (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  if (__p)
  {
    a10 = (uint64_t)__p;
    operator delete(__p);
  }
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void kaldi::quasar::BNNSGraphNetworkPlan::Run(uint64_t a1, long long **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v26 = 0;
  unint64_t v27 = 0;
  unint64_t v28 = 0;
  unint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  if (*a2 != v10)
  {
    do
    {
      uint64_t v11 = (void *)*((void *)v9 + 3);
      if (*((char *)v9 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v9, *((void *)v9 + 1));
      }
      else
      {
        long long v12 = *v9;
        __p.__r_.__value_.__r.__words[2] = *((void *)v9 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v12;
      }
      uint64_t v25 = v11;
      unint64_t v13 = v27;
      if (v27 >= v28)
      {
        uint64_t v15 = (uint64_t)(v27 - v26) >> 5;
        unint64_t v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 59) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v17 = v28 - v26;
        if ((uint64_t)(v28 - v26) >> 4 > v16) {
          unint64_t v16 = v17 >> 4;
        }
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v18 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v16;
        }
        void v29[4] = (void **)&v28;
        int v19 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)&v28, v18);
        int v20 = &v19[4 * v15];
        v29[0] = v19;
        v29[1] = v20;
        void v29[3] = &v19[4 * v21];
        long long v22 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        void v20[2] = (void *)__p.__r_.__value_.__r.__words[2];
        *(_OWORD *)int v20 = v22;
        memset(&__p, 0, sizeof(__p));
        void v20[3] = v25;
        void v29[2] = v20 + 4;
        std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__swap_out_circular_buffer(&v26, v29);
        unint64_t v23 = v27;
        std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)v29);
        unint64_t v27 = v23;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v14 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(void *)(v27 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v13 = v14;
        memset(&__p, 0, sizeof(__p));
        *(void *)(v13 + 24) = v25;
        unint64_t v27 = v13 + 32;
      }
      v9 += 2;
    }
    while (v9 != v10);
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 128))(a1, &v26, a3, a4, a5);
  v29[0] = (void **)&v26;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v29);
}

void sub_1B21651D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
  std::string __p = &a16;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void kaldi::quasar::BNNSGraphNetworkPlan::Run(uint64_t a1, uint64_t *a2, unsigned __int8 **a3, void *a4, uint64_t *a5)
{
  if (*a4 != a4[1])
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v141);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v141, "Target node names must be empty");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v141);
  }
  unint64_t InputCount = BNNSGraphGetInputCount();
  std::vector<char const*>::vector(v140, InputCount);
  BNNSGraphGetInputNames_v2();
  unint64_t OutputCount = BNNSGraphGetOutputCount();
  std::vector<char const*>::vector(v139, OutputCount);
  BNNSGraphGetOutputNames_v2();
  unint64_t v121 = InputCount;
  long long v136 = 0;
  char v137 = 0;
  std::string v138 = 0;
  std::vector<std::unique_ptr<kaldi::quasar::BNNSGraphData>>::vector(v135, 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
  v119 = a5;
  memset(v134, 0, sizeof(v134));
  std::vector<std::unique_ptr<BNNSTensor>>::vector(&v133, OutputCount);
  v132[0] = 0;
  v132[1] = 0;
  unint64_t v130 = 0;
  long long v131 = v132;
  unint64_t v122 = OutputCount;
  if (!OutputCount) {
    goto LABEL_88;
  }
  unint64_t v11 = 0;
  uint64_t v12 = a1 + 96;
  long long v120 = a3;
  do
  {
    std::string __s = 0;
    std::string __s = (char *)*((void *)v139[0] + v11);
    if (BNNSGraphContextGetTensorDescriptor_v2())
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v141);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v141, (uint64_t)"BNNSGraphContextGetTensorDescriptor output failed: ", 51);
      unint64_t v97 = (void *)std::ostream::operator<<();
      unint64_t v98 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)" on ", 4);
      size_t v99 = strlen(__s);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)__s, v99);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v141);
    }
    BOOL v13 = v129 == 65552 || v129 == 65568;
    if (!v13)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v141);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v141, (uint64_t)"Unsupported output type: ", 25);
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v141);
    }
    if (v128 != 1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v141);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v141, (uint64_t)"Unsupported output stride", 25);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v141);
    }
    if (*(void *)(a1 + 136) == *(void *)(a1 + 144))
    {
      if (*(unsigned char *)(a1 + 160)) {
        goto LABEL_47;
      }
      goto LABEL_49;
    }
    uint64_t v14 = v12;
    std::string::basic_string[abi:ne180100]<0>(&__p, __s);
    uint64_t v15 = *(void *)(a1 + 136);
    uint64_t v16 = *(void *)(a1 + 144);
    if (v15 == v16)
    {
LABEL_30:
      std::string::basic_string[abi:ne180100]<0>(&v141, "");
      goto LABEL_36;
    }
    uint64_t v17 = HIBYTE(v125);
    unint64_t v18 = __p;
    size_t v19 = (size_t)v124;
    if (SHIBYTE(v125) >= 0) {
      int v20 = (unint64_t *)HIBYTE(v125);
    }
    else {
      int v20 = v124;
    }
    while (1)
    {
      uint64_t v21 = (unint64_t *)*(unsigned __int8 *)(v15 + 23);
      int v22 = (char)v21;
      if ((char)v21 < 0) {
        uint64_t v21 = *(unint64_t **)(v15 + 8);
      }
      if (v20 != v21) {
        goto LABEL_29;
      }
      unint64_t v23 = v22 >= 0 ? (unsigned __int8 *)v15 : *(unsigned __int8 **)v15;
      if ((v17 & 0x80) != 0) {
        break;
      }
      if (!v17) {
        goto LABEL_33;
      }
      p_p = &__p;
      uint64_t v25 = v17;
      while (*(unsigned __int8 *)p_p == *v23)
      {
        p_p = (void **)((char *)p_p + 1);
        ++v23;
        if (!--v25) {
          goto LABEL_33;
        }
      }
LABEL_29:
      v15 += 48;
      if (v15 == v16) {
        goto LABEL_30;
      }
    }
    if (memcmp(v18, v23, v19)) {
      goto LABEL_29;
    }
LABEL_33:
    if (*(char *)(v15 + 47) < 0) {
      std::string::__init_copy_ctor_external(&v141, *(const std::string::value_type **)(v15 + 24), *(void *)(v15 + 32));
    }
    else {
      std::string v141 = *(std::string *)(v15 + 24);
    }
LABEL_36:
    if (SHIBYTE(v125) < 0) {
      operator delete(__p);
    }
    uint64_t v12 = v14;
    if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
    {
      a3 = v120;
      if (v141.__r_.__value_.__l.__size_) {
        goto LABEL_42;
      }
      uint64_t v26 = 0;
      uint64_t v27 = 0;
LABEL_45:
      operator delete(v141.__r_.__value_.__l.__data_);
    }
    else
    {
      a3 = v120;
      if (!*((unsigned char *)&v141.__r_.__value_.__s + 23))
      {
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        goto LABEL_46;
      }
LABEL_42:
      uint64_t v27 = kaldi::quasar::DataFloatForInput(a2, (unsigned __int8 **)&v141);
      uint64_t v26 = v28;
      if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_45;
      }
    }
LABEL_46:
    if (*(unsigned char *)(a1 + 160)) {
LABEL_47:
    }
      operator new();
    if (!v27)
    {
LABEL_49:
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      std::string __p = 0;
      long long v124 = 0;
      long long v125 = 0;
      do
      {
        unint64_t v31 = v127[v30 + 1];
        if (!v31) {
          break;
        }
        if (v29 >= v125)
        {
          size_t v33 = (unint64_t *)__p;
          uint64_t v34 = ((char *)v29 - (unsigned char *)__p) >> 3;
          unint64_t v35 = v34 + 1;
          if ((unint64_t)(v34 + 1) >> 61) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v36 = (char *)v125 - (unsigned char *)__p;
          if (((char *)v125 - (unsigned char *)__p) >> 2 > v35) {
            unint64_t v35 = v36 >> 2;
          }
          if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v37 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v37 = v35;
          }
          if (v37)
          {
            char v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v125, v37);
            size_t v33 = (unint64_t *)__p;
            uint64_t v29 = v124;
          }
          else
          {
            char v38 = 0;
          }
          char v39 = (unint64_t *)&v38[8 * v34];
          unint64_t *v39 = v31;
          uint64_t v32 = v39 + 1;
          while (v29 != v33)
          {
            unint64_t v40 = *--v29;
            *--char v39 = v40;
          }
          std::string __p = v39;
          long long v124 = v32;
          long long v125 = (unint64_t *)&v38[8 * v37];
          if (v33) {
            operator delete(v33);
          }
        }
        else
        {
          *uint64_t v29 = v31;
          uint64_t v32 = v29 + 1;
        }
        long long v124 = v32;
        ++v30;
        uint64_t v29 = v32;
      }
      while (v30 != 8);
      if (v129 == 65552) {
        operator new();
      }
      operator new();
    }
    size_t v41 = v137;
    if (v137 >= (uint64_t *)v138)
    {
      uint64_t v43 = ((char *)v137 - (unsigned char *)v136) >> 4;
      unint64_t v44 = v43 + 1;
      if ((unint64_t)(v43 + 1) >> 60) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v45 = v138 - (unsigned char *)v136;
      if ((v138 - (unsigned char *)v136) >> 3 > v44) {
        unint64_t v44 = v45 >> 3;
      }
      if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v46 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v46 = v44;
      }
      if (v46) {
        char v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)&v138, v46);
      }
      else {
        char v47 = 0;
      }
      BOOL v48 = (uint64_t *)&v47[16 * v43];
      uint64_t *v48 = v27;
      v48[1] = v26;
      uint64_t v50 = (char *)v136;
      uint64_t v49 = (char *)v137;
      int v51 = v48;
      if (v137 != v136)
      {
        do
        {
          *((_OWORD *)v51 - 1) = *((_OWORD *)v49 - 1);
          v51 -= 2;
          v49 -= 16;
        }
        while (v49 != v50);
        uint64_t v49 = (char *)v136;
      }
      size_t v42 = v48 + 2;
      long long v136 = v51;
      char v137 = v48 + 2;
      std::string v138 = &v47[16 * v46];
      if (v49) {
        operator delete(v49);
      }
    }
    else
    {
      *char v137 = v27;
      v41[1] = v26;
      size_t v42 = v41 + 2;
    }
    char v137 = v42;
    unint64_t v11 = v130 + 1;
    unint64_t v130 = v11;
  }
  while (v11 < v122);
LABEL_88:
  std::vector<std::unique_ptr<BNNSTensor>>::vector(&__p, InputCount);
  if (!InputCount) {
    goto LABEL_141;
  }
  uint64_t v52 = 0;
  while (2)
  {
    int v53 = (char *)*((void *)v140[0] + v52);
    if (BNNSGraphContextGetTensorDescriptor_v2())
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v141);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v141, (uint64_t)"BNNSGraphContextGetTensorDescriptor input failed: ", 50);
      uint64_t v100 = (void *)std::ostream::operator<<();
      uint64_t v101 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, (uint64_t)" on ", 4);
      size_t v102 = strlen(v53);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v101, (uint64_t)v53, v102);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v141);
    }
    if (v129 != 65552 && v129 != 65568)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v141);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v141, (uint64_t)"Unsupported input type: ", 24);
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v141);
    }
    uint64_t v56 = *a2;
    uint64_t v55 = a2[1];
    if (*a2 == v55)
    {
LABEL_107:
      long long v59 = 0;
      goto LABEL_116;
    }
    size_t v57 = strlen(v53);
    while (2)
    {
      if ((*(char *)(v56 + 23) & 0x80000000) == 0)
      {
        if (v57 == *(unsigned __int8 *)(v56 + 23))
        {
          int v58 = (const void *)v56;
          if (v57 == -1) {
            goto LABEL_187;
          }
          goto LABEL_105;
        }
        goto LABEL_106;
      }
      if (v57 != *(void *)(v56 + 8)) {
        goto LABEL_106;
      }
      if (v57 == -1) {
LABEL_187:
      }
        std::string::__throw_out_of_range[abi:ne180100]();
      int v58 = *(const void **)v56;
LABEL_105:
      if (memcmp(v58, v53, v57))
      {
LABEL_106:
        v56 += 32;
        if (v56 == v55) {
          goto LABEL_107;
        }
        continue;
      }
      break;
    }
    size_t v60 = *(kaldi::quasar::ComputeEngineBufferItf **)(v56 + 24);
    int v61 = (*(uint64_t (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(void *)v60 + 168))(v60);
    if (v129 == 65552) {
      int v62 = 0;
    }
    else {
      int v62 = v61;
    }
    if (v62 == 1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v141);
      long long v109 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v141, (uint64_t)"input specified as fp16: ", 25);
      int v110 = *(char *)(v56 + 23);
      if (v110 >= 0) {
        uint64_t v111 = v56;
      }
      else {
        uint64_t v111 = *(void *)v56;
      }
      if (v110 >= 0) {
        uint64_t v112 = *(unsigned __int8 *)(v56 + 23);
      }
      else {
        uint64_t v112 = *(void *)(v56 + 8);
      }
      long long v113 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v109, v111, v112);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v113, (uint64_t)" type and data type does not match", 34);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v141);
    }
    if (((*(uint64_t (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(void *)v60 + 168))(v60) & 1) == 0
      && v129 != 65568
      && v129 != 131104)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v141);
      uint64_t v114 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v141, (uint64_t)"input not specified as fp16: ", 29);
      int v115 = *(char *)(v56 + 23);
      if (v115 >= 0) {
        uint64_t v116 = v56;
      }
      else {
        uint64_t v116 = *(void *)v56;
      }
      if (v115 >= 0) {
        uint64_t v117 = *(unsigned __int8 *)(v56 + 23);
      }
      else {
        uint64_t v117 = *(void *)(v56 + 8);
      }
      long long v118 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v114, v116, v117);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v118, (uint64_t)" type and data type does not match", 34);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v141);
    }
    kaldi::quasar::ComputeEngineBufferItf::GetShape(v60, &v141.__r_.__value_.__l.__data_);
    long long v59 = (void *)v141.__r_.__value_.__r.__words[0];
LABEL_116:
    if (v128 != 1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v141);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v141, (uint64_t)"Unsupported input stride", 24);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v141);
    }
    std::string::basic_string[abi:ne180100]<0>(&v141, v53);
    uint64_t v63 = kaldi::quasar::DataFloatForInput(a2, (unsigned __int8 **)&v141);
    uint64_t v65 = v64;
    if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v141.__r_.__value_.__l.__data_);
    }
    if (!v63)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v141);
      uint64_t v103 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v141, (uint64_t)"Missing input: ", 15);
      size_t v104 = strlen(v53);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)v53, v104);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v141);
    }
    if (*(unsigned char *)(a1 + 160)) {
      operator new();
    }
    int v66 = v137;
    if (v137 >= (uint64_t *)v138)
    {
      uint64_t v68 = ((char *)v137 - (unsigned char *)v136) >> 4;
      unint64_t v69 = v68 + 1;
      if ((unint64_t)(v68 + 1) >> 60) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v70 = v138 - (unsigned char *)v136;
      if ((v138 - (unsigned char *)v136) >> 3 > v69) {
        unint64_t v69 = v70 >> 3;
      }
      if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v71 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v71 = v69;
      }
      if (v71) {
        uint64_t v72 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)&v138, v71);
      }
      else {
        uint64_t v72 = 0;
      }
      uint64_t v73 = (uint64_t *)&v72[16 * v68];
      *uint64_t v73 = v63;
      v73[1] = v65;
      uint64_t v75 = (char *)v136;
      float v74 = (char *)v137;
      std::string::size_type v76 = v73;
      if (v137 != v136)
      {
        do
        {
          *((_OWORD *)v76 - 1) = *((_OWORD *)v74 - 1);
          v76 -= 2;
          v74 -= 16;
        }
        while (v74 != v75);
        float v74 = (char *)v136;
      }
      uint64_t v67 = v73 + 2;
      long long v136 = v76;
      char v137 = v73 + 2;
      std::string v138 = &v72[16 * v71];
      if (v74) {
        operator delete(v74);
      }
    }
    else
    {
      *char v137 = v63;
      v66[1] = v65;
      uint64_t v67 = v66 + 2;
    }
    char v137 = v67;
    if (v59) {
      operator delete(v59);
    }
    if (++v52 != v121) {
      continue;
    }
    break;
  }
LABEL_141:
  if (v121 != (a2[1] - *a2) >> 5)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v141);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v141, (uint64_t)"Unknown inputs", 14);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v141);
  }
  v127[0] = 0;
  if (!*(unsigned char *)(a1 + 160))
  {
    uint64_t v77 = sysconf(29);
    WorkspaceSize_uint64_t v2 = BNNSGraphContextGetWorkspaceSize_v2();
    if (*(void *)(a1 + 224)) {
      v127[0] = *(void *)(*(void *)(a1 + 208) + 32);
    }
    kaldi::quasar::BNNSGraphNetworkPlan::WorkSpaceAllocationCallback((uint64_t **)(a1 + 208), (void *)0x18, v127, v77, WorkspaceSize_v2);
    std::map<void *,kaldi::quasar::BNNSGraphNetworkPlan::MemoryCallbackContextInfo>::at(a1 + 208, v127);
  }
  if (BNNSGraphContextExecute_v2())
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v141);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v141, (uint64_t)"BNNSGraphContextExecute failed: ", 32);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v141);
  }
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__clear[abi:ne180100](v119);
  if (*(unsigned char *)(a1 + 160))
  {
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::resize(v119, 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
    unint64_t v130 = 0;
    if (v122)
    {
      for (unint64_t i = 0; i < v122; v130 = i)
      {
        std::string::size_type v80 = v132[0];
        if (!v132[0]) {
          goto LABEL_159;
        }
        std::error_code v81 = v132;
        do
        {
          std::string v82 = v80;
          std::random_device v83 = v81;
          unint64_t v84 = v80[4];
          uint64_t v85 = v80 + 1;
          if (v84 >= i)
          {
            uint64_t v85 = v82;
            std::error_code v81 = (void **)v82;
          }
          std::string::size_type v80 = (void *)*v85;
        }
        while (v80);
        if (v81 == v132) {
          goto LABEL_159;
        }
        if (v84 < i) {
          std::string v82 = v83;
        }
        if (i >= v82[4])
        {
          unsigned int v91 = (void **)std::map<void *,kaldi::quasar::BNNSGraphNetworkPlan::MemoryCallbackContextInfo>::at((uint64_t)&v131, &v130);
          unint64_t i = v130;
          uint64_t v86 = v133 + 8 * v130;
          if (*v91)
          {
            size_t v92 = *(void *)(*(void *)v86 + 144);
            if ((unint64_t)v91[1] < v92)
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v141);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v141, (uint64_t)"data_size >= tensor->data_size_in_bytes", 39);
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v141);
            }
            memcpy(*v91, *(const void **)(*(void *)v86 + 136), v92);
            goto LABEL_168;
          }
        }
        else
        {
LABEL_159:
          uint64_t v86 = v133 + 8 * i;
        }
        std::string __s = 0;
        std::string __s = (char *)*((void *)v139[0] + i);
        if (std::__find_impl[abi:ne180100]<std::string const*,std::string const*,char const*,std::__identity>(*a3, a3[1], (const char **)&__s) != a3[1])
        {
          std::vector<long long>::vector(&v141, *(unsigned __int8 *)(*(void *)v86 + 4));
          uint64_t v87 = *(unsigned __int8 *)(*(void *)v86 + 4);
          if (*(unsigned char *)(*(void *)v86 + 4))
          {
            std::string v88 = (void *)v141.__r_.__value_.__r.__words[0];
            uint64_t v89 = (uint64_t *)(*(void *)v86 + 8);
            do
            {
              uint64_t v90 = *v89++;
              *v88++ = v90;
              --v87;
            }
            while (v87);
          }
          operator new();
        }
LABEL_168:
        unint64_t i = v130 + 1;
      }
    }
  }
  else
  {
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::unique_ptr<kaldi::quasar::BNNSGraphData> *,std::unique_ptr<kaldi::quasar::BNNSGraphData> *,std::back_insert_iterator<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>((uint64_t)&v130, v135[0], v135[1], v119);
  }
  uint64_t v93 = *(void **)(a1 + 208);
  uint64_t v94 = (void *)(a1 + 216);
  if (v93 != v94)
  {
    do
    {
      if (madvise((void *)v93[4], v93[5], 7))
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v141);
        __int16 v105 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v141, (uint64_t)" Could not madvise work space: ", 31);
        int v106 = __error();
        uint64_t v107 = strerror(*v106);
        size_t v108 = strlen(v107);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v105, (uint64_t)v107, v108);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v141);
      }
      long long v95 = (void *)v93[1];
      if (v95)
      {
        do
        {
          uint64_t v96 = v95;
          long long v95 = (void *)*v95;
        }
        while (v95);
      }
      else
      {
        do
        {
          uint64_t v96 = (void *)v93[2];
          BOOL v13 = *v96 == (void)v93;
          uint64_t v93 = v96;
        }
        while (!v13);
      }
      uint64_t v93 = v96;
    }
    while (v96 != v94);
  }
  v141.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  std::vector<std::unique_ptr<BNNSTensor>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v141);
  std::__tree<int>::destroy((uint64_t)&v131, v132[0]);
  v141.__r_.__value_.__r.__words[0] = (std::string::size_type)&v133;
  std::vector<std::unique_ptr<BNNSTensor>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v141);
  v141.__r_.__value_.__r.__words[0] = (std::string::size_type)v134;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v141);
  v141.__r_.__value_.__r.__words[0] = (std::string::size_type)v135;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v141);
  if (v136)
  {
    char v137 = (uint64_t *)v136;
    operator delete(v136);
  }
  if (v139[0])
  {
    v139[1] = v139[0];
    operator delete(v139[0]);
  }
  if (v140[0])
  {
    v140[1] = v140[0];
    operator delete(v140[0]);
  }
}

uint64_t kaldi::quasar::DataFloatForInput(uint64_t *a1, unsigned __int8 **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (*a1 == v3) {
    return 0;
  }
  char v4 = *((unsigned char *)a2 + 23);
  if (v4 >= 0) {
    unint64_t v5 = (unsigned __int8 *)*((unsigned __int8 *)a2 + 23);
  }
  else {
    unint64_t v5 = a2[1];
  }
  if (v4 >= 0) {
    long long v6 = (unsigned __int8 *)a2;
  }
  else {
    long long v6 = *a2;
  }
  while (1)
  {
    uint64_t v7 = *(unsigned __int8 *)(v2 + 23);
    if ((v7 & 0x80u) == 0) {
      uint64_t v8 = (unsigned __int8 *)*(unsigned __int8 *)(v2 + 23);
    }
    else {
      uint64_t v8 = *(unsigned __int8 **)(v2 + 8);
    }
    if (v8 != v5) {
      goto LABEL_19;
    }
    if ((v7 & 0x80) != 0) {
      break;
    }
    if (!*(unsigned char *)(v2 + 23)) {
      goto LABEL_21;
    }
    uint64_t v9 = 0;
    while (*(unsigned __int8 *)(v2 + v9) == v6[v9])
    {
      if (v7 == ++v9) {
        goto LABEL_21;
      }
    }
LABEL_19:
    v2 += 32;
    if (v2 == v3) {
      return 0;
    }
  }
  if (memcmp(*(const void **)v2, v6, *(void *)(v2 + 8))) {
    goto LABEL_19;
  }
LABEL_21:
  unint64_t v11 = *(kaldi::quasar::ComputeEngineBufferItf **)(v2 + 24);
  int v12 = (*(uint64_t (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(void *)v11 + 168))(v11);
  int v13 = *((_DWORD *)v11 + 14);
  if (v12)
  {
    if (v13) {
      std::__throw_bad_variant_access[abi:ne180100]();
    }
  }
  else if (v13 != 1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v15, "*GetDataFloat() fail - data is not assigned as std::vector<float>");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v15);
  }
  uint64_t v10 = *((void *)v11 + 4);
  kaldi::quasar::ComputeEngineBufferItf::GetSize(v11);
  return v10;
}

uint64_t kaldi::quasar::BNNSGraphData::GetWritableDataFloat16(kaldi::quasar::BNNSGraphData *this)
{
  if (*((_DWORD *)this + 14)) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  return *((void *)this + 4);
}

uint64_t kaldi::quasar::BNNSGraphData::GetWritableDataFloat(kaldi::quasar::BNNSGraphData *this)
{
  if (*((_DWORD *)this + 14) != 1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "*GetWritableDataFloat() fail - data is not assigned as std::vector<float>");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return *((void *)this + 4);
}

std::string *kaldi::quasar::BNNSGraphNetworkPlan::GetSharedInputOutputNames@<X0>(long long **this@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(a2, this[17], this[18], 0xAAAAAAAAAAAAAAABLL * (this[18] - this[17]));
}

uint64_t kaldi::quasar::BNNSGraphNetworkConfig::CompiledBNNSGraph(void)const::$_0::__invoke(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result == 8 && a2 && a4)
  {
    uint64_t result = *(void *)(a4 + 8);
    if (result) {
      JUMPOUT(0x1B3EA7B20);
    }
  }
  return result;
}

kaldi::quasar::BNNSGraphNetworkConfig *kaldi::quasar::BNNSGraphNetworkConfig::BNNSGraphNetworkConfig(kaldi::quasar::BNNSGraphNetworkConfig *this, const kaldi::quasar::BNNSGraphNetworkConfig *a2)
{
  *(void *)this = &unk_1F0A511C0;
  *((unsigned char *)this + 8) = *((unsigned char *)a2 + 8);
  uint64_t v4 = *((void *)a2 + 3);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)this + 3) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *((_WORD *)this + 16) = *((_WORD *)a2 + 16);
  *(void *)this = &unk_1F0A510A8;
  if (*((char *)a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 40), *((const std::string::value_type **)a2 + 5), *((void *)a2 + 6));
  }
  else
  {
    long long v5 = *(_OWORD *)((char *)a2 + 40);
    *((void *)this + 7) = *((void *)a2 + 7);
    *(_OWORD *)((char *)this + 4std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = v5;
  }
  if (*((char *)a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 64), *((const std::string::value_type **)a2 + 8), *((void *)a2 + 9));
  }
  else
  {
    long long v6 = *((_OWORD *)a2 + 4);
    *((void *)this + 1std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = *((void *)a2 + 10);
    *((_OWORD *)this + 4) = v6;
  }
  if (*((char *)a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 88), *((const std::string::value_type **)a2 + 11), *((void *)a2 + 12));
  }
  else
  {
    long long v7 = *(_OWORD *)((char *)a2 + 88);
    *((void *)this + 13) = *((void *)a2 + 13);
    *(_OWORD *)((char *)this + 88) = v7;
  }
  uint64_t v8 = *((void *)a2 + 14);
  __int16 v9 = *((_WORD *)a2 + 60);
  *((void *)this + 16) = 0;
  *((_WORD *)this + 6std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = v9;
  *((void *)this + 14) = v8;
  *((void *)this + 17) = 0;
  *((void *)this + 18) = 0;
  std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>((std::string *)((char *)this + 128), *((long long **)a2 + 16), *((long long **)a2 + 17), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 17) - *((void *)a2 + 16)) >> 4));
  *((unsigned char *)this + 152) = *((unsigned char *)a2 + 152);
  return this;
}

void sub_1B2166D64(_Unwind_Exception *a1)
{
  if (v1[87] < 0) {
    operator delete(*v3);
  }
  if (v1[63] < 0) {
    operator delete(*v2);
  }
  kaldi::quasar::ComputeEngineConfigItf::~ComputeEngineConfigItf((kaldi::quasar::ComputeEngineConfigItf *)v1);
  _Unwind_Resume(a1);
}

void kaldi::quasar::BNNSGraphData::CopyFromMatrixT<kaldi::CuMatrixBase<float>>(uint64_t a1, uint64_t a2)
{
  v15[32] = *MEMORY[0x1E4F143B8];
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 168))(a1))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__src);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&__src, "CopyFromMatrixT(const MatType &mat) not implemented for fp16");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__src);
  }
  if (*(_DWORD *)(a1 + 56) != 1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__src);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&__src, "CopyFromMatrixT(const MatType &mat) fail - data not assigned with std::vector<float>");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__src);
  }
  uint64_t v4 = (const void *)*(int *)(a2 + 16);
  int v5 = *(_DWORD *)(a2 + 20);
  long long __src = (void *)v5;
  uint64_t v14 = v4;
  std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((char *)(a1 + 72), (char *)&__src, (uint64_t)v15, 2uLL);
  if (*(_DWORD *)(a1 + 56) != 1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  std::vector<float>::resize(a1 + 32, (int)v4 * v5);
  if (*(_DWORD *)(a2 + 24) == *(_DWORD *)(a2 + 16))
  {
    memcpy(*(void **)(a1 + 32), *(const void **)(a2 + 8), *(void *)(a1 + 40) - *(void *)(a1 + 32));
  }
  else if (v5 >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    size_t v8 = 4 * (void)v4;
    do
    {
      __int16 v9 = (void *)(*(void *)(a1 + 32) + v6);
      uint64_t v10 = (const void *)(*(void *)(a2 + 8) + 4 * v7 * *(int *)(a2 + 24));
      unsigned int v11 = *(_DWORD *)(a2 + 16);
      uint64_t v12 = *(void *)(a2 + 32);
      long long __src = &unk_1F0A472D0;
      uint64_t v14 = v10;
      v15[1] = v12;
      v15[0] = v11;
      memcpy(v9, v10, v8);
      ++v7;
      v6 += v8;
    }
    while (v5 != v7);
  }
}

void sub_1B2166FA4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void *kaldi::quasar::BNNSGraphData::CopyFromMatrixT<kaldi::MatrixBase<float>>(uint64_t a1, uint64_t a2)
{
  v17[32] = *MEMORY[0x1E4F143B8];
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 168))(a1))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__src);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__src, "CopyFromMatrixT(const MatType &mat) not implemented for fp16");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__src);
  }
  if (*(_DWORD *)(a1 + 56) != 1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__src);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__src, "CopyFromMatrixT(const MatType &mat) fail - data not assigned with std::vector<float>");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__src);
  }
  int v4 = kaldi::MatrixBase<float>::NumRows(a2);
  int v5 = kaldi::MatrixBase<float>::NumCols(a2);
  uint64_t v6 = v5;
  __src[0] = v4;
  __src[1] = v5;
  std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((char *)(a1 + 72), (char *)__src, (uint64_t)v17, 2uLL);
  if (*(_DWORD *)(a1 + 56) != 1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t *)(a1 + 32);
  std::vector<float>::resize(a1 + 32, (int)v6 * v4);
  int v8 = fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>::Start(a2);
  uint64_t result = (void *)kaldi::MatrixBase<float>::NumCols(a2);
  if (v8 == result) {
    return memcpy(*(void **)(a1 + 32), *(const void **)a2, *(void *)(a1 + 40) - *(void *)(a1 + 32));
  }
  if (v4 >= 1)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    size_t v12 = 4 * v6;
    do
    {
      uint64_t v13 = *v7;
      uint64_t v14 = *(char **)a2;
      uint64_t v15 = *(int *)(a2 + 16);
      kaldi::MatrixBase<float>::NumCols(a2);
      uint64_t result = memcpy((void *)(v13 + v10), &v14[4 * v11 * v15], v12);
      ++v11;
      v10 += v12;
    }
    while (v4 != v11);
  }
  return result;
}

void sub_1B2167194(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::BNNSGraphData::GetDataFloat(kaldi::quasar::BNNSGraphData *this)
{
  if (*((_DWORD *)this + 14) != 1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "*GetDataFloat() fail - data is not assigned as std::vector<float>");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return *((void *)this + 4);
}

void *kaldi::quasar::BNNSGraphData::BNNSGraphData(void *a1, uint64_t a2, char a3)
{
  uint64_t v6 = kaldi::quasar::ComputeEngineBufferItf::ComputeEngineBufferItf(a1);
  *uint64_t v6 = &unk_1F0A50178;
  void v6[4] = 0;
  uint64_t v7 = (std::vector<int> *)(v6 + 4);
  void v6[5] = 0;
  v6[6] = 0;
  *((_DWORD *)v6 + 14) = 0;
  v6[9] = 0;
  v6[10] = 0;
  void v6[11] = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(v6 + 9, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  int v8 = *(uint64_t **)a2;
  unint64_t v9 = 1;
  while (v8 != *(uint64_t **)(a2 + 8))
  {
    uint64_t v10 = *v8++;
    v9 *= v10;
  }
  if (a3)
  {
    _ZNSt3__16vectorIDF16_NS_9allocatorIDF16_EEEC2Em(&__p, v9);
    _ZNSt3__116__variant_detail12__assignmentINS0_8__traitsIJNS_6vectorIDF16_NS_9allocatorIDF16_EEEENS3_IfNS4_IfEEEEEEEE12__assign_altB8ne180100ILm0ES6_S6_EEvRNS0_5__altIXT_ET0_EEOT1_((uint64_t)v7, v7, &__p);
  }
  else
  {
    std::vector<float>::vector(&__p, v9);
    _ZNSt3__116__variant_detail12__assignmentINS0_8__traitsIJNS_6vectorIDF16_NS_9allocatorIDF16_EEEENS3_IfNS4_IfEEEEEEEE12__assign_altB8ne180100ILm1ES8_S8_EEvRNS0_5__altIXT_ET0_EEOT1_((uint64_t)v7, v7, &__p);
  }
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  return a1;
}

void sub_1B2167300(_Unwind_Exception *a1)
{
  int v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 8std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = v5;
    operator delete(v5);
  }
  _ZNSt3__116__variant_detail6__dtorINS0_8__traitsIJNS_6vectorIDF16_NS_9allocatorIDF16_EEEENS3_IfNS4_IfEEEEEEELNS0_6_TraitE1EED2Ev(v2);
  kaldi::quasar::ComputeEngineBufferItf::~ComputeEngineBufferItf((void **)v1);
  _Unwind_Resume(a1);
}

void kaldi::quasar::BNNSGraphData::~BNNSGraphData(kaldi::quasar::BNNSGraphData *this)
{
  kaldi::quasar::BNNSGraphData::~BNNSGraphData(this);
  JUMPOUT(0x1B3EA8670);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F0A50178;
  uint64_t v2 = (void *)*((void *)this + 9);
  if (v2)
  {
    *((void *)this + 1std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = v2;
    operator delete(v2);
  }
  _ZNSt3__116__variant_detail6__dtorINS0_8__traitsIJNS_6vectorIDF16_NS_9allocatorIDF16_EEEENS3_IfNS4_IfEEEEEEELNS0_6_TraitE1EED2Ev((uint64_t)this + 32);
  kaldi::quasar::ComputeEngineBufferItf::~ComputeEngineBufferItf((void **)this);
}

void kaldi::quasar::BNNSGraphData::Copy(kaldi::quasar::BNNSGraphData *this)
{
}

void sub_1B216742C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1093C40A6484513);
  _Unwind_Resume(a1);
}

void *kaldi::quasar::BNNSGraphData::CopyToVector(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 168))(a1))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v8, "CopyToVector(CuVector<BaseFloat> *out) not implemented for fp16");
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 56) != 1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v8, "CopyToVector(CuVector<BaseFloat> *out) fail - data is not assigned as std::vector<float>");
    goto LABEL_10;
  }
  kaldi::CuVector<float>::Resize(a2, (*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 2, 1);
  if (*(_DWORD *)(a1 + 56) != 1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v8, "*GetDataFloat() fail - data is not assigned as std::vector<float>");
LABEL_10:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8);
  }
  int v4 = *(void **)(a2 + 8);
  int v5 = *(const void **)(a1 + 32);
  size_t v6 = *(void *)(a1 + 40) - (void)v5;
  return memmove(v4, v5, v6);
}

void kaldi::quasar::BNNSGraphData::CopyToStdVector(uint64_t a1, std::vector<unsigned int> *a2)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 168))(a1))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v18);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v18, "CopyToStdVector(std::vector<int32> *out) not implemented for fp16");
    goto LABEL_26;
  }
  if (*(_DWORD *)(a1 + 56) != 1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v18);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v18, "CopyToStdVector(std::vector<int32> *out) fail - data is not assigned as std::vector<float>");
LABEL_26:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v18);
  }
  a2->__end_ = a2->__begin_;
  std::vector<int>::reserve(a2, (uint64_t)(*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 2);
  int v4 = *(float **)(a1 + 32);
  int v5 = *(float **)(a1 + 40);
  if (v4 != v5)
  {
    p_end_cap = &a2->__end_cap_;
    std::vector<unsigned int>::pointer end = a2->__end_;
    do
    {
      int v8 = (int)*v4;
      if (end >= p_end_cap->__value_)
      {
        std::vector<unsigned int>::pointer begin = a2->__begin_;
        uint64_t v11 = end - a2->__begin_;
        unint64_t v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v13 = (char *)p_end_cap->__value_ - (char *)begin;
        if (v13 >> 1 > v12) {
          unint64_t v12 = v13 >> 1;
        }
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v12;
        }
        if (v14)
        {
          uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&a2->__end_cap_, v14);
          std::vector<unsigned int>::pointer begin = a2->__begin_;
          std::vector<unsigned int>::pointer end = a2->__end_;
        }
        else
        {
          uint64_t v15 = 0;
        }
        uint64_t v16 = (int *)&v15[4 * v11];
        *uint64_t v16 = v8;
        unint64_t v9 = (unsigned int *)(v16 + 1);
        while (end != begin)
        {
          int v17 = *--end;
          *--uint64_t v16 = v17;
        }
        a2->__begin_ = (std::vector<unsigned int>::pointer)v16;
        a2->__end_ = v9;
        a2->__end_cap_.__value_ = (unsigned int *)&v15[4 * v14];
        if (begin) {
          operator delete(begin);
        }
      }
      else
      {
        *std::vector<unsigned int>::pointer end = v8;
        unint64_t v9 = end + 1;
      }
      a2->__end_ = v9;
      ++v4;
      std::vector<unsigned int>::pointer end = v9;
    }
    while (v4 != v5);
  }
}

char *kaldi::quasar::BNNSGraphData::CopyToStdVector(uint64_t a1, char *a2)
{
  uint64_t result = (char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 168))(a1);
  if (result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, "CopyToStdVector(std::vector<BaseFloat> *out) not implemented for fp16");
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 56) != 1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, "CopyToStdVector(std::vector<BaseFloat> *out) fail - data is not assigned as std::vector<float>");
LABEL_10:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v7);
  }
  if ((char *)(a1 + 32) != a2)
  {
    int v5 = *(char **)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 40);
    return std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(a2, v5, v6, (v6 - (uint64_t)v5) >> 2);
  }
  return result;
}

uint64_t kaldi::quasar::BNNSGraphData::CopyFromImpl(kaldi::quasar::BNNSGraphData *this, const kaldi::quasar::ComputeEngineBufferItf *lpsrc)
{
  if (!v3) {
    __cxa_bad_cast();
  }
  return _ZNSt3__116__variant_detail12__assignmentINS0_8__traitsIJNS_6vectorIDF16_NS_9allocatorIDF16_EEEENS3_IfNS4_IfEEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentIS9_LNS0_6_TraitE1EEEEEvOT_((uint64_t)this + 32, (uint64_t)v3 + 32);
}

void *kaldi::quasar::BNNSGraphData::FlatRangeCopy(kaldi::quasar::BNNSGraphData *this, const kaldi::quasar::ComputeEngineBufferItf *a2, int a3, int a4, int a5)
{
  if ((*(unsigned int (**)(kaldi::quasar::BNNSGraphData *))(*(void *)this + 168))(this))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v15, "FlatRangeCopy(const ComputeEngineBufferItf *srcBuffer, int srcstart, int srcend, int deststart) not implemented for fp16");
    goto LABEL_10;
  }
  if (!a2
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v15, "bnns_buffer != nullptr");
    goto LABEL_10;
  }
  if (v10[14] != 1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v15, "*GetDataFloat() fail - data is not assigned as std::vector<float>");
LABEL_10:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v15);
  }
  uint64_t v11 = *((void *)v10 + 4);
  uint64_t WritableDataFloat = kaldi::quasar::BNNSGraphData::GetWritableDataFloat(this);
  if (a4 - a3 < 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v15, "srcend - srcstart >= 0");
    goto LABEL_10;
  }
  uint64_t v13 = (void *)(WritableDataFloat + 4 * a5);
  return memcpy(v13, (const void *)(v11 + 4 * a3), 4 * (a4 - a3));
}

void sub_1B2167A60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

float kaldi::quasar::BNNSGraphData::FlatRangeCopy(kaldi::quasar::BNNSGraphData *this, int *a2, unsigned int a3, int a4)
{
  if ((*(unsigned int (**)(kaldi::quasar::BNNSGraphData *))(*(void *)this + 168))(this))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "FlatRangeCopy(const int32 *ptr, int length, int destStart) not implemented for fp16");
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
  }
  if ((a3 & 0x80000000) != 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "length >= 0");
    goto LABEL_8;
  }
  uint64_t WritableDataFloat = kaldi::quasar::BNNSGraphData::GetWritableDataFloat(this);
  if (a3)
  {
    uint64_t v10 = (float *)(WritableDataFloat + 4 * a4);
    uint64_t v11 = a3;
    do
    {
      int v12 = *a2++;
      float result = (float)v12;
      *v10++ = (float)v12;
      --v11;
    }
    while (v11);
  }
  return result;
}

void sub_1B2167B5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *kaldi::quasar::BNNSGraphData::FlatRangeCopy(kaldi::quasar::BNNSGraphData *this, const float *a2, unsigned int a3, int a4)
{
  if ((*(unsigned int (**)(kaldi::quasar::BNNSGraphData *))(*(void *)this + 168))(this))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "FlatRangeCopy(const float *ptr, int length, int destStart) not implemented for fp16");
LABEL_7:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
  if ((a3 & 0x80000000) != 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "length >= 0");
    goto LABEL_7;
  }
  int v8 = (void *)(kaldi::quasar::BNNSGraphData::GetWritableDataFloat(this) + 4 * a4);
  return memcpy(v8, a2, 4 * a3);
}

void sub_1B2167C40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

float kaldi::quasar::BNNSGraphData::AssignScalar(kaldi::quasar::BNNSGraphData *this, int a2, int a3)
{
  int v6 = (*(uint64_t (**)(kaldi::quasar::BNNSGraphData *))(*(void *)this + 168))(this);
  int v8 = *((_DWORD *)this + 14);
  if (v6)
  {
    if (!v8)
    {
      *(short float *)&float result = (short float)a2;
      *(short float *)(*((void *)this + 4) + 2 * a3) = (short float)a2;
      return result;
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "AssignScalar(int32 val, int flatOffset) fail - data not assigned as std::vector<float16>");
LABEL_9:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
  }
  if (v8 != 1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "AssignScalar(int32 val, int flatOffset) fail - data not assigned as std::vector<float>");
    goto LABEL_9;
  }
  float result = (float)a2;
  *(float *)(*((void *)this + 4) + 4 * a3) = (float)a2;
  return result;
}

uint64_t kaldi::quasar::BNNSGraphData::AssignScalar(kaldi::quasar::BNNSGraphData *this, float a2, int a3)
{
  _S8 = a2;
  uint64_t result = (*(uint64_t (**)(kaldi::quasar::BNNSGraphData *))(*(void *)this + 168))(this);
  int v7 = *((_DWORD *)this + 14);
  if (result)
  {
    if (!v7)
    {
      __asm { FCVT            H0, S8 }
      *(_WORD *)(*((void *)this + 4) + 2 * a3) = _H0;
      return result;
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "AssignScalar(float val, int flatOffset) fail - data not assigned as std::vector<float16>");
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
  }
  if (v7 != 1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "AssignScalar(float val, int flatOffset) fail - data not assigned as std::vector<float>");
    goto LABEL_8;
  }
  *(float *)(*((void *)this + 4) + 4 * a3) = _S8;
  return result;
}

float kaldi::quasar::BNNSGraphData::GetFloatScalar(kaldi::quasar::BNNSGraphData *this, int a2)
{
  int v4 = (*(uint64_t (**)(kaldi::quasar::BNNSGraphData *))(*(void *)this + 168))(this);
  int v5 = *((_DWORD *)this + 14);
  if (v4)
  {
    if (!v5)
    {
      _H0 = *(_WORD *)(*((void *)this + 4) + 2 * a2);
      __asm { FCVT            S0, H0 }
      return result;
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v12, "GetFloatScalar(int flatOffset) fail - data not assigned as std::vector<float16>");
LABEL_9:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12);
  }
  if (v5 != 1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v12, "GetFloatScalar(int flatOffset) fail - data not assigned as std::vector<float>");
    goto LABEL_9;
  }
  return *(float *)(*((void *)this + 4) + 4 * a2);
}

__int16 kaldi::quasar::BNNSGraphData::GetFloat16Scalar@<H0>(kaldi::quasar::BNNSGraphData *this@<X0>, int a2@<W1>)
{
  if (*((_DWORD *)this + 14)) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  return *(_WORD *)(*((void *)this + 4) + 2 * a2);
}

uint64_t kaldi::quasar::BNNSGraphData::GetDataFloat16(kaldi::quasar::BNNSGraphData *this)
{
  if (*((_DWORD *)this + 14)) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  return *((void *)this + 4);
}

BOOL kaldi::quasar::BNNSGraphData::isDataFloat16(kaldi::quasar::BNNSGraphData *this)
{
  return *((_DWORD *)this + 14) == 0;
}

uint64_t kaldi::quasar::BNNSGraphData::GetNumDims(kaldi::quasar::BNNSGraphData *this)
{
  return (*((void *)this + 10) - *((void *)this + 9)) >> 3;
}

uint64_t kaldi::quasar::BNNSGraphData::GetDimSize(kaldi::quasar::BNNSGraphData *this, int a2)
{
  return *(void *)(*((void *)this + 9) + 8 * a2);
}

void kaldi::quasar::BNNSGraphData::Reshape()
{
}

void sub_1B2167FC4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void *_ZNSt3__16vectorIDF16_NS_9allocatorIDF16_EEEC2Em(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<short>::__vallocate[abi:ne180100](a1, a2);
    int v4 = (char *)a1[1];
    bzero(v4, 2 * a2);
    a1[1] = &v4[2 * a2];
  }
  return a1;
}

void sub_1B2168074(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double _ZNSt3__116__variant_detail12__assignmentINS0_8__traitsIJNS_6vectorIDF16_NS_9allocatorIDF16_EEEENS3_IfNS4_IfEEEEEEEE12__assign_altB8ne180100ILm0ES6_S6_EEvRNS0_5__altIXT_ET0_EEOT1_(uint64_t a1, std::vector<int> *this, __n128 *__c)
{
  if (*(_DWORD *)(a1 + 24)) {
    _ZNSt3__116__variant_detail12__assignmentINS0_8__traitsIJNS_6vectorIDF16_NS_9allocatorIDF16_EEEENS3_IfNS4_IfEEEEEEEE9__emplaceB8ne180100ILm0EJS6_EEERDaDpOT0_(a1, (uint64_t)__c);
  }
  else {
    *(void *)&double result = std::vector<int>::__move_assign((uint64_t)this, __c).n128_u64[0];
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__assignmentINS0_8__traitsIJNS_6vectorIDF16_NS_9allocatorIDF16_EEEENS3_IfNS4_IfEEEEEEEE9__emplaceB8ne180100ILm0EJS6_EEERDaDpOT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 24);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_1F0A64340[v4])(&v6, a1);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJNS_6vectorIDF16_NS_9allocatorIDF16_EEEENS8_IfNS9_IfEEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSB_SD_EEEEEEDcSH_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJNS_6vectorIDF16_NS_9allocatorIDF16_EEEENS8_IfNS9_IfEEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSB_SD_EEEEEEDcSH_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__116__variant_detail12__assignmentINS0_8__traitsIJNS_6vectorIDF16_NS_9allocatorIDF16_EEEENS3_IfNS4_IfEEEEEEEE12__assign_altB8ne180100ILm1ES8_S8_EEvRNS0_5__altIXT_ET0_EEOT1_(uint64_t a1, std::vector<int> *this, __n128 *__c)
{
  if (*(_DWORD *)(a1 + 24) == 1) {
    std::vector<int>::__move_assign((uint64_t)this, __c);
  }
  else {
    _ZNSt3__116__variant_detail12__assignmentINS0_8__traitsIJNS_6vectorIDF16_NS_9allocatorIDF16_EEEENS3_IfNS4_IfEEEEEEEE9__emplaceB8ne180100ILm1EJS8_EEERDaDpOT0_(a1, (uint64_t)__c);
  }
}

uint64_t _ZNSt3__116__variant_detail12__assignmentINS0_8__traitsIJNS_6vectorIDF16_NS_9allocatorIDF16_EEEENS3_IfNS4_IfEEEEEEEE9__emplaceB8ne180100ILm1EJS8_EEERDaDpOT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 24);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_1F0A64340[v4])(&v6, a1);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 1;
  return a1;
}

uint64_t _ZNSt3__116__variant_detail6__dtorINS0_8__traitsIJNS_6vectorIDF16_NS_9allocatorIDF16_EEEENS3_IfNS4_IfEEEEEEELNS0_6_TraitE1EED2Ev(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_1F0A64340[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__assignmentINS0_8__traitsIJNS_6vectorIDF16_NS_9allocatorIDF16_EEEENS3_IfNS4_IfEEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentIS9_LNS0_6_TraitE1EEEEEvOT_(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(result + 24);
  uint64_t v4 = *(unsigned int *)(a2 + 24);
  if (v3 == -1)
  {
    if (v4 == -1) {
      return result;
    }
  }
  else if (v4 == -1)
  {
    double result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1F0A64340[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 24) = -1;
    return result;
  }
  uint64_t v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_1F0A64350[v4])(&v5, result, a2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJNS_6vectorIDF16_NS_9allocatorIDF16_EEEENS8_IfNS9_IfEEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISE_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSI_1EJSB_SD_EEERKSU_EEEDcSM_DpT0_(uint64_t *a1, char *a2, uint64_t a3)
{
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJNS_6vectorIDF16_NS_9allocatorIDF16_EEEENS8_IfNS9_IfEEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISE_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSI_1EJSB_SD_EEERKSU_EEEDcSM_DpT0_(uint64_t *a1, char *a2, uint64_t a3)
{
}

void _ZNSt3__116__variant_detail12__assignmentINS0_8__traitsIJNS_6vectorIDF16_NS_9allocatorIDF16_EEEENS3_IfNS4_IfEEEEEEEE12__assign_altB8ne180100ILm0ES6_RKS6_EEvRNS0_5__altIXT_ET0_EEOT1_(uint64_t a1, char *a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 24))
  {
    v5[0] = a1;
    v5[1] = a3;
    _ZZNSt3__116__variant_detail12__assignmentINS0_8__traitsIJNS_6vectorIDF16_NS_9allocatorIDF16_EEEENS3_IfNS4_IfEEEEEEEE12__assign_altB8ne180100ILm0ES6_RKS6_EEvRNS0_5__altIXT_ET0_EEOT1_ENKUt_clB8ne180100ENS_17integral_constantIbLb0EEE(v5);
  }
  else if (a2 != (char *)a3)
  {
    uint64_t v4 = *(char **)a3;
    uint64_t v3 = *(void *)(a3 + 8);
    std::vector<short>::__assign_with_size[abi:ne180100]<short *,short *>(a2, v4, v3, (v3 - (uint64_t)v4) >> 1);
  }
}

void _ZZNSt3__116__variant_detail12__assignmentINS0_8__traitsIJNS_6vectorIDF16_NS_9allocatorIDF16_EEEENS3_IfNS4_IfEEEEEEEE12__assign_altB8ne180100ILm0ES6_RKS6_EEvRNS0_5__altIXT_ET0_EEOT1_ENKUt_clB8ne180100ENS_17integral_constantIbLb0EEE(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  __n128 __p = 0;
  _ZNSt3__16vectorIDF16_NS_9allocatorIDF16_EEE16__init_with_sizeB8ne180100IPDF16_S5_EEvT_T0_m(&__p, *(const void **)v1, *(void *)(v1 + 8), (uint64_t)(*(void *)(v1 + 8) - *(void *)v1) >> 1);
  _ZNSt3__116__variant_detail12__assignmentINS0_8__traitsIJNS_6vectorIDF16_NS_9allocatorIDF16_EEEENS3_IfNS4_IfEEEEEEEE9__emplaceB8ne180100ILm0EJS6_EEERDaDpOT0_(v2, (uint64_t)&__p);
  if (__p)
  {
    uint64_t v4 = __p;
    operator delete(__p);
  }
}

void sub_1B216841C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *_ZNSt3__16vectorIDF16_NS_9allocatorIDF16_EEE16__init_with_sizeB8ne180100IPDF16_S5_EEvT_T0_m(void *result, const void *a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    char v6 = result;
    double result = std::vector<short>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      double result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B2168498(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void _ZNSt3__116__variant_detail12__assignmentINS0_8__traitsIJNS_6vectorIDF16_NS_9allocatorIDF16_EEEENS3_IfNS4_IfEEEEEEEE12__assign_altB8ne180100ILm1ES8_RKS8_EEvRNS0_5__altIXT_ET0_EEOT1_(uint64_t a1, char *a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 24) == 1)
  {
    if (a2 != (char *)a3)
    {
      uint64_t v4 = *(char **)a3;
      uint64_t v3 = *(void *)(a3 + 8);
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(a2, v4, v3, (v3 - (uint64_t)v4) >> 2);
    }
  }
  else
  {
    v5[0] = a1;
    v5[1] = a3;
    _ZZNSt3__116__variant_detail12__assignmentINS0_8__traitsIJNS_6vectorIDF16_NS_9allocatorIDF16_EEEENS3_IfNS4_IfEEEEEEEE12__assign_altB8ne180100ILm1ES8_RKS8_EEvRNS0_5__altIXT_ET0_EEOT1_ENKUt_clB8ne180100ENS_17integral_constantIbLb0EEE(v5);
  }
}

void _ZZNSt3__116__variant_detail12__assignmentINS0_8__traitsIJNS_6vectorIDF16_NS_9allocatorIDF16_EEEENS3_IfNS4_IfEEEEEEEE12__assign_altB8ne180100ILm1ES8_RKS8_EEvRNS0_5__altIXT_ET0_EEOT1_ENKUt_clB8ne180100ENS_17integral_constantIbLb0EEE(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  __n128 __p = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, *(const void **)v1, *(void *)(v1 + 8), (uint64_t)(*(void *)(v1 + 8) - *(void *)v1) >> 2);
  _ZNSt3__116__variant_detail12__assignmentINS0_8__traitsIJNS_6vectorIDF16_NS_9allocatorIDF16_EEEENS3_IfNS4_IfEEEEEEEE9__emplaceB8ne180100ILm1EJS8_EEERDaDpOT0_(v2, (uint64_t)&__p);
  if (__p)
  {
    uint64_t v4 = __p;
    operator delete(__p);
  }
}

void sub_1B2168580(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *kaldi::quasar::BNNSGraphData::CopyToMatrixT<kaldi::Matrix<float>>(uint64_t a1, int32x2_t *a2)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 168))(a1))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v12, "CopyToMatrixT(MatType *out) const not implemented for fp16");
    goto LABEL_13;
  }
  if (*(_DWORD *)(a1 + 56) != 1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v12, "CopyToMatrixT(MatType *out) fail - data not assigned with std::vector<float>");
    goto LABEL_13;
  }
  uint64_t v4 = *(unsigned int **)(a1 + 72);
  uint64_t v5 = (uint64_t)(*(void *)(a1 + 80) - (void)v4) >> 3;
  if (v5 != 1)
  {
    if (v5 == 2)
    {
      unsigned int v7 = *v4;
      v4 += 2;
      uint64_t v6 = v7;
      goto LABEL_7;
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Unsupported BNNSGraph data shape: ", 34);
    std::ostream::operator<<();
LABEL_13:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12);
  }
  uint64_t v6 = 1;
LABEL_7:
  kaldi::Matrix<float>::Resize(a2, v6, *v4, 1, 1);
  if (*(_DWORD *)(a1 + 56) != 1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  size_t v8 = (void *)*a2;
  unint64_t v9 = *(const void **)(a1 + 32);
  size_t v10 = *(void *)(a1 + 40) - (void)v9;
  return memcpy(v8, v9, v10);
}

void sub_1B21686D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *kaldi::quasar::BNNSGraphData::CopyToMatrixT<kaldi::CuMatrix<float>>(uint64_t a1, int32x2_t *a2)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 168))(a1))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v12, "CopyToMatrixT(MatType *out) const not implemented for fp16");
    goto LABEL_13;
  }
  if (*(_DWORD *)(a1 + 56) != 1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v12, "CopyToMatrixT(MatType *out) fail - data not assigned with std::vector<float>");
    goto LABEL_13;
  }
  uint64_t v4 = *(unsigned int **)(a1 + 72);
  uint64_t v5 = (uint64_t)(*(void *)(a1 + 80) - (void)v4) >> 3;
  if (v5 != 1)
  {
    if (v5 == 2)
    {
      unsigned int v7 = *v4;
      v4 += 2;
      uint64_t v6 = v7;
      goto LABEL_7;
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Unsupported BNNSGraph data shape: ", 34);
    std::ostream::operator<<();
LABEL_13:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12);
  }
  uint64_t v6 = 1;
LABEL_7:
  kaldi::CuMatrix<float>::Resize(a2, v6, *v4, 1, 1);
  if (*(_DWORD *)(a1 + 56) != 1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  size_t v8 = (void *)a2[1];
  unint64_t v9 = *(const void **)(a1 + 32);
  size_t v10 = *(void *)(a1 + 40) - (void)v9;
  return memcpy(v8, v9, v10);
}

void sub_1B216882C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::vector<long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<long long const*>,std::__wrap_iter<long long const*>>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    double result = std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      double result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B21688A4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(std::string *this, char **a2)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  uint64_t v3 = *a2;
  uint64_t v4 = v3 - 1;
  while (*++v4)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, v3, v4);
  return this;
}

void sub_1B2168904(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<std::__value_type<void *,kaldi::quasar::BNNSGraphNetworkPlan::MemoryCallbackContextInfo>,std::__map_value_compare<void *,std::__value_type<void *,kaldi::quasar::BNNSGraphNetworkPlan::MemoryCallbackContextInfo>,std::less<void *>,true>,std::allocator<std::__value_type<void *,kaldi::quasar::BNNSGraphNetworkPlan::MemoryCallbackContextInfo>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void * const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = (uint64_t *)operator new(0x38uLL);
    void v11[4] = **a4;
    void v11[5] = 0;
    int32x2_t v11[6] = 0;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

void *std::vector<std::unique_ptr<kaldi::quasar::BNNSGraphData>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1B2168A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *std::vector<std::unique_ptr<BNNSTensor>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1B2168AD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void std::vector<std::unique_ptr<BNNSTensor>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<BNNSTensor>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

uint64_t std::vector<std::unique_ptr<BNNSTensor>>::__base_destruct_at_end[abi:ne180100](uint64_t result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void **)(result + 8);
  while (v4 != a2)
  {
    uint64_t v5 = *--v4;
    double result = v5;
    *uint64_t v4 = 0;
    if (v5) {
      double result = MEMORY[0x1B3EA8670](result, 0x10D0C40E3B58404);
    }
  }
  *(void *)(v3 + 8) = a2;
  return result;
}

unsigned __int8 *std::__find_impl[abi:ne180100]<std::string const*,std::string const*,char const*,std::__identity>(unsigned __int8 *a1, unsigned __int8 *a2, const char **a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    uint64_t v5 = *a3;
    size_t v6 = strlen(*a3);
    while (1)
    {
      if ((char)v3[23] < 0)
      {
        if (v6 == *((void *)v3 + 1))
        {
          if (v6 == -1) {
LABEL_14:
          }
            std::string::__throw_out_of_range[abi:ne180100]();
          uint64_t v7 = *(unsigned __int8 **)v3;
LABEL_10:
          if (!memcmp(v7, v5, v6)) {
            return v3;
          }
        }
      }
      else if (v6 == v3[23])
      {
        uint64_t v7 = v3;
        if (v6 == -1) {
          goto LABEL_14;
        }
        goto LABEL_10;
      }
      v3 += 24;
      if (v3 == a2) {
        return a2;
      }
    }
  }
  return v3;
}

uint64_t std::vector<std::unique_ptr<kaldi::quasar::BNNSGraphData>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<kaldi::quasar::BNNSGraphData>>,std::reverse_iterator<std::unique_ptr<kaldi::quasar::BNNSGraphData>*>,std::reverse_iterator<std::unique_ptr<kaldi::quasar::BNNSGraphData>*>,std::reverse_iterator<std::unique_ptr<kaldi::quasar::BNNSGraphData>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<kaldi::quasar::BNNSGraphData>>,std::reverse_iterator<std::unique_ptr<kaldi::quasar::BNNSGraphData>*>,std::reverse_iterator<std::unique_ptr<kaldi::quasar::BNNSGraphData>*>,std::reverse_iterator<std::unique_ptr<kaldi::quasar::BNNSGraphData>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  uint64_t v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    unint64_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<kaldi::quasar::BNNSGraphData>>,std::reverse_iterator<std::unique_ptr<kaldi::quasar::BNNSGraphData>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<kaldi::quasar::BNNSGraphData>>,std::reverse_iterator<std::unique_ptr<kaldi::quasar::BNNSGraphData>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>,std::reverse_iterator<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>*>>::operator()[abi:ne180100]((void *)a1);
  }
  return a1;
}

uint64_t *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::unique_ptr<kaldi::quasar::BNNSGraphData> *,std::unique_ptr<kaldi::quasar::BNNSGraphData> *,std::back_insert_iterator<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4 = a2;
  uint64_t v10 = a4;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v5 = a3;
  do
  {
    uint64_t v6 = *v4;
    *uint64_t v4 = 0;
    uint64_t v9 = v6;
    std::back_insert_iterator<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::operator=[abi:ne180100](&v10, &v9);
    uint64_t v7 = v9;
    uint64_t v9 = 0;
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
    ++v4;
  }
  while (v4 != v5);
  return v5;
}

void sub_1B2168E38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::unique_ptr<kaldi::quasar::BNNSGraphData> *,std::unique_ptr<kaldi::quasar::BNNSGraphData> *,std::back_insert_iterator<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>(a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **std::back_insert_iterator<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::operator=[abi:ne180100](uint64_t **a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (void *)(*a1)[1];
  uint64_t v6 = *a1;
  unint64_t v9 = v6[2];
  uint64_t v7 = v6 + 2;
  unint64_t v8 = v9;
  if ((unint64_t)v5 >= v9)
  {
    uint64_t v12 = ((uint64_t)v5 - *v4) >> 3;
    if ((unint64_t)(v12 + 1) >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v13 = v8 - *v4;
    uint64_t v14 = v13 >> 2;
    if (v13 >> 2 <= (unint64_t)(v12 + 1)) {
      uint64_t v14 = v12 + 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v14;
    }
    void v20[4] = v7;
    if (v15) {
      long long v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v7, v15);
    }
    else {
      long long v16 = 0;
    }
    int v17 = &v16[8 * v12];
    v20[0] = v16;
    v20[1] = v17;
    void v20[3] = &v16[8 * v15];
    uint64_t v18 = *a2;
    *a2 = 0;
    *(void *)int v17 = v18;
    void v20[2] = v17 + 8;
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__swap_out_circular_buffer(v4, v20);
    uint64_t v11 = (void *)v4[1];
    std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer(v20);
  }
  else
  {
    uint64_t v10 = *a2;
    *a2 = 0;
    *uint64_t v5 = v10;
    uint64_t v11 = v5 + 1;
    v4[1] = (uint64_t)v11;
  }
  v4[1] = (uint64_t)v11;
  return a1;
}

void sub_1B2168F48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::DatabasePhraseBook::DatabasePhraseBook(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v6 = quasar::GenericPhraseBook::GenericPhraseBook(a1, a3, a4);
  *(void *)uint64_t v6 = &unk_1F0A53F18;
  *(_OWORD *)(v6 + 4std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = 0u;
  uint64_t v7 = (sqlite3_stmt **)(v6 + 40);
  unint64_t v8 = (sqlite3 **)(v6 + 48);
  *(_OWORD *)(v6 + 56) = 0u;
  unint64_t v9 = (uint64_t *)(v6 + 56);
  *(void *)(v6 + 72) = 0;
  uint64_t v10 = (const char *)a2;
  if (*(char *)(a2 + 23) < 0) {
    uint64_t v10 = *(const char **)a2;
  }
  if (sqlite3_open_v2(v10, v8, 1, 0))
  {
    if (quasar::gLogLevel >= 4)
    {
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v32 = 0u;
      memset(v31, 0, sizeof(v31));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v31);
      unint64_t v15 = sqlite3_errmsg(*v8);
      size_t v16 = strlen(v15);
      int v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v15, v16);
      std::endl[abi:ne180100]<char,std::char_traits<char>>(v17);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v31);
    }
    sqlite3_close(*v8);
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v32 = 0u;
    memset(v31, 0, sizeof(v31));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v31);
    uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"failed to open database file", 28);
    size_t v19 = strlen(v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v10, v19);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v31);
  }
  if (quasar::gLogLevel >= 4)
  {
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v32 = 0u;
    memset(v31, 0, sizeof(v31));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v31);
    uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"connected to database", 21);
    size_t v12 = strlen(v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v10, v12);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v31);
  }
  if (sqlite3_prepare_v2(*v8, "SELECT column, dictionary, max_length FROM decompress", -1, v7, 0))
  {
    int v20 = (char *)sqlite3_errmsg(*v8);
    std::string::basic_string[abi:ne180100]<0>(v31, v20);
    exception = __cxa_allocate_exception(0x18uLL);
    uint64_t v22 = *(void *)&v31[16];
    *(_OWORD *)exception = *(_OWORD *)v31;
    exception[2] = v22;
    memset(v31, 0, 24);
  }
  while (sqlite3_step(*v7) == 100)
  {
    uint64_t v13 = (char *)sqlite3_column_text(*v7, 0);
    std::string::basic_string[abi:ne180100]<0>(&v30, v13);
    uint64_t v14 = (char *)sqlite3_column_text(*v7, 1);
    std::string::basic_string[abi:ne180100]<0>(v28, v14);
    int v27 = 0;
    int v27 = sqlite3_column_int(*v7, 2);
    _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES8_iEEC2B8ne180100IJLm0ELm1ELm2EEJS8_S8_iEJEJEJRS8_SB_RiEEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSE_IJDpT2_EEEDpOT3_((std::string *)v31, (long long *)&v30, (long long *)v28, &v27);
    std::vector<std::tuple<std::string,std::string,int>>::push_back[abi:ne180100](v9, (long long *)v31);
    if (SHIBYTE(v32) < 0) {
      operator delete(*(void **)&v31[24]);
    }
    if ((v31[23] & 0x80000000) != 0) {
      operator delete(*(void **)v31);
    }
    if (v29 < 0) {
      operator delete(v28[0]);
    }
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__r_.__value_.__l.__data_);
    }
  }
  sqlite3_reset(*v7);
  if (sqlite3_prepare_v2(*v8, "SELECT output, length(output), metadata, length(metadata) FROM phrasebook WHERE input=? ORDER BY rowid LIMIT ?", -1, v7, 0))
  {
    if (quasar::gLogLevel >= 1)
    {
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v32 = 0u;
      memset(v31, 0, sizeof(v31));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v31);
      std::string::size_type v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"SQLITE Querying error: ", 23);
      uint64_t v25 = sqlite3_errmsg(*v8);
      size_t v26 = strlen(v25);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v25, v26);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v31);
    }
    sqlite3_close(*v8);
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v32 = 0u;
    memset(v31, 0, sizeof(v31));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Could not prepare SQLite Statement", 34);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v31);
  }
  return a1;
}

void sub_1B216956C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)va);
  JUMPOUT(0x1B216958CLL);
}

void sub_1B2169588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17)
{
  std::vector<std::tuple<std::string,std::string,int>>::__destroy_vector::operator()[abi:ne180100](&a17);
  *(void *)uint64_t v17 = &unk_1F0A53AE8;
  a17 = (void **)(v17 + 16);
  std::vector<quasar::RegexReplacementRule>::__destroy_vector::operator()[abi:ne180100](&a17);
  _Unwind_Resume(a1);
}

void **std::vector<std::tuple<std::string,std::string,int>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = (unint64_t)*(result - 1);
  if (v7 >= v6)
  {
    uint64_t v11 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v7 - *a1) >> 3);
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) > 0x492492492492492) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v13 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x249249249249249) {
      unint64_t v14 = 0x492492492492492;
    }
    else {
      unint64_t v14 = v12;
    }
    void v19[4] = result;
    if (v14) {
      unint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>>((uint64_t)result, v14);
    }
    else {
      unint64_t v15 = 0;
    }
    size_t v16 = &v15[56 * v11];
    v19[0] = v15;
    v19[1] = v16;
    void v19[3] = &v15[56 * v14];
    long long v17 = *a2;
    *((void *)v16 + 2) = *((void *)a2 + 2);
    *(_OWORD *)size_t v16 = v17;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v18 = *(long long *)((char *)a2 + 24);
    *((void *)v16 + 5) = *((void *)a2 + 5);
    *(_OWORD *)(v16 + 24) = v18;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    *((_DWORD *)v16 + 12) = *((_DWORD *)a2 + 12);
    void v19[2] = v16 + 56;
    std::vector<std::tuple<std::string,std::string,int>>::__swap_out_circular_buffer(a1, v19);
    uint64_t v10 = a1[1];
    uint64_t result = std::__split_buffer<std::tuple<std::string,std::string,int>>::~__split_buffer(v19);
  }
  else
  {
    long long v8 = *a2;
    *(void *)(v7 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v7 = v8;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v9 = *(long long *)((char *)a2 + 24);
    *(void *)(v7 + 4std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = *((void *)a2 + 5);
    *(_OWORD *)(v7 + 24) = v9;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    *(_DWORD *)(v7 + 48) = *((_DWORD *)a2 + 12);
    uint64_t v10 = v7 + 56;
    a1[1] = v7 + 56;
  }
  a1[1] = v10;
  return result;
}

void sub_1B2169748(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::tuple<std::string,std::string,int>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void quasar::DatabasePhraseBook::~DatabasePhraseBook(sqlite3_stmt **this)
{
  *this = (sqlite3_stmt *)&unk_1F0A53F18;
  sqlite3_finalize(this[5]);
  sqlite3_close(this[6]);
  uint64_t v2 = (void **)(this + 7);
  std::vector<std::tuple<std::string,std::string,int>>::__destroy_vector::operator()[abi:ne180100](&v2);
  *this = (sqlite3_stmt *)&unk_1F0A53AE8;
  uint64_t v2 = (void **)(this + 2);
  std::vector<quasar::RegexReplacementRule>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void quasar::DatabasePhraseBook::getPhraseBook()
{
}

void sub_1B21698B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  MEMORY[0x1B3EA8670](v14, 0x10A1C40A30CF1A8);
  _Unwind_Resume(a1);
}

void *quasar::DatabasePhraseBook::inflateData@<X0>(uint64_t a1@<X0>, Bytef *a2@<X1>, const Bytef *a3@<X2>, uInt a4@<W3>, uInt a5@<W4>, void *a6@<X8>)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  MEMORY[0x1F4188790](a1, a5);
  unint64_t v12 = (Bytef *)&v15 - ((v11 + 15) & 0x1FFFFFFF0);
  if (v13 >= 1) {
    bzero((char *)&v15 - ((v11 + 15) & 0x1FFFFFFF0), v11);
  }
  memset(&strm.zalloc, 0, 24);
  strm.avail_in = a4;
  strm.next_in = a2;
  strm.avail_out = a5;
  strm.next_out = v12;
  inflateInit2_(&strm, -15, "1.2.12", 112);
  if ((char)a3[23] < 0) {
    a3 = *(const Bytef **)a3;
  }
  inflateSetDictionary(&strm, a3, 8u);
  inflate(&strm, 4);
  inflateEnd(&strm);
  return std::string::basic_string[abi:ne180100]<0>(a6, (char *)v12);
}

uint64_t quasar::DatabasePhraseBook::getEntries@<X0>(uint64_t a1@<X0>, void *a2@<X1>, int a3@<W2>, std::vector<std::pair<std::string, std::string>> *a4@<X8>)
{
  a4->__begin_ = 0;
  a4->__end_ = 0;
  a4->__end_cap_.__value_ = 0;
  unint64_t v7 = *(sqlite3_stmt **)(a1 + 40);
  size_t v8 = a2[1];
  if (*((char *)a2 + 23) >= 0)
  {
    size_t v9 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = (void *)*a2;
    size_t v9 = v8;
  }
  quasar::GenericPhraseBook::normalizeKey(a2, v9, a1, (uint64_t)__p);
  if ((SBYTE7(v43) & 0x80u) == 0) {
    uint64_t v10 = __p;
  }
  else {
    uint64_t v10 = (void **)__p[0];
  }
  int v11 = sqlite3_bind_text(v7, 1, (const char *)v10, -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  if (SBYTE7(v43) < 0) {
    operator delete(__p[0]);
  }
  if (v11)
  {
    long long v57 = 0u;
    long long v58 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    *(_OWORD *)__n128 __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::string v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"SQLite Binding error: ", 22);
    unint64_t v31 = sqlite3_errmsg(*(sqlite3 **)(a1 + 48));
    size_t v32 = strlen(v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)v31, v32);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  if (sqlite3_bind_int(*(sqlite3_stmt **)(a1 + 40), 2, a3))
  {
    long long v57 = 0u;
    long long v58 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    *(_OWORD *)__n128 __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    long long v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"SQLite Binding error: ", 22);
    long long v34 = sqlite3_errmsg(*(sqlite3 **)(a1 + 48));
    size_t v35 = strlen(v34);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)v34, v35);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
LABEL_11:
  if (sqlite3_step(*(sqlite3_stmt **)(a1 + 40)) == 100)
  {
    unint64_t v12 = (char *)sqlite3_column_text(*(sqlite3_stmt **)(a1 + 40), 0);
    std::string::basic_string[abi:ne180100]<0>(v40, v12);
    int v13 = (char *)sqlite3_column_blob(*(sqlite3_stmt **)(a1 + 40), 2);
    std::string::basic_string[abi:ne180100]<0>(v38, v13);
    uint64_t v14 = *(void *)(a1 + 56);
    uint64_t v15 = *(void *)(a1 + 64);
    while (1)
    {
      if (v14 == v15)
      {
        std::pair<std::string,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>((std::string *)__p, (long long *)v40, (long long *)v38);
        std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](a4, (long long *)__p);
        if (SHIBYTE(v44) < 0) {
          operator delete(*((void **)&v43 + 1));
        }
        if (SBYTE7(v43) < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v39) < 0) {
          operator delete(v38[0]);
        }
        if (SHIBYTE(v41) < 0) {
          operator delete(v40[0]);
        }
        goto LABEL_11;
      }
      size_t v16 = (_OWORD *)(v14 + 24);
      if (*(char *)(v14 + 23) < 0)
      {
        uint64_t v18 = *(void *)(v14 + 8);
        if (v18 == 6)
        {
          uint64_t v17 = *(void **)v14;
          goto LABEL_22;
        }
        if (v18 != 8 || **(void **)v14 != 0x617461646174656DLL) {
          goto LABEL_54;
        }
      }
      else
      {
        if (*(unsigned char *)(v14 + 23) != 8)
        {
          uint64_t v17 = (void *)v14;
          if (*(unsigned char *)(v14 + 23) != 6) {
            goto LABEL_54;
          }
LABEL_22:
          int v19 = *(_DWORD *)v17;
          int v20 = *((unsigned __int16 *)v17 + 2);
          if (v19 != 1886680431 || v20 != 29813)
          {
LABEL_54:
            long long v57 = 0u;
            long long v58 = 0u;
            long long v55 = 0u;
            long long v56 = 0u;
            long long v53 = 0u;
            long long v54 = 0u;
            long long v51 = 0u;
            long long v52 = 0u;
            long long v49 = 0u;
            long long v50 = 0u;
            long long v47 = 0u;
            long long v48 = 0u;
            long long v45 = 0u;
            long long v46 = 0u;
            long long v43 = 0u;
            long long v44 = 0u;
            *(_OWORD *)__n128 __p = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Unknown column provided for decompression.", 42);
            quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
          }
          uint64_t v22 = (Bytef *)sqlite3_column_text(*(sqlite3_stmt **)(a1 + 40), 0);
          uint64_t v23 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 40), 1);
          uInt v24 = v23;
          if (*(char *)(v14 + 47) < 0)
          {
            std::string::__init_copy_ctor_external(&v36, *(const std::string::value_type **)(v14 + 24), *(void *)(v14 + 32));
          }
          else
          {
            *(_OWORD *)&v36.__r_.__value_.__l.__data_ = *v16;
            v36.__r_.__value_.__r.__words[2] = *(void *)(v14 + 40);
          }
          quasar::DatabasePhraseBook::inflateData(v23, v22, (const Bytef *)&v36, v24, *(_DWORD *)(v14 + 48), __p);
          if (SHIBYTE(v41) < 0) {
            operator delete(v40[0]);
          }
          *(_OWORD *)long long v40 = *(_OWORD *)__p;
          uint64_t v41 = v43;
          BYTE7(v43) = 0;
          LOBYTE(__p[0]) = 0;
          if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
          {
            uint64_t v28 = (void *)v36.__r_.__value_.__r.__words[0];
LABEL_42:
            operator delete(v28);
            goto LABEL_43;
          }
          goto LABEL_43;
        }
        if (*(void *)v14 != 0x617461646174656DLL) {
          goto LABEL_54;
        }
      }
      uint64_t v25 = (Bytef *)sqlite3_column_blob(*(sqlite3_stmt **)(a1 + 40), 2);
      uint64_t v26 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 40), 3);
      uInt v27 = v26;
      if (*(char *)(v14 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(&v37, *(const std::string::value_type **)(v14 + 24), *(void *)(v14 + 32));
      }
      else
      {
        *(_OWORD *)&v37.__r_.__value_.__l.__data_ = *v16;
        v37.__r_.__value_.__r.__words[2] = *(void *)(v14 + 40);
      }
      quasar::DatabasePhraseBook::inflateData(v26, v25, (const Bytef *)&v37, v27, *(_DWORD *)(v14 + 48), __p);
      if (SHIBYTE(v39) < 0) {
        operator delete(v38[0]);
      }
      *(_OWORD *)long long v38 = *(_OWORD *)__p;
      uint64_t v39 = v43;
      BYTE7(v43) = 0;
      LOBYTE(__p[0]) = 0;
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      {
        uint64_t v28 = (void *)v37.__r_.__value_.__r.__words[0];
        goto LABEL_42;
      }
LABEL_43:
      v14 += 56;
    }
  }
  sqlite3_clear_bindings(*(sqlite3_stmt **)(a1 + 40));
  return sqlite3_reset(*(sqlite3_stmt **)(a1 + 40));
}

void sub_1B2169F38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    JUMPOUT(0x1B2169F48);
  }
  JUMPOUT(0x1B2169F54);
}

void sub_1B2169F50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  _Unwind_Resume(a1);
}

std::string *_ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES8_iEEC2B8ne180100IJLm0ELm1ELm2EEJS8_S8_iEJEJEJRS8_SB_RiEEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSE_IJDpT2_EEEDpOT3_(std::string *this, long long *a2, long long *a3, _DWORD *a4)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v7 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v7;
  }
  size_t v8 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v9 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  LODWORD(this[2].__r_.__value_.__l.__data_) = *a4;
  return this;
}

void sub_1B216A018(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::tuple<std::string,std::string,int>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<std::tuple<std::string,std::string,int>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::tuple<std::string,std::string,int>>,std::reverse_iterator<std::tuple<std::string,std::string,int>*>,std::reverse_iterator<std::tuple<std::string,std::string,int>*>,std::reverse_iterator<std::tuple<std::string,std::string,int>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::tuple<std::string,std::string,int>>,std::reverse_iterator<std::tuple<std::string,std::string,int>*>,std::reverse_iterator<std::tuple<std::string,std::string,int>*>,std::reverse_iterator<std::tuple<std::string,std::string,int>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  uint64_t v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = a7;
    do
    {
      long long v9 = *(_OWORD *)(a3 - 56);
      *(void *)(v8 - 4std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = *(void *)(a3 - 40);
      *(_OWORD *)(v8 - 56) = v9;
      *(void *)(a3 - 48) = 0;
      *(void *)(a3 - 4std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = 0;
      *(void *)(a3 - 56) = 0;
      long long v10 = *(_OWORD *)(a3 - 32);
      *(void *)(v8 - 16) = *(void *)(a3 - 16);
      *(_OWORD *)(v8 - 32) = v10;
      *(void *)(a3 - 24) = 0;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 32) = 0;
      *(_DWORD *)(v8 - 8) = *(_DWORD *)(a3 - 8);
      v8 -= 56;
      v7 -= 56;
      a3 -= 56;
    }
    while (a3 != a5);
    *((void *)&v16 + 1) = v8;
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::string,std::string,int>>,std::reverse_iterator<std::tuple<std::string,std::string,int>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::string,std::string,int>>,std::reverse_iterator<std::tuple<std::string,std::string,int>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::string,std::string,int>>,std::reverse_iterator<std::tuple<std::string,std::string,int>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::string,std::string,int>>,std::reverse_iterator<std::tuple<std::string,std::string,int>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](v3, v1);
      v1 += 56;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<std::tuple<std::string,std::string,int>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::tuple<std::string,std::string,int>>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 56;
    std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](v4, i - 56);
  }
}

void std::shared_ptr<quasar::DatabasePhraseBook>::shared_ptr[abi:ne180100]<quasar::DatabasePhraseBook,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1B216A388(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<quasar::DatabasePhraseBook>::reset[abi:ne180100]((sqlite3_stmt ***)va, 0);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<quasar::DatabasePhraseBook *,std::shared_ptr<quasar::DatabasePhraseBook>::__shared_ptr_default_delete<quasar::DatabasePhraseBook,quasar::DatabasePhraseBook>,std::allocator<quasar::DatabasePhraseBook>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

sqlite3_stmt **std::__shared_ptr_pointer<quasar::DatabasePhraseBook *,std::shared_ptr<quasar::DatabasePhraseBook>::__shared_ptr_default_delete<quasar::DatabasePhraseBook,quasar::DatabasePhraseBook>,std::allocator<quasar::DatabasePhraseBook>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(sqlite3_stmt ***)(a1 + 24);
  if (result)
  {
    quasar::DatabasePhraseBook::~DatabasePhraseBook(result);
    JUMPOUT(0x1B3EA8670);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<quasar::DatabasePhraseBook *,std::shared_ptr<quasar::DatabasePhraseBook>::__shared_ptr_default_delete<quasar::DatabasePhraseBook,quasar::DatabasePhraseBook>,std::allocator<quasar::DatabasePhraseBook>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

sqlite3_stmt **std::unique_ptr<quasar::DatabasePhraseBook>::reset[abi:ne180100](sqlite3_stmt ***a1, sqlite3_stmt **a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    quasar::DatabasePhraseBook::~DatabasePhraseBook(result);
    JUMPOUT(0x1B3EA8670);
  }
  return result;
}

MStringTokUtil *MStringTokUtil::strtok_r(MStringTokUtil *this, char *__s, char *a3, char **a4)
{
  if (!a3) {
    return 0;
  }
  uint64_t v6 = this;
  if (this || (uint64_t v6 = *(MStringTokUtil **)a3) != 0)
  {
    if (__s) {
      int v7 = strlen(__s);
    }
    else {
      int v7 = 0;
    }
    int v8 = *(unsigned __int8 *)v6;
    if (*(unsigned char *)v6)
    {
      while (v7 >= 1)
      {
        if (v8 == *__s)
        {
          BOOL v9 = 1;
LABEL_16:
          int v12 = *((unsigned __int8 *)v6 + 1);
          uint64_t v6 = (MStringTokUtil *)((char *)v6 + 1);
          int v8 = v12;
          if (!v9) {
            goto LABEL_20;
          }
        }
        else
        {
          uint64_t v10 = 1;
          while (v7 != v10)
          {
            int v11 = __s[v10++];
            if (v8 == v11)
            {
              BOOL v9 = v10 - 1 < v7;
              goto LABEL_16;
            }
          }
          if (v10 >= v7)
          {
LABEL_20:
            if (!v8) {
              goto LABEL_27;
            }
            break;
          }
        }
        if (!v8) {
          goto LABEL_20;
        }
      }
      int v13 = v6;
      while (1)
      {
        uint64_t v14 = v7;
        long long v15 = __s;
        if (v7 >= 1) {
          break;
        }
LABEL_25:
        int v17 = *((unsigned __int8 *)v13 + 1);
        int v13 = (MStringTokUtil *)((char *)v13 + 1);
        int v8 = v17;
        if (!v17)
        {
          uint64_t v18 = 0;
          goto LABEL_31;
        }
      }
      while (1)
      {
        int v16 = *v15++;
        if (v8 == v16) {
          break;
        }
        if (!--v14) {
          goto LABEL_25;
        }
      }
      *(unsigned char *)int v13 = 0;
      int v20 = *((unsigned __int8 *)v13 + 1);
      int v19 = (char *)v13 + 1;
      if (v20) {
        uint64_t v18 = v19;
      }
      else {
        uint64_t v18 = 0;
      }
    }
    else
    {
LABEL_27:
      uint64_t v18 = 0;
      uint64_t v6 = 0;
    }
LABEL_31:
    *(void *)a3 = v18;
  }
  return v6;
}

uint64_t *quasar::Munger::Munger(uint64_t *a1, uint64_t a2)
{
  v12[19] = *MEMORY[0x1E4F143B8];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::ifstream::basic_ifstream(v10);
  if (*(_DWORD *)&v11[*(void *)(v10[0] - 24) + 16])
  {
    memset(v9, 0, sizeof(v9));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Cannot read munge file: ", 24);
    int v6 = *(char *)(a2 + 23);
    if (v6 >= 0) {
      uint64_t v7 = a2;
    }
    else {
      uint64_t v7 = *(void *)a2;
    }
    if (v6 >= 0) {
      uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v8 = *(void *)(a2 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v7, v8);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v9);
  }
  quasar::Munger::init(a1, v10);
  v10[0] = *MEMORY[0x1E4FBA3F8];
  *(uint64_t *)((char *)v10 + *(void *)(v10[0] - 2std::__tree<int>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x1E4FBA3F8] + 24);
  MEMORY[0x1B3EA7CF0](v11);
  std::istream::~istream();
  MEMORY[0x1B3EA8520](v12);
  return a1;
}

void sub_1B216A7B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void quasar::Munger::init(uint64_t *a1, void *a2)
{
  memset(&v36, 0, sizeof(v36));
  uint64_t v4 = (std::locale::id *)MEMORY[0x1E4FBA258];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)));
    uint64_t v5 = std::locale::use_facet((const std::locale *)__p, v4);
    unsigned __int8 v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
    std::locale::~locale((std::locale *)__p);
    uint64_t v7 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&v36, v6);
    if ((*((unsigned char *)v7 + *(void *)(*v7 - 24) + 32) & 5) != 0) {
      break;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, " ");
    quasar::splitAndTrimNoEmpty(&v36, (char *)__p, v35);
    if (SBYTE7(v19) < 0) {
      operator delete(__p[0]);
    }
    if (v35[0] != v35[1])
    {
      long long v19 = 0u;
      long long v20 = 0u;
      *(_OWORD *)__n128 __p = 0u;
      quasar::MungeRuleData::init((uint64_t)__p, (uint64_t)&v36, v35);
      if ((void)v20 - *((void *)&v19 + 1) != 24
        || 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3) > 1
        || *(_WORD *)((char *)&v21 + 1))
      {
        operator new();
      }
      uint64_t v8 = a1[1];
      if (*a1 == v8 {
        || (BOOL v9 = *(const void **)(v8 - 8)) == 0
      }
      {
        operator new();
      }
      v37[0] = *((long long **)&v19 + 1);
      int v12 = std::__tree<std::__value_type<std::string,quasar::MungeRuleData>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MungeRuleData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::MungeRuleData>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v11 + 1, *((const void ***)&v19 + 1), (uint64_t)&std::piecewise_construct, v37);
      if (v12 + 7 != (uint64_t *)__p)
      {
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)(v12 + 7), (std::string *)__p[0], (long long *)__p[1], 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3));
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)(v12 + 10), *((std::string **)&v19 + 1), (long long *)v20, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - *((void *)&v19 + 1)) >> 3));
      }
      *((_WORD *)v12 + 52) = v21;
      *((unsigned char *)v12 + 106) = BYTE2(v21);
      std::__tree<std::vector<std::string>>::__emplace_unique_key_args<std::vector<std::string>,std::vector<std::string> const&>(v11 + 4, (const void ***)__p, (long long **)__p);
      v37[0] = (long long *)((char *)&v19 + 8);
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v37);
      v37[0] = (long long *)__p;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v37);
    }
    __p[0] = v35;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  }
  if (quasar::gLogLevel >= 4)
  {
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    *(_OWORD *)__n128 __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Number of munge rules: ", 23);
    std::ostream::operator<<();
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
  }
  uint64_t v14 = *a1;
  uint64_t v13 = a1[1];
  if (v14 != v13)
  {
    int v15 = quasar::gLogLevel;
    do
    {
      if (v15 >= 6)
      {
        long long v33 = 0u;
        long long v34 = 0u;
        long long v31 = 0u;
        long long v32 = 0u;
        long long v29 = 0u;
        long long v30 = 0u;
        long long v27 = 0u;
        long long v28 = 0u;
        long long v25 = 0u;
        long long v26 = 0u;
        long long v23 = 0u;
        long long v24 = 0u;
        long long v21 = 0u;
        long long v22 = 0u;
        long long v19 = 0u;
        long long v20 = 0u;
        *(_OWORD *)__n128 __p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        (*(void (**)(long long **__return_ptr))(**(void **)v14 + 24))(v37);
        if (v38 >= 0) {
          int v16 = v37;
        }
        else {
          int v16 = (long long **)v37[0];
        }
        if (v38 >= 0) {
          uint64_t v17 = HIBYTE(v38);
        }
        else {
          uint64_t v17 = (uint64_t)v37[1];
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)v16, v17);
        if (SHIBYTE(v38) < 0) {
          operator delete(v37[0]);
        }
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)__p);
        int v15 = quasar::gLogLevel;
      }
      v14 += 8;
    }
    while (v14 != v13);
  }
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
}

void sub_1B216AE48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (*(char *)(v14 - 137) < 0) {
    operator delete(*(void **)(v14 - 160));
  }
  _Unwind_Resume(exception_object);
}

uint64_t *quasar::Munger::Munger(uint64_t *a1, void *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  quasar::Munger::init(a1, a2);
  return a1;
}

void sub_1B216AF8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::unique_ptr<quasar::MungeRule>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void quasar::Munger::~Munger(void **this)
{
  uint64_t v1 = this;
  std::vector<std::unique_ptr<quasar::MungeRule>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void quasar::MungeRuleData::init(uint64_t a1, uint64_t a2, std::string **a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = a3[1];
  if (*a3 == v4)
  {
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v39 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v39);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v39, "This should not be called with empty tokens");
    goto LABEL_62;
  }
  do
  {
    if (quasar::hasWhitespace((char *)v3))
    {
      long long v54 = 0u;
      long long v55 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v39 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v39);
      long long v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v39, (uint64_t)"Munge line with non-space whitespace: ", 38);
      std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v34, a2);
      goto LABEL_62;
    }
    ++v3;
  }
  while (v3 != v4);
  if (std::stod(*a3, 0) != 1.0)
  {
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v39 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v39);
    std::string v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v39, (uint64_t)"Probabilistic munge rules not implemented (probability must be 1.0): ", 69);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v37, a2);
    goto LABEL_62;
  }
  uint64_t v8 = *a3;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3) < 2) {
    goto LABEL_25;
  }
  uint64_t v9 = 0;
  int v10 = 0;
  unint64_t v11 = 1;
  do
  {
    int v12 = &v8[v9];
    uint64_t v13 = (long long *)&v12[1];
    int v14 = SHIBYTE(v12[1].__r_.__value_.__r.__words[2]);
    if (v14 < 0)
    {
      if (v12[1].__r_.__value_.__l.__size_ != 2) {
        goto LABEL_13;
      }
      int v15 = *(const std::string **)v13;
    }
    else
    {
      int v15 = v12 + 1;
      if (v14 != 2) {
        goto LABEL_13;
      }
    }
    if (LOWORD(v15->__r_.__value_.__l.__data_) == 11580)
    {
      ++v10;
      goto LABEL_23;
    }
LABEL_13:
    if (v10)
    {
      unint64_t v16 = *(void *)(a1 + 32);
      uint64_t v17 = (uint64_t *)(a1 + 24);
      if (v16 >= *(void *)(a1 + 40))
      {
        uint64_t v18 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v17, v13);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v17, v13);
        uint64_t v18 = v16 + 24;
      }
      *(void *)(a1 + 32) = v18;
    }
    else
    {
      unint64_t v19 = *(void *)(a1 + 8);
      if (v19 >= *(void *)(a1 + 16))
      {
        uint64_t v20 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a1, v13);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a1, v13);
        uint64_t v20 = v19 + 24;
      }
      int v10 = 0;
      *(void *)(a1 + 8) = v20;
    }
LABEL_23:
    ++v11;
    uint64_t v8 = *a3;
    ++v9;
  }
  while (0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3) > v11);
  if (v10 > 1)
  {
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v39 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v39);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v39, "Munge line with more than 1 '<-'");
LABEL_62:
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v39);
  }
LABEL_25:
  *(unsigned char *)(a1 + 48) = std::__find_impl[abi:ne180100]<std::string *,std::string *,char [9],std::__identity>(*(unsigned __int8 **)a1, *(unsigned __int8 **)(a1 + 8), "/REJECT/") != *(unsigned __int8 **)(a1 + 8);
  uint64_t v22 = *(void *)(a1 + 24);
  long long v21 = *(long long **)(a1 + 32);
  if ((long long *)v22 == v21)
  {
    *(unsigned char *)(a1 + 49) = 0;
LABEL_66:
    *(unsigned char *)(a1 + 5std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = 0;
LABEL_67:
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v39 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v39);
    uint64_t v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v39, (uint64_t)"Munge line with empty rhs: ", 27);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v38, a2);
    goto LABEL_62;
  }
  int v23 = *(char *)(v22 + 23);
  if (v23 < 0)
  {
    if (*(void *)(v22 + 8) != 3) {
      goto LABEL_37;
    }
    long long v24 = *(unsigned __int16 **)v22;
  }
  else
  {
    long long v24 = *(unsigned __int16 **)(a1 + 24);
    if (v23 != 3)
    {
LABEL_37:
      *(unsigned char *)(a1 + 49) = 0;
      goto LABEL_38;
    }
  }
  int v25 = *v24 ^ 0x733C | *((unsigned __int8 *)v24 + 2) ^ 0x3E;
  *(unsigned char *)(a1 + 49) = v25 == 0;
  if (!v25)
  {
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>((uint64_t)&v39, (long long *)(v22 + 24), v21, v22);
    long long v21 = v26;
    long long v27 = *(long long **)(a1 + 32);
    if (v27 != v26)
    {
      do
      {
        if (*((char *)v27 - 1) < 0) {
          operator delete(*((void **)v27 - 3));
        }
        long long v27 = (long long *)((char *)v27 - 24);
      }
      while (v27 != v21);
    }
    *(void *)(a1 + 32) = v21;
    uint64_t v22 = *(void *)(a1 + 24);
  }
LABEL_38:
  if ((long long *)v22 == v21) {
    goto LABEL_66;
  }
  long long v28 = (void **)v21 - 3;
  int v29 = *((char *)v21 - 1);
  if (v29 < 0)
  {
    if (*((void *)v21 - 2) != 4) {
      goto LABEL_49;
    }
    long long v30 = *v28;
  }
  else
  {
    long long v30 = (_DWORD *)v21 - 6;
    if (v29 != 4)
    {
LABEL_49:
      *(unsigned char *)(a1 + 5std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = 0;
      goto LABEL_50;
    }
  }
  BOOL v31 = *v30 == 1047736124;
  *(unsigned char *)(a1 + 5std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = v31;
  if (v31)
  {
    if (*((char *)v21 - 1) < 0)
    {
      operator delete(*v28);
      uint64_t v22 = *(void *)(a1 + 24);
    }
    *(void *)(a1 + 32) = v28;
    long long v21 = (long long *)((char *)v21 - 24);
  }
LABEL_50:
  if ((long long *)v22 == v21) {
    goto LABEL_67;
  }
  long long v32 = *(unsigned __int16 **)a1;
  long long v33 = *(unsigned __int16 **)(a1 + 8);
  if (*(unsigned __int16 **)a1 == v33) {
    goto LABEL_57;
  }
  do
  {
    if (quasar::MungeRuleData::isIllegal(v32))
    {
      long long v54 = 0u;
      long long v55 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v39 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v39);
      size_t v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v39, (uint64_t)"Munge line with invalid lhs: ", 29);
      std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v35, a2);
      goto LABEL_62;
    }
    v32 += 12;
  }
  while (v32 != v33);
  uint64_t v22 = *(void *)(a1 + 24);
  long long v21 = *(long long **)(a1 + 32);
LABEL_57:
  while ((long long *)v22 != v21)
  {
    if (quasar::MungeRuleData::isIllegal((unsigned __int16 *)v22))
    {
      long long v54 = 0u;
      long long v55 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v39 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v39);
      std::string v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v39, (uint64_t)"Munge line with invalid rhs: ", 29);
      std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v36, a2);
      goto LABEL_62;
    }
    v22 += 24;
  }
}

void sub_1B216B514(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, long long a10, long long a11, long long a12, long long a13, long long a14, long long a15, long long a16, long long a17, long long a18, long long a19, long long a20,long long a21,long long a22,long long a23,long long a24,long long a25)
{
}

void quasar::MungeRuleData::~MungeRuleData(void **this)
{
  uint64_t v2 = this + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = this;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void quasar::Munger::munge(uint64_t a1, uint64_t *a2, unsigned char *a3, unsigned char *a4)
{
  if (a3) {
    *a3 = 0;
  }
  if (a4) {
    *a4 = 0;
  }
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  if (*a2 != v9)
  {
    memset(&v20, 0, sizeof(v20));
    std::vector<std::string>::reserve(&v20, 0xAAAAAAAAAAAAAAABLL * ((v9 - v8) >> 3));
    int v10 = *(void **)a1;
    unint64_t v11 = *(void **)(a1 + 8);
    if (*(void **)a1 != v11)
    {
      std::vector<unsigned int>::pointer begin = (std::string *)*a2;
      int v12 = (std::string *)a2[1];
      while (2)
      {
        if (begin != v12)
        {
          while (1)
          {
            int v14 = (long long *)(*(uint64_t (**)(void, uint64_t *, std::string *))(*(void *)*v10 + 16))(*v10, a2, begin);
            int v12 = (std::string *)v14;
            uint64_t v16 = v15;
            uint64_t v17 = (long long *)a2[1];
            BOOL v18 = begin == (std::string *)*a2 && v17 == v14;
            if (v18 && v20.__begin_ == v20.__end_) {
              break;
            }
            if (v17 != v14 && *(unsigned char *)(v15 + 48))
            {
              if (a3) {
                *a3 = 1;
              }
              std::vector<std::string>::__clear[abi:ne180100](a2);
              goto LABEL_27;
            }
            std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(&v20, v20.__end_, begin, v14, 0xAAAAAAAAAAAAAAABLL * (((char *)v14 - (char *)begin) >> 3));
            if ((std::string *)a2[1] != v12)
            {
              if (a4) {
                *a4 = 1;
              }
              std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(&v20, v20.__end_, *(std::string **)v16, *(long long **)(v16 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v16 + 8) - *(void *)v16) >> 3));
              std::vector<unsigned int>::pointer begin = (std::string *)((char *)v12 + *(void *)(v16 + 32) - *(void *)(v16 + 24));
              if (begin != (std::string *)a2[1]) {
                continue;
              }
            }
            std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)a2);
            std::vector<unsigned int>::pointer begin = v20.__begin_;
            *a2 = (uint64_t)v20.__begin_;
            std::vector<std::string>::pointer end = v20.__end_;
            *(_OWORD *)(a2 + 1) = *(_OWORD *)&v20.__end_;
            memset(&v20, 0, sizeof(v20));
            int v12 = end;
            break;
          }
          if (++v10 != v11) {
            continue;
          }
        }
        break;
      }
    }
LABEL_27:
    long long v21 = &v20;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
  }
}

void sub_1B216B7F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t quasar::MungeRuleData::isIllegal(unsigned __int16 *a1)
{
  if (*((char *)a1 + 23) < 0)
  {
    uint64_t v2 = *((void *)a1 + 1);
    if (v2 != 3 || (**(_WORD **)a1 == 29500 ? (BOOL v3 = *(unsigned char *)(*(void *)a1 + 2) == 62) : (BOOL v3 = 0), !v3))
    {
      if (v2 != 4)
      {
LABEL_15:
        if (v2 != 2) {
          return 0;
        }
        a1 = *(unsigned __int16 **)a1;
        return *a1 == 11580;
      }
      if (**(_DWORD **)a1 != 1047736124)
      {
        uint64_t v2 = *((void *)a1 + 1);
        goto LABEL_15;
      }
    }
    return 1;
  }
  int v1 = *((unsigned __int8 *)a1 + 23);
  if (v1 == 2) {
    return *a1 == 11580;
  }
  if (v1 != 3) {
    return v1 == 4 && *(_DWORD *)a1 == 1047736124;
  }
  return *a1 == 29500 && *((unsigned char *)a1 + 2) == 62;
}

void std::vector<std::unique_ptr<quasar::MungeRule>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<quasar::MungeRule>>::__clear[abi:ne180100](v2);
    BOOL v3 = **a1;
    operator delete(v3);
  }
}

void *std::vector<std::unique_ptr<quasar::MungeRule>>::__clear[abi:ne180100](void *result)
{
  int v1 = result;
  uint64_t v2 = (void *)*result;
  BOOL v3 = (void *)result[1];
  while (v3 != v2)
  {
    uint64_t v4 = (void *)*--v3;
    uint64_t result = v4;
    *BOOL v3 = 0;
    if (v4) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  v1[1] = v2;
  return result;
}

void quasar::MergedMungeRule::~MergedMungeRule(char **this)
{
  *this = (char *)&unk_1F0A52F88;
  std::__tree<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>::destroy((uint64_t)(this + 4), this[5]);
  std::__tree<std::__value_type<std::string,quasar::MungeRuleData>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MungeRuleData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::MungeRuleData>>>::destroy((uint64_t)(this + 1), this[2]);
}

{
  uint64_t vars8;

  *this = (char *)&unk_1F0A52F88;
  std::__tree<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>::destroy((uint64_t)(this + 4), this[5]);
  std::__tree<std::__value_type<std::string,quasar::MungeRuleData>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MungeRuleData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::MungeRuleData>>>::destroy((uint64_t)(this + 1), this[2]);
  JUMPOUT(0x1B3EA8670);
}

const void **quasar::MergedMungeRule::match(uint64_t a1, uint64_t a2, const void **a3)
{
  BOOL v3 = a3;
  if (*(const void ***)(a2 + 8) != a3)
  {
    uint64_t v5 = a1 + 8;
    uint64_t v6 = a1 + 16;
    do
    {
      if (v6 != std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(v5, v3))break; {
      v3 += 3;
      }
    }
    while (v3 != *(const void ***)(a2 + 8));
  }
  return v3;
}

uint64_t quasar::MergedMungeRule::toStr(quasar::MergedMungeRule *this)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v23);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"MergedMungeRule: ", 17);
  uint64_t v2 = (quasar::MergedMungeRule *)*((void *)this + 1);
  if (v2 != (quasar::MergedMungeRule *)((char *)this + 16))
  {
    do
    {
      BOOL v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" {rhs=", 6);
      v20[0] = (uint64_t)"|";
      v20[1] = 1;
      quasar::join<std::string>((uint64_t)v2 + 32, v20);
      if ((v22 & 0x80u) == 0) {
        uint64_t v4 = v21;
      }
      else {
        uint64_t v4 = (void **)v21[0];
      }
      if ((v22 & 0x80u) == 0) {
        uint64_t v5 = v22;
      }
      else {
        uint64_t v5 = (uint64_t)v21[1];
      }
      uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
      uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" lhs=", 5);
      v17[0] = (uint64_t)"|";
      v17[1] = 1;
      quasar::join<std::vector<std::string>>((uint64_t *)v2 + 7, v17);
      if ((v19 & 0x80u) == 0) {
        uint64_t v8 = __p;
      }
      else {
        uint64_t v8 = (void **)__p[0];
      }
      if ((v19 & 0x80u) == 0) {
        uint64_t v9 = v19;
      }
      else {
        uint64_t v9 = (uint64_t)__p[1];
      }
      int v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" reject=", 8);
      unint64_t v11 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"}", 1);
      if ((char)v19 < 0) {
        operator delete(__p[0]);
      }
      if ((char)v22 < 0) {
        operator delete(v21[0]);
      }
      int v12 = (quasar::MergedMungeRule *)*((void *)v2 + 1);
      if (v12)
      {
        do
        {
          uint64_t v13 = v12;
          int v12 = *(quasar::MergedMungeRule **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          uint64_t v13 = (quasar::MergedMungeRule *)*((void *)v2 + 2);
          BOOL v14 = *(void *)v13 == (void)v2;
          uint64_t v2 = v13;
        }
        while (!v14);
      }
      uint64_t v2 = v13;
    }
    while (v13 != (quasar::MergedMungeRule *)((char *)this + 16));
  }
  std::stringbuf::str();
  v23[0] = *MEMORY[0x1E4FBA408];
  uint64_t v15 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v23 + *(void *)(v23[0] - 2std::__tree<int>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v24[0] = v15;
  v24[1] = MEMORY[0x1E4FBA470] + 16;
  if (v25 < 0) {
    operator delete((void *)v24[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EA8520](&v26);
}

void sub_1B216BDC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
}

void std::__tree<std::__value_type<std::string,quasar::MungeRuleData>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MungeRuleData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::MungeRuleData>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,quasar::MungeRuleData>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MungeRuleData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::MungeRuleData>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,quasar::MungeRuleData>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MungeRuleData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::MungeRuleData>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::MungeRuleData>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::MungeRuleData>,0>(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 24);
  BOOL v3 = (void **)(a1 + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  BOOL v3 = v2;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

uint64_t quasar::join<std::string>(uint64_t a1, uint64_t *a2)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v6);
  quasar::joinToStream<std::string>(v7, a1, a2);
  std::stringbuf::str();
  v6[0] = *MEMORY[0x1E4FBA408];
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v6 + *(void *)(v6[0] - 2std::__tree<int>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v7[0] = v4;
  v7[1] = MEMORY[0x1E4FBA470] + 16;
  if (v8 < 0) {
    operator delete((void *)v7[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EA8520](&v9);
}

void sub_1B216C044(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void *quasar::joinToStream<std::string>(void *result, uint64_t a2, uint64_t *a3)
{
  int v3 = *(char *)(a2 + 23);
  if (v3 >= 0) {
    uint64_t v4 = (char *)a2;
  }
  else {
    uint64_t v4 = *(char **)a2;
  }
  if (v3 >= 0) {
    uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v5 = *(void *)(a2 + 8);
  }
  if (v5)
  {
    uint64_t v7 = result;
    char v8 = 1;
    do
    {
      if ((v8 & 1) == 0) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, *a3, a3[1]);
      }
      char v9 = *v4++;
      char v10 = v9;
      uint64_t result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v10, 1);
      char v8 = 0;
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t std::vector<std::unique_ptr<quasar::MungeRule>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<quasar::MungeRule>>,std::reverse_iterator<std::unique_ptr<quasar::MungeRule>*>,std::reverse_iterator<std::unique_ptr<quasar::MungeRule>*>,std::reverse_iterator<std::unique_ptr<quasar::MungeRule>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<quasar::MungeRule>>,std::reverse_iterator<std::unique_ptr<quasar::MungeRule>*>,std::reverse_iterator<std::unique_ptr<quasar::MungeRule>*>,std::reverse_iterator<std::unique_ptr<quasar::MungeRule>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  uint64_t v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    char v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<quasar::MungeRule>>,std::reverse_iterator<std::unique_ptr<quasar::MungeRule>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<quasar::MungeRule>>,std::reverse_iterator<std::unique_ptr<quasar::MungeRule>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<quasar::MungeRule>>,std::reverse_iterator<std::unique_ptr<quasar::MungeRule>*>>::operator()[abi:ne180100]((void *)a1);
  }
  return a1;
}

void *std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<quasar::MungeRule>>,std::reverse_iterator<std::unique_ptr<quasar::MungeRule>*>>::operator()[abi:ne180100](void *result)
{
  int v1 = *(void ***)(result[2] + 8);
  uint64_t v2 = *(void ***)(result[1] + 8);
  while (v1 != v2)
  {
    uint64_t result = *v1;
    *int v1 = 0;
    if (result) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
    ++v1;
  }
  return result;
}

void **std::__split_buffer<std::unique_ptr<quasar::MungeRule>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void *std::__split_buffer<std::unique_ptr<quasar::MungeRule>>::__destruct_at_end[abi:ne180100](void *result, uint64_t a2)
{
  uint64_t v2 = result[2];
  if (v2 != a2)
  {
    uint64_t v4 = result;
    do
    {
      v4[2] = v2 - 8;
      uint64_t result = *(void **)(v2 - 8);
      *(void *)(v2 - 8) = 0;
      if (result) {
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
      }
      uint64_t v2 = v4[2];
    }
    while (v2 != a2);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,quasar::MungeRuleData>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MungeRuleData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::MungeRuleData>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    std::__tree<std::__value_type<std::string,quasar::MungeRuleData>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MungeRuleData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::MungeRuleData>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,quasar::MungeRuleData>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,quasar::MungeRuleData>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

double std::__tree<std::__value_type<std::string,quasar::MungeRuleData>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MungeRuleData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::MungeRuleData>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<D0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x70uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 32);
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    *((void *)v6 + 6) = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  *((void *)v6 + 13) = 0;
  double result = 0.0;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1B216C474(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,quasar::MungeRuleData>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,quasar::MungeRuleData>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,quasar::MungeRuleData>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,quasar::MungeRuleData>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::MungeRuleData>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void quasar::BasicMungeRule::~BasicMungeRule(quasar::BasicMungeRule *this)
{
  *(void *)this = &unk_1F0A526A8;
  uint64_t v1 = (void **)((char *)this + 8);
  uint64_t v2 = (void **)((char *)this + 32);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = v1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
}

{
  void **v2;
  void **v3;

  *(void *)this = &unk_1F0A526A8;
  uint64_t v2 = (void **)((char *)this + 8);
  int v3 = (void **)((char *)this + 32);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  int v3 = v2;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  MEMORY[0x1B3EA8670](this, 0x10A1C40DB8502C6);
}

unsigned __int8 *quasar::BasicMungeRule::match(uint64_t a1, unsigned __int8 **a2, unsigned __int8 *a3)
{
  if (*(unsigned char *)(a1 + 58))
  {
    uint64_t v5 = *(unsigned __int8 **)(a1 + 32);
    uint64_t v6 = *(unsigned __int8 **)(a1 + 40);
    uint64_t v7 = (uint64_t)a2[1];
    if (0xAAAAAAAAAAAAAAABLL * ((v6 - v5) >> 3) > 0xAAAAAAAAAAAAAAABLL * ((v7 - (uint64_t)*a2) >> 3)) {
      return (unsigned __int8 *)v7;
    }
    a3 = (unsigned __int8 *)(v7 - 8 * ((v6 - v5) >> 3));
  }
  else
  {
    uint64_t v7 = (uint64_t)a2[1];
    uint64_t v5 = *(unsigned __int8 **)(a1 + 32);
    uint64_t v6 = *(unsigned __int8 **)(a1 + 40);
  }
  char v12 = 0;
  long long v9 = std::__search_impl[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>,std::__equal_to,std::__identity,std::__identity>(a3, v7, v5, v6, (uint64_t)&v13, (uint64_t)&v12, (uint64_t)&v12);
  if (*(unsigned char *)(a1 + 57)) {
    BOOL v10 = *a2 == v9;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    return v9;
  }
  else {
    return a2[1];
  }
}

uint64_t quasar::BasicMungeRule::toStr(quasar::BasicMungeRule *this)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v21);
  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"BasicMungeRule: {rhs=", 21);
  v18[0] = (uint64_t)"|";
  v18[1] = 1;
  quasar::join<std::vector<std::string>>((uint64_t *)this + 4, v18);
  if ((v20 & 0x80u) == 0) {
    int v3 = v19;
  }
  else {
    int v3 = (void **)v19[0];
  }
  if ((v20 & 0x80u) == 0) {
    uint64_t v4 = v20;
  }
  else {
    uint64_t v4 = (uint64_t)v19[1];
  }
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v3, v4);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" lhs=", 5);
  v15[0] = (uint64_t)"|";
  v15[1] = 1;
  quasar::join<std::vector<std::string>>((uint64_t *)this + 1, v15);
  if ((v17 & 0x80u) == 0) {
    uint64_t v7 = __p;
  }
  else {
    uint64_t v7 = (void **)__p[0];
  }
  if ((v17 & 0x80u) == 0) {
    uint64_t v8 = v17;
  }
  else {
    uint64_t v8 = (uint64_t)__p[1];
  }
  long long v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" reject=", 8);
  BOOL v10 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" startAnchor=", 13);
  uint64_t v11 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" endAnchor=", 11);
  char v12 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"}", 1);
  if ((char)v17 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v20 < 0) {
    operator delete(v19[0]);
  }
  std::stringbuf::str();
  v21[0] = *MEMORY[0x1E4FBA408];
  uint64_t v13 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v21 + *(void *)(v21[0] - 2std::__tree<int>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v22[0] = v13;
  v22[1] = MEMORY[0x1E4FBA470] + 16;
  if (v23 < 0) {
    operator delete((void *)v22[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EA8520](&v24);
}

void sub_1B216C930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a26);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__search_impl[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>,std::__equal_to,std::__identity,std::__identity>(unsigned __int8 *result, uint64_t a2, unsigned __int8 *a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a4 != a3)
  {
    uint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((a2 - (uint64_t)result) >> 3);
    if (v7 >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((a4 - a3) >> 3))) {
      return std::__search_random_access_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>,std::__equal_to,std::__identity,std::__identity,long,long>(result, a2, a3, a4, a5, a6, a7, v7, 0xAAAAAAAAAAAAAAABLL * ((a4 - a3) >> 3));
    }
    else {
      return (unsigned __int8 *)a2;
    }
  }
  return result;
}

unsigned __int8 *std::__search_random_access_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>,std::__equal_to,std::__identity,std::__identity,long,long>(unsigned __int8 *a1, uint64_t a2, unsigned __int8 *a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = (uint64_t)&a1[24 * a8 + 24 + -24 * a9];
  if ((unsigned __int8 *)v10 != a1)
  {
    char v14 = a1;
    long long v15 = a3 + 24;
    while (!std::equal_to<std::string>::operator()[abi:ne180100](a5, v14, a3))
    {
LABEL_7:
      v14 += 24;
      if (v14 == (unsigned __int8 *)v10) {
        return (unsigned __int8 *)a2;
      }
    }
    long long v16 = v14 + 24;
    unsigned __int8 v17 = v15;
    while (v17 != a4)
    {
      char v18 = std::equal_to<std::string>::operator()[abi:ne180100](a5, v16, v17);
      v16 += 24;
      v17 += 24;
      if ((v18 & 1) == 0) {
        goto LABEL_7;
      }
    }
    return v14;
  }
  return (unsigned __int8 *)a2;
}

void *LHash<char const*,unsigned int>::alloc(void *a1, unsigned int a2)
{
  char v3 = -1;
  do
    uint64_t v4 = (1 << ++v3);
  while (v4 < a2);
  double result = BM_malloc(16 * (v4 - 1) + 24);
  *a1 = result;
  *(_DWORD *)double result = *(_DWORD *)result & 0xFFFFFFE0 | v3 & 0x1F;
  *(_DWORD *)*a1 &= 0x1Fu;
  uint64_t v6 = 16;
  do
  {
    *(void *)(*a1 + v6) = 0;
    v6 += 16;
    --v4;
  }
  while (v4);
  return result;
}

void LHash<char const*,unsigned int>::clear(void *a1, unsigned int a2)
{
  if (*a1)
  {
    uint64_t v4 = 1 << (*(_DWORD *)*a1 & 0x1F);
    uint64_t v5 = 16;
    uint64_t v6 = v4;
    do
    {
      uint64_t v7 = *(void **)(*a1 + v5);
      if (v7) {
        free(v7);
      }
      v5 += 16;
      --v6;
    }
    while (v6);
    BM_free((void *)*a1, 16 * (v4 - 1) + 24);
    *a1 = 0;
  }
  if (a2)
  {
    if (a2 >= 8) {
      a2 = (float)((float)(a2 + 1) / 0.8);
    }
    LHash<char const*,unsigned int>::alloc(a1, a2);
  }
}

void *LHash<char const*,unsigned int>::~LHash(void *a1)
{
  return a1;
}

uint64_t LHash<char const*,unsigned int>::locate(_DWORD **a1, char *__s2, _DWORD *a3)
{
  char v3 = *a1;
  if (!*a1) {
    return 0;
  }
  uint64_t v7 = v3 + 2;
  unint64_t v6 = *v3;
  char v8 = v6 & 0x1F;
  if ((*v3 & 0x1Fu) > 2)
  {
    char v11 = *__s2;
    if (*__s2)
    {
      uint64_t v12 = 0;
      uint64_t v13 = __s2 + 1;
      do
      {
        uint64_t v12 = 9 * v12 + v11;
        int v14 = *v13++;
        char v11 = v14;
      }
      while (v14);
      unint64_t v15 = 1103515245 * v12 + 12345;
    }
    else
    {
      unint64_t v15 = 12345;
    }
    unint64_t v18 = v15 >> (30 - v8);
    uint64_t v19 = -1 << v8;
    uint64_t v9 = v18 & ~v19;
    uint64_t result = *(void *)&v7[4 * v9 + 2];
    if (result)
    {
      int v20 = ~v19;
      while (strcmp((const char *)result, __s2))
      {
        uint64_t v9 = (v9 + 1) & v20;
        uint64_t result = *(void *)&v7[4 * v9 + 2];
        if (!result) {
          goto LABEL_23;
        }
      }
      uint64_t result = 1;
    }
  }
  else if (v6 >= 0x20)
  {
    uint64_t v16 = 0;
    uint64_t v9 = v6 >> 5;
    unsigned __int8 v17 = (const char **)(v3 + 4);
    while (strcmp(*v17, __s2))
    {
      ++v16;
      v17 += 2;
      if (v9 == v16) {
        goto LABEL_13;
      }
    }
    uint64_t result = 1;
    LODWORD(v9) = v16;
  }
  else
  {
    LODWORD(v9) = 0;
LABEL_13:
    uint64_t result = 0;
  }
LABEL_23:
  *a3 = v9;
  return result;
}

uint64_t LHash<char const*,unsigned int>::getInternalKey(_DWORD **a1, char *a2, unsigned char *a3)
{
  int v8 = 0;
  int v5 = LHash<char const*,unsigned int>::locate(a1, a2, &v8);
  *a3 = v5;
  if (v5) {
    unint64_t v6 = (uint64_t *)&(*a1)[4 * v8 + 4];
  }
  else {
    unint64_t v6 = &LHash<char const*,unsigned int>::zeroKey;
  }
  return *v6;
}

void *LHash<char const*,unsigned int>::insert(void *a1, char *__s2, unsigned char *a3)
{
  if (!*a1) {
    LHash<char const*,unsigned int>::alloc(a1, 1u);
  }
  unsigned int v17 = 0;
  int v6 = LHash<char const*,unsigned int>::locate((_DWORD **)a1, __s2, &v17);
  *a3 = v6;
  uint64_t v7 = (void *)*a1;
  if (!v6)
  {
    unint64_t v8 = *(unsigned int *)v7;
    uint64_t v9 = 1 << (v8 & 0x1F);
    unint64_t v10 = v8 >> 5;
    if (v8 >= 0xE0) {
      unsigned int v11 = (float)((float)(v10 + 2) / 0.8);
    }
    else {
      unsigned int v11 = v10 + 1;
    }
    if (v11 > v9)
    {
      LHash<char const*,unsigned int>::alloc(a1, v11);
      *(_DWORD *)*a1 = v8 & 0xFFFFFFE0 | *(_DWORD *)*a1 & 0x1F;
      if ((*(_DWORD *)*a1 & 0x1Fu) >= 3)
      {
        uint64_t v12 = (char **)(v7 + 2);
        uint64_t v13 = 1 << (v8 & 0x1F);
        do
        {
          if (*v12)
          {
            LHash<char const*,unsigned int>::locate((_DWORD **)a1, *v12, &v17);
            *(_OWORD *)(*a1 + 16 * v17 + 8) = *(_OWORD *)(v12 - 1);
          }
          v12 += 2;
          --v13;
        }
        while (v13);
      }
      else
      {
        memcpy((void *)(*a1 + 8), v7 + 1, 16 * v10);
      }
      BM_free(v7, 16 * (v9 - 1) + 24);
      LHash<char const*,unsigned int>::locate((_DWORD **)a1, __s2, &v17);
      uint64_t v7 = (void *)*a1;
    }
    int v14 = strdup(__s2);
    unint64_t v15 = &v7[2 * v17];
    uint64_t v15[2] = v14;
    *((_DWORD *)v15 + 2) = 0;
    *(_DWORD *)*a1 += 32;
    uint64_t v7 = (void *)*a1;
  }
  return &v7[2 * v17 + 1];
}

uint64_t LHash<char const*,unsigned int>::remove(unsigned int **a1, char *a2, _DWORD *a3)
{
  unsigned int v17 = 0;
  uint64_t result = LHash<char const*,unsigned int>::locate(a1, a2, &v17);
  if (result)
  {
    free(*(void **)&(*a1)[4 * v17 + 4]);
    uint64_t v6 = v17;
    *(void *)&(*a1)[4 * v17 + 4] = 0;
    if (a3) {
      *a3 = (*a1)[4 * v6 + 2];
    }
    uint64_t v7 = *a1;
    unsigned int v8 = **a1;
    int v9 = v6 + 1;
    if ((v8 & 0x1F) >= 3)
    {
      int v16 = 0;
      for (unsigned int i = v9 & ~(-1 << (v8 & 0x1F)); ; unsigned int i = v15 & ~(-1 << **a1))
      {
        unsigned int v17 = i;
        uint64_t v12 = *(char **)&v7[4 * i + 4];
        if (!v12) {
          break;
        }
        int v13 = LHash<char const*,unsigned int>::locate(a1, v12, &v16);
        uint64_t v14 = v17;
        if (!v13)
        {
          *(_OWORD *)&(*a1)[4 * v16 + 2] = *(_OWORD *)&(*a1)[4 * v17 + 2];
          *(void *)&(*a1)[4 * v14 + 4] = 0;
        }
        int v16 = 0;
        int v15 = v14 + 1;
        uint64_t v7 = *a1;
      }
    }
    else
    {
      unsigned int v10 = v8 >> 5;
      memmove(&v7[4 * v6 + 2], &v7[4 * v9 + 2], 16 * (~v6 + (v8 >> 5)));
      *(void *)&(*a1)[4 * v10] = 0;
      uint64_t v7 = *a1;
    }
    *v7 -= 32;
    return 1;
  }
  return result;
}

uint64_t LHashIter<char const*,unsigned int>::LHashIter(uint64_t result, _DWORD **a2, uint64_t a3)
{
  char v3 = *a2;
  *(void *)uint64_t result = *a2;
  *(_DWORD *)(result + 8) = 0;
  if (v3)
  {
    *(_DWORD *)(result + 12) = *v3 >> 5;
    *(void *)(result + 16) = a3;
    *(void *)(result + 24) = 0;
    LHashIter<char const*,unsigned int>::sortKeys();
  }
  *(_DWORD *)(result + 12) = 0;
  *(void *)(result + 16) = a3;
  *(void *)(result + 24) = 0;
  return result;
}

void LHashIter<char const*,unsigned int>::sortKeys()
{
}

void sub_1B216D254(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    MEMORY[0x1B3EA8630](a12, 0x50C80EE9192B6);
  }
  _Unwind_Resume(exception_object);
}

uint64_t LHashIter<char const*,unsigned int>::LHashIter(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = *(void *)a2;
  int v2 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(result + 12) = v2;
  *(void *)(result + 24) = 0;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(result + 16) = *(void *)(a2 + 16);
  if (v3) {
    operator new[]();
  }
  return result;
}

uint64_t LHashIter<char const*,unsigned int>::~LHashIter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2) {
    MEMORY[0x1B3EA8630](v2, 0x50C80EE9192B6);
  }
  *(void *)(a1 + 24) = 0;
  return a1;
}

void LHashIter<char const*,unsigned int>::init(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2) {
    MEMORY[0x1B3EA8630](v2, 0x50C80EE9192B6);
  }
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  uint64_t v3 = *(_DWORD **)a1;
  if (*(void *)a1) {
    LODWORD(v3) = *v3 >> 5;
  }
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = 0;
  LHash<char const*,unsigned int>::clear(&v4, 0);
  if (*(void *)a1) {
    LHashIter<char const*,unsigned int>::sortKeys();
  }
}

uint64_t LHashIter<char const*,unsigned int>::next(uint64_t a1, void *a2)
{
  uint64_t v2 = *(_DWORD **)a1;
  if (!*(void *)a1) {
    return 0;
  }
  unsigned int v11 = 0;
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  if (v4 == *(_DWORD *)(a1 + 12)) {
    return 0;
  }
  unsigned int v10 = v2;
  uint64_t v7 = *(void *)(a1 + 24);
  *(_DWORD *)(a1 + 8) = v4 + 1;
  LHash<char const*,unsigned int>::locate(&v10, *(char **)(v7 + 8 * v4), &v11);
  unsigned int v10 = 0;
  uint64_t v8 = v11;
  *a2 = *(void *)(*(void *)a1 + 16 * v11 + 16);
  int v9 = *(_DWORD **)a1;
  LHash<char const*,unsigned int>::clear(&v10, 0);
  return (uint64_t)&v9[4 * v8 + 2];
}

void sub_1B216D47C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void Array<char const*>::alloc()
{
}

uint64_t Array<char const*>::operator[](int *a1, uint64_t a2)
{
  unint64_t v2 = a2 - *a1;
  if (v2 >= a1[1])
  {
    a1[1] = v2 + 1;
    if (v2 >= a1[4]) {
      Array<char const*>::alloc();
    }
  }
  return *((void *)a1 + 1) + 8 * v2;
}

void Array<unsigned int>::alloc()
{
}

uint64_t Array<unsigned int>::operator[](int *a1, uint64_t a2)
{
  unint64_t v2 = a2 - *a1;
  if (v2 >= a1[1])
  {
    a1[1] = v2 + 1;
    if (v2 >= a1[4]) {
      Array<unsigned int>::alloc();
    }
  }
  return *((void *)a1 + 1) + 4 * v2;
}

void *Vocab::setOutputVocab(Vocab *this, Vocab *a2)
{
  uint64_t v3 = (void **)Vocab::outputVocabTLS(Vocab::outputVocabTLS);
  uint64_t result = *v3;
  if (!*v3)
  {
    uint64_t result = malloc_type_calloc(1uLL, 8uLL, 0x2004093837F09uLL);
    *uint64_t v3 = result;
  }
  *uint64_t result = this;
  return result;
}

void *Vocab::setCompareVocab(Vocab *this, Vocab *a2)
{
  uint64_t v3 = (void **)Vocab::compareVocabTLS();
  uint64_t result = *v3;
  if (!*v3)
  {
    uint64_t result = malloc_type_calloc(1uLL, 8uLL, 0x2004093837F09uLL);
    *uint64_t v3 = result;
  }
  *uint64_t result = this;
  return result;
}

void Vocab::Vocab(Vocab *this, int a2, int a3)
{
  *(void *)this = qword_1F0A34918;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = a2;
  *(void *)((char *)this + 28) = 0;
  *(void *)((char *)this + 2std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((_DWORD *)this + 1std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = a2;
  *((_DWORD *)this + 11) = a3;
  *((void *)this + 11) = 0;
  int v5 = (void **)Vocab::outputVocabTLS(qword_1F0A34918);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v6 = malloc_type_calloc(1uLL, 8uLL, 0x2004093837F09uLL);
    *int v5 = v6;
    uint64_t v4 = *(void *)this;
  }
  *uint64_t v6 = this;
  *((_WORD *)this + 4std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = 0;
  *((_DWORD *)this + 16) = (*(uint64_t (**)(Vocab *, const char *))(v4 + 16))(this, "<unk>");
  *((_DWORD *)this + 17) = (*(uint64_t (**)(Vocab *, const char *))(*(void *)this + 16))(this, "<s>");
  *((_DWORD *)this + 18) = (*(uint64_t (**)(Vocab *, const char *))(*(void *)this + 16))(this, "</s>");
  *((_DWORD *)this + 19) = (*(uint64_t (**)(Vocab *, const char *))(*(void *)this + 16))(this, "-pau-");
  (*(void (**)(Vocab *, void))(*(void *)this + 184))(this, *((unsigned int *)this + 17));
  (*(void (**)(Vocab *, void))(*(void *)this + 184))(this, *((unsigned int *)this + 19));
}

void sub_1B216D970(_Unwind_Exception *a1)
{
  LHash<unsigned int,unsigned int>::~LHash(v4);
  LHash<unsigned int,unsigned int>::~LHash(v3);
  uint64_t v6 = *(void *)(v2 + 24);
  if (v6) {
    MEMORY[0x1B3EA8630](v6, 0x50C80EE9192B6);
  }
  LHash<char const*,unsigned int>::~LHash(v1);
  _Unwind_Resume(a1);
}

_DWORD **Vocab::memStats(uint64_t a1, int64x2_t *a2)
{
  a2->i64[0] += 64;
  uint64_t result = LHash<unsigned int,double>::memStats((_DWORD **)(a1 + 8), a2->i64);
  v5.i32[0] = *(_DWORD *)(a1 + 32);
  v5.i32[1] = v5.i32[0] - *(_DWORD *)(a1 + 20);
  int64x2_t v6 = (int64x2_t)vshll_n_u32(v5, 3uLL);
  *a2 = vaddq_s64(v6, *a2);
  uint64_t v7 = v6.i64[0];
  if (v6.i64[0] >= 0x100uLL) {
    uint64_t v7 = 256;
  }
  ++a2[1].i32[v7];
  return result;
}

unsigned char *Vocab::mapToLower(Vocab *this, const char *a2)
{
  uint64_t v3 = (void *)lowerTLS();
  uint64_t v4 = (unsigned char *)*v3;
  if (!*v3)
  {
    uint32x2_t v5 = v3;
    uint64_t v4 = malloc_type_calloc(0x401uLL, 1uLL, 0x100004077774924uLL);
    *uint32x2_t v5 = v4;
  }
  __darwin_ct_rune_t v6 = *(unsigned __int8 *)this;
  if (*(unsigned char *)this)
  {
    unint64_t v7 = 0;
    uint64_t v8 = (char *)this + 1;
    do
    {
      v4[v7] = __tolower(v6);
      unint64_t v9 = v7 + 1;
      if (v7 > 0x3FE) {
        break;
      }
      __darwin_ct_rune_t v6 = v8[v7++];
    }
    while (v6);
  }
  else
  {
    unint64_t v9 = 0;
  }
  v4[v9] = 0;
  return v4;
}

void Vocab::freeThread(Vocab *this)
{
  uint64_t v1 = (void **)Vocab::outputVocabTLS(Vocab::outputVocabTLS);
  if (*v1)
  {
    free(*v1);
    *uint64_t v1 = 0;
  }
  uint64_t v2 = (void **)Vocab::compareVocabTLS();
  if (*v2)
  {
    free(*v2);
    *uint64_t v2 = 0;
  }
  uint64_t v3 = (void **)lowerTLS();
  if (*v3)
  {
    free(*v3);
    *uint64_t v3 = 0;
  }
}

uint64_t Vocab::addWord(Vocab *this, Vocab *__s2)
{
  uint64_t v2 = (char *)__s2;
  if (*((unsigned char *)this + 81)) {
    uint64_t v2 = Vocab::mapToLower(__s2, (const char *)__s2);
  }
  char v14 = 0;
  uint64_t v4 = LHash<char const*,unsigned int>::insert((void *)this + 1, v2, &v14);
  if (v14) {
    return *(unsigned int *)v4;
  }
  int v6 = *((_DWORD *)this + 10);
  if (v6 == *((_DWORD *)this + 11)) {
    return 0xFFFFFFFFLL;
  }
  *(_DWORD *)uint64_t v4 = v6;
  unsigned int v15 = 0;
  if (LHash<char const*,unsigned int>::locate((_DWORD **)this + 1, v2, &v15)) {
    unint64_t v7 = (uint64_t *)(*((void *)this + 1) + 16 * v15 + 16);
  }
  else {
    unint64_t v7 = &LHash<char const*,unsigned int>::zeroKey;
  }
  uint64_t v8 = *v7;
  *(void *)Array<char const*>::operator[]((int *)this + 4, *((unsigned int *)this + 10)) = v8;
  unint64_t v9 = (const char *)*((void *)this + 11);
  if (v9)
  {
    size_t v10 = strlen(*((const char **)this + 11));
    if (!strncmp(v2, v9, v10))
    {
      int v13 = -1;
      if (v2[v10])
      {
        sscanf(&v2[v10], "%u", &v13);
        int v11 = v13;
        if (v13 < 0) {
          goto LABEL_17;
        }
      }
      else
      {
        int v11 = 0;
        int v13 = 0;
      }
      unsigned int v12 = *((_DWORD *)this + 10);
      char v16 = 0;
      *(_DWORD *)LHash<unsigned int,float>::insert((void *)this + 7, v12, &v16) = v11;
    }
  }
LABEL_17:
  uint64_t result = *((unsigned int *)this + 10);
  *((_DWORD *)this + 1std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = result + 1;
  return result;
}

const char *Vocab::addWordAlias(Vocab *this, const char *a2, Vocab *a3)
{
  uint64_t v3 = (char *)a3;
  uint64_t v4 = a2;
  if (*((unsigned char *)this + 81)) {
    uint64_t v3 = Vocab::mapToLower(a3, a2);
  }
  if (!*(void *)Array<char const*>::operator[]((int *)this + 4, v4)) {
    return (const char *)0xFFFFFFFFLL;
  }
  int v6 = (const char **)Array<char const*>::operator[]((int *)this + 4, v4);
  if (strcmp(v3, *v6))
  {
    (*(void (**)(Vocab *, char *))(*(void *)this + 56))(this, v3);
    char v8 = 0;
    *(_DWORD *)LHash<char const*,unsigned int>::insert((void *)this + 1, v3, &v8) = v4;
  }
  return v4;
}

uint64_t Vocab::addNonEvent(Vocab *this, uint64_t a2)
{
  if (!(*(uint64_t (**)(Vocab *))(*(void *)this + 32))(this)) {
    return 0xFFFFFFFFLL;
  }
  char v5 = 0;
  *(_DWORD *)LHash<unsigned int,float>::insert((void *)this + 6, a2, &v5) = 1;
  return a2;
}

uint64_t Vocab::addNonEvents(Vocab *this, Vocab *a2)
{
  LHashIter<char const*,unsigned int>::LHashIter((uint64_t)v5, (_DWORD **)a2 + 1, 0);
  unsigned __int8 v3 = 1;
  while (1)
  {
    uint64_t v7 = 0;
    if (!LHashIter<char const*,unsigned int>::next((uint64_t)v5, &v7) || !v7) {
      break;
    }
    if ((*(unsigned int (**)(Vocab *))(*(void *)this + 192))(this) == -1) {
      unsigned __int8 v3 = 0;
    }
  }
  if (v6) {
    MEMORY[0x1B3EA8630](v6, 0x50C80EE9192B6);
  }
  return v3;
}

void sub_1B216DEC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13) {
    MEMORY[0x1B3EA8630](a13, 0x50C80EE9192B6);
  }
  _Unwind_Resume(exception_object);
}

void VocabIter::VocabIter(VocabIter *this, const Vocab *a2, int a3)
{
  unsigned __int8 v3 = (_DWORD **)((char *)a2 + 8);
  if (a3) {
    uint64_t v4 = MEMORY[0x1E4F14A78];
  }
  else {
    uint64_t v4 = 0;
  }
  LHashIter<char const*,unsigned int>::LHashIter((uint64_t)this, v3, v4);
}

uint64_t Vocab::removeNonEvent(unsigned int **this, unsigned int a2)
{
  uint64_t result = (*((uint64_t (**)(unsigned int **))*this + 4))(this);
  if (result)
  {
    return LHash<unsigned int,float>::remove(this + 6, a2, 0);
  }
  return result;
}

uint64_t Vocab::getIndex(Vocab *this, Vocab *a2, uint64_t a3)
{
  uint64_t v4 = (char *)a2;
  if (*((unsigned char *)this + 81)) {
    uint64_t v4 = Vocab::mapToLower(a2, (const char *)a2);
  }
  unsigned int v9 = 0;
  if (LHash<char const*,unsigned int>::locate((_DWORD **)this + 1, v4, &v9)) {
    return *(unsigned int *)(*((void *)this + 1) + 16 * v9 + 8);
  }
  uint64_t v7 = (const char *)*((void *)this + 11);
  if (v7)
  {
    size_t v8 = strlen(*((const char **)this + 11));
    if (!strncmp(v4, v7, v8)) {
      return (*(uint64_t (**)(Vocab *, char *))(*(void *)this + 16))(this, v4);
    }
  }
  return a3;
}

{
  char *v4;
  const char *v6;
  size_t v7;
  std::runtime_error *exception;
  unsigned int v10;

  uint64_t v4 = (char *)a2;
  if (*((unsigned char *)this + 81)) {
    uint64_t v4 = Vocab::mapToLower(a2, (const char *)a2);
  }
  size_t v10 = 0;
  if (LHash<char const*,unsigned int>::locate((_DWORD **)this + 1, v4, &v10)) {
    return *(unsigned int *)(*((void *)this + 1) + 16 * v10 + 8);
  }
  uint64_t v6 = (const char *)*((void *)this + 11);
  if (v6)
  {
    uint64_t v7 = strlen(v6);
    if (!strncmp(v4, v6, v7))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Unable to intern metatag due to const.");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  return a3;
}

void sub_1B216E128(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Vocab::metaTagOfType(Vocab *this, int a2)
{
  uint64_t v2 = (const char *)*((void *)this + 11);
  if (!v2) {
    return 0xFFFFFFFFLL;
  }
  if (a2)
  {
    size_t v5 = strlen(*((const char **)this + 11));
    *(_DWORD *)&unsigned char v10[8] = 0;
    *(void *)size_t v10 = (v5 + 20);
    if (v5 != -20) {
      Array<char>::alloc();
    }
    snprintf(0, v5 + 20, "%s%u", v2, a2);
    return (*(uint64_t (**)(Vocab *, void, uint64_t))(*(void *)this + 40))(this, *(void *)&v10[4], 0xFFFFFFFFLL);
  }
  uint64_t v7 = *(uint64_t (**)(Vocab *, uint64_t, uint64_t))(*(void *)this + 40);
  uint64_t v8 = *((void *)this + 11);
  return v7(this, v8, 0xFFFFFFFFLL);
}

void sub_1B216E28C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13) {
    MEMORY[0x1B3EA8630](a13, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Vocab::getWord(Vocab *this, unsigned int a2)
{
  unsigned int v4 = *((_DWORD *)this + 4);
  unsigned __int8 v3 = (int *)((char *)this + 16);
  if (v4 > a2 || *((_DWORD *)this + 10) <= a2) {
    return 0;
  }
  else {
    return *(void *)Array<char const*>::operator[](v3, a2);
  }
}

uint64_t Vocab::remove(Vocab *this, Vocab *a2)
{
  uint64_t v2 = (char *)a2;
  if (*((unsigned char *)this + 81)) {
    uint64_t v2 = Vocab::mapToLower(a2, (const char *)a2);
  }
  unsigned int v10 = 0;
  uint64_t result = LHash<char const*,unsigned int>::locate((_DWORD **)this + 1, v2, &v10);
  if (result)
  {
    uint64_t v5 = *((void *)this + 1) + 16 * v10;
    unsigned int v7 = *(_DWORD *)(v5 + 8);
    uint64_t v6 = (unsigned int *)(v5 + 8);
    uint64_t v8 = (const char **)Array<char const*>::operator[]((int *)this + 4, v7);
    if (!strcmp(v2, *v8))
    {
      uint64_t v9 = *v6;
      LHash<char const*,unsigned int>::remove((unsigned int **)this + 1, v2, 0);
      *(void *)Array<char const*>::operator[]((int *)this + 4, v9) = 0;
      LHash<unsigned int,float>::remove((unsigned int **)this + 6, v9, 0);
      uint64_t result = LHash<unsigned int,float>::remove((unsigned int **)this + 7, v9, 0);
      if (v9 == *((_DWORD *)this + 17)) {
        *((_DWORD *)this + 17) = -1;
      }
      if (v9 == *((_DWORD *)this + 18)) {
        *((_DWORD *)this + 18) = -1;
      }
      if (v9 == *((_DWORD *)this + 16)) {
        *((_DWORD *)this + 16) = -1;
      }
      if (v9 == *((_DWORD *)this + 19)) {
        *((_DWORD *)this + 19) = -1;
      }
    }
    else
    {
      return LHash<char const*,unsigned int>::remove((unsigned int **)this + 1, v2, 0);
    }
  }
  return result;
}

uint64_t Vocab::remove(uint64_t this, unsigned int a2)
{
  uint64_t v2 = (int *)(this + 16);
  if (*(_DWORD *)(this + 16) <= a2)
  {
    uint64_t v4 = this;
    if (*(_DWORD *)(this + 40) > a2)
    {
      this = Array<char const*>::operator[]((int *)(this + 16), a2);
      if (*(void *)this)
      {
        LHash<char const*,unsigned int>::remove((unsigned int **)(v4 + 8), *(char **)this, 0);
        *(void *)Array<char const*>::operator[](v2, a2) = 0;
        LHash<unsigned int,float>::remove((unsigned int **)(v4 + 48), a2, 0);
        this = LHash<unsigned int,float>::remove((unsigned int **)(v4 + 56), a2, 0);
        if (*(_DWORD *)(v4 + 68) == a2) {
          *(_DWORD *)(v4 + 68) = -1;
        }
        if (*(_DWORD *)(v4 + 72) == a2) {
          *(_DWORD *)(v4 + 72) = -1;
        }
        if (*(_DWORD *)(v4 + 64) == a2) {
          *(_DWORD *)(v4 + 64) = -1;
        }
        if (*(_DWORD *)(v4 + 76) == a2) {
          *(_DWORD *)(v4 + 76) = -1;
        }
      }
    }
  }
  return this;
}

uint64_t Vocab::getWords(Vocab *this, const unsigned int *a2, const char **a3, unsigned int a4)
{
  if (!a4) {
    return 0;
  }
  uint64_t v7 = 0;
  uint64_t v8 = a4;
  while (a2[v7] != -1)
  {
    a3[v7++] = (const char *)(*(uint64_t (**)(Vocab *))(*(void *)this + 32))(this);
    if (v8 == v7) {
      return v8;
    }
  }
  a3[v7] = 0;
  return v7;
}

uint64_t Vocab::addWords(Vocab *this, const char *const *a2, unsigned int *a3, unsigned int a4)
{
  if (!a4) {
    return 0;
  }
  uint64_t v7 = 0;
  uint64_t v8 = a4;
  while (a2[v7])
  {
    a3[v7++] = (*(uint64_t (**)(Vocab *))(*(void *)this + 16))(this);
    if (v8 == v7) {
      return v8;
    }
  }
  a3[v7] = -1;
  return v7;
}

unint64_t Vocab::addWords(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  if (!a4) {
    return 0;
  }
  unint64_t v7 = 0;
  uint64_t v8 = 23;
  uint64_t v9 = a4;
  while (1)
  {
    uint64_t v10 = *a2;
    if (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) <= v7) {
      break;
    }
    int v11 = (void *)(v10 + v8 - 23);
    if (*(char *)(v10 + v8) < 0) {
      int v11 = (void *)*v11;
    }
    *(_DWORD *)(a3 + 4 * v7++) = (*(uint64_t (**)(uint64_t, void *))(*(void *)a1 + 16))(a1, v11);
    v8 += 24;
    if (v9 == v7) {
      return v9;
    }
  }
  *(_DWORD *)(a3 + 4 * v7) = -1;
  return v7;
}

uint64_t Vocab::getIndices(Vocab *this, const char *const *a2, unsigned int *a3, unsigned int a4, uint64_t a5)
{
  if (!a4) {
    return 0;
  }
  uint64_t v9 = 0;
  uint64_t v10 = a4;
  while (1)
  {
    int v11 = a2[v9];
    if (!v11) {
      break;
    }
    a3[v9++] = (*(uint64_t (**)(Vocab *, const char *, uint64_t))(*(void *)this + 40))(this, v11, a5);
    if (v10 == v9) {
      return v10;
    }
  }
  a3[v9] = -1;
  return v9;
}

unint64_t Vocab::getIndices(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  if (!a4) {
    return 0;
  }
  unint64_t v9 = 0;
  uint64_t v10 = 23;
  uint64_t v11 = a4;
  while (1)
  {
    uint64_t v12 = *a2;
    if (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) <= v9) {
      break;
    }
    int v13 = (void *)(v12 + v10 - 23);
    if (*(char *)(v12 + v10) < 0) {
      int v13 = (void *)*v13;
    }
    *(_DWORD *)(a3 + 4 * v9++) = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 40))(a1, v13, a5);
    v10 += 24;
    if (v11 == v9) {
      return v11;
    }
  }
  *(_DWORD *)(a3 + 4 * v9) = -1;
  return v9;
}

uint64_t Vocab::checkWords(Vocab *this, const char *const *a2, unsigned int *a3, unsigned int a4)
{
  if (!a4) {
    return 1;
  }
  uint64_t v7 = a4;
  while (1)
  {
    if (!*a2)
    {
      *a3 = -1;
      return 1;
    }
    unsigned int v8 = (*(uint64_t (**)(Vocab *, void, void))(*(void *)this + 40))(this, *a2, *((unsigned int *)this + 16));
    *a3 = v8;
    if (v8 == *((_DWORD *)this + 16)) {
      break;
    }
    ++a3;
    ++a2;
    if (!--v7) {
      return 1;
    }
  }
  return 0;
}

uint64_t Vocab::convertSymbols(uint64_t a1, int **a2, int *a3, unsigned int a4, char a5)
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1] - *a2;
  uint64_t v7 = 50000;
  unsigned int v8 = a3;
  uint64_t v9 = v6;
  while (v9)
  {
    int v10 = *v5;
    int *v8 = *v5;
    if (v10 == *(_DWORD *)(a1 + 64) && (a5 & 1) != 0) {
      return 0;
    }
    --v9;
    ++v8;
    ++v5;
    if (!--v7)
    {
      LODWORD(v6) = 50000;
      break;
    }
  }
  if (v6 < a4) {
    a3[v6] = -1;
  }
  return 1;
}

uint64_t Vocab::parseWords(Vocab *this, char *a2, const char **a3, char **a4)
{
  unsigned int v4 = a3;
  *(void *)int v10 = 0;
  uint64_t v6 = MStringTokUtil::strtok_r(this, wordSeparators, v10, a4);
  if (v4 && v6)
  {
    unint64_t v8 = 0;
    do
    {
      *(void *)&a2[8 * v8++] = v6;
      uint64_t v6 = MStringTokUtil::strtok_r(0, wordSeparators, v10, v7);
    }
    while (v8 < v4 && v6);
    if (v8 >= v4) {
      return v8;
    }
  }
  else
  {
    unint64_t v8 = 0;
    uint64_t result = 0;
    if (!v4) {
      return result;
    }
  }
  *(void *)&a2[8 * v8] = 0;
  return v8;
}

uint64_t Vocab::length(uint64_t this, const unsigned int *a2)
{
  uint64_t v2 = this;
  LODWORD(this) = -1;
  do
    this = (this + 1);
  while (*(_DWORD *)(v2 + 4 * this) != -1);
  return this;
}

uint64_t Vocab::length(uint64_t this, const char *const *a2)
{
  uint64_t v2 = this;
  LODWORD(this) = -1;
  do
    this = (this + 1);
  while (*(void *)(v2 + 8 * this));
  return this;
}

uint64_t Vocab::copy(uint64_t this, unsigned int *a2, const unsigned int *a3)
{
  unsigned int v3 = *a2;
  if (*a2 == -1)
  {
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = 0;
    unsigned int v5 = 1;
    do
    {
      *(_DWORD *)(this + 4 * v4) = v3;
      uint64_t v4 = v5;
      unsigned int v3 = a2[v5++];
    }
    while (v3 != -1);
  }
  *(_DWORD *)(this + 4 * v4) = -1;
  return this;
}

uint64_t Vocab::copy(uint64_t this, const char **a2, const char *const *a3)
{
  unsigned int v3 = *a2;
  if (*a2)
  {
    uint64_t v4 = 0;
    unsigned int v5 = 1;
    do
    {
      *(void *)(this + 8 * v4) = v3;
      uint64_t v4 = v5;
      unsigned int v3 = a2[v5++];
    }
    while (v3);
  }
  else
  {
    uint64_t v4 = 0;
  }
  *(void *)(this + 8 * v4) = 0;
  return this;
}

uint64_t Vocab::contains(Vocab *this, const unsigned int *a2)
{
  int v2 = *(_DWORD *)this;
  if (*(_DWORD *)this == -1) {
    return 0;
  }
  unsigned int v3 = 1;
  while (v2 != a2)
  {
    int v2 = *((_DWORD *)this + v3++);
    if (v2 == -1) {
      return 0;
    }
  }
  return 1;
}

uint64_t Vocab::reverse(uint64_t this, unsigned int *a2)
{
  LODWORD(v2) = -2;
  do
  {
    int v3 = *(_DWORD *)(this + 4 * (v2 + 2));
    LODWORD(v2) = v2 + 1;
  }
  while (v3 != -1);
  if ((int)v2 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v2 = (int)v2;
    do
    {
      int v5 = *(_DWORD *)(this + 4 * v4);
      *(_DWORD *)(this + 4 * v4) = *(_DWORD *)(this + 4 * v2);
      *(_DWORD *)(this + 4 * v2) = v5;
      ++v4;
      --v2;
    }
    while (v4 < v2);
  }
  return this;
}

uint64_t Vocab::reverse(uint64_t this, const char **a2)
{
  LODWORD(v2) = -2;
  do
  {
    uint64_t v3 = *(void *)(this + 8 * (v2 + 2));
    LODWORD(v2) = v2 + 1;
  }
  while (v3);
  if ((int)v2 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v2 = (int)v2;
    do
    {
      uint64_t v5 = *(void *)(this + 8 * v4);
      *(void *)(this + 8 * v4) = *(void *)(this + 8 * v2);
      *(void *)(this + 8 * v2) = v5;
      ++v4;
      --v2;
    }
    while (v4 < v2);
  }
  return this;
}

File *Vocab::write(File *this, const char **a2, const char *const *a3)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    uint64_t v5 = this;
    unsigned int v6 = 1;
    do
    {
      if (v6 == 1) {
        uint64_t v7 = "";
      }
      else {
        uint64_t v7 = " ";
      }
      this = (File *)File::fprintf(v5, "%s%s", v7, v3);
      uint64_t v3 = a2[v6++];
    }
    while (v3);
  }
  return this;
}

void *operator<<(void *a1, const char **a2)
{
  if (*a2)
  {
    unsigned int v4 = 1;
    uint64_t v5 = a2;
    do
    {
      if (v4 == 1) {
        unsigned int v6 = "";
      }
      else {
        unsigned int v6 = " ";
      }
      uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v6, v4 != 1);
      unint64_t v8 = *v5;
      size_t v9 = strlen(v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
      uint64_t v5 = &a2[v4++];
    }
    while (*v5);
  }
  return a1;
}

void *operator<<(void *a1, _DWORD *a2)
{
  unsigned int v4 = (void **)Vocab::outputVocabTLS();
  uint64_t v5 = *v4;
  if (!*v4)
  {
    unsigned int v6 = v4;
    uint64_t v5 = malloc_type_calloc(1uLL, 8uLL, 0x2004093837F09uLL);
    *unsigned int v6 = v5;
  }
  if (*a2 != -1)
  {
    unsigned int v7 = 1;
    do
    {
      unint64_t v8 = (const char *)(*(uint64_t (**)(void))(**(void **)v5 + 32))();
      if (v7 == 1) {
        size_t v9 = "";
      }
      else {
        size_t v9 = " ";
      }
      int v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v9, v7 != 1);
      if (!v8) {
        unint64_t v8 = "UNKNOWN";
      }
      size_t v11 = strlen(v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v8, v11);
      int v12 = a2[v7++];
    }
    while (v12 != -1);
  }
  return a1;
}

uint64_t Vocab::compare(Vocab *this, uint64_t a2)
{
  unsigned int v4 = (void **)Vocab::compareVocabTLS();
  uint64_t v5 = *v4;
  if (!*v4)
  {
    unsigned int v6 = v4;
    uint64_t v5 = malloc_type_calloc(1uLL, 8uLL, 0x2004093837F09uLL);
    *unsigned int v6 = v5;
  }
  if (!*v5) {
    return (a2 - this);
  }
  unsigned int v7 = (const char *)(*(uint64_t (**)(void, Vocab *))(*(void *)*v5 + 32))(*v5, this);
  unint64_t v8 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 32))(*v5, a2);
  return strcmp(v7, v8);
}

uint64_t Vocab::compare(Vocab *this, const unsigned int *a2, const unsigned int *a3)
{
  uint64_t v5 = (Vocab *)*(unsigned int *)this;
  if (v5 == -1)
  {
    uint64_t v6 = 0;
LABEL_8:
    if (a2[v6] == -1) {
      return 0;
    }
    else {
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    uint64_t v6 = 0;
    unsigned int v7 = 1;
    while (1)
    {
      uint64_t v8 = a2[v6];
      if (v8 == -1) {
        return 1;
      }
      uint64_t result = Vocab::compare(v5, v8);
      if (result) {
        return result;
      }
      uint64_t v6 = v7;
      uint64_t v5 = (Vocab *)*((unsigned int *)this + v7++);
      if (v5 == -1) {
        goto LABEL_8;
      }
    }
  }
}

uint64_t (*Vocab::compareIndex(Vocab *this))(Vocab *this, uint64_t a2)
{
  uint64_t v2 = (void **)Vocab::compareVocabTLS();
  uint64_t v3 = *v2;
  if (!*v2)
  {
    uint64_t v3 = malloc_type_calloc(1uLL, 8uLL, 0x2004093837F09uLL);
    *uint64_t v2 = v3;
  }
  *uint64_t v3 = this;
  return Vocab::compare;
}

uint64_t (*Vocab::compareIndices(Vocab *this))(Vocab *this, const unsigned int *a2, const unsigned int *a3)
{
  uint64_t v2 = (void **)Vocab::compareVocabTLS();
  uint64_t v3 = *v2;
  if (!*v2)
  {
    uint64_t v3 = malloc_type_calloc(1uLL, 8uLL, 0x2004093837F09uLL);
    *uint64_t v2 = v3;
  }
  *uint64_t v3 = this;
  return Vocab::compare;
}

uint64_t Vocab::write(Vocab *this, File *a2, int a3)
{
  if (a3) {
    uint64_t v4 = MEMORY[0x1E4F14A78];
  }
  else {
    uint64_t v4 = 0;
  }
  LHashIter<char const*,unsigned int>::LHashIter((uint64_t)v6, (_DWORD **)this + 1, v4);
  while (!File::error(a2))
  {
    uint64_t v8 = 0;
    if (!LHashIter<char const*,unsigned int>::next((uint64_t)v6, &v8) || !v8) {
      break;
    }
    File::fprintf(a2, "%s\n", v8);
  }
  uint64_t result = v7;
  if (v7) {
    return MEMORY[0x1B3EA8630](v7, 0x50C80EE9192B6);
  }
  return result;
}

void sub_1B216F144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13) {
    MEMORY[0x1B3EA8630](a13, 0x50C80EE9192B6);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Vocab::read(Vocab *this, File *a2)
{
  uint64_t v4 = File::getline(a2);
  uint64_t v6 = 0;
  if (v4)
  {
    uint64_t v7 = (void *)MEMORY[0x1E4FBA240];
    do
    {
      *(void *)char v14 = 0;
      uint64_t v8 = MStringTokUtil::strtok_r((MStringTokUtil *)v4, wordSeparators, v14, v5);
      if ((*(unsigned int (**)(Vocab *, MStringTokUtil *))(*(void *)this + 16))(this, v8) == -1)
      {
        size_t v9 = File::position((const char **)a2, v7);
        int v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"warning: failed to add ", 23);
        size_t v11 = strlen((const char *)v8);
        int v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v8, v11);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" to vocabulary\n", 15);
      }
      else
      {
        uint64_t v6 = (v6 + 1);
      }
      uint64_t v4 = File::getline(a2);
    }
    while (v4);
  }
  return v6;
}

uint64_t Vocab::readAliases(Vocab *this, File *a2)
{
  uint64_t v4 = File::getline(a2);
  uint64_t v6 = 0;
  if (v4)
  {
    uint64_t v7 = (void *)MEMORY[0x1E4FBA240];
    while (1)
    {
      *(void *)char v25 = 0;
      uint64_t v8 = MStringTokUtil::strtok_r((MStringTokUtil *)v4, wordSeparators, v25, v5);
      int v10 = MStringTokUtil::strtok_r(0, wordSeparators, v25, v9);
      if (!v10) {
        break;
      }
      size_t v11 = (const char *)v10;
      uint64_t v12 = (*(uint64_t (**)(Vocab *, MStringTokUtil *))(*(void *)this + 16))(this, v10);
      if (v12 == -1)
      {
        char v16 = File::position((const char **)a2, v7);
        unsigned int v17 = "warning: failed to add ";
        uint64_t v18 = 23;
        goto LABEL_10;
      }
      if ((*(unsigned int (**)(Vocab *, uint64_t, MStringTokUtil *))(*(void *)this + 24))(this, v12, v8) == -1)
      {
        uint64_t v19 = File::position((const char **)a2, v7);
        int v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"warning: failed to add alias ", 29);
        size_t v21 = strlen((const char *)v8);
        char v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v8, v21);
        unsigned int v17 = " for word ";
        uint64_t v18 = 10;
LABEL_10:
        unsigned __int8 v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
        size_t v23 = strlen(v11);
        int v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v11, v23);
        char v14 = " to vocabulary\n";
        uint64_t v15 = 15;
LABEL_11:
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, v15);
        goto LABEL_12;
      }
      uint64_t v6 = (v6 + 1);
LABEL_12:
      uint64_t v4 = File::getline(a2);
      if (!v4) {
        return v6;
      }
    }
    int v13 = File::position((const char **)a2, v7);
    char v14 = "warning: line contains only one token\n";
    uint64_t v15 = 38;
    goto LABEL_11;
  }
  return v6;
}

uint64_t Vocab::highIndex(Vocab *this)
{
  return (*((_DWORD *)this + 10) - 1);
}

uint64_t Vocab::ngramsInRange(Vocab *this, const char **a2, const char **a3)
{
  uint64_t v4 = a2;
  if (a2)
  {
LABEL_2:
    if (*v4) {
      goto LABEL_3;
    }
    return 1;
  }
  else
  {
LABEL_3:
    while (a3)
    {
      if (!*a3) {
        return 1;
      }
      if (!v4) {
        goto LABEL_14;
      }
      uint64_t v6 = *v4;
      if (strcmp(*v4, *a3)
        || (*(unsigned int (**)(Vocab *, const char *, uint64_t))(*(void *)this + 40))(this, v6, 0xFFFFFFFFLL) == -1)
      {
        goto LABEL_11;
      }
      ++v4;
      ++a3;
      if (v4) {
        goto LABEL_2;
      }
    }
    if (!v4)
    {
      a3 = 0;
      goto LABEL_18;
    }
LABEL_11:
    if ((*(unsigned int (**)(Vocab *, const char *, uint64_t))(*(void *)this + 40))(this, *v4, 0xFFFFFFFFLL) != -1&& Vocab::ngramsInRange(this, v4 + 1, 0))
    {
      return 1;
    }
    if (a3)
    {
LABEL_14:
      if ((*(unsigned int (**)(Vocab *, void, uint64_t))(*(void *)this + 40))(this, *a3, 0xFFFFFFFFLL) != -1
        && Vocab::ngramsInRange(this, 0, a3 + 1))
      {
        return 1;
      }
    }
LABEL_18:
    LHashIter<char const*,unsigned int>::LHashIter((uint64_t)v10, (_DWORD **)this + 1, 0);
    uint64_t v7 = 0;
    while (1)
    {
      __s2 = 0;
      if (!LHashIter<char const*,unsigned int>::next((uint64_t)v10, &__s2)) {
        break;
      }
      uint64_t v8 = __s2;
      if (!__s2) {
        break;
      }
      if ((!v4 || strcmp(*v4, __s2) < 0) && (!a3 || strcmp(v8, *a3) < 0))
      {
        uint64_t v7 = 1;
        break;
      }
    }
    if (v11) {
      MEMORY[0x1B3EA8630](v11, 0x50C80EE9192B6);
    }
  }
  return v7;
}

void sub_1B216F638(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13) {
    MEMORY[0x1B3EA8630](a13, 0x50C80EE9192B6);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Vocab::writeIndexMap(Vocab *this, File *a2, int a3)
{
  uint64_t v4 = (int *)((char *)this + 16);
  unint64_t v5 = *((unsigned int *)this + 4);
  if (v5 < *((_DWORD *)this + 10))
  {
    do
    {
      if (*(void *)Array<char const*>::operator[](v4, v5))
      {
        if (!a3)
        {
          int v8 = v5;
LABEL_7:
          size_t v9 = (const char **)Array<char const*>::operator[](v4, v5);
          File::fprintf(a2, "%u %s\n", v8, *v9);
          goto LABEL_8;
        }
        int v8 = v5;
        if (!(*(unsigned int (**)(Vocab *, unint64_t))(*(void *)this + 224))(this, v5)) {
          goto LABEL_7;
        }
      }
LABEL_8:
      ++v5;
    }
    while (v5 < *((unsigned int *)this + 10));
  }
  return File::fprintf(a2, ".\n");
}

uint64_t Vocab::readIndexMap(uint64_t *a1, File *this, int *a3, int a4)
{
  for (unsigned int i = File::getline(this); i; unsigned int i = File::getline(this))
  {
    unsigned int v20 = 0;
    *(void *)size_t v21 = 0;
    int v10 = MStringTokUtil::strtok_r((MStringTokUtil *)i, wordSeparators, v21, v9);
    uint64_t v12 = MStringTokUtil::strtok_r(0, wordSeparators, v21, v11);
    int v13 = v12;
    if (*(unsigned char *)v10 == 46 && !*((unsigned char *)v10 + 1) && v12 == 0) {
      break;
    }
    if (sscanf((const char *)v10, "%u", &v20) != 1 || v13 == 0)
    {
      uint64_t v19 = File::position((const char **)this, MEMORY[0x1E4FBA240]);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"malformed vocab index line\n", 27);
      return 0;
    }
    uint64_t v16 = *a1;
    if (a4) {
      int v17 = (*(uint64_t (**)(uint64_t *, MStringTokUtil *, uint64_t))(v16 + 40))(a1, v13, 0xFFFFFFFFLL);
    }
    else {
      int v17 = (*(uint64_t (**)(uint64_t *, MStringTokUtil *))(v16 + 16))(a1, v13);
    }
    *(_DWORD *)Array<unsigned int>::operator[](a3, v2std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = v17;
  }
  return 1;
}

unsigned int *VocabIter::next(VocabIter *this, unsigned int *a2)
{
  uint64_t v4 = 0;
  uint64_t result = (unsigned int *)LHashIter<char const*,unsigned int>::next((uint64_t)this, &v4);
  if (result)
  {
    *a2 = *result;
    return (unsigned int *)v4;
  }
  return result;
}

uint64_t _ZTWN5Vocab14outputVocabTLSE()
{
  return Vocab::outputVocabTLS();
}

float kaldi::VecVec<float>(uint64_t a1, const float **a2)
{
  return cblas_sdot(*(_DWORD *)(a1 + 8), *(const float **)a1, 1, *a2, 1);
}

float kaldi::VecVec<signed char>(float32x4_t **a1, uint64_t a2)
{
  return kaldi::QuantizedVectorBase<signed char>::VecVec(a2, a1);
}

float kaldi::VecVec<short>(_OWORD **a1, uint64_t a2)
{
  return kaldi::QuantizedVectorBase<short>::VecVec(a2, a1);
}

float kaldi::VectorBase<float>::CopyFromVec<double>(uint64_t a1, double **a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = *(float **)a1;
    uint64_t v4 = *a2;
    do
    {
      double v5 = *v4++;
      float result = v5;
      *v3++ = result;
      --v2;
    }
    while (v2);
  }
  return result;
}

void *kaldi::VectorBase<float>::CopyFromVec(uint64_t a1, const void **a2)
{
  float result = *(void **)a1;
  uint64_t v4 = (void *)*a2;
  if (result != v4) {
    return memcpy(result, v4, 4 * *(int *)(a1 + 8));
  }
  return result;
}

void *kaldi::VectorBase<double>::CopyFromVec(uint64_t a1, const void **a2)
{
  float result = *(void **)a1;
  uint64_t v4 = (void *)*a2;
  if (result != v4) {
    return memcpy(result, v4, 8 * *(int *)(a1 + 8));
  }
  return result;
}

double kaldi::VectorBase<double>::CopyFromVec<float>(uint64_t a1, float **a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = *(double **)a1;
    uint64_t v4 = *a2;
    do
    {
      float v5 = *v4++;
      double result = v5;
      *v3++ = v5;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t kaldi::VectorBase<float>::CopyRowsFromMat<signed char>(uint64_t *a1, float *a2)
{
  kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)a2);
  kaldi::quasar::Vocab::VocabSize((kaldi::quasar::Vocab *)a2);
  uint64_t v4 = *a1;
  int v5 = kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)a2);
  uint64_t result = kaldi::quasar::Vocab::VocabSize((kaldi::quasar::Vocab *)a2);
  if ((int)result >= 1)
  {
    int v7 = result;
    for (int i = 0; i != v7; ++i)
    {
      if (v5 >= 1)
      {
        for (uint64_t j = 0; j != v5; ++j)
        {
          uint64_t v10 = kaldi::QuantizedMatrixBase<signed char>::Data((uint64_t)a2);
          uint64_t result = kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)a2);
          *(float *)(v4 + 4 * j) = (float)*(char *)(v10 + i * (int)result + j) / a2[3];
        }
      }
      v4 += 4 * v5;
    }
  }
  return result;
}

uint64_t kaldi::VectorBase<float>::CopyRowsFromMat<short>(uint64_t *a1, float *a2)
{
  kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)a2);
  kaldi::quasar::Vocab::VocabSize((kaldi::quasar::Vocab *)a2);
  uint64_t v4 = *a1;
  int v5 = kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)a2);
  uint64_t result = kaldi::quasar::Vocab::VocabSize((kaldi::quasar::Vocab *)a2);
  if ((int)result >= 1)
  {
    int v7 = result;
    for (int i = 0; i != v7; ++i)
    {
      if (v5 >= 1)
      {
        for (uint64_t j = 0; j != v5; ++j)
        {
          uint64_t v10 = kaldi::QuantizedMatrixBase<signed char>::Data((uint64_t)a2);
          uint64_t result = kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)a2);
          *(float *)(v4 + 4 * j) = (float)*(__int16 *)(v10 + 2 * i * (int)result + 2 * j) / a2[3];
        }
      }
      v4 += 4 * v5;
    }
  }
  return result;
}

float kaldi::VectorBase<float>::CopyColFromMat<float>(uint64_t *a1, uint64_t a2, int a3)
{
  kaldi::MatrixBase<float>::NumCols(a2);
  kaldi::MatrixBase<float>::NumRows(a2);
  uint64_t v7 = *((unsigned int *)a1 + 2);
  if ((int)v7 >= 1)
  {
    uint64_t v8 = 0;
    size_t v9 = (float *)(*(void *)a2 + 4 * a3);
    uint64_t v10 = *a1;
    uint64_t v11 = 4 * *(int *)(a2 + 16);
    do
    {
      float result = *v9;
      *(float *)(v10 + 4 * v8++) = *v9;
      size_t v9 = (float *)((char *)v9 + v11);
    }
    while (v7 != v8);
  }
  return result;
}

float kaldi::VectorBase<float>::AddVec<double>(uint64_t a1, double **a2, double a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  uint64_t v4 = *(float **)a1;
  int v5 = *a2;
  if (*(float *)&a3 == 1.0)
  {
    if ((int)v3 >= 1)
    {
      do
      {
        double v8 = *v5++;
        *(float *)&a3 = v8 + *v4;
        *v4++ = *(float *)&a3;
        --v3;
      }
      while (v3);
    }
  }
  else if ((int)v3 >= 1)
  {
    a3 = *(float *)&a3;
    do
    {
      double v6 = *v5++;
      float v7 = *v4 + a3 * v6;
      *v4++ = v7;
      --v3;
    }
    while (v3);
  }
  return *(float *)&a3;
}

double kaldi::VectorBase<double>::AddVec<float>(uint64_t a1, float **a2, double result)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  uint64_t v4 = *(double **)a1;
  int v5 = *a2;
  if (result == 1.0)
  {
    if ((int)v3 >= 1)
    {
      do
      {
        float v7 = *v5++;
        float result = *v4 + v7;
        *v4++ = result;
        --v3;
      }
      while (v3);
    }
  }
  else if ((int)v3 >= 1)
  {
    do
    {
      float v6 = *v5++;
      *uint64_t v4 = *v4 + result * v6;
      ++v4;
      --v3;
    }
    while (v3);
  }
  return result;
}

double kaldi::VectorBase<double>::AddVec2<float>(uint64_t a1, float **a2, double result)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  uint64_t v4 = *(double **)a1;
  int v5 = *a2;
  if (result == 1.0)
  {
    if ((int)v3 >= 1)
    {
      do
      {
        float v7 = *v5++;
        float result = *v4 + (float)(v7 * v7);
        *v4++ = result;
        --v3;
      }
      while (v3);
    }
  }
  else if ((int)v3 >= 1)
  {
    do
    {
      float v6 = *v5++;
      *uint64_t v4 = *v4 + v6 * result * v6;
      ++v4;
      --v3;
    }
    while (v3);
  }
  return result;
}

void kaldi::VectorBase<float>::AddMatVec(uint64_t a1, const float **a2, CBLAS_TRANSPOSE a3, uint64_t a4, float a5, float a6)
{
  if (a3 != CblasNoTrans
    || kaldi::MatrixBase<float>::NumCols((uint64_t)a2) != *(_DWORD *)(a4 + 8)
    || kaldi::MatrixBase<float>::NumRows((uint64_t)a2) != *(_DWORD *)(a1 + 8))
  {
    kaldi::MatrixBase<float>::NumRows((uint64_t)a2);
    kaldi::MatrixBase<float>::NumCols((uint64_t)a2);
  }
  int v12 = kaldi::MatrixBase<float>::NumRows((uint64_t)a2);
  int v13 = kaldi::MatrixBase<float>::NumCols((uint64_t)a2);
  char v14 = *a2;
  int v15 = fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>::Start((uint64_t)a2);
  cblas_sgemv(CblasRowMajor, a3, v12, v13, a5, v14, v15, *(const float **)a4, 1, a6, *(float **)a1, 1);
}

void kaldi::Vector<float>::Resize(void **a1, uint64_t a2, int a3)
{
  int v3 = a2;
  if (a3 != 2)
  {
    int v5 = a3;
    if (a3 == 3)
    {
      float v6 = (char *)*a1;
      if (!*a1)
      {
        kaldi::Vector<float>::Init(a1, a2);
LABEL_22:
        float v6 = (char *)*a1;
        size_t v9 = 4 * *((int *)a1 + 2);
LABEL_23:
        bzero(v6, v9);
        return;
      }
      if (*((_DWORD *)a1 + 2) == a2) {
        return;
      }
      int v5 = 0;
      goto LABEL_13;
    }
    float v6 = (char *)*a1;
LABEL_12:
    if (!v6) {
      goto LABEL_16;
    }
LABEL_13:
    if (*((_DWORD *)a1 + 3) >= (int)a2)
    {
      *((_DWORD *)a1 + 2) = a2;
    }
    else if (*((_DWORD *)a1 + 2) != a2)
    {
      free(v6);
      *a1 = 0;
      a1[1] = 0;
LABEL_16:
      kaldi::Vector<float>::Init(a1, v3);
      if (v5) {
        return;
      }
      goto LABEL_22;
    }
    if (v5) {
      return;
    }
    size_t v9 = 4 * (int)a2;
    goto LABEL_23;
  }
  int v5 = 0;
  float v6 = (char *)*a1;
  if (!a2 || !v6) {
    goto LABEL_12;
  }
  if (*((_DWORD *)a1 + 3) >= (int)a2)
  {
    uint64_t v10 = *((int *)a1 + 2);
    if ((int)a2 > (int)v10) {
      bzero(&v6[4 * v10], 4 * ((int)a2 - (int)v10));
    }
    *((_DWORD *)a1 + 2) = v3;
  }
  else
  {
    __dst = 0;
    int v15 = 0;
    uint64_t v16 = 0;
    kaldi::Vector<float>::Resize(&__dst, a2, 1);
    uint64_t v7 = *((int *)a1 + 2);
    double v8 = *a1;
    if ((int)v7 >= v3)
    {
      memcpy(__dst, v8, 4 * v3);
    }
    else
    {
      memcpy(__dst, v8, 4 * v7);
      bzero((char *)__dst + 4 * *((int *)a1 + 2), 4 * (v3 - *((_DWORD *)a1 + 2)));
    }
    uint64_t v11 = (char *)__dst;
    __dst = *a1;
    int v12 = __dst;
    *a1 = v11;
    int v13 = v15;
    int v15 = (char *)a1[1];
    a1[1] = v13;
    if (v12) {
      free(v12);
    }
  }
}

uint64_t kaldi::Vector<float>::Vector(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  kaldi::Vector<float>::Resize((void **)a1, *(unsigned int *)(a2 + 8), 1);
  if (*(void *)a1 != *(void *)a2) {
    memcpy(*(void **)a1, *(const void **)a2, 4 * *(int *)(a1 + 8));
  }
  return a1;
}

uint64_t *kaldi::Vector<float>::Swap(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *float result = *a2;
  *a2 = v2;
  LODWORD(v2) = *((_DWORD *)result + 2);
  *((_DWORD *)result + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v2;
  LODWORD(v2) = *((_DWORD *)result + 3);
  *((_DWORD *)result + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v2;
  return result;
}

void kaldi::Vector<float>::Destroy(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (v2) {
    free(v2);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
}

void kaldi::Vector<float>::Read(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v91 = *MEMORY[0x1E4F143B8];
  if (a4)
  {
    uint64_t v7 = *(unsigned int *)(a1 + 8);
    uint64_t v82 = 0;
    uint64_t v83 = 0;
    __X = 0;
    kaldi::Vector<float>::Resize((void **)&__X, v7, 0);
    kaldi::Vector<float>::Read(&__X, a2, a3, 0);
    int v8 = *(_DWORD *)(a1 + 8);
    if (!v8)
    {
      kaldi::Vector<float>::Resize((void **)a1, v82, 0);
      int v8 = *(_DWORD *)(a1 + 8);
    }
    if (v8 != v82)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v88);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v88, (uint64_t)"Vector<Real>::Read, adding but dimensions mismatch ", 51);
      float v74 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)" vs. ", 5);
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v88);
    }
    cblas_saxpy(v8, 1.0, __X, 1, *(float **)a1, 1);
    if (__X) {
      free(__X);
    }
    return;
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__X);
  std::istream::tellg();
  if (!a3)
  {
    memset(&v87, 0, sizeof(v87));
    std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&v87);
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__X, (uint64_t)"EOF while trying to read vector.", 32);
LABEL_17:
      int v16 = 2;
      goto LABEL_18;
    }
    if (!std::string::compare(&v87, "[]"))
    {
      kaldi::Vector<float>::Resize((void **)a1, 0, 0);
      int v16 = 1;
      goto LABEL_18;
    }
    if (std::string::compare(&v87, "["))
    {
      uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__X, (uint64_t)"Expected \"[\" but got ", 21);
      if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unsigned int v20 = &v87;
      }
      else {
        unsigned int v20 = (std::string *)v87.__r_.__value_.__r.__words[0];
      }
      if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v87.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v87.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, size);
      goto LABEL_17;
    }
    __n128 __p = 0;
    char v79 = 0;
    long long v34 = a2 + 4;
    uint64_t v75 = 22;
    std::string::size_type v76 = "Failed to read number.";
    std::string::size_type v80 = 0;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          int v35 = std::istream::peek();
          if ((v35 - 48) > 9) {
            break;
          }
          LODWORD(v88) = 0;
          MEMORY[0x1B3EA7DC0](a2, &v88);
          if ((*((unsigned char *)v34 + *(void *)(*a2 - 24)) & 5) != 0) {
            goto LABEL_155;
          }
          unsigned int v36 = std::istream::peek();
          if (v36 <= 0x7F)
          {
            if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v36 + 60) & 0x4000) != 0) {
              goto LABEL_84;
            }
          }
          else if (__maskrune(v36, 0x4000uLL))
          {
            goto LABEL_84;
          }
          if (std::istream::peek() != 93)
          {
            uint64_t v75 = 33;
            std::string::size_type v76 = "Expected whitespace after number.";
            goto LABEL_155;
          }
LABEL_84:
          long long v39 = v79;
          if (v79 >= v80)
          {
            long long v41 = (char *)__p;
            uint64_t v42 = (v79 - (unsigned char *)__p) >> 2;
            unint64_t v43 = v42 + 1;
            if ((unint64_t)(v42 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v44 = v80 - (unsigned char *)__p;
            if ((v80 - (unsigned char *)__p) >> 1 > v43) {
              unint64_t v43 = v44 >> 1;
            }
            if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v45 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v45 = v43;
            }
            if (v45)
            {
              long long v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v80, v45);
              long long v41 = (char *)__p;
              long long v39 = v79;
            }
            else
            {
              long long v46 = 0;
            }
            long long v47 = &v46[4 * v42];
            *(_DWORD *)long long v47 = v88;
            long long v40 = v47 + 4;
            while (v39 != v41)
            {
              int v48 = *((_DWORD *)v39 - 1);
              v39 -= 4;
              *((_DWORD *)v47 - 1) = v48;
              v47 -= 4;
            }
            __n128 __p = v47;
            char v79 = v40;
            std::string::size_type v80 = &v46[4 * v45];
            if (v41) {
              operator delete(v41);
            }
          }
          else
          {
            *(_DWORD *)char v79 = v88;
            long long v40 = v39 + 4;
          }
          char v79 = v40;
        }
        if (v35 > 31) {
          break;
        }
        if (v35 > 9)
        {
          if (v35 == 10 || v35 == 13)
          {
            uint64_t v63 = "Newline found while reading vector (maybe it's a matrix?)";
            uint64_t v64 = 57;
LABEL_171:
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__X, (uint64_t)v63, v64);
            goto LABEL_172;
          }
          goto LABEL_113;
        }
        if (v35 != 9)
        {
          if (v35 == -1)
          {
            uint64_t v63 = "EOF while reading vector data.";
            uint64_t v64 = 30;
            goto LABEL_171;
          }
          goto LABEL_113;
        }
LABEL_96:
        std::istream::get();
      }
      switch(v35)
      {
        case ' ':
          goto LABEL_96;
        case '-':
          std::istream::get();
          if (std::istream::peek() - 48 > 9)
          {
            std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&v87);
            if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
            {
              long long v49 = (std::string *)v87.__r_.__value_.__r.__words[0];
              if (!strcasecmp(v87.__r_.__value_.__l.__data_, "inf")) {
                goto LABEL_142;
              }
              long long v50 = v49;
LABEL_138:
              if (!strcasecmp((const char *)v50, "infinity")) {
                goto LABEL_142;
              }
              if (strcasecmp((const char *)v49, "nan"))
              {
LABEL_175:
                unint64_t v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__X, (uint64_t)"Expecting numeric vector data, got ", 35);
                if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  uint64_t v72 = &v87;
                }
                else {
                  uint64_t v72 = (std::string *)v87.__r_.__value_.__r.__words[0];
                }
                if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type v73 = HIBYTE(v87.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type v73 = v87.__r_.__value_.__l.__size_;
                }
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)v72, v73);
                goto LABEL_172;
              }
              LODWORD(v88) = -4194304;
              std::vector<float>::push_back[abi:ne180100]((uint64_t)&__p, &v88);
              if (kaldi::g_kaldi_verbose_level >= -1)
              {
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v88);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v88, (uint64_t)"Reading negative NaN value into vector.", 39);
                kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v88);
              }
            }
            else
            {
              if (strcasecmp((const char *)&v87, "inf"))
              {
                long long v49 = &v87;
                long long v50 = &v87;
                goto LABEL_138;
              }
LABEL_142:
              LODWORD(v88) = -8388608;
              std::vector<float>::push_back[abi:ne180100]((uint64_t)&__p, &v88);
              if (kaldi::g_kaldi_verbose_level >= -1)
              {
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v88);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v88, (uint64_t)"Reading negative infinite value into vector.", 44);
                kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v88);
              }
            }
          }
          else
          {
            LODWORD(v88) = 0;
            MEMORY[0x1B3EA7DC0](a2, &v88);
            if ((*((unsigned char *)v34 + *(void *)(*a2 - 24)) & 5) != 0) {
              goto LABEL_155;
            }
            unsigned int v37 = std::istream::peek();
            if (v37 <= 0x7F) {
              int v38 = *(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v37 + 60) & 0x4000;
            }
            else {
              int v38 = __maskrune(v37, 0x4000uLL);
            }
            if (!v38 && std::istream::peek() != 93)
            {
              uint64_t v75 = 33;
              std::string::size_type v76 = "Expected whitespace after number.";
LABEL_155:
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__X, (uint64_t)v76, v75);
LABEL_172:
              int v16 = 2;
              goto LABEL_173;
            }
            float v77 = -*(float *)&v88;
            std::vector<float>::push_back[abi:ne180100]((uint64_t)&__p, &v77);
          }
          break;
        case ']':
          std::istream::get();
          kaldi::Vector<float>::Resize((void **)a1, (unint64_t)(v79 - (unsigned char *)__p) >> 2, 0);
          uint64_t v65 = (int *)__p;
          if (v79 != __p)
          {
            unint64_t v66 = (v79 - (unsigned char *)__p) >> 2;
            uint64_t v67 = *(_DWORD **)a1;
            if (v66 <= 1) {
              unint64_t v66 = 1;
            }
            do
            {
              int v68 = *v65++;
              *v67++ = v68;
              --v66;
            }
            while (v66);
          }
          unsigned int v69 = std::istream::peek() << 24;
          if (v69 == 167772160)
          {
LABEL_163:
            std::istream::get();
          }
          else if (v69 == 218103808)
          {
            std::istream::get();
            goto LABEL_163;
          }
          if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0 && kaldi::g_kaldi_verbose_level >= -1)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v88);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v88, (uint64_t)"After end of vector data, read error.", 37);
            kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v88);
          }
          int v16 = 1;
LABEL_173:
          if (__p)
          {
            char v79 = (char *)__p;
            operator delete(__p);
          }
LABEL_18:
          if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
          {
            int v17 = (void **)v87.__r_.__value_.__r.__words[0];
            goto LABEL_45;
          }
LABEL_46:
          if (v16 == 2)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v88);
            long long v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v88, (uint64_t)"Failed to read vector from stream.  ", 36);
            std::stringbuf::str();
            if (SHIBYTE(v80) >= 0) {
              p_p = &__p;
            }
            else {
              p_p = __p;
            }
            if (SHIBYTE(v80) >= 0) {
              uint64_t v29 = HIBYTE(v80);
            }
            else {
              uint64_t v29 = (uint64_t)v79;
            }
            long long v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)p_p, v29);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" File position at start is ", 27);
            BOOL v31 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)", currently ", 12);
            std::istream::tellg();
            std::ostream::operator<<();
            if (SHIBYTE(v80) < 0) {
              operator delete(__p);
            }
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v88);
          }
          goto LABEL_58;
        default:
LABEL_113:
          std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&v87);
          if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
          {
            long long v51 = (std::string *)v87.__r_.__value_.__r.__words[0];
            if (!strcasecmp(v87.__r_.__value_.__l.__data_, "inf")) {
              goto LABEL_122;
            }
            long long v52 = v51;
          }
          else
          {
            if (!strcasecmp((const char *)&v87, "inf")) {
              goto LABEL_122;
            }
            long long v51 = &v87;
            long long v52 = &v87;
          }
          if (!strcasecmp((const char *)v52, "infinity"))
          {
LABEL_122:
            long long v53 = v79;
            if (v79 >= v80)
            {
              long long v55 = (char *)__p;
              uint64_t v56 = (v79 - (unsigned char *)__p) >> 2;
              unint64_t v57 = v56 + 1;
              if ((unint64_t)(v56 + 1) >> 62) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v58 = v80 - (unsigned char *)__p;
              if ((v80 - (unsigned char *)__p) >> 1 > v57) {
                unint64_t v57 = v58 >> 1;
              }
              if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v59 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v59 = v57;
              }
              if (v59)
              {
                size_t v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v80, v59);
                long long v55 = (char *)__p;
                long long v53 = v79;
              }
              else
              {
                size_t v60 = 0;
              }
              int v61 = &v60[4 * v56];
              *(_DWORD *)int v61 = 2139095040;
              long long v54 = v61 + 4;
              while (v53 != v55)
              {
                int v62 = *((_DWORD *)v53 - 1);
                v53 -= 4;
                *((_DWORD *)v61 - 1) = v62;
                v61 -= 4;
              }
              __n128 __p = v61;
              char v79 = v54;
              std::string::size_type v80 = &v60[4 * v59];
              if (v55) {
                operator delete(v55);
              }
            }
            else
            {
              *(_DWORD *)char v79 = 2139095040;
              long long v54 = v53 + 4;
            }
            char v79 = v54;
            if (kaldi::g_kaldi_verbose_level >= -1)
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v88);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v88, (uint64_t)"Reading infinite value into vector.", 35);
              kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v88);
            }
          }
          else
          {
            if (strcasecmp((const char *)v51, "nan")) {
              goto LABEL_175;
            }
            LODWORD(v88) = 2143289344;
            std::vector<float>::push_back[abi:ne180100]((uint64_t)&__p, &v88);
            if (kaldi::g_kaldi_verbose_level >= -1)
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v88);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v88, (uint64_t)"Reading NaN value into vector.", 30);
              kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v88);
            }
          }
          break;
      }
    }
  }
  if (kaldi::Peek(a2, 1) != 68)
  {
    std::string v88 = 0;
    uint64_t v89 = 0;
    uint64_t v90 = 0;
    kaldi::ReadToken(a2, 1, (uint64_t)&v88);
    if (SHIBYTE(v90) < 0)
    {
      if (v89 != 2) {
        goto LABEL_35;
      }
      uint64_t v18 = v88;
    }
    else
    {
      if (SHIBYTE(v90) != 2) {
        goto LABEL_35;
      }
      uint64_t v18 = (void **)&v88;
    }
    if (*(_WORD *)v18 == 22086)
    {
      LODWORD(v87.__r_.__value_.__l.__data_) = 0;
      kaldi::ReadBasicType<int>(a2, 1, (uint64_t)&v87);
      int data = (int)v87.__r_.__value_.__l.__data_;
      if (LODWORD(v87.__r_.__value_.__l.__data_) != *(_DWORD *)(a1 + 8))
      {
        kaldi::Vector<float>::Resize((void **)a1, LODWORD(v87.__r_.__value_.__l.__data_), 0);
        int data = (int)v87.__r_.__value_.__l.__data_;
      }
      if (data >= 1) {
        std::istream::read();
      }
      if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) == 0)
      {
        int v16 = 1;
LABEL_43:
        if (SHIBYTE(v90) < 0)
        {
          int v17 = v88;
LABEL_45:
          operator delete(v17);
        }
        goto LABEL_46;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__X, (uint64_t)"Error reading vector data (binary mode); truncated stream? (std::string::size_type size = ",
        67);
      long long v33 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)")", 1);
LABEL_42:
      int v16 = 2;
      goto LABEL_43;
    }
LABEL_35:
    unsigned __int8 v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__X, (uint64_t)": Expected token ", 17);
    size_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"FV", 2);
    uint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)", got ", 6);
    if (v90 >= 0) {
      char v25 = (void **)&v88;
    }
    else {
      char v25 = v88;
    }
    if (v90 >= 0) {
      uint64_t v26 = HIBYTE(v90);
    }
    else {
      uint64_t v26 = v89;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v25, v26);
    goto LABEL_42;
  }
  uint64_t v9 = *(unsigned int *)(a1 + 8);
  uint64_t v89 = 0;
  uint64_t v90 = 0;
  std::string v88 = 0;
  kaldi::Vector<double>::Resize((void **)&v88, v9, 0);
  kaldi::Vector<double>::Read((uint64_t)&v88, a2, 1, 0);
  LODWORD(v1std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = *(_DWORD *)(a1 + 8);
  if (v10 != v89)
  {
    kaldi::Vector<float>::Resize((void **)a1, v89, 0);
    LODWORD(v1std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0) = v89;
  }
  uint64_t v11 = v88;
  if ((int)v10 < 1)
  {
    if (!v88) {
      goto LABEL_58;
    }
  }
  else
  {
    int v12 = *(float **)a1;
    uint64_t v10 = v10;
    int v13 = (double *)v88;
    do
    {
      double v14 = *v13++;
      float v15 = v14;
      *v12++ = v15;
      --v10;
    }
    while (v10);
  }
  free(v11);
LABEL_58:
  __X = (float *)*MEMORY[0x1E4FBA418];
  *(float **)((char *)&__X + *((void *)__X - 3)) = *(float **)(MEMORY[0x1E4FBA418] + 24);
  uint64_t v82 = MEMORY[0x1E4FBA470] + 16;
  if (v85 < 0) {
    operator delete(v84);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1B3EA8520](&v86);
}

void sub_1B2170EFC(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B2170F60);
}

void sub_1B2170F0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B2170F14()
{
}

void sub_1B2170F30()
{
  if (v1) {
    operator delete(v1);
  }
  if (v2 < 0) {
    operator delete(*v0);
  }
  JUMPOUT(0x1B2170F58);
}