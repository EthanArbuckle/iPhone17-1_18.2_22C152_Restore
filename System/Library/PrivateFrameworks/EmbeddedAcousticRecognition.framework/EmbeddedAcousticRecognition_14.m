void sub_1B229FDE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::ofstream::~ofstream(&a21);
  _Unwind_Resume(a1);
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::DeleteStates(uint64_t a1, char **a2)
{
  v4 = (uint64_t *)(a1 + 64);
  std::vector<int>::size_type v5 = (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 3;
  std::vector<int>::value_type __x = 0;
  std::vector<int>::vector(&v33, v5, &__x);
  v6 = *a2;
  uint64_t v7 = a2[1] - *a2;
  if (v7)
  {
    unint64_t v8 = v7 >> 2;
    std::vector<int>::pointer begin = v33.__begin_;
    if (v8 <= 1) {
      unint64_t v8 = 1;
    }
    do
    {
      uint64_t v10 = *(int *)v6;
      v6 += 4;
      begin[v10] = -1;
      --v8;
    }
    while (v8);
  }
  uint64_t v11 = *(void *)(a1 + 64);
  if (*(void *)(a1 + 72) == v11)
  {
    int v13 = 0;
  }
  else
  {
    unint64_t v12 = 0;
    int v13 = 0;
    do
    {
      if (v33.__begin_[v12] == -1)
      {
        fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Destroy(*(void *)(v11 + 8 * v12));
      }
      else
      {
        v33.__begin_[v12] = v13;
        if (v12 != v13) {
          *(void *)(v11 + 8 * v13) = *(void *)(v11 + 8 * v12);
        }
        ++v13;
      }
      ++v12;
      uint64_t v11 = *(void *)(a1 + 64);
    }
    while (v12 < (*(void *)(a1 + 72) - v11) >> 3);
  }
  std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)v4, v13);
  uint64_t v14 = *(void *)(a1 + 64);
  if (*(void *)(a1 + 72) != v14)
  {
    unint64_t v15 = 0;
    do
    {
      uint64_t v16 = *(void *)(v14 + 8 * v15);
      int64x2_t v17 = *(int64x2_t *)(v16 + 40);
      uint64_t v18 = *(void *)(v16 + 64) - *(void *)(v16 + 56);
      if (v18) {
        uint64_t v19 = *(void *)(v16 + 56);
      }
      else {
        uint64_t v19 = 0;
      }
      if (v18)
      {
        unint64_t v20 = 0;
        uint64_t v21 = 0;
        v22 = (int *)(v19 + 48);
        do
        {
          int v23 = v33.__begin_[*v22];
          if (v23 == -1)
          {
            uint64_t v25 = *((void *)v22 - 6);
            v26.i64[0] = v25;
            v26.i64[1] = HIDWORD(v25);
            int64x2_t v17 = vaddq_s64(v17, vceqzq_s64(v26));
          }
          else
          {
            int *v22 = v23;
            if (v20 != v21)
            {
              int64x2_t v30 = v17;
              v24 = (void *)(v19 + 56 * v21);
              void *v24 = *((void *)v22 - 6);
              fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::operator=((uint64_t)(v24 + 1), (uint64_t)(v22 - 10));
              *(_DWORD *)(v19 + 56 * v21 + 48) = *v22;
              uint64_t v14 = *v4;
              int64x2_t v17 = v30;
            }
            ++v21;
          }
          ++v20;
          uint64_t v16 = *(void *)(v14 + 8 * v15);
          unint64_t v27 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(v16 + 64) - *(void *)(v16 + 56)) >> 3);
          v22 += 14;
        }
        while (v20 < v27);
        int64x2_t v31 = v17;
      }
      else
      {
        int64x2_t v31 = *(int64x2_t *)(v16 + 40);
        uint64_t v21 = 0;
        unint64_t v27 = 0;
      }
      fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::DeleteArcs((void *)v16, v27 - v21);
      uint64_t v14 = *(void *)(a1 + 64);
      *(int64x2_t *)(*(void *)(v14 + 8 * v15++) + 40) = v31;
    }
    while (v15 < (*(void *)(a1 + 72) - v14) >> 3);
  }
  uint64_t v28 = *(int *)(a1 + 88);
  if (v28 == -1)
  {
    v29 = v33.__begin_;
    if (!v33.__begin_) {
      return;
    }
  }
  else
  {
    v29 = v33.__begin_;
    *(_DWORD *)(a1 + 88) = v33.__begin_[v28];
  }
  v33.__end_ = v29;
  operator delete(v29);
}

void sub_1B22A00B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::DeleteArcs(void *a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    uint64_t v4 = a1[8] - 56;
    do
    {
      if (!*(_DWORD *)v4) {
        --a1[5];
      }
      if (!*(_DWORD *)(v4 + 4)) {
        --a1[6];
      }
      std::vector<int>::size_type v5 = *(void **)(v4 + 24);
      if (v5)
      {
        *(void *)(v4 + 32) = v5;
        operator delete(v5);
      }
      a1[8] = v4;
      v4 -= 56;
      --v2;
    }
    while (v2);
  }
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::DeleteStates(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 != *(void *)(a1 + 64))
  {
    unint64_t v3 = 0;
    uint64_t v2 = *(void *)(a1 + 64);
    do
    {
      fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Destroy(*(void *)(v2 + 8 * v3++));
      uint64_t v2 = *(void *)(a1 + 64);
    }
    while (v3 < (*(void *)(a1 + 72) - v2) >> 3);
  }
  *(void *)(a1 + 72) = v2;
  *(_DWORD *)(a1 + 88) = -1;
}

void fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::~MutableArcIterator()
{
}

uint64_t fst::ArcIteratorBase<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::Reinit()
{
  return 0;
}

BOOL fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::Done_(uint64_t a1)
{
  return *(void *)(a1 + 24) >= (unint64_t)(0x6DB6DB6DB6DB6DB7
                                                  * ((uint64_t)(*(void *)(*(void *)(a1 + 8) + 64)
                                                             - *(void *)(*(void *)(a1 + 8) + 56)) >> 3));
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::Value_(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 56) + 56 * *(void *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::Next_(uint64_t result)
{
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::Position_(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::Reset_(uint64_t result)
{
  *(void *)(result + ++*(void *)(result + 24) = 0;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::Seek_(uint64_t result, uint64_t a2)
{
  *(void *)(result + ++*(void *)(result + 24) = a2;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::Flags_()
{
  return 15;
}

void fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::SetValue(uint64_t a1, float *a2)
{
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(*(void *)(a1 + 8) + 56);
  v6 = (int *)(v5 + 56 * v4);
  int v7 = *v6;
  int v8 = v6[1];
  if (*v6 != v8) {
    **(void **)(a1 + 16) &= ~0x20000uLL;
  }
  if (v7)
  {
    if (!v8)
    {
      v9 = *(unint64_t **)(a1 + 16);
      unint64_t v10 = *v9;
LABEL_8:
      unint64_t *v9 = v10 & 0xFFFFFFFFFBFFFFFFLL;
    }
  }
  else
  {
    v9 = *(unint64_t **)(a1 + 16);
    unint64_t v11 = *v9;
    *v9 &= ~0x1000000uLL;
    if (!v8)
    {
      unint64_t v10 = v11 & 0xFFFFFFFFFEBFFFFFLL;
      unint64_t *v9 = v11 & 0xFFFFFFFFFEBFFFFFLL;
      goto LABEL_8;
    }
  }
  uint64_t v12 = v5 + 56 * v4;
  fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero((uint64_t)&v42);
  float v37 = 0.0;
  float v14 = *(float *)(v12 + 8);
  int v13 = (float *)(v12 + 8);
  float v37 = v14;
  float v50 = v42;
  if (v14 != v42) {
    goto LABEL_14;
  }
  float v37 = 0.0;
  float v37 = v13[1];
  float v50 = 0.0;
  float v50 = v13[2];
  float v49 = v43;
  float v48 = v44;
  if (v37 != v43) {
    goto LABEL_14;
  }
  if (v50 == v48
    && (uint64_t v15 = v5 + 56 * v4,
        uint64_t v16 = *(const void **)(v15 + 24),
        size_t v17 = *(void *)(v15 + 32) - (void)v16,
        uint64_t v18 = v45,
        v17 == v46 - (unsigned char *)v45)
    && !memcmp(v16, v45, v17))
  {
    BOOL v22 = 0;
    if (v18)
    {
LABEL_23:
      v46 = v18;
      operator delete(v18);
    }
  }
  else
  {
LABEL_14:
    fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::One((uint64_t)&v37);
    float v50 = 0.0;
    float v50 = *v13;
    float v49 = v37;
    if (v50 != v37) {
      goto LABEL_19;
    }
    float v50 = 0.0;
    float v50 = v13[1];
    float v49 = 0.0;
    float v49 = v13[2];
    float v48 = v38;
    float v47 = v39;
    if (v50 != v38) {
      goto LABEL_19;
    }
    if (v49 == v47
      && (uint64_t v19 = v5 + 56 * v4,
          unint64_t v20 = *(const void **)(v19 + 24),
          size_t v21 = *(void *)(v19 + 32) - (void)v20,
          v21 == v41 - (unsigned char *)__p))
    {
      BOOL v22 = memcmp(v20, __p, v21) != 0;
    }
    else
    {
LABEL_19:
      BOOL v22 = 1;
    }
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    uint64_t v18 = v45;
    if (v45) {
      goto LABEL_23;
    }
  }
  if (v22) {
    **(void **)(a1 + 16) &= ~0x100000000uLL;
  }
  uint64_t v23 = 0x30FC30007;
  if (*(_DWORD *)a2 == *v6 && *((_DWORD *)a2 + 1) == v6[1] && *((_DWORD *)a2 + 12) == *(_DWORD *)(v5 + 56 * v4 + 48)) {
    uint64_t v23 = 0x3FFFFFFF0007;
  }
  fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::SetArc(*(void **)(a1 + 8), a2, *(void *)(a1 + 24));
  float v24 = *a2;
  int v25 = *((_DWORD *)a2 + 1);
  if (*(_DWORD *)a2 != v25) {
    **(void **)(a1 + 16) = **(void **)(a1 + 16) & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
  }
  if (v24 == 0.0)
  {
    int64x2_t v26 = *(unint64_t **)(a1 + 16);
    unint64_t v28 = *v26 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
    *int64x2_t v26 = v28;
    if (!v25)
    {
      unint64_t v27 = v28 & 0xFFFFFFFFFD3FFFFFLL | 0x400000;
      *int64x2_t v26 = v27;
      goto LABEL_37;
    }
  }
  else if (!v25)
  {
    int64x2_t v26 = *(unint64_t **)(a1 + 16);
    unint64_t v27 = *v26;
LABEL_37:
    *int64x2_t v26 = v27 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
  }
  fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero((uint64_t)&v42);
  float v37 = 0.0;
  float v37 = a2[2];
  float v50 = v42;
  if (v37 != v42) {
    goto LABEL_43;
  }
  float v37 = 0.0;
  float v37 = a2[3];
  float v50 = 0.0;
  float v50 = a2[4];
  float v49 = v43;
  float v48 = v44;
  if (v37 != v43) {
    goto LABEL_43;
  }
  if (v50 == v48
    && (v29 = (const void *)*((void *)a2 + 3),
        size_t v30 = *((void *)a2 + 4) - (void)v29,
        int64x2_t v31 = v45,
        v30 == v46 - (unsigned char *)v45)
    && !memcmp(v29, v45, v30))
  {
    BOOL v34 = 0;
    if (v31)
    {
LABEL_52:
      v46 = v31;
      operator delete(v31);
    }
  }
  else
  {
LABEL_43:
    fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::One((uint64_t)&v37);
    float v50 = 0.0;
    float v50 = a2[2];
    float v49 = v37;
    if (v50 != v37) {
      goto LABEL_48;
    }
    float v50 = 0.0;
    float v50 = a2[3];
    float v49 = 0.0;
    float v49 = a2[4];
    float v48 = v38;
    float v47 = v39;
    if (v50 != v38) {
      goto LABEL_48;
    }
    if (v49 == v47
      && (v32 = (const void *)*((void *)a2 + 3), size_t v33 = *((void *)a2 + 4) - (void)v32, v33 == v41 - (unsigned char *)__p))
    {
      BOOL v34 = memcmp(v32, __p, v33) != 0;
    }
    else
    {
LABEL_48:
      BOOL v34 = 1;
    }
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    int64x2_t v31 = v45;
    if (v45) {
      goto LABEL_52;
    }
  }
  v35 = *(unint64_t **)(a1 + 16);
  unint64_t v36 = *v35;
  if (v34)
  {
    unint64_t v36 = v36 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
    unint64_t *v35 = v36;
  }
  unint64_t *v35 = v36 & v23;
}

void sub_1B22A0730(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::SetArc(void *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4 = a1[7];
  uint64_t v5 = (_DWORD *)(v4 + 56 * a3);
  if (!*v5) {
    --a1[5];
  }
  if (!*(_DWORD *)(v4 + 56 * a3 + 4)) {
    --a1[6];
  }
  if (!*a2) {
    ++a1[5];
  }
  if (!a2[1]) {
    ++a1[6];
  }
  *(void *)uint64_t v5 = *(void *)a2;
  uint64_t v6 = v4 + 56 * a3;
  uint64_t result = fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::operator=(v6 + 8, (uint64_t)(a2 + 2));
  *(_DWORD *)(v6 + 48) = a2[12];
  return result;
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::AddArc(void *a1, int a2, float *a3)
{
  uint64_t v6 = *(void *)(*(void *)(a1[8] + 8 * a2) + 64);
  if (v6 == *(void *)(*(void *)(a1[8] + 8 * a2) + 56)) {
    int v7 = 0;
  }
  else {
    int v7 = (_DWORD *)(v6 - 56);
  }
  unint64_t v8 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
  a1[1] = a1[1] & 4 | fst::AddArcProperties<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>(v8, a2, a3, v7);
  v9 = *(void **)(a1[8] + 8 * a2);
  return fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::AddArc(v9, a3);
}

uint64_t fst::AddArcProperties<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>(unint64_t a1, int a2, float *a3, _DWORD *a4)
{
  float v6 = *a3;
  int v7 = *((_DWORD *)a3 + 1);
  unint64_t v8 = a1 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
  if (*(_DWORD *)a3 == v7) {
    unint64_t v8 = a1;
  }
  unint64_t v9 = v8 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
  if (!v7) {
    unint64_t v9 = v8 & 0xFFFFFFFFFC3FFFFFLL | 0x1400000;
  }
  if (v6 == 0.0) {
    unint64_t v8 = v9;
  }
  if (v7) {
    unint64_t v10 = v8;
  }
  else {
    unint64_t v10 = v8 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
  }
  if (a4)
  {
    if (*a4 <= SLODWORD(v6)) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = v10 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
    }
    if (a4[1] > v7) {
      unint64_t v10 = v11 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
    }
    else {
      unint64_t v10 = v11;
    }
  }
  fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero((uint64_t)&v25);
  float v20 = 0.0;
  float v20 = a3[2];
  float v33 = v25;
  if (v20 != v25) {
    goto LABEL_22;
  }
  float v20 = 0.0;
  float v20 = a3[3];
  float v33 = 0.0;
  float v33 = a3[4];
  float v32 = v26;
  float v31 = v27;
  if (v20 != v26) {
    goto LABEL_22;
  }
  if (v33 == v31
    && (uint64_t v12 = (const void *)*((void *)a3 + 3),
        size_t v13 = *((void *)a3 + 4) - (void)v12,
        float v14 = v28,
        v13 == v29 - (unsigned char *)v28)
    && !memcmp(v12, v28, v13))
  {
    BOOL v17 = 0;
    if (v14)
    {
LABEL_31:
      v29 = v14;
      operator delete(v14);
    }
  }
  else
  {
LABEL_22:
    fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::One((uint64_t)&v20);
    float v33 = 0.0;
    float v33 = a3[2];
    float v32 = v20;
    if (v33 != v20) {
      goto LABEL_27;
    }
    float v33 = 0.0;
    float v33 = a3[3];
    float v32 = 0.0;
    float v32 = a3[4];
    float v31 = v21;
    float v30 = v22;
    if (v33 != v21) {
      goto LABEL_27;
    }
    if (v32 == v30
      && (uint64_t v15 = (const void *)*((void *)a3 + 3), v16 = *((void *)a3 + 4) - (void)v15, v16 == v24 - (unsigned char *)__p))
    {
      BOOL v17 = memcmp(v15, __p, v16) != 0;
    }
    else
    {
LABEL_27:
      BOOL v17 = 1;
    }
    if (__p)
    {
      float v24 = __p;
      operator delete(__p);
    }
    float v14 = v28;
    if (v28) {
      goto LABEL_31;
    }
  }
  unint64_t v18 = v10 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
  if (!v17) {
    unint64_t v18 = v10;
  }
  if (*((_DWORD *)a3 + 12) <= a2) {
    unint64_t v18 = v18 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
  }
  if ((v18 & 0x4000000000) != 0) {
    return v18 & 0x5D7FFEB0007 | 0x2800000000;
  }
  else {
    return v18 & 0x5D7FFEB0007;
  }
}

void sub_1B22A0B10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::SetFinal(void *a1, int a2, uint64_t a3)
{
  float v6 = *(int **)(a1[8] + 8 * a2);
  int v23 = *v6;
  uint64_t v24 = *(void *)(v6 + 1);
  float v26 = 0;
  uint64_t v27 = 0;
  float v25 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v25, *((const void **)v6 + 2), *((void *)v6 + 3), (uint64_t)(*((void *)v6 + 3) - *((void *)v6 + 2)) >> 2);
  int v18 = *(_DWORD *)a3;
  uint64_t v19 = *(void *)(a3 + 4);
  float v21 = 0;
  uint64_t v22 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(a3 + 16), *(void *)(a3 + 24), (uint64_t)(*(void *)(a3 + 24) - *(void *)(a3 + 16)) >> 2);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::SetFinal((uint64_t)a1, a2, &v18);
  if (__p)
  {
    float v21 = __p;
    operator delete(__p);
  }
  unint64_t v7 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
  int v13 = v23;
  uint64_t v14 = v24;
  size_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v15 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v15, v25, (uint64_t)v26, (v26 - (unsigned char *)v25) >> 2);
  int v8 = *(_DWORD *)a3;
  uint64_t v9 = *(void *)(a3 + 4);
  unint64_t v11 = 0;
  uint64_t v12 = 0;
  unint64_t v10 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v10, *(const void **)(a3 + 16), *(void *)(a3 + 24), (uint64_t)(*(void *)(a3 + 24) - *(void *)(a3 + 16)) >> 2);
  a1[1] = a1[1] & 4 | fst::SetFinalProperties<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>(v7, (uint64_t)&v13, (uint64_t)&v8);
  if (v10)
  {
    unint64_t v11 = v10;
    operator delete(v10);
  }
  if (v15)
  {
    size_t v16 = v15;
    operator delete(v15);
  }
  if (v25)
  {
    float v26 = v25;
    operator delete(v25);
  }
}

void sub_1B22A0CC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  uint64_t v24 = *(void **)(v22 - 56);
  if (v24)
  {
    *(void *)(v22 - 48) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::SetFinalProperties<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>(unint64_t a1, uint64_t a2, uint64_t a3)
{
  fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero((uint64_t)&v25);
  float v20 = 0.0;
  float v20 = *(float *)a2;
  float v33 = v25;
  if (v20 == v25)
  {
    float v20 = 0.0;
    float v20 = *(float *)(a2 + 4);
    float v33 = 0.0;
    float v33 = *(float *)(a2 + 8);
    float v32 = v26;
    float v31 = v27;
    if (v20 == v26 && v33 == v31)
    {
      float v6 = *(const void **)(a2 + 16);
      size_t v7 = *(void *)(a2 + 24) - (void)v6;
      int v8 = v28;
      if (v7 == v29 - (unsigned char *)v28 && !memcmp(v6, v28, v7))
      {
        BOOL v11 = 0;
        if (!v8) {
          goto LABEL_16;
        }
        goto LABEL_15;
      }
    }
  }
  fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::One((uint64_t)&v20);
  float v33 = 0.0;
  float v33 = *(float *)a2;
  float v32 = v20;
  if (v33 != v20) {
    goto LABEL_11;
  }
  float v33 = 0.0;
  float v33 = *(float *)(a2 + 4);
  float v32 = 0.0;
  float v32 = *(float *)(a2 + 8);
  float v31 = v21;
  float v30 = v22;
  if (v33 != v21) {
    goto LABEL_11;
  }
  if (v32 == v30
    && (v9 = *(const void **)(a2 + 16), size_t v10 = *(void *)(a2 + 24) - (void)v9, v10 == v24 - (unsigned char *)__p))
  {
    BOOL v11 = memcmp(v9, __p, v10) != 0;
  }
  else
  {
LABEL_11:
    BOOL v11 = 1;
  }
  if (__p)
  {
    uint64_t v24 = __p;
    operator delete(__p);
  }
  int v8 = v28;
  if (v28)
  {
LABEL_15:
    v29 = v8;
    operator delete(v8);
  }
LABEL_16:
  fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero((uint64_t)&v25);
  float v20 = 0.0;
  float v20 = *(float *)a3;
  float v33 = v25;
  if (v20 != v25) {
    goto LABEL_21;
  }
  float v20 = 0.0;
  float v20 = *(float *)(a3 + 4);
  float v33 = 0.0;
  float v33 = *(float *)(a3 + 8);
  float v32 = v26;
  float v31 = v27;
  if (v20 != v26) {
    goto LABEL_21;
  }
  if (v33 == v31
    && (uint64_t v12 = *(const void **)(a3 + 16), v13 = *(void *)(a3 + 24) - (void)v12, v14 = v28, v13 == v29 - (unsigned char *)v28)
    && !memcmp(v12, v28, v13))
  {
    BOOL v17 = 0;
    if (v14)
    {
LABEL_30:
      v29 = v14;
      operator delete(v14);
    }
  }
  else
  {
LABEL_21:
    fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::One((uint64_t)&v20);
    float v33 = 0.0;
    float v33 = *(float *)a3;
    float v32 = v20;
    if (v33 != v20) {
      goto LABEL_26;
    }
    float v33 = 0.0;
    float v33 = *(float *)(a3 + 4);
    float v32 = 0.0;
    float v32 = *(float *)(a3 + 8);
    float v31 = v21;
    float v30 = v22;
    if (v33 != v21) {
      goto LABEL_26;
    }
    if (v32 == v30
      && (uint64_t v15 = *(const void **)(a3 + 16), v16 = *(void *)(a3 + 24) - (void)v15, v16 == v24 - (unsigned char *)__p))
    {
      BOOL v17 = memcmp(v15, __p, v16) != 0;
    }
    else
    {
LABEL_26:
      BOOL v17 = 1;
    }
    if (__p)
    {
      uint64_t v24 = __p;
      operator delete(__p);
    }
    uint64_t v14 = v28;
    if (v28) {
      goto LABEL_30;
    }
  }
  unint64_t v18 = a1 & 0xFFFFFFFEFFFFFFFFLL;
  if (!v11) {
    unint64_t v18 = a1;
  }
  if (v17) {
    unint64_t v18 = v18 & 0x3FCFFFF0007 | 0x100000000;
  }
  return v18 & 0x3FFFFFF0007;
}

void sub_1B22A1098(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::StateMap<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::ArcSortMapper<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (result != -1)
  {
    unint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    uint64_t v6 = (*(uint64_t (**)(void))(*(void *)*a2 + 24))();
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 176))(a1, v6);
    if ((*(int (**)(uint64_t))(*(void *)a1 + 160))(a1) >= 1)
    {
      uint64_t v7 = 0;
      do
      {
        fst::ArcSortMapper<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::SetState(a2, v7);
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 240))(a1, v7);
        for (unint64_t i = a2[5]; ; a2[5] = i)
        {
          uint64_t v9 = a2[2];
          if (i >= 0x6DB6DB6DB6DB6DB7 * ((a2[3] - v9) >> 3)) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)a1 + 208))(a1, v7, v9 + 56 * i);
          unint64_t i = a2[5] + 1;
        }
        (*(void (**)(void **__return_ptr))(*(void *)*a2 + 32))(v10);
        (*(void (**)(uint64_t, uint64_t, void **))(*(void *)a1 + 184))(a1, v7, v10);
        if (__p)
        {
          uint64_t v12 = __p;
          operator delete(__p);
        }
        uint64_t v7 = (v7 + 1);
      }
      while ((int)v7 < (*(int (**)(uint64_t))(*(void *)a1 + 160))(a1));
    }
    return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a1 + 192))(a1, v5 & 0x3FFF0FFF0007 | (((v5 >> 16) & 1) << 30) | 0x10000000, 0x3FFFFFFF0007);
  }
  return result;
}

void sub_1B22A1378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::ArcSortMapper<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::SetState(uint64_t *a1, uint64_t a2)
{
  a1[5] = 0;
  uint64_t v4 = a1 + 2;
  std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__clear[abi:ne180100](a1 + 2);
  unint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)*a1 + 40))(*a1, a2);
  std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::reserve(v4, v5);
  uint64_t v6 = *a1;
  unint64_t v16 = 0;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v6 + 136))(v6, a2, v14);
  while (1)
  {
    if (!v14[0])
    {
      if (v16 >= v14[2]) {
        goto LABEL_16;
      }
      goto LABEL_7;
    }
    if ((*(unsigned int (**)(void))(*(void *)v14[0] + 24))(v14[0])) {
      break;
    }
    if (v14[0])
    {
      uint64_t v7 = (*(uint64_t (**)(void))(*(void *)v14[0] + 32))();
      goto LABEL_8;
    }
LABEL_7:
    uint64_t v7 = v14[1] + 56 * v16;
LABEL_8:
    unint64_t v8 = a1[3];
    if (v8 >= a1[4])
    {
      uint64_t v9 = std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::__push_back_slow_path<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int> const&>(v4, v7);
    }
    else
    {
      std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::construct[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int> const&>((uint64_t)(a1 + 4), a1[3], v7);
      uint64_t v9 = v8 + 56;
      a1[3] = v8 + 56;
    }
    a1[3] = v9;
    if (v14[0]) {
      (*(void (**)(void))(*(void *)v14[0] + 40))(v14[0]);
    }
    else {
      ++v16;
    }
  }
  if (v14[0])
  {
    (*(void (**)(void))(*(void *)v14[0] + 8))();
    goto LABEL_18;
  }
LABEL_16:
  if (v15) {
    --*v15;
  }
LABEL_18:
  unint64_t v10 = a1[2];
  BOOL v11 = (uint64_t *)a1[3];
  unint64_t v12 = 126 - 2 * __clz(0x6DB6DB6DB6DB6DB7 * ((uint64_t)((uint64_t)v11 - v10) >> 3));
  if (v11 == (uint64_t *)v10) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = v12;
  }
  std::__introsort<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*,false>(v10, v11, (uint64_t)v14, v13, 1);
}

void sub_1B22A15CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  *(void *)(v2 + ++*(void *)(result + 24) = v3;
  fst::ArcSortMapper<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::SetState((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*,false>(unint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
void sub_1B22A1A38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  uint64_t v27 = *(void **)(v25 - 120);
  if (v27)
  {
    *(void *)(v25 - 112) = v27;
    operator delete(v27);
  }
  _Unwind_Resume(exception_object);
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>(void *a1, void *a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = a1 + 7;
    if (a1 + 7 != a2)
    {
      uint64_t v4 = 0;
      char v5 = a1;
      do
      {
        char v6 = v3;
        uint64_t v39 = v5[7];
        int v40 = *((_DWORD *)v5 + 16);
        uint64_t v41 = *(void *)((char *)v5 + 68);
        uint64_t v43 = 0;
        uint64_t v44 = 0;
        int v42 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v42, (const void *)v5[10], v5[11], (uint64_t)(v5[11] - v5[10]) >> 2);
        int v45 = *((_DWORD *)v5 + 26);
        uint64_t v32 = *v5;
        int v33 = *((_DWORD *)v5 + 2);
        uint64_t v34 = *(void *)((char *)v5 + 12);
        uint64_t v36 = 0;
        uint64_t v37 = 0;
        __p = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, (const void *)v5[3], v5[4], (uint64_t)(v5[4] - v5[3]) >> 2);
        int v38 = *((_DWORD *)v5 + 12);
        int v7 = v39;
        int v8 = v32;
        if (__p)
        {
          uint64_t v36 = __p;
          operator delete(__p);
        }
        if (v42)
        {
          uint64_t v43 = v42;
          operator delete(v42);
        }
        if (v7 < v8)
        {
          uint64_t v25 = *v6;
          int v26 = *((_DWORD *)v5 + 16);
          uint64_t v27 = *(void *)((char *)v5 + 68);
          int v29 = 0;
          uint64_t v30 = 0;
          int v28 = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v28, (const void *)v5[10], v5[11], (uint64_t)(v5[11] - v5[10]) >> 2);
          int v31 = *((_DWORD *)v5 + 26);
          for (uint64_t i = v4; ; i -= 56)
          {
            *(void *)((char *)a1 + i + 56) = *(void *)((char *)a1 + i);
            fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::operator=((uint64_t)a1 + i + 64, (uint64_t)a1 + i + 8);
            *(_DWORD *)((char *)a1 + i + 104) = *(_DWORD *)((char *)a1 + i + 48);
            if (!i)
            {
              unint64_t v11 = a1;
              goto LABEL_19;
            }
            uint64_t v18 = v25;
            int v19 = v26;
            uint64_t v20 = v27;
            int v22 = 0;
            uint64_t v23 = 0;
            uint64_t v21 = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v21, v28, (uint64_t)v29, (v29 - (unsigned char *)v28) >> 2);
            int v24 = v31;
            uint64_t v13 = *(void *)((char *)a1 + i - 56);
            unint64_t v15 = 0;
            uint64_t v16 = 0;
            uint64_t v14 = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v14, *(const void **)((char *)a1 + i - 32), *(void *)((char *)a1 + i - 24), (uint64_t)(*(void *)((char *)a1 + i - 24) - *(void *)((char *)a1 + i - 32)) >> 2);
            int v17 = *(_DWORD *)((char *)a1 + i - 8);
            int v10 = v18;
            if (v14)
            {
              unint64_t v15 = v14;
              operator delete(v14);
            }
            if (v21)
            {
              int v22 = v21;
              operator delete(v21);
            }
            if (v10 >= (int)v13) {
              break;
            }
          }
          unint64_t v11 = (void *)((char *)a1 + i);
LABEL_19:
          *unint64_t v11 = v25;
          *(_DWORD *)((char *)a1 + i + 8) = v26;
          *(uint64_t *)((char *)v11 + 12) = v27;
          if (v11 != &v25) {
            std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v11 + 24, (char *)v28, (uint64_t)v29, (v29 - (unsigned char *)v28) >> 2);
          }
          *((_DWORD *)v11 + 12) = v31;
          if (v28)
          {
            int v29 = v28;
            operator delete(v28);
          }
        }
        uint64_t v3 = v6 + 7;
        v4 += 56;
        char v5 = v6;
      }
      while (v6 + 7 != a2);
    }
  }
}

void sub_1B22A1D58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>(uint64_t a1, void *a2)
{
  if ((void *)a1 != a2)
  {
    uint64_t v2 = (void *)a1;
    uint64_t v3 = (void *)(a1 + 56);
    if ((void *)(a1 + 56) != a2)
    {
      uint64_t v4 = (_DWORD *)(a1 + 104);
      do
      {
        char v5 = v3;
        uint64_t v40 = v2[7];
        int v41 = *((_DWORD *)v2 + 16);
        uint64_t v42 = *(void *)((char *)v2 + 68);
        uint64_t v44 = 0;
        uint64_t v45 = 0;
        uint64_t v43 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v43, (const void *)v2[10], v2[11], (uint64_t)(v2[11] - v2[10]) >> 2);
        int v46 = *((_DWORD *)v2 + 26);
        uint64_t v33 = *v2;
        int v34 = *((_DWORD *)v2 + 2);
        uint64_t v35 = *(void *)((char *)v2 + 12);
        uint64_t v37 = 0;
        uint64_t v38 = 0;
        __p = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, (const void *)v2[3], v2[4], (uint64_t)(v2[4] - v2[3]) >> 2);
        int v39 = *((_DWORD *)v2 + 12);
        int v6 = v40;
        int v7 = v33;
        if (__p)
        {
          uint64_t v37 = __p;
          operator delete(__p);
        }
        if (v43)
        {
          uint64_t v44 = v43;
          operator delete(v43);
        }
        if (v6 < v7)
        {
          uint64_t v26 = *v5;
          int v27 = *((_DWORD *)v2 + 16);
          uint64_t v28 = *(void *)((char *)v2 + 68);
          uint64_t v30 = 0;
          uint64_t v31 = 0;
          int v29 = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v29, (const void *)v2[10], v2[11], (uint64_t)(v2[11] - v2[10]) >> 2);
          int v32 = *((_DWORD *)v2 + 26);
          int v8 = v4;
          do
          {
            *((void *)v8 - 6) = *((void *)v8 - 13);
            fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::operator=((uint64_t)(v8 - 10), (uint64_t)(v8 - 24));
            *int v8 = *(v8 - 14);
            uint64_t v19 = v26;
            int v20 = v27;
            uint64_t v21 = v28;
            uint64_t v23 = 0;
            uint64_t v24 = 0;
            int v22 = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v22, v29, (uint64_t)v30, (v30 - (unsigned char *)v29) >> 2);
            int v25 = v32;
            uint64_t v14 = *((void *)v8 - 20);
            uint64_t v16 = 0;
            uint64_t v17 = 0;
            uint64_t v9 = (const void *)*((void *)v8 - 17);
            uint64_t v10 = *((void *)v8 - 16);
            unint64_t v15 = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v15, v9, v10, (v10 - (uint64_t)v9) >> 2);
            int v18 = *(v8 - 28);
            int v11 = v19;
            if (v15)
            {
              uint64_t v16 = v15;
              operator delete(v15);
            }
            if (v22)
            {
              uint64_t v23 = v22;
              operator delete(v22);
            }
            v8 -= 14;
          }
          while (v11 < (int)v14);
          *((void *)v8 - 6) = v26;
          uint64_t v12 = v8 - 12;
          v12[2] = v27;
          *(void *)(v12 + 3) = v28;
          if (v8 - 12 != (_DWORD *)&v26) {
            std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v8 - 24, (char *)v29, (uint64_t)v30, (v30 - (unsigned char *)v29) >> 2);
          }
          *int v8 = v32;
          if (v29)
          {
            uint64_t v30 = v29;
            operator delete(v29);
          }
        }
        uint64_t v3 = v5 + 7;
        v4 += 14;
        uint64_t v2 = v5;
      }
      while (v5 + 7 != a2);
    }
  }
}

void sub_1B22A2058(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v85 = *(void *)a2;
  int v86 = *(_DWORD *)(a2 + 8);
  uint64_t v87 = *(void *)(a2 + 12);
  v89 = 0;
  uint64_t v90 = 0;
  v88 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v88, *(const void **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 2);
  int v91 = *(_DWORD *)(a2 + 48);
  uint64_t v78 = *(void *)a1;
  int v79 = *(_DWORD *)(a1 + 8);
  uint64_t v80 = *(void *)(a1 + 12);
  v82 = 0;
  uint64_t v83 = 0;
  int v6 = *(const void **)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 32);
  v81 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v81, v6, v7, (v7 - (uint64_t)v6) >> 2);
  int v84 = *(_DWORD *)(a1 + 48);
  int v8 = v85;
  if (v81)
  {
    v82 = v81;
    operator delete(v81);
  }
  if (v88)
  {
    v89 = v88;
    operator delete(v88);
  }
  if (v8 < (int)v78)
  {
    uint64_t v43 = *(void *)a3;
    int v44 = *(_DWORD *)(a3 + 8);
    uint64_t v45 = *(void *)(a3 + 12);
    float v47 = 0;
    uint64_t v48 = 0;
    int v46 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v46, *(const void **)(a3 + 24), *(void *)(a3 + 32), (uint64_t)(*(void *)(a3 + 32) - *(void *)(a3 + 24)) >> 2);
    int v49 = *(_DWORD *)(a3 + 48);
    uint64_t v36 = *(void *)a2;
    int v37 = *(_DWORD *)(a2 + 8);
    uint64_t v38 = *(void *)(a2 + 12);
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    uint64_t v9 = *(const void **)(a2 + 24);
    uint64_t v10 = *(void *)(a2 + 32);
    __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v9, v10, (v10 - (uint64_t)v9) >> 2);
    int v42 = *(_DWORD *)(a2 + 48);
    int v11 = v43;
    if (__p)
    {
      uint64_t v40 = __p;
      operator delete(__p);
    }
    if (v46)
    {
      float v47 = v46;
      operator delete(v46);
    }
    if (v11 < (int)v36)
    {
      std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>((uint64_t *)a1, (uint64_t *)a3);
      return 1;
    }
    std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>((uint64_t *)a1, (uint64_t *)a2);
    uint64_t v29 = *(void *)a3;
    int v30 = *(_DWORD *)(a3 + 8);
    uint64_t v31 = *(void *)(a3 + 12);
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    int v32 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v32, *(const void **)(a3 + 24), *(void *)(a3 + 32), (uint64_t)(*(void *)(a3 + 32) - *(void *)(a3 + 24)) >> 2);
    int v35 = *(_DWORD *)(a3 + 48);
    uint64_t v24 = *(void *)a2;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    int v20 = *(const void **)(a2 + 24);
    uint64_t v21 = *(void *)(a2 + 32);
    int v25 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v25, v20, v21, (v21 - (uint64_t)v20) >> 2);
    int v28 = *(_DWORD *)(a2 + 48);
    int v22 = v29;
    if (v25)
    {
      uint64_t v26 = v25;
      operator delete(v25);
    }
    if (v32)
    {
      uint64_t v33 = v32;
      operator delete(v32);
    }
    if (v22 >= (int)v24) {
      return 1;
    }
    int v18 = (uint64_t *)a2;
    uint64_t v19 = (uint64_t *)a3;
LABEL_29:
    std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>(v18, v19);
    return 2;
  }
  uint64_t v71 = *(void *)a3;
  int v72 = *(_DWORD *)(a3 + 8);
  uint64_t v73 = *(void *)(a3 + 12);
  v75 = 0;
  uint64_t v76 = 0;
  v74 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v74, *(const void **)(a3 + 24), *(void *)(a3 + 32), (uint64_t)(*(void *)(a3 + 32) - *(void *)(a3 + 24)) >> 2);
  int v77 = *(_DWORD *)(a3 + 48);
  uint64_t v64 = *(void *)a2;
  int v65 = *(_DWORD *)(a2 + 8);
  uint64_t v66 = *(void *)(a2 + 12);
  v68 = 0;
  uint64_t v69 = 0;
  uint64_t v12 = *(const void **)(a2 + 24);
  uint64_t v13 = *(void *)(a2 + 32);
  v67 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v67, v12, v13, (v13 - (uint64_t)v12) >> 2);
  int v70 = *(_DWORD *)(a2 + 48);
  int v14 = v71;
  if (v67)
  {
    v68 = v67;
    operator delete(v67);
  }
  if (v74)
  {
    v75 = v74;
    operator delete(v74);
  }
  if (v14 < (int)v64)
  {
    std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>((uint64_t *)a2, (uint64_t *)a3);
    uint64_t v57 = *(void *)a2;
    int v58 = *(_DWORD *)(a2 + 8);
    uint64_t v59 = *(void *)(a2 + 12);
    v61 = 0;
    uint64_t v62 = 0;
    v60 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v60, *(const void **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 2);
    int v63 = *(_DWORD *)(a2 + 48);
    uint64_t v50 = *(void *)a1;
    int v51 = *(_DWORD *)(a1 + 8);
    uint64_t v52 = *(void *)(a1 + 12);
    v54 = 0;
    uint64_t v55 = 0;
    unint64_t v15 = *(const void **)(a1 + 24);
    uint64_t v16 = *(void *)(a1 + 32);
    v53 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v53, v15, v16, (v16 - (uint64_t)v15) >> 2);
    int v56 = *(_DWORD *)(a1 + 48);
    int v17 = v57;
    if (v53)
    {
      v54 = v53;
      operator delete(v53);
    }
    if (v60)
    {
      v61 = v60;
      operator delete(v60);
    }
    if (v17 >= (int)v50) {
      return 1;
    }
    int v18 = (uint64_t *)a1;
    uint64_t v19 = (uint64_t *)a2;
    goto LABEL_29;
  }
  return 0;
}

void sub_1B22A24B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int> *,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &>(unint64_t a1, uint64_t *a2)
{
  unint64_t v3 = a1;
  uint64_t v105 = *(void *)a1;
  uint64_t v4 = a1 + 8;
  int v106 = *(_DWORD *)(a1 + 8);
  uint64_t v107 = *(void *)(a1 + 12);
  v109 = 0;
  uint64_t v110 = 0;
  v108 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v108, *(const void **)(v3 + 24), *(void *)(v3 + 32), (uint64_t)(*(void *)(v3 + 32) - *(void *)(v3 + 24)) >> 2);
  int v111 = *(_DWORD *)(v3 + 48);
  uint64_t v98 = v105;
  int v99 = v106;
  uint64_t v100 = v107;
  v102 = 0;
  uint64_t v103 = 0;
  v101 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v101, v108, (uint64_t)v109, (v109 - (unsigned char *)v108) >> 2);
  uint64_t v21 = v4;
  int v104 = v111;
  uint64_t v91 = *(a2 - 7);
  int v92 = *((_DWORD *)a2 - 12);
  uint64_t v93 = *(uint64_t *)((char *)a2 - 44);
  v95 = 0;
  uint64_t v96 = 0;
  char v5 = (const void *)*(a2 - 4);
  uint64_t v6 = *(a2 - 3);
  v94 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v94, v5, v6, (v6 - (uint64_t)v5) >> 2);
  int v97 = *((_DWORD *)a2 - 2);
  int v7 = v98;
  if (v94)
  {
    v95 = v94;
    operator delete(v94);
  }
  if (v101)
  {
    v102 = v101;
    operator delete(v101);
  }
  unint64_t v22 = v3;
  if (v7 >= (int)v91)
  {
    for (v3 += 56; v3 < (unint64_t)a2; v3 += 56)
    {
      uint64_t v70 = v105;
      int v71 = v106;
      uint64_t v72 = v107;
      v74 = 0;
      uint64_t v75 = 0;
      uint64_t v73 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v73, v108, (uint64_t)v109, (v109 - (unsigned char *)v108) >> 2);
      int v76 = v111;
      uint64_t v63 = *(void *)v3;
      int v64 = *(_DWORD *)(v3 + 8);
      uint64_t v65 = *(void *)(v3 + 12);
      v67 = 0;
      uint64_t v68 = 0;
      int v11 = *(const void **)(v3 + 24);
      uint64_t v12 = *(void *)(v3 + 32);
      uint64_t v66 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v66, v11, v12, (v12 - (uint64_t)v11) >> 2);
      int v69 = *(_DWORD *)(v3 + 48);
      int v13 = v70;
      if (v66)
      {
        v67 = v66;
        operator delete(v66);
      }
      if (v73)
      {
        v74 = v73;
        operator delete(v73);
      }
      if (v13 < (int)v63) {
        break;
      }
    }
  }
  else
  {
    do
    {
      uint64_t v84 = v105;
      int v85 = v106;
      uint64_t v86 = v107;
      v88 = 0;
      uint64_t v89 = 0;
      uint64_t v87 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v87, v108, (uint64_t)v109, (v109 - (unsigned char *)v108) >> 2);
      int v90 = v111;
      uint64_t v77 = *(void *)(v3 + 56);
      int v78 = *(_DWORD *)(v3 + 64);
      uint64_t v79 = *(void *)(v3 + 68);
      v81 = 0;
      uint64_t v82 = 0;
      int v8 = *(const void **)(v3 + 80);
      uint64_t v9 = *(void *)(v3 + 88);
      __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v8, v9, (v9 - (uint64_t)v8) >> 2);
      int v83 = *(_DWORD *)(v3 + 104);
      int v10 = v84;
      if (__p)
      {
        v81 = __p;
        operator delete(__p);
      }
      if (v87)
      {
        v88 = v87;
        operator delete(v87);
      }
      v3 += 56;
    }
    while (v10 >= (int)v77);
  }
  if (v3 < (unint64_t)a2)
  {
    do
    {
      uint64_t v56 = v105;
      int v57 = v106;
      uint64_t v58 = v107;
      v60 = 0;
      uint64_t v61 = 0;
      uint64_t v59 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v59, v108, (uint64_t)v109, (v109 - (unsigned char *)v108) >> 2);
      int v62 = v111;
      uint64_t v49 = *(a2 - 7);
      int v50 = *((_DWORD *)a2 - 12);
      uint64_t v51 = *(uint64_t *)((char *)a2 - 44);
      v53 = 0;
      uint64_t v54 = 0;
      int v14 = (const void *)*(a2 - 4);
      uint64_t v15 = *(a2 - 3);
      uint64_t v52 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v52, v14, v15, (v15 - (uint64_t)v14) >> 2);
      int v55 = *((_DWORD *)a2 - 2);
      int v16 = v56;
      if (v52)
      {
        v53 = v52;
        operator delete(v52);
      }
      if (v59)
      {
        v60 = v59;
        operator delete(v59);
      }
      a2 -= 7;
    }
    while (v16 < (int)v49);
  }
  while (v3 < (unint64_t)a2)
  {
    std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>((uint64_t *)v3, a2);
    do
    {
      uint64_t v42 = v105;
      int v43 = v106;
      uint64_t v44 = v107;
      int v46 = 0;
      uint64_t v47 = 0;
      uint64_t v45 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v45, v108, (uint64_t)v109, (v109 - (unsigned char *)v108) >> 2);
      int v48 = v111;
      uint64_t v35 = *(void *)(v3 + 56);
      int v36 = *(_DWORD *)(v3 + 64);
      uint64_t v37 = *(void *)(v3 + 68);
      int v39 = 0;
      uint64_t v40 = 0;
      uint64_t v38 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v38, *(const void **)(v3 + 80), *(void *)(v3 + 88), (uint64_t)(*(void *)(v3 + 88) - *(void *)(v3 + 80)) >> 2);
      int v41 = *(_DWORD *)(v3 + 104);
      int v17 = v42;
      int v18 = v35;
      if (v38)
      {
        int v39 = v38;
        operator delete(v38);
      }
      if (v45)
      {
        int v46 = v45;
        operator delete(v45);
      }
      v3 += 56;
    }
    while (v17 >= v18);
    do
    {
      uint64_t v28 = v105;
      int v29 = v106;
      uint64_t v30 = v107;
      int v32 = 0;
      uint64_t v33 = 0;
      uint64_t v31 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v31, v108, (uint64_t)v109, (v109 - (unsigned char *)v108) >> 2);
      int v34 = v111;
      uint64_t v23 = *(a2 - 7);
      int v25 = 0;
      uint64_t v26 = 0;
      uint64_t v24 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v24, (const void *)*(a2 - 4), *(a2 - 3), (*(a2 - 3) - *(a2 - 4)) >> 2);
      int v27 = *((_DWORD *)a2 - 2);
      int v19 = v28;
      if (v24)
      {
        int v25 = v24;
        operator delete(v24);
      }
      if (v31)
      {
        int v32 = v31;
        operator delete(v31);
      }
      a2 -= 7;
    }
    while (v19 < (int)v23);
  }
  if (v3 - 56 != v22)
  {
    *(void *)unint64_t v22 = *(void *)(v3 - 56);
    fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::operator=(v21, v3 - 48);
    *(_DWORD *)(v22 + 48) = *(_DWORD *)(v3 - 8);
  }
  *(void *)(v3 - 56) = v105;
  *(_DWORD *)(v3 - 48) = v106;
  *(void *)(v3 - 44) = v107;
  if ((int *)(v3 - 48) != &v106) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v3 - 32), (char *)v108, (uint64_t)v109, (v109 - (unsigned char *)v108) >> 2);
  }
  *(_DWORD *)(v3 - 8) = v111;
  if (v108)
  {
    v109 = v108;
    operator delete(v108);
  }
  return v3;
}

void sub_1B22A2AE0(_Unwind_Exception *a1)
{
  unint64_t v3 = *(void **)(v1 - 176);
  if (v3)
  {
    *(void *)(v1 - 168) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(v1 - 120);
  if (v4)
  {
    *(void *)(v1 - 112) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int> *,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v91 = *a1;
  uint64_t v21 = (uint64_t)(a1 + 1);
  int v92 = *((_DWORD *)a1 + 2);
  uint64_t v93 = *(uint64_t *)((char *)a1 + 12);
  v95 = 0;
  uint64_t v96 = 0;
  v94 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v94, (const void *)a1[3], a1[4], (a1[4] - a1[3]) >> 2);
  uint64_t v4 = 0;
  unint64_t v22 = a1;
  int v97 = *((_DWORD *)a1 + 12);
  do
  {
    uint64_t v84 = v22[v4 + 7];
    int v85 = v22[v4 + 8];
    uint64_t v86 = *(uint64_t *)((char *)&v22[v4 + 8] + 4);
    v88 = 0;
    uint64_t v89 = 0;
    uint64_t v87 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v87, (const void *)v22[v4 + 10], v22[v4 + 11], (v22[v4 + 11] - v22[v4 + 10]) >> 2);
    int v90 = v22[v4 + 13];
    uint64_t v77 = v91;
    int v78 = v92;
    uint64_t v79 = v93;
    v81 = 0;
    uint64_t v82 = 0;
    uint64_t v80 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v80, v94, (uint64_t)v95, (v95 - (unsigned char *)v94) >> 2);
    int v83 = v97;
    int v5 = v84;
    if (v80)
    {
      v81 = v80;
      operator delete(v80);
    }
    if (v87)
    {
      v88 = v87;
      operator delete(v87);
    }
    v4 += 7;
  }
  while (v5 < (int)v77);
  unint64_t v6 = (unint64_t)&v22[v4];
  if (v4 == 7)
  {
    if (v6 >= (unint64_t)a2)
    {
      uint64_t i = a2;
    }
    else
    {
      for (uint64_t i = a2 - 7; ; i -= 7)
      {
        uint64_t v70 = *i;
        int v71 = *((_DWORD *)i + 2);
        uint64_t v72 = *(uint64_t *)((char *)i + 12);
        v74 = 0;
        uint64_t v75 = 0;
        uint64_t v73 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v73, (const void *)i[3], i[4], (i[4] - i[3]) >> 2);
        int v76 = *((_DWORD *)i + 12);
        uint64_t v63 = v91;
        int v64 = v92;
        uint64_t v65 = v93;
        v67 = 0;
        uint64_t v68 = 0;
        uint64_t v66 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v66, v94, (uint64_t)v95, (v95 - (unsigned char *)v94) >> 2);
        int v69 = v97;
        int v10 = v70;
        if (v66)
        {
          v67 = v66;
          operator delete(v66);
        }
        if (v73)
        {
          v74 = v73;
          operator delete(v73);
        }
        if (v10 < (int)v63 || v6 >= (unint64_t)i) {
          break;
        }
      }
    }
  }
  else
  {
    uint64_t i = a2;
    do
    {
      uint64_t v8 = *(i - 7);
      i -= 7;
      uint64_t v56 = v8;
      int v57 = *((_DWORD *)i + 2);
      uint64_t v58 = *(uint64_t *)((char *)i + 12);
      v60 = 0;
      uint64_t v61 = 0;
      uint64_t v59 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v59, (const void *)i[3], i[4], (i[4] - i[3]) >> 2);
      int v62 = *((_DWORD *)a2 - 2);
      uint64_t v49 = v91;
      int v50 = v92;
      uint64_t v51 = v93;
      v53 = 0;
      uint64_t v54 = 0;
      __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v94, (uint64_t)v95, (v95 - (unsigned char *)v94) >> 2);
      int v55 = v97;
      int v9 = v56;
      if (__p)
      {
        v53 = __p;
        operator delete(__p);
      }
      if (v59)
      {
        v60 = v59;
        operator delete(v59);
      }
      a2 = i;
    }
    while (v9 >= (int)v49);
  }
  if (v6 >= (unint64_t)i)
  {
    unint64_t v11 = (unint64_t)&v22[v4];
  }
  else
  {
    unint64_t v11 = (unint64_t)&v22[v4];
    unint64_t v12 = (unint64_t)i;
    do
    {
      std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>((uint64_t *)v11, (uint64_t *)v12);
      unint64_t v13 = v11;
      do
      {
        uint64_t v14 = *(void *)(v11 + 56);
        v11 += 56;
        uint64_t v42 = v14;
        int v43 = *(_DWORD *)(v11 + 8);
        uint64_t v44 = *(void *)(v11 + 12);
        int v46 = 0;
        uint64_t v47 = 0;
        uint64_t v45 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v45, *(const void **)(v11 + 24), *(void *)(v11 + 32), (uint64_t)(*(void *)(v11 + 32) - *(void *)(v11 + 24)) >> 2);
        int v48 = *(_DWORD *)(v13 + 104);
        uint64_t v35 = v91;
        int v36 = v92;
        uint64_t v37 = v93;
        int v39 = 0;
        uint64_t v40 = 0;
        uint64_t v38 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v38, v94, (uint64_t)v95, (v95 - (unsigned char *)v94) >> 2);
        int v41 = v97;
        int v15 = v42;
        int v16 = v35;
        if (v38)
        {
          int v39 = v38;
          operator delete(v38);
        }
        if (v45)
        {
          int v46 = v45;
          operator delete(v45);
        }
        unint64_t v13 = v11;
      }
      while (v15 < v16);
      unint64_t v17 = v12;
      do
      {
        uint64_t v18 = *(void *)(v12 - 56);
        v12 -= 56;
        uint64_t v28 = v18;
        int v29 = *(_DWORD *)(v12 + 8);
        uint64_t v30 = *(void *)(v12 + 12);
        int v32 = 0;
        uint64_t v33 = 0;
        uint64_t v31 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v31, *(const void **)(v12 + 24), *(void *)(v12 + 32), (uint64_t)(*(void *)(v12 + 32) - *(void *)(v12 + 24)) >> 2);
        int v34 = *(_DWORD *)(v17 - 8);
        int v23 = v91;
        int v25 = 0;
        uint64_t v26 = 0;
        uint64_t v24 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v24, v94, (uint64_t)v95, (v95 - (unsigned char *)v94) >> 2);
        int v27 = v97;
        int v19 = v28;
        if (v24)
        {
          int v25 = v24;
          operator delete(v24);
        }
        if (v31)
        {
          int v32 = v31;
          operator delete(v31);
        }
        unint64_t v17 = v12;
      }
      while (v19 >= v23);
    }
    while (v11 < v12);
  }
  if ((uint64_t *)(v11 - 56) != v22)
  {
    uint64_t *v22 = *(void *)(v11 - 56);
    fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::operator=(v21, v11 - 48);
    *((_DWORD *)v22 + 12) = *(_DWORD *)(v11 - 8);
  }
  *(void *)(v11 - 56) = v91;
  *(_DWORD *)(v11 - 48) = v92;
  *(void *)(v11 - 44) = v93;
  if ((int *)(v11 - 48) != &v92) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v11 - 32), (char *)v94, (uint64_t)v95, (v95 - (unsigned char *)v94) >> 2);
  }
  *(_DWORD *)(v11 - 8) = v97;
  if (v94)
  {
    v95 = v94;
    operator delete(v94);
  }
  return v11 - 56;
}

void sub_1B22A30FC(_Unwind_Exception *a1)
{
  unint64_t v3 = *(void **)(v1 - 120);
  if (v3)
  {
    *(void *)(v1 - 112) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(a1);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0x6DB6DB6DB6DB6DB7 * v3)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v58 = *(void *)(a2 - 56);
      int v59 = *(_DWORD *)(a2 - 48);
      uint64_t v60 = *(void *)(a2 - 44);
      int v62 = 0;
      uint64_t v63 = 0;
      uint64_t v61 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v61, *(const void **)(a2 - 32), *(void *)(a2 - 24), (uint64_t)(*(void *)(a2 - 24) - *(void *)(a2 - 32)) >> 2);
      int v64 = *(_DWORD *)(a2 - 8);
      uint64_t v51 = *(void *)a1;
      int v52 = *(_DWORD *)(a1 + 8);
      uint64_t v53 = *(void *)(a1 + 12);
      int v55 = 0;
      uint64_t v56 = 0;
      int v5 = *(const void **)(a1 + 24);
      uint64_t v6 = *(void *)(a1 + 32);
      uint64_t v54 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v54, v5, v6, (v6 - (uint64_t)v5) >> 2);
      int v57 = *(_DWORD *)(a1 + 48);
      int v7 = v58;
      if (v54)
      {
        int v55 = v54;
        operator delete(v54);
      }
      if (v61)
      {
        int v62 = v61;
        operator delete(v61);
      }
      if (v7 < (int)v51) {
        std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>((uint64_t *)a1, (uint64_t *)(a2 - 56));
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>(a1, a1 + 56, a2 - 56);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>(a1, a1 + 56, a1 + 112, a2 - 56);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>(a1, a1 + 56, a1 + 112, a1 + 168, a2 - 56);
      return 1;
    default:
      uint64_t v8 = a1 + 112;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>(a1, a1 + 56, a1 + 112);
      uint64_t v9 = a1 + 168;
      if (a1 + 168 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v16 = 0;
      break;
  }
  while (1)
  {
    uint64_t v44 = *(void *)v9;
    int v45 = *(_DWORD *)(v9 + 8);
    uint64_t v46 = *(void *)(v9 + 12);
    int v48 = 0;
    uint64_t v49 = 0;
    uint64_t v47 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v47, *(const void **)(v9 + 24), *(void *)(v9 + 32), (uint64_t)(*(void *)(v9 + 32) - *(void *)(v9 + 24)) >> 2);
    int v50 = *(_DWORD *)(v9 + 48);
    uint64_t v37 = *(void *)v8;
    int v38 = *(_DWORD *)(v8 + 8);
    uint64_t v39 = *(void *)(v8 + 12);
    int v41 = 0;
    uint64_t v42 = 0;
    __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(v8 + 24), *(void *)(v8 + 32), (uint64_t)(*(void *)(v8 + 32) - *(void *)(v8 + 24)) >> 2);
    int v43 = *(_DWORD *)(v8 + 48);
    int v11 = v44;
    int v12 = v37;
    if (__p)
    {
      int v41 = __p;
      operator delete(__p);
    }
    if (v47)
    {
      int v48 = v47;
      operator delete(v47);
    }
    if (v11 < v12)
    {
      uint64_t v30 = *(void *)v9;
      int v31 = *(_DWORD *)(v9 + 8);
      uint64_t v32 = *(void *)(v9 + 12);
      int v34 = 0;
      uint64_t v35 = 0;
      uint64_t v33 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v33, *(const void **)(v9 + 24), *(void *)(v9 + 32), (uint64_t)(*(void *)(v9 + 32) - *(void *)(v9 + 24)) >> 2);
      int v36 = *(_DWORD *)(v9 + 48);
      for (uint64_t i = v10; ; i -= 56)
      {
        *(void *)(a1 + i + 168) = *(void *)(a1 + i + 112);
        fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::operator=(a1 + i + 176, a1 + i + 120);
        *(_DWORD *)(a1 + i + 216) = *(_DWORD *)(a1 + i + 160);
        if (i == -112)
        {
          uint64_t v15 = a1;
          goto LABEL_26;
        }
        uint64_t v23 = v30;
        int v24 = v31;
        uint64_t v25 = v32;
        int v27 = 0;
        uint64_t v28 = 0;
        uint64_t v26 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v26, v33, (uint64_t)v34, (v34 - (unsigned char *)v33) >> 2);
        int v29 = v36;
        uint64_t v18 = *(void *)(a1 + i + 56);
        int v20 = 0;
        uint64_t v21 = 0;
        int v19 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v19, *(const void **)(a1 + i + 80), *(void *)(a1 + i + 88), (uint64_t)(*(void *)(a1 + i + 88) - *(void *)(a1 + i + 80)) >> 2);
        int v22 = *(_DWORD *)(a1 + i + 104);
        int v14 = v23;
        if (v19)
        {
          int v20 = v19;
          operator delete(v19);
        }
        if (v26)
        {
          int v27 = v26;
          operator delete(v26);
        }
        if (v14 >= (int)v18) {
          break;
        }
      }
      uint64_t v15 = a1 + i + 112;
LABEL_26:
      *(void *)uint64_t v15 = v30;
      *(_DWORD *)(a1 + i + 120) = v31;
      *(void *)(v15 + 12) = v32;
      if ((uint64_t *)v15 != &v30) {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v15 + 24), (char *)v33, (uint64_t)v34, (v34 - (unsigned char *)v33) >> 2);
      }
      *(_DWORD *)(v15 + 48) = v36;
      if (v33)
      {
        int v34 = v33;
        operator delete(v33);
      }
      if (++v16 == 8) {
        return v9 + 56 == a2;
      }
    }
    uint64_t v8 = v9;
    v10 += 56;
    v9 += 56;
    if (v9 == a2) {
      return 1;
    }
  }
}

void sub_1B22A3628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  uint64_t v47 = *(void **)(v45 - 120);
  if (v47)
  {
    *(void *)(v45 - 112) = v47;
    operator delete(v47);
  }
  _Unwind_Resume(exception_object);
}

void std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = (uint64_t)(a1 + 1);
  int v6 = *((_DWORD *)a1 + 2);
  uint64_t v7 = *(uint64_t *)((char *)a1 + 12);
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, (const void *)a1[3], a1[4], (a1[4] - a1[3]) >> 2);
  int v11 = *((_DWORD *)a1 + 12);
  *a1 = *a2;
  fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::operator=(v4, (uint64_t)(a2 + 1));
  *((_DWORD *)a1 + 12) = *((_DWORD *)a2 + 12);
  *a2 = v5;
  *((_DWORD *)a2 + 2) = v6;
  *(uint64_t *)((char *)a2 + 12) = v7;
  if (&v5 != a2) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)a2 + 24, (char *)__p, (uint64_t)v9, (v9 - (unsigned char *)__p) >> 2);
  }
  *((_DWORD *)a2 + 12) = v11;
  if (__p)
  {
    uint64_t v9 = __p;
    operator delete(__p);
  }
}

void sub_1B22A3780(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>(a1, a2, a3);
  uint64_t v50 = *(void *)a4;
  int v51 = *(_DWORD *)(a4 + 8);
  uint64_t v52 = *(void *)(a4 + 12);
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  uint64_t v53 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v53, *(const void **)(a4 + 24), *(void *)(a4 + 32), (uint64_t)(*(void *)(a4 + 32) - *(void *)(a4 + 24)) >> 2);
  int v56 = *(_DWORD *)(a4 + 48);
  uint64_t v43 = *(void *)a3;
  int v44 = *(_DWORD *)(a3 + 8);
  uint64_t v45 = *(void *)(a3 + 12);
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  uint64_t v8 = *(const void **)(a3 + 24);
  uint64_t v9 = *(void *)(a3 + 32);
  uint64_t v46 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v46, v8, v9, (v9 - (uint64_t)v8) >> 2);
  int v49 = *(_DWORD *)(a3 + 48);
  int v10 = v50;
  if (v46)
  {
    uint64_t v47 = v46;
    operator delete(v46);
  }
  if (v53)
  {
    uint64_t v54 = v53;
    operator delete(v53);
  }
  if (v10 < (int)v43)
  {
    std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>((uint64_t *)a3, (uint64_t *)a4);
    uint64_t v36 = *(void *)a3;
    int v37 = *(_DWORD *)(a3 + 8);
    uint64_t v38 = *(void *)(a3 + 12);
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    uint64_t v39 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v39, *(const void **)(a3 + 24), *(void *)(a3 + 32), (uint64_t)(*(void *)(a3 + 32) - *(void *)(a3 + 24)) >> 2);
    int v42 = *(_DWORD *)(a3 + 48);
    uint64_t v29 = *(void *)a2;
    int v30 = *(_DWORD *)(a2 + 8);
    uint64_t v31 = *(void *)(a2 + 12);
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    int v11 = *(const void **)(a2 + 24);
    uint64_t v12 = *(void *)(a2 + 32);
    __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v11, v12, (v12 - (uint64_t)v11) >> 2);
    int v35 = *(_DWORD *)(a2 + 48);
    int v13 = v36;
    if (__p)
    {
      uint64_t v33 = __p;
      operator delete(__p);
    }
    if (v39)
    {
      uint64_t v40 = v39;
      operator delete(v39);
    }
    if (v13 < (int)v29)
    {
      std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>((uint64_t *)a2, (uint64_t *)a3);
      uint64_t v22 = *(void *)a2;
      int v23 = *(_DWORD *)(a2 + 8);
      uint64_t v24 = *(void *)(a2 + 12);
      uint64_t v26 = 0;
      uint64_t v27 = 0;
      uint64_t v25 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v25, *(const void **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 2);
      int v28 = *(_DWORD *)(a2 + 48);
      uint64_t v17 = *(void *)a1;
      int v19 = 0;
      uint64_t v20 = 0;
      int v14 = *(const void **)(a1 + 24);
      uint64_t v15 = *(void *)(a1 + 32);
      uint64_t v18 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v18, v14, v15, (v15 - (uint64_t)v14) >> 2);
      int v21 = *(_DWORD *)(a1 + 48);
      int v16 = v22;
      if (v18)
      {
        int v19 = v18;
        operator delete(v18);
      }
      if (v25)
      {
        uint64_t v26 = v25;
        operator delete(v25);
      }
      if (v16 < (int)v17) {
        std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>((uint64_t *)a1, (uint64_t *)a2);
      }
    }
  }
}

void sub_1B22A3A28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>(a1, a2, a3, a4);
  uint64_t v69 = *(void *)a5;
  int v70 = *(_DWORD *)(a5 + 8);
  uint64_t v71 = *(void *)(a5 + 12);
  uint64_t v73 = 0;
  uint64_t v74 = 0;
  uint64_t v72 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v72, *(const void **)(a5 + 24), *(void *)(a5 + 32), (uint64_t)(*(void *)(a5 + 32) - *(void *)(a5 + 24)) >> 2);
  int v75 = *(_DWORD *)(a5 + 48);
  uint64_t v62 = *(void *)a4;
  int v63 = *(_DWORD *)(a4 + 8);
  uint64_t v64 = *(void *)(a4 + 12);
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  int v10 = *(const void **)(a4 + 24);
  uint64_t v11 = *(void *)(a4 + 32);
  uint64_t v65 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v65, v10, v11, (v11 - (uint64_t)v10) >> 2);
  int v68 = *(_DWORD *)(a4 + 48);
  int v12 = v69;
  if (v65)
  {
    uint64_t v66 = v65;
    operator delete(v65);
  }
  if (v72)
  {
    uint64_t v73 = v72;
    operator delete(v72);
  }
  if (v12 < (int)v62)
  {
    std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>((uint64_t *)a4, (uint64_t *)a5);
    uint64_t v55 = *(void *)a4;
    int v56 = *(_DWORD *)(a4 + 8);
    uint64_t v57 = *(void *)(a4 + 12);
    int v59 = 0;
    uint64_t v60 = 0;
    uint64_t v58 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v58, *(const void **)(a4 + 24), *(void *)(a4 + 32), (uint64_t)(*(void *)(a4 + 32) - *(void *)(a4 + 24)) >> 2);
    int v61 = *(_DWORD *)(a4 + 48);
    uint64_t v48 = *(void *)a3;
    int v49 = *(_DWORD *)(a3 + 8);
    uint64_t v50 = *(void *)(a3 + 12);
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    int v13 = *(const void **)(a3 + 24);
    uint64_t v14 = *(void *)(a3 + 32);
    __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v13, v14, (v14 - (uint64_t)v13) >> 2);
    int v54 = *(_DWORD *)(a3 + 48);
    int v15 = v55;
    if (__p)
    {
      uint64_t v52 = __p;
      operator delete(__p);
    }
    if (v58)
    {
      int v59 = v58;
      operator delete(v58);
    }
    if (v15 < (int)v48)
    {
      std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>((uint64_t *)a3, (uint64_t *)a4);
      uint64_t v41 = *(void *)a3;
      int v42 = *(_DWORD *)(a3 + 8);
      uint64_t v43 = *(void *)(a3 + 12);
      uint64_t v45 = 0;
      uint64_t v46 = 0;
      int v44 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v44, *(const void **)(a3 + 24), *(void *)(a3 + 32), (uint64_t)(*(void *)(a3 + 32) - *(void *)(a3 + 24)) >> 2);
      int v47 = *(_DWORD *)(a3 + 48);
      uint64_t v34 = *(void *)a2;
      int v35 = *(_DWORD *)(a2 + 8);
      uint64_t v36 = *(void *)(a2 + 12);
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      int v16 = *(const void **)(a2 + 24);
      uint64_t v17 = *(void *)(a2 + 32);
      int v37 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v37, v16, v17, (v17 - (uint64_t)v16) >> 2);
      int v40 = *(_DWORD *)(a2 + 48);
      int v18 = v41;
      if (v37)
      {
        uint64_t v38 = v37;
        operator delete(v37);
      }
      if (v44)
      {
        uint64_t v45 = v44;
        operator delete(v44);
      }
      if (v18 < (int)v34)
      {
        std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>((uint64_t *)a2, (uint64_t *)a3);
        uint64_t v27 = *(void *)a2;
        int v28 = *(_DWORD *)(a2 + 8);
        uint64_t v29 = *(void *)(a2 + 12);
        uint64_t v31 = 0;
        uint64_t v32 = 0;
        int v30 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v30, *(const void **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 2);
        int v33 = *(_DWORD *)(a2 + 48);
        uint64_t v22 = *(void *)a1;
        uint64_t v24 = 0;
        uint64_t v25 = 0;
        int v19 = *(const void **)(a1 + 24);
        uint64_t v20 = *(void *)(a1 + 32);
        int v23 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v23, v19, v20, (v20 - (uint64_t)v19) >> 2);
        int v26 = *(_DWORD *)(a1 + 48);
        int v21 = v27;
        if (v23)
        {
          uint64_t v24 = v23;
          operator delete(v23);
        }
        if (v30)
        {
          uint64_t v31 = v30;
          operator delete(v30);
        }
        if (v21 < (int)v22) {
          std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>((uint64_t *)a1, (uint64_t *)a2);
        }
      }
    }
  }
}

void sub_1B22A3DC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v6 = a2;
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) / 56;
    if (a2 - a1 >= 57)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      int v12 = (uint64_t *)(a1 + 56 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>(a1, a4, v9, v12);
        v12 -= 7;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = v6;
    if (v6 != a3)
    {
      uint64_t v21 = v8;
      uint64_t v14 = v6;
      do
      {
        uint64_t v27 = *(void *)v14;
        int v28 = *(_DWORD *)(v14 + 8);
        uint64_t v29 = *(void *)(v14 + 12);
        uint64_t v31 = 0;
        uint64_t v32 = 0;
        int v30 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v30, *(const void **)(v14 + 24), *(void *)(v14 + 32), (uint64_t)(*(void *)(v14 + 32) - *(void *)(v14 + 24)) >> 2);
        int v33 = *(_DWORD *)(v14 + 48);
        uint64_t v22 = *(void *)a1;
        uint64_t v24 = 0;
        uint64_t v25 = 0;
        int v15 = *(const void **)(a1 + 24);
        uint64_t v16 = *(void *)(a1 + 32);
        __p = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v15, v16, (v16 - (uint64_t)v15) >> 2);
        int v26 = *(_DWORD *)(a1 + 48);
        int v17 = v27;
        if (__p)
        {
          uint64_t v24 = __p;
          operator delete(__p);
        }
        if (v30)
        {
          uint64_t v31 = v30;
          operator delete(v30);
        }
        if (v17 < (int)v22)
        {
          std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>((uint64_t *)v14, (uint64_t *)a1);
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>(a1, a4, v9, (uint64_t *)a1);
        }
        v14 += 56;
      }
      while (v14 != a3);
      uint64_t v13 = a3;
      uint64_t v8 = v21;
    }
    if (v8 >= 57)
    {
      unint64_t v18 = v8 / 0x38uLL;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>(a1, v6, a4, v18);
        v6 -= 56;
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

void sub_1B22A4028(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v5 = a4;
    uint64_t v6 = a1;
    int64_t v26 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= 0x6DB6DB6DB6DB6DB7 * (((uint64_t)a4 - a1) >> 3))
    {
      uint64_t v7 = a3;
      int64_t v8 = (0xDB6DB6DB6DB6DB6ELL * (((uint64_t)a4 - a1) >> 3)) | 1;
      uint64_t v9 = (uint64_t *)(a1 + 56 * v8);
      int64_t v10 = 0xDB6DB6DB6DB6DB6ELL * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v10 < a3)
      {
        uint64_t v81 = *v9;
        uint64_t v11 = a1 + 56 * v8;
        int v82 = *(_DWORD *)(v11 + 8);
        uint64_t v83 = *(void *)(v11 + 12);
        int v85 = 0;
        uint64_t v86 = 0;
        uint64_t v84 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v84, *(const void **)(v11 + 24), *(void *)(v11 + 32), (uint64_t)(*(void *)(v11 + 32) - *(void *)(v11 + 24)) >> 2);
        int v87 = *(_DWORD *)(v11 + 48);
        uint64_t v74 = v9[7];
        int v75 = *((_DWORD *)v9 + 16);
        uint64_t v76 = *(uint64_t *)((char *)v9 + 68);
        int v78 = 0;
        uint64_t v79 = 0;
        uint64_t v77 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v77, (const void *)v9[10], v9[11], (v9[11] - v9[10]) >> 2);
        int v80 = *((_DWORD *)v9 + 26);
        int v12 = v81;
        if (v77)
        {
          int v78 = v77;
          operator delete(v77);
        }
        if (v84)
        {
          int v85 = v84;
          operator delete(v84);
        }
        BOOL v13 = v12 < (int)v74;
        uint64_t v7 = a3;
        if (v13)
        {
          v9 += 7;
          int64_t v8 = v10;
        }
      }
      uint64_t v67 = *v9;
      int v68 = *((_DWORD *)v9 + 2);
      uint64_t v69 = *(uint64_t *)((char *)v9 + 12);
      uint64_t v71 = 0;
      uint64_t v72 = 0;
      int v70 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v70, (const void *)v9[3], v9[4], (v9[4] - v9[3]) >> 2);
      int v73 = *((_DWORD *)v9 + 12);
      uint64_t v60 = *v5;
      int v61 = *((_DWORD *)v5 + 2);
      uint64_t v62 = *(uint64_t *)((char *)v5 + 12);
      uint64_t v64 = 0;
      uint64_t v65 = 0;
      uint64_t v14 = (const void *)v5[3];
      uint64_t v15 = v5[4];
      __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v14, v15, (v15 - (uint64_t)v14) >> 2);
      int v66 = *((_DWORD *)v5 + 12);
      int v16 = v67;
      if (__p)
      {
        uint64_t v64 = __p;
        operator delete(__p);
      }
      if (v70)
      {
        uint64_t v71 = v70;
        operator delete(v70);
      }
      if (v16 >= (int)v60)
      {
        uint64_t v53 = *v5;
        int v54 = *((_DWORD *)v5 + 2);
        uint64_t v55 = *(uint64_t *)((char *)v5 + 12);
        uint64_t v57 = 0;
        uint64_t v58 = 0;
        int v56 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v56, (const void *)v5[3], v5[4], (v5[4] - v5[3]) >> 2);
        int v59 = *((_DWORD *)v5 + 12);
        uint64_t v25 = v6;
        do
        {
          int v17 = v9;
          *uint64_t v5 = *v9;
          fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::operator=((uint64_t)(v5 + 1), (uint64_t)(v9 + 1));
          *((_DWORD *)v5 + 12) = *((_DWORD *)v9 + 12);
          if (v26 < v8) {
            break;
          }
          uint64_t v18 = (2 * v8) | 1;
          uint64_t v9 = (uint64_t *)(v6 + 56 * v18);
          uint64_t v19 = 2 * v8 + 2;
          if (v19 >= v7)
          {
            int64_t v8 = (2 * v8) | 1;
          }
          else
          {
            uint64_t v46 = *v9;
            uint64_t v20 = v6 + 56 * v18;
            int v47 = *(_DWORD *)(v20 + 8);
            uint64_t v48 = *(void *)(v20 + 12);
            uint64_t v50 = 0;
            uint64_t v51 = 0;
            int v49 = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v49, *(const void **)(v20 + 24), *(void *)(v20 + 32), (uint64_t)(*(void *)(v20 + 32) - *(void *)(v20 + 24)) >> 2);
            int v52 = *(_DWORD *)(v6 + 56 * v18 + 48);
            uint64_t v39 = v9[7];
            int v40 = *((_DWORD *)v9 + 16);
            uint64_t v41 = *(uint64_t *)((char *)v9 + 68);
            uint64_t v43 = 0;
            uint64_t v44 = 0;
            int v42 = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v42, (const void *)v9[10], v9[11], (v9[11] - v9[10]) >> 2);
            int v45 = *((_DWORD *)v9 + 26);
            int v21 = v46;
            int v22 = v39;
            if (v42)
            {
              uint64_t v43 = v42;
              operator delete(v42);
            }
            if (v49)
            {
              uint64_t v50 = v49;
              operator delete(v49);
            }
            int64_t v8 = (2 * v8) | 1;
            BOOL v13 = v21 < v22;
            uint64_t v7 = a3;
            if (v13)
            {
              v9 += 7;
              int64_t v8 = v19;
            }
          }
          uint64_t v32 = *v9;
          int v33 = *((_DWORD *)v9 + 2);
          uint64_t v34 = *(uint64_t *)((char *)v9 + 12);
          uint64_t v36 = 0;
          uint64_t v37 = 0;
          int v35 = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v35, (const void *)v9[3], v9[4], (v9[4] - v9[3]) >> 2);
          uint64_t v6 = v25;
          int v38 = *((_DWORD *)v9 + 12);
          int v27 = v53;
          uint64_t v29 = 0;
          uint64_t v30 = 0;
          int v28 = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v28, v56, (uint64_t)v57, (v57 - (unsigned char *)v56) >> 2);
          int v31 = v59;
          int v23 = v32;
          if (v28)
          {
            uint64_t v29 = v28;
            operator delete(v28);
          }
          if (v35)
          {
            uint64_t v36 = v35;
            operator delete(v35);
          }
          uint64_t v5 = v17;
        }
        while (v23 >= v27);
        *int v17 = v53;
        *((_DWORD *)v17 + 2) = v54;
        *(uint64_t *)((char *)v17 + 12) = v55;
        if (v17 != &v53) {
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v17 + 24, (char *)v56, (uint64_t)v57, (v57 - (unsigned char *)v56) >> 2);
        }
        *((_DWORD *)v17 + 12) = v59;
        if (v56)
        {
          uint64_t v57 = v56;
          operator delete(v56);
        }
      }
    }
  }
}

void sub_1B22A44F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v10 = *(void *)a1;
    int v11 = *(_DWORD *)(a1 + 8);
    uint64_t v12 = *(void *)(a1 + 12);
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(a1 + 24), *(void *)(a1 + 32), (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 2);
    int v16 = *(_DWORD *)(a1 + 48);
    int64_t v8 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>((uint64_t *)a1, a3, a4);
    uint64_t v9 = v8;
    if (v8 == (uint64_t *)(a2 - 56))
    {
      *int64_t v8 = v10;
      *((_DWORD *)v8 + 2) = v11;
      *(uint64_t *)((char *)v8 + 12) = v12;
      if (v8 != &v10) {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v8 + 24, (char *)__p, (uint64_t)v14, (v14 - (unsigned char *)__p) >> 2);
      }
      *((_DWORD *)v9 + 12) = v16;
    }
    else
    {
      *int64_t v8 = *(void *)(a2 - 56);
      fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::operator=((uint64_t)(v8 + 1), a2 - 48);
      *((_DWORD *)v9 + 12) = *(_DWORD *)(a2 - 8);
      *(void *)(a2 - 56) = v10;
      *(_DWORD *)(a2 - 48) = v11;
      *(void *)(a2 - 44) = v12;
      if ((int *)(a2 - 48) != &v11) {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a2 - 32), (char *)__p, (uint64_t)v14, (v14 - (unsigned char *)__p) >> 2);
      }
      *(_DWORD *)(a2 - 8) = v16;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>(a1, (uint64_t)(v9 + 7), a3, 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v9 - a1 + 56) >> 3));
    }
    if (__p)
    {
      uint64_t v14 = __p;
      operator delete(__p);
    }
  }
}

void sub_1B22A46F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = a3 - 2;
  if (a3 < 2) {
    uint64_t v6 = a3 - 1;
  }
  uint64_t v7 = v6 >> 1;
  do
  {
    int64_t v8 = a1;
    uint64_t v9 = v5 + 1;
    a1 += 7 * v5 + 7;
    uint64_t v10 = 2 * v5;
    uint64_t v5 = (2 * v5) | 1;
    uint64_t v11 = v10 + 2;
    if (v10 + 2 < a3)
    {
      uint64_t v20 = *a1;
      uint64_t v12 = &v8[7 * v9];
      int v21 = *((_DWORD *)v12 + 2);
      uint64_t v22 = *(uint64_t *)((char *)v12 + 12);
      uint64_t v24 = 0;
      uint64_t v25 = 0;
      int v23 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v23, (const void *)v12[3], v12[4], (v12[4] - v12[3]) >> 2);
      int v26 = *((_DWORD *)v12 + 12);
      uint64_t v15 = a1[7];
      int v17 = 0;
      uint64_t v18 = 0;
      __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, (const void *)a1[10], a1[11], (a1[11] - a1[10]) >> 2);
      int v19 = *((_DWORD *)a1 + 26);
      int v13 = v20;
      if (__p)
      {
        int v17 = __p;
        operator delete(__p);
      }
      if (v23)
      {
        uint64_t v24 = v23;
        operator delete(v23);
      }
      if (v13 < (int)v15)
      {
        a1 += 7;
        uint64_t v5 = v11;
      }
    }
    *int64_t v8 = *a1;
    fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::operator=((uint64_t)(v8 + 1), (uint64_t)(a1 + 1));
    *((_DWORD *)v8 + 12) = *((_DWORD *)a1 + 12);
  }
  while (v5 <= v7);
  return a1;
}

void sub_1B22A4898(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v7 = v4 >> 1;
    int64_t v8 = (uint64_t *)(a1 + 56 * (v4 >> 1));
    uint64_t v39 = *v8;
    int v40 = *((_DWORD *)v8 + 2);
    uint64_t v41 = *(uint64_t *)((char *)v8 + 12);
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    int v42 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v42, (const void *)v8[3], v8[4], (v8[4] - v8[3]) >> 2);
    int v45 = *((_DWORD *)v8 + 12);
    uint64_t v9 = (uint64_t *)(a2 - 56);
    uint64_t v32 = *(void *)(a2 - 56);
    int v33 = *(_DWORD *)(a2 - 48);
    uint64_t v34 = *(void *)(a2 - 44);
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(a2 - 32), *(void *)(a2 - 24), (uint64_t)(*(void *)(a2 - 24) - *(void *)(a2 - 32)) >> 2);
    int v38 = *(_DWORD *)(a2 - 8);
    int v10 = v39;
    if (__p)
    {
      uint64_t v36 = __p;
      operator delete(__p);
    }
    if (v42)
    {
      uint64_t v43 = v42;
      operator delete(v42);
    }
    if (v10 < (int)v32)
    {
      uint64_t v25 = *(void *)(a2 - 56);
      int v26 = *(_DWORD *)(a2 - 48);
      uint64_t v27 = *(void *)(a2 - 44);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      int v28 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v28, *(const void **)(a2 - 32), *(void *)(a2 - 24), (uint64_t)(*(void *)(a2 - 24) - *(void *)(a2 - 32)) >> 2);
      int v31 = *(_DWORD *)(a2 - 8);
      do
      {
        uint64_t v11 = v8;
        uint64_t *v9 = *v8;
        fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::operator=((uint64_t)(v9 + 1), (uint64_t)(v8 + 1));
        *((_DWORD *)v9 + 12) = *((_DWORD *)v8 + 12);
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        int64_t v8 = (uint64_t *)(a1 + 56 * v7);
        uint64_t v18 = *v8;
        int v19 = *((_DWORD *)v8 + 2);
        uint64_t v20 = *(uint64_t *)((char *)v8 + 12);
        uint64_t v22 = 0;
        uint64_t v23 = 0;
        int v21 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v21, (const void *)v8[3], v8[4], (v8[4] - v8[3]) >> 2);
        int v24 = *((_DWORD *)v8 + 12);
        int v13 = v25;
        uint64_t v15 = 0;
        uint64_t v16 = 0;
        uint64_t v14 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v14, v28, (uint64_t)v29, (v29 - (unsigned char *)v28) >> 2);
        int v17 = v31;
        int v12 = v18;
        if (v14)
        {
          uint64_t v15 = v14;
          operator delete(v14);
        }
        if (v21)
        {
          uint64_t v22 = v21;
          operator delete(v21);
        }
        uint64_t v9 = v11;
      }
      while (v12 < v13);
      *uint64_t v11 = v25;
      *((_DWORD *)v11 + 2) = v26;
      *(uint64_t *)((char *)v11 + 12) = v27;
      if (v11 != &v25) {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v11 + 24, (char *)v28, (uint64_t)v29, (v29 - (unsigned char *)v28) >> 2);
      }
      *((_DWORD *)v11 + 12) = v31;
      if (v28)
      {
        uint64_t v29 = v28;
        operator delete(v28);
      }
    }
  }
}

void sub_1B22A4B4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::PairWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>::One()
{
  {
    operator new();
  }
  return fst::PairWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>::One(void)::one;
}

void sub_1B22A4C10(_Unwind_Exception *a1)
{
}

uint64_t fst::ArcMap<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t))(*(void *)a2 + 224))(a2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 280))(a2, v4);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 288))(a2, v5);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (result == -1)
  {
    if ((v6 & 4) != 0)
    {
      int v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 192);
      return v17(a2, 4, 4);
    }
    return result;
  }
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 1, 0))
  {
    BOOL v8 = fst::CountStates<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>(a1) != 0;
    (*(void (**)(uint64_t, BOOL))(*(void *)a2 + 248))(a2, v8);
  }
  HIDWORD(v41) = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v39);
  while (!v39)
  {
    if (SHIDWORD(v41) >= v40) {
      goto LABEL_14;
    }
LABEL_9:
    (*(void (**)(uint64_t))(*(void *)a2 + 200))(a2);
    if (v39) {
      (*(void (**)(uint64_t))(*(void *)v39 + 32))(v39);
    }
    else {
      ++HIDWORD(v41);
    }
  }
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v39 + 16))(v39)) {
    goto LABEL_9;
  }
  if (v39) {
    (*(void (**)(uint64_t))(*(void *)v39 + 8))(v39);
  }
LABEL_14:
  unsigned int v46 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v44);
  while (2)
  {
    if (!v44)
    {
      if ((int)v46 >= v45) {
        goto LABEL_63;
      }
      goto LABEL_20;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(void *)v44 + 16))(v44))
    {
      if (v44)
      {
        uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v44 + 24))(v44);
        goto LABEL_21;
      }
LABEL_20:
      uint64_t v9 = v46;
LABEL_21:
      if (v9 == (*(unsigned int (**)(uint64_t))(*(void *)a1 + 24))(a1)) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 176))(a2, v9);
      }
      uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 40))(a1, v9);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 256))(a2, v9, v10);
      unint64_t v36 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 136))(a1, v9, &v33);
LABEL_24:
      if (v33)
      {
        if ((*(unsigned int (**)(uint64_t))(*(void *)v33 + 24))(v33))
        {
          if (v33)
          {
            (*(void (**)(void))(*(void *)v33 + 8))();
            goto LABEL_39;
          }
LABEL_37:
          if (__p) {
            --*(_DWORD *)__p;
          }
LABEL_39:
          (*(void (**)(int *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(&v29, a1, v9);
          uint64_t v33 = 0;
          LODWORD(v34) = v29;
          *(void *)((char *)&v34 + 4) = v30;
          unint64_t v36 = 0;
          uint64_t v37 = 0;
          __p = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v31, (uint64_t)v32, (v32 - (unsigned char *)v31) >> 2);
          int v38 = -1;
          fst::RmWeightMapper<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::operator()((uint64_t)&v33, (uint64_t)&v39);
          if (__p)
          {
            unint64_t v36 = (unint64_t)__p;
            operator delete(__p);
          }
          if (v31)
          {
            uint64_t v32 = v31;
            operator delete(v31);
          }
          if (v39)
          {
            int v12 = FLAGS_fst_error_fatal;
            if (FLAGS_fst_error_fatal)
            {
              std::string::basic_string[abi:ne180100]<0>(v26, "FATAL");
              int v13 = fst::LogMessage::LogMessage((fst *)&v28, (uint64_t)v26);
            }
            else
            {
              std::string::basic_string[abi:ne180100]<0>(v23, "ERROR");
              int v13 = fst::LogMessage::LogMessage((fst *)&v25, (uint64_t)v23);
            }
            uint64_t v14 = (void *)fst::cerr(v13);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"ArcMap: non-zero arc labels for superfinal arc", 46);
            if (v12)
            {
              fst::LogMessage::~LogMessage((fst::LogMessage *)&v28);
              if (v27 < 0)
              {
                uint64_t v15 = (void *)v26[0];
                goto LABEL_52;
              }
            }
            else
            {
              fst::LogMessage::~LogMessage((fst::LogMessage *)&v25);
              if (v24 < 0)
              {
                uint64_t v15 = v23[0];
LABEL_52:
                operator delete(v15);
              }
            }
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 192))(a2, 4, 4);
          }
          int v18 = v40;
          uint64_t v19 = v41;
          int v21 = 0;
          uint64_t v22 = 0;
          uint64_t v20 = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v20, v42, (uint64_t)v43, (v43 - (unsigned char *)v42) >> 2);
          (*(void (**)(uint64_t, uint64_t, int *))(*(void *)a2 + 184))(a2, v9, &v18);
          if (v20)
          {
            int v21 = v20;
            operator delete(v20);
          }
          if (v42)
          {
            uint64_t v43 = v42;
            operator delete(v42);
          }
          if (v44) {
            (*(void (**)(uint64_t))(*(void *)v44 + 32))(v44);
          }
          else {
            ++v46;
          }
          continue;
        }
        if (v33)
        {
          uint64_t v11 = (*(uint64_t (**)(void))(*(void *)v33 + 32))();
LABEL_30:
          fst::RmWeightMapper<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::operator()(v11, (uint64_t)&v39);
          (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a2 + 208))(a2, v9, &v39);
          if (v42)
          {
            uint64_t v43 = v42;
            operator delete(v42);
          }
          if (v33) {
            (*(void (**)(uint64_t))(*(void *)v33 + 40))(v33);
          }
          else {
            ++v36;
          }
          goto LABEL_24;
        }
      }
      else if (v36 >= *((void *)&v34 + 1))
      {
        goto LABEL_37;
      }
      uint64_t v11 = v34 + 56 * v36;
      goto LABEL_30;
    }
    break;
  }
  if (v44) {
    (*(void (**)(uint64_t))(*(void *)v44 + 8))(v44);
  }
LABEL_63:
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 192))(a2, v6 & 0x3FFCFFFF0007 | v16 | 0x200000000, 0x3FFFFFFF0007);
}

void sub_1B22A5590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a25);
  if (a21 < 0) {
    operator delete(__p);
  }
  int v47 = *(void **)(v45 - 144);
  if (v47)
  {
    *(void *)(v45 - 136) = v47;
    operator delete(v47);
  }
  uint64_t v48 = *(void *)(v45 - 112);
  if (v48) {
    (*(void (**)(uint64_t))(*(void *)v48 + 8))(v48);
  }
  _Unwind_Resume(a1);
}

void fst::RmWeightMapper<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::operator()(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero((uint64_t)&v7);
  float v19 = 0.0;
  float v19 = *(float *)(a1 + 8);
  float v18 = v7;
  if (v19 != v7) {
    goto LABEL_6;
  }
  float v19 = 0.0;
  float v19 = *(float *)(a1 + 12);
  float v18 = 0.0;
  float v18 = *(float *)(a1 + 16);
  float v17 = v8;
  float v16 = v9;
  if (v19 != v8) {
    goto LABEL_6;
  }
  if (v18 == v16
    && (v4 = *(const void **)(a1 + 24), size_t v5 = *(void *)(a1 + 32) - (void)v4, v5 == v11 - (unsigned char *)__p)
    && !memcmp(v4, __p, v5))
  {
    fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero((uint64_t)&v12);
  }
  else
  {
LABEL_6:
    fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::One((uint64_t)&v12);
  }
  if (__p)
  {
    uint64_t v11 = __p;
    operator delete(__p);
  }
  int v6 = *(_DWORD *)(a1 + 48);
  *(void *)a2 = *(void *)a1;
  *(_DWORD *)(a2 + 8) = v12;
  *(void *)(a2 + 12) = v13;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + ++*(void *)(result + 24) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a2 + 24), v14, (uint64_t)v15, (v15 - (unsigned char *)v14) >> 2);
  *(_DWORD *)(a2 + 48) = v6;
  if (v14)
  {
    uint64_t v15 = v14;
    operator delete(v14);
  }
}

void sub_1B22A5850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::ShortestPath<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 24);
  if (v7 == 1 && *(unsigned char *)(a4 + 35) == 0)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    __p = 0;
    unsigned int v13 = 0;
    if (fst::SingleShortestPath<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>(a1, a3, (uint64_t *)a4, &v13, (char **)&v10))fst::SingleShortestPathBacktrace<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>(a1, a2, &v10, v13); {
    else
    }
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 192))(a2, 4, 4);
    if (v10)
    {
      uint64_t v11 = v10;
      operator delete(v10);
    }
  }
  else if (v7)
  {
    if (*(unsigned char *)(a4 + 33)
      || (fst::ShortestDistance<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>(a1, a3, a4), a3[1] - *a3 != 40)|| fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Member(*a3))
    {
      fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::VectorFst();
    }
    float v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 192);
    v9(a2, 4, 4);
  }
}

void sub_1B22A5CDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,void *a32,uint64_t a33)
{
  if (__p) {
    operator delete(__p);
  }
  int v35 = *(void **)(v33 - 144);
  if (v35)
  {
    *(void *)(v33 - 136) = v35;
    operator delete(v35);
  }
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::~ImplToFst((void *)(v33 - 120));
  _Unwind_Resume(a1);
}

void fst::AutoQueue<int>::AutoQueue<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = 7;
  *(unsigned char *)(a1 + 12) = 0;
  *(void *)a1 = &unk_1F0A40F38;
  *(_OWORD *)(a1 + ++*(void *)(result + 24) = 0u;
  uint64_t v3 = a1 + 48;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x4E00000000, 0);
  if ((v4 & 0x4000000000) == 0 && (*(unsigned int (**)(uint64_t))(*(void *)a2 + 24))(a2) != -1)
  {
    if ((v4 & 0x800000000) == 0)
    {
      if ((v4 & 0x200000000) == 0)
      {
        uint64_t v6 = 0;
        v5[0] = v3;
        v5[1] = 0;
        v5[2] = 0;
        v5[3] = &v6;
        fst::DfsVisit<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::SccVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>(a2, (uint64_t)v5);
      }
      operator new();
    }
    operator new();
  }
  operator new();
}

void sub_1B22A6648(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, char a16, char a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a18) {
    operator delete(a18);
  }
  uint64_t v30 = *v28;
  if (*v28)
  {
    *(void *)(v26 + 56) = v30;
    operator delete(v30);
  }
  int v31 = *v27;
  if (*v27)
  {
    *(void *)(v26 + 32) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::AutoQueue<int>::SccQueueType<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unsigned char *a5, unsigned char *a6)
{
  *a5 = 1;
  *a6 = 1;
  uint64_t v10 = *(void *)(a3 + 8) - *(void *)a3;
  if (v10)
  {
    unint64_t v11 = v10 >> 2;
    if (v11 <= 1) {
      unint64_t v11 = 1;
    }
    bzero(*(void **)a3, 4 * v11);
  }
  unsigned int v54 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v52);
  while (1)
  {
    uint64_t result = v52;
    if (!v52)
    {
      if ((int)v54 >= v53) {
        return result;
      }
LABEL_11:
      uint64_t v14 = v54;
      goto LABEL_12;
    }
    int v13 = (*(uint64_t (**)(uint64_t))(*(void *)v52 + 16))(v52);
    uint64_t result = v52;
    if (v13) {
      break;
    }
    if (!v52) {
      goto LABEL_11;
    }
    uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v52 + 24))(v52);
LABEL_12:
    unint64_t v51 = 0;
    (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 136))(a1, v14, v49);
    uint64_t v15 = (int)v14;
    while (1)
    {
      if (!v49[0])
      {
        if (v51 >= v49[2]) {
          goto LABEL_76;
        }
        goto LABEL_18;
      }
      if ((*(unsigned int (**)(void))(*(void *)v49[0] + 24))(v49[0])) {
        break;
      }
      if (v49[0])
      {
        uint64_t v16 = (*(uint64_t (**)(void))(*(void *)v49[0] + 32))();
        goto LABEL_19;
      }
LABEL_18:
      uint64_t v16 = v49[1] + 56 * v51;
LABEL_19:
      uint64_t v17 = *(int *)(*a2 + 4 * v15);
      if (v17 == *(_DWORD *)(*a2 + 4 * *(int *)(v16 + 48)))
      {
        float v18 = *(_DWORD **)a3;
        if (!a4) {
          goto LABEL_24;
        }
        fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::One((uint64_t)&v44);
        float v19 = (float *)(v16 + 8);
        BOOL v20 = fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::operator()(a4, v16 + 8, (uint64_t)&v44);
        if (__p)
        {
          uint64_t v48 = __p;
          operator delete(__p);
        }
        if (v20)
        {
LABEL_24:
          int v21 = 1;
          goto LABEL_42;
        }
        if ((v18[v17] | 2) == 2)
        {
          fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero((uint64_t)&v44);
          float v39 = 0.0;
          float v39 = *v19;
          float v58 = v44;
          if (v39 != v44) {
            goto LABEL_31;
          }
          float v39 = 0.0;
          float v39 = *(float *)(v16 + 12);
          float v58 = 0.0;
          float v58 = *(float *)(v16 + 16);
          float v57 = v45;
          float v56 = v46;
          if (v39 != v45) {
            goto LABEL_31;
          }
          if (v58 == v56
            && (uint64_t v22 = *(const void **)(v16 + 24),
                size_t v23 = *(void *)(v16 + 32) - (void)v22,
                char v24 = __p,
                v23 == v48 - (unsigned char *)__p)
            && !memcmp(v22, __p, v23))
          {
            BOOL v25 = 0;
            if (v24) {
              goto LABEL_38;
            }
          }
          else
          {
LABEL_31:
            fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::One((uint64_t)&v39);
            float v58 = 0.0;
            float v58 = *v19;
            float v57 = v39;
            if (v58 != v39
              || (float v58 = 0.0,
                  float v58 = *(float *)(v16 + 12),
                  float v57 = 0.0,
                  float v57 = *(float *)(v16 + 16),
                  float v56 = v40,
                  float v55 = v41,
                  v58 != v40)
              || v57 != v55)
            {
              BOOL v25 = 1;
              goto LABEL_35;
            }
            int v35 = *(const void **)(v16 + 24);
            size_t v36 = *(void *)(v16 + 32) - (void)v35;
            uint64_t v26 = v42;
            if (v36 == v43 - (unsigned char *)v42)
            {
              BOOL v25 = memcmp(v35, v42, v36) != 0;
LABEL_35:
              uint64_t v26 = v42;
              if (v42)
              {
LABEL_36:
                uint64_t v43 = v26;
                operator delete(v26);
              }
            }
            else
            {
              BOOL v25 = 1;
              if (v42) {
                goto LABEL_36;
              }
            }
            char v24 = __p;
            if (__p)
            {
LABEL_38:
              uint64_t v48 = v24;
              operator delete(v24);
            }
          }
          if (v25) {
            int v21 = 3;
          }
          else {
            int v21 = 2;
          }
LABEL_42:
          v18[v17] = v21;
        }
        *a5 = 0;
      }
      fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero((uint64_t)&v44);
      float v39 = 0.0;
      float v39 = *(float *)(v16 + 8);
      float v58 = v44;
      if (v39 != v44) {
        goto LABEL_49;
      }
      float v39 = 0.0;
      float v39 = *(float *)(v16 + 12);
      float v58 = 0.0;
      float v58 = *(float *)(v16 + 16);
      float v57 = v45;
      float v56 = v46;
      if (v39 != v45
        || v58 != v56
        || (char v27 = *(const void **)(v16 + 24),
            size_t v28 = *(void *)(v16 + 32) - (void)v27,
            int v29 = __p,
            v28 != v48 - (unsigned char *)__p)
        || memcmp(v27, __p, v28))
      {
LABEL_49:
        fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::One((uint64_t)&v39);
        float v58 = 0.0;
        float v58 = *(float *)(v16 + 8);
        float v57 = v39;
        v30.n128_f32[0] = v58;
        if (v58 != v39) {
          goto LABEL_52;
        }
        float v58 = 0.0;
        float v58 = *(float *)(v16 + 12);
        float v57 = 0.0;
        float v57 = *(float *)(v16 + 16);
        float v56 = v40;
        float v55 = v41;
        v30.n128_f32[0] = v58;
        if (v58 != v40 || (v30.n128_f32[0] = v57, v57 != v55))
        {
LABEL_52:
          BOOL v31 = 1;
          goto LABEL_53;
        }
        uint64_t v33 = *(const void **)(v16 + 24);
        size_t v34 = *(void *)(v16 + 32) - (void)v33;
        uint64_t v32 = v42;
        if (v34 == v43 - (unsigned char *)v42)
        {
          BOOL v31 = memcmp(v33, v42, v34) != 0;
LABEL_53:
          uint64_t v32 = v42;
          if (v42)
          {
LABEL_54:
            uint64_t v43 = v32;
            operator delete(v32);
          }
        }
        else
        {
          BOOL v31 = 1;
          if (v42) {
            goto LABEL_54;
          }
        }
        int v29 = __p;
        if (!__p) {
          goto LABEL_57;
        }
LABEL_56:
        uint64_t v48 = v29;
        operator delete(v29);
        goto LABEL_57;
      }
      BOOL v31 = 0;
      if (v29) {
        goto LABEL_56;
      }
LABEL_57:
      if (v31) {
        *a6 = 0;
      }
      if (v49[0]) {
        (*(void (**)(void, __n128))(*(void *)v49[0] + 40))(v49[0], v30);
      }
      else {
        ++v51;
      }
    }
    if (v49[0])
    {
      (*(void (**)(void))(*(void *)v49[0] + 8))();
      goto LABEL_78;
    }
LABEL_76:
    if (v50) {
      --*v50;
    }
LABEL_78:
    if (v52) {
      (*(void (**)(uint64_t))(*(void *)v52 + 32))(v52);
    }
    else {
      ++v54;
    }
  }
  if (v52) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v52 + 8))(v52);
  }
  return result;
}

void sub_1B22A6E14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t v27 = *(void *)(v25 - 128);
  if (v27) {
    (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
  }
  _Unwind_Resume(exception_object);
}

void fst::TopOrderQueue<int>::TopOrderQueue<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 4;
  *(unsigned char *)(a1 + 12) = 0;
  *(void *)a1 = &unk_1F0A3A1C8;
  *(void *)(a1 + 16) = 0xFFFFFFFF00000000;
  *(_OWORD *)(a1 + ++*(void *)(result + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  char v3 = 0;
  uint64_t v1 = a1 + 24;
  uint64_t v2 = &v3;
  fst::DfsVisit<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>();
}

void sub_1B22A7014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0) {
    operator delete(__p);
  }
  uint64_t v22 = *v19;
  if (*v19)
  {
    *(void *)(v18 + 56) = v22;
    operator delete(v22);
  }
  size_t v23 = *v20;
  if (*v20)
  {
    *(void *)(v18 + 32) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(a1);
}

void fst::DfsVisit<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>()
{
}

void sub_1B22A7904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::~MemoryPool((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va1);
  unint64_t v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(void *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

BOOL fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  fst::Plus<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>((float *)a2, a3, (uint64_t)&v14);
  float v22 = v14;
  float v21 = 0.0;
  float v5 = *(float *)a2;
  float v21 = *(float *)a2;
  if (v14 != v21) {
    goto LABEL_6;
  }
  float v22 = v15;
  float v21 = v16;
  float v20 = 0.0;
  float v6 = *(float *)(a2 + 4);
  float v7 = *(float *)(a2 + 8);
  float v20 = v6;
  float v19 = v7;
  if (v15 != v6) {
    goto LABEL_6;
  }
  if (v21 == v19
    && (size_t v8 = v18 - (unsigned char *)__p,
        uint64_t v10 = a2 + 16,
        uint64_t v9 = *(const void **)(a2 + 16),
        v18 - (unsigned char *)__p == *(void *)(v10 + 8) - (void)v9)
    && !memcmp(__p, v9, v18 - (unsigned char *)__p))
  {
    float v22 = v5;
    float v21 = 0.0;
    float v21 = *(float *)a3;
    BOOL v11 = v5 != v21
       || (v22 = v6, v21 = v7, v20 = 0.0, v20 = *(float *)(a3 + 4), float v19 = 0.0, float v19 = *(float *)(a3 + 8), v6 != v20)
       || v21 != v19
       || (int v13 = *(const void **)(a3 + 16), v8 != *(void *)(a3 + 24) - (void)v13)
       || memcmp(v9, v13, v8) != 0;
  }
  else
  {
LABEL_6:
    BOOL v11 = 0;
  }
  if (__p)
  {
    uint64_t v18 = __p;
    operator delete(__p);
  }
  return v11;
}

void *fst::Plus<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>@<X0>(float *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = a1;
  if (!fst::NaturalLess<fst::TropicalWeightTpl<float>>::operator()((uint64_t)&v22, a1, (float *)a2))
  {
    if (fst::NaturalLess<fst::TropicalWeightTpl<float>>::operator()((uint64_t)&v22, (float *)a2, v4)) {
      goto LABEL_8;
    }
    float v6 = v4[1];
    float v7 = v6 + v4[2];
    float v8 = *(float *)(a2 + 4);
    float v9 = v8 + *(float *)(a2 + 8);
    if (v7 < v9) {
      goto LABEL_9;
    }
    if (v7 > v9)
    {
LABEL_8:
      uint64_t v4 = (float *)a2;
      goto LABEL_9;
    }
    if (v6 >= v8)
    {
      if (v6 > v8) {
        goto LABEL_8;
      }
      uint64_t v10 = (int *)*((void *)v4 + 2);
      unint64_t v11 = *((void *)v4 + 3) - (void)v10;
      unint64_t v12 = v11 >> 2;
      int v13 = *(int **)(a2 + 16);
      uint64_t v14 = (*(void *)(a2 + 24) - (void)v13) >> 2;
      if ((int)(v11 >> 2) > (int)v14) {
        goto LABEL_8;
      }
      if ((int)v12 >= 1 && (int)v12 >= (int)v14)
      {
        uint64_t v16 = (v11 >> 2) - 1;
        do
        {
          int v18 = *v10++;
          int v17 = v18;
          int v20 = *v13++;
          int v19 = v20;
          if (v17 < v20) {
            goto LABEL_8;
          }
        }
        while (v17 <= v19 && v16-- != 0);
      }
    }
  }
LABEL_9:
  *(float *)a3 = *v4;
  *(void *)(a3 + 4) = *(void *)(v4 + 1);
  *(void *)(a3 + ++*(void *)(result + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 16) = 0;
  return std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a3 + 16), *((const void **)v4 + 2), *((void *)v4 + 3), (uint64_t)(*((void *)v4 + 3) - *((void *)v4 + 2)) >> 2);
}

void *fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>,false>::~ShortestFirstQueue(void *a1)
{
  *a1 = &unk_1F0A3ED10;
  uint64_t v2 = (void *)a1[14];
  if (v2)
  {
    a1[15] = v2;
    operator delete(v2);
  }
  fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>,false>::~Heap(a1 + 2);
  return a1;
}

void fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>,false>::~ShortestFirstQueue(void *a1)
{
  *a1 = &unk_1F0A3ED10;
  uint64_t v2 = (void *)a1[14];
  if (v2)
  {
    a1[15] = v2;
    operator delete(v2);
  }
  fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>,false>::~Heap(a1 + 2);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>,false>::Head_(uint64_t a1)
{
  return **(unsigned int **)(a1 + 80);
}

uint64_t fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>,false>::Enqueue_(uint64_t a1, int a2)
{
  int v3 = a2;
  return fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>,false>::Insert(a1 + 16, &v3);
}

uint64_t fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>,false>::Dequeue_(uint64_t a1)
{
  return fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>,false>::Pop(a1 + 16);
}

BOOL fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>,false>::Empty_(uint64_t a1)
{
  return *(_DWORD *)(a1 + 104) == 0;
}

uint64_t fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>,false>::Clear_(uint64_t result)
{
  *(_DWORD *)(result + 104) = 0;
  return result;
}

uint64_t fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>,false>::Insert(uint64_t a1, int *a2)
{
  uint64_t v5 = a1 + 64;
  uint64_t v4 = *(int **)(a1 + 64);
  unint64_t v6 = *(int *)(v5 + 24);
  float v7 = *(int **)(v5 + 8);
  unint64_t v8 = v7 - v4;
  if (v8 > v6)
  {
    v4[v6] = *a2;
    *(_DWORD *)(*(void *)(a1 + 16) + 4 * *(int *)(*(void *)(a1 + 40) + 4 * *(int *)(a1 + 88))) = *(_DWORD *)(a1 + 88);
    goto LABEL_52;
  }
  unint64_t v9 = *(void *)(a1 + 80);
  if ((unint64_t)v7 >= v9)
  {
    if ((v8 + 1) >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = v9 - (void)v4;
    unint64_t v12 = (uint64_t)(v9 - (void)v4) >> 1;
    if (v12 <= v8 + 1) {
      unint64_t v12 = v8 + 1;
    }
    if (v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13)
    {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 80, v13);
      uint64_t v4 = *(int **)(a1 + 64);
      float v7 = *(int **)(a1 + 72);
    }
    else
    {
      uint64_t v14 = 0;
    }
    float v15 = (int *)&v14[4 * v8];
    uint64_t v16 = &v14[4 * v13];
    *float v15 = *a2;
    uint64_t v10 = v15 + 1;
    while (v7 != v4)
    {
      int v17 = *--v7;
      *--float v15 = v17;
    }
    *(void *)(a1 + 64) = v15;
    *(void *)(a1 + 72) = v10;
    *(void *)(a1 + 80) = v16;
    if (v4) {
      operator delete(v4);
    }
  }
  else
  {
    *float v7 = *a2;
    uint64_t v10 = v7 + 1;
  }
  unint64_t v18 = *(void *)(a1 + 32);
  *(void *)(a1 + 72) = v10;
  int v19 = *(char **)(a1 + 24);
  if ((unint64_t)v19 >= v18)
  {
    float v21 = *(char **)(a1 + 16);
    uint64_t v22 = (v19 - v21) >> 2;
    if ((unint64_t)(v22 + 1) >> 62) {
      goto LABEL_55;
    }
    unint64_t v23 = v18 - (void)v21;
    unint64_t v24 = (uint64_t)(v18 - (void)v21) >> 1;
    if (v24 <= v22 + 1) {
      unint64_t v24 = v22 + 1;
    }
    if (v23 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v25 = v24;
    }
    if (v25)
    {
      uint64_t v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 32, v25);
      float v21 = *(char **)(a1 + 16);
      int v19 = *(char **)(a1 + 24);
    }
    else
    {
      uint64_t v26 = 0;
    }
    uint64_t v27 = &v26[4 * v22];
    size_t v28 = &v26[4 * v25];
    *(_DWORD *)uint64_t v27 = *(_DWORD *)(a1 + 88);
    int v20 = v27 + 4;
    while (v19 != v21)
    {
      int v29 = *((_DWORD *)v19 - 1);
      v19 -= 4;
      *((_DWORD *)v27 - 1) = v29;
      v27 -= 4;
    }
    *(void *)(a1 + 16) = v27;
    *(void *)(a1 + ++*(void *)(result + 24) = v20;
    *(void *)(a1 + 32) = v28;
    if (v21) {
      operator delete(v21);
    }
  }
  else
  {
    *(_DWORD *)int v19 = *(_DWORD *)(a1 + 88);
    int v20 = v19 + 4;
  }
  unint64_t v30 = *(void *)(a1 + 56);
  *(void *)(a1 + ++*(void *)(result + 24) = v20;
  BOOL v31 = *(char **)(a1 + 48);
  if ((unint64_t)v31 >= v30)
  {
    uint64_t v33 = *(char **)(a1 + 40);
    uint64_t v34 = (v31 - v33) >> 2;
    if (!((unint64_t)(v34 + 1) >> 62))
    {
      unint64_t v35 = v30 - (void)v33;
      unint64_t v36 = (uint64_t)(v30 - (void)v33) >> 1;
      if (v36 <= v34 + 1) {
        unint64_t v36 = v34 + 1;
      }
      if (v35 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v37 = v36;
      }
      if (v37)
      {
        int v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 56, v37);
        uint64_t v33 = *(char **)(a1 + 40);
        BOOL v31 = *(char **)(a1 + 48);
      }
      else
      {
        int v38 = 0;
      }
      float v39 = &v38[4 * v34];
      float v40 = &v38[4 * v37];
      *(_DWORD *)float v39 = *(_DWORD *)(a1 + 88);
      uint64_t v32 = v39 + 4;
      while (v31 != v33)
      {
        int v41 = *((_DWORD *)v31 - 1);
        v31 -= 4;
        *((_DWORD *)v39 - 1) = v41;
        v39 -= 4;
      }
      *(void *)(a1 + 40) = v39;
      *(void *)(a1 + 48) = v32;
      *(void *)(a1 + 56) = v40;
      if (v33) {
        operator delete(v33);
      }
      goto LABEL_51;
    }
LABEL_55:
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  *(_DWORD *)BOOL v31 = *(_DWORD *)(a1 + 88);
  uint64_t v32 = v31 + 4;
LABEL_51:
  *(void *)(a1 + 48) = v32;
LABEL_52:
  int v42 = *(_DWORD *)(a1 + 88);
  *(_DWORD *)(a1 + 88) = v42 + 1;
  return fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>,false>::Insert(a1, a2, v42);
}

uint64_t fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>,false>::Insert(uint64_t a1, int *a2, int a3)
{
  unsigned int v3 = a3;
  if (a3 >= 1)
  {
    uint64_t v6 = *(void *)(a1 + 64);
    while (1)
    {
      unsigned int v7 = v3 - 1;
      uint64_t v8 = (v3 - 1) >> 1;
      if (fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::operator()(a1 + 8, **(void **)a1 + 40 * *(int *)(v6 + 4 * v8), **(void **)a1 + 40 * *a2))
      {
        break;
      }
      uint64_t v9 = *(void *)(a1 + 40);
      uint64_t v10 = *(int *)(v9 + 4 * v3);
      uint64_t v11 = *(int *)(v9 + 4 * v8);
      *(_DWORD *)(v9 + 4 * v3) = v11;
      uint64_t v12 = *(void *)(a1 + 16);
      *(_DWORD *)(v12 + 4 * v11) = v3;
      *(_DWORD *)(v9 + 4 * v8) = v10;
      *(_DWORD *)(v12 + 4 * v10) = v8;
      uint64_t v6 = *(void *)(a1 + 64);
      LODWORD(v10) = *(_DWORD *)(v6 + 4 * v3);
      *(_DWORD *)(v6 + 4 * v3) = *(_DWORD *)(v6 + 4 * v8);
      *(_DWORD *)(v6 + 4 * v8) = v10;
      unsigned int v3 = v7 >> 1;
      if (v7 <= 1) {
        return *(unsigned int *)(*(void *)(a1 + 40) + 4 * (int)v8);
      }
    }
  }
  LODWORD(v8) = v3;
  return *(unsigned int *)(*(void *)(a1 + 40) + 4 * (int)v8);
}

uint64_t fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>,false>::Pop(uint64_t a1)
{
  uint64_t v1 = *(_DWORD **)(a1 + 64);
  uint64_t v2 = *v1;
  uint64_t v3 = *(int *)(a1 + 88) - 1;
  uint64_t v4 = *(int **)(a1 + 40);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[v3];
  int *v4 = v6;
  uint64_t v7 = *(void *)(a1 + 16);
  *(_DWORD *)(v7 + 4 * v6) = 0;
  v4[v3] = v5;
  *(_DWORD *)(v7 + 4 * v5) = v3;
  LODWORD(v4) = *v1;
  *uint64_t v1 = v1[v3];
  v1[v3] = v4;
  --*(_DWORD *)(a1 + 88);
  fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>,false>::Heapify(a1, 0);
  return v2;
}

BOOL fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>,false>::Heapify(BOOL result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = result + 8;
  while (1)
  {
    uint64_t v5 = (2 * a2) | 1u;
    if ((int)v5 >= *(_DWORD *)(v3 + 88)
      || !(uint64_t result = fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::operator()(v4, **(void **)v3 + 40 * *(int *)(*(void *)(v3 + 64) + 4 * (int)v5), **(void **)v3 + 40 * *(int *)(*(void *)(v3 + 64) + 4 * (int)a2))))
    {
      uint64_t v5 = a2;
    }
    unsigned int v6 = 2 * a2 + 2;
    if ((signed int)v6 < *(_DWORD *)(v3 + 88))
    {
      uint64_t result = fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::operator()(v4, **(void **)v3 + 40 * *(int *)(*(void *)(v3 + 64) + 4 * (int)v6), **(void **)v3 + 40 * *(int *)(*(void *)(v3 + 64) + 4 * (int)v5));
      if (result) {
        uint64_t v5 = v6;
      }
      else {
        uint64_t v5 = v5;
      }
    }
    if (v5 == a2) {
      break;
    }
    uint64_t v7 = *(void *)(v3 + 40);
    uint64_t v8 = *(int *)(v7 + 4 * (int)a2);
    uint64_t v9 = *(int *)(v7 + 4 * (int)v5);
    *(_DWORD *)(v7 + 4 * (int)a2) = v9;
    uint64_t v10 = *(void *)(v3 + 16);
    *(_DWORD *)(v10 + 4 * v9) = a2;
    *(_DWORD *)(v7 + 4 * (int)v5) = v8;
    *(_DWORD *)(v10 + 4 * v8) = v5;
    uint64_t v11 = *(void *)(v3 + 64);
    LODWORD(v8) = *(_DWORD *)(v11 + 4 * (int)a2);
    *(_DWORD *)(v11 + 4 * (int)a2) = *(_DWORD *)(v11 + 4 * (int)v5);
    *(_DWORD *)(v11 + 4 * (int)v5) = v8;
    a2 = v5;
  }
  return result;
}

uint64_t fst::SingleShortestPath<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>(uint64_t a1, uint64_t *a2, uint64_t *a3, _DWORD *a4, char **a5)
{
  a5[1] = *a5;
  *a4 = -1;
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 24))(a1) == -1) {
    return 1;
  }
  memset(v110, 0, sizeof(v110));
  uint64_t v88 = *a3;
  uint64_t v10 = *((unsigned int *)a3 + 3);
  if (v10 == -1) {
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero((uint64_t)&v106);
  std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::__clear[abi:ne180100](a2);
  (*(void (**)(void))(**(void **)(v88 + 16) + 56))(*(void *)(v88 + 16));
  if (a3[3] != 1)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(v102, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(v102, "ERROR");
    }
    int v17 = fst::LogMessage::LogMessage((fst *)&v97, (uint64_t)v102);
    unint64_t v18 = (void *)fst::cerr(v17);
    int v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"SingleShortestPath: for nshortest > 1, use ShortestPath", 55);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" instead", 8);
LABEL_21:
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v97);
    if (SHIBYTE(__p) < 0) {
      operator delete(*(void **)v102);
    }
    goto LABEL_23;
  }
  fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero((uint64_t)v102);
  LODWORD(v97) = 0;
  LODWORD(v97) = *((_DWORD *)a3 + 10);
  float v93 = *(float *)v102;
  if (*(float *)&v97 != *(float *)v102) {
    goto LABEL_10;
  }
  LODWORD(v97) = 0;
  LODWORD(v97) = *((_DWORD *)a3 + 11);
  float v93 = 0.0;
  float v93 = *((float *)a3 + 12);
  float v89 = *(float *)&v102[4];
  float v114 = *(float *)&v102[8];
  if (*(float *)&v97 != *(float *)&v102[4]
    || v93 != v114
    || (uint64_t v11 = (const void *)a3[7], v12 = a3[8] - (void)v11, v13 = __p, v12 != v104 - (unsigned char *)__p)
    || memcmp(v11, __p, v12))
  {
LABEL_10:
    if (__p)
    {
      int v104 = __p;
      operator delete(__p);
    }
LABEL_12:
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(v102, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(v102, "ERROR");
    }
    uint64_t v14 = fst::LogMessage::LogMessage((fst *)&v97, (uint64_t)v102);
    float v15 = (void *)fst::cerr(v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"SingleShortestPath: weight and state thresholds not applicable", 62);
    goto LABEL_21;
  }
  uint64_t v86 = a4;
  int v21 = *((_DWORD *)a3 + 20);
  if (v13)
  {
    int v104 = v13;
    operator delete(v13);
  }
  if (v21 != -1) {
    goto LABEL_12;
  }
  for (; 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3) < (int)v10; a5[1] = v26)
  {
    fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero((uint64_t)v102);
    unint64_t v22 = a2[1];
    if (v22 >= a2[2])
    {
      uint64_t v23 = std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__push_back_slow_path<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int> const&>(a2, (uint64_t)v102);
    }
    else
    {
      std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__construct_one_at_end[abi:ne180100]<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int> const&>((uint64_t)a2, (uint64_t)v102);
      uint64_t v23 = v22 + 40;
    }
    a2[1] = v23;
    if (__p)
    {
      int v104 = __p;
      operator delete(__p);
    }
    v102[0] = 0;
    std::vector<BOOL>::push_back((uint64_t)v110, v102);
    unint64_t v25 = a5[1];
    unint64_t v24 = (unint64_t)a5[2];
    if ((unint64_t)v25 >= v24)
    {
      uint64_t v27 = *a5;
      uint64_t v28 = (v25 - *a5) >> 4;
      unint64_t v29 = v28 + 1;
      if ((unint64_t)(v28 + 1) >> 60) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v30 = v24 - (void)v27;
      if (v30 >> 3 > v29) {
        unint64_t v29 = v30 >> 3;
      }
      if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v31 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v31 = v29;
      }
      if (v31)
      {
        uint64_t v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a5 + 2), v31);
        uint64_t v27 = *a5;
        unint64_t v25 = a5[1];
      }
      else
      {
        uint64_t v32 = 0;
      }
      uint64_t v33 = &v32[16 * v28];
      *(_DWORD *)uint64_t v33 = -1;
      *((void *)v33 + 1) = -1;
      uint64_t v34 = v33;
      if (v25 != v27)
      {
        do
        {
          *((_OWORD *)v34 - 1) = *((_OWORD *)v25 - 1);
          v34 -= 16;
          v25 -= 16;
        }
        while (v25 != v27);
        uint64_t v27 = *a5;
      }
      uint64_t v26 = v33 + 16;
      *a5 = v34;
      a5[1] = v33 + 16;
      a5[2] = &v32[16 * v31];
      if (v27) {
        operator delete(v27);
      }
    }
    else
    {
      *(_DWORD *)unint64_t v25 = -1;
      *((void *)v25 + 1) = -1;
      uint64_t v26 = v25 + 16;
    }
  }
  fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::One((uint64_t)v102);
  unint64_t v35 = a2[1];
  if (v35 >= a2[2])
  {
    uint64_t v36 = std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__push_back_slow_path<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int> const&>(a2, (uint64_t)v102);
  }
  else
  {
    std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__construct_one_at_end[abi:ne180100]<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int> const&>((uint64_t)a2, (uint64_t)v102);
    uint64_t v36 = v35 + 40;
  }
  a2[1] = v36;
  if (__p)
  {
    int v104 = __p;
    operator delete(__p);
  }
  uint64_t v38 = (uint64_t)(a5 + 2);
  unint64_t v37 = (unint64_t)a5[2];
  float v39 = a5[1];
  if ((unint64_t)v39 >= v37)
  {
    int v41 = *a5;
    uint64_t v42 = (v39 - *a5) >> 4;
    unint64_t v43 = v42 + 1;
    if ((unint64_t)(v42 + 1) >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v44 = v37 - (void)v41;
    if (v44 >> 3 > v43) {
      unint64_t v43 = v44 >> 3;
    }
    if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v45 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v45 = v43;
    }
    if (v45)
    {
      float v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a5 + 2), v45);
      int v41 = *a5;
      float v39 = a5[1];
    }
    else
    {
      float v46 = 0;
    }
    int v47 = &v46[16 * v42];
    uint64_t v48 = &v46[16 * v45];
    *(_DWORD *)int v47 = -1;
    *((void *)v47 + 1) = -1;
    float v40 = v47 + 16;
    if (v39 != v41)
    {
      do
      {
        *((_OWORD *)v47 - 1) = *((_OWORD *)v39 - 1);
        v47 -= 16;
        v39 -= 16;
      }
      while (v39 != v41);
      int v41 = *a5;
    }
    *a5 = v47;
    a5[1] = v40;
    a5[2] = v48;
    if (v41) {
      operator delete(v41);
    }
  }
  else
  {
    *(_DWORD *)float v39 = -1;
    *((void *)v39 + 1) = -1;
    float v40 = v39 + 16;
  }
  a5[1] = v40;
  (*(void (**)(void, uint64_t))(**(void **)(v88 + 16) + 24))(*(void *)(v88 + 16), v10);
  v102[0] = 1;
  std::vector<BOOL>::push_back((uint64_t)v110, v102);
  do
  {
    if ((*(uint64_t (**)(void))(**(void **)(v88 + 16) + 48))(*(void *)(v88 + 16))) {
      goto LABEL_189;
    }
    uint64_t v87 = (*(uint64_t (**)(void))(**(void **)(v88 + 16) + 16))(*(void *)(v88 + 16));
    (*(void (**)(void))(**(void **)(v88 + 16) + 32))(*(void *)(v88 + 16));
    *(void *)((char *)v110[0] + (((unint64_t)(int)v87 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v87);
    uint64_t v49 = *a2 + 40 * (int)v87;
    *(_DWORD *)v102 = *(_DWORD *)v49;
    *(void *)&v102[4] = *(void *)(v49 + 4);
    int v104 = 0;
    uint64_t v105 = 0;
    __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(v49 + 16), *(void *)(v49 + 24), (uint64_t)(*(void *)(v49 + 24) - *(void *)(v49 + 16)) >> 2);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(&v97, a1, v87);
    fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero((uint64_t)&v93);
    float v89 = *(float *)&v97;
    float v114 = v93;
    v50.n128_u32[0] = v97;
    if (*(float *)&v97 != v93
      || (float v89 = *((float *)&v97 + 1),
          float v114 = *(float *)&v98,
          float v112 = *((float *)&v94 + 1),
          float v113 = *(float *)&v94,
          v50.n128_u32[0] = HIDWORD(v97),
          *((float *)&v97 + 1) != *(float *)&v94)
      || (v50.n128_f32[0] = v114, v114 != v112))
    {
      BOOL v51 = 1;
      goto LABEL_82;
    }
    uint64_t v52 = v95;
    if (v100 - (unsigned char *)v99 == v96 - (unsigned char *)v95)
    {
      BOOL v51 = memcmp(v99, v95, v100 - (unsigned char *)v99) != 0;
LABEL_82:
      uint64_t v52 = v95;
      if (!v95) {
        goto LABEL_84;
      }
LABEL_83:
      uint64_t v96 = v52;
      operator delete(v52);
      goto LABEL_84;
    }
    BOOL v51 = 1;
    if (v95) {
      goto LABEL_83;
    }
LABEL_84:
    if (v99)
    {
      uint64_t v100 = (char *)v99;
      operator delete(v99);
    }
    if (v51)
    {
      (*(void (**)(float *__return_ptr, uint64_t, uint64_t, __n128))(*(void *)a1 + 32))(&v93, a1, v87, v50);
      fst::Times<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>((uint64_t)v102, (uint64_t)&v93, (uint64_t)&v97);
      if (v95)
      {
        uint64_t v96 = v95;
        operator delete(v95);
      }
      fst::Plus<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>(&v106, (uint64_t)&v97, (uint64_t)&v93);
      float v89 = v106;
      float v114 = v93;
      if (v106 == v93
        && (float v114 = *((float *)&v107 + 1),
            float v89 = *(float *)&v107,
            float v112 = *((float *)&v94 + 1),
            float v113 = *(float *)&v94,
            *(float *)&v107 == *(float *)&v94)
        && v114 == v112)
      {
        unsigned int v54 = v95;
        if (v109 - v108 != v96 - (unsigned char *)v95)
        {
          BOOL v53 = 1;
          if (!v95)
          {
LABEL_95:
            if (v53)
            {
              fst::Plus<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>(&v106, (uint64_t)&v97, (uint64_t)&v93);
              float v106 = v93;
              uint64_t v107 = v94;
              std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v108, (char *)v95, (uint64_t)v96, (v96 - (unsigned char *)v95) >> 2);
              if (v95)
              {
                uint64_t v96 = v95;
                operator delete(v95);
              }
              *uint64_t v86 = v87;
            }
            BOOL v55 = fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Member((uint64_t)&v106);
            if (*((unsigned char *)a3 + 34)) {
              int v56 = 5;
            }
            else {
              int v56 = 0;
            }
            if (*((unsigned char *)a3 + 34)) {
              BOOL v57 = 0;
            }
            else {
              BOOL v57 = v55;
            }
            if (v55) {
              int v58 = v56;
            }
            else {
              int v58 = 1;
            }
            if (v99)
            {
              uint64_t v100 = (char *)v99;
              operator delete(v99);
            }
            if (!v57) {
              goto LABEL_176;
            }
            goto LABEL_111;
          }
LABEL_94:
          uint64_t v96 = v54;
          operator delete(v54);
          goto LABEL_95;
        }
        BOOL v53 = memcmp(v108, v95, v109 - v108) != 0;
      }
      else
      {
        BOOL v53 = 1;
      }
      unsigned int v54 = v95;
      if (!v95) {
        goto LABEL_95;
      }
      goto LABEL_94;
    }
LABEL_111:
    unint64_t v101 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t *, __n128))(*(void *)a1 + 136))(a1, v87, &v97, v50);
    while (1)
    {
      if (v97)
      {
        if ((*(uint64_t (**)(uint64_t))(*(void *)v97 + 24))(v97)) {
          goto LABEL_168;
        }
        if (v97)
        {
          uint64_t v59 = (*(uint64_t (**)(uint64_t))(*(void *)v97 + 32))(v97);
          goto LABEL_140;
        }
      }
      else if (v101 >= (unint64_t)v99)
      {
LABEL_168:
        int v58 = 0;
        goto LABEL_172;
      }
      uint64_t v59 = v98 + 56 * v101;
LABEL_140:
      while (1)
      {
        uint64_t v73 = *a2;
        unint64_t v74 = *(int *)(v59 + 48);
        if (0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3) > v74) {
          break;
        }
        fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero((uint64_t)&v93);
        unint64_t v60 = a2[1];
        if (v60 >= a2[2])
        {
          uint64_t v61 = std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__push_back_slow_path<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int> const&>(a2, (uint64_t)&v93);
        }
        else
        {
          std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__construct_one_at_end[abi:ne180100]<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int> const&>((uint64_t)a2, (uint64_t)&v93);
          uint64_t v61 = v60 + 40;
        }
        a2[1] = v61;
        if (v95)
        {
          uint64_t v96 = v95;
          operator delete(v95);
        }
        LOBYTE(v93) = 0;
        std::vector<BOOL>::push_back((uint64_t)v110, &v93);
        int v63 = a5[1];
        unint64_t v62 = (unint64_t)a5[2];
        if ((unint64_t)v63 >= v62)
        {
          uint64_t v65 = *a5;
          uint64_t v66 = (v63 - *a5) >> 4;
          unint64_t v67 = v66 + 1;
          if ((unint64_t)(v66 + 1) >> 60) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v68 = v62 - (void)v65;
          if (v68 >> 3 > v67) {
            unint64_t v67 = v68 >> 3;
          }
          if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v69 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v69 = v67;
          }
          if (v69)
          {
            int v70 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(v38, v69);
            uint64_t v65 = *a5;
            int v63 = a5[1];
          }
          else
          {
            int v70 = 0;
          }
          uint64_t v71 = &v70[16 * v66];
          *(_DWORD *)uint64_t v71 = -1;
          *((void *)v71 + 1) = -1;
          uint64_t v72 = v71;
          if (v63 != v65)
          {
            do
            {
              *((_OWORD *)v72 - 1) = *((_OWORD *)v63 - 1);
              v72 -= 16;
              v63 -= 16;
            }
            while (v63 != v65);
            uint64_t v65 = *a5;
          }
          uint64_t v64 = v71 + 16;
          *a5 = v72;
          a5[1] = v71 + 16;
          a5[2] = &v70[16 * v69];
          if (v65) {
            operator delete(v65);
          }
        }
        else
        {
          *(_DWORD *)int v63 = -1;
          *((void *)v63 + 1) = -1;
          uint64_t v64 = v63 + 16;
        }
        a5[1] = v64;
      }
      fst::Times<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>((uint64_t)v102, v59 + 8, (uint64_t)&v93);
      int v75 = (float *)(v73 + 40 * (int)v74);
      fst::Plus<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>(v75, (uint64_t)&v93, (uint64_t)&v89);
      float v114 = 0.0;
      float v114 = *v75;
      float v113 = v89;
      v76.n128_f32[0] = v114;
      if (v114 != v89) {
        goto LABEL_144;
      }
      float v114 = 0.0;
      float v114 = v75[1];
      float v113 = 0.0;
      float v113 = v75[2];
      float v111 = *((float *)&v90 + 1);
      float v112 = *(float *)&v90;
      v76.n128_f32[0] = v114;
      if (v114 != *(float *)&v90 || (v76.n128_f32[0] = v113, v113 != v111))
      {
LABEL_144:
        BOOL v77 = 1;
        goto LABEL_145;
      }
      uint64_t v83 = v73 + 40 * (int)v74;
      uint64_t v84 = *(const void **)(v83 + 16);
      size_t v85 = *(void *)(v83 + 24) - (void)v84;
      int v78 = v91;
      if (v85 == v92 - (unsigned char *)v91)
      {
        BOOL v77 = memcmp(v84, v91, v85) != 0;
LABEL_145:
        int v78 = v91;
        if (!v91) {
          goto LABEL_147;
        }
LABEL_146:
        int v92 = v78;
        operator delete(v78);
        goto LABEL_147;
      }
      BOOL v77 = 1;
      if (v91) {
        goto LABEL_146;
      }
LABEL_147:
      if (!v77) {
        goto LABEL_159;
      }
      fst::Plus<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>((float *)(v73 + 40 * (int)v74), (uint64_t)&v93, (uint64_t)&v89);
      float *v75 = v89;
      *(void *)(v75 + 1) = v90;
      if (v75 != &v89) {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v73 + 40 * (int)v74 + 16), (char *)v91, (uint64_t)v92, (v92 - (unsigned char *)v91) >> 2);
      }
      if (v91)
      {
        int v92 = v91;
        operator delete(v91);
      }
      if (!fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Member(v73 + 40 * (int)v74)) {
        break;
      }
      if (v97) {
        uint64_t v79 = (*(uint64_t (**)(uint64_t))(*(void *)v97 + 48))(v97);
      }
      else {
        uint64_t v79 = v101;
      }
      unint64_t v80 = *(int *)(v59 + 48);
      uint64_t v81 = (uint64_t)&(*a5)[16 * v80];
      *(_DWORD *)uint64_t v81 = v87;
      *(void *)(v81 + 8) = v79;
      uint64_t v82 = **(void **)(v88 + 16);
      if ((*(void *)((char *)v110[0] + ((v80 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v80))
      {
        (*(void (**)(void))(v82 + 40))();
      }
      else
      {
        (*(void (**)(void))(v82 + 24))();
        *(void *)((char *)v110[0] + (((unint64_t)*(int *)(v59 + 48) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *(_DWORD *)(v59 + 48);
      }
LABEL_159:
      if (v95)
      {
        uint64_t v96 = v95;
        operator delete(v95);
      }
      uint64_t v38 = (uint64_t)(a5 + 2);
      if (v97) {
        (*(void (**)(uint64_t, __n128))(*(void *)v97 + 40))(v97, v76);
      }
      else {
        ++v101;
      }
    }
    uint64_t v38 = (uint64_t)(a5 + 2);
    if (v95)
    {
      uint64_t v96 = v95;
      operator delete(v95);
    }
    int v58 = 1;
LABEL_172:
    if (v97)
    {
      (*(void (**)(uint64_t))(*(void *)v97 + 8))(v97);
    }
    else if (v100)
    {
      --*(_DWORD *)v100;
    }
LABEL_176:
    if (__p)
    {
      int v104 = __p;
      operator delete(__p);
    }
  }
  while (!v58);
  if (v58 != 5)
  {
LABEL_23:
    uint64_t v16 = 0;
    goto LABEL_24;
  }
LABEL_189:
  uint64_t v16 = 1;
LABEL_24:
  if (v108)
  {
    v109 = v108;
    operator delete(v108);
  }
  if (v110[0]) {
    operator delete(v110[0]);
  }
  return v16;
}

void sub_1B22A9170(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34)
{
  uint64_t v36 = *(void **)(v34 - 152);
  if (v36)
  {
    *(void *)(v34 - 144) = v36;
    operator delete(v36);
  }
  unint64_t v37 = *(void **)(v34 - 128);
  if (v37) {
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::SingleShortestPathBacktrace<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  (*(void (**)(uint64_t))(*(void *)a2 + 224))(a2);
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 280))(a2, v8);
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 288))(a2, v9);
  if (a4 != -1)
  {
    int v10 = -1;
    uint64_t v11 = a4;
    LODWORD(v12) = -1;
    while (1)
    {
      int v13 = v12;
      uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2);
      if (v10 == -1)
      {
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(v29, a1, a4);
        (*(void (**)(uint64_t, uint64_t, void **))(*(void *)a2 + 184))(a2, v12, v29);
        if (__p)
        {
          unint64_t v31 = __p;
          operator delete(__p);
        }
        goto LABEL_18;
      }
      uint64_t v28 = 0;
      (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 136))(a1, v11, v26);
      uint64_t v14 = *(void *)(*a3 + 16 * v10 + 8);
      if (!v26[0]) {
        break;
      }
      (*(void (**)(void, uint64_t))(*(void *)v26[0] + 64))(v26[0], v14);
      if (!v26[0])
      {
        uint64_t v14 = v28;
        goto LABEL_11;
      }
      uint64_t v15 = (*(uint64_t (**)(void))(*(void *)v26[0] + 32))(v26[0]);
LABEL_12:
      uint64_t v19 = *(void *)v15;
      int v20 = *(_DWORD *)(v15 + 8);
      uint64_t v21 = *(void *)(v15 + 12);
      uint64_t v23 = 0;
      uint64_t v24 = 0;
      unint64_t v22 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v22, *(const void **)(v15 + 24), *(void *)(v15 + 32), (uint64_t)(*(void *)(v15 + 32) - *(void *)(v15 + 24)) >> 2);
      int v25 = v13;
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a2 + 208))(a2, v12, &v19);
      if (v22)
      {
        uint64_t v23 = v22;
        operator delete(v22);
      }
      if (v26[0])
      {
        (*(void (**)(void))(*(void *)v26[0] + 8))(v26[0]);
      }
      else if (v27)
      {
        --*v27;
      }
LABEL_18:
      int v10 = v11;
      uint64_t v11 = *(unsigned int *)(*a3 + 16 * (int)v11);
      if (v11 == -1) {
        goto LABEL_21;
      }
    }
    uint64_t v28 = *(void *)(*a3 + 16 * v10 + 8);
LABEL_11:
    uint64_t v15 = v26[1] + 56 * v14;
    goto LABEL_12;
  }
  uint64_t v12 = 0xFFFFFFFFLL;
LABEL_21:
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 176))(a2, v12);
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 4, 0)) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 192))(a2, 4, 4);
  }
  unint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  unint64_t v17 = fst::ShortestPathProperties(v16, 0);
  return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 192))(a2, v17, 0x3FFFFFFF0007);
}

void sub_1B22A97E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ShortestDistance<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  v9[0] = a1;
  v9[1] = (uint64_t)a2;
  v9[2] = *(void *)a3;
  int v10 = *(_DWORD *)(a3 + 16);
  char v11 = *(unsigned char *)(a3 + 20);
  char v12 = 0;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  memset(v16, 0, sizeof(v16));
  std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::__clear[abi:ne180100](a2);
  fst::ShortestDistanceState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::ShortestDistance(v9, *(_DWORD *)(a3 + 12));
  if (v16[28])
  {
    std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::__clear[abi:ne180100](a2);
    fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::NoWeight((uint64_t)v6);
    std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::resize(a2, 1uLL, (uint64_t)v6);
    if (__p)
    {
      uint64_t v8 = __p;
      operator delete(__p);
    }
  }
  return fst::ShortestDistanceState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::~ShortestDistanceState((uint64_t)v9);
}

void sub_1B22A9924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14)
{
  if (__p) {
    operator delete(__p);
  }
  fst::ShortestDistanceState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::~ShortestDistanceState((uint64_t)&a14);
  _Unwind_Resume(a1);
}

BOOL fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Member(uint64_t a1)
{
  BOOL result = fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>::Member((float *)a1);
  if (result)
  {
    uint64_t v3 = (float *)fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>::Zero();
    return *(float *)a1 != *v3
        || *(float *)(a1 + 4) != v3[1]
        || *(float *)(a1 + 8) != v3[2]
        || *(void *)(a1 + 16) == *(void *)(a1 + 24);
  }
  return result;
}

uint64_t fst::Reverse<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>(uint64_t a1, uint64_t *a2, char a3)
{
  (*(void (**)(uint64_t *))(*a2 + 224))(a2);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  (*(void (**)(uint64_t *, uint64_t))(*a2 + 280))(a2, v6);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  (*(void (**)(uint64_t *, uint64_t))(*a2 + 288))(a2, v7);
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 1, 0))
  {
    int v8 = fst::CountStates<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>(a1);
    (*(void (**)(uint64_t *, void))(*a2 + 248))(a2, (v8 + 1));
  }
  unsigned int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  uint64_t v83 = 0;
  unsigned int v40 = v9;
  if (a3)
  {
LABEL_51:
    uint64_t v10 = (*(uint64_t (**)(uint64_t *))(*a2 + 200))(a2);
    int v21 = 1;
    goto LABEL_52;
  }
  LODWORD(v61) = 0;
  (*(void (**)(uint64_t, void **))(*(void *)a1 + 128))(a1, &__p);
  uint64_t v10 = 0xFFFFFFFFLL;
  while (1)
  {
    if (!__p)
    {
      if ((int)v61 >= (int)v60) {
        goto LABEL_36;
      }
LABEL_10:
      uint64_t v13 = v61;
      goto LABEL_11;
    }
    char v11 = (*(uint64_t (**)(void *))(*(void *)__p + 16))(__p);
    char v12 = __p;
    if (v11) {
      goto LABEL_34;
    }
    if (!__p) {
      goto LABEL_10;
    }
    uint64_t v13 = (*(uint64_t (**)(void))(*(void *)__p + 24))();
LABEL_11:
    (*(void (**)(unsigned char *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(v74, a1, v13);
    fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero((uint64_t)&v79);
    float v55 = *(float *)v74;
    LODWORD(v52[0]) = v79;
    v14.n128_u32[0] = *(_DWORD *)v74;
    if (*(float *)v74 != *(float *)&v79
      || (float v55 = *(float *)&v74[4],
          v52[0] = *(float *)&v74[8],
          LODWORD(v49[0]) = HIDWORD(v79),
          LODWORD(v71) = v80,
          v14.n128_u32[0] = *(_DWORD *)&v74[4],
          *(float *)&v74[4] != *((float *)&v79 + 1))
      || (v14.n128_f32[0] = v52[0], v52[0] != *(float *)&v71))
    {
      BOOL v16 = 0;
LABEL_17:
      long long v15 = v81;
      if (!v81) {
        goto LABEL_19;
      }
LABEL_18:
      uint64_t v82 = v15;
      operator delete(v15);
      goto LABEL_19;
    }
    long long v15 = v81;
    if (&v75[-*(void *)&v74[16]] == (char *)(v82 - v81))
    {
      BOOL v16 = memcmp(*(const void **)&v74[16], v81, (size_t)&v75[-*(void *)&v74[16]]) == 0;
      goto LABEL_17;
    }
    BOOL v16 = 0;
    if (v81) {
      goto LABEL_18;
    }
LABEL_19:
    if (*(void *)&v74[16])
    {
      int v75 = *(char **)&v74[16];
      operator delete(*(void **)&v74[16]);
    }
    int v17 = 2 * (v10 != -1);
    unsigned int v18 = v10 == -1 ? v13 : -1;
    if (v16)
    {
      int v17 = 4;
      uint64_t v10 = v10;
    }
    else
    {
      uint64_t v10 = v18;
    }
    if ((v17 | 4) != 4) {
      break;
    }
    if (__p) {
      (*(void (**)(void *, __n128))(*(void *)__p + 32))(__p, v14);
    }
    else {
      LODWORD(v61) = v61 + 1;
    }
  }
  char v12 = __p;
LABEL_34:
  if (v12) {
    (*(void (**)(void *))(*(void *)v12 + 8))(v12);
  }
LABEL_36:
  if (v10 == -1) {
    goto LABEL_51;
  }
  (*(void (**)(unsigned char *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(v74, a1, v10);
  fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::One((uint64_t)&v79);
  LODWORD(__p) = *(_DWORD *)v74;
  float v55 = *(float *)&v79;
  v19.n128_u32[0] = *(_DWORD *)v74;
  BOOL v20 = *(float *)v74 != *(float *)&v79
     || (LODWORD(__p) = *(_DWORD *)&v74[4],
         float v55 = *(float *)&v74[8],
         v52[0] = *((float *)&v79 + 1),
         LODWORD(v49[0]) = v80,
         v19.n128_u32[0] = *(_DWORD *)&v74[4],
         *(float *)&v74[4] != *((float *)&v79 + 1))
     || (v19.n128_f32[0] = v55, v55 != *(float *)v49)
     || &v75[-*(void *)&v74[16]] != (char *)(v82 - v81)
     || memcmp(*(const void **)&v74[16], v81, (size_t)&v75[-*(void *)&v74[16]]) != 0;
  if (v81)
  {
    uint64_t v82 = v81;
    operator delete(v81);
  }
  if (*(void *)&v74[16])
  {
    int v75 = *(char **)&v74[16];
    operator delete(*(void **)&v74[16]);
  }
  if (v20)
  {
    __p = 0;
    uint64_t v60 = 0;
    unint64_t v61 = 0;
    *(void *)unint64_t v74 = &__p;
    *(void *)&v74[8] = 0;
    *(void *)&v74[16] = 0;
    int v75 = (char *)&v83;
    fst::DfsVisit<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::SccVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>(a1, (uint64_t)v74);
  }
  int v21 = 0;
LABEL_52:
  unsigned int v73 = 0;
  (*(void (**)(uint64_t, uint64_t *, __n128))(*(void *)a1 + 128))(a1, &v71, v19);
  while (2)
  {
    if (!v71)
    {
      if ((int)v73 >= v72) {
        goto LABEL_119;
      }
      goto LABEL_58;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(void *)v71 + 16))(v71))
    {
      if (v71)
      {
        uint64_t v22 = (*(uint64_t (**)(void))(*(void *)v71 + 24))();
LABEL_59:
        int v23 = v22 + v21;
        while ((*(int (**)(uint64_t *))(*a2 + 160))(a2) <= v23)
          (*(void (**)(uint64_t *))(*a2 + 200))(a2);
        if (v22 == v40)
        {
          fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::One((uint64_t)v68);
          (*(void (**)(uint64_t *, void, unsigned char *))(*a2 + 184))(a2, (v22 + v21), v68);
          if (v69)
          {
            int v70 = v69;
            operator delete(v69);
          }
        }
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(&v79, a1, v22);
        fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero((uint64_t)v74);
        LODWORD(__p) = v79;
        float v55 = *(float *)v74;
        v24.n128_u32[0] = v79;
        if (*(float *)&v79 != *(float *)v74
          || (LODWORD(__p) = HIDWORD(v79),
              float v55 = *(float *)&v80,
              v52[0] = *(float *)&v74[4],
              LODWORD(v49[0]) = *(_DWORD *)&v74[8],
              v24.n128_u32[0] = HIDWORD(v79),
              *((float *)&v79 + 1) != *(float *)&v74[4])
          || (v24.n128_f32[0] = v55, v55 != *(float *)v49))
        {
          BOOL v25 = 1;
          goto LABEL_69;
        }
        uint64_t v26 = *(char **)&v74[16];
        if ((char *)(v82 - v81) == &v75[-*(void *)&v74[16]])
        {
          BOOL v25 = memcmp(v81, *(const void **)&v74[16], v82 - v81) != 0;
LABEL_69:
          uint64_t v26 = *(char **)&v74[16];
          if (*(void *)&v74[16])
          {
LABEL_70:
            int v75 = v26;
            operator delete(v26);
          }
        }
        else
        {
          BOOL v25 = 1;
          if (*(void *)&v74[16]) {
            goto LABEL_70;
          }
        }
        if ((v21 & v25) != 0)
        {
          fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Reverse((uint64_t)&v79, (uint64_t)&v64);
          *(void *)unint64_t v74 = 0;
          *(_DWORD *)&v74[8] = v64;
          *(void *)&v74[12] = v65;
          __n128 v76 = 0;
          uint64_t v77 = 0;
          int v75 = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v75, v66, (uint64_t)v67, (v67 - (unsigned char *)v66) >> 2);
          int v78 = v22 + v21;
          if (v66)
          {
            unint64_t v67 = v66;
            operator delete(v66);
          }
          (*(void (**)(uint64_t *, void, unsigned char *))(*a2 + 208))(a2, 0, v74);
          if (v75)
          {
            __n128 v76 = v75;
            operator delete(v75);
          }
        }
        unint64_t v63 = 0;
        (*(void (**)(uint64_t, uint64_t, void **, __n128))(*(void *)a1 + 136))(a1, v22, &__p, v24);
LABEL_77:
        if (__p)
        {
          if ((*(unsigned int (**)(void *))(*(void *)__p + 24))(__p))
          {
            if (__p)
            {
              (*(void (**)(void))(*(void *)__p + 8))();
              goto LABEL_108;
            }
LABEL_106:
            if (v62) {
              --*v62;
            }
LABEL_108:
            if (v81)
            {
              uint64_t v82 = v81;
              operator delete(v81);
            }
            if (v71) {
              (*(void (**)(uint64_t))(*(void *)v71 + 32))(v71);
            }
            else {
              ++v73;
            }
            continue;
          }
          if (__p)
          {
            uint64_t v27 = (*(uint64_t (**)(void))(*(void *)__p + 32))();
LABEL_83:
            int v28 = *(_DWORD *)(v27 + 48);
            fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Reverse(v27 + 8, (uint64_t)&v55);
            uint64_t v29 = (v28 + v21);
            if (v29 == v10) {
              char v30 = v21;
            }
            else {
              char v30 = 1;
            }
            if ((v30 & 1) == 0)
            {
              (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(v49, a1, v10);
              fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Reverse((uint64_t)v49, (uint64_t)v52);
              fst::Times<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>((uint64_t)v52, (uint64_t)&v55, (uint64_t)v74);
              float v55 = *(float *)v74;
              uint64_t v56 = *(void *)&v74[4];
              std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v57, *(char **)&v74[16], (uint64_t)v75, (uint64_t)&v75[-*(void *)&v74[16]] >> 2);
              if (*(void *)&v74[16])
              {
                int v75 = *(char **)&v74[16];
                operator delete(*(void **)&v74[16]);
              }
              if (v53)
              {
                unsigned int v54 = v53;
                operator delete(v53);
              }
              if (v50)
              {
                BOOL v51 = v50;
                operator delete(v50);
              }
            }
            uint64_t v31 = *(void *)v27;
            float v44 = v55;
            uint64_t v45 = v56;
            int v47 = 0;
            uint64_t v48 = 0;
            float v46 = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v46, v57, (uint64_t)v58, (v58 - (unsigned char *)v57) >> 2);
            *(void *)unint64_t v74 = v31;
            *(float *)&v74[8] = v44;
            *(void *)&v74[12] = v45;
            __n128 v76 = 0;
            uint64_t v77 = 0;
            int v75 = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v75, v46, (uint64_t)v47, (v47 - (unsigned char *)v46) >> 2);
            int v78 = v23;
            if (v46)
            {
              int v47 = v46;
              operator delete(v46);
            }
            while (1)
            {
              int v32 = (*(uint64_t (**)(uint64_t *))(*a2 + 160))(a2);
              uint64_t v33 = *a2;
              if (v32 > (int)v29) {
                break;
              }
              (*(void (**)(uint64_t *))(v33 + 200))(a2);
            }
            (*(void (**)(uint64_t *, uint64_t, unsigned char *))(v33 + 208))(a2, v29, v74);
            if (v75)
            {
              __n128 v76 = v75;
              operator delete(v75);
            }
            if (v57)
            {
              int v58 = v57;
              operator delete(v57);
            }
            if (__p) {
              (*(void (**)(void *))(*(void *)__p + 40))(__p);
            }
            else {
              ++v63;
            }
            goto LABEL_77;
          }
        }
        else if (v63 >= v61)
        {
          goto LABEL_106;
        }
        uint64_t v27 = v60 + 56 * v63;
        goto LABEL_83;
      }
LABEL_58:
      uint64_t v22 = v73;
      goto LABEL_59;
    }
    break;
  }
  if (v71) {
    (*(void (**)(void))(*(void *)v71 + 8))();
  }
LABEL_119:
  (*(void (**)(uint64_t *, uint64_t))(*a2 + 176))(a2, v10);
  if (v10 == v40) {
    char v34 = v21;
  }
  else {
    char v34 = 1;
  }
  if ((v34 & 1) == 0)
  {
    (*(void (**)(unsigned char *__return_ptr, uint64_t, void))(*(void *)a1 + 32))(v74, a1, v40);
    fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Reverse((uint64_t)v74, (uint64_t)v41);
    (*(void (**)(uint64_t *, void, unsigned char *))(*a2 + 184))(a2, v40, v41);
    if (v42)
    {
      unint64_t v43 = v42;
      operator delete(v42);
    }
    if (*(void *)&v74[16])
    {
      int v75 = *(char **)&v74[16];
      operator delete(*(void **)&v74[16]);
    }
  }
  uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  unint64_t v36 = v83 | v35;
  uint64_t v37 = (*(uint64_t (**)(uint64_t *, uint64_t, void))(*a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  unint64_t v38 = fst::ReverseProperties(v36, v21);
  return (*(uint64_t (**)(uint64_t *, unint64_t, uint64_t))(*a2 + 192))(a2, v37 | v38, 0x3FFFFFFF0007);
}

void sub_1B22AA9C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Reverse(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  std::vector<int>::size_type v6 = (v4 - v5) >> 2;
  std::vector<int>::vector(&v12, v6);
  std::vector<int>::pointer begin = v12.__begin_;
  if (v4 != v5)
  {
    if (v6 <= 1) {
      uint64_t v8 = 1;
    }
    else {
      uint64_t v8 = (v4 - v5) >> 2;
    }
    unsigned int v9 = (int *)(*(void *)(a1 + 16) + 4 * v6 - 4);
    std::vector<int>::pointer v10 = v12.__begin_;
    do
    {
      int v11 = *v9--;
      *v10++ = v11;
      --v8;
    }
    while (v8);
  }
  *(_DWORD *)a2 = *(_DWORD *)a1;
  *(void *)(a2 + 4) = *(void *)(a1 + 4);
  *(void *)(a2 + ++*(void *)(result + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a2 + 16), begin, (uint64_t)v12.__end_, v12.__end_ - begin);
  if (v12.__begin_)
  {
    v12.__end_ = v12.__begin_;
    operator delete(v12.__begin_);
  }
}

void sub_1B22AACC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::insert(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v4 = a2;
  unint64_t v6 = a1[1];
  unint64_t v9 = a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = v9;
  if (v6 >= v9)
  {
    uint64_t v10 = *a1;
    unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6 - *a1) >> 3) + 1;
    if (v11 > 0x666666666666666) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - v10) >> 3);
    unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v8 - v10) >> 3);
    unint64_t v14 = 2 * v13;
    if (2 * v13 <= v11) {
      unint64_t v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6 - *a1) >> 3) + 1;
    }
    if (v13 >= 0x333333333333333) {
      unint64_t v15 = 0x666666666666666;
    }
    else {
      unint64_t v15 = v14;
    }
    uint64_t v22 = v7;
    if (v15) {
      BOOL v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(v7, v15);
    }
    else {
      BOOL v16 = 0;
    }
    unsigned int v18 = v16;
    __n128 v19 = &v16[40 * v12];
    BOOL v20 = v19;
    int v21 = &v16[40 * v15];
    std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::push_back[abi:ne180100](&v18, a3);
    unint64_t v4 = std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__swap_out_circular_buffer(a1, &v18, v4);
    std::__split_buffer<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::~__split_buffer((uint64_t)&v18);
  }
  else if (a2 == v6)
  {
    std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__construct_one_at_end[abi:ne180100]<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int> const&>((uint64_t)a1, a3);
  }
  else
  {
    std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__move_range((uint64_t)a1, a2, v6, a2 + 40);
    if (v4 <= a3) {
      a3 += 40 * (a1[1] > a3);
    }
    fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::operator=(v4, a3);
  }
  return v4;
}

void sub_1B22AAE3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void fst::NShortestPath<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5, int a6, int a7, float a8)
{
  if (!a4) {
    return;
  }
  if ((a7 & 1) != 0
    && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 64))(a1, 0x400000000, 1))
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(&v145, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(&v145, "ERROR");
    }
    unint64_t v14 = fst::LogMessage::LogMessage((fst *)&v157, (uint64_t)&v145);
    unint64_t v15 = (void *)fst::cerr(v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"NShortestPath: FST has a cycle and include_final_ties was set to true. This is not currently supported.", 103);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v157);
    if ((v147[11] & 0x80000000) != 0) {
      operator delete(v145);
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 192))(a2, 4, 4);
    return;
  }
  (*(void (**)(uint64_t))(*(void *)a2 + 224))(a2);
  uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 280))(a2, v16);
  uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 288))(a2, v17);
  uint64_t v184 = 0;
  v185 = 0;
  unint64_t v186 = 0;
  v181 = 0;
  v182 = 0;
  v183 = 0;
  v178 = 0;
  v179 = 0;
  v180 = 0;
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 24))(a1) != -1)
  {
    uint64_t v19 = *a3;
    uint64_t v18 = a3[1];
    if (0xCCCCCCCCCCCCCCCDLL * ((v18 - v19) >> 3) > (*(int (**)(uint64_t))(*(void *)a1 + 24))(a1))
    {
      int v20 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
      uint64_t v21 = *a3;
      fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero((uint64_t)&v145);
      uint64_t v22 = (float *)(v21 + 40 * v20);
      float v157 = 0.0;
      float v157 = *v22;
      float v131 = *(float *)&v145;
      if (v157 != *(float *)&v145) {
        goto LABEL_13;
      }
      float v157 = 0.0;
      float v157 = v22[1];
      float v131 = 0.0;
      float v131 = v22[2];
      v173[0] = HIDWORD(v145);
      float v168 = v146;
      if (v157 != *((float *)&v145 + 1)) {
        goto LABEL_13;
      }
      if (v131 == v168
        && (uint64_t v23 = v21 + 40 * v20,
            __n128 v24 = *(const void **)(v23 + 16),
            BOOL v25 = (unsigned char *)(*(void *)(v23 + 24) - (void)v24),
            uint64_t v26 = *(void **)&v147[4],
            v25 == (char *)v148 - *(void *)&v147[4])
        && !memcmp(v24, *(const void **)&v147[4], (size_t)v25))
      {
        int v28 = 1;
        if (v26)
        {
LABEL_19:
          v148 = v26;
          operator delete(v26);
        }
      }
      else
      {
LABEL_13:
        fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::One((uint64_t)&v157);
        BOOL v27 = fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::operator()((uint64_t)&v177, a5, (uint64_t)&v157);
        if (a6) {
          int v28 = v27;
        }
        else {
          int v28 = 1;
        }
        if (*(void *)&v159[4])
        {
          v160 = *(void **)&v159[4];
          operator delete(*(void **)&v159[4]);
        }
        uint64_t v26 = *(void **)&v147[4];
        if (*(void *)&v147[4]) {
          goto LABEL_19;
        }
      }
      if (v28) {
        goto LABEL_21;
      }
      uint64_t v29 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2);
      (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 176))(a2, v29);
      uint64_t v30 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2);
      fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::One((uint64_t)v174);
      (*(void (**)(uint64_t, uint64_t, unsigned char *))(*(void *)a2 + 184))(a2, v30, v174);
      if (v175)
      {
        v176 = v175;
        operator delete(v175);
      }
      int v31 = v30;
      int v124 = v30;
      while (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v185 - v184) >> 4) <= (int)v30)
      {
        fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero((uint64_t)&v157);
        LODWORD(v145) = -1;
        float v146 = v157;
        *(void *)v147 = v158;
        v149 = 0;
        uint64_t v150 = 0;
        v148 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v148, *(const void **)&v159[4], (uint64_t)v160, ((uint64_t)v160 - *(void *)&v159[4]) >> 2);
        int v32 = v185;
        if ((unint64_t)v185 >= v186)
        {
          uint64_t v33 = std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>::__push_back_slow_path<std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>(&v184, (uint64_t)&v145);
        }
        else
        {
          *(_DWORD *)v185 = v145;
          v32[2] = v146;
          *(void *)(v32 + 3) = *(void *)v147;
          *((void *)v32 + 4) = 0;
          *((void *)v32 + 5) = 0;
          *((void *)v32 + 3) = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)v32 + 3, v148, (uint64_t)v149, (v149 - (unsigned char *)v148) >> 2);
          uint64_t v33 = (uint64_t)(v32 + 12);
        }
        v185 = (float *)v33;
        if (v148)
        {
          v149 = v148;
          operator delete(v148);
        }
        if (*(void *)&v159[4])
        {
          v160 = *(void **)&v159[4];
          operator delete(*(void **)&v159[4]);
        }
      }
      int v34 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
      fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::One((uint64_t)&v157);
      LODWORD(v145) = v34;
      float v146 = v157;
      *(void *)v147 = v158;
      v149 = 0;
      uint64_t v150 = 0;
      v148 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v148, *(const void **)&v159[4], (uint64_t)v160, ((uint64_t)v160 - *(void *)&v159[4]) >> 2);
      uint64_t v35 = v184;
      uint64_t v36 = v184 + 48 * v31;
      *(_DWORD *)uint64_t v36 = v145;
      *(float *)(v36 + 8) = v146;
      v36 += 8;
      *(void *)(v36 + 4) = *(void *)v147;
      if ((float *)v36 != &v146) {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v35 + 48 * v31 + 24), (char *)v148, (uint64_t)v149, (v149 - (unsigned char *)v148) >> 2);
      }
      if (v148)
      {
        v149 = v148;
        operator delete(v148);
      }
      if (*(void *)&v159[4])
      {
        v160 = *(void **)&v159[4];
        operator delete(*(void **)&v159[4]);
      }
      uint64_t v37 = v182;
      if (v182 >= (int *)v183)
      {
        float v39 = v181;
        uint64_t v40 = v182 - v181;
        unint64_t v41 = v40 + 1;
        if ((unint64_t)(v40 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v42 = v183 - (char *)v181;
        if ((v183 - (char *)v181) >> 1 > v41) {
          unint64_t v41 = v42 >> 1;
        }
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v43 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v43 = v41;
        }
        if (v43)
        {
          float v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v183, v43);
          float v39 = v181;
          uint64_t v37 = v182;
        }
        else
        {
          float v44 = 0;
        }
        uint64_t v45 = (int *)&v44[4 * v40];
        float v46 = &v44[4 * v43];
        int *v45 = v124;
        unint64_t v38 = v45 + 1;
        while (v37 != v39)
        {
          int v47 = *--v37;
          *--uint64_t v45 = v47;
        }
        v181 = v45;
        v182 = v38;
        v183 = v46;
        if (v39) {
          operator delete(v39);
        }
      }
      else
      {
        int *v182 = v124;
        unint64_t v38 = v37 + 1;
      }
      v182 = v38;
      int v48 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
      fst::Times<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>(*a3 + 40 * v48, a5, (uint64_t)v173);
      char v121 = 0;
      v170 = 0;
      uint64_t v171 = 0;
      uint64_t v172 = 0;
      uint64_t v165 = 0;
      unint64_t v166 = 0;
      unint64_t v167 = 0;
LABEL_67:
      uint64_t v49 = v181;
      __n128 v50 = v182;
      if (v181 == v182) {
        goto LABEL_254;
      }
      v162[0] = &v184;
      v162[1] = a3;
      int v163 = -1;
      float v164 = a8;
      if ((char *)v182 - (char *)v181 >= 5)
      {
        int v51 = *v181;
        uint64_t v52 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ShortestPathCompare<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>> &,std::__wrap_iter<int *>>(v181, v162, (unint64_t)((char *)v182 - (char *)v181) >> 2);
        BOOL v53 = v50 - 1;
        if (v50 - 1 == v52)
        {
          *uint64_t v52 = v51;
        }
        else
        {
          *uint64_t v52 = *v53;
          int *v53 = v51;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ShortestPathCompare<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>> &,std::__wrap_iter<int *>>((BOOL)v49, (uint64_t)(v52 + 1), v162, v52 + 1 - v49);
        }
      }
      float v54 = *((float *)v182 - 1);
      std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::pair[abi:ne180100]((uint64_t)&v157, v184 + 48 * SLODWORD(v54));
      --v182;
      if (v157 == NAN)
      {
        fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::One((uint64_t)&v152);
      }
      else if (0xCCCCCCCCCCCCCCCDLL * ((a3[1] - *a3) >> 3) <= SLODWORD(v157))
      {
        fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero((uint64_t)&v152);
      }
      else
      {
        uint64_t v55 = *a3 + 40 * SLODWORD(v157);
        int v152 = *(_DWORD *)v55;
        uint64_t v153 = *(void *)(v55 + 4);
        v155 = 0;
        uint64_t v156 = 0;
        v154 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v154, *(const void **)(v55 + 16), *(void *)(v55 + 24), (uint64_t)(*(void *)(v55 + 24) - *(void *)(v55 + 16)) >> 2);
      }
      fst::Times<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>((uint64_t)&v152, (uint64_t)&v158 + 4, (uint64_t)&v145);
      if (fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::operator()((uint64_t)&v177, (uint64_t)v173, (uint64_t)&v145))
      {
        uint64_t v56 = *(void **)&v147[4];
        if (*(void *)&v147[4])
        {
          v148 = *(void **)&v147[4];
          goto LABEL_80;
        }
        goto LABEL_243;
      }
      if (a6 == -1)
      {
        if (*(void *)&v147[4])
        {
          v148 = *(void **)&v147[4];
          operator delete(*(void **)&v147[4]);
        }
      }
      else
      {
        int v57 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 160))(a2);
        if (*(void *)&v147[4])
        {
          v148 = *(void **)&v147[4];
          operator delete(*(void **)&v147[4]);
        }
        if (v57 >= a6) {
          goto LABEL_243;
        }
      }
      int v58 = v178;
      uint64_t v59 = v179;
      unint64_t v60 = (v179 - v178) >> 2;
      for (float i = v157; v60 <= SLODWORD(v157) + 1; v59 = v62)
      {
        if (v59 >= v180)
        {
          unint64_t v63 = v60 + 1;
          if ((v60 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v64 = v180 - v58;
          if ((v180 - v58) >> 1 > v63) {
            unint64_t v63 = v64 >> 1;
          }
          if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v65 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v65 = v63;
          }
          if (v65)
          {
            uint64_t v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v180, v65);
            int v58 = v178;
            uint64_t v59 = v179;
          }
          else
          {
            uint64_t v66 = 0;
          }
          unint64_t v67 = &v66[4 * v60];
          *(_DWORD *)unint64_t v67 = 0;
          unint64_t v62 = v67 + 4;
          while (v59 != v58)
          {
            int v68 = *((_DWORD *)v59 - 1);
            v59 -= 4;
            *((_DWORD *)v67 - 1) = v68;
            v67 -= 4;
          }
          v178 = v67;
          v179 = v62;
          v180 = &v66[4 * v65];
          if (v58)
          {
            operator delete(v58);
            int v58 = v178;
          }
          else
          {
            int v58 = v67;
          }
        }
        else
        {
          *(_DWORD *)uint64_t v59 = 0;
          unint64_t v62 = v59 + 4;
        }
        v179 = v62;
        unint64_t v60 = (v62 - v58) >> 2;
        float i = v157;
      }
      if (a7)
      {
        LODWORD(v69) = LODWORD(i) + 1;
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v166 - v165) >> 3) <= (int)v69)
        {
          do
          {
            fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero((uint64_t)&v145);
            unint64_t v70 = v166;
            if (v166 >= v167)
            {
              uint64_t v71 = std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__push_back_slow_path<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int> const&>(&v165, (uint64_t)&v145);
            }
            else
            {
              std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__construct_one_at_end[abi:ne180100]<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int> const&>((uint64_t)&v165, (uint64_t)&v145);
              uint64_t v71 = v70 + 40;
            }
            unint64_t v166 = v71;
            if (*(void *)&v147[4])
            {
              v148 = *(void **)&v147[4];
              operator delete(*(void **)&v147[4]);
              uint64_t v71 = v166;
            }
            unint64_t v69 = SLODWORD(v157) + 1;
          }
          while (0xCCCCCCCCCCCCCCCDLL * ((v71 - v165) >> 3) <= v69);
          int v58 = v178;
LABEL_118:
          ++*(_DWORD *)&v58[4 * v69];
          float v72 = v157;
          if (v157 == NAN)
          {
            if (v121)
            {
              BOOL v73 = *((float *)&v158 + 1) > (float)(v168 + 0.00097656)
                 || v168 > (float)(*((float *)&v158 + 1) + 0.00097656);
              if (v73
                || (*(float *)&v169 != *(float *)v159 || *((float *)&v169 + 1) != *(float *)&v159[4])
                && vabds_f32(*(float *)&v169 + *((float *)&v169 + 1), *(float *)v159 + *(float *)&v159[4]) > 0.00097656
                || v171 - (void)v170 != v161 - (unsigned char *)v160
                || memcmp(v170, v160, v171 - (void)v170))
              {
                BOOL v74 = 1;
                char v121 = 1;
                goto LABEL_244;
              }
            }
            uint64_t v75 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
            fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::One((uint64_t)&v131);
            v145 = 0;
            float v146 = v131;
            *(void *)v147 = v132;
            v149 = 0;
            uint64_t v150 = 0;
            v148 = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v148, *(const void **)&v133[4], (uint64_t)v134, ((uint64_t)v134 - *(void *)&v133[4]) >> 2);
            float v151 = v54;
            (*(void (**)(uint64_t, uint64_t, void **))(*(void *)a2 + 208))(a2, v75, &v145);
            if (v148)
            {
              v149 = v148;
              operator delete(v148);
            }
            if (*(void *)&v133[4])
            {
              v134 = *(void **)&v133[4];
              operator delete(*(void **)&v133[4]);
            }
            float v72 = v157;
          }
          if ((v121 & 1) == 0)
          {
            if (v72 != NAN)
            {
              char v121 = 0;
LABEL_140:
              uint64_t v76 = SLODWORD(v72) + 1;
              unint64_t v77 = *(int *)&v178[4 * v76];
              if (a7)
              {
                if (v77 == a4)
                {
                  uint64_t v78 = v165;
                  uint64_t v79 = (void *)(v165 + 40 * v76);
                  *(_DWORD *)uint64_t v79 = HIDWORD(v158);
                  *(void *)((char *)v79 + 4) = *(void *)v159;
                  if (v79 != (uint64_t *)((char *)&v158 + 4)) {
                    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v78 + 40 * v76 + 16), (char *)v160, (uint64_t)v161, (v161 - (unsigned char *)v160) >> 2);
                  }
                }
                else if (v77 > a4)
                {
                  uint64_t v81 = (float *)(v165 + 40 * v76);
                  if (*v81 > (float)(*((float *)&v158 + 1) + 0.00097656)
                    || *((float *)&v158 + 1) > (float)(*v81 + 0.00097656))
                  {
                    goto LABEL_243;
                  }
                  float v83 = v81[1];
                  float v84 = v81[2];
                  BOOL v85 = *(float *)v159 == v83 && *(float *)&v159[4] == v84;
                  float v86 = vabds_f32(*(float *)v159 + *(float *)&v159[4], v83 + v84);
                  if (!v85 && v86 > 0.00097656) {
                    goto LABEL_243;
                  }
                  uint64_t v88 = v165 + 40 * v76;
                  float v89 = *(const void **)(v88 + 16);
                  if (v161 - (unsigned char *)v160 != *(void *)(v88 + 24) - (void)v89
                    || memcmp(v160, v89, v161 - (unsigned char *)v160))
                  {
                    goto LABEL_243;
                  }
                }
              }
              else if (v77 > a4)
              {
                goto LABEL_243;
              }
              unint64_t v144 = 0;
              (*(void (**)(uint64_t, void, long long *))(*(void *)a1 + 136))(a1, LODWORD(v157), &v141);
              while (1)
              {
                if ((void)v141)
                {
                  if ((*(unsigned int (**)(void))(*(void *)v141 + 24))(v141))
                  {
                    if ((void)v141)
                    {
                      (*(void (**)(void))(*(void *)v141 + 8))();
                    }
                    else
                    {
LABEL_205:
                      if (v143) {
                        --*(_DWORD *)v143;
                      }
                    }
                    (*(void (**)(void **__return_ptr, uint64_t, void))(*(void *)a1 + 32))(&v145, a1, LODWORD(v157));
                    fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Reverse((uint64_t)&v145, (uint64_t)&v131);
                    if (*(void *)&v147[4])
                    {
                      v148 = *(void **)&v147[4];
                      operator delete(*(void **)&v147[4]);
                    }
                    fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero((uint64_t)&v145);
                    *(float *)&long long v141 = v131;
                    float v137 = *(float *)&v145;
                    if (v131 != *(float *)&v145
                      || (float v137 = *((float *)&v132 + 1),
                          LODWORD(v141) = v132,
                          int v188 = HIDWORD(v145),
                          float v187 = v146,
                          *(float *)&v132 != *((float *)&v145 + 1))
                      || v137 != v187)
                    {
                      BOOL v106 = 1;
                      goto LABEL_213;
                    }
                    uint64_t v107 = *(void **)&v147[4];
                    if ((char *)v134 - *(void *)&v133[4] == (char *)v148 - *(void *)&v147[4])
                    {
                      BOOL v106 = memcmp(*(const void **)&v133[4], *(const void **)&v147[4], (size_t)v134 - *(void *)&v133[4]) != 0;
LABEL_213:
                      uint64_t v107 = *(void **)&v147[4];
                      if (*(void *)&v147[4])
                      {
LABEL_214:
                        v148 = v107;
                        operator delete(v107);
                      }
                    }
                    else
                    {
                      BOOL v106 = 1;
                      if (*(void *)&v147[4]) {
                        goto LABEL_214;
                      }
                    }
                    if (v106)
                    {
                      fst::Times<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>((uint64_t)&v158 + 4, (uint64_t)&v131, (uint64_t)&v141);
                      uint64_t v108 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2);
                      LODWORD(v145) = -1;
                      float v146 = *(float *)&v141;
                      *(void *)v147 = *(void *)((char *)&v141 + 4);
                      v149 = 0;
                      uint64_t v150 = 0;
                      v148 = 0;
                      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v148, v142, (uint64_t)v143, (v143 - (unsigned char *)v142) >> 2);
                      v109 = v185;
                      if ((unint64_t)v185 >= v186)
                      {
                        uint64_t v110 = std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>::__push_back_slow_path<std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>(&v184, (uint64_t)&v145);
                      }
                      else
                      {
                        *(_DWORD *)v185 = v145;
                        v109[2] = v146;
                        *(void *)(v109 + 3) = *(void *)v147;
                        *((void *)v109 + 4) = 0;
                        *((void *)v109 + 5) = 0;
                        *((void *)v109 + 3) = 0;
                        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)v109 + 3, v148, (uint64_t)v149, (v149 - (unsigned char *)v148) >> 2);
                        uint64_t v110 = (uint64_t)(v109 + 12);
                      }
                      v185 = (float *)v110;
                      if (v148)
                      {
                        v149 = v148;
                        operator delete(v148);
                      }
                      v145 = 0;
                      float v146 = v131;
                      *(void *)v147 = v132;
                      v149 = 0;
                      uint64_t v150 = 0;
                      v148 = 0;
                      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v148, *(const void **)&v133[4], (uint64_t)v134, ((uint64_t)v134 - *(void *)&v133[4]) >> 2);
                      float v151 = v54;
                      (*(void (**)(uint64_t, uint64_t, void **))(*(void *)a2 + 208))(a2, v108, &v145);
                      if (v148)
                      {
                        v149 = v148;
                        operator delete(v148);
                      }
                      float v111 = v182;
                      if (v182 >= (int *)v183)
                      {
                        float v113 = v181;
                        uint64_t v114 = v182 - v181;
                        unint64_t v115 = v114 + 1;
                        if ((unint64_t)(v114 + 1) >> 62) {
                          std::vector<int>::__throw_length_error[abi:ne180100]();
                        }
                        uint64_t v116 = v183 - (char *)v181;
                        if ((v183 - (char *)v181) >> 1 > v115) {
                          unint64_t v115 = v116 >> 1;
                        }
                        if ((unint64_t)v116 >= 0x7FFFFFFFFFFFFFFCLL) {
                          unint64_t v117 = 0x3FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v117 = v115;
                        }
                        if (v117)
                        {
                          v118 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v183, v117);
                          float v113 = v181;
                          float v111 = v182;
                        }
                        else
                        {
                          v118 = 0;
                        }
                        v119 = (int *)&v118[4 * v114];
                        int *v119 = v108;
                        uint64_t v112 = (uint64_t)(v119 + 1);
                        while (v111 != v113)
                        {
                          int v120 = *--v111;
                          *--v119 = v120;
                        }
                        v181 = v119;
                        v182 = (int *)v112;
                        v183 = &v118[4 * v117];
                        if (v113) {
                          operator delete(v113);
                        }
                      }
                      else
                      {
                        int *v182 = v108;
                        uint64_t v112 = (uint64_t)(v111 + 1);
                      }
                      v182 = (int *)v112;
                      v125[0] = &v184;
                      v125[1] = a3;
                      int v126 = -1;
                      float v127 = a8;
                      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ShortestPathCompare<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>> &,std::__wrap_iter<int *>>((BOOL)v181, v112, v125, (v112 - (uint64_t)v181) >> 2);
                      if (v142)
                      {
                        v143 = (char *)v142;
                        operator delete(v142);
                      }
                    }
                    uint64_t v56 = *(void **)&v133[4];
                    if (*(void *)&v133[4])
                    {
                      v134 = *(void **)&v133[4];
LABEL_80:
                      operator delete(v56);
                    }
LABEL_243:
                    BOOL v74 = 0;
LABEL_244:
                    if (v154)
                    {
                      v155 = v154;
                      operator delete(v154);
                    }
                    if (v160)
                    {
                      v161 = v160;
                      operator delete(v160);
                    }
                    if (v74) {
LABEL_254:
                    }
                      fst::Connect<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>(a2);
                    goto LABEL_67;
                  }
                  if ((void)v141)
                  {
                    uint64_t v90 = (*(uint64_t (**)(void))(*(void *)v141 + 32))();
                    goto LABEL_173;
                  }
                }
                else if (v144 >= (unint64_t)v142)
                {
                  goto LABEL_205;
                }
                uint64_t v90 = *((void *)&v141 + 1) + 56 * v144;
LABEL_173:
                uint64_t v91 = *(void **)v90;
                fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Reverse(v90 + 8, (uint64_t)&v131);
                float v92 = *(float *)(v90 + 48);
                v145 = v91;
                float v146 = v131;
                *(void *)v147 = v132;
                v149 = 0;
                uint64_t v150 = 0;
                v148 = 0;
                std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v148, *(const void **)&v133[4], (uint64_t)v134, ((uint64_t)v134 - *(void *)&v133[4]) >> 2);
                float v151 = v92;
                if (*(void *)&v133[4])
                {
                  v134 = *(void **)&v133[4];
                  operator delete(*(void **)&v133[4]);
                }
                fst::Times<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>((uint64_t)&v158 + 4, (uint64_t)&v146, (uint64_t)&v137);
                uint64_t v93 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2);
                float v131 = v151;
                *((float *)&v132 + 1) = v137;
                *(void *)v133 = v138;
                v135 = 0;
                uint64_t v136 = 0;
                v134 = 0;
                std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v134, v139, (uint64_t)v140, (v140 - (unsigned char *)v139) >> 2);
                uint64_t v94 = v185;
                if ((unint64_t)v185 >= v186)
                {
                  uint64_t v95 = std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>::__push_back_slow_path<std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>(&v184, (uint64_t)&v131);
                }
                else
                {
                  float *v185 = v131;
                  v94[2] = *((float *)&v132 + 1);
                  *(void *)(v94 + 3) = *(void *)v133;
                  *((void *)v94 + 4) = 0;
                  *((void *)v94 + 5) = 0;
                  *((void *)v94 + 3) = 0;
                  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)v94 + 3, v134, (uint64_t)v135, (v135 - (unsigned char *)v134) >> 2);
                  uint64_t v95 = (uint64_t)(v94 + 12);
                }
                v185 = (float *)v95;
                if (v134)
                {
                  v135 = v134;
                  operator delete(v134);
                }
                float v151 = v54;
                (*(void (**)(uint64_t, uint64_t, void **))(*(void *)a2 + 208))(a2, v93, &v145);
                uint64_t v96 = v182;
                if (v182 >= (int *)v183)
                {
                  uint64_t v98 = v181;
                  uint64_t v99 = v182 - v181;
                  unint64_t v100 = v99 + 1;
                  if ((unint64_t)(v99 + 1) >> 62) {
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v101 = v183 - (char *)v181;
                  if ((v183 - (char *)v181) >> 1 > v100) {
                    unint64_t v100 = v101 >> 1;
                  }
                  if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v102 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v102 = v100;
                  }
                  if (v102)
                  {
                    uint64_t v103 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v183, v102);
                    uint64_t v98 = v181;
                    uint64_t v96 = v182;
                  }
                  else
                  {
                    uint64_t v103 = 0;
                  }
                  int v104 = (int *)&v103[4 * v99];
                  *int v104 = v93;
                  uint64_t v97 = (uint64_t)(v104 + 1);
                  while (v96 != v98)
                  {
                    int v105 = *--v96;
                    *--int v104 = v105;
                  }
                  v181 = v104;
                  v182 = (int *)v97;
                  v183 = &v103[4 * v102];
                  if (v98) {
                    operator delete(v98);
                  }
                }
                else
                {
                  int *v182 = v93;
                  uint64_t v97 = (uint64_t)(v96 + 1);
                }
                v182 = (int *)v97;
                v128[0] = &v184;
                v128[1] = a3;
                int v129 = -1;
                float v130 = a8;
                std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ShortestPathCompare<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>> &,std::__wrap_iter<int *>>((BOOL)v181, v97, v128, (v97 - (uint64_t)v181) >> 2);
                if (v139)
                {
                  v140 = v139;
                  operator delete(v139);
                }
                if (v148)
                {
                  v149 = v148;
                  operator delete(v148);
                }
                if ((void)v141) {
                  (*(void (**)(void))(*(void *)v141 + 40))(v141);
                }
                else {
                  ++v144;
                }
              }
            }
            BOOL v74 = *(int *)v178 == a4;
            if (*(_DWORD *)v178 != a4 || a7 == 0)
            {
              char v121 = 0;
              goto LABEL_244;
            }
            float v168 = *((float *)&v158 + 1);
            uint64_t v169 = *(void *)v159;
            std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v170, (char *)v160, (uint64_t)v161, (v161 - (unsigned char *)v160) >> 2);
            float v72 = v157;
          }
          char v121 = 1;
          if (v72 == NAN) {
            goto LABEL_243;
          }
          goto LABEL_140;
        }
      }
      else
      {
        LODWORD(v69) = LODWORD(i) + 1;
      }
      unint64_t v69 = (int)v69;
      goto LABEL_118;
    }
  }
LABEL_21:
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 4, 0)) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 192))(a2, 4, 4);
  }
  if (v178)
  {
    v179 = v178;
    operator delete(v178);
  }
  if (v181)
  {
    v182 = v181;
    operator delete(v181);
  }
  v145 = &v184;
  std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v145);
}

void sub_1B22AC588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  if (__p) {
    operator delete(__p);
  }
  if (a27) {
    operator delete(a27);
  }
  if (a50)
  {
    a51 = (uint64_t)a50;
    operator delete(a50);
  }
  if (a56)
  {
    a57 = (uint64_t)a56;
    operator delete(a56);
  }
  a41 = &a63;
  std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a41);
  if (a68)
  {
    a69 = (uint64_t)a68;
    operator delete(a68);
  }
  uint64_t v71 = (void *)STACK[0x200];
  if (STACK[0x200])
  {
    STACK[0x208] = (unint64_t)v71;
    operator delete(v71);
  }
  float v72 = *(void **)(v69 - 184);
  if (v72)
  {
    *(void *)(v69 - 176) = v72;
    operator delete(v72);
  }
  BOOL v73 = *(void **)(v69 - 160);
  if (v73)
  {
    *(void *)(v69 - 152) = v73;
    operator delete(v73);
  }
  a41 = (void *)(v69 - 136);
  std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a41);
  _Unwind_Resume(a1);
}

void *std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__construct_one_at_end[abi:ne180100]<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  *(_DWORD *)uint64_t v3 = *(_DWORD *)a2;
  *(void *)(v3 + 4) = *(void *)(a2 + 4);
  *(void *)(v3 + ++*(void *)(result + 24) = 0;
  *(void *)(v3 + 32) = 0;
  *(void *)(v3 + 16) = 0;
  BOOL result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(v3 + 16), *(const void **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 2);
  *(void *)(a1 + 8) = v3 + 40;
  return result;
}

void sub_1B22AC8E0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__push_back_slow_path<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x333333333333333) {
    unint64_t v9 = 0x666666666666666;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v18 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  unint64_t v11 = &v10[40 * v4];
  v15[0] = v10;
  v15[1] = v11;
  uint64_t v16 = v11;
  uint64_t v17 = &v10[40 * v9];
  *(_DWORD *)unint64_t v11 = *(_DWORD *)a2;
  uint64_t v12 = *(void *)(a2 + 4);
  *((void *)v11 + 2) = 0;
  v11 += 16;
  *(void *)(v11 - 12) = v12;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v11, *(const void **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 2);
  v16 += 40;
  std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__swap_out_circular_buffer(a1, v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_1B22AC9FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>,std::reverse_iterator<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>*>,std::reverse_iterator<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>*>,std::reverse_iterator<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>,std::reverse_iterator<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>*>,std::reverse_iterator<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>*>,std::reverse_iterator<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v18 = a6;
  *((void *)&v18 + 1) = a7;
  long long v17 = v18;
  v15[0] = a1;
  v15[1] = &v17;
  void v15[2] = &v18;
  char v16 = 0;
  if (a3 == a5)
  {
    uint64_t v13 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      int v10 = *(_DWORD *)(v9 - 40);
      v9 -= 40;
      *(_DWORD *)(v7 - 40) = v10;
      uint64_t v11 = *(void *)(v9 + 4);
      *(void *)(v7 - ++*(void *)(result + 24) = 0;
      uint64_t v12 = (void *)(v7 - 24);
      *(void *)((char *)v12 - 12) = v11;
      v12[1] = 0;
      v12[2] = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v12, *(const void **)(v9 + 16), *(void *)(v9 + 24), (uint64_t)(*(void *)(v9 + 24) - *(void *)(v9 + 16)) >> 2);
      uint64_t v7 = *((void *)&v18 + 1) - 40;
      *((void *)&v18 + 1) -= 40;
    }
    while (v9 != a5);
    uint64_t v13 = v18;
  }
  char v16 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>,std::reverse_iterator<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v15);
  return v13;
}

void sub_1B22ACB4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>,std::reverse_iterator<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>,std::reverse_iterator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void fst::ShortestDistanceState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::ShortestDistance(uint64_t *a1, int a2)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)*a1 + 24))(*a1) == -1)
  {
    if (!(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)*a1 + 64))(*a1, 4, 0)) {
      return;
    }
    float v89 = (char *)a1 + 116;
LABEL_187:
    unsigned char *v89 = 1;
    return;
  }
  (*(void (**)(void))(**(void **)(a1[2] + 16) + 56))(*(void *)(a1[2] + 16));
  if (!*((unsigned char *)a1 + 33))
  {
    std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::__clear[abi:ne180100]((uint64_t *)a1[1]);
    std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::__clear[abi:ne180100](a1 + 5);
    a1[9] = 0;
  }
  if (a2 == -1) {
    a2 = (*(uint64_t (**)(void))(*(void *)*a1 + 24))();
  }
  unint64_t v4 = a2;
  uint64_t v5 = (uint64_t *)a1[1];
  for (float i = v5 + 1; 0xCCCCCCCCCCCCCCCDLL * ((v5[1] - *v5) >> 3) <= a2; float i = v5 + 1)
  {
    fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero((uint64_t)&v103);
    unint64_t v7 = v5[1];
    if (v7 >= v5[2])
    {
      uint64_t v8 = std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__push_back_slow_path<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int> const&>(v5, (uint64_t)&v103);
    }
    else
    {
      std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__construct_one_at_end[abi:ne180100]<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int> const&>((uint64_t)v5, (uint64_t)&v103);
      uint64_t v8 = v7 + 40;
    }
    *float i = v8;
    if (v105)
    {
      BOOL v106 = v105;
      operator delete(v105);
    }
    fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero((uint64_t)&v103);
    unint64_t v9 = a1[6];
    if (v9 >= a1[7])
    {
      uint64_t v10 = std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__push_back_slow_path<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int> const&>(a1 + 5, (uint64_t)&v103);
    }
    else
    {
      std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__construct_one_at_end[abi:ne180100]<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int> const&>((uint64_t)(a1 + 5), (uint64_t)&v103);
      uint64_t v10 = v9 + 40;
    }
    a1[6] = v10;
    if (v105)
    {
      BOOL v106 = v105;
      operator delete(v105);
    }
    LOBYTE(v103) = 0;
    std::vector<BOOL>::push_back((uint64_t)(a1 + 8), &v103);
    uint64_t v5 = (uint64_t *)a1[1];
  }
  if (*((unsigned char *)a1 + 33))
  {
    uint64_t v11 = (char *)a1[11];
    uint64_t v12 = (char *)a1[12];
    unint64_t v13 = (v12 - v11) >> 2;
    if (v13 <= a2)
    {
      unint64_t v14 = a1 + 13;
      do
      {
        if ((unint64_t)v12 >= *v14)
        {
          unint64_t v16 = v13 + 1;
          if ((v13 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v17 = *v14 - (void)v11;
          if (v17 >> 1 > v16) {
            unint64_t v16 = v17 >> 1;
          }
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v18 = v16;
          }
          if (v18)
          {
            uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 13), v18);
            uint64_t v11 = (char *)a1[11];
            uint64_t v12 = (char *)a1[12];
          }
          else
          {
            uint64_t v19 = 0;
          }
          int v20 = &v19[4 * v13];
          *(_DWORD *)int v20 = -1;
          unint64_t v15 = v20 + 4;
          while (v12 != v11)
          {
            int v21 = *((_DWORD *)v12 - 1);
            v12 -= 4;
            *((_DWORD *)v20 - 1) = v21;
            v20 -= 4;
          }
          a1[11] = (uint64_t)v20;
          a1[12] = (uint64_t)v15;
          a1[13] = (uint64_t)&v19[4 * v18];
          if (v11)
          {
            operator delete(v11);
            uint64_t v11 = (char *)a1[11];
          }
          else
          {
            uint64_t v11 = v20;
          }
        }
        else
        {
          *(_DWORD *)uint64_t v12 = -1;
          unint64_t v15 = v12 + 4;
        }
        a1[12] = (uint64_t)v15;
        unint64_t v13 = (v15 - v11) >> 2;
        uint64_t v12 = v15;
      }
      while (v13 <= a2);
    }
    *(_DWORD *)&v11[4 * a2] = *((_DWORD *)a1 + 28);
  }
  fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::One((uint64_t)&v103);
  uint64_t v22 = *(void *)a1[1];
  uint64_t v23 = v22 + 40 * a2;
  *(float *)uint64_t v23 = v103;
  *(void *)(v23 + 4) = v104;
  if ((float *)v23 != &v103) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v22 + 40 * a2 + 16), v105, (uint64_t)v106, (v106 - v105) >> 2);
  }
  if (v105)
  {
    BOOL v106 = v105;
    operator delete(v105);
  }
  fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::One((uint64_t)&v103);
  BOOL v25 = a1 + 5;
  uint64_t v24 = a1[5];
  uint64_t v26 = v24 + 40 * (int)v4;
  *(float *)uint64_t v26 = v103;
  *(void *)(v26 + 4) = v104;
  if ((float *)v26 != &v103) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v24 + 40 * (int)v4 + 16), v105, (uint64_t)v106, (v106 - v105) >> 2);
  }
  if (v105)
  {
    BOOL v106 = v105;
    operator delete(v105);
  }
  BOOL v27 = a1 + 8;
  *(void *)(a1[8] + ((v4 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v4;
  (*(void (**)(void, unint64_t))(**(void **)(a1[2] + 16) + 24))(*(void *)(a1[2] + 16), v4);
  int v28 = (void **)(a1 + 11);
  uint64_t v90 = a1 + 13;
  float v89 = (char *)a1 + 116;
  do
  {
    if ((*(uint64_t (**)(void))(**(void **)(a1[2] + 16) + 48))(*(void *)(a1[2] + 16)))
    {
LABEL_186:
      ++*((_DWORD *)a1 + 28);
      if (!(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)*a1 + 64))(*a1, 4, 0)) {
        return;
      }
      goto LABEL_187;
    }
    int v29 = (*(uint64_t (**)(void))(**(void **)(a1[2] + 16) + 16))(*(void *)(a1[2] + 16));
    (*(void (**)(void))(**(void **)(a1[2] + 16) + 32))(*(void *)(a1[2] + 16));
    uint64_t v30 = (uint64_t *)a1[1];
    for (j = v30 + 1; 0xCCCCCCCCCCCCCCCDLL * ((v30[1] - *v30) >> 3) <= v29; j = v30 + 1)
    {
      fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero((uint64_t)&v103);
      unint64_t v32 = v30[1];
      if (v32 >= v30[2])
      {
        uint64_t v33 = std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__push_back_slow_path<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int> const&>(v30, (uint64_t)&v103);
      }
      else
      {
        std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__construct_one_at_end[abi:ne180100]<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int> const&>((uint64_t)v30, (uint64_t)&v103);
        uint64_t v33 = v32 + 40;
      }
      uint64_t *j = v33;
      if (v105)
      {
        BOOL v106 = v105;
        operator delete(v105);
      }
      fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero((uint64_t)&v103);
      unint64_t v34 = a1[6];
      if (v34 >= a1[7])
      {
        uint64_t v35 = std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__push_back_slow_path<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int> const&>(a1 + 5, (uint64_t)&v103);
      }
      else
      {
        std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__construct_one_at_end[abi:ne180100]<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int> const&>((uint64_t)(a1 + 5), (uint64_t)&v103);
        uint64_t v35 = v34 + 40;
      }
      a1[6] = v35;
      if (v105)
      {
        BOOL v106 = v105;
        operator delete(v105);
      }
      LOBYTE(v103) = 0;
      std::vector<BOOL>::push_back((uint64_t)(a1 + 8), &v103);
      uint64_t v30 = (uint64_t *)a1[1];
    }
    if (*((unsigned char *)a1 + 32))
    {
      (*(void (**)(float *__return_ptr))(*(void *)*a1 + 32))(&v103);
      fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero((uint64_t)&v99);
      float v95 = v103;
      float v91 = *(float *)&v99;
      if (v103 == *(float *)&v99
        && (float v91 = *((float *)&v104 + 1),
            float v95 = *(float *)&v104,
            float v108 = *((float *)&v99 + 2),
            int v109 = DWORD1(v99),
            *(float *)&v104 == *((float *)&v99 + 1))
        && v91 == v108)
      {
        uint64_t v37 = (char *)__p;
        if (v106 - v105 != v101 - (unsigned char *)__p)
        {
          BOOL v36 = 1;
          if (!__p)
          {
LABEL_69:
            if (v105)
            {
              BOOL v106 = v105;
              operator delete(v105);
            }
            if (v36) {
              goto LABEL_186;
            }
            goto LABEL_72;
          }
LABEL_68:
          uint64_t v101 = v37;
          operator delete(v37);
          goto LABEL_69;
        }
        BOOL v36 = memcmp(v105, __p, v106 - v105) != 0;
      }
      else
      {
        BOOL v36 = 1;
      }
      uint64_t v37 = (char *)__p;
      if (!__p) {
        goto LABEL_69;
      }
      goto LABEL_68;
    }
LABEL_72:
    *(void *)(*v27 + (((unint64_t)v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v29);
    uint64_t v38 = *v25 + 40 * v29;
    float v103 = *(float *)v38;
    uint64_t v104 = *(void *)(v38 + 4);
    BOOL v106 = 0;
    uint64_t v107 = 0;
    int v105 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v105, *(const void **)(v38 + 16), *(void *)(v38 + 24), (uint64_t)(*(void *)(v38 + 24) - *(void *)(v38 + 16)) >> 2);
    fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero((uint64_t)&v99);
    uint64_t v39 = *v25;
    uint64_t v40 = *v25 + 40 * v29;
    *(_DWORD *)uint64_t v40 = v99;
    *(void *)(v40 + 4) = *(void *)((char *)&v99 + 4);
    if ((long long *)v40 != &v99) {
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v39 + 40 * v29 + 16), (char *)__p, (uint64_t)v101, (v101 - (unsigned char *)__p) >> 2);
    }
    if (__p)
    {
      uint64_t v101 = (char *)__p;
      operator delete(__p);
    }
    uint64_t v41 = *a1;
    unint64_t v102 = 0;
    (*(void (**)(uint64_t, void, long long *))(*(void *)v41 + 136))(v41, v29, &v99);
    while (1)
    {
      if (!(void)v99)
      {
        if (v102 >= (unint64_t)__p)
        {
          int v85 = 10;
          goto LABEL_172;
        }
        goto LABEL_82;
      }
      char v42 = (*(uint64_t (**)(void))(*(void *)v99 + 24))(v99);
      uint64_t v43 = v99;
      if (v42) {
        break;
      }
      if ((void)v99)
      {
        uint64_t v44 = (*(uint64_t (**)(void))(*(void *)v99 + 32))();
        goto LABEL_83;
      }
LABEL_82:
      uint64_t v44 = *((void *)&v99 + 1) + 56 * v102;
LABEL_83:
      uint64_t v45 = (uint64_t *)a1[1];
      float v46 = v45 + 1;
      for (unint64_t k = *(int *)(v44 + 48); 0xCCCCCCCCCCCCCCCDLL * ((v45[1] - *v45) >> 3) <= k; unint64_t k = *(int *)(v44 + 48))
      {
        fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero((uint64_t)&v95);
        uint64_t v48 = *v46;
        if (*v46 >= (unint64_t)v45[2])
        {
          uint64_t v49 = std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__push_back_slow_path<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int> const&>(v45, (uint64_t)&v95);
        }
        else
        {
          std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__construct_one_at_end[abi:ne180100]<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int> const&>((uint64_t)v45, (uint64_t)&v95);
          uint64_t v49 = v48 + 40;
        }
        uint64_t *v46 = v49;
        if (v97)
        {
          uint64_t v98 = v97;
          operator delete(v97);
        }
        fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero((uint64_t)&v95);
        unint64_t v50 = a1[6];
        if (v50 >= a1[7])
        {
          uint64_t v51 = std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__push_back_slow_path<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int> const&>(a1 + 5, (uint64_t)&v95);
        }
        else
        {
          std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__construct_one_at_end[abi:ne180100]<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int> const&>((uint64_t)(a1 + 5), (uint64_t)&v95);
          uint64_t v51 = v50 + 40;
        }
        a1[6] = v51;
        if (v97)
        {
          uint64_t v98 = v97;
          operator delete(v97);
        }
        LOBYTE(v95) = 0;
        std::vector<BOOL>::push_back((uint64_t)(a1 + 8), &v95);
        uint64_t v45 = (uint64_t *)a1[1];
        float v46 = v45 + 1;
      }
      if (*((unsigned char *)a1 + 33))
      {
        uint64_t v52 = (char *)a1[11];
        BOOL v53 = (char *)a1[12];
        unint64_t v54 = (v53 - v52) >> 2;
        if (v54 <= (int)k)
        {
          do
          {
            if ((unint64_t)v53 >= *v90)
            {
              unint64_t v57 = v54 + 1;
              if ((v54 + 1) >> 62) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v58 = *v90 - (void)v52;
              if (v58 >> 1 > v57) {
                unint64_t v57 = v58 >> 1;
              }
              if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v59 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v59 = v57;
              }
              if (v59)
              {
                unint64_t v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v90, v59);
                uint64_t v52 = (char *)a1[11];
                BOOL v53 = (char *)a1[12];
              }
              else
              {
                unint64_t v60 = 0;
              }
              unint64_t v61 = &v60[4 * v54];
              *(_DWORD *)unint64_t v61 = -1;
              uint64_t v56 = v61 + 4;
              while (v53 != v52)
              {
                int v62 = *((_DWORD *)v53 - 1);
                v53 -= 4;
                *((_DWORD *)v61 - 1) = v62;
                v61 -= 4;
              }
              a1[11] = (uint64_t)v61;
              a1[12] = (uint64_t)v56;
              a1[13] = (uint64_t)&v60[4 * v59];
              if (v52)
              {
                operator delete(v52);
                uint64_t v52 = (char *)*v28;
              }
              else
              {
                uint64_t v52 = v61;
              }
            }
            else
            {
              *(_DWORD *)BOOL v53 = -1;
              uint64_t v56 = v53 + 4;
            }
            a1[12] = (uint64_t)v56;
            unint64_t v54 = (v56 - v52) >> 2;
            LODWORD(k) = *(_DWORD *)(v44 + 48);
            BOOL v53 = v56;
          }
          while (v54 <= (int)k);
          uint64_t v55 = (int)k;
        }
        else
        {
          uint64_t v55 = (int)k;
        }
        if (*(_DWORD *)&v52[4 * v55] != *((_DWORD *)a1 + 28))
        {
          fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero((uint64_t)&v95);
          int v63 = *(_DWORD *)(v44 + 48);
          uint64_t v64 = *(void *)a1[1];
          uint64_t v65 = v64 + 40 * v63;
          *(float *)uint64_t v65 = v95;
          *(void *)(v65 + 4) = v96;
          if ((float *)v65 != &v95) {
            std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v64 + 40 * v63 + 16), (char *)v97, (uint64_t)v98, (v98 - (unsigned char *)v97) >> 2);
          }
          if (v97)
          {
            uint64_t v98 = v97;
            operator delete(v97);
          }
          fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero((uint64_t)&v95);
          int v66 = *(_DWORD *)(v44 + 48);
          uint64_t v67 = *v25;
          uint64_t v68 = *v25 + 40 * v66;
          *(float *)uint64_t v68 = v95;
          *(void *)(v68 + 4) = v96;
          if ((float *)v68 != &v95) {
            std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v67 + 40 * v66 + 16), (char *)v97, (uint64_t)v98, (v98 - (unsigned char *)v97) >> 2);
          }
          if (v97)
          {
            uint64_t v98 = v97;
            operator delete(v97);
          }
          unint64_t v69 = *(int *)(v44 + 48);
          *(void *)(a1[8] + ((v69 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v69);
          *(_DWORD *)(a1[11] + 4 * v69) = *((_DWORD *)a1 + 28);
          LODWORD(k) = *(_DWORD *)(v44 + 48);
        }
      }
      uint64_t v70 = *(void *)a1[1];
      uint64_t v71 = a1[5];
      fst::Times<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>((uint64_t)&v103, v44 + 8, (uint64_t)&v95);
      float v72 = (float *)(v70 + 40 * (int)k);
      fst::Plus<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>(v72, (uint64_t)&v95, (uint64_t)&v91);
      float v73 = *((float *)a1 + 7);
      BOOL v74 = v91 > (float)(v73 + *v72) || *v72 > (float)(v73 + v91);
      if (v74
        || ((float v76 = v72[1], v77 = v72[2], v76 == *(float *)&v92) ? (v78 = v77 == *((float *)&v92 + 1)) : (v78 = 0),
            (float v79 = vabds_f32(v76 + v77, *(float *)&v92 + *((float *)&v92 + 1)), !v78) ? (v80 = v79 > v73) : (v80 = 0),
            v80))
      {
        BOOL v75 = 0;
        goto LABEL_142;
      }
      uint64_t v81 = v70 + 40 * (int)k;
      uint64_t v82 = *(const void **)(v81 + 16);
      size_t v83 = *(void *)(v81 + 24) - (void)v82;
      float v84 = v93;
      if (v83 == v94 - (unsigned char *)v93)
      {
        BOOL v75 = memcmp(v82, v93, v83) == 0;
LABEL_142:
        float v84 = v93;
        if (!v93) {
          goto LABEL_144;
        }
LABEL_143:
        uint64_t v94 = v84;
        operator delete(v84);
        goto LABEL_144;
      }
      BOOL v75 = 0;
      if (v93) {
        goto LABEL_143;
      }
LABEL_144:
      if (v75)
      {
        int v85 = 0;
        int v86 = 1;
        int v28 = (void **)(a1 + 11);
      }
      else
      {
        fst::Plus<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>((float *)(v70 + 40 * (int)k), (uint64_t)&v95, (uint64_t)&v91);
        *float v72 = v91;
        *(void *)(v72 + 1) = v92;
        if (v72 != &v91) {
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v70 + 40 * (int)k + 16), (char *)v93, (uint64_t)v94, (v94 - (unsigned char *)v93) >> 2);
        }
        if (v93)
        {
          uint64_t v94 = v93;
          operator delete(v93);
        }
        uint64_t v87 = v71 + 40 * (int)k;
        fst::Plus<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>((float *)v87, (uint64_t)&v95, (uint64_t)&v91);
        int v28 = (void **)(a1 + 11);
        *(float *)uint64_t v87 = v91;
        *(void *)(v87 + 4) = v92;
        if ((float *)v87 != &v91) {
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v71 + 40 * (int)k + 16), (char *)v93, (uint64_t)v94, (v94 - (unsigned char *)v93) >> 2);
        }
        if (v93)
        {
          uint64_t v94 = v93;
          operator delete(v93);
        }
        if (fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Member(v70 + 40 * (int)k)
          && fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Member(v71 + 40 * (int)k))
        {
          uint64_t v88 = **(void **)(a1[2] + 16);
          if ((*(void *)(a1[8] + (((unint64_t)*(int *)(v44 + 48) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *(_DWORD *)(v44 + 48)))
          {
            (*(void (**)(void))(v88 + 40))();
            int v85 = 0;
            int v86 = 1;
          }
          else
          {
            (*(void (**)(void))(v88 + 24))();
            int v85 = 0;
            int v86 = 1;
            *(void *)(*v27 + (((unint64_t)*(int *)(v44 + 48) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *(_DWORD *)(v44 + 48);
          }
        }
        else
        {
          int v86 = 0;
          int v85 = 1;
          unsigned char *v89 = 1;
        }
      }
      if (v97)
      {
        uint64_t v98 = v97;
        operator delete(v97);
      }
      uint64_t v43 = v99;
      if (!v86) {
        goto LABEL_169;
      }
      if ((void)v99) {
        (*(void (**)(void))(*(void *)v99 + 40))();
      }
      else {
        ++v102;
      }
    }
    int v85 = 10;
LABEL_169:
    if (v43)
    {
      (*(void (**)(uint64_t))(*(void *)v43 + 8))(v43);
      goto LABEL_174;
    }
LABEL_172:
    if (v101) {
      --*(_DWORD *)v101;
    }
LABEL_174:
    if (v85 == 10) {
      int v85 = 0;
    }
    if (v105)
    {
      BOOL v106 = v105;
      operator delete(v105);
    }
  }
  while (!v85);
}

void sub_1B22ADA74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  int v28 = *(void **)(v26 - 120);
  if (v28)
  {
    *(void *)(v26 - 112) = v28;
    operator delete(v28);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::resize(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1[1];
  unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - *a1) >> 3);
  BOOL v6 = a2 >= v5;
  unint64_t v7 = a2 - v5;
  if (v7 != 0 && v6)
  {
    std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__append(a1, v7, a3);
  }
  else if (!v6)
  {
    uint64_t v8 = *a1 + 40 * a2;
    while (v4 != v8)
    {
      unint64_t v9 = *(void **)(v4 - 24);
      if (v9)
      {
        *(void *)(v4 - 16) = v9;
        operator delete(v9);
      }
      v4 -= 40;
    }
    a1[1] = v8;
  }
}

void *fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::NoWeight@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>::NoWeight();
  *(_DWORD *)a1 = *(_DWORD *)v2;
  uint64_t v3 = *(void *)(v2 + 4);
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = (void *)(a1 + 16);
  *(void *)((char *)v4 - 12) = v3;
  v4[1] = 0;
  v4[2] = 0;
  return std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v4, 0, 0, 0);
}

void *std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__append(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v8 = a1[2];
  uint64_t result = a1 + 2;
  uint64_t v7 = v8;
  uint64_t v9 = *(result - 1);
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - v9) >> 3) >= a2)
  {
    if (a2)
    {
      uint64_t v15 = v9 + 40 * a2;
      uint64_t v16 = 40 * a2;
      do
      {
        *(_DWORD *)uint64_t v9 = *(_DWORD *)a3;
        uint64_t v17 = *(void *)(a3 + 4);
        *(void *)(v9 + 16) = 0;
        *(void *)(v9 + 4) = v17;
        *(void *)(v9 + ++*(void *)(result + 24) = 0;
        *(void *)(v9 + 32) = 0;
        uint64_t result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(v9 + 16), *(const void **)(a3 + 16), *(void *)(a3 + 24), (uint64_t)(*(void *)(a3 + 24) - *(void *)(a3 + 16)) >> 2);
        v9 += 40;
        v16 -= 40;
      }
      while (v16);
      uint64_t v9 = v15;
    }
    a1[1] = v9;
  }
  else
  {
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((v9 - *a1) >> 3);
    unint64_t v11 = v10 + a2;
    if (v10 + a2 > 0x666666666666666) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - *a1) >> 3);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x333333333333333) {
      unint64_t v13 = 0x666666666666666;
    }
    else {
      unint64_t v13 = v11;
    }
    uint64_t v22 = result;
    if (v13) {
      unint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>((uint64_t)result, v13);
    }
    else {
      unint64_t v14 = 0;
    }
    unint64_t v18 = v14;
    uint64_t v19 = &v14[40 * v10];
    int v20 = v19;
    int v21 = &v14[40 * v13];
    std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__construct_at_end(&v18, a2, a3);
    std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__swap_out_circular_buffer(a1, &v18);
    return (void *)std::__split_buffer<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::~__split_buffer((uint64_t)&v18);
  }
  return result;
}

void sub_1B22ADDE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__construct_at_end(void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result;
  uint64_t v4 = result[2];
  if (a2)
  {
    uint64_t v6 = v4 + 40 * a2;
    uint64_t v7 = 40 * a2;
    do
    {
      *(_DWORD *)uint64_t v4 = *(_DWORD *)a3;
      uint64_t v8 = *(void *)(a3 + 4);
      *(void *)(v4 + 16) = 0;
      *(void *)(v4 + 4) = v8;
      *(void *)(v4 + ++*(void *)(result + 24) = 0;
      *(void *)(v4 + 32) = 0;
      uint64_t result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(v4 + 16), *(const void **)(a3 + 16), *(void *)(a3 + 24), (uint64_t)(*(void *)(a3 + 24) - *(void *)(a3 + 16)) >> 2);
      v4 += 40;
      v7 -= 40;
    }
    while (v7);
    uint64_t v4 = v6;
  }
  v3[2] = v4;
  return result;
}

void sub_1B22ADE94(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

uint64_t fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>::NoWeight()
{
  {
    operator new();
  }
  return fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>::NoWeight(void)::no_weight;
}

void sub_1B22ADF24(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1000C403E1C8BA9);
  _Unwind_Resume(a1);
}

uint64_t fst::PairWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>::NoWeight()
{
  {
    operator new();
  }
  return fst::PairWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>::NoWeight(void)::no_weight;
}

void sub_1B22ADFDC(_Unwind_Exception *a1)
{
}

uint64_t fst::ShortestDistanceState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::~ShortestDistanceState(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 88);
  if (v2)
  {
    *(void *)(a1 + 96) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 64);
  if (v3) {
    operator delete(v3);
  }
  unint64_t v5 = (void **)(a1 + 40);
  std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  return a1;
}

BOOL fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>::Member(float *a1)
{
  BOOL result = 0;
  if (*a1 != -INFINITY)
  {
    BOOL result = fst::LatticeWeightTpl<float>::Member(a1 + 1);
    if (result) {
      return *a1 == INFINITY && a1[1] == INFINITY && a1[2] == INFINITY
    }
          || *a1 != INFINITY && (a1[1] != INFINITY || a1[2] != INFINITY);
  }
  return result;
}

void fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::VectorFst()
{
}

void sub_1B22AE1E0(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

void fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::~VectorFst(void *a1)
{
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::~ImplToFst(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Start(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 8) + 88);
}

void *fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2);
  *(_DWORD *)a3 = *(_DWORD *)v3;
  *(void *)(a3 + 4) = *(void *)(v3 + 4);
  *(void *)(a3 + ++*(void *)(result + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 16) = 0;
  return std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a3 + 16), *(const void **)(v3 + 16), *(void *)(v3 + 24), (uint64_t)(*(void *)(v3 + 24) - *(void *)(v3 + 16)) >> 2);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::NumArcs(uint64_t a1, int a2)
{
  return 0x6DB6DB6DB6DB6DB7
       * ((uint64_t)(*(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 64)
                  - *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 56)) >> 3);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 40);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 48);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = fst::TestProperties<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    uint64_t v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return v7();
  }
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Type(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

void fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::GetArcs(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
}

void fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::Copy()
{
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::InitStateIterator(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 8) = (*(void *)(v2 + 72) - *(void *)(v2 + 64)) >> 3;
  return result;
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::InitArcIterator(uint64_t result, int a2, void *a3)
{
  uint64_t v3 = *(void *)(result + 8);
  *a3 = 0;
  unint64_t v5 = (uint64_t *)(*(void *)(*(void *)(v3 + 64) + 8 * a2) + 56);
  uint64_t v4 = *v5;
  uint64_t v6 = 0x6DB6DB6DB6DB6DB7 * ((v5[1] - *v5) >> 3);
  if (v5[1] == *v5) {
    uint64_t v4 = 0;
  }
  a3[1] = v4;
  a3[2] = v6;
  a3[3] = 0;
  return result;
}

uint64_t fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::IsMemoryMapped()
{
  return 0;
}

uint64_t fst::ImplToExpandedFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::NumStates(uint64_t a1)
{
  return (*(void *)(*(void *)(a1 + 8) + 72) - *(void *)(*(void *)(a1 + 8) + 64)) >> 3;
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::operator=(uint64_t result, uint64_t a2)
{
  if (result != a2) {
    operator new();
  }
  return result;
}

void sub_1B22AE574(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

unint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::SetStart(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::MutateCheck(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  *(_DWORD *)(v4 + 88) = a2;
  unint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
  *(void *)(v4 + 8) = result & 0xCCFFFFF0007 | (((result >> 35) & 1) << 37) | *(void *)(v4 + 8) & 4;
  return result;
}

void fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::SetFinal(uint64_t a1, int a2, int *a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::MutateCheck(a1);
  uint64_t v6 = *(void **)(a1 + 8);
  int v7 = *a3;
  uint64_t v8 = *(void *)(a3 + 1);
  unint64_t v10 = 0;
  uint64_t v11 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *((const void **)a3 + 2), *((void *)a3 + 3), (uint64_t)(*((void *)a3 + 3) - *((void *)a3 + 2)) >> 2);
  fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::SetFinal(v6, a2, (uint64_t)&v7);
  if (__p)
  {
    unint64_t v10 = __p;
    operator delete(__p);
  }
}

void sub_1B22AE6A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::SetProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a3 & 4;
  uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), v6);
  if (result != (v6 & a2)) {
    uint64_t result = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::MutateCheck(a1);
  }
  *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~a3 | 4) | a3 & a2;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::AddState(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::MutateCheck(a1);
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::AddState(v2);
  v2[1] = v2[1] & 4 | (*(uint64_t (**)(void *))(*v2 + 24))(v2) & 0x2AFFFFFF0007;
  return v3;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::AddArc(uint64_t a1, int a2, float *a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::MutateCheck(a1);
  uint64_t v6 = *(void **)(a1 + 8);
  return fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::AddArc(v6, a2, a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::DeleteStates(uint64_t a1, char **a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::MutateCheck(a1);
  uint64_t v4 = *(void **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::DeleteStates((uint64_t)v4, a2);
  uint64_t result = (*(uint64_t (**)(void *))(*v4 + 24))(v4);
  v4[1] = v4[1] & 4 | result & 0x6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::DeleteStates(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::MutateCheck(a1);
  uint64_t v2 = *(void **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::DeleteStates((uint64_t)v2);
  uint64_t result = (*(uint64_t (**)(void *))(*v2 + 24))(v2);
  v2[1] = (*((_DWORD *)v2 + 2) | result) & 4 | 0x156A5A950003;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::DeleteArcs(uint64_t a1, int a2, uint64_t a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::MutateCheck(a1);
  uint64_t v6 = *(void **)(a1 + 8);
  fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::DeleteArcs(*(void **)(v6[8] + 8 * a2), a3);
  uint64_t result = (*(uint64_t (**)(void *))(*v6 + 24))(v6);
  v6[1] = v6[1] & 4 | result & 0xA6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::DeleteArcs(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::MutateCheck(a1);
  uint64_t v4 = *(void **)(a1 + 8);
  unint64_t v5 = *(void **)(v4[8] + 8 * a2);
  v5[5] = 0;
  v5[6] = 0;
  std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__clear[abi:ne180100](v5 + 7);
  uint64_t result = (*(uint64_t (**)(void *))(*v4 + 24))(v4);
  v4[1] = v4[1] & 4 | result & 0xA6A5A950007;
  return result;
}

void fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::ReserveStates(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::MutateCheck(a1);
  uint64_t v4 = (void **)(*(void *)(a1 + 8) + 64);
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve(v4, a2);
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::ReserveArcs(uint64_t a1, int a2, unint64_t a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::MutateCheck(a1);
  uint64_t v6 = (uint64_t *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 56);
  return std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::reserve(v6, a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::MutableInputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::MutableOutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::SetInputSymbols(uint64_t a1, uint64_t a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::MutateCheck(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  return fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetInputSymbols(v4, a2);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::SetOutputSymbols(uint64_t a1, uint64_t a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::MutateCheck(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  return fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetOutputSymbols(v4, a2);
}

void fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::InitMutableArcIterator()
{
}

void sub_1B22AEC38(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B1C402DF695F1);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::VectorFstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A3FBC8;
  *(void *)(a1 + 8) = 0;
  uint64_t v2 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(void *)a1 = &unk_1F0A3A2F8;
  std::string::basic_string[abi:ne180100]<0>(&__str, "vector");
  std::string::operator=(v2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 8) = *(void *)(a1 + 8) & 4 | 0x156A5A950003;
  return a1;
}

void sub_1B22AED38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::~VectorFstBaseImpl(v15);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::~VectorFstBaseImpl(void *a1)
{
  *a1 = &unk_1F0A3D0F8;
  uint64_t v2 = (void *)a1[9];
  if (v2 != (void *)a1[8])
  {
    unint64_t v3 = 0;
    uint64_t v2 = (void *)a1[8];
    do
    {
      fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Destroy(v2[v3++]);
      uint64_t v2 = (void *)a1[8];
    }
    while (v3 < (uint64_t)(a1[9] - (void)v2) >> 3);
  }
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  return fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::~FstImpl((uint64_t)a1);
}

void fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::~VectorFstImpl(void *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::HasSequentialStates()
{
  return 1;
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Properties(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Properties(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 8) & a2;
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::~VectorFstBaseImpl(void *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::~FstImpl(uint64_t a1)
{
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::~FstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::~FstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A3FBC8;
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

uint64_t fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Write(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  uint64_t v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  uint64_t v3 = (void *)fst::cerr(v2);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write stream method for ", 39);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
  int v6 = *(char *)(v5 + 23);
  if (v6 >= 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = *(void *)v5;
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    uint64_t v8 = *(void *)(v5 + 8);
  }
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

{
  fst *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *__p[2];
  char v12;
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  uint64_t v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  uint64_t v3 = (void *)fst::cerr(v2);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write filename method for ", 41);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
  int v6 = *(char *)(v5 + 23);
  if (v6 >= 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = *(void *)v5;
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    uint64_t v8 = *(void *)(v5 + 8);
  }
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_1B22AF04C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B22AF148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::operator=(uint64_t a1)
{
  if (FLAGS_fst_error_fatal) {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
  }
  else {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  }
  uint64_t v2 = fst::LogMessage::LogMessage((fst *)&v7, (uint64_t)__p);
  uint64_t v3 = (void *)fst::cerr(v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"ImplToFst: Assignment operator disallowed", 41);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *(void *)(*(void *)(a1 + 8) + 8) |= 4uLL;
  return a1;
}

void sub_1B22AF24C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::MutateCheck(uint64_t result)
{
  if (*(int *)(*(void *)(result + 8) + 56) >= 2) {
    operator new();
  }
  return result;
}

void sub_1B22AF318(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::VectorFstImpl(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A3FBC8;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)(a1 + 64) = 0;
  uint64_t v5 = (void *)(a1 + 64);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(void *)a1 = &unk_1F0A3A2F8;
  std::string::basic_string[abi:ne180100]<0>(&__str, "vector");
  std::string::operator=(v4, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetInputSymbols(a1, v6);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 120))(a2);
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetOutputSymbols(a1, v7);
  *(_DWORD *)(a1 + 88) = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 1, 0))
  {
    int v8 = fst::CountStates<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>(a2);
    std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(a1 + 64), v8);
  }
  unsigned int v21 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 128))(a2, &v19);
  while (1)
  {
    if (!v19)
    {
      if ((int)v21 >= v20) {
        goto LABEL_33;
      }
LABEL_11:
      uint64_t v9 = v21;
      goto LABEL_12;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v19 + 16))(v19)) {
      break;
    }
    if (!v19) {
      goto LABEL_11;
    }
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 24))(v19);
LABEL_12:
    fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::AddState((void *)a1);
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)a2 + 32))(v16, a2, v9);
    fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::SetFinal(a1, v9, (int *)v16);
    if (__p)
    {
      unint64_t v18 = __p;
      operator delete(__p);
    }
    unint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, v9);
    std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::reserve((uint64_t *)(*(void *)(*v5 + 8 * (int)v9) + 56), v10);
    std::string::size_type v15 = 0;
    (*(void (**)(uint64_t, uint64_t, std::string *))(*(void *)a2 + 136))(a2, v9, &__str);
    while (1)
    {
      if (!__str.__r_.__value_.__r.__words[0])
      {
        if (v15 >= __str.__r_.__value_.__r.__words[2]) {
          goto LABEL_26;
        }
LABEL_20:
        uint64_t v11 = (_DWORD *)(__str.__r_.__value_.__l.__size_ + 56 * v15);
        goto LABEL_21;
      }
      if ((*(unsigned int (**)(std::string::size_type))(*(void *)__str.__r_.__value_.__l.__data_ + 24))(__str.__r_.__value_.__r.__words[0])) {
        break;
      }
      if (!__str.__r_.__value_.__r.__words[0]) {
        goto LABEL_20;
      }
      uint64_t v11 = (_DWORD *)(*(uint64_t (**)(void))(*(void *)__str.__r_.__value_.__l.__data_ + 32))();
LABEL_21:
      fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::AddArc(*(void **)(*v5 + 8 * (int)v9), v11);
      if (__str.__r_.__value_.__r.__words[0]) {
        (*(void (**)(std::string::size_type))(*(void *)__str.__r_.__value_.__l.__data_ + 40))(__str.__r_.__value_.__r.__words[0]);
      }
      else {
        ++v15;
      }
    }
    if (__str.__r_.__value_.__r.__words[0])
    {
      (*(void (**)(void))(*(void *)__str.__r_.__value_.__l.__data_ + 8))();
      goto LABEL_28;
    }
LABEL_26:
    if (v14) {
      --*v14;
    }
LABEL_28:
    if (v19) {
      (*(void (**)(uint64_t))(*(void *)v19 + 32))(v19);
    }
    else {
      ++v21;
    }
  }
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
LABEL_33:
  *(void *)(a1 + 8) = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x3FFFFFFF0004, 0) | *(void *)(a1 + 8) & 4 | 3;
  return a1;
}

void sub_1B22AF830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::~VectorFstBaseImpl(v21);
  _Unwind_Resume(a1);
}

uint64_t fst::CountStates<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>(uint64_t a1)
{
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 1, 0))
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 160);
    return v2(a1);
  }
  int v7 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v5);
  uint64_t v4 = 0;
  while (1)
  {
    while (!v5)
    {
      if (v7 >= v6) {
        return v4;
      }
      uint64_t v4 = (v4 + 1);
LABEL_12:
      ++v7;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 16))(v5)) {
      break;
    }
    uint64_t v4 = (v4 + 1);
    if (!v5) {
      goto LABEL_12;
    }
    (*(void (**)(void))(*(void *)v5 + 32))();
  }
  if (v5) {
    (*(void (**)(void))(*(void *)v5 + 8))();
  }
  return v4;
}

void sub_1B22AFA90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    fst::CountStates<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>();
  }
  _Unwind_Resume(exception_object);
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::SetFinal(uint64_t a1, int a2, int *a3)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 64) + 8 * a2);
  int v4 = *a3;
  uint64_t v5 = *(void *)(a3 + 1);
  int v7 = 0;
  uint64_t v8 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *((const void **)a3 + 2), *((void *)a3 + 3), (uint64_t)(*((void *)a3 + 3) - *((void *)a3 + 2)) >> 2);
  *(_DWORD *)uint64_t v3 = v4;
  *(void *)(v3 + 4) = v5;
  if ((int *)v3 != &v4) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v3 + 16), (char *)__p, (uint64_t)v7, (v7 - (unsigned char *)__p) >> 2);
  }
  if (__p)
  {
    int v7 = __p;
    operator delete(__p);
  }
}

void sub_1B22AFB40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x492492492492493) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 56 * v6;
    std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1B22AFC08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,std::reverse_iterator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>*>,std::reverse_iterator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>*>,std::reverse_iterator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,std::reverse_iterator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>*>,std::reverse_iterator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>*>,std::reverse_iterator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 56;
      std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::construct[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int> const&>(a1, v7 - 56, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 56;
      *((void *)&v16 + 1) -= 56;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,std::reverse_iterator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

void sub_1B22AFD4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,std::reverse_iterator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::reverse_iterator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::AddArc(void *a1, _DWORD *a2)
{
  if (!*a2) {
    ++a1[5];
  }
  if (!a2[1]) {
    ++a1[6];
  }
  uint64_t v3 = (uint64_t)(a1 + 9);
  unint64_t v4 = a1[8];
  if (v4 >= a1[9])
  {
    uint64_t result = std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::__push_back_slow_path<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> const&>(a1 + 7, (uint64_t)a2);
  }
  else
  {
    std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::construct[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int> const&>(v3, a1[8], (uint64_t)a2);
    uint64_t result = v4 + 56;
    a1[8] = v4 + 56;
  }
  a1[8] = result;
  return result;
}

void sub_1B22AFE1C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 64) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::__push_back_slow_path<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x492492492492492) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 3)) >= 0x249249249249249) {
    unint64_t v6 = 0x492492492492492;
  }
  else {
    unint64_t v6 = v4;
  }
  char v14 = a1 + 2;
  if (v6) {
    uint64_t v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>>((uint64_t)(a1 + 2), v6);
  }
  else {
    uint64_t v7 = 0;
  }
  unint64_t v10 = v7;
  uint64_t v11 = &v7[56 * v3];
  char v13 = &v7[56 * v6];
  std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::construct[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int> const&>((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  char v12 = v11 + 56;
  std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::__swap_out_circular_buffer(a1, &v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::~__split_buffer((uint64_t)&v10);
  return v8;
}

void sub_1B22AFF38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t fst::TestProperties<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (FLAGS_fst_verify_properties)
  {
    unint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    unint64_t v7 = fst::ComputeProperties<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>(a1, a2, a3, 0);
    if (!fst::CompatProperties(v6, v7))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      uint64_t v8 = fst::LogMessage::LogMessage((fst *)&v14, (uint64_t)__p);
      uint64_t v9 = (void *)fst::cerr(v8);
      unint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"TestProperties: stored Fst properties incorrect", 47);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" (stored: props1, computed: props2)", 35);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v14);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }
    return v7;
  }
  else
  {
    return fst::ComputeProperties<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>(a1, a2, a3, 1);
  }
}

void sub_1B22B0084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t fst::ComputeProperties<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  unint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  unint64_t v9 = v8;
  if (!a4
    || (uint64_t v10 = v8 & 0x3FFFFFFF0000 | (2 * v8) & 0x2AAAAAAA0000 | (v8 >> 1) & 0x155555550000 | 7, (a2 & ~v10) != 0))
  {
    unint64_t v9 = v8 & 7;
    unint64_t v98 = v9;
    int v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    if ((a2 & 0xF3C00000000) != 0 && v11)
    {
      uint64_t v92 = 0;
      v93[0] = 0;
      v93[1] = 0;
      uint64_t v94 = &v98;
      fst::DfsVisit<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SccVisitor<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>(a1, (uint64_t)&v92);
    }
    if ((a2 & 0xFFFFF0C3FFFFFFF8) == 0) {
      goto LABEL_175;
    }
    uint64_t v71 = a3;
    uint64_t v12 = a2 & 0xC0000;
    uint64_t v13 = 0x10425A810000;
    if ((a2 & 0xC0000) != 0) {
      uint64_t v13 = 0x10425A850000;
    }
    unint64_t v14 = v9 | v13;
    uint64_t v15 = a2 & 0x300000;
    if ((a2 & 0x300000) != 0) {
      v14 |= 0x100000uLL;
    }
    unint64_t v98 = v14;
    memset(&v91, 0, sizeof(v91));
    memset(&v90, 0, sizeof(v90));
    unsigned int v89 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v87);
    int v16 = 0;
LABEL_12:
    if (!v87)
    {
      if ((int)v89 >= v88) {
        goto LABEL_167;
      }
      goto LABEL_17;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(void *)v87 + 16))(v87))
    {
      if (v87)
      {
        uint64_t v17 = (*(uint64_t (**)(void))(*(void *)v87 + 24))();
LABEL_18:
        std::vector<unsigned int>::size_type v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 40))(a1, v17);
        uint64_t v94 = 0;
        float v95 = 0;
        uint64_t v96 = 0;
        v91.__end_ = v91.__begin_;
        v90.__end_ = v90.__begin_;
        if (v12) {
          std::vector<int>::reserve(&v91, v18);
        }
        if (v15) {
          std::vector<int>::reserve(&v90, v18);
        }
        unint64_t v86 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 136))(a1, v17, &v82);
        char v19 = 1;
        while (1)
        {
          if (v82)
          {
            if ((*(unsigned int (**)(uint64_t))(*(void *)v82 + 24))(v82))
            {
              if (v82)
              {
                (*(void (**)(void))(*(void *)v82 + 8))();
              }
              else
              {
LABEL_110:
                if (v85) {
                  --*(_DWORD *)v85;
                }
              }
              if (!v12
                || (std::__sort<std::__less<int,int> &,int *>(),
                    (std::vector<unsigned int>::pointer)((char *)v91.__end_ - (char *)v91.__begin_) < (std::vector<unsigned int>::pointer)5))
              {
LABEL_119:
                if (!v15) {
                  goto LABEL_130;
                }
LABEL_120:
                std::__sort<std::__less<int,int> &,int *>();
                if ((std::vector<unsigned int>::pointer)((char *)v90.__end_ - (char *)v90.__begin_) >= (std::vector<unsigned int>::pointer)5)
                {
                  unint64_t v58 = v90.__end_ - v90.__begin_;
                  if (v58 <= 2) {
                    unint64_t v58 = 2;
                  }
                  std::vector<unsigned int>::pointer v59 = v90.__begin_ + 1;
                  unsigned int v60 = *v90.__begin_;
                  unint64_t v61 = v58 - 1;
                  while (1)
                  {
                    unsigned int v63 = *v59++;
                    unsigned int v62 = v63;
                    if (v63 == v60) {
                      break;
                    }
                    unsigned int v60 = v62;
                    if (!--v61) {
                      goto LABEL_130;
                    }
                  }
                  unint64_t v98 = v98 & 0xFFFFFFFFFFCFFFFFLL | 0x200000;
                }
                goto LABEL_130;
              }
              unint64_t v52 = v91.__end_ - v91.__begin_;
              if (v52 <= 2) {
                unint64_t v52 = 2;
              }
              std::vector<unsigned int>::pointer v53 = v91.__begin_ + 1;
              unsigned int v54 = *v91.__begin_;
              unint64_t v55 = v52 - 1;
              while (1)
              {
                unsigned int v57 = *v53++;
                unsigned int v56 = v57;
                if (v57 == v54) {
                  break;
                }
                unsigned int v54 = v56;
                if (!--v55) {
                  goto LABEL_119;
                }
              }
              unint64_t v98 = v98 & 0xFFFFFFFFFFF3FFFFLL | 0x80000;
              if (v15) {
                goto LABEL_120;
              }
LABEL_130:
              if (v16 >= 1) {
                unint64_t v98 = v98 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
              }
              (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(&v82, a1, v17);
              fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero((uint64_t)&v77);
              float v72 = *(float *)&v82;
              float v102 = v77;
              v64.n128_u32[0] = v82;
              if (*(float *)&v82 != v77
                || (float v72 = *((float *)&v82 + 1),
                    float v102 = *(float *)&v83,
                    float v101 = v78,
                    float v100 = v79,
                    v64.n128_u32[0] = HIDWORD(v82),
                    *((float *)&v82 + 1) != v78)
                || (v64.n128_f32[0] = v102, v102 != v100))
              {
                BOOL v65 = 1;
                goto LABEL_136;
              }
              int v66 = v80;
              if (v85 - (unsigned char *)v84 == v81 - (unsigned char *)v80)
              {
                BOOL v65 = memcmp(v84, v80, v85 - (unsigned char *)v84) != 0;
LABEL_136:
                int v66 = v80;
                if (v80)
                {
LABEL_137:
                  uint64_t v81 = v66;
                  operator delete(v66);
                }
              }
              else
              {
                BOOL v65 = 1;
                if (v80) {
                  goto LABEL_137;
                }
              }
              if (v65)
              {
                fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::One((uint64_t)&v77);
                float v72 = *(float *)&v82;
                float v102 = v77;
                v67.n128_u32[0] = v82;
                if (*(float *)&v82 != v77
                  || (float v72 = *((float *)&v82 + 1),
                      float v102 = *(float *)&v83,
                      float v101 = v78,
                      float v100 = v79,
                      v67.n128_u32[0] = HIDWORD(v82),
                      *((float *)&v82 + 1) != v78)
                  || (v67.n128_f32[0] = v102, v102 != v100))
                {
                  BOOL v68 = 1;
                  goto LABEL_143;
                }
                unint64_t v69 = v80;
                if (v85 - (unsigned char *)v84 == v81 - (unsigned char *)v80)
                {
                  BOOL v68 = memcmp(v84, v80, v85 - (unsigned char *)v84) != 0;
LABEL_143:
                  unint64_t v69 = v80;
                  if (v80)
                  {
LABEL_144:
                    uint64_t v81 = v69;
                    operator delete(v69);
                  }
                }
                else
                {
                  BOOL v68 = 1;
                  if (v80) {
                    goto LABEL_144;
                  }
                }
                if (v68) {
                  unint64_t v98 = v98 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
                }
                ++v16;
              }
              else if ((*(uint64_t (**)(uint64_t, uint64_t, __n128))(*(void *)a1 + 40))(a1, v17, v64) != 1)
              {
                unint64_t v98 = v98 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
              }
              if (v84)
              {
                int v85 = (char *)v84;
                operator delete(v84);
              }
              if (v94)
              {
                float v95 = v94;
                operator delete(v94);
              }
              if (v87) {
                (*(void (**)(uint64_t, __n128))(*(void *)v87 + 32))(v87, v67);
              }
              else {
                ++v89;
              }
              goto LABEL_12;
            }
            if (v82)
            {
              uint64_t v20 = (*(uint64_t (**)(void))(*(void *)v82 + 32))();
              goto LABEL_29;
            }
          }
          else if (v86 >= (unint64_t)v84)
          {
            goto LABEL_110;
          }
          uint64_t v20 = v83 + 56 * v86;
LABEL_29:
          int v21 = *(_DWORD *)v20;
          int v22 = *(_DWORD *)v20;
          if (*(_DWORD *)v20 != *(_DWORD *)(v20 + 4))
          {
            unint64_t v98 = v98 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
            int v22 = *(_DWORD *)(v20 + 4);
          }
          if (v21 | v22)
          {
            if (v21)
            {
              if (!v22) {
                goto LABEL_39;
              }
              goto LABEL_35;
            }
            unint64_t v23 = v98;
          }
          else
          {
            unint64_t v23 = v98 & 0xFFFFFFFFFF3FFFFFLL | 0x400000;
          }
          unint64_t v98 = v23 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
          if (!v22)
          {
LABEL_39:
            unint64_t v98 = v98 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
            if (v19) {
              goto LABEL_44;
            }
            goto LABEL_40;
          }
LABEL_35:
          if (v19) {
            goto LABEL_44;
          }
LABEL_40:
          if (v21 < (int)v92) {
            unint64_t v98 = v98 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
          }
          if (v22 < SHIDWORD(v92)) {
            unint64_t v98 = v98 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
          }
LABEL_44:
          fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::One((uint64_t)&v77);
          float v72 = 0.0;
          float v72 = *(float *)(v20 + 8);
          float v102 = v77;
          if (v72 != v77) {
            goto LABEL_49;
          }
          float v72 = 0.0;
          float v72 = *(float *)(v20 + 12);
          float v102 = 0.0;
          float v102 = *(float *)(v20 + 16);
          float v101 = v78;
          float v100 = v79;
          if (v72 != v78
            || v102 != v100
            || (uint64_t v24 = *(const void **)(v20 + 24),
                size_t v25 = *(void *)(v20 + 32) - (void)v24,
                uint64_t v26 = v80,
                v25 != v81 - (unsigned char *)v80)
            || memcmp(v24, v80, v25))
          {
LABEL_49:
            fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero((uint64_t)&v72);
            float v102 = 0.0;
            float v102 = *(float *)(v20 + 8);
            float v101 = v72;
            if (v102 != v72
              || (float v102 = 0.0,
                  float v102 = *(float *)(v20 + 12),
                  float v101 = 0.0,
                  float v101 = *(float *)(v20 + 16),
                  float v100 = v73,
                  float v99 = v74,
                  v102 != v73)
              || v101 != v99)
            {
              BOOL v27 = 1;
              goto LABEL_53;
            }
            unint64_t v50 = *(const void **)(v20 + 24);
            size_t v51 = *(void *)(v20 + 32) - (void)v50;
            int v28 = __p;
            if (v51 == v76 - (unsigned char *)__p)
            {
              BOOL v27 = memcmp(v50, __p, v51) != 0;
LABEL_53:
              int v28 = __p;
              if (__p)
              {
LABEL_54:
                float v76 = v28;
                operator delete(v28);
              }
            }
            else
            {
              BOOL v27 = 1;
              if (__p) {
                goto LABEL_54;
              }
            }
            uint64_t v26 = v80;
            if (!v80) {
              goto LABEL_57;
            }
LABEL_56:
            uint64_t v81 = v26;
            operator delete(v26);
            goto LABEL_57;
          }
          BOOL v27 = 0;
          if (v26) {
            goto LABEL_56;
          }
LABEL_57:
          if (v27) {
            unint64_t v98 = v98 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
          }
          int v29 = *(_DWORD *)(v20 + 48);
          if (v29 <= (int)v17) {
            unint64_t v98 = v98 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
          }
          if (v29 != v17 + 1) {
            unint64_t v98 = v98 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
          }
          uint64_t v92 = *(void *)v20;
          fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::operator=((uint64_t)v93, v20 + 8);
          int v97 = *(_DWORD *)(v20 + 48);
          if (v12)
          {
            std::vector<unsigned int>::pointer end = v91.__end_;
            if (v91.__end_ >= v91.__end_cap_.__value_)
            {
              std::vector<unsigned int>::pointer begin = v91.__begin_;
              int64_t v33 = v91.__end_ - v91.__begin_;
              unint64_t v34 = v33 + 1;
              if ((unint64_t)(v33 + 1) >> 62) {
                goto LABEL_177;
              }
              int64_t v35 = (char *)v91.__end_cap_.__value_ - (char *)v91.__begin_;
              if (((char *)v91.__end_cap_.__value_ - (char *)v91.__begin_) >> 1 > v34) {
                unint64_t v34 = v35 >> 1;
              }
              if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v36 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v36 = v34;
              }
              if (v36)
              {
                uint64_t v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v91.__end_cap_, v36);
                std::vector<unsigned int>::pointer begin = v91.__begin_;
                std::vector<unsigned int>::pointer end = v91.__end_;
              }
              else
              {
                uint64_t v37 = 0;
              }
              uint64_t v38 = (unsigned int *)&v37[4 * v33];
              *uint64_t v38 = *(_DWORD *)v20;
              int v31 = v38 + 1;
              while (end != begin)
              {
                unsigned int v39 = *--end;
                *--uint64_t v38 = v39;
              }
              v91.__begin_ = v38;
              v91.__end_ = v31;
              v91.__end_cap_.__value_ = (unsigned int *)&v37[4 * v36];
              if (begin) {
                operator delete(begin);
              }
            }
            else
            {
              *v91.__end_ = *(_DWORD *)v20;
              int v31 = end + 1;
            }
            v91.__end_ = v31;
          }
          if (v15)
          {
            std::vector<unsigned int>::pointer v40 = v90.__end_;
            if (v90.__end_ >= v90.__end_cap_.__value_)
            {
              std::vector<unsigned int>::pointer v42 = v90.__begin_;
              int64_t v43 = v90.__end_ - v90.__begin_;
              unint64_t v44 = v43 + 1;
              if ((unint64_t)(v43 + 1) >> 62) {
LABEL_177:
              }
                std::vector<int>::__throw_length_error[abi:ne180100]();
              int64_t v45 = (char *)v90.__end_cap_.__value_ - (char *)v90.__begin_;
              if (((char *)v90.__end_cap_.__value_ - (char *)v90.__begin_) >> 1 > v44) {
                unint64_t v44 = v45 >> 1;
              }
              if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v46 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v46 = v44;
              }
              if (v46)
              {
                int v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v90.__end_cap_, v46);
                std::vector<unsigned int>::pointer v42 = v90.__begin_;
                std::vector<unsigned int>::pointer v40 = v90.__end_;
              }
              else
              {
                int v47 = 0;
              }
              uint64_t v48 = (unsigned int *)&v47[4 * v43];
              *uint64_t v48 = *(_DWORD *)(v20 + 4);
              uint64_t v41 = v48 + 1;
              while (v40 != v42)
              {
                unsigned int v49 = *--v40;
                *--uint64_t v48 = v49;
              }
              v90.__begin_ = v48;
              v90.__end_ = v41;
              v90.__end_cap_.__value_ = (unsigned int *)&v47[4 * v46];
              if (v42) {
                operator delete(v42);
              }
            }
            else
            {
              *v90.__end_ = *(_DWORD *)(v20 + 4);
              uint64_t v41 = v40 + 1;
            }
            v90.__end_ = v41;
          }
          if (v82)
          {
            (*(void (**)(uint64_t))(*(void *)v82 + 40))(v82);
            char v19 = 0;
          }
          else
          {
            char v19 = 0;
            ++v86;
          }
        }
      }
LABEL_17:
      uint64_t v17 = v89;
      goto LABEL_18;
    }
    if (v87) {
      (*(void (**)(void))(*(void *)v87 + 8))();
    }
LABEL_167:
    a3 = v71;
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 24))(a1) != -1
      && (*(unsigned int (**)(uint64_t))(*(void *)a1 + 24))(a1))
    {
      unint64_t v98 = v98 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
    }
    if (v90.__begin_)
    {
      v90.__end_ = v90.__begin_;
      operator delete(v90.__begin_);
    }
    if (v91.__begin_)
    {
      v91.__end_ = v91.__begin_;
      operator delete(v91.__begin_);
    }
    unint64_t v9 = v98;
LABEL_175:
    uint64_t v10 = v9 & 0x3FFFFFFF0000 | (2 * v9) & 0x2AAAAAAA0000 | (v9 >> 1) & 0x155555550000 | 7;
  }
  *a3 = v10;
  return v9;
}

void sub_1B22B0D20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,void *a35,uint64_t a36)
{
  if (__p) {
    operator delete(__p);
  }
  if (a35) {
    operator delete(a35);
  }
  _Unwind_Resume(exception_object);
}

void fst::DfsVisit<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SccVisitor<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>(uint64_t a1, uint64_t a2)
{
}

void sub_1B22B16B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::~MemoryPool((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va1);
  int v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(void *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

void fst::SccVisitor<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::InitVisit(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1) {
    *(void *)(*(void *)a1 + 8) = **(void **)a1;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    *(void *)(v3 + 8) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    *(void *)(v4 + 8) = 0;
    *(unsigned char *)(a1 + 52) = 0;
    **(void **)(a1 + ++*(void *)(result + 24) = **(void **)(a1 + 24) & 0xFFFFF0C3FFFFFFFFLL | 0x52800000000;
    *(void *)(a1 + 32) = a2;
    int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
    *(_DWORD *)(a1 + 44) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 40) = v5;
    operator new();
  }
  operator new();
}

void fst::SccVisitor<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::FinishState(uint64_t a1, int a2, int a3)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 32) + 32))(&v27);
  fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero((uint64_t)&v22);
  int v34 = v27;
  float v33 = v22;
  BOOL v6 = *(float *)&v27 != v22
    || (v34 = HIDWORD(v27), v33 = v28, v32 = v23, float v31 = v24, *((float *)&v27 + 1) != v23)
    || v33 != v31
    || v30 - (unsigned char *)v29 != v26 - (unsigned char *)__p
    || memcmp(v29, __p, v30 - (unsigned char *)v29) != 0;
  if (__p)
  {
    uint64_t v26 = __p;
    operator delete(__p);
  }
  if (v29)
  {
    uint64_t v30 = v29;
    operator delete(v29);
  }
  if (v6) {
    *(void *)(**(void **)(a1 + 16) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  }
  uint64_t v7 = **(void **)(a1 + 64);
  if (*(_DWORD *)(**(void **)(a1 + 56) + 4 * a2) != *(_DWORD *)(v7 + 4 * a2)) {
    goto LABEL_26;
  }
  char v8 = 0;
  uint64_t v9 = *(void **)(a1 + 80);
  uint64_t v10 = v9[1];
  uint64_t v11 = **(void **)(a1 + 16);
  uint64_t v12 = (int *)(((v10 - *v9) & 0xFFFFFFFFFFFFFFFCLL) + *v9 - 4);
  do
  {
    unint64_t v13 = *v12--;
    v8 |= *(void *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v13;
  }
  while (v13 != a2);
  uint64_t v14 = *(void **)a1;
  uint64_t v15 = **(void **)(a1 + 72);
  for (float i = (int *)(v10 - 4); ; --i)
  {
    unint64_t v17 = *i;
    if (v14) {
      *(_DWORD *)(*v14 + 4 * v17) = *(_DWORD *)(a1 + 48);
    }
    unint64_t v18 = v17 >> 6;
    uint64_t v19 = 1 << v17;
    if ((v8 & 1) == 0) {
      break;
    }
    *(void *)(v11 + 8 * v18) |= v19;
    *(void *)(v15 + 8 * v18) &= ~v19;
    if (v17 == a2)
    {
      v9[1] = i;
      goto LABEL_25;
    }
LABEL_23:
    ;
  }
  *(void *)(v15 + 8 * v18) &= ~v19;
  if (v17 != a2) {
    goto LABEL_23;
  }
  v9[1] = i;
  **(void **)(a1 + ++*(void *)(result + 24) = **(void **)(a1 + 24) & 0xFFFFF3FFFFFFFFFFLL | 0x80000000000;
LABEL_25:
  ++*(_DWORD *)(a1 + 48);
LABEL_26:
  if (a3 != -1)
  {
    uint64_t v20 = **(void **)(a1 + 16);
    if ((*(void *)(v20 + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a2)) {
      *(void *)(v20 + (((unint64_t)a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a3;
    }
    int v21 = *(_DWORD *)(v7 + 4 * a2);
    if (v21 < *(_DWORD *)(v7 + 4 * a3)) {
      *(_DWORD *)(v7 + 4 * a3) = v21;
    }
  }
}

void sub_1B22B1B70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::~MemoryPool(quasar::Bitmap *a1)
{
  *(void *)a1 = &unk_1F0A36D10;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Link>::~MemoryArena((void *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_1F0A36D10;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Link>::~MemoryArena((void *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::MemoryPool(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A36D10;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Link>::MemoryArena(a1 + 1, a2);
}

void sub_1B22B1C28(_Unwind_Exception *a1)
{
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Size()
{
  return 48;
}

void fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Link>::MemoryArena(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A37CC8;
  a1[1] = 56 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_1B22B1D40(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Link>::~MemoryArena(void *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1B3EA8670);
}

{
  void *v2;
  void *i;
  uint64_t v4;
  uint64_t vars8;

  *a1 = &unk_1F0A37CC8;
  uint64_t v2 = a1 + 3;
  for (float i = (void *)a1[4]; i != v2; float i = (void *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x1B3EA8630](v4, 0x1000C8077774924);
    }
  }
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Link>::Size()
{
  return 56;
}

void std::deque<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>> *>>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>> *>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>> *>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      int v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      int64_t v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    unint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      int v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      int64_t v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        size_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)size_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      int64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unsigned int v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  std::vector<unsigned int>::pointer v53 = operator new(0x1000uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  int v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1B22B2188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::ArcBuffer<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::SetFromFst<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t **))(*(void *)a2 + 136))(a2, a3, &v25);
  if (!v25 && (a4 & 1) == 0)
  {
    uint64_t v10 = v26 + 56 * v27;
    *(void *)(a1 + 16) = v26;
    *(void *)(a1 + ++*(void *)(result + 24) = v10;
    if (*(void *)a1)
    {
      free(*(void **)a1);
      *(void *)a1 = 0;
    }
    *(void *)(a1 + 8) = 0;
    return;
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, a3);
  uint64_t v12 = a5;
  if (!a4) {
    uint64_t v12 = 0;
  }
  unint64_t v13 = v11 + v12;
  if (*(void *)(a1 + 8) < (unint64_t)(v11 + v12))
  {
    if (*(void *)a1) {
      free(*(void **)a1);
    }
    uint64_t v24 = 0x4000;
    if (v13 > 0x4000) {
      uint64_t v24 = v13;
    }
    *(void *)(a1 + 8) = v24;
    uint64_t v15 = malloc_type_malloc(56 * v24, 0x10100407878D4B7uLL);
    *(void *)a1 = v15;
    *(void *)(a1 + 16) = v15;
    BOOL v14 = v15;
  }
  else
  {
    BOOL v14 = *(void **)(a1 + 16);
    uint64_t v15 = *(void **)a1;
  }
  *(void *)(a1 + ++*(void *)(result + 24) = &v14[7 * v13];
  uint64_t v16 = v25;
  uint64_t v17 = v26;
  unint64_t v19 = v27;
  uint64_t v18 = v28;
  if (v28) {
    ++*v28;
  }
  unint64_t v20 = 0;
LABEL_13:
  v15 += 7;
  while (v16)
  {
    int v21 = (*(uint64_t (**)(uint64_t *))(*v16 + 24))(v16);
    uint64_t v22 = *v16;
    if (v21)
    {
      (*(void (**)(uint64_t *))(v22 + 8))(v16);
      return;
    }
    uint64_t v23 = (*(uint64_t (**)(uint64_t *))(v22 + 32))(v16);
LABEL_18:
    *(v15 - 7) = *(void *)v23;
    fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::operator=((uint64_t)(v15 - 6), v23 + 8);
    *((_DWORD *)v15 - 2) = *(_DWORD *)(v23 + 48);
    if (!v16)
    {
      ++v20;
      goto LABEL_13;
    }
    v15 += 7;
    (*(void (**)(uint64_t *))(*v16 + 40))(v16);
  }
  uint64_t v23 = v17 + 56 * v20;
  if (v20 < v19) {
    goto LABEL_18;
  }
  if (v18) {
    --*v18;
  }
}

void sub_1B22B2464(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  else if (v2)
  {
    --*v2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::WriteFst<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>>(void *a1, void *a2, uint64_t a3)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  long long v38 = 0u;
  long long v39 = 0u;
  *(_OWORD *)uint64_t v36 = 0u;
  *(_OWORD *)uint64_t v37 = 0u;
  uint64_t v6 = -1;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  uint64_t v40 = -1;
  uint64_t v40 = (*(int (**)(void *))(*a1 + 24))(a1);
  uint64_t v41 = -1;
  if ((*(uint64_t (**)(void *, uint64_t, void))(*a1 + 64))(a1, 1, 0))
  {
    uint64_t v6 = 0;
LABEL_3:
    int v7 = 0;
    uint64_t v41 = (int)fst::CountStates<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>((uint64_t)a1);
    goto LABEL_6;
  }
  unint64_t v8 = (char *)a2 + *(void *)(*a2 - 24);
  if ((v8[32] & 5) == 0)
  {
    (*(void (**)(std::string *__return_ptr))(**((void **)v8 + 5) + 32))(&__p);
    uint64_t v6 = v45;
    if (v45 != -1) {
      goto LABEL_3;
    }
  }
  int v7 = 1;
LABEL_6:
  uint64_t v9 = (*(uint64_t (**)(void *, uint64_t, void))(*a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  std::string::basic_string[abi:ne180100]<0>(&__p, "vector");
  v9 |= 3uLL;
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::WriteFstHeader((uint64_t)a1, (uint64_t)a2, (unsigned char *)a3, 2, &__p, v9, (uint64_t)v35);
  uint64_t v31 = v9;
  uint64_t v32 = v6;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  unint64_t v10 = *(void *)(a1[1] + 72) - *(void *)(a1[1] + 64);
  unint64_t v11 = v10 >> 3;
  if ((int)(v10 >> 3) < 1)
  {
    LODWORD(v11) = 0;
  }
  else
  {
    int v33 = v7;
    uint64_t v12 = 0;
    uint64_t v13 = (v10 >> 3);
    do
    {
      (*(void (**)(std::string *__return_ptr, void *, uint64_t))(*a1 + 32))(&__p, a1, v12);
      fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Write((uint64_t)&__p, a2);
      if (__p.__r_.__value_.__r.__words[2])
      {
        std::string::size_type v44 = __p.__r_.__value_.__r.__words[2];
        operator delete((void *)__p.__r_.__value_.__r.__words[2]);
      }
      __p.__r_.__value_.__r.__words[0] = (*(uint64_t (**)(void *, uint64_t))(*a1 + 40))(a1, v12);
      std::ostream::write();
      uint64_t v14 = *(void *)(*(void *)(a1[1] + 64) + 8 * v12);
      uint64_t v16 = *(void *)(v14 + 56);
      uint64_t v15 = *(void *)(v14 + 64);
      if (v15 == v16) {
        uint64_t v17 = 0;
      }
      else {
        uint64_t v17 = *(_DWORD **)(v14 + 56);
      }
      if (v15 != v16)
      {
        if ((unint64_t)((v15 - v16) / 56) <= 1) {
          uint64_t v18 = 1;
        }
        else {
          uint64_t v18 = (v15 - v16) / 56;
        }
        unint64_t v19 = v17;
        do
        {
          int v20 = *v19;
          v19 += 14;
          LODWORD(__p.__r_.__value_.__l.__data_) = v20;
          std::ostream::write();
          LODWORD(__p.__r_.__value_.__l.__data_) = v17[1];
          std::ostream::write();
          fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Write((uint64_t)(v17 + 2), a2);
          LODWORD(__p.__r_.__value_.__l.__data_) = v17[12];
          std::ostream::write();
          uint64_t v17 = v19;
          --v18;
        }
        while (v18);
      }
      ++v12;
    }
    while (v12 != v13);
    int v7 = v33;
  }
  std::ostream::flush();
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    int v21 = fst::LogMessage::LogMessage((fst *)&v34, (uint64_t)&__p);
    uint64_t v22 = (void *)fst::cerr(v21);
    uint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"VectorFst::Write: write failed: ", 32);
    int v24 = *(char *)(a3 + 23);
    if (v24 >= 0) {
      uint64_t v25 = a3;
    }
    else {
      uint64_t v25 = *(void *)a3;
    }
    if (v24 >= 0) {
      uint64_t v26 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v26 = *(void *)(a3 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, v25, v26);
LABEL_32:
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v34);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t updated = 0;
    goto LABEL_35;
  }
  if (!v7)
  {
    if (v41 == v11)
    {
      uint64_t updated = 1;
      goto LABEL_35;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    int v29 = fst::LogMessage::LogMessage((fst *)&v34, (uint64_t)&__p);
    long long v30 = (void *)fst::cerr(v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Inconsistent number of states observed during write", 51);
    goto LABEL_32;
  }
  uint64_t v41 = v11;
  std::string::basic_string[abi:ne180100]<0>(&__p, "vector");
  uint64_t updated = fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::UpdateFstHeader((uint64_t)a1, a2, a3, 2, &__p, v31, (uint64_t)v35, v32);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_35:
  if (SHIBYTE(v38) < 0) {
    operator delete(v37[1]);
  }
  if (SHIBYTE(v37[0]) < 0) {
    operator delete(v36[0]);
  }
  return updated;
}

void sub_1B22B2980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  fst::FstHeader::~FstHeader(&a15);
  _Unwind_Resume(a1);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::WriteFstHeader(uint64_t a1, uint64_t a2, unsigned char *a3, int a4, std::string *__str, uint64_t a6, uint64_t a7)
{
  if (a3[24])
  {
    std::string::operator=((std::string *)(a7 + 8), __str);
    uint64_t v13 = (const std::string *)fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::Type();
    std::string::operator=((std::string *)(a7 + 32), v13);
    *(_DWORD *)(a7 + 56) = a4;
    *(void *)(a7 + 64) = a6;
    if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1)) {
      BOOL v14 = a3[25] == 0;
    }
    else {
      BOOL v14 = 1;
    }
    int v15 = !v14;
    uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
    if (a3[26]) {
      BOOL v17 = v16 == 0;
    }
    else {
      BOOL v17 = 1;
    }
    int v18 = v15 | 2;
    if (v17) {
      int v18 = v15;
    }
    if (a3[27]) {
      v18 |= 4u;
    }
    *(_DWORD *)(a7 + 60) = v18;
    fst::FstHeader::Write();
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1)) {
    BOOL v19 = a3[25] == 0;
  }
  else {
    BOOL v19 = 1;
  }
  if (!v19)
  {
    uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 72))(v20, a2);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  if (result && a3[26])
  {
    uint64_t v22 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1) + 72);
    return v22();
  }
  return result;
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::UpdateFstHeader(uint64_t a1, void *a2, uint64_t a3, int a4, std::string *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  MEMORY[0x1B3EA7E70](v32);
  uint64_t v16 = (char *)a2 + *(void *)(*a2 - 24);
  if ((v16[32] & 5) == 0)
  {
    uint64_t v17 = *((void *)v16 + 5);
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long __p = 0u;
    long long v35 = 0u;
    uint64_t v42 = a8;
    (*(void (**)(void *__return_ptr))(*(void *)v17 + 40))(v33);
    if (v33[16] == -1) {
      std::ios_base::clear((std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32) | 4);
    }
  }
  MEMORY[0x1B3EA7E80](v32);
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    int v18 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
    BOOL v19 = (void *)fst::cerr(v18);
    uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
    int v21 = *(char *)(a3 + 23);
    if (v21 >= 0) {
      uint64_t v22 = a3;
    }
    else {
      uint64_t v22 = *(void *)a3;
    }
    if (v21 >= 0) {
      uint64_t v23 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v23 = *(void *)(a3 + 8);
    }
  }
  else
  {
    fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::WriteFstHeader(a1, (uint64_t)a2, (unsigned char *)a3, a4, a5, a6, a7);
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      int v24 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
      uint64_t v25 = (void *)fst::cerr(v24);
      uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      int v26 = *(char *)(a3 + 23);
      if (v26 >= 0) {
        uint64_t v22 = a3;
      }
      else {
        uint64_t v22 = *(void *)a3;
      }
      if (v26 >= 0) {
        uint64_t v23 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v23 = *(void *)(a3 + 8);
      }
    }
    else
    {
      MEMORY[0x1B3EA7E70](v33, a2);
      unint64_t v27 = (char *)a2 + *(void *)(*a2 - 24);
      if ((v27[32] & 5) == 0)
      {
        (*(void (**)(long long *__return_ptr))(**((void **)v27 + 5) + 32))(&__p);
        if (v42 == -1) {
          std::ios_base::clear((std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32) | 4);
        }
      }
      MEMORY[0x1B3EA7E80](v33);
      if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) == 0) {
        return 1;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      uint64_t v28 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
      int v29 = (void *)fst::cerr(v28);
      uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      int v30 = *(char *)(a3 + 23);
      if (v30 >= 0) {
        uint64_t v22 = a3;
      }
      else {
        uint64_t v22 = *(void *)a3;
      }
      if (v30 >= 0) {
        uint64_t v23 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v23 = *(void *)(a3 + 8);
      }
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v22, v23);
  fst::LogMessage::~LogMessage((fst::LogMessage *)v33);
  if (SBYTE7(v35) < 0) {
    operator delete((void *)__p);
  }
  return 0;
}

void sub_1B22B2FC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
}

uint64_t fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::Type()
{
  {
    operator new();
  }
  return fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::Type(void)::type;
}

void sub_1B22B30B4(_Unwind_Exception *a1)
{
}

uint64_t fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::WriteFile(fst *a1, uint64_t a2)
{
  v25[19] = *MEMORY[0x1E4F143B8];
  if (*(char *)(a2 + 23) < 0)
  {
    if (*(void *)(a2 + 8))
    {
LABEL_5:
      std::ofstream::basic_ofstream((uint64_t *)&v20);
      if ((v24[*(void *)(v20.__r_.__value_.__r.__words[0] - 24)] & 5) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
        unint64_t v4 = fst::LogMessage::LogMessage((fst *)&v19, (uint64_t)&__p);
        uint64_t v5 = (void *)fst::cerr(v4);
        uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Fst::Write: Can't open file: ", 29);
        int v7 = *(char *)(a2 + 23);
        if (v7 >= 0) {
          unint64_t v8 = (const std::string::value_type *)a2;
        }
        else {
          unint64_t v8 = *(const std::string::value_type **)a2;
        }
        if (v7 >= 0) {
          uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          uint64_t v9 = *(void *)(a2 + 8);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v8, v9);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v19);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        uint64_t v10 = 0;
      }
      else
      {
        char v13 = FLAGS_fst_align;
        if (*(char *)(a2 + 23) < 0) {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
        }
        else {
          std::string __p = *(std::string *)a2;
        }
        __int16 v16 = 257;
        char v17 = 1;
        char v18 = v13;
        uint64_t v10 = (*(uint64_t (**)(fst *, std::string *, std::string *))(*(void *)a1 + 96))(a1, &v20, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      v20.__r_.__value_.__r.__words[0] = *MEMORY[0x1E4FBA400];
      *(std::string::size_type *)((char *)v20.__r_.__value_.__r.__words
                                + *(void *)(v20.__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x1E4FBA400]
                                                                                                  + 24);
      MEMORY[0x1B3EA7CF0](&v20.__r_.__value_.__r.__words[1]);
      std::ostream::~ostream();
      MEMORY[0x1B3EA8520](v25);
      return v10;
    }
  }
  else if (*(unsigned char *)(a2 + 23))
  {
    goto LABEL_5;
  }
  uint64_t v11 = fst::cout(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "standard output");
  char v12 = FLAGS_fst_align;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v20, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v20 = __p;
  }
  __int16 v21 = 257;
  char v22 = 1;
  char v23 = v12;
  uint64_t v10 = (*(uint64_t (**)(fst *, uint64_t, std::string *))(*(void *)a1 + 96))(a1, v11, &v20);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v10;
}

void sub_1B22B3404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
}

void fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::SetFinal(void *a1, int a2, uint64_t a3)
{
  uint64_t v6 = *(int **)(a1[8] + 8 * a2);
  int v23 = *v6;
  uint64_t v24 = *(void *)(v6 + 1);
  int v26 = 0;
  uint64_t v27 = 0;
  uint64_t v25 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v25, *((const void **)v6 + 2), *((void *)v6 + 3), (uint64_t)(*((void *)v6 + 3) - *((void *)v6 + 2)) >> 2);
  int v18 = *(_DWORD *)a3;
  uint64_t v19 = *(void *)(a3 + 4);
  __int16 v21 = 0;
  uint64_t v22 = 0;
  std::string __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(a3 + 16), *(void *)(a3 + 24), (uint64_t)(*(void *)(a3 + 24) - *(void *)(a3 + 16)) >> 2);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::SetFinal((uint64_t)a1, a2, &v18);
  if (__p)
  {
    __int16 v21 = __p;
    operator delete(__p);
  }
  unint64_t v7 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
  int v13 = v23;
  uint64_t v14 = v24;
  __int16 v16 = 0;
  uint64_t v17 = 0;
  int v15 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v15, v25, (uint64_t)v26, (v26 - (unsigned char *)v25) >> 2);
  int v8 = *(_DWORD *)a3;
  uint64_t v9 = *(void *)(a3 + 4);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v10 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v10, *(const void **)(a3 + 16), *(void *)(a3 + 24), (uint64_t)(*(void *)(a3 + 24) - *(void *)(a3 + 16)) >> 2);
  a1[1] = a1[1] & 4 | fst::SetFinalProperties<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>(v7, (uint64_t)&v13, (uint64_t)&v8);
  if (v10)
  {
    uint64_t v11 = v10;
    operator delete(v10);
  }
  if (v15)
  {
    __int16 v16 = v15;
    operator delete(v15);
  }
  if (v25)
  {
    int v26 = v25;
    operator delete(v25);
  }
}

void sub_1B22B361C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  uint64_t v24 = *(void **)(v22 - 56);
  if (v24)
  {
    *(void *)(v22 - 48) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::AddArc(void *a1, int a2, float *a3)
{
  uint64_t v6 = *(void *)(*(void *)(a1[8] + 8 * a2) + 64);
  if (v6 == *(void *)(*(void *)(a1[8] + 8 * a2) + 56)) {
    unint64_t v7 = 0;
  }
  else {
    unint64_t v7 = (_DWORD *)(v6 - 56);
  }
  unint64_t v8 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
  a1[1] = a1[1] & 4 | fst::AddArcProperties<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>(v8, a2, a3, v7);
  uint64_t v9 = *(void **)(a1[8] + 8 * a2);
  return fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::AddArc(v9, a3);
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::DeleteStates(uint64_t a1, char **a2)
{
  unint64_t v4 = (uint64_t *)(a1 + 64);
  std::vector<int>::size_type v5 = (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 3;
  std::vector<int>::value_type __x = 0;
  std::vector<int>::vector(&v33, v5, &__x);
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1] - *a2;
  if (v7)
  {
    unint64_t v8 = v7 >> 2;
    std::vector<int>::pointer begin = v33.__begin_;
    if (v8 <= 1) {
      unint64_t v8 = 1;
    }
    do
    {
      uint64_t v10 = *(int *)v6;
      v6 += 4;
      begin[v10] = -1;
      --v8;
    }
    while (v8);
  }
  uint64_t v11 = *(void *)(a1 + 64);
  if (*(void *)(a1 + 72) == v11)
  {
    int v13 = 0;
  }
  else
  {
    unint64_t v12 = 0;
    int v13 = 0;
    do
    {
      if (v33.__begin_[v12] == -1)
      {
        fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Destroy(*(void *)(v11 + 8 * v12));
      }
      else
      {
        v33.__begin_[v12] = v13;
        if (v12 != v13) {
          *(void *)(v11 + 8 * v13) = *(void *)(v11 + 8 * v12);
        }
        ++v13;
      }
      ++v12;
      uint64_t v11 = *(void *)(a1 + 64);
    }
    while (v12 < (*(void *)(a1 + 72) - v11) >> 3);
  }
  std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)v4, v13);
  uint64_t v14 = *(void *)(a1 + 64);
  if (*(void *)(a1 + 72) != v14)
  {
    unint64_t v15 = 0;
    do
    {
      uint64_t v16 = *(void *)(v14 + 8 * v15);
      int64x2_t v17 = *(int64x2_t *)(v16 + 40);
      uint64_t v18 = *(void *)(v16 + 64) - *(void *)(v16 + 56);
      if (v18) {
        uint64_t v19 = *(void *)(v16 + 56);
      }
      else {
        uint64_t v19 = 0;
      }
      if (v18)
      {
        unint64_t v20 = 0;
        uint64_t v21 = 0;
        uint64_t v22 = (int *)(v19 + 48);
        do
        {
          int v23 = v33.__begin_[*v22];
          if (v23 == -1)
          {
            uint64_t v25 = *((void *)v22 - 6);
            v26.i64[0] = v25;
            v26.i64[1] = HIDWORD(v25);
            int64x2_t v17 = vaddq_s64(v17, vceqzq_s64(v26));
          }
          else
          {
            int *v22 = v23;
            if (v20 != v21)
            {
              int64x2_t v30 = v17;
              uint64_t v24 = (void *)(v19 + 56 * v21);
              void *v24 = *((void *)v22 - 6);
              fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::operator=((uint64_t)(v24 + 1), (uint64_t)(v22 - 10));
              *(_DWORD *)(v19 + 56 * v21 + 48) = *v22;
              uint64_t v14 = *v4;
              int64x2_t v17 = v30;
            }
            ++v21;
          }
          ++v20;
          uint64_t v16 = *(void *)(v14 + 8 * v15);
          unint64_t v27 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(v16 + 64) - *(void *)(v16 + 56)) >> 3);
          v22 += 14;
        }
        while (v20 < v27);
        int64x2_t v31 = v17;
      }
      else
      {
        int64x2_t v31 = *(int64x2_t *)(v16 + 40);
        uint64_t v21 = 0;
        unint64_t v27 = 0;
      }
      fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::DeleteArcs((void *)v16, v27 - v21);
      uint64_t v14 = *(void *)(a1 + 64);
      *(int64x2_t *)(*(void *)(v14 + 8 * v15++) + 40) = v31;
    }
    while (v15 < (*(void *)(a1 + 72) - v14) >> 3);
  }
  uint64_t v28 = *(int *)(a1 + 88);
  if (v28 == -1)
  {
    int v29 = v33.__begin_;
    if (!v33.__begin_) {
      return;
    }
  }
  else
  {
    int v29 = v33.__begin_;
    *(_DWORD *)(a1 + 88) = v33.__begin_[v28];
  }
  v33.__end_ = v29;
  operator delete(v29);
}

void sub_1B22B3978(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>>::~MutableArcIterator()
{
}

uint64_t fst::ArcIteratorBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Reinit()
{
  return 0;
}

BOOL fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>>::Done_(uint64_t a1)
{
  return *(void *)(a1 + 24) >= (unint64_t)(0x6DB6DB6DB6DB6DB7
                                                  * ((uint64_t)(*(void *)(*(void *)(a1 + 8) + 64)
                                                             - *(void *)(*(void *)(a1 + 8) + 56)) >> 3));
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>>::Value_(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 56) + 56 * *(void *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>>::Next_(uint64_t result)
{
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>>::Position_(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>>::Reset_(uint64_t result)
{
  *(void *)(result + ++*(void *)(result + 24) = 0;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>>::Seek_(uint64_t result, uint64_t a2)
{
  *(void *)(result + ++*(void *)(result + 24) = a2;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>>::Flags_()
{
  return 15;
}

void fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>>::SetValue(uint64_t a1, float *a2)
{
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(*(void *)(a1 + 8) + 56);
  uint64_t v6 = (int *)(v5 + 56 * v4);
  int v7 = *v6;
  int v8 = v6[1];
  if (*v6 != v8) {
    **(void **)(a1 + 16) &= ~0x20000uLL;
  }
  if (v7)
  {
    if (!v8)
    {
      uint64_t v9 = *(unint64_t **)(a1 + 16);
      unint64_t v10 = *v9;
LABEL_8:
      unint64_t *v9 = v10 & 0xFFFFFFFFFBFFFFFFLL;
    }
  }
  else
  {
    uint64_t v9 = *(unint64_t **)(a1 + 16);
    unint64_t v11 = *v9;
    *v9 &= ~0x1000000uLL;
    if (!v8)
    {
      unint64_t v10 = v11 & 0xFFFFFFFFFEBFFFFFLL;
      unint64_t *v9 = v11 & 0xFFFFFFFFFEBFFFFFLL;
      goto LABEL_8;
    }
  }
  uint64_t v12 = v5 + 56 * v4;
  fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero((uint64_t)&v42);
  float v37 = 0.0;
  float v14 = *(float *)(v12 + 8);
  int v13 = (float *)(v12 + 8);
  float v37 = v14;
  float v50 = v42;
  if (v14 != v42) {
    goto LABEL_14;
  }
  float v37 = 0.0;
  float v37 = v13[1];
  float v50 = 0.0;
  float v50 = v13[2];
  float v49 = v43;
  float v48 = v44;
  if (v37 != v43) {
    goto LABEL_14;
  }
  if (v50 == v48
    && (uint64_t v15 = v5 + 56 * v4,
        uint64_t v16 = *(const void **)(v15 + 24),
        size_t v17 = *(void *)(v15 + 32) - (void)v16,
        uint64_t v18 = v45,
        v17 == v46 - (unsigned char *)v45)
    && !memcmp(v16, v45, v17))
  {
    BOOL v22 = 0;
    if (v18)
    {
LABEL_23:
      uint64_t v46 = v18;
      operator delete(v18);
    }
  }
  else
  {
LABEL_14:
    fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::One((uint64_t)&v37);
    float v50 = 0.0;
    float v50 = *v13;
    float v49 = v37;
    if (v50 != v37) {
      goto LABEL_19;
    }
    float v50 = 0.0;
    float v50 = v13[1];
    float v49 = 0.0;
    float v49 = v13[2];
    float v48 = v38;
    float v47 = v39;
    if (v50 != v38) {
      goto LABEL_19;
    }
    if (v49 == v47
      && (uint64_t v19 = v5 + 56 * v4,
          unint64_t v20 = *(const void **)(v19 + 24),
          size_t v21 = *(void *)(v19 + 32) - (void)v20,
          v21 == v41 - (unsigned char *)__p))
    {
      BOOL v22 = memcmp(v20, __p, v21) != 0;
    }
    else
    {
LABEL_19:
      BOOL v22 = 1;
    }
    if (__p)
    {
      long long v41 = __p;
      operator delete(__p);
    }
    uint64_t v18 = v45;
    if (v45) {
      goto LABEL_23;
    }
  }
  if (v22) {
    **(void **)(a1 + 16) &= ~0x100000000uLL;
  }
  uint64_t v23 = 0x30FC30007;
  if (*(_DWORD *)a2 == *v6 && *((_DWORD *)a2 + 1) == v6[1] && *((_DWORD *)a2 + 12) == *(_DWORD *)(v5 + 56 * v4 + 48)) {
    uint64_t v23 = 0x3FFFFFFF0007;
  }
  fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::SetArc(*(void **)(a1 + 8), a2, *(void *)(a1 + 24));
  float v24 = *a2;
  int v25 = *((_DWORD *)a2 + 1);
  if (*(_DWORD *)a2 != v25) {
    **(void **)(a1 + 16) = **(void **)(a1 + 16) & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
  }
  if (v24 == 0.0)
  {
    int64x2_t v26 = *(unint64_t **)(a1 + 16);
    unint64_t v28 = *v26 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
    *int64x2_t v26 = v28;
    if (!v25)
    {
      unint64_t v27 = v28 & 0xFFFFFFFFFD3FFFFFLL | 0x400000;
      *int64x2_t v26 = v27;
      goto LABEL_37;
    }
  }
  else if (!v25)
  {
    int64x2_t v26 = *(unint64_t **)(a1 + 16);
    unint64_t v27 = *v26;
LABEL_37:
    *int64x2_t v26 = v27 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
  }
  fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero((uint64_t)&v42);
  float v37 = 0.0;
  float v37 = a2[2];
  float v50 = v42;
  if (v37 != v42) {
    goto LABEL_43;
  }
  float v37 = 0.0;
  float v37 = a2[3];
  float v50 = 0.0;
  float v50 = a2[4];
  float v49 = v43;
  float v48 = v44;
  if (v37 != v43) {
    goto LABEL_43;
  }
  if (v50 == v48
    && (int v29 = (const void *)*((void *)a2 + 3),
        size_t v30 = *((void *)a2 + 4) - (void)v29,
        int64x2_t v31 = v45,
        v30 == v46 - (unsigned char *)v45)
    && !memcmp(v29, v45, v30))
  {
    BOOL v34 = 0;
    if (v31)
    {
LABEL_52:
      uint64_t v46 = v31;
      operator delete(v31);
    }
  }
  else
  {
LABEL_43:
    fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::One((uint64_t)&v37);
    float v50 = 0.0;
    float v50 = a2[2];
    float v49 = v37;
    if (v50 != v37) {
      goto LABEL_48;
    }
    float v50 = 0.0;
    float v50 = a2[3];
    float v49 = 0.0;
    float v49 = a2[4];
    float v48 = v38;
    float v47 = v39;
    if (v50 != v38) {
      goto LABEL_48;
    }
    if (v49 == v47
      && (v32 = (const void *)*((void *)a2 + 3), size_t v33 = *((void *)a2 + 4) - (void)v32, v33 == v41 - (unsigned char *)__p))
    {
      BOOL v34 = memcmp(v32, __p, v33) != 0;
    }
    else
    {
LABEL_48:
      BOOL v34 = 1;
    }
    if (__p)
    {
      long long v41 = __p;
      operator delete(__p);
    }
    int64x2_t v31 = v45;
    if (v45) {
      goto LABEL_52;
    }
  }
  long long v35 = *(unint64_t **)(a1 + 16);
  unint64_t v36 = *v35;
  if (v34)
  {
    unint64_t v36 = v36 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
    unint64_t *v35 = v36;
  }
  unint64_t *v35 = v36 & v23;
}

void sub_1B22B3F08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = v6;
  if (v7 < a3)
  {
    unint64_t v10 = a2 + v6 - a4;
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      *(_DWORD *)uint64_t v8 = *(_DWORD *)v10;
      uint64_t v11 = *(void *)(v10 + 4);
      *(void *)(v8 + 16) = 0;
      *(void *)(v8 + 4) = v11;
      *(void *)(v8 + ++*(void *)(result + 24) = 0;
      *(void *)(v8 + 32) = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(v8 + 16), *(const void **)(v10 + 16), *(void *)(v10 + 24), (uint64_t)(*(void *)(v10 + 24) - *(void *)(v10 + 16)) >> 2);
      v8 += 40;
      v10 += 40;
    }
    while (v10 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int> *,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int> *,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int> *,0>(a2, v7, v6);
}

void sub_1B22B3FE4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void *std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::push_back[abi:ne180100](void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  if (v4 == a1[3])
  {
    uint64_t v6 = *a1;
    unint64_t v5 = a1[1];
    if (v5 <= *a1)
    {
      uint64_t v12 = v4 - v6;
      BOOL v11 = v12 == 0;
      unint64_t v13 = 0x999999999999999ALL * (v12 >> 3);
      if (v11) {
        unint64_t v14 = 1;
      }
      else {
        unint64_t v14 = v13;
      }
      unint64_t v15 = v14 >> 2;
      uint64_t v25 = a1[4];
      *(void *)&long long v23 = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(v25, v14);
      *((void *)&v23 + 1) = v23 + 40 * v15;
      *(void *)&long long v24 = *((void *)&v23 + 1);
      *((void *)&v24 + 1) = v23 + 40 * v16;
      std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__construct_at_end_with_size<std::move_iterator<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>*>>(&v23, a1[1], 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[2] - a1[1]) >> 3));
      long long v17 = v24;
      long long v18 = *(_OWORD *)a1;
      long long v19 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v23;
      *((_OWORD *)a1 + 1) = v17;
      long long v23 = v18;
      long long v24 = v19;
      std::__split_buffer<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::~__split_buffer((uint64_t)&v23);
      uint64_t v4 = a1[2];
    }
    else
    {
      int64_t v7 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *a1) >> 3);
      if (v7 >= -1) {
        uint64_t v8 = v7 + 1;
      }
      else {
        uint64_t v8 = v7 + 2;
      }
      uint64_t v9 = -5 * (v8 >> 1);
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int> *,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int> *,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int> *,0>(v5, v4, v5 - 40 * (v8 >> 1));
      uint64_t v4 = v10;
      a1[1] += 8 * v9;
      a1[2] = v10;
    }
  }
  *(_DWORD *)uint64_t v4 = *(_DWORD *)a2;
  uint64_t v20 = *(void *)(a2 + 4);
  *(void *)(v4 + 16) = 0;
  size_t v21 = (void *)(v4 + 16);
  *(void *)((char *)v21 - 12) = v20;
  v21[1] = 0;
  v21[2] = 0;
  uint64_t result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v21, *(const void **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 2);
  a1[2] += 40;
  return result;
}

void sub_1B22B4130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__swap_out_circular_buffer(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>,std::reverse_iterator<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>*>,std::reverse_iterator<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>*>,std::reverse_iterator<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>*>>((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>*,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>*,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>*>(v7, a3, a1[1], a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int> *,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int> *,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int> *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a1)
  {
    uint64_t v6 = a2;
    do
    {
      v6 -= 40;
      a3 -= 40;
      fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::operator=(a3, v6);
    }
    while (v6 != a1);
  }
  return a2;
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int> *,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int> *,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int> *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::operator=(a3, v4);
      v4 += 40;
      a3 += 40;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

void *std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__construct_at_end_with_size<std::move_iterator<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>*>>(void *result, uint64_t a2, uint64_t a3)
{
  BOOL v3 = result;
  uint64_t v4 = result[2];
  if (a3)
  {
    uint64_t v6 = v4 + 40 * a3;
    uint64_t v7 = 40 * a3;
    do
    {
      *(_DWORD *)uint64_t v4 = *(_DWORD *)a2;
      uint64_t v8 = *(void *)(a2 + 4);
      *(void *)(v4 + 16) = 0;
      *(void *)(v4 + 4) = v8;
      *(void *)(v4 + ++*(void *)(result + 24) = 0;
      *(void *)(v4 + 32) = 0;
      uint64_t result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(v4 + 16), *(const void **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 2);
      v4 += 40;
      a2 += 40;
      v7 -= 40;
    }
    while (v7);
    uint64_t v4 = v6;
  }
  v3[2] = v4;
  return result;
}

void sub_1B22B4348(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>*,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>*,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v12 = a4;
  uint64_t v13 = a4;
  v10[0] = a1;
  v10[1] = &v12;
  v10[2] = &v13;
  char v11 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *(_DWORD *)uint64_t v4 = *(_DWORD *)v6;
      uint64_t v7 = *(void *)(v6 + 4);
      *(void *)(v4 + 16) = 0;
      uint64_t v8 = (void *)(v4 + 16);
      *(void *)((char *)v8 - 12) = v7;
      v8[1] = 0;
      v8[2] = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v8, *(const void **)(v6 + 16), *(void *)(v6 + 24), (uint64_t)(*(void *)(v6 + 24) - *(void *)(v6 + 16)) >> 2);
      uint64_t v4 = v13 + 40;
      v13 += 40;
      v6 += 40;
    }
    while (v6 != a3);
  }
  char v11 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
  return v4;
}

void sub_1B22B4400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    BOOL v3 = *(void **)(v1 - 24);
    if (v3)
    {
      *(void *)(v1 - 16) = v3;
      operator delete(v3);
    }
    v1 -= 40;
  }
}

void fst::Connect<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>(uint64_t a1)
{
  memset(v4, 0, sizeof(v4));
  memset(v3, 0, sizeof(v3));
  uint64_t v2 = 0;
  v1[0] = 0;
  v1[1] = v4;
  v1[2] = v3;
  v1[3] = &v2;
  fst::DfsVisit<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::SccVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>(a1, (uint64_t)v1);
}

void sub_1B22B469C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v13 = *(void **)(v11 - 112);
  if (v13) {
    operator delete(v13);
  }
  unint64_t v14 = *(void **)(v11 - 88);
  if (v14) {
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>::__push_back_slow_path<std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v9 = 0x555555555555555;
  }
  else {
    unint64_t v9 = v5;
  }
  long long v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v13 = v10;
  unint64_t v14 = &v10[48 * v4];
  uint64_t v16 = &v10[48 * v9];
  std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::pair[abi:ne180100]((uint64_t)v14, a2);
  unint64_t v15 = v14 + 48;
  std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1B22B47D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::pair[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 12) = *(void *)(a2 + 12);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + ++*(void *)(result + 24) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 24), *(const void **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 2);
  return a1;
}

uint64_t std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>,std::reverse_iterator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>*>,std::reverse_iterator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>*>,std::reverse_iterator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>,std::reverse_iterator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>*>,std::reverse_iterator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>*>,std::reverse_iterator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  char v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 48;
      std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::pair[abi:ne180100](v7 - 48, v9);
      uint64_t v7 = *((void *)&v15 + 1) - 48;
      *((void *)&v15 + 1) -= 48;
    }
    while (v9 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>,std::reverse_iterator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

void sub_1B22B4960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>,std::reverse_iterator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>,std::reverse_iterator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>,std::reverse_iterator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)(v1 + 24);
    if (v3)
    {
      *(void *)(v1 + 32) = v3;
      operator delete(v3);
    }
    v1 += 48;
  }
}

uint64_t std::__split_buffer<std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    *(void *)(a1 + 16) = v2 - 48;
    uint64_t v5 = *(void **)(v2 - 24);
    if (v5)
    {
      *(void *)(v2 - 16) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 48;
    }
  }
}

int *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ShortestPathCompare<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>> &,std::__wrap_iter<int *>>(int *a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = &a1[v6 + 1];
    uint64_t v10 = (2 * v6) | 1;
    uint64_t v11 = 2 * v6 + 2;
    if (v11 < a3
      && fst::ShortestPathCompare<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::operator()(a2, *v9, a1[v6 + 2]))
    {
      ++v9;
      uint64_t v10 = v11;
    }
    *a1 = *v9;
    a1 = v9;
    uint64_t v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

BOOL std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ShortestPathCompare<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>> &,std::__wrap_iter<int *>>(BOOL result, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    BOOL v6 = result;
    unint64_t v7 = v4 >> 1;
    uint64_t v8 = (int *)(result + 4 * (v4 >> 1));
    uint64_t v9 = (int *)(a2 - 4);
    uint64_t result = fst::ShortestPathCompare<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::operator()(a3, *v8, *(_DWORD *)(a2 - 4));
    if (result)
    {
      int v10 = *v9;
      do
      {
        uint64_t v11 = v8;
        int *v9 = *v8;
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        uint64_t v8 = (int *)(v6 + 4 * v7);
        uint64_t result = fst::ShortestPathCompare<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::operator()(a3, *v8, v10);
        uint64_t v9 = v11;
      }
      while (result);
      *uint64_t v11 = v10;
    }
  }
  return result;
}

BOOL fst::ShortestPathCompare<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::operator()(uint64_t **a1, int a2, int a3)
{
  uint64_t v6 = **a1;
  unint64_t v7 = (int *)(v6 + 48 * a2);
  uint64_t v8 = (int *)(v6 + 48 * a3);
  unint64_t v9 = *v7;
  if (v9 == *((_DWORD *)a1 + 4))
  {
    fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::One((uint64_t)&v39);
  }
  else
  {
    uint64_t v10 = *a1[1];
    if (0xCCCCCCCCCCCCCCCDLL * ((a1[1][1] - v10) >> 3) <= v9)
    {
      fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero((uint64_t)&v39);
    }
    else
    {
      uint64_t v11 = (int *)(v10 + 40 * (int)v9);
      int v39 = *v11;
      uint64_t v40 = *(void *)(v11 + 1);
      float v42 = 0;
      uint64_t v43 = 0;
      long long v41 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v41, *((const void **)v11 + 2), *((void *)v11 + 3), (uint64_t)(*((void *)v11 + 3) - *((void *)v11 + 2)) >> 2);
    }
  }
  unint64_t v12 = *v8;
  if (v12 == *((_DWORD *)a1 + 4))
  {
    fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::One((uint64_t)&v34);
  }
  else
  {
    uint64_t v13 = *a1[1];
    if (0xCCCCCCCCCCCCCCCDLL * ((a1[1][1] - v13) >> 3) <= v12)
    {
      fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero((uint64_t)&v34);
    }
    else
    {
      long long v14 = (int *)(v13 + 40 * (int)v12);
      int v34 = *v14;
      uint64_t v35 = *(void *)(v14 + 1);
      float v37 = 0;
      uint64_t v38 = 0;
      unint64_t v36 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v36, *((const void **)v14 + 2), *((void *)v14 + 3), (uint64_t)(*((void *)v14 + 3) - *((void *)v14 + 2)) >> 2);
    }
  }
  fst::Times<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>((uint64_t)&v39, v6 + 48 * a2 + 8, (uint64_t)&v29);
  fst::Times<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>((uint64_t)&v34, v6 + 48 * a3 + 8, (uint64_t)&v24);
  int v15 = *((_DWORD *)a1 + 4);
  int v16 = *v8;
  uint64_t v17 = (uint64_t)(a1 + 3);
  if (*v7 != v15 || v16 == v15)
  {
    if (*v7 == v15 || v16 != v15)
    {
      BOOL v20 = fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::operator()(v17, (uint64_t)&v24, (uint64_t)&v29);
      goto LABEL_39;
    }
    if (!fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::operator()(v17, (uint64_t)&v24, (uint64_t)&v29))
    {
LABEL_38:
      BOOL v20 = 0;
      goto LABEL_39;
    }
    float v21 = *((float *)a1 + 5);
    BOOL v20 = 1;
    if (v24 <= (float)(v21 + v29)
      && v29 <= (float)(v21 + v24)
      && (v30 == v25 && v31 == v26 || vabds_f32(v30 + v31, v25 + v26) <= v21)
      && v33 - (unsigned char *)v32 == v28 - (unsigned char *)__p)
    {
      BOOL v20 = memcmp(v32, __p, v33 - (unsigned char *)v32) != 0;
    }
  }
  else
  {
    if (fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::operator()(v17, (uint64_t)&v24, (uint64_t)&v29))
    {
      BOOL v20 = 1;
      goto LABEL_39;
    }
    BOOL v20 = 0;
    float v22 = *((float *)a1 + 5);
    if (v24 <= (float)(v22 + v29) && v29 <= (float)(v22 + v24))
    {
      if ((v30 == v25 && v31 == v26 || vabds_f32(v30 + v31, v25 + v26) <= v22)
        && v33 - (unsigned char *)v32 == v28 - (unsigned char *)__p)
      {
        BOOL v20 = memcmp(v32, __p, v33 - (unsigned char *)v32) == 0;
        goto LABEL_39;
      }
      goto LABEL_38;
    }
  }
LABEL_39:
  if (__p)
  {
    unint64_t v28 = __p;
    operator delete(__p);
  }
  if (v32)
  {
    size_t v33 = v32;
    operator delete(v32);
  }
  if (v36)
  {
    float v37 = v36;
    operator delete(v36);
  }
  if (v41)
  {
    float v42 = v41;
    operator delete(v41);
  }
  return v20;
}

void sub_1B22B4F14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  if (a21) {
    operator delete(a21);
  }
  float v24 = *(void **)(v22 - 72);
  if (v24)
  {
    *(void *)(v22 - 64) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 48)
  {
    unint64_t v4 = *(void **)(i - 24);
    if (v4)
    {
      *(void *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

void fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::DeterminizeFst<fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A3B228;
  a1[1] = 0;
  if (!(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 64))(a2, 0x10000, 1))
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    uint64_t v3 = fst::LogMessage::LogMessage((fst *)&v8, (uint64_t)__p);
    unint64_t v4 = (void *)fst::cerr(v3);
    uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"DeterminizeFst:", 15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" distance to final states computed for acceptors only", 53);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v8);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    *(void *)(a1[1] + 8) |= 4uLL;
  }
  operator new();
}

void sub_1B22B51C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0) {
    operator delete(__p);
  }
  fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::~ImplToFst(v18);
  _Unwind_Resume(a1);
}

_DWORD *fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::SetImpl(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0) {
    ++*(_DWORD *)(a2 + 56);
  }
  uint64_t result = *(_DWORD **)(a1 + 8);
  if (result)
  {
    int v6 = result[14] - 1;
    result[14] = v6;
    if (!v6) {
      uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)result + 8))(result);
    }
  }
  *(void *)(a1 + 8) = a2;
  return result;
}

void *fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::~ImplToFst(void *a1)
{
  *a1 = &unk_1F0A44928;
  uint64_t v2 = (_DWORD *)a1[1];
  if (v2)
  {
    int v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

void fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::~DeterminizeFst(void *a1)
{
  fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::~ImplToFst(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Start(uint64_t a1)
{
  return fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Start(*(void *)(a1 + 8));
}

void *fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Final@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Final(*(void *)(a1 + 8), a2, a3);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::NumArcs(uint64_t a1, uint64_t a2)
{
  return fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::NumArcs(*(void **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::NumInputEpsilons(uint64_t a1, uint64_t a2)
{
  return fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::NumInputEpsilons(*(void **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::NumOutputEpsilons(uint64_t a1, uint64_t a2)
{
  return fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::NumOutputEpsilons(*(void **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = fst::TestProperties<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    char v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return v7();
  }
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Type(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

void fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Copy()
{
}

void sub_1B22B54C4(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

void fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::InitStateIterator()
{
}

void sub_1B22B55B8(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C408BA93049);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::InitArcIterator(uint64_t a1, uint64_t a2, void *a3)
{
  return fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::InitArcIterator(*(void *)(a1 + 8), a2, a3);
}

void fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>::DeterminizeFsaImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

void sub_1B22B57D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0) {
    operator delete(__p);
  }
  fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::~DeterminizeFstImplBase(v18);
  _Unwind_Resume(a1);
}

void fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::DeterminizeFstImplBase<fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1B22B59EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::~CacheBaseImpl(v15);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::~DeterminizeFstImplBase(void *a1)
{
  *a1 = &unk_1F0A3F3C8;
  uint64_t v2 = a1[17];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::~CacheBaseImpl(a1);
}

void fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>::~DeterminizeFsaImpl(void *a1)
{
  fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>::~DeterminizeFsaImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 136) + 64))(*(void *)(a1 + 136), 4, 0))
  {
    *(void *)(a1 + 8) |= 4uLL;
  }
  return *(void *)(a1 + 8) & a2;
}

void fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>::Copy()
{
}

void sub_1B22B5BC0(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C405CF36722);
  _Unwind_Resume(a1);
}

void fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>::Expand(void *a1, int a2)
{
  v9[0] = 0;
  v9[1] = 0;
  uint64_t v8 = v9;
  fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>::GetLabelMap(a1, a2, &v8);
  unint64_t v4 = v8;
  if (v8 != v9)
  {
    do
    {
      fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>::AddArc((uint64_t)a1, a2, (uint64_t)(v4 + 5));
      unint64_t v5 = v4[1];
      if (v5)
      {
        do
        {
          int v6 = (void **)v5;
          unint64_t v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          int v6 = (void **)v4[2];
          BOOL v7 = *v6 == v4;
          unint64_t v4 = v6;
        }
        while (!v7);
      }
      unint64_t v4 = v6;
    }
    while (v6 != v9);
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::SetArcs((uint64_t)a1, a2);
  std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>>>>::destroy((uint64_t)&v8, v9[0]);
}

void sub_1B22B5C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

uint64_t fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>::ComputeStart(uint64_t a1)
{
  int v1 = (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 24))(*(void *)(a1 + 136));
  if (v1 != -1)
  {
    int v2 = v1;
    fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::One((uint64_t)&v4);
    int v8 = v2;
    int v9 = v4;
    uint64_t v10 = v5;
    memset(v11, 0, sizeof(v11));
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v11, __p, (uint64_t)v7, (v7 - (unsigned char *)__p) >> 2);
    if (__p)
    {
      BOOL v7 = __p;
      operator delete(__p);
    }
    operator new();
  }
  return 0xFFFFFFFFLL;
}

void sub_1B22B5DC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>::ComputeFinal@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void ***)(*(void *)(*(void *)(a1 + 184) + 88) + 8 * a2);
  uint64_t result = fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero(a3);
  for (uint64_t i = *v5; i; uint64_t i = (void *)*i)
  {
    (*(void (**)(void **__return_ptr))(**(void **)(a1 + 136) + 32))(v13);
    fst::Times<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>((uint64_t)(i + 2), (uint64_t)v13, (uint64_t)v16);
    fst::Plus<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>((float *)a3, (uint64_t)v16, (uint64_t)&v19);
    *(float *)a3 = v19;
    *(void *)(a3 + 4) = v20;
    if (&v19 != (float *)a3) {
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a3 + 16), v21, (uint64_t)v22, (v22 - v21) >> 2);
    }
    if (v21)
    {
      uint64_t v22 = v21;
      operator delete(v21);
    }
    if (__p)
    {
      long long v18 = __p;
      operator delete(__p);
    }
    if (v14)
    {
      int v15 = v14;
      operator delete(v14);
    }
    float v8 = *(float *)a3;
    uint64_t v9 = *(void *)(a3 + 4);
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v10 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v10, *(const void **)(a3 + 16), *(void *)(a3 + 24), (uint64_t)(*(void *)(a3 + 24) - *(void *)(a3 + 16)) >> 2);
    float v19 = v8;
    uint64_t v20 = v9;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    float v21 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v21, v10, (uint64_t)v11, (v11 - (unsigned char *)v10) >> 2);
    *(float *)a3 = v19;
    *(void *)(a3 + 4) = v20;
    if (&v19 != (float *)a3) {
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a3 + 16), v21, (uint64_t)v22, (v22 - v21) >> 2);
    }
    if (v21)
    {
      uint64_t v22 = v21;
      operator delete(v21);
    }
    if (v10)
    {
      uint64_t v11 = v10;
      operator delete(v10);
    }
    uint64_t result = (void *)fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Member(a3);
    if ((result & 1) == 0) {
      *(void *)(a1 + 8) |= 4uLL;
    }
  }
  return result;
}

void sub_1B22B5FDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  float v26 = *(void **)(v24 - 88);
  if (v26)
  {
    *(void *)(v24 - 80) = v26;
    operator delete(v26);
  }
  if (__p) {
    operator delete(__p);
  }
  unint64_t v27 = *v23;
  if (*v23)
  {
    *(void *)(v22 + ++*(void *)(result + 24) = v27;
    operator delete(v27);
  }
  _Unwind_Resume(exception_object);
}

void fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::CacheBaseImpl(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A3FBC8;
  *(void *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)a1 = &unk_1F0A38BA0;
  *(unsigned char *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = -1;
  *(unsigned char *)(a1 + 104) = *(unsigned char *)a2;
  *(void *)(a1 + 112) = *(void *)(a2 + 8);
  operator new();
}

{
  *(void *)a1 = &unk_1F0A3FBC8;
  *(void *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)a1 = &unk_1F0A38BA0;
  *(unsigned char *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = -1;
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  operator new();
}

void sub_1B22B618C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x10A0C407A9BBF1FLL);
  int v4 = *(void **)(v1 + 72);
  if (v4) {
    operator delete(v4);
  }
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

void fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::~CacheBaseImpl(void *a1)
{
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::~CacheBaseImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

void *fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::VectorCacheStore(void *a1, unsigned char *a2)
{
  *(unsigned char *)a1 = *a2;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = a1 + 4;
  a1[5] = a1 + 4;
  a1[6] = 0;
  a1[7] = 0;
  fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Clear(a1);
  a1[7] = a1[5];
  return a1;
}

void sub_1B22B6260(_Unwind_Exception *a1)
{
  int v4 = v3;
  std::__list_imp<char *>::clear(v2);
  int v6 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 16) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::~CacheBaseImpl(void *a1)
{
  *a1 = &unk_1F0A38BA0;
  uint64_t v2 = (void *)a1[15];
  if (v2)
  {
    int v3 = fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::~VectorCacheStore(v2);
    MEMORY[0x1B3EA8670](v3, 0x10A0C407A9BBF1FLL);
  }
  int v4 = (void *)a1[9];
  if (v4) {
    operator delete(v4);
  }
  return fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::~FstImpl((uint64_t)a1);
}

void *fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::~VectorCacheStore(void *a1)
{
  fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Clear(a1);
  std::__list_imp<char *>::clear(a1 + 4);
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::CompactHashBiTable(uint64_t a1, size_t a2)
{
  *(void *)(a1 + 8) = a1;
  *(void *)(a1 + 16) = a1;
  std::unordered_set<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::unordered_set(a1 + 24, a2, (void *)(a1 + 8), (void *)(a1 + 16));
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  if (a2) {
    std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(a1 + 80), a2);
  }
  return a1;
}

void sub_1B22B63AC(_Unwind_Exception *a1)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 88) = v5;
    operator delete(v5);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::unordered_set(uint64_t a1, size_t a2, void *a3, void *a4)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = *a3;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(void *)(a1 + 48) = *a4;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, a2);
  return a1;
}

void sub_1B22B6418(_Unwind_Exception *a1)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>::~DeterminizeFsaImpl(void *a1)
{
  *a1 = &unk_1F0A3DDD0;
  uint64_t v2 = (void *)a1[22];
  if (v2)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    MEMORY[0x1B3EA8670](v2, 0x20C4093837F09);
  }
  uint64_t v3 = a1[23];
  if (v3)
  {
    uint64_t v4 = fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::~DefaultDeterminizeStateTable(v3);
    MEMORY[0x1B3EA8670](v4, 0x10E0C400200E20DLL);
  }
  return fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::~DeterminizeFstImplBase(a1);
}

uint64_t fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::~DefaultDeterminizeStateTable(uint64_t a1)
{
  uint64_t v4 = a1 + 88;
  uint64_t v2 = *(void **)(a1 + 88);
  uint64_t v3 = *(void *)(v4 + 8);
  if ((int)((unint64_t)(v3 - (void)v2) >> 3) >= 1)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v2[v5];
      if (v6)
      {
        std::__forward_list_base<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::clear((void **)v2[v5]);
        MEMORY[0x1B3EA8670](v6, 0x1020C405F07FB98);
        uint64_t v2 = *(void **)(a1 + 88);
        uint64_t v3 = *(void *)(a1 + 96);
      }
      ++v5;
    }
    while (v5 < (int)((unint64_t)(v3 - (void)v2) >> 3));
  }
  if (v2)
  {
    *(void *)(a1 + 96) = v2;
    operator delete(v2);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 32);
  return a1;
}

void std::__forward_list_base<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::clear(void **a1)
{
  for (uint64_t i = *a1; i; uint64_t i = v3)
  {
    uint64_t v3 = (void *)*i;
    std::__forward_list_base<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::__delete_node[abi:ne180100]<>((int)a1, i);
  }
  *a1 = 0;
}

void std::__forward_list_base<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::__delete_node[abi:ne180100]<>(int a1, void *__p)
{
  uint64_t v3 = (void *)__p[4];
  if (v3)
  {
    __p[5] = v3;
    operator delete(v3);
  }
  operator delete(__p);
}

void fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>::DeterminizeFsaImpl(uint64_t a1, uint64_t a2)
{
}

void sub_1B22B678C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0) {
    operator delete(__p);
  }
  fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::~DeterminizeFstImplBase(v18);
  _Unwind_Resume(a1);
}

void fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::DeterminizeFstImplBase(uint64_t a1, uint64_t a2)
{
}

void sub_1B22B6920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::~CacheBaseImpl(v15);
  _Unwind_Resume(a1);
}

void sub_1B22B6AE4(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v3, 0x10A0C407A9BBF1FLL);
  if (*v2) {
    operator delete(*v2);
  }
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::CopyStates((void *)a1, a2);
    *(void *)(a1 + 56) = *(void *)(a1 + 40);
    *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
    *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
    if (*(_DWORD *)(a2 + 76) == -1) {
      MutableState = 0;
    }
    else {
      MutableState = fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::GetMutableState(a1, 0);
    }
    *(void *)(a1 + 80) = MutableState;
  }
  return a1;
}

void fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::CopyStates(void *a1, uint64_t a2)
{
  fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Clear(a1);
  uint64_t v4 = (char **)(a1 + 1);
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)a1 + 1, (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
  uint64_t v5 = *(void *)(a2 + 8);
  if (*(void *)(a2 + 16) != v5)
  {
    unint64_t v6 = 0;
    do
    {
      uint64_t v7 = *(void *)(v5 + 8 * v6);
      if (v7)
      {
        float v8 = operator new(0x58uLL);
        fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::CacheState((uint64_t)v8, v7);
        if (*(unsigned char *)a1)
        {
          uint64_t v9 = operator new(0x18uLL);
          v9[4] = v6;
          uint64_t v10 = a1[4];
          *(void *)uint64_t v9 = v10;
          *((void *)v9 + 1) = a1 + 4;
          *(void *)(v10 + 8) = v9;
          a1[4] = v9;
          ++a1[6];
        }
      }
      else
      {
        float v8 = 0;
      }
      uint64_t v12 = (void *)a1[2];
      unint64_t v11 = a1[3];
      if ((unint64_t)v12 >= v11)
      {
        uint64_t v14 = ((char *)v12 - *v4) >> 3;
        if ((unint64_t)(v14 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = v11 - (void)*v4;
        uint64_t v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1)) {
          uint64_t v16 = v14 + 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v16;
        }
        if (v17) {
          long long v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v17);
        }
        else {
          long long v18 = 0;
        }
        float v19 = &v18[8 * v14];
        *(void *)float v19 = v8;
        uint64_t v13 = v19 + 8;
        float v21 = (char *)a1[1];
        uint64_t v20 = (char *)a1[2];
        if (v20 != v21)
        {
          do
          {
            uint64_t v22 = *((void *)v20 - 1);
            v20 -= 8;
            *((void *)v19 - 1) = v22;
            v19 -= 8;
          }
          while (v20 != v21);
          uint64_t v20 = *v4;
        }
        a1[1] = v19;
        a1[2] = v13;
        a1[3] = &v18[8 * v17];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        *uint64_t v12 = v8;
        uint64_t v13 = v12 + 1;
      }
      a1[2] = v13;
      ++v6;
      uint64_t v5 = *(void *)(a2 + 8);
    }
    while (v6 < (*(void *)(a2 + 16) - v5) >> 3);
  }
}

uint64_t fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::CacheState(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 4) = *(void *)(a2 + 4);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + ++*(void *)(result + 24) = 0;
  *(void *)(a1 + 32) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 16), *(const void **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 2);
  long long v4 = *(_OWORD *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 56);
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = v4;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::__init_with_size[abi:ne180100]<std::__wrap_iter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> const*>,std::__wrap_iter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> const*>>((void *)(a1 + 56), v5, v6, 0x6DB6DB6DB6DB6DB7 * ((v6 - v5) >> 3));
  *(void *)(a1 + 80) = *(unsigned int *)(a2 + 80);
  return a1;
}

void sub_1B22B6DD4(_Unwind_Exception *exception_object)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + ++*(void *)(result + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::__init_with_size[abi:ne180100]<std::__wrap_iter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> const*>,std::__wrap_iter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> const*>>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<quasar::VoiceCommandArgument>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> const*,fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> const*,fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B22B6E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> const*,fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> const*,fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::construct[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int> const&>(a1, v4, v6);
      v6 += 56;
      uint64_t v4 = v12 + 56;
      v12 += 56;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1B22B6F10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>::GetLabelMap(void *a1, int a2, void *a3)
{
  uint64_t v5 = **(uint64_t ****)(*(void *)(a1[23] + 88) + 8 * a2);
  if (!v5) {
    goto LABEL_21;
  }
  do
  {
    uint64_t v6 = *((unsigned int *)v5 + 2);
    uint64_t v7 = a1[17];
    unint64_t v27 = 0;
    (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v7 + 136))(v7, v6, v25);
    while (1)
    {
      if (!v25[0])
      {
        if (v27 >= v25[2]) {
          goto LABEL_18;
        }
        goto LABEL_8;
      }
      if ((*(unsigned int (**)(void))(*(void *)v25[0] + 24))(v25[0])) {
        break;
      }
      if (v25[0])
      {
        float v8 = (_DWORD *)(*(uint64_t (**)(void))(*(void *)v25[0] + 32))();
        goto LABEL_9;
      }
LABEL_8:
      float v8 = (_DWORD *)(v25[1] + 56 * v27);
LABEL_9:
      int v9 = v8[12];
      fst::Times<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>((uint64_t)(v5 + 2), (uint64_t)(v8 + 2), (uint64_t)&v16);
      v20[0] = v9;
      v20[2] = v16;
      uint64_t v21 = v17;
      uint64_t v23 = 0;
      uint64_t v24 = 0;
      uint64_t v22 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v22, __p, (uint64_t)v19, (v19 - (unsigned char *)__p) >> 2);
      if (__p)
      {
        float v19 = __p;
        operator delete(__p);
      }
      fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::FilterArc(a1[22], v8, (uint64_t)(v5 + 1), (uint64_t)v20, (uint64_t)a3);
      if (v22)
      {
        uint64_t v23 = v22;
        operator delete(v22);
      }
      if (v25[0]) {
        (*(void (**)(void))(*(void *)v25[0] + 40))(v25[0]);
      }
      else {
        ++v27;
      }
    }
    if (v25[0])
    {
      (*(void (**)(void))(*(void *)v25[0] + 8))();
      goto LABEL_20;
    }
LABEL_18:
    if (v26) {
      --*v26;
    }
LABEL_20:
    uint64_t v5 = (uint64_t **)*v5;
  }
  while (v5);
LABEL_21:
  uint64_t v12 = (void *)*a3;
  char v10 = a3 + 1;
  uint64_t v11 = v12;
  if (v12 != v10)
  {
    do
    {
      fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>::NormArc((uint64_t)a1, (uint64_t)(v11 + 5));
      uint64_t v13 = (void *)v11[1];
      if (v13)
      {
        do
        {
          uint64_t v14 = v13;
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          uint64_t v14 = (void *)v11[2];
          BOOL v15 = *v14 == (void)v11;
          uint64_t v11 = v14;
        }
        while (!v15);
      }
      uint64_t v11 = v14;
    }
    while (v14 != v10);
  }
}

void sub_1B22B71DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,_DWORD *a23)
{
  if (a20)
  {
    (*(void (**)(uint64_t))(*(void *)a20 + 8))(a20);
  }
  else if (a23)
  {
    --*a23;
  }
  _Unwind_Resume(exception_object);
}

void fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>::AddArc(uint64_t a1, int a2, uint64_t a3)
{
  std::string __p = 0;
  char v10 = 0;
  uint64_t v11 = 0;
  v7[0] = *(_DWORD *)a3;
  v7[1] = v7[0];
  fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::operator=((uint64_t)&v8, a3 + 8);
  int State = fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>::FindState(a1, *(uint64_t ****)(a3 + 48));
  Mutableint State = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
  fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::PushArc(MutableState, (uint64_t)v7);
  if (__p)
  {
    char v10 = __p;
    operator delete(__p);
  }
}

void sub_1B22B72EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::SetArcs(uint64_t a1, int a2)
{
  Mutableint State = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
  fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>>>::SetArcs(*(void *)(a1 + 120), (uint64_t)MutableState);
  uint64_t v5 = *((void *)MutableState + 7);
  uint64_t v6 = *((void *)MutableState + 8) - v5;
  if (v6)
  {
    unint64_t v7 = v6 / 56;
    int v8 = *(_DWORD *)(a1 + 68);
    if (v7 <= 1) {
      unint64_t v7 = 1;
    }
    int v9 = (int *)(v5 + 48);
    do
    {
      int v11 = *v9;
      v9 += 14;
      int v10 = v11;
      if (v11 >= v8)
      {
        int v8 = v10 + 1;
        *(_DWORD *)(a1 + 68) = v10 + 1;
      }
      --v7;
    }
    while (v7);
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetExpandedState(a1, a2);
  *((_DWORD *)MutableState + 20) |= 0xAu;
}

uint64_t fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::FilterArc(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v10 = a2;
  unint64_t v7 = std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a5, a2, (uint64_t)&std::piecewise_construct, &v10);
  if (*((_DWORD *)v7 + 10) == -1) {
    fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>::DeterminizeArc(&v10, a2);
  }
  int v8 = (uint64_t *)v7[11];
  *int v8 = (uint64_t)std::__forward_list_base<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::__create_node[abi:ne180100]<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>> const&>((uint64_t)v8, *v8, a4);
  return 1;
}

void sub_1B22B74A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>::NormArc(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(uint64_t ***)(a2 + 48);
  std::forward_list<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::sort[abi:ne180100](v4);
  uint64_t v5 = *v4;
  if (*v4)
  {
    uint64_t v6 = (int *)(a2 + 8);
    unint64_t v7 = *v4;
    do
    {
      fst::Plus<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>((float *)(a2 + 8), (uint64_t)(v7 + 2), (uint64_t)&v12);
      *(_DWORD *)(a2 + 8) = v12;
      *(void *)(a2 + 12) = v13;
      if (v6 != &v12) {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a2 + 24), (char *)__p, (uint64_t)v15, (v15 - (unsigned char *)__p) >> 2);
      }
      if (__p)
      {
        BOOL v15 = __p;
        operator delete(__p);
      }
      if (v5 == v7 || *((_DWORD *)v7 + 2) != *((_DWORD *)v5 + 2))
      {
        int v8 = (uint64_t *)*v7;
        uint64_t v5 = v7;
      }
      else
      {
        fst::Plus<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>((float *)v5 + 4, (uint64_t)(v7 + 2), (uint64_t)&v12);
        *((_DWORD *)v5 + 4) = v12;
        *(uint64_t *)((char *)v5 + 20) = v13;
        if (v5 + 2 != (uint64_t *)&v12) {
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v5 + 32, (char *)__p, (uint64_t)v15, (v15 - (unsigned char *)__p) >> 2);
        }
        if (__p)
        {
          BOOL v15 = __p;
          operator delete(__p);
        }
        if (!fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Member((uint64_t)(v5 + 2))) {
          *(void *)(a1 + 8) |= 4uLL;
        }
        int v8 = (uint64_t *)*v7;
        int v9 = (void *)*v5;
        *uint64_t v5 = *(void *)*v5;
        std::__forward_list_base<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::__delete_node[abi:ne180100]<>((int)v4, v9);
      }
      unint64_t v7 = v8;
    }
    while (v8);
    for (uint64_t i = *v4; i; uint64_t i = (uint64_t *)*i)
    {
      fst::Divide<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>((uint64_t)(i + 2), (uint64_t)v6, 0, (uint64_t)&v12);
      *((_DWORD *)i + 4) = v12;
      HIDWORD(v11) = HIDWORD(v13);
      *(uint64_t *)((char *)i + 20) = v13;
      if (i + 2 != (uint64_t *)&v12) {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)i + 32, (char *)__p, (uint64_t)v15, (v15 - (unsigned char *)__p) >> 2);
      }
      if (__p)
      {
        BOOL v15 = __p;
        operator delete(__p);
      }
      LODWORD(v11) = *(_DWORD *)(a1 + 144);
      fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Quantize((uint64_t)(i + 2), (uint64_t)&v12, v11);
      *((_DWORD *)i + 4) = v12;
      *(uint64_t *)((char *)i + 20) = v13;
      if (i + 2 != (uint64_t *)&v12) {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)i + 32, (char *)__p, (uint64_t)v15, (v15 - (unsigned char *)__p) >> 2);
      }
      if (__p)
      {
        BOOL v15 = __p;
        operator delete(__p);
      }
    }
  }
}

void sub_1B22B76DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v6 = (uint64_t **)(a1 + 8);
  uint64_t v5 = *(uint64_t **)(a1 + 8);
  if (v5)
  {
    int v7 = *a2;
    while (1)
    {
      while (1)
      {
        int v8 = (uint64_t **)v5;
        int v9 = *((_DWORD *)v5 + 8);
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    int v8 = (uint64_t **)(a1 + 8);
LABEL_10:
    std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a1, a4, (uint64_t)&v11);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v8, v6, v11);
    return v11;
  }
  return (uint64_t *)v8;
}

void *std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, _DWORD **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x60uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  v6[8] = **a2;
  v6[10] = -1;
  uint64_t result = fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero((uint64_t)(v6 + 12));
  *((void *)v6 + 11) = 0;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1B22B783C(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = (void *)__p[8];
    if (v3)
    {
      __p[9] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>::DeterminizeArc(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero((uint64_t)(a1 + 2));
  operator new();
}

void sub_1B22B7914(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 + 24);
  if (v3)
  {
    *(void *)(v1 + 32) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::__forward_list_base<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::__create_node[abi:ne180100]<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (char *)operator new(0x38uLL);
  *(void *)uint64_t v5 = a2;
  *((_DWORD *)v5 + 2) = *(_DWORD *)a3;
  *((_DWORD *)v5 + 4) = *(_DWORD *)(a3 + 8);
  *(void *)(v5 + 20) = *(void *)(a3 + 12);
  *((void *)v5 + 5) = 0;
  *((void *)v5 + 6) = 0;
  *((void *)v5 + 4) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)v5 + 4, *(const void **)(a3 + 24), *(void *)(a3 + 32), (uint64_t)(*(void *)(a3 + 32) - *(void *)(a3 + 24)) >> 2);
  return v5;
}

void sub_1B22B79A0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void fst::Divide<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>::Zero();
  LODWORD(__p) = 0;
  LODWORD(__p) = *(_DWORD *)a1;
  LODWORD(v32) = 0;
  LODWORD(v32) = *(_DWORD *)v8;
  if (*(float *)&__p == *(float *)&v32)
  {
    LODWORD(__p) = 0;
    LODWORD(__p) = *(_DWORD *)(a1 + 4);
    LODWORD(v32) = 0;
    LODWORD(v32) = *(_DWORD *)(a1 + 8);
    LODWORD(v29) = 0;
    LODWORD(v29) = *(_DWORD *)(v8 + 4);
    float v35 = 0.0;
    float v35 = *(float *)(v8 + 8);
    if (*(float *)&__p == *(float *)&v29 && *(float *)&v32 == v35)
    {
      uint64_t v9 = fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>::Zero();
      LODWORD(__p) = 0;
      LODWORD(__p) = *(_DWORD *)a2;
      LODWORD(v32) = 0;
      LODWORD(v32) = *(_DWORD *)v9;
      if (*(float *)&__p != *(float *)&v32) {
        goto LABEL_7;
      }
      LODWORD(__p) = 0;
      LODWORD(__p) = *(_DWORD *)(a2 + 4);
      LODWORD(v32) = 0;
      LODWORD(v32) = *(_DWORD *)(a2 + 8);
      LODWORD(v29) = 0;
      LODWORD(v29) = *(_DWORD *)(v9 + 4);
      float v35 = 0.0;
      float v35 = *(float *)(v9 + 8);
      if (*(float *)&__p != *(float *)&v29 || *(float *)&v32 != v35)
      {
LABEL_7:
        fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero(a4);
        return;
      }
      if (kaldi::g_kaldi_verbose_level < -1) {
LABEL_62:
      }
        exit(1);
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Division by zero [0/0] in CompactLatticeWeightTpl", 49);
LABEL_61:
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      goto LABEL_62;
    }
  }
  uint64_t v10 = fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>::Zero();
  LODWORD(__p) = 0;
  float v11 = *(float *)a2;
  LODWORD(__p) = *(_DWORD *)a2;
  LODWORD(v32) = 0;
  LODWORD(v32) = *(_DWORD *)v10;
  if (*(float *)&__p == *(float *)&v32)
  {
    LODWORD(__p) = 0;
    LODWORD(__p) = *(_DWORD *)(a2 + 4);
    LODWORD(v32) = 0;
    LODWORD(v32) = *(_DWORD *)(a2 + 8);
    LODWORD(v29) = 0;
    LODWORD(v29) = *(_DWORD *)(v10 + 4);
    float v35 = 0.0;
    float v35 = *(float *)(v10 + 8);
    if (*(float *)&__p == *(float *)&v29 && *(float *)&v32 == v35)
    {
      if (kaldi::g_kaldi_verbose_level < -1) {
        goto LABEL_62;
      }
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Error: division by zero in CompactLatticeWeightTpl::Divide()", 60);
      goto LABEL_61;
    }
  }
  float v12 = *(float *)a1;
  float v13 = NAN;
  if (*(float *)a1 != -INFINITY)
  {
    int v14 = LODWORD(v11) & 0x7FFFFFFF;
    float v15 = v12 - v11;
    if (v12 == INFINITY) {
      float v15 = INFINITY;
    }
    if (v14 <= 2139095039) {
      float v13 = v15;
    }
    else {
      float v13 = NAN;
    }
  }
  float v16 = *(float *)(a2 + 8);
  float v17 = *(float *)(a1 + 4) - *(float *)(a2 + 4);
  float v18 = *(float *)(a1 + 8) - v16;
  if (v17 == -INFINITY || v18 == -INFINITY)
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"LatticeWeightTpl::Divide, NaN or invalid number produced. ", 58);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"[dividing by zero?]  Returning zero.", 36);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&__p);
    }
    float v21 = INFINITY;
    float v22 = INFINITY;
  }
  else
  {
    BOOL v23 = v17 == INFINITY;
    if (v18 == INFINITY) {
      BOOL v23 = 1;
    }
    if (v23) {
      float v21 = INFINITY;
    }
    else {
      float v21 = *(float *)(a1 + 8) - v16;
    }
    if (v23) {
      float v22 = INFINITY;
    }
    else {
      float v22 = *(float *)(a1 + 4) - *(float *)(a2 + 4);
    }
  }
  uint64_t v32 = 0;
  size_t v33 = 0;
  uint64_t v34 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v32, *(const void **)(a1 + 16), *(void *)(a1 + 24), (uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 2);
  float v29 = 0;
  float v30 = 0;
  uint64_t v31 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v29, *(const void **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 2);
  size_t v24 = v30 - (unsigned char *)v29;
  unint64_t v25 = (v30 - (unsigned char *)v29) >> 2;
  float v26 = (char *)v32;
  uint64_t v27 = (uint64_t)v33;
  if (v25 > (v33 - (unsigned char *)v32) >> 2)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Error in Divide (CompactLatticeWeightTpl): cannot divide, length mismatch.", 74);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    }
    exit(1);
  }
  if (a3 == 1)
  {
    unint64_t v28 = &v33[-4 * v25];
    if (!memcmp(v29, v28, v24))
    {
      std::string __p = 0;
      float v37 = 0;
      uint64_t v38 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, v26, v27 - 4 * v25, (v28 - v26) >> 2);
      *(float *)a4 = v13;
      *(float *)(a4 + 4) = v22;
      *(float *)(a4 + 8) = v21;
      *(void *)(a4 + ++*(void *)(result + 24) = 0;
      *(void *)(a4 + 32) = 0;
      *(void *)(a4 + 16) = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a4 + 16), __p, (uint64_t)v37, (v37 - (unsigned char *)__p) >> 2);
      goto LABEL_42;
    }
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
LABEL_57:
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Error in Divide (CompactLatticeWeighTpl): cannot divide, data mismatch.", 71);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    }
LABEL_58:
    exit(1);
  }
  if (a3)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Cannot divide CompactLatticeWeightTpl with DIVIDE_ANY.", 54);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    }
    goto LABEL_58;
  }
  if (memcmp(v29, v32, v24))
  {
    if (kaldi::g_kaldi_verbose_level < -1) {
      goto LABEL_58;
    }
    goto LABEL_57;
  }
  std::string __p = 0;
  float v37 = 0;
  uint64_t v38 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, &v26[4 * v25], v27, (v27 - (uint64_t)&v26[4 * v25]) >> 2);
  *(float *)a4 = v13;
  *(float *)(a4 + 4) = v22;
  *(float *)(a4 + 8) = v21;
  *(void *)(a4 + ++*(void *)(result + 24) = 0;
  *(void *)(a4 + 32) = 0;
  *(void *)(a4 + 16) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a4 + 16), __p, (uint64_t)v37, (v37 - (unsigned char *)__p) >> 2);
LABEL_42:
  if (__p)
  {
    float v37 = __p;
    operator delete(__p);
  }
  if (v29)
  {
    float v30 = v29;
    operator delete(v29);
  }
  if (v32)
  {
    size_t v33 = v32;
    operator delete(v32);
  }
}

void sub_1B22B7F50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
}

void *fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Quantize@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  LODWORD(a3) = 981467136;
  fst::PairWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>::Quantize(a1, (uint64_t)&v7, a3);
  uint64_t v5 = v8;
  *(_DWORD *)a2 = v7;
  *(void *)(a2 + 4) = v5;
  *(void *)(a2 + ++*(void *)(result + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  return std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a2 + 16), *(const void **)(a1 + 16), *(void *)(a1 + 24), (uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 2);
}

uint64_t fst::PairWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>::Quantize@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  float v3 = *(float *)result;
  if ((*(_DWORD *)result & 0x7FFFFFFFu) <= 0x7F7FFFFF) {
    float v3 = floorf((float)(v3 / *(float *)&a3) + 0.5) * *(float *)&a3;
  }
  float32x2_t v4 = *(float32x2_t *)(result + 4);
  float v5 = vaddv_f32(v4);
  float32x2_t v6 = (float32x2_t)0x7F0000007FLL;
  if (v5 != -INFINITY)
  {
    if (v5 == INFINITY) {
      float32x2_t v6 = (float32x2_t)vdup_n_s32(0x7F800000u);
    }
    else {
      float32x2_t v6 = vmul_n_f32(vrndm_f32(vadd_f32(vdiv_f32(v4, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a3, 0)), (float32x2_t)0x3F0000003F000000)), *(float *)&a3);
    }
  }
  *(float *)a2 = v3;
  *(float32x2_t *)(a2 + 4) = v6;
  return result;
}

uint64_t fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>::FindState(uint64_t a1, uint64_t ***a2)
{
  uint64_t State = fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::FindState(*(void **)(a1 + 184), (uint64_t)a2);
  uint64_t v5 = State;
  if (*(void *)(a1 + 152))
  {
    float32x2_t v6 = *(uint64_t **)(a1 + 160);
    if (0xCCCCCCCCCCCCCCCDLL * ((v6[1] - *v6) >> 3) <= (int)State)
    {
      fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>::ComputeDistance(a1, a2, (uint64_t)v10);
      unint64_t v7 = v6[1];
      if (v7 >= v6[2])
      {
        uint64_t v8 = std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__push_back_slow_path<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>(v6, (uint64_t)v10);
      }
      else
      {
        std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__construct_one_at_end[abi:ne180100]<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>((uint64_t)v6, (uint64_t)v10);
        uint64_t v8 = v7 + 40;
      }
      v6[1] = v8;
      if (__p)
      {
        float v12 = __p;
        operator delete(__p);
      }
    }
  }
  return v5;
}

void sub_1B22B81F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::FindState(void *a1, uint64_t a2)
{
  *(void *)float32x2_t v6 = a2;
  uint64_t v2 = (a1[12] - a1[11]) >> 3;
  uint64_t Id = fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::FindId(a1 + 1, v6, 1);
  if (Id != v2)
  {
    uint64_t v4 = *(void *)v6;
    if (*(void *)v6)
    {
      std::__forward_list_base<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::clear(*(void ***)v6);
      MEMORY[0x1B3EA8670](v4, 0x1020C405F07FB98);
    }
  }
  return Id;
}

void fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>::ComputeDistance(uint64_t a1@<X0>, uint64_t ***a2@<X1>, uint64_t a3@<X8>)
{
  fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero(a3);
  for (uint64_t i = *a2; i; uint64_t i = (uint64_t **)*i)
  {
    unint64_t v7 = *((int *)i + 2);
    uint64_t v8 = **(void **)(a1 + 152);
    if (0xCCCCCCCCCCCCCCCDLL * ((*(void *)(*(void *)(a1 + 152) + 8) - v8) >> 3) <= v7)
    {
      fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero((uint64_t)&v17);
    }
    else
    {
      uint64_t v9 = (int *)(v8 + 40 * (int)v7);
      int v17 = *v9;
      uint64_t v18 = *(void *)(v9 + 1);
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      float v19 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v19, *((const void **)v9 + 2), *((void *)v9 + 3), (uint64_t)(*((void *)v9 + 3) - *((void *)v9 + 2)) >> 2);
    }
    fst::Times<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>((uint64_t)(i + 2), (uint64_t)&v17, (uint64_t)v10);
    fst::Plus<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>((float *)a3, (uint64_t)v10, (uint64_t)&v13);
    *(_DWORD *)a3 = v13;
    *(void *)(a3 + 4) = v14;
    if (&v13 != (int *)a3) {
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a3 + 16), (char *)__p, (uint64_t)v16, (v16 - (unsigned char *)__p) >> 2);
    }
    if (__p)
    {
      float v16 = __p;
      operator delete(__p);
    }
    if (v11)
    {
      float v12 = v11;
      operator delete(v11);
    }
    if (v19)
    {
      uint64_t v20 = v19;
      operator delete(v19);
    }
  }
}

void sub_1B22B83E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  if (a22) {
    operator delete(a22);
  }
  float v26 = *v24;
  if (*v24)
  {
    *(void *)(v23 + ++*(void *)(result + 24) = v26;
    operator delete(v26);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::FindId(void *a1, void *a2, int a3)
{
  a1[13] = a2;
  uint64_t v6 = (uint64_t)(a1 + 3);
  unint64_t v7 = std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::find<int>(a1 + 3, &fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::kCurrentKey);
  if (v7) {
    return *((unsigned int *)v7 + 4);
  }
  if (!a3) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v9 = a1[10];
  uint64_t v10 = (void *)a1[11];
  uint64_t v11 = ((uint64_t)v10 - v9) >> 3;
  unsigned int v23 = v11;
  unint64_t v12 = a1[12];
  if ((unint64_t)v10 >= v12)
  {
    if ((unint64_t)(v11 + 1) >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v14 = v12 - v9;
    uint64_t v15 = v14 >> 2;
    if (v14 >> 2 <= (unint64_t)(v11 + 1)) {
      uint64_t v15 = v11 + 1;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v15;
    }
    if (v16) {
      int v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 12), v16);
    }
    else {
      int v17 = 0;
    }
    uint64_t v18 = &v17[8 * v11];
    float v19 = &v17[8 * v16];
    *(void *)uint64_t v18 = *a2;
    int v13 = v18 + 8;
    uint64_t v21 = (char *)a1[10];
    uint64_t v20 = (char *)a1[11];
    if (v20 != v21)
    {
      do
      {
        uint64_t v22 = *((void *)v20 - 1);
        v20 -= 8;
        *((void *)v18 - 1) = v22;
        v18 -= 8;
      }
      while (v20 != v21);
      uint64_t v20 = (char *)a1[10];
    }
    a1[10] = v18;
    a1[11] = v13;
    a1[12] = v19;
    if (v20) {
      operator delete(v20);
    }
  }
  else
  {
    *uint64_t v10 = *a2;
    int v13 = v10 + 1;
  }
  a1[11] = v13;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(v6, (int *)&v23, &v23);
  return v23;
}

uint64_t *std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::find<int>(void *a1, int *a2)
{
  uint64_t v4 = *a2;
  if ((int)v4 < -1)
  {
    unint64_t v7 = 0;
  }
  else
  {
    uint64_t v5 = a1[4];
    if (v4 == -1) {
      uint64_t v6 = *(unsigned int ****)(v5 + 104);
    }
    else {
      uint64_t v6 = (unsigned int ***)(*(void *)(v5 + 80) + 8 * v4);
    }
    unint64_t v7 = fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey::operator()(v5, *v6);
  }
  int8x8_t v8 = (int8x8_t)a1[1];
  if (!*(void *)&v8) {
    return 0;
  }
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v8);
  v9.i16[0] = vaddlv_u8(v9);
  unint64_t v10 = v9.u32[0];
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v11 = v7;
    if (v7 >= *(void *)&v8) {
      unint64_t v11 = v7 % *(void *)&v8;
    }
  }
  else
  {
    unint64_t v11 = (*(void *)&v8 - 1) & v7;
  }
  unint64_t v12 = *(uint64_t ***)(*a1 + 8 * v11);
  if (!v12) {
    return 0;
  }
  int v13 = *v12;
  if (*v12)
  {
    uint64_t v14 = a1 + 6;
    do
    {
      unint64_t v15 = v13[1];
      if (v15 == v7)
      {
        if (fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual::operator()(v14, *((_DWORD *)v13 + 4), *a2))return v13; {
      }
        }
      else
      {
        if (v10 > 1)
        {
          if (v15 >= *(void *)&v8) {
            v15 %= *(void *)&v8;
          }
        }
        else
        {
          v15 &= *(void *)&v8 - 1;
        }
        if (v15 != v11) {
          return 0;
        }
      }
      int v13 = (uint64_t *)*v13;
    }
    while (v13);
  }
  return v13;
}

uint64_t fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual::operator()(uint64_t *a1, int a2, int a3)
{
  if (a2 < -1 || a3 < -1) {
    return a2 == a3;
  }
  uint64_t v3 = *a1;
  if (a2 == -1) {
    uint64_t v4 = *(uint64_t **)(v3 + 104);
  }
  else {
    uint64_t v4 = (uint64_t *)(*(void *)(v3 + 80) + 8 * a2);
  }
  if (a3 == -1) {
    uint64_t v6 = *(uint64_t **)(v3 + 104);
  }
  else {
    uint64_t v6 = (uint64_t *)(*(void *)(v3 + 80) + 8 * a3);
  }
  return fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::operator==(*v4, *v6);
}

uint64_t fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey::operator()(uint64_t a1, unsigned int **a2)
{
  uint64_t v2 = *((char *)a2 + 8);
  for (uint64_t i = *a2; i; uint64_t i = *(unsigned int **)i)
  {
    unint64_t v4 = (int)i[2];
    v2 ^= fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Hash(i + 4) ^ (2 * v2) ^ (32 * v4) ^ (v4 >> 59);
  }
  return v2;
}

uint64_t fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Hash(unsigned int *a1)
{
  unsigned int v2 = a1[1];
  unsigned int v3 = a1[2];
  BOOL v4 = __CFADD__(v3, v2);
  uint64_t v5 = v3 + v2;
  uint64_t v6 = 0x100000000;
  if (!v4) {
    uint64_t v6 = 0;
  }
  uint64_t result = (v6 | v5) ^ (32 * *a1);
  uint8x8_t v9 = a1 + 4;
  int8x8_t v8 = (int *)*((void *)a1 + 2);
  uint64_t v10 = *((void *)v9 + 1) - (void)v8;
  if (v10)
  {
    unint64_t v11 = v10 >> 2;
    if (v11 <= 1) {
      unint64_t v11 = 1;
    }
    uint64_t v12 = 6967;
    do
    {
      uint64_t v13 = *v8++;
      result += v12 * v13;
      v12 *= 7499;
      --v11;
    }
    while (v11);
  }
  return result;
}

uint64_t fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a2 + 8) != *(unsigned __int8 *)(a1 + 8)) {
    return 0;
  }
  unsigned int v2 = (void *)a2;
  unsigned int v3 = (void *)a1;
  while (1)
  {
    unsigned int v2 = (void *)*v2;
    unsigned int v3 = (void *)*v3;
    if (!v2 || v3 == 0) {
      break;
    }
    if (!fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::operator==((uint64_t)(v2 + 1), (uint64_t)(v3 + 1)))return 0; {
  }
    }
  return (v2 != 0) ^ (v3 == 0);
}

BOOL fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::operator==(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 == *(_DWORD *)a2
    && *(float *)(a1 + 8) == *(float *)(a2 + 8)
    && *(float *)(a1 + 12) == *(float *)(a2 + 12)
    && *(float *)(a1 + 16) == *(float *)(a2 + 16)
    && (uint64_t v3 = a1 + 24,
        unsigned int v2 = *(const void **)(a1 + 24),
        size_t v4 = *(void *)(v3 + 8) - (void)v2,
        uint64_t v6 = a2 + 24,
        uint64_t v5 = *(const void **)(a2 + 24),
        v4 == *(void *)(v6 + 8) - (void)v5))
  {
    return memcmp(v2, v5, v4) == 0;
  }
  else
  {
    return 0;
  }
}

void *std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(uint64_t a1, int *a2, _DWORD *a3)
{
  uint64_t v7 = *a2;
  if ((int)v7 < -1)
  {
    unint64_t v10 = 0;
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if (v7 == -1) {
      uint8x8_t v9 = *(unsigned int ****)(v8 + 104);
    }
    else {
      uint8x8_t v9 = (unsigned int ***)(*(void *)(v8 + 80) + 8 * v7);
    }
    unint64_t v10 = fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey::operator()(v8, *v9);
  }
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v10;
      if (v10 >= v11) {
        unint64_t v3 = v10 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v10;
    }
    uint64_t v14 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(void **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual::operator()((uint64_t *)(a1 + 48), *((_DWORD *)i + 4), *a2))return i; {
        }
          }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x18uLL);
  *(void *)uint64_t i = 0;
  *((void *)i + 1) = v10;
  *((_DWORD *)i + 4) = *a3;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 40);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v3 = v10 % v11;
      }
      else {
        unint64_t v3 = v10;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v10;
    }
  }
  uint64_t v23 = *(void *)a1;
  size_t v24 = *(void **)(*(void *)a1 + 8 * v3);
  if (v24)
  {
    *(void *)uint64_t i = *v24;
LABEL_44:
    void *v24 = i;
    goto LABEL_45;
  }
  *(void *)uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v23 + 8 * v3) = a1 + 16;
  if (*(void *)i)
  {
    unint64_t v25 = *(void *)(*(void *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v25 >= v11) {
        v25 %= v11;
      }
    }
    else
    {
      v25 &= v11 - 1;
    }
    size_t v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_44;
  }
LABEL_45:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1B22B8B68(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__construct_one_at_end[abi:ne180100]<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  *(_DWORD *)uint64_t v3 = *(_DWORD *)a2;
  *(void *)(v3 + 4) = *(void *)(a2 + 4);
  *(void *)(v3 + ++*(void *)(result + 24) = 0;
  *(void *)(v3 + 32) = 0;
  *(void *)(v3 + 16) = 0;
  uint64_t result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(v3 + 16), *(const void **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 2);
  *(void *)(a1 + 8) = v3 + 40;
  return result;
}

void sub_1B22B8BD8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__push_back_slow_path<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x333333333333333) {
    unint64_t v9 = 0x666666666666666;
  }
  else {
    unint64_t v9 = v5;
  }
  float v18 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  unint64_t v11 = &v10[40 * v4];
  v15[0] = v10;
  v15[1] = v11;
  unint64_t v16 = v11;
  float v17 = &v10[40 * v9];
  *(_DWORD *)unint64_t v11 = *(_DWORD *)a2;
  uint64_t v12 = *(void *)(a2 + 4);
  *((void *)v11 + 2) = 0;
  v11 += 16;
  *(void *)(v11 - 12) = v12;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v11, *(const void **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 2);
  v16 += 40;
  std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__swap_out_circular_buffer(a1, v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_1B22B8CF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

char *fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>>>::GetMutableState(uint64_t a1, int a2)
{
  Mutableuint64_t State = fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>>::GetMutableState(a1, a2);
  unint64_t v4 = MutableState;
  if (*(unsigned char *)(a1 + 88))
  {
    int v5 = *((_DWORD *)MutableState + 20);
    if ((v5 & 4) == 0)
    {
      *((_DWORD *)MutableState + 20) = v5 | 4;
      unint64_t v6 = *((void *)MutableState + 8) - *((void *)MutableState + 7) + *(void *)(a1 + 112) + 88;
      *(void *)(a1 + 112) = v6;
      *(unsigned char *)(a1 + 104) = 1;
      if (v6 > *(void *)(a1 + 96)) {
        fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>>>::GC(a1, MutableState, 0, 0.666);
      }
    }
  }
  return v4;
}

uint64_t fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::PushArc(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = a1[9];
  uint64_t v3 = (uint64_t)(a1 + 9);
  unint64_t v5 = *(void *)(v3 - 8);
  if (v5 >= v4)
  {
    uint64_t result = std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::__push_back_slow_path<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> const&>(a1 + 7, a2);
  }
  else
  {
    std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::construct[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int> const&>(v3, *(void *)(v3 - 8), a2);
    uint64_t result = v5 + 56;
    a1[8] = v5 + 56;
  }
  a1[8] = result;
  return result;
}

void sub_1B22B8DE8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 64) = v2;
  _Unwind_Resume(a1);
}

char *fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>>::GetMutableState(uint64_t a1, int a2)
{
  int v3 = *(_DWORD *)(a1 + 76);
  if (v3 == a2) {
    return *(char **)(a1 + 80);
  }
  if (*(unsigned char *)(a1 + 72))
  {
    if (v3 == -1)
    {
      *(_DWORD *)(a1 + 76) = a2;
      Mutableuint64_t State = fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::GetMutableState(a1, 0);
      *(void *)(a1 + 80) = MutableState;
      *((_DWORD *)MutableState + 20) |= 4u;
      std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::reserve((uint64_t *)MutableState + 7, 0x80uLL);
      return *(char **)(a1 + 80);
    }
    uint64_t v5 = *(void *)(a1 + 80);
    if (!*(_DWORD *)(v5 + 84))
    {
      *(_DWORD *)(a1 + 76) = a2;
      fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Reset(v5);
      uint64_t result = *(char **)(a1 + 80);
      *((_DWORD *)result + 20) |= 4u;
      return result;
    }
    *(_DWORD *)(v5 + 80) &= ~4u;
    *(unsigned char *)(a1 + 72) = 0;
  }
  int v6 = a2 + 1;
  return fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::GetMutableState(a1, v6);
}

void fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>>>::GC(uint64_t a1, char *a2, char a3, float a4)
{
  if (*(unsigned char *)(a1 + 104))
  {
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      unint64_t v8 = fst::LogMessage::LogMessage((fst *)v37, (uint64_t)__p);
      unint64_t v9 = (void *)fst::cerr(v8);
      unint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"GCCacheStore: Enter GC: object = ", 33);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(", 1);
      unint64_t v11 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"), free recently cached = ", 26);
      uint64_t v12 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", cache size = ", 15);
      uint64_t v13 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", cache frac = ", 15);
      uint64_t v14 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", cache limit = ", 16);
      unint64_t v15 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"\n", 1);
      fst::LogMessage::~LogMessage((fst::LogMessage *)v37);
      if (v42 < 0) {
        operator delete(__p[0]);
      }
    }
    unint64_t v16 = (unint64_t)(float)((float)*(unint64_t *)(a1 + 96) * a4);
    uint64_t v17 = *(void *)(a1 + 40);
    *(void *)(a1 + 56) = v17;
    while (v17 != a1 + 32)
    {
      int v18 = *(_DWORD *)(v17 + 16);
      if (v18) {
        int v19 = v18 - 1;
      }
      else {
        int v19 = *(_DWORD *)(a1 + 76);
      }
      Mutableuint64_t State = fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>>::GetMutableState(a1, v19);
      unint64_t v21 = *(void *)(a1 + 112);
      if (v21 > v16 && !*((_DWORD *)MutableState + 21))
      {
        if (a3)
        {
          if (MutableState != a2)
          {
            int v22 = *((_DWORD *)MutableState + 20);
LABEL_19:
            if ((v22 & 4) != 0)
            {
              unint64_t v23 = *((void *)MutableState + 8) - *((void *)MutableState + 7) + 88;
              FstCheck(v23 <= v21, "(size) <= (cache_size_)", "../libquasar/libkaldi/tools/openfst/src/include/fst/cache.h");
              *(void *)(a1 + 112) -= v23;
            }
            fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::Delete((void *)a1);
            uint64_t v17 = *(void *)(a1 + 56);
            continue;
          }
        }
        else
        {
          int v22 = *((_DWORD *)MutableState + 20);
          if ((v22 & 8) == 0 && MutableState != a2) {
            goto LABEL_19;
          }
        }
      }
      *((_DWORD *)MutableState + 20) &= ~8u;
      uint64_t v17 = *(void *)(*(void *)(a1 + 56) + 8);
      *(void *)(a1 + 56) = v17;
    }
    if ((a3 & 1) != 0 || *(void *)(a1 + 112) <= v16)
    {
      unint64_t v24 = *(void *)(a1 + 112);
      if (v16)
      {
        if (v24 > v16)
        {
          uint64_t v25 = *(void *)(a1 + 96);
          do
          {
            v25 *= 2;
            BOOL v26 = v24 > 2 * v16;
            v16 *= 2;
          }
          while (v26);
          *(void *)(a1 + 96) = v25;
        }
      }
      else if (v24)
      {
        if (FLAGS_fst_error_fatal) {
          std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
        }
        else {
          std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
        }
        uint64_t v27 = fst::LogMessage::LogMessage((fst *)&v40, (uint64_t)__p);
        unint64_t v28 = (void *)fst::cerr(v27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"GCCacheStore:GC: Unable to free all cached states", 49);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v40);
        if (v42 < 0) {
          operator delete(__p[0]);
        }
      }
    }
    else
    {
      fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>>>::GC(a1, a2, 1, a4);
    }
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(v37, "INFO");
      float v29 = fst::LogMessage::LogMessage((fst *)&v39, (uint64_t)v37);
      float v30 = (void *)fst::cerr(v29);
      uint64_t v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"GCCacheStore: Exit GC: object = ", 32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"(", 1);
      uint64_t v32 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"), free recently cached = ", 26);
      size_t v33 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)", cache size = ", 15);
      uint64_t v34 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)", cache frac = ", 15);
      float v35 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)", cache limit = ", 16);
      unint64_t v36 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"\n", 1);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v39);
      if (v38 < 0) {
        operator delete(v37[0]);
      }
    }
  }
}

void sub_1B22B92A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Reset(uint64_t a1)
{
  fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero((uint64_t)&v2);
  *(_DWORD *)a1 = v2;
  *(void *)(a1 + 4) = v3;
  if (&v2 != (int *)a1) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 16), (char *)__p, (uint64_t)v5, (v5 - (unsigned char *)__p) >> 2);
  }
  if (__p)
  {
    uint64_t v5 = __p;
    operator delete(__p);
  }
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__clear[abi:ne180100]((uint64_t *)(a1 + 56));
}

void sub_1B22B9390(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>>>::SetArcs(uint64_t a1, uint64_t a2)
{
  fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::SetArcs((void *)a2);
  if (*(unsigned char *)(a1 + 104))
  {
    if ((*(unsigned char *)(a2 + 80) & 4) != 0)
    {
      unint64_t v4 = *(void *)(a2 + 64) - *(void *)(a2 + 56) + *(void *)(a1 + 112);
      *(void *)(a1 + 112) = v4;
      if (v4 > *(void *)(a1 + 96))
      {
        fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>>>::GC(a1, (char *)a2, 0, 0.666);
      }
    }
  }
}

void std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>>>>::destroy(a1, a2[1]);
    unint64_t v4 = (void *)a2[8];
    if (v4)
    {
      a2[9] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

uint64_t fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Start(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 60))
  {
    if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 4))
    {
      *(unsigned char *)(a1 + 60) = 1;
    }
    else if (!*(unsigned char *)(a1 + 60))
    {
      int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
      if (v3 != -1)
      {
        *(_DWORD *)(a1 + 64) = v3;
        *(unsigned char *)(a1 + 60) = 1;
        if (*(_DWORD *)(a1 + 68) <= v3) {
          *(_DWORD *)(a1 + 68) = v3 + 1;
        }
      }
    }
  }
  return *(unsigned int *)(a1 + 64);
}

void *fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Final@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasFinal(a1, a2) & 1) == 0)
  {
    (*(void (**)(int *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 64))(&v12, a1, a2);
    int v7 = v12;
    uint64_t v8 = v13;
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    std::string __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v14, (uint64_t)v15, (v15 - (unsigned char *)v14) >> 2);
    fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::SetFinal(a1, a2, &v7);
    if (__p)
    {
      unint64_t v10 = __p;
      operator delete(__p);
    }
    if (v14)
    {
      unint64_t v15 = v14;
      operator delete(v14);
    }
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Final(a1, a2, a3);
}

void sub_1B22B9640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::SetFinal(uint64_t a1, int a2, int *a3)
{
  Mutableuint64_t State = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
  int v5 = *a3;
  uint64_t v6 = *(void *)(a3 + 1);
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  std::string __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *((const void **)a3 + 2), *((void *)a3 + 3), (uint64_t)(*((void *)a3 + 3) - *((void *)a3 + 2)) >> 2);
  *(_DWORD *)Mutableuint64_t State = v5;
  *(void *)(MutableState + 4) = v6;
  if (MutableState != (char *)&v5) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(MutableState + 16, (char *)__p, (uint64_t)v8, (v8 - (unsigned char *)__p) >> 2);
  }
  if (__p)
  {
    uint64_t v8 = __p;
    operator delete(__p);
  }
  *((_DWORD *)MutableState + 20) |= 9u;
}

void sub_1B22B972C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::NumArcs(void *a1, uint64_t a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs((uint64_t)a1, a2) & 1) == 0)(*(void (**)(void *, uint64_t))(*a1 + 48))(a1, a2); {
  uint64_t v4 = a1[15];
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * ((int)a2 + 1);
  }
  return 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(*(void *)v5 + 64) - *(void *)(*(void *)v5 + 56)) >> 3);
}

uint64_t fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::NumInputEpsilons(void *a1, uint64_t a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs((uint64_t)a1, a2) & 1) == 0)(*(void (**)(void *, uint64_t))(*a1 + 48))(a1, a2); {
  uint64_t v4 = a1[15];
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * ((int)a2 + 1);
  }
  return *(void *)(*(void *)v5 + 40);
}

uint64_t fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::NumOutputEpsilons(void *a1, uint64_t a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs((uint64_t)a1, a2) & 1) == 0)(*(void (**)(void *, uint64_t))(*a1 + 48))(a1, a2); {
  uint64_t v4 = a1[15];
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * ((int)a2 + 1);
  }
  return *(void *)(*(void *)v5 + 48);
}

void *fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::DeterminizeFst(void *a1, uint64_t a2, int a3)
{
  *a1 = &unk_1F0A3B228;
  a1[1] = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  if (a3)
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
    uint64_t v6 = (_DWORD *)a1[1];
    if (v6)
    {
      int v7 = v6[14] - 1;
      v6[14] = v7;
      if (!v7) {
        (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
      }
    }
    a1[1] = v5;
  }
  else
  {
    fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::SetImpl((uint64_t)a1, v4, 0);
  }
  return a1;
}

void sub_1B22B99B0(_Unwind_Exception *a1)
{
  fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::~ImplToFst(v1);
  _Unwind_Resume(a1);
}

void fst::StateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::~StateIterator()
{
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Next_(uint64_t result)
{
  return result;
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Reset_(uint64_t result)
{
  *(_DWORD *)(result + ++*(_DWORD *)(result + 24) = 0;
  return result;
}

void fst::CacheStateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::~CacheStateIterator()
{
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Done(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v2 < *(_DWORD *)(v3 + 68)) {
    return 0;
  }
  uint64_t v5 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v3);
  if ((int)v5 >= *(_DWORD *)(*(void *)(a1 + 16) + 68)) {
    return 1;
  }
  uint64_t v6 = v5;
  do
  {
    fst::ArcIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::ArcIterator(&v19, *(void *)(a1 + 8), v6);
    unint64_t v7 = v20;
    uint64_t v8 = *((void *)v19 + 7);
    unint64_t v9 = 0x6DB6DB6DB6DB6DB7 * ((*((void *)v19 + 8) - v8) >> 3);
    uint64_t v10 = *(void *)(a1 + 16);
    if (v20 < v9)
    {
      int v11 = *(_DWORD *)(v10 + 68);
      int v12 = (int *)(v8 + 56 * v20 + 48);
      do
      {
        int v14 = *v12;
        v12 += 14;
        int v13 = v14;
        if (v11 <= v14)
        {
          int v11 = v13 + 1;
          *(_DWORD *)(v10 + 68) = v13 + 1;
        }
        ++v7;
      }
      while (v9 != v7);
      unint64_t v20 = v9;
    }
    fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetExpandedState(v10, v6);
    int v15 = *(_DWORD *)(a1 + 24);
    uint64_t v16 = *(void *)(a1 + 16);
    int v17 = *(_DWORD *)(v16 + 68);
    --*((_DWORD *)v19 + 21);
    BOOL v4 = v15 >= v17;
    if (v15 < v17) {
      break;
    }
    uint64_t v6 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v16);
  }
  while ((int)v6 < *(_DWORD *)(*(void *)(a1 + 16) + 68));
  return v4;
}

void sub_1B22B9B4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char **fst::ArcIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::ArcIterator(char **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  a1[1] = 0;
  Mutableuint64_t State = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>>>::GetMutableState(*(void *)(v6 + 120), a3);
  *a1 = MutableState;
  ++*((_DWORD *)MutableState + 21);
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(*(void *)(a2 + 8), a3) & 1) == 0)(*(void (**)(void, uint64_t))(**(void **)(a2 + 8) + 48))(*(void *)(a2 + 8), a3); {
  return a1;
  }
}

void sub_1B22B9BF4(_Unwind_Exception *a1)
{
  --*(_DWORD *)(*(void *)v1 + 84);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::InitArcIterator(uint64_t a1, uint64_t a2, void *a3)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)(*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2); {
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::InitArcIterator(a1, a2, a3);
  }
}

void *fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::~ImplToFst(void *a1)
{
  *a1 = &unk_1F0A42360;
  int v2 = (_DWORD *)a1[1];
  if (v2)
  {
    int v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

uint64_t std::vector<std::pair<std::string,float>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,float>>,std::reverse_iterator<std::pair<std::string,float>*>,std::reverse_iterator<std::pair<std::string,float>*>,std::reverse_iterator<std::pair<std::string,float>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,float>>,std::reverse_iterator<std::pair<std::string,float>*>,std::reverse_iterator<std::pair<std::string,float>*>,std::reverse_iterator<std::pair<std::string,float>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = a7;
    do
    {
      long long v9 = *(_OWORD *)(a3 - 32);
      *(void *)(v8 - 16) = *(void *)(a3 - 16);
      *(_OWORD *)(v8 - 32) = v9;
      *(void *)(a3 - ++*(_DWORD *)(result + 24) = 0;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 32) = 0;
      *(_DWORD *)(v8 - 8) = *(_DWORD *)(a3 - 8);
      v8 -= 32;
      v7 -= 32;
      a3 -= 32;
    }
    while (a3 != a5);
    *((void *)&v15 + 1) = v8;
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,float>>,std::reverse_iterator<std::pair<std::string,float>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,float>>,std::reverse_iterator<std::pair<std::string,float>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::Token>,std::reverse_iterator<quasar::TextTokenizer::Token*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void kaldi::quasar::CoreMLClassifier::CoreMLClassifier(void *a1)
{
  *a1 = &unk_1F0A509C0;
  operator new();
}

void sub_1B22B9FFC(_Unwind_Exception *a1)
{
  std::unique_ptr<quasar::AppleFileCoordinatorData>::reset[abi:ne180100](v2, 0);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void kaldi::quasar::CoreMLClassifier::~CoreMLClassifier(id **this)
{
  *this = (id *)&unk_1F0A509C0;
  std::unique_ptr<quasar::AppleFileCoordinatorData>::reset[abi:ne180100](this + 1, 0);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)this);
}

{
  uint64_t vars8;

  *this = (id *)&unk_1F0A509C0;
  std::unique_ptr<quasar::AppleFileCoordinatorData>::reset[abi:ne180100](this + 1, 0);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)this);
  JUMPOUT(0x1B3EA8670);
}

uint64_t kaldi::quasar::CoreMLClassifier::PredictProba(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  uint64_t result = kaldi::MatrixBase<float>::NumRows(a2);
  if ((int)result >= 1)
  {
    int v6 = 0;
    do
    {
      id v7 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
      for (uint64_t i = 0; i < (int)kaldi::MatrixBase<float>::NumCols(a2); ++i)
      {
        std::to_string(&v49, i);
        long long v9 = std::string::insert(&v49, 0, "i");
        long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
        int64_t v47 = v9->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v10;
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v49.__r_.__value_.__l.__data_);
        }
        int v11 = [MEMORY[0x1E4F1E948] featureValueWithDouble:*(float *)(*(void *)a2 + 4 * v6 * *(_DWORD *)(a2 + 16) + 4 * i)];
        if (v47 >= 0) {
          int v12 = __p;
        }
        else {
          int v12 = (void **)__p[0];
        }
        char v13 = [NSString stringWithUTF8String:v12];
        [v7 setObject:v11 forKeyedSubscript:v13];

        if (SHIBYTE(v47) < 0) {
          operator delete(__p[0]);
        }
      }
      id v14 = objc_alloc(MEMORY[0x1E4F1E928]);
      id v48 = 0;
      uint64_t v15 = [v14 initWithDictionary:v7 error:&v48];
      id v16 = v48;
      char v38 = (void *)v15;
      if (!v15)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        unint64_t v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"CoreML feature provider creation failed: ", 41);
        id v29 = [v16 description];
        float v30 = (const char *)[v29 UTF8String];
        size_t v31 = strlen(v30);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v30, v31);

        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
      }
      int v17 = **(void ***)(a1 + 8);
      id v45 = v16;
      char v39 = [v17 predictionFromFeatures:v15 error:&v45];
      id v37 = v45;

      if (!v39)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        uint64_t v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"CoreML feature provider creation failed: ", 41);
        id v33 = [v37 description];
        uint64_t v34 = (const char *)[v33 UTF8String];
        size_t v35 = strlen(v34);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)v34, v35);

        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
      }
      int v18 = [v39 featureValueForName:@"classProbability"];
      char v40 = [v18 dictionaryValue];

      if (!v40)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"classProbability", 16);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
      }
      if (v6)
      {
        uint64_t v19 = [v40 count];
        if (v19 != (int)kaldi::MatrixBase<float>::NumCols((uint64_t)a3))
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"[classProbability count] == out->NumCols()", 42);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
        }
      }
      else
      {
        uint64_t v20 = kaldi::MatrixBase<float>::NumRows(a2);
        kaldi::Matrix<float>::Resize(a3, v20, [v40 count], 1, 0);
      }
      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      id v21 = v40;
      uint64_t v22 = [v21 countByEnumeratingWithState:&v41 objects:v50 count:16];
      if (v22)
      {
        uint64_t v23 = *(void *)v42;
        do
        {
          for (uint64_t j = 0; j != v22; ++j)
          {
            if (*(void *)v42 != v23) {
              objc_enumerationMutation(v21);
            }
            id v25 = *(id *)(*((void *)&v41 + 1) + 8 * j);
            BOOL v26 = [v21 objectForKeyedSubscript:v25];
            [v26 floatValue];
            *(_DWORD *)(*(void *)a3 + 4 * a3[2].i32[0] * v6 + 4 * (int)[v25 intValue]) = v27;
          }
          uint64_t v22 = [v21 countByEnumeratingWithState:&v41 objects:v50 count:16];
        }
        while (v22);
      }

      uint64_t result = kaldi::MatrixBase<float>::NumRows(a2);
      ++v6;
    }
    while (v6 < (int)result);
  }
  return result;
}

void sub_1B22BA648(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1B22BA664()
{
}

void sub_1B22BA66C()
{
  JUMPOUT(0x1B22BA680);
}

void quasar::FstToStrings()
{
}

void sub_1B22BAC10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&__p);
  std::deque<quasar::SearchState<std::string>>::~deque[abi:ne180100]((void *)(v27 - 160));
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(&a10);
  _Unwind_Resume(a1);
}

void quasar::ShortestPathFst(uint64_t a1)
{
}

void quasar::FstToSymLabels()
{
}

void sub_1B22BAE8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t quasar::VisitState<std::vector<int>>(void *a1, uint64_t *a2)
{
  long long v52 = 0u;
  memset(v51, 0, sizeof(v51));
  LODWORD(v31) = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
  __p[0] = 0;
  __p[1] = 0;
  *(void *)&long long v35 = 0;
  LODWORD(__src.__begin_) = 0;
  std::deque<quasar::SearchState<std::vector<int>>>::emplace_back<int,std::vector<int>,int>(v51, &v31, (uint64_t)__p, (int *)&__src);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  unint64_t v4 = *((void *)&v52 + 1);
  if (*((void *)&v52 + 1))
  {
    while (v4 < 0xF4241)
    {
      unint64_t v5 = v4 + v52 - 1;
      uint64_t v6 = *(void *)(v51[1] + 8 * (v5 / 0x66));
      unint64_t v7 = v5 % 0x66;
      uint64_t v8 = *(int *)(v6 + 40 * (v5 % 0x66));
      LODWORD(__p[0]) = (*(float (**)(void *, uint64_t))(*a1 + 32))(a1, v8);
      LODWORD(v31) = 2139095040;
      if (*(float *)__p != INFINITY)
      {
        float v9 = *(float *)(v6 + 40 * v7 + 32);
        float v10 = (*(float (**)(void *, uint64_t))(*a1 + 32))(a1, v8);
        uint64_t v11 = v6 + 40 * v7 + 8;
        *(float *)std::string __p = v9 + v10;
        unint64_t v12 = a2[1];
        if (v12 >= a2[2])
        {
          uint64_t v13 = std::vector<std::pair<std::vector<int>,float>>::__emplace_back_slow_path<std::vector<int> const&,float>(a2, v11, __p);
        }
        else
        {
          std::vector<std::pair<std::vector<int>,float>>::__construct_one_at_end[abi:ne180100]<std::vector<int> const&,float>((uint64_t)a2, v11, (float *)__p);
          uint64_t v13 = v12 + 32;
        }
        a2[1] = v13;
      }
      __p[0] = 0;
      __p[1] = 0;
      *(void *)&long long v35 = 0;
      uint64_t v14 = *(void *)(*(void *)(*(void *)(a1[1] + 64) + 8 * v8) + 24);
      uint64_t v15 = *(void *)(*(void *)(*(void *)(a1[1] + 64) + 8 * v8) + 32) - v14;
      if (v15)
      {
        unint64_t v16 = v15 >> 4;
        uint64_t v17 = v6 + 40 * v7;
        int v18 = (const void **)(v17 + 8);
        uint64_t v19 = (uint64_t *)(v17 + 16);
        uint64_t v20 = (float *)(v17 + 32);
        if (v16 <= 1) {
          uint64_t v21 = 1;
        }
        else {
          uint64_t v21 = v16;
        }
        uint64_t v22 = (float *)(v14 + 12);
        do
        {
          size_t v31 = 0;
          uint64_t v32 = 0;
          uint64_t v33 = 0;
          if (*((_DWORD *)v22 - 2))
          {
            *(float *)&__src.__begin_ = *(v22 - 2);
            std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v31, (char *)&__src, (uint64_t)&__src.__begin_ + 4, 1uLL);
          }
          memset(&__src, 0, sizeof(__src));
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__src, *v18, *v19, (*v19 - (uint64_t)*v18) >> 2);
          std::vector<int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__src, (uint64_t)__src.__end_, (char *)v31, v32, (v32 - (unsigned char *)v31) >> 2);
          float v23 = *v20 + *(v22 - 1);
          float v29 = v23;
          unint64_t v24 = (float *)__p[1];
          if (__p[1] >= (void *)v35)
          {
            id v25 = (void *)std::vector<quasar::SearchState<std::vector<int>>>::__emplace_back_slow_path<int const&,std::vector<int>&,float>((uint64_t *)__p, v22, (uint64_t)&__src, (int *)&v29);
          }
          else
          {
            *(float *)__p[1] = *v22;
            *((void *)v24 + 2) = 0;
            *((void *)v24 + 3) = 0;
            *((void *)v24 + 1) = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)v24 + 1, __src.__begin_, (uint64_t)__src.__end_, __src.__end_ - __src.__begin_);
            v24[8] = v23;
            id v25 = v24 + 10;
          }
          __p[1] = v25;
          if (__src.__begin_)
          {
            __src.__end_ = __src.__begin_;
            operator delete(__src.__begin_);
          }
          if (v31)
          {
            uint64_t v32 = (char *)v31;
            operator delete(v31);
          }
          v22 += 4;
          --v21;
        }
        while (v21);
      }
      std::deque<quasar::SearchState<std::vector<int>>>::pop_back(v51);
      for (uint64_t i = (char *)__p[1];
            i != __p[0];
            std::deque<quasar::SearchState<std::vector<int>>>::emplace_back<quasar::SearchState<std::vector<int>>>(v51, (uint64_t)i))
      {
        i -= 40;
      }
      size_t v31 = __p;
      std::vector<quasar::SearchState<std::vector<int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
      unint64_t v4 = *((void *)&v52 + 1);
      if (!*((void *)&v52 + 1)) {
        goto LABEL_29;
      }
    }
    if (quasar::gLogLevel >= 1)
    {
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      *(_OWORD *)std::string __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Too many states on the stack. There may be a cycle.", 51);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__p);
    }
    uint64_t v27 = 0;
  }
  else
  {
LABEL_29:
    uint64_t v27 = 1;
  }
  std::deque<quasar::SearchState<std::vector<int>>>::~deque[abi:ne180100](v51);
  return v27;
}

void sub_1B22BB27C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&__p);
  std::deque<quasar::SearchState<std::vector<int>>>::~deque[abi:ne180100]((void *)(v18 - 160));
  _Unwind_Resume(a1);
}

void quasar::FstHasAnyOutput()
{
}

void sub_1B22BB3C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  *(void *)(v5 - ++*(_DWORD *)(result + 24) = v4;
  std::vector<std::pair<std::vector<int>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v5 - 24));
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::deque<quasar::SearchState<std::string>>::emplace_back<int,std::string,int>(void *a1, _DWORD *a2, long long *a3, int *a4)
{
  uint64_t v8 = a1[2];
  uint64_t v9 = a1[1];
  uint64_t v10 = 102 * ((v8 - v9) >> 3) - 1;
  if (v8 == v9) {
    uint64_t v10 = 0;
  }
  unint64_t v11 = a1[5] + a1[4];
  if (v10 == v11)
  {
    std::deque<quasar::SearchState<std::string>>::__add_back_capacity(a1);
    uint64_t v9 = a1[1];
    unint64_t v11 = a1[5] + a1[4];
  }
  uint64_t v12 = *(void *)(v9 + 8 * (v11 / 0x66));
  unint64_t v13 = v11 % 0x66;
  uint64_t v14 = (_DWORD *)(v12 + 40 * (v11 % 0x66));
  int v15 = *a4;
  *uint64_t v14 = *a2;
  unint64_t v16 = (std::string *)(v14 + 2);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v17 = *a3;
    v16->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
  }
  *(float *)(v12 + 40 * v13 + 32) = (float)v15;
  uint64_t v18 = a1[4];
  uint64_t v19 = a1[5] + 1;
  a1[5] = v19;
  unint64_t v20 = v18 + v19;
  uint64_t v21 = a1[1];
  uint64_t v22 = (void *)(v21 + 8 * (v20 / 0x66));
  uint64_t v23 = *v22 + 40 * (v20 % 0x66);
  if (a1[2] == v21) {
    uint64_t v23 = 0;
  }
  if (v23 == *v22) {
    uint64_t v23 = *(v22 - 1) + 4080;
  }
  return v23 - 40;
}

void std::deque<quasar::SearchState<std::string>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x66;
  unint64_t v4 = v2 - 102;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      long long v35 = &v34[8 * (v33 >> 2)];
      long long v37 = &v34[8 * v36];
      long long v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        long long v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)long long v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFF0uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFF0uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    long long v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      long long v35 = &v34[8 * (v46 >> 2)];
      long long v37 = &v34[8 * v47];
      long long v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      long long v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unsigned int v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  std::vector<unsigned int>::pointer v53 = operator new(0xFF0uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  float v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1B22BB804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

float std::vector<std::pair<std::string,float>>::__construct_one_at_end[abi:ne180100]<std::string const&,float>(uint64_t a1, long long *a2, float *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v6 = *a2;
    *(void *)(v5 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v5 = v6;
  }
  float result = *a3;
  *(float *)(v5 + ++*(_DWORD *)(result + 24) = *a3;
  *(void *)(a1 + 8) = v5 + 32;
  return result;
}

void sub_1B22BB8BC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::string,float>>::__emplace_back_slow_path<std::string const&,float>(uint64_t *a1, long long *a2, _DWORD *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (a1[1] - *a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v10 = a1[2] - v4;
  if (v10 >> 4 > v6) {
    unint64_t v6 = v10 >> 4;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v6;
  }
  int64_t v20 = a1 + 2;
  if (v11) {
    uint64_t v12 = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v9, v11);
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = (std::string *)&v12[8 * v5];
  v17[0] = v12;
  v17[1] = v13;
  uint64_t v18 = v13;
  uint64_t v19 = (char *)&v12[8 * v11];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    uint64_t v13 = v18;
  }
  else
  {
    long long v14 = *a2;
    v13->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
  }
  v12[8 * v5 + 6] = *a3;
  uint64_t v18 = (std::string *)((char *)v13 + 32);
  std::vector<std::pair<std::string,float>>::__swap_out_circular_buffer(a1, v17);
  uint64_t v15 = a1[1];
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)v17);
  return v15;
}

void sub_1B22BB9CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t fst::LabelsToUTF8String<int>(uint64_t *a1, uint64_t a2)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v14);
  uint64_t v4 = *a1;
  if (a1[1] == *a1)
  {
LABEL_17:
    std::stringbuf::str();
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    *(_OWORD *)a2 = *(_OWORD *)__p;
    *(void *)(a2 + 16) = v12;
    uint64_t v7 = 1;
  }
  else
  {
    unint64_t v5 = 0;
    while (1)
    {
      unsigned int v6 = *(_DWORD *)(v4 + 4 * v5);
      if ((v6 & 0x80000000) != 0) {
        break;
      }
      if (v6 > 0x7F)
      {
        if (v6 > 0x7FF)
        {
          if (HIWORD(v6))
          {
            if (v6 >> 21)
            {
              if (v6 >> 26)
              {
                LOBYTE(__p[0]) = (v6 >> 30) | 0xFC;
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)__p, 1);
                LOBYTE(__p[0]) = HIBYTE(v6) & 0x3F | 0x80;
              }
              else
              {
                LOBYTE(__p[0]) = HIBYTE(v6) | 0xF8;
              }
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)__p, 1);
              LOBYTE(__p[0]) = (v6 >> 18) & 0x3F | 0x80;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)__p, 1);
              LOBYTE(__p[0]) = (v6 >> 12) & 0x3F | 0x80;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)__p, 1);
              LOBYTE(__p[0]) = (v6 >> 6) & 0x3F | 0x80;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)__p, 1);
              LOBYTE(__p[0]) = v6 & 0x3F | 0x80;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)__p, 1);
            }
            else
            {
              LOBYTE(__p[0]) = (v6 >> 18) | 0xF0;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)__p, 1);
              LOBYTE(__p[0]) = (v6 >> 12) & 0x3F | 0x80;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)__p, 1);
              LOBYTE(__p[0]) = (v6 >> 6) & 0x3F | 0x80;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)__p, 1);
              LOBYTE(__p[0]) = v6 & 0x3F | 0x80;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)__p, 1);
            }
          }
          else
          {
            LOBYTE(__p[0]) = (v6 >> 12) | 0xE0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)__p, 1);
            LOBYTE(__p[0]) = (v6 >> 6) & 0x3F | 0x80;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)__p, 1);
            LOBYTE(__p[0]) = v6 & 0x3F | 0x80;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)__p, 1);
          }
        }
        else
        {
          LOBYTE(__p[0]) = (v6 >> 6) | 0xC0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)__p, 1);
          LOBYTE(__p[0]) = v6 & 0x3F | 0x80;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)__p, 1);
        }
      }
      else
      {
        LOBYTE(__p[0]) = *(_DWORD *)(v4 + 4 * v5);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)__p, 1);
      }
      ++v5;
      uint64_t v4 = *a1;
      if (v5 >= (a1[1] - *a1) >> 2) {
        goto LABEL_17;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    uint64_t v8 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
    uint64_t v9 = (void *)fst::cerr(v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"LabelsToUTF8String: Invalid character found: ", 45);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
    if (SHIBYTE(v12) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v7 = 0;
  }
  v14[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v14 + *(void *)(v14[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v14[1] = MEMORY[0x1E4FBA470] + 16;
  if (v15 < 0) {
    operator delete((void *)v14[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1B3EA8520](&v16);
  return v7;
}

void sub_1B22BBE3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t std::string::__insert_with_size<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(std::string *this, uint64_t a2, std::string::value_type *a3, std::string::value_type *a4, std::string::size_type __n_add)
{
  unsigned int v6 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v9 = (std::string *)this->__r_.__value_.__r.__words[0];
    std::string::size_type v7 = a2 - this->__r_.__value_.__r.__words[0];
    if (__n_add)
    {
      std::string::size_type size = this->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }
    unsigned int v6 = (std::string *)this->__r_.__value_.__r.__words[0];
    return (uint64_t)v6 + v7;
  }
  std::string::size_type v7 = a2 - (void)this;
  if (!__n_add) {
    return (uint64_t)v6 + v7;
  }
  std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  uint64_t v9 = this;
LABEL_6:
  if (v9 <= (std::string *)a3 && (char *)&v9->__r_.__value_.__l.__data_ + size + 1 > a3)
  {
    std::string::__init_with_sentinel[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(&__p, a3, a4);
    std::string::size_type v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v10 = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v12 = std::string::__insert_from_safe_copy[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(v6, __n_add, v7, (char *)p_p, (char *)p_p + v10);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    return v12;
  }
  return std::string::__insert_from_safe_copy[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(this, __n_add, v7, a3, a4);
}

void sub_1B22BBF94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::string::__init_with_sentinel[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(std::string *this, std::string::value_type *a2, std::string::value_type *a3)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    do
      std::string::push_back(this, *v4++);
    while (v4 != a3);
  }
}

void sub_1B22BC008(void *a1)
{
  __cxa_begin_catch(a1);
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  __cxa_rethrow();
}

void sub_1B22BC024(_Unwind_Exception *a1)
{
}

uint64_t std::vector<quasar::SearchState<std::string>>::__emplace_back_slow_path<int const&,std::string&,float>(uint64_t *a1, _DWORD *a2, long long *a3, int *a4)
{
  uint64_t v5 = *a1;
  unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v7 = v6 + 1;
  if (v6 + 1 > 0x666666666666666) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v11 = (uint64_t)(a1 + 2);
  unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v5) >> 3);
  if (2 * v12 > v7) {
    unint64_t v7 = 2 * v12;
  }
  if (v12 >= 0x333333333333333) {
    unint64_t v13 = 0x666666666666666;
  }
  else {
    unint64_t v13 = v7;
  }
  uint64_t v24 = a1 + 2;
  if (v13) {
    long long v14 = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(v11, v13);
  }
  else {
    long long v14 = 0;
  }
  char v15 = (char *)&v14[10 * v6];
  v21[0] = v14;
  v21[1] = v15;
  unint64_t v22 = v15;
  uint64_t v23 = (char *)&v14[10 * v13];
  int v16 = *a4;
  *(_DWORD *)char v15 = *a2;
  uint64_t v17 = (std::string *)(v15 + 8);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)a3, *((void *)a3 + 1));
    char v15 = v22;
  }
  else
  {
    long long v18 = *a3;
    *((void *)v15 + 3) = *((void *)a3 + 2);
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
  }
  v14[10 * v6 + 8] = v16;
  unint64_t v22 = v15 + 40;
  std::vector<quasar::SearchState<std::string>>::__swap_out_circular_buffer(a1, v21);
  uint64_t v19 = a1[1];
  std::__split_buffer<quasar::PronChoice>::~__split_buffer((uint64_t)v21);
  return v19;
}

void sub_1B22BC17C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::PronChoice>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::SearchState<std::string>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::SearchState<std::string>>,std::reverse_iterator<quasar::SearchState<std::string>*>,std::reverse_iterator<quasar::SearchState<std::string>*>,std::reverse_iterator<quasar::SearchState<std::string>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::SearchState<std::string>>,std::reverse_iterator<quasar::SearchState<std::string>*>,std::reverse_iterator<quasar::SearchState<std::string>*>,std::reverse_iterator<quasar::SearchState<std::string>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a7 + v7;
      uint64_t v9 = a3 + v7;
      *(_DWORD *)(v8 - 40) = *(_DWORD *)(a3 + v7 - 40);
      long long v10 = *(_OWORD *)(a3 + v7 - 32);
      *(void *)(v8 - 16) = *(void *)(a3 + v7 - 16);
      *(_OWORD *)(v8 - 32) = v10;
      *(void *)(v9 - ++*(_DWORD *)(result + 24) = 0;
      *(void *)(v9 - 16) = 0;
      *(void *)(v9 - 32) = 0;
      *(_DWORD *)(v8 - 8) = *(_DWORD *)(a3 + v7 - 8);
      v7 -= 40;
    }
    while (a3 + v7 != a5);
    *((void *)&v16 + 1) = a7 + v7;
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::SearchState<std::string>>,std::reverse_iterator<quasar::SearchState<std::string>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::SearchState<std::string>>,std::reverse_iterator<quasar::SearchState<std::string>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::PronChoice>,std::reverse_iterator<quasar::PronChoice*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::deque<quasar::SearchState<std::string>>::pop_back(void *a1)
{
  uint64_t v2 = a1[5] - 1;
  unint64_t v3 = v2 + a1[4];
  uint64_t v4 = *(void *)(a1[1] + 8 * (v3 / 0x66));
  unint64_t v5 = v3 % 0x66;
  if (*(char *)(v4 + 40 * v5 + 31) < 0)
  {
    operator delete(*(void **)(v4 + 40 * v5 + 8));
    uint64_t v2 = a1[5] - 1;
  }
  a1[5] = v2;
  return std::deque<quasar::SearchState<std::string>>::__maybe_remove_back_spare[abi:ne180100](a1, 1);
}

uint64_t std::deque<quasar::SearchState<std::string>>::__maybe_remove_back_spare[abi:ne180100](void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 102 * ((v2 - v3) >> 3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x66) {
    a2 = 1;
  }
  if (v5 < 0xCC) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

uint64_t std::deque<quasar::SearchState<std::string>>::emplace_back<quasar::SearchState<std::string>>(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 102 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<quasar::SearchState<std::string>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x66)) + 40 * (v7 % 0x66);
  *(_DWORD *)unint64_t v8 = *(_DWORD *)a2;
  long long v9 = *(_OWORD *)(a2 + 8);
  *(void *)(v8 + ++*(_DWORD *)(result + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(v8 + 8) = v9;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + ++*(_DWORD *)(result + 24) = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(v8 + 32) = *(_DWORD *)(a2 + 32);
  uint64_t v10 = a1[4];
  uint64_t v11 = a1[5] + 1;
  a1[5] = v11;
  unint64_t v12 = v10 + v11;
  uint64_t v13 = a1[1];
  char v14 = (void *)(v13 + 8 * (v12 / 0x66));
  uint64_t v15 = *v14 + 40 * (v12 % 0x66);
  if (a1[2] == v13) {
    uint64_t v15 = 0;
  }
  if (v15 == *v14) {
    uint64_t v15 = *(v14 - 1) + 4080;
  }
  return v15 - 40;
}

uint64_t std::deque<quasar::SearchState<std::string>>::~deque[abi:ne180100](void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  if (v3 == v2)
  {
    uint64_t v4 = a1 + 5;
    uint64_t v3 = (void **)a1[1];
  }
  else
  {
    uint64_t v4 = a1 + 5;
    unint64_t v5 = a1[4];
    uint64_t v6 = &v2[v5 / 0x66];
    unint64_t v7 = (unint64_t)*v6;
    unint64_t v8 = (unint64_t)*v6 + 40 * (v5 % 0x66);
    unint64_t v9 = (unint64_t)v2[(a1[5] + v5) / 0x66] + 40 * ((a1[5] + v5) % 0x66);
    if (v8 != v9)
    {
      do
      {
        if (*(char *)(v8 + 31) < 0)
        {
          operator delete(*(void **)(v8 + 8));
          unint64_t v7 = (unint64_t)*v6;
        }
        v8 += 40;
        if (v8 - v7 == 4080)
        {
          unint64_t v10 = (unint64_t)v6[1];
          ++v6;
          unint64_t v7 = v10;
          unint64_t v8 = v10;
        }
      }
      while (v8 != v9);
      uint64_t v2 = (void **)a1[1];
      uint64_t v3 = (void **)a1[2];
    }
  }
  void *v4 = 0;
  unint64_t v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v12 = v11 >> 3;
  if (v12 == 1)
  {
    uint64_t v13 = 51;
  }
  else
  {
    if (v12 != 2) {
      goto LABEL_18;
    }
    uint64_t v13 = 102;
  }
  a1[4] = v13;
LABEL_18:
  while (v2 != v3)
  {
    char v14 = *v2++;
    operator delete(v14);
  }
  return std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::~__split_buffer((uint64_t)a1);
}

uint64_t std::deque<quasar::SearchState<std::vector<int>>>::emplace_back<int,std::vector<int>,int>(void *a1, _DWORD *a2, uint64_t a3, int *a4)
{
  uint64_t v8 = a1[2];
  uint64_t v9 = a1[1];
  uint64_t v10 = 102 * ((v8 - v9) >> 3) - 1;
  if (v8 == v9) {
    uint64_t v10 = 0;
  }
  unint64_t v11 = a1[5] + a1[4];
  if (v10 == v11)
  {
    std::deque<quasar::SearchState<std::vector<int>>>::__add_back_capacity(a1);
    uint64_t v9 = a1[1];
    unint64_t v11 = a1[5] + a1[4];
  }
  unint64_t v12 = *(void *)(v9 + 8 * (v11 / 0x66)) + 40 * (v11 % 0x66);
  float v13 = (float)*a4;
  *(_DWORD *)unint64_t v12 = *a2;
  *(void *)(v12 + 16) = 0;
  *(void *)(v12 + ++*(_DWORD *)(result + 24) = 0;
  *(void *)(v12 + 8) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(v12 + 8), *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  *(float *)(v12 + 32) = v13;
  uint64_t v14 = a1[4];
  uint64_t v15 = a1[5] + 1;
  a1[5] = v15;
  unint64_t v16 = v14 + v15;
  uint64_t v17 = a1[1];
  long long v18 = (void *)(v17 + 8 * (v16 / 0x66));
  uint64_t v19 = *v18 + 40 * (v16 % 0x66);
  if (a1[2] == v17) {
    uint64_t v19 = 0;
  }
  if (v19 == *v18) {
    uint64_t v19 = *(v18 - 1) + 4080;
  }
  return v19 - 40;
}

void std::deque<quasar::SearchState<std::vector<int>>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x66;
  unint64_t v4 = v2 - 102;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      long long v35 = &v34[8 * (v33 >> 2)];
      long long v37 = &v34[8 * v36];
      long long v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        long long v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)long long v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFF0uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFF0uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    long long v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      long long v35 = &v34[8 * (v46 >> 2)];
      long long v37 = &v34[8 * v47];
      long long v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      long long v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unsigned int v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  std::vector<unsigned int>::pointer v53 = operator new(0xFF0uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  float v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1B22BCA80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

float std::vector<std::pair<std::vector<int>,float>>::__construct_one_at_end[abi:ne180100]<std::vector<int> const&,float>(uint64_t a1, uint64_t a2, float *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)uint64_t v5 = 0;
  *(void *)(v5 + 8) = 0;
  *(void *)(v5 + 16) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)v5, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  float result = *a3;
  *(float *)(v5 + ++*(_DWORD *)(result + 24) = *a3;
  *(void *)(a1 + 8) = v5 + 32;
  return result;
}

void sub_1B22BCB2C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::vector<int>,float>>::__emplace_back_slow_path<std::vector<int> const&,float>(uint64_t *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (a1[1] - *a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v10 = a1[2] - v4;
  if (v10 >> 4 > v6) {
    unint64_t v6 = v10 >> 4;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v6;
  }
  uint64_t v19 = a1 + 2;
  if (v11) {
    uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v9, v11);
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = &v12[32 * v5];
  v16[0] = v12;
  v16[1] = v13;
  uint64_t v17 = v13;
  uint64_t v18 = &v12[32 * v11];
  *(void *)uint64_t v13 = 0;
  *((void *)v13 + 1) = 0;
  *((void *)v13 + 2) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v13, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  *((_DWORD *)v13 + 6) = *a3;
  v17 += 32;
  std::vector<std::pair<std::vector<int>,float>>::__swap_out_circular_buffer(a1, v16);
  uint64_t v14 = a1[1];
  std::__split_buffer<fst::IntervalSet<int>>::~__split_buffer((uint64_t)v16);
  return v14;
}

void sub_1B22BCC24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::IntervalSet<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::vector<int>,float>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::vector<int>,float>>,std::reverse_iterator<std::pair<std::vector<int>,float>*>,std::reverse_iterator<std::pair<std::vector<int>,float>*>,std::reverse_iterator<std::pair<std::vector<int>,float>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::vector<int>,float>>,std::reverse_iterator<std::pair<std::vector<int>,float>*>,std::reverse_iterator<std::pair<std::vector<int>,float>*>,std::reverse_iterator<std::pair<std::vector<int>,float>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - ++*(_DWORD *)(result + 24) = 0;
      *(void *)(v7 - 16) = 0;
      long long v8 = *(_OWORD *)(a3 - 32);
      a3 -= 32;
      *(_OWORD *)(v7 - 32) = v8;
      *(void *)(v7 - 16) = *(void *)(a3 + 16);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)a3 = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 24);
      uint64_t v7 = *((void *)&v14 + 1) - 32;
      *((void *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<int>,float>>,std::reverse_iterator<std::pair<std::vector<int>,float>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<int>,float>>,std::reverse_iterator<std::pair<std::vector<int>,float>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<fst::IntervalSet<int>>,std::reverse_iterator<fst::IntervalSet<int>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::vector<quasar::SearchState<std::vector<int>>>::__emplace_back_slow_path<int const&,std::vector<int>&,float>(uint64_t *a1, _DWORD *a2, uint64_t a3, int *a4)
{
  uint64_t v5 = *a1;
  unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v7 = v6 + 1;
  if (v6 + 1 > 0x666666666666666) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v11 = (uint64_t)(a1 + 2);
  unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v5) >> 3);
  if (2 * v12 > v7) {
    unint64_t v7 = 2 * v12;
  }
  if (v12 >= 0x333333333333333) {
    unint64_t v13 = 0x666666666666666;
  }
  else {
    unint64_t v13 = v7;
  }
  unint64_t v22 = a1 + 2;
  if (v13) {
    long long v14 = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(v11, v13);
  }
  else {
    long long v14 = 0;
  }
  uint64_t v15 = (char *)&v14[10 * v6];
  v19[0] = v14;
  v19[1] = v15;
  int64_t v20 = v15;
  uint64_t v21 = (char *)&v14[10 * v13];
  int v16 = *a4;
  *(_DWORD *)uint64_t v15 = *a2;
  *((void *)v15 + 2) = 0;
  *((void *)v15 + 3) = 0;
  *((void *)v15 + 1) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)v15 + 1, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  v14[10 * v6 + 8] = v16;
  v20 += 40;
  std::vector<quasar::SearchState<std::vector<int>>>::__swap_out_circular_buffer(a1, v19);
  uint64_t v17 = a1[1];
  std::__split_buffer<quasar::SearchState<std::vector<int>>>::~__split_buffer((uint64_t)v19);
  return v17;
}

void sub_1B22BCEC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::SearchState<std::vector<int>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::SearchState<std::vector<int>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::SearchState<std::vector<int>>>,std::reverse_iterator<quasar::SearchState<std::vector<int>>*>,std::reverse_iterator<quasar::SearchState<std::vector<int>>*>,std::reverse_iterator<quasar::SearchState<std::vector<int>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::SearchState<std::vector<int>>>,std::reverse_iterator<quasar::SearchState<std::vector<int>>*>,std::reverse_iterator<quasar::SearchState<std::vector<int>>*>,std::reverse_iterator<quasar::SearchState<std::vector<int>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      int v8 = *(_DWORD *)(a3 - 40);
      a3 -= 40;
      *(_DWORD *)(v7 - 40) = v8;
      *(void *)(v7 - ++*(_DWORD *)(result + 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 32) = 0;
      *(_OWORD *)(v7 - 32) = *(_OWORD *)(a3 + 8);
      *(void *)(v7 - 16) = *(void *)(a3 + 24);
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + ++*(_DWORD *)(result + 24) = 0;
      *(void *)(a3 + 8) = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 32);
      uint64_t v7 = *((void *)&v14 + 1) - 40;
      *((void *)&v14 + 1) -= 40;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::SearchState<std::vector<int>>>,std::reverse_iterator<quasar::SearchState<std::vector<int>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::SearchState<std::vector<int>>>,std::reverse_iterator<quasar::SearchState<std::vector<int>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::SearchState<std::vector<int>>>,std::reverse_iterator<quasar::SearchState<std::vector<int>>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::SearchState<std::vector<int>>>,std::reverse_iterator<quasar::SearchState<std::vector<int>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    BOOL v3 = *(void **)(v1 + 8);
    if (v3)
    {
      *(void *)(v1 + 16) = v3;
      operator delete(v3);
    }
    v1 += 40;
  }
}

uint64_t std::__split_buffer<quasar::SearchState<std::vector<int>>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<quasar::SearchState<std::vector<int>>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    *(void *)(a1 + 16) = v2 - 40;
    uint64_t v5 = *(void **)(v2 - 32);
    if (v5)
    {
      *(void *)(v2 - ++*(_DWORD *)(result + 24) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 40;
    }
  }
}

uint64_t std::deque<quasar::SearchState<std::vector<int>>>::pop_back(void *a1)
{
  uint64_t v2 = a1[5] - 1;
  unint64_t v3 = v2 + a1[4];
  uint64_t v4 = *(void *)(a1[1] + 8 * (v3 / 0x66));
  unint64_t v5 = v3 % 0x66;
  uint64_t v6 = *(void **)(v4 + 40 * v5 + 8);
  if (v6)
  {
    *(void *)(v4 + 40 * v5 + 16) = v6;
    operator delete(v6);
    uint64_t v2 = a1[5] - 1;
  }
  a1[5] = v2;
  return std::deque<quasar::SearchState<std::string>>::__maybe_remove_back_spare[abi:ne180100](a1, 1);
}

uint64_t std::deque<quasar::SearchState<std::vector<int>>>::emplace_back<quasar::SearchState<std::vector<int>>>(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 102 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<quasar::SearchState<std::vector<int>>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x66)) + 40 * (v7 % 0x66);
  *(_DWORD *)unint64_t v8 = *(_DWORD *)a2;
  *(void *)(v8 + 16) = 0;
  *(void *)(v8 + ++*(_DWORD *)(result + 24) = 0;
  *(void *)(v8 + 8) = 0;
  *(_OWORD *)(v8 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(v8 + ++*(_DWORD *)(result + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + ++*(_DWORD *)(result + 24) = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(v8 + 32) = *(_DWORD *)(a2 + 32);
  uint64_t v9 = a1[4];
  uint64_t v10 = a1[5] + 1;
  a1[5] = v10;
  unint64_t v11 = v9 + v10;
  uint64_t v12 = a1[1];
  long long v13 = (void *)(v12 + 8 * (v11 / 0x66));
  uint64_t v14 = *v13 + 40 * (v11 % 0x66);
  if (a1[2] == v12) {
    uint64_t v14 = 0;
  }
  if (v14 == *v13) {
    uint64_t v14 = *(v13 - 1) + 4080;
  }
  return v14 - 40;
}

void std::vector<quasar::SearchState<std::vector<int>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<quasar::SearchState<std::vector<int>>>::__clear[abi:ne180100]((uint64_t *)v2);
    unint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<quasar::SearchState<std::vector<int>>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 40)
  {
    uint64_t v4 = *(void **)(i - 32);
    if (v4)
    {
      *(void *)(i - ++*(_DWORD *)(result + 24) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

uint64_t std::deque<quasar::SearchState<std::vector<int>>>::~deque[abi:ne180100](void *a1)
{
  uint64_t v2 = (void **)a1[1];
  unint64_t v3 = (void **)a1[2];
  if (v3 == v2)
  {
    uint64_t v4 = a1 + 5;
    unint64_t v3 = (void **)a1[1];
  }
  else
  {
    uint64_t v4 = a1 + 5;
    unint64_t v5 = a1[4];
    uint64_t v6 = &v2[v5 / 0x66];
    unint64_t v7 = (unint64_t)*v6;
    unint64_t v8 = (unint64_t)*v6 + 40 * (v5 % 0x66);
    unint64_t v9 = (unint64_t)v2[(a1[5] + v5) / 0x66] + 40 * ((a1[5] + v5) % 0x66);
    if (v8 != v9)
    {
      do
      {
        uint64_t v10 = *(void **)(v8 + 8);
        if (v10)
        {
          *(void *)(v8 + 16) = v10;
          operator delete(v10);
          unint64_t v7 = (unint64_t)*v6;
        }
        v8 += 40;
        if (v8 - v7 == 4080)
        {
          unint64_t v11 = (unint64_t)v6[1];
          ++v6;
          unint64_t v7 = v11;
          unint64_t v8 = v11;
        }
      }
      while (v8 != v9);
      uint64_t v2 = (void **)a1[1];
      unint64_t v3 = (void **)a1[2];
    }
  }
  void *v4 = 0;
  unint64_t v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      unint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v12 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v13 = v12 >> 3;
  if (v13 == 1)
  {
    uint64_t v14 = 51;
  }
  else
  {
    if (v13 != 2) {
      goto LABEL_18;
    }
    uint64_t v14 = 102;
  }
  a1[4] = v14;
LABEL_18:
  while (v2 != v3)
  {
    uint64_t v15 = *v2++;
    operator delete(v15);
  }
  return std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::~__split_buffer((uint64_t)a1);
}

uint64_t kaldi::GetHmmAsFst(int **a1, uint64_t a2, kaldi::HmmTopology *a3, uint64_t a4, void *a5)
{
  if (*(unsigned char *)(a4 + 4))
  {
    unint64_t v9 = *a1;
    uint64_t v10 = (char *)a1[1] - (char *)*a1;
    if ((unint64_t)v10 >= 8)
    {
      unint64_t v11 = (unint64_t)(v10 >> 2) >> 1;
      if (v11 <= 1) {
        unint64_t v11 = 1;
      }
      unint64_t v12 = &v9[(v10 >> 2) - 1];
      do
      {
        int v13 = *v9;
        *v9++ = *v12;
        *v12-- = v13;
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    uint64_t v10 = (char *)a1[1] - (char *)*a1;
  }
  if ((**(unsigned int (***)(uint64_t))a2)(a2) != ((unint64_t)v10 >> 2))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)"Context size mismatch, ilabel-info [from context FST is ", 56);
    long long v32 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)", context-dependency object expects ", 36);
    (**(void (***)(uint64_t))a2)(a2);
    std::ostream::operator<<();
    goto LABEL_41;
  }
  int v14 = (*a1)[(*(int (**)(uint64_t))(*(void *)a2 + 8))(a2)];
  if (!v14)
  {
    if (*(unsigned char *)(a4 + 4))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(&v38, "phone == 0.  Possibly you are trying to get a reversed FST with a non-central \"central position\" P (i.e. asymmetric context), but forgot to initialize the ContextFst object with P as N-1-P (or it could be a simpler problem)");
    }
    else
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(&v38, "phone == 0.  Some mismatch happened, or there is a code error.");
    }
LABEL_41:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v38);
  }
  kaldi::HmmTopology::TopologyForPhone(a3, v14);
  int v15 = kaldi::HmmTopology::NumPdfClasses(a3, v14);
  std::vector<int>::vector(&v37, v15);
  std::vector<int>::pointer begin = v37.__begin_;
  std::vector<int>::pointer end = v37.__end_;
  unint64_t v18 = v37.__end_ - v37.__begin_;
  if ((int)v18 >= 1)
  {
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    do
    {
      if (((*(uint64_t (**)(uint64_t, int **, uint64_t, int *))(*(void *)a2 + 16))(a2, a1, v20, &begin[v19]) & 1) == 0)
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
        if (a1[1] != *a1)
        {
          unint64_t v24 = 0;
          do
          {
            unint64_t v25 = (void *)std::ostream::operator<<();
            LOBYTE(v38) = 32;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)&v38, 1);
            ++v24;
          }
          while (v24 < a1[1] - *a1);
        }
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
        uint64_t v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)"GetHmmAsFst: context-dependency object could not produce ", 57);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"an answer: pdf-class = ", 23);
        uint64_t v27 = (void *)std::ostream::operator<<();
        uint64_t v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" ctx-window = ", 14);
        std::stringbuf::str();
        if ((v35 & 0x80u) == 0) {
          float v29 = v34;
        }
        else {
          float v29 = (void **)v34[0];
        }
        if ((v35 & 0x80u) == 0) {
          uint64_t v30 = v35;
        }
        else {
          uint64_t v30 = (uint64_t)v34[1];
        }
        long long v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v29, v30);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)".  This probably points to either a coding error in some graph-building process, a mismatch of topology with context-dependency object, the wrong FST being passed on a command-line, or something of  that general nature.", 219);
        if ((char)v35 < 0) {
          operator delete(v34[0]);
        }
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v38);
      }
      ++v20;
      std::vector<int>::pointer begin = v37.__begin_;
      std::vector<int>::pointer end = v37.__end_;
      ++v19;
    }
    while (v20 < (int)((unint64_t)((char *)v37.__end_ - (char *)v37.__begin_) >> 2));
    unint64_t v18 = v37.__end_ - v37.__begin_;
  }
  LODWORD(v38) = v14;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  uint64_t v39 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v39, begin, (uint64_t)end, v18);
  if (!a5
    || (uint64_t v21 = std::__hash_table<std::__hash_value_type<std::pair<int,std::vector<int>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> *>,std::__unordered_map_hasher<std::pair<int,std::vector<int>>,std::__hash_value_type<std::pair<int,std::vector<int>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> *>,kaldi::HmmCacheHash,std::equal_to<std::pair<int,std::vector<int>>>,true>,std::__unordered_map_equal<std::pair<int,std::vector<int>>,std::__hash_value_type<std::pair<int,std::vector<int>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> *>,std::equal_to<std::pair<int,std::vector<int>>>,kaldi::HmmCacheHash,true>,std::allocator<std::__hash_value_type<std::pair<int,std::vector<int>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> *>>>::find<std::pair<int,std::vector<int>>>(a5, (uint64_t)&v38)) == 0)
  {
    operator new();
  }
  uint64_t v22 = v21[6];
  if (v39)
  {
    uint64_t v40 = v39;
    operator delete(v39);
  }
  if (v37.__begin_)
  {
    v37.__end_ = v37.__begin_;
    operator delete(v37.__begin_);
  }
  return v22;
}

void sub_1B22BDCF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  std::ostringstream::~ostringstream((uint64_t)va);
  JUMPOUT(0x1B22BDD4CLL);
}

void sub_1B22BDD10()
{
}

void sub_1B22BDD28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55)
{
  if (__p) {
    operator delete(__p);
  }
  if (a54) {
    operator delete(a54);
  }
  if (a50) {
    operator delete(a50);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::Reverse<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(uint64_t a1, uint64_t *a2, char a3)
{
  (*(void (**)(uint64_t *))(*a2 + 224))(a2);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  (*(void (**)(uint64_t *, uint64_t))(*a2 + 280))(a2, v6);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  (*(void (**)(uint64_t *, uint64_t))(*a2 + 288))(a2, v7);
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 1, 0))
  {
    int v8 = fst::CountStates<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1);
    (*(void (**)(uint64_t *, void))(*a2 + 248))(a2, (v8 + 1));
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  uint64_t v50 = 0;
  if (a3)
  {
LABEL_29:
    uint64_t v10 = (*(uint64_t (**)(uint64_t *))(*a2 + 200))(a2);
    int v17 = 1;
    goto LABEL_30;
  }
  LODWORD(v44) = 0;
  (*(void (**)(uint64_t, void ***))(*(void *)a1 + 128))(a1, &p_p);
  uint64_t v10 = 0xFFFFFFFFLL;
  while (1)
  {
    if (p_p)
    {
      char v11 = (*((uint64_t (**)(void **))*p_p + 2))(p_p);
      unint64_t v12 = p_p;
      if (v11) {
        goto LABEL_22;
      }
      if (p_p)
      {
        uint64_t v13 = (*((uint64_t (**)(void))*p_p + 3))();
        goto LABEL_11;
      }
    }
    else if ((int)v44 >= (int)v43)
    {
      goto LABEL_24;
    }
    uint64_t v13 = v44;
LABEL_11:
    float v14 = (*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, v13);
    *(float *)&uint64_t v39 = v14;
    LODWORD(__p) = 2139095040;
    int v15 = 2 * (v10 != -1);
    unsigned int v16 = v10 == -1 ? v13 : -1;
    if (v14 == INFINITY)
    {
      int v15 = 4;
      uint64_t v10 = v10;
    }
    else
    {
      uint64_t v10 = v16;
    }
    if ((v15 | 4) != 4) {
      break;
    }
    if (p_p) {
      (*((void (**)(void **))*p_p + 4))(p_p);
    }
    else {
      LODWORD(v44) = v44 + 1;
    }
  }
  unint64_t v12 = p_p;
LABEL_22:
  if (v12) {
    (*((void (**)(void **))*v12 + 1))(v12);
  }
LABEL_24:
  if (v10 == -1) {
    goto LABEL_29;
  }
  LODWORD(p_p) = (*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, v10);
  LODWORD(v39) = 0;
  if (*(float *)&p_p != 0.0)
  {
    std::string __p = 0;
    unint64_t v48 = 0;
    uint64_t v49 = 0;
    p_p = &__p;
    uint64_t v43 = 0;
    unint64_t v44 = 0;
    uint64_t v45 = &v50;
    fst::DfsVisit<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a1, (uint64_t)&p_p);
  }
  int v17 = 0;
LABEL_30:
  LODWORD(v41) = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v39);
  while (2)
  {
    if (!v39)
    {
      if ((int)v41 >= (int)v40) {
        goto LABEL_80;
      }
      goto LABEL_36;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(void *)v39 + 16))(v39))
    {
      if (v39)
      {
        uint64_t v18 = (*(uint64_t (**)(void))(*(void *)v39 + 24))();
LABEL_37:
        int v19 = v18 + v17;
        while ((*(int (**)(uint64_t *))(*a2 + 160))(a2) <= v19)
          (*(void (**)(uint64_t *))(*a2 + 200))(a2);
        if (v18 == v9) {
          (*(void (**)(uint64_t *, void, double))(*a2 + 184))(a2, (v18 + v17), 0.0);
        }
        v20.n128_f32[0] = (*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, v18);
        LODWORD(p_p) = v20.n128_u32[0];
        LODWORD(__p) = 2139095040;
        v21.n128_u32[0] = v20.n128_u32[0];
        char v22 = v17 ^ 1;
        if (v20.n128_f32[0] == INFINITY) {
          char v22 = 1;
        }
        if ((v22 & 1) == 0)
        {
          p_p = 0;
          LODWORD(v43) = v20.n128_u32[0];
          HIDWORD(v43) = v18 + v17;
          v20.n128_f64[0] = (*(double (**)(uint64_t *, void, void ***))(*a2 + 208))(a2, 0, &p_p);
        }
        unint64_t v46 = 0;
        (*(void (**)(uint64_t, uint64_t, void ***, __n128, __n128))(*(void *)a1 + 136))(a1, v18, &p_p, v20, v21);
LABEL_47:
        if (p_p)
        {
          if ((*((unsigned int (**)(void **))*p_p + 3))(p_p))
          {
            if (p_p)
            {
              (*((void (**)(void))*p_p + 1))();
              goto LABEL_75;
            }
LABEL_73:
            if (v45) {
              --*(_DWORD *)v45;
            }
LABEL_75:
            if (v39) {
              (*(void (**)(uint64_t))(*(void *)v39 + 32))(v39);
            }
            else {
              LODWORD(v41) = v41 + 1;
            }
            continue;
          }
          if (p_p)
          {
            uint64_t v23 = (*((uint64_t (**)(void))*p_p + 4))();
LABEL_53:
            uint64_t v24 = (*(_DWORD *)(v23 + 12) + v17);
            float v25 = *(float *)(v23 + 8);
            if (v24 == v10) {
              char v26 = v17;
            }
            else {
              char v26 = 1;
            }
            if (v26)
            {
              int v27 = *(_DWORD *)(v23 + 8);
            }
            else
            {
              float v28 = (*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, v10);
              int v27 = 2143289344;
              if (v28 != -INFINITY && v25 != -INFINITY)
              {
                int v27 = 2139095040;
                BOOL v29 = v28 == INFINITY || v25 == INFINITY;
                float v30 = v25 + v28;
                if (!v29) {
                  *(float *)&int v27 = v30;
                }
              }
            }
            std::string __p = *(void **)v23;
            unint64_t v48 = __PAIR64__(v19, v27);
            while (1)
            {
              int v31 = (*(uint64_t (**)(uint64_t *))(*a2 + 160))(a2);
              uint64_t v32 = *a2;
              if (v31 > (int)v24) {
                break;
              }
              (*(void (**)(uint64_t *))(v32 + 200))(a2);
            }
            (*(void (**)(uint64_t *, uint64_t, void **))(v32 + 208))(a2, v24, &__p);
            if (p_p) {
              (*((void (**)(void **))*p_p + 5))(p_p);
            }
            else {
              ++v46;
            }
            goto LABEL_47;
          }
        }
        else if (v46 >= v44)
        {
          goto LABEL_73;
        }
        uint64_t v23 = v43 + 16 * v46;
        goto LABEL_53;
      }
LABEL_36:
      uint64_t v18 = v41;
      goto LABEL_37;
    }
    break;
  }
  if (v39) {
    (*(void (**)(void))(*(void *)v39 + 8))();
  }
LABEL_80:
  (*(void (**)(uint64_t *, uint64_t))(*a2 + 176))(a2, v10);
  if (v10 == v9) {
    char v33 = v17;
  }
  else {
    char v33 = 1;
  }
  if ((v33 & 1) == 0)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, v9);
    (*(void (**)(uint64_t *, uint64_t))(*a2 + 184))(a2, v9);
  }
  uint64_t v34 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  unint64_t v35 = v50 | v34;
  uint64_t v36 = (*(uint64_t (**)(uint64_t *, uint64_t, void))(*a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  unint64_t v37 = fst::ReverseProperties(v35, v17);
  return (*(uint64_t (**)(uint64_t *, unint64_t, uint64_t))(*a2 + 192))(a2, v36 | v37, 0x3FFFFFFF0007);
}

void sub_1B22BE958(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::PushInLog<(fst::ReweightType)0>(uint64_t a1)
{
  uint64_t v1 = &unk_1F0A38370;
  uint64_t v2 = a1;
  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst();
}

void sub_1B22BEB38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst((uint64_t *)va);
  _Unwind_Resume(a1);
}

void kaldi::GetHmmAsFstSimple(void *a1, uint64_t a2, kaldi::HmmTopology *a3)
{
  uint64_t v6 = (a1[1] - *a1) >> 2;
  if ((**(unsigned int (***)(uint64_t))a2)(a2) == v6)
  {
    int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 8))(a2);
    kaldi::HmmTopology::TopologyForPhone(a3, *(_DWORD *)(*a1 + 4 * v7));
    operator new();
  }
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Context size mismatch, ilabel-info [from context FST is ", 56);
  int v8 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)", context-dependency object expects ", 36);
  (**(void (***)(uint64_t))a2)(a2);
  std::ostream::operator<<();
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
}

void sub_1B22BF018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::GetHTransducer(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, char **a5, int a6)
{
  unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  memset(v54, 0, sizeof(v54));
  int v55 = 1065353216;
  v52[0] = 0;
  std::vector<fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*,std::allocator<fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*>>::vector(&v53, v12, v52);
  memset(v52, 0, sizeof(v52));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v52, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  a5[1] = *a5;
  uint64_t v14 = *(void *)(a3 + 144);
  uint64_t v13 = *(void *)(a3 + 152);
  uint64_t v15 = *a1;
  std::vector<int>::size_type v16 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  memset(&v51, 0, sizeof(v51));
  if ((a6 & 0x80000000) == 0)
  {
    __x[0] = 0;
    std::vector<int>::resize(&v51, v16, __x);
    uint64_t v15 = *a1;
    std::vector<int>::size_type v16 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  }
  if ((int)v16 >= 2)
  {
    unint64_t v17 = (unint64_t)(v13 - v14) >> 2;
    uint64_t v44 = (uint64_t)(a5 + 2);
    uint64_t v18 = 1;
    do
    {
      uint64_t v19 = v15 + 24 * v18;
      if (*(void *)(v19 + 8) - *(void *)v19 == 4 && **(int **)v19 <= 0)
      {
        char v26 = a5[1];
        unint64_t v25 = (unint64_t)a5[2];
        if ((unint64_t)v26 >= v25)
        {
          uint64_t v34 = *a5;
          uint64_t v35 = (v26 - *a5) >> 2;
          unint64_t v36 = v35 + 1;
          if ((unint64_t)(v35 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v37 = v25 - (void)v34;
          if (v37 >> 1 > v36) {
            unint64_t v36 = v37 >> 1;
          }
          if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v38 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v38 = v36;
          }
          if (v38)
          {
            uint64_t v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v44, v38);
            uint64_t v34 = *a5;
            char v26 = a5[1];
          }
          else
          {
            uint64_t v39 = 0;
          }
          uint64_t v42 = &v39[4 * v35];
          *(_DWORD *)uint64_t v42 = v17;
          int v27 = v42 + 4;
          while (v26 != v34)
          {
            int v43 = *((_DWORD *)v26 - 1);
            v26 -= 4;
            *((_DWORD *)v42 - 1) = v43;
            v42 -= 4;
          }
          *a5 = v42;
          a5[1] = v27;
          a5[2] = &v39[4 * v38];
          if (v34) {
            operator delete(v34);
          }
        }
        else
        {
          *(_DWORD *)char v26 = v17;
          int v27 = v26 + 4;
        }
        a5[1] = v27;
        operator new();
      }
      *(void *)std::vector<int>::value_type __x = 0;
      uint64_t v49 = 0;
      uint64_t v50 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__x, *(const void **)v19, *(void *)(v19 + 8), (uint64_t)(*(void *)(v19 + 8) - *(void *)v19) >> 2);
      std::string __p = 0;
      unint64_t v46 = 0;
      uint64_t v47 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)__x, (uint64_t)v49, ((uint64_t)v49 - *(void *)__x) >> 2);
      uint64_t HmmAsFst = kaldi::GetHmmAsFst((int **)&__p, a2, (kaldi::HmmTopology *)a3, a4, v54);
      if (__p)
      {
        unint64_t v46 = __p;
        operator delete(__p);
      }
      if ((a6 & 0x80000000) == 0)
      {
        int v21 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 8))(a2);
        if (*(_DWORD *)(*(void *)__x + 4 * v21) >= a6)
        {
          v51.__begin_[v18] = v17;
          uint64_t v23 = a5[1];
          unint64_t v22 = (unint64_t)a5[2];
          if ((unint64_t)v23 >= v22)
          {
            float v28 = *a5;
            uint64_t v29 = (v23 - *a5) >> 2;
            unint64_t v30 = v29 + 1;
            if ((unint64_t)(v29 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v31 = v22 - (void)v28;
            if (v31 >> 1 > v30) {
              unint64_t v30 = v31 >> 1;
            }
            if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v32 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v32 = v30;
            }
            if (v32)
            {
              char v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v44, v32);
              float v28 = *a5;
              uint64_t v23 = a5[1];
            }
            else
            {
              char v33 = 0;
            }
            uint64_t v40 = &v33[4 * v29];
            *(_DWORD *)uint64_t v40 = v17;
            uint64_t v24 = v40 + 4;
            while (v23 != v28)
            {
              int v41 = *((_DWORD *)v23 - 1);
              v23 -= 4;
              *((_DWORD *)v40 - 1) = v41;
              v40 -= 4;
            }
            *a5 = v40;
            a5[1] = v24;
            a5[2] = &v33[4 * v32];
            if (v28) {
              operator delete(v28);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v23 = v17;
            uint64_t v24 = v23 + 4;
          }
          a5[1] = v24;
          LODWORD(v17) = v17 + 1;
        }
      }
      *((void *)v53 + v18) = HmmAsFst;
      if (*(void *)__x)
      {
        uint64_t v49 = *(const void **)__x;
        operator delete(*(void **)__x);
      }
      ++v18;
      uint64_t v15 = *a1;
    }
    while (v18 < (int)(-1431655765 * ((unint64_t)(a1[1] - *a1) >> 3)));
  }
  fst::MakeLoopFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>();
}

void sub_1B22BF63C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,char a25)
{
  if (__p) {
    operator delete(__p);
  }
  if (a19) {
    operator delete(a19);
  }
  if (a22) {
    operator delete(a22);
  }
  std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::~__hash_table((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void fst::MakeLoopFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>()
{
}

void sub_1B22BFDEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
}

void kaldi::AddSelfLoops(kaldi::TransitionModel *a1, int *a2, int a3, void *a4, float a5)
{
  (*(void (**)(void *))(*a4 + 24))(a4);
  if (a3)
  {
    *(void *)std::vector<unsigned int>::pointer v59 = a1;
    *(void *)&v59[2] = a2;
    fst::MakePrecedingInputSymbolsSameClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,kaldi::TidToTstateMapper>(1, (uint64_t)a4, (kaldi::TransitionModel **)v59);
    std::vector<int>::value_type __x = -1;
    int v10 = (*(uint64_t (**)(void *))(*a4 + 160))(a4);
    std::vector<int>::vector(&v57, v10, &__x);
    unint64_t v11 = *(void *)(a4[1] + 72) - *(void *)(a4[1] + 64);
    if ((int)(v11 >> 3) >= 1)
    {
      uint64_t v12 = 0;
      uint64_t v13 = (v11 >> 3);
      do
      {
        *(void *)&long long v60 = &unk_1F0A3E910;
        unint64_t v62 = 0;
        fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck((uint64_t)a4);
        uint64_t v14 = a4[1];
        uint64_t v15 = *(void *)(*(void *)(v14 + 64) + 8 * v12);
        *((void *)&v60 + 1) = v15;
        uint64_t v61 = v14 + 8;
        for (unint64_t i = v62; ; unint64_t i = ++v62)
        {
          uint64_t v18 = v15 + 24;
          uint64_t v17 = *(void *)(v15 + 24);
          if (i >= (*(void *)(v18 + 8) - v17) >> 4) {
            break;
          }
          uint64_t v19 = (int *)(v17 + 16 * i);
          uint64_t v20 = v19[3];
          int v21 = kaldi::TidToTstateMapper::operator()((kaldi::TransitionModel **)v59, *v19);
          if (v57.__begin_[v20] == __x) {
            v57.__begin_[v20] = v21;
          }
          uint64_t v15 = *((void *)&v60 + 1);
        }
        ++v12;
      }
      while (v12 != v13);
    }
    int v22 = (*(uint64_t (**)(void *))(*a4 + 24))(a4);
    std::vector<int>::pointer begin = v57.__begin_;
    if (v57.__begin_[v22] != -1)
    {
      (*(void (**)(void *))(*a4 + 24))(a4);
      std::vector<int>::pointer begin = v57.__begin_;
    }
    if ((int)((unint64_t)((char *)v57.__end_ - (char *)begin) >> 2) < 1) {
      goto LABEL_44;
    }
    uint64_t v24 = 0;
    do
    {
      int v25 = begin[v24];
      if (v25 >= 1)
      {
        float NonSelfLoopLogProb = kaldi::TransitionModel::GetNonSelfLoopLogProb(a1, v25);
        float v27 = (*(float (**)(void *, uint64_t))(*a4 + 32))(a4, v24);
        float v28 = -(float)(NonSelfLoopLogProb * a5);
        v29.n128_u32[0] = 2143289344;
        if (v27 != -INFINITY && v28 != -INFINITY)
        {
          v29.n128_u32[0] = 2139095040;
          BOOL v30 = v27 == INFINITY || v28 == INFINITY;
          float v31 = v28 + v27;
          if (!v30) {
            v29.n128_f32[0] = v31;
          }
        }
        (*(void (**)(void *, uint64_t, __n128))(*a4 + 184))(a4, v24, v29);
        (*(void (**)(void *, uint64_t, uint64_t *))(*a4 + 296))(a4, v24, &v56);
        while (!(*(unsigned int (**)(uint64_t))(*(void *)v56 + 24))(v56))
        {
          long long v60 = *(_OWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v56 + 32))(v56);
          float v32 = INFINITY;
          if (*((float *)&v60 + 2) != INFINITY && v28 != INFINITY) {
            float v32 = v28 + *((float *)&v60 + 2);
          }
          BOOL v35 = v28 == -INFINITY || *((float *)&v60 + 2) == -INFINITY;
          float v36 = NAN;
          if (!v35) {
            float v36 = v32;
          }
          *((float *)&v60 + 2) = v36;
          (*(void (**)(uint64_t, long long *))(*(void *)v56 + 88))(v56, &v60);
          (*(void (**)(uint64_t))(*(void *)v56 + 40))(v56);
        }
        if (v56) {
          (*(void (**)(uint64_t))(*(void *)v56 + 8))(v56);
        }
        unsigned int v37 = kaldi::TransitionModel::SelfLoopOf(a1, v25);
        if (v37)
        {
          float TransitionLogProb = kaldi::TransitionModel::GetTransitionLogProb(a1, v37);
          *(void *)&long long v60 = v37;
          *((float *)&v60 + 2) = -(float)(TransitionLogProb * a5);
          HIDWORD(v60) = v24;
          (*(void (**)(void *, uint64_t, long long *))(*a4 + 208))(a4, v24, &v60);
        }
      }
      ++v24;
      std::vector<int>::pointer begin = v57.__begin_;
    }
    while (v24 < (int)((unint64_t)((char *)v57.__end_ - (char *)v57.__begin_) >> 2));
    if (v57.__begin_)
    {
LABEL_44:
      v57.__end_ = begin;
      operator delete(begin);
    }
  }
  else
  {
    v57.__begin_ = (std::vector<int>::pointer)a1;
    v57.__end_ = a2;
    fst::MakeFollowingInputSymbolsSameClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,kaldi::TidToTstateMapper>(1, (uint64_t)a4, (kaldi::TransitionModel **)&v57);
    int v39 = (*(uint64_t (**)(void *))(*a4 + 160))(a4);
    if (v39 >= 1)
    {
      uint64_t v40 = 0;
      uint64_t v41 = v39;
      do
      {
        *(void *)&long long v60 = &unk_1F0A3E910;
        unint64_t v62 = 0;
        fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck((uint64_t)a4);
        uint64_t v42 = a4[1];
        *((void *)&v60 + 1) = *(void *)(*(void *)(v42 + 64) + 8 * v40);
        uint64_t v61 = v42 + 8;
        unint64_t v43 = v62;
        uint64_t v44 = *(void *)(*((void *)&v60 + 1) + 24);
        uint64_t v45 = *(void *)(*((void *)&v60 + 1) + 32) - v44;
        int v46 = -1;
        while (v43 < v45 >> 4)
        {
          *(_OWORD *)std::vector<unsigned int>::pointer v59 = *(_OWORD *)(v44 + 16 * v43);
          int v47 = kaldi::TidToTstateMapper::operator()((kaldi::TransitionModel **)&v57, v59[0]);
          if (v46 == -1) {
            int v46 = v47;
          }
          if (v46 >= 1)
          {
            float v48 = kaldi::TransitionModel::GetNonSelfLoopLogProb(a1, v46);
            float v49 = NAN;
            if (*(float *)&v59[2] != -INFINITY)
            {
              float v50 = -(float)(v48 * a5);
              if (v50 != -INFINITY)
              {
                float v49 = INFINITY;
                BOOL v51 = v50 == INFINITY || *(float *)&v59[2] == INFINITY;
                float v52 = *(float *)&v59[2] + v50;
                if (!v51) {
                  float v49 = v52;
                }
              }
            }
            *(float *)&v59[2] = v49;
            fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::SetValue((uint64_t)&v60, (__n128 *)v59);
          }
          unint64_t v43 = ++v62;
          uint64_t v44 = *(void *)(*((void *)&v60 + 1) + 24);
          uint64_t v45 = *(void *)(*((void *)&v60 + 1) + 32) - v44;
        }
        LODWORD(v60) = (*(float (**)(void *, uint64_t))(*a4 + 32))(a4, v40);
        v59[0] = 2139095040;
        if (*(float *)&v60 == INFINITY && (v46 - 1) <= 0xFFFFFFFD)
        {
          int v53 = kaldi::TransitionModel::SelfLoopOf(a1, v46);
          if (v53)
          {
            unsigned int v54 = v53;
            float v55 = kaldi::TransitionModel::GetTransitionLogProb(a1, v53);
            *(void *)&long long v60 = v54;
            *((float *)&v60 + 2) = -(float)(v55 * a5);
            HIDWORD(v60) = v40;
            (*(void (**)(void *, uint64_t, long long *))(*a4 + 208))(a4, v40, &v60);
          }
        }
        ++v40;
      }
      while (v40 != v41);
    }
  }
}

void sub_1B22C0584(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::SplitToPhones(kaldi::TransitionModel *a1, uint64_t a2, uint64_t *a3)
{
  std::vector<std::vector<int>>::__clear[abi:ne180100](a3);
  int IsReordered = kaldi::IsReordered(a1, (int **)a2);
  int v7 = *(int **)a2;
  if (*(void *)a2 == *(void *)(a2 + 8))
  {
    char v68 = 1;
    return v68 & 1;
  }
  int v8 = IsReordered;
  unint64_t v9 = 0;
  std::string __p = 0;
  BOOL v75 = 0;
  float v76 = 0;
  char v70 = 1;
  do
  {
    unint64_t v10 = v9 + 1;
    if (kaldi::TransitionModel::IsFinal(a1, v7[v9]))
    {
      if (!v8)
      {
        std::vector<int>::size_type v16 = v75;
        if (v75 >= (unint64_t *)v76)
        {
          __n128 v29 = (unint64_t *)__p;
          uint64_t v30 = ((char *)v75 - (unsigned char *)__p) >> 3;
          unint64_t v31 = v30 + 1;
          if ((unint64_t)(v30 + 1) >> 61) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v32 = v76 - (unsigned char *)__p;
          if ((v76 - (unsigned char *)__p) >> 2 > v31) {
            unint64_t v31 = v32 >> 2;
          }
          if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v33 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v33 = v31;
          }
          if (v33)
          {
            uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v76, v33);
            __n128 v29 = (unint64_t *)__p;
            std::vector<int>::size_type v16 = v75;
          }
          else
          {
            uint64_t v34 = 0;
          }
          uint64_t v45 = (unint64_t *)&v34[8 * v30];
          unint64_t *v45 = v10;
          uint64_t v15 = v45 + 1;
          while (v16 != v29)
          {
            unint64_t v46 = *--v16;
            *--uint64_t v45 = v46;
          }
          std::string __p = v45;
          BOOL v75 = v15;
          float v76 = &v34[8 * v33];
          if (v29) {
            operator delete(v29);
          }
        }
        else
        {
          unint64_t *v75 = v10;
          uint64_t v15 = v16 + 1;
        }
        goto LABEL_77;
      }
      unint64_t v11 = *(int **)a2;
      if (v10 < (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2)
      {
        while (kaldi::TransitionModel::IsSelfLoop(a1, v11[v9 + 1]))
        {
          kaldi::TransitionModel::TransitionIdToTransitionState(a1, *(_DWORD *)(*(void *)a2 + 4 * v9));
          kaldi::TransitionModel::TransitionIdToTransitionState(a1, *(_DWORD *)(*(void *)a2 + 4 * v9 + 4));
          unint64_t v11 = *(int **)a2;
          unint64_t v12 = v9 + 1;
          BOOL v13 = v9 + 2 >= (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2;
          ++v9;
          if (v13)
          {
            unint64_t v10 = v12 + 1;
            unint64_t v9 = v12;
            goto LABEL_43;
          }
        }
        unint64_t v10 = v9 + 1;
      }
LABEL_43:
      BOOL v35 = v75;
      if (v75 >= (unint64_t *)v76)
      {
        unsigned int v37 = (unint64_t *)__p;
        uint64_t v38 = ((char *)v75 - (unsigned char *)__p) >> 3;
        unint64_t v39 = v38 + 1;
        if ((unint64_t)(v38 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v40 = v76 - (unsigned char *)__p;
        if ((v76 - (unsigned char *)__p) >> 2 > v39) {
          unint64_t v39 = v40 >> 2;
        }
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v41 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v41 = v39;
        }
        if (v41)
        {
          uint64_t v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v76, v41);
          unsigned int v37 = (unint64_t *)__p;
          BOOL v35 = v75;
        }
        else
        {
          uint64_t v42 = 0;
        }
        int v47 = (unint64_t *)&v42[8 * v38];
        *int v47 = v10;
        float v36 = v47 + 1;
        while (v35 != v37)
        {
          unint64_t v48 = *--v35;
          *--int v47 = v48;
        }
        std::string __p = v47;
        BOOL v75 = v36;
        float v76 = &v42[8 * v41];
        if (v37) {
          operator delete(v37);
        }
      }
      else
      {
        unint64_t *v75 = v10;
        float v36 = v35 + 1;
      }
      BOOL v75 = v36;
      unint64_t v10 = v9 + 1;
    }
    else
    {
      if (v10 == (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2)
      {
        uint64_t v14 = v75;
        if (v75 >= (unint64_t *)v76)
        {
          uint64_t v20 = (unint64_t *)__p;
          uint64_t v26 = ((char *)v75 - (unsigned char *)__p) >> 3;
          unint64_t v27 = v26 + 1;
          if ((unint64_t)(v26 + 1) >> 61) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v28 = v76 - (unsigned char *)__p;
          if ((v76 - (unsigned char *)__p) >> 2 > v27) {
            unint64_t v27 = v28 >> 2;
          }
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v24 = v27;
          }
          if (v24)
          {
            int v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v76, v24);
            uint64_t v20 = (unint64_t *)__p;
            uint64_t v14 = v75;
          }
          else
          {
            int v25 = 0;
          }
          unint64_t v43 = (unint64_t *)&v25[8 * v26];
          *unint64_t v43 = v10;
          uint64_t v15 = v43 + 1;
          while (v14 != v20)
          {
            unint64_t v44 = *--v14;
            *--unint64_t v43 = v44;
          }
          goto LABEL_74;
        }
        goto LABEL_12;
      }
      int v17 = kaldi::TransitionModel::TransitionIdToTransitionState(a1, *(_DWORD *)(*(void *)a2 + 4 * v9));
      int v18 = kaldi::TransitionModel::TransitionIdToTransitionState(a1, *(_DWORD *)(*(void *)a2 + 4 * v10));
      if (v17 != v18)
      {
        int v19 = kaldi::TransitionModel::TransitionStateToPhone(a1, v17);
        if (v19 != kaldi::TransitionModel::TransitionStateToPhone(a1, v18))
        {
          uint64_t v14 = v75;
          if (v75 >= (unint64_t *)v76)
          {
            uint64_t v20 = (unint64_t *)__p;
            uint64_t v21 = ((char *)v75 - (unsigned char *)__p) >> 3;
            unint64_t v22 = v21 + 1;
            if ((unint64_t)(v21 + 1) >> 61) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v23 = v76 - (unsigned char *)__p;
            if ((v76 - (unsigned char *)__p) >> 2 > v22) {
              unint64_t v22 = v23 >> 2;
            }
            if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v24 = v22;
            }
            if (v24)
            {
              int v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v76, v24);
              uint64_t v20 = (unint64_t *)__p;
              uint64_t v14 = v75;
            }
            else
            {
              int v25 = 0;
            }
            unint64_t v43 = (unint64_t *)&v25[8 * v21];
            *unint64_t v43 = v10;
            uint64_t v15 = v43 + 1;
            while (v14 != v20)
            {
              unint64_t v49 = *--v14;
              *--unint64_t v43 = v49;
            }
LABEL_74:
            std::string __p = v43;
            BOOL v75 = v15;
            float v76 = &v25[8 * v24];
            if (v20) {
              operator delete(v20);
            }
LABEL_76:
            char v70 = 0;
LABEL_77:
            BOOL v75 = v15;
            goto LABEL_78;
          }
LABEL_12:
          *uint64_t v14 = v10;
          uint64_t v15 = v14 + 1;
          goto LABEL_76;
        }
      }
    }
LABEL_78:
    int v7 = *(int **)a2;
    unint64_t v9 = v10;
  }
  while (v10 < (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  float v50 = (unint64_t *)__p;
  if (v75 == __p)
  {
    if (__p) {
      goto LABEL_107;
    }
  }
  else
  {
    unint64_t v51 = 0;
    unint64_t v52 = 0;
    do
    {
      uint64_t v71 = 0;
      float v72 = 0;
      uint64_t v73 = 0;
      std::vector<std::vector<int>>::push_back[abi:ne180100](a3, (uint64_t)&v71);
      if (v71)
      {
        float v72 = v71;
        operator delete(v71);
      }
      int v53 = kaldi::TransitionModel::TransitionIdToTransitionState(a1, *(_DWORD *)(*(void *)a2 + 4 * v52));
      int v54 = kaldi::TransitionModel::TransitionStateToPhone(a1, v53);
      if (**(_DWORD **)kaldi::HmmTopology::TopologyForPhone(a1, v54) != -1) {
        v70 &= kaldi::TransitionModel::TransitionStateToHmmState(a1, v53) == 0;
      }
      while (1)
      {
        float v50 = (unint64_t *)__p;
        if (v52 >= *((void *)__p + v51)) {
          break;
        }
        uint64_t v55 = a3[1];
        uint64_t v56 = *(int **)a2;
        std::vector<int> v57 = *(char **)(v55 - 16);
        unint64_t v58 = *(void *)(v55 - 8);
        if ((unint64_t)v57 >= v58)
        {
          long long v60 = *(char **)(v55 - 24);
          uint64_t v61 = (v57 - v60) >> 2;
          if ((unint64_t)(v61 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v62 = v58 - (void)v60;
          unint64_t v63 = (uint64_t)(v58 - (void)v60) >> 1;
          if (v63 <= v61 + 1) {
            unint64_t v63 = v61 + 1;
          }
          if (v62 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v64 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v64 = v63;
          }
          if (v64)
          {
            BOOL v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v55 - 8, v64);
            long long v60 = *(char **)(v55 - 24);
            std::vector<int> v57 = *(char **)(v55 - 16);
          }
          else
          {
            BOOL v65 = 0;
          }
          int v66 = &v65[4 * v61];
          *(_DWORD *)int v66 = v56[v52];
          std::vector<unsigned int>::pointer v59 = v66 + 4;
          while (v57 != v60)
          {
            int v67 = *((_DWORD *)v57 - 1);
            v57 -= 4;
            *((_DWORD *)v66 - 1) = v67;
            v66 -= 4;
          }
          *(void *)(v55 - ++*(_DWORD *)(result + 24) = v66;
          *(void *)(v55 - 16) = v59;
          *(void *)(v55 - 8) = &v65[4 * v64];
          if (v60) {
            operator delete(v60);
          }
        }
        else
        {
          *(_DWORD *)std::vector<int> v57 = v56[v52];
          std::vector<unsigned int>::pointer v59 = v57 + 4;
        }
        *(void *)(v55 - 16) = v59;
        ++v52;
      }
      unint64_t v52 = *((void *)__p + v51++);
    }
    while (v51 < ((char *)v75 - (unsigned char *)__p) >> 3);
LABEL_107:
    BOOL v75 = v50;
    operator delete(v50);
  }
  char v68 = v70;
  return v68 & 1;
}

void sub_1B22C0BCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::IsReordered(kaldi::TransitionModel *this, int **a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  if ((unint64_t)((char *)v5 - (char *)*a2) >= 5)
  {
    uint64_t v6 = 0;
    do
    {
      int v7 = kaldi::TransitionModel::TransitionIdToTransitionState(this, v4[v6]);
      if (v7 != kaldi::TransitionModel::TransitionIdToTransitionState(this, (*a2)[v6 + 1]))
      {
        BOOL IsSelfLoop = kaldi::TransitionModel::IsSelfLoop(this, (*a2)[v6]);
        BOOL v9 = kaldi::TransitionModel::IsSelfLoop(this, (*a2)[v6 + 1]);
        if (IsSelfLoop) {
          return 1;
        }
        if (v9) {
          return 0;
        }
      }
      ++v6;
      uint64_t v4 = *a2;
      unint64_t v5 = a2[1];
    }
    while (v6 + 1 < (unint64_t)(v5 - *a2));
  }
  if (v4 == v5) {
    return 0;
  }
  int v10 = kaldi::TransitionModel::IsSelfLoop(this, *v4);
  return kaldi::TransitionModel::IsSelfLoop(this, *(a2[1] - 1)) & ~v10;
}

uint64_t kaldi::ConvertAlignment(kaldi::TransitionModel *a1, kaldi::HmmTopology *a2, uint64_t a3, void *a4, uint64_t *a5, std::vector<unsigned int> *this, int a7, int a8, char a9)
{
  if (a7 == 1 || (a9 & 1) == 0)
  {
    return kaldi::ConvertAlignmentInternal(a1, a2, a3, (uint64_t)a4, a7 - 1, a7, a5, this);
  }
  else
  {
    std::vector<std::vector<int>>::vector(v38, a7);
    if (a7 < 1)
    {
LABEL_8:
      this->__end_ = this->__begin_;
      std::vector<int>::reserve(this, (uint64_t)(a4[1] - *a4) >> 2);
      unint64_t v19 = (uint64_t)(a4[1] - *a4) >> 2;
      unint64_t v20 = v19 % a7 + v19 / a7;
      if ((int)v20 >= 1)
      {
        uint64_t v21 = 0;
        uint64_t v37 = (int)v20;
        do
        {
          uint64_t v22 = (a7 - 1);
          if (a7 >= 1)
          {
            do
            {
              uint64_t v23 = (uint64_t *)(v38[0] + 24 * v22);
              uint64_t v24 = *v23;
              if (v21 < (int)((unint64_t)(v23[1] - *v23) >> 2))
              {
                std::vector<unsigned int>::pointer end = this->__end_;
                value = this->__end_cap_.__value_;
                if (end >= value)
                {
                  std::vector<unsigned int>::pointer begin = this->__begin_;
                  uint64_t v29 = end - this->__begin_;
                  unint64_t v30 = v29 + 1;
                  if ((unint64_t)(v29 + 1) >> 62) {
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v31 = (char *)value - (char *)begin;
                  if (v31 >> 1 > v30) {
                    unint64_t v30 = v31 >> 1;
                  }
                  if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v32 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v32 = v30;
                  }
                  if (v32)
                  {
                    unint64_t v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&this->__end_cap_, v32);
                    std::vector<unsigned int>::pointer begin = this->__begin_;
                    std::vector<unsigned int>::pointer end = this->__end_;
                  }
                  else
                  {
                    unint64_t v33 = 0;
                  }
                  uint64_t v34 = (unsigned int *)&v33[4 * v29];
                  *uint64_t v34 = *(_DWORD *)(v24 + 4 * v21);
                  unint64_t v27 = v34 + 1;
                  while (end != begin)
                  {
                    unsigned int v35 = *--end;
                    *--uint64_t v34 = v35;
                  }
                  this->__begin_ = v34;
                  this->__end_ = v27;
                  this->__end_cap_.__value_ = (unsigned int *)&v33[4 * v32];
                  if (begin) {
                    operator delete(begin);
                  }
                }
                else
                {
                  *std::vector<unsigned int>::pointer end = *(_DWORD *)(v24 + 4 * v21);
                  unint64_t v27 = end + 1;
                }
                this->__end_ = v27;
              }
              BOOL v18 = v22-- <= 0;
            }
            while (!v18);
          }
          ++v21;
        }
        while (v21 < v37);
      }
      unint64_t v39 = (void **)v38;
      std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v39);
      return 1;
    }
    else
    {
      uint64_t v16 = (a7 - 1);
      uint64_t v17 = 24 * v16;
      while ((kaldi::ConvertAlignmentInternal(a1, a2, a3, (uint64_t)a4, v16, a7, a5, (std::vector<unsigned int> *)(v38[0] + v17)) & 1) != 0)
      {
        v17 -= 24;
        BOOL v18 = v16-- < 1;
        if (v18) {
          goto LABEL_8;
        }
      }
      unint64_t v39 = (void **)v38;
      std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v39);
      return 0;
    }
  }
}

void sub_1B22C0FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a11;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

uint64_t kaldi::ConvertAlignmentInternal(kaldi::TransitionModel *a1, kaldi::HmmTopology *a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t *a7, std::vector<unsigned int> *this)
{
  this->__end_ = this->__begin_;
  std::vector<int>::reserve(this, (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
  uint64_t v123 = 0;
  uint64_t v124 = 0;
  uint64_t v125 = 0;
  if ((kaldi::SplitToPhones(a1, a4, &v123) & 1) == 0)
  {
    uint64_t v28 = 0;
    goto LABEL_107;
  }
  uint64_t v15 = (v124 - v123) >> 3;
  unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * v15;
  std::vector<int>::size_type __n = -1431655765 * (int)v15;
  uint64_t v117 = a3;
  std::vector<int>::vector(&v122, __n);
  if (v16 << 32)
  {
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = __n <= 1 ? 1 : __n;
    do
    {
      int v20 = kaldi::TransitionModel::TransitionIdToPhone(a1, **(_DWORD **)(v123 + v17));
      v122.__begin_[v18++] = v20;
      v17 += 24;
    }
    while (v19 != v18);
    if (a7)
    {
      uint64_t v21 = 0;
      uint64_t v22 = *a7;
      unint64_t v23 = (unint64_t)(a7[1] - *a7) >> 2;
      std::vector<int>::pointer begin = v122.__begin_;
      do
      {
        uint64_t v25 = begin[v21];
        if ((v25 & 0x80000000) != 0 || (int)v25 >= (int)v23 || (int v26 = *(_DWORD *)(v22 + 4 * v25), v26 == -1))
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v128);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v128, (uint64_t)"ConvertAlignment: could not map phone ", 38);
          std::ostream::operator<<();
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v128);
        }
        begin[v21++] = v26;
      }
      while (v19 != v21);
    }
  }
  kaldi::IsReordered(a1, (int **)a4);
  std::vector<std::vector<int>>::vector(v121, __n);
  if (a6 == 1 && kaldi::HmmTopology::operator==((uint64_t)a1, (uint64_t)a2))
  {
    if ((int)v16 >= 1)
    {
      uint64_t v27 = 0;
      do
      {
        std::vector<int>::resize((std::vector<unsigned int> *)(v121[0] + v27), (uint64_t)(*(void *)(v123 + v27 + 8) - *(void *)(v123 + v27)) >> 2);
        v27 += 24;
      }
      while (24 * v16 != v27);
    }
    goto LABEL_68;
  }
  std::vector<int>::vector(&v129, __n);
  memset(&v130, 0, sizeof(v130));
  std::vector<int>::pointer v29 = v129.__begin_;
  if ((int)v16 >= 1)
  {
    uint64_t v30 = v16;
    uint64_t v31 = (void *)(v123 + 8);
    std::vector<int>::pointer v32 = v129.__begin_;
    do
    {
      *v32++ = (*v31 - *(v31 - 1)) >> 2;
      v31 += 3;
      --v30;
    }
    while (v30);
  }
  unint64_t v33 = (char *)v129.__end_ - (char *)v29;
  int64_t v34 = (int)(v129.__end_ - v29);
  std::vector<int>::vector(&v128, v34);
  std::vector<int>::resize(&v130, v34);
  unint64_t v35 = v33 >> 2;
  uint64_t v36 = (v33 >> 2);
  if ((int)(v33 >> 2) >= 1)
  {
    uint64_t v37 = 0;
    do
    {
      int v38 = kaldi::HmmTopology::MinLength(a2, v122.__begin_[v37]);
      v128.__begin_[v37++] = v38;
    }
    while (v36 != v37);
    int v39 = 0;
    std::vector<int>::pointer v40 = v129.__begin_;
    std::vector<unsigned int>::pointer v41 = v130.__begin_;
    uint64_t v42 = v36;
    do
    {
      int v43 = (v39 + a5) / a6;
      int v44 = *v40++;
      v39 += v44;
      *v41++ = (v39 + a5) / a6 - v43;
      --v42;
    }
    while (v42);
  }
  uint64_t v45 = v128.__begin_;
  char v46 = 1;
  std::vector<unsigned int>::pointer v47 = v130.__begin_;
  do
  {
    char v48 = v46;
    if ((v46 & 1) == 0) {
      break;
    }
    if ((int)v35 < 1)
    {
      BOOL v52 = 0;
      char v50 = 0;
      goto LABEL_53;
    }
    int64_t v49 = 0;
    char v50 = 0;
    uint64_t v51 = 1;
    BOOL v52 = 1;
    while (1)
    {
      int v53 = v47[v49];
      if (v53 < v45[v49]) {
        break;
      }
      ++v49;
LABEL_49:
      BOOL v52 = v49 < v34;
      ++v51;
      if (v49 == v36) {
        goto LABEL_53;
      }
    }
    if (v49)
    {
      int v54 = 0;
      int64_t v55 = v49;
      while (1)
      {
        int64_t v56 = v55 - 1;
        int v57 = v47[(v55 - 1)];
        if (v57 > v45[(v55 - 1)]) {
          break;
        }
        v54 += v57;
        --v55;
        if (v56 + 1 < 2) {
          goto LABEL_37;
        }
      }
      int v58 = v55 - 1;
    }
    else
    {
LABEL_37:
      int v58 = -1;
      int v54 = 0x7FFFFFFF;
    }
    if (v49 + 1 < v34)
    {
      int v59 = 0;
      uint64_t v60 = v51;
      while (1)
      {
        int v61 = v47[v60];
        if (v61 > v45[v60]) {
          break;
        }
        v59 += v61;
        if (v36 == ++v60) {
          goto LABEL_47;
        }
      }
      if (v59 < v54) {
        int v58 = v60;
      }
    }
LABEL_47:
    if (v58 != -1)
    {
      v47[v49] = v53 + 1;
      --v47[v58];
      char v50 = 1;
      ++v49;
      goto LABEL_49;
    }
    char v50 = 1;
LABEL_53:
    char v46 = v50;
  }
  while (!v52);
  if (v45)
  {
    v128.__end_ = v45;
    operator delete(v45);
  }
  if (v48)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v128);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v128, (uint64_t)"Failed to produce suitable phone lengths", 40);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v128);
    }
  }
  else if ((int)v16 >= 1)
  {
    uint64_t v62 = 0;
    do
    {
      std::vector<int>::resize((std::vector<unsigned int> *)(v121[0] + 24 * v62), (int)v130.__begin_[v62]);
      ++v62;
    }
    while (v62 != v16);
  }
  if (v130.__begin_)
  {
    v130.__end_ = v130.__begin_;
    operator delete(v130.__begin_);
  }
  if (v129.__begin_)
  {
    v129.__end_ = v129.__begin_;
    operator delete(v129.__begin_);
  }
  if (v48)
  {
    uint64_t v28 = 0;
    goto LABEL_105;
  }
LABEL_68:
  int v63 = (**(uint64_t (***)(uint64_t))v117)(v117);
  int v64 = (*(uint64_t (**)(uint64_t))(*(void *)v117 + 8))(v117);
  int v65 = v63 + v16;
  if (v63 + (int)v16 > -v63)
  {
    std::vector<int>::size_type v111 = v63;
    uint64_t v66 = -v63;
    uint64_t v67 = v64;
    uint64_t v68 = v63;
    uint64_t v69 = -4 * v63;
    v118 = a2;
    int v108 = v63;
    uint64_t v109 = v64;
    int v110 = v65;
    uint64_t v107 = v63;
    do
    {
      uint64_t v70 = v66 + v67;
      if (__n > v66 + v67)
      {
        LODWORD(v128.__begin_) = 0;
        std::vector<int>::vector(&v120, v111, (const std::vector<int>::value_type *)&v128);
        uint64_t v71 = v123;
        if (v63 >= 1)
        {
          uint64_t v72 = 0;
          unint64_t v73 = 0xAAAAAAAAAAAAAAABLL * ((v124 - v123) >> 3);
          std::vector<int>::pointer v74 = v120.__begin_;
          BOOL v75 = (char *)v122.__begin_ + v69;
          do
          {
            if (v73 > v66 + v72) {
              v74[v72] = *(_DWORD *)&v75[4 * v72];
            }
            ++v72;
          }
          while (v68 != v72);
        }
        uint64_t v76 = v71 + 24 * v70;
        uint64_t v114 = *(void *)(v76 + 8);
        uint64_t v115 = v69;
        uint64_t v77 = v121[0];
        float v113 = *(int **)v76;
        int v78 = (*(uint64_t (**)(uint64_t))(*(void *)v117 + 8))(v117);
        int v79 = kaldi::TransitionModel::TransitionIdToPhone(a1, **(_DWORD **)v76);
        int v119 = v120.__begin_[v78];
        BOOL v80 = (uint64_t *)kaldi::HmmTopology::TopologyForPhone(a1, v79);
        uint64_t v81 = (uint64_t *)kaldi::HmmTopology::TopologyForPhone(v118, v119);
        uint64_t v82 = *v80;
        uint64_t v83 = v80[1];
        uint64_t v84 = v83 - *v80;
        uint64_t v85 = *v81;
        if (v84 == v81[1] - *v81)
        {
          if (v82 == v83)
          {
            char v88 = 0;
          }
          else
          {
            do
            {
              BOOL v86 = kaldi::HmmTopology::HmmState::operator==(v82, v85);
              v82 += 32;
              v85 += 32;
            }
            while (v82 != v83 && v86);
            char v88 = !v86;
          }
        }
        else
        {
          char v88 = 1;
        }
        unsigned int v89 = (char **)(v77 + 24 * v70);
        if ((v88 & 1) != 0 || v89[1] - *v89 != *(void *)(v76 + 8) - *(void *)v76) {
          kaldi::GetRandomAlignmentForPhone(v117, v118, (uint64_t)&v120);
        }
        int v90 = kaldi::HmmTopology::NumPdfClasses(v118, v119);
        std::vector<int>::vector((std::vector<int> *)&v130, v90);
        if (v90 >= 1)
        {
          uint64_t v91 = 0;
          for (uint64_t i = 0; i != v90; ++i)
          {
            if (((*(uint64_t (**)(uint64_t, std::vector<int> *, uint64_t, unsigned int *))(*(void *)v117
                                                                                                  + 16))(v117, &v120, i, &v130.__begin_[v91]) & 1) == 0)
            {
              std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v129);
              kaldi::WriteIntegerByteArray<int>(&v129, 0, 0, v120.__end_ - v120.__begin_, (uint64_t)v120.__begin_);
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v128);
              uint64_t v104 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v128, (uint64_t)"tree did not succeed in converting phone window ", 48);
              std::stringbuf::str();
              if ((v127 & 0x80u) == 0) {
                int v105 = __p;
              }
              else {
                int v105 = (void **)__p[0];
              }
              if ((v127 & 0x80u) == 0) {
                uint64_t v106 = v127;
              }
              else {
                uint64_t v106 = (uint64_t)__p[1];
              }
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v104, (uint64_t)v105, v106);
              if ((char)v127 < 0) {
                operator delete(__p[0]);
              }
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v128);
            }
            ++v91;
          }
        }
        if ((v114 - (void)v113) << 30)
        {
          uint64_t v93 = 0;
          if ((unint64_t)(int)((v114 - (uint64_t)v113) >> 2) <= 1) {
            uint64_t v94 = 1;
          }
          else {
            uint64_t v94 = (int)((v114 - (uint64_t)v113) >> 2);
          }
          do
          {
            int v95 = *(_DWORD *)(*(void *)v76 + 4 * v93);
            int v96 = kaldi::TransitionModel::TransitionIdToTransitionState(a1, v95);
            int v97 = kaldi::TransitionModel::TransitionStateToForwardPdfClass(a1, v96);
            int v98 = kaldi::TransitionModel::TransitionStateToSelfLoopPdfClass(a1, v96);
            int v99 = kaldi::TransitionModel::TransitionIdToHmmState(a1, v95);
            int v100 = kaldi::TransitionModel::TransitionIdToTransitionIndex(a1, v95);
            if (v97 >= (unint64_t)(v130.__end_ - v130.__begin_))
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v128);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v128, (uint64_t)"ConvertAlignment: error converting alignment, possibly different topologies?", 76);
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v128);
            }
            int v101 = v100;
            int v102 = kaldi::TransitionModel::TupleToTransitionState(v118, v119, v99, v130.__begin_[v97], v130.__begin_[v98]);
            *(_DWORD *)&(*v89)[4 * v93++] = kaldi::TransitionModel::PairToTransitionId(v118, v102, v101);
          }
          while (v94 != v93);
        }
        if (v130.__begin_)
        {
          v130.__end_ = v130.__begin_;
          operator delete(v130.__begin_);
        }
        std::vector<int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>((std::vector<int> *)this, (uint64_t)this->__end_, *v89, v89[1], (v89[1] - *v89) >> 2);
        int v65 = v110;
        uint64_t v67 = v109;
        uint64_t v68 = v107;
        int v63 = v108;
        uint64_t v69 = v115;
        if (v120.__begin_)
        {
          v120.__end_ = v120.__begin_;
          operator delete(v120.__begin_);
        }
      }
      ++v66;
      v69 += 4;
    }
    while (v65 != v66);
  }
  uint64_t v28 = 1;
LABEL_105:
  v128.__begin_ = (std::vector<int>::pointer)v121;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v128);
  if (v122.__begin_)
  {
    v122.__end_ = v122.__begin_;
    operator delete(v122.__begin_);
  }
LABEL_107:
  v128.__begin_ = (std::vector<int>::pointer)&v123;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v128);
  return v28;
}

void sub_1B22C1A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,uint64_t a33,char a34)
{
  if (__p) {
    operator delete(__p);
  }
  STACK[0x208] = (unint64_t)&a34;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x208]);
  _Unwind_Resume(a1);
}

void sub_1B22C1A78()
{
}

void kaldi::AddTransitionProbs(kaldi *a1, void *a2, uint64_t a3, float a4, float a5)
{
  int v10 = (int *)a2[1];
  if ((int *)*a2 != v10)
  {
    unint64_t v11 = (int *)(*a2 + 4);
    do
    {
      if (v11 == v10) {
        break;
      }
      int v13 = *(v11 - 1);
      int v12 = *v11++;
    }
    while (v12 > v13);
  }
  unint64_t v14 = *(void *)(*(void *)(a3 + 8) + 72) - *(void *)(*(void *)(a3 + 8) + 64);
  if ((int)(v14 >> 3) >= 1)
  {
    uint64_t v15 = 0;
    signed __int32 v16 = ((*((void *)a1 + 19) - *((void *)a1 + 18)) >> 2) - 1;
    uint64_t v17 = (v14 >> 3);
    do
    {
      int v38 = &unk_1F0A3E910;
      unint64_t v41 = 0;
      fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck(a3);
      uint64_t v18 = *(void *)(a3 + 8);
      uint64_t v19 = *(void *)(*(void *)(v18 + 64) + 8 * v15);
      uint64_t v39 = v19;
      uint64_t v40 = v18 + 8;
      for (unint64_t i = v41; ; unint64_t i = ++v41)
      {
        uint64_t v22 = v19 + 24;
        uint64_t v21 = *(void *)(v19 + 24);
        if (i >= (*(void *)(v22 + 8) - v21) >> 4) {
          break;
        }
        __n128 v37 = *(__n128 *)(v21 + 16 * i);
        if (v37.n128_i32[0] >= 1 && (signed __int32)v37.n128_u32[0] <= v16)
        {
          kaldi::GetScaledTransitionLogProb(a1, (const kaldi::TransitionModel *)v37.n128_u32[0], a4, a5);
          float v32 = NAN;
          if (v37.n128_f32[2] != -INFINITY && v31 != INFINITY)
          {
            float v32 = INFINITY;
            BOOL v33 = v37.n128_f32[2] == INFINITY || v31 == -INFINITY;
            float v34 = v37.n128_f32[2] - v31;
            if (!v33) {
              float v32 = v34;
            }
          }
          v37.n128_f32[2] = v32;
        }
        else if (v37.n128_u32[0])
        {
          uint64_t v24 = (_DWORD *)*a2;
          uint64_t v25 = (_DWORD *)a2[1];
          if (v25 == (_DWORD *)*a2) {
            goto LABEL_34;
          }
          unint64_t v26 = ((uint64_t)v25 - *a2) >> 2;
          do
          {
            unint64_t v27 = v26 >> 1;
            uint64_t v28 = &v24[v26 >> 1];
            __int32 v30 = *v28;
            std::vector<int>::pointer v29 = v28 + 1;
            v26 += ~(v26 >> 1);
            if (v30 < v37.n128_i32[0]) {
              uint64_t v24 = v29;
            }
            else {
              unint64_t v26 = v27;
            }
          }
          while (v26);
          if (v24 == v25 || v37.n128_i32[0] < *v24)
          {
LABEL_34:
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v36);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"AddTransitionProbs: invalid symbol ", 35);
            unint64_t v35 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" on graph input side.", 21);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v36);
          }
        }
        fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::SetValue((uint64_t)&v38, &v37);
        uint64_t v19 = v39;
      }
      ++v15;
    }
    while (v15 != v17);
  }
}

void kaldi::GetScaledTransitionLogProb(kaldi *this, const kaldi::TransitionModel *a2, float a3, float a4)
{
  int v4 = (int)a2;
  if (a3 == a4)
  {
    kaldi::TransitionModel::GetTransitionLogProb(this, (int)a2);
  }
  else if (kaldi::TransitionModel::IsSelfLoop(this, (int)a2))
  {
    kaldi::TransitionModel::GetTransitionLogProb(this, v4);
  }
  else
  {
    int v6 = kaldi::TransitionModel::TransitionIdToTransitionState(this, v4);
    kaldi::TransitionModel::GetNonSelfLoopLogProb(this, v6);
    kaldi::TransitionModel::GetTransitionLogProbIgnoringSelfLoops(this, v4);
  }
}

void kaldi::AddTransitionProbs(kaldi *a1, uint64_t a2, float a3, float a4)
{
  unint64_t v4 = *(void *)(*(void *)(a2 + 8) + 72) - *(void *)(*(void *)(a2 + 8) + 64);
  if ((int)(v4 >> 3) >= 1)
  {
    uint64_t v9 = 0;
    int v10 = ((*((void *)a1 + 19) - *((void *)a1 + 18)) >> 2) - 1;
    uint64_t v11 = (v4 >> 3);
    do
    {
      BOOL v33 = &unk_1F0A3E980;
      unint64_t v36 = 0;
      fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MutateCheck(a2);
      uint64_t v12 = *(void *)(a2 + 8);
      uint64_t v13 = *(void *)(*(void *)(v12 + 64) + 8 * v9);
      uint64_t v34 = v13;
      uint64_t v35 = v12 + 8;
      for (unint64_t i = v36; ; unint64_t i = ++v36)
      {
        uint64_t v16 = v13 + 48;
        uint64_t v15 = *(void *)(v13 + 48);
        if (i >= 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v16 + 8) - v15) >> 4)) {
          break;
        }
        uint64_t v17 = (uint64_t *)(v15 + 48 * i);
        uint64_t v27 = *v17;
        unint64_t v28 = v17[1];
        __int32 v30 = 0;
        uint64_t v31 = 0;
        std::vector<int>::pointer v29 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v29, (const void *)v17[2], v17[3], (v17[3] - v17[2]) >> 2);
        int v32 = *((_DWORD *)v17 + 10);
        unsigned int v18 = HIDWORD(v28);
        LODWORD(v19) = v28;
        int v20 = v29;
        if (v30 != (unsigned char *)v29)
        {
          unint64_t v21 = 0;
          do
          {
            int v22 = v20[v21];
            if (v22 < 1 || v22 > v10)
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v26);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"AddTransitionProbs: invalid symbol ", 35);
              uint64_t v25 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" on lattice input side.", 23);
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v26);
            }
            kaldi::GetScaledTransitionLogProb(a1, (const kaldi::TransitionModel *)v20[v21], a3, a4);
            float v19 = v19 - v24;
            ++v21;
            int v20 = v29;
          }
          while (v21 < (v30 - (unsigned char *)v29) >> 2);
        }
        unint64_t v28 = __PAIR64__(v18, LODWORD(v19));
        fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::SetValue((uint64_t)&v33, (float *)&v27);
        if (v29)
        {
          __int32 v30 = v29;
          operator delete(v29);
        }
        uint64_t v13 = v34;
      }
      ++v9;
    }
    while (v9 != v11);
  }
}

void sub_1B22C202C(_Unwind_Exception *a1)
{
  unint64_t v3 = *(void **)(v1 - 184);
  if (v3)
  {
    *(void *)(v1 - 176) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(a1);
}

void kaldi::GetRandomAlignmentForPhone(uint64_t a1, kaldi::HmmTopology *a2, uint64_t a3)
{
  memset(v5, 0, 24);
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v5, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  kaldi::GetHmmAsFstSimple(v5, a1, a2);
}

void sub_1B22C239C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst((void *)(v10 - 160));
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst((void *)(v10 - 144));
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst((void *)(v10 - 128));
  _Unwind_Resume(a1);
}

void fst::GetInputSymbols<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>(uint64_t a1, char a2, std::vector<unsigned int> *a3)
{
  v17[0] = 0;
  v17[1] = 0;
  uint64_t v16 = (uint64_t *)v17;
  unsigned int v15 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v13);
  while (1)
  {
    if (!v13)
    {
      if ((int)v15 >= v14) {
        goto LABEL_27;
      }
LABEL_7:
      uint64_t v6 = v15;
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v13 + 16))(v13)) {
      break;
    }
    if (!v13) {
      goto LABEL_7;
    }
    uint64_t v6 = (*(uint64_t (**)(void))(*(void *)v13 + 24))();
LABEL_8:
    unint64_t v12 = 0;
    (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 136))(a1, v6, v10);
    while (1)
    {
      if (!v10[0])
      {
        if (v12 >= v10[2]) {
          goto LABEL_20;
        }
LABEL_14:
        int v7 = (int *)(v10[1] + 16 * v12);
        goto LABEL_15;
      }
      if ((*(unsigned int (**)(void))(*(void *)v10[0] + 24))(v10[0])) {
        break;
      }
      if (!v10[0]) {
        goto LABEL_14;
      }
      int v7 = (int *)(*(uint64_t (**)(void))(*(void *)v10[0] + 32))();
LABEL_15:
      std::__tree<int>::__emplace_unique_key_args<int,int const&>(&v16, v7, v7);
      if (v10[0]) {
        (*(void (**)(void))(*(void *)v10[0] + 40))(v10[0]);
      }
      else {
        ++v12;
      }
    }
    if (v10[0])
    {
      (*(void (**)(void))(*(void *)v10[0] + 8))();
      goto LABEL_22;
    }
LABEL_20:
    if (v11) {
      --*v11;
    }
LABEL_22:
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 32))(v13);
    }
    else {
      ++v15;
    }
  }
  if (v13) {
    (*(void (**)(void))(*(void *)v13 + 8))();
  }
LABEL_27:
  if ((a2 & 1) == 0)
  {
    for (unint64_t i = v17[0]; i; unint64_t i = (void *)*i)
    {
      int v9 = *((_DWORD *)i + 7);
      if (v9 <= 0)
      {
        if ((v9 & 0x80000000) == 0)
        {
          LODWORD(v10[0]) = 0;
          std::__tree<int>::__erase_unique<int>((uint64_t)&v16, (int *)v10);
          break;
        }
        ++i;
      }
    }
  }
  kaldi::CopySetToVector<int>(&v16, a3);
  std::__sort<std::__less<int,int> &,int *>();
  std::__tree<int>::destroy((uint64_t)&v16, v17[0]);
}

void sub_1B22C2728(_Unwind_Exception *a1)
{
  std::__tree<int>::destroy(v1 - 56, *(void **)(v1 - 48));
  _Unwind_Resume(a1);
}

void fst::RandGen<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>()
{
}

void sub_1B22C28D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  fst::ImplToFst<fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(&a14);
  _Unwind_Resume(a1);
}

uint64_t kaldi::ChangeReorderingOfAlignment(uint64_t this, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1] - *a2;
  unint64_t v4 = (unint64_t)v3 >> 2;
  if (((unint64_t)v3 >> 2))
  {
    uint64_t v6 = (kaldi::TransitionModel *)this;
    LODWORD(v7) = 0;
    uint64_t v8 = (int)(v3 >> 2);
    do
    {
      uint64_t v9 = (int)v7;
      int v10 = *(_DWORD *)(v2 + 4 * (int)v7);
      int v11 = kaldi::TransitionModel::TransitionIdToTransitionState(v6, v10);
      this = kaldi::TransitionModel::IsSelfLoop(v6, v10);
      int v12 = this;
      uint64_t v7 = (int)v7 + 1;
      do
      {
        if (v8 == v7)
        {
          LODWORD(v7) = v4;
          goto LABEL_10;
        }
        this = kaldi::TransitionModel::TransitionIdToTransitionState(v6, *(_DWORD *)(*a2 + 4 * v7));
        if (this != v11) {
          goto LABEL_10;
        }
        this = kaldi::TransitionModel::IsSelfLoop(v6, *(_DWORD *)(*a2 + 4 * v7++));
      }
      while ((this & 1) != 0);
      if (!v12) {
        LODWORD(v7) = v7 - 1;
      }
LABEL_10:
      uint64_t v2 = *a2;
      int v13 = *(_DWORD *)(*a2 + 4 * v9);
      *(_DWORD *)(*a2 + 4 * v9) = *(_DWORD *)(*a2 + 4 * ((int)v7 - 1));
      *(_DWORD *)(v2 + 4 * ((int)v7 - 1)) = v13;
    }
    while (v7 != v4);
  }
  return this;
}

void fst::MakePrecedingInputSymbolsSameClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,kaldi::TidToTstateMapper>(char a1, uint64_t a2, kaldi::TransitionModel **a3)
{
  memset(&v66, 0, sizeof(v66));
  std::vector<int>::value_type __x = -1;
  if (a1)
  {
    int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
    int v6 = v5;
    if (v5 < 0) {
      goto LABEL_114;
    }
    std::vector<int>::resize(&v66, (v5 + 1), &__x);
    v66.__begin_[v6] = 0;
  }
  int v63 = 0;
  uint64_t v64 = 0;
  uint64_t v62 = (uint64_t *)&v63;
  LODWORD(v47) = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 128))(a2, &v45);
LABEL_5:
  if (!v45)
  {
    if ((int)v47 >= (int)v46) {
      goto LABEL_36;
    }
    goto LABEL_10;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v45 + 16))(v45))
  {
    if (v45)
    {
      uint64_t v7 = (*(uint64_t (**)(void))(*(void *)v45 + 24))();
LABEL_11:
      unint64_t v59 = 0;
      (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a2 + 136))(a2, v7, v56);
      while (1)
      {
        if (v56[0])
        {
          if ((*(unsigned int (**)(void))(*(void *)v56[0] + 24))(v56[0]))
          {
            if (v56[0])
            {
              (*(void (**)(void))(*(void *)v56[0] + 8))();
              goto LABEL_31;
            }
LABEL_29:
            if (v58) {
              --*v58;
            }
LABEL_31:
            if (v45) {
              (*(void (**)(uint64_t))(*(void *)v45 + 32))(v45);
            }
            else {
              LODWORD(v47) = v47 + 1;
            }
            goto LABEL_5;
          }
          if (v56[0])
          {
            uint64_t v8 = (int *)(*(uint64_t (**)(void))(*(void *)v56[0] + 32))();
            goto LABEL_18;
          }
        }
        else if (v59 >= (unint64_t)v57)
        {
          goto LABEL_29;
        }
        uint64_t v8 = (int *)(v56[1] + 16 * v59);
LABEL_18:
        std::vector<int>::pointer begin = v66.__begin_;
        int v11 = v8 + 3;
        unint64_t v10 = v8[3];
        if (v10 >= v66.__end_ - v66.__begin_)
        {
          std::vector<int>::resize(&v66, (int)v10 + 1, &__x);
          unint64_t v10 = *v11;
          std::vector<int>::pointer begin = v66.__begin_;
        }
        int v12 = begin[v10];
        int v13 = *v8;
        if (v12 == __x)
        {
          int v14 = kaldi::TidToTstateMapper::operator()(a3, v13);
          v66.__begin_[*v11] = v14;
        }
        else if (v12 != kaldi::TidToTstateMapper::operator()(a3, v13))
        {
          std::__tree<int>::__emplace_unique_key_args<int,int const&>(&v62, v8 + 3, v8 + 3);
        }
        if (v56[0]) {
          (*(void (**)(void))(*(void *)v56[0] + 40))(v56[0]);
        }
        else {
          ++v59;
        }
      }
    }
LABEL_10:
    uint64_t v7 = v47;
    goto LABEL_11;
  }
  if (v45) {
    (*(void (**)(void))(*(void *)v45 + 8))();
  }
LABEL_36:
  if (!v64) {
    goto LABEL_113;
  }
  kaldi::ConstIntegerSet<int>::ConstIntegerSet((uint64_t)v56, &v62);
  std::string __p = 0;
  int v54 = 0;
  int64_t v55 = 0;
  LODWORD(v52) = 0;
  (*(void (**)(uint64_t, uint64_t **))(*(void *)a2 + 128))(a2, &v50);
  while (2)
  {
    if (!v50)
    {
      if ((int)v52 >= (int)v51) {
        goto LABEL_85;
      }
      goto LABEL_43;
    }
    if (!(*(unsigned int (**)(uint64_t *))(*v50 + 16))(v50))
    {
      if (v50)
      {
        uint64_t v15 = (*(uint64_t (**)(void))(*v50 + 24))();
        goto LABEL_44;
      }
LABEL_43:
      uint64_t v15 = v52;
LABEL_44:
      unint64_t v49 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a2 + 136))(a2, v15, &v45);
      uint64_t v16 = v15;
LABEL_45:
      if (v45)
      {
        if ((*(unsigned int (**)(uint64_t))(*(void *)v45 + 24))(v45))
        {
          if (v45)
          {
            (*(void (**)(void))(*(void *)v45 + 8))();
            goto LABEL_80;
          }
LABEL_78:
          if (v48) {
            --*v48;
          }
LABEL_80:
          if (v50) {
            (*(void (**)(uint64_t *))(*v50 + 32))(v50);
          }
          else {
            LODWORD(v52) = v52 + 1;
          }
          continue;
        }
        if (v45)
        {
          uint64_t v17 = (_DWORD *)(*(uint64_t (**)(void))(*(void *)v45 + 32))();
          goto LABEL_51;
        }
      }
      else if (v49 >= v47)
      {
        goto LABEL_78;
      }
      uint64_t v17 = (_DWORD *)(v46 + 16 * v49);
LABEL_51:
      if (*v17 && kaldi::ConstIntegerSet<int>::count((uint64_t)v56, v17[3]))
      {
        if (v45) {
          uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v45 + 48))(v45);
        }
        else {
          uint64_t v18 = v49;
        }
        float v19 = v54;
        if (v54 >= v55)
        {
          uint64_t v21 = (v54 - (unsigned char *)__p) >> 4;
          unint64_t v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) >> 60) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v23 = v55 - (unsigned char *)__p;
          if ((v55 - (unsigned char *)__p) >> 3 > v22) {
            unint64_t v22 = v23 >> 3;
          }
          if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v24 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v24 = v22;
          }
          if (v24) {
            uint64_t v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)&v55, v24);
          }
          else {
            uint64_t v25 = 0;
          }
          unint64_t v26 = &v25[16 * v21];
          *(void *)unint64_t v26 = v16;
          *((void *)v26 + 1) = v18;
          unint64_t v28 = (char *)__p;
          uint64_t v27 = v54;
          std::vector<int>::pointer v29 = v26;
          if (v54 != __p)
          {
            do
            {
              *((_OWORD *)v29 - 1) = *((_OWORD *)v27 - 1);
              v29 -= 16;
              v27 -= 16;
            }
            while (v27 != v28);
            uint64_t v27 = (char *)__p;
          }
          int v20 = v26 + 16;
          std::string __p = v29;
          int v54 = v26 + 16;
          int64_t v55 = &v25[16 * v24];
          if (v27) {
            operator delete(v27);
          }
        }
        else
        {
          *(void *)int v54 = v16;
          *((void *)v19 + 1) = v18;
          int v20 = v19 + 16;
        }
        int v54 = v20;
      }
      if (v45) {
        (*(void (**)(uint64_t))(*(void *)v45 + 40))(v45);
      }
      else {
        ++v49;
      }
      goto LABEL_45;
    }
    break;
  }
  if (v50) {
    (*(void (**)(void))(*v50 + 8))();
  }
LABEL_85:
  unint64_t v30 = 0;
  uint64_t v31 = (unsigned int *)__p;
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  char v50 = (uint64_t *)&v51;
  while (2)
  {
    uint64_t v32 = v31[4 * v30];
    unint64_t v49 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a2 + 136))(a2, v32, &v45);
    unint64_t v33 = *((void *)__p + 2 * v30 + 1);
    if (v45)
    {
      (*(void (**)(uint64_t, unint64_t))(*(void *)v45 + 64))(v45, v33);
      if (v45)
      {
        uint64_t v34 = (_OWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v45 + 32))(v45);
        goto LABEL_92;
      }
      unint64_t v33 = v49;
    }
    else
    {
      unint64_t v49 = *((void *)__p + 2 * v30 + 1);
    }
    uint64_t v34 = (_OWORD *)(v46 + 16 * v33);
LABEL_92:
    *(_OWORD *)int v44 = *v34;
    int v35 = kaldi::TidToTstateMapper::operator()(a3, v44[0]);
    v43[0] = v44[3];
    v43[1] = v35;
    unint64_t v36 = v51;
    if (v51)
    {
      while (2)
      {
        int v37 = *((_DWORD *)v36 + 7);
        if (v44[3] >= v37)
        {
          if (v37 < v44[3]) {
            goto LABEL_97;
          }
          int v38 = *((_DWORD *)v36 + 8);
          if (v35 >= v38)
          {
            if (v38 >= v35) {
              goto LABEL_100;
            }
LABEL_97:
            ++v36;
          }
        }
        unint64_t v36 = (void *)*v36;
        if (!v36) {
          break;
        }
        continue;
      }
    }
    uint64_t v39 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2);
    uint64_t v40 = v43;
    *((_DWORD *)std::__tree<std::__value_type<std::pair<int,int>,float>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,float>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,float>>>::__emplace_unique_key_args<std::pair<int,int>,std::piecewise_construct_t const&,std::tuple<std::pair<int,int>&&>,std::tuple<>>(&v50, v43, (uint64_t)&std::piecewise_construct, (void **)&v40)+ 9) = v39;
    uint64_t v40 = 0;
    int v41 = 0;
    int v42 = v44[3];
    (*(void (**)(uint64_t, uint64_t, int **))(*(void *)a2 + 208))(a2, v39, &v40);
LABEL_100:
    uint64_t v40 = v43;
    v44[3] = *((_DWORD *)std::__tree<std::__value_type<std::pair<int,int>,float>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,float>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,float>>>::__emplace_unique_key_args<std::pair<int,int>,std::piecewise_construct_t const&,std::tuple<std::pair<int,int>&&>,std::tuple<>>(&v50, v43, (uint64_t)&std::piecewise_construct, (void **)&v40)+ 9);
    (*(void (**)(uint64_t, uint64_t, int **))(*(void *)a2 + 296))(a2, v32, &v40);
    (*(void (**)(int *, void))(*(void *)v40 + 64))(v40, *((void *)__p + 2 * v30 + 1));
    (*(void (**)(int *, int *))(*(void *)v40 + 88))(v40, v44);
    if (v40) {
      (*(void (**)(int *))(*(void *)v40 + 8))(v40);
    }
    if (v45)
    {
      (*(void (**)(uint64_t))(*(void *)v45 + 8))(v45);
    }
    else if (v48)
    {
      --*v48;
    }
    ++v30;
    uint64_t v31 = (unsigned int *)__p;
    if (v30 < (v54 - (unsigned char *)__p) >> 4) {
      continue;
    }
    break;
  }
  std::__tree<int>::destroy((uint64_t)&v50, v51);
  if (__p)
  {
    int v54 = (char *)__p;
    operator delete(__p);
  }
  if (v60)
  {
    int v61 = v60;
    operator delete(v60);
  }
  if (v57) {
    operator delete(v57);
  }
LABEL_113:
  std::__tree<int>::destroy((uint64_t)&v62, v63);
LABEL_114:
  if (v66.__begin_)
  {
    v66.__end_ = v66.__begin_;
    operator delete(v66.__begin_);
  }
}

void sub_1B22C3424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  if (__p) {
    operator delete(__p);
  }
  kaldi::ConstIntegerSet<int>::~ConstIntegerSet(&a27);
  std::__tree<int>::destroy(v30 - 144, *(void **)(v30 - 136));
  uint64_t v32 = *(void **)(v30 - 112);
  if (v32)
  {
    *(void *)(v30 - 104) = v32;
    operator delete(v32);
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::TidToTstateMapper::operator()(kaldi::TransitionModel **a1, int a2)
{
  if (a2 == -1) {
    return 0xFFFFFFFFLL;
  }
  if (a2 < 1)
  {
    if (!a2) {
      return 0;
    }
    goto LABEL_10;
  }
  unint64_t v4 = *a1;
  if ((int)(((*((void *)*a1 + 19) - *((void *)*a1 + 18)) >> 2) - 1) < a2)
  {
LABEL_10:
    uint64_t v7 = a1[1];
    uint64_t v8 = *(int **)v7;
    uint64_t v9 = (int *)*((void *)v7 + 1);
    if (v9 == v8) {
      goto LABEL_20;
    }
    unint64_t v10 = v9 - v8;
    do
    {
      unint64_t v11 = v10 >> 1;
      int v12 = &v8[v10 >> 1];
      int v14 = *v12;
      int v13 = v12 + 1;
      v10 += ~(v10 >> 1);
      if (v14 < a2) {
        uint64_t v8 = v13;
      }
      else {
        unint64_t v10 = v11;
      }
    }
    while (v10);
    if (v8 == v9 || *v8 > a2)
    {
LABEL_20:
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v18);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Label ", 6);
      uint64_t v15 = (void *)std::ostream::operator<<();
      uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" neither 0, nor a disambiguation symbol ", 40);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"(#transition id = ", 18);
      uint64_t v17 = (void *)std::ostream::operator<<();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v17, ").");
      goto LABEL_22;
    }
    return 0;
  }
  if (kaldi::TransitionModel::IsSelfLoop(v4, a2))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v18);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v18, "AddSelfLoops: graph already has self-loops.");
LABEL_22:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v18);
  }
  int v5 = *a1;
  return kaldi::TransitionModel::TransitionIdToTransitionState(v5, a2);
}

uint64_t kaldi::ConstIntegerSet<int>::ConstIntegerSet(uint64_t a1, void *a2)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  kaldi::CopySetToVector<int>(a2, (std::vector<unsigned int> *)(a1 + 40));
  kaldi::ConstIntegerSet<int>::InitInternal((int *)a1);
  return a1;
}

void sub_1B22C3810(_Unwind_Exception *exception_object)
{
  unint64_t v4 = v2;
  int v6 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 48) = v6;
    operator delete(v6);
  }
  if (*v3) {
    operator delete(*v3);
  }
  _Unwind_Resume(exception_object);
}

void fst::MakeFollowingInputSymbolsSameClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,kaldi::TidToTstateMapper>(int a1, uint64_t a2, kaldi::TransitionModel **a3)
{
  std::string __p = 0;
  int64_t v56 = 0;
  int v57 = 0;
  LODWORD(v54) = 0;
  (*(void (**)(uint64_t, char **))(*(void *)a2 + 128))(a2, &v52);
  while (1)
  {
    if (!v52)
    {
      if ((int)v54 >= (int)v53) {
        goto LABEL_59;
      }
LABEL_7:
      uint64_t v6 = v54;
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(char *))(*(void *)v52 + 16))(v52)) {
      break;
    }
    if (!v52) {
      goto LABEL_7;
    }
    uint64_t v6 = (*(uint64_t (**)(void))(*(void *)v52 + 24))();
LABEL_8:
    unint64_t v51 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a2 + 136))(a2, v6, &v47);
    int v7 = -1;
    while (1)
    {
      if (!v47)
      {
        if (v51 >= v49)
        {
          int v12 = 0;
          goto LABEL_27;
        }
        goto LABEL_14;
      }
      char v8 = (*(uint64_t (**)(uint64_t))(*(void *)v47 + 24))(v47);
      uint64_t v9 = v47;
      if (v8) {
        break;
      }
      if (v47)
      {
        unint64_t v10 = (int *)(*(uint64_t (**)(void))(*(void *)v47 + 32))();
        goto LABEL_15;
      }
LABEL_14:
      unint64_t v10 = (int *)(v48 + 16 * v51);
LABEL_15:
      int v11 = *v10;
      if (v7 == -1)
      {
        int v7 = kaldi::TidToTstateMapper::operator()(a3, v11);
      }
      else if (v7 != kaldi::TidToTstateMapper::operator()(a3, v11))
      {
        int v12 = 1;
        uint64_t v9 = v47;
        if (v47) {
          goto LABEL_25;
        }
        goto LABEL_27;
      }
      if (v47) {
        (*(void (**)(uint64_t))(*(void *)v47 + 40))(v47);
      }
      else {
        ++v51;
      }
    }
    int v12 = 0;
    if (v47)
    {
LABEL_25:
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
      goto LABEL_29;
    }
LABEL_27:
    if (v50) {
      --*v50;
    }
LABEL_29:
    if (a1 && (v7 + 1) >= 2)
    {
      LODWORD(v47) = (*(float (**)(uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v6);
      LODWORD(v46) = 2139095040;
      if (*(float *)&v47 == INFINITY) {
        char v21 = v12;
      }
      else {
        char v21 = 1;
      }
      if (v21)
      {
LABEL_32:
        int v13 = v56;
        if (v56 >= v57)
        {
          uint64_t v15 = (char *)__p;
          uint64_t v16 = (v56 - (unsigned char *)__p) >> 2;
          unint64_t v17 = v16 + 1;
          if ((unint64_t)(v16 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v18 = v57 - (unsigned char *)__p;
          if ((v57 - (unsigned char *)__p) >> 1 > v17) {
            unint64_t v17 = v18 >> 1;
          }
          if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v19 = v17;
          }
          if (v19)
          {
            int v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v57, v19);
            uint64_t v15 = (char *)__p;
            int v13 = v56;
          }
          else
          {
            int v20 = 0;
          }
          unint64_t v22 = &v20[4 * v16];
          *(_DWORD *)unint64_t v22 = v6;
          int v14 = v22 + 4;
          while (v13 != v15)
          {
            int v23 = *((_DWORD *)v13 - 1);
            v13 -= 4;
            *((_DWORD *)v22 - 1) = v23;
            v22 -= 4;
          }
          std::string __p = v22;
          int64_t v56 = v14;
          int v57 = &v20[4 * v19];
          if (v15) {
            operator delete(v15);
          }
        }
        else
        {
          *(_DWORD *)int64_t v56 = v6;
          int v14 = v13 + 4;
        }
        int64_t v56 = v14;
      }
    }
    else if (v12)
    {
      goto LABEL_32;
    }
    if (v52) {
      (*(void (**)(char *))(*(void *)v52 + 32))(v52);
    }
    else {
      LODWORD(v54) = v54 + 1;
    }
  }
  if (v52) {
    (*(void (**)(void))(*(void *)v52 + 8))();
  }
LABEL_59:
  uint64_t v52 = 0;
  int v53 = 0;
  int v54 = 0;
  unint64_t v24 = v56;
  if (v56 == __p) {
    goto LABEL_103;
  }
  uint64_t v25 = 0;
  unint64_t v26 = 0;
  unint64_t v24 = (char *)__p;
  while (2)
  {
    uint64_t v27 = *(unsigned int *)&v24[4 * v26];
    int v53 = v25;
    unint64_t v51 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a2 + 136))(a2, v27, &v47);
    while (2)
    {
      if (!v47)
      {
        if (v51 >= v49) {
          goto LABEL_89;
        }
        goto LABEL_67;
      }
      if (!(*(unsigned int (**)(uint64_t))(*(void *)v47 + 24))(v47))
      {
        if (v47)
        {
          unint64_t v28 = (_OWORD *)(*(uint64_t (**)(void))(*(void *)v47 + 32))();
LABEL_68:
          std::vector<int>::pointer v29 = v53;
          if (v53 >= v54)
          {
            uint64_t v31 = (v53 - v52) >> 4;
            unint64_t v32 = v31 + 1;
            if ((unint64_t)(v31 + 1) >> 60) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v33 = v54 - v52;
            if ((v54 - v52) >> 3 > v32) {
              unint64_t v32 = v33 >> 3;
            }
            if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v34 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v34 = v32;
            }
            if (v34) {
              int v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)&v54, v34);
            }
            else {
              int v35 = 0;
            }
            unint64_t v36 = &v35[16 * v31];
            *(_OWORD *)unint64_t v36 = *v28;
            int v38 = v52;
            int v37 = v53;
            uint64_t v39 = v36;
            if (v53 != v52)
            {
              do
              {
                *((_OWORD *)v39 - 1) = *((_OWORD *)v37 - 1);
                v39 -= 16;
                v37 -= 16;
              }
              while (v37 != v38);
              int v37 = v52;
            }
            uint64_t v30 = v36 + 16;
            uint64_t v52 = v39;
            int v53 = v36 + 16;
            int v54 = &v35[16 * v34];
            if (v37) {
              operator delete(v37);
            }
          }
          else
          {
            *(_OWORD *)int v53 = *v28;
            uint64_t v30 = v29 + 16;
          }
          int v53 = v30;
          if (v47) {
            (*(void (**)(uint64_t))(*(void *)v47 + 40))(v47);
          }
          else {
            ++v51;
          }
          continue;
        }
LABEL_67:
        unint64_t v28 = (_OWORD *)(v48 + 16 * v51);
        goto LABEL_68;
      }
      break;
    }
    if (v47)
    {
      (*(void (**)(void))(*(void *)v47 + 8))();
      goto LABEL_91;
    }
LABEL_89:
    if (v50) {
      --*v50;
    }
LABEL_91:
    uint64_t v25 = v52;
    uint64_t v40 = v53;
    if (v53 == v52)
    {
      uint64_t v25 = v53;
    }
    else
    {
      uint64_t v41 = 0;
      unint64_t v42 = 0;
      do
      {
        if (*(_DWORD *)&v25[v41])
        {
          uint64_t v43 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2);
          int v44 = *(_DWORD *)&v25[v41 + 12];
          uint64_t v47 = *(unsigned int *)&v25[v41];
          LODWORD(v48) = 0;
          HIDWORD(v48) = v44;
          (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a2 + 208))(a2, v43, &v47);
          (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a2 + 296))(a2, v27, &v46);
          (*(void (**)(uint64_t, unint64_t))(*(void *)v46 + 64))(v46, v42);
          int v45 = *(_DWORD *)&v25[v41 + 4];
          LODWORD(v47) = 0;
          HIDWORD(v47) = v45;
          LODWORD(v48) = *(_DWORD *)&v25[v41 + 8];
          HIDWORD(v48) = v43;
          (*(void (**)(uint64_t, uint64_t *))(*(void *)v46 + 88))(v46, &v47);
          if (v46) {
            (*(void (**)(uint64_t))(*(void *)v46 + 8))(v46);
          }
          uint64_t v25 = v52;
          uint64_t v40 = v53;
        }
        ++v42;
        v41 += 16;
      }
      while (v42 < (v40 - v25) >> 4);
    }
    ++v26;
    unint64_t v24 = (char *)__p;
    if (v26 < (v56 - (unsigned char *)__p) >> 2) {
      continue;
    }
    break;
  }
  if (v25)
  {
    int v53 = v25;
    operator delete(v25);
    unint64_t v24 = (char *)__p;
  }
LABEL_103:
  if (v24)
  {
    int64_t v56 = v24;
    operator delete(v24);
  }
}

void sub_1B22C4030(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__hash_table<std::__hash_value_type<std::pair<int,std::vector<int>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> *>,std::__unordered_map_hasher<std::pair<int,std::vector<int>>,std::__hash_value_type<std::pair<int,std::vector<int>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> *>,kaldi::HmmCacheHash,std::equal_to<std::pair<int,std::vector<int>>>,true>,std::__unordered_map_equal<std::pair<int,std::vector<int>>,std::__hash_value_type<std::pair<int,std::vector<int>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> *>,std::equal_to<std::pair<int,std::vector<int>>>,kaldi::HmmCacheHash,true>,std::allocator<std::__hash_value_type<std::pair<int,std::vector<int>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> *>>>::find<std::pair<int,std::vector<int>>>(void *a1, uint64_t a2)
{
  uint64_t v3 = *(int **)(a2 + 8);
  unint64_t v4 = *(int **)(a2 + 16);
  if (v3 == v4)
  {
    int v5 = 0;
  }
  else
  {
    int v5 = 0;
    do
    {
      int v6 = *v3++;
      int v5 = v6 + 7853 * v5;
    }
    while (v3 != v4);
  }
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v5 + 103049 * *(_DWORD *)a2;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  unint64_t v10 = v9.u32[0];
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v11 = v5 + 103049 * *(_DWORD *)a2;
    if (*(void *)&v7 <= v8) {
      unint64_t v11 = v8 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v11 = (*(void *)&v7 - 1) & v8;
  }
  int v12 = *(void **)(*a1 + 8 * v11);
  if (!v12) {
    return 0;
  }
  int v13 = (void *)*v12;
  if (*v12)
  {
    uint64_t v14 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v15 = v13[1];
      if (v15 == v8)
      {
        if (std::equal_to<std::pair<int,std::vector<int>>>::operator()[abi:ne180100](v14, (uint64_t)(v13 + 2), a2)) {
          return v13;
        }
      }
      else
      {
        if (v10 > 1)
        {
          if (v15 >= *(void *)&v7) {
            v15 %= *(void *)&v7;
          }
        }
        else
        {
          v15 &= *(void *)&v7 - 1;
        }
        if (v15 != v11) {
          return 0;
        }
      }
      int v13 = (void *)*v13;
    }
    while (v13);
  }
  return v13;
}

BOOL std::equal_to<std::pair<int,std::vector<int>>>::operator()[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)a2 == *(_DWORD *)a3
    && (unint64_t v4 = *(const void **)(a2 + 8),
        size_t v5 = *(void *)(a2 + 16) - (void)v4,
        int v6 = *(const void **)(a3 + 8),
        v5 == *(void *)(a3 + 16) - (void)v6))
  {
    return memcmp(v4, v6, v5) == 0;
  }
  else
  {
    return 0;
  }
}

uint64_t fst::Push<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::ReweightType)0>(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 3) == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 168))(a2, a1);
    fst::Push<fst::ArcTpl<fst::LogWeightTpl<float>,int>>(a2, 0);
  }
  if ((a3 & 2) != 0)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::VectorFst();
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "WARNING");
  size_t v5 = fst::LogMessage::LogMessage((fst *)v9, (uint64_t)__p);
  int v6 = (void *)fst::cerr(v5);
  int8x8_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Push: pushing type is set to 0: ", 32);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"pushing neither labels nor weights.", 35);
  fst::LogMessage::~LogMessage((fst::LogMessage *)v9);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 168))(a2, a1);
}

void sub_1B22C46B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::~ImplToFst(&a19);
  fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~ImplToFst(&__p);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::~ImplToFst((void *)(v29 - 128));
  std::string __p = (void *)(v29 - 112);
  std::vector<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_1B22C4770(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  fst::LogMessage::~LogMessage((fst::LogMessage *)va);
  JUMPOUT(0x1B22C477CLL);
}

void fst::ShortestDistance<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::VectorFst();
  }
  fst::AutoQueue<int>::AutoQueue<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>((uint64_t)v3, a1);
}

void sub_1B22C49DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  fst::AutoQueue<int>::~AutoQueue((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *fst::ComputeTotalWeight<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (a3)
  {
    if (0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3) <= (*(int (**)(uint64_t))(*(void *)a1 + 24))(a1)) {
      int8x8_t v7 = (_DWORD *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Zero();
    }
    else {
      int8x8_t v7 = (_DWORD *)(*a2 + 40 * (*(int (**)(uint64_t))(*(void *)a1 + 24))(a1));
    }
    *(_DWORD *)a4 = *v7;
    uint64_t result = std::list<int>::list((void *)(a4 + 8), (uint64_t)(v7 + 2));
    *(_DWORD *)(a4 + 32) = v7[8];
  }
  else
  {
    unint64_t v8 = (_DWORD *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Zero();
    *(_DWORD *)a4 = *v8;
    uint64_t result = std::list<int>::list((void *)(a4 + 8), (uint64_t)(v8 + 2));
    *(_DWORD *)(a4 + 32) = v8[8];
    uint64_t v10 = *a2;
    if (a2[1] != *a2)
    {
      uint64_t v11 = 0;
      unint64_t v12 = 0;
      do
      {
        (*(void (**)(uint64_t *__return_ptr, uint64_t, unint64_t))(*(void *)a1 + 32))(&v21, a1, v12);
        fst::Times<int,(fst::StringType)0>((int *)(v10 + v11), (uint64_t)&v21, (uint64_t)&v30);
        float v13 = *(float *)(v10 + v11 + 32);
        float v14 = NAN;
        if (v13 != -INFINITY)
        {
          float v14 = NAN;
          if (v23 != -INFINITY)
          {
            float v14 = INFINITY;
            BOOL v15 = v23 == INFINITY || v13 == INFINITY;
            float v16 = v13 + v23;
            if (!v15) {
              float v14 = v16;
            }
          }
        }
        fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)v24, &v30, v14);
        std::__list_imp<char *>::clear(v31);
        fst::Plus<int>(a4, (uint64_t)v24, (uint64_t)&v30);
        float v17 = *(float *)(a4 + 32);
        float v18 = v26;
        if (v17 != INFINITY)
        {
          if (v26 == INFINITY)
          {
            float v18 = *(float *)(a4 + 32);
          }
          else if (v17 <= v26)
          {
            float v20 = expf(-(float)(v26 - v17));
            float v18 = v17 - logf(v20 + 1.0);
          }
          else
          {
            float v19 = expf(-(float)(v17 - v26));
            float v18 = v18 - logf(v19 + 1.0);
          }
        }
        fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v27, &v30, v18);
        std::__list_imp<char *>::clear(v31);
        *(_DWORD *)a4 = v27;
        if (&v27 != (int *)a4) {
          std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(a4 + 8), v28[1], (uint64_t)v28);
        }
        *(_DWORD *)(a4 + 32) = v29;
        std::__list_imp<char *>::clear(v28);
        std::__list_imp<char *>::clear(v25);
        uint64_t result = std::__list_imp<char *>::clear(v22);
        ++v12;
        uint64_t v10 = *a2;
        v11 += 40;
      }
      while (0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3) > v12);
    }
  }
  return result;
}

void sub_1B22C4D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  std::__list_imp<char *>::clear(v11);
  std::__list_imp<char *>::clear(v10);
  std::__list_imp<char *>::clear(a10);
  std::__list_imp<char *>::clear(a9);
  _Unwind_Resume(a1);
}

void sub_1B22C4DB8()
{
}

uint64_t fst::Reweight<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>(uint64_t *a1, void *a2, int a3)
{
  uint64_t result = (*(uint64_t (**)(uint64_t *))(*a1 + 160))(a1);
  if (!result) {
    return result;
  }
  if (a3 == 1)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(&v113, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(&v113, "ERROR");
    }
    int v6 = fst::LogMessage::LogMessage((fst *)&v120, (uint64_t)&v113);
    int8x8_t v7 = (void *)fst::cerr(v6);
    unint64_t v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Reweight: Reweighting to the final states requires ", 51);
    char v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"Weight to be right distributive: ", 33);
    uint64_t v51 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Type();
    int v52 = *(char *)(v51 + 23);
    if (v52 >= 0) {
      uint64_t v53 = v51;
    }
    else {
      uint64_t v53 = *(void *)v51;
    }
    if (v52 >= 0) {
      uint64_t v54 = *(unsigned __int8 *)(v51 + 23);
    }
    else {
      uint64_t v54 = *(void *)(v51 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, v53, v54);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v120);
    if (SHIBYTE(v115[0]) < 0) {
      operator delete(v113);
    }
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 192))(a1, 4, 4);
  }
  int v127 = 0;
  (*(void (**)(uint64_t *, uint64_t *))(*a1 + 128))(a1, &v125);
  while (1)
  {
    if (v125)
    {
      if ((*(unsigned int (**)(uint64_t))(*(void *)v125 + 16))(v125)) {
        goto LABEL_91;
      }
      if (v125)
      {
        int v8 = (*(uint64_t (**)(uint64_t))(*(void *)v125 + 24))(v125);
        goto LABEL_12;
      }
    }
    else if (v127 >= v126)
    {
      goto LABEL_91;
    }
    int v8 = v127;
LABEL_12:
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2[1] - *a2) >> 3) == v8) {
      break;
    }
    uint64_t v9 = v8;
    uint64_t v10 = *a2 + 40 * v8;
    int v120 = *(_DWORD *)v10;
    std::list<int>::list(&v121, v10 + 8);
    float v124 = *(float *)(v10 + 32);
    uint64_t v11 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Zero();
    if (v120) {
      uint64_t v12 = v123 + 1;
    }
    else {
      uint64_t v12 = 0;
    }
    if (*(_DWORD *)v11) {
      uint64_t v13 = *(void *)(v11 + 24) + 1;
    }
    else {
      uint64_t v13 = 0;
    }
    if (v12 != v13) {
      goto LABEL_33;
    }
    char v14 = 0;
    uint64_t v15 = v122;
    float v16 = (uint64_t *)(v11 + 16);
    BOOL v17 = v120 && v120 == *(_DWORD *)v11;
    BOOL v18 = !v17;
    while (1)
    {
      uint64_t v19 = *v16;
      if ((v14 & 1) == 0 && v18) {
        break;
      }
      if ((uint64_t *)v15 == &v121) {
        goto LABEL_32;
      }
      if (*(_DWORD *)(v15 + 16) != *(_DWORD *)(v19 + 16)) {
        goto LABEL_33;
      }
      uint64_t v15 = *(void *)(v15 + 8);
      float v16 = (uint64_t *)(v19 + 8);
      char v14 = 1;
    }
    if (v120) {
      goto LABEL_33;
    }
LABEL_32:
    *(float *)&float v113 = v124;
    LODWORD(v108) = 0;
    LODWORD(v108) = *(_DWORD *)(v11 + 32);
    if (v124 != *(float *)&v108)
    {
LABEL_33:
      (*(void (**)(uint64_t *, uint64_t, uint64_t *))(*a1 + 296))(a1, v9, &v119);
      while (!(*(unsigned int (**)(uint64_t))(*(void *)v119 + 24))(v119))
      {
        uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)v119 + 32))(v119);
        float v113 = *(void **)v20;
        LODWORD(v114) = *(_DWORD *)(v20 + 8);
        std::list<int>::list(v115, v20 + 16);
        unint64_t v21 = *(int *)(v20 + 48);
        float v117 = *(float *)(v20 + 40);
        int v118 = v21;
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2[1] - *a2) >> 3) > v21)
        {
          uint64_t v22 = *a2 + 40 * (int)v21;
          LODWORD(v108) = *(_DWORD *)v22;
          std::list<int>::list(&v109, v22 + 8);
          float v112 = *(float *)(v22 + 32);
          uint64_t v23 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Zero();
          if (v108) {
            uint64_t v24 = v111 + 1;
          }
          else {
            uint64_t v24 = 0;
          }
          if (*(_DWORD *)v23) {
            uint64_t v25 = *(void *)(v23 + 24) + 1;
          }
          else {
            uint64_t v25 = 0;
          }
          if (v24 != v25) {
            goto LABEL_56;
          }
          char v26 = 0;
          uint64_t v27 = v110;
          unint64_t v28 = (uint64_t *)(v23 + 16);
          BOOL v29 = v108 && v108 == *(_DWORD *)v23;
          BOOL v30 = !v29;
          while (1)
          {
            uint64_t v31 = *v28;
            if ((v26 & 1) == 0 && v30) {
              break;
            }
            if ((uint64_t *)v27 == &v109) {
              goto LABEL_55;
            }
            if (*(_DWORD *)(v27 + 16) != *(_DWORD *)(v31 + 16)) {
              goto LABEL_56;
            }
            uint64_t v27 = *(void *)(v27 + 8);
            unint64_t v28 = (uint64_t *)(v31 + 8);
            char v26 = 1;
          }
          if (v108) {
            goto LABEL_56;
          }
LABEL_55:
          float v105 = v112;
          float v102 = 0.0;
          float v102 = *(float *)(v23 + 32);
          if (v112 != v102)
          {
LABEL_56:
            if (!a3)
            {
              fst::Times<int,(fst::StringType)0>((int *)&v114, (uint64_t)&v108, (uint64_t)&v128);
              float v32 = NAN;
              if (v117 != -INFINITY)
              {
                float v32 = NAN;
                if (v112 != -INFINITY)
                {
                  float v32 = INFINITY;
                  if (v112 != INFINITY && v117 != INFINITY) {
                    float v32 = v117 + v112;
                  }
                }
              }
              fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v102, (int *)&v128, v32);
              std::__list_imp<char *>::clear(v129);
              fst::DivideLeft<int,(fst::StringType)0>((int *)&v102, &v120, (uint64_t)&v128);
              float v34 = NAN;
              if (v104 != -INFINITY)
              {
                if ((LODWORD(v124) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
                {
                  float v34 = INFINITY;
                  if (v104 != INFINITY) {
                    float v34 = v104 - v124;
                  }
                }
                else
                {
                  float v34 = NAN;
                }
              }
              fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v105, (int *)&v128, v34);
              std::__list_imp<char *>::clear(v129);
              *(float *)&uint64_t v114 = v105;
              std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v115, v106[1], (uint64_t)v106);
              float v117 = v107;
              std::__list_imp<char *>::clear(v106);
              std::__list_imp<char *>::clear(v103);
            }
            (*(void (**)(uint64_t, void **))(*(void *)v119 + 88))(v119, &v113);
          }
          std::__list_imp<char *>::clear(&v109);
        }
        std::__list_imp<char *>::clear(v115);
        (*(void (**)(uint64_t))(*(void *)v119 + 40))(v119);
      }
      if (v119) {
        (*(void (**)(uint64_t))(*(void *)v119 + 8))(v119);
      }
      if (!a3)
      {
        (*(void (**)(void **__return_ptr))(*a1 + 32))(&v113);
        fst::DivideLeft<int,(fst::StringType)0>((int *)&v113, &v120, (uint64_t)&v108);
        float v35 = NAN;
        if (v116 != -INFINITY)
        {
          if ((LODWORD(v124) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
          {
            float v35 = INFINITY;
            if (v116 != INFINITY) {
              float v35 = v116 - v124;
            }
          }
          else
          {
            float v35 = NAN;
          }
        }
        fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)v100, (int *)&v108, v35);
        std::__list_imp<char *>::clear(&v109);
        (*(void (**)(uint64_t *, uint64_t, unsigned char *))(*a1 + 184))(a1, v9, v100);
        std::__list_imp<char *>::clear(v101);
        std::__list_imp<char *>::clear(&v114);
      }
    }
    std::__list_imp<char *>::clear(&v121);
    if (v125) {
      (*(void (**)(uint64_t))(*(void *)v125 + 32))(v125);
    }
    else {
      ++v127;
    }
  }
  while (1)
  {
LABEL_91:
    if (!v125)
    {
      if (v127 >= v126) {
        break;
      }
      goto LABEL_88;
    }
    if ((*(uint64_t (**)(uint64_t))(*(void *)v125 + 16))(v125)) {
      break;
    }
    if (!v125) {
      goto LABEL_90;
    }
    (*(void (**)(uint64_t))(*(void *)v125 + 24))(v125);
LABEL_88:
    if (v125) {
      (*(void (**)(uint64_t))(*(void *)v125 + 32))(v125);
    }
    else {
LABEL_90:
    }
      ++v127;
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2[1] - *a2) >> 3) <= (*(int (**)(uint64_t *))(*a1 + 24))(a1)) {
    uint64_t v36 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Zero();
  }
  else {
    uint64_t v36 = *a2 + 40 * (*(int (**)(uint64_t *))(*a1 + 24))(a1);
  }
  int v120 = *(_DWORD *)v36;
  std::list<int>::list(&v121, v36 + 8);
  float v124 = *(float *)(v36 + 32);
  uint64_t v37 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::One();
  uint64_t v39 = a1;
  if (v120) {
    uint64_t v40 = v123 + 1;
  }
  else {
    uint64_t v40 = 0;
  }
  if (*(_DWORD *)v37) {
    uint64_t v41 = *(void *)(v37 + 24) + 1;
  }
  else {
    uint64_t v41 = 0;
  }
  if (v40 != v41) {
    goto LABEL_127;
  }
  char v42 = 0;
  uint64_t v43 = v122;
  int v44 = (uint64_t *)(v37 + 16);
  BOOL v45 = v120 && v120 == *(_DWORD *)v37;
  BOOL v46 = !v45;
  int v47 = !v46;
  while (1)
  {
    uint64_t v48 = *v44;
    if ((v42 & 1) == 0 && !v47) {
      break;
    }
    if ((uint64_t *)v43 == &v121) {
      goto LABEL_126;
    }
    if (*(_DWORD *)(v43 + 16) != *(_DWORD *)(v48 + 16)) {
      goto LABEL_127;
    }
    uint64_t v43 = *(void *)(v43 + 8);
    int v44 = (uint64_t *)(v48 + 8);
    char v42 = 1;
  }
  if (v120) {
    goto LABEL_127;
  }
LABEL_126:
  *(float *)&float v113 = v124;
  LODWORD(v108) = 0;
  LODWORD(v108) = *(_DWORD *)(v37 + 32);
  v38.n128_f32[0] = v124;
  if (v124 != *(float *)&v108)
  {
LABEL_127:
    uint64_t v55 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Zero();
    if (v120) {
      uint64_t v56 = v123 + 1;
    }
    else {
      uint64_t v56 = 0;
    }
    if (*(_DWORD *)v55) {
      uint64_t v57 = *(void *)(v55 + 24) + 1;
    }
    else {
      uint64_t v57 = 0;
    }
    if (v56 != v57) {
      goto LABEL_148;
    }
    char v58 = 0;
    uint64_t v59 = v122;
    uint64_t v60 = (uint64_t *)(v55 + 16);
    BOOL v61 = v120 && v120 == *(_DWORD *)v55;
    BOOL v62 = !v61;
    int v63 = !v62;
    while (1)
    {
      uint64_t v64 = *v60;
      if ((v58 & 1) == 0 && !v63) {
        break;
      }
      if ((uint64_t *)v59 == &v121) {
        goto LABEL_147;
      }
      if (*(_DWORD *)(v59 + 16) != *(_DWORD *)(v64 + 16)) {
        goto LABEL_148;
      }
      uint64_t v59 = *(void *)(v59 + 8);
      uint64_t v60 = (uint64_t *)(v64 + 8);
      char v58 = 1;
    }
    if (v120) {
      goto LABEL_148;
    }
LABEL_147:
    *(float *)&float v113 = v124;
    LODWORD(v108) = 0;
    LODWORD(v108) = *(_DWORD *)(v55 + 32);
    v38.n128_f32[0] = v124;
    if (v124 != *(float *)&v108)
    {
LABEL_148:
      uint64_t v65 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 64))(a1, 0x2000000000, 1);
      uint64_t v66 = *a1;
      if ((v65 & 0x2000000000) != 0)
      {
        unsigned int v92 = (*(uint64_t (**)(uint64_t *))(v66 + 24))(a1);
        (*(void (**)(uint64_t *))(*a1 + 296))(a1);
        while (!(*(unsigned int (**)(uint64_t))(*(void *)v128 + 24))(v128))
        {
          uint64_t v71 = (*(uint64_t (**)(uint64_t))(*(void *)v128 + 32))(v128);
          float v113 = *(void **)v71;
          LODWORD(v114) = *(_DWORD *)(v71 + 8);
          std::list<int>::list(v115, v71 + 16);
          int v72 = *(_DWORD *)(v71 + 48);
          float v117 = *(float *)(v71 + 40);
          int v118 = v72;
          if (a3)
          {
            uint64_t v73 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::One();
            fst::Divide<int>((int *)v73, &v120, 1, (uint64_t)&v102);
            float v74 = *(float *)(v73 + 32);
            float v75 = NAN;
            if (v74 != -INFINITY)
            {
              if ((LODWORD(v124) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
              {
                float v75 = INFINITY;
                if (v74 != INFINITY) {
                  float v75 = v74 - v124;
                }
              }
              else
              {
                float v75 = NAN;
              }
            }
            fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v105, (int *)&v102, v75);
            std::__list_imp<char *>::clear(v103);
            fst::Times<int,(fst::StringType)0>((int *)&v105, (uint64_t)&v114, (uint64_t)&v102);
            float v79 = NAN;
            if (v107 != -INFINITY)
            {
              float v79 = NAN;
              if (v117 != -INFINITY)
              {
                float v79 = INFINITY;
                if (v117 != INFINITY && v107 != INFINITY) {
                  float v79 = v107 + v117;
                }
              }
            }
            fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v108, (int *)&v102, v79);
            std::__list_imp<char *>::clear(v103);
            LODWORD(v114) = v108;
            std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v115, v110, (uint64_t)&v109);
            float v117 = v112;
            std::__list_imp<char *>::clear(&v109);
            int v78 = v106;
          }
          else
          {
            fst::Times<int,(fst::StringType)0>(&v120, (uint64_t)&v114, (uint64_t)&v105);
            float v76 = NAN;
            if (v124 != -INFINITY)
            {
              float v76 = NAN;
              if (v117 != -INFINITY)
              {
                float v76 = INFINITY;
                if (v117 != INFINITY && v124 != INFINITY) {
                  float v76 = v124 + v117;
                }
              }
            }
            fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v108, (int *)&v105, v76);
            std::__list_imp<char *>::clear(v106);
            LODWORD(v114) = v108;
            std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v115, v110, (uint64_t)&v109);
            float v117 = v112;
            int v78 = &v109;
          }
          std::__list_imp<char *>::clear(v78);
          (*(void (**)(uint64_t, void **))(*(void *)v128 + 88))(v128, &v113);
          std::__list_imp<char *>::clear(v115);
          (*(void (**)(uint64_t))(*(void *)v128 + 40))(v128);
        }
        if (v128) {
          (*(void (**)(uint64_t))(*(void *)v128 + 8))(v128);
        }
        uint64_t v39 = a1;
        if (a3)
        {
          uint64_t v81 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::One();
          fst::Divide<int>((int *)v81, &v120, 1, (uint64_t)&v108);
          float v82 = *(float *)(v81 + 32);
          float v83 = NAN;
          if (v82 != -INFINITY)
          {
            if ((LODWORD(v124) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
            {
              float v83 = INFINITY;
              if (v82 != INFINITY) {
                float v83 = v82 - v124;
              }
            }
            else
            {
              float v83 = NAN;
            }
          }
          fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v113, (int *)&v108, v83);
          std::__list_imp<char *>::clear(&v109);
          (*(void (**)(uint64_t *__return_ptr, uint64_t *, void))(*a1 + 32))(&v108, a1, v92);
          fst::Times<int,(fst::StringType)0>((int *)&v113, (uint64_t)&v108, (uint64_t)&v105);
          float v87 = NAN;
          if (v116 != -INFINITY)
          {
            float v87 = NAN;
            if (v112 != -INFINITY)
            {
              float v87 = INFINITY;
              if (v112 != INFINITY && v116 != INFINITY) {
                float v87 = v116 + v112;
              }
            }
          }
          fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)v96, (int *)&v105, v87);
          std::__list_imp<char *>::clear(v106);
          (*(void (**)(uint64_t *, void, unsigned char *))(*a1 + 184))(a1, v92, v96);
          std::__list_imp<char *>::clear(v97);
          uint64_t v84 = &v109;
        }
        else
        {
          (*(void (**)(void **__return_ptr, uint64_t *, void))(*a1 + 32))(&v113, a1, v92);
          fst::Times<int,fst::LogWeightTpl<float>,(fst::GallicType)0>((uint64_t)&v120, (uint64_t)&v113, (uint64_t)v98);
          (*(void (**)(uint64_t *, void, unsigned char *))(*a1 + 184))(a1, v92, v98);
          uint64_t v84 = &v99;
        }
        std::__list_imp<char *>::clear(v84);
        BOOL v86 = &v114;
      }
      else
      {
        uint64_t v67 = (*(uint64_t (**)(uint64_t *))(v66 + 200))(a1);
        if (a3)
        {
          uint64_t v68 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::One();
          fst::Divide<int>((int *)v68, &v120, 1, (uint64_t)&v113);
          float v69 = *(float *)(v68 + 32);
          float v70 = NAN;
          if (v69 != -INFINITY)
          {
            if ((LODWORD(v124) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
            {
              float v70 = INFINITY;
              if (v69 != INFINITY) {
                float v70 = v69 - v124;
              }
            }
            else
            {
              float v70 = NAN;
            }
          }
          fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v108, (int *)&v113, v70);
          std::__list_imp<char *>::clear(&v114);
        }
        else
        {
          LODWORD(v108) = v120;
          std::list<int>::list(&v109, (uint64_t)&v121);
          float v112 = v124;
        }
        int v93 = v108;
        std::list<int>::list(v94, (uint64_t)&v109);
        float v95 = v112;
        int v85 = (*(uint64_t (**)(uint64_t *))(*a1 + 24))(a1);
        float v113 = 0;
        LODWORD(v114) = v93;
        std::list<int>::list(v115, (uint64_t)v94);
        float v117 = v95;
        int v118 = v85;
        std::__list_imp<char *>::clear(v94);
        uint64_t v39 = a1;
        (*(void (**)(uint64_t *, uint64_t, void **))(*a1 + 208))(a1, v67, &v113);
        (*(void (**)(uint64_t *, uint64_t))(*v39 + 176))(v39, v67);
        std::__list_imp<char *>::clear(v115);
        BOOL v86 = &v109;
      }
      std::__list_imp<char *>::clear(v86);
    }
  }
  unint64_t v89 = (*(uint64_t (**)(uint64_t *, uint64_t, void, __n128))(*v39 + 64))(v39, 0x3FFFFFFF0007, 0, v38);
  unint64_t v90 = fst::ReweightProperties(v89);
  (*(void (**)(uint64_t *, unint64_t, uint64_t))(*v39 + 192))(v39, v90, 0x3FFFFFFF0007);
  std::__list_imp<char *>::clear(&v121);
  uint64_t result = v125;
  if (v125) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v125 + 8))(v125);
  }
  return result;
}

void sub_1B22C6064(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear((void *)(v1 + 8));
  std::__list_imp<char *>::clear((void *)(v3 - 240));
  std::__list_imp<char *>::clear(v2);
  uint64_t v5 = *(void *)(v3 - 144);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  _Unwind_Resume(a1);
}

void *fst::RemoveWeight<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result = (void *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::One();
  int v7 = *(_DWORD *)a2;
  if (*(_DWORD *)a2) {
    uint64_t v8 = *(void *)(a2 + 24) + 1;
  }
  else {
    uint64_t v8 = 0;
  }
  if (*(_DWORD *)result) {
    uint64_t v9 = result[3] + 1;
  }
  else {
    uint64_t v9 = 0;
  }
  if (v8 == v9)
  {
    char v10 = 0;
    uint64_t v11 = (uint64_t *)(a2 + 16);
    uint64_t v12 = result + 2;
    if (v7) {
      BOOL v13 = v7 == *(_DWORD *)result;
    }
    else {
      BOOL v13 = 0;
    }
    int v14 = !v13;
    int v15 = v14 ^ 1;
    while (1)
    {
      uint64_t v16 = *v11;
      uint64_t v17 = *v12;
      if ((v10 & 1) == 0 && !v15) {
        break;
      }
      if (v16 == a2 + 8) {
        goto LABEL_21;
      }
      if (*(_DWORD *)(v16 + 16) != *(_DWORD *)(v17 + 16)) {
        goto LABEL_22;
      }
      uint64_t v11 = (uint64_t *)(v16 + 8);
      uint64_t v12 = (uint64_t *)(v17 + 8);
      char v10 = 1;
    }
    if (v7) {
      goto LABEL_22;
    }
LABEL_21:
    LODWORD(v43) = 0;
    LODWORD(v43) = *(_DWORD *)(a2 + 32);
    float v40 = 0.0;
    float v40 = *((float *)result + 8);
    if (*(float *)&v43 == v40) {
      return result;
    }
  }
LABEL_22:
  uint64_t result = (void *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Zero();
  int v18 = *(_DWORD *)a2;
  if (*(_DWORD *)a2) {
    uint64_t v19 = *(void *)(a2 + 24) + 1;
  }
  else {
    uint64_t v19 = 0;
  }
  if (*(_DWORD *)result) {
    uint64_t v20 = result[3] + 1;
  }
  else {
    uint64_t v20 = 0;
  }
  if (v19 == v20)
  {
    char v21 = 0;
    uint64_t v22 = (uint64_t *)(a2 + 16);
    uint64_t v23 = result + 2;
    if (v18) {
      BOOL v24 = v18 == *(_DWORD *)result;
    }
    else {
      BOOL v24 = 0;
    }
    int v25 = !v24;
    int v26 = v25 ^ 1;
    while (1)
    {
      uint64_t v27 = *v22;
      uint64_t v28 = *v23;
      if ((v21 & 1) == 0 && !v26) {
        break;
      }
      if (v27 == a2 + 8) {
        goto LABEL_42;
      }
      if (*(_DWORD *)(v27 + 16) != *(_DWORD *)(v28 + 16)) {
        goto LABEL_43;
      }
      uint64_t v22 = (uint64_t *)(v27 + 8);
      uint64_t v23 = (uint64_t *)(v28 + 8);
      char v21 = 1;
    }
    if (v18) {
      goto LABEL_43;
    }
LABEL_42:
    LODWORD(v43) = 0;
    LODWORD(v43) = *(_DWORD *)(a2 + 32);
    float v40 = 0.0;
    float v40 = *((float *)result + 8);
    if (*(float *)&v43 == v40) {
      return result;
    }
  }
LABEL_43:
  if (a3)
  {
    unsigned int v54 = 0;
    (*(void (**)(uint64_t, void **))(*(void *)a1 + 128))(a1, &v52);
    while (1)
    {
      uint64_t result = v52;
      if (!v52) {
        break;
      }
      int v29 = (*(uint64_t (**)(void *))(*v52 + 16))(v52);
      uint64_t result = v52;
      if (v29)
      {
        if (v52) {
          return (void *)(*(uint64_t (**)(void))(*v52 + 8))();
        }
        return result;
      }
      if (!v52) {
        goto LABEL_51;
      }
      uint64_t v30 = (*(uint64_t (**)(void))(*v52 + 24))();
      if (v52) {
        uint64_t v31 = (*(uint64_t (**)(void *))(*v52 + 24))(v52);
      }
      else {
        uint64_t v31 = v54;
      }
LABEL_52:
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(&v43, a1, v31);
      fst::Divide<int>((int *)&v43, (int *)a2, 1, (uint64_t)&v40);
      float v32 = NAN;
      if (v46 != -INFINITY)
      {
        if ((*(_DWORD *)(a2 + 32) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
        {
          float v32 = INFINITY;
          if (v46 != INFINITY) {
            float v32 = v46 - *(float *)(a2 + 32);
          }
        }
        else
        {
          float v32 = NAN;
        }
      }
      fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)v50, (int *)&v40, v32);
      std::__list_imp<char *>::clear(v41);
      (*(void (**)(uint64_t, uint64_t, unsigned char *))(*(void *)a1 + 184))(a1, v30, v50);
      std::__list_imp<char *>::clear(v51);
      std::__list_imp<char *>::clear(&v44);
      if (v52) {
        (*(void (**)(void *))(*v52 + 32))(v52);
      }
      else {
        ++v54;
      }
    }
    if ((int)v54 >= (int)v53) {
      return result;
    }
LABEL_51:
    uint64_t v30 = v54;
    uint64_t v31 = v54;
    goto LABEL_52;
  }
  uint64_t v33 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 296))(a1, v33, &v49);
  while (!(*(unsigned int (**)(uint64_t))(*(void *)v49 + 24))(v49))
  {
    uint64_t v34 = (*(uint64_t (**)(uint64_t))(*(void *)v49 + 32))(v49);
    uint64_t v43 = *(void *)v34;
    LODWORD(v44) = *(_DWORD *)(v34 + 8);
    std::list<int>::list(v45, v34 + 16);
    int v35 = *(_DWORD *)(v34 + 48);
    float v47 = *(float *)(v34 + 40);
    int v48 = v35;
    fst::DivideLeft<int,(fst::StringType)0>((int *)&v44, (int *)a2, (uint64_t)&v52);
    float v36 = NAN;
    if (v47 != -INFINITY)
    {
      if ((*(_DWORD *)(a2 + 32) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
      {
        float v36 = INFINITY;
        if (v47 != INFINITY) {
          float v36 = v47 - *(float *)(a2 + 32);
        }
      }
      else
      {
        float v36 = NAN;
      }
    }
    fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v40, (int *)&v52, v36);
    std::__list_imp<char *>::clear(&v53);
    *(float *)&uint64_t v44 = v40;
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v45, v41[1], (uint64_t)v41);
    float v47 = v42;
    std::__list_imp<char *>::clear(v41);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v49 + 88))(v49, &v43);
    std::__list_imp<char *>::clear(v45);
    (*(void (**)(uint64_t))(*(void *)v49 + 40))(v49);
  }
  if (v49) {
    (*(void (**)(uint64_t))(*(void *)v49 + 8))(v49);
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(&v43, a1, v33);
  fst::DivideLeft<int,(fst::StringType)0>((int *)&v43, (int *)a2, (uint64_t)&v40);
  float v37 = NAN;
  if (v46 != -INFINITY)
  {
    if ((*(_DWORD *)(a2 + 32) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
    {
      float v37 = INFINITY;
      if (v46 != INFINITY) {
        float v37 = v46 - *(float *)(a2 + 32);
      }
    }
    else
    {
      float v37 = NAN;
    }
  }
  fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v38, (int *)&v40, v37);
  std::__list_imp<char *>::clear(v41);
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 184))(a1, v33, &v38);
  std::__list_imp<char *>::clear(v39);
  return std::__list_imp<char *>::clear(&v44);
}

void sub_1B22C6A34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  std::__list_imp<char *>::clear((void *)(v12 + 8));
  std::__list_imp<char *>::clear(va);
  _Unwind_Resume(a1);
}

void fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::VectorFst()
{
}

void sub_1B22C6B94(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

void fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::~VectorFst(void *a1)
{
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::~ImplToFst(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::Start(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 8) + 88);
}

void *fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t v4 = *(_DWORD **)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2);
  *(_DWORD *)a3 = *v4;
  uint64_t result = std::list<int>::list((void *)(a3 + 8), (uint64_t)(v4 + 2));
  *(_DWORD *)(a3 + 32) = v4[8];
  return result;
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::NumArcs(uint64_t a1, int a2)
{
  return 0x6DB6DB6DB6DB6DB7
       * ((uint64_t)(*(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 64)
                  - *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 56)) >> 3);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 40);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 48);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = fst::TestProperties<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    int v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return v7();
  }
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::Type(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

void fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::GetArcs(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
}

void fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::Copy()
{
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::InitStateIterator(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 8) = (*(void *)(v2 + 72) - *(void *)(v2 + 64)) >> 3;
  return result;
}

uint64_t fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::InitArcIterator(uint64_t result, int a2, void *a3)
{
  uint64_t v3 = *(void *)(result + 8);
  *a3 = 0;
  unint64_t v5 = (uint64_t *)(*(void *)(*(void *)(v3 + 64) + 8 * a2) + 56);
  uint64_t v4 = *v5;
  uint64_t v6 = 0x6DB6DB6DB6DB6DB7 * ((v5[1] - *v5) >> 3);
  if (v5[1] == *v5) {
    uint64_t v4 = 0;
  }
  a3[1] = v4;
  a3[2] = v6;
  a3[3] = 0;
  return result;
}

uint64_t fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::IsMemoryMapped()
{
  return 0;
}

uint64_t fst::ImplToExpandedFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::NumStates(uint64_t a1)
{
  return (*(void *)(*(void *)(a1 + 8) + 72) - *(void *)(*(void *)(a1 + 8) + 64)) >> 3;
}

uint64_t fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::operator=(uint64_t result, uint64_t a2)
{
  if (result != a2) {
    operator new();
  }
  return result;
}

void sub_1B22C6F38(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

unint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::SetStart(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::MutateCheck(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  *(_DWORD *)(v4 + 88) = a2;
  unint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
  *(void *)(v4 + 8) = result & 0xCCFFFFF0007 | (((result >> 35) & 1) << 37) | *(void *)(v4 + 8) & 4;
  return result;
}

void *fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::SetFinal(uint64_t a1, int a2, int *a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::MutateCheck(a1);
  uint64_t v6 = *(void **)(a1 + 8);
  int v8 = *a3;
  std::list<int>::list(v9, (uint64_t)(a3 + 2));
  int v10 = a3[8];
  fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::SetFinal(v6, a2, &v8);
  return std::__list_imp<char *>::clear(v9);
}

void sub_1B22C7058(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::SetProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a3 & 4;
  uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), v6);
  if (result != (v6 & a2)) {
    uint64_t result = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::MutateCheck(a1);
  }
  *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~a3 | 4) | a3 & a2;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::AddState(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::MutateCheck(a1);
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::AddState(v2);
  v2[1] = v2[1] & 4 | (*(uint64_t (**)(void *))(*v2 + 24))(v2) & 0x2AFFFFFF0007;
  return v3;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::AddArc(uint64_t a1, int a2, int *a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::MutateCheck(a1);
  uint64_t v6 = *(void **)(a1 + 8);
  return fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::AddArc(v6, a2, a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::DeleteStates(uint64_t a1, char **a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::MutateCheck(a1);
  uint64_t v4 = *(void **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::DeleteStates((uint64_t)v4, a2);
  uint64_t result = (*(uint64_t (**)(void *))(*v4 + 24))(v4);
  v4[1] = v4[1] & 4 | result & 0x6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::DeleteStates(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::MutateCheck(a1);
  uint64_t v2 = *(void **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::DeleteStates((uint64_t)v2);
  uint64_t result = (*(uint64_t (**)(void *))(*v2 + 24))(v2);
  v2[1] = (*((_DWORD *)v2 + 2) | result) & 4 | 0x156A5A950003;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::DeleteArcs(uint64_t a1, int a2, uint64_t a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::MutateCheck(a1);
  uint64_t v6 = *(void **)(a1 + 8);
  fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::DeleteArcs(*(void **)(v6[8] + 8 * a2), a3);
  uint64_t result = (*(uint64_t (**)(void *))(*v6 + 24))(v6);
  v6[1] = v6[1] & 4 | result & 0xA6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::DeleteArcs(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::MutateCheck(a1);
  uint64_t v4 = *(void **)(a1 + 8);
  return fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::DeleteArcs(v4, a2);
}

void fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::ReserveStates(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::MutateCheck(a1);
  uint64_t v4 = (void **)(*(void *)(a1 + 8) + 64);
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve(v4, a2);
}

uint64_t fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::ReserveArcs(uint64_t a1, int a2, unint64_t a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::MutateCheck(a1);
  uint64_t v6 = (uint64_t *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 56);
  return std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::reserve(v6, a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::MutableInputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::MutableOutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::SetInputSymbols(uint64_t a1, uint64_t a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::MutateCheck(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  return fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetInputSymbols(v4, a2);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::SetOutputSymbols(uint64_t a1, uint64_t a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::MutateCheck(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  return fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetOutputSymbols(v4, a2);
}

void fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::InitMutableArcIterator()
{
}

void sub_1B22C7598(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B1C402DF695F1);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::VectorFstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A3FE30;
  *(void *)(a1 + 8) = 0;
  uint64_t v2 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(void *)a1 = &unk_1F0A3A560;
  std::string::basic_string[abi:ne180100]<0>(&__str, "vector");
  std::string::operator=(v2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 8) = *(void *)(a1 + 8) & 4 | 0x156A5A950003;
  return a1;
}

void sub_1B22C7698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::~VectorFstBaseImpl(v15);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::~VectorFstBaseImpl(void *a1)
{
  *a1 = &unk_1F0A3D360;
  uint64_t v2 = (void *)a1[9];
  if (v2 != (void *)a1[8])
  {
    unint64_t v3 = 0;
    uint64_t v2 = (void *)a1[8];
    do
    {
      fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Destroy(v2[v3++]);
      uint64_t v2 = (void *)a1[8];
    }
    while (v3 < (uint64_t)(a1[9] - (void)v2) >> 3);
  }
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  return fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::~FstImpl((uint64_t)a1);
}

void fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::~VectorFstImpl(void *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::HasSequentialStates()
{
  return 1;
}

uint64_t fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::Properties(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::Properties(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 8) & a2;
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::~VectorFstBaseImpl(void *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::~FstImpl(uint64_t a1)
{
  fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::~FstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::~FstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A3FE30;
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

uint64_t fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::Write(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  uint64_t v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  uint64_t v3 = (void *)fst::cerr(v2);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write stream method for ", 39);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
  int v6 = *(char *)(v5 + 23);
  if (v6 >= 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = *(void *)v5;
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    uint64_t v8 = *(void *)(v5 + 8);
  }
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

{
  fst *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *__p[2];
  char v12;
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  uint64_t v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  uint64_t v3 = (void *)fst::cerr(v2);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write filename method for ", 41);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
  int v6 = *(char *)(v5 + 23);
  if (v6 >= 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = *(void *)v5;
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    uint64_t v8 = *(void *)(v5 + 8);
  }
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_1B22C79AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B22C7AA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::operator=(uint64_t a1)
{
  if (FLAGS_fst_error_fatal) {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
  }
  else {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  }
  uint64_t v2 = fst::LogMessage::LogMessage((fst *)&v7, (uint64_t)__p);
  uint64_t v3 = (void *)fst::cerr(v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"ImplToFst: Assignment operator disallowed", 41);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *(void *)(*(void *)(a1 + 8) + 8) |= 4uLL;
  return a1;
}

void sub_1B22C7BAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::MutateCheck(uint64_t result)
{
  if (*(int *)(*(void *)(result + 8) + 56) >= 2) {
    operator new();
  }
  return result;
}

void sub_1B22C7C78(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::VectorFstImpl(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A3FE30;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)(a1 + 64) = 0;
  uint64_t v5 = (void *)(a1 + 64);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(void *)a1 = &unk_1F0A3A560;
  std::string::basic_string[abi:ne180100]<0>(&__str, "vector");
  std::string::operator=(v4, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetInputSymbols(a1, v6);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 120))(a2);
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetOutputSymbols(a1, v7);
  *(_DWORD *)(a1 + 88) = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 1, 0))
  {
    int v8 = fst::CountStates<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>(a2);
    std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(a1 + 64), v8);
  }
  unsigned int v20 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 128))(a2, &v18);
  while (1)
  {
    if (!v18)
    {
      if ((int)v20 >= v19) {
        goto LABEL_31;
      }
LABEL_11:
      uint64_t v9 = v20;
      goto LABEL_12;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v18 + 16))(v18)) {
      break;
    }
    if (!v18) {
      goto LABEL_11;
    }
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 24))(v18);
LABEL_12:
    fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::AddState((void *)a1);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a2 + 32))(&v16, a2, v9);
    fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::SetFinal(a1, v9, (int *)&v16);
    std::__list_imp<char *>::clear(v17);
    unint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, v9);
    std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::reserve((uint64_t *)(*(void *)(*v5 + 8 * (int)v9) + 56), v10);
    std::string::size_type v15 = 0;
    (*(void (**)(uint64_t, uint64_t, std::string *))(*(void *)a2 + 136))(a2, v9, &__str);
    while (1)
    {
      if (!__str.__r_.__value_.__r.__words[0])
      {
        if (v15 >= __str.__r_.__value_.__r.__words[2]) {
          goto LABEL_24;
        }
LABEL_18:
        uint64_t v11 = (_DWORD *)(__str.__r_.__value_.__l.__size_ + 56 * v15);
        goto LABEL_19;
      }
      if ((*(unsigned int (**)(std::string::size_type))(*(void *)__str.__r_.__value_.__l.__data_ + 24))(__str.__r_.__value_.__r.__words[0])) {
        break;
      }
      if (!__str.__r_.__value_.__r.__words[0]) {
        goto LABEL_18;
      }
      uint64_t v11 = (_DWORD *)(*(uint64_t (**)(void))(*(void *)__str.__r_.__value_.__l.__data_ + 32))();
LABEL_19:
      fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::AddArc(*(void **)(*v5 + 8 * (int)v9), v11);
      if (__str.__r_.__value_.__r.__words[0]) {
        (*(void (**)(std::string::size_type))(*(void *)__str.__r_.__value_.__l.__data_ + 40))(__str.__r_.__value_.__r.__words[0]);
      }
      else {
        ++v15;
      }
    }
    if (__str.__r_.__value_.__r.__words[0])
    {
      (*(void (**)(void))(*(void *)__str.__r_.__value_.__l.__data_ + 8))();
      goto LABEL_26;
    }
LABEL_24:
    if (v14) {
      --*v14;
    }
LABEL_26:
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 32))(v18);
    }
    else {
      ++v20;
    }
  }
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
LABEL_31:
  *(void *)(a1 + 8) = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x3FFFFFFF0004, 0) | *(void *)(a1 + 8) & 4 | 3;
  return a1;
}

void sub_1B22C8190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::~VectorFstBaseImpl(v16);
  _Unwind_Resume(a1);
}

uint64_t fst::CountStates<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>(uint64_t a1)
{
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 1, 0))
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 160);
    return v2(a1);
  }
  int v7 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v5);
  uint64_t v4 = 0;
  while (1)
  {
    while (!v5)
    {
      if (v7 >= v6) {
        return v4;
      }
      uint64_t v4 = (v4 + 1);
LABEL_12:
      ++v7;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 16))(v5)) {
      break;
    }
    uint64_t v4 = (v4 + 1);
    if (!v5) {
      goto LABEL_12;
    }
    (*(void (**)(void))(*(void *)v5 + 32))();
  }
  if (v5) {
    (*(void (**)(void))(*(void *)v5 + 8))();
  }
  return v4;
}

void sub_1B22C83E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    fst::CountStates<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>();
  }
  _Unwind_Resume(exception_object);
}

void *fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::SetFinal(uint64_t a1, int a2, int *a3)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 64) + 8 * a2);
  int v7 = *a3;
  std::list<int>::list(v8, (uint64_t)(a3 + 2));
  int v5 = a3[8];
  int v9 = v5;
  *(_DWORD *)uint64_t v4 = v7;
  if ((int *)v4 != &v7)
  {
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v4 + 8), v8[1], (uint64_t)v8);
    int v5 = v9;
  }
  *(_DWORD *)(v4 + 32) = v5;
  return std::__list_imp<char *>::clear(v8);
}

void sub_1B22C848C(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x492492492492493) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>>(result, a2);
    v7[1] = v7[0] + v5;
    _DWORD v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 56 * v6;
    std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1B22C854C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>*>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>*>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>*>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>*>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = a7 + v11;
      *(void *)(v12 - 56) = *(void *)(a3 + v11 - 56);
      *(_DWORD *)(v12 - 48) = *(_DWORD *)(a3 + v11 - 48);
      std::list<int>::list((void *)(a7 + v11 - 40), a3 + v11 - 40);
      *(_DWORD *)(v12 - 16) = *(_DWORD *)(a3 + v11 - 16);
      *(_DWORD *)(v12 - 8) = *(_DWORD *)(a3 + v11 - 8);
      v11 -= 56;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_1B22C8678(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 + 16;
    do
    {
      std::__list_imp<char *>::clear((void *)(v4 + v2));
      v2 += 56;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::AddArc(void *a1, _DWORD *a2)
{
  if (!*a2) {
    ++a1[5];
  }
  if (!a2[1]) {
    ++a1[6];
  }
  uint64_t v3 = a1 + 7;
  unint64_t v4 = a1[8];
  if (v4 >= a1[9])
  {
    uint64_t result = std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::__push_back_slow_path<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0> const&>(v3, (uint64_t)a2);
  }
  else
  {
    std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::__construct_one_at_end[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0> const&>((uint64_t)v3, (uint64_t)a2);
    uint64_t result = v4 + 56;
  }
  a1[8] = result;
  return result;
}

void *std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::__construct_one_at_end[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)uint64_t v4 = *(void *)a2;
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t result = std::list<int>::list((void *)(v4 + 16), a2 + 16);
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(v4 + 48) = *(_DWORD *)(a2 + 48);
  *(void *)(a1 + 8) = v4 + 56;
  return result;
}

void sub_1B22C876C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::__push_back_slow_path<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x249249249249249) {
    unint64_t v9 = 0x492492492492492;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v18 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  uint64_t v11 = &v10[56 * v4];
  v15[0] = v10;
  v15[1] = v11;
  uint64_t v16 = v11;
  uint64_t v17 = &v10[56 * v9];
  *(void *)uint64_t v11 = *(void *)a2;
  *((_DWORD *)v11 + 2) = *(_DWORD *)(a2 + 8);
  std::list<int>::list((void *)v11 + 2, a2 + 16);
  uint64_t v12 = &v10[56 * v4];
  *((_DWORD *)v12 + 10) = *(_DWORD *)(a2 + 40);
  *((_DWORD *)v12 + 12) = *(_DWORD *)(a2 + 48);
  v16 += 56;
  std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::__swap_out_circular_buffer(a1, v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_1B22C88AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t fst::TestProperties<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (FLAGS_fst_verify_properties)
  {
    unint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    unint64_t v7 = fst::ComputeProperties<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>(a1, a2, a3, 0);
    if (!fst::CompatProperties(v6, v7))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      unint64_t v8 = fst::LogMessage::LogMessage((fst *)&v14, (uint64_t)__p);
      unint64_t v9 = (void *)fst::cerr(v8);
      unint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"TestProperties: stored Fst properties incorrect", 47);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" (stored: props1, computed: props2)", 35);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v14);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }
    return v7;
  }
  else
  {
    return fst::ComputeProperties<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>(a1, a2, a3, 1);
  }
}

void sub_1B22C89F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t fst::ComputeProperties<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  unint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  unint64_t v8 = v7;
  if (!a4
    || (uint64_t v9 = v7 & 0x3FFFFFFF0000 | (2 * v7) & 0x2AAAAAAA0000 | (v7 >> 1) & 0x155555550000 | 7, (a2 & ~v9) != 0))
  {
    unint64_t v8 = v7 & 7;
    unint64_t v116 = v8;
    int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    if ((a2 & 0xF3C00000000) != 0 && v10)
    {
      uint64_t v109 = 0;
      uint64_t v110 = 0;
      uint64_t v111 = 0;
      float v112 = (uint64_t *)&v116;
      fst::DfsVisit<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>(a1, (uint64_t)&v109);
    }
    if ((a2 & 0xFFFFF0C3FFFFFFF8) == 0) {
      goto LABEL_211;
    }
    uint64_t v11 = a2 & 0xC0000;
    uint64_t v12 = 0x10425A810000;
    if ((a2 & 0xC0000) != 0) {
      uint64_t v12 = 0x10425A850000;
    }
    unint64_t v13 = v8 | v12;
    uint64_t v14 = a2 & 0x300000;
    if ((a2 & 0x300000) != 0) {
      v13 |= 0x100000uLL;
    }
    unint64_t v116 = v13;
    memset(&v108, 0, sizeof(v108));
    memset(&v107, 0, sizeof(v107));
    unsigned int v106 = 0;
    uint64_t v15 = a1;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v104);
    int v16 = 0;
LABEL_12:
    if (!v104)
    {
      if ((int)v106 >= v105) {
        goto LABEL_203;
      }
      goto LABEL_17;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(void *)v104 + 16))(v104))
    {
      if (v104)
      {
        uint64_t v17 = (*(uint64_t (**)(void))(*(void *)v104 + 24))();
LABEL_18:
        std::vector<unsigned int>::size_type v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v15 + 40))(v15, v17);
        uint64_t v111 = (uint64_t)&v111;
        float v112 = &v111;
        uint64_t v113 = 0;
        LODWORD(v110) = 0;
        v108.__end_ = v108.__begin_;
        v107.__end_ = v107.__begin_;
        if (v11) {
          std::vector<int>::reserve(&v108, v18);
        }
        if (v14) {
          std::vector<int>::reserve(&v107, v18);
        }
        int v98 = v16;
        unint64_t v103 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v15 + 136))(v15, v17, &v99);
        char v19 = 1;
        while (1)
        {
          if (v99)
          {
            if ((*(unsigned int (**)(uint64_t))(*(void *)v99 + 24))(v99))
            {
              if (v99)
              {
                (*(void (**)(void))(*(void *)v99 + 8))();
              }
              else
              {
LABEL_132:
                if (v102) {
                  --*v102;
                }
              }
              uint64_t v15 = a1;
              int v16 = v98;
              if (!v11
                || (std::__sort<std::__less<int,int> &,int *>(),
                    (std::vector<unsigned int>::pointer)((char *)v108.__end_ - (char *)v108.__begin_) < (std::vector<unsigned int>::pointer)5))
              {
LABEL_141:
                if (!v14) {
                  goto LABEL_152;
                }
LABEL_142:
                std::__sort<std::__less<int,int> &,int *>();
                if ((std::vector<unsigned int>::pointer)((char *)v107.__end_ - (char *)v107.__begin_) >= (std::vector<unsigned int>::pointer)5)
                {
                  unint64_t v72 = v107.__end_ - v107.__begin_;
                  if (v72 <= 2) {
                    unint64_t v72 = 2;
                  }
                  std::vector<unsigned int>::pointer v73 = v107.__begin_ + 1;
                  unsigned int v74 = *v107.__begin_;
                  unint64_t v75 = v72 - 1;
                  while (1)
                  {
                    unsigned int v77 = *v73++;
                    unsigned int v76 = v77;
                    if (v77 == v74) {
                      break;
                    }
                    unsigned int v74 = v76;
                    if (!--v75) {
                      goto LABEL_152;
                    }
                  }
                  unint64_t v116 = v116 & 0xFFFFFFFFFFCFFFFFLL | 0x200000;
                }
                goto LABEL_152;
              }
              unint64_t v66 = v108.__end_ - v108.__begin_;
              if (v66 <= 2) {
                unint64_t v66 = 2;
              }
              std::vector<unsigned int>::pointer v67 = v108.__begin_ + 1;
              unsigned int v68 = *v108.__begin_;
              unint64_t v69 = v66 - 1;
              while (1)
              {
                unsigned int v71 = *v67++;
                unsigned int v70 = v71;
                if (v71 == v68) {
                  break;
                }
                unsigned int v68 = v70;
                if (!--v69) {
                  goto LABEL_141;
                }
              }
              unint64_t v116 = v116 & 0xFFFFFFFFFFF3FFFFLL | 0x80000;
              if (v14) {
                goto LABEL_142;
              }
LABEL_152:
              if (v98 >= 1) {
                unint64_t v116 = v116 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
              }
              (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(&v99, a1, v17);
              uint64_t v78 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Zero();
              if (v99) {
                float v79 = (char *)v102 + 1;
              }
              else {
                float v79 = 0;
              }
              if (*(_DWORD *)v78) {
                uint64_t v80 = *(void *)(v78 + 24) + 1;
              }
              else {
                uint64_t v80 = 0;
              }
              if (v79 != (char *)v80) {
                goto LABEL_174;
              }
              char v81 = 0;
              unint64_t v82 = v101;
              float v83 = (uint64_t *)(v78 + 16);
              BOOL v84 = v99 && v99 == *(_DWORD *)v78;
              BOOL v85 = !v84;
              while (1)
              {
                uint64_t v86 = *v83;
                if ((v81 & 1) == 0 && v85) {
                  break;
                }
                if ((uint64_t *)v82 == &v100) {
                  goto LABEL_173;
                }
                if (*(_DWORD *)(v82 + 16) != *(_DWORD *)(v86 + 16)) {
                  goto LABEL_174;
                }
                unint64_t v82 = *(void *)(v82 + 8);
                float v83 = (uint64_t *)(v86 + 8);
                char v81 = 1;
              }
              if (v99) {
                goto LABEL_174;
              }
LABEL_173:
              float v118 = *(float *)&v103;
              float v117 = 0.0;
              float v117 = *(float *)(v78 + 32);
              if (*(float *)&v103 == v117)
              {
                if ((*(uint64_t (**)(uint64_t, uint64_t, float))(*(void *)a1 + 40))(a1, v17, *(float *)&v103) != 1)unint64_t v116 = v116 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000; {
              }
                }
              else
              {
LABEL_174:
                uint64_t v87 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::One();
                if (v99) {
                  char v88 = (char *)v102 + 1;
                }
                else {
                  char v88 = 0;
                }
                if (*(_DWORD *)v87) {
                  uint64_t v89 = *(void *)(v87 + 24) + 1;
                }
                else {
                  uint64_t v89 = 0;
                }
                if (v88 != (char *)v89) {
                  goto LABEL_194;
                }
                char v90 = 0;
                unint64_t v91 = v101;
                unsigned int v92 = (uint64_t *)(v87 + 16);
                BOOL v93 = v99 && v99 == *(_DWORD *)v87;
                BOOL v94 = !v93;
                while (1)
                {
                  uint64_t v95 = *v92;
                  if ((v90 & 1) == 0 && v94) {
                    break;
                  }
                  if ((uint64_t *)v91 == &v100) {
                    goto LABEL_193;
                  }
                  if (*(_DWORD *)(v91 + 16) != *(_DWORD *)(v95 + 16)) {
                    goto LABEL_194;
                  }
                  unint64_t v91 = *(void *)(v91 + 8);
                  unsigned int v92 = (uint64_t *)(v95 + 8);
                  char v90 = 1;
                }
                if (v99) {
                  goto LABEL_194;
                }
LABEL_193:
                float v118 = *(float *)&v103;
                float v117 = 0.0;
                float v117 = *(float *)(v87 + 32);
                if (*(float *)&v103 != v117) {
LABEL_194:
                }
                  unint64_t v116 = v116 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
                int v16 = v98 + 1;
              }
              std::__list_imp<char *>::clear(&v100);
              std::__list_imp<char *>::clear(&v111);
              if (v104) {
                (*(void (**)(uint64_t))(*(void *)v104 + 32))(v104);
              }
              else {
                ++v106;
              }
              goto LABEL_12;
            }
            if (v99)
            {
              uint64_t v20 = (*(uint64_t (**)(void))(*(void *)v99 + 32))();
              goto LABEL_29;
            }
          }
          else if (v103 >= v101)
          {
            goto LABEL_132;
          }
          uint64_t v20 = v100 + 56 * v103;
LABEL_29:
          int v21 = *(_DWORD *)v20;
          int v22 = *(_DWORD *)v20;
          if (*(_DWORD *)v20 != *(_DWORD *)(v20 + 4))
          {
            unint64_t v116 = v116 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
            int v22 = *(_DWORD *)(v20 + 4);
          }
          if (v21 | v22)
          {
            if (v21)
            {
              if (v22) {
                goto LABEL_35;
              }
              goto LABEL_39;
            }
            unint64_t v23 = v116;
          }
          else
          {
            unint64_t v23 = v116 & 0xFFFFFFFFFF3FFFFFLL | 0x400000;
          }
          unint64_t v116 = v23 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
          if (v22)
          {
LABEL_35:
            if ((v19 & 1) == 0) {
              goto LABEL_40;
            }
            goto LABEL_44;
          }
LABEL_39:
          unint64_t v116 = v116 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
          if ((v19 & 1) == 0)
          {
LABEL_40:
            if (v21 < (int)v109) {
              unint64_t v116 = v116 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
            }
            if (v22 < SHIDWORD(v109)) {
              unint64_t v116 = v116 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
            }
          }
LABEL_44:
          uint64_t v24 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::One();
          int v25 = *(_DWORD *)(v20 + 8);
          if (v25) {
            uint64_t v26 = *(void *)(v20 + 32) + 1;
          }
          else {
            uint64_t v26 = 0;
          }
          if (*(_DWORD *)v24) {
            uint64_t v27 = *(void *)(v24 + 24) + 1;
          }
          else {
            uint64_t v27 = 0;
          }
          if (v26 != v27) {
            goto LABEL_64;
          }
          char v28 = 0;
          int v29 = (uint64_t *)(v20 + 24);
          uint64_t v30 = (uint64_t *)(v24 + 16);
          BOOL v31 = v25 && v25 == *(_DWORD *)v24;
          BOOL v32 = !v31;
          while (1)
          {
            uint64_t v33 = *v29;
            uint64_t v34 = *v30;
            if ((v28 & 1) == 0 && v32) {
              break;
            }
            if (v33 == v20 + 16) {
              goto LABEL_63;
            }
            if (*(_DWORD *)(v33 + 16) != *(_DWORD *)(v34 + 16)) {
              goto LABEL_64;
            }
            int v29 = (uint64_t *)(v33 + 8);
            uint64_t v30 = (uint64_t *)(v34 + 8);
            char v28 = 1;
          }
          if (v25) {
            goto LABEL_64;
          }
LABEL_63:
          float v118 = 0.0;
          float v118 = *(float *)(v20 + 40);
          float v117 = 0.0;
          float v117 = *(float *)(v24 + 32);
          if (v118 != v117)
          {
LABEL_64:
            uint64_t v35 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Zero();
            int v25 = *(_DWORD *)(v20 + 8);
            if (v25) {
              uint64_t v36 = *(void *)(v20 + 32) + 1;
            }
            else {
              uint64_t v36 = 0;
            }
            if (*(_DWORD *)v35) {
              uint64_t v37 = *(void *)(v35 + 24) + 1;
            }
            else {
              uint64_t v37 = 0;
            }
            if (v36 != v37) {
              goto LABEL_84;
            }
            char v38 = 0;
            uint64_t v39 = (uint64_t *)(v20 + 24);
            float v40 = (uint64_t *)(v35 + 16);
            BOOL v41 = v25 && v25 == *(_DWORD *)v35;
            BOOL v42 = !v41;
            while (1)
            {
              uint64_t v43 = *v39;
              uint64_t v44 = *v40;
              if ((v38 & 1) == 0 && v42) {
                break;
              }
              if (v43 == v20 + 16) {
                goto LABEL_83;
              }
              if (*(_DWORD *)(v43 + 16) != *(_DWORD *)(v44 + 16)) {
                goto LABEL_84;
              }
              uint64_t v39 = (uint64_t *)(v43 + 8);
              float v40 = (uint64_t *)(v44 + 8);
              char v38 = 1;
            }
            if (v25) {
              goto LABEL_84;
            }
LABEL_83:
            float v118 = 0.0;
            float v118 = *(float *)(v20 + 40);
            float v117 = 0.0;
            float v117 = *(float *)(v35 + 32);
            if (v118 != v117) {
LABEL_84:
            }
              unint64_t v116 = v116 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
          }
          int v45 = *(_DWORD *)(v20 + 48);
          if (v45 <= (int)v17) {
            unint64_t v116 = v116 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
          }
          if (v45 != v17 + 1) {
            unint64_t v116 = v116 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
          }
          uint64_t v109 = *(void *)v20;
          LODWORD(v110) = v25;
          if (&v109 != (uint64_t *)v20)
          {
            std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(&v111, *(void *)(v20 + 24), v20 + 16);
            int v45 = *(_DWORD *)(v20 + 48);
          }
          int v114 = *(_DWORD *)(v20 + 40);
          int v115 = v45;
          if (v11)
          {
            std::vector<unsigned int>::pointer end = v108.__end_;
            if (v108.__end_ >= v108.__end_cap_.__value_)
            {
              std::vector<unsigned int>::pointer begin = v108.__begin_;
              int64_t v49 = v108.__end_ - v108.__begin_;
              unint64_t v50 = v49 + 1;
              if ((unint64_t)(v49 + 1) >> 62) {
                goto LABEL_213;
              }
              int64_t v51 = (char *)v108.__end_cap_.__value_ - (char *)v108.__begin_;
              if (((char *)v108.__end_cap_.__value_ - (char *)v108.__begin_) >> 1 > v50) {
                unint64_t v50 = v51 >> 1;
              }
              if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v52 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v52 = v50;
              }
              if (v52)
              {
                uint64_t v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v108.__end_cap_, v52);
                std::vector<unsigned int>::pointer begin = v108.__begin_;
                std::vector<unsigned int>::pointer end = v108.__end_;
              }
              else
              {
                uint64_t v53 = 0;
              }
              unsigned int v54 = (unsigned int *)&v53[4 * v49];
              unsigned int *v54 = *(_DWORD *)v20;
              float v47 = v54 + 1;
              while (end != begin)
              {
                unsigned int v55 = *--end;
                *--unsigned int v54 = v55;
              }
              v108.__begin_ = v54;
              v108.__end_ = v47;
              v108.__end_cap_.__value_ = (unsigned int *)&v53[4 * v52];
              if (begin) {
                operator delete(begin);
              }
            }
            else
            {
              *v108.__end_ = *(_DWORD *)v20;
              float v47 = end + 1;
            }
            v108.__end_ = v47;
          }
          if (v14)
          {
            std::vector<unsigned int>::pointer v56 = v107.__end_;
            if (v107.__end_ >= v107.__end_cap_.__value_)
            {
              std::vector<unsigned int>::pointer v58 = v107.__begin_;
              int64_t v59 = v107.__end_ - v107.__begin_;
              unint64_t v60 = v59 + 1;
              if ((unint64_t)(v59 + 1) >> 62) {
LABEL_213:
              }
                std::vector<int>::__throw_length_error[abi:ne180100]();
              int64_t v61 = (char *)v107.__end_cap_.__value_ - (char *)v107.__begin_;
              if (((char *)v107.__end_cap_.__value_ - (char *)v107.__begin_) >> 1 > v60) {
                unint64_t v60 = v61 >> 1;
              }
              if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v62 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v62 = v60;
              }
              if (v62)
              {
                int v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v107.__end_cap_, v62);
                std::vector<unsigned int>::pointer v58 = v107.__begin_;
                std::vector<unsigned int>::pointer v56 = v107.__end_;
              }
              else
              {
                int v63 = 0;
              }
              uint64_t v64 = (unsigned int *)&v63[4 * v59];
              *uint64_t v64 = *(_DWORD *)(v20 + 4);
              uint64_t v57 = v64 + 1;
              while (v56 != v58)
              {
                unsigned int v65 = *--v56;
                *--uint64_t v64 = v65;
              }
              v107.__begin_ = v64;
              v107.__end_ = v57;
              v107.__end_cap_.__value_ = (unsigned int *)&v63[4 * v62];
              if (v58) {
                operator delete(v58);
              }
            }
            else
            {
              *v107.__end_ = *(_DWORD *)(v20 + 4);
              uint64_t v57 = v56 + 1;
            }
            v107.__end_ = v57;
          }
          if (v99)
          {
            (*(void (**)(uint64_t))(*(void *)v99 + 40))(v99);
            char v19 = 0;
          }
          else
          {
            char v19 = 0;
            ++v103;
          }
        }
      }
LABEL_17:
      uint64_t v17 = v106;
      goto LABEL_18;
    }
    if (v104) {
      (*(void (**)(void))(*(void *)v104 + 8))();
    }
LABEL_203:
    if ((*(unsigned int (**)(uint64_t))(*(void *)v15 + 24))(v15) != -1
      && (*(unsigned int (**)(uint64_t))(*(void *)v15 + 24))(v15))
    {
      unint64_t v116 = v116 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
    }
    if (v107.__begin_)
    {
      v107.__end_ = v107.__begin_;
      operator delete(v107.__begin_);
    }
    if (v108.__begin_)
    {
      v108.__end_ = v108.__begin_;
      operator delete(v108.__begin_);
    }
    unint64_t v8 = v116;
LABEL_211:
    uint64_t v9 = v8 & 0x3FFFFFFF0000 | (2 * v8) & 0x2AAAAAAA0000 | (v8 >> 1) & 0x155555550000 | 7;
  }
  *a3 = v9;
  return v8;
}

void sub_1B22C961C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a26) {
    operator delete(a26);
  }
  _Unwind_Resume(exception_object);
}

void fst::DfsVisit<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>(uint64_t a1, uint64_t a2)
{
}

void sub_1B22C9F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::~MemoryPool((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va1);
  uint64_t v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(void *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

void fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::InitVisit(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1) {
    *(void *)(*(void *)a1 + 8) = **(void **)a1;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    *(void *)(v3 + 8) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    *(void *)(v4 + 8) = 0;
    *(unsigned char *)(a1 + 52) = 0;
    **(void **)(a1 + ++*(_DWORD *)(result + 24) = **(void **)(a1 + 24) & 0xFFFFF0C3FFFFFFFFLL | 0x52800000000;
    *(void *)(a1 + 32) = a2;
    int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
    *(_DWORD *)(a1 + 44) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 40) = v5;
    operator new();
  }
  operator new();
}

unint64_t fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::FinishState(uint64_t a1, int a2, int a3)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 32) + 32))(&v34);
  uint64_t v6 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Zero();
  if (v34) {
    uint64_t v7 = v35[2] + 1;
  }
  else {
    uint64_t v7 = 0;
  }
  if (*(_DWORD *)v6) {
    uint64_t v8 = *(void *)(v6 + 24) + 1;
  }
  else {
    uint64_t v8 = 0;
  }
  if (v7 == v8)
  {
    char v9 = 0;
    uint64_t v10 = v35[1];
    uint64_t v11 = (uint64_t *)(v6 + 16);
    if (v34) {
      BOOL v12 = v34 == *(_DWORD *)v6;
    }
    else {
      BOOL v12 = 0;
    }
    int v13 = !v12;
    int v14 = v13 ^ 1;
    while (1)
    {
      uint64_t v15 = *v11;
      if ((v9 & 1) == 0 && !v14) {
        break;
      }
      if ((void *)v10 == v35) {
        goto LABEL_42;
      }
      if (*(_DWORD *)(v10 + 16) != *(_DWORD *)(v15 + 16)) {
        goto LABEL_21;
      }
      uint64_t v10 = *(void *)(v10 + 8);
      uint64_t v11 = (uint64_t *)(v15 + 8);
      char v9 = 1;
    }
    if (v34) {
      goto LABEL_21;
    }
LABEL_42:
    float v38 = v36;
    float v37 = 0.0;
    float v37 = *(float *)(v6 + 32);
    float v32 = v36;
    float v33 = v37;
    unint64_t result = (unint64_t)std::__list_imp<char *>::clear(v35);
    if (v32 == v33)
    {
      unint64_t v17 = a2;
      goto LABEL_23;
    }
  }
  else
  {
LABEL_21:
    unint64_t result = (unint64_t)std::__list_imp<char *>::clear(v35);
  }
  unint64_t v17 = a2;
  *(void *)(**(void **)(a1 + 16) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
LABEL_23:
  uint64_t v18 = **(void **)(a1 + 64);
  if (*(_DWORD *)(**(void **)(a1 + 56) + 4 * v17) != *(_DWORD *)(v18 + 4 * v17)) {
    goto LABEL_36;
  }
  char v19 = 0;
  uint64_t v20 = *(void **)(a1 + 80);
  uint64_t v21 = v20[1];
  uint64_t v22 = **(void **)(a1 + 16);
  unint64_t v23 = (int *)(((v21 - *v20) & 0xFFFFFFFFFFFFFFFCLL) + *v20 - 4);
  do
  {
    unint64_t v24 = *v23--;
    v19 |= *(void *)(v22 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v24;
  }
  while (v24 != a2);
  int v25 = *(void **)a1;
  uint64_t v26 = **(void **)(a1 + 72);
  for (unint64_t i = (int *)(v21 - 4); ; --i)
  {
    unint64_t v28 = *i;
    if (v25) {
      *(_DWORD *)(*v25 + 4 * v28) = *(_DWORD *)(a1 + 48);
    }
    unint64_t result = v28 >> 6;
    uint64_t v29 = 1 << v28;
    if ((v19 & 1) == 0) {
      break;
    }
    *(void *)(v22 + 8 * result) |= v29;
    *(void *)(v26 + 8 * result) &= ~v29;
    if (v28 == a2)
    {
      v20[1] = i;
      goto LABEL_35;
    }
LABEL_33:
    ;
  }
  *(void *)(v26 + 8 * result) &= ~v29;
  if (v28 != a2) {
    goto LABEL_33;
  }
  v20[1] = i;
  **(void **)(a1 + ++*(_DWORD *)(result + 24) = **(void **)(a1 + 24) & 0xFFFFF3FFFFFFFFFFLL | 0x80000000000;
LABEL_35:
  ++*(_DWORD *)(a1 + 48);
LABEL_36:
  if (a3 != -1)
  {
    uint64_t v30 = **(void **)(a1 + 16);
    if ((*(void *)(v30 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v17)) {
      *(void *)(v30 + (((unint64_t)a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a3;
    }
    int v31 = *(_DWORD *)(v18 + 4 * v17);
    if (v31 < *(_DWORD *)(v18 + 4 * a3)) {
      *(_DWORD *)(v18 + 4 * a3) = v31;
    }
  }
  return result;
}

void sub_1B22CA438(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear((void *)(v1 + 8));
  _Unwind_Resume(a1);
}

void fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::~MemoryPool(quasar::Bitmap *a1)
{
  *(void *)a1 = &unk_1F0A36EC8;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::Link>::~MemoryArena((void *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_1F0A36EC8;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::Link>::~MemoryArena((void *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::MemoryPool(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A36EC8;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::Link>::MemoryArena(a1 + 1, a2);
}

void sub_1B22CA4E8(_Unwind_Exception *a1)
{
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::Size()
{
  return 48;
}

void fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::Link>::MemoryArena(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A37E80;
  a1[1] = 56 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_1B22CA600(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::Link>::~MemoryArena(void *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1B3EA8670);
}

{
  void *v2;
  void *i;
  uint64_t v4;
  uint64_t vars8;

  *a1 = &unk_1F0A37E80;
  uint64_t v2 = a1 + 3;
  for (unint64_t i = (void *)a1[4]; i != v2; unint64_t i = (void *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x1B3EA8630](v4, 0x1000C8077774924);
    }
  }
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::Link>::Size()
{
  return 56;
}

void std::deque<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>> *,std::allocator<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>> *>>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>> *,std::allocator<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>> *>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>> *,std::allocator<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>> *>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    char v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      float v37 = &v34[8 * v36];
      float v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        BOOL v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)BOOL v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    char v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      float v37 = &v34[8 * v47];
      int v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        int64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)int64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  std::vector<unsigned int>::pointer v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0x1000uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1B22CAA48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::ArcBuffer<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::SetFromFst<fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t **))(*(void *)a2 + 136))(a2, a3, &v26);
  if (!v26 && (a4 & 1) == 0)
  {
    uint64_t v10 = v27 + 56 * v28;
    *(void *)(a1 + 16) = v27;
    *(void *)(a1 + ++*(_DWORD *)(result + 24) = v10;
    if (*(void *)a1)
    {
      free(*(void **)a1);
      *(void *)a1 = 0;
    }
    *(void *)(a1 + 8) = 0;
    return;
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, a3);
  uint64_t v12 = a5;
  if (!a4) {
    uint64_t v12 = 0;
  }
  unint64_t v13 = v11 + v12;
  if (*(void *)(a1 + 8) < (unint64_t)(v11 + v12))
  {
    if (*(void *)a1) {
      free(*(void **)a1);
    }
    uint64_t v25 = 0x4000;
    if (v13 > 0x4000) {
      uint64_t v25 = v13;
    }
    *(void *)(a1 + 8) = v25;
    uint64_t v15 = (uint64_t *)malloc_type_malloc(56 * v25, 0x1020040540EBC04uLL);
    *(void *)a1 = v15;
    *(void *)(a1 + 16) = v15;
    BOOL v14 = v15;
  }
  else
  {
    BOOL v14 = *(uint64_t **)(a1 + 16);
    uint64_t v15 = *(uint64_t **)a1;
  }
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = &v14[7 * v13];
  uint64_t v16 = v26;
  uint64_t v17 = v27;
  unint64_t v19 = v28;
  uint64_t v18 = v29;
  if (v29) {
    ++*v29;
  }
  unint64_t v20 = 0;
LABEL_13:
  v15 += 7;
  while (v16)
  {
    int v21 = (*(uint64_t (**)(uint64_t *))(*v16 + 24))(v16);
    uint64_t v22 = *v16;
    if (v21)
    {
      (*(void (**)(uint64_t *))(v22 + 8))(v16);
      return;
    }
    uint64_t v23 = (*(uint64_t (**)(uint64_t *))(v22 + 32))(v16);
LABEL_18:
    uint64_t v24 = v15 - 7;
    uint64_t *v24 = *(void *)v23;
    *((_DWORD *)v24 + 2) = *(_DWORD *)(v23 + 8);
    if (v15 - 7 != (uint64_t *)v23) {
      std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v15 - 5, *(void *)(v23 + 24), v23 + 16);
    }
    *((_DWORD *)v15 - 4) = *(_DWORD *)(v23 + 40);
    *((_DWORD *)v15 - 2) = *(_DWORD *)(v23 + 48);
    if (!v16)
    {
      ++v20;
      goto LABEL_13;
    }
    v15 += 7;
    (*(void (**)(uint64_t *))(*v16 + 40))(v16);
  }
  uint64_t v23 = v17 + 56 * v20;
  if (v20 < v19) {
    goto LABEL_18;
  }
  if (v18) {
    --*v18;
  }
}

void sub_1B22CAD40(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  else if (v2)
  {
    --*v2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::WriteFst<fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>(void *a1, void *a2, uint64_t a3)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  long long v37 = 0u;
  long long v38 = 0u;
  *(_OWORD *)uint64_t v35 = 0u;
  *(_OWORD *)uint64_t v36 = 0u;
  uint64_t v6 = -1;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  uint64_t v39 = -1;
  uint64_t v39 = (*(int (**)(void *))(*a1 + 24))(a1);
  uint64_t v40 = -1;
  if ((*(uint64_t (**)(void *, uint64_t, void))(*a1 + 64))(a1, 1, 0))
  {
    uint64_t v6 = 0;
LABEL_3:
    int v7 = 0;
    uint64_t v40 = (int)fst::CountStates<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t)a1);
    goto LABEL_6;
  }
  unint64_t v8 = (char *)a2 + *(void *)(*a2 - 24);
  if ((v8[32] & 5) == 0)
  {
    (*(void (**)(std::string *__return_ptr))(**((void **)v8 + 5) + 32))(__p);
    uint64_t v6 = v43;
    if (v43 != -1) {
      goto LABEL_3;
    }
  }
  int v7 = 1;
LABEL_6:
  uint64_t v9 = (*(uint64_t (**)(void *, uint64_t, void))(*a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  v9 |= 3uLL;
  fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::WriteFstHeader((uint64_t)a1, (uint64_t)a2, (unsigned char *)a3, 2, __p, v9, (uint64_t)v34);
  uint64_t v31 = v9;
  uint64_t v32 = v6;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  unint64_t v10 = *(void *)(a1[1] + 72) - *(void *)(a1[1] + 64);
  unint64_t v11 = v10 >> 3;
  if ((int)(v10 >> 3) < 1)
  {
    LODWORD(v11) = 0;
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t v13 = (v10 >> 3);
    do
    {
      (*(void (**)(std::string *__return_ptr, void *, uint64_t))(*a1 + 32))(__p, a1, v12);
      fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::Write(__p);
      std::__list_imp<char *>::clear(&__p[0].__r_.__value_.__l.__size_);
      __p[0].__r_.__value_.__r.__words[0] = (*(uint64_t (**)(void *, uint64_t))(*a1 + 40))(a1, v12);
      std::ostream::write();
      uint64_t v14 = *(void *)(*(void *)(a1[1] + 64) + 8 * v12);
      uint64_t v16 = *(void *)(v14 + 56);
      uint64_t v15 = *(void *)(v14 + 64);
      if (v15 == v16) {
        uint64_t v17 = 0;
      }
      else {
        uint64_t v17 = *(_DWORD **)(v14 + 56);
      }
      if (v15 != v16)
      {
        if ((unint64_t)((v15 - v16) / 56) <= 1) {
          uint64_t v18 = 1;
        }
        else {
          uint64_t v18 = (v15 - v16) / 56;
        }
        unint64_t v19 = v17;
        do
        {
          int v20 = *v19;
          v19 += 14;
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v20;
          std::ostream::write();
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v17[1];
          std::ostream::write();
          fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::Write(v17 + 2);
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v17[12];
          std::ostream::write();
          uint64_t v17 = v19;
          --v18;
        }
        while (v18);
      }
      ++v12;
    }
    while (v12 != v13);
  }
  std::ostream::flush();
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    int v21 = fst::LogMessage::LogMessage((fst *)&v33, (uint64_t)__p);
    uint64_t v22 = (void *)fst::cerr(v21);
    uint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"VectorFst::Write: write failed: ", 32);
    int v24 = *(char *)(a3 + 23);
    if (v24 >= 0) {
      uint64_t v25 = a3;
    }
    else {
      uint64_t v25 = *(void *)a3;
    }
    if (v24 >= 0) {
      uint64_t v26 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v26 = *(void *)(a3 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, v25, v26);
LABEL_30:
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v33);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    uint64_t updated = 0;
    goto LABEL_33;
  }
  if (!v7)
  {
    if (v40 == v11)
    {
      uint64_t updated = 1;
      goto LABEL_33;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    uint64_t v29 = fst::LogMessage::LogMessage((fst *)&v33, (uint64_t)__p);
    long long v30 = (void *)fst::cerr(v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Inconsistent number of states observed during write", 51);
    goto LABEL_30;
  }
  uint64_t v40 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  uint64_t updated = fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::UpdateFstHeader((uint64_t)a1, a2, a3, 2, __p, v31, (uint64_t)v34, v32);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
LABEL_33:
  if (SHIBYTE(v37) < 0) {
    operator delete(v36[1]);
  }
  if (SHIBYTE(v36[0]) < 0) {
    operator delete(v35[0]);
  }
  return updated;
}

void sub_1B22CB264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  fst::FstHeader::~FstHeader(&a17);
  _Unwind_Resume(a1);
}

uint64_t fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::WriteFstHeader(uint64_t a1, uint64_t a2, unsigned char *a3, int a4, std::string *__str, uint64_t a6, uint64_t a7)
{
  if (a3[24])
  {
    std::string::operator=((std::string *)(a7 + 8), __str);
    uint64_t v13 = (const std::string *)fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>::Type();
    std::string::operator=((std::string *)(a7 + 32), v13);
    *(_DWORD *)(a7 + 56) = a4;
    *(void *)(a7 + 64) = a6;
    if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1)) {
      BOOL v14 = a3[25] == 0;
    }
    else {
      BOOL v14 = 1;
    }
    int v15 = !v14;
    uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
    if (a3[26]) {
      BOOL v17 = v16 == 0;
    }
    else {
      BOOL v17 = 1;
    }
    int v18 = v15 | 2;
    if (v17) {
      int v18 = v15;
    }
    if (a3[27]) {
      v18 |= 4u;
    }
    *(_DWORD *)(a7 + 60) = v18;
    fst::FstHeader::Write();
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1)) {
    BOOL v19 = a3[25] == 0;
  }
  else {
    BOOL v19 = 1;
  }
  if (!v19)
  {
    uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 72))(v20, a2);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  if (result && a3[26])
  {
    uint64_t v22 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1) + 72);
    return v22();
  }
  return result;
}

uint64_t fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::UpdateFstHeader(uint64_t a1, void *a2, uint64_t a3, int a4, std::string *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  MEMORY[0x1B3EA7E70](v32);
  uint64_t v16 = (char *)a2 + *(void *)(*a2 - 24);
  if ((v16[32] & 5) == 0)
  {
    uint64_t v17 = *((void *)v16 + 5);
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long __p = 0u;
    long long v35 = 0u;
    uint64_t v42 = a8;
    (*(void (**)(void *__return_ptr))(*(void *)v17 + 40))(v33);
    if (v33[16] == -1) {
      std::ios_base::clear((std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32) | 4);
    }
  }
  MEMORY[0x1B3EA7E80](v32);
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    int v18 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
    BOOL v19 = (void *)fst::cerr(v18);
    uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
    int v21 = *(char *)(a3 + 23);
    if (v21 >= 0) {
      uint64_t v22 = a3;
    }
    else {
      uint64_t v22 = *(void *)a3;
    }
    if (v21 >= 0) {
      uint64_t v23 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v23 = *(void *)(a3 + 8);
    }
  }
  else
  {
    fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::WriteFstHeader(a1, (uint64_t)a2, (unsigned char *)a3, a4, a5, a6, a7);
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      int v24 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
      uint64_t v25 = (void *)fst::cerr(v24);
      uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      int v26 = *(char *)(a3 + 23);
      if (v26 >= 0) {
        uint64_t v22 = a3;
      }
      else {
        uint64_t v22 = *(void *)a3;
      }
      if (v26 >= 0) {
        uint64_t v23 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v23 = *(void *)(a3 + 8);
      }
    }
    else
    {
      MEMORY[0x1B3EA7E70](v33, a2);
      uint64_t v27 = (char *)a2 + *(void *)(*a2 - 24);
      if ((v27[32] & 5) == 0)
      {
        (*(void (**)(long long *__return_ptr))(**((void **)v27 + 5) + 32))(&__p);
        if (v42 == -1) {
          std::ios_base::clear((std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32) | 4);
        }
      }
      MEMORY[0x1B3EA7E80](v33);
      if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) == 0) {
        return 1;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      unint64_t v28 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
      uint64_t v29 = (void *)fst::cerr(v28);
      uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      int v30 = *(char *)(a3 + 23);
      if (v30 >= 0) {
        uint64_t v22 = a3;
      }
      else {
        uint64_t v22 = *(void *)a3;
      }
      if (v30 >= 0) {
        uint64_t v23 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v23 = *(void *)(a3 + 8);
      }
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v22, v23);
  fst::LogMessage::~LogMessage((fst::LogMessage *)v33);
  if (SBYTE7(v35) < 0) {
    operator delete((void *)__p);
  }
  return 0;
}

void sub_1B22CB8A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
}

uint64_t fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>::Type()
{
  {
    operator new();
  }
  return fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>::Type(void)::type;
}

void sub_1B22CB994(_Unwind_Exception *a1)
{
}

uint64_t fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::WriteFile(fst *a1, uint64_t a2)
{
  v25[19] = *MEMORY[0x1E4F143B8];
  if (*(char *)(a2 + 23) < 0)
  {
    if (*(void *)(a2 + 8))
    {
LABEL_5:
      std::ofstream::basic_ofstream((uint64_t *)&v20);
      if ((v24[*(void *)(v20.__r_.__value_.__r.__words[0] - 24)] & 5) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
        unint64_t v4 = fst::LogMessage::LogMessage((fst *)&v19, (uint64_t)&__p);
        uint64_t v5 = (void *)fst::cerr(v4);
        uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Fst::Write: Can't open file: ", 29);
        int v7 = *(char *)(a2 + 23);
        if (v7 >= 0) {
          unint64_t v8 = (const std::string::value_type *)a2;
        }
        else {
          unint64_t v8 = *(const std::string::value_type **)a2;
        }
        if (v7 >= 0) {
          uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          uint64_t v9 = *(void *)(a2 + 8);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v8, v9);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v19);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        uint64_t v10 = 0;
      }
      else
      {
        char v13 = FLAGS_fst_align;
        if (*(char *)(a2 + 23) < 0) {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
        }
        else {
          std::string __p = *(std::string *)a2;
        }
        __int16 v16 = 257;
        char v17 = 1;
        char v18 = v13;
        uint64_t v10 = (*(uint64_t (**)(fst *, std::string *, std::string *))(*(void *)a1 + 96))(a1, &v20, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      v20.__r_.__value_.__r.__words[0] = *MEMORY[0x1E4FBA400];
      *(std::string::size_type *)((char *)v20.__r_.__value_.__r.__words
                                + *(void *)(v20.__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x1E4FBA400]
                                                                                                  + 24);
      MEMORY[0x1B3EA7CF0](&v20.__r_.__value_.__r.__words[1]);
      std::ostream::~ostream();
      MEMORY[0x1B3EA8520](v25);
      return v10;
    }
  }
  else if (*(unsigned char *)(a2 + 23))
  {
    goto LABEL_5;
  }
  uint64_t v11 = fst::cout(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "standard output");
  char v12 = FLAGS_fst_align;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v20, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v20 = __p;
  }
  __int16 v21 = 257;
  char v22 = 1;
  char v23 = v12;
  uint64_t v10 = (*(uint64_t (**)(fst *, uint64_t, std::string *))(*(void *)a1 + 96))(a1, v11, &v20);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v10;
}

void sub_1B22CBCE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
}

void *fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::SetFinal(void *a1, int a2, int *a3)
{
  uint64_t v6 = *(int **)(a1[8] + 8 * a2);
  int v18 = *v6;
  std::list<int>::list(v19, (uint64_t)(v6 + 2));
  int v20 = v6[8];
  int v15 = *a3;
  std::list<int>::list(v16, (uint64_t)(a3 + 2));
  int v17 = a3[8];
  fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::SetFinal((uint64_t)a1, a2, &v15);
  std::__list_imp<char *>::clear(v16);
  unint64_t v7 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
  int v12 = v18;
  std::list<int>::list(v13, (uint64_t)v19);
  int v14 = v20;
  int v9 = *a3;
  std::list<int>::list(v10, (uint64_t)(a3 + 2));
  int v11 = a3[8];
  a1[1] = a1[1] & 4 | fst::SetFinalProperties<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>(v7, &v12, &v9);
  std::__list_imp<char *>::clear(v10);
  std::__list_imp<char *>::clear(v13);
  return std::__list_imp<char *>::clear(v19);
}

void sub_1B22CBEC0(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v3);
  std::__list_imp<char *>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::AddArc(void *a1, int a2, int *a3)
{
  uint64_t v6 = *(void *)(*(void *)(a1[8] + 8 * a2) + 64);
  if (v6 == *(void *)(*(void *)(a1[8] + 8 * a2) + 56)) {
    unint64_t v7 = 0;
  }
  else {
    unint64_t v7 = (_DWORD *)(v6 - 56);
  }
  unint64_t v8 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
  a1[1] = a1[1] & 4 | fst::AddArcProperties<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>(v8, a2, a3, v7);
  int v9 = *(void **)(a1[8] + 8 * a2);
  return fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::AddArc(v9, a3);
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::DeleteStates(uint64_t a1, char **a2)
{
  unint64_t v4 = (uint64_t *)(a1 + 64);
  std::vector<int>::size_type v5 = (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 3;
  std::vector<int>::value_type __x = 0;
  std::vector<int>::vector(&v35, v5, &__x);
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1] - *a2;
  if (v7)
  {
    unint64_t v8 = v7 >> 2;
    std::vector<int>::pointer begin = v35.__begin_;
    if (v8 <= 1) {
      unint64_t v8 = 1;
    }
    do
    {
      uint64_t v10 = *(int *)v6;
      v6 += 4;
      begin[v10] = -1;
      --v8;
    }
    while (v8);
  }
  uint64_t v11 = *(void *)(a1 + 64);
  if (*(void *)(a1 + 72) == v11)
  {
    int v13 = 0;
  }
  else
  {
    unint64_t v12 = 0;
    int v13 = 0;
    do
    {
      if (v35.__begin_[v12] == -1)
      {
        fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Destroy(*(void *)(v11 + 8 * v12));
      }
      else
      {
        v35.__begin_[v12] = v13;
        if (v12 != v13) {
          *(void *)(v11 + 8 * v13) = *(void *)(v11 + 8 * v12);
        }
        ++v13;
      }
      ++v12;
      uint64_t v11 = *(void *)(a1 + 64);
    }
    while (v12 < (*(void *)(a1 + 72) - v11) >> 3);
  }
  std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)v4, v13);
  uint64_t v14 = *(void *)(a1 + 64);
  if (*(void *)(a1 + 72) != v14)
  {
    unint64_t v15 = 0;
    do
    {
      uint64_t v16 = *(void *)(v14 + 8 * v15);
      int64x2_t v17 = *(int64x2_t *)(v16 + 40);
      uint64_t v18 = *(void *)(v16 + 64) - *(void *)(v16 + 56);
      if (v18) {
        uint64_t v19 = *(void *)(v16 + 56);
      }
      else {
        uint64_t v19 = 0;
      }
      if (v18)
      {
        unint64_t v20 = 0;
        uint64_t v21 = 0;
        char v22 = (int *)(v19 + 48);
        uint64_t v23 = v19 + 16;
        do
        {
          int v24 = v35.__begin_[*v22];
          if (v24 == -1)
          {
            uint64_t v27 = *((void *)v22 - 6);
            v28.i64[0] = v27;
            v28.i64[1] = HIDWORD(v27);
            int64x2_t v17 = vaddq_s64(v17, vceqzq_s64(v28));
          }
          else
          {
            int *v22 = v24;
            if (v20 != v21)
            {
              int64x2_t v32 = v17;
              uint64_t v25 = v19 + 56 * v21;
              *(void *)uint64_t v25 = *((void *)v22 - 6);
              *(_DWORD *)(v25 + 8) = *(v22 - 10);
              std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v25 + 16), *((void *)v22 - 3), v23);
              uint64_t v26 = v19 + 56 * v21;
              *(_DWORD *)(v26 + 40) = *(v22 - 2);
              *(_DWORD *)(v26 + 48) = *v22;
              uint64_t v14 = *v4;
              int64x2_t v17 = v32;
            }
            ++v21;
          }
          ++v20;
          uint64_t v16 = *(void *)(v14 + 8 * v15);
          unint64_t v29 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(v16 + 64) - *(void *)(v16 + 56)) >> 3);
          v22 += 14;
          v23 += 56;
        }
        while (v20 < v29);
        int64x2_t v33 = v17;
      }
      else
      {
        int64x2_t v33 = *(int64x2_t *)(v16 + 40);
        uint64_t v21 = 0;
        unint64_t v29 = 0;
      }
      fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::DeleteArcs((void *)v16, v29 - v21);
      uint64_t v14 = *(void *)(a1 + 64);
      *(int64x2_t *)(*(void *)(v14 + 8 * v15++) + 40) = v33;
    }
    while (v15 < (*(void *)(a1 + 72) - v14) >> 3);
  }
  uint64_t v30 = *(int *)(a1 + 88);
  if (v30 == -1)
  {
    uint64_t v31 = v35.__begin_;
    if (!v35.__begin_) {
      return;
    }
  }
  else
  {
    uint64_t v31 = v35.__begin_;
    *(_DWORD *)(a1 + 88) = v35.__begin_[v30];
  }
  v35.__end_ = v31;
  operator delete(v31);
}

void sub_1B22CC21C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::DeleteArcs(void *a1, int a2)
{
  BOOL v3 = *(void **)(a1[8] + 8 * a2);
  v3[5] = 0;
  v3[6] = 0;
  uint64_t v5 = v3[7];
  uint64_t v4 = v3[8];
  if (v4 != v5)
  {
    do
    {
      uint64_t v6 = v4 - 56;
      std::__list_imp<char *>::clear((void *)(v4 - 40));
      uint64_t v4 = v6;
    }
    while (v6 != v5);
  }
  v3[8] = v5;
  uint64_t result = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
  a1[1] = a1[1] & 4 | result & 0xA6A5A950007;
  return result;
}

void fst::MutableArcIterator<fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::~MutableArcIterator()
{
}

uint64_t fst::ArcIteratorBase<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::Reinit()
{
  return 0;
}

BOOL fst::MutableArcIterator<fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::Done_(uint64_t a1)
{
  return *(void *)(a1 + 24) >= (unint64_t)(0x6DB6DB6DB6DB6DB7
                                                  * ((uint64_t)(*(void *)(*(void *)(a1 + 8) + 64)
                                                             - *(void *)(*(void *)(a1 + 8) + 56)) >> 3));
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::Value_(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 56) + 56 * *(void *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::Next_(uint64_t result)
{
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::Position_(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::Reset_(uint64_t result)
{
  *(void *)(result + ++*(void *)(result + 24) = 0;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::Seek_(uint64_t result, uint64_t a2)
{
  *(void *)(result + ++*(void *)(result + 24) = a2;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::Flags_()
{
  return 15;
}

uint64_t fst::ArcMap<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t))(*(void *)a2 + 224))(a2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 280))(a2, v4);
  (*(void (**)(uint64_t, void))(*(void *)a2 + 288))(a2, 0);
  unint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (result == -1)
  {
    if ((v5 & 4) != 0)
    {
      uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 192);
      return v18(a2, 4, 4);
    }
    return result;
  }
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 1, 0))
  {
    BOOL v7 = fst::CountStates<fst::ArcTpl<fst::LogWeightTpl<float>,int>>(a1) != 0;
    (*(void (**)(uint64_t, BOOL))(*(void *)a2 + 248))(a2, v7);
  }
  LODWORD(v30[0]) = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v28);
  while (!v28)
  {
    if (SLODWORD(v30[0]) >= v29) {
      goto LABEL_14;
    }
LABEL_9:
    (*(void (**)(uint64_t))(*(void *)a2 + 200))(a2);
    if (v28) {
      (*(void (**)(uint64_t))(*(void *)v28 + 32))(v28);
    }
    else {
      ++LODWORD(v30[0]);
    }
  }
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v28 + 16))(v28)) {
    goto LABEL_9;
  }
  if (v28) {
    (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
  }
LABEL_14:
  unsigned int v39 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v37);
  while (2)
  {
    if (!v37)
    {
      if ((int)v39 >= v38) {
        goto LABEL_53;
      }
      goto LABEL_20;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(void *)v37 + 16))(v37))
    {
      if (v37)
      {
        uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v37 + 24))(v37);
        goto LABEL_21;
      }
LABEL_20:
      uint64_t v8 = v39;
LABEL_21:
      if (v8 == (*(unsigned int (**)(uint64_t))(*(void *)a1 + 24))(a1)) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 176))(a2, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 40))(a1, v8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 256))(a2, v8, v9);
      unint64_t v36 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 136))(a1, v8, &v32);
LABEL_24:
      if (v32)
      {
        if ((*(unsigned int (**)(uint64_t))(*(void *)v32 + 24))(v32))
        {
          if (v32)
          {
            (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
            goto LABEL_37;
          }
LABEL_35:
          if (v35) {
            --*v35;
          }
LABEL_37:
          *(float *)&unsigned int v11 = (*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, v8);
          uint64_t v32 = 0;
          unint64_t v33 = v11 | 0xFFFFFFFF00000000;
          fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>::operator()((float *)&v32, (uint64_t)&v28);
          if (v28)
          {
            int v12 = FLAGS_fst_error_fatal;
            if (FLAGS_fst_error_fatal)
            {
              std::string::basic_string[abi:ne180100]<0>(v25, "FATAL");
              int v13 = fst::LogMessage::LogMessage((fst *)&v27, (uint64_t)v25);
            }
            else
            {
              std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
              int v13 = fst::LogMessage::LogMessage((fst *)&v24, (uint64_t)__p);
            }
            uint64_t v14 = (void *)fst::cerr(v13);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"ArcMap: non-zero arc labels for superfinal arc", 46);
            if (v12)
            {
              fst::LogMessage::~LogMessage((fst::LogMessage *)&v27);
              if (v26 < 0)
              {
                unint64_t v15 = (void *)v25[0];
                goto LABEL_46;
              }
            }
            else
            {
              fst::LogMessage::~LogMessage((fst::LogMessage *)&v24);
              if (v23 < 0)
              {
                unint64_t v15 = __p[0];
LABEL_46:
                operator delete(v15);
              }
            }
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 192))(a2, 4, 4);
          }
          int v19 = v29;
          std::list<int>::list(v20, (uint64_t)v30);
          int v21 = v31;
          (*(void (**)(uint64_t, uint64_t, int *))(*(void *)a2 + 184))(a2, v8, &v19);
          std::__list_imp<char *>::clear(v20);
          std::__list_imp<char *>::clear(v30);
          if (v37) {
            (*(void (**)(uint64_t))(*(void *)v37 + 32))(v37);
          }
          else {
            ++v39;
          }
          continue;
        }
        if (v32)
        {
          uint64_t v10 = (float *)(*(uint64_t (**)(uint64_t))(*(void *)v32 + 32))(v32);
          goto LABEL_30;
        }
      }
      else if (v36 >= v34)
      {
        goto LABEL_35;
      }
      uint64_t v10 = (float *)(v33 + 16 * v36);
LABEL_30:
      fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>::operator()(v10, (uint64_t)&v28);
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a2 + 208))(a2, v8, &v28);
      std::__list_imp<char *>::clear(v30);
      if (v32) {
        (*(void (**)(uint64_t))(*(void *)v32 + 40))(v32);
      }
      else {
        ++v36;
      }
      goto LABEL_24;
    }
    break;
  }
  if (v37) {
    (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
  }
LABEL_53:
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  unint64_t v17 = fst::ProjectProperties(v5, 1);
  return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 192))(a2, v17 & 0x3FFCFFFF0007 | v16, 0x3FFFFFFF0007);
}

void sub_1B22CCC58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,int a31,__int16 a32,char a33,char a34,uint64_t a35)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a24);
  if (a20 < 0) {
    operator delete(__p);
  }
  std::__list_imp<char *>::clear(v35);
  uint64_t v38 = *(void *)(v36 - 112);
  if (v38) {
    (*(void (**)(uint64_t))(*(void *)v38 + 8))(v38);
  }
  _Unwind_Resume(a1);
}

void *fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>::operator()@<X0>(float *a1@<X1>, uint64_t a2@<X8>)
{
  if (*((_DWORD *)a1 + 3) == -1)
  {
    float v30 = 0.0;
    float v30 = a1[2];
    v29[8] = 2139095040;
    if (v30 == INFINITY)
    {
      int v12 = (int *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Zero();
      int v23 = *v12;
      BOOL v7 = v24;
      std::list<int>::list(v24, (uint64_t)(v12 + 2));
      int v25 = v12[8];
      *(void *)a2 = 0;
      *(_DWORD *)(a2 + 8) = v23;
      std::list<int>::list((void *)(a2 + 16), (uint64_t)v24);
      *(_DWORD *)(a2 + 40) = v25;
      *(_DWORD *)(a2 + 48) = -1;
      return std::__list_imp<char *>::clear(v7);
    }
    uint64_t v8 = (int *)fst::StringWeight<int,(fst::StringType)0>::One();
    int v26 = *v8;
    BOOL v7 = v27;
    std::list<int>::list(v27, (uint64_t)(v8 + 2));
    fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v28, &v26, a1[2]);
    *(void *)a2 = 0;
    *(_DWORD *)(a2 + 8) = v28;
    uint64_t v9 = v29;
    std::list<int>::list((void *)(a2 + 16), (uint64_t)v29);
    *(_DWORD *)(a2 + 40) = v29[6];
    *(_DWORD *)(a2 + 48) = -1;
    goto LABEL_7;
  }
  float v5 = *a1;
  int v4 = *((_DWORD *)a1 + 1);
  if (!v4)
  {
    uint64_t v10 = (int *)fst::StringWeight<int,(fst::StringType)0>::One();
    int v19 = *v10;
    BOOL v7 = v20;
    std::list<int>::list(v20, (uint64_t)(v10 + 2));
    fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v21, &v19, a1[2]);
    int v11 = *((_DWORD *)a1 + 3);
    *(float *)a2 = v5;
    *(float *)(a2 + 4) = v5;
    *(_DWORD *)(a2 + 8) = v21;
    uint64_t v9 = v22;
    std::list<int>::list((void *)(a2 + 16), (uint64_t)v22);
    *(_DWORD *)(a2 + 40) = v22[6];
    *(_DWORD *)(a2 + 48) = v11;
LABEL_7:
    std::__list_imp<char *>::clear(v9);
    return std::__list_imp<char *>::clear(v7);
  }
  fst::StringWeight<int,(fst::StringType)0>::StringWeight((uint64_t)&v14, v4);
  fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v16, &v14, a1[2]);
  int v6 = *((_DWORD *)a1 + 3);
  *(float *)a2 = v5;
  *(float *)(a2 + 4) = v5;
  *(_DWORD *)(a2 + 8) = v16;
  std::list<int>::list((void *)(a2 + 16), (uint64_t)v17);
  *(_DWORD *)(a2 + 40) = v18;
  *(_DWORD *)(a2 + 48) = v6;
  std::__list_imp<char *>::clear(v17);
  BOOL v7 = &v15;
  return std::__list_imp<char *>::clear(v7);
}

void sub_1B22CCF9C(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ShortestDistance<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  v12[0] = a1;
  v12[1] = a2;
  v12[2] = *(void *)a3;
  int v13 = *(_DWORD *)(a3 + 16);
  char v14 = *(unsigned char *)(a3 + 20);
  char v15 = 0;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  memset(v19, 0, 29);
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  if (v4 != *a2)
  {
    do
    {
      uint64_t v6 = v4 - 40;
      std::__list_imp<char *>::clear((void *)(v4 - 32));
      uint64_t v4 = v6;
    }
    while (v6 != v5);
  }
  a2[1] = v5;
  fst::ShortestDistanceState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::ShortestDistance(v12);
  if (BYTE12(v19[1]))
  {
    uint64_t v8 = *a2;
    uint64_t v7 = a2[1];
    if (v7 != *a2)
    {
      do
      {
        uint64_t v9 = v7 - 40;
        std::__list_imp<char *>::clear((void *)(v7 - 32));
        uint64_t v7 = v9;
      }
      while (v9 != v8);
    }
    a2[1] = v8;
    uint64_t v10 = (_DWORD *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::NoWeight();
    std::vector<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::resize(a2, 1uLL, v10);
  }
  return fst::ShortestDistanceState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::~ShortestDistanceState((uint64_t)v12);
}

void sub_1B22CD0D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  fst::ShortestDistanceState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::~ShortestDistanceState((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t fst::Reverse<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>(uint64_t a1, uint64_t *a2, char a3)
{
  (*(void (**)(uint64_t *))(*a2 + 224))(a2);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  (*(void (**)(uint64_t *, uint64_t))(*a2 + 280))(a2, v6);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  (*(void (**)(uint64_t *, uint64_t))(*a2 + 288))(a2, v7);
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 1, 0))
  {
    int v8 = fst::CountStates<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>(a1);
    (*(void (**)(uint64_t *, void))(*a2 + 248))(a2, (v8 + 1));
  }
  unsigned int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  uint64_t v104 = 0;
  unsigned int v64 = v9;
  if (a3) {
    goto LABEL_67;
  }
  LODWORD(v94) = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v92);
  for (uint64_t i = 0xFFFFFFFFLL; ; uint64_t i = v13)
  {
    if (v92)
    {
      char v11 = (*(uint64_t (**)(uint64_t))(*(void *)v92 + 16))(v92);
      uint64_t v12 = v92;
      if (v11) {
        goto LABEL_39;
      }
      if (v92)
      {
        uint64_t v13 = (*(uint64_t (**)(void))(*(void *)v92 + 24))();
        goto LABEL_11;
      }
    }
    else if ((int)v94 >= (int)v93)
    {
      goto LABEL_41;
    }
    uint64_t v13 = v94;
LABEL_11:
    (*(void (**)(void ***__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(&p_p, a1, v13);
    uint64_t v14 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Zero();
    uint64_t v15 = p_p ? (uint64_t)v100 + 1 : 0;
    uint64_t v16 = *(_DWORD *)v14 ? *(void *)(v14 + 24) + 1 : 0;
    if (v15 != v16) {
      break;
    }
    char v17 = 0;
    uint64_t v18 = v99;
    int v19 = (uint64_t *)(v14 + 16);
    if (p_p) {
      BOOL v20 = p_p == *(_DWORD *)v14;
    }
    else {
      BOOL v20 = 0;
    }
    int v21 = !v20;
    while (1)
    {
      uint64_t v22 = *v19;
      if ((v17 & 1) == 0 && v21 == 1) {
        break;
      }
      if ((uint64_t *)v18 == &v98) {
        goto LABEL_36;
      }
      if (*(_DWORD *)(v18 + 16) != *(_DWORD *)(v22 + 16)) {
        goto LABEL_30;
      }
      uint64_t v18 = *(void *)(v18 + 8);
      int v19 = (uint64_t *)(v22 + 8);
      char v17 = 1;
    }
    if (p_p) {
      break;
    }
LABEL_36:
    *(float *)&std::string __p = v101;
    float v75 = 0.0;
    float v75 = *(float *)(v14 + 32);
    float v23 = v101;
    std::__list_imp<char *>::clear(&v98);
    if (v23 != v75) {
      goto LABEL_31;
    }
    uint64_t v13 = i;
LABEL_32:
    if (v92) {
      (*(void (**)(uint64_t))(*(void *)v92 + 32))(v92);
    }
    else {
      LODWORD(v94) = v94 + 1;
    }
  }
LABEL_30:
  std::__list_imp<char *>::clear(&v98);
LABEL_31:
  if (i == -1) {
    goto LABEL_32;
  }
  uint64_t i = 0xFFFFFFFFLL;
  uint64_t v12 = v92;
LABEL_39:
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
LABEL_41:
  if (i == -1)
  {
LABEL_67:
    uint64_t i = (*(uint64_t (**)(uint64_t *))(*a2 + 200))(a2);
    int v35 = 1;
    goto LABEL_68;
  }
  (*(void (**)(void ***__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(&p_p, a1, i);
  uint64_t v24 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::One();
  if (p_p) {
    int v25 = (char *)v100 + 1;
  }
  else {
    int v25 = 0;
  }
  if (*(_DWORD *)v24) {
    uint64_t v26 = *(void *)(v24 + 24) + 1;
  }
  else {
    uint64_t v26 = 0;
  }
  if (v25 != (char *)v26) {
    goto LABEL_63;
  }
  char v27 = 0;
  uint64_t v28 = v99;
  int v29 = (uint64_t *)(v24 + 16);
  BOOL v30 = p_p && p_p == *(_DWORD *)v24;
  BOOL v31 = !v30;
  int v32 = !v31;
  while (1)
  {
    uint64_t v33 = *v29;
    if ((v27 & 1) == 0 && !v32) {
      break;
    }
    if ((uint64_t *)v28 == &v98) {
      goto LABEL_65;
    }
    if (*(_DWORD *)(v28 + 16) != *(_DWORD *)(v33 + 16)) {
      goto LABEL_63;
    }
    uint64_t v28 = *(void *)(v28 + 8);
    int v29 = (uint64_t *)(v33 + 8);
    char v27 = 1;
  }
  if (p_p)
  {
LABEL_63:
    std::__list_imp<char *>::clear(&v98);
    goto LABEL_64;
  }
LABEL_65:
  *(float *)&uint64_t v92 = v101;
  LODWORD(__p) = 0;
  LODWORD(__p) = *(_DWORD *)(v24 + 32);
  float v34 = v101;
  std::__list_imp<char *>::clear(&v98);
  if (v34 != *(float *)&__p)
  {
LABEL_64:
    std::string __p = 0;
    uint64_t v79 = 0;
    unint64_t v80 = 0;
    p_p = &__p;
    uint64_t v98 = 0;
    uint64_t v99 = 0;
    uint64_t v100 = &v104;
    fst::DfsVisit<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>(a1, (uint64_t)&p_p);
  }
  int v35 = 0;
LABEL_68:
  unsigned int v91 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v89);
  while (2)
  {
    if (!v89)
    {
      if ((int)v91 >= v90) {
        goto LABEL_137;
      }
      goto LABEL_74;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(void *)v89 + 16))(v89))
    {
      if (v89)
      {
        uint64_t v36 = (*(uint64_t (**)(void))(*(void *)v89 + 24))();
LABEL_75:
        int v37 = v36 + v35;
        while ((*(int (**)(uint64_t *))(*a2 + 160))(a2) <= v37)
          (*(void (**)(uint64_t *))(*a2 + 200))(a2);
        if (v36 == v64)
        {
          uint64_t v38 = (int *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::One();
          int v86 = *v38;
          std::list<int>::list(v87, (uint64_t)(v38 + 2));
          int v88 = v38[8];
          (*(void (**)(uint64_t *, void, int *))(*a2 + 184))(a2, (v36 + v35), &v86);
          std::__list_imp<char *>::clear(v87);
        }
        (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 32))(&v92);
        uint64_t v39 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Zero();
        if (v92) {
          uint64_t v40 = v95 + 1;
        }
        else {
          uint64_t v40 = 0;
        }
        if (*(_DWORD *)v39) {
          uint64_t v41 = *(void *)(v39 + 24) + 1;
        }
        else {
          uint64_t v41 = 0;
        }
        if (v40 == v41)
        {
          char v42 = 0;
          uint64_t v43 = v94;
          uint64_t v44 = (uint64_t *)(v39 + 16);
          if (v92) {
            BOOL v45 = v92 == *(_DWORD *)v39;
          }
          else {
            BOOL v45 = 0;
          }
          int v46 = !v45;
          while (1)
          {
            uint64_t v47 = *v44;
            if ((v42 & 1) == 0 && v46 == 1) {
              break;
            }
            if ((uint64_t *)v43 == &v93) {
              goto LABEL_100;
            }
            if (*(_DWORD *)(v43 + 16) != *(_DWORD *)(v47 + 16)) {
              goto LABEL_99;
            }
            uint64_t v43 = *(void *)(v43 + 8);
            uint64_t v44 = (uint64_t *)(v47 + 8);
            char v42 = 1;
          }
          if (v92) {
            goto LABEL_99;
          }
LABEL_100:
          LODWORD(p_p) = v96;
          LODWORD(__p) = 0;
          LODWORD(__p) = *(_DWORD *)(v39 + 32);
          BOOL v48 = *(float *)&v96 != *(float *)&__p;
        }
        else
        {
LABEL_99:
          BOOL v48 = 1;
        }
        if ((v35 & v48) == 1)
        {
          fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Reverse(&v92, (uint64_t)&v83);
          p_p = 0;
          LODWORD(v98) = v83;
          std::list<int>::list(&v99, (uint64_t)v84);
          float v102 = v85;
          int v103 = v36 + v35;
          std::__list_imp<char *>::clear(v84);
          (*(void (**)(uint64_t *, void, void ***))(*a2 + 208))(a2, 0, &p_p);
          std::__list_imp<char *>::clear(&v99);
        }
        unint64_t v82 = 0;
        (*(void (**)(uint64_t, uint64_t, void **))(*(void *)a1 + 136))(a1, v36, &__p);
LABEL_104:
        if (__p)
        {
          if ((*(unsigned int (**)(void *))(*(void *)__p + 24))(__p))
          {
            if (__p)
            {
              (*(void (**)(void))(*(void *)__p + 8))();
              goto LABEL_132;
            }
LABEL_130:
            if (v81) {
              --*v81;
            }
LABEL_132:
            std::__list_imp<char *>::clear(&v93);
            if (v89) {
              (*(void (**)(uint64_t))(*(void *)v89 + 32))(v89);
            }
            else {
              ++v91;
            }
            continue;
          }
          if (__p)
          {
            uint64_t v49 = (*(uint64_t (**)(void))(*(void *)__p + 32))();
LABEL_110:
            int v50 = *(_DWORD *)(v49 + 48);
            fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Reverse((_DWORD *)(v49 + 8), (uint64_t)&v75);
            uint64_t v51 = (v50 + v35);
            if (v51 == i) {
              char v52 = v35;
            }
            else {
              char v52 = 1;
            }
            if ((v52 & 1) == 0)
            {
              (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 32))(&v70);
              fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Reverse(&v70, (uint64_t)&v72);
              fst::Times<int,(fst::StringType)1>(&v72, (uint64_t)&v75, (uint64_t)&v105);
              float v53 = NAN;
              if (v74 != -INFINITY)
              {
                float v53 = NAN;
                if (v77 != -INFINITY)
                {
                  float v53 = INFINITY;
                  if (v77 != INFINITY && v74 != INFINITY) {
                    float v53 = v74 + v77;
                  }
                }
              }
              fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::GallicWeight((uint64_t)&p_p, &v105, v53);
              std::__list_imp<char *>::clear(v106);
              float v75 = *(float *)&p_p;
              std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v76, v99, (uint64_t)&v98);
              float v77 = v101;
              std::__list_imp<char *>::clear(&v98);
              std::__list_imp<char *>::clear(v73);
              std::__list_imp<char *>::clear(v71);
            }
            long long v55 = *(void ***)v49;
            float v67 = v75;
            std::list<int>::list(v68, (uint64_t)v76);
            float v69 = v77;
            p_p = v55;
            *(float *)&uint64_t v98 = v67;
            std::list<int>::list(&v99, (uint64_t)v68);
            float v102 = v69;
            int v103 = v37;
            std::__list_imp<char *>::clear(v68);
            while (1)
            {
              int v56 = (*(uint64_t (**)(uint64_t *))(*a2 + 160))(a2);
              uint64_t v57 = *a2;
              if (v56 > (int)v51) {
                break;
              }
              (*(void (**)(uint64_t *))(v57 + 200))(a2);
            }
            (*(void (**)(uint64_t *, uint64_t, void ***))(v57 + 208))(a2, v51, &p_p);
            std::__list_imp<char *>::clear(&v99);
            std::__list_imp<char *>::clear(v76);
            if (__p) {
              (*(void (**)(void *))(*(void *)__p + 40))(__p);
            }
            else {
              ++v82;
            }
            goto LABEL_104;
          }
        }
        else if (v82 >= v80)
        {
          goto LABEL_130;
        }
        uint64_t v49 = v79 + 56 * v82;
        goto LABEL_110;
      }
LABEL_74:
      uint64_t v36 = v91;
      goto LABEL_75;
    }
    break;
  }
  if (v89) {
    (*(void (**)(void))(*(void *)v89 + 8))();
  }
LABEL_137:
  (*(void (**)(uint64_t *, uint64_t))(*a2 + 176))(a2, i);
  if (i == v64) {
    char v58 = v35;
  }
  else {
    char v58 = 1;
  }
  if ((v58 & 1) == 0)
  {
    (*(void (**)(void ***__return_ptr, uint64_t, void))(*(void *)a1 + 32))(&p_p, a1, v64);
    fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Reverse(&p_p, (uint64_t)v65);
    (*(void (**)(uint64_t *, void, char *))(*a2 + 184))(a2, v64, v65);
    std::__list_imp<char *>::clear(v66);
    std::__list_imp<char *>::clear(&v98);
  }
  uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  unint64_t v60 = v104 | v59;
  uint64_t v61 = (*(uint64_t (**)(uint64_t *, uint64_t, void))(*a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  unint64_t v62 = fst::ReverseProperties(v60, v35);
  return (*(uint64_t (**)(uint64_t *, unint64_t, uint64_t))(*a2 + 192))(a2, v61 | v62, 0x3FFFFFFF0007);
}

void sub_1B22CE084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::ShortestDistance<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  v13[0] = a1;
  v13[1] = a2;
  v13[2] = *(void *)a3;
  int v14 = *(_DWORD *)(a3 + 16);
  char v15 = *(unsigned char *)(a3 + 20);
  char v16 = 0;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  memset(v20, 0, 29);
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  if (v5 != *a2)
  {
    do
    {
      uint64_t v7 = v5 - 40;
      std::__list_imp<char *>::clear((void *)(v5 - 32));
      uint64_t v5 = v7;
    }
    while (v7 != v6);
  }
  a2[1] = v6;
  fst::ShortestDistanceState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::ShortestDistance(v13, *(_DWORD *)(a3 + 12));
  if (BYTE12(v20[1]))
  {
    uint64_t v9 = *a2;
    uint64_t v8 = a2[1];
    if (v8 != *a2)
    {
      do
      {
        uint64_t v10 = v8 - 40;
        std::__list_imp<char *>::clear((void *)(v8 - 32));
        uint64_t v8 = v10;
      }
      while (v10 != v9);
    }
    a2[1] = v9;
    char v11 = (_DWORD *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::NoWeight();
    std::vector<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::resize(a2, 1uLL, v11);
  }
  return fst::ShortestDistanceState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::~ShortestDistanceState((uint64_t)v13);
}

void sub_1B22CE350(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  fst::ShortestDistanceState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::~ShortestDistanceState((uint64_t)va);
  _Unwind_Resume(a1);
}

void fst::AutoQueue<int>::AutoQueue<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = 7;
  *(unsigned char *)(a1 + 12) = 0;
  *(void *)a1 = &unk_1F0A40F38;
  *(_OWORD *)(a1 + ++*(void *)(result + 24) = 0u;
  uint64_t v3 = a1 + 48;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x4E00000000, 0);
  if ((v4 & 0x4000000000) == 0 && (*(unsigned int (**)(uint64_t))(*(void *)a2 + 24))(a2) != -1)
  {
    if ((v4 & 0x800000000) == 0)
    {
      uint64_t v6 = 0;
      v5[0] = v3;
      v5[1] = 0;
      v5[2] = 0;
      v5[3] = &v6;
      fst::DfsVisit<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>(a2, (uint64_t)v5);
    }
    operator new();
  }
  operator new();
}

void sub_1B22CEA2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, char a16, char a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a18) {
    operator delete(a18);
  }
  BOOL v30 = *v28;
  if (*v28)
  {
    *(void *)(v26 + 56) = v30;
    operator delete(v30);
  }
  BOOL v31 = *v27;
  if (*v27)
  {
    *(void *)(v26 + 32) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::AutoQueue<int>::SccQueueType<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::NaturalLess<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unsigned char *a5, unsigned char *a6)
{
  *a5 = 1;
  *a6 = 1;
  uint64_t v11 = *(void *)(a3 + 8) - *(void *)a3;
  if (v11)
  {
    unint64_t v12 = v11 >> 2;
    if (v12 <= 1) {
      unint64_t v12 = 1;
    }
    bzero(*(void **)a3, 4 * v12);
  }
  unsigned int v28 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v26);
  while (1)
  {
    uint64_t result = v26;
    if (!v26)
    {
      if ((int)v28 >= v27) {
        return result;
      }
LABEL_11:
      uint64_t v15 = v28;
      goto LABEL_12;
    }
    int v14 = (*(uint64_t (**)(uint64_t))(*(void *)v26 + 16))(v26);
    uint64_t result = v26;
    if (v14) {
      break;
    }
    if (!v26) {
      goto LABEL_11;
    }
    uint64_t v15 = (*(uint64_t (**)(void))(*(void *)v26 + 24))();
LABEL_12:
    unint64_t v25 = 0;
    (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 136))(a1, v15, v23);
    uint64_t v16 = (int)v15;
    while (1)
    {
      if (!v23[0])
      {
        if (v25 >= v23[2]) {
          goto LABEL_32;
        }
        goto LABEL_18;
      }
      if ((*(unsigned int (**)(void))(*(void *)v23[0] + 24))(v23[0])) {
        break;
      }
      if (v23[0])
      {
        uint64_t v17 = (*(uint64_t (**)(void))(*(void *)v23[0] + 32))();
        goto LABEL_19;
      }
LABEL_18:
      uint64_t v17 = v23[1] + 56 * v25;
LABEL_19:
      uint64_t v18 = *(int *)(*a2 + 4 * v16);
      if (v18 == *(_DWORD *)(*a2 + 4 * *(int *)(v17 + 48)))
      {
        long long v19 = *(_DWORD **)a3;
        if (!a4
          || (uint64_t v20 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::One(),
              fst::NaturalLess<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::operator()(a4, v17 + 8, v20)))
        {
          int v21 = 1;
          goto LABEL_25;
        }
        if ((v19[v18] | 2) == 2)
        {
          int v21 = 3;
LABEL_25:
          v19[v18] = v21;
        }
        *a5 = 0;
      }
      *a6 = 0;
      if (v23[0]) {
        (*(void (**)(void))(*(void *)v23[0] + 40))(v23[0]);
      }
      else {
        ++v25;
      }
    }
    if (v23[0])
    {
      (*(void (**)(void))(*(void *)v23[0] + 8))();
      goto LABEL_34;
    }
LABEL_32:
    if (v24) {
      --*v24;
    }
LABEL_34:
    if (v26) {
      (*(void (**)(uint64_t))(*(void *)v26 + 32))(v26);
    }
    else {
      ++v28;
    }
  }
  if (v26) {
    return (*(uint64_t (**)(void))(*(void *)v26 + 8))();
  }
  return result;
}

void sub_1B22CEE98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16) {
    (*(void (**)(uint64_t))(*(void *)a16 + 8))(a16);
  }
  _Unwind_Resume(exception_object);
}

void fst::TopOrderQueue<int>::TopOrderQueue<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 4;
  *(unsigned char *)(a1 + 12) = 0;
  *(void *)a1 = &unk_1F0A3A1C8;
  *(void *)(a1 + 16) = 0xFFFFFFFF00000000;
  *(_OWORD *)(a1 + ++*(void *)(result + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  char v3 = 0;
  uint64_t v1 = a1 + 24;
  unint64_t v2 = &v3;
  fst::DfsVisit<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::TopOrderVisitor<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>();
}

void sub_1B22CF070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0) {
    operator delete(__p);
  }
  uint64_t v22 = *v19;
  if (*v19)
  {
    *(void *)(v18 + 56) = v22;
    operator delete(v22);
  }
  float v23 = *v20;
  if (*v20)
  {
    *(void *)(v18 + 32) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(a1);
}

void fst::DfsVisit<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::TopOrderVisitor<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>()
{
}

void sub_1B22CF960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::~MemoryPool((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va1);
  uint64_t v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(void *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

void fst::ShortestDistanceState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::ShortestDistance(void *a1)
{
  if ((*(unsigned int (**)(void))(*(void *)*a1 + 24))(*a1) != -1)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    unint64_t v2 = fst::LogMessage::LogMessage((fst *)&v11, (uint64_t)__p);
    char v3 = (void *)fst::cerr(v2);
    uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"ShortestDistance: Weight needs to be right distributive: ", 57);
    uint64_t v5 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Type();
    int v6 = *(char *)(v5 + 23);
    if (v6 >= 0) {
      uint64_t v7 = v5;
    }
    else {
      uint64_t v7 = *(void *)v5;
    }
    if (v6 >= 0) {
      uint64_t v8 = *(unsigned __int8 *)(v5 + 23);
    }
    else {
      uint64_t v8 = *(void *)(v5 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v11);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    goto LABEL_15;
  }
  if ((*(uint64_t (**)(void, uint64_t, void))(*(void *)*a1 + 64))(*a1, 4, 0)) {
LABEL_15:
  }
    *((unsigned char *)a1 + 116) = 1;
}

void sub_1B22CFB40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *fst::Times<int,fst::LogWeightTpl<float>,(fst::GallicType)0>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  fst::Times<int,(fst::StringType)0>((int *)a1, a2, (uint64_t)&v12);
  float v6 = *(float *)(a1 + 32);
  float v7 = NAN;
  if (v6 != -INFINITY)
  {
    float v8 = *(float *)(a2 + 32);
    float v7 = NAN;
    if (v8 != -INFINITY)
    {
      float v7 = INFINITY;
      BOOL v9 = v8 == INFINITY || v6 == INFINITY;
      float v10 = v6 + v8;
      if (!v9) {
        float v7 = v10;
      }
    }
  }
  fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::GallicWeight(a3, &v12, v7);
  return std::__list_imp<char *>::clear(v13);
}

void sub_1B22CFC28(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear((void *)(v1 + 8));
  _Unwind_Resume(a1);
}

void fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::VectorFst()
{
}

void sub_1B22CFC9C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

void fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::~VectorFst(void *a1)
{
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::~ImplToFst(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::Start(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 8) + 88);
}

void *fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(_DWORD **)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2);
  *(_DWORD *)a3 = *v4;
  uint64_t result = std::list<int>::list((void *)(a3 + 8), (uint64_t)(v4 + 2));
  *(_DWORD *)(a3 + 32) = v4[8];
  return result;
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::NumArcs(uint64_t a1, int a2)
{
  return 0x6DB6DB6DB6DB6DB7
       * ((uint64_t)(*(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 64)
                  - *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 56)) >> 3);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 40);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 48);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = fst::TestProperties<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    float v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return v7();
  }
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::Type(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

void fst::Fst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::GetArcs(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
}

void fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::Copy()
{
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::InitStateIterator(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 8) = (*(void *)(v2 + 72) - *(void *)(v2 + 64)) >> 3;
  return result;
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::InitArcIterator(uint64_t result, int a2, void *a3)
{
  uint64_t v3 = *(void *)(result + 8);
  *a3 = 0;
  unint64_t v5 = (uint64_t *)(*(void *)(*(void *)(v3 + 64) + 8 * a2) + 56);
  uint64_t v4 = *v5;
  uint64_t v6 = 0x6DB6DB6DB6DB6DB7 * ((v5[1] - *v5) >> 3);
  if (v5[1] == *v5) {
    uint64_t v4 = 0;
  }
  a3[1] = v4;
  a3[2] = v6;
  a3[3] = 0;
  return result;
}

uint64_t fst::Fst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::IsMemoryMapped()
{
  return 0;
}

uint64_t fst::ImplToExpandedFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::NumStates(uint64_t a1)
{
  return (*(void *)(*(void *)(a1 + 8) + 72) - *(void *)(*(void *)(a1 + 8) + 64)) >> 3;
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::operator=(uint64_t result, uint64_t a2)
{
  if (result != a2) {
    operator new();
  }
  return result;
}

void sub_1B22D0040(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

unint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::SetStart(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::MutateCheck(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  *(_DWORD *)(v4 + 88) = a2;
  unint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
  *(void *)(v4 + 8) = result & 0xCCFFFFF0007 | (((result >> 35) & 1) << 37) | *(void *)(v4 + 8) & 4;
  return result;
}

void *fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::SetFinal(uint64_t a1, int a2, int *a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::MutateCheck(a1);
  uint64_t v6 = *(void **)(a1 + 8);
  int v8 = *a3;
  std::list<int>::list(v9, (uint64_t)(a3 + 2));
  int v10 = a3[8];
  fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::SetFinal(v6, a2, &v8);
  return std::__list_imp<char *>::clear(v9);
}

void sub_1B22D0160(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::SetProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a3 & 4;
  uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), v6);
  if (result != (v6 & a2)) {
    uint64_t result = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::MutateCheck(a1);
  }
  *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~a3 | 4) | a3 & a2;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::AddState(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::MutateCheck(a1);
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::AddState(v2);
  v2[1] = v2[1] & 4 | (*(uint64_t (**)(void *))(*v2 + 24))(v2) & 0x2AFFFFFF0007;
  return v3;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::AddArc(uint64_t a1, int a2, int *a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::MutateCheck(a1);
  uint64_t v6 = *(void **)(a1 + 8);
  return fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::AddArc(v6, a2, a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::DeleteStates(uint64_t a1, char **a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::MutateCheck(a1);
  uint64_t v4 = *(void **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::DeleteStates((uint64_t)v4, a2);
  uint64_t result = (*(uint64_t (**)(void *))(*v4 + 24))(v4);
  v4[1] = v4[1] & 4 | result & 0x6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::DeleteStates(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::MutateCheck(a1);
  uint64_t v2 = *(void **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::DeleteStates((uint64_t)v2);
  uint64_t result = (*(uint64_t (**)(void *))(*v2 + 24))(v2);
  v2[1] = (*((_DWORD *)v2 + 2) | result) & 4 | 0x156A5A950003;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::DeleteArcs(uint64_t a1, int a2, uint64_t a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::MutateCheck(a1);
  uint64_t v6 = *(void **)(a1 + 8);
  fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::DeleteArcs(*(void **)(v6[8] + 8 * a2), a3);
  uint64_t result = (*(uint64_t (**)(void *))(*v6 + 24))(v6);
  v6[1] = v6[1] & 4 | result & 0xA6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::DeleteArcs(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::MutateCheck(a1);
  uint64_t v4 = *(void **)(a1 + 8);
  return fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::DeleteArcs(v4, a2);
}

void fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::ReserveStates(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::MutateCheck(a1);
  uint64_t v4 = (void **)(*(void *)(a1 + 8) + 64);
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve(v4, a2);
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::ReserveArcs(uint64_t a1, int a2, unint64_t a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::MutateCheck(a1);
  uint64_t v6 = (uint64_t *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 56);
  return std::vector<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::reserve(v6, a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::MutableInputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::MutableOutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::SetInputSymbols(uint64_t a1, uint64_t a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::MutateCheck(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  return fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetInputSymbols(v4, a2);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::SetOutputSymbols(uint64_t a1, uint64_t a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::MutateCheck(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  return fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetOutputSymbols(v4, a2);
}

void fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::InitMutableArcIterator()
{
}

void sub_1B22D06A0(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B1C402DF695F1);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::VectorFstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A3FC38;
  *(void *)(a1 + 8) = 0;
  uint64_t v2 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(void *)a1 = &unk_1F0A3A368;
  std::string::basic_string[abi:ne180100]<0>(&__str, "vector");
  std::string::operator=(v2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 8) = *(void *)(a1 + 8) & 4 | 0x156A5A950003;
  return a1;
}

void sub_1B22D07A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::~VectorFstBaseImpl(v15);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::~VectorFstBaseImpl(void *a1)
{
  *a1 = &unk_1F0A3D168;
  uint64_t v2 = (void *)a1[9];
  if (v2 != (void *)a1[8])
  {
    unint64_t v3 = 0;
    uint64_t v2 = (void *)a1[8];
    do
    {
      fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Destroy(v2[v3++]);
      uint64_t v2 = (void *)a1[8];
    }
    while (v3 < (uint64_t)(a1[9] - (void)v2) >> 3);
  }
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  return fst::FstImpl<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::~FstImpl((uint64_t)a1);
}

void fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::~VectorFstImpl(void *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::HasSequentialStates()
{
  return 1;
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::Properties(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::Properties(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 8) & a2;
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::~VectorFstBaseImpl(void *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::FstImpl<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::~FstImpl(uint64_t a1)
{
  fst::FstImpl<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::~FstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::~FstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A3FC38;
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

uint64_t fst::Fst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::Write(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  uint64_t v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  uint64_t v3 = (void *)fst::cerr(v2);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write stream method for ", 39);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
  int v6 = *(char *)(v5 + 23);
  if (v6 >= 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = *(void *)v5;
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    uint64_t v8 = *(void *)(v5 + 8);
  }
  BOOL v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

{
  fst *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *__p[2];
  char v12;
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  uint64_t v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  uint64_t v3 = (void *)fst::cerr(v2);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write filename method for ", 41);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
  int v6 = *(char *)(v5 + 23);
  if (v6 >= 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = *(void *)v5;
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    uint64_t v8 = *(void *)(v5 + 8);
  }
  BOOL v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_1B22D0AB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B22D0BB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::operator=(uint64_t a1)
{
  if (FLAGS_fst_error_fatal) {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
  }
  else {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  }
  uint64_t v2 = fst::LogMessage::LogMessage((fst *)&v7, (uint64_t)__p);
  uint64_t v3 = (void *)fst::cerr(v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"ImplToFst: Assignment operator disallowed", 41);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *(void *)(*(void *)(a1 + 8) + 8) |= 4uLL;
  return a1;
}

void sub_1B22D0CB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::MutateCheck(uint64_t result)
{
  if (*(int *)(*(void *)(result + 8) + 56) >= 2) {
    operator new();
  }
  return result;
}

void sub_1B22D0D80(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::VectorFstImpl(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A3FC38;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)(a1 + 64) = 0;
  uint64_t v5 = (void *)(a1 + 64);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(void *)a1 = &unk_1F0A3A368;
  std::string::basic_string[abi:ne180100]<0>(&__str, "vector");
  std::string::operator=(v4, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetInputSymbols(a1, v6);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 120))(a2);
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetOutputSymbols(a1, v7);
  *(_DWORD *)(a1 + 88) = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 1, 0))
  {
    int v8 = fst::CountStates<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>(a2);
    std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(a1 + 64), v8);
  }
  unsigned int v20 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 128))(a2, &v18);
  while (1)
  {
    if (!v18)
    {
      if ((int)v20 >= v19) {
        goto LABEL_31;
      }
LABEL_11:
      uint64_t v9 = v20;
      goto LABEL_12;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v18 + 16))(v18)) {
      break;
    }
    if (!v18) {
      goto LABEL_11;
    }
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 24))(v18);
LABEL_12:
    fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::AddState((void *)a1);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a2 + 32))(&v16, a2, v9);
    fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::SetFinal(a1, v9, (int *)&v16);
    std::__list_imp<char *>::clear(v17);
    unint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, v9);
    std::vector<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::reserve((uint64_t *)(*(void *)(*v5 + 8 * (int)v9) + 56), v10);
    std::string::size_type v15 = 0;
    (*(void (**)(uint64_t, uint64_t, std::string *))(*(void *)a2 + 136))(a2, v9, &__str);
    while (1)
    {
      if (!__str.__r_.__value_.__r.__words[0])
      {
        if (v15 >= __str.__r_.__value_.__r.__words[2]) {
          goto LABEL_24;
        }
LABEL_18:
        char v11 = (_DWORD *)(__str.__r_.__value_.__l.__size_ + 56 * v15);
        goto LABEL_19;
      }
      if ((*(unsigned int (**)(std::string::size_type))(*(void *)__str.__r_.__value_.__l.__data_ + 24))(__str.__r_.__value_.__r.__words[0])) {
        break;
      }
      if (!__str.__r_.__value_.__r.__words[0]) {
        goto LABEL_18;
      }
      char v11 = (_DWORD *)(*(uint64_t (**)(void))(*(void *)__str.__r_.__value_.__l.__data_ + 32))();
LABEL_19:
      fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::AddArc(*(void **)(*v5 + 8 * (int)v9), v11);
      if (__str.__r_.__value_.__r.__words[0]) {
        (*(void (**)(std::string::size_type))(*(void *)__str.__r_.__value_.__l.__data_ + 40))(__str.__r_.__value_.__r.__words[0]);
      }
      else {
        ++v15;
      }
    }
    if (__str.__r_.__value_.__r.__words[0])
    {
      (*(void (**)(void))(*(void *)__str.__r_.__value_.__l.__data_ + 8))();
      goto LABEL_26;
    }
LABEL_24:
    if (v14) {
      --*v14;
    }
LABEL_26:
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 32))(v18);
    }
    else {
      ++v20;
    }
  }
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
LABEL_31:
  *(void *)(a1 + 8) = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x3FFFFFFF0004, 0) | *(void *)(a1 + 8) & 4 | 3;
  return a1;
}

void sub_1B22D1298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::~VectorFstBaseImpl(v16);
  _Unwind_Resume(a1);
}

uint64_t fst::CountStates<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>(uint64_t a1)
{
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 1, 0))
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 160);
    return v2(a1);
  }
  int v7 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v5);
  uint64_t v4 = 0;
  while (1)
  {
    while (!v5)
    {
      if (v7 >= v6) {
        return v4;
      }
      uint64_t v4 = (v4 + 1);
LABEL_12:
      ++v7;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 16))(v5)) {
      break;
    }
    uint64_t v4 = (v4 + 1);
    if (!v5) {
      goto LABEL_12;
    }
    (*(void (**)(void))(*(void *)v5 + 32))();
  }
  if (v5) {
    (*(void (**)(void))(*(void *)v5 + 8))();
  }
  return v4;
}

void sub_1B22D14F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    fst::CountStates<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>();
  }
  _Unwind_Resume(exception_object);
}

void *fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::SetFinal(uint64_t a1, int a2, int *a3)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 64) + 8 * a2);
  int v7 = *a3;
  std::list<int>::list(v8, (uint64_t)(a3 + 2));
  int v5 = a3[8];
  int v9 = v5;
  *(_DWORD *)uint64_t v4 = v7;
  if ((int *)v4 != &v7)
  {
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v4 + 8), v8[1], (uint64_t)v8);
    int v5 = v9;
  }
  *(_DWORD *)(v4 + 32) = v5;
  return std::__list_imp<char *>::clear(v8);
}

void sub_1B22D1594(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x492492492492493) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>>(result, a2);
    v7[1] = v7[0] + v5;
    _DWORD v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 56 * v6;
    std::vector<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1B22D1654(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>,std::reverse_iterator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>*>,std::reverse_iterator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>*>,std::reverse_iterator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>,std::reverse_iterator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>*>,std::reverse_iterator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>*>,std::reverse_iterator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = a7 + v11;
      *(void *)(v12 - 56) = *(void *)(a3 + v11 - 56);
      *(_DWORD *)(v12 - 48) = *(_DWORD *)(a3 + v11 - 48);
      std::list<int>::list((void *)(a7 + v11 - 40), a3 + v11 - 40);
      *(_DWORD *)(v12 - 16) = *(_DWORD *)(a3 + v11 - 16);
      *(_DWORD *)(v12 - 8) = *(_DWORD *)(a3 + v11 - 8);
      v11 -= 56;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_1B22D1780(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 + 16;
    do
    {
      std::__list_imp<char *>::clear((void *)(v4 + v2));
      v2 += 56;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::AddArc(void *a1, _DWORD *a2)
{
  if (!*a2) {
    ++a1[5];
  }
  if (!a2[1]) {
    ++a1[6];
  }
  uint64_t v3 = a1 + 7;
  unint64_t v4 = a1[8];
  if (v4 >= a1[9])
  {
    uint64_t result = std::vector<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::__push_back_slow_path<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>> const&>(v3, (uint64_t)a2);
  }
  else
  {
    std::vector<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::__construct_one_at_end[abi:ne180100]<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>> const&>((uint64_t)v3, (uint64_t)a2);
    uint64_t result = v4 + 56;
  }
  a1[8] = result;
  return result;
}

void *std::vector<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::__construct_one_at_end[abi:ne180100]<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)uint64_t v4 = *(void *)a2;
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t result = std::list<int>::list((void *)(v4 + 16), a2 + 16);
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(v4 + 48) = *(_DWORD *)(a2 + 48);
  *(void *)(a1 + 8) = v4 + 56;
  return result;
}

void sub_1B22D1874(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::__push_back_slow_path<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x249249249249249) {
    unint64_t v9 = 0x492492492492492;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v18 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  uint64_t v11 = &v10[56 * v4];
  v15[0] = v10;
  v15[1] = v11;
  uint64_t v16 = v11;
  uint64_t v17 = &v10[56 * v9];
  *(void *)uint64_t v11 = *(void *)a2;
  *((_DWORD *)v11 + 2) = *(_DWORD *)(a2 + 8);
  std::list<int>::list((void *)v11 + 2, a2 + 16);
  uint64_t v12 = &v10[56 * v4];
  *((_DWORD *)v12 + 10) = *(_DWORD *)(a2 + 40);
  *((_DWORD *)v12 + 12) = *(_DWORD *)(a2 + 48);
  v16 += 56;
  std::vector<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::__swap_out_circular_buffer(a1, v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_1B22D19B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t fst::TestProperties<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (FLAGS_fst_verify_properties)
  {
    unint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    unint64_t v7 = fst::ComputeProperties<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>(a1, a2, a3, 0);
    if (!fst::CompatProperties(v6, v7))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      unint64_t v8 = fst::LogMessage::LogMessage((fst *)&v14, (uint64_t)__p);
      unint64_t v9 = (void *)fst::cerr(v8);
      unint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"TestProperties: stored Fst properties incorrect", 47);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" (stored: props1, computed: props2)", 35);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v14);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }
    return v7;
  }
  else
  {
    return fst::ComputeProperties<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>(a1, a2, a3, 1);
  }
}

void sub_1B22D1B00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t fst::ComputeProperties<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  unint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  unint64_t v8 = v7;
  if (!a4
    || (uint64_t v9 = v7 & 0x3FFFFFFF0000 | (2 * v7) & 0x2AAAAAAA0000 | (v7 >> 1) & 0x155555550000 | 7, (a2 & ~v9) != 0))
  {
    unint64_t v8 = v7 & 7;
    unint64_t v116 = v8;
    int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    if ((a2 & 0xF3C00000000) != 0 && v10)
    {
      uint64_t v109 = 0;
      uint64_t v110 = 0;
      uint64_t v111 = 0;
      float v112 = (uint64_t *)&v116;
      fst::DfsVisit<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::SccVisitor<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::AnyArcFilter<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>(a1, (uint64_t)&v109);
    }
    if ((a2 & 0xFFFFF0C3FFFFFFF8) == 0) {
      goto LABEL_211;
    }
    uint64_t v11 = a2 & 0xC0000;
    uint64_t v12 = 0x10425A810000;
    if ((a2 & 0xC0000) != 0) {
      uint64_t v12 = 0x10425A850000;
    }
    unint64_t v13 = v8 | v12;
    uint64_t v14 = a2 & 0x300000;
    if ((a2 & 0x300000) != 0) {
      v13 |= 0x100000uLL;
    }
    unint64_t v116 = v13;
    memset(&v108, 0, sizeof(v108));
    memset(&v107, 0, sizeof(v107));
    unsigned int v106 = 0;
    uint64_t v15 = a1;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v104);
    int v16 = 0;
LABEL_12:
    if (!v104)
    {
      if ((int)v106 >= v105) {
        goto LABEL_203;
      }
      goto LABEL_17;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(void *)v104 + 16))(v104))
    {
      if (v104)
      {
        uint64_t v17 = (*(uint64_t (**)(void))(*(void *)v104 + 24))();
LABEL_18:
        std::vector<unsigned int>::size_type v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v15 + 40))(v15, v17);
        uint64_t v111 = (uint64_t)&v111;
        float v112 = &v111;
        uint64_t v113 = 0;
        LODWORD(v110) = 0;
        v108.__end_ = v108.__begin_;
        v107.__end_ = v107.__begin_;
        if (v11) {
          std::vector<int>::reserve(&v108, v18);
        }
        if (v14) {
          std::vector<int>::reserve(&v107, v18);
        }
        int v98 = v16;
        unint64_t v103 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v15 + 136))(v15, v17, &v99);
        char v19 = 1;
        while (1)
        {
          if (v99)
          {
            if ((*(unsigned int (**)(uint64_t))(*(void *)v99 + 24))(v99))
            {
              if (v99)
              {
                (*(void (**)(void))(*(void *)v99 + 8))();
              }
              else
              {
LABEL_132:
                if (v102) {
                  --*v102;
                }
              }
              uint64_t v15 = a1;
              int v16 = v98;
              if (!v11
                || (std::__sort<std::__less<int,int> &,int *>(),
                    (std::vector<unsigned int>::pointer)((char *)v108.__end_ - (char *)v108.__begin_) < (std::vector<unsigned int>::pointer)5))
              {
LABEL_141:
                if (!v14) {
                  goto LABEL_152;
                }
LABEL_142:
                std::__sort<std::__less<int,int> &,int *>();
                if ((std::vector<unsigned int>::pointer)((char *)v107.__end_ - (char *)v107.__begin_) >= (std::vector<unsigned int>::pointer)5)
                {
                  unint64_t v72 = v107.__end_ - v107.__begin_;
                  if (v72 <= 2) {
                    unint64_t v72 = 2;
                  }
                  std::vector<unsigned int>::pointer v73 = v107.__begin_ + 1;
                  unsigned int v74 = *v107.__begin_;
                  unint64_t v75 = v72 - 1;
                  while (1)
                  {
                    unsigned int v77 = *v73++;
                    unsigned int v76 = v77;
                    if (v77 == v74) {
                      break;
                    }
                    unsigned int v74 = v76;
                    if (!--v75) {
                      goto LABEL_152;
                    }
                  }
                  unint64_t v116 = v116 & 0xFFFFFFFFFFCFFFFFLL | 0x200000;
                }
                goto LABEL_152;
              }
              unint64_t v66 = v108.__end_ - v108.__begin_;
              if (v66 <= 2) {
                unint64_t v66 = 2;
              }
              std::vector<unsigned int>::pointer v67 = v108.__begin_ + 1;
              unsigned int v68 = *v108.__begin_;
              unint64_t v69 = v66 - 1;
              while (1)
              {
                unsigned int v71 = *v67++;
                unsigned int v70 = v71;
                if (v71 == v68) {
                  break;
                }
                unsigned int v68 = v70;
                if (!--v69) {
                  goto LABEL_141;
                }
              }
              unint64_t v116 = v116 & 0xFFFFFFFFFFF3FFFFLL | 0x80000;
              if (v14) {
                goto LABEL_142;
              }
LABEL_152:
              if (v98 >= 1) {
                unint64_t v116 = v116 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
              }
              (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(&v99, a1, v17);
              uint64_t v78 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
              if (v99) {
                uint64_t v79 = (char *)v102 + 1;
              }
              else {
                uint64_t v79 = 0;
              }
              if (*(_DWORD *)v78) {
                uint64_t v80 = *(void *)(v78 + 24) + 1;
              }
              else {
                uint64_t v80 = 0;
              }
              if (v79 != (char *)v80) {
                goto LABEL_174;
              }
              char v81 = 0;
              unint64_t v82 = v101;
              int v83 = (uint64_t *)(v78 + 16);
              BOOL v84 = v99 && v99 == *(_DWORD *)v78;
              BOOL v85 = !v84;
              while (1)
              {
                uint64_t v86 = *v83;
                if ((v81 & 1) == 0 && v85) {
                  break;
                }
                if ((uint64_t *)v82 == &v100) {
                  goto LABEL_173;
                }
                if (*(_DWORD *)(v82 + 16) != *(_DWORD *)(v86 + 16)) {
                  goto LABEL_174;
                }
                unint64_t v82 = *(void *)(v82 + 8);
                int v83 = (uint64_t *)(v86 + 8);
                char v81 = 1;
              }
              if (v99) {
                goto LABEL_174;
              }
LABEL_173:
              float v118 = *(float *)&v103;
              float v117 = 0.0;
              float v117 = *(float *)(v78 + 32);
              if (*(float *)&v103 == v117)
              {
                if ((*(uint64_t (**)(uint64_t, uint64_t, float))(*(void *)a1 + 40))(a1, v17, *(float *)&v103) != 1)unint64_t v116 = v116 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000; {
              }
                }
              else
              {
LABEL_174:
                uint64_t v87 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::One();
                if (v99) {
                  int v88 = (char *)v102 + 1;
                }
                else {
                  int v88 = 0;
                }
                if (*(_DWORD *)v87) {
                  uint64_t v89 = *(void *)(v87 + 24) + 1;
                }
                else {
                  uint64_t v89 = 0;
                }
                if (v88 != (char *)v89) {
                  goto LABEL_194;
                }
                char v90 = 0;
                unint64_t v91 = v101;
                uint64_t v92 = (uint64_t *)(v87 + 16);
                BOOL v93 = v99 && v99 == *(_DWORD *)v87;
                BOOL v94 = !v93;
                while (1)
                {
                  uint64_t v95 = *v92;
                  if ((v90 & 1) == 0 && v94) {
                    break;
                  }
                  if ((uint64_t *)v91 == &v100) {
                    goto LABEL_193;
                  }
                  if (*(_DWORD *)(v91 + 16) != *(_DWORD *)(v95 + 16)) {
                    goto LABEL_194;
                  }
                  unint64_t v91 = *(void *)(v91 + 8);
                  uint64_t v92 = (uint64_t *)(v95 + 8);
                  char v90 = 1;
                }
                if (v99) {
                  goto LABEL_194;
                }
LABEL_193:
                float v118 = *(float *)&v103;
                float v117 = 0.0;
                float v117 = *(float *)(v87 + 32);
                if (*(float *)&v103 != v117) {
LABEL_194:
                }
                  unint64_t v116 = v116 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
                int v16 = v98 + 1;
              }
              std::__list_imp<char *>::clear(&v100);
              std::__list_imp<char *>::clear(&v111);
              if (v104) {
                (*(void (**)(uint64_t))(*(void *)v104 + 32))(v104);
              }
              else {
                ++v106;
              }
              goto LABEL_12;
            }
            if (v99)
            {
              uint64_t v20 = (*(uint64_t (**)(void))(*(void *)v99 + 32))();
              goto LABEL_29;
            }
          }
          else if (v103 >= v101)
          {
            goto LABEL_132;
          }
          uint64_t v20 = v100 + 56 * v103;
LABEL_29:
          int v21 = *(_DWORD *)v20;
          int v22 = *(_DWORD *)v20;
          if (*(_DWORD *)v20 != *(_DWORD *)(v20 + 4))
          {
            unint64_t v116 = v116 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
            int v22 = *(_DWORD *)(v20 + 4);
          }
          if (v21 | v22)
          {
            if (v21)
            {
              if (v22) {
                goto LABEL_35;
              }
              goto LABEL_39;
            }
            unint64_t v23 = v116;
          }
          else
          {
            unint64_t v23 = v116 & 0xFFFFFFFFFF3FFFFFLL | 0x400000;
          }
          unint64_t v116 = v23 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
          if (v22)
          {
LABEL_35:
            if ((v19 & 1) == 0) {
              goto LABEL_40;
            }
            goto LABEL_44;
          }
LABEL_39:
          unint64_t v116 = v116 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
          if ((v19 & 1) == 0)
          {
LABEL_40:
            if (v21 < (int)v109) {
              unint64_t v116 = v116 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
            }
            if (v22 < SHIDWORD(v109)) {
              unint64_t v116 = v116 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
            }
          }
LABEL_44:
          uint64_t v24 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::One();
          int v25 = *(_DWORD *)(v20 + 8);
          if (v25) {
            uint64_t v26 = *(void *)(v20 + 32) + 1;
          }
          else {
            uint64_t v26 = 0;
          }
          if (*(_DWORD *)v24) {
            uint64_t v27 = *(void *)(v24 + 24) + 1;
          }
          else {
            uint64_t v27 = 0;
          }
          if (v26 != v27) {
            goto LABEL_64;
          }
          char v28 = 0;
          int v29 = (uint64_t *)(v20 + 24);
          BOOL v30 = (uint64_t *)(v24 + 16);
          BOOL v31 = v25 && v25 == *(_DWORD *)v24;
          BOOL v32 = !v31;
          while (1)
          {
            uint64_t v33 = *v29;
            uint64_t v34 = *v30;
            if ((v28 & 1) == 0 && v32) {
              break;
            }
            if (v33 == v20 + 16) {
              goto LABEL_63;
            }
            if (*(_DWORD *)(v33 + 16) != *(_DWORD *)(v34 + 16)) {
              goto LABEL_64;
            }
            int v29 = (uint64_t *)(v33 + 8);
            BOOL v30 = (uint64_t *)(v34 + 8);
            char v28 = 1;
          }
          if (v25) {
            goto LABEL_64;
          }
LABEL_63:
          float v118 = 0.0;
          float v118 = *(float *)(v20 + 40);
          float v117 = 0.0;
          float v117 = *(float *)(v24 + 32);
          if (v118 != v117)
          {
LABEL_64:
            uint64_t v35 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
            int v25 = *(_DWORD *)(v20 + 8);
            if (v25) {
              uint64_t v36 = *(void *)(v20 + 32) + 1;
            }
            else {
              uint64_t v36 = 0;
            }
            if (*(_DWORD *)v35) {
              uint64_t v37 = *(void *)(v35 + 24) + 1;
            }
            else {
              uint64_t v37 = 0;
            }
            if (v36 != v37) {
              goto LABEL_84;
            }
            char v38 = 0;
            uint64_t v39 = (uint64_t *)(v20 + 24);
            uint64_t v40 = (uint64_t *)(v35 + 16);
            BOOL v41 = v25 && v25 == *(_DWORD *)v35;
            BOOL v42 = !v41;
            while (1)
            {
              uint64_t v43 = *v39;
              uint64_t v44 = *v40;
              if ((v38 & 1) == 0 && v42) {
                break;
              }
              if (v43 == v20 + 16) {
                goto LABEL_83;
              }
              if (*(_DWORD *)(v43 + 16) != *(_DWORD *)(v44 + 16)) {
                goto LABEL_84;
              }
              uint64_t v39 = (uint64_t *)(v43 + 8);
              uint64_t v40 = (uint64_t *)(v44 + 8);
              char v38 = 1;
            }
            if (v25) {
              goto LABEL_84;
            }
LABEL_83:
            float v118 = 0.0;
            float v118 = *(float *)(v20 + 40);
            float v117 = 0.0;
            float v117 = *(float *)(v35 + 32);
            if (v118 != v117) {
LABEL_84:
            }
              unint64_t v116 = v116 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
          }
          int v45 = *(_DWORD *)(v20 + 48);
          if (v45 <= (int)v17) {
            unint64_t v116 = v116 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
          }
          if (v45 != v17 + 1) {
            unint64_t v116 = v116 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
          }
          uint64_t v109 = *(void *)v20;
          LODWORD(v110) = v25;
          if (&v109 != (uint64_t *)v20)
          {
            std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(&v111, *(void *)(v20 + 24), v20 + 16);
            int v45 = *(_DWORD *)(v20 + 48);
          }
          int v114 = *(_DWORD *)(v20 + 40);
          int v115 = v45;
          if (v11)
          {
            std::vector<unsigned int>::pointer end = v108.__end_;
            if (v108.__end_ >= v108.__end_cap_.__value_)
            {
              std::vector<unsigned int>::pointer begin = v108.__begin_;
              int64_t v49 = v108.__end_ - v108.__begin_;
              unint64_t v50 = v49 + 1;
              if ((unint64_t)(v49 + 1) >> 62) {
                goto LABEL_213;
              }
              int64_t v51 = (char *)v108.__end_cap_.__value_ - (char *)v108.__begin_;
              if (((char *)v108.__end_cap_.__value_ - (char *)v108.__begin_) >> 1 > v50) {
                unint64_t v50 = v51 >> 1;
              }
              if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v52 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v52 = v50;
              }
              if (v52)
              {
                float v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v108.__end_cap_, v52);
                std::vector<unsigned int>::pointer begin = v108.__begin_;
                std::vector<unsigned int>::pointer end = v108.__end_;
              }
              else
              {
                float v53 = 0;
              }
              long long v54 = (unsigned int *)&v53[4 * v49];
              unsigned int *v54 = *(_DWORD *)v20;
              uint64_t v47 = v54 + 1;
              while (end != begin)
              {
                unsigned int v55 = *--end;
                *--long long v54 = v55;
              }
              v108.__begin_ = v54;
              v108.__end_ = v47;
              v108.__end_cap_.__value_ = (unsigned int *)&v53[4 * v52];
              if (begin) {
                operator delete(begin);
              }
            }
            else
            {
              *v108.__end_ = *(_DWORD *)v20;
              uint64_t v47 = end + 1;
            }
            v108.__end_ = v47;
          }
          if (v14)
          {
            std::vector<unsigned int>::pointer v56 = v107.__end_;
            if (v107.__end_ >= v107.__end_cap_.__value_)
            {
              std::vector<unsigned int>::pointer v58 = v107.__begin_;
              int64_t v59 = v107.__end_ - v107.__begin_;
              unint64_t v60 = v59 + 1;
              if ((unint64_t)(v59 + 1) >> 62) {
LABEL_213:
              }
                std::vector<int>::__throw_length_error[abi:ne180100]();
              int64_t v61 = (char *)v107.__end_cap_.__value_ - (char *)v107.__begin_;
              if (((char *)v107.__end_cap_.__value_ - (char *)v107.__begin_) >> 1 > v60) {
                unint64_t v60 = v61 >> 1;
              }
              if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v62 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v62 = v60;
              }
              if (v62)
              {
                int v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v107.__end_cap_, v62);
                std::vector<unsigned int>::pointer v58 = v107.__begin_;
                std::vector<unsigned int>::pointer v56 = v107.__end_;
              }
              else
              {
                int v63 = 0;
              }
              unsigned int v64 = (unsigned int *)&v63[4 * v59];
              *unsigned int v64 = *(_DWORD *)(v20 + 4);
              uint64_t v57 = v64 + 1;
              while (v56 != v58)
              {
                unsigned int v65 = *--v56;
                *--unsigned int v64 = v65;
              }
              v107.__begin_ = v64;
              v107.__end_ = v57;
              v107.__end_cap_.__value_ = (unsigned int *)&v63[4 * v62];
              if (v58) {
                operator delete(v58);
              }
            }
            else
            {
              *v107.__end_ = *(_DWORD *)(v20 + 4);
              uint64_t v57 = v56 + 1;
            }
            v107.__end_ = v57;
          }
          if (v99)
          {
            (*(void (**)(uint64_t))(*(void *)v99 + 40))(v99);
            char v19 = 0;
          }
          else
          {
            char v19 = 0;
            ++v103;
          }
        }
      }
LABEL_17:
      uint64_t v17 = v106;
      goto LABEL_18;
    }
    if (v104) {
      (*(void (**)(void))(*(void *)v104 + 8))();
    }
LABEL_203:
    if ((*(unsigned int (**)(uint64_t))(*(void *)v15 + 24))(v15) != -1
      && (*(unsigned int (**)(uint64_t))(*(void *)v15 + 24))(v15))
    {
      unint64_t v116 = v116 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
    }
    if (v107.__begin_)
    {
      v107.__end_ = v107.__begin_;
      operator delete(v107.__begin_);
    }
    if (v108.__begin_)
    {
      v108.__end_ = v108.__begin_;
      operator delete(v108.__begin_);
    }
    unint64_t v8 = v116;
LABEL_211:
    uint64_t v9 = v8 & 0x3FFFFFFF0000 | (2 * v8) & 0x2AAAAAAA0000 | (v8 >> 1) & 0x155555550000 | 7;
  }
  *a3 = v9;
  return v8;
}

void sub_1B22D2724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a26) {
    operator delete(a26);
  }
  _Unwind_Resume(exception_object);
}

void fst::DfsVisit<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::SccVisitor<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::AnyArcFilter<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>(uint64_t a1, uint64_t a2)
{
}

void sub_1B22D3084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::~MemoryPool((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va1);
  uint64_t v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(void *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

void fst::SccVisitor<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::InitVisit(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1) {
    *(void *)(*(void *)a1 + 8) = **(void **)a1;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    *(void *)(v3 + 8) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    *(void *)(v4 + 8) = 0;
    *(unsigned char *)(a1 + 52) = 0;
    **(void **)(a1 + ++*(void *)(result + 24) = **(void **)(a1 + 24) & 0xFFFFF0C3FFFFFFFFLL | 0x52800000000;
    *(void *)(a1 + 32) = a2;
    int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
    *(_DWORD *)(a1 + 44) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 40) = v5;
    operator new();
  }
  operator new();
}

unint64_t fst::SccVisitor<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::FinishState(uint64_t a1, int a2, int a3)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 32) + 32))(&v34);
  uint64_t v6 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
  if (v34) {
    uint64_t v7 = v35[2] + 1;
  }
  else {
    uint64_t v7 = 0;
  }
  if (*(_DWORD *)v6) {
    uint64_t v8 = *(void *)(v6 + 24) + 1;
  }
  else {
    uint64_t v8 = 0;
  }
  if (v7 == v8)
  {
    char v9 = 0;
    uint64_t v10 = v35[1];
    uint64_t v11 = (uint64_t *)(v6 + 16);
    if (v34) {
      BOOL v12 = v34 == *(_DWORD *)v6;
    }
    else {
      BOOL v12 = 0;
    }
    int v13 = !v12;
    int v14 = v13 ^ 1;
    while (1)
    {
      uint64_t v15 = *v11;
      if ((v9 & 1) == 0 && !v14) {
        break;
      }
      if ((void *)v10 == v35) {
        goto LABEL_42;
      }
      if (*(_DWORD *)(v10 + 16) != *(_DWORD *)(v15 + 16)) {
        goto LABEL_21;
      }
      uint64_t v10 = *(void *)(v10 + 8);
      uint64_t v11 = (uint64_t *)(v15 + 8);
      char v9 = 1;
    }
    if (v34) {
      goto LABEL_21;
    }
LABEL_42:
    float v38 = v36;
    float v37 = 0.0;
    float v37 = *(float *)(v6 + 32);
    float v32 = v36;
    float v33 = v37;
    unint64_t result = (unint64_t)std::__list_imp<char *>::clear(v35);
    if (v32 == v33)
    {
      unint64_t v17 = a2;
      goto LABEL_23;
    }
  }
  else
  {
LABEL_21:
    unint64_t result = (unint64_t)std::__list_imp<char *>::clear(v35);
  }
  unint64_t v17 = a2;
  *(void *)(**(void **)(a1 + 16) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
LABEL_23:
  uint64_t v18 = **(void **)(a1 + 64);
  if (*(_DWORD *)(**(void **)(a1 + 56) + 4 * v17) != *(_DWORD *)(v18 + 4 * v17)) {
    goto LABEL_36;
  }
  char v19 = 0;
  uint64_t v20 = *(void **)(a1 + 80);
  uint64_t v21 = v20[1];
  uint64_t v22 = **(void **)(a1 + 16);
  unint64_t v23 = (int *)(((v21 - *v20) & 0xFFFFFFFFFFFFFFFCLL) + *v20 - 4);
  do
  {
    unint64_t v24 = *v23--;
    v19 |= *(void *)(v22 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v24;
  }
  while (v24 != a2);
  int v25 = *(void **)a1;
  uint64_t v26 = **(void **)(a1 + 72);
  for (uint64_t i = (int *)(v21 - 4); ; --i)
  {
    unint64_t v28 = *i;
    if (v25) {
      *(_DWORD *)(*v25 + 4 * v28) = *(_DWORD *)(a1 + 48);
    }
    unint64_t result = v28 >> 6;
    uint64_t v29 = 1 << v28;
    if ((v19 & 1) == 0) {
      break;
    }
    *(void *)(v22 + 8 * result) |= v29;
    *(void *)(v26 + 8 * result) &= ~v29;
    if (v28 == a2)
    {
      v20[1] = i;
      goto LABEL_35;
    }
LABEL_33:
    ;
  }
  *(void *)(v26 + 8 * result) &= ~v29;
  if (v28 != a2) {
    goto LABEL_33;
  }
  v20[1] = i;
  **(void **)(a1 + ++*(void *)(result + 24) = **(void **)(a1 + 24) & 0xFFFFF3FFFFFFFFFFLL | 0x80000000000;
LABEL_35:
  ++*(_DWORD *)(a1 + 48);
LABEL_36:
  if (a3 != -1)
  {
    uint64_t v30 = **(void **)(a1 + 16);
    if ((*(void *)(v30 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v17)) {
      *(void *)(v30 + (((unint64_t)a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a3;
    }
    int v31 = *(_DWORD *)(v18 + 4 * v17);
    if (v31 < *(_DWORD *)(v18 + 4 * a3)) {
      *(_DWORD *)(v18 + 4 * a3) = v31;
    }
  }
  return result;
}

void sub_1B22D3540(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear((void *)(v1 + 8));
  _Unwind_Resume(a1);
}

void fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::~MemoryPool(quasar::Bitmap *a1)
{
  *(void *)a1 = &unk_1F0A36D60;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::Link>::~MemoryArena((void *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_1F0A36D60;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::Link>::~MemoryArena((void *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::MemoryPool(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A36D60;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::Link>::MemoryArena(a1 + 1, a2);
}

void sub_1B22D35F0(_Unwind_Exception *a1)
{
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::Size()
{
  return 48;
}

void fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::Link>::MemoryArena(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A37D18;
  a1[1] = 56 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_1B22D3708(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::Link>::~MemoryArena(void *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1B3EA8670);
}

{
  void *v2;
  void *i;
  uint64_t v4;
  uint64_t vars8;

  *a1 = &unk_1F0A37D18;
  uint64_t v2 = a1 + 3;
  for (uint64_t i = (void *)a1[4]; i != v2; uint64_t i = (void *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x1B3EA8630](v4, 0x1000C8077774924);
    }
  }
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::Link>::Size()
{
  return 56;
}

void std::deque<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>> *>>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>> *>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>> *>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    char v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      float v37 = &v34[8 * v36];
      float v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        BOOL v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)BOOL v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    char v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      float v37 = &v34[8 * v47];
      BOOL v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        int64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)int64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  std::vector<unsigned int>::pointer v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  float v53 = operator new(0x1000uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1B22D3B50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::ArcBuffer<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::SetFromFst<fst::Fst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t **))(*(void *)a2 + 136))(a2, a3, &v26);
  if (!v26 && (a4 & 1) == 0)
  {
    uint64_t v10 = v27 + 56 * v28;
    *(void *)(a1 + 16) = v27;
    *(void *)(a1 + ++*(void *)(result + 24) = v10;
    if (*(void *)a1)
    {
      free(*(void **)a1);
      *(void *)a1 = 0;
    }
    *(void *)(a1 + 8) = 0;
    return;
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, a3);
  uint64_t v12 = a5;
  if (!a4) {
    uint64_t v12 = 0;
  }
  unint64_t v13 = v11 + v12;
  if (*(void *)(a1 + 8) < (unint64_t)(v11 + v12))
  {
    if (*(void *)a1) {
      free(*(void **)a1);
    }
    uint64_t v25 = 0x4000;
    if (v13 > 0x4000) {
      uint64_t v25 = v13;
    }
    *(void *)(a1 + 8) = v25;
    uint64_t v15 = (uint64_t *)malloc_type_malloc(56 * v25, 0x1020040540EBC04uLL);
    *(void *)a1 = v15;
    *(void *)(a1 + 16) = v15;
    BOOL v14 = v15;
  }
  else
  {
    BOOL v14 = *(uint64_t **)(a1 + 16);
    uint64_t v15 = *(uint64_t **)a1;
  }
  *(void *)(a1 + ++*(void *)(result + 24) = &v14[7 * v13];
  uint64_t v16 = v26;
  uint64_t v17 = v27;
  unint64_t v19 = v28;
  uint64_t v18 = v29;
  if (v29) {
    ++*v29;
  }
  unint64_t v20 = 0;
LABEL_13:
  v15 += 7;
  while (v16)
  {
    int v21 = (*(uint64_t (**)(uint64_t *))(*v16 + 24))(v16);
    uint64_t v22 = *v16;
    if (v21)
    {
      (*(void (**)(uint64_t *))(v22 + 8))(v16);
      return;
    }
    uint64_t v23 = (*(uint64_t (**)(uint64_t *))(v22 + 32))(v16);
LABEL_18:
    uint64_t v24 = v15 - 7;
    uint64_t *v24 = *(void *)v23;
    *((_DWORD *)v24 + 2) = *(_DWORD *)(v23 + 8);
    if (v15 - 7 != (uint64_t *)v23) {
      std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v15 - 5, *(void *)(v23 + 24), v23 + 16);
    }
    *((_DWORD *)v15 - 4) = *(_DWORD *)(v23 + 40);
    *((_DWORD *)v15 - 2) = *(_DWORD *)(v23 + 48);
    if (!v16)
    {
      ++v20;
      goto LABEL_13;
    }
    v15 += 7;
    (*(void (**)(uint64_t *))(*v16 + 40))(v16);
  }
  uint64_t v23 = v17 + 56 * v20;
  if (v20 < v19) {
    goto LABEL_18;
  }
  if (v18) {
    --*v18;
  }
}

void sub_1B22D3E48(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  else if (v2)
  {
    --*v2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::WriteFst<fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>>(void *a1, void *a2, uint64_t a3)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  long long v37 = 0u;
  long long v38 = 0u;
  *(_OWORD *)uint64_t v35 = 0u;
  *(_OWORD *)uint64_t v36 = 0u;
  uint64_t v6 = -1;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  uint64_t v39 = -1;
  uint64_t v39 = (*(int (**)(void *))(*a1 + 24))(a1);
  uint64_t v40 = -1;
  if ((*(uint64_t (**)(void *, uint64_t, void))(*a1 + 64))(a1, 1, 0))
  {
    uint64_t v6 = 0;
LABEL_3:
    int v7 = 0;
    uint64_t v40 = (int)fst::CountStates<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>((uint64_t)a1);
    goto LABEL_6;
  }
  unint64_t v8 = (char *)a2 + *(void *)(*a2 - 24);
  if ((v8[32] & 5) == 0)
  {
    (*(void (**)(std::string *__return_ptr))(**((void **)v8 + 5) + 32))(__p);
    uint64_t v6 = v43;
    if (v43 != -1) {
      goto LABEL_3;
    }
  }
  int v7 = 1;
LABEL_6:
  uint64_t v9 = (*(uint64_t (**)(void *, uint64_t, void))(*a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  v9 |= 3uLL;
  fst::FstImpl<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::WriteFstHeader((uint64_t)a1, (uint64_t)a2, (unsigned char *)a3, 2, __p, v9, (uint64_t)v34);
  uint64_t v31 = v9;
  uint64_t v32 = v6;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  unint64_t v10 = *(void *)(a1[1] + 72) - *(void *)(a1[1] + 64);
  unint64_t v11 = v10 >> 3;
  if ((int)(v10 >> 3) < 1)
  {
    LODWORD(v11) = 0;
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t v13 = (v10 >> 3);
    do
    {
      (*(void (**)(std::string *__return_ptr, void *, uint64_t))(*a1 + 32))(__p, a1, v12);
      fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::Write(__p);
      std::__list_imp<char *>::clear(&__p[0].__r_.__value_.__l.__size_);
      __p[0].__r_.__value_.__r.__words[0] = (*(uint64_t (**)(void *, uint64_t))(*a1 + 40))(a1, v12);
      std::ostream::write();
      uint64_t v14 = *(void *)(*(void *)(a1[1] + 64) + 8 * v12);
      uint64_t v16 = *(void *)(v14 + 56);
      uint64_t v15 = *(void *)(v14 + 64);
      if (v15 == v16) {
        uint64_t v17 = 0;
      }
      else {
        uint64_t v17 = *(_DWORD **)(v14 + 56);
      }
      if (v15 != v16)
      {
        if ((unint64_t)((v15 - v16) / 56) <= 1) {
          uint64_t v18 = 1;
        }
        else {
          uint64_t v18 = (v15 - v16) / 56;
        }
        unint64_t v19 = v17;
        do
        {
          int v20 = *v19;
          v19 += 14;
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v20;
          std::ostream::write();
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v17[1];
          std::ostream::write();
          fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::Write(v17 + 2);
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v17[12];
          std::ostream::write();
          uint64_t v17 = v19;
          --v18;
        }
        while (v18);
      }
      ++v12;
    }
    while (v12 != v13);
  }
  std::ostream::flush();
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    int v21 = fst::LogMessage::LogMessage((fst *)&v33, (uint64_t)__p);
    uint64_t v22 = (void *)fst::cerr(v21);
    uint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"VectorFst::Write: write failed: ", 32);
    int v24 = *(char *)(a3 + 23);
    if (v24 >= 0) {
      uint64_t v25 = a3;
    }
    else {
      uint64_t v25 = *(void *)a3;
    }
    if (v24 >= 0) {
      uint64_t v26 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v26 = *(void *)(a3 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, v25, v26);
LABEL_30:
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v33);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    uint64_t updated = 0;
    goto LABEL_33;
  }
  if (!v7)
  {
    if (v40 == v11)
    {
      uint64_t updated = 1;
      goto LABEL_33;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    uint64_t v29 = fst::LogMessage::LogMessage((fst *)&v33, (uint64_t)__p);
    long long v30 = (void *)fst::cerr(v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Inconsistent number of states observed during write", 51);
    goto LABEL_30;
  }
  uint64_t v40 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  uint64_t updated = fst::FstImpl<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::UpdateFstHeader((uint64_t)a1, a2, a3, 2, __p, v31, (uint64_t)v34, v32);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
LABEL_33:
  if (SHIBYTE(v37) < 0) {
    operator delete(v36[1]);
  }
  if (SHIBYTE(v36[0]) < 0) {
    operator delete(v35[0]);
  }
  return updated;
}

void sub_1B22D436C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  fst::FstHeader::~FstHeader(&a17);
  _Unwind_Resume(a1);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::WriteFstHeader(uint64_t a1, uint64_t a2, unsigned char *a3, int a4, std::string *__str, uint64_t a6, uint64_t a7)
{
  if (a3[24])
  {
    std::string::operator=((std::string *)(a7 + 8), __str);
    uint64_t v13 = (const std::string *)fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::Type();
    std::string::operator=((std::string *)(a7 + 32), v13);
    *(_DWORD *)(a7 + 56) = a4;
    *(void *)(a7 + 64) = a6;
    if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1)) {
      BOOL v14 = a3[25] == 0;
    }
    else {
      BOOL v14 = 1;
    }
    int v15 = !v14;
    uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
    if (a3[26]) {
      BOOL v17 = v16 == 0;
    }
    else {
      BOOL v17 = 1;
    }
    int v18 = v15 | 2;
    if (v17) {
      int v18 = v15;
    }
    if (a3[27]) {
      v18 |= 4u;
    }
    *(_DWORD *)(a7 + 60) = v18;
    fst::FstHeader::Write();
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1)) {
    BOOL v19 = a3[25] == 0;
  }
  else {
    BOOL v19 = 1;
  }
  if (!v19)
  {
    uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 72))(v20, a2);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  if (result && a3[26])
  {
    uint64_t v22 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1) + 72);
    return v22();
  }
  return result;
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::UpdateFstHeader(uint64_t a1, void *a2, uint64_t a3, int a4, std::string *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  MEMORY[0x1B3EA7E70](v32);
  uint64_t v16 = (char *)a2 + *(void *)(*a2 - 24);
  if ((v16[32] & 5) == 0)
  {
    uint64_t v17 = *((void *)v16 + 5);
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long __p = 0u;
    long long v35 = 0u;
    uint64_t v42 = a8;
    (*(void (**)(void *__return_ptr))(*(void *)v17 + 40))(v33);
    if (v33[16] == -1) {
      std::ios_base::clear((std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32) | 4);
    }
  }
  MEMORY[0x1B3EA7E80](v32);
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    int v18 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
    BOOL v19 = (void *)fst::cerr(v18);
    uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
    int v21 = *(char *)(a3 + 23);
    if (v21 >= 0) {
      uint64_t v22 = a3;
    }
    else {
      uint64_t v22 = *(void *)a3;
    }
    if (v21 >= 0) {
      uint64_t v23 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v23 = *(void *)(a3 + 8);
    }
  }
  else
  {
    fst::FstImpl<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::WriteFstHeader(a1, (uint64_t)a2, (unsigned char *)a3, a4, a5, a6, a7);
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      int v24 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
      uint64_t v25 = (void *)fst::cerr(v24);
      uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      int v26 = *(char *)(a3 + 23);
      if (v26 >= 0) {
        uint64_t v22 = a3;
      }
      else {
        uint64_t v22 = *(void *)a3;
      }
      if (v26 >= 0) {
        uint64_t v23 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v23 = *(void *)(a3 + 8);
      }
    }
    else
    {
      MEMORY[0x1B3EA7E70](v33, a2);
      uint64_t v27 = (char *)a2 + *(void *)(*a2 - 24);
      if ((v27[32] & 5) == 0)
      {
        (*(void (**)(long long *__return_ptr))(**((void **)v27 + 5) + 32))(&__p);
        if (v42 == -1) {
          std::ios_base::clear((std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32) | 4);
        }
      }
      MEMORY[0x1B3EA7E80](v33);
      if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) == 0) {
        return 1;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      unint64_t v28 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
      uint64_t v29 = (void *)fst::cerr(v28);
      uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      int v30 = *(char *)(a3 + 23);
      if (v30 >= 0) {
        uint64_t v22 = a3;
      }
      else {
        uint64_t v22 = *(void *)a3;
      }
      if (v30 >= 0) {
        uint64_t v23 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v23 = *(void *)(a3 + 8);
      }
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v22, v23);
  fst::LogMessage::~LogMessage((fst::LogMessage *)v33);
  if (SBYTE7(v35) < 0) {
    operator delete((void *)__p);
  }
  return 0;
}

void sub_1B22D49A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
}

uint64_t fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::Type()
{
  {
    operator new();
  }
  return fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::Type(void)::type;
}

void sub_1B22D4A9C(_Unwind_Exception *a1)
{
}

uint64_t fst::Fst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::WriteFile(fst *a1, uint64_t a2)
{
  v25[19] = *MEMORY[0x1E4F143B8];
  if (*(char *)(a2 + 23) < 0)
  {
    if (*(void *)(a2 + 8))
    {
LABEL_5:
      std::ofstream::basic_ofstream((uint64_t *)&v20);
      if ((v24[*(void *)(v20.__r_.__value_.__r.__words[0] - 24)] & 5) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
        unint64_t v4 = fst::LogMessage::LogMessage((fst *)&v19, (uint64_t)&__p);
        uint64_t v5 = (void *)fst::cerr(v4);
        uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Fst::Write: Can't open file: ", 29);
        int v7 = *(char *)(a2 + 23);
        if (v7 >= 0) {
          unint64_t v8 = (const std::string::value_type *)a2;
        }
        else {
          unint64_t v8 = *(const std::string::value_type **)a2;
        }
        if (v7 >= 0) {
          uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          uint64_t v9 = *(void *)(a2 + 8);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v8, v9);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v19);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        uint64_t v10 = 0;
      }
      else
      {
        char v13 = FLAGS_fst_align;
        if (*(char *)(a2 + 23) < 0) {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
        }
        else {
          std::string __p = *(std::string *)a2;
        }
        __int16 v16 = 257;
        char v17 = 1;
        char v18 = v13;
        uint64_t v10 = (*(uint64_t (**)(fst *, std::string *, std::string *))(*(void *)a1 + 96))(a1, &v20, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      v20.__r_.__value_.__r.__words[0] = *MEMORY[0x1E4FBA400];
      *(std::string::size_type *)((char *)v20.__r_.__value_.__r.__words
                                + *(void *)(v20.__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x1E4FBA400]
                                                                                                  + 24);
      MEMORY[0x1B3EA7CF0](&v20.__r_.__value_.__r.__words[1]);
      std::ostream::~ostream();
      MEMORY[0x1B3EA8520](v25);
      return v10;
    }
  }
  else if (*(unsigned char *)(a2 + 23))
  {
    goto LABEL_5;
  }
  uint64_t v11 = fst::cout(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "standard output");
  char v12 = FLAGS_fst_align;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v20, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v20 = __p;
  }
  __int16 v21 = 257;
  char v22 = 1;
  char v23 = v12;
  uint64_t v10 = (*(uint64_t (**)(fst *, uint64_t, std::string *))(*(void *)a1 + 96))(a1, v11, &v20);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v10;
}

void sub_1B22D4DEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
}

void *fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::SetFinal(void *a1, int a2, int *a3)
{
  uint64_t v6 = *(int **)(a1[8] + 8 * a2);
  int v18 = *v6;
  std::list<int>::list(v19, (uint64_t)(v6 + 2));
  int v20 = v6[8];
  int v15 = *a3;
  std::list<int>::list(v16, (uint64_t)(a3 + 2));
  int v17 = a3[8];
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::SetFinal((uint64_t)a1, a2, &v15);
  std::__list_imp<char *>::clear(v16);
  unint64_t v7 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
  int v12 = v18;
  std::list<int>::list(v13, (uint64_t)v19);
  int v14 = v20;
  int v9 = *a3;
  std::list<int>::list(v10, (uint64_t)(a3 + 2));
  int v11 = a3[8];
  a1[1] = a1[1] & 4 | fst::SetFinalProperties<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>(v7, &v12, &v9);
  std::__list_imp<char *>::clear(v10);
  std::__list_imp<char *>::clear(v13);
  return std::__list_imp<char *>::clear(v19);
}

void sub_1B22D4FC8(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v3);
  std::__list_imp<char *>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::AddArc(void *a1, int a2, int *a3)
{
  uint64_t v6 = *(void *)(*(void *)(a1[8] + 8 * a2) + 64);
  if (v6 == *(void *)(*(void *)(a1[8] + 8 * a2) + 56)) {
    unint64_t v7 = 0;
  }
  else {
    unint64_t v7 = (_DWORD *)(v6 - 56);
  }
  unint64_t v8 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
  a1[1] = a1[1] & 4 | fst::AddArcProperties<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>(v8, a2, a3, v7);
  int v9 = *(void **)(a1[8] + 8 * a2);
  return fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::AddArc(v9, a3);
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::DeleteStates(uint64_t a1, char **a2)
{
  unint64_t v4 = (uint64_t *)(a1 + 64);
  std::vector<int>::size_type v5 = (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 3;
  std::vector<int>::value_type __x = 0;
  std::vector<int>::vector(&v35, v5, &__x);
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1] - *a2;
  if (v7)
  {
    unint64_t v8 = v7 >> 2;
    std::vector<int>::pointer begin = v35.__begin_;
    if (v8 <= 1) {
      unint64_t v8 = 1;
    }
    do
    {
      uint64_t v10 = *(int *)v6;
      v6 += 4;
      begin[v10] = -1;
      --v8;
    }
    while (v8);
  }
  uint64_t v11 = *(void *)(a1 + 64);
  if (*(void *)(a1 + 72) == v11)
  {
    int v13 = 0;
  }
  else
  {
    unint64_t v12 = 0;
    int v13 = 0;
    do
    {
      if (v35.__begin_[v12] == -1)
      {
        fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Destroy(*(void *)(v11 + 8 * v12));
      }
      else
      {
        v35.__begin_[v12] = v13;
        if (v12 != v13) {
          *(void *)(v11 + 8 * v13) = *(void *)(v11 + 8 * v12);
        }
        ++v13;
      }
      ++v12;
      uint64_t v11 = *(void *)(a1 + 64);
    }
    while (v12 < (*(void *)(a1 + 72) - v11) >> 3);
  }
  std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)v4, v13);
  uint64_t v14 = *(void *)(a1 + 64);
  if (*(void *)(a1 + 72) != v14)
  {
    unint64_t v15 = 0;
    do
    {
      uint64_t v16 = *(void *)(v14 + 8 * v15);
      int64x2_t v17 = *(int64x2_t *)(v16 + 40);
      uint64_t v18 = *(void *)(v16 + 64) - *(void *)(v16 + 56);
      if (v18) {
        uint64_t v19 = *(void *)(v16 + 56);
      }
      else {
        uint64_t v19 = 0;
      }
      if (v18)
      {
        unint64_t v20 = 0;
        uint64_t v21 = 0;
        char v22 = (int *)(v19 + 48);
        uint64_t v23 = v19 + 16;
        do
        {
          int v24 = v35.__begin_[*v22];
          if (v24 == -1)
          {
            uint64_t v27 = *((void *)v22 - 6);
            v28.i64[0] = v27;
            v28.i64[1] = HIDWORD(v27);
            int64x2_t v17 = vaddq_s64(v17, vceqzq_s64(v28));
          }
          else
          {
            int *v22 = v24;
            if (v20 != v21)
            {
              int64x2_t v32 = v17;
              uint64_t v25 = v19 + 56 * v21;
              *(void *)uint64_t v25 = *((void *)v22 - 6);
              *(_DWORD *)(v25 + 8) = *(v22 - 10);
              std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v25 + 16), *((void *)v22 - 3), v23);
              uint64_t v26 = v19 + 56 * v21;
              *(_DWORD *)(v26 + 40) = *(v22 - 2);
              *(_DWORD *)(v26 + 48) = *v22;
              uint64_t v14 = *v4;
              int64x2_t v17 = v32;
            }
            ++v21;
          }
          ++v20;
          uint64_t v16 = *(void *)(v14 + 8 * v15);
          unint64_t v29 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(v16 + 64) - *(void *)(v16 + 56)) >> 3);
          v22 += 14;
          v23 += 56;
        }
        while (v20 < v29);
        int64x2_t v33 = v17;
      }
      else
      {
        int64x2_t v33 = *(int64x2_t *)(v16 + 40);
        uint64_t v21 = 0;
        unint64_t v29 = 0;
      }
      fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::DeleteArcs((void *)v16, v29 - v21);
      uint64_t v14 = *(void *)(a1 + 64);
      *(int64x2_t *)(*(void *)(v14 + 8 * v15++) + 40) = v33;
    }
    while (v15 < (*(void *)(a1 + 72) - v14) >> 3);
  }
  uint64_t v30 = *(int *)(a1 + 88);
  if (v30 == -1)
  {
    uint64_t v31 = v35.__begin_;
    if (!v35.__begin_) {
      return;
    }
  }
  else
  {
    uint64_t v31 = v35.__begin_;
    *(_DWORD *)(a1 + 88) = v35.__begin_[v30];
  }
  v35.__end_ = v31;
  operator delete(v31);
}

void sub_1B22D5324(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::DeleteArcs(void *a1, int a2)
{
  BOOL v3 = *(void **)(a1[8] + 8 * a2);
  v3[5] = 0;
  v3[6] = 0;
  uint64_t v5 = v3[7];
  uint64_t v4 = v3[8];
  if (v4 != v5)
  {
    do
    {
      uint64_t v6 = v4 - 56;
      std::__list_imp<char *>::clear((void *)(v4 - 40));
      uint64_t v4 = v6;
    }
    while (v6 != v5);
  }
  v3[8] = v5;
  uint64_t result = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
  a1[1] = a1[1] & 4 | result & 0xA6A5A950007;
  return result;
}

void fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::~MutableArcIterator()
{
}

uint64_t fst::ArcIteratorBase<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::Reinit()
{
  return 0;
}

BOOL fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::Done_(uint64_t a1)
{
  return *(void *)(a1 + 24) >= (unint64_t)(0x6DB6DB6DB6DB6DB7
                                                  * ((uint64_t)(*(void *)(*(void *)(a1 + 8) + 64)
                                                             - *(void *)(*(void *)(a1 + 8) + 56)) >> 3));
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::Value_(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 56) + 56 * *(void *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::Next_(uint64_t result)
{
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::Position_(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::Reset_(uint64_t result)
{
  *(void *)(result + ++*(void *)(result + 24) = 0;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::Seek_(uint64_t result, uint64_t a2)
{
  *(void *)(result + ++*(void *)(result + 24) = a2;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::Flags_()
{
  return 15;
}

void fst::AutoQueue<int>::AutoQueue<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::AnyArcFilter<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = 7;
  *(unsigned char *)(a1 + 12) = 0;
  *(void *)a1 = &unk_1F0A40F38;
  *(_OWORD *)(a1 + ++*(void *)(result + 24) = 0u;
  uint64_t v3 = a1 + 48;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x4E00000000, 0);
  if ((v4 & 0x4000000000) == 0 && (*(unsigned int (**)(uint64_t))(*(void *)a2 + 24))(a2) != -1)
  {
    if ((v4 & 0x800000000) == 0)
    {
      uint64_t v6 = 0;
      v5[0] = v3;
      v5[1] = 0;
      v5[2] = 0;
      v5[3] = &v6;
      fst::DfsVisit<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::SccVisitor<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::AnyArcFilter<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>(a2, (uint64_t)v5);
    }
    operator new();
  }
  operator new();
}

void sub_1B22D5B54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, char a16, char a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a18) {
    operator delete(a18);
  }
  uint64_t v30 = *v28;
  if (*v28)
  {
    *(void *)(v26 + 56) = v30;
    operator delete(v30);
  }
  uint64_t v31 = *v27;
  if (*v27)
  {
    *(void *)(v26 + 32) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::AutoQueue<int>::SccQueueType<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::AnyArcFilter<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::NaturalLess<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unsigned char *a5, unsigned char *a6)
{
  *a5 = 1;
  *a6 = 1;
  uint64_t v11 = *(void *)(a3 + 8) - *(void *)a3;
  if (v11)
  {
    unint64_t v12 = v11 >> 2;
    if (v12 <= 1) {
      unint64_t v12 = 1;
    }
    bzero(*(void **)a3, 4 * v12);
  }
  unsigned int v28 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v26);
  while (1)
  {
    uint64_t result = v26;
    if (!v26)
    {
      if ((int)v28 >= v27) {
        return result;
      }
LABEL_11:
      uint64_t v15 = v28;
      goto LABEL_12;
    }
    int v14 = (*(uint64_t (**)(uint64_t))(*(void *)v26 + 16))(v26);
    uint64_t result = v26;
    if (v14) {
      break;
    }
    if (!v26) {
      goto LABEL_11;
    }
    uint64_t v15 = (*(uint64_t (**)(void))(*(void *)v26 + 24))();
LABEL_12:
    unint64_t v25 = 0;
    (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 136))(a1, v15, v23);
    uint64_t v16 = (int)v15;
    while (1)
    {
      if (!v23[0])
      {
        if (v25 >= v23[2]) {
          goto LABEL_32;
        }
        goto LABEL_18;
      }
      if ((*(unsigned int (**)(void))(*(void *)v23[0] + 24))(v23[0])) {
        break;
      }
      if (v23[0])
      {
        uint64_t v17 = (*(uint64_t (**)(void))(*(void *)v23[0] + 32))();
        goto LABEL_19;
      }
LABEL_18:
      uint64_t v17 = v23[1] + 56 * v25;
LABEL_19:
      uint64_t v18 = *(int *)(*a2 + 4 * v16);
      if (v18 == *(_DWORD *)(*a2 + 4 * *(int *)(v17 + 48)))
      {
        uint64_t v19 = *(_DWORD **)a3;
        if (!a4
          || (uint64_t v20 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::One(),
              fst::NaturalLess<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::operator()(a4, v17 + 8, v20)))
        {
          int v21 = 1;
          goto LABEL_25;
        }
        if ((v19[v18] | 2) == 2)
        {
          int v21 = 3;
LABEL_25:
          v19[v18] = v21;
        }
        *a5 = 0;
      }
      *a6 = 0;
      if (v23[0]) {
        (*(void (**)(void))(*(void *)v23[0] + 40))(v23[0]);
      }
      else {
        ++v25;
      }
    }
    if (v23[0])
    {
      (*(void (**)(void))(*(void *)v23[0] + 8))();
      goto LABEL_34;
    }
LABEL_32:
    if (v24) {
      --*v24;
    }
LABEL_34:
    if (v26) {
      (*(void (**)(uint64_t))(*(void *)v26 + 32))(v26);
    }
    else {
      ++v28;
    }
  }
  if (v26) {
    return (*(uint64_t (**)(void))(*(void *)v26 + 8))();
  }
  return result;
}

void sub_1B22D5FC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16) {
    (*(void (**)(uint64_t))(*(void *)a16 + 8))(a16);
  }
  _Unwind_Resume(exception_object);
}

void fst::TopOrderQueue<int>::TopOrderQueue<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::AnyArcFilter<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 4;
  *(unsigned char *)(a1 + 12) = 0;
  *(void *)a1 = &unk_1F0A3A1C8;
  *(void *)(a1 + 16) = 0xFFFFFFFF00000000;
  *(_OWORD *)(a1 + ++*(void *)(result + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  char v3 = 0;
  uint64_t v1 = a1 + 24;
  unint64_t v2 = &v3;
  fst::DfsVisit<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::TopOrderVisitor<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::AnyArcFilter<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>();
}

void sub_1B22D6198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0) {
    operator delete(__p);
  }
  char v22 = *v19;
  if (*v19)
  {
    *(void *)(v18 + 56) = v22;
    operator delete(v22);
  }
  uint64_t v23 = *v20;
  if (*v20)
  {
    *(void *)(v18 + 32) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(a1);
}

void fst::DfsVisit<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::TopOrderVisitor<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::AnyArcFilter<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>()
{
}

void sub_1B22D6A88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::~MemoryPool((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va1);
  uint64_t v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(void *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

void fst::ShortestDistanceState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::ShortestDistance(void *a1, int a2)
{
  if ((*(unsigned int (**)(void))(*(void *)*a1 + 24))(*a1) == -1)
  {
    if (!(*(uint64_t (**)(void, uint64_t, void))(*(void *)*a1 + 64))(*a1, 4, 0)) {
      return;
    }
    goto LABEL_212;
  }
  if (*((unsigned char *)a1 + 32))
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    }
    uint64_t v4 = fst::LogMessage::LogMessage((fst *)v154, (uint64_t)&__p);
    uint64_t v5 = (void *)fst::cerr(v4);
    uint64_t v138 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"ShortestDistance: first_path option disallowed when ", 52);
    v139 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v138, (uint64_t)"Weight does not have the path property: ", 40);
    uint64_t v140 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Type();
    int v141 = *(char *)(v140 + 23);
    if (v141 >= 0) {
      uint64_t v142 = v140;
    }
    else {
      uint64_t v142 = *(void *)v140;
    }
    if (v141 >= 0) {
      uint64_t v143 = *(unsigned __int8 *)(v140 + 23);
    }
    else {
      uint64_t v143 = *(void *)(v140 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v139, v142, v143);
    fst::LogMessage::~LogMessage((fst::LogMessage *)v154);
    if (SHIBYTE(v159) < 0) {
      operator delete(__p);
    }
LABEL_212:
    unint64_t v144 = (char *)a1 + 116;
    goto LABEL_213;
  }
  (*(void (**)(void))(**(void **)(a1[2] + 16) + 56))(*(void *)(a1[2] + 16));
  if (!*((unsigned char *)a1 + 33))
  {
    uint64_t v6 = (uint64_t *)a1[1];
    uint64_t v8 = *v6;
    uint64_t v7 = v6[1];
    if (v7 != *v6)
    {
      do
      {
        uint64_t v9 = v7 - 40;
        std::__list_imp<char *>::clear((void *)(v7 - 32));
        uint64_t v7 = v9;
      }
      while (v9 != v8);
    }
    v6[1] = v8;
    uint64_t v11 = a1[5];
    uint64_t v10 = a1[6];
    if (v10 != v11)
    {
      do
      {
        uint64_t v12 = v10 - 40;
        std::__list_imp<char *>::clear((void *)(v10 - 32));
        uint64_t v10 = v12;
      }
      while (v12 != v11);
    }
    a1[6] = v11;
    a1[9] = 0;
  }
  if (a2 == -1) {
    a2 = (*(uint64_t (**)(void))(*(void *)*a1 + 24))();
  }
  unint64_t v13 = a2;
  uint64_t v14 = (uint64_t *)a1[1];
  for (uint64_t i = v14 + 1; 0xCCCCCCCCCCCCCCCDLL * ((v14[1] - *v14) >> 3) <= a2; uint64_t i = v14 + 1)
  {
    uint64_t v16 = (_DWORD *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
    uint64_t v17 = v16;
    unint64_t v18 = v14[1];
    if (v18 >= v14[2])
    {
      uint64_t v19 = std::vector<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::__push_back_slow_path<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1> const&>(v14, v16);
    }
    else
    {
      *(_DWORD *)unint64_t v18 = *v16;
      std::list<int>::list((void *)(v18 + 8), (uint64_t)(v16 + 2));
      *(_DWORD *)(v18 + 32) = v17[8];
      uint64_t v19 = v18 + 40;
      *uint64_t i = v18 + 40;
    }
    *uint64_t i = v19;
    uint64_t v20 = (_DWORD *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
    int v21 = v20;
    unint64_t v22 = a1[6];
    if (v22 >= a1[7])
    {
      uint64_t v23 = std::vector<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::__push_back_slow_path<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1> const&>(a1 + 5, v20);
    }
    else
    {
      *(_DWORD *)unint64_t v22 = *v20;
      std::list<int>::list((void *)(v22 + 8), (uint64_t)(v20 + 2));
      *(_DWORD *)(v22 + 32) = v21[8];
      uint64_t v23 = v22 + 40;
      a1[6] = v22 + 40;
    }
    a1[6] = v23;
    LOBYTE(__p) = 0;
    std::vector<BOOL>::push_back((uint64_t)(a1 + 8), &__p);
    uint64_t v14 = (uint64_t *)a1[1];
  }
  if (*((unsigned char *)a1 + 33))
  {
    int v24 = (char *)a1[11];
    unint64_t v25 = (char *)a1[12];
    unint64_t v26 = (v25 - v24) >> 2;
    if (v26 <= a2)
    {
      int v27 = a1 + 13;
      do
      {
        if ((unint64_t)v25 >= *v27)
        {
          unint64_t v29 = v26 + 1;
          if ((v26 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v30 = *v27 - (void)v24;
          if (v30 >> 1 > v29) {
            unint64_t v29 = v30 >> 1;
          }
          if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v31 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v31 = v29;
          }
          if (v31)
          {
            int64x2_t v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 13), v31);
            int v24 = (char *)a1[11];
            unint64_t v25 = (char *)a1[12];
          }
          else
          {
            int64x2_t v32 = 0;
          }
          int64x2_t v33 = &v32[4 * v26];
          *(_DWORD *)int64x2_t v33 = -1;
          unsigned int v28 = v33 + 4;
          while (v25 != v24)
          {
            int v34 = *((_DWORD *)v25 - 1);
            v25 -= 4;
            *((_DWORD *)v33 - 1) = v34;
            v33 -= 4;
          }
          a1[11] = v33;
          a1[12] = v28;
          a1[13] = &v32[4 * v31];
          if (v24)
          {
            operator delete(v24);
            int v24 = (char *)a1[11];
          }
          else
          {
            int v24 = v33;
          }
        }
        else
        {
          *(_DWORD *)unint64_t v25 = -1;
          unsigned int v28 = v25 + 4;
        }
        a1[12] = v28;
        unint64_t v26 = (v28 - v24) >> 2;
        unint64_t v25 = v28;
      }
      while (v26 <= a2);
    }
    *(_DWORD *)&v24[4 * a2] = *((_DWORD *)a1 + 28);
  }
  uint64_t v35 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::One();
  uint64_t v36 = v35;
  uint64_t v37 = *(void *)a1[1] + 40 * (int)v13;
  *(_DWORD *)uint64_t v37 = *(_DWORD *)v35;
  if (v37 != v35) {
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v37 + 8), *(void *)(v35 + 16), v35 + 8);
  }
  *(_DWORD *)(v37 + 32) = *(_DWORD *)(v36 + 32);
  uint64_t v38 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::One();
  uint64_t v39 = v38;
  v145 = a1 + 5;
  uint64_t v40 = a1[5] + 40 * (int)v13;
  *(_DWORD *)uint64_t v40 = *(_DWORD *)v38;
  if (v40 != v38) {
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v40 + 8), *(void *)(v38 + 16), v38 + 8);
  }
  *(_DWORD *)(v40 + 32) = *(_DWORD *)(v39 + 32);
  long long v41 = a1 + 8;
  *(void *)(a1[8] + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
  (*(void (**)(void, unint64_t))(**(void **)(a1[2] + 16) + 24))(*(void *)(a1[2] + 16), v13);
  uint64_t v42 = a1 + 13;
  unint64_t v144 = (char *)a1 + 116;
  do
  {
    if ((*(uint64_t (**)(void))(**(void **)(a1[2] + 16) + 48))(*(void *)(a1[2] + 16))) {
      goto LABEL_201;
    }
    int v43 = (*(uint64_t (**)(void))(**(void **)(a1[2] + 16) + 16))(*(void *)(a1[2] + 16));
    (*(void (**)(void))(**(void **)(a1[2] + 16) + 32))(*(void *)(a1[2] + 16));
    uint64_t v44 = (uint64_t *)a1[1];
    uint64_t v45 = v44 + 1;
    for (j = v43; 0xCCCCCCCCCCCCCCCDLL * ((v44[1] - *v44) >> 3) <= j; uint64_t v45 = v44 + 1)
    {
      uint64_t v47 = (_DWORD *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
      BOOL v48 = v47;
      unint64_t v49 = v44[1];
      if (v49 >= v44[2])
      {
        uint64_t v50 = std::vector<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::__push_back_slow_path<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1> const&>(v44, v47);
      }
      else
      {
        *(_DWORD *)unint64_t v49 = *v47;
        std::list<int>::list((void *)(v49 + 8), (uint64_t)(v47 + 2));
        *(_DWORD *)(v49 + 32) = v48[8];
        uint64_t v50 = v49 + 40;
        uint64_t *v45 = v49 + 40;
      }
      uint64_t *v45 = v50;
      int64_t v51 = (_DWORD *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
      uint64_t v52 = v51;
      unint64_t v53 = a1[6];
      if (v53 >= a1[7])
      {
        uint64_t v54 = std::vector<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::__push_back_slow_path<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1> const&>(v145, v51);
      }
      else
      {
        *(_DWORD *)unint64_t v53 = *v51;
        std::list<int>::list((void *)(v53 + 8), (uint64_t)(v51 + 2));
        *(_DWORD *)(v53 + 32) = v52[8];
        uint64_t v54 = v53 + 40;
        a1[6] = v53 + 40;
      }
      a1[6] = v54;
      LOBYTE(__p) = 0;
      std::vector<BOOL>::push_back((uint64_t)(a1 + 8), &__p);
      uint64_t v44 = (uint64_t *)a1[1];
    }
    if (*((unsigned char *)a1 + 32))
    {
      (*(void (**)(void **__return_ptr))(*(void *)*a1 + 32))(&__p);
      uint64_t v55 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
      if (__p) {
        uint64_t v56 = v160 + 1;
      }
      else {
        uint64_t v56 = 0;
      }
      if (*(_DWORD *)v55) {
        uint64_t v57 = *(void *)(v55 + 24) + 1;
      }
      else {
        uint64_t v57 = 0;
      }
      if (v56 != v57) {
        goto LABEL_200;
      }
      char v58 = 0;
      uint64_t v59 = v159;
      unint64_t v60 = (uint64_t *)(v55 + 16);
      BOOL v61 = __p && __p == *(_DWORD *)v55;
      BOOL v62 = !v61;
      while (1)
      {
        uint64_t v63 = *v60;
        if ((v58 & 1) == 0 && v62) {
          break;
        }
        if ((uint64_t *)v59 == &v158) {
          goto LABEL_79;
        }
        if (*(_DWORD *)(v59 + 16) != *(_DWORD *)(v63 + 16)) {
          goto LABEL_200;
        }
        uint64_t v59 = *(void *)(v59 + 8);
        unint64_t v60 = (uint64_t *)(v63 + 8);
        char v58 = 1;
      }
      if (__p)
      {
LABEL_200:
        std::__list_imp<char *>::clear(&v158);
LABEL_201:
        ++*((_DWORD *)a1 + 28);
        if (!(*(uint64_t (**)(void, uint64_t, void))(*(void *)*a1 + 64))(*a1, 4, 0)) {
          return;
        }
LABEL_213:
        *unint64_t v144 = 1;
        return;
      }
LABEL_79:
      *(float *)v154 = v161;
      float v151 = 0.0;
      float v151 = *(float *)(v55 + 32);
      float v64 = v161;
      float v65 = v151;
      std::__list_imp<char *>::clear(&v158);
      if (v64 != v65) {
        goto LABEL_201;
      }
    }
    *(void *)(*v41 + ((j >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << j);
    uint64_t v66 = *v145 + 40 * (int)j;
    LODWORD(__p) = *(_DWORD *)v66;
    std::list<int>::list(&v158, v66 + 8);
    float v161 = *(float *)(v66 + 32);
    uint64_t v67 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
    uint64_t v68 = v67;
    uint64_t v69 = *v145 + 40 * (int)j;
    *(_DWORD *)uint64_t v69 = *(_DWORD *)v67;
    if (v69 != v67) {
      std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v69 + 8), *(void *)(v67 + 16), v67 + 8);
    }
    *(_DWORD *)(v69 + 32) = *(_DWORD *)(v68 + 32);
    uint64_t v70 = *a1;
    unint64_t v156 = 0;
    (*(void (**)(uint64_t, unint64_t, void *))(*(void *)v70 + 136))(v70, j, v154);
    while (v154[0])
    {
      if ((*(uint64_t (**)(void))(*(void *)v154[0] + 24))(v154[0])) {
        goto LABEL_193;
      }
      if (v154[0])
      {
        uint64_t v71 = (*(uint64_t (**)(void))(*(void *)v154[0] + 32))(v154[0]);
        goto LABEL_89;
      }
LABEL_88:
      uint64_t v71 = v154[1] + 56 * v156;
LABEL_89:
      unint64_t v72 = (uint64_t *)a1[1];
      std::vector<unsigned int>::pointer v73 = v72 + 1;
      unint64_t v74 = *(int *)(v71 + 48);
      if (0xCCCCCCCCCCCCCCCDLL * ((v72[1] - *v72) >> 3) <= v74)
      {
        do
        {
          unint64_t v75 = (_DWORD *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
          unsigned int v76 = v75;
          uint64_t v77 = *v73;
          if (*v73 >= (unint64_t)v72[2])
          {
            uint64_t v78 = std::vector<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::__push_back_slow_path<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1> const&>(v72, v75);
          }
          else
          {
            *(_DWORD *)uint64_t v77 = *v75;
            std::list<int>::list((void *)(v77 + 8), (uint64_t)(v75 + 2));
            *(_DWORD *)(v77 + 32) = v76[8];
            uint64_t v78 = v77 + 40;
            *std::vector<unsigned int>::pointer v73 = v77 + 40;
          }
          *std::vector<unsigned int>::pointer v73 = v78;
          uint64_t v79 = (_DWORD *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
          uint64_t v80 = v79;
          unint64_t v81 = a1[6];
          if (v81 >= a1[7])
          {
            uint64_t v82 = std::vector<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::__push_back_slow_path<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1> const&>(v145, v79);
          }
          else
          {
            *(_DWORD *)unint64_t v81 = *v79;
            std::list<int>::list((void *)(v81 + 8), (uint64_t)(v79 + 2));
            *(_DWORD *)(v81 + 32) = v80[8];
            uint64_t v82 = v81 + 40;
            a1[6] = v81 + 40;
          }
          a1[6] = v82;
          LOBYTE(v151) = 0;
          std::vector<BOOL>::push_back((uint64_t)(a1 + 8), &v151);
          unint64_t v72 = (uint64_t *)a1[1];
          std::vector<unsigned int>::pointer v73 = v72 + 1;
        }
        while (0xCCCCCCCCCCCCCCCDLL * ((v72[1] - *v72) >> 3) <= *(int *)(v71 + 48));
        LODWORD(v74) = *(_DWORD *)(v71 + 48);
      }
      if (*((unsigned char *)a1 + 33))
      {
        int v83 = (char *)a1[11];
        BOOL v84 = (char *)a1[12];
        unint64_t v85 = (v84 - v83) >> 2;
        if (v85 <= (int)v74)
        {
          do
          {
            if ((unint64_t)v84 >= *v42)
            {
              unint64_t v88 = v85 + 1;
              if ((v85 + 1) >> 62) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v89 = *v42 - (void)v83;
              if (v89 >> 1 > v88) {
                unint64_t v88 = v89 >> 1;
              }
              if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v90 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v90 = v88;
              }
              if (v90)
              {
                unint64_t v91 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 13), v90);
                int v83 = (char *)a1[11];
                BOOL v84 = (char *)a1[12];
              }
              else
              {
                unint64_t v91 = 0;
              }
              uint64_t v92 = &v91[4 * v85];
              *(_DWORD *)uint64_t v92 = -1;
              uint64_t v87 = v92 + 4;
              while (v84 != v83)
              {
                int v93 = *((_DWORD *)v84 - 1);
                v84 -= 4;
                *((_DWORD *)v92 - 1) = v93;
                v92 -= 4;
              }
              a1[11] = v92;
              a1[12] = v87;
              a1[13] = &v91[4 * v90];
              if (v83)
              {
                operator delete(v83);
                int v83 = (char *)a1[11];
              }
              else
              {
                int v83 = v92;
              }
            }
            else
            {
              *(_DWORD *)BOOL v84 = -1;
              uint64_t v87 = v84 + 4;
            }
            a1[12] = v87;
            unint64_t v85 = (v87 - v83) >> 2;
            int v94 = *(_DWORD *)(v71 + 48);
            BOOL v84 = v87;
          }
          while (v85 <= v94);
          uint64_t v86 = v94;
          LODWORD(v74) = *(_DWORD *)(v71 + 48);
        }
        else
        {
          uint64_t v86 = (int)v74;
        }
        if (*(_DWORD *)&v83[4 * v86] != *((_DWORD *)a1 + 28))
        {
          uint64_t v95 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
          uint64_t v96 = v95;
          uint64_t v97 = *(void *)a1[1] + 40 * *(int *)(v71 + 48);
          *(_DWORD *)uint64_t v97 = *(_DWORD *)v95;
          if (v97 != v95) {
            std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v97 + 8), *(void *)(v95 + 16), v95 + 8);
          }
          *(_DWORD *)(v97 + 32) = *(_DWORD *)(v96 + 32);
          uint64_t v98 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
          uint64_t v99 = v98;
          uint64_t v100 = *v145 + 40 * *(int *)(v71 + 48);
          *(_DWORD *)uint64_t v100 = *(_DWORD *)v98;
          if (v100 != v98) {
            std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v100 + 8), *(void *)(v98 + 16), v98 + 8);
          }
          *(_DWORD *)(v100 + 32) = *(_DWORD *)(v99 + 32);
          unint64_t v101 = *(int *)(v71 + 48);
          *(void *)(a1[8] + ((v101 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v101);
          *(_DWORD *)(a1[11] + 4 * v101) = *((_DWORD *)a1 + 28);
          LODWORD(v74) = *(_DWORD *)(v71 + 48);
        }
      }
      uint64_t v102 = *(void *)a1[1];
      uint64_t v103 = a1[5];
      fst::Times<int,(fst::StringType)1>((int *)&__p, v71 + 8, (uint64_t)&v146);
      float v104 = NAN;
      if (v161 != -INFINITY)
      {
        float v105 = *(float *)(v71 + 40);
        float v104 = NAN;
        if (v105 != -INFINITY)
        {
          float v104 = INFINITY;
          if (v105 != INFINITY && v161 != INFINITY) {
            float v104 = v161 + v105;
          }
        }
      }
      fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::GallicWeight((uint64_t)&v151, &v146, v104);
      uint64_t v107 = v102 + 40 * (int)v74;
      std::__list_imp<char *>::clear(&v147);
      fst::Plus<int>(v107, (uint64_t)&v151, (uint64_t)&v162);
      float v108 = *(float *)(v107 + 32);
      float v109 = v153;
      if (v108 != INFINITY)
      {
        if (v153 == INFINITY)
        {
          float v109 = *(float *)(v107 + 32);
        }
        else if (v108 <= v153)
        {
          float v111 = expf(-(float)(v153 - v108));
          float v109 = v108 - logf(v111 + 1.0);
        }
        else
        {
          float v110 = expf(-(float)(v108 - v153));
          float v109 = v109 - logf(v110 + 1.0);
        }
      }
      fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::GallicWeight((uint64_t)&v146, &v162, v109);
      std::__list_imp<char *>::clear(v163);
      int v112 = *(_DWORD *)v107;
      if (*(_DWORD *)v107) {
        uint64_t v113 = *(void *)(v107 + 24) + 1;
      }
      else {
        uint64_t v113 = 0;
      }
      if (v146) {
        uint64_t v114 = v149 + 1;
      }
      else {
        uint64_t v114 = 0;
      }
      if (v113 == v114)
      {
        char v115 = 0;
        float v116 = *((float *)a1 + 7);
        float v117 = (uint64_t *)(v107 + 16);
        uint64_t v118 = v148;
        if (v112) {
          BOOL v119 = v112 == v146;
        }
        else {
          BOOL v119 = 0;
        }
        int v120 = !v119;
        while (1)
        {
          uint64_t v121 = *v117;
          if ((v115 & 1) == 0 && v120 == 1) {
            break;
          }
          if (v121 == v107 + 8) {
            goto LABEL_162;
          }
          if (*(_DWORD *)(v121 + 16) != *(_DWORD *)(v118 + 16)) {
            goto LABEL_158;
          }
          float v117 = (uint64_t *)(v121 + 8);
          uint64_t v118 = *(void *)(v118 + 8);
          char v115 = 1;
        }
        if (v112) {
          goto LABEL_158;
        }
LABEL_162:
        float v124 = *(float *)(v107 + 32);
        float v125 = v150;
        float v126 = v116 + v150;
        float v127 = v116 + v124;
        std::__list_imp<char *>::clear(&v147);
        if (v125 <= v127 && v124 <= v126) {
          goto LABEL_189;
        }
      }
      else
      {
LABEL_158:
        std::__list_imp<char *>::clear(&v147);
      }
      fst::Plus<int>(v107, (uint64_t)&v151, (uint64_t)&v162);
      float v122 = *(float *)(v107 + 32);
      float v123 = v153;
      if (v122 != INFINITY)
      {
        if (v153 == INFINITY)
        {
          float v123 = *(float *)(v107 + 32);
        }
        else if (v122 <= v153)
        {
          float v130 = expf(-(float)(v153 - v122));
          float v123 = v122 - logf(v130 + 1.0);
        }
        else
        {
          float v129 = expf(-(float)(v122 - v153));
          float v123 = v123 - logf(v129 + 1.0);
        }
      }
      fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::GallicWeight((uint64_t)&v146, &v162, v123);
      std::__list_imp<char *>::clear(v163);
      *(_DWORD *)uint64_t v107 = v146;
      if ((int *)v107 != &v146) {
        std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v107 + 8), v148, (uint64_t)&v147);
      }
      uint64_t v131 = v103 + 40 * (int)v74;
      *(float *)(v107 + 32) = v150;
      std::__list_imp<char *>::clear(&v147);
      fst::Plus<int>(v131, (uint64_t)&v151, (uint64_t)&v162);
      float v132 = *(float *)(v131 + 32);
      float v133 = v153;
      if (v132 != INFINITY)
      {
        if (v153 == INFINITY)
        {
          float v133 = *(float *)(v131 + 32);
        }
        else if (v132 <= v153)
        {
          float v135 = expf(-(float)(v153 - v132));
          float v133 = v132 - logf(v135 + 1.0);
        }
        else
        {
          float v134 = expf(-(float)(v132 - v153));
          float v133 = v133 - logf(v134 + 1.0);
        }
      }
      fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::GallicWeight((uint64_t)&v146, &v162, v133);
      std::__list_imp<char *>::clear(v163);
      *(_DWORD *)uint64_t v131 = v146;
      if ((int *)v131 != &v146) {
        std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v131 + 8), v148, (uint64_t)&v147);
      }
      *(float *)(v131 + 32) = v150;
      std::__list_imp<char *>::clear(&v147);
      if (*(_DWORD *)v107 == -2 && !*(void *)(v107 + 24)
        || *(float *)(v107 + 32) == -INFINITY
        || *(_DWORD *)v131 == -2 && !*(void *)(v131 + 24)
        || *(float *)(v131 + 32) == -INFINITY)
      {
        *unint64_t v144 = 1;
        std::__list_imp<char *>::clear(v152);
        char v137 = 0;
        goto LABEL_194;
      }
      uint64_t v136 = **(void **)(a1[2] + 16);
      if ((*(void *)(a1[8] + (((unint64_t)*(int *)(v71 + 48) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *(_DWORD *)(v71 + 48)))
      {
        (*(void (**)(void))(v136 + 40))();
      }
      else
      {
        (*(void (**)(void))(v136 + 24))();
        *(void *)(*v41 + (((unint64_t)*(int *)(v71 + 48) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *(_DWORD *)(v71 + 48);
      }
LABEL_189:
      std::__list_imp<char *>::clear(v152);
      if (v154[0]) {
        (*(void (**)(void))(*(void *)v154[0] + 40))(v154[0]);
      }
      else {
        ++v156;
      }
    }
    if (v156 < v154[2]) {
      goto LABEL_88;
    }
LABEL_193:
    char v137 = 1;
LABEL_194:
    if (v154[0])
    {
      (*(void (**)(void))(*(void *)v154[0] + 8))(v154[0]);
    }
    else if (v155)
    {
      --*v155;
    }
    std::__list_imp<char *>::clear(&v158);
  }
  while ((v137 & 1) != 0);
}

void sub_1B22D7C74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a36 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::__push_back_slow_path<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x333333333333333) {
    unint64_t v9 = 0x666666666666666;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[40 * v4];
  v14[0] = v10;
  v14[1] = v11;
  uint64_t v15 = v11;
  uint64_t v16 = &v10[40 * v9];
  *(_DWORD *)uint64_t v11 = *a2;
  std::list<int>::list((void *)v11 + 1, (uint64_t)(a2 + 2));
  *((_DWORD *)v11 + 8) = a2[8];
  v15 += 40;
  std::vector<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1B22D7EBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::~ImplToFst(void *a1)
{
  *a1 = &unk_1F0A425E0;
  unint64_t v2 = (_DWORD *)a1[1];
  if (v2)
  {
    int v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

void fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::ArcMapFst()
{
}

void sub_1B22D7FDC(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C40777B4A47);
  _Unwind_Resume(a1);
}

void fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::~ArcMapFst(void *a1)
{
  fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::~ImplToFst(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::Start(uint64_t a1)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::Start(*(void *)(a1 + 8));
}

void *fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::Final(*(void *)(a1 + 8), a2, a3);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::NumArcs(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::NumArcs(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::NumInputEpsilons(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::NumOutputEpsilons(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = fst::TestProperties<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    uint64_t v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return v7();
  }
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::Type(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

void fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::Copy()
{
}

void sub_1B22D81BC(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

void fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::InitStateIterator()
{
}

void sub_1B22D824C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C40E7AEC4CDLL);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::InitArcIterator(uint64_t a1, int a2, void *a3)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::InitArcIterator(*(void *)(a1 + 8), a2, a3);
}

void fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::ArcMapFstImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_1B22D8324(_Unwind_Exception *a1)
{
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

unint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::Init(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(&__str, "map");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 112))(*(void *)(a1 + 136));
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetInputSymbols(a1, v2);
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    *(void *)(a1 + 48) = 0;
  }
  unint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 24))(*(void *)(a1 + 136));
  *(_DWORD *)(a1 + 156) = 0;
  if (result == -1)
  {
    *(void *)(a1 + 8) = *(void *)(a1 + 8) & 4 | 0x156A5A950000;
  }
  else
  {
    unint64_t v5 = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 136) + 64))(*(void *)(a1 + 136), 0x3FFFFFFF0004, 0);
    unint64_t result = fst::ProjectProperties(v5, 1);
    *(void *)(a1 + 8) = *(void *)(a1 + 8) & 4 | result & 0x3FFCFFFF0007;
    if (*(_DWORD *)(a1 + 156) == 2) {
      *(_DWORD *)(a1 + 160) = 0;
    }
  }
  return result;
}

void sub_1B22D84AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::~ArcMapFstImpl(uint64_t a1)
{
  fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::~ArcMapFstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 136) + 64))(*(void *)(a1 + 136), 4, 0)|| (fst::ProjectProperties(0, 1) & 4) != 0))
  {
    *(void *)(a1 + 8) |= 4uLL;
  }
  return *(void *)(a1 + 8) & a2;
}

void fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::CacheBaseImpl(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A3FE30;
  *(void *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)a1 = &unk_1F0A38CF0;
  *(unsigned char *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + --*(_DWORD *)(a9 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = -1;
  *(unsigned char *)(a1 + 104) = *(unsigned char *)a2;
  *(void *)(a1 + 112) = *(void *)(a2 + 8);
  operator new();
}

{
  *(void *)a1 = &unk_1F0A3FE30;
  *(void *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)a1 = &unk_1F0A38CF0;
  *(unsigned char *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + --*(_DWORD *)(a9 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = -1;
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  operator new();
}

void sub_1B22D86C4(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x10A0C407A9BBF1FLL);
  unint64_t v4 = *(void **)(v1 + 72);
  if (v4) {
    operator delete(v4);
  }
  fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

void fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::~CacheBaseImpl(void *a1)
{
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::~CacheBaseImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

void *fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::VectorCacheStore(void *a1, unsigned char *a2)
{
  *(unsigned char *)a1 = *a2;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = a1 + 4;
  a1[5] = a1 + 4;
  a1[6] = 0;
  a1[7] = 0;
  fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::Clear(a1);
  a1[7] = a1[5];
  return a1;
}

void sub_1B22D8798(_Unwind_Exception *a1)
{
  unint64_t v4 = v3;
  std::__list_imp<char *>::clear(v2);
  uint64_t v6 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 16) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::~CacheBaseImpl(void *a1)
{
  *a1 = &unk_1F0A38CF0;
  uint64_t v2 = (void *)a1[15];
  if (v2)
  {
    uint64_t v3 = fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::~VectorCacheStore(v2);
    MEMORY[0x1B3EA8670](v3, 0x10A0C407A9BBF1FLL);
  }
  unint64_t v4 = (void *)a1[9];
  if (v4) {
    operator delete(v4);
  }
  return fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::~FstImpl((uint64_t)a1);
}

void *fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::~VectorCacheStore(void *a1)
{
  fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::Clear(a1);
  std::__list_imp<char *>::clear(a1 + 4);
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::~ArcMapFstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A38708;
  uint64_t v2 = *(void *)(a1 + 136);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*(unsigned char *)(a1 + 152))
  {
    uint64_t v3 = *(void *)(a1 + 144);
    if (v3) {
      MEMORY[0x1B3EA8670](v3, 0xC400A2AC0F1);
    }
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::~CacheBaseImpl((void *)a1);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::Start(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 60))
  {
    if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 4))
    {
      *(unsigned char *)(a1 + 60) = 1;
    }
    else if (!*(unsigned char *)(a1 + 60))
    {
      int v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 24))(*(void *)(a1 + 136));
      int v3 = *(_DWORD *)(a1 + 160);
      if (v3 != -1 && v3 <= v2) {
        int v5 = v2 + 1;
      }
      else {
        int v5 = v2;
      }
      if (v5 >= *(_DWORD *)(a1 + 164)) {
        *(_DWORD *)(a1 + 164) = v5 + 1;
      }
      *(_DWORD *)(a1 + 64) = v5;
      *(unsigned char *)(a1 + 60) = 1;
      if (*(_DWORD *)(a1 + 68) <= v5) {
        *(_DWORD *)(a1 + 68) = v5 + 1;
      }
    }
  }
  return *(unsigned int *)(a1 + 64);
}

void *fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasFinal(a1, a2) & 1) == 0)
  {
    int v6 = *(_DWORD *)(a1 + 156);
    if (v6 == 1)
    {
      int v8 = *(_DWORD *)(a1 + 160);
      if (v8 != a2)
      {
        BOOL v20 = v8 != -1 && v8 <= a2;
        float v21 = (*(float (**)(void, void))(**(void **)(a1 + 136) + 32))(*(void *)(a1 + 136), (a2 - v20));
        uint64_t v40 = 0;
        float v41 = v21;
        int v42 = -1;
        fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>::operator()((float *)&v40, (uint64_t)&v45);
        if (v45)
        {
          uint64_t v23 = (int *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Zero();
          int v28 = *v23;
          unint64_t v22 = v29;
          std::list<int>::list(v29, (uint64_t)(v23 + 2));
          int v30 = v23[8];
          fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::SetFinal(a1, a2, &v28);
        }
        else
        {
          int v31 = v46;
          unint64_t v22 = v32;
          std::list<int>::list(v32, (uint64_t)v47);
          int v33 = v48;
          fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::SetFinal(a1, a2, &v31);
        }
        std::__list_imp<char *>::clear(v22);
        unint64_t v18 = v47;
        goto LABEL_35;
      }
      unint64_t v9 = (int *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::One();
      int v34 = *v9;
      uint64_t v10 = v35;
      std::list<int>::list(v35, (uint64_t)(v9 + 2));
      int v36 = v9[8];
      fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::SetFinal(a1, a2, &v34);
    }
    else
    {
      if (v6 != 2)
      {
        int v11 = *(_DWORD *)(a1 + 160);
        BOOL v13 = v11 != -1 && v11 <= a2;
        float v14 = (*(float (**)(void, void))(**(void **)(a1 + 136) + 32))(*(void *)(a1 + 136), (a2 - v13));
        uint64_t v40 = 0;
        float v41 = v14;
        int v42 = -1;
        fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>::operator()((float *)&v40, (uint64_t)&v45);
        if (v45)
        {
          if (FLAGS_fst_error_fatal) {
            std::string::basic_string[abi:ne180100]<0>(&v40, "FATAL");
          }
          else {
            std::string::basic_string[abi:ne180100]<0>(&v40, "ERROR");
          }
          uint64_t v15 = fst::LogMessage::LogMessage((fst *)&v44, (uint64_t)&v40);
          uint64_t v16 = (void *)fst::cerr(v15);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"ArcMapFst: non-zero arc labels for superfinal arc", 49);
          fst::LogMessage::~LogMessage((fst::LogMessage *)&v44);
          if (v43 < 0) {
            operator delete(v40);
          }
          *(void *)(a1 + 8) |= 4uLL;
        }
        int v37 = v46;
        std::list<int>::list(v38, (uint64_t)v47);
        int v39 = v48;
        fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::SetFinal(a1, a2, &v37);
        std::__list_imp<char *>::clear(v38);
        unint64_t v18 = v47;
        goto LABEL_35;
      }
      if (*(_DWORD *)(a1 + 160) == a2) {
        uint64_t v7 = (int *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::One();
      }
      else {
        uint64_t v7 = (int *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Zero();
      }
      uint64_t v17 = v7;
      int v25 = *v7;
      uint64_t v10 = v26;
      std::list<int>::list(v26, (uint64_t)(v7 + 2));
      int v27 = v17[8];
      fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::SetFinal(a1, a2, &v25);
    }
    unint64_t v18 = v10;
LABEL_35:
    std::__list_imp<char *>::clear(v18);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Final(a1, a2, a3);
}

void sub_1B22D8D30(_Unwind_Exception *a1)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)(v1 - 105));
  if (*(char *)(v1 - 113) < 0) {
    operator delete(*(void **)(v1 - 136));
  }
  std::__list_imp<char *>::clear((void *)(v1 - 88));
  _Unwind_Resume(a1);
}

void *fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::SetFinal(uint64_t a1, int a2, int *a3)
{
  Mutableuint64_t State = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
  int v7 = *a3;
  std::list<int>::list(v8, (uint64_t)(a3 + 2));
  int v5 = a3[8];
  int v9 = v5;
  *(_DWORD *)Mutableuint64_t State = v7;
  if (MutableState != (char *)&v7)
  {
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)MutableState + 1, v8[1], (uint64_t)v8);
    int v5 = v9;
  }
  *((_DWORD *)MutableState + 8) = v5;
  unint64_t result = std::__list_imp<char *>::clear(v8);
  *((_DWORD *)MutableState + 20) |= 9u;
  return result;
}

void sub_1B22D8E50(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

char *fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::GetMutableState(uint64_t a1, int a2)
{
  Mutableuint64_t State = fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::GetMutableState(a1, a2);
  unint64_t v4 = MutableState;
  if (*(unsigned char *)(a1 + 88))
  {
    int v5 = *((_DWORD *)MutableState + 20);
    if ((v5 & 4) == 0)
    {
      *((_DWORD *)MutableState + 20) = v5 | 4;
      unint64_t v6 = *((void *)MutableState + 8) - *((void *)MutableState + 7) + *(void *)(a1 + 112) + 88;
      *(void *)(a1 + 112) = v6;
      *(unsigned char *)(a1 + 104) = 1;
      if (v6 > *(void *)(a1 + 96)) {
        fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::GC(a1, MutableState, 0, 0.666);
      }
    }
  }
  return v4;
}

char *fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::GetMutableState(uint64_t a1, int a2)
{
  int v3 = *(_DWORD *)(a1 + 76);
  if (v3 == a2) {
    return *(char **)(a1 + 80);
  }
  if (*(unsigned char *)(a1 + 72))
  {
    if (v3 == -1)
    {
      *(_DWORD *)(a1 + 76) = a2;
      Mutableuint64_t State = fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::GetMutableState(a1, 0);
      *(void *)(a1 + 80) = MutableState;
      *((_DWORD *)MutableState + 20) |= 4u;
      std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::reserve((uint64_t *)MutableState + 7, 0x80uLL);
      return *(char **)(a1 + 80);
    }
    uint64_t v5 = *(void *)(a1 + 80);
    if (!*(_DWORD *)(v5 + 84))
    {
      *(_DWORD *)(a1 + 76) = a2;
      fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::Reset(v5);
      unint64_t result = *(char **)(a1 + 80);
      *((_DWORD *)result + 20) |= 4u;
      return result;
    }
    *(_DWORD *)(v5 + 80) &= ~4u;
    *(unsigned char *)(a1 + 72) = 0;
  }
  int v6 = a2 + 1;
  return fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::GetMutableState(a1, v6);
}

void fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::GC(uint64_t a1, char *a2, char a3, float a4)
{
  if (*(unsigned char *)(a1 + 104))
  {
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      int v8 = fst::LogMessage::LogMessage((fst *)v37, (uint64_t)__p);
      int v9 = (void *)fst::cerr(v8);
      uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"GCCacheStore: Enter GC: object = ", 33);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(", 1);
      int v11 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"), free recently cached = ", 26);
      uint64_t v12 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", cache std::string::size_type size = ", 15);
      BOOL v13 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", cache frac = ", 15);
      float v14 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", cache limit = ", 16);
      uint64_t v15 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"\n", 1);
      fst::LogMessage::~LogMessage((fst::LogMessage *)v37);
      if (v42 < 0) {
        operator delete(__p[0]);
      }
    }
    unint64_t v16 = (unint64_t)(float)((float)*(unint64_t *)(a1 + 96) * a4);
    uint64_t v17 = *(void *)(a1 + 40);
    *(void *)(a1 + 56) = v17;
    while (v17 != a1 + 32)
    {
      int v18 = *(_DWORD *)(v17 + 16);
      if (v18) {
        int v19 = v18 - 1;
      }
      else {
        int v19 = *(_DWORD *)(a1 + 76);
      }
      Mutableuint64_t State = fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::GetMutableState(a1, v19);
      unint64_t v21 = *(void *)(a1 + 112);
      if (v21 > v16 && !*((_DWORD *)MutableState + 21))
      {
        if (a3)
        {
          if (MutableState != a2)
          {
            int v22 = *((_DWORD *)MutableState + 20);
LABEL_19:
            if ((v22 & 4) != 0)
            {
              unint64_t v23 = *((void *)MutableState + 8) - *((void *)MutableState + 7) + 88;
              FstCheck(v23 <= v21, "(size) <= (cache_size_)", "../libquasar/libkaldi/tools/openfst/src/include/fst/cache.h");
              *(void *)(a1 + 112) -= v23;
            }
            fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::Delete((void *)a1);
            uint64_t v17 = *(void *)(a1 + 56);
            continue;
          }
        }
        else
        {
          int v22 = *((_DWORD *)MutableState + 20);
          if ((v22 & 8) == 0 && MutableState != a2) {
            goto LABEL_19;
          }
        }
      }
      *((_DWORD *)MutableState + 20) &= ~8u;
      uint64_t v17 = *(void *)(*(void *)(a1 + 56) + 8);
      *(void *)(a1 + 56) = v17;
    }
    if ((a3 & 1) != 0 || *(void *)(a1 + 112) <= v16)
    {
      unint64_t v24 = *(void *)(a1 + 112);
      if (v16)
      {
        if (v24 > v16)
        {
          uint64_t v25 = *(void *)(a1 + 96);
          do
          {
            v25 *= 2;
            BOOL v26 = v24 > 2 * v16;
            v16 *= 2;
          }
          while (v26);
          *(void *)(a1 + 96) = v25;
        }
      }
      else if (v24)
      {
        if (FLAGS_fst_error_fatal) {
          std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
        }
        else {
          std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
        }
        int v27 = fst::LogMessage::LogMessage((fst *)&v40, (uint64_t)__p);
        int v28 = (void *)fst::cerr(v27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"GCCacheStore:GC: Unable to free all cached states", 49);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v40);
        if (v42 < 0) {
          operator delete(__p[0]);
        }
      }
    }
    else
    {
      fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::GC(a1, a2, 1, a4);
    }
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(v37, "INFO");
      unint64_t v29 = fst::LogMessage::LogMessage((fst *)&v39, (uint64_t)v37);
      int v30 = (void *)fst::cerr(v29);
      int v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"GCCacheStore: Exit GC: object = ", 32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"(", 1);
      int64x2_t v32 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"), free recently cached = ", 26);
      int v33 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)", cache std::string::size_type size = ", 15);
      int v34 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)", cache frac = ", 15);
      uint64_t v35 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)", cache limit = ", 16);
      int v36 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"\n", 1);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v39);
      if (v38 < 0) {
        operator delete(v37[0]);
      }
    }
  }
}

void sub_1B22D93A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

char *fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::GetMutableState(uint64_t a1, int a2)
{
  uint64_t v4 = a2;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v5 = a1 + 8;
  if (a2 >= (unint64_t)((v7 - v6) >> 3))
  {
    uint64_t v14 = 0;
    std::vector<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::resize(v5, a2 + 1, &v14);
  }
  else
  {
    int v8 = *(char **)(v6 + 8 * a2);
    if (v8) {
      return v8;
    }
  }
  int v8 = (char *)operator new(0x58uLL);
  int v9 = (_DWORD *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Zero();
  *(_DWORD *)int v8 = *v9;
  std::list<int>::list((void *)v8 + 1, (uint64_t)(v9 + 2));
  *((_DWORD *)v8 + 8) = v9[8];
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *(void *)(*(void *)(a1 + 8) + 8 * v4) = v8;
  if (*(unsigned char *)a1)
  {
    uint64_t v10 = operator new(0x18uLL);
    v10[4] = a2;
    uint64_t v12 = *(void *)(a1 + 32);
    int v11 = (void *)(a1 + 32);
    *(void *)uint64_t v10 = v12;
    *((void *)v10 + 1) = v11;
    *(void *)(v12 + 8) = v10;
    *int v11 = v10;
    ++v11[2];
  }
  return v8;
}

uint64_t fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::Reset(uint64_t a1)
{
  uint64_t result = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Zero();
  uint64_t v3 = result;
  *(_DWORD *)a1 = *(_DWORD *)result;
  if (result != a1) {
    uint64_t result = (uint64_t)std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(a1 + 8), *(void *)(result + 16), result + 8);
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(v3 + 32);
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v4 = *(void *)(a1 + 64);
  if (v4 != v5)
  {
    do
    {
      uint64_t v6 = v4 - 56;
      uint64_t result = (uint64_t)std::__list_imp<char *>::clear((void *)(v4 - 40));
      uint64_t v4 = v6;
    }
    while (v6 != v5);
  }
  *(void *)(a1 + 64) = v5;
  return result;
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::NumArcs(uint64_t a1, int a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::Expand(a1, a2); {
  uint64_t v4 = *(void *)(a1 + 120);
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * (a2 + 1);
  }
  return 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(*(void *)v5 + 64) - *(void *)(*(void *)v5 + 56)) >> 3);
}

void fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::Expand(uint64_t a1, int a2)
{
  int v4 = *(_DWORD *)(a1 + 160);
  if (v4 == a2)
  {
    fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::SetArcs(a1, a2);
    return;
  }
  uint64_t v5 = *(void *)(a1 + 136);
  BOOL v7 = v4 != -1 && v4 <= a2;
  unint64_t v58 = 0;
  (*(void (**)(uint64_t, void, uint64_t *))(*(void *)v5 + 136))(v5, (a2 - v7), &v54);
  while (1)
  {
    if (!v54)
    {
      if (v58 >= v56) {
        goto LABEL_30;
      }
      goto LABEL_17;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v54 + 24))(v54)) {
      break;
    }
    if (v54)
    {
      int v8 = (long long *)(*(uint64_t (**)(void))(*(void *)v54 + 32))();
      goto LABEL_18;
    }
LABEL_17:
    int v8 = (long long *)(v55 + 16 * v58);
LABEL_18:
    long long v68 = *v8;
    int v9 = HIDWORD(v68);
    int v10 = *(_DWORD *)(a1 + 160);
    if (v10 != -1 && v10 <= SHIDWORD(v68)) {
      int v9 = HIDWORD(v68) + 1;
    }
    if (v9 >= *(_DWORD *)(a1 + 164)) {
      *(_DWORD *)(a1 + 164) = v9 + 1;
    }
    HIDWORD(v68) = v9;
    fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>::operator()((float *)&v68, (uint64_t)&v61);
    Mutableuint64_t State = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
    fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::PushArc(MutableState, (uint64_t)&v61);
    std::__list_imp<char *>::clear(&v63);
    if (v54) {
      (*(void (**)(uint64_t))(*(void *)v54 + 40))(v54);
    }
    else {
      ++v58;
    }
  }
  if (v54)
  {
    (*(void (**)(void))(*(void *)v54 + 8))();
    goto LABEL_32;
  }
LABEL_30:
  if (v57) {
    --*v57;
  }
LABEL_32:
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasFinal(a1, a2) & 1) == 0)
  {
LABEL_54:
    int v26 = *(_DWORD *)(a1 + 156);
    if (v26 == 1)
    {
      int v32 = *(_DWORD *)(a1 + 160);
      BOOL v34 = v32 != -1 && v32 <= a2;
      *(float *)&unsigned int v35 = (*(float (**)(void, void))(**(void **)(a1 + 136) + 32))(*(void *)(a1 + 136), (a2 - v34));
      uint64_t v54 = 0;
      unint64_t v55 = v35 | 0xFFFFFFFF00000000;
      fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>::operator()((float *)&v54, (uint64_t)&v61);
      if (v61)
      {
        int v36 = *(_DWORD *)(a1 + 160);
        if (v36 == -1)
        {
          int v36 = *(_DWORD *)(a1 + 164);
          *(_DWORD *)(a1 + 160) = v36;
          *(_DWORD *)(a1 + 164) = v36 + 1;
        }
        int v67 = v36;
        int v37 = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
        fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::PushArc(v37, (uint64_t)&v61);
      }
      uint64_t v14 = &v63;
      goto LABEL_98;
    }
    if (v26 != 2) {
      goto LABEL_99;
    }
    int v27 = *(_DWORD *)(a1 + 160);
    BOOL v29 = v27 != -1 && v27 <= a2;
    *(float *)&unsigned int v30 = (*(float (**)(void, void))(**(void **)(a1 + 136) + 32))(*(void *)(a1 + 136), (a2 - v29));
    uint64_t v54 = 0;
    unint64_t v55 = v30 | 0xFFFFFFFF00000000;
    fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>::operator()((float *)&v54, (uint64_t)&v61);
    if (v61)
    {
      int v31 = v62;
    }
    else
    {
      uint64_t v38 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Zero();
      int v31 = v62;
      if (v62) {
        uint64_t v39 = v65 + 1;
      }
      else {
        uint64_t v39 = 0;
      }
      if (*(_DWORD *)v38) {
        uint64_t v40 = *(void *)(v38 + 24) + 1;
      }
      else {
        uint64_t v40 = 0;
      }
      if (v39 == v40)
      {
        char v41 = 0;
        uint64_t v42 = v64;
        char v43 = (uint64_t *)(v38 + 16);
        BOOL v44 = v62 && v62 == *(_DWORD *)v38;
        BOOL v45 = !v44;
        int v46 = !v45;
        while (1)
        {
          uint64_t v47 = *v43;
          if ((v41 & 1) == 0 && !v46) {
            break;
          }
          if ((uint64_t *)v42 == &v63) {
            goto LABEL_95;
          }
          if (*(_DWORD *)(v42 + 16) != *(_DWORD *)(v47 + 16)) {
            goto LABEL_96;
          }
          uint64_t v42 = *(void *)(v42 + 8);
          char v43 = (uint64_t *)(v47 + 8);
          char v41 = 1;
        }
        if (v62) {
          goto LABEL_96;
        }
LABEL_95:
        *(float *)&uint64_t v54 = v66;
        LODWORD(v68) = 0;
        LODWORD(v68) = *(_DWORD *)(v38 + 32);
        if (v66 == *(float *)&v68) {
          goto LABEL_97;
        }
      }
    }
LABEL_96:
    uint64_t v48 = v61;
    int v51 = v31;
    std::list<int>::list(v52, (uint64_t)&v63);
    float v53 = v66;
    int v49 = *(_DWORD *)(a1 + 160);
    uint64_t v54 = v48;
    LODWORD(v55) = v51;
    std::list<int>::list(&v56, (uint64_t)v52);
    float v59 = v53;
    int v60 = v49;
    uint64_t v50 = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
    fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::PushArc(v50, (uint64_t)&v54);
    std::__list_imp<char *>::clear(&v56);
    std::__list_imp<char *>::clear(v52);
LABEL_97:
    uint64_t v14 = &v63;
LABEL_98:
    std::__list_imp<char *>::clear(v14);
    goto LABEL_99;
  }
  fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::Final(a1, a2, (uint64_t)&v61);
  uint64_t v13 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Zero();
  uint64_t v14 = &v62;
  if (v61) {
    uint64_t v15 = v64 + 1;
  }
  else {
    uint64_t v15 = 0;
  }
  if (*(_DWORD *)v13) {
    uint64_t v16 = *(void *)(v13 + 24) + 1;
  }
  else {
    uint64_t v16 = 0;
  }
  if (v15 != v16) {
    goto LABEL_98;
  }
  char v17 = 0;
  uint64_t v18 = v63;
  int v19 = (uint64_t *)(v13 + 16);
  if (v61) {
    BOOL v20 = v61 == *(_DWORD *)v13;
  }
  else {
    BOOL v20 = 0;
  }
  int v21 = !v20;
  int v22 = v21 ^ 1;
  while (1)
  {
    uint64_t v23 = *v19;
    if ((v17 & 1) == 0 && !v22) {
      break;
    }
    if ((uint64_t *)v18 == &v62) {
      goto LABEL_53;
    }
    if (*(_DWORD *)(v18 + 16) != *(_DWORD *)(v23 + 16)) {
      goto LABEL_98;
    }
    uint64_t v18 = *(void *)(v18 + 8);
    int v19 = (uint64_t *)(v23 + 8);
    char v17 = 1;
  }
  if (v61) {
    goto LABEL_98;
  }
LABEL_53:
  LODWORD(v54) = v65;
  LODWORD(v68) = 0;
  LODWORD(v68) = *(_DWORD *)(v13 + 32);
  float v24 = *(float *)&v65;
  float v25 = *(float *)&v68;
  std::__list_imp<char *>::clear(&v62);
  if (v24 == v25) {
    goto LABEL_54;
  }
LABEL_99:
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::SetArcs(a1, a2);
}

void sub_1B22D9B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  std::__list_imp<char *>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

void fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::SetArcs(uint64_t a1, int a2)
{
  Mutableuint64_t State = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
  fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::SetArcs(*(void *)(a1 + 120), (uint64_t)MutableState);
  uint64_t v5 = *((void *)MutableState + 7);
  uint64_t v6 = *((void *)MutableState + 8) - v5;
  if (v6)
  {
    unint64_t v7 = v6 / 56;
    int v8 = *(_DWORD *)(a1 + 68);
    if (v7 <= 1) {
      unint64_t v7 = 1;
    }
    int v9 = (int *)(v5 + 48);
    do
    {
      int v11 = *v9;
      v9 += 14;
      int v10 = v11;
      if (v11 >= v8)
      {
        int v8 = v10 + 1;
        *(_DWORD *)(a1 + 68) = v10 + 1;
      }
      --v7;
    }
    while (v7);
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetExpandedState(a1, a2);
  *((_DWORD *)MutableState + 20) |= 0xAu;
}

void fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::SetArcs(uint64_t a1, uint64_t a2)
{
  fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::SetArcs((void *)a2);
  if (*(unsigned char *)(a1 + 104))
  {
    if ((*(unsigned char *)(a2 + 80) & 4) != 0)
    {
      unint64_t v4 = *(void *)(a2 + 64) - *(void *)(a2 + 56) + *(void *)(a1 + 112);
      *(void *)(a1 + 112) = v4;
      if (v4 > *(void *)(a1 + 96))
      {
        fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::GC(a1, (char *)a2, 0, 0.666);
      }
    }
  }
}

uint64_t fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::PushArc(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = a1 + 7;
  unint64_t v4 = a1[8];
  if (v4 >= a1[9])
  {
    uint64_t result = std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::__push_back_slow_path<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0> const&>(v3, a2);
  }
  else
  {
    std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::__construct_one_at_end[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0> const&>((uint64_t)v3, a2);
    uint64_t result = v4 + 56;
  }
  a1[8] = result;
  return result;
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::NumInputEpsilons(uint64_t a1, int a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::Expand(a1, a2); {
  uint64_t v4 = *(void *)(a1 + 120);
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * (a2 + 1);
  }
  return *(void *)(*(void *)v5 + 40);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::Expand(a1, a2); {
  uint64_t v4 = *(void *)(a1 + 120);
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * (a2 + 1);
  }
  return *(void *)(*(void *)v5 + 48);
}

void *fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::ImplToFst(void *result, uint64_t a2, int a3)
{
  *uint64_t result = &unk_1F0A41200;
  if (a3) {
    operator new();
  }
  uint64_t v3 = *(void *)(a2 + 8);
  result[1] = v3;
  ++*(_DWORD *)(v3 + 56);
  return result;
}

void sub_1B22D9EBC(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C40777B4A47);
  _Unwind_Resume(a1);
}

void fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::ArcMapFstImpl(uint64_t a1, uint64_t a2)
{
}

void sub_1B22D9F8C(_Unwind_Exception *a1)
{
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void sub_1B22DA134(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v3, 0x10A0C407A9BBF1FLL);
  if (*v2) {
    operator delete(*v2);
  }
  fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::CopyStates((void *)a1, a2);
    *(void *)(a1 + 56) = *(void *)(a1 + 40);
    *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
    *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
    if (*(_DWORD *)(a2 + 76) == -1) {
      Mutableuint64_t State = 0;
    }
    else {
      Mutableuint64_t State = fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::GetMutableState(a1, 0);
    }
    *(void *)(a1 + 80) = MutableState;
  }
  return a1;
}

void fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::CopyStates(void *a1, uint64_t a2)
{
  fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::Clear(a1);
  uint64_t v4 = (char **)(a1 + 1);
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)a1 + 1, (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
  uint64_t v5 = *(void *)(a2 + 8);
  if (*(void *)(a2 + 16) != v5)
  {
    unint64_t v6 = 0;
    do
    {
      uint64_t v7 = *(void *)(v5 + 8 * v6);
      if (v7)
      {
        int v8 = operator new(0x58uLL);
        fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::CacheState((uint64_t)v8, v7);
        if (*(unsigned char *)a1)
        {
          int v9 = operator new(0x18uLL);
          _DWORD v9[4] = v6;
          uint64_t v10 = a1[4];
          *(void *)int v9 = v10;
          *((void *)v9 + 1) = a1 + 4;
          *(void *)(v10 + 8) = v9;
          a1[4] = v9;
          ++a1[6];
        }
      }
      else
      {
        int v8 = 0;
      }
      uint64_t v12 = (void *)a1[2];
      unint64_t v11 = a1[3];
      if ((unint64_t)v12 >= v11)
      {
        uint64_t v14 = ((char *)v12 - *v4) >> 3;
        if ((unint64_t)(v14 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = v11 - (void)*v4;
        uint64_t v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1)) {
          uint64_t v16 = v14 + 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v16;
        }
        if (v17) {
          uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v17);
        }
        else {
          uint64_t v18 = 0;
        }
        int v19 = &v18[8 * v14];
        *(void *)int v19 = v8;
        uint64_t v13 = v19 + 8;
        int v21 = (char *)a1[1];
        BOOL v20 = (char *)a1[2];
        if (v20 != v21)
        {
          do
          {
            uint64_t v22 = *((void *)v20 - 1);
            v20 -= 8;
            *((void *)v19 - 1) = v22;
            v19 -= 8;
          }
          while (v20 != v21);
          BOOL v20 = *v4;
        }
        a1[1] = v19;
        a1[2] = v13;
        a1[3] = &v18[8 * v17];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        *uint64_t v12 = v8;
        uint64_t v13 = v12 + 1;
      }
      a1[2] = v13;
      ++v6;
      uint64_t v5 = *(void *)(a2 + 8);
    }
    while (v6 < (*(void *)(a2 + 16) - v5) >> 3);
  }
}

uint64_t fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::CacheState(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  std::list<int>::list((void *)(a1 + 8), a2 + 8);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 56);
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = v4;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::__init_with_size[abi:ne180100]<std::__wrap_iter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0> const*>,std::__wrap_iter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0> const*>>((void *)(a1 + 56), v5, v6, 0x6DB6DB6DB6DB6DB7 * ((v6 - v5) >> 3));
  *(void *)(a1 + 80) = *(unsigned int *)(a2 + 80);
  return a1;
}

void sub_1B22DA40C(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void *std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::__init_with_size[abi:ne180100]<std::__wrap_iter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0> const*>,std::__wrap_iter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0> const*>>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<quasar::VoiceCommandArgument>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0> const*,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0> const*,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B22DA488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0> const*,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0> const*,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a2 + v7;
      uint64_t v9 = a4 + v7;
      *(void *)uint64_t v9 = *(void *)(a2 + v7);
      *(_DWORD *)(v9 + 8) = *(_DWORD *)(a2 + v7 + 8);
      std::list<int>::list((void *)(a4 + v7 + 16), a2 + v7 + 16);
      *(_DWORD *)(v9 + 40) = *(_DWORD *)(a2 + v7 + 40);
      *(_DWORD *)(v9 + 48) = *(_DWORD *)(a2 + v7 + 48);
      v7 += 56;
    }
    while (v8 + 56 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1B22DA538(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 40;
    do
    {
      std::__list_imp<char *>::clear((void *)(v4 + v2));
      v2 -= 56;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::StateIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = &unk_1F0A39D48;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = a1 + 16;
  uint64_t v5 = *(void *)(v3 + 136);
  *(_DWORD *)(a1 + 32) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 128))(v5, v4);
  *(_DWORD *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 44) = *(_DWORD *)(*(void *)(a1 + 8) + 156) == 2;
  fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::CheckSuperfinal(a1);
  return a1;
}

void sub_1B22DA5F4(_Unwind_Exception *exception_object)
{
  if (*v1) {
    fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::StateIterator(*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::CheckSuperfinal(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8);
  if (*(_DWORD *)(v1 + 156) == 1)
  {
    uint64_t v2 = result;
    if (!*(unsigned char *)(result + 44))
    {
      uint64_t result = *(void *)(result + 16);
      if (result)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
        if (result) {
          return result;
        }
        uint64_t v1 = *(void *)(v2 + 8);
      }
      else if (*(_DWORD *)(v2 + 32) >= *(_DWORD *)(v2 + 24))
      {
        return result;
      }
      float v3 = (*(float (**)(void, void))(**(void **)(v1 + 136) + 32))(*(void *)(v1 + 136), *(unsigned int *)(v2 + 40));
      uint64_t v4 = 0;
      float v5 = v3;
      int v6 = -1;
      fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>::operator()((float *)&v4, (uint64_t)&v7);
      if (v7) {
        *(unsigned char *)(v2 + 44) = 1;
      }
      return (uint64_t)std::__list_imp<char *>::clear(v8);
    }
  }
  return result;
}

void *fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::~StateIterator(void *a1)
{
  *a1 = &unk_1F0A39D48;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::~StateIterator(void *a1)
{
  *a1 = &unk_1F0A39D48;
  uint64_t v1 = a1[2];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::Next(uint64_t a1)
{
  ++*(_DWORD *)(a1 + 40);
  uint64_t result = *(void *)(a1 + 16);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
    if ((result & 1) == 0)
    {
      uint64_t v3 = *(void *)(a1 + 16);
      if (v3)
      {
        (*(void (**)(uint64_t))(*(void *)v3 + 32))(v3);
LABEL_7:
        return fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::CheckSuperfinal(a1);
      }
LABEL_6:
      ++*(_DWORD *)(a1 + 32);
      goto LABEL_7;
    }
  }
  else if (*(_DWORD *)(a1 + 32) < *(_DWORD *)(a1 + 24))
  {
    goto LABEL_6;
  }
  if (*(unsigned char *)(a1 + 44)) {
    *(unsigned char *)(a1 + 44) = 0;
  }
  return result;
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::Reset(uint64_t a1)
{
  *(_DWORD *)(a1 + 40) = 0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  }
  else {
    *(_DWORD *)(a1 + 32) = 0;
  }
  *(unsigned char *)(a1 + 44) = *(_DWORD *)(*(void *)(a1 + 8) + 156) == 2;
  return fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::CheckSuperfinal(a1);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::InitArcIterator(uint64_t a1, int a2, void *a3)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::Expand(a1, a2); {
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::InitArcIterator(a1, a2, a3);
  }
}

void *fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::~ImplToFst(void *a1)
{
  *a1 = &unk_1F0A41200;
  uint64_t v2 = (_DWORD *)a1[1];
  if (v2)
  {
    int v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

void fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::FactorWeightFst()
{
}

void sub_1B22DAAF0(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C40B21EFC33);
  _Unwind_Resume(a1);
}

void fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::~FactorWeightFst(void *a1)
{
  fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::~ImplToFst(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::Start(uint64_t a1)
{
  return fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Start(*(void *)(a1 + 8));
}

void *fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  return fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Final(*(void *)(a1 + 8), a2, a3);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::NumArcs(uint64_t a1, int a2)
{
  return fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::NumArcs(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::NumInputEpsilons(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::NumOutputEpsilons(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = fst::TestProperties<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    uint64_t v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return v7();
  }
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::Type(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

void fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Copy()
{
}

void sub_1B22DACD0(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

void fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::InitStateIterator()
{
}

void sub_1B22DADC4(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C408BA93049);
  _Unwind_Resume(a1);
}

uint64_t fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::InitArcIterator(uint64_t a1, int a2, void *a3)
{
  return fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::InitArcIterator(*(void *)(a1 + 8), a2, a3);
}

void fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::FactorWeightFstImpl(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1B22DB00C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  int v21 = v19;
  uint64_t v22 = (uint64_t)(v19 - 5);
  uint64_t v23 = *v21;
  if (*v21)
  {
    v18[30] = v23;
    operator delete(v23);
  }
  std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>>>::~__hash_table(v22);
  std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::~CacheBaseImpl(v18);
  _Unwind_Resume(a1);
}

void fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::~FactorWeightFstImpl(uint64_t a1)
{
  fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::~FactorWeightFstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 136) + 64))(*(void *)(a1 + 136), 4, 0))
  {
    *(void *)(a1 + 8) |= 4uLL;
  }
  return *(void *)(a1 + 8) & a2;
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::~FactorWeightFstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A3EDB0;
  uint64_t v2 = *(void *)(a1 + 136);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  int v3 = *(void **)(a1 + 232);
  if (v3)
  {
    *(void *)(a1 + 240) = v3;
    operator delete(v3);
  }
  std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>>>::~__hash_table(a1 + 192);
  unint64_t v5 = (void **)(a1 + 168);
  std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element>>::__destroy_vector::operator()[abi:ne180100](&v5);
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::~CacheBaseImpl((void *)a1);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Start(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 60)) {
    return *(unsigned int *)(a1 + 64);
  }
  if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 4))
  {
    *(unsigned char *)(a1 + 60) = 1;
    return *(unsigned int *)(a1 + 64);
  }
  if (*(unsigned char *)(a1 + 60)) {
    return *(unsigned int *)(a1 + 64);
  }
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 24))(*(void *)(a1 + 136));
  if (result != -1)
  {
    int v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 24))(*(void *)(a1 + 136));
    uint64_t v4 = (int *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::One();
    int v6 = *v4;
    std::list<int>::list(v7, (uint64_t)(v4 + 2));
    int v8 = v4[8];
    v9[0] = v3;
    v9[2] = v6;
    std::list<int>::list(v10, (uint64_t)v7);
    int v11 = v8;
    int State = fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::FindState(a1, v9);
    std::__list_imp<char *>::clear(v10);
    std::__list_imp<char *>::clear(v7);
    *(_DWORD *)(a1 + 64) = State;
    *(unsigned char *)(a1 + 60) = 1;
    if (*(_DWORD *)(a1 + 68) <= State) {
      *(_DWORD *)(a1 + 68) = State + 1;
    }
    return *(unsigned int *)(a1 + 64);
  }
  return result;
}

void sub_1B22DB374(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::FindState(uint64_t a1, int *a2)
{
  if ((*(unsigned char *)(a1 + 148) & 2) != 0) {
    goto LABEL_27;
  }
  uint64_t v4 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::One();
  int v5 = a2[2];
  uint64_t v6 = v5 ? *((void *)a2 + 4) + 1 : 0;
  uint64_t v7 = *(_DWORD *)v4 ? *(void *)(v4 + 24) + 1 : 0;
  if (v6 != v7) {
    goto LABEL_27;
  }
  char v8 = 0;
  uint64_t v9 = (uint64_t *)(a2 + 6);
  uint64_t v10 = (uint64_t *)(v4 + 16);
  BOOL v11 = v5 && v5 == *(_DWORD *)v4;
  BOOL v12 = !v11;
  int v13 = !v12;
  while (1)
  {
    uint64_t v14 = *v9;
    uint64_t v15 = *v10;
    if ((v8 & 1) == 0 && !v13) {
      break;
    }
    if ((int *)v14 == a2 + 4) {
      goto LABEL_22;
    }
    if (*(_DWORD *)(v14 + 16) != *(_DWORD *)(v15 + 16)) {
      goto LABEL_27;
    }
    uint64_t v9 = (uint64_t *)(v14 + 8);
    uint64_t v10 = (uint64_t *)(v15 + 8);
    char v8 = 1;
  }
  if (v5) {
    goto LABEL_27;
  }
LABEL_22:
  v40[0] = 0;
  v40[0] = a2[10];
  float v44 = 0.0;
  float v44 = *(float *)(v4 + 32);
  int v16 = *a2;
  if (*(float *)v40 != v44 || v16 == -1)
  {
LABEL_27:
    uint64_t v18 = std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>>>::find<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element>((void *)(a1 + 192), a2);
    if (v18)
    {
      return *((unsigned int *)v18 + 16);
    }
    else
    {
      unint64_t v21 = *(void *)(a1 + 176);
      BOOL v20 = (uint64_t *)(a1 + 168);
      uint64_t v19 = -1431655765 * ((v21 - *(void *)(a1 + 168)) >> 4);
      if (v21 >= *(void *)(a1 + 184))
      {
        uint64_t v22 = std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element>>::__push_back_slow_path<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element const&>(v20, a2);
      }
      else
      {
        std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element>>::__construct_one_at_end[abi:ne180100]<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element const&>((uint64_t)v20, a2);
        uint64_t v22 = v21 + 48;
      }
      *(void *)(a1 + 176) = v22;
      int v23 = a2[2];
      v40[0] = *a2;
      v40[2] = v23;
      std::list<int>::list(v41, (uint64_t)(a2 + 4));
      int v42 = a2[10];
      int v43 = v19;
      std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>>>::__emplace_unique_key_args<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::pair<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element const,int>>(a1 + 192, v40, v40);
      std::__list_imp<char *>::clear(v41);
    }
  }
  else
  {
    uint64_t v25 = v16;
    int v26 = *(char **)(a1 + 232);
    int v27 = *(char **)(a1 + 240);
    unint64_t v28 = (v27 - v26) >> 2;
    if (v28 <= v16)
    {
      BOOL v29 = (void *)(a1 + 248);
      do
      {
        if ((unint64_t)v27 >= *v29)
        {
          unint64_t v31 = v28 + 1;
          if ((v28 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v32 = *v29 - (void)v26;
          if (v32 >> 1 > v31) {
            unint64_t v31 = v32 >> 1;
          }
          if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v33 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v33 = v31;
          }
          if (v33)
          {
            BOOL v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 248, v33);
            int v26 = *(char **)(a1 + 232);
            int v27 = *(char **)(a1 + 240);
          }
          else
          {
            BOOL v34 = 0;
          }
          unsigned int v35 = &v34[4 * v28];
          *(_DWORD *)unsigned int v35 = -1;
          unsigned int v30 = v35 + 4;
          while (v27 != v26)
          {
            int v36 = *((_DWORD *)v27 - 1);
            v27 -= 4;
            *((_DWORD *)v35 - 1) = v36;
            v35 -= 4;
          }
          *(void *)(a1 + 232) = v35;
          *(void *)(a1 + 240) = v30;
          *(void *)(a1 + 248) = &v34[4 * v33];
          if (v26)
          {
            operator delete(v26);
            int v26 = *(char **)(a1 + 232);
          }
          else
          {
            int v26 = v35;
          }
        }
        else
        {
          *(_DWORD *)int v27 = -1;
          unsigned int v30 = v27 + 4;
        }
        *(void *)(a1 + 240) = v30;
        unint64_t v28 = (v30 - v26) >> 2;
        int v16 = *a2;
        int v27 = v30;
      }
      while (v28 <= *a2);
      uint64_t v25 = v16;
    }
    if (*(_DWORD *)&v26[4 * v25] == -1)
    {
      unint64_t v37 = *(void *)(a1 + 176);
      *(_DWORD *)&v26[4 * v25] = -1431655765 * ((v37 - *(void *)(a1 + 168)) >> 4);
      uint64_t v38 = (uint64_t *)(a1 + 168);
      if (v37 >= *(void *)(a1 + 184))
      {
        uint64_t v39 = std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element>>::__push_back_slow_path<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element const&>(v38, a2);
      }
      else
      {
        std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element>>::__construct_one_at_end[abi:ne180100]<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element const&>((uint64_t)v38, a2);
        uint64_t v39 = v37 + 48;
      }
      *(void *)(a1 + 176) = v39;
      int v16 = *a2;
      int v26 = *(char **)(a1 + 232);
    }
    return *(unsigned int *)&v26[4 * v16];
  }
  return v19;
}

void sub_1B22DB69C(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void *std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element>>::__construct_one_at_end[abi:ne180100]<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element const&>(uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *(_DWORD *)uint64_t v4 = *a2;
  *(_DWORD *)(v4 + 8) = a2[2];
  uint64_t result = std::list<int>::list((void *)(v4 + 16), (uint64_t)(a2 + 4));
  *(_DWORD *)(v4 + 40) = a2[10];
  *(void *)(a1 + 8) = v4 + 48;
  return result;
}

void sub_1B22DB70C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element>>::__push_back_slow_path<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element const&>(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v9 = 0x555555555555555;
  }
  else {
    unint64_t v9 = v5;
  }
  unint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  BOOL v11 = (char *)&v10[12 * v4];
  v14[0] = v10;
  v14[1] = v11;
  uint64_t v15 = v11;
  int v16 = (char *)&v10[12 * v9];
  *(_DWORD *)BOOL v11 = *a2;
  *((_DWORD *)v11 + 2) = a2[2];
  std::list<int>::list((void *)v11 + 2, (uint64_t)(a2 + 4));
  v10[12 * v4 + 10] = a2[10];
  v15 += 48;
  std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element> &>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1B22DB82C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element*>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element*>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element*>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element*>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = a7 + v11;
      *(_DWORD *)(v12 - 48) = *(_DWORD *)(a3 + v11 - 48);
      *(_DWORD *)(v12 - 40) = *(_DWORD *)(a3 + v11 - 40);
      std::list<int>::list((void *)(a7 + v11 - 32), a3 + v11 - 32);
      *(_DWORD *)(v12 - 8) = *(_DWORD *)(a3 + v11 - 8);
      v11 -= 48;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_1B22DB950(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 + 16;
    do
    {
      std::__list_imp<char *>::clear((void *)(v4 + v2));
      v2 += 48;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void *fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasFinal(a1, a2) & 1) == 0)
  {
    uint64_t v6 = (int *)(*(void *)(a1 + 168) + 48 * a2);
    int v8 = *v6;
    uint64_t v7 = v6 + 2;
    if (v8 == -1)
    {
      int v28 = *v7;
      std::list<int>::list(v29, (uint64_t)(v7 + 2));
      float v30 = *((float *)v7 + 8);
    }
    else
    {
      (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 136) + 32))(&v24);
      fst::Times<int,(fst::StringType)0>(v7, (uint64_t)&v24, (uint64_t)&v31);
      float v9 = *((float *)v7 + 8);
      float v10 = NAN;
      if (v9 != -INFINITY)
      {
        float v10 = NAN;
        if (v26 != -INFINITY)
        {
          float v10 = INFINITY;
          BOOL v11 = v26 == INFINITY || v9 == INFINITY;
          float v12 = v9 + v26;
          if (!v11) {
            float v10 = v12;
          }
        }
      }
      fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v28, &v31, v10);
      std::__list_imp<char *>::clear(v32);
      std::__list_imp<char *>::clear(v25);
    }
    LODWORD(v++*(void *)(result + 24) = v28;
    std::list<int>::list(v25, (uint64_t)v29);
    float v26 = v30;
    if (v28) {
      BOOL v13 = (unint64_t)(v29[2] + 1) >= 2;
    }
    else {
      BOOL v13 = 0;
    }
    int v14 = !v13;
    char v27 = v14;
    if ((*(unsigned char *)(a1 + 148) & 1) == 0 || v14)
    {
      int v21 = v28;
      int v16 = v22;
      std::list<int>::list(v22, (uint64_t)v29);
      float v23 = v30;
      fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::SetFinal(a1, a2, &v21);
    }
    else
    {
      uint64_t v15 = (int *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Zero();
      int v18 = *v15;
      int v16 = v19;
      std::list<int>::list(v19, (uint64_t)(v15 + 2));
      int v20 = v15[8];
      fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::SetFinal(a1, a2, &v18);
    }
    std::__list_imp<char *>::clear(v16);
    std::__list_imp<char *>::clear(v25);
    std::__list_imp<char *>::clear(v29);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Final(a1, a2, a3);
}

void sub_1B22DBBA4(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v3);
  std::__list_imp<char *>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::NumArcs(uint64_t a1, int a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Expand(a1, a2); {
  uint64_t v4 = *(void *)(a1 + 120);
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * (a2 + 1);
  }
  return 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(*(void *)v5 + 64) - *(void *)(*(void *)v5 + 56)) >> 3);
}

void *fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Expand(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 168) + 48 * a2;
  int v82 = *(_DWORD *)v3;
  int v83 = *(_DWORD *)(v3 + 8);
  std::list<int>::list(v84, v3 + 16);
  float v85 = *(float *)(v3 + 40);
  if (v82 == -1) {
    goto LABEL_33;
  }
  uint64_t v4 = *(void *)(a1 + 136);
  unint64_t v81 = 0;
  (*(void (**)(uint64_t))(*(void *)v4 + 136))(v4);
  uint64_t v5 = &v66;
  while (1)
  {
    if (!v78)
    {
      if (v81 >= v79[1]) {
        goto LABEL_31;
      }
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v78 + 24))(v78)) {
      break;
    }
    if (v78)
    {
      uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v78 + 32))(v78);
      goto LABEL_9;
    }
LABEL_8:
    uint64_t v6 = v79[0] + 56 * v81;
LABEL_9:
    fst::Times<int,(fst::StringType)0>(&v83, v6 + 8, (uint64_t)&v59);
    float v7 = NAN;
    if (v85 != -INFINITY)
    {
      float v8 = *(float *)(v6 + 40);
      float v7 = NAN;
      if (v8 != -INFINITY)
      {
        float v7 = INFINITY;
        if (v8 != INFINITY && v85 != INFINITY) {
          float v7 = v85 + v8;
        }
      }
    }
    fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v75, (int *)&v59, v7);
    std::__list_imp<char *>::clear(&v60);
    float v71 = *(float *)&v75;
    std::list<int>::list(v72, (uint64_t)v76);
    int v73 = v77;
    int v11 = *(float *)&v75 == 0.0 || (unint64_t)(v76[2] + 1) < 2;
    char v74 = v11;
    if ((*(unsigned char *)(a1 + 148) & 2) == 0 || v11)
    {
      int v16 = v5;
      int v17 = *(_DWORD *)(v6 + 48);
      int v18 = (int *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::One();
      int v68 = *v18;
      std::list<int>::list(v69, (uint64_t)(v18 + 2));
      int v70 = v18[8];
      LODWORD(v59) = v17;
      LODWORD(v60) = v68;
      std::list<int>::list(v61, (uint64_t)v69);
      int v63 = v70;
      LODWORD(v18) = fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::FindState(a1, (int *)&v59);
      uint64_t v5 = v16;
      std::__list_imp<char *>::clear(v61);
      std::__list_imp<char *>::clear(v69);
      uint64_t v19 = *(void *)v6;
      int v65 = v75;
      std::list<int>::list(v16, (uint64_t)v76);
      int v67 = v77;
      uint64_t v59 = v19;
      LODWORD(v60) = v65;
      std::list<int>::list(v61, (uint64_t)v16);
      int v63 = v67;
      LODWORD(v64[0]) = v18;
      Mutableint State = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
      fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::PushArc(MutableState, (uint64_t)&v59);
      std::__list_imp<char *>::clear(v61);
      std::__list_imp<char *>::clear(v16);
    }
    else
    {
      fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Value((int *)&v71, (uint64_t)&v59);
      int v12 = *(_DWORD *)(v6 + 48);
      fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Quantize((float *)&v63, (uint64_t)&v56, *(float *)(a1 + 144));
      LODWORD(v51) = v12;
      LODWORD(v52) = v56;
      std::list<int>::list(v53, (uint64_t)v57);
      float v54 = v58;
      int State = fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::FindState(a1, (int *)&v51);
      std::__list_imp<char *>::clear(v53);
      std::__list_imp<char *>::clear(v57);
      uint64_t v14 = *(void *)v6;
      int v48 = v59;
      std::list<int>::list(v49, (uint64_t)&v60);
      float v50 = v62;
      uint64_t v51 = v14;
      LODWORD(v52) = v48;
      std::list<int>::list(v53, (uint64_t)v49);
      float v54 = v50;
      int v55 = State;
      uint64_t v15 = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
      fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::PushArc(v15, (uint64_t)&v51);
      std::__list_imp<char *>::clear(v53);
      std::__list_imp<char *>::clear(v49);
      std::__list_imp<char *>::clear(v64);
      std::__list_imp<char *>::clear(&v60);
      char v74 = 1;
    }
    std::__list_imp<char *>::clear(v72);
    std::__list_imp<char *>::clear(v76);
    if (v78) {
      (*(void (**)(uint64_t))(*(void *)v78 + 40))(v78);
    }
    else {
      ++v81;
    }
  }
  if (v78)
  {
    (*(void (**)(uint64_t))(*(void *)v78 + 8))(v78);
    goto LABEL_33;
  }
LABEL_31:
  if (v80) {
    --*v80;
  }
LABEL_33:
  if (*(unsigned char *)(a1 + 148))
  {
    if (v82 == -1) {
      goto LABEL_65;
    }
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 136) + 32))(&v59);
    uint64_t v21 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Zero();
    uint64_t v22 = v59 ? v61[1] + 1 : 0;
    uint64_t v23 = *(_DWORD *)v21 ? *(void *)(v21 + 24) + 1 : 0;
    if (v22 == v23)
    {
      char v24 = 0;
      uint64_t v25 = v61[0];
      float v26 = (uint64_t *)(v21 + 16);
      if (v59) {
        BOOL v27 = v59 == *(_DWORD *)v21;
      }
      else {
        BOOL v27 = 0;
      }
      int v28 = !v27;
      int v29 = v28 ^ 1;
      while (1)
      {
        uint64_t v30 = *v26;
        if ((v24 & 1) == 0 && !v29) {
          break;
        }
        if ((uint64_t *)v25 == &v60) {
          goto LABEL_77;
        }
        if (*(_DWORD *)(v25 + 16) != *(_DWORD *)(v30 + 16)) {
          goto LABEL_55;
        }
        uint64_t v25 = *(void *)(v25 + 8);
        float v26 = (uint64_t *)(v30 + 8);
        char v24 = 1;
      }
      if (v59) {
        goto LABEL_55;
      }
LABEL_77:
      *(float *)&uint64_t v51 = v62;
      float v71 = 0.0;
      float v71 = *(float *)(v21 + 32);
      float v39 = v62;
      float v40 = v71;
      std::__list_imp<char *>::clear(&v60);
      if (v39 == v40) {
        goto LABEL_76;
      }
    }
    else
    {
LABEL_55:
      std::__list_imp<char *>::clear(&v60);
    }
    if (v82 == -1)
    {
LABEL_65:
      LODWORD(v78) = v83;
      std::list<int>::list(v79, (uint64_t)v84);
      *(float *)&unint64_t v81 = v85;
    }
    else
    {
      (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 136) + 32))(&v59);
      fst::Times<int,(fst::StringType)0>(&v83, (uint64_t)&v59, (uint64_t)&v51);
      float v31 = NAN;
      if (v85 != -INFINITY)
      {
        float v31 = NAN;
        if (v62 != -INFINITY)
        {
          float v31 = INFINITY;
          if (v62 != INFINITY && v85 != INFINITY) {
            float v31 = v85 + v62;
          }
        }
      }
      fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v78, (int *)&v51, v31);
      std::__list_imp<char *>::clear(&v52);
      std::__list_imp<char *>::clear(&v60);
    }
    uint64_t v33 = *(void *)(a1 + 152);
    float v71 = *(float *)&v78;
    std::list<int>::list(v72, (uint64_t)v79);
    int v73 = v81;
    if (v78) {
      BOOL v34 = (unint64_t)v80 + 1 >= 2;
    }
    else {
      BOOL v34 = 0;
    }
    char v35 = !v34;
    char v74 = v35;
    if (v34)
    {
      fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Value((int *)&v71, (uint64_t)&v59);
      fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Quantize((float *)&v63, (uint64_t)&v45, *(float *)(a1 + 144));
      LODWORD(v51) = -1;
      LODWORD(v52) = v45;
      std::list<int>::list(v53, (uint64_t)v46);
      float v54 = v47;
      int v36 = fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::FindState(a1, (int *)&v51);
      std::__list_imp<char *>::clear(v53);
      std::__list_imp<char *>::clear(v46);
      int v42 = v59;
      std::list<int>::list(v43, (uint64_t)&v60);
      float v44 = v62;
      uint64_t v51 = v33;
      LODWORD(v52) = v42;
      std::list<int>::list(v53, (uint64_t)v43);
      float v54 = v44;
      int v55 = v36;
      unint64_t v37 = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
      fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::PushArc(v37, (uint64_t)&v51);
      std::__list_imp<char *>::clear(v53);
      std::__list_imp<char *>::clear(v43);
      std::__list_imp<char *>::clear(v64);
      std::__list_imp<char *>::clear(&v60);
      char v74 = 1;
    }
    std::__list_imp<char *>::clear(v72);
    std::__list_imp<char *>::clear(v79);
  }
LABEL_76:
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::SetArcs(a1, a2);
  return std::__list_imp<char *>::clear(v84);
}

void sub_1B22DC4BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  std::__list_imp<char *>::clear((void *)(v47 + 8));
  std::__list_imp<char *>::clear(&a47);
  std::__list_imp<char *>::clear(v48);
  _Unwind_Resume(a1);
}

void *fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Value@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  int v35 = *a1;
  std::list<int>::list(v36, (uint64_t)(a1 + 2));
  if (*a1) {
    BOOL v4 = (unint64_t)(*((void *)a1 + 3) + 1) >= 2;
  }
  else {
    BOOL v4 = 0;
  }
  char v5 = !v4;
  char v37 = v5;
  fst::StringFactor<int,(fst::StringType)0>::Value((uint64_t)&v35, (uint64_t)&v22);
  int v30 = v22;
  v31[0] = v31;
  v31[1] = v31;
  uint64_t v32 = 0;
  uint64_t v6 = v25;
  if (v25)
  {
    uint64_t v8 = v23;
    float v7 = v24;
    uint64_t v9 = *v24;
    *(void *)(v9 + 8) = *(void *)(v23 + 8);
    **(void **)(v8 + 8) = v9;
    uint64_t v10 = v31[0];
    *(void *)(v31[0] + 8) = v7;
    *float v7 = v10;
    v31[0] = v8;
    *(void *)(v8 + 8) = v31;
    uint64_t v32 = v6;
    uint64_t v25 = 0;
  }
  fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v33, &v30, *((float *)a1 + 8));
  std::__list_imp<char *>::clear(v31);
  std::__list_imp<char *>::clear(&v27);
  std::__list_imp<char *>::clear(&v23);
  fst::StringFactor<int,(fst::StringType)0>::Value((uint64_t)&v35, (uint64_t)&v22);
  int v17 = v26;
  v18[0] = v18;
  v18[1] = v18;
  uint64_t v19 = 0;
  uint64_t v11 = v29;
  if (v29)
  {
    uint64_t v13 = v27;
    int v12 = v28;
    uint64_t v14 = *v28;
    *(void *)(v14 + 8) = *(void *)(v27 + 8);
    **(void **)(v13 + 8) = v14;
    uint64_t v15 = v18[0];
    *(void *)(v18[0] + 8) = v12;
    *int v12 = v15;
    v18[0] = v13;
    *(void *)(v13 + 8) = v18;
    uint64_t v19 = v11;
    uint64_t v29 = 0;
  }
  fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v20, &v17, 0.0);
  std::__list_imp<char *>::clear(v18);
  std::__list_imp<char *>::clear(&v27);
  std::__list_imp<char *>::clear(&v23);
  std::pair<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>,fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::pair[abi:ne180100]<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>&,fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>&,0>(a2, &v33, &v20);
  std::__list_imp<char *>::clear(v21);
  std::__list_imp<char *>::clear(v34);
  return std::__list_imp<char *>::clear(v36);
}

void sub_1B22DC880(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear((void *)(v2 + 8));
  std::__list_imp<char *>::clear((void *)(v3 - 120));
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void *fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Quantize@<X0>(float *a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  fst::ProductWeight<fst::StringWeight<int,(fst::StringType)0>,fst::LogWeightTpl<float>>::Quantize(a1, (uint64_t)&v5, a3);
  *(_DWORD *)a2 = v5;
  std::list<int>::list((void *)(a2 + 8), (uint64_t)v6);
  *(_DWORD *)(a2 + 32) = v7;
  return std::__list_imp<char *>::clear(v6);
}

void sub_1B22DC954(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t std::pair<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>,fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::pair[abi:ne180100]<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>&,fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>&,0>(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *(_DWORD *)a1 = *a2;
  std::list<int>::list((void *)(a1 + 8), (uint64_t)(a2 + 2));
  *(_DWORD *)(a1 + 32) = a2[8];
  *(_DWORD *)(a1 + 40) = *a3;
  std::list<int>::list((void *)(a1 + 48), (uint64_t)(a3 + 2));
  *(_DWORD *)(a1 + 72) = a3[8];
  return a1;
}

void sub_1B22DC9D4(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void *fst::ProductWeight<fst::StringWeight<int,(fst::StringType)0>,fst::LogWeightTpl<float>>::Quantize@<X0>(float *a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  fst::PairWeight<fst::StringWeight<int,(fst::StringType)0>,fst::LogWeightTpl<float>>::Quantize(a1, (uint64_t)&v5, a3);
  *(_DWORD *)a2 = v5;
  std::list<int>::list((void *)(a2 + 8), (uint64_t)v6);
  *(_DWORD *)(a2 + 32) = v7;
  return std::__list_imp<char *>::clear(v6);
}

void sub_1B22DCA44(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void *fst::PairWeight<fst::StringWeight<int,(fst::StringType)0>,fst::LogWeightTpl<float>>::Quantize@<X0>(float *a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  float v8 = *a1;
  std::list<int>::list(v9, (uint64_t)(a1 + 2));
  float v6 = a1[8];
  if ((LODWORD(v6) & 0x7FFFFFFFu) <= 0x7F7FFFFF) {
    float v6 = floorf((float)(v6 / a3) + 0.5) * a3;
  }
  *(float *)a2 = v8;
  std::list<int>::list((void *)(a2 + 8), (uint64_t)v9);
  *(float *)(a2 + 32) = v6;
  return std::__list_imp<char *>::clear(v9);
}

void sub_1B22DCB00(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::NumInputEpsilons(uint64_t a1, int a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Expand(a1, a2); {
  uint64_t v4 = *(void *)(a1 + 120);
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * (a2 + 1);
  }
  return *(void *)(*(void *)v5 + 40);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Expand(a1, a2); {
  uint64_t v4 = *(void *)(a1 + 120);
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * (a2 + 1);
  }
  return *(void *)(*(void *)v5 + 48);
}

void *fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::ImplToFst(void *result, uint64_t a2, int a3)
{
  *uint64_t result = &unk_1F0A440E8;
  if (a3) {
    operator new();
  }
  uint64_t v3 = *(void *)(a2 + 8);
  result[1] = v3;
  ++*(_DWORD *)(v3 + 56);
  return result;
}

void sub_1B22DCC6C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C40B21EFC33);
  _Unwind_Resume(a1);
}

void fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::FactorWeightFstImpl(uint64_t a1, uint64_t a2)
{
}

void sub_1B22DCDF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  uint64_t v19 = *v17;
  if (*v17)
  {
    v15[30] = v19;
    operator delete(v19);
  }
  std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>>>::~__hash_table((uint64_t)v16 + 24);
  std::string __p = v16;
  std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::~CacheBaseImpl(v15);
  _Unwind_Resume(a1);
}

void fst::StateIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>>::~StateIterator()
{
}

uint64_t fst::CacheStateIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t fst::CacheStateIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>>::Next_(uint64_t result)
{
  return result;
}

uint64_t fst::CacheStateIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>>::Reset_(uint64_t result)
{
  *(_DWORD *)(result + ++*(_DWORD *)(result + 24) = 0;
  return result;
}

void fst::CacheStateIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>>::~CacheStateIterator()
{
}

uint64_t fst::CacheStateIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>>::Done(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v2 < *(_DWORD *)(v3 + 68)) {
    return 0;
  }
  int v5 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v3);
  if (v5 >= *(_DWORD *)(*(void *)(a1 + 16) + 68)) {
    return 1;
  }
  int v6 = v5;
  do
  {
    fst::ArcIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>>::ArcIterator(&v19, *(void *)(a1 + 8), v6);
    unint64_t v7 = v20;
    uint64_t v8 = *((void *)v19 + 7);
    unint64_t v9 = 0x6DB6DB6DB6DB6DB7 * ((*((void *)v19 + 8) - v8) >> 3);
    uint64_t v10 = *(void *)(a1 + 16);
    if (v20 < v9)
    {
      int v11 = *(_DWORD *)(v10 + 68);
      int v12 = (int *)(v8 + 56 * v20 + 48);
      do
      {
        int v14 = *v12;
        v12 += 14;
        int v13 = v14;
        if (v11 <= v14)
        {
          int v11 = v13 + 1;
          *(_DWORD *)(v10 + 68) = v13 + 1;
        }
        ++v7;
      }
      while (v9 != v7);
      unint64_t v20 = v9;
    }
    fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetExpandedState(v10, v6);
    int v15 = *(_DWORD *)(a1 + 24);
    uint64_t v16 = *(void *)(a1 + 16);
    int v17 = *(_DWORD *)(v16 + 68);
    --*((_DWORD *)v19 + 21);
    BOOL v4 = v15 >= v17;
    if (v15 < v17) {
      break;
    }
    int v6 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v16);
  }
  while (v6 < *(_DWORD *)(*(void *)(a1 + 16) + 68));
  return v4;
}

void sub_1B22DCFE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char **fst::ArcIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>>::ArcIterator(char **a1, uint64_t a2, int a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  a1[1] = 0;
  Mutableint State = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::GetMutableState(*(void *)(v6 + 120), a3);
  *a1 = MutableState;
  ++*((_DWORD *)MutableState + 21);
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(*(void *)(a2 + 8), a3) & 1) == 0)fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Expand(*(void *)(a2 + 8), a3); {
  return a1;
  }
}

void sub_1B22DD068(_Unwind_Exception *a1)
{
  --*(_DWORD *)(*(void *)v1 + 84);
  _Unwind_Resume(a1);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::InitArcIterator(uint64_t a1, int a2, void *a3)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Expand(a1, a2); {
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::InitArcIterator(a1, a2, a3);
  }
}

uint64_t fst::ArcMap<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(uint64_t))(*(void *)a2 + 224))(a2);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 280))(a2, v6);
  (*(void (**)(uint64_t, void))(*(void *)a2 + 288))(a2, 0);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (result == -1)
  {
    if ((v7 & 4) != 0)
    {
      int v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 192);
      return v18(a2, 4, 4);
    }
    return result;
  }
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 1, 0))
  {
    BOOL v9 = fst::CountStates<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>(a1) != -1;
    (*(void (**)(uint64_t, BOOL))(*(void *)a2 + 248))(a2, v9);
  }
  LODWORD(v++*(_DWORD *)(result + 24) = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v22);
  while (!v22)
  {
    if ((int)v24 >= (int)v23) {
      goto LABEL_14;
    }
LABEL_9:
    (*(void (**)(uint64_t))(*(void *)a2 + 200))(a2);
    if (v22) {
      (*(void (**)(uint64_t))(*(void *)v22 + 32))(v22);
    }
    else {
      LODWORD(v++*(_DWORD *)(result + 24) = v24 + 1;
    }
  }
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v22 + 16))(v22)) {
    goto LABEL_9;
  }
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
LABEL_14:
  unsigned int v33 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v31);
  LODWORD(v10) = -1;
  while (2)
  {
    if (!v31)
    {
      if ((int)v33 >= v32) {
        goto LABEL_47;
      }
      goto LABEL_20;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(void *)v31 + 16))(v31))
    {
      if (v31)
      {
        uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v31 + 24))(v31);
        goto LABEL_21;
      }
LABEL_20:
      uint64_t v11 = v33;
LABEL_21:
      if (v11 == (*(unsigned int (**)(uint64_t))(*(void *)a1 + 24))(a1)) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 176))(a2, v11);
      }
      uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 40))(a1, v11);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 256))(a2, v11, v12);
      unint64_t v26 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 136))(a1, v11, &v22);
LABEL_24:
      if (v22)
      {
        if ((*(unsigned int (**)(uint64_t))(*(void *)v22 + 24))(v22))
        {
          if (v22)
          {
            (*(void (**)(void))(*(void *)v22 + 8))();
            goto LABEL_37;
          }
LABEL_35:
          if (v25) {
            --*v25;
          }
LABEL_37:
          (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(&v19, a1, v11);
          uint64_t v22 = 0;
          LODWORD(v23) = v19;
          std::list<int>::list(&v24, (uint64_t)v20);
          int v27 = v21;
          int v28 = -1;
          unint64_t v29 = fst::FromGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>::operator()((int *)a3, (int *)&v22);
          uint64_t v30 = v15;
          std::__list_imp<char *>::clear(&v24);
          std::__list_imp<char *>::clear(v20);
          if (v29)
          {
            if (v10 == -1)
            {
              uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2);
              (*(void (**)(uint64_t, uint64_t, double))(*(void *)a2 + 184))(a2, v10, 0.0);
            }
            HIDWORD(v30) = v10;
            (*(void (**)(uint64_t, uint64_t, unint64_t *))(*(void *)a2 + 208))(a2, v11, &v29);
            (*(void (**)(uint64_t, uint64_t, float))(*(void *)a2 + 184))(a2, v11, INFINITY);
          }
          else
          {
            (*(void (**)(uint64_t, uint64_t, float))(*(void *)a2 + 184))(a2, v11, *(float *)&v30);
          }
          if (v31) {
            (*(void (**)(uint64_t))(*(void *)v31 + 32))(v31);
          }
          else {
            ++v33;
          }
          continue;
        }
        if (v22)
        {
          int v13 = (int *)(*(uint64_t (**)(void))(*(void *)v22 + 32))();
          goto LABEL_30;
        }
      }
      else if (v26 >= v24)
      {
        goto LABEL_35;
      }
      int v13 = (int *)(v23 + 56 * v26);
LABEL_30:
      unint64_t v29 = fst::FromGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>::operator()((int *)a3, v13);
      uint64_t v30 = v14;
      (*(void (**)(uint64_t, uint64_t, unint64_t *))(*(void *)a2 + 208))(a2, v11, &v29);
      if (v22) {
        (*(void (**)(uint64_t))(*(void *)v22 + 40))(v22);
      }
      else {
        ++v26;
      }
      goto LABEL_24;
    }
    break;
  }
  if (v31) {
    (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
  }
LABEL_47:
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  uint64_t v17 = v7 & 0x2EBC21080007;
  if (*(unsigned char *)(a3 + 4)) {
    uint64_t v17 = v7 & 0x2EBC21080003 | 4;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 192))(a2, v17 | v16, 0x3FFFFFFF0007);
}

void sub_1B22DD9B4(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  uint64_t v5 = *(void *)(v3 - 104);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  _Unwind_Resume(a1);
}

unint64_t fst::FromGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>::operator()(int *a1, int *a2)
{
  if (a2[12] != -1) {
    goto LABEL_24;
  }
  uint64_t v4 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Zero();
  int v5 = a2[2];
  uint64_t v6 = v5 ? *((void *)a2 + 4) + 1 : 0;
  uint64_t v7 = *(_DWORD *)v4 ? *(void *)(v4 + 24) + 1 : 0;
  if (v6 != v7) {
    goto LABEL_24;
  }
  char v8 = 0;
  BOOL v9 = (uint64_t *)(a2 + 6);
  uint64_t v10 = (uint64_t *)(v4 + 16);
  BOOL v11 = v5 && v5 == *(_DWORD *)v4;
  BOOL v12 = !v11;
  int v13 = !v12;
  while (1)
  {
    uint64_t v14 = *v9;
    uint64_t v15 = *v10;
    if ((v8 & 1) == 0 && !v13) {
      break;
    }
    if ((int *)v14 == a2 + 4) {
      goto LABEL_22;
    }
    if (*(_DWORD *)(v14 + 16) != *(_DWORD *)(v15 + 16)) {
      goto LABEL_24;
    }
    BOOL v9 = (uint64_t *)(v14 + 8);
    uint64_t v10 = (uint64_t *)(v15 + 8);
    char v8 = 1;
  }
  if (v5) {
    goto LABEL_24;
  }
LABEL_22:
  LODWORD(__p[0]) = 0;
  LODWORD(__p[0]) = a2[10];
  v29[0] = 0.0;
  v29[0] = *(float *)(v4 + 32);
  if (*(float *)__p == v29[0])
  {
    unint64_t v16 = 0;
    unsigned int v17 = *a2;
  }
  else
  {
LABEL_24:
    unsigned int v28 = -1;
    if (!fst::FromGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>::Extract<(fst::GallicType)1>((unsigned int *)a2 + 2, &v27, &v28)|| (unsigned int v17 = *a2, *a2 != a2[1]))
    {
      if (FLAGS_fst_error_fatal) {
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      }
      else {
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      }
      int v18 = fst::LogMessage::LogMessage((fst *)&v26, (uint64_t)__p);
      uint64_t v19 = (void *)fst::cerr(v18);
      unint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"FromGallicMapper: unrepresentable weight: ", 42);
      fst::CompositeWeightWriter::CompositeWeightWriter((uint64_t)v29, v20);
      if (*FLAGS_fst_weight_parentheses)
      {
        char v30 = *FLAGS_fst_weight_parentheses;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)v29, (uint64_t)&v30, 1);
      }
      fst::CompositeWeightWriter::WriteElement<fst::StringWeight<int,(fst::StringType)1>>((uint64_t)v29, a2 + 2);
      fst::CompositeWeightWriter::WriteElement<fst::LogWeightTpl<float>>((uint64_t)v29, (float *)a2 + 10);
      if (*FLAGS_fst_weight_parentheses)
      {
        char v30 = *(unsigned char *)(FLAGS_fst_weight_parentheses + 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)v29, (uint64_t)&v30, 1);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" for arc with ilabel = ", 23);
      int v21 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)", olabel = ", 11);
      uint64_t v22 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)", nextstate = ", 14);
      std::ostream::operator<<();
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v26);
      if (v25 < 0) {
        operator delete(__p[0]);
      }
      *((unsigned char *)a1 + 4) = 1;
      unsigned int v17 = *a2;
    }
    if (!v17 && v28 && a2[12] == -1) {
      unsigned int v17 = *a1;
    }
    unint64_t v16 = (unint64_t)v28 << 32;
  }
  return v16 | v17;
}

void sub_1B22DDD34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::~ImplToFst(void *a1)
{
  *a1 = &unk_1F0A440E8;
  int v2 = (_DWORD *)a1[1];
  if (v2)
  {
    int v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

void *fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::~ImplToFst(void *a1)
{
  *a1 = &unk_1F0A43120;
  int v2 = (_DWORD *)a1[1];
  if (v2)
  {
    int v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

void *std::__hash_table<std::__hash_value_type<std::pair<int,std::vector<int>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> *>,std::__unordered_map_hasher<std::pair<int,std::vector<int>>,std::__hash_value_type<std::pair<int,std::vector<int>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> *>,kaldi::HmmCacheHash,std::equal_to<std::pair<int,std::vector<int>>>,true>,std::__unordered_map_equal<std::pair<int,std::vector<int>>,std::__hash_value_type<std::pair<int,std::vector<int>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> *>,std::equal_to<std::pair<int,std::vector<int>>>,kaldi::HmmCacheHash,true>,std::allocator<std::__hash_value_type<std::pair<int,std::vector<int>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> *>>>::__emplace_unique_key_args<std::pair<int,std::vector<int>>,std::piecewise_construct_t const&,std::tuple<std::pair<int,std::vector<int>> const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v7 = *(int **)(a2 + 8);
  char v8 = *(int **)(a2 + 16);
  if (v7 == v8)
  {
    int v9 = 0;
  }
  else
  {
    int v9 = 0;
    do
    {
      int v10 = *v7++;
      int v9 = v10 + 7853 * v9;
    }
    while (v7 != v8);
  }
  int v11 = v9 + 103049 * *(_DWORD *)a2;
  unint64_t v12 = v11;
  unint64_t v13 = *(void *)(a1 + 8);
  if (!v13) {
    goto LABEL_25;
  }
  uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
  v14.i16[0] = vaddlv_u8(v14);
  unint64_t v15 = v14.u32[0];
  if (v14.u32[0] > 1uLL)
  {
    unint64_t v4 = v11;
    if (v13 <= v11) {
      unint64_t v4 = v11 % v13;
    }
  }
  else
  {
    unint64_t v4 = (v13 - 1) & v11;
  }
  unint64_t v16 = *(void **)(*(void *)a1 + 8 * v4);
  if (!v16) {
    goto LABEL_25;
  }
  unsigned int v17 = (void *)*v16;
  if (!*v16) {
    goto LABEL_25;
  }
  unsigned int v28 = a4;
  do
  {
    unint64_t v18 = v17[1];
    if (v18 == v12)
    {
      if (std::equal_to<std::pair<int,std::vector<int>>>::operator()[abi:ne180100](a1 + 32, (uint64_t)(v17 + 2), a2)) {
        return v17;
      }
      goto LABEL_23;
    }
    if (v15 > 1)
    {
      if (v18 >= v13) {
        v18 %= v13;
      }
    }
    else
    {
      v18 &= v13 - 1;
    }
    if (v18 != v4) {
      break;
    }
LABEL_23:
    unsigned int v17 = (void *)*v17;
  }
  while (v17);
  a4 = v28;
LABEL_25:
  std::__hash_table<std::__hash_value_type<std::pair<int,std::vector<int>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> *>,std::__unordered_map_hasher<std::pair<int,std::vector<int>>,std::__hash_value_type<std::pair<int,std::vector<int>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> *>,kaldi::HmmCacheHash,std::equal_to<std::pair<int,std::vector<int>>>,true>,std::__unordered_map_equal<std::pair<int,std::vector<int>>,std::__hash_value_type<std::pair<int,std::vector<int>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> *>,std::equal_to<std::pair<int,std::vector<int>>>,kaldi::HmmCacheHash,true>,std::allocator<std::__hash_value_type<std::pair<int,std::vector<int>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> *>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::pair<int,std::vector<int>> const&>,std::tuple<>>(a1, v12, a4, (uint64_t)&v29);
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v13 || (float)(v20 * (float)v13) < v19)
  {
    BOOL v21 = 1;
    if (v13 >= 3) {
      BOOL v21 = (v13 & (v13 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v13);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v24);
    unint64_t v13 = *(void *)(a1 + 8);
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v13 <= v12) {
        unint64_t v4 = v12 % v13;
      }
      else {
        unint64_t v4 = v12;
      }
    }
    else
    {
      unint64_t v4 = (v13 - 1) & v12;
    }
  }
  char v25 = *(void **)(*(void *)a1 + 8 * v4);
  if (v25)
  {
    void *v29 = *v25;
    *char v25 = v29;
  }
  else
  {
    void *v29 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v29;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*v29)
    {
      unint64_t v26 = *(void *)(*v29 + 8);
      if ((v13 & (v13 - 1)) != 0)
      {
        if (v26 >= v13) {
          v26 %= v13;
        }
      }
      else
      {
        v26 &= v13 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v26) = v29;
    }
  }
  unsigned int v17 = v29;
  ++*(void *)(a1 + 24);
  return v17;
}

void sub_1B22DE0F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__hash_table<std::__hash_value_type<std::pair<int,std::vector<int>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> *>,std::__unordered_map_hasher<std::pair<int,std::vector<int>>,std::__hash_value_type<std::pair<int,std::vector<int>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> *>,kaldi::HmmCacheHash,std::equal_to<std::pair<int,std::vector<int>>>,true>,std::__unordered_map_equal<std::pair<int,std::vector<int>>,std::__hash_value_type<std::pair<int,std::vector<int>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> *>,std::equal_to<std::pair<int,std::vector<int>>>,kaldi::HmmCacheHash,true>,std::allocator<std::__hash_value_type<std::pair<int,std::vector<int>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> *>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::pair<int,std::vector<int>> const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  char v8 = operator new(0x38uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *char v8 = 0;
  v8[1] = a2;
  int v9 = *a3;
  *((_DWORD *)v8 + 4) = **a3;
  v8[4] = 0;
  void v8[5] = 0;
  void v8[3] = 0;
  uint64_t result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v8 + 3, *((const void **)v9 + 1), *((void *)v9 + 2), (uint64_t)(*((void *)v9 + 2) - *((void *)v9 + 1)) >> 2);
  v8[6] = 0;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1B22DE1A0(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void *std::vector<fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*,std::allocator<fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*>>::vector(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v6 = (void *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1B22DE224(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::__hash_table<std::__hash_value_type<fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::__unordered_map_hasher<fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*,std::__hash_value_type<fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::hash<fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*>,std::equal_to<fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*>,true>,std::__unordered_map_equal<fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*,std::__hash_value_type<fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::equal_to<fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*>,std::hash<fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*>,true>,std::allocator<std::__hash_value_type<fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::__emplace_unique_key_args<fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*,std::piecewise_construct_t const&,std::tuple<fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const* const&>,std::tuple<>>(uint64_t a1, void *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  unint64_t v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = v9 & (v10 - 1);
    }
    unint64_t v12 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = (void *)*i)
      {
        unint64_t v14 = i[1];
        if (v14 == v9)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
          }
          else
          {
            v14 &= v10 - 1;
          }
          if (v14 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x28uLL);
  *uint64_t i = 0;
  i[1] = v9;
  i[2] = **a4;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    BOOL v17 = 1;
    if (v10 >= 3) {
      BOOL v17 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v10);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v20);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v21 = *(void *)a1;
  unint64_t v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *uint64_t i = *v22;
LABEL_38:
    void *v22 = i;
    goto LABEL_39;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v21 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v23 = *(void *)(*i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10) {
        v23 %= v10;
      }
    }
    else
    {
      v23 &= v10 - 1;
    }
    unint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1B22DE484(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const**,false>(uint64_t result, unint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v10 = (unint64_t *)result;
LABEL_2:
  uint8x8_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    unint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = a2 - v11;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          unint64_t v22 = *(a2 - 1);
          unint64_t v23 = *v11;
          if (v22 < *v11)
          {
            *uint8x8_t v11 = v22;
            *(a2 - 1) = v23;
          }
          break;
        case 3uLL:
          uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(v11, v11 + 1, a2 - 1);
          break;
        case 4uLL:
          uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(v11, v11 + 1, v11 + 2, a2 - 1);
          break;
        case 5uLL:
          uint64_t result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(v11, v11 + 1, v11 + 2, v11 + 3, a2 - 1);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 191) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**,fst::LatticeStringRepository<int>::Entry const**>(v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    BOOL v17 = &v11[v15 >> 1];
    if ((unint64_t)v14 >= 0x401)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(v11, &v11[v15 >> 1], a2 - 1);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(v11 + 1, v17 - 1, a2 - 2);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(v11 + 2, &v11[v16 + 1], a2 - 3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(v17 - 1, v17, &v11[v16 + 1]);
      unint64_t v18 = *v11;
      *uint8x8_t v11 = *v17;
      *BOOL v17 = v18;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(&v11[v15 >> 1], v11, a2 - 1);
      if (a5) {
        goto LABEL_14;
      }
    }
    if (*(v11 - 1) >= *v11)
    {
      uint64_t result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeStringRepository<int>::Entry const**,std::__less<void,void> &>(v11, (uint64_t *)a2);
      uint8x8_t v11 = (unint64_t *)result;
      goto LABEL_19;
    }
LABEL_14:
    unint64_t v19 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeStringRepository<int>::Entry const**,std::__less<void,void> &>(v11, a2);
    if ((v20 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const**>(v11, v19);
    uint8x8_t v11 = v19 + 1;
    uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const**>(v19 + 1, a2);
    if (result)
    {
      a4 = -v13;
      a2 = v19;
      if (v21) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v21)
    {
LABEL_17:
      uint64_t result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const**,false>(v10, v19, a3, -v13, a5 & 1);
      uint8x8_t v11 = v19 + 1;
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  size_t v24 = v11 + 1;
  BOOL v26 = v11 == a2 || v24 == a2;
  if (a5)
  {
    if (!v26)
    {
      uint64_t v27 = 0;
      unsigned int v28 = v11;
      do
      {
        unint64_t v30 = *v28;
        unint64_t v29 = v28[1];
        unsigned int v28 = v24;
        if (v29 < v30)
        {
          uint64_t v31 = v27;
          while (1)
          {
            *(unint64_t *)((char *)v11 + v31 + 8) = v30;
            if (!v31) {
              break;
            }
            unint64_t v30 = *(unint64_t *)((char *)v11 + v31 - 8);
            v31 -= 8;
            if (v29 >= v30)
            {
              int v32 = (unint64_t *)((char *)v11 + v31 + 8);
              goto LABEL_50;
            }
          }
          int v32 = v11;
LABEL_50:
          unint64_t *v32 = v29;
        }
        size_t v24 = v28 + 1;
        v27 += 8;
      }
      while (v28 + 1 != a2);
    }
  }
  else if (!v26)
  {
    do
    {
      unint64_t v34 = *v10;
      unint64_t v33 = v10[1];
      unint64_t v10 = v24;
      if (v33 < v34)
      {
        do
        {
          unint64_t *v24 = v34;
          unint64_t v34 = *(v24 - 2);
          --v24;
        }
        while (v33 < v34);
        unint64_t *v24 = v33;
      }
      size_t v24 = v10 + 1;
    }
    while (v10 + 1 != a2);
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const**>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v6 = *(a2 - 1);
      unint64_t v7 = *a1;
      if (v6 < *a1)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      unint64_t v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(a1, a1 + 1, a1 + 2);
      unint64_t v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v10 = 0;
      uint64_t v11 = 24;
      break;
  }
  while (1)
  {
    unint64_t v12 = *v9;
    unint64_t v13 = *v8;
    if (*v9 < *v8)
    {
      uint64_t v14 = v11;
      while (1)
      {
        *(unint64_t *)((char *)a1 + v14) = v13;
        uint64_t v15 = v14 - 8;
        if (v14 == 8) {
          break;
        }
        unint64_t v13 = *(unint64_t *)((char *)a1 + v14 - 16);
        v14 -= 8;
        if (v12 >= v13)
        {
          unint64_t v16 = (unint64_t *)((char *)a1 + v15);
          goto LABEL_12;
        }
      }
      unint64_t v16 = a1;
LABEL_12:
      *unint64_t v16 = v12;
      if (++v10 == 8) {
        return v9 + 1 == a2;
      }
    }
    unint64_t v8 = v9;
    v11 += 8;
    if (++v9 == a2) {
      return 1;
    }
  }
}

uint64_t std::__tree<int>::__erase_unique<int>(uint64_t a1, int *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  int v3 = *a2;
  uint64_t v4 = a1 + 8;
  do
  {
    int v5 = *(_DWORD *)(v2 + 28);
    BOOL v6 = v5 < v3;
    if (v5 >= v3) {
      unint64_t v7 = (uint64_t *)v2;
    }
    else {
      unint64_t v7 = (uint64_t *)(v2 + 8);
    }
    if (!v6) {
      uint64_t v4 = v2;
    }
    uint64_t v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(_DWORD *)(v4 + 28)) {
    return 0;
  }
  std::__tree<std::string>::__remove_node_pointer((uint64_t **)a1, (uint64_t *)v4);
  operator delete((void *)v4);
  return 1;
}

void fst::RandGenFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::RandGenFst()
{
}

void sub_1B22DEB1C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40C5740FB1);
  _Unwind_Resume(a1);
}

void fst::RandGenFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~RandGenFst(void *a1)
{
  fst::ImplToFst<fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ImplToFst<fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t fst::ImplToFst<fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Start(uint64_t a1)
{
  return fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Start(*(void *)(a1 + 8));
}

float fst::ImplToFst<fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Final(uint64_t a1, int a2)
{
  return fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Final(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumArcs(uint64_t a1, int a2)
{
  return fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::NumArcs(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::NumInputEpsilons(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::NumOutputEpsilons(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = fst::TestProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    unint64_t v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return v7();
  }
}

uint64_t fst::ImplToFst<fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Type(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

void fst::RandGenFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Copy()
{
}

void sub_1B22DECFC(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToFst<fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

void fst::RandGenFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::InitStateIterator()
{
}

void sub_1B22DEDF0(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C408BA93049);
  _Unwind_Resume(a1);
}

uint64_t fst::RandGenFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::InitArcIterator(uint64_t a1, int a2, void *a3)
{
  return fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::InitArcIterator(*(void *)(a1 + 8), a2, a3);
}

void fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::RandGenFstImpl(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1B22DEFB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  unint64_t v18 = *v16;
  if (*v16)
  {
    v15[21] = v18;
    operator delete(v18);
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v15);
  _Unwind_Resume(a1);
}

void fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~RandGenFstImpl(void *a1)
{
  fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~RandGenFstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 136) + 64))(*(void *)(a1 + 136), 4, 0))
  {
    *(void *)(a1 + 8) |= 4uLL;
  }
  return *(void *)(a1 + 8) & a2;
}

uint64_t fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~RandGenFstImpl(void *a1)
{
  *a1 = &unk_1F0A3BA78;
  uint64_t v3 = a1[20];
  uint64_t v2 = a1[21];
  if (v2 != v3)
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(v3 + 8 * v4);
      if (v5)
      {
        MEMORY[0x1B3EA8670](v5, 0x1060C401AE92110);
        uint64_t v3 = a1[20];
        uint64_t v2 = a1[21];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  uint64_t v6 = a1[17];
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = a1[18];
  if (v7)
  {
    std::__tree<int>::destroy(v7 + 24, *(void **)(v7 + 32));
    MEMORY[0x1B3EA8670](v7, 0x1060C40DCB6D5DELL);
  }
  uint64_t v8 = (void *)a1[20];
  if (v8)
  {
    a1[21] = v8;
    operator delete(v8);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(a1);
}

uint64_t fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Start(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 60)) {
    return *(unsigned int *)(a1 + 64);
  }
  if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 4))
  {
    *(unsigned char *)(a1 + 60) = 1;
    return *(unsigned int *)(a1 + 64);
  }
  if (*(unsigned char *)(a1 + 60)) {
    return *(unsigned int *)(a1 + 64);
  }
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 24))(*(void *)(a1 + 136));
  if (result != -1)
  {
    uint64_t v3 = (*(void *)(a1 + 168) - *(void *)(a1 + 160)) >> 3;
    *(_DWORD *)(a1 + 64) = v3;
    *(unsigned char *)(a1 + 60) = 1;
    if (*(_DWORD *)(a1 + 68) <= (int)v3) {
      *(_DWORD *)(a1 + 68) = v3 + 1;
    }
    operator new();
  }
  return result;
}

float fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Final(uint64_t a1, int a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasFinal(a1, a2) & 1) == 0)fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Expand(a1, a2); {
  uint64_t v4 = *(void *)(a1 + 120);
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * (a2 + 1);
  }
  return **(float **)v5;
}

void fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Expand(uint64_t a1, int a2)
{
  int v4 = *(_DWORD *)(a1 + 188);
  Mutableint State = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
  if (v4 == a2)
  {
    *(_DWORD *)Mutableint State = 0;
    *((_DWORD *)MutableState + 12) |= 9u;
    fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(a1, a2);
    return;
  }
  *(_DWORD *)Mutableint State = 2139095040;
  *((_DWORD *)MutableState + 12) |= 9u;
  uint64_t v6 = *(unsigned int **)(*(void *)(a1 + 160) + 8 * a2);
  fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Sample(*(void **)(a1 + 144), v6);
  uint64_t v7 = *(void *)(a1 + 136);
  uint64_t v8 = *v6;
  unint64_t v34 = 0;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v7 + 136))(v7, v8, v32);
  uint64_t v9 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 136) + 40))(*(void *)(a1 + 136), *v6);
  uint64_t v10 = *(void *)(a1 + 144);
  uint64_t v11 = (void *)(v10 + 32);
  unint64_t v12 = *(void **)(v10 + 48);
  if (v12 != v11)
  {
    unint64_t v13 = v9;
    while (1)
    {
      unint64_t v14 = v12[4];
      unint64_t v15 = v12[5];
      double v16 = (double)v15 / (double)*((unint64_t *)v6 + 1);
      if (v14 < v13) {
        break;
      }
      if (*(unsigned char *)(a1 + 184))
      {
        if (!*(unsigned char *)(a1 + 185)) {
          double v16 = v16 * (double)*(unint64_t *)(a1 + 152);
        }
        unint64_t v18 = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
        float v19 = log(v16);
        *(float *)unint64_t v18 = -v19;
        *((_DWORD *)v18 + 12) |= 9u;
      }
      else
      {
        if (*(_DWORD *)(a1 + 188) == -1)
        {
          *(_DWORD *)(a1 + 188) = (*(void *)(a1 + 168) - *(void *)(a1 + 160)) >> 3;
          operator new();
        }
        for (; v15; --v15)
        {
          int v29 = *(_DWORD *)(a1 + 188);
          *(void *)&long long v31 = 0;
          DWORD2(v31) = 0;
          HIDWORD(v31) = v29;
          unint64_t v30 = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
          fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::PushArc(v30, &v31);
        }
      }
      uint64_t v25 = *(void *)(a1 + 144);
      BOOL v26 = *(void **)(v25 + 48);
      uint64_t v27 = (void *)v26[1];
      if (v27)
      {
        do
        {
          unint64_t v12 = v27;
          uint64_t v27 = (void *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          unint64_t v12 = (void *)v26[2];
          BOOL v28 = *v12 == (void)v26;
          BOOL v26 = v12;
        }
        while (!v28);
      }
      *(void *)(v25 + 48) = v12;
      if (v12 == (void *)(v25 + 32)) {
        goto LABEL_35;
      }
    }
    if (v32[0])
    {
      (*(void (**)(void, unint64_t))(*(void *)v32[0] + 64))(v32[0], v14);
      if (v32[0])
      {
        BOOL v17 = (void *)(*(uint64_t (**)(void))(*(void *)v32[0] + 32))(v32[0]);
        goto LABEL_21;
      }
      unint64_t v20 = v34;
    }
    else
    {
      unint64_t v34 = v12[4];
      unint64_t v20 = v14;
    }
    BOOL v17 = (void *)(v32[1] + 16 * v20);
LABEL_21:
    if (*(unsigned char *)(a1 + 184))
    {
      float v21 = log(v16);
      float v22 = -v21;
    }
    else
    {
      float v22 = 0.0;
    }
    uint64_t v23 = (*(void *)(a1 + 168) - *(void *)(a1 + 160)) >> 3;
    *(void *)&long long v31 = *v17;
    *((void *)&v31 + 1) = __PAIR64__(v23, LODWORD(v22));
    size_t v24 = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
    fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::PushArc(v24, &v31);
    operator new();
  }
LABEL_35:
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(a1, a2);
  if (v32[0])
  {
    (*(void (**)(void))(*(void *)v32[0] + 8))(v32[0]);
  }
  else if (v33)
  {
    --*v33;
  }
}

void sub_1B22DF94C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _DWORD *a15)
{
  if (a12)
  {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  else if (a15)
  {
    --*a15;
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Sample(void *a1, unsigned int *a2)
{
  int v4 = (uint64_t **)(a1 + 3);
  uint64_t v5 = a1 + 4;
  std::__tree<int>::destroy((uint64_t)(a1 + 3), (void *)a1[4]);
  a1[3] = v5;
  a1[5] = 0;
  *uint64_t v5 = 0;
  if ((*(uint64_t (**)(void, void))(*(void *)*a1 + 40))(*a1, *a2)
    || (float v7 = (*(float (**)(void, void))(*(void *)*a1 + 32))(*a1, *a2),
        uint64_t result = 0,
        *(float *)&uint64_t v11 = v7,
        LODWORD(v10) = 2139095040,
        v7 != INFINITY))
  {
    if (*((void *)a2 + 2) == *((_DWORD *)a1 + 4))
    {
      uint64_t result = 0;
    }
    else
    {
      if (*((void *)a2 + 1))
      {
        unint64_t v8 = 0;
        do
        {
          unint64_t v10 = fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::operator()(a1[1], *a1, *a2);
          uint64_t v11 = &v10;
          uint64_t v9 = std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v4, &v10, (uint64_t)&std::piecewise_construct, (uint64_t **)&v11);
          ++v9[5];
          ++v8;
        }
        while (v8 < *((void *)a2 + 1));
      }
      uint64_t result = 1;
    }
  }
  a1[6] = a1[3];
  return result;
}

unint64_t fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = rand();
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, a3);
  if ((*(float (**)(uint64_t, uint64_t))(*(void *)a2 + 32))(a2, a3) == INFINITY) {
    unint64_t v7 = v6;
  }
  else {
    unint64_t v7 = v6 + 1;
  }
  return (unint64_t)((double)v5 * 4.65661287e-10 * (double)v7);
}

uint64_t fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::NumArcs(uint64_t a1, int a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Expand(a1, a2); {
  uint64_t v4 = *(void *)(a1 + 120);
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * (a2 + 1);
  }
  return (uint64_t)(*(void *)(*(void *)v5 + 32) - *(void *)(*(void *)v5 + 24)) >> 4;
}

uint64_t fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Expand(a1, a2); {
  uint64_t v4 = *(void *)(a1 + 120);
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * (a2 + 1);
  }
  return *(void *)(*(void *)v5 + 8);
}

uint64_t fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Expand(a1, a2); {
  uint64_t v4 = *(void *)(a1 + 120);
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * (a2 + 1);
  }
  return *(void *)(*(void *)v5 + 16);
}

void *fst::ImplToFst<fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ImplToFst(void *result, uint64_t a2, int a3)
{
  *uint64_t result = &unk_1F0A43598;
  if (a3) {
    operator new();
  }
  uint64_t v3 = *(void *)(a2 + 8);
  result[1] = v3;
  ++*(_DWORD *)(v3 + 56);
  return result;
}

void sub_1B22DFDC4(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40C5740FB1);
  _Unwind_Resume(a1);
}

void fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::RandGenFstImpl(uint64_t a1, uint64_t a2)
{
}

void sub_1B22DFF68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  unint64_t v18 = *v16;
  if (*v16)
  {
    v15[21] = v18;
    operator delete(v18);
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v15);
  _Unwind_Resume(a1);
}

void fst::StateIterator<fst::RandGenFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::~StateIterator()
{
}

uint64_t fst::CacheStateIterator<fst::RandGenFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t fst::CacheStateIterator<fst::RandGenFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::Next_(uint64_t result)
{
  return result;
}

uint64_t fst::CacheStateIterator<fst::RandGenFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::Reset_(uint64_t result)
{
  *(_DWORD *)(result + ++*(_DWORD *)(result + 24) = 0;
  return result;
}

void fst::CacheStateIterator<fst::RandGenFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::~CacheStateIterator()
{
}

uint64_t fst::CacheStateIterator<fst::RandGenFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::Done(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v2 < *(_DWORD *)(v3 + 68)) {
    return 0;
  }
  int v5 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v3);
  if (v5 >= *(_DWORD *)(*(void *)(a1 + 16) + 68)) {
    return 1;
  }
  int v6 = v5;
  do
  {
    fst::ArcIterator<fst::RandGenFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::ArcIterator(&v20, *(void *)(a1 + 8), v6);
    unint64_t v7 = v21;
    uint64_t v8 = *((void *)v20 + 3);
    uint64_t v9 = *((void *)v20 + 4) - v8;
    uint64_t v10 = *(void *)(a1 + 16);
    if (v21 < v9 >> 4)
    {
      uint64_t v11 = v9 >> 4;
      int v12 = *(_DWORD *)(v10 + 68);
      unint64_t v13 = (int *)(v8 + 16 * v21 + 12);
      do
      {
        int v15 = *v13;
        v13 += 4;
        int v14 = v15;
        if (v12 <= v15)
        {
          int v12 = v14 + 1;
          *(_DWORD *)(v10 + 68) = v14 + 1;
        }
        ++v7;
      }
      while (v11 != v7);
      unint64_t v21 = v11;
    }
    fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetExpandedState(v10, v6);
    int v16 = *(_DWORD *)(a1 + 24);
    uint64_t v17 = *(void *)(a1 + 16);
    int v18 = *(_DWORD *)(v17 + 68);
    --*((_DWORD *)v20 + 13);
    BOOL v4 = v16 >= v18;
    if (v16 < v18) {
      break;
    }
    int v6 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v17);
  }
  while (v6 < *(_DWORD *)(*(void *)(a1 + 16) + 68));
  return v4;
}

void sub_1B22E0118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char **fst::ArcIterator<fst::RandGenFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::ArcIterator(char **a1, uint64_t a2, int a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  a1[1] = 0;
  Mutableint State = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(void *)(v6 + 120), a3);
  *a1 = MutableState;
  ++*((_DWORD *)MutableState + 13);
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(*(void *)(a2 + 8), a3) & 1) == 0)fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Expand(*(void *)(a2 + 8), a3); {
  return a1;
  }
}

void sub_1B22E01A0(_Unwind_Exception *a1)
{
  --*(_DWORD *)(*(void *)v1 + 52);
  _Unwind_Resume(a1);
}

uint64_t fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::InitArcIterator(uint64_t a1, int a2, void *a3)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Expand(a1, a2); {
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InitArcIterator(a1, a2, a3);
  }
}

uint64_t fst::DfsVisit<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::RandGenVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2)
{
  fst::RandGenVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::InitVisit(a2, a1);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (result != -1)
  {
    memset(&v8, 0, sizeof(v8));
    long long v6 = 0u;
    long long v7 = 0u;
    long long v5 = 0u;
    fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MemoryPool(v4, 64);
  }
  return result;
}

void sub_1B22E0A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~MemoryPool((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va1);
  uint64_t v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(void *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::RandGenVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::InitVisit(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  (*(void (**)(void))(**(void **)(a1 + 8) + 224))(*(void *)(a1 + 8));
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 280))(v4, v5);
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 120))(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 288))(v6, v7);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 4, 0);
  if (result) {
    uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 192))(*(void *)(a1 + 8), 4, 4);
  }
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = *(void *)(a1 + 16);
  return result;
}

void fst::RandGenVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::FinishState(void *a1, uint64_t a2, int a3)
{
  if (a3 != -1 && (*(float (**)(void))(*(void *)*a1 + 32))(*a1) == INFINITY) {
    a1[3] -= 16;
  }
}

uint64_t fst::RandGenVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::TreeArc(void *a1, uint64_t a2, uint64_t a3)
{
  if ((*(float (**)(void, void))(*(void *)*a1 + 32))(*a1, *(unsigned int *)(a3 + 12)) == INFINITY)
  {
    unint64_t v5 = a1[4];
    uint64_t v6 = (_OWORD *)a1[3];
    if ((unint64_t)v6 >= v5)
    {
      uint64_t v8 = a1[2];
      uint64_t v9 = ((uint64_t)v6 - v8) >> 4;
      unint64_t v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 60) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v11 = v5 - v8;
      if (v11 >> 3 > v10) {
        unint64_t v10 = v11 >> 3;
      }
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v10;
      }
      if (v12) {
        unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a1 + 4), v12);
      }
      else {
        unint64_t v13 = 0;
      }
      uint64_t v14 = &v13[16 * v9];
      uint64_t v15 = &v13[16 * v12];
      *(_OWORD *)uint64_t v14 = *(_OWORD *)a3;
      uint64_t v7 = v14 + 16;
      uint64_t v17 = (char *)a1[2];
      uint64_t v16 = (char *)a1[3];
      if (v16 != v17)
      {
        do
        {
          *((_OWORD *)v14 - 1) = *((_OWORD *)v16 - 1);
          v14 -= 16;
          v16 -= 16;
        }
        while (v16 != v17);
        uint64_t v16 = (char *)a1[2];
      }
      a1[2] = v14;
      a1[3] = v7;
      a1[4] = v15;
      if (v16) {
        operator delete(v16);
      }
    }
    else
    {
      _OWORD *v6 = *(_OWORD *)a3;
      uint64_t v7 = v6 + 1;
    }
    a1[3] = v7;
  }
  else
  {
    fst::RandGenVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::OutputPath((uint64_t)a1);
  }
  return 1;
}

uint64_t fst::RandGenVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::BackArc(uint64_t a1)
{
  if (FLAGS_fst_error_fatal) {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
  }
  else {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  }
  int v2 = fst::LogMessage::LogMessage((fst *)&v7, (uint64_t)__p);
  uint64_t v3 = (void *)fst::cerr(v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"RandGenVisitor: cyclic input", 28);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 192))(*(void *)(a1 + 8), 4, 4);
  return 0;
}

void sub_1B22E0F3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::RandGenVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::OutputPath(uint64_t a1)
{
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8)) == -1)
  {
    uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 200))(*(void *)(a1 + 8));
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 176))(*(void *)(a1 + 8), v2);
  }
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8));
  uint64_t v4 = v3;
  if (*(void *)(a1 + 24) == *(void *)(a1 + 16))
  {
    uint64_t v7 = v3;
  }
  else
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    do
    {
      uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 200))(*(void *)(a1 + 8));
      uint64_t v8 = *(void *)(a1 + 8);
      uint64_t v10 = *(void *)(*(void *)(a1 + 16) + v5);
      int v11 = 0;
      int v12 = v7;
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v8 + 208))(v8, v4, &v10);
      ++v6;
      v5 += 16;
      uint64_t v4 = v7;
    }
    while (v6 < (uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 4);
  }
  return (*(uint64_t (**)(void, uint64_t, double))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8), v7, 0.0);
}

void *fst::ImplToFst<fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(void *a1)
{
  *a1 = &unk_1F0A43598;
  uint64_t v2 = (_DWORD *)a1[1];
  if (v2)
  {
    int v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

uint64_t quasar::LmLoader2::LmLoader2(uint64_t a1, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::size_type v4 = *((void *)a2 + 1);
    if (v4)
    {
      std::string::__init_copy_ctor_external((std::string *)a1, *(const std::string::value_type **)a2, v4);
      goto LABEL_7;
    }
LABEL_6:
    std::string::basic_string[abi:ne180100]<0>((void *)a1, "lm-personalize");
    goto LABEL_7;
  }
  if (!*((unsigned char *)a2 + 23)) {
    goto LABEL_6;
  }
  long long v3 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v3;
LABEL_7:
  *(unsigned char *)(a1 + ++*(_DWORD *)(result + 24) = 0;
  *(unsigned char *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(unsigned char *)(a1 + 80) = 0;
  return a1;
}

void quasar::LmLoader2::~LmLoader2(quasar::LmLoader2 *this)
{
  if (*((unsigned char *)this + 96))
  {
    uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 11);
    if (v2) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    }
  }
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void quasar::LmLoader2::fetchOrLoadModel(uint64_t a1, int a2, quasar::SystemConfig *this)
{
  uint64_t SpeechModelInfo = quasar::SystemConfig::getSpeechModelInfo(this);
  if (*(char *)(SpeechModelInfo + 143) < 0) {
    std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)(SpeechModelInfo + 120), *(void *)(SpeechModelInfo + 128));
  }
  else {
    std::string v6 = *(std::string *)(SpeechModelInfo + 120);
  }
  quasar::SystemConfig::getPtreeOptional((uint64_t)this, a1);
}

void sub_1B22E17F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (*(char *)(v15 - 105) < 0) {
    operator delete(*(void **)(v15 - 128));
  }
  _Unwind_Resume(exception_object);
}

void quasar::LmLoader2::loadForRecognition(quasar::SystemConfig *this@<X2>, uint64_t a2@<X0>, int a3@<W1>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  if (quasar::gLogLevel >= 4)
  {
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v26 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v26);
    int v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"task=", 5);
    int v13 = *(char *)(a4 + 23);
    if (v13 >= 0) {
      uint64_t v14 = a4;
    }
    else {
      uint64_t v14 = *(void *)a4;
    }
    if (v13 >= 0) {
      uint64_t v15 = *(unsigned __int8 *)(a4 + 23);
    }
    else {
      uint64_t v15 = *(void *)(a4 + 8);
    }
    uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
    uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" appName=", 9);
    int v18 = *(char *)(a5 + 23);
    if (v18 >= 0) {
      uint64_t v19 = a5;
    }
    else {
      uint64_t v19 = *(void *)a5;
    }
    if (v18 >= 0) {
      uint64_t v20 = *(unsigned __int8 *)(a5 + 23);
    }
    else {
      uint64_t v20 = *(void *)(a5 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v19, v20);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v26);
  }
  int v21 = *(char *)(a4 + 23);
  if (v21 < 0)
  {
    if (*(void *)(a4 + 8) != 9) {
      goto LABEL_24;
    }
    a4 = *(void *)a4;
  }
  else if (v21 != 9)
  {
    goto LABEL_24;
  }
  if (*(void *)a4 != 0x6F69746174636944 || *(unsigned char *)(a4 + 8) != 110) {
    goto LABEL_24;
  }
  int v23 = *(char *)(a5 + 23);
  if (v23 < 0)
  {
    if (*(void *)(a5 + 8) != 19) {
      goto LABEL_24;
    }
    a5 = *(void *)a5;
  }
  else if (v23 != 19)
  {
    goto LABEL_24;
  }
  if (*(void *)a5 == 0x6C7070612E6D6F63
    && *(void *)(a5 + 8) == 0x656C69626F4D2E65
    && *(void *)(a5 + 11) == 0x534D53656C69626FLL)
  {
    quasar::LmLoader2::fetchOrLoadModel(a2, a3, this);
  }
LABEL_24:
  if (quasar::gLogLevel >= 4)
  {
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v26 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Not loading custom-lm because task or app doesn't support it.", 61);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v26);
  }
  *a6 = 0;
  a6[1] = 0;
}

void sub_1B22E1A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t quasar::LmLoader2::invalidate(uint64_t this)
{
  *(unsigned char *)(this + ++*(_DWORD *)(result + 24) = 1;
  return this;
}

void quasar::corrective_reranking::TransformerClassifier::TransformerClassifier(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)a1 = v2;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + ++*(_DWORD *)(result + 24) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  if (*(_DWORD *)(a2 + 48) >= *(_DWORD *)(a2 + 52)) {
    operator new();
  }
  memset(v3, 0, sizeof(v3));
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"maxLength must be equal or bigger than truncationLength", 55);
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v3);
}

void sub_1B22E1C34(_Unwind_Exception *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v4);
  std::unique_ptr<quasar::corrective_reranking::TransformerTokenUtilities>::reset[abi:ne180100](v3, 0);
  std::string v6 = *(std::__shared_weak_count **)(v1 + 24);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  std::unique_ptr<quasar::TransformerForClassification>::reset[abi:ne180100](v2, 0);
  _Unwind_Resume(a1);
}

void quasar::corrective_reranking::TransformerClassifier::~TransformerClassifier(quasar::corrective_reranking::TransformerTokenUtilities **this)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(this + 5));
  std::unique_ptr<quasar::corrective_reranking::TransformerTokenUtilities>::reset[abi:ne180100](this + 4, 0);
  int v2 = (std::__shared_weak_count *)this[3];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::unique_ptr<quasar::TransformerForClassification>::reset[abi:ne180100](this + 1, 0);
}

float quasar::corrective_reranking::TransformerClassifier::classifyIntent(uint64_t *a1, uint64_t a2, uint64_t a3, int a4)
{
  std::string::basic_string[abi:ne180100]<0>(v32, "<Intent Classification> ");
  std::string::basic_string[abi:ne180100]<0>(v30, " ** ");
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v29 = *(std::string *)a2;
  }
  if (a4)
  {
    uint64_t v8 = (uint64_t *)a1[4];
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v32, v30, (uint64_t)&v28);
    int v9 = *(char *)(a3 + 23);
    if (v9 >= 0) {
      uint64_t v10 = (const std::string::value_type *)a3;
    }
    else {
      uint64_t v10 = *(const std::string::value_type **)a3;
    }
    if (v9 >= 0) {
      std::string::size_type v11 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      std::string::size_type v11 = *(void *)(a3 + 8);
    }
    int v12 = std::string::append(&v28, v10, v11);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    quasar::corrective_reranking::TransformerTokenUtilities::tokenize(v8);
  }
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v32, (const void **)&v29.__r_.__value_.__l.__data_, (uint64_t)&v28);
  if ((v31 & 0x80u) == 0) {
    uint64_t v14 = (const std::string::value_type *)v30;
  }
  else {
    uint64_t v14 = (const std::string::value_type *)v30[0];
  }
  if ((v31 & 0x80u) == 0) {
    std::string::size_type v15 = v31;
  }
  else {
    std::string::size_type v15 = (std::string::size_type)v30[1];
  }
  uint64_t v16 = std::string::append(&v28, v14, v15);
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  int v18 = *(char *)(a3 + 23);
  if (v18 >= 0) {
    uint64_t v19 = (const std::string::value_type *)a3;
  }
  else {
    uint64_t v19 = *(const std::string::value_type **)a3;
  }
  if (v18 >= 0) {
    std::string::size_type v20 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    std::string::size_type v20 = *(void *)(a3 + 8);
  }
  int v21 = std::string::append(&__str, v19, v20);
  long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  std::string::size_type v26 = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  float v23 = quasar::corrective_reranking::TransformerClassifier::sequenceClassification(a1, (uint64_t)__p);
  if (SHIBYTE(v26) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if ((char)v31 < 0) {
    operator delete((void *)v30[0]);
  }
  if (v33 < 0) {
    operator delete((void *)v32[0]);
  }
  return v23;
}

void sub_1B22E2050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (*(char *)(v14 - 113) < 0) {
    operator delete(*(void **)(v14 - 136));
  }
  if (*(char *)(v14 - 89) < 0) {
    operator delete(*(void **)(v14 - 112));
  }
  _Unwind_Resume(exception_object);
}

void sub_1B22E2128()
{
}

float quasar::corrective_reranking::TransformerClassifier::sequenceClassification(uint64_t *a1, uint64_t a2)
{
  *(void *)&long long v17 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (uint64_t)(a1 + 5);
  uint64_t v5 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(a1 + 5, (unsigned __int8 *)a2);
  if (v5) {
    return *((float *)v5 + 10);
  }
  kaldi::Matrix<float>::Matrix((uint64_t)v13);
  kaldi::Matrix<float>::Matrix((uint64_t)v12);
  uint64_t v7 = a1[2];
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v16 = *(std::string *)a2;
  }
  int v9 = 0;
  uint64_t v10 = 0;
  v11[0] = 0;
  uint64_t v14 = (int32x2_t *)&v9;
  char v15 = 0;
  int v9 = (std::string *)operator new(0x18uLL);
  uint64_t v10 = v9;
  v11[0] = (uint64_t)&v9[1];
  uint64_t v10 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v11, (long long *)&v16, &v17, v9);
  quasar::TransformerTokenizer::encode(v7, &v9, v13, v12, 1, *(unsigned int *)a1, 1);
  uint64_t v14 = (int32x2_t *)&v9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  kaldi::Matrix<float>::Matrix((uint64_t)&v9);
  quasar::TransformerForClassification::run(a1[1], 0, (uint64_t)v13, (uint64_t)v12, (int32x2_t *)&v9);
  LODWORD(v16.__r_.__value_.__l.__data_) = HIDWORD(v9->__r_.__value_.__r.__words[0]);
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::string const&,float &>(v4, (unsigned __int8 *)a2, a2, (float *)&v16);
  float v6 = *(float *)&v16.__r_.__value_.__l.__data_;
  kaldi::Matrix<float>::~Matrix((uint64_t)&v9);
  kaldi::Matrix<float>::~Matrix((uint64_t)v12);
  kaldi::Matrix<float>::~Matrix((uint64_t)v13);
  return v6;
}

void sub_1B22E22E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  kaldi::Matrix<float>::~Matrix((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1B22E2350()
{
}

void sub_1B22E2358()
{
}

float quasar::corrective_reranking::TransformerClassifier::validateEdit(uint64_t *a1, const void **a2, uint64_t a3, uint64_t a4)
{
  std::string::basic_string[abi:ne180100]<0>(v37, "<Edit Validation> ");
  std::string::basic_string[abi:ne180100]<0>(&v34, " ** ");
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v37, a2, (uint64_t)&v28);
  if ((v36 & 0x80u) == 0) {
    uint64_t v8 = (const std::string::value_type *)&v34;
  }
  else {
    uint64_t v8 = v34;
  }
  if ((v36 & 0x80u) == 0) {
    std::string::size_type v9 = v36;
  }
  else {
    std::string::size_type v9 = v35;
  }
  uint64_t v10 = std::string::append(&v28, v8, v9);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  int v12 = *(char *)(a3 + 23);
  if (v12 >= 0) {
    uint64_t v13 = (const std::string::value_type *)a3;
  }
  else {
    uint64_t v13 = *(const std::string::value_type **)a3;
  }
  if (v12 >= 0) {
    std::string::size_type v14 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    std::string::size_type v14 = *(void *)(a3 + 8);
  }
  char v15 = std::string::append(&v29, v13, v14);
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if ((v36 & 0x80u) == 0) {
    long long v17 = (const std::string::value_type *)&v34;
  }
  else {
    long long v17 = v34;
  }
  if ((v36 & 0x80u) == 0) {
    std::string::size_type v18 = v36;
  }
  else {
    std::string::size_type v18 = v35;
  }
  uint64_t v19 = std::string::append(&v30, v17, v18);
  long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  int v21 = *(char *)(a4 + 23);
  if (v21 >= 0) {
    long long v22 = (const std::string::value_type *)a4;
  }
  else {
    long long v22 = *(const std::string::value_type **)a4;
  }
  if (v21 >= 0) {
    std::string::size_type v23 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    std::string::size_type v23 = *(void *)(a4 + 8);
  }
  size_t v24 = std::string::append(&v31, v22, v23);
  long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  std::string::size_type v33 = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  float v26 = quasar::corrective_reranking::TransformerClassifier::sequenceClassification(a1, (uint64_t)__p);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  if ((char)v36 < 0) {
    operator delete(v34);
  }
  if (v38 < 0) {
    operator delete((void *)v37[0]);
  }
  return v26;
}

void sub_1B22E2548(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a42 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (*(char *)(v42 - 89) < 0) {
    operator delete(*(void **)(v42 - 112));
  }
  if (*(char *)(v42 - 65) < 0) {
    operator delete(*(void **)(v42 - 88));
  }
  _Unwind_Resume(exception_object);
}

void quasar::corrective_reranking::TransformerClassifier::validateParse(uint64_t a1, uint64_t a2, long long **a3)
{
  quasar::corrective_reranking::TextEdit::TextEdit((quasar::corrective_reranking::TextEdit *)v7, (const quasar::corrective_reranking::Parse *)a3);
  quasar::corrective_reranking::detokenize(a3 + 4, &v6);
  quasar::corrective_reranking::TransformerTokenUtilities::buildTruncatedExistingAndResultingTexts(*(uint64_t **)(a1 + 32), a2, (uint64_t)&v6, v7);
}

void sub_1B22E2710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  quasar::corrective_reranking::TextEdit::~TextEdit(&a22);
  _Unwind_Resume(a1);
}

void quasar::corrective_reranking::TransformerClassifier::classifyCapitalization(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    uint64_t v7 = (char *)a2;
  }
  else {
    uint64_t v7 = *(char **)a2;
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v8 = *(void *)(a2 + 8);
  }
  quasar::utf8::convertToLowerCaseOrEmpty(v7, v8, &__p);
  quasar::corrective_reranking::tokenize((uint64_t)&__p, &v12);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  quasar::corrective_reranking::TransformerClassifier::tokenClassification(a1, a2, 1, (uint64_t *)&__p);
  quasar::corrective_reranking::TransformerTokenUtilities::mapTransformerTokenizationToIcu((uint64_t *)&__p, (quasar::QsrText **)&v12, a3);
  uint64_t v9 = *a3;
  uint64_t v10 = a3[1];
  while (v9 != v10)
  {
    *(_DWORD *)(v9 + 56) = quasar::corrective_reranking::tokenCasingFromScores((uint64_t *)(v9 + 24));
    v9 += 64;
  }
  p_p = &__p;
  std::vector<quasar::corrective_reranking::TokenClassification>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1B22E282C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  *(void *)(v16 - 40) = &__p;
  std::vector<quasar::corrective_reranking::TokenClassification>::__destroy_vector::operator()[abi:ne180100]((void ***)(v16 - 40));
  std::string __p = &a16;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t quasar::corrective_reranking::TransformerClassifier::tokenClassification@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  kaldi::Matrix<float>::Matrix((uint64_t)v43);
  kaldi::Matrix<float>::Matrix((uint64_t)v42);
  uint64_t v8 = *((void *)a1 + 2);
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v44, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v44 = *(std::string *)a2;
  }
  std::string __p = 0;
  unsigned __int8 v36 = 0;
  long long v37 = 0;
  p_p = &__p;
  LOBYTE(v40) = 0;
  std::string __p = operator new(0x18uLL);
  unsigned __int8 v36 = __p;
  long long v37 = (char *)__p + 24;
  unsigned __int8 v36 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v37, (long long *)&v44, &v45, (std::string *)__p);
  quasar::TransformerTokenizer::encode(v8, &__p, v43, v42, 1, *a1, 1);
  p_p = &__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&p_p);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  kaldi::Matrix<float>::Matrix((uint64_t)&v44);
  quasar::TransformerForClassification::run(*((void *)a1 + 1), 1, (uint64_t)v43, (uint64_t)v42, (int32x2_t *)&v44);
  uint64_t v9 = 0;
  p_p = 0;
  long long v40 = 0;
  long long v41 = 0;
  while (v9 < (int)kaldi::MatrixBase<float>::NumCols((uint64_t)v43))
  {
    int32x2_t v10 = v43[0];
    long long v11 = (unsigned int *)v40;
    if (v40 >= v41)
    {
      uint64_t v13 = (unsigned int *)p_p;
      uint64_t v14 = ((char *)v40 - (char *)p_p) >> 2;
      unint64_t v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 62) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v16 = (char *)v41 - (char *)p_p;
      if (((char *)v41 - (char *)p_p) >> 1 > v15) {
        unint64_t v15 = v16 >> 1;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v15;
      }
      if (v17)
      {
        std::string::size_type v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v41, v17);
        uint64_t v13 = (unsigned int *)p_p;
        long long v11 = (unsigned int *)v40;
      }
      else
      {
        std::string::size_type v18 = 0;
      }
      uint64_t v19 = (unsigned int *)&v18[4 * v14];
      *uint64_t v19 = (int)*(float *)(*(void *)&v10 + 4 * v9);
      long long v12 = (void **)(v19 + 1);
      while (v11 != v13)
      {
        unsigned int v20 = *--v11;
        *--uint64_t v19 = v20;
      }
      p_p = (void **)v19;
      long long v40 = v12;
      long long v41 = (void **)&v18[4 * v17];
      if (v13) {
        operator delete(v13);
      }
    }
    else
    {
      *(_DWORD *)long long v40 = (int)*(float *)(*(void *)v43 + 4 * v9);
      long long v12 = (void **)(v11 + 1);
    }
    long long v40 = v12;
    ++v9;
  }
  quasar::TransformerTokenizer::convertIdsToTokens(*((quasar::TransformerTokenizer **)a1 + 2), (unsigned int **)&p_p, 0, &v38);
  std::vector<std::string>::pointer begin = v38.__begin_;
  std::vector<std::string>::pointer end = v38.__end_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3) != (int)kaldi::MatrixBase<float>::NumRows((uint64_t)&v44)
    || (int)kaldi::MatrixBase<float>::NumCols((uint64_t)&v44) <= 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"tokens.size() == logits.NumRows() && logits.NumCols() > 0", 57);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
  }
  uint64_t CircleRegion = quasar::GeoRegion::getCircleRegion(*((quasar::GeoRegion **)a1 + 2));
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  std::vector<std::string>::pointer v24 = v38.__begin_;
  if (v38.__end_ != v38.__begin_)
  {
    long long v25 = (void *)CircleRegion;
    uint64_t v26 = 0;
    unint64_t v27 = 0;
    do
    {
      if (!a3
        || !std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v25, (unsigned __int8 *)&v24[v26]))
      {
        std::string::size_type v28 = v44.__r_.__value_.__r.__words[0];
        int v29 = v44.__r_.__value_.__r.__words[2];
        int v30 = kaldi::MatrixBase<float>::NumCols((uint64_t)&v44);
        std::string v31 = (const void *)(v28 + 4 * v29 * (int)v27);
        std::vector<std::string>::pointer v32 = v38.__begin_;
        std::string __p = 0;
        unsigned __int8 v36 = 0;
        long long v37 = 0;
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, v31, (uint64_t)v31 + 4 * v30, v30);
        uint64_t v34 = 0;
        std::vector<quasar::corrective_reranking::TokenClassification>::emplace_back<std::string &,std::vector<float>,quasar::corrective_reranking::TextRange>(a4, (uint64_t)&v32[v26], (uint64_t)&__p, (uint64_t)&v34);
        if (__p)
        {
          unsigned __int8 v36 = __p;
          operator delete(__p);
        }
      }
      ++v27;
      std::vector<std::string>::pointer v24 = v38.__begin_;
      ++v26;
    }
    while (0xAAAAAAAAAAAAAAABLL * (((char *)v38.__end_ - (char *)v38.__begin_) >> 3) > v27);
  }
  std::string __p = &v38;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (p_p)
  {
    long long v40 = p_p;
    operator delete(p_p);
  }
  kaldi::Matrix<float>::~Matrix((uint64_t)&v44);
  kaldi::Matrix<float>::~Matrix((uint64_t)v42);
  return kaldi::Matrix<float>::~Matrix((uint64_t)v43);
}

void sub_1B22E2D00(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B22E2D4CLL);
}

void quasar::corrective_reranking::TransformerClassifier::clearCache(quasar::corrective_reranking::TransformerClassifier *this)
{
  if (quasar::gLogLevel >= 5)
  {
    memset(v2, 0, sizeof(v2));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Clearing transformer classifier cache, size=", 44);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v2);
  }
  std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::clear((uint64_t)this + 40);
}

void sub_1B22E2DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::vector<quasar::corrective_reranking::TokenClassification>::emplace_back<std::string &,std::vector<float>,quasar::corrective_reranking::TextRange>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v10 = a1[2];
  uint64_t v8 = (uint64_t)(a1 + 2);
  unint64_t v9 = v10;
  unint64_t v11 = *(void *)(v8 - 8);
  if (v11 >= v10)
  {
    uint64_t v13 = (uint64_t)(v11 - *a1) >> 6;
    if ((unint64_t)(v13 + 1) >> 58) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v14 = v9 - *a1;
    uint64_t v15 = v14 >> 5;
    if (v14 >> 5 <= (unint64_t)(v13 + 1)) {
      uint64_t v15 = v13 + 1;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v16 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v15;
    }
    uint64_t v23 = v8;
    if (v16) {
      unint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Edge>>(v8, v16);
    }
    else {
      unint64_t v17 = 0;
    }
    uint64_t v19 = v17;
    unsigned int v20 = &v17[64 * v13];
    long long v22 = &v17[64 * v16];
    quasar::corrective_reranking::TokenClassification::TokenClassification(v20, a2, a3, a4);
    int v21 = v20 + 64;
    std::vector<quasar::corrective_reranking::TokenClassification>::__swap_out_circular_buffer(a1, &v19);
    uint64_t v12 = a1[1];
    std::__split_buffer<quasar::corrective_reranking::TokenClassification>::~__split_buffer(&v19);
  }
  else
  {
    quasar::corrective_reranking::TokenClassification::TokenClassification(*(void *)(v8 - 8), a2, a3, a4);
    uint64_t v12 = v11 + 64;
    a1[1] = v11 + 64;
  }
  a1[1] = v12;
  return v12 - 64;
}

void sub_1B22E2F18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

quasar::TransformerForClassification *std::unique_ptr<quasar::TransformerForClassification>::reset[abi:ne180100](quasar::TransformerForClassification **a1, quasar::TransformerForClassification *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    quasar::TransformerForClassification::~TransformerForClassification(result);
    JUMPOUT(0x1B3EA8670);
  }
  return result;
}

quasar::corrective_reranking::TransformerTokenUtilities *std::unique_ptr<quasar::corrective_reranking::TransformerTokenUtilities>::reset[abi:ne180100](quasar::corrective_reranking::TransformerTokenUtilities **a1, quasar::corrective_reranking::TransformerTokenUtilities *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    quasar::corrective_reranking::TransformerTokenUtilities::~TransformerTokenUtilities(result);
    JUMPOUT(0x1B3EA8670);
  }
  return result;
}

std::string *std::allocate_shared[abi:ne180100]<quasar::TransformerTokenizer,std::allocator<quasar::TransformerTokenizer>,std::string const&,void>@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = (std::string *)operator new(0xF8uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::TransformerTokenizer>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::TransformerTokenizer>,0>(v4, a1);
  *a2 = v4 + 1;
  a2[1] = v4;
  return result;
}

void sub_1B22E3020(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<quasar::TransformerTokenizer>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::TransformerTokenizer>,0>(std::string *a1, uint64_t a2)
{
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F0A1D410;
  std::allocator<quasar::TransformerTokenizer>::construct[abi:ne180100]<quasar::TransformerTokenizer,std::string const&>((uint64_t)&v4, a1 + 1, a2);
  return a1;
}

void sub_1B22E3090(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::TransformerTokenizer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A1D410;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::TransformerTokenizer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A1D410;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<quasar::TransformerTokenizer>::__on_zero_shared(uint64_t a1)
{
}

void std::allocator<quasar::TransformerTokenizer>::construct[abi:ne180100]<quasar::TransformerTokenizer,std::string const&>(uint64_t a1, std::string *a2, uint64_t a3)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, "[UNK]");
  std::string::basic_string[abi:ne180100]<0>(&v12, "[SEP]");
  std::string::basic_string[abi:ne180100]<0>(v10, "[PAD]");
  std::string::basic_string[abi:ne180100]<0>(v8, "[CLS]");
  std::string::basic_string[abi:ne180100]<0>(__p, "[MASK]");
  quasar::TransformerTokenizer::TransformerTokenizer(a2, a3, 1, 1, &v14, &v12, (uint64_t)v10, (long long *)v8, (uint64_t)__p, 1, v5, 0);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  if (v13 < 0) {
    operator delete((void *)v12);
  }
  if (v15 < 0) {
    operator delete((void *)v14);
  }
}

void sub_1B22E3230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (*(char *)(v29 - 57) < 0) {
    operator delete(*(void **)(v29 - 80));
  }
  if (*(char *)(v29 - 33) < 0) {
    operator delete(*(void **)(v29 - 56));
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::string const&,float &>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, float *a4)
{
  char v9 = (void *)(a1 + 24);
  unint64_t v10 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    unint64_t v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    char v15 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      for (uint64_t i = *v15; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v17 = *((void *)i + 1);
        if (v17 == v11)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12) {
              v17 %= v12;
            }
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__construct_node_hash<std::string const&,float &>(a1, v11, a3, a4, (uint64_t)v27);
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v12 || (float)(v19 * (float)v12) < v18)
  {
    BOOL v20 = 1;
    if (v12 >= 3) {
      BOOL v20 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v12);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v23);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        unint64_t v4 = v11 % v12;
      }
      else {
        unint64_t v4 = v11;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v11;
    }
  }
  std::vector<std::string>::pointer v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    *(void *)v27[0] = *v24;
    void *v24 = v27[0];
  }
  else
  {
    *(void *)v27[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v27[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v27[0])
    {
      unint64_t v25 = *(void *)(*(void *)v27[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v25 >= v12) {
          v25 %= v12;
        }
      }
      else
      {
        v25 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v25) = v27[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v27[0];
  ++*v9;
  return i;
}

void sub_1B22E3510(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  }
  _Unwind_Resume(exception_object);
}

float std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__construct_node_hash<std::string const&,float &>@<S0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, float *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  unint64_t v10 = (char *)operator new(0x30uLL);
  *(void *)(a5 + 8) = v9;
  *(void *)a5 = v10;
  *(unsigned char *)(a5 + 16) = 0;
  *(void *)unint64_t v10 = 0;
  *((void *)v10 + 1) = a2;
  unint64_t v11 = (std::string *)(v10 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((void *)v10 + 4) = *(void *)(a3 + 16);
  }
  float result = *a4;
  *((float *)v10 + 10) = *a4;
  *(unsigned char *)(a5 + 16) = 1;
  return result;
}

void sub_1B22E35D0(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void *StorageAccessor::EspressoStorageAccessor::GetDataView<float>@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v11 = a2;
  StorageAccessor::EspressoStorageAccessor::EnsureLoaded((StorageAccessor::EspressoStorageAccessor *)a1);
  int v5 = std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>((void *)(a1 + 40), &v11);
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "blobv1 identifier not found");
    __cxa_throw(exception, (struct type_info *)off_1E5FFDF10, MEMORY[0x1E4FBA1B8]);
  }
  unint64_t Data = StorageAccessor::MMapFileAccessor::ReadData(*(StorageAccessor::MMapFileAccessor **)(a1 + 32), v5[3], v5[4]);
  if ((unint64_t)v7 >= 4) {
    uint64_t v8 = (const void *)Data;
  }
  else {
    uint64_t v8 = 0;
  }
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  return std::vector<float>::__init_with_size[abi:ne180100]<float const*,float const*>(a3, v8, (uint64_t)v8 + (v7 & 0xFFFFFFFFFFFFFFFCLL), v7 >> 2);
}

void sub_1B22E36A0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void StorageAccessor::EspressoStorageAccessor::EnsureLoaded(StorageAccessor::EspressoStorageAccessor *this)
{
  uint64_t v3 = this;
  uint64_t v1 = (std::once_flag::_State_type *)((char *)this + 24);
  int v2 = &v3;
  if (atomic_load_explicit((atomic_ullong *volatile)v1, memory_order_acquire) != -1)
  {
    int v5 = &v2;
    unint64_t v4 = &v5;
    std::__call_once(v1, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<StorageAccessor::EspressoStorageAccessor::EnsureLoaded(void)::$_1 &&>>);
  }
}

void *StorageAccessor::EspressoStorageAccessor::GetDataView<signed char>@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v12 = a2;
  StorageAccessor::EspressoStorageAccessor::EnsureLoaded((StorageAccessor::EspressoStorageAccessor *)a1);
  int v5 = std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>((void *)(a1 + 40), &v12);
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "blobv1 identifier not found");
    __cxa_throw(exception, (struct type_info *)off_1E5FFDF10, MEMORY[0x1E4FBA1B8]);
  }
  unint64_t Data = StorageAccessor::MMapFileAccessor::ReadData(*(StorageAccessor::MMapFileAccessor **)(a1 + 32), v5[3], v5[4]);
  size_t v8 = v7;
  a3[1] = 0;
  a3[2] = 0;
  if (v7) {
    uint64_t v9 = (const void *)Data;
  }
  else {
    uint64_t v9 = 0;
  }
  *a3 = 0;
  return std::vector<signed char>::__init_with_size[abi:ne180100]<signed char const*,signed char const*>(a3, v9, (uint64_t)v9 + v8, v8);
}

void sub_1B22E37C0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *StorageAccessor::EspressoStorageAccessor::GetDataView<unsigned char>@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v12 = a2;
  StorageAccessor::EspressoStorageAccessor::EnsureLoaded((StorageAccessor::EspressoStorageAccessor *)a1);
  int v5 = std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>((void *)(a1 + 40), &v12);
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "blobv1 identifier not found");
    __cxa_throw(exception, (struct type_info *)off_1E5FFDF10, MEMORY[0x1E4FBA1B8]);
  }
  unint64_t Data = StorageAccessor::MMapFileAccessor::ReadData(*(StorageAccessor::MMapFileAccessor **)(a1 + 32), v5[3], v5[4]);
  size_t v8 = v7;
  a3[1] = 0;
  a3[2] = 0;
  if (v7) {
    uint64_t v9 = (const void *)Data;
  }
  else {
    uint64_t v9 = 0;
  }
  *a3 = 0;
  return std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, v9, (uint64_t)v9 + v8, v8);
}

void sub_1B22E3880(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *StorageAccessor::EspressoStorageAccessor::SetDataView<float>(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v11 = a2;
  StorageAccessor::EspressoStorageAccessor::EnsureLoaded((StorageAccessor::EspressoStorageAccessor *)a1);
  uint64_t v5 = *a3;
  uint64_t v6 = a3[1] - *a3;
  if (!v6) {
    uint64_t v5 = 0;
  }
  v10[0] = v5;
  v10[1] = v6;
  size_t v7 = std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>((void *)(a1 + 40), &v11);
  if (!v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "blobv1 identifier not found");
    __cxa_throw(exception, (struct type_info *)off_1E5FFDF10, MEMORY[0x1E4FBA1B8]);
  }
  return StorageAccessor::MMapFileAccessor::WriteData(*(void **)(a1 + 32), v7[3], (uint64_t)v10);
}

void sub_1B22E3934(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *StorageAccessor::EspressoStorageAccessor::SetDataView<signed char>(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v11 = a2;
  StorageAccessor::EspressoStorageAccessor::EnsureLoaded((StorageAccessor::EspressoStorageAccessor *)a1);
  uint64_t v5 = *a3;
  uint64_t v6 = a3[1] - *a3;
  if (!v6) {
    uint64_t v5 = 0;
  }
  v10[0] = v5;
  v10[1] = v6;
  size_t v7 = std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>((void *)(a1 + 40), &v11);
  if (!v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "blobv1 identifier not found");
    __cxa_throw(exception, (struct type_info *)off_1E5FFDF10, MEMORY[0x1E4FBA1B8]);
  }
  return StorageAccessor::MMapFileAccessor::WriteData(*(void **)(a1 + 32), v7[3], (uint64_t)v10);
}

void sub_1B22E39E8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *StorageAccessor::EspressoStorageAccessor::SetDataView<unsigned char>(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v11 = a2;
  StorageAccessor::EspressoStorageAccessor::EnsureLoaded((StorageAccessor::EspressoStorageAccessor *)a1);
  uint64_t v5 = *a3;
  uint64_t v6 = a3[1] - *a3;
  if (!v6) {
    uint64_t v5 = 0;
  }
  v10[0] = v5;
  v10[1] = v6;
  size_t v7 = std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>((void *)(a1 + 40), &v11);
  if (!v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "blobv1 identifier not found");
    __cxa_throw(exception, (struct type_info *)off_1E5FFDF10, MEMORY[0x1E4FBA1B8]);
  }
  return StorageAccessor::MMapFileAccessor::WriteData(*(void **)(a1 + 32), v7[3], (uint64_t)v10);
}

void sub_1B22E3A9C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void StorageAccessor::EspressoStorageAccessor::~EspressoStorageAccessor(StorageAccessor::MMapFileAccessor **this)
{
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

double StorageAccessor::EspressoStorageAccessor::EspressoStorageAccessor(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v2;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 4std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = 0u;
  *(_OWORD *)(a1 + ++*(_DWORD *)(result + 24) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  return result;
}

StorageAccessor::MMapFileAccessor *std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](StorageAccessor::MMapFileAccessor **a1, StorageAccessor::MMapFileAccessor *a2)
{
  double result = *a1;
  *a1 = a2;
  if (result)
  {
    StorageAccessor::MMapFileAccessor::~MMapFileAccessor(result);
    JUMPOUT(0x1B3EA8670);
  }
  return result;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<StorageAccessor::EspressoStorageAccessor::EnsureLoaded(void)::$_1 &&>>()
{
}

void sub_1B22E3CA4(_Unwind_Exception *a1)
{
  StorageAccessor::MMapFileAccessor::~MMapFileAccessor(v1);
  MEMORY[0x1B3EA8670]();
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,StorageAccessor::EspressoStorageAccessor::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,StorageAccessor::EspressoStorageAccessor::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,StorageAccessor::EspressoStorageAccessor::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,StorageAccessor::EspressoStorageAccessor::FileInfo>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    unint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x28uLL);
  *uint64_t i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  i[4] = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  BOOL v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *uint64_t i = *v20;
LABEL_38:
    *BOOL v20 = i;
    goto LABEL_39;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v21 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    BOOL v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1B22E3EFC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::vector<signed char>::__init_with_size[abi:ne180100]<signed char const*,signed char const*>(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    uint64_t v6 = result;
    double result = std::vector<quasar::rescoring::FeatureType>::__vallocate[abi:ne180100](result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      double result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B22E3F70(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    uint64_t v6 = result;
    double result = std::vector<quasar::rescoring::FeatureType>::__vallocate[abi:ne180100](result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      double result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B22E3FEC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B22E413C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1B22E434C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B22E4444(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B22E457C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void quasar::OnlineLatticeBiglmLmeFasterDecoder::registerParams(quasar::QsrTextSymbolTable **this, quasar::SystemConfig *a2)
{
}

void sub_1B22E4D3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  _Unwind_Resume(exception_object);
}

void quasar::OnlineLatticeBiglmLmeFasterDecoder::finishInit(quasar::OnlineLatticeBiglmLmeFasterDecoder *this)
{
  v3[11] = *MEMORY[0x1E4F143B8];
  quasar::OnlineLatticeBiglmFasterDecoder::finishInit(this);
  std::string::basic_string[abi:ne180100]<0>(v3, ",");
  quasar::splitStringSimple((uint64_t)this + 2896, v3, (unint64_t)__p);
}

void sub_1B22E5B78(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B22E5C64);
}

void sub_1B22E5B98()
{
  std::__function::__value_func<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::~__value_func[abi:ne180100]((void *)(v0 - 136));
  JUMPOUT(0x1B22E5BB8);
}

void sub_1B22E5C00()
{
}

void sub_1B22E5C10(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  JUMPOUT(0x1B22E5C54);
}

void sub_1B22E5C50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  *(void *)(v48 - 192) = &a48;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v48 - 192));
  _Unwind_Resume(a1);
}

void quasar::OnlineLatticeBiglmLmeFasterDecoder::findClassLmSymbols(quasar::OnlineLatticeBiglmLmeFasterDecoder *this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  uint64_t v125 = 0;
  uint64_t v126 = 0;
  uint64_t v127 = 0;
  float v122 = 0;
  float v123 = 0;
  uint64_t v124 = 0;
  kaldi::SplitStringToVector((const std::string *)((char *)this + 3088), ",", 1, (uint64_t)&v125);
  kaldi::SplitStringToFloats<float>((uint64_t)this + 3112, ",", 1, &v122);
  if (v123 == (unsigned char *)v122)
  {
    uint64_t v3 = v125;
    uint64_t v4 = v126;
  }
  else
  {
    uint64_t v3 = v125;
    uint64_t v4 = v126;
    if (0xAAAAAAAAAAAAAAABLL * ((v126 - v125) >> 3) != (v123 - (unsigned char *)v122) >> 2)
    {
      long long v120 = 0u;
      long long v121 = 0u;
      long long v118 = 0u;
      long long v119 = 0u;
      long long v116 = 0u;
      long long v117 = 0u;
      long long v114 = 0u;
      long long v115 = 0u;
      long long v112 = 0u;
      long long v113 = 0u;
      long long v110 = 0u;
      long long v111 = 0u;
      long long v108 = 0u;
      long long v109 = 0u;
      long long v106 = 0u;
      long long v107 = 0u;
      *(_OWORD *)std::string __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Could not match classLM scale number", 36);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
  }
  if (v4 != v3)
  {
    for (unint64_t i = 0; 0xAAAAAAAAAAAAAAABLL * ((v126 - v125) >> 3) > i; ++i)
    {
      uint64_t v6 = (long long *)(v3 + 24 * i);
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v104, *(const std::string::value_type **)v6, *((void *)v6 + 1));
      }
      else
      {
        long long v7 = *v6;
        v104.__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v7;
      }
      int v103 = 0;
      int v103 = quasar::QsrTextSymbolTable::Find(*((void *)this + 272), (uint64_t)&v104);
      if (v123 == (unsigned char *)v122) {
        float v8 = 1.0;
      }
      else {
        float v8 = *(float *)&v122[i];
      }
      uint64_t v100 = &v103;
      *((float *)std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)this + 409, &v103, (uint64_t)&std::piecewise_construct, (unsigned int **)&v100)+ 8) = v8;
      if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v104.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v104.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v100, size + 6);
      if (v102 >= 0) {
        unint64_t v10 = &v100;
      }
      else {
        unint64_t v10 = v100;
      }
      if (size)
      {
        if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v11 = &v104;
        }
        else {
          unint64_t v11 = (std::string *)v104.__r_.__value_.__r.__words[0];
        }
        memmove(v10, v11, size);
      }
      strcpy((char *)v10 + size, "-start");
      if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v12 = HIBYTE(v104.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v12 = v104.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v97, v12 + 4);
      if (v99 >= 0) {
        float v13 = &v97;
      }
      else {
        float v13 = v97;
      }
      if (v12)
      {
        if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          float v14 = &v104;
        }
        else {
          float v14 = (std::string *)v104.__r_.__value_.__r.__words[0];
        }
        memmove(v13, v14, v12);
      }
      strcpy((char *)v13 + v12, "-end");
      int v15 = v103 + 1;
      quasar::QsrTextSymbolTable::Find(*((quasar::QsrTextSymbolTable **)this + 272), __p);
      if ((SBYTE7(v106) & 0x80u) == 0) {
        unint64_t v16 = (void *)BYTE7(v106);
      }
      else {
        unint64_t v16 = __p[1];
      }
      unint64_t v17 = (void *)HIBYTE(v99);
      if (v99 < 0) {
        unint64_t v17 = (void *)v98;
      }
      if (v16 == v17)
      {
        if (v99 >= 0) {
          size_t v18 = (unsigned __int8 *)&v97;
        }
        else {
          size_t v18 = (unsigned __int8 *)v97;
        }
        if ((BYTE7(v106) & 0x80) != 0)
        {
          size_t v23 = __p[0];
          int v24 = memcmp(__p[0], v18, (size_t)__p[1]);
          operator delete(v23);
          if (!v24) {
            goto LABEL_58;
          }
        }
        else
        {
          if (!BYTE7(v106)) {
            goto LABEL_58;
          }
          uint64_t v19 = 0;
          do
          {
            int v20 = *((unsigned __int8 *)__p + v19);
            int v21 = v18[v19];
          }
          while (v20 == v21 && BYTE7(v106) - 1 != v19++);
          if (v20 == v21) {
            goto LABEL_58;
          }
        }
      }
      else if ((BYTE7(v106) & 0x80) != 0)
      {
        operator delete(__p[0]);
      }
      int v15 = quasar::QsrTextSymbolTable::Find(*((void *)this + 272), (uint64_t)&v97);
      if (v15 == -1)
      {
        long long v120 = 0u;
        long long v121 = 0u;
        long long v118 = 0u;
        long long v119 = 0u;
        long long v116 = 0u;
        long long v117 = 0u;
        long long v114 = 0u;
        long long v115 = 0u;
        long long v112 = 0u;
        long long v113 = 0u;
        long long v110 = 0u;
        long long v111 = 0u;
        long long v108 = 0u;
        long long v109 = 0u;
        long long v106 = 0u;
        long long v107 = 0u;
        *(_OWORD *)std::string __p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        int v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Could not find \"", 16);
        if (v99 >= 0) {
          uint64_t v69 = &v97;
        }
        else {
          uint64_t v69 = v97;
        }
        if (v99 >= 0) {
          uint64_t v70 = HIBYTE(v99);
        }
        else {
          uint64_t v70 = v98;
        }
        float v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)v69, v70);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)"\" in base symbol table", 22);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
      }
LABEL_58:
      int v25 = v103 + 2;
      quasar::QsrTextSymbolTable::Find(*((quasar::QsrTextSymbolTable **)this + 272), __p);
      if ((SBYTE7(v106) & 0x80u) == 0) {
        uint64_t v26 = (void *)BYTE7(v106);
      }
      else {
        uint64_t v26 = __p[1];
      }
      unint64_t v27 = (void *)HIBYTE(v102);
      if (v102 < 0) {
        unint64_t v27 = (void *)v101;
      }
      if (v26 != v27)
      {
        if ((BYTE7(v106) & 0x80) != 0) {
          operator delete(__p[0]);
        }
LABEL_80:
        int v25 = quasar::QsrTextSymbolTable::Find(*((void *)this + 272), (uint64_t)&v100);
        if (v25 == -1)
        {
          long long v120 = 0u;
          long long v121 = 0u;
          long long v118 = 0u;
          long long v119 = 0u;
          long long v116 = 0u;
          long long v117 = 0u;
          long long v114 = 0u;
          long long v115 = 0u;
          long long v112 = 0u;
          long long v113 = 0u;
          long long v110 = 0u;
          long long v111 = 0u;
          long long v108 = 0u;
          long long v109 = 0u;
          long long v106 = 0u;
          long long v107 = 0u;
          *(_OWORD *)std::string __p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          unint64_t v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Could not find \"", 16);
          if (v102 >= 0) {
            int v73 = &v100;
          }
          else {
            int v73 = v100;
          }
          if (v102 >= 0) {
            uint64_t v74 = HIBYTE(v102);
          }
          else {
            uint64_t v74 = v101;
          }
          int v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)v73, v74);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)"\" in base symbol table", 22);
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
        }
        goto LABEL_81;
      }
      if (v102 >= 0) {
        std::string::size_type v28 = (unsigned __int8 *)&v100;
      }
      else {
        std::string::size_type v28 = (unsigned __int8 *)v100;
      }
      if ((BYTE7(v106) & 0x80) != 0)
      {
        std::string::size_type v33 = __p[0];
        int v34 = memcmp(__p[0], v28, (size_t)__p[1]);
        operator delete(v33);
        if (v34) {
          goto LABEL_80;
        }
      }
      else if (BYTE7(v106))
      {
        uint64_t v29 = 0;
        do
        {
          int v30 = *((unsigned __int8 *)__p + v29);
          int v31 = v28[v29];
        }
        while (v30 == v31 && BYTE7(v106) - 1 != v29++);
        if (v30 != v31) {
          goto LABEL_80;
        }
      }
LABEL_81:
      v128[0] = &v103;
      std::string::size_type v35 = std::__hash_table<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a2, &v103, (uint64_t)&std::piecewise_construct, v128);
      *((_DWORD *)v35 + 5) = v25;
      *((_DWORD *)v35 + 6) = v15;
      if (SHIBYTE(v99) < 0) {
        operator delete(v97);
      }
      if (SHIBYTE(v102) < 0) {
        operator delete(v100);
      }
      if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v104.__r_.__value_.__l.__data_);
      }
      uint64_t v3 = v125;
    }
  }
  if (*((char *)this + 3087) < 0)
  {
    if (!*((void *)this + 384)) {
      goto LABEL_155;
    }
  }
  else if (!*((unsigned char *)this + 3087))
  {
    goto LABEL_155;
  }
  if (*((char *)this + 3183) < 0)
  {
    if (!*((void *)this + 396)) {
      goto LABEL_155;
    }
  }
  else if (!*((unsigned char *)this + 3183))
  {
    goto LABEL_155;
  }
  if (*((char *)this + 3207) < 0)
  {
    if (!*((void *)this + 399)) {
      goto LABEL_155;
    }
    goto LABEL_100;
  }
  if (*((unsigned char *)this + 3207))
  {
LABEL_100:
    memset(&v104, 0, sizeof(v104));
    uint64_t v100 = 0;
    uint64_t v101 = 0;
    uint64_t v102 = 0;
    uint64_t v97 = 0;
    uint64_t v98 = 0;
    uint64_t v99 = 0;
    kaldi::SplitStringToVector((const std::string *)((char *)this + 3064), ",", 1, (uint64_t)&v104);
    kaldi::SplitStringToVector((const std::string *)((char *)this + 3160), ",", 1, (uint64_t)&v100);
    kaldi::SplitStringToVector((const std::string *)((char *)this + 3184), ",", 1, (uint64_t)&v97);
    unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v104.__r_.__value_.__l.__size_ - v104.__r_.__value_.__r.__words[0]) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * ((v101 - (uint64_t)v100) >> 3) != v36
      || 0xAAAAAAAAAAAAAAABLL * ((v98 - (uint64_t)v97) >> 3) != v36)
    {
      long long v120 = 0u;
      long long v121 = 0u;
      long long v118 = 0u;
      long long v119 = 0u;
      long long v116 = 0u;
      long long v117 = 0u;
      long long v114 = 0u;
      long long v115 = 0u;
      long long v112 = 0u;
      long long v113 = 0u;
      long long v110 = 0u;
      long long v111 = 0u;
      long long v108 = 0u;
      long long v109 = 0u;
      long long v106 = 0u;
      long long v107 = 0u;
      *(_OWORD *)std::string __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)" Expected number of classLM symbols for base/start/end match: ", 62);
      int v94 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)" ", 1);
      uint64_t v95 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95, (uint64_t)" ", 1);
      std::ostream::operator<<();
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
    if (v104.__r_.__value_.__l.__size_ == v104.__r_.__value_.__r.__words[0])
    {
LABEL_154:
      __p[0] = &v97;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      __p[0] = &v100;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      __p[0] = &v104;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      goto LABEL_155;
    }
    uint64_t v37 = 0;
    if (v36 <= 1) {
      unint64_t v38 = 1;
    }
    else {
      unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v104.__r_.__value_.__l.__size_ - v104.__r_.__value_.__r.__words[0]) >> 3);
    }
    while (1)
    {
      uint64_t v39 = quasar::QsrTextSymbolTable::Find(*((void *)this + 272), v104.__r_.__value_.__r.__words[0] + 24 * v37);
      int v40 = v39;
      if (v39 == -1)
      {
        long long v120 = 0u;
        long long v121 = 0u;
        long long v118 = 0u;
        long long v119 = 0u;
        long long v116 = 0u;
        long long v117 = 0u;
        long long v114 = 0u;
        long long v115 = 0u;
        long long v112 = 0u;
        long long v113 = 0u;
        long long v110 = 0u;
        long long v111 = 0u;
        long long v108 = 0u;
        long long v109 = 0u;
        long long v106 = 0u;
        long long v107 = 0u;
        *(_OWORD *)std::string __p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        unsigned int v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Could not find \"", 16);
        std::string::size_type v77 = v104.__r_.__value_.__r.__words[0] + 24 * v37;
        int v78 = *(char *)(v77 + 23);
        if (v78 >= 0) {
          uint64_t v79 = v104.__r_.__value_.__r.__words[0] + 24 * v37;
        }
        else {
          uint64_t v79 = *(void *)v77;
        }
        if (v78 >= 0) {
          uint64_t v80 = *(unsigned __int8 *)(v77 + 23);
        }
        else {
          uint64_t v80 = *(void *)(v77 + 8);
        }
        unint64_t v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, v79, v80);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)"\" in base symbol table", 22);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
      }
      int v41 = v39 + 1;
      quasar::QsrTextSymbolTable::Find(*((quasar::QsrTextSymbolTable **)this + 272), __p);
      uint64_t v42 = (char *)v97 + 24 * v37;
      if ((SBYTE7(v106) & 0x80u) == 0) {
        int v43 = (void *)BYTE7(v106);
      }
      else {
        int v43 = __p[1];
      }
      unint64_t v44 = v42[23];
      int v45 = (char)v44;
      if ((v44 & 0x80u) != 0) {
        unint64_t v44 = *((void *)v42 + 1);
      }
      if (v43 == (void *)v44)
      {
        if (v45 >= 0) {
          uint64_t v46 = (char *)v97 + 24 * v37;
        }
        else {
          uint64_t v46 = *(char **)v42;
        }
        if ((BYTE7(v106) & 0x80) != 0)
        {
          uint64_t v51 = __p[0];
          int v52 = memcmp(__p[0], v46, (size_t)__p[1]);
          operator delete(v51);
          if (!v52) {
            goto LABEL_130;
          }
        }
        else
        {
          if (!BYTE7(v106)) {
            goto LABEL_130;
          }
          uint64_t v47 = 0;
          do
          {
            int v48 = *((unsigned __int8 *)__p + v47);
            int v49 = v46[v47];
          }
          while (v48 == v49 && BYTE7(v106) - 1 != v47++);
          if (v48 == v49) {
            goto LABEL_130;
          }
        }
      }
      else if ((BYTE7(v106) & 0x80) != 0)
      {
        operator delete(__p[0]);
      }
      uint64_t v53 = quasar::QsrTextSymbolTable::Find(*((void *)this + 272), (uint64_t)v97 + 24 * v37);
      int v41 = v53;
      if (v53 == -1)
      {
        long long v120 = 0u;
        long long v121 = 0u;
        long long v118 = 0u;
        long long v119 = 0u;
        long long v116 = 0u;
        long long v117 = 0u;
        long long v114 = 0u;
        long long v115 = 0u;
        long long v112 = 0u;
        long long v113 = 0u;
        long long v110 = 0u;
        long long v111 = 0u;
        long long v108 = 0u;
        long long v109 = 0u;
        long long v106 = 0u;
        long long v107 = 0u;
        *(_OWORD *)std::string __p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        int v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Could not find \"", 16);
        int v83 = (char *)v97 + 24 * v37;
        int v84 = v83[23];
        if (v84 >= 0) {
          float v85 = (char *)v97 + 24 * v37;
        }
        else {
          float v85 = *(char **)v83;
        }
        if (v84 >= 0) {
          uint64_t v86 = v83[23];
        }
        else {
          uint64_t v86 = *((void *)v83 + 1);
        }
        uint64_t v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)v85, v86);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)"\" in base symbol table", 22);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
      }
LABEL_130:
      int v54 = v40 + 2;
      quasar::QsrTextSymbolTable::Find(*((quasar::QsrTextSymbolTable **)this + 272), __p);
      int v55 = (char *)v100 + 24 * v37;
      if ((SBYTE7(v106) & 0x80u) == 0) {
        int v56 = (void *)BYTE7(v106);
      }
      else {
        int v56 = __p[1];
      }
      unint64_t v57 = v55[23];
      int v58 = (char)v57;
      if ((v57 & 0x80u) != 0) {
        unint64_t v57 = *((void *)v55 + 1);
      }
      if (v56 != (void *)v57)
      {
        if ((BYTE7(v106) & 0x80) != 0) {
          operator delete(__p[0]);
        }
LABEL_152:
        uint64_t v66 = quasar::QsrTextSymbolTable::Find(*((void *)this + 272), (uint64_t)v100 + 24 * v37);
        int v54 = v66;
        if (v66 == -1)
        {
          long long v120 = 0u;
          long long v121 = 0u;
          long long v118 = 0u;
          long long v119 = 0u;
          long long v116 = 0u;
          long long v117 = 0u;
          long long v114 = 0u;
          long long v115 = 0u;
          long long v112 = 0u;
          long long v113 = 0u;
          long long v110 = 0u;
          long long v111 = 0u;
          long long v108 = 0u;
          long long v109 = 0u;
          long long v106 = 0u;
          long long v107 = 0u;
          *(_OWORD *)std::string __p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          unint64_t v88 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Could not find \"", 16);
          uint64_t v89 = (char *)v100 + 24 * v37;
          int v90 = v89[23];
          if (v90 >= 0) {
            unint64_t v91 = (char *)v100 + 24 * v37;
          }
          else {
            unint64_t v91 = *(char **)v89;
          }
          if (v90 >= 0) {
            uint64_t v92 = v89[23];
          }
          else {
            uint64_t v92 = *((void *)v89 + 1);
          }
          int v93 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)v91, v92);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)"\" in base symbol table", 22);
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
        }
        goto LABEL_153;
      }
      if (v58 >= 0) {
        uint64_t v59 = (char *)v100 + 24 * v37;
      }
      else {
        uint64_t v59 = *(char **)v55;
      }
      if ((BYTE7(v106) & 0x80) != 0)
      {
        uint64_t v64 = __p[0];
        int v65 = memcmp(__p[0], v59, (size_t)__p[1]);
        operator delete(v64);
        if (v65) {
          goto LABEL_152;
        }
      }
      else if (BYTE7(v106))
      {
        uint64_t v60 = 0;
        do
        {
          int v61 = *((unsigned __int8 *)__p + v60);
          int v62 = v59[v60];
        }
        while (v61 == v62 && BYTE7(v106) - 1 != v60++);
        if (v61 != v62) {
          goto LABEL_152;
        }
      }
LABEL_153:
      LODWORD(__p[0]) = v40;
      v128[0] = __p;
      int v67 = std::__hash_table<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a2, (int *)__p, (uint64_t)&std::piecewise_construct, v128);
      *((_DWORD *)v67 + 5) = v54;
      *((_DWORD *)v67 + 6) = v41;
      if (++v37 == v38) {
        goto LABEL_154;
      }
    }
  }
LABEL_155:
  if (v122)
  {
    float v123 = v122;
    operator delete(v122);
  }
  __p[0] = &v125;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1B22E6880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  int v30 = *(void **)(v28 - 176);
  if (v30)
  {
    *(void *)(v28 - 168) = v30;
    operator delete(v30);
  }
  std::vector<std::string>::pointer v32 = (void **)(v28 - 152);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v32);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v31);
  _Unwind_Resume(a1);
}

uint64_t **quasar::OnlineLatticeBiglmLmeFasterDecoder::setUpDecoderPassData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  quasar::OnlineLatticeBiglmFasterDecoder::setUpDecoderPassData(a1, a2, a3);
  if (a2 + 408 != a1 + 3208)
  {
    *(_DWORD *)(a2 + 44std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = *(_DWORD *)(a1 + 3240);
    std::__hash_table<std::__hash_value_type<int,std::pair<int,int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,int>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<int,std::pair<int,int>>,void *> *>>((void *)(a2 + 408), *(void **)(a1 + 3224), 0);
  }
  double result = (uint64_t **)(a2 + 368);
  if (a2 + 368 != a1 + 3272)
  {
    uint64_t v6 = *(void **)(a1 + 3272);
    return std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<int,float>,std::__tree_node<std::__value_type<int,float>,void *> *,long>>(result, v6, (void *)(a1 + 3280));
  }
  return result;
}

uint64_t quasar::OnlineLatticeBiglmLmeFasterDecoder::setUpDecoding(kaldi::quasar::Vocab *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  (*(void (**)(kaldi::quasar::Vocab *))(*(void *)a1 + 240))(a1);
  uint64_t v47 = a2;
  (*(void (**)(kaldi::quasar::Vocab *, uint64_t, uint64_t *))(*(void *)a1 + 224))(a1, a2, a4);
  if (quasar::gLogLevel >= 4)
  {
    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    long long v67 = 0u;
    long long v68 = 0u;
    long long v65 = 0u;
    long long v66 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    long long v58 = 0u;
    *(_OWORD *)int v56 = 0u;
    long long v57 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v56);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"split lme tokens: ", 18);
    std::ostream::operator<<();
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v56);
  }
  uint64_t v45 = a3;
  uint64_t v46 = a4;
  *(unsigned char *)(*(void *)a3 + 1088) = *((unsigned char *)a1 + 2886);
  float v8 = (char *)operator new(0x48uLL);
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)float v8 = &unk_1F0A5F418;
  *(_OWORD *)(v8 + 4std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  uint8x8_t v9 = (std::__shared_weak_count *)*((void *)a1 + 302);
  *((void *)a1 + 302) = v8;
  *(_OWORD *)(v8 + ++*(_DWORD *)(result + 24) = 0u;
  *((void *)a1 + 301) = v8 + 24;
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  unint64_t v10 = (uint64_t *)*((void *)a1 + 278);
  for (unint64_t i = (uint64_t *)*((void *)a1 + 279); v10 != i; v10 += 2)
  {
    uint64_t v12 = *((void *)a1 + 301);
    int v13 = *(_DWORD *)(v47 + 448);
    uint64_t v14 = *v10;
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getCachedModel(v14, (uint64_t)__p, &v54);
    LODWORD(v56[0]) = v13;
    v56[1] = v54;
    *(void *)&long long v57 = v55;
    if (v55) {
      atomic_fetch_add_explicit(&v55->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    DWORD2(v57) = -1;
    int v15 = (uint64_t *)*((void *)a1 + 365);
    int v16 = *((_DWORD *)a1 + 720);
    uint64_t v17 = *(void *)(v47 + 216);
    if (v17)
    {
      std::set<int>::set[abi:ne180100]((uint64_t *)&v51, v17 + 32);
    }
    else
    {
      *(_OWORD *)&v51.__r_.__value_.__r.__words[1] = 0uLL;
      v51.__r_.__value_.__r.__words[0] = (std::string::size_type)&v51.__r_.__value_.__l.__size_;
    }
    kaldi::quasar::DeterministicOnDemandFstCreator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::AddBackoffFst(v12, (unsigned int *)v56, v15, 0, 0, v16, 0x20000, (uint64_t)&v51);
    std::__tree<int>::destroy((uint64_t)&v51, (void *)v51.__r_.__value_.__l.__size_);
    if ((void)v57) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v57);
    }
    if (v55) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v55);
    }
    if (v53 < 0) {
      operator delete(__p[0]);
    }
  }
  size_t v18 = (uint64_t *)*((void *)a1 + 284);
  for (unint64_t j = (uint64_t *)*((void *)a1 + 285); v18 != j; v18 += 2)
  {
    uint64_t v20 = *((void *)a1 + 301);
    uint64_t v21 = *v18;
    std::string::basic_string[abi:ne180100]<0>(v56, "");
    quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::getCachedModel(v21, (uint64_t)v56, &v51);
    unint64_t v22 = (const void *)v51.__r_.__value_.__r.__words[0];
    uint64_t v23 = *((void *)a1 + 365);
    uint64_t v24 = *(void *)(v23 + 48);
    if (v24)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::getCachedModel(v24, (uint64_t)__p, &v49);
      uint64_t v25 = v49;
    }
    else
    {
      uint64_t v25 = 0;
    }
    unint64_t v44 = (char *)a1 + 2976;
    kaldi::quasar::DeterministicOnDemandFstCreator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::AddNnlm(v20, v22, (unsigned int **)v23, v47 + 408, (__int32 **)(v23 + 24), (uint64_t)a1 + 3272, v25, 0, 0, 0x20000);
    if (v24)
    {
      if (v50) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v50);
      }
      if (v53 < 0) {
        operator delete(__p[0]);
      }
    }
    if (v51.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v51.__r_.__value_.__l.__size_);
    }
    if (SBYTE7(v57) < 0) {
      operator delete(v56[0]);
    }
  }
  uint64_t v26 = v46;
  uint64_t v27 = *v46;
  if (*((float *)a1 + 574) > 0.0)
  {
    uint64_t v28 = *(void *)(v27 + 24);
    uint64_t v29 = *(uint64_t **)(v28 + 272);
    int v30 = *(uint64_t **)(v28 + 280);
    if (v29 != v30)
    {
      do
      {
        uint64_t v31 = *v29;
        uint64_t v32 = *((void *)a1 + 301);
        uint64_t v33 = *((void *)a1 + 365);
        uint64_t v34 = *(unsigned int *)(v47 + 448);
        uint64_t v35 = *((unsigned int *)a1 + 720);
        uint64_t v36 = *(void *)(v47 + 216);
        if (v36)
        {
          std::set<int>::set[abi:ne180100]((uint64_t *)v56, v36 + 32);
        }
        else
        {
          v56[1] = 0;
          *(void *)&long long v57 = 0;
          v56[0] = &v56[1];
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, uint64_t, void **, uint64_t, uint64_t, char *))(*(void *)v31 + 16))(v31, v32, v33, v34, 0, 0, v35, v56, v47 + 408, 0x20000, v44);
        std::__tree<int>::destroy((uint64_t)v56, (void *)v56[1]);
        v29 += 2;
      }
      while (v29 != v30);
      uint64_t v26 = v46;
      uint64_t v27 = *v46;
    }
  }
  quasar::SpeechRequestData::getRecogRequestTimer(v27, v56);
  uint64_t v37 = (double *)v56[0];
  double v39 = (kaldi::Timer::GetSeconds((kaldi::Timer *)5, v38) - *v37 - *((double *)a1 + 414)) * 1000.0;
  if (v56[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v56[1]);
  }
  uint64_t v40 = *(void *)(*(void *)v45 + 424);
  *(double *)(v40 + 16) = v39 + *(double *)(v40 + 16);
  kaldi::quasar::Vocab::OOvWord(a1, &v51);
  int v41 = std::string::append(&v51, ":lmeLoadingTime");
  long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
  *(void *)&long long v57 = *((void *)&v41->__r_.__value_.__l + 2);
  *(_OWORD *)int v56 = v42;
  v41->__r_.__value_.__l.__size_ = 0;
  v41->__r_.__value_.__r.__words[2] = 0;
  v41->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v48, v39);
  quasar::SpeechRequestResultData::addDump(v40, (long long *)v56, &v48);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  if (SBYTE7(v57) < 0) {
    operator delete(v56[0]);
  }
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  return (*(uint64_t (**)(kaldi::quasar::Vocab *, uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 192))(a1, v47, v45, v26);
}

void sub_1B22E6EF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a43 < 0) {
    operator delete(a38);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

void quasar::OnlineLatticeBiglmLmeFasterDecoder::loadLmeData(std::string::size_type a1, uint64_t a2, uint64_t *a3, quasar::SpeechRequestData **a4)
{
  uint64_t v4 = (uint64_t *)a4;
  std::string::size_type v7 = a1;
  if (*(unsigned char *)(a1 + 2884) && (quasar::SpeechRequestData::isLoadLmeProfile(*a4) & 1) == 0)
  {
    uint64_t v83 = *(void *)(v7 + 2920);
    if (a2 + 320 != v83)
    {
      std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__assign_with_size[abi:ne180100]<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*,fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*>((uint64_t *)(a2 + 320), *(void *)v83, *(void *)(v83 + 8), (uint64_t)(*(void *)(v83 + 8) - *(void *)v83) >> 5);
      uint64_t v83 = *(void *)(v7 + 2920);
    }
    std::allocate_shared[abi:ne180100]<quasar::SymbolTableList,std::allocator<quasar::SymbolTableList>,quasar::SymbolTableList&,void>(*(uint64_t **)(v83 + 88), &v99);
    uint64_t v84 = *a3;
    float v85 = (long long *)(*a3 + 472);
    long long v86 = v99;
    long long v99 = 0uLL;
    uint64_t v87 = *(std::__shared_weak_count **)(v84 + 480);
    *float v85 = v86;
    if (v87)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v87);
      if (*((void *)&v99 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v99 + 1));
      }
    }
    uint64_t v88 = *(void *)(v7 + 2920);
    uint64_t v89 = (uint64_t *)(*a3 + 584);
    if (v89 != (uint64_t *)(v88 + 64)) {
      std::vector<quasar::LmeInfo>::__assign_with_size[abi:ne180100]<quasar::LmeInfo*,quasar::LmeInfo*>(v89, *(long long **)(v88 + 64), *(long long **)(v88 + 72), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v88 + 72) - *(void *)(v88 + 64)) >> 3));
    }
  }
  else
  {
    std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__clear[abi:ne180100]((uint64_t *)(a2 + 320));
    *(void *)(a2 + 3--*(_DWORD *)(a9 + 52) = *(void *)(a2 + 344);
    std::__tree<int>::destroy(a2 + 368, *(void **)(a2 + 376));
    *(void *)(a2 + 376) = 0;
    *(void *)(a2 + 3--*(_DWORD *)(a9 + 84) = 0;
    *(void *)(a2 + 368) = a2 + 376;
    float v8 = *(std::__shared_weak_count **)(a2 + 400);
    *(void *)(a2 + 392) = 0;
    *(void *)(a2 + 40std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = 0;
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    std::vector<quasar::LmeInfo>::__clear[abi:ne180100]((uint64_t *)(*a3 + 584));
    quasar::SymbolTableList::clear(*(quasar::SymbolTableList **)(*a3 + 472));
    uint8x8_t v9 = *(uint64_t **)(*a3 + 472);
    unint64_t v10 = *(std::__shared_weak_count **)(v7 + 2184);
    uint64_t v126 = *(void *)(v7 + 2176);
    uint64_t v127 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    quasar::SymbolTableList::addSymbolTable(v9, &v126, 0, -1);
    if (v127) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v127);
    }
    if (*(unsigned char *)(v7 + 2884))
    {
      quasar::SpeechRequestData::getRecogRequestTimer(*v4, &v99);
      unint64_t v11 = (double *)v99;
      uint64_t v91 = a2 + 392;
      uint64_t v92 = (uint64_t *)(a2 + 320);
      uint64_t v90 = a2;
      *(double *)(v7 + 3312) = kaldi::Timer::GetSeconds((kaldi::Timer *)5, v12) - *v11;
      if (*((void *)&v99 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v99 + 1));
      }
      long long v124 = 0u;
      long long v123 = 0u;
      int v125 = 1065353216;
      v122[0] = 0;
      v122[1] = 0;
      long long v121 = (uint64_t *)v122;
      int v94 = a3;
      std::string::size_type v95 = v7;
      uint64_t v96 = v4;
      if (*(unsigned char *)(v7 + 2884))
      {
        unint64_t v13 = 0;
        uint64_t v14 = (void *)(v7 + 2936);
        while (1)
        {
          LmeDataStreams = (void *)quasar::SpeechRequestData::getLmeDataStreams((quasar::SpeechRequestData *)*v4);
          if (v13 >= (uint64_t)(LmeDataStreams[1] - *LmeDataStreams) >> 4) {
            goto LABEL_89;
          }
          long long v16 = *(_OWORD *)(*(void *)quasar::SpeechRequestData::getLmeDataStreams((quasar::SpeechRequestData *)*v4)
                          + 16 * v13);
          long long v17 = v16;
          if (*((void *)&v16 + 1))
          {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v16 + 1) + 8), 1uLL, memory_order_relaxed);
            long long v120 = v16;
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v16 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          else
          {
            long long v120 = (unint64_t)v16;
          }
          int v18 = quasar::OnlineLatticeBiglmLmeFasterDecoder::readAndCheckLmeData(v7, (uint64_t **)&v120, v13, *(unsigned __int8 *)(*(void *)(*v4 + 24) + 737));
          if (*((void *)&v17 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v17 + 1));
          }
          memset(&v119, 0, sizeof(v119));
          if ((v18 & 0xFFFFFFFD) == 1)
          {
            uint64_t v20 = *(void **)v17;
            uint64_t v19 = *(std::__shared_weak_count **)(v17 + 8);
            if (v19) {
              atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            int v93 = v19;
            std::string::operator=(&v119, (const std::string *)(v17 + 16));
            uint64_t v118 = 0;
            LODWORD(v116) = v20[20];
            *(void *)&long long v99 = &v116;
            uint64_t v118 = *((int *)std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v121, (int *)&v116, (uint64_t)&std::piecewise_construct, (unsigned int **)&v99)+ 8);
            uint64_t v22 = v20[20];
            uint64_t v21 = v20[21];
            LODWORD(v116) = v22;
            *(void *)&long long v99 = &v116;
            uint64_t v23 = std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v121, (int *)&v116, (uint64_t)&std::piecewise_construct, (unsigned int **)&v99);
            *((_DWORD *)v23 + 8) += v21 - v22 + 1;
            if (v118)
            {
              std::allocate_shared[abi:ne180100]<quasar::QsrTextSymbolTable,std::allocator<quasar::QsrTextSymbolTable>,std::shared_ptr<quasar::QsrTextSymbolTable> const&,long long &,void>(v20 + 28, &v118, &v116);
            }
            else
            {
              uint64_t v25 = (std::__shared_weak_count *)v20[29];
              uint64_t v116 = v20[28];
              long long v117 = v25;
              if (v25) {
                atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
              }
            }
            if (quasar::gLogLevel >= 4)
            {
              long long v114 = 0u;
              long long v115 = 0u;
              long long v112 = 0u;
              long long v113 = 0u;
              long long v110 = 0u;
              long long v111 = 0u;
              long long v108 = 0u;
              long long v109 = 0u;
              long long v106 = 0u;
              long long v107 = 0u;
              long long v105 = 0u;
              long long v103 = 0u;
              long long v104 = 0u;
              long long v101 = 0u;
              long long v102 = 0u;
              long long v99 = 0u;
              *(_OWORD *)std::string __p = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v99);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v99, (uint64_t)"LME container ", 14);
              uint64_t v26 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)": offset ", 9);
              uint64_t v27 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" firstKey ", 10);
              uint64_t v28 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" lastKey ", 9);
              std::ostream::operator<<();
              quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v99);
            }
            uint64_t v29 = *(uint64_t **)(*a3 + 472);
            uint64_t v97 = v116;
            uint64_t v98 = v117;
            if (v117) {
              atomic_fetch_add_explicit(&v117->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            int v30 = quasar::SymbolTableList::addSymbolTable(v29, &v97, v118 + v20[20], v13);
            if (v98) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v98);
            }
            if (v30)
            {
              uint64_t v31 = (unsigned __int8 *)v20[25];
              uint64_t v32 = (unsigned __int8 *)(v20 + 26);
              if (v31 != (unsigned __int8 *)(v20 + 26))
              {
                char v33 = 0;
                while (1)
                {
                  if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v14, v31 + 32))
                  {
                    uint64_t v34 = *((void *)v31 + 7);
                    if (v34)
                    {
                      if (((*(uint64_t (**)(uint64_t))(*(void *)v34 + 24))(v34) & 0x80000000) == 0)
                      {
                        uint64_t v35 = *((void *)v31 + 7);
                        uint64_t v36 = (*(uint64_t (**)(uint64_t))(*(void *)v35 + 24))(v35);
                        if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v35 + 40))(v35, v36))
                        {
                          *(void *)&long long v99 = v31 + 32;
                          uint64_t v37 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v123, v31 + 32, (uint64_t)&std::piecewise_construct, (long long **)&v99);
                          if (v118) {
                            std::allocate_shared[abi:ne180100]<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>,std::allocator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::quasar::OffsetOutputLabelMapper,void>();
                          }
                          uint64_t v45 = *((void *)v31 + 8);
                          *(void *)&long long v99 = *((void *)v31 + 7);
                          *((void *)&v99 + 1) = v45;
                          if (v45) {
                            atomic_fetch_add_explicit((atomic_ullong *volatile)(v45 + 8), 1uLL, memory_order_relaxed);
                          }
                          std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::push_back[abi:ne180100]((uint64_t *)v37 + 5, &v99);
                          if (*((void *)&v99 + 1)) {
                            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v99
                          }
                                                                                     + 1));
                          char v33 = 1;
                          goto LABEL_63;
                        }
                      }
                    }
                    if (quasar::gLogLevel >= 4)
                    {
                      long long v114 = 0u;
                      long long v115 = 0u;
                      long long v112 = 0u;
                      long long v113 = 0u;
                      long long v110 = 0u;
                      long long v111 = 0u;
                      long long v108 = 0u;
                      long long v109 = 0u;
                      long long v106 = 0u;
                      long long v107 = 0u;
                      long long v105 = 0u;
                      long long v103 = 0u;
                      long long v104 = 0u;
                      long long v101 = 0u;
                      long long v102 = 0u;
                      long long v99 = 0u;
                      *(_OWORD *)std::string __p = 0u;
                      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v99);
                      clockid_t v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v99, (uint64_t)"Ignoring null or arc-less FST for template ", 43);
                      int v39 = (char)v31[55];
                      if (v39 >= 0) {
                        uint64_t v40 = (uint64_t)(v31 + 32);
                      }
                      else {
                        uint64_t v40 = *((void *)v31 + 4);
                      }
                      if (v39 >= 0) {
                        uint64_t v41 = v31[55];
                      }
                      else {
                        uint64_t v41 = *((void *)v31 + 5);
                      }
LABEL_57:
                      int v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, v40, v41);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)" in stream # ", 13);
                      unint64_t v44 = (void *)std::ostream::operator<<();
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)".", 1);
                      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v99);
                    }
                  }
                  else if (quasar::gLogLevel >= 4)
                  {
                    long long v114 = 0u;
                    long long v115 = 0u;
                    long long v112 = 0u;
                    long long v113 = 0u;
                    long long v110 = 0u;
                    long long v111 = 0u;
                    long long v108 = 0u;
                    long long v109 = 0u;
                    long long v106 = 0u;
                    long long v107 = 0u;
                    long long v105 = 0u;
                    long long v103 = 0u;
                    long long v104 = 0u;
                    long long v101 = 0u;
                    long long v102 = 0u;
                    long long v99 = 0u;
                    *(_OWORD *)std::string __p = 0u;
                    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v99);
                    clockid_t v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v99, (uint64_t)"Ignoring unsupported template ", 30);
                    int v42 = (char)v31[55];
                    if (v42 >= 0) {
                      uint64_t v40 = (uint64_t)(v31 + 32);
                    }
                    else {
                      uint64_t v40 = *((void *)v31 + 4);
                    }
                    if (v42 >= 0) {
                      uint64_t v41 = v31[55];
                    }
                    else {
                      uint64_t v41 = *((void *)v31 + 5);
                    }
                    goto LABEL_57;
                  }
LABEL_63:
                  uint64_t v46 = (unsigned __int8 *)*((void *)v31 + 1);
                  if (v46)
                  {
                    do
                    {
                      uint64_t v47 = v46;
                      uint64_t v46 = *(unsigned __int8 **)v46;
                    }
                    while (v46);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v47 = (unsigned __int8 *)*((void *)v31 + 2);
                      BOOL v48 = *(void *)v47 == (void)v31;
                      uint64_t v31 = v47;
                    }
                    while (!v48);
                  }
                  uint64_t v31 = v47;
                  if (v47 == v32) {
                    goto LABEL_72;
                  }
                }
              }
              char v33 = 0;
LABEL_72:
              int v24 = v33 & 1;
              a3 = v94;
              std::string::size_type v7 = v95;
            }
            else
            {
              int v24 = 0;
              int v18 = 6;
            }
            if (v117) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v117);
            }
            if (v93) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v93);
            }
          }
          else
          {
            int v24 = 0;
          }
          uint64_t v49 = *a3;
          LODWORD(v99) = *(_DWORD *)(v17 + 40);
          *(void *)((char *)&v99 + 4) = __PAIR64__(v24, v18);
          if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)__p, v119.__r_.__value_.__l.__data_, v119.__r_.__value_.__l.__size_);
          }
          else
          {
            *(_OWORD *)std::string __p = *(_OWORD *)&v119.__r_.__value_.__l.__data_;
            *(void *)&long long v101 = *((void *)&v119.__r_.__value_.__l + 2);
          }
          uint64_t v4 = v96;
          std::vector<quasar::LmeInfo>::emplace_back<quasar::LmeInfo>((uint64_t *)(v49 + 584), (uint64_t *)&v99);
          if (SBYTE7(v101) < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0) {
            break;
          }
          if (*((void *)&v17 + 1)) {
            goto LABEL_84;
          }
LABEL_85:
          ++v13;
          if (!*(unsigned char *)(v7 + 2884)) {
            goto LABEL_89;
          }
        }
        operator delete(v119.__r_.__value_.__l.__data_);
        if (!*((void *)&v17 + 1)) {
          goto LABEL_85;
        }
LABEL_84:
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v17 + 1));
        goto LABEL_85;
      }
LABEL_89:
      float v50 = (void *)quasar::SpeechRequestData::getLmeDataStreams((quasar::SpeechRequestData *)*v4);
      if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(*a3 + 592) - *(void *)(*a3 + 584)) >> 3) != (uint64_t)(v50[1] - *v50) >> 4
        && quasar::gLogLevel >= 2)
      {
        long long v114 = 0u;
        long long v115 = 0u;
        long long v112 = 0u;
        long long v113 = 0u;
        long long v110 = 0u;
        long long v111 = 0u;
        long long v108 = 0u;
        long long v109 = 0u;
        long long v106 = 0u;
        long long v107 = 0u;
        long long v105 = 0u;
        long long v103 = 0u;
        long long v104 = 0u;
        long long v101 = 0u;
        long long v102 = 0u;
        long long v99 = 0u;
        *(_OWORD *)std::string __p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v99);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v99, (uint64_t)"lmeDataStreams and lmeInfos size mismatch. Should NEVER happen", 62);
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v99);
      }
      quasar::SpeechRequestData::getRecogRequestTimer(*v4, &v99);
      kaldi::Timer::GetSeconds((kaldi::Timer *)5, v52);
      if (*((void *)&v99 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v99 + 1));
      }
      char v53 = (long long *)v124;
      if ((void)v124)
      {
        int v54 = (void *)(v7 + 2936);
        int v55 = (int *)(v7 + 3328);
        int v56 = (int *)(v7 + 3332);
        uint64_t v57 = v7 + 3016;
        do
        {
          if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v54, (unsigned __int8 *)v53 + 16))
          {
            long long v58 = (char *)*((void *)v53 + 5);
            long long v59 = (char *)*((void *)v53 + 6);
            if (v58 != v59)
            {
              if ((unint64_t)(v59 - v58) >= 0x11 && *v55 && *v56) {
                std::allocate_shared[abi:ne180100]<fst::quasar::MergeTrieFst,std::allocator<fst::quasar::MergeTrieFst>,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> const&,int &,int &,std::string const&,void>((uint64_t)&v119, (uint64_t)v53 + 40, v55, v56, v53 + 1);
              }
              uint64_t v64 = *(void *)v58;
              long long v65 = (std::__shared_weak_count *)*((void *)v58 + 1);
              if (v65) {
                atomic_fetch_add_explicit(&v65->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              int v66 = *(_DWORD *)std::map<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::at(v57, (const void **)v53 + 2);
              if (v65)
              {
                atomic_fetch_add_explicit(&v65->__shared_owners_, 1uLL, memory_order_relaxed);
                *((void *)&v99 + 1) = v64;
                __p[0] = v65;
                atomic_fetch_add_explicit(&v65->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              else
              {
                *((void *)&v99 + 1) = v64;
                __p[0] = 0;
              }
              LODWORD(v99) = v66;
              LODWORD(__p[1]) = 0;
              std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::push_back[abi:ne180100](v92, (uint64_t)&v99);
              if (__p[0]) {
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[0]);
              }
              if (v65)
              {
                std::__shared_weak_count::__release_shared[abi:ne180100](v65);
                std::__shared_weak_count::__release_shared[abi:ne180100](v65);
              }
              a3 = v94;
              std::string::size_type v7 = v95;
            }
          }
          else if (quasar::gLogLevel >= 4)
          {
            long long v114 = 0u;
            long long v115 = 0u;
            long long v112 = 0u;
            long long v113 = 0u;
            long long v110 = 0u;
            long long v111 = 0u;
            long long v108 = 0u;
            long long v109 = 0u;
            long long v106 = 0u;
            long long v107 = 0u;
            long long v105 = 0u;
            long long v103 = 0u;
            long long v104 = 0u;
            long long v101 = 0u;
            long long v102 = 0u;
            long long v99 = 0u;
            *(_OWORD *)std::string __p = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v99);
            long long v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v99, (uint64_t)"Ignoring unsupported template ", 30);
            int v61 = *((char *)v53 + 39);
            if (v61 >= 0) {
              uint64_t v62 = (uint64_t)(v53 + 1);
            }
            else {
              uint64_t v62 = *((void *)v53 + 2);
            }
            if (v61 >= 0) {
              uint64_t v63 = *((unsigned __int8 *)v53 + 39);
            }
            else {
              uint64_t v63 = *((void *)v53 + 3);
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, v62, v63);
            quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v99);
          }
          char v53 = *(long long **)v53;
        }
        while (v53);
      }
      quasar::SpeechRequestData::getRecogRequestTimer(*v96, &v99);
      kaldi::Timer::GetSeconds((kaldi::Timer *)5, v67);
      if (*((void *)&v99 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v99 + 1));
      }
      if (quasar::gLogLevel >= 4)
      {
        long long v114 = 0u;
        long long v115 = 0u;
        long long v112 = 0u;
        long long v113 = 0u;
        long long v110 = 0u;
        long long v111 = 0u;
        long long v108 = 0u;
        long long v109 = 0u;
        long long v106 = 0u;
        long long v107 = 0u;
        long long v105 = 0u;
        long long v103 = 0u;
        long long v104 = 0u;
        long long v101 = 0u;
        long long v102 = 0u;
        long long v99 = 0u;
        *(_OWORD *)std::string __p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v99);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v99, (uint64_t)"lmeMergeInitTime ", 17);
        std::ostream::operator<<();
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v99);
      }
      long long v68 = v92;
      quasar::OnlineLatticeBiglmLmeFasterDecoder::insertLocationSpecificModels(v7, a3, (quasar::SpeechRequestData **)v96, v92, v90 + 344, (quasar::Location *)(v90 + 232), (uint64_t *)&v99);
      long long v69 = v99;
      long long v99 = 0uLL;
      long long v70 = *(std::__shared_weak_count **)(v90 + 464);
      *(_OWORD *)(v91 + 64) = v69;
      if (v70)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v70);
        if (*((void *)&v99 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v99 + 1));
        }
      }
      quasar::OnlineLatticeBiglmLmeFasterDecoder::appendEmptyFsts((void *)v7, v92);
      uint64_t v71 = *(void *)(v7 + 3296);
      uint64_t v72 = *(void *)(v7 + 3304);
      if (v72) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v72 + 8), 1uLL, memory_order_relaxed);
      }
      int v73 = *(std::__shared_weak_count **)(v90 + 400);
      *(void *)(v90 + 392) = v71;
      *(void *)(v90 + 40std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = v72;
      if (v73) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v73);
      }
      quasar::OnlineTransducerGraphSearchDecoder::LmeCreationDependencies::clear(*(quasar::OnlineTransducerGraphSearchDecoder::LmeCreationDependencies **)(v7 + 2920));
      uint64_t v74 = *(uint64_t **)(v7 + 2920);
      if (v74 != v92)
      {
        std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__assign_with_size[abi:ne180100]<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*,fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*>(v74, *(void *)(v90 + 320), *(void *)(v90 + 328), (uint64_t)(*(void *)(v90 + 328) - *(void *)(v90 + 320)) >> 5);
        long long v68 = *(uint64_t **)(v7 + 2920);
      }
      if (v68 + 3 != (uint64_t *)(v90 + 344))
      {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v68 + 24, *(char **)(v90 + 344), *(void *)(v90 + 352), (uint64_t)(*(void *)(v90 + 352) - *(void *)(v90 + 344)) >> 2);
        long long v68 = *(uint64_t **)(v7 + 2920);
      }
      uint64_t v75 = *(void *)(v7 + 3296);
      uint64_t v76 = *(void *)(v7 + 3304);
      if (v76) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v76 + 8), 1uLL, memory_order_relaxed);
      }
      std::string::size_type v77 = (std::__shared_weak_count *)v68[7];
      v68[6] = v75;
      v68[7] = v76;
      if (v77) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v77);
      }
      uint64_t v78 = *a3;
      uint64_t v79 = (uint64_t *)(*(void *)(v7 + 2920) + 64);
      if (v79 != (uint64_t *)(*a3 + 584))
      {
        std::vector<quasar::LmeInfo>::__assign_with_size[abi:ne180100]<quasar::LmeInfo*,quasar::LmeInfo*>(v79, *(long long **)(v78 + 584), *(long long **)(v78 + 592), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v78 + 592) - *(void *)(v78 + 584)) >> 3));
        uint64_t v78 = *a3;
      }
      std::allocate_shared[abi:ne180100]<quasar::SymbolTableList,std::allocator<quasar::SymbolTableList>,quasar::SymbolTableList&,void>(*(uint64_t **)(v78 + 472), &v99);
      uint64_t v80 = *(void *)(v7 + 2920);
      long long v81 = v99;
      long long v99 = 0uLL;
      int v82 = *(std::__shared_weak_count **)(v80 + 96);
      *(_OWORD *)(v80 + 88) = v81;
      if (v82)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v82);
        if (*((void *)&v99 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v99 + 1));
        }
      }
      std::__tree<int>::destroy((uint64_t)&v121, v122[0]);
      std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>::~__hash_table((uint64_t)&v123);
    }
  }
}

void sub_1B22E7CC4(_Unwind_Exception *a1)
{
  std::__tree<int>::destroy(v2 - 216, *(void **)(v1 + 56));
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>::~__hash_table(v2 - 192);
  _Unwind_Resume(a1);
}

uint64_t quasar::OnlineLatticeBiglmLmeFasterDecoder::readAndCheckLmeData(uint64_t a1, uint64_t **a2, uint64_t a3, int a4)
{
  uint64_t v4 = *a2;
  if (!*a2)
  {
    if (quasar::gLogLevel >= 4)
    {
      long long v97 = 0u;
      long long v98 = 0u;
      long long v95 = 0u;
      long long v96 = 0u;
      long long v93 = 0u;
      long long v94 = 0u;
      long long v91 = 0u;
      long long v92 = 0u;
      long long v89 = 0u;
      long long v90 = 0u;
      long long v87 = 0u;
      long long v88 = 0u;
      long long v85 = 0u;
      long long v86 = 0u;
      long long v83 = 0u;
      long long v84 = 0u;
      long long v82 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)"LME container ", 14);
      long long v16 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" is null.", 9);
      goto LABEL_18;
    }
    return 2;
  }
  if (quasar::gLogLevel >= 4)
  {
    long long v97 = 0u;
    long long v98 = 0u;
    long long v95 = 0u;
    long long v96 = 0u;
    long long v93 = 0u;
    long long v94 = 0u;
    long long v91 = 0u;
    long long v92 = 0u;
    long long v89 = 0u;
    long long v90 = 0u;
    long long v87 = 0u;
    long long v88 = 0u;
    long long v85 = 0u;
    long long v86 = 0u;
    long long v83 = 0u;
    long long v84 = 0u;
    long long v82 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)"Reading LME container ", 22);
    float v8 = (void *)std::ostream::operator<<();
    uint8x8_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" for user ", 10);
    int v10 = *((char *)*a2 + 39);
    if (v10 >= 0) {
      uint64_t v11 = (uint64_t)(*a2 + 2);
    }
    else {
      uint64_t v11 = (*a2)[2];
    }
    if (v10 >= 0) {
      uint64_t v12 = *((unsigned __int8 *)*a2 + 39);
    }
    else {
      uint64_t v12 = (*a2)[3];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v82);
    uint64_t v4 = *a2;
  }
  uint64_t v13 = *v4;
  if (!*v4)
  {
    if (quasar::gLogLevel >= 4)
    {
      long long v97 = 0u;
      long long v98 = 0u;
      long long v95 = 0u;
      long long v96 = 0u;
      long long v93 = 0u;
      long long v94 = 0u;
      long long v91 = 0u;
      long long v92 = 0u;
      long long v89 = 0u;
      long long v90 = 0u;
      long long v87 = 0u;
      long long v88 = 0u;
      long long v85 = 0u;
      long long v86 = 0u;
      long long v83 = 0u;
      long long v84 = 0u;
      long long v82 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)"LME container data ", 19);
      long long v17 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" is null.", 9);
      goto LABEL_18;
    }
    return 2;
  }
  uint64_t v14 = *(unsigned int *)(v13 + 268);
  if (v14 == 2)
  {
    if (quasar::gLogLevel >= 4)
    {
      long long v97 = 0u;
      long long v98 = 0u;
      long long v95 = 0u;
      long long v96 = 0u;
      long long v93 = 0u;
      long long v94 = 0u;
      long long v91 = 0u;
      long long v92 = 0u;
      long long v89 = 0u;
      long long v90 = 0u;
      long long v87 = 0u;
      long long v88 = 0u;
      long long v85 = 0u;
      long long v86 = 0u;
      long long v83 = 0u;
      long long v84 = 0u;
      long long v82 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)"LME data stream ", 16);
      int v15 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" is null.", 9);
LABEL_18:
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v82);
      return 2;
    }
    return 2;
  }
  if ((v14 & 0xFFFFFFFD) == 4) {
    return v14;
  }
  uint64_t v19 = *(unsigned __int8 *)(v13 + 199);
  if ((v19 & 0x80u) == 0) {
    uint64_t v20 = *(unsigned __int8 *)(v13 + 199);
  }
  else {
    uint64_t v20 = *(void *)(v13 + 184);
  }
  uint64_t v21 = *(unsigned __int8 *)(a1 + 231);
  int v22 = (char)v21;
  if ((v21 & 0x80u) != 0) {
    uint64_t v21 = *(void *)(a1 + 216);
  }
  if (v20 != v21) {
    goto LABEL_38;
  }
  if (v22 >= 0) {
    uint64_t v23 = (unsigned __int8 *)(a1 + 208);
  }
  else {
    uint64_t v23 = *(unsigned __int8 **)(a1 + 208);
  }
  if ((v19 & 0x80) != 0)
  {
    if (memcmp(*(const void **)(v13 + 176), v23, *(void *)(v13 + 184)))
    {
LABEL_38:
      if (quasar::gLogLevel >= 2)
      {
        long long v97 = 0u;
        long long v98 = 0u;
        long long v95 = 0u;
        long long v96 = 0u;
        long long v93 = 0u;
        long long v94 = 0u;
        long long v91 = 0u;
        long long v92 = 0u;
        long long v89 = 0u;
        long long v90 = 0u;
        long long v87 = 0u;
        long long v88 = 0u;
        long long v85 = 0u;
        long long v86 = 0u;
        long long v83 = 0u;
        long long v84 = 0u;
        long long v82 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)"LME data stream ", 16);
        uint64_t v25 = (void *)std::ostream::operator<<();
        uint64_t v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" has phone set version ", 23);
        int v27 = *(char *)(v13 + 199);
        if (v27 >= 0) {
          uint64_t v28 = v13 + 176;
        }
        else {
          uint64_t v28 = *(void *)(v13 + 176);
        }
        if (v27 >= 0) {
          uint64_t v29 = *(unsigned __int8 *)(v13 + 199);
        }
        else {
          uint64_t v29 = *(void *)(v13 + 184);
        }
        int v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, v28, v29);
        uint64_t v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" which is different from model phone set version ", 49);
        int v32 = *(char *)(a1 + 231);
        if (v32 >= 0) {
          uint64_t v33 = a1 + 208;
        }
        else {
          uint64_t v33 = *(void *)(a1 + 208);
        }
        if (v32 >= 0) {
          uint64_t v34 = *(unsigned __int8 *)(a1 + 231);
        }
        else {
          uint64_t v34 = *(void *)(a1 + 216);
        }
        uint64_t v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, v33, v34);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)". This data stream will not be used.", 36);
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v82);
      }
      return 5;
    }
  }
  else if (*(unsigned char *)(v13 + 199))
  {
    int v24 = (unsigned __int8 *)(v13 + 176);
    while (*v24 == *v23)
    {
      ++v24;
      ++v23;
      if (!--v19) {
        goto LABEL_53;
      }
    }
    goto LABEL_38;
  }
LABEL_53:
  if (*(unsigned __int8 *)(v13 + 392) != *(unsigned __int8 *)(a1 + 360))
  {
    if (quasar::gLogLevel < 4) {
      return 5;
    }
    long long v97 = 0u;
    long long v98 = 0u;
    long long v95 = 0u;
    long long v96 = 0u;
    long long v93 = 0u;
    long long v94 = 0u;
    long long v91 = 0u;
    long long v92 = 0u;
    long long v89 = 0u;
    long long v90 = 0u;
    long long v87 = 0u;
    long long v88 = 0u;
    long long v85 = 0u;
    long long v86 = 0u;
    long long v83 = 0u;
    long long v84 = 0u;
    long long v82 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)"LME data stream useWordpiece=", 29);
    long long v59 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)" does not match model (model useWordpiece=", 42);
    long long v60 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)"). This data stream will not be used.", 37);
LABEL_111:
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v82);
    return 5;
  }
  if (!*(unsigned char *)(v13 + 392)
    || *(int *)(v13 + 8) < 16
    || !std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((unsigned __int8 *)(v13 + 296), (unsigned __int8 *)(a1 + 336)))
  {
    goto LABEL_74;
  }
  if (quasar::gLogLevel >= 4)
  {
    long long v97 = 0u;
    long long v98 = 0u;
    long long v95 = 0u;
    long long v96 = 0u;
    long long v93 = 0u;
    long long v94 = 0u;
    long long v91 = 0u;
    long long v92 = 0u;
    long long v89 = 0u;
    long long v90 = 0u;
    long long v87 = 0u;
    long long v88 = 0u;
    long long v85 = 0u;
    long long v86 = 0u;
    long long v83 = 0u;
    long long v84 = 0u;
    long long v82 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v82);
    uint64_t v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)"LME data stream assetPath=", 26);
    int v37 = *(char *)(v13 + 319);
    if (v37 >= 0) {
      uint64_t v38 = v13 + 296;
    }
    else {
      uint64_t v38 = *(void *)(v13 + 296);
    }
    if (v37 >= 0) {
      uint64_t v39 = *(unsigned __int8 *)(v13 + 319);
    }
    else {
      uint64_t v39 = *(void *)(v13 + 304);
    }
    uint64_t v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, v38, v39);
    uint64_t v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)" does not match model (lmeAssetPath=", 36);
    int v42 = *(char *)(a1 + 359);
    if (v42 >= 0) {
      uint64_t v43 = a1 + 336;
    }
    else {
      uint64_t v43 = *(void *)(a1 + 336);
    }
    if (v42 >= 0) {
      uint64_t v44 = *(unsigned __int8 *)(a1 + 359);
    }
    else {
      uint64_t v44 = *(void *)(a1 + 344);
    }
    uint64_t v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, v43, v44);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)")", 1);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v82);
  }
  if (!a4)
  {
    if (quasar::gLogLevel < 4) {
      return 5;
    }
    long long v97 = 0u;
    long long v98 = 0u;
    long long v95 = 0u;
    long long v96 = 0u;
    long long v93 = 0u;
    long long v94 = 0u;
    long long v91 = 0u;
    long long v92 = 0u;
    long long v89 = 0u;
    long long v90 = 0u;
    long long v87 = 0u;
    long long v88 = 0u;
    long long v85 = 0u;
    long long v86 = 0u;
    long long v83 = 0u;
    long long v84 = 0u;
    long long v82 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)"This data stream will not be used.", 34);
    goto LABEL_111;
  }
  if (quasar::gLogLevel >= 4)
  {
    long long v97 = 0u;
    long long v98 = 0u;
    long long v95 = 0u;
    long long v96 = 0u;
    long long v93 = 0u;
    long long v94 = 0u;
    long long v91 = 0u;
    long long v92 = 0u;
    long long v89 = 0u;
    long long v90 = 0u;
    long long v87 = 0u;
    long long v88 = 0u;
    long long v85 = 0u;
    long long v86 = 0u;
    long long v83 = 0u;
    long long v84 = 0u;
    long long v82 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)"Check is disabled! Continuing on the assumption that the LME data is actually compatible", 88);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v82);
  }
LABEL_74:
  uint64_t v46 = *(void *)(v13 + 160);
  if (v46 == -1 || (uint64_t v47 = *(void *)(v13 + 168), v47 == -1))
  {
    if (quasar::gLogLevel >= 4)
    {
      long long v97 = 0u;
      long long v98 = 0u;
      long long v95 = 0u;
      long long v96 = 0u;
      long long v93 = 0u;
      long long v94 = 0u;
      long long v91 = 0u;
      long long v92 = 0u;
      long long v89 = 0u;
      long long v90 = 0u;
      long long v87 = 0u;
      long long v88 = 0u;
      long long v85 = 0u;
      long long v86 = 0u;
      long long v83 = 0u;
      long long v84 = 0u;
      long long v82 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)"Bad LME data (empty): stream=", 29);
      int v61 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)", symTableFirstKey=", 19);
      uint64_t v62 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)", symTableLastKey=", 18);
      std::ostream::operator<<();
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v82);
    }
    return 6;
  }
  if (v47 < v46) {
    goto LABEL_114;
  }
  uint64_t v48 = *(void *)(v13 + 224);
  uint64_t v49 = (*(uint64_t (**)(void, unsigned __int8 *))(**(void **)(v48 + 96) + 112))(*(void *)(v48 + 96), v23);
  if ((v49 & 0x8000000000000000) == 0) {
    v49 += *(void *)(v48 + 120);
  }
  if (v47 != v49 - 1)
  {
LABEL_114:
    if (quasar::gLogLevel >= 1)
    {
      long long v97 = 0u;
      long long v98 = 0u;
      long long v95 = 0u;
      long long v96 = 0u;
      long long v93 = 0u;
      long long v94 = 0u;
      long long v91 = 0u;
      long long v92 = 0u;
      long long v89 = 0u;
      long long v90 = 0u;
      long long v87 = 0u;
      long long v88 = 0u;
      long long v85 = 0u;
      long long v86 = 0u;
      long long v83 = 0u;
      long long v84 = 0u;
      long long v82 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)"Bad LME data (invalid last key): stream=", 40);
      uint64_t v63 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)", symTableFirstKey=", 19);
      uint64_t v64 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)", symTableLastKey=", 18);
      long long v65 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)", symTable->AvailableKey()=", 27);
      (*(void (**)(void))(**(void **)(*(void *)(v13 + 224) + 96) + 112))(*(void *)(*(void *)(v13 + 224) + 96));
      std::ostream::operator<<();
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v82);
    }
    return 6;
  }
  if (v14 == 1)
  {
    if (!*(void *)(a1 + 320) || (float v50 = *(void **)(v13 + 240), v50 == (void *)(v13 + 248)))
    {
LABEL_106:
      if (*(_DWORD *)(v13 + 264) >= *(_DWORD *)(a1 + 328)) {
        return 1;
      }
      if (quasar::gLogLevel >= 4)
      {
        long long v97 = 0u;
        long long v98 = 0u;
        long long v95 = 0u;
        long long v96 = 0u;
        long long v93 = 0u;
        long long v94 = 0u;
        long long v91 = 0u;
        long long v92 = 0u;
        long long v89 = 0u;
        long long v90 = 0u;
        long long v87 = 0u;
        long long v88 = 0u;
        long long v85 = 0u;
        long long v86 = 0u;
        long long v83 = 0u;
        long long v84 = 0u;
        long long v82 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)"G2P model version ", 18);
        long long v58 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)" in blob is older than datapack's version ", 42);
        std::ostream::operator<<();
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v82);
      }
    }
    else
    {
      while (1)
      {
        if (*((char *)v50 + 55) < 0) {
          std::string::__init_copy_ctor_external(&v81, (const std::string::value_type *)v50[4], v50[5]);
        }
        else {
          std::string v81 = *(std::string *)(v50 + 4);
        }
        if (*((char *)v50 + 79) < 0) {
          std::string::__init_copy_ctor_external(&v80, (const std::string::value_type *)v50[7], v50[8]);
        }
        else {
          std::string v80 = *(std::string *)(v50 + 7);
        }
        memset(&v79, 0, sizeof(v79));
        uint64_t v51 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 256, (const void **)&v81.__r_.__value_.__l.__data_);
        if (a1 + 264 == v51) {
          clockid_t v52 = &v81;
        }
        else {
          clockid_t v52 = (std::string *)(v51 + 56);
        }
        std::string::operator=(&v79, v52);
        uint64_t v53 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 304, (const void **)&v79.__r_.__value_.__l.__data_);
        uint64_t v54 = v53;
        if (a1 + 312 == v53)
        {
          if (quasar::gLogLevel < 4) {
            goto LABEL_143;
          }
          long long v97 = 0u;
          long long v98 = 0u;
          long long v95 = 0u;
          long long v96 = 0u;
          long long v93 = 0u;
          long long v94 = 0u;
          long long v91 = 0u;
          long long v92 = 0u;
          long long v89 = 0u;
          long long v90 = 0u;
          long long v87 = 0u;
          long long v88 = 0u;
          long long v85 = 0u;
          long long v86 = 0u;
          long long v83 = 0u;
          long long v84 = 0u;
          long long v82 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v82);
          int v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)"Category ", 9);
          if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            clockid_t v67 = &v81;
          }
          else {
            clockid_t v67 = (std::string *)v81.__r_.__value_.__r.__words[0];
          }
          if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v81.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v81.__r_.__value_.__l.__size_;
          }
          long long v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)v67, size);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)" in blob is not supported by datapack.", 38);
          goto LABEL_142;
        }
        if (std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((unsigned __int8 *)(v53 + 56), (unsigned __int8 *)&v80))
        {
          break;
        }
        if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v79.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v80.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v81.__r_.__value_.__l.__data_);
        }
        int v55 = (void *)v50[1];
        if (v55)
        {
          do
          {
            int v56 = v55;
            int v55 = (void *)*v55;
          }
          while (v55);
        }
        else
        {
          do
          {
            int v56 = (void *)v50[2];
            BOOL v57 = *v56 == (void)v50;
            float v50 = v56;
          }
          while (!v57);
        }
        float v50 = v56;
        if (v56 == (void *)(v13 + 248)) {
          goto LABEL_106;
        }
      }
      if (quasar::gLogLevel < 4) {
        goto LABEL_143;
      }
      long long v97 = 0u;
      long long v98 = 0u;
      long long v95 = 0u;
      long long v96 = 0u;
      long long v93 = 0u;
      long long v94 = 0u;
      long long v91 = 0u;
      long long v92 = 0u;
      long long v89 = 0u;
      long long v90 = 0u;
      long long v87 = 0u;
      long long v88 = 0u;
      long long v85 = 0u;
      long long v86 = 0u;
      long long v83 = 0u;
      long long v84 = 0u;
      long long v82 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v82);
      long long v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)"Category ", 9);
      if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v71 = &v81;
      }
      else {
        uint64_t v71 = (std::string *)v81.__r_.__value_.__r.__words[0];
      }
      if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v72 = HIBYTE(v81.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v72 = v81.__r_.__value_.__l.__size_;
      }
      int v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)v71, v72);
      uint64_t v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)" in blob uses different enumeration type (", 42);
      int v75 = *(char *)(v54 + 79);
      if (v75 >= 0) {
        uint64_t v76 = v54 + 56;
      }
      else {
        uint64_t v76 = *(void *)(v54 + 56);
      }
      if (v75 >= 0) {
        uint64_t v77 = *(unsigned __int8 *)(v54 + 79);
      }
      else {
        uint64_t v77 = *(void *)(v54 + 64);
      }
      uint64_t v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, v76, v77);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)") in datapack.", 14);
LABEL_142:
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v82);
LABEL_143:
      if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v79.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v80.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v81.__r_.__value_.__l.__data_);
      }
    }
    return 3;
  }
  return v14;
}

void sub_1B22E89BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,char a32)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  _Unwind_Resume(exception_object);
}

void quasar::OnlineLatticeBiglmLmeFasterDecoder::insertLocationSpecificModels(std::string::size_type a1@<X0>, uint64_t *a2@<X1>, quasar::SpeechRequestData **a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, quasar::Location *a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v105 = *MEMORY[0x1E4F143B8];
  Location = (std::__assoc_sub_state **)quasar::SpeechRequestData::getLocation(*a3);
  *(double *)a6 = quasar::Location::fromSharedFuture(Location);
  *((void *)a6 + 1) = v15;
  uint64_t v16 = *(void *)(*a2 + 424);
  std::string::basic_string[abi:ne180100]<0>(__p, "geoLocationStatus");
  quasar::Location::statusAsString(a6, &v103);
  quasar::SpeechRequestResultData::addDumpAA(v16, (long long *)__p, &v103);
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v103.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  v98[0] = 0;
  v98[1] = 0;
  uint64_t v99 = 0;
  uint64_t v17 = *(void *)(a1 + 408);
  Regionuint64_t Id = quasar::SpeechRequestData::getRegionId(*a3);
  quasar::Geography::getGeoContext(v17, a6, (uint64_t)v98, RegionId, a7);
  quasar::OnlineLatticeBiglmLmeFasterDecoder::logGeoLmMetrics(a1, *a2, a6, (unsigned __int8 *)v98, *a7);
  quasar::OnlineLatticeBiglmLmeFasterDecoder::mergeRegionalClassLms((void *)(a1 + 3248), (const void ***)*a7, (uint64_t *)v97);
  v103.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F0A5BE60;
  v103.__r_.__value_.__l.__size_ = a1;
  long long v104 = &v103;
  uint64_t v19 = *(uint64_t **)(a1 + 2224);
  uint64_t v20 = *(uint64_t **)(a1 + 2232);
  while (v19 != v20)
  {
    uint64_t v21 = *v19;
    uint64_t v22 = *a2;
    uint64_t v23 = *a7;
    std::__function::__value_func<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&)>::__value_func[abi:ne180100]((uint64_t)v102, (uint64_t)&v103);
    quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::resolvePlaceholder(v21, v97, (uint64_t *)(v22 + 424), v23 + 48, (uint64_t)v102, 1);
    std::__function::__value_func<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&)>::~__value_func[abi:ne180100](v102);
    v19 += 2;
  }
  int v24 = *(uint64_t **)(a1 + 2272);
  for (unint64_t i = *(uint64_t **)(a1 + 2280); v24 != i; v24 += 2)
  {
    uint64_t v26 = *v24;
    uint64_t v27 = *a7;
    uint64_t v28 = *a2;
    v101[0] = &unk_1F0A5BEB8;
    v101[3] = v101;
    quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::resolvePlaceholder(v26, (uint64_t **)(v27 + 24), (uint64_t *)(v28 + 424), v27 + 48, (uint64_t)v101, 0);
    std::__function::__value_func<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::~__value_func[abi:ne180100](v101);
  }
  int v75 = a7;
  quasar::OnlineLatticeBiglmLmeFasterDecoder::filterOutUnsupportedPlaceholders(a1, (const void ***)v97, (uint64_t)&v95);
  uint64_t v29 = v95;
  if (v95 != (const void **)v96)
  {
    do
    {
      if (quasar::gLogLevel >= 4)
      {
        long long v93 = 0u;
        long long v94 = 0u;
        long long v91 = 0u;
        long long v92 = 0u;
        long long v89 = 0u;
        long long v90 = 0u;
        long long v87 = 0u;
        long long v88 = 0u;
        long long v85 = 0u;
        long long v86 = 0u;
        long long v83 = 0u;
        long long v84 = 0u;
        long long v82 = 0u;
        long long v80 = 0u;
        long long v81 = 0u;
        memset(__p, 0, sizeof(__p));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        int v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"ClassLM template ", 17);
        int v31 = *((char *)v29 + 55);
        if (v31 >= 0) {
          uint64_t v32 = (uint64_t)(v29 + 4);
        }
        else {
          uint64_t v32 = (uint64_t)v29[4];
        }
        if (v31 >= 0) {
          uint64_t v33 = *((unsigned __int8 *)v29 + 55);
        }
        else {
          uint64_t v33 = (uint64_t)v29[5];
        }
        uint64_t v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, v32, v33);
        uint64_t v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)" assigned to FST from ", 22);
        quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getOriginStr((uint64_t)v29[7], &v78);
        if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v36 = &v78;
        }
        else {
          uint64_t v36 = (std::string *)v78.__r_.__value_.__r.__words[0];
        }
        if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v78.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v78.__r_.__value_.__l.__size_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)v36, size);
        if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v78.__r_.__value_.__l.__data_);
        }
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
      }
      uint64_t v38 = (uint64_t)v29[7];
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getCachedModel(v38, (uint64_t)__p, &v76);
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
      int v39 = *(_DWORD *)std::map<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::at(a1 + 3016, v29 + 4);
      long long v40 = *(_OWORD *)&v76.__r_.__value_.__l.__data_;
      if (v76.__r_.__value_.__l.__size_)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v76.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
        *(_OWORD *)&__p[1] = v40;
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v40 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      else
      {
        __p[1] = v76.__r_.__value_.__l.__data_;
        __p[2] = 0;
      }
      LODWORD(__p[0]) = v39;
      LODWORD(__p[3]) = 1;
      std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::push_back[abi:ne180100](a4, (uint64_t)__p);
      if (__p[2]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[2]);
      }
      if (*((void *)&v40 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v40 + 1));
      }
      uint64_t v41 = *(void *)(*a2 + 424);
      std::operator+<char>();
      int v42 = std::string::append(&v78, "]");
      long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
      __p[2] = (void *)v42->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v43;
      v42->__r_.__value_.__l.__size_ = 0;
      v42->__r_.__value_.__r.__words[2] = 0;
      v42->__r_.__value_.__r.__words[0] = 0;
      quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getOriginStr((uint64_t)v29[7], &v77);
      quasar::SpeechRequestResultData::addDumpAA(v41, (long long *)__p, &v77);
      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v77.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v78.__r_.__value_.__l.__data_);
      }
      if (v76.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v76.__r_.__value_.__l.__size_);
      }
      uint64_t v44 = (const void **)v29[1];
      if (v44)
      {
        do
        {
          uint64_t v45 = (const void ***)v44;
          uint64_t v44 = (const void **)*v44;
        }
        while (v44);
      }
      else
      {
        do
        {
          uint64_t v45 = (const void ***)v29[2];
          BOOL v46 = *v45 == v29;
          uint64_t v29 = (const void **)v45;
        }
        while (!v46);
      }
      uint64_t v29 = (const void **)v45;
    }
    while (v45 != v96);
  }
  memset(&v78, 0, sizeof(v78));
  kaldi::SplitStringToVector((const std::string *)(a1 + 3088), ",", 1, (uint64_t)&v78);
  std::string::size_type v48 = v78.__r_.__value_.__l.__size_;
  std::string::size_type v47 = v78.__r_.__value_.__r.__words[0];
  if (v78.__r_.__value_.__r.__words[0] != v78.__r_.__value_.__l.__size_)
  {
    uint64_t v49 = *(void *)(a1 + 3296);
    if (v49)
    {
      uint64_t v50 = *v75;
      uint64_t v51 = *a2;
      v100[0] = &unk_1F0A5BF10;
      v100[3] = v100;
      quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::resolvePlaceholder(v49, (uint64_t **)(v50 + 24), (uint64_t *)(v51 + 424), v50 + 48, (uint64_t)v100, 0);
      std::__function::__value_func<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::~__value_func[abi:ne180100](v100);
      std::string::size_type v48 = v78.__r_.__value_.__l.__size_;
      std::string::size_type v47 = v78.__r_.__value_.__r.__words[0];
    }
    for (; v47 != v48; v47 += 24)
    {
      if (quasar::gLogLevel >= 4)
      {
        long long v93 = 0u;
        long long v94 = 0u;
        long long v91 = 0u;
        long long v92 = 0u;
        long long v89 = 0u;
        long long v90 = 0u;
        long long v87 = 0u;
        long long v88 = 0u;
        long long v85 = 0u;
        long long v86 = 0u;
        long long v83 = 0u;
        long long v84 = 0u;
        long long v82 = 0u;
        long long v80 = 0u;
        long long v81 = 0u;
        memset(__p, 0, sizeof(__p));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        clockid_t v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"ClassLM template ", 17);
        int v53 = *(char *)(v47 + 23);
        if (v53 >= 0) {
          int64_t v54 = v47;
        }
        else {
          int64_t v54 = *(void *)v47;
        }
        if (v53 >= 0) {
          uint64_t v55 = *(unsigned __int8 *)(v47 + 23);
        }
        else {
          uint64_t v55 = *(void *)(v47 + 8);
        }
        int v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, v54, v55);
        BOOL v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)" assigned to NNLM from ", 23);
        quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getOriginStr(*(void *)(a1 + 3296), &v77);
        if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v58 = &v77;
        }
        else {
          long long v58 = (std::string *)v77.__r_.__value_.__r.__words[0];
        }
        if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v59 = HIBYTE(v77.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v59 = v77.__r_.__value_.__l.__size_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)v58, v59);
        if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v77.__r_.__value_.__l.__data_);
        }
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
      }
      int v60 = *(_DWORD *)std::map<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::at(a1 + 3016, (const void **)v47);
      uint64_t v62 = *(_DWORD **)(a5 + 8);
      unint64_t v61 = *(void *)(a5 + 16);
      if ((unint64_t)v62 >= v61)
      {
        uint64_t v64 = *(_DWORD **)a5;
        uint64_t v65 = ((uint64_t)v62 - *(void *)a5) >> 2;
        unint64_t v66 = v65 + 1;
        if ((unint64_t)(v65 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v67 = v61 - (void)v64;
        if (v67 >> 1 > v66) {
          unint64_t v66 = v67 >> 1;
        }
        if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v68 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v68 = v66;
        }
        if (v68)
        {
          long long v69 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a5 + 16, v68);
          uint64_t v64 = *(_DWORD **)a5;
          uint64_t v62 = *(_DWORD **)(a5 + 8);
        }
        else
        {
          long long v69 = 0;
        }
        long long v70 = &v69[4 * v65];
        *(_DWORD *)long long v70 = v60;
        uint64_t v63 = v70 + 4;
        while (v62 != v64)
        {
          int v71 = *--v62;
          *((_DWORD *)v70 - 1) = v71;
          v70 -= 4;
        }
        *(void *)a5 = v70;
        *(void *)(a5 + 8) = v63;
        *(void *)(a5 + 16) = &v69[4 * v68];
        if (v64) {
          operator delete(v64);
        }
      }
      else
      {
        *uint64_t v62 = v60;
        uint64_t v63 = v62 + 1;
      }
      *(void *)(a5 + 8) = v63;
      uint64_t v72 = *(void *)(*a2 + 424);
      std::operator+<char>();
      int v73 = std::string::append(&v77, "]");
      long long v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
      __p[2] = (void *)v73->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v74;
      v73->__r_.__value_.__l.__size_ = 0;
      v73->__r_.__value_.__r.__words[2] = 0;
      v73->__r_.__value_.__r.__words[0] = 0;
      quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getOriginStr(*(void *)(a1 + 3296), &v76);
      quasar::SpeechRequestResultData::addDumpAA(v72, (long long *)__p, &v76);
      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v76.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v77.__r_.__value_.__l.__data_);
      }
    }
  }
  __p[0] = &v78;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)&v95, v96[0]);
  std::__function::__value_func<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&)>::~__value_func[abi:ne180100](&v103);
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)v97, v97[1]);
  if (SHIBYTE(v99) < 0) {
    operator delete(v98[0]);
  }
}

void sub_1B22E923C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59)
{
  std::__function::__value_func<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::~__value_func[abi:ne180100]((void *)(v59 - 232));
  a21 = &a18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)&a55, (void *)a56);
  std::__function::__value_func<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&)>::~__value_func[abi:ne180100]((void *)(v59 - 136));
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)&a58, (void *)a59);
  unint64_t v61 = *(std::__shared_weak_count **)(a9 + 8);
  if (v61) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v61);
  }
  if (*(char *)(v59 - 233) < 0) {
    operator delete(*(void **)(v59 - 256));
  }
  _Unwind_Resume(a1);
}

void quasar::OnlineLatticeBiglmLmeFasterDecoder::appendEmptyFsts(void *a1, uint64_t *a2)
{
  uint64_t v2 = a1[379];
  if (v2)
  {
    if (v2 != (a2[1] - *a2) >> 5)
    {
      uint64_t v4 = (void *)a1[377];
      uint64_t v5 = a1 + 378;
      if (v4 != a1 + 378)
      {
        do
        {
          int v6 = *((_DWORD *)v4 + 14);
          for (unint64_t i = (_DWORD *)*a2; i != (_DWORD *)a2[1]; i += 8)
          {
            if (*i == v6) {
              goto LABEL_10;
            }
          }
          uint64_t v12 = 0;
          uint64_t v13 = 0;
          int v11 = v6;
          int v14 = -1;
          std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::push_back[abi:ne180100](a2, (uint64_t)&v11);
          if (v13) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          }
LABEL_10:
          float v8 = (void *)v4[1];
          if (v8)
          {
            do
            {
              uint8x8_t v9 = v8;
              float v8 = (void *)*v8;
            }
            while (v8);
          }
          else
          {
            do
            {
              uint8x8_t v9 = (void *)v4[2];
              BOOL v10 = *v9 == (void)v4;
              uint64_t v4 = v9;
            }
            while (!v10);
          }
          uint64_t v4 = v9;
        }
        while (v9 != v5);
      }
    }
  }
}

void sub_1B22E9564(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::OnlineLatticeBiglmLmeFasterDecoder::logGeoLmMetrics(uint64_t a1, uint64_t a2, quasar::Location *a3, unsigned __int8 *a4, uint64_t a5)
{
  uint64_t result = quasar::Geography::wasConfigLoaded(*(quasar::Geography **)(a1 + 408));
  if (result)
  {
    *(unsigned char *)(*(void *)(a2 + 424) + 128) = 1;
    if (quasar::Location::isKnown(a3))
    {
      int v11 = *(unsigned char **)(a2 + 424);
      v11[129] = 1;
    }
    else if (quasar::Location::isDenied(a3))
    {
      int v11 = *(unsigned char **)(a2 + 424);
      v11[130] = 1;
    }
    else
    {
      BOOL isUndefined = quasar::Location::isUndefined(a3);
      int v11 = *(unsigned char **)(a2 + 424);
      if (isUndefined) {
        v11[131] = 1;
      }
    }
    BOOL v13 = (*(void *)(a5 + 16) | *(void *)(a5 + 40)) != 0;
    std::string::basic_string[abi:ne180100]<0>(v31, "geoContextFound");
    std::to_string(&__p, v13);
    quasar::SpeechRequestResultData::addDumpAA((uint64_t)v11, (long long *)v31, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v32 < 0) {
      operator delete(v31[0]);
    }
    *(unsigned char *)(*(void *)(a2 + 424) + 132) = v13;
    uint64_t result = quasar::Geography::getGeoMemoriesConfig(*(quasar::Geography **)(a1 + 408));
    if (*(unsigned char *)result)
    {
      uint64_t v14 = *(void *)(a2 + 424);
      *(unsigned char *)(v14 + 133) = 1;
      uint64_t v15 = a4[23];
      if ((v15 & 0x80u) != 0) {
        uint64_t v15 = *((void *)a4 + 1);
      }
      BOOL v16 = v15 != 0;
      std::string::basic_string[abi:ne180100]<0>(v31, "geoLastRegionIdWasCached");
      std::to_string(&__p, v16);
      quasar::SpeechRequestResultData::addDumpAA(v14, (long long *)v31, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v32 < 0) {
        operator delete(v31[0]);
      }
      uint64_t v17 = *(unsigned __int8 *)(a5 + 71);
      if ((v17 & 0x80u) == 0) {
        uint64_t v18 = *(unsigned __int8 *)(a5 + 71);
      }
      else {
        uint64_t v18 = *(void *)(a5 + 56);
      }
      uint64_t v19 = a4[23];
      int v20 = (char)v19;
      if ((v19 & 0x80u) != 0) {
        uint64_t v19 = *((void *)a4 + 1);
      }
      if (v18 == v19)
      {
        uint64_t v21 = (const void **)(a5 + 48);
        if (v20 >= 0) {
          uint64_t v22 = a4;
        }
        else {
          uint64_t v22 = *(unsigned __int8 **)a4;
        }
        if ((v17 & 0x80) != 0)
        {
          BOOL v27 = memcmp(*v21, v22, *(void *)(a5 + 56)) != 0;
        }
        else if (*(unsigned char *)(a5 + 71))
        {
          uint64_t v23 = v17 - 1;
          do
          {
            int v25 = *(unsigned __int8 *)v21;
            uint64_t v21 = (const void **)((char *)v21 + 1);
            int v24 = v25;
            int v26 = *v22++;
            BOOL v27 = v24 != v26;
          }
          while (v24 == v26 && v23-- != 0);
        }
        else
        {
          BOOL v27 = 0;
        }
      }
      else
      {
        BOOL v27 = 1;
      }
      uint64_t v29 = *(void *)(a2 + 424);
      std::string::basic_string[abi:ne180100]<0>(v31, "geoLastRegionIdCacheMiss");
      std::to_string(&__p, v27);
      quasar::SpeechRequestResultData::addDumpAA(v29, (long long *)v31, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v32 < 0) {
        operator delete(v31[0]);
      }
      *(unsigned char *)(*(void *)(a2 + 424) + 134) = v27;
      uint64_t result = quasar::Location::isUndefined(a3);
      if (result)
      {
        if (v13) {
          *(unsigned char *)(*(void *)(a2 + 424) + 135) = 1;
        }
      }
    }
  }
  return result;
}

void sub_1B22E9820(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void quasar::OnlineLatticeBiglmLmeFasterDecoder::mergeRegionalClassLms(void *a1@<X0>, const void ***a2@<X1>, uint64_t *a3@<X8>)
{
  std::map<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::map[abi:ne180100](a3, a2);
  std::string::size_type v7 = (void *)*a1;
  uint64_t v5 = a1 + 1;
  int v6 = v7;
  if (v7 != v5)
  {
    do
    {
      quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getPlaceholder(v6[7], &v61);
      std::string::size_type size = HIBYTE(v61.__r_.__value_.__r.__words[2]);
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = v61.__r_.__value_.__l.__size_;
      }
      if (size)
      {
        if (!std::__tree<std::string>::__count_unique<std::string>((uint64_t)a3, (const void **)&v61.__r_.__value_.__l.__data_))
        {
          long long v59 = 0u;
          long long v60 = 0u;
          long long v57 = 0u;
          long long v58 = 0u;
          long long v55 = 0u;
          long long v56 = 0u;
          long long v53 = 0u;
          long long v54 = 0u;
          long long v51 = 0u;
          long long v52 = 0u;
          long long v49 = 0u;
          long long v50 = 0u;
          long long v47 = 0u;
          long long v48 = 0u;
          long long v45 = 0u;
          long long v46 = 0u;
          long long v44 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v44);
          int v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)"Using location-specific classLM slot for template=", 50);
          int v32 = *((char *)v6 + 55);
          if (v32 >= 0) {
            uint64_t v33 = (uint64_t)(v6 + 4);
          }
          else {
            uint64_t v33 = v6[4];
          }
          if (v32 >= 0) {
            uint64_t v34 = *((unsigned __int8 *)v6 + 55);
          }
          else {
            uint64_t v34 = v6[5];
          }
          uint64_t v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, v33, v34);
          uint64_t v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)": placeholder ", 14);
          if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v37 = &v61;
          }
          else {
            int v37 = (std::string *)v61.__r_.__value_.__r.__words[0];
          }
          if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v38 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v38 = v61.__r_.__value_.__l.__size_;
          }
          int v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)v37, v38);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)" not found in regional map", 26);
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v44);
        }
        uint64_t v9 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)a3, (const void **)&v61.__r_.__value_.__l.__data_);
        if (a3 + 1 == (uint64_t *)v9)
        {
          uint64_t v9 = 0;
          char v10 = 0;
          uint64_t v43 = 0;
        }
        else
        {
          std::__tree<std::string>::__remove_node_pointer((uint64_t **)a3, (uint64_t *)v9);
          char v10 = 1;
        }
        int v42 = (void *)v9;
        BYTE1(v43) = v10;
        std::string::operator=((std::string *)(v9 + 32), (const std::string *)(v6 + 4));
        std::__tree<std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>>::__node_handle_insert_unique[abi:ne180100]<std::__basic_node_handle<std::__tree_node<std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,void *>,std::allocator<std::pair<std::string const,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>,std::__map_node_handle_specifics>,std::__insert_return_type<std::__map_iterator<std::__tree_iterator<std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,std::__tree_node<std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,void *>*,long>>,std::__basic_node_handle<std::__tree_node<std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,void *>,std::allocator<std::pair<std::string const,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>,std::__map_node_handle_specifics>>>((uint64_t **)a3, (uint64_t *)&v42, (uint64_t)&v40);
        uint64_t v17 = v41;
        if (v41)
        {
          std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<void>>,0>((uint64_t)v41 + 32);
          operator delete(v17);
          uint64_t v41 = 0;
        }
        if (quasar::gLogLevel >= 4)
        {
          long long v59 = 0u;
          long long v60 = 0u;
          long long v57 = 0u;
          long long v58 = 0u;
          long long v55 = 0u;
          long long v56 = 0u;
          long long v53 = 0u;
          long long v54 = 0u;
          long long v51 = 0u;
          long long v52 = 0u;
          long long v49 = 0u;
          long long v50 = 0u;
          long long v47 = 0u;
          long long v48 = 0u;
          long long v45 = 0u;
          long long v46 = 0u;
          long long v44 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v44);
          uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)"Using location-specific classLM slot for template=", 50);
          int v19 = *((char *)v6 + 55);
          if (v19 >= 0) {
            uint64_t v20 = (uint64_t)(v6 + 4);
          }
          else {
            uint64_t v20 = v6[4];
          }
          if (v19 >= 0) {
            uint64_t v21 = *((unsigned __int8 *)v6 + 55);
          }
          else {
            uint64_t v21 = v6[5];
          }
          uint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v20, v21);
          uint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)", using placeholder ", 20);
          if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v24 = &v61;
          }
          else {
            int v24 = (std::string *)v61.__r_.__value_.__r.__words[0];
          }
          if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v25 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v25 = v61.__r_.__value_.__l.__size_;
          }
          int v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v24, v25);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" from regional map", 18);
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v44);
        }
        BOOL v27 = v42;
        if (v42)
        {
          std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<void>>,0>((uint64_t)v42 + 32);
          operator delete(v27);
        }
      }
      else
      {
        std::__tree<std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>> const&>((uint64_t **)a3, (const void **)v6 + 4, (long long *)v6 + 2);
        if ((v11 & 1) != 0 && quasar::gLogLevel >= 4)
        {
          long long v59 = 0u;
          long long v60 = 0u;
          long long v57 = 0u;
          long long v58 = 0u;
          long long v55 = 0u;
          long long v56 = 0u;
          long long v53 = 0u;
          long long v54 = 0u;
          long long v51 = 0u;
          long long v52 = 0u;
          long long v49 = 0u;
          long long v50 = 0u;
          long long v47 = 0u;
          long long v48 = 0u;
          long long v45 = 0u;
          long long v46 = 0u;
          long long v44 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v44);
          uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)"Using decoder-specific classLM slot for template=", 49);
          int v13 = *((char *)v6 + 55);
          if (v13 >= 0) {
            uint64_t v14 = (uint64_t)(v6 + 4);
          }
          else {
            uint64_t v14 = v6[4];
          }
          if (v13 >= 0) {
            uint64_t v15 = *((unsigned __int8 *)v6 + 55);
          }
          else {
            uint64_t v15 = v6[5];
          }
          BOOL v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)", location-specific slot not available", 38);
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v44);
        }
      }
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v61.__r_.__value_.__l.__data_);
      }
      uint64_t v28 = (void *)v6[1];
      if (v28)
      {
        do
        {
          uint64_t v29 = v28;
          uint64_t v28 = (void *)*v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          uint64_t v29 = (void *)v6[2];
          BOOL v30 = *v29 == (void)v6;
          int v6 = v29;
        }
        while (!v30);
      }
      int v6 = v29;
    }
    while (v29 != v5);
  }
}

void sub_1B22E9C08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)va);
  if (*(char *)(v8 - 89) < 0) {
    operator delete(*(void **)(v8 - 112));
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(v7, *(void **)(v7 + 8));
  _Unwind_Resume(a1);
}

void sub_1B22E9C1C(_Unwind_Exception *a1)
{
  if (*(char *)(v2 - 89) < 0) {
    operator delete(*(void **)(v2 - 112));
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_1B22E9C24()
{
}

void sub_1B22E9C2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__basic_node_handle<std::__tree_node<std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,void *>,std::allocator<std::pair<std::string const,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>,std::__map_node_handle_specifics>::~__basic_node_handle[abi:ne180100]((void **)va);
  JUMPOUT(0x1B22E9C48);
}

void quasar::OnlineLatticeBiglmLmeFasterDecoder::filterOutUnsupportedPlaceholders(uint64_t a1@<X0>, const void ***a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)a3 = a3 + 8;
  uint64_t v4 = a2 + 1;
  uint64_t v5 = *a2;
  if (*a2 != (const void **)(a2 + 1))
  {
    int v6 = (void *)(a1 + 2936);
    do
    {
      if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v6, (unsigned __int8 *)v5 + 32))
      {
        std::__tree<std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>> const&>((uint64_t **)a3, v5 + 4, (long long *)v5 + 2);
      }
      else if (quasar::gLogLevel >= 4)
      {
        memset(v14, 0, sizeof(v14));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
        uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Filtering out unsupported / unused placeholder ", 47);
        int v8 = *((char *)v5 + 55);
        if (v8 >= 0) {
          uint64_t v9 = (uint64_t)(v5 + 4);
        }
        else {
          uint64_t v9 = (uint64_t)v5[4];
        }
        if (v8 >= 0) {
          uint64_t v10 = *((unsigned __int8 *)v5 + 55);
        }
        else {
          uint64_t v10 = (uint64_t)v5[5];
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v14);
      }
      char v11 = (const void **)v5[1];
      if (v11)
      {
        do
        {
          uint64_t v12 = (const void ***)v11;
          char v11 = (const void **)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          uint64_t v12 = (const void ***)v5[2];
          BOOL v13 = *v12 == v5;
          uint64_t v5 = (const void **)v12;
        }
        while (!v13);
      }
      uint64_t v5 = (const void **)v12;
    }
    while (v12 != v4);
  }
}

void sub_1B22E9DAC(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void std::__function::__func<quasar::OnlineLatticeBiglmLmeFasterDecoder::finishInit(void)::$_0,std::allocator<quasar::OnlineLatticeBiglmLmeFasterDecoder::finishInit(void)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::~__func()
{
}

void *std::__function::__func<quasar::OnlineLatticeBiglmLmeFasterDecoder::finishInit(void)::$_0,std::allocator<quasar::OnlineLatticeBiglmLmeFasterDecoder::finishInit(void)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F0A5BDB0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::OnlineLatticeBiglmLmeFasterDecoder::finishInit(void)::$_0,std::allocator<quasar::OnlineLatticeBiglmLmeFasterDecoder::finishInit(void)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F0A5BDB0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<quasar::OnlineLatticeBiglmLmeFasterDecoder::finishInit(void)::$_0,std::allocator<quasar::OnlineLatticeBiglmLmeFasterDecoder::finishInit(void)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 368) + 16))();
}

uint64_t std::__function::__func<quasar::OnlineLatticeBiglmLmeFasterDecoder::finishInit(void)::$_0,std::allocator<quasar::OnlineLatticeBiglmLmeFasterDecoder::finishInit(void)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::OnlineLatticeBiglmLmeFasterDecoder::finishInit(void)::$_0,std::allocator<quasar::OnlineLatticeBiglmLmeFasterDecoder::finishInit(void)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::target_type()
{
}

void std::__function::__func<quasar::OnlineLatticeBiglmLmeFasterDecoder::finishInit(void)::$_1,std::allocator<quasar::OnlineLatticeBiglmLmeFasterDecoder::finishInit(void)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::~__func()
{
}

void *std::__function::__func<quasar::OnlineLatticeBiglmLmeFasterDecoder::finishInit(void)::$_1,std::allocator<quasar::OnlineLatticeBiglmLmeFasterDecoder::finishInit(void)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F0A5BE08;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::OnlineLatticeBiglmLmeFasterDecoder::finishInit(void)::$_1,std::allocator<quasar::OnlineLatticeBiglmLmeFasterDecoder::finishInit(void)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F0A5BE08;
  a2[1] = v2;
  return result;
}

void std::__function::__func<quasar::OnlineLatticeBiglmLmeFasterDecoder::finishInit(void)::$_1,std::allocator<quasar::OnlineLatticeBiglmLmeFasterDecoder::finishInit(void)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, kaldi::InferenceNetItf **a3@<X8>)
{
}

uint64_t std::__function::__func<quasar::OnlineLatticeBiglmLmeFasterDecoder::finishInit(void)::$_1,std::allocator<quasar::OnlineLatticeBiglmLmeFasterDecoder::finishInit(void)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::OnlineLatticeBiglmLmeFasterDecoder::finishInit(void)::$_1,std::allocator<quasar::OnlineLatticeBiglmLmeFasterDecoder::finishInit(void)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::target_type()
{
}

void std::__function::__func<quasar::OnlineLatticeBiglmLmeFasterDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_0,std::allocator<quasar::OnlineLatticeBiglmLmeFasterDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&)>::~__func()
{
}

void *std::__function::__func<quasar::OnlineLatticeBiglmLmeFasterDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_0,std::allocator<quasar::OnlineLatticeBiglmLmeFasterDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F0A5BE60;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::OnlineLatticeBiglmLmeFasterDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_0,std::allocator<quasar::OnlineLatticeBiglmLmeFasterDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F0A5BE60;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<quasar::OnlineLatticeBiglmLmeFasterDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_0,std::allocator<quasar::OnlineLatticeBiglmLmeFasterDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&)>::operator()@<X0>(void *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  if (*(unsigned char *)(result[1] + 2300))
  {
    uint64_t result = std::allocate_shared[abi:ne180100]<quasar::StateAccessRecordingFst,std::allocator<quasar::StateAccessRecordingFst>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&,void>(&v5);
    *(_OWORD *)a3 = v5;
  }
  else
  {
    uint64_t v4 = a2[1];
    *(void *)a3 = *a2;
    *(void *)(a3 + 8) = v4;
    if (v4) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
    }
  }
  return result;
}

uint64_t std::__function::__func<quasar::OnlineLatticeBiglmLmeFasterDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_0,std::allocator<quasar::OnlineLatticeBiglmLmeFasterDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::OnlineLatticeBiglmLmeFasterDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_0,std::allocator<quasar::OnlineLatticeBiglmLmeFasterDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&)>::target_type()
{
}

void std::__function::__func<quasar::OnlineLatticeBiglmLmeFasterDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_1,std::allocator<quasar::OnlineLatticeBiglmLmeFasterDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::~__func()
{
}

void *std::__function::__func<quasar::OnlineLatticeBiglmLmeFasterDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_1,std::allocator<quasar::OnlineLatticeBiglmLmeFasterDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F0A5BEB8;
  return result;
}

void std::__function::__func<quasar::OnlineLatticeBiglmLmeFasterDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_1,std::allocator<quasar::OnlineLatticeBiglmLmeFasterDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F0A5BEB8;
}

void std::__function::__func<quasar::OnlineLatticeBiglmLmeFasterDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_1,std::allocator<quasar::OnlineLatticeBiglmLmeFasterDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::operator()(void *a1@<X1>, void *a2@<X8>)
{
  uint64_t v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
}

uint64_t std::__function::__func<quasar::OnlineLatticeBiglmLmeFasterDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_1,std::allocator<quasar::OnlineLatticeBiglmLmeFasterDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::OnlineLatticeBiglmLmeFasterDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_1,std::allocator<quasar::OnlineLatticeBiglmLmeFasterDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::target_type()
{
}

void std::__function::__func<quasar::OnlineLatticeBiglmLmeFasterDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_2,std::allocator<quasar::OnlineLatticeBiglmLmeFasterDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_2>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::~__func()
{
}

void *std::__function::__func<quasar::OnlineLatticeBiglmLmeFasterDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_2,std::allocator<quasar::OnlineLatticeBiglmLmeFasterDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_2>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F0A5BF10;
  return result;
}

void std::__function::__func<quasar::OnlineLatticeBiglmLmeFasterDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_2,std::allocator<quasar::OnlineLatticeBiglmLmeFasterDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_2>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F0A5BF10;
}

void std::__function::__func<quasar::OnlineLatticeBiglmLmeFasterDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_2,std::allocator<quasar::OnlineLatticeBiglmLmeFasterDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_2>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::operator()(void *a1@<X1>, void *a2@<X8>)
{
  uint64_t v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
}

uint64_t std::__function::__func<quasar::OnlineLatticeBiglmLmeFasterDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_2,std::allocator<quasar::OnlineLatticeBiglmLmeFasterDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_2>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::OnlineLatticeBiglmLmeFasterDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_2,std::allocator<quasar::OnlineLatticeBiglmLmeFasterDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_2>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::target_type()
{
}

void *quasar::rescoring::GetDecoder<quasar::OnlineLmRescoringDecoder>@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (*a1 == v3)
  {
LABEL_5:
    memset(v12, 0, sizeof(v12));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
    int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Unable to extract decoder of type ", 34);
    size_t v7 = strlen((const char *)((unint64_t)off_1F0A2BE10 & 0x7FFFFFFFFFFFFFFFLL));
    int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (unint64_t)off_1F0A2BE10 & 0x7FFFFFFFFFFFFFFFLL, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" from decoder chain.", 20);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v12);
  }
  while (1)
  {
    long long v5 = *(const void **)v2;
    if (*(void *)v2)
    {
      {
        break;
      }
    }
    v2 += 16;
    if (v2 == v3) {
      goto LABEL_5;
    }
  }
  uint64_t v9 = *(std::__shared_weak_count **)(v2 + 8);
  if (v9
    && (atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed),
        std::__shared_weak_count::__release_shared[abi:ne180100](v9),
        (long long v5 = *(const void **)v2) == 0)
  {
    *a2 = 0;
    a2[1] = 0;
    goto LABEL_5;
  }
  uint64_t v11 = *(void *)(v2 + 8);
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  *a2 = result;
  a2[1] = v11;
  return result;
}

void sub_1B22EA4D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t quasar::rescoring::GetNumberOfRescoringLanguageModels(quasar::rescoring *this, const quasar::OnlineLmRescoringDecoder *a2)
{
  uint64_t v3 = *((void *)this + 78);
  uint64_t v4 = *((void *)this + 77);
  if (v3 != v4 && quasar::gLogLevel >= 2)
  {
    memset(v8, 0, sizeof(v8));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
    int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Using NNLMs during rescoring may lead to thread starvation within LibBNNS. ", 75);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"See rdar://problem/102243606 for more information.", 50);
    quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)v8);
    uint64_t v3 = *((void *)this + 78);
    uint64_t v4 = *((void *)this + 77);
  }
  return ((v3 - v4) >> 4) + ((uint64_t)(*((void *)this + 75) - *((void *)this + 74)) >> 4);
}

void sub_1B22EA5A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void quasar::JapaneseDerivedEnumerator::JapaneseDerivedEnumerator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __p[24] = *(void **)MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(__p, "tag-sequences");
  quasar::PTree::getChild(a4, (uint64_t)__p);
}

void sub_1B22EA8E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert(v24);
  if (*(char *)(v22 + 103) < 0) {
    operator delete(*v23);
  }
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  quasar::SimpleNameEnumerator::~SimpleNameEnumerator((void **)v22);
  _Unwind_Resume(a1);
}

void quasar::JapaneseDerivedEnumerator::~JapaneseDerivedEnumerator(void **this)
{
  *this = &unk_1F0A56EF0;
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert((uint64_t)(this + 13));
  if (*((char *)this + 103) < 0) {
    operator delete(this[10]);
  }
  uint64_t v2 = this + 7;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v2);
  *this = &unk_1F0A552E0;
  uint64_t v2 = this + 4;
  std::vector<std::pair<int,std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  quasar::NameEnumerator::~NameEnumerator(this);
}

{
  uint64_t vars8;

  quasar::JapaneseDerivedEnumerator::~JapaneseDerivedEnumerator(this);
  JUMPOUT(0x1B3EA8670);
}

void quasar::JapaneseDerivedEnumerator::preprocessWord(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *((unsigned __int8 *)a2 + 23);
  uint64_t v5 = a2[1];
  long long v60 = a2;
  if ((v4 & 0x80u) != 0)
  {
    a2 = (uint64_t *)*a2;
    uint64_t v4 = v5;
  }
  if (v4)
  {
    uint64_t v6 = v4;
    size_t v7 = a2;
    while (*v7 != 64)
    {
      ++v7;
      if (!--v6) {
        goto LABEL_7;
      }
    }
  }
  else
  {
LABEL_7:
    memset(&__str, 0, sizeof(__str));
    uint64_t v58 = a1 + 104;
    std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::from_bytes(a1 + 104, (int *)a2, (int *)((char *)a2 + v4), (std::basic_string<char32_t> *)v68);
    long long v59 = a3;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    __str.__r_.__value_.__r.__words[2] = v69;
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)v68;
    uint64_t v65 = 0;
    unint64_t v66 = 0;
    uint64_t v67 = 0;
    std::basic_string<char32_t>::size_type size = BYTE7(v69);
    if ((SBYTE7(v69) & 0x80u) == 0) {
      p_str = &__str;
    }
    else {
      p_str = (std::basic_string<char32_t> *)__str.__r_.__value_.__r.__words[0];
    }
    if (SBYTE7(v69) < 0) {
      std::basic_string<char32_t>::size_type size = __str.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      uint64_t v10 = 0;
      int v11 = 5;
      uint64_t v12 = (std::basic_string<char32_t> *)((char *)p_str + 4 * size);
      do
      {
        unsigned int v13 = p_str->__r_.__value_.__s.__data_[0];
        int v14 = 1;
        if (p_str->__r_.__value_.__s.__data_[0] != 12540 && v13 - 12449 >= 0x5A)
        {
          if (v13 - 12352 >= 0x60)
          {
            int v14 = 2;
            if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vcgtq_u32((uint32x4_t)xmmword_1B25AAB30, (uint32x4_t)vaddq_s32(vdupq_n_s32(v13), (int32x4_t)xmmword_1B25AAB20)))) & 1) == 0&& (v13 - 13312) >> 6 >= 0x67&& (v13 - 0x20000) >> 5 >= 0x537&& (v13 - 173824) >> 5 >= 0x89&& (v13 & 0xFFFFFF00) != 0x3300&& (v13 & 0xFFFFFF80) != 0x2E80)
            {
              if (v13 - 48 >= 0xA)
              {
                if (u_isalpha(p_str->__r_.__value_.__s.__data_[0])) {
                  int v14 = 4;
                }
                else {
                  int v14 = 5;
                }
                uint64_t v10 = v66;
              }
              else
              {
                int v14 = 3;
              }
            }
          }
          else
          {
            int v14 = 0;
          }
        }
        if (v13 == 12540 && v11 == 0) {
          int v11 = 0;
        }
        else {
          int v11 = v14;
        }
        if (v10 >= v67)
        {
          BOOL v16 = (int *)v65;
          uint64_t v17 = ((char *)v10 - (unsigned char *)v65) >> 2;
          unint64_t v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v19 = (char *)v67 - (unsigned char *)v65;
          if (((char *)v67 - (unsigned char *)v65) >> 1 > v18) {
            unint64_t v18 = v19 >> 1;
          }
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v20 = v18;
          }
          if (v20)
          {
            uint64_t v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v67, v20);
            BOOL v16 = (int *)v65;
            uint64_t v10 = v66;
          }
          else
          {
            uint64_t v21 = 0;
          }
          uint64_t v22 = (int *)&v21[4 * v17];
          int *v22 = v11;
          uint64_t v23 = v22 + 1;
          while (v10 != v16)
          {
            int v24 = *--v10;
            *--uint64_t v22 = v24;
          }
          uint64_t v65 = v22;
          unint64_t v66 = v23;
          uint64_t v67 = (int *)&v21[4 * v20];
          if (v16) {
            operator delete(v16);
          }
          uint64_t v10 = v23;
        }
        else
        {
          *v10++ = v11;
        }
        unint64_t v66 = v10;
        p_str = (std::basic_string<char32_t> *)((char *)p_str + 4);
      }
      while (p_str != v12);
      std::string::size_type v25 = (int *)v65;
      std::basic_string<char32_t>::size_type v26 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      unint64_t v27 = ((char *)v10 - (unsigned char *)v65) >> 2;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::basic_string<char32_t>::size_type v26 = __str.__r_.__value_.__l.__size_;
      }
      if (v27 != v26)
      {
        long long v83 = 0u;
        long long v84 = 0u;
        long long v81 = 0u;
        long long v82 = 0u;
        long long v79 = 0u;
        long long v80 = 0u;
        long long v77 = 0u;
        long long v78 = 0u;
        long long v75 = 0u;
        long long v76 = 0u;
        long long v73 = 0u;
        long long v74 = 0u;
        long long v72 = 0u;
        long long v70 = 0u;
        long long v71 = 0u;
        *(_OWORD *)unint64_t v68 = 0u;
        long long v69 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v68);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Unable to get character type for some characters in the orthography", 67);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v68);
      }
      uint64_t v28 = a3;
      if (v65 != v10)
      {
        int v29 = 1;
        if ((unint64_t)((char *)v10 - (unsigned char *)v65) < 5)
        {
          int v31 = 0;
        }
        else
        {
          uint64_t v30 = 0;
          int v31 = 0;
          do
          {
            uint64_t v32 = v30;
            uint64_t v33 = &v25[v30++];
            if (*v33 != v33[1])
            {
              if (*v33 < 3)
              {
                std::basic_string<char32_t>::basic_string(&v64, &__str, v31, v32 - v31 + 1, (std::allocator<char32_t> *)__p);
                std::basic_string<char32_t>::size_type v34 = HIBYTE(v64.__r_.__value_.__r.__words[2]);
                if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  uint64_t v35 = (char *)&v64;
                }
                else {
                  uint64_t v35 = (char *)v64.__r_.__value_.__r.__words[0];
                }
                if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  std::basic_string<char32_t>::size_type v34 = v64.__r_.__value_.__l.__size_;
                }
                std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::to_bytes(v58, v35, &v35[4 * v34], (std::string *)v68);
                if (*((char *)v60 + 47) >= 0) {
                  size_t v36 = *((unsigned __int8 *)v60 + 47);
                }
                else {
                  size_t v36 = v60[4];
                }
                std::string::basic_string[abi:ne180100]((uint64_t)__p, v36 + 8);
                if (v63 >= 0) {
                  int v37 = __p;
                }
                else {
                  int v37 = (void **)__p[0];
                }
                if (v36)
                {
                  if (*((char *)v60 + 47) >= 0) {
                    std::string::size_type v38 = v60 + 3;
                  }
                  else {
                    std::string::size_type v38 = (const void *)v60[3];
                  }
                  memmove(v37, v38, v36);
                }
                strcpy((char *)v37 + v36, "-derived");
                unsigned int v61 = 1;
                uint64_t v28 = v59;
                unint64_t v39 = v59[1];
                if (v39 >= v59[2])
                {
                  uint64_t v40 = std::vector<quasar::LmeDataFactoryBase::Word>::__emplace_back_slow_path<std::string,std::string,int>(v59, (uint64_t)v68, (uint64_t)__p, &v61);
                }
                else
                {
                  std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,std::string,std::string,int>((uint64_t)(v59 + 2), v59[1], (uint64_t)v68, (uint64_t)__p, &v61);
                  uint64_t v40 = v39 + 80;
                  v59[1] = v39 + 80;
                }
                v59[1] = v40;
                if (v63 < 0) {
                  operator delete(__p[0]);
                }
                if (SBYTE7(v69) < 0) {
                  operator delete(v68[0]);
                }
                if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v64.__r_.__value_.__l.__data_);
                }
                std::string::size_type v25 = (int *)v65;
                uint64_t v10 = v66;
              }
              int v31 = v30;
            }
            unint64_t v27 = v10 - v25;
          }
          while (v27 > v30 + 1);
          int v29 = v30 + 1;
        }
        if (v27 != v29 - v31 && v25[v31] <= 2)
        {
          std::basic_string<char32_t>::basic_string(&v64, &__str, v31, v29 - v31, (std::allocator<char32_t> *)__p);
          std::basic_string<char32_t>::size_type v41 = HIBYTE(v64.__r_.__value_.__r.__words[2]);
          if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v42 = (char *)&v64;
          }
          else {
            int v42 = (char *)v64.__r_.__value_.__r.__words[0];
          }
          if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::basic_string<char32_t>::size_type v41 = v64.__r_.__value_.__l.__size_;
          }
          std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::to_bytes(v58, v42, &v42[4 * v41], (std::string *)v68);
          if (*((char *)v60 + 47) >= 0) {
            size_t v43 = *((unsigned __int8 *)v60 + 47);
          }
          else {
            size_t v43 = v60[4];
          }
          std::string::basic_string[abi:ne180100]((uint64_t)__p, v43 + 8);
          if (v63 >= 0) {
            long long v44 = __p;
          }
          else {
            long long v44 = (void **)__p[0];
          }
          if (v43)
          {
            if (*((char *)v60 + 47) >= 0) {
              long long v45 = v60 + 3;
            }
            else {
              long long v45 = (const void *)v60[3];
            }
            memmove(v44, v45, v43);
          }
          strcpy((char *)v44 + v43, "-derived");
          unsigned int v61 = 1;
          unint64_t v46 = v28[1];
          if (v46 >= v28[2])
          {
            uint64_t v47 = std::vector<quasar::LmeDataFactoryBase::Word>::__emplace_back_slow_path<std::string,std::string,int>(v28, (uint64_t)v68, (uint64_t)__p, &v61);
          }
          else
          {
            std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,std::string,std::string,int>((uint64_t)(v28 + 2), v28[1], (uint64_t)v68, (uint64_t)__p, &v61);
            uint64_t v47 = v46 + 80;
            v28[1] = v46 + 80;
          }
          v28[1] = v47;
          if (v63 < 0) {
            operator delete(__p[0]);
          }
          if (SBYTE7(v69) < 0) {
            operator delete(v68[0]);
          }
          if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v64.__r_.__value_.__l.__data_);
          }
          std::string::size_type v25 = (int *)v65;
        }
        std::basic_string<char32_t>::size_type v48 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::basic_string<char32_t>::size_type v48 = __str.__r_.__value_.__l.__size_;
        }
        if (v48 == 4)
        {
          if (v25 == v66)
          {
LABEL_130:
            std::basic_string<char32_t>::basic_string(&v64, &__str, 0, 2uLL, (std::allocator<char32_t> *)__p);
            std::basic_string<char32_t>::size_type v50 = HIBYTE(v64.__r_.__value_.__r.__words[2]);
            if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              long long v51 = (char *)&v64;
            }
            else {
              long long v51 = (char *)v64.__r_.__value_.__r.__words[0];
            }
            if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::basic_string<char32_t>::size_type v50 = v64.__r_.__value_.__l.__size_;
            }
            std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::to_bytes(v58, v51, &v51[4 * v50], (std::string *)v68);
            LODWORD(__p[0]) = 1;
            unint64_t v52 = v28[1];
            if (v52 >= v28[2])
            {
              uint64_t v53 = std::vector<quasar::LmeDataFactoryBase::Word>::__emplace_back_slow_path<std::string,char const(&)[22],int>(v28, (uint64_t)v68, "\\contact-last-derived", (unsigned int *)__p);
            }
            else
            {
              std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,std::string,char const(&)[22],int>(v28 + 16, v28[1], (uint64_t)v68, "\\contact-last-derived", (unsigned int *)__p);
              uint64_t v53 = v52 + 80;
              v28[1] = v52 + 80;
            }
            v28[1] = v53;
            if (SBYTE7(v69) < 0) {
              operator delete(v68[0]);
            }
            if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v64.__r_.__value_.__l.__data_);
            }
            std::basic_string<char32_t>::basic_string(&v64, &__str, 2uLL, 2uLL, (std::allocator<char32_t> *)__p);
            std::basic_string<char32_t>::size_type v54 = HIBYTE(v64.__r_.__value_.__r.__words[2]);
            if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              long long v55 = (char *)&v64;
            }
            else {
              long long v55 = (char *)v64.__r_.__value_.__r.__words[0];
            }
            if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::basic_string<char32_t>::size_type v54 = v64.__r_.__value_.__l.__size_;
            }
            std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::to_bytes(v58, v55, &v55[4 * v54], (std::string *)v68);
            LODWORD(__p[0]) = 1;
            unint64_t v56 = v28[1];
            if (v56 >= v28[2])
            {
              uint64_t v57 = std::vector<quasar::LmeDataFactoryBase::Word>::__emplace_back_slow_path<std::string,char const(&)[23],int>(v28, (uint64_t)v68, "\\contact-first-derived", (unsigned int *)__p);
            }
            else
            {
              std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,std::string,char const(&)[23],int>(v28 + 16, v28[1], (uint64_t)v68, "\\contact-first-derived", (unsigned int *)__p);
              uint64_t v57 = v56 + 80;
              v28[1] = v56 + 80;
            }
            v28[1] = v57;
            if (SBYTE7(v69) < 0) {
              operator delete(v68[0]);
            }
            if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v64.__r_.__value_.__l.__data_);
            }
            std::string::size_type v25 = (int *)v65;
          }
          else
          {
            long long v49 = v25;
            while (*v49 == 2)
            {
              if (++v49 == v66) {
                goto LABEL_130;
              }
            }
          }
        }
      }
      if (v25)
      {
        unint64_t v66 = v25;
        operator delete(v25);
      }
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1B22EB368()
{
  *(void *)(v1 + 8) = v0;
  JUMPOUT(0x1B22EB378);
}

void sub_1B22EB4A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61)
{
  if (__p) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 105) < 0) {
    operator delete(a61);
  }
  _Unwind_Resume(exception_object);
}

void quasar::JapaneseDerivedEnumerator::preprocess(uint64_t a1, uint64_t *a2)
{
  v28[0] = 0;
  v28[1] = 0;
  unint64_t v27 = (uint64_t *)v28;
  uint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    uint64_t v5 = *a2 + 24;
    do
    {
      std::pair<std::string,quasar::LmeDataFactoryBase::Word>::pair[abi:ne180100]<true,0>((std::string *)v21, (long long *)v5, (long long *)(v5 - 24));
      std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word>>>::__emplace_unique_key_args<std::string,std::pair<std::string,quasar::LmeDataFactoryBase::Word>>(&v27, (const void **)v21, (long long *)v21);
      char v7 = v6;
      std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)v26, *((char **)&v26[0] + 1));
      if (SBYTE7(v25) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v23) < 0) {
        operator delete(*((void **)&v22 + 1));
      }
      if (SBYTE7(v22) < 0) {
        operator delete(v21[0]);
      }
      if ((v7 & 1) == 0)
      {
        memset(v26, 0, sizeof(v26));
        *(_OWORD *)std::string __p = 0u;
        long long v25 = 0u;
        long long v22 = 0u;
        long long v23 = 0u;
        *(_OWORD *)uint64_t v21 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v21);
        uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Tag with multiple words: ", 25);
        int v18 = *(char *)(v5 + 23);
        if (v18 >= 0) {
          uint64_t v19 = v5;
        }
        else {
          uint64_t v19 = *(void *)v5;
        }
        if (v18 >= 0) {
          uint64_t v20 = *(unsigned __int8 *)(v5 + 23);
        }
        else {
          uint64_t v20 = *(void *)(v5 + 8);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v19, v20);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v21);
      }
      uint64_t v8 = v5 + 56;
      v5 += 80;
    }
    while (v8 != v4);
  }
  std::string::basic_string[abi:ne180100]<0>(v21, "\\contact-first");
  uint64_t v9 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)&v27, (const void **)v21);
  if (SBYTE7(v22) < 0) {
    operator delete(v21[0]);
  }
  if (v28 != (void **)v9)
  {
    std::string::basic_string[abi:ne180100]<0>(v21, "\\contact-first-phonetic");
    uint64_t v10 = (void **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)&v27, (const void **)v21);
    if (SBYTE7(v22) < 0) {
      operator delete(v21[0]);
    }
    if (v28 != v10)
    {
      LODWORD(v21[0]) = 1;
      unint64_t v11 = a2[1];
      if (v11 >= a2[2])
      {
        uint64_t v12 = std::vector<quasar::LmeDataFactoryBase::Word>::__emplace_back_slow_path<std::string &,char const(&)[23],int>(a2, v9 + 56, "\\contact-first-derived", (unsigned int *)v21);
      }
      else
      {
        std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,std::string &,char const(&)[23],int>(a2 + 16, a2[1], v9 + 56, "\\contact-first-derived", (unsigned int *)v21);
        uint64_t v12 = v11 + 80;
        a2[1] = v11 + 80;
      }
      a2[1] = v12;
    }
    quasar::JapaneseDerivedEnumerator::preprocessWord(a1, (uint64_t *)(v9 + 56), a2);
  }
  std::string::basic_string[abi:ne180100]<0>(v21, "\\contact-last");
  uint64_t v13 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)&v27, (const void **)v21);
  if (SBYTE7(v22) < 0) {
    operator delete(v21[0]);
  }
  if (v28 != (void **)v13)
  {
    std::string::basic_string[abi:ne180100]<0>(v21, "\\contact-last-phonetic");
    int v14 = (void **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)&v27, (const void **)v21);
    if (SBYTE7(v22) < 0) {
      operator delete(v21[0]);
    }
    if (v28 != v14)
    {
      LODWORD(v21[0]) = 1;
      unint64_t v15 = a2[1];
      if (v15 >= a2[2])
      {
        uint64_t v16 = std::vector<quasar::LmeDataFactoryBase::Word>::__emplace_back_slow_path<std::string &,char const(&)[22],int>(a2, v13 + 56, "\\contact-last-derived", (unsigned int *)v21);
      }
      else
      {
        std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,std::string &,char const(&)[22],int>(a2 + 16, a2[1], v13 + 56, "\\contact-last-derived", (unsigned int *)v21);
        uint64_t v16 = v15 + 80;
        a2[1] = v15 + 80;
      }
      a2[1] = v16;
    }
    quasar::JapaneseDerivedEnumerator::preprocessWord(a1, (uint64_t *)(v13 + 56), a2);
  }
  std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word>>>::destroy((uint64_t)&v27, v28[0]);
}

void sub_1B22EB848()
{
}

void sub_1B22EB854(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void quasar::JapaneseDerivedEnumerator::addDerivedEnumerations(uint64_t a1, const void **a2, uint64_t a3, uint64_t a4, uint64_t **a5)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  if (*(char *)(a3 + 23) >= 0) {
    uint64_t v9 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v9 = *(void *)(a3 + 8);
  }
  uint64_t v10 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a4, a2);
  uint64_t v11 = v10;
  if (v9)
  {
    uint64_t v27 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a4, (const void **)a3);
    if (a4 + 8 != v11 && a4 + 8 != v27)
    {
      uint64_t v12 = *(long long **)(v11 + 56);
      for (unint64_t i = *(long long **)(v11 + 64); v12 != i; v12 += 5)
      {
        uint64_t v13 = *(long long **)(v27 + 56);
        int v14 = *(long long **)(v27 + 64);
        while (v13 != v14)
        {
          std::to_string(&v52, *(float *)(a1 + 296) * (float)*((int *)v12 + 12));
          if (*((char *)v12 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v53, *(const std::string::value_type **)v12, *((void *)v12 + 1));
          }
          else
          {
            long long v15 = *v12;
            v53.__r_.__value_.__r.__words[2] = *((void *)v12 + 2);
            *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v15;
          }
          if (*((char *)v13 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v54, *(const std::string::value_type **)v13, *((void *)v13 + 1));
          }
          else
          {
            long long v16 = *v13;
            v54.__r_.__value_.__r.__words[2] = *((void *)v13 + 2);
            *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v16;
          }
          std::basic_string<char32_t>::size_type v50 = &v52;
          uint64_t v51 = 3;
          if (quasar::gLogLevel >= 6)
          {
            long long v48 = 0u;
            long long v49 = 0u;
            long long v46 = 0u;
            long long v47 = 0u;
            long long v44 = 0u;
            long long v45 = 0u;
            long long v42 = 0u;
            long long v43 = 0u;
            long long v40 = 0u;
            long long v41 = 0u;
            long long v39 = 0u;
            long long v37 = 0u;
            long long v38 = 0u;
            long long v35 = 0u;
            long long v36 = 0u;
            long long v33 = 0u;
            long long v34 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v33);
            uint64_t v28 = " ";
            uint64_t v29 = 1;
            quasar::join<std::initializer_list<std::string>>((uint64_t *)&v50, (uint64_t *)&v28);
            if ((v32 & 0x80u) == 0) {
              p_p = &__p;
            }
            else {
              p_p = __p;
            }
            if ((v32 & 0x80u) == 0) {
              uint64_t v18 = v32;
            }
            else {
              uint64_t v18 = v31;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)p_p, v18);
            if ((char)v32 < 0) {
              operator delete(__p);
            }
            quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v33);
          }
          std::__tree<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>::__emplace_unique_impl<std::initializer_list<std::string>>(a5, (uint64_t)&v50);
          for (uint64_t j = 0; j != -9; j -= 3)
          {
            if (SHIBYTE(v54.__r_.__value_.__r.__words[j + 2]) < 0) {
              operator delete(*(void **)((char *)&v54.__r_.__value_.__l.__data_ + j * 8));
            }
          }
          v13 += 5;
        }
      }
    }
  }
  else if (a4 + 8 != v10)
  {
    uint64_t v20 = *(long long **)(v10 + 56);
    for (unint64_t k = *(long long **)(v10 + 64); v20 != k; v20 += 5)
    {
      std::to_string(&v52, *(float *)(a1 + 296) * (float)*((int *)v20 + 12));
      if (*((char *)v20 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v53, *(const std::string::value_type **)v20, *((void *)v20 + 1));
      }
      else
      {
        long long v22 = *v20;
        v53.__r_.__value_.__r.__words[2] = *((void *)v20 + 2);
        *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v22;
      }
      std::basic_string<char32_t>::size_type v50 = &v52;
      uint64_t v51 = 2;
      if (quasar::gLogLevel >= 6)
      {
        long long v48 = 0u;
        long long v49 = 0u;
        long long v46 = 0u;
        long long v47 = 0u;
        long long v44 = 0u;
        long long v45 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v39 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        long long v33 = 0u;
        long long v34 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v33);
        uint64_t v28 = " ";
        uint64_t v29 = 1;
        quasar::join<std::initializer_list<std::string>>((uint64_t *)&v50, (uint64_t *)&v28);
        if ((v32 & 0x80u) == 0) {
          long long v23 = &__p;
        }
        else {
          long long v23 = __p;
        }
        if ((v32 & 0x80u) == 0) {
          uint64_t v24 = v32;
        }
        else {
          uint64_t v24 = v31;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)v23, v24);
        if ((char)v32 < 0) {
          operator delete(__p);
        }
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v33);
      }
      std::__tree<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>::__emplace_unique_impl<std::initializer_list<std::string>>(a5, (uint64_t)&v50);
      for (uint64_t m = 0; m != -6; m -= 3)
      {
        if (SHIBYTE(v53.__r_.__value_.__r.__words[m + 2]) < 0) {
          operator delete(*(void **)((char *)&v52 + m * 8 + 24));
        }
      }
    }
  }
}

void sub_1B22EBC18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (*(char *)(v20 - 153) < 0) {
    operator delete(*(void **)(v20 - 176));
  }
  _Unwind_Resume(exception_object);
}

void quasar::JapaneseDerivedEnumerator::addEnumerations(uint64_t a1, long long **a2, uint64_t **a3)
{
  if (quasar::gLogLevel >= 6)
  {
    char v6 = *a2;
    char v7 = a2[1];
    if (*a2 != v7)
    {
      do
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "-derived");
        BOOL v8 = quasar::endsWith((uint64_t *)v6 + 3, (uint64_t *)__p);
        if (SBYTE7(v19) < 0) {
          operator delete(__p[0]);
        }
        char v9 = quasar::gLogLevel < 6 || v8;
        if ((v9 & 1) == 0)
        {
          long long v33 = 0u;
          long long v34 = 0u;
          long long v31 = 0u;
          long long v32 = 0u;
          long long v29 = 0u;
          long long v30 = 0u;
          long long v27 = 0u;
          long long v28 = 0u;
          long long v25 = 0u;
          long long v26 = 0u;
          long long v23 = 0u;
          long long v24 = 0u;
          long long v21 = 0u;
          long long v22 = 0u;
          long long v19 = 0u;
          long long v20 = 0u;
          *(_OWORD *)std::string __p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          quasar::operator<<(__p, (uint64_t)v6);
          quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)__p);
        }
        v6 += 5;
      }
      while (v6 != v7);
    }
  }
  quasar::SimpleNameEnumerator::addEnumerations(a1, a2, a3);
  __p[1] = 0;
  *(void *)&long long v19 = 0;
  __p[0] = &__p[1];
  uint64_t v10 = *a2;
  uint64_t v11 = a2[1];
  if (*a2 != v11)
  {
    do
    {
      long long v35 = (long long *)((char *)v10 + 24);
      uint64_t v12 = std::__tree<std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)__p, (const void **)v10 + 3, (uint64_t)&std::piecewise_construct, &v35);
      uint64_t v13 = (std::string *)v12[8];
      if ((unint64_t)v13 >= v12[9])
      {
        p_std::basic_string<char32_t>::size_type size = std::vector<quasar::LmeDataFactoryBase::Word>::__push_back_slow_path<quasar::LmeDataFactoryBase::Word const&>(v12 + 7, v10);
      }
      else
      {
        std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,quasar::LmeDataFactoryBase::Word const&>(v12 + 72, v13, v10);
        p_std::basic_string<char32_t>::size_type size = (uint64_t)&v13[3].__r_.__value_.__l.__size_;
        v12[8] = (uint64_t)&v13[3].__r_.__value_.__l.__size_;
      }
      v12[8] = p_size;
      v10 += 5;
    }
    while (v10 != v11);
  }
  long long v15 = *(const void ***)(a1 + 56);
  long long v16 = *(const void ***)(a1 + 64);
  while (v15 != v16)
  {
    uint64_t v17 = v15 + 3;
    quasar::JapaneseDerivedEnumerator::addDerivedEnumerations(a1, v15, (uint64_t)(v15 + 3), (uint64_t)__p, a3);
    long long v15 = v17 + 3;
  }
  std::__tree<std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>>>::destroy((uint64_t)__p, (void *)__p[1]);
}

void sub_1B22EBEF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[15],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B22EBF80(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[23],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B22EBFD4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<quasar::LmeDataFactoryBase::Word>::__emplace_back_slow_path<std::string,std::string,int>(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x333333333333333) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999) {
    unint64_t v10 = 0x333333333333333;
  }
  else {
    unint64_t v10 = v6;
  }
  uint64_t v18 = a1 + 2;
  if (v10) {
    uint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>>((uint64_t)(a1 + 2), v10);
  }
  else {
    uint64_t v11 = 0;
  }
  int v14 = v11;
  long long v15 = &v11[80 * v5];
  uint64_t v17 = &v11[80 * v10];
  std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,std::string,std::string,int>((uint64_t)(a1 + 2), (uint64_t)v15, a2, a3, a4);
  long long v16 = v15 + 80;
  std::vector<quasar::LmeDataFactoryBase::Word>::__swap_out_circular_buffer(a1, &v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<quasar::LmeDataFactoryBase::Word>::~__split_buffer(&v14);
  return v12;
}

void sub_1B22EC104(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::LmeDataFactoryBase::Word>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,std::string,std::string,int>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  *(_OWORD *)char v7 = *(_OWORD *)a3;
  uint64_t v8 = *(void *)(a3 + 16);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  *(_OWORD *)std::string __p = *(_OWORD *)a4;
  uint64_t v6 = *(void *)(a4 + 16);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  quasar::LmeDataFactoryBase::Word::Word(a2, v7, __p, *a5);
  if (SHIBYTE(v6) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
}

void sub_1B22EC1A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::allocator<quasar::RecogAudioBuffer>::construct[abi:ne180100]<quasar::RecogAudioBuffer,unsigned long &,int,int,BOOL,char const(&)[1],std::shared_ptr<kaldi::Timer const>,int>((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::LmeDataFactoryBase::Word>::__emplace_back_slow_path<std::string,char const(&)[22],int>(uint64_t *a1, uint64_t a2, char *a3, unsigned int *a4)
{
  unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x333333333333333) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999) {
    unint64_t v10 = 0x333333333333333;
  }
  else {
    unint64_t v10 = v6;
  }
  uint64_t v18 = a1 + 2;
  if (v10) {
    uint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>>((uint64_t)(a1 + 2), v10);
  }
  else {
    uint64_t v11 = 0;
  }
  int v14 = v11;
  long long v15 = &v11[80 * v5];
  uint64_t v17 = &v11[80 * v10];
  std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,std::string,char const(&)[22],int>(a1 + 16, (uint64_t)v15, a2, a3, a4);
  long long v16 = v15 + 80;
  std::vector<quasar::LmeDataFactoryBase::Word>::__swap_out_circular_buffer(a1, &v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<quasar::LmeDataFactoryBase::Word>::~__split_buffer(&v14);
  return v12;
}

void sub_1B22EC2D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::LmeDataFactoryBase::Word>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,std::string,char const(&)[22],int>(int a1, uint64_t a2, uint64_t a3, char *__s, unsigned int *a5)
{
  *(_OWORD *)char v9 = *(_OWORD *)a3;
  uint64_t v10 = *(void *)(a3 + 16);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  quasar::LmeDataFactoryBase::Word::Word(a2, v9, __p, *a5);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v10) < 0) {
    operator delete(v9[0]);
  }
}

void sub_1B22EC370(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<quasar::LmeDataFactoryBase::Word>::__emplace_back_slow_path<std::string,char const(&)[23],int>(uint64_t *a1, uint64_t a2, char *a3, unsigned int *a4)
{
  unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x333333333333333) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999) {
    unint64_t v10 = 0x333333333333333;
  }
  else {
    unint64_t v10 = v6;
  }
  uint64_t v18 = a1 + 2;
  if (v10) {
    uint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>>((uint64_t)(a1 + 2), v10);
  }
  else {
    uint64_t v11 = 0;
  }
  int v14 = v11;
  long long v15 = &v11[80 * v5];
  uint64_t v17 = &v11[80 * v10];
  std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,std::string,char const(&)[23],int>(a1 + 16, (uint64_t)v15, a2, a3, a4);
  long long v16 = v15 + 80;
  std::vector<quasar::LmeDataFactoryBase::Word>::__swap_out_circular_buffer(a1, &v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<quasar::LmeDataFactoryBase::Word>::~__split_buffer(&v14);
  return v12;
}

void sub_1B22EC4B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::LmeDataFactoryBase::Word>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,std::string,char const(&)[23],int>(int a1, uint64_t a2, uint64_t a3, char *__s, unsigned int *a5)
{
  *(_OWORD *)char v9 = *(_OWORD *)a3;
  uint64_t v10 = *(void *)(a3 + 16);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  quasar::LmeDataFactoryBase::Word::Word(a2, v9, __p, *a5);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v10) < 0) {
    operator delete(v9[0]);
  }
}

void sub_1B22EC550(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<quasar::LmeDataFactoryBase::Word>::__emplace_back_slow_path<std::string &,char const(&)[23],int>(uint64_t *a1, uint64_t a2, char *a3, unsigned int *a4)
{
  unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x333333333333333) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999) {
    unint64_t v10 = 0x333333333333333;
  }
  else {
    unint64_t v10 = v6;
  }
  uint64_t v18 = a1 + 2;
  if (v10) {
    uint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>>((uint64_t)(a1 + 2), v10);
  }
  else {
    uint64_t v11 = 0;
  }
  int v14 = v11;
  long long v15 = &v11[80 * v5];
  uint64_t v17 = &v11[80 * v10];
  std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,std::string &,char const(&)[23],int>(a1 + 16, (uint64_t)v15, a2, a3, a4);
  long long v16 = v15 + 80;
  std::vector<quasar::LmeDataFactoryBase::Word>::__swap_out_circular_buffer(a1, &v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<quasar::LmeDataFactoryBase::Word>::~__split_buffer(&v14);
  return v12;
}

void sub_1B22EC698(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::LmeDataFactoryBase::Word>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,std::string &,char const(&)[23],int>(int a1, uint64_t a2, uint64_t a3, char *__s, unsigned int *a5)
{
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v10 = *(std::string *)a3;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  quasar::LmeDataFactoryBase::Word::Word(a2, &v10, __p, *a5);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
}

void sub_1B22EC74C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<quasar::LmeDataFactoryBase::Word>::__emplace_back_slow_path<std::string &,char const(&)[22],int>(uint64_t *a1, uint64_t a2, char *a3, unsigned int *a4)
{
  unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x333333333333333) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999) {
    unint64_t v10 = 0x333333333333333;
  }
  else {
    unint64_t v10 = v6;
  }
  uint64_t v18 = a1 + 2;
  if (v10) {
    uint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>>((uint64_t)(a1 + 2), v10);
  }
  else {
    uint64_t v11 = 0;
  }
  int v14 = v11;
  long long v15 = &v11[80 * v5];
  uint64_t v17 = &v11[80 * v10];
  std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,std::string &,char const(&)[22],int>(a1 + 16, (uint64_t)v15, a2, a3, a4);
  long long v16 = v15 + 80;
  std::vector<quasar::LmeDataFactoryBase::Word>::__swap_out_circular_buffer(a1, &v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<quasar::LmeDataFactoryBase::Word>::~__split_buffer(&v14);
  return v12;
}

void sub_1B22EC894(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::LmeDataFactoryBase::Word>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,std::string &,char const(&)[22],int>(int a1, uint64_t a2, uint64_t a3, char *__s, unsigned int *a5)
{
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v10 = *(std::string *)a3;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  quasar::LmeDataFactoryBase::Word::Word(a2, &v10, __p, *a5);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
}

void sub_1B22EC948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::LatticeScoreCache::~LatticeScoreCache(kaldi::LatticeScoreCache *this)
{
  if (kaldi::g_kaldi_verbose_level >= 1)
  {
    uint64_t v2 = *(void *)this;
    uint64_t v3 = *((void *)this + 1);
    if (*(void *)this != v3)
    {
      int v4 = 0;
      do
      {
        v4 += *(_DWORD *)(v2 + 24);
        v2 += 40;
      }
      while (v2 != v3);
    }
    if (kaldi::g_kaldi_verbose_level > 4)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v6, 5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Lattice score cache indices = ", 30);
      unint64_t v5 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" vals = ", 8);
      std::ostream::operator<<();
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v6);
    }
  }
  v6[0] = (void **)this;
  std::vector<std::unordered_set<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,std::allocator<kaldi::quasar::AbstractAttribute *>>>::__destroy_vector::operator()[abi:ne180100](v6);
}

float *kaldi::LatticeScoreCache::CacheScore(kaldi::LatticeScoreCache *this, int a2, int a3, float a4)
{
  int v9 = a3;
  uint64_t v5 = *(void *)this;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)this + 1) - *(void *)this) >> 3) <= a2)
  {
    std::vector<std::unordered_map<int,float>>::resize((uint64_t *)this, a2 + 1);
    uint64_t v5 = *(void *)this;
  }
  std::string v10 = &v9;
  uint64_t result = (float *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(v5 + 40 * a2, &v9, (uint64_t)&std::piecewise_construct, &v10);
  result[5] = a4;
  return result;
}

uint64_t std::vector<std::unordered_map<int,float>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t result = a1[1];
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((result - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    return std::vector<std::unordered_map<int,float>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 40 * a2;
    while (result != v7)
      uint64_t result = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(result - 40);
    a1[1] = v7;
  }
  return result;
}

float kaldi::LatticeScoreCache::GetScore(kaldi::LatticeScoreCache *this, unsigned int a2, int a3)
{
  int v9 = a3;
  if ((a2 & 0x80000000) != 0 || 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)this + 1) - *(void *)this) >> 3) <= a2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Supplied frame ", 15);
    BOOL v5 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" is out of range of cache which is in [0,", 41);
    unint64_t v6 = (void *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v6, ")");
    goto LABEL_7;
  }
  uint64_t v3 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(*(void *)this + 40 * a2), &v9);
  if (!v3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Pdf ", 4);
    uint64_t v7 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" is not in cache for frame ", 27);
    std::ostream::operator<<();
LABEL_7:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8);
  }
  return *((float *)v3 + 5);
}

uint64_t *kaldi::LatticeScoreCache::ScaleAcousticScores(uint64_t *this, float a2)
{
  uint64_t v2 = *this;
  uint64_t v3 = this[1];
  uint64_t v4 = v3 - *this;
  if (v3 != *this)
  {
    uint64_t v5 = 0;
    unint64_t v6 = v4 / 40;
    if (v6 <= 1) {
      unint64_t v6 = 1;
    }
    do
    {
      for (unint64_t i = *(float **)(v2 + 40 * v5 + 16); i; unint64_t i = *(float **)i)
        i[5] = i[5] * a2;
      ++v5;
    }
    while (v5 != v6);
  }
  return this;
}

uint64_t std::vector<std::unordered_map<int,float>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(result - 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      uint64_t v13 = v7 + 40 * a2;
      do
      {
        *(_OWORD *)uint64_t v7 = 0uLL;
        *(_OWORD *)(v7 + 16) = 0uLL;
        *(_DWORD *)(v7 + 32) = 1065353216;
        v7 += 40;
      }
      while (v7 != v13);
      uint64_t v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x666666666666666) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x333333333333333) {
      unint64_t v11 = 0x666666666666666;
    }
    else {
      unint64_t v11 = v9;
    }
    v16[4] = result;
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(result, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    int v14 = &v12[40 * v8];
    v16[0] = v12;
    v16[1] = v14;
    void v16[3] = &v12[40 * v11];
    long long v15 = &v14[40 * a2];
    do
    {
      *(_OWORD *)int v14 = 0uLL;
      *((_OWORD *)v14 + 1) = 0uLL;
      *((_DWORD *)v14 + 8) = 1065353216;
      v14 += 40;
    }
    while (v14 != v15);
    void v16[2] = v15;
    std::vector<std::unordered_map<std::string,unsigned long>>::__swap_out_circular_buffer(a1, v16);
    return std::__split_buffer<std::unordered_set<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,std::allocator<kaldi::quasar::AbstractAttribute *>>>::~__split_buffer((uint64_t)v16);
  }
  return result;
}

void sub_1B22ECE58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::unordered_set<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,std::allocator<kaldi::quasar::AbstractAttribute *>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *quasar::PhraseBookOptions::options@<X0>(quasar::PhraseBookOptions *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t result = operator new(0x40uLL);
  a2[1] = result + 8;
  a2[2] = result + 8;
  *uint64_t result = (char *)this + 16;
  result[1] = (char *)this + 160;
  result[2] = (char *)this + 320;
  result[3] = (char *)this + 464;
  result[4] = (char *)this + 608;
  result[5] = (char *)this + 768;
  result[6] = (char *)this + 912;
  result[7] = (char *)this + 1072;
  *a2 = result;
  return result;
}

double quasar::PhraseBookFactory::createPhraseBook@<D0>(std::string *this@<X0>, std::string::value_type a2@<W1>, long long *a3@<X2>, std::string::value_type a4@<W3>, _OWORD *a5@<X8>)
{
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
  }
  else {
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  }
  if (std::string::compare(this, size - 5, 5uLL, ".dict"))
  {
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      std::string::size_type v11 = this->__r_.__value_.__l.__size_;
    }
    else {
      std::string::size_type v11 = HIBYTE(this->__r_.__value_.__r.__words[2]);
    }
    if (!std::string::compare(this, v11 - 3, 3uLL, ".db")) {
      quasar::DatabasePhraseBook::getPhraseBook();
    }
    memset(v13, 0, sizeof(v13));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "Phrasebook file type unknown");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v13);
  }
  quasar::SharedPhraseBook::getPhraseBook((uint64_t)this, a2, a3, a4, v13);
  double result = *(double *)v13;
  *a5 = v13[0];
  return result;
}

void quasar::PhraseBookBlock::updateConfiguration(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + 21;
  quasar::ProcessingBlock::updateConfiguration((uint64_t)a1 + *(void *)(*a1 - 24), a2, a3, a4);
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v6 = (const std::string *)quasar::OptionValue<std::string>::value(v5);
  kaldi::SplitStringToVector(v6, ",", 1, (uint64_t)&v12);
  uint64_t v7 = v12;
  for (uint64_t i = v13; v7 != i; v7 += 24)
  {
    if (*(char *)(v7 + 23) < 0) {
      uint64_t v9 = *(void *)(v7 + 8);
    }
    else {
      uint64_t v9 = *(unsigned __int8 *)(v7 + 23);
    }
    if (!std::string::compare((const std::string *)v7, v9 - 3, 3uLL, ".db"))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "DatabasePhraseBook");
      quasar::SystemConfig::enforceMinVersion(a2, 238, 0, (uint64_t)__p);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  __p[0] = &v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1B22ED124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::string __p = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void virtual thunk to'quasar::PhraseBookBlock::updateConfiguration(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void quasar::PhraseBookBlock::init(quasar::PhraseBookBlock *this)
{
  uint64_t v2 = quasar::OptionValue<std::string>::value((void *)this + 77);
  int v3 = *(char *)(v2 + 23);
  if (v3 < 0)
  {
    if (*(void *)(v2 + 8) != 7) {
      goto LABEL_10;
    }
    uint64_t v2 = *(void *)v2;
  }
  else if (v3 != 7)
  {
    goto LABEL_10;
  }
  if (*(_DWORD *)v2 == 1634953572 && *(_DWORD *)(v2 + 3) == 1701601889)
  {
    *((unsigned char *)this + 1248) = 1;
    return;
  }
LABEL_10:
  long long v25 = 0;
  long long v26 = 0;
  uint64_t v27 = 0;
  uint64_t v5 = (const std::string *)quasar::OptionValue<std::string>::value((void *)this + 21);
  kaldi::SplitStringToVector(v5, ",", 1, (uint64_t)&v25);
  uint64_t v6 = v25;
  uint64_t v7 = v26;
  if (v25 != v26)
  {
    unint64_t v8 = (void *)((char *)this + 1224);
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v6, *((void *)v6 + 1));
      }
      else
      {
        long long v9 = *v6;
        __p.__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v9;
      }
      int v10 = *(unsigned __int8 *)quasar::OptionValue<BOOL>::value((void *)this + 3);
      char v11 = (long long *)quasar::OptionValue<std::string>::value((void *)this + 115);
      uint64_t v12 = (std::string::value_type *)quasar::OptionValue<BOOL>::value((void *)this + 135);
      quasar::PhraseBookFactory::createPhraseBook(&__p, v10 != 0, v11, *v12, &v24);
      uint64_t v13 = (_OWORD *)*((void *)this + 154);
      unint64_t v14 = *((void *)this + 155);
      if ((unint64_t)v13 >= v14)
      {
        uint64_t v16 = ((uint64_t)v13 - *v8) >> 4;
        if ((unint64_t)(v16 + 1) >> 60) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v17 = v14 - *v8;
        uint64_t v18 = v17 >> 3;
        if (v17 >> 3 <= (unint64_t)(v16 + 1)) {
          uint64_t v18 = v16 + 1;
        }
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v19 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v19 = v18;
        }
        v28[4] = (char *)this + 1240;
        long long v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)this + 1240, v19);
        long long v21 = &v20[16 * v16];
        v28[0] = v20;
        v28[1] = v21;
        void v28[3] = &v20[16 * v22];
        *(_OWORD *)long long v21 = v24;
        long long v24 = 0uLL;
        v28[2] = v21 + 16;
        std::vector<std::shared_ptr<quasar::GenericPhraseBook>>::__swap_out_circular_buffer((uint64_t *)this + 153, v28);
        long long v15 = (_OWORD *)*((void *)this + 154);
        std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer(v28);
      }
      else
      {
        *uint64_t v13 = v24;
        long long v15 = v13 + 1;
        *((void *)this + 154) = v15;
      }
      *((void *)this + 154) = v15;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v6 = (long long *)((char *)v6 + 24);
    }
    while (v6 != v7);
  }
  v28[0] = &v25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v28);
}

void sub_1B22ED3A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char *a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a16 = &a18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  _Unwind_Resume(a1);
}

void virtual thunk to'quasar::PhraseBookBlock::init(quasar::PhraseBookBlock *this)
{
}

void quasar::PhraseBookBlock::process(uint64_t a1, uint64_t a2, quasar::TranslationPhraseInternal **a3)
{
  void (***v10)(uint64_t *__return_ptr);
  int v11;
  long long v12;
  BOOL v13;
  std::vector<std::pair<std::string, std::string>>::pointer begin;
  long long v15;
  void *v16;
  const std::string *v17;
  const std::string *v18;
  std::string::size_type size;
  std::string::size_type v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  int v28;
  std::string *v29;
  std::string *v30;
  uint64_t v31;
  uint64_t v32;
  long long v33;
  long long v34;
  unint64_t v35;
  std::string *v36;
  std::string *v37;
  uint64_t v38;
  std::vector<std::pair<std::string, std::string>>::pointer end;
  void *v40;
  int v41;
  void *v42[2];
  char v43;
  std::string v44;
  unsigned char v45[64];
  std::string v46;
  std::string v47;
  uint64_t v48;
  std::string __p;
  uint64_t v50;
  int v51;
  long long v52;
  long long v53;
  long long v54;
  uint64_t v55;
  uint64_t v56;
  std::string v57;
  std::string *v58;
  std::string *v59;
  unint64_t v60;
  uint64_t v61;
  quasar::MetaInfo::Impl *v62;
  const std::string *v63;
  const std::string *v64;
  uint64_t v65;
  uint64_t v66;
  std::string *v67;
  unint64_t v68;
  std::vector<std::pair<std::string, std::string>> v69;
  void *v70[2];
  char v71;
  uint64_t vars8;

  uint64_t v4 = (void *)a1;
  if (*(unsigned char *)(a1 + 1248) || (uint64_t v6 = *a3, *a3 == a3[1]) || !*((unsigned char *)v6 + 128))
  {
    uint64_t v5 = (uint64_t)v4 + *(void *)(*v4 - 24);
    quasar::ProcessingBlock::send(v5, (uint64_t)a3, 0);
  }
  else
  {
    quasar::TranslationPhraseInternal::convertTokensToString((uint64_t *)v70, v6);
    memset(&v69, 0, sizeof(v69));
    uint64_t v7 = v4[153];
    uint64_t v8 = v4[154];
    if (v7 == v8) {
      goto LABEL_103;
    }
    uint64_t v9 = v7 + 16;
    do
    {
      int v10 = *(void (****)(uint64_t *__return_ptr))(v9 - 16);
      char v11 = *(unsigned __int8 *)quasar::OptionValue<BOOL>::value(v4 + 97);
      quasar::OptionValue<int>::value(v4 + 41);
      quasar::GenericPhraseBook::lookup(v10, v11 != 0, &v57);
      std::vector<std::pair<std::string,std::string>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::pair<std::string,std::string>*>,std::__wrap_iter<std::pair<std::string,std::string>*>>(&v69, v69.__end_, (std::string *)v57.__r_.__value_.__l.__data_, (long long *)v57.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v57.__r_.__value_.__l.__size_ - v57.__r_.__value_.__r.__words[0]) >> 4));
      uint64_t v12 = *(_OWORD *)&v57.__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[0] = (std::string::size_type)&v57;
      std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
      if ((void)v12 != *((void *)&v12 + 1)) {
        break;
      }
      uint64_t v13 = v9 == v8;
      v9 += 16;
    }
    while (!v13);
    long long v40 = v4 + 41;
    std::vector<std::string>::pointer begin = v69.__begin_;
    std::vector<std::string>::pointer end = v69.__end_;
    if (v69.__begin_ == v69.__end_)
    {
LABEL_103:
      quasar::ProcessingBlock::send((uint64_t)v4 + *(void *)(*v4 - 24), (uint64_t)a3, 0);
    }
    else
    {
      long long v41 = 0;
      unint64_t v66 = 0;
      uint64_t v67 = 0;
      unint64_t v68 = 0;
      do
      {
        if (v41 >= *(_DWORD *)quasar::OptionValue<int>::value(v40)) {
          break;
        }
        char v63 = 0;
        std::basic_string<char32_t> v64 = 0;
        uint64_t v65 = 0;
        if (SHIBYTE(begin->first.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(&v57, begin->first.__r_.__value_.__l.__data_, begin->first.__r_.__value_.__l.__size_);
        }
        else
        {
          long long v15 = *(_OWORD *)&begin->first.__r_.__value_.__l.__data_;
          v57.__r_.__value_.__r.__words[2] = begin->first.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v15;
        }
        kaldi::SplitStringToVector(&v57, " ", 1, (uint64_t)&v63);
        if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v57.__r_.__value_.__l.__data_);
        }
        uint64_t v16 = v4;
        quasar::TranslationPhraseInternal::TranslationPhraseInternal((quasar::TranslationPhraseInternal *)&v57);
        uint64_t v61 = 0;
        HIDWORD(v57.__r_.__value_.__r.__words[0]) = 1148846080;
        uint64_t v18 = v63;
        uint64_t v17 = v64;
        while (v18 != v17)
        {
          memset(&__p, 0, sizeof(__p));
          memset(&v47, 0, sizeof(v47));
          LOWORD(v48) = 0;
          std::basic_string<char32_t>::size_type v50 = 3212836864;
          uint64_t v51 = -1;
          std::string v52 = 0u;
          std::string v53 = 0u;
          std::string v54 = 0u;
          uint64_t v55 = 0;
          unint64_t v56 = -1;
          std::string::operator=(&v47, v18);
          LOBYTE(v48) = 1;
          *((void *)&v53 + 1) = 0;
          LODWORD(v5std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = 1148846080;
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
          {
            long long v21 = (void *)__p.__r_.__value_.__r.__words[0];
            uint64_t v22 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 2;
            long long v23 = v22 + 1;
            if ((unint64_t)(v22 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            long long v24 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
            if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 1 > v23) {
              long long v23 = v24 >> 1;
            }
            if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL) {
              long long v25 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              long long v25 = v23;
            }
            if (v25)
            {
              long long v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&__p.__r_.__value_.__r.__words[2], v25);
              std::string::size_type size = __p.__r_.__value_.__l.__size_;
              long long v21 = (void *)__p.__r_.__value_.__r.__words[0];
            }
            else
            {
              long long v26 = 0;
            }
            uint64_t v27 = &v26[4 * v22];
            *(_DWORD *)uint64_t v27 = -1;
            long long v20 = (std::string::size_type)(v27 + 4);
            while ((void *)size != v21)
            {
              long long v28 = *(_DWORD *)(size - 4);
              size -= 4;
              *((_DWORD *)v27 - 1) = v28;
              v27 -= 4;
            }
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
            __p.__r_.__value_.__l.__size_ = v20;
            __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v26[4 * v25];
            if (v21) {
              operator delete(v21);
            }
          }
          else
          {
            *(_DWORD *)__p.__r_.__value_.__l.__size_ = -1;
            long long v20 = size + 4;
          }
          __p.__r_.__value_.__l.__size_ = v20;
          long long v29 = v59;
          if ((unint64_t)v59 >= v60)
          {
            long long v30 = (std::string *)std::vector<quasar::TranslationTokenInternal>::__push_back_slow_path<quasar::TranslationTokenInternal const&>((uint64_t *)&v58, (const quasar::TranslationTokenInternal *)&v47);
          }
          else
          {
            quasar::TranslationTokenInternal::TranslationTokenInternal(v59, (const quasar::TranslationTokenInternal *)&v47);
            long long v30 = (std::string *)((char *)v29 + 136);
          }
          long long v59 = v30;
          if ((void)v54)
          {
            *((void *)&v54 + 1) = v54;
            operator delete((void *)v54);
          }
          if (SBYTE7(v53) < 0) {
            operator delete((void *)v52);
          }
          if (__p.__r_.__value_.__r.__words[0])
          {
            __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v47.__r_.__value_.__l.__data_);
          }
          ++v18;
        }
        if (v58 != v59) {
          v59[-5].__r_.__value_.__s.__data_[8] = 0;
        }
        long long v31 = quasar::MetaInfo::get((quasar::TranslationPhraseInternal *)((char *)*a3 + 192));
        long long v32 = v31;
        LODWORD(v47.__r_.__value_.__l.__data_) = *(_DWORD *)v31;
        if (*(char *)(v31 + 31) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v47.__r_.__value_.__r.__words[1], *(const std::string::value_type **)(v31 + 8), *(void *)(v31 + 16));
        }
        else
        {
          long long v33 = *(_OWORD *)(v31 + 8);
          long long v48 = *(void *)(v31 + 24);
          *(_OWORD *)&v47.__r_.__value_.__r.__words[1] = v33;
        }
        memset(&__p, 0, sizeof(__p));
        std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>(&__p, *(void *)(v32 + 32), *(void *)(v32 + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(v32 + 40) - *(void *)(v32 + 32)) >> 3));
        LOBYTE(v5std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = *(unsigned char *)(v32 + 56);
        if (SHIBYTE(begin->second.__r_.__value_.__r.__words[2]) < 0)
        {
          uint64_t v4 = v16;
          if (begin->second.__r_.__value_.__l.__size_) {
LABEL_59:
          }
            quasar::MetaInfo::fromJson((quasar::MetaInfo *)v45);
        }
        else
        {
          uint64_t v4 = v16;
          if (*((unsigned char *)&begin->second.__r_.__value_.__s + 23)) {
            goto LABEL_59;
          }
        }
        std::string::basic_string[abi:ne180100]<0>(&v46, "input");
        quasar::PTree::PTree(v45, v70);
        quasar::PTree::putChild((uint64_t)&v47, (uint64_t)&v46, (uint64_t)v45, 1);
        quasar::PTree::~PTree((quasar::PTree *)v45);
        if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v46.__r_.__value_.__l.__data_);
        }
        std::string::basic_string[abi:ne180100]<0>(&v46, "output");
        if (SHIBYTE(begin->first.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(&v44, begin->first.__r_.__value_.__l.__data_, begin->first.__r_.__value_.__l.__size_);
        }
        else
        {
          long long v34 = *(_OWORD *)&begin->first.__r_.__value_.__l.__data_;
          v44.__r_.__value_.__r.__words[2] = begin->first.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v34;
        }
        quasar::PTree::PTree(v45, &v44);
        quasar::PTree::putChild((uint64_t)&v47, (uint64_t)&v46, (uint64_t)v45, 1);
        quasar::PTree::~PTree((quasar::PTree *)v45);
        if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v44.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v46.__r_.__value_.__l.__data_);
        }
        std::string::basic_string[abi:ne180100]<0>(&v46, "cost");
        std::string::basic_string[abi:ne180100]<0>(&v44, "0,0");
        quasar::PTree::PTree(v45, &v44);
        quasar::PTree::putChild((uint64_t)&v47, (uint64_t)&v46, (uint64_t)v45, 1);
        quasar::PTree::~PTree((quasar::PTree *)v45);
        if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v44.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v46.__r_.__value_.__l.__data_);
        }
        std::string::basic_string[abi:ne180100]<0>(&v46, "norm_cost");
        std::string::basic_string[abi:ne180100]<0>(&v44, "0");
        quasar::PTree::PTree(v45, &v44);
        quasar::PTree::putChild((uint64_t)&v47, (uint64_t)&v46, (uint64_t)v45, 1);
        quasar::PTree::~PTree((quasar::PTree *)v45);
        if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v44.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v46.__r_.__value_.__l.__data_);
        }
        std::string::basic_string[abi:ne180100]<0>(&v46, "status");
        std::string::basic_string[abi:ne180100]<0>(&v44, "phrasebook_exact");
        quasar::PTree::PTree(v45, &v44);
        quasar::PTree::putChild((uint64_t)&v47, (uint64_t)&v46, (uint64_t)v45, 1);
        quasar::PTree::~PTree((quasar::PTree *)v45);
        if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v44.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v46.__r_.__value_.__l.__data_);
        }
        std::string::basic_string[abi:ne180100]<0>(&v46, "1000");
        if (0xF0F0F0F0F0F0F0F1 * (((char *)v59 - (char *)v58) >> 3) >= 2)
        {
          long long v35 = 1;
          do
          {
            std::string::append(&v46, " 1000");
            ++v35;
          }
          while (0xF0F0F0F0F0F0F0F1 * (((char *)v59 - (char *)v58) >> 3) > v35);
        }
        std::string::basic_string[abi:ne180100]<0>(&v44, "word confidences");
        quasar::PTree::PTree(v45, &v46);
        quasar::PTree::putChild((uint64_t)&v47, (uint64_t)&v44, (uint64_t)v45, 1);
        quasar::PTree::~PTree((quasar::PTree *)v45);
        if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v44.__r_.__value_.__l.__data_);
        }
        std::string::basic_string[abi:ne180100]<0>(&v44, "sentence confidence");
        std::string::basic_string[abi:ne180100]<0>(v42, "1000");
        quasar::PTree::PTree(v45, v42);
        quasar::PTree::putChild((uint64_t)&v47, (uint64_t)&v44, (uint64_t)v45, 1);
        quasar::PTree::~PTree((quasar::PTree *)v45);
        if (v43 < 0) {
          operator delete(v42[0]);
        }
        if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v44.__r_.__value_.__l.__data_);
        }
        std::string::basic_string[abi:ne180100]<0>(&v44, "low confidence");
        std::string::basic_string[abi:ne180100]<0>(v42, "false");
        quasar::PTree::PTree(v45, v42);
        quasar::PTree::putChild((uint64_t)&v47, (uint64_t)&v44, (uint64_t)v45, 1);
        quasar::PTree::~PTree((quasar::PTree *)v45);
        if (v43 < 0) {
          operator delete(v42[0]);
        }
        if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v44.__r_.__value_.__l.__data_);
        }
        quasar::MetaInfo::update(&v62, (const quasar::PTree *)&v47);
        long long v36 = v67;
        if ((unint64_t)v67 >= v68)
        {
          long long v37 = (std::string *)std::vector<quasar::TranslationPhraseInternal>::__push_back_slow_path<quasar::TranslationPhraseInternal const&>(&v66, (const quasar::TranslationPhraseInternal *)&v57);
        }
        else
        {
          quasar::TranslationPhraseInternal::TranslationPhraseInternal(v67, (const quasar::TranslationPhraseInternal *)&v57);
          long long v37 = (std::string *)((char *)v36 + 200);
        }
        uint64_t v67 = v37;
        if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v46.__r_.__value_.__l.__data_);
        }
        ++v41;
        quasar::PTree::~PTree((quasar::PTree *)&v47);
        quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)&v57);
        v57.__r_.__value_.__r.__words[0] = (std::string::size_type)&v63;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v57);
        ++begin;
      }
      while (begin != end);
      long long v38 = *(void *)(*v4 - 24);
      std::string::basic_string[abi:ne180100]<0>(&v57, "final");
      quasar::ProcessingBlock::send((uint64_t)v4 + v38, (const void **)&v57.__r_.__value_.__l.__data_, (uint64_t)&v66, 0);
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v57.__r_.__value_.__l.__data_);
      }
      v57.__r_.__value_.__r.__words[0] = (std::string::size_type)&v66;
      std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)&v57);
    }
    v57.__r_.__value_.__r.__words[0] = (std::string::size_type)&v69;
    std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v57);
    if (v71 < 0) {
      operator delete(v70[0]);
    }
  }
}

void sub_1B22EDD78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (a56 < 0) {
    operator delete(__p);
  }
  std::string __p = (void *)(v56 - 176);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a34 = v56 - 152;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a34);
  if (*(char *)(v56 - 105) < 0) {
    operator delete(*(void **)(v56 - 128));
  }
  _Unwind_Resume(a1);
}

void virtual thunk to'quasar::PhraseBookBlock::process(void *a1, uint64_t a2, quasar::TranslationPhraseInternal **a3)
{
}

uint64_t quasar::PhraseBookBlock::minConfigVersion(quasar::PhraseBookBlock *this)
{
  return 133;
}

uint64_t virtual thunk to'quasar::PhraseBookBlock::minConfigVersion(quasar::PhraseBookBlock *this)
{
  return 133;
}

void quasar::ConfiguredProcessingBlock<quasar::PhraseBookOptions>::setContextProvider(uint64_t a1, uint64_t *a2)
{
  void (***v3)(uint64_t **__return_ptr);
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t *v10;
  uint64_t *v11;

  int v3 = (void (***)(uint64_t **__return_ptr))(*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
  (**v3)(&v10);
  uint64_t v4 = v10;
  uint64_t v5 = v11;
  if (v10 != v11)
  {
    do
    {
      uint64_t v6 = *v4;
      uint64_t v7 = (std::__shared_weak_count *)a2[1];
      uint64_t v8 = *a2;
      uint64_t v9 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      quasar::OptionValueBase::setContextProvider(v6, &v8);
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
      ++v4;
    }
    while (v4 != v5);
    uint64_t v4 = v10;
  }
  if (v4)
  {
    char v11 = v4;
    operator delete(v4);
  }
}

void sub_1B22EE088(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::ConfiguredProcessingBlock<quasar::PhraseBookOptions>::getOptions(uint64_t a1)
{
  return a1 + 8;
}

void virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::PhraseBookOptions>::setContextProvider(void *a1, uint64_t *a2)
{
}

uint64_t virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::PhraseBookOptions>::getOptions(void *a1)
{
  return (uint64_t)a1 + *(void *)(*a1 - 104) + 8;
}

void quasar::PhraseBookBlock::~PhraseBookBlock(quasar::PhraseBookBlock *this)
{
  *(void *)this = off_1F0A52FF0;
  uint64_t v2 = (char **)((char *)this + 1256);
  *((void *)this + 157) = off_1F0A530A0;
  int v3 = (void **)((char *)this + 1224);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v3);
  *(void *)this = &unk_1F0A21770;
  *((void *)this + 157) = &unk_1F0A217F8;
  quasar::PhraseBookOptions::~PhraseBookOptions((quasar::PhraseBookBlock *)((char *)this + 8));
  quasar::ProcessingBlock::~ProcessingBlock(v2);
}

{
  char **v2;
  void **v3;

  *(void *)this = off_1F0A52FF0;
  uint64_t v2 = (char **)((char *)this + 1256);
  *((void *)this + 157) = off_1F0A530A0;
  int v3 = (void **)((char *)this + 1224);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v3);
  *(void *)this = &unk_1F0A21770;
  *((void *)this + 157) = &unk_1F0A217F8;
  quasar::PhraseBookOptions::~PhraseBookOptions((quasar::PhraseBookBlock *)((char *)this + 8));
  quasar::ProcessingBlock::~ProcessingBlock(v2);
  MEMORY[0x1B3EA8670](this, 0x10F3C40C6145FEFLL);
}

const char *quasar::PhraseBookBlock::blockType(quasar::PhraseBookBlock *this)
{
  return "PhraseBookBlock";
}

void virtual thunk to'quasar::PhraseBookBlock::~PhraseBookBlock(quasar::PhraseBookBlock *this)
{
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24);
  *(void *)uint64_t v1 = off_1F0A52FF0;
  *((void *)v1 + 157) = off_1F0A530A0;
  uint64_t v2 = (void **)(v1 + 1224);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v2);
  *(void *)uint64_t v1 = &unk_1F0A21770;
  *((void *)v1 + 157) = &unk_1F0A217F8;
  quasar::PhraseBookOptions::~PhraseBookOptions((quasar::PhraseBookOptions *)(v1 + 8));
  quasar::ProcessingBlock::~ProcessingBlock((char **)v1 + 157);
}

{
  char *v1;
  void **v2;

  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24);
  *(void *)uint64_t v1 = off_1F0A52FF0;
  *((void *)v1 + 157) = off_1F0A530A0;
  uint64_t v2 = (void **)(v1 + 1224);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v2);
  *(void *)uint64_t v1 = &unk_1F0A21770;
  *((void *)v1 + 157) = &unk_1F0A217F8;
  quasar::PhraseBookOptions::~PhraseBookOptions((quasar::PhraseBookOptions *)(v1 + 8));
  quasar::ProcessingBlock::~ProcessingBlock((char **)v1 + 157);
  MEMORY[0x1B3EA8670](v1, 0x10F3C40C6145FEFLL);
}

const char *virtual thunk to'quasar::PhraseBookBlock::blockType(quasar::PhraseBookBlock *this)
{
  return "PhraseBookBlock";
}

uint64_t std::vector<std::shared_ptr<quasar::GenericPhraseBook>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<quasar::GenericPhraseBook>>,std::reverse_iterator<std::shared_ptr<quasar::GenericPhraseBook>*>,std::reverse_iterator<std::shared_ptr<quasar::GenericPhraseBook>*>,std::reverse_iterator<std::shared_ptr<quasar::GenericPhraseBook>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<quasar::GenericPhraseBook>>,std::reverse_iterator<std::shared_ptr<quasar::GenericPhraseBook>*>,std::reverse_iterator<std::shared_ptr<quasar::GenericPhraseBook>*>,std::reverse_iterator<std::shared_ptr<quasar::GenericPhraseBook>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::GenericPhraseBook>>,std::reverse_iterator<std::shared_ptr<quasar::GenericPhraseBook>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::GenericPhraseBook>>,std::reverse_iterator<std::shared_ptr<quasar::GenericPhraseBook>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::FeatureExtractor>>,std::reverse_iterator<std::shared_ptr<quasar::FeatureExtractor>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

quasar::LmePackedProns *quasar::LmePackedProns::LmePackedProns(quasar::LmePackedProns *this, const quasar::LmeDataFactoryBase::PronSet *a2, fst::SymbolTable *a3)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  quasar::Bitmap::~Bitmap(a2);
  uint64_t v6 = v5 + 1;
  uint64_t v7 = (void *)*v5;
  if ((void *)*v5 == v5 + 1) {
    return this;
  }
  uint64_t v8 = (char **)((char *)this + 16);
  while (quasar::isPronTypeEmbedding(*((_DWORD *)v7 + 8)))
  {
    if (*((char *)v7 + 63) < 0) {
      unint64_t v9 = v7[6];
    }
    else {
      unint64_t v9 = *((unsigned __int8 *)v7 + 63);
    }
    std::vector<unsigned short>::resize((uint64_t)this, (v9 >> 1) + 3);
    uint64_t v22 = *(void *)this;
    *(_WORD *)uint64_t v22 = *((_WORD *)v7 + 16) ^ 0x8000;
    *(_DWORD *)(v22 + 2) = *((_DWORD *)v7 + 16);
    if (*((char *)v7 + 63) < 0)
    {
      long long v23 = (const void *)v7[5];
      size_t v24 = v7[6];
    }
    else
    {
      long long v23 = v7 + 5;
      size_t v24 = *((unsigned __int8 *)v7 + 63);
    }
    memcpy((void *)(v22 + 6), v23, v24);
LABEL_86:
    std::basic_string<char32_t> v64 = (void *)v7[1];
    if (v64)
    {
      do
      {
        uint64_t v65 = v64;
        std::basic_string<char32_t> v64 = (void *)*v64;
      }
      while (v64);
    }
    else
    {
      do
      {
        uint64_t v65 = (void *)v7[2];
        BOOL v66 = *v65 == (void)v7;
        uint64_t v7 = v65;
      }
      while (!v66);
    }
    uint64_t v7 = v65;
    if (v65 == v6) {
      return this;
    }
  }
  uint64_t v10 = (char *)quasar::PronTypeToSeparator(*((_DWORD *)v7 + 8));
  std::string::basic_string[abi:ne180100]<0>(__p, v10);
  quasar::splitAndTrimNoEmpty((const std::string *)(v7 + 5), (char *)__p, &v85);
  if (SBYTE7(v69) < 0) {
    operator delete(__p[0]);
  }
  std::vector<unsigned short>::reserve((void **)this, 3 - 0x5555555555555555 * ((v86 - v85) >> 3));
  __int16 v11 = *((_WORD *)v7 + 16) + 0x8000;
  char v13 = (char *)*((void *)this + 1);
  uint64_t v12 = (char *)*((void *)this + 2);
  if (v13 >= v12)
  {
    long long v15 = *(char **)this;
    uint64_t v16 = (uint64_t)&v13[-*(void *)this];
    if (v16 <= -3) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v17 = v16 >> 1;
    unint64_t v18 = v12 - v15;
    if (v18 <= (v16 >> 1) + 1) {
      unint64_t v19 = v17 + 1;
    }
    else {
      unint64_t v19 = v18;
    }
    if (v18 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v20 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v20 = v19;
    }
    if (v20)
    {
      long long v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>((uint64_t)this + 16, v20);
      long long v15 = *(char **)this;
      char v13 = (char *)*((void *)this + 1);
    }
    else
    {
      long long v21 = 0;
    }
    long long v25 = &v21[2 * v17];
    *(_WORD *)long long v25 = v11;
    long long v14 = v25 + 2;
    while (v13 != v15)
    {
      __int16 v26 = *((_WORD *)v13 - 1);
      v13 -= 2;
      *((_WORD *)v25 - 1) = v26;
      v25 -= 2;
    }
    uint64_t v12 = &v21[2 * v20];
    *(void *)this = v25;
    *((void *)this + 1) = v14;
    *((void *)this + 2) = v12;
    if (v15)
    {
      operator delete(v15);
      uint64_t v12 = *v8;
    }
  }
  else
  {
    *(_WORD *)char v13 = v11;
    long long v14 = v13 + 2;
  }
  *((void *)this + 1) = v14;
  int v27 = *((_DWORD *)v7 + 16);
  if (v14 >= v12)
  {
    long long v29 = *(char **)this;
    uint64_t v30 = (uint64_t)&v14[-*(void *)this];
    if (v30 <= -3) {
      goto LABEL_98;
    }
    uint64_t v31 = v30 >> 1;
    unint64_t v32 = v12 - v29;
    if (v32 <= (v30 >> 1) + 1) {
      unint64_t v33 = v31 + 1;
    }
    else {
      unint64_t v33 = v32;
    }
    if (v32 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v34 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v34 = v33;
    }
    if (v34)
    {
      long long v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>((uint64_t)this + 16, v34);
      long long v29 = *(char **)this;
      long long v14 = (char *)*((void *)this + 1);
    }
    else
    {
      long long v35 = 0;
    }
    long long v36 = &v35[2 * v31];
    *(_WORD *)long long v36 = v27;
    long long v28 = v36 + 2;
    while (v14 != v29)
    {
      __int16 v37 = *((_WORD *)v14 - 1);
      v14 -= 2;
      *((_WORD *)v36 - 1) = v37;
      v36 -= 2;
    }
    uint64_t v12 = &v35[2 * v34];
    *(void *)this = v36;
    *((void *)this + 1) = v28;
    *((void *)this + 2) = v12;
    if (v29)
    {
      operator delete(v29);
      uint64_t v12 = *v8;
    }
  }
  else
  {
    *(_WORD *)long long v14 = v27;
    long long v28 = v14 + 2;
  }
  *((void *)this + 1) = v28;
  if (v28 >= v12)
  {
    long long v39 = *(char **)this;
    uint64_t v40 = (uint64_t)&v28[-*(void *)this];
    if (v40 < -2) {
LABEL_98:
    }
      std::vector<int>::__throw_length_error[abi:ne180100]();
    uint64_t v41 = v40 >> 1;
    unint64_t v42 = v12 - v39;
    if (v42 <= (v40 >> 1) + 1) {
      unint64_t v43 = v41 + 1;
    }
    else {
      unint64_t v43 = v42;
    }
    if (v42 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v44 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v44 = v43;
    }
    if (v44)
    {
      long long v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>((uint64_t)this + 16, v44);
      long long v39 = *(char **)this;
      long long v28 = (char *)*((void *)this + 1);
    }
    else
    {
      long long v45 = 0;
    }
    long long v46 = &v45[2 * v41];
    *(_WORD *)long long v46 = HIWORD(v27);
    long long v38 = v46 + 2;
    while (v28 != v39)
    {
      __int16 v47 = *((_WORD *)v28 - 1);
      v28 -= 2;
      *((_WORD *)v46 - 1) = v47;
      v46 -= 2;
    }
    *(void *)this = v46;
    *((void *)this + 1) = v38;
    *((void *)this + 2) = &v45[2 * v44];
    if (v39) {
      operator delete(v39);
    }
  }
  else
  {
    *(_WORD *)long long v28 = HIWORD(v27);
    long long v38 = v28 + 2;
  }
  *((void *)this + 1) = v38;
  uint64_t v48 = v85;
  uint64_t v49 = v86;
  while (1)
  {
    if (v48 == v49)
    {
      __p[0] = &v85;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      goto LABEL_86;
    }
    uint64_t v50 = (*(uint64_t (**)(fst::SymbolTable *, uint64_t))(*(void *)a3 + 32))(a3, v48);
    __int16 v51 = v50;
    if (v50 >= 0x8000) {
      break;
    }
    std::string v53 = (_WORD *)*((void *)this + 1);
    unint64_t v52 = *((void *)this + 2);
    if ((unint64_t)v53 >= v52)
    {
      uint64_t v55 = *(_WORD **)this;
      uint64_t v56 = (uint64_t)v53 - *(void *)this;
      if (v56 <= -3) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v57 = v56 >> 1;
      unint64_t v58 = v52 - (void)v55;
      if (v58 <= (v56 >> 1) + 1) {
        unint64_t v59 = v57 + 1;
      }
      else {
        unint64_t v59 = v58;
      }
      if (v58 >= 0x7FFFFFFFFFFFFFFELL) {
        uint64_t v60 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v60 = v59;
      }
      if (v60)
      {
        uint64_t v61 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>((uint64_t)this + 16, v60);
        uint64_t v55 = *(_WORD **)this;
        std::string v53 = (_WORD *)*((void *)this + 1);
      }
      else
      {
        uint64_t v61 = 0;
      }
      uint64_t v62 = &v61[2 * v57];
      *(_WORD *)uint64_t v62 = v51;
      std::string v54 = v62 + 2;
      while (v53 != v55)
      {
        __int16 v63 = *--v53;
        *((_WORD *)v62 - 1) = v63;
        v62 -= 2;
      }
      *(void *)this = v62;
      *((void *)this + 1) = v54;
      *((void *)this + 2) = &v61[2 * v60];
      if (v55) {
        operator delete(v55);
      }
    }
    else
    {
      _WORD *v53 = v50;
      std::string v54 = v53 + 1;
    }
    *((void *)this + 1) = v54;
    v48 += 24;
  }
  if (quasar::gLogLevel >= 2)
  {
    long long v83 = 0u;
    long long v84 = 0u;
    long long v81 = 0u;
    long long v82 = 0u;
    long long v79 = 0u;
    long long v80 = 0u;
    long long v77 = 0u;
    long long v78 = 0u;
    long long v75 = 0u;
    long long v76 = 0u;
    long long v73 = 0u;
    long long v74 = 0u;
    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    *(_OWORD *)std::string __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"LmePackedProns::LmePackedProns: Unable to assign ID to unit", 59);
    quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)__p);
  }
  *((void *)this + 1) = *(void *)this;
  __p[0] = &v85;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  return this;
}

void sub_1B22EEAB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&__p);
  std::string __p = (void *)(v17 - 128);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  unint64_t v19 = *(void **)v16;
  if (*(void *)v16)
  {
    *(void *)(v16 + 8) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(a1);
}

void quasar::LmePackedProns::unpacked(quasar::LmePackedProns *this@<X0>, const fst::SymbolTable *a2@<X1>, void *a3@<X8>)
{
  quasar::LmeDataFactoryBase::PronSet::PronSet(&v55);
  LODWORD(v6) = 0;
  while (1)
  {
    uint64_t v7 = *(void *)this;
    unint64_t v8 = (uint64_t)(*((void *)this + 1) - *(void *)this) >> 1;
    if (v8 <= (int)v6) {
      break;
    }
    uint64_t v9 = (int)v6;
    memset(&v54, 0, sizeof(v54));
    int v10 = *(__int16 *)(v7 + 2 * (int)v6);
    if (v10 < 0)
    {
      unint64_t v6 = (int)v6 + 1;
      if (v8 > v9 + 1)
      {
        if (v8 <= v9 + 2)
        {
          if (quasar::gLogLevel >= 2)
          {
            long long v52 = 0u;
            long long v53 = 0u;
            long long v50 = 0u;
            long long v51 = 0u;
            long long v48 = 0u;
            long long v49 = 0u;
            long long v46 = 0u;
            long long v47 = 0u;
            long long v44 = 0u;
            long long v45 = 0u;
            long long v42 = 0u;
            long long v43 = 0u;
            long long v40 = 0u;
            long long v41 = 0u;
            long long v38 = 0u;
            long long v39 = 0u;
            long long v37 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v37);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v37, (uint64_t)"LmePackedProns::unpacked: Out of bounds2 ", 41);
            unint64_t v19 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" ", 1);
            uint64_t v20 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" ", 1);
            std::ostream::operator<<();
            quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v37);
          }
          quasar::LmeDataFactoryBase::PronSet::PronSet(a3);
          char v11 = 0;
          LODWORD(v6) = v9 + 2;
        }
        else
        {
          int v12 = (unsigned __int16)v10 - 0x8000;
          int v13 = *(unsigned __int16 *)(v7 + 2 * (v9 + 2));
          unint64_t v14 = v9 + 3;
          int v33 = *(unsigned __int16 *)(v7 + 2 * v6);
          if (quasar::isPronTypeEmbedding(v12))
          {
            uint64_t v15 = *(void *)this;
            unint64_t v16 = (uint64_t)(*((void *)this + 1) - *(void *)this) >> 1;
            if (v16 <= v14)
            {
              LODWORD(v6) = v9 + 3;
            }
            else
            {
              unint64_t v6 = v9 + 3;
              do
              {
                if (*(__int16 *)(v15 + 2 * v6) < 0) {
                  break;
                }
                ++v6;
              }
              while (v16 > v6);
              if ((int)v6 > (int)v14) {
                MEMORY[0x1B3EA7B30](&v54, v15 + 2 * v14, 2 * ((int)v6 - (int)v14));
              }
            }
          }
          else
          {
            long long v21 = quasar::PronTypeToSeparator(v12);
            LODWORD(v6) = v14;
            while ((int)v6 < (unint64_t)((uint64_t)(*((void *)this + 1) - *(void *)this) >> 1)
                 && (*(__int16 *)(*(void *)this + 2 * (int)v6) & 0x80000000) == 0)
            {
              (*(void (**)(void **__return_ptr, const fst::SymbolTable *, void))(*(void *)a2 + 88))(&__p, a2, *(unsigned __int16 *)(*(void *)this + 2 * (int)v6));
              std::string::size_type v22 = v36;
              unsigned __int8 v23 = v36;
              std::string::size_type v24 = v35;
              if ((v36 & 0x80u) == 0) {
                std::string::size_type v25 = v36;
              }
              else {
                std::string::size_type v25 = v35;
              }
              if (v25)
              {
                std::string::size_type size = HIBYTE(v54.__r_.__value_.__r.__words[2]);
                if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  std::string::size_type size = v54.__r_.__value_.__l.__size_;
                }
                if (size)
                {
                  std::string::append(&v54, v21);
                  std::string::size_type v22 = v36;
                  std::string::size_type v24 = v35;
                  unsigned __int8 v23 = v36;
                }
                if ((v23 & 0x80u) == 0) {
                  p_p = (const std::string::value_type *)&__p;
                }
                else {
                  p_p = (const std::string::value_type *)__p;
                }
                if ((v23 & 0x80u) == 0) {
                  std::string::size_type v28 = v22;
                }
                else {
                  std::string::size_type v28 = v24;
                }
                std::string::append(&v54, p_p, v28);
                LODWORD(v6) = v6 + 1;
              }
              else
              {
                if (quasar::gLogLevel >= 2)
                {
                  long long v52 = 0u;
                  long long v53 = 0u;
                  long long v50 = 0u;
                  long long v51 = 0u;
                  long long v48 = 0u;
                  long long v49 = 0u;
                  long long v46 = 0u;
                  long long v47 = 0u;
                  long long v44 = 0u;
                  long long v45 = 0u;
                  long long v42 = 0u;
                  long long v43 = 0u;
                  long long v40 = 0u;
                  long long v41 = 0u;
                  long long v38 = 0u;
                  long long v39 = 0u;
                  long long v37 = 0u;
                  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v37);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v37, (uint64_t)"WordPronCache::unpack: Cannot find unit ", 40);
                  long long v29 = (void *)std::ostream::operator<<();
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)" ", 1);
                  (*(void (**)(const fst::SymbolTable *))(*(void *)a2 + 120))(a2);
                  std::ostream::operator<<();
                  quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v37);
                }
                quasar::LmeDataFactoryBase::PronSet::PronSet(a3);
              }
              if ((char)v36 < 0) {
                operator delete(__p);
              }
              char v11 = 0;
              if (!v25) {
                goto LABEL_50;
              }
            }
          }
          quasar::LmeDataFactoryBase::PronSet::insert(&v55, v12, (uint64_t)&v54, COERCE_FLOAT(v33 | (v13 << 16)));
          char v11 = 1;
        }
        goto LABEL_50;
      }
      if (quasar::gLogLevel >= 2)
      {
        long long v52 = 0u;
        long long v53 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        long long v48 = 0u;
        long long v49 = 0u;
        long long v46 = 0u;
        long long v47 = 0u;
        long long v44 = 0u;
        long long v45 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v37 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v37);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v37, (uint64_t)"LmePackedProns::unpacked: Out of bounds1 ", 41);
        uint64_t v17 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" ", 1);
        unint64_t v18 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" ", 1);
        std::ostream::operator<<();
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v37);
      }
    }
    else if (quasar::gLogLevel >= 2)
    {
      long long v52 = 0u;
      long long v53 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v37 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v37);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v37, (uint64_t)"LmePackedProns::unpacked: Unexpected value", 42);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v37);
    }
    quasar::LmeDataFactoryBase::PronSet::PronSet(a3);
    char v11 = 0;
LABEL_50:
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v54.__r_.__value_.__l.__data_);
      if ((v11 & 1) == 0)
      {
LABEL_54:
        uint64_t v30 = v56;
        goto LABEL_58;
      }
    }
    else if ((v11 & 1) == 0)
    {
      goto LABEL_54;
    }
  }
  uint64_t v30 = v56;
  *a3 = v55;
  a3[1] = v30;
  uint64_t v31 = a3 + 1;
  uint64_t v32 = v57;
  a3[2] = v57;
  if (v32)
  {
    *(void *)(v30 + 16) = v31;
    uint64_t v55 = &v56;
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    uint64_t v30 = 0;
  }
  else
  {
    *a3 = v31;
  }
LABEL_58:
  std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)&v55, (char *)v30);
}

void sub_1B22EF05C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (*(char *)(v16 - 121) < 0) {
    operator delete(*(void **)(v16 - 144));
  }
  std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy(v16 - 120, *(char **)(v16 - 112));
  _Unwind_Resume(a1);
}

uint64_t quasar::LmePackedProns::read(uint64_t a1, void *a2, int a3)
{
  if (a3 <= 17)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, "lmeDataReadVersion >= 18");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5);
  }
  LODWORD(v5[0]) = 0;
  kaldi::ReadBasicType<int>(a2, 1, (uint64_t)v5);
  std::vector<unsigned short>::resize(a1, SLODWORD(v5[0]));
  return std::istream::read();
}

uint64_t quasar::LmePackedProns::write(uint64_t a1, void *a2, int a3)
{
  if (a3 <= 17)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "lmeDataWriteVersion >= 18");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  kaldi::WriteBasicType<int>(a2, 1);
  return std::ostream::write();
}

std::string *quasar::LmePackedWord::LmePackedWord(std::string *this, const quasar::LmeDataFactoryBase::Word *a2, fst::SymbolTable *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v6 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v6;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v7 = *(_OWORD *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v7;
  }
  LODWORD(this[2].__r_.__value_.__l.__data_) = *((_DWORD *)a2 + 12);
  quasar::LmePackedProns::LmePackedProns((quasar::LmePackedProns *)&this[2].__r_.__value_.__r.__words[1], (const quasar::LmeDataFactoryBase::Word *)((char *)a2 + 56), a3);
  return this;
}

void sub_1B22EF2DC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void quasar::LmePackedWord::unpacked(quasar::LmePackedWord *this@<X0>, const fst::SymbolTable *a2@<X1>, uint64_t a3@<X8>)
{
  if (*((char *)this + 23) < 0) {
    std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)this, *((void *)this + 1));
  }
  else {
    std::string v9 = *(std::string *)this;
  }
  if (*((char *)this + 47) < 0) {
    std::string::__init_copy_ctor_external(&v8, *((const std::string::value_type **)this + 3), *((void *)this + 4));
  }
  else {
    std::string v8 = *(std::string *)((unsigned char *)this + 1);
  }
  uint64_t v6 = *((unsigned int *)this + 12);
  quasar::LmePackedProns::unpacked((quasar::LmePackedWord *)((char *)this + 56), a2, v7);
  quasar::LmeDataFactoryBase::Word::Word(a3, &v9, &v8, v6, v7);
  std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)v7, (char *)v7[1]);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
}

void sub_1B22EF3F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::LmePackedUserData::LmePackedUserData(fst::SymbolTable *a1)
{
}

void sub_1B22EF4DC(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>>>::destroy(v2, *((void **)v1 + 3));
  fst::SymbolTable::~SymbolTable(v1);
  _Unwind_Resume(a1);
}

void quasar::LmePackedUserData::addUnpackedEntities(uint64_t **a1, long long *a2, const quasar::LmeDataFactoryBase::Word ***a3)
{
  std::string v8 = a2;
  std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 2, (const void **)a2, (uint64_t)&std::piecewise_construct, &v8);
  uint64_t v6 = *a3;
  long long v7 = a3[1];
  while (v6 != v7)
  {
    quasar::LmePackedUserData::addUnpackedEntity(a1, a2, v6);
    v6 += 3;
  }
}

void quasar::LmePackedUserData::unpackedWord(quasar::LmePackedUserData *this@<X0>, const quasar::LmePackedWord *a2@<X1>, uint64_t a3@<X8>)
{
}

void quasar::LmePackedUserData::unpackedEntity(fst::SymbolTable *a1@<X0>, quasar::LmePackedWord **a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  int v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    do
    {
      quasar::LmePackedWord::unpacked(v3, a1, (uint64_t)v14);
      unint64_t v7 = a3[1];
      if (v7 >= a3[2])
      {
        uint64_t v13 = std::vector<quasar::LmeDataFactoryBase::Word>::__emplace_back_slow_path<quasar::LmeDataFactoryBase::Word>(a3, (uint64_t)v14);
      }
      else
      {
        long long v8 = *(_OWORD *)v14;
        *(void *)(v7 + 16) = v15;
        *(_OWORD *)unint64_t v7 = v8;
        v14[1] = 0;
        uint64_t v15 = 0;
        v14[0] = 0;
        uint64_t v9 = v17;
        *(_OWORD *)(v7 + ++*(_DWORD *)(result + 24) = __p;
        *(void *)(v7 + 4std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = v9;
        uint64_t v17 = 0;
        long long __p = 0uLL;
        *(_DWORD *)(v7 + 48) = v18;
        *(void *)(v7 + 56) = v19;
        int v10 = v20;
        *(void *)(v7 + 64) = v20;
        unint64_t v11 = v7 + 64;
        uint64_t v12 = v21;
        *(void *)(v7 + 72) = v21;
        if (v12)
        {
          *((void *)v10 + 2) = v11;
          unint64_t v19 = &v20;
          uint64_t v20 = 0;
          uint64_t v21 = 0;
        }
        else
        {
          *(void *)(v7 + 56) = v11;
        }
        uint64_t v13 = v7 + 80;
        a3[1] = v7 + 80;
      }
      a3[1] = v13;
      std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)&v19, v20);
      if (SHIBYTE(v17) < 0) {
        operator delete((void *)__p);
      }
      if (SHIBYTE(v15) < 0) {
        operator delete(v14[0]);
      }
      int v3 = (quasar::LmePackedWord *)((char *)v3 + 80);
    }
    while (v3 != v4);
  }
}

void sub_1B22EF6CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
}

void quasar::LmePackedUserData::unpacked(quasar::LmePackedUserData *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)a2 = a2 + 8;
  int v3 = (char *)*((void *)this + 2);
  uint64_t v4 = (char *)this + 24;
  if (v3 != (char *)this + 24)
  {
    do
    {
      v12[0] = (long long *)(v3 + 32);
      std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2, (const void **)v3 + 4, (uint64_t)&std::piecewise_construct, v12);
      uint64_t v6 = (quasar::LmePackedWord **)*((void *)v3 + 7);
      unint64_t v7 = (quasar::LmePackedWord **)*((void *)v3 + 8);
      while (v6 != v7)
      {
        v12[0] = (long long *)(v3 + 32);
        long long v8 = std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2, (const void **)v3 + 4, (uint64_t)&std::piecewise_construct, v12);
        quasar::LmePackedUserData::unpackedEntity(this, v6, (uint64_t *)v12);
        std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>::emplace_back<std::vector<quasar::LmeDataFactoryBase::Word>>(v8 + 7, (uint64_t)v12);
        uint64_t v13 = v12;
        std::vector<quasar::LmeDataFactoryBase::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&v13);
        v6 += 3;
      }
      uint64_t v9 = (char *)*((void *)v3 + 1);
      if (v9)
      {
        do
        {
          int v10 = v9;
          uint64_t v9 = *(char **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          int v10 = (char *)*((void *)v3 + 2);
          BOOL v11 = *(void *)v10 == (void)v3;
          int v3 = v10;
        }
        while (!v11);
      }
      int v3 = v10;
    }
    while (v10 != v4);
  }
}

void sub_1B22EF81C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void *std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>::emplace_back<std::vector<quasar::LmeDataFactoryBase::Word>>(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = a1 + 2;
  unint64_t v5 = v6;
  unint64_t v7 = (void *)*(v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    void v17[4] = v4;
    uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)v4, v12);
    unint64_t v14 = &v13[24 * v9];
    v17[0] = v13;
    v17[1] = v14;
    void v17[3] = &v13[24 * v15];
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = 0;
    *(void *)unint64_t v14 = 0;
    *(_OWORD *)unint64_t v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    void v17[2] = v14 + 24;
    std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>::__swap_out_circular_buffer(a1, v17);
    long long v8 = (void *)a1[1];
    std::__split_buffer<std::vector<quasar::LmeDataFactoryBase::Word>>::~__split_buffer(v17);
  }
  else
  {
    *unint64_t v7 = 0;
    v7[1] = 0;
    _DWORD v7[2] = 0;
    *(_OWORD *)unint64_t v7 = *(_OWORD *)a2;
    _DWORD v7[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    long long v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return v8 - 3;
}

void sub_1B22EF984(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<quasar::LmeDataFactoryBase::Word>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void quasar::LmePackedUserData::clear(quasar::LmePackedUserData *this)
{
  fst::SymbolTable::SymbolTable((fst::SymbolTable *)&v1);
}

void sub_1B22EF9F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void quasar::LmePackedUserData::addUnpackedEntity(uint64_t **a1, long long *a2, const quasar::LmeDataFactoryBase::Word **a3)
{
  unint64_t v12 = 0;
  uint64_t v13 = 0;
  unint64_t v14 = 0;
  unint64_t v5 = *a3;
  unint64_t v6 = a3[1];
  if (*a3 != v6)
  {
    unint64_t v7 = 0;
    do
    {
      if ((unint64_t)v7 >= v14)
      {
        unint64_t v7 = (std::string *)std::vector<quasar::LmePackedWord>::__emplace_back_slow_path<quasar::LmeDataFactoryBase::Word const&,fst::SymbolTable &>((uint64_t *)&v12, v5, (fst::SymbolTable *)a1);
      }
      else
      {
        quasar::LmePackedWord::LmePackedWord(v7, v5, (fst::SymbolTable *)a1);
        unint64_t v7 = (std::string *)((char *)v7 + 80);
      }
      uint64_t v13 = v7;
      unint64_t v5 = (const quasar::LmeDataFactoryBase::Word *)((char *)v5 + 80);
    }
    while (v5 != v6);
  }
  uint64_t v15 = a2;
  long long v8 = std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 2, (const void **)a2, (uint64_t)&std::piecewise_construct, &v15);
  unint64_t v9 = v8 + 7;
  unint64_t v10 = v8[8];
  if (v10 >= v8[9])
  {
    uint64_t v11 = std::vector<std::vector<quasar::LmePackedWord>>::__emplace_back_slow_path<std::vector<quasar::LmePackedWord>&>(v9, &v12);
  }
  else
  {
    std::vector<std::vector<quasar::LmePackedWord>>::__construct_one_at_end[abi:ne180100]<std::vector<quasar::LmePackedWord>&>((uint64_t)v9, &v12);
    uint64_t v11 = v10 + 24;
  }
  v8[8] = v11;
  uint64_t v16 = &v12;
  std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
}

void sub_1B22EFB00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a9;
  std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::LmePackedWord>::__emplace_back_slow_path<quasar::LmeDataFactoryBase::Word const&,fst::SymbolTable &>(uint64_t *a1, const quasar::LmeDataFactoryBase::Word *a2, fst::SymbolTable *a3)
{
  uint64_t v4 = *a1;
  unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x333333333333333) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v4) >> 4);
  if (2 * v10 > v6) {
    unint64_t v6 = 2 * v10;
  }
  if (v10 >= 0x199999999999999) {
    unint64_t v11 = 0x333333333333333;
  }
  else {
    unint64_t v11 = v6;
  }
  unint64_t v19 = a1 + 2;
  if (v11) {
    unint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>>(v9, v11);
  }
  else {
    unint64_t v12 = 0;
  }
  uint64_t v15 = v12;
  uint64_t v16 = (std::string *)&v12[80 * v5];
  int v18 = &v12[80 * v11];
  quasar::LmePackedWord::LmePackedWord(v16, a2, a3);
  uint64_t v17 = &v16[3].__r_.__value_.__s.__data_[8];
  std::vector<quasar::LmePackedWord>::__swap_out_circular_buffer(a1, &v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<quasar::MetaInfo::StructuredPrediction::Span>::~__split_buffer(&v15);
  return v13;
}

void sub_1B22EFC28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::MetaInfo::StructuredPrediction::Span>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::LmePackedWord>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::LmePackedWord>,std::reverse_iterator<quasar::LmePackedWord*>,std::reverse_iterator<quasar::LmePackedWord*>,std::reverse_iterator<quasar::LmePackedWord*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::LmePackedWord>,std::reverse_iterator<quasar::LmePackedWord*>,std::reverse_iterator<quasar::LmePackedWord*>,std::reverse_iterator<quasar::LmePackedWord*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 80);
      *(void *)(v7 - 64) = *(void *)(a3 - 64);
      *(_OWORD *)(v7 - 8std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = v8;
      *(void *)(a3 - 72) = 0;
      *(void *)(a3 - 64) = 0;
      *(void *)(a3 - 8std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = 0;
      long long v9 = *(_OWORD *)(a3 - 56);
      *(void *)(v7 - 4std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = *(void *)(a3 - 40);
      *(_OWORD *)(v7 - 56) = v9;
      *(void *)(a3 - 48) = 0;
      *(void *)(a3 - 4std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = 0;
      *(void *)(a3 - 56) = 0;
      *(_DWORD *)(v7 - 32) = *(_DWORD *)(a3 - 32);
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      *(void *)(v7 - ++*(_DWORD *)(result + 24) = 0;
      *(_OWORD *)(v7 - ++*(_DWORD *)(result + 24) = *(_OWORD *)(a3 - 24);
      *(void *)(v7 - 8) = *(void *)(a3 - 8);
      *(void *)(a3 - ++*(_DWORD *)(result + 24) = 0;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      uint64_t v7 = *((void *)&v15 + 1) - 80;
      *((void *)&v15 + 1) -= 80;
      a3 -= 80;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::LmePackedWord>,std::reverse_iterator<quasar::LmePackedWord*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::LmePackedWord>,std::reverse_iterator<quasar::LmePackedWord*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>,std::reverse_iterator<quasar::MetaInfo::StructuredPrediction::Span*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    long long v8 = v6;
    std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 4);
  long long v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_1B22EFEFC(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::vector<std::vector<quasar::LmePackedWord>>::__construct_one_at_end[abi:ne180100]<std::vector<quasar::LmePackedWord>&>(uint64_t a1, long long **a2)
{
  int v3 = *(std::string **)(a1 + 8);
  v3->__r_.__value_.__r.__words[0] = 0;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  uint64_t result = std::vector<quasar::LmePackedWord>::__init_with_size[abi:ne180100]<quasar::LmePackedWord*,quasar::LmePackedWord*>(v3, *a2, a2[1], 0xCCCCCCCCCCCCCCCDLL * (a2[1] - *a2));
  *(void *)(a1 + 8) = v3 + 1;
  return result;
}

void sub_1B22EFF6C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<quasar::LmePackedWord>>::__emplace_back_slow_path<std::vector<quasar::LmePackedWord>&>(uint64_t *a1, long long **a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = (std::string *)&v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  long long v15 = v11;
  uint64_t v16 = &v10[24 * v9];
  v11->__r_.__value_.__r.__words[0] = 0;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  std::vector<quasar::LmePackedWord>::__init_with_size[abi:ne180100]<quasar::LmePackedWord*,quasar::LmePackedWord*>(v11, *a2, a2[1], 0xCCCCCCCCCCCCCCCDLL * (a2[1] - *a2));
  ++v15;
  std::vector<std::vector<quasar::LmePackedWord>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::vector<quasar::LmePackedWord>>::~__split_buffer(v14);
  return v12;
}

void sub_1B22F0084(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<quasar::LmePackedWord>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<quasar::LmePackedWord>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<quasar::LmePackedWord>>,std::reverse_iterator<std::vector<quasar::LmePackedWord>*>,std::reverse_iterator<std::vector<quasar::LmePackedWord>*>,std::reverse_iterator<std::vector<quasar::LmePackedWord>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<quasar::LmePackedWord>>,std::reverse_iterator<std::vector<quasar::LmePackedWord>*>,std::reverse_iterator<std::vector<quasar::LmePackedWord>*>,std::reverse_iterator<std::vector<quasar::LmePackedWord>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - ++*(_DWORD *)(result + 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - ++*(_DWORD *)(result + 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::LmePackedWord>>,std::reverse_iterator<std::vector<quasar::LmePackedWord>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::LmePackedWord>>,std::reverse_iterator<std::vector<quasar::LmePackedWord>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::LmePackedWord>>,std::reverse_iterator<std::vector<quasar::LmePackedWord>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::LmePackedWord>>,std::reverse_iterator<std::vector<quasar::LmePackedWord>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = v1;
    std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<quasar::LmePackedWord>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<quasar::LmePackedWord>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    unint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

void kaldi::quasar::TranslationUtil::ComputeBackwardAlignments(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  int v27 = *(void **)(a1 + 8);
  if (*(void **)a1 != v27)
  {
    do
    {
      if (v1[1] != *v1)
      {
        unint64_t v2 = *(void *)(*v1 + 144) - *(void *)(*v1 + 136);
        if ((int)(v2 >> 2) >= 1)
        {
          uint64_t v3 = 0;
          uint64_t v4 = (v2 >> 2);
          do
          {
            uint64_t v5 = v1[1];
            if (*v1 == v5)
            {
              int v6 = 0;
            }
            else
            {
              int v6 = 0;
              int v7 = 0;
              float v8 = 0.0;
              uint64_t v9 = *v1;
              do
              {
                uint64_t v10 = *(void *)(v9 + 136);
                if (*(float *)(v10 + 4 * v3) > v8)
                {
                  int v6 = v7;
                  float v8 = *(float *)(v10 + 4 * v3);
                }
                ++v7;
                v9 += 240;
              }
              while (v9 != v5);
            }
            uint64_t v11 = *v1 + 240 * v6;
            unint64_t v14 = *(void *)(v11 + 128);
            long long v13 = (void *)(v11 + 128);
            unint64_t v12 = v14;
            uint64_t v16 = (char **)(v13 - 1);
            long long v15 = (char *)*(v13 - 1);
            if ((unint64_t)v15 >= v14)
            {
              int v18 = (void **)(v13 - 2);
              unint64_t v19 = (char *)*(v13 - 2);
              uint64_t v20 = (v15 - v19) >> 2;
              unint64_t v21 = v20 + 1;
              if ((unint64_t)(v20 + 1) >> 62) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v22 = v12 - (void)v19;
              if (v22 >> 1 > v21) {
                unint64_t v21 = v22 >> 1;
              }
              if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v23 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v23 = v21;
              }
              if (v23)
              {
                std::string::size_type v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v13, v23);
                long long v15 = *v16;
                unint64_t v19 = (char *)*v18;
              }
              else
              {
                std::string::size_type v24 = 0;
              }
              std::string::size_type v25 = &v24[4 * v20];
              *(_DWORD *)std::string::size_type v25 = v3;
              uint64_t v17 = v25 + 4;
              while (v15 != v19)
              {
                int v26 = *((_DWORD *)v15 - 1);
                v15 -= 4;
                *((_DWORD *)v25 - 1) = v26;
                v25 -= 4;
              }
              *int v18 = v25;
              *uint64_t v16 = v17;
              *long long v13 = &v24[4 * v23];
              if (v19) {
                operator delete(v19);
              }
            }
            else
            {
              *(_DWORD *)long long v15 = v3;
              uint64_t v17 = v15 + 4;
            }
            *uint64_t v16 = v17;
            ++v3;
          }
          while (v3 != v4);
        }
      }
      v1 += 34;
    }
    while (v1 != v27);
  }
}

void kaldi::quasar::TranslationUtil::MergeAlignments(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v85 = *(void **)(a1 + 8);
  if (*(void **)a1 != v85)
  {
    while (1)
    {
      uint64_t v86 = v1;
      uint64_t v3 = (char *)*v1;
      unint64_t v2 = (char *)v1[1];
      if ((char *)*v1 != v2) {
        break;
      }
LABEL_65:
      unsigned int v9 = 0;
LABEL_66:
      int v32 = -286331153 * ((v2 - v3) >> 4);
      int v33 = v9;
      v97[0] = 0;
      std::vector<BOOL>::vector(__p, v32, v97);
      std::vector<std::vector<BOOL>>::vector(v98, v9, (uint64_t)__p);
      if (__p[0]) {
        operator delete(__p[0]);
      }
      LOBYTE(v96[0]) = 0;
      std::vector<BOOL>::vector(__p, v32, (unsigned __int8 *)v96);
      std::vector<std::vector<BOOL>>::vector(v97, v9, (uint64_t)__p);
      if (__p[0]) {
        operator delete(__p[0]);
      }
      LOBYTE(__p[0]) = 0;
      std::vector<BOOL>::vector(v96, v9, (unsigned __int8 *)__p);
      LOBYTE(__p[0]) = 0;
      std::vector<BOOL>::vector(&v95, v32, (unsigned __int8 *)__p);
      long long v93 = 0u;
      long long v94 = 0u;
      *(_OWORD *)long long __p = 0u;
      long long v89 = 0;
      long long v90 = 0;
      long long v91 = 0;
      uint64_t v34 = (void *)*v86;
      std::string::size_type v35 = (void *)v86[1];
      if ((void *)*v86 != v35)
      {
        unint64_t v36 = 0;
        do
        {
          long long v37 = (int *)v34[11];
          long long v38 = (int *)v34[12];
          unint64_t v39 = v36 >> 6;
          if (v37 != v38)
          {
            uint64_t v40 = v98[0];
            long long v41 = (int *)v34[11];
            do
            {
              int v42 = *v41++;
              *(void *)(*(void *)(v40 + 24 * v42) + 8 * v39) |= 1 << v36;
            }
            while (v41 != v38);
          }
          long long v43 = (int *)v34[14];
          long long v44 = (int *)v34[15];
          if (v43 != v44)
          {
            uint64_t v45 = 1 << v36;
            do
            {
              uint64_t v46 = *v43;
              *(void *)(*(void *)(*(void *)v97 + 24 * v46) + 8 * v39) |= v45;
              if ((*(void *)(*(void *)(v98[0] + 24 * v46) + 8 * v39) & v45) != 0)
              {
                unint64_t v88 = __PAIR64__(v36, v46);
                std::deque<std::pair<int,int>>::push_back(__p, &v88);
                *(void *)((char *)v96[0] + (((unint64_t)*v43 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *v43;
                *((void *)v95 + v39) |= v45;
              }
              ++v43;
            }
            while (v43 != v44);
            long long v37 = (int *)v34[11];
            long long v43 = (int *)v34[14];
          }
          v34[12] = v37;
          v34[15] = v43;
          ++v36;
          v34 += 30;
        }
        while (v34 != v35);
        while (*((void *)&v94 + 1))
        {
          unint64_t v47 = *(void *)(*(void *)((char *)__p[1] + (((unint64_t)v94 >> 6) & 0x3FFFFFFFFFFFFF8))
                          + 8 * (v94 & 0x1FF));
          *(void *)&long long v94 = v94 + 1;
          --*((void *)&v94 + 1);
          if ((unint64_t)v94 >= 0x400)
          {
            operator delete(*(void **)__p[1]);
            __p[1] = (char *)__p[1] + 8;
            *(void *)&long long v94 = v94 - 512;
          }
          long long v48 = v90;
          if (v90 >= v91)
          {
            uint64_t v50 = (v90 - v89) >> 3;
            if ((unint64_t)(v50 + 1) >> 61) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v51 = (v91 - v89) >> 2;
            if (v51 <= v50 + 1) {
              unint64_t v51 = v50 + 1;
            }
            if ((unint64_t)(v91 - v89) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v52 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v52 = v51;
            }
            if (v52) {
              long long v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v91, v52);
            }
            else {
              long long v53 = 0;
            }
            std::string v54 = &v53[8 * v50];
            *(void *)std::string v54 = v47;
            long long v49 = v54 + 8;
            uint64_t v56 = v89;
            uint64_t v55 = v90;
            if (v90 != v89)
            {
              do
              {
                uint64_t v57 = *((void *)v55 - 1);
                v55 -= 8;
                *((void *)v54 - 1) = v57;
                v54 -= 8;
              }
              while (v55 != v56);
              uint64_t v55 = v89;
            }
            long long v89 = v54;
            long long v90 = v49;
            long long v91 = &v53[8 * v52];
            if (v55) {
              operator delete(v55);
            }
          }
          else
          {
            *(void *)long long v90 = v47;
            long long v49 = v48 + 8;
          }
          unint64_t v58 = HIDWORD(v47);
          long long v90 = v49;
          int v59 = -1;
          int v87 = v47;
          do
          {
            unint64_t v60 = (v59 + v47);
            uint64_t v61 = 1 << (v59 + v47);
            int v62 = -3;
            do
            {
              if ((v60 & 0x80000000) == 0 && (int)v60 < v33)
              {
                unint64_t v63 = (v58 + v62 + 2);
                if ((v63 & 0x80000000) == 0 && (int)v63 < v32)
                {
                  unint64_t v64 = v63 >> 6;
                  uint64_t v65 = 1 << (v58 + v62 + 2);
                  if ((*((void *)v95 + (v63 >> 6)) & v65) == 0
                    && ((*(void *)(*(void *)(v98[0] + 24 * v60) + 8 * v64) & v65) != 0
                     || (*(void *)(*(void *)(*(void *)v97 + 24 * v60) + 8 * v64) & v65) != 0))
                  {
                    LODWORD(v88) = v60;
                    HIDWORD(v88) = v58 + v62 + 2;
                    std::deque<std::pair<int,int>>::push_back(__p, &v88);
                    *((void *)v96[0] + (v60 >> 6)) |= v61;
                    *((void *)v95 + v64) |= v65;
                  }
                }
              }
              v62 += 2;
            }
            while (v62 < 0);
            ++v59;
            LODWORD(v47) = v87;
          }
          while (v59 != 2);
        }
      }
      uint64_t v67 = v89;
      BOOL v66 = v90;
      unint64_t v68 = v86;
      if (v89 != v90)
      {
        do
        {
          uint64_t v69 = *v68 + 240 * *((int *)v67 + 1);
          unint64_t v72 = *(void *)(v69 + 104);
          long long v71 = (void *)(v69 + 104);
          unint64_t v70 = v72;
          long long v74 = (char **)(v71 - 1);
          long long v73 = (char *)*(v71 - 1);
          if ((unint64_t)v73 >= v72)
          {
            long long v76 = (void **)(v71 - 2);
            long long v77 = (char *)*(v71 - 2);
            uint64_t v78 = (v73 - v77) >> 2;
            unint64_t v79 = v78 + 1;
            if ((unint64_t)(v78 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v80 = v70 - (void)v77;
            if (v80 >> 1 > v79) {
              unint64_t v79 = v80 >> 1;
            }
            if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v81 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v81 = v79;
            }
            if (v81)
            {
              long long v82 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v71, v81);
              long long v73 = *v74;
              long long v77 = (char *)*v76;
            }
            else
            {
              long long v82 = 0;
            }
            long long v83 = &v82[4 * v78];
            *(_DWORD *)long long v83 = *(_DWORD *)v67;
            long long v75 = v83 + 4;
            while (v73 != v77)
            {
              int v84 = *((_DWORD *)v73 - 1);
              v73 -= 4;
              *((_DWORD *)v83 - 1) = v84;
              v83 -= 4;
            }
            *long long v76 = v83;
            void *v74 = v75;
            *long long v71 = &v82[4 * v81];
            if (v77) {
              operator delete(v77);
            }
            unint64_t v68 = v86;
          }
          else
          {
            *(_DWORD *)long long v73 = *(_DWORD *)v67;
            long long v75 = v73 + 4;
          }
          void *v74 = v75;
          v67 += 8;
        }
        while (v67 != v66);
        uint64_t v67 = v89;
      }
      if (v67)
      {
        long long v90 = v67;
        operator delete(v67);
      }
      std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100](__p);
      if (v95) {
        operator delete(v95);
      }
      if (v96[0]) {
        operator delete(v96[0]);
      }
      __p[0] = v97;
      std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      __p[0] = v98;
      std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      uint64_t v1 = v68 + 34;
      if (v1 == v85) {
        return;
      }
    }
    uint64_t v4 = (char *)*v1;
    while (1)
    {
      uint64_t v5 = (_DWORD *)*((void *)v4 + 11);
      int v6 = (_DWORD *)*((void *)v4 + 12);
      if (v5 != v6)
      {
        while ((*v5 & 0x80000000) == 0)
        {
          if (++v5 == v6) {
            goto LABEL_9;
          }
        }
      }
      if (v5 != v6) {
        break;
      }
LABEL_9:
      int v7 = (_DWORD *)*((void *)v4 + 14);
      float v8 = (_DWORD *)*((void *)v4 + 15);
      if (v7 != v8)
      {
        while ((*v7 & 0x80000000) == 0)
        {
          if (++v7 == v8) {
            goto LABEL_14;
          }
        }
      }
      if (v7 != v8) {
        return;
      }
LABEL_14:
      v4 += 240;
      if (v4 == v2)
      {
        if (v3 == v2) {
          goto LABEL_65;
        }
        unsigned int v9 = 0;
        uint64_t v10 = (char *)*v1;
        do
        {
          unint64_t v12 = (int *)*((void *)v10 + 11);
          uint64_t v11 = (int *)*((void *)v10 + 12);
          if (v12 == v11)
          {
            uint64_t v11 = (int *)*((void *)v10 + 11);
          }
          else
          {
            while ((*v12 & 0x80000000) == 0)
            {
              if (++v12 == v11) {
                goto LABEL_30;
              }
            }
            if (v12 != v11)
            {
              for (uint64_t i = v12 + 1; i != v11; ++i)
              {
                if ((*i & 0x80000000) == 0) {
                  *v12++ = *i;
                }
              }
            }
            if (v12 != v11)
            {
              uint64_t v11 = v12;
              *((void *)v10 + 12) = v12;
            }
          }
LABEL_30:
          long long v15 = (int *)*((void *)v10 + 14);
          unint64_t v14 = (int *)*((void *)v10 + 15);
          if (v15 != v14)
          {
            while ((*v15 & 0x80000000) == 0)
            {
              if (++v15 == v14) {
                goto LABEL_42;
              }
            }
            if (v15 != v14)
            {
              for (uint64_t j = v15 + 1; j != v14; ++j)
              {
                if ((*j & 0x80000000) == 0) {
                  *v15++ = *j;
                }
              }
            }
            if (v15 != v14)
            {
              *((void *)v10 + 15) = v15;
              goto LABEL_43;
            }
LABEL_42:
            long long v15 = v14;
          }
LABEL_43:
          uint64_t v17 = (int *)*((void *)v10 + 11);
          if (v17 != v11)
          {
            int v18 = v17 + 1;
            if (v17 + 1 != v11)
            {
              int v19 = *v17;
              uint64_t v20 = v17 + 1;
              do
              {
                int v22 = *v20++;
                int v21 = v22;
                BOOL v23 = v19 < v22;
                if (v19 <= v22) {
                  int v19 = v21;
                }
                if (v23) {
                  uint64_t v17 = v18;
                }
                int v18 = v20;
              }
              while (v20 != v11);
            }
            if ((int)v9 <= *v17 + 1) {
              unsigned int v9 = *v17 + 1;
            }
          }
          std::string::size_type v24 = (int *)*((void *)v10 + 14);
          if (v24 != v15)
          {
            std::string::size_type v25 = v24 + 1;
            if (v24 + 1 != v15)
            {
              int v26 = *v24;
              int v27 = v24 + 1;
              do
              {
                int v29 = *v27++;
                int v28 = v29;
                BOOL v30 = v26 < v29;
                if (v26 <= v29) {
                  int v26 = v28;
                }
                if (v30) {
                  std::string::size_type v24 = v25;
                }
                std::string::size_type v25 = v27;
              }
              while (v27 != v15);
            }
            int v31 = *v24;
            if ((int)v9 <= v31 + 1) {
              unsigned int v9 = v31 + 1;
            }
          }
          v10 += 240;
        }
        while (v10 != v2);
        goto LABEL_66;
      }
    }
  }
}

void sub_1B22F0C18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  a17 = (void *)(v27 - 136);
  std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  a17 = (void *)(v27 - 112);
  std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  _Unwind_Resume(a1);
}

void *std::vector<std::vector<BOOL>>::vector(void *a1, unint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    int v6 = (void *)a1[1];
    uint64_t v7 = 3 * a2;
    float v8 = &v6[3 * a2];
    uint64_t v9 = 8 * v7;
    do
    {
      std::vector<BOOL>::vector(v6, a3);
      v6 += 3;
      v9 -= 24;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_1B22F0D54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  unint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<BOOL>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::vector<BOOL>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    uint64_t v5 = *(void **)(i - 24);
    uint64_t v4 = v5;
    if (v5) {
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

void LHash<unsigned int const*,double>::clear(void *a1, unsigned int a2)
{
  if (*a1)
  {
    uint64_t v4 = 1 << (*(_DWORD *)*a1 & 0x1F);
    uint64_t v5 = 16;
    uint64_t v6 = v4;
    do
    {
      uint64_t v7 = *(void *)(*a1 + v5);
      if (v7) {
        MEMORY[0x1B3EA8630](v7, 0x1000C8052888210);
      }
      v5 += 16;
      --v6;
    }
    while (v6);
    BM_free((void *)*a1, 16 * (v4 - 1) + 24);
    *a1 = 0;
  }
  if (a2)
  {
    if (a2 >= 8) {
      a2 = (float)((float)(a2 + 1) / 0.8);
    }
    LHash<char const*,unsigned int>::alloc(a1, a2);
  }
}

void *LHash<unsigned int const*,double>::~LHash(void *a1)
{
  return a1;
}

uint64_t LHash<unsigned int const*,double>::locate(unsigned int **a1, int *a2, _DWORD *a3)
{
  uint64_t v3 = *a1;
  if (!*a1) {
    return 0;
  }
  unsigned int v6 = *v3;
  uint64_t v4 = v3 + 2;
  unint64_t v5 = v6;
  unsigned int v7 = v6 & 0x1F;
  if (v7 > 2)
  {
    if (a2)
    {
      int v10 = *a2;
      if (*a2 == -1)
      {
        unint64_t v14 = 12345;
      }
      else
      {
        unsigned int v11 = 0;
        unint64_t v12 = a2 + 1;
        do
        {
          v11 += v10 + (v11 << 12);
          int v13 = *v12++;
          int v10 = v13;
        }
        while (v13 != -1);
        unint64_t v14 = 1103515245 * v11 + 12345;
      }
      uint64_t v8 = (v14 >> (30 - v7)) & ~(-1 << v7);
    }
    else
    {
      uint64_t v8 = 0;
    }
    int v22 = *(int **)&v4[4 * v8 + 2];
    if (!v22)
    {
LABEL_47:
      uint64_t result = 0;
      goto LABEL_50;
    }
    uint64_t v23 = ~(-1 << v7);
    while (1)
    {
      if (a2)
      {
        int v24 = *v22;
        if (*v22 == -1)
        {
          uint64_t v25 = 0;
LABEL_45:
          if (a2[v25] == -1)
          {
            uint64_t result = 1;
            goto LABEL_50;
          }
        }
        else
        {
          uint64_t v25 = 0;
          unsigned int v26 = 1;
          while (1)
          {
            int v27 = a2[v25];
            if (v27 == -1 || v24 != v27) {
              break;
            }
            uint64_t v25 = v26;
            int v24 = v22[v26++];
            if (v24 == -1) {
              goto LABEL_45;
            }
          }
        }
      }
      uint64_t v8 = (v8 + 1) & v23;
      int v22 = *(int **)&v4[4 * v8 + 2];
      if (!v22) {
        goto LABEL_47;
      }
    }
  }
  if (v5 >= 0x20)
  {
    uint64_t v15 = 0;
    uint64_t v8 = v5 >> 5;
    while (1)
    {
      uint64_t v16 = *(int **)&v4[4 * v15 + 2];
      if (v16)
      {
        if (a2)
        {
          int v17 = *v16;
          if (*v16 == -1)
          {
            uint64_t v18 = 0;
LABEL_26:
            if (a2[v18] == -1)
            {
LABEL_48:
              uint64_t result = 1;
              LODWORD(v8) = v15;
              goto LABEL_50;
            }
          }
          else
          {
            uint64_t v18 = 0;
            unsigned int v19 = 1;
            while (1)
            {
              int v20 = a2[v18];
              if (v20 == -1 || v17 != v20) {
                break;
              }
              uint64_t v18 = v19;
              int v17 = v16[v19++];
              if (v17 == -1) {
                goto LABEL_26;
              }
            }
          }
        }
      }
      else if (!a2)
      {
        goto LABEL_48;
      }
      if (++v15 == v8) {
        goto LABEL_28;
      }
    }
  }
  LODWORD(v8) = 0;
LABEL_28:
  uint64_t result = 0;
LABEL_50:
  *a3 = v8;
  return result;
}

uint64_t LHash<unsigned int const*,double>::insert(unsigned int **a1, int *a2, unsigned char *a3)
{
  if (!*a1) {
    LHash<char const*,unsigned int>::alloc(a1, 1u);
  }
  int v15 = 0;
  int v6 = LHash<unsigned int const*,double>::locate(a1, a2, &v15);
  *a3 = v6;
  unsigned int v7 = *a1;
  if (!v6)
  {
    unint64_t v8 = *v7;
    uint64_t v9 = 1 << (v8 & 0x1F);
    unint64_t v10 = v8 >> 5;
    if (v8 >= 0xE0) {
      unint64_t v11 = (float)((float)(v10 + 2) / 0.8);
    }
    else {
      unint64_t v11 = (v10 + 1);
    }
    if (v11 > v9)
    {
      LHash<char const*,unsigned int>::alloc(a1, v11);
      **a1 = v8 & 0xFFFFFFE0 | **a1 & 0x1F;
      if ((**a1 & 0x1F) >= 3)
      {
        unint64_t v12 = (int **)(v7 + 4);
        uint64_t v13 = 1 << (v8 & 0x1F);
        do
        {
          if (*v12)
          {
            LHash<unsigned int const*,double>::locate(a1, *v12, &v15);
            *(_OWORD *)&(*a1)[4 * v15 + 2] = *(_OWORD *)(v12 - 1);
          }
          v12 += 2;
          --v13;
        }
        while (v13);
      }
      else
      {
        memcpy(*a1 + 2, v7 + 2, 16 * v10);
      }
      BM_free(v7, 16 * (v9 - 1) + 24);
      LHash<unsigned int const*,double>::locate(a1, a2, &v15);
    }
    Vocab::length((uint64_t)a2, (const unsigned int *)v11);
    operator new[]();
  }
  return (uint64_t)&v7[4 * v15 + 2];
}

uint64_t LHashIter<unsigned int const*,double>::LHashIter(uint64_t result, _DWORD **a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  *(void *)uint64_t result = *a2;
  *(_DWORD *)(result + 8) = 0;
  if (v3)
  {
    *(_DWORD *)(result + 12) = *v3 >> 5;
    *(void *)(result + 16) = a3;
    *(void *)(result + ++*(_DWORD *)(result + 24) = 0;
    LHashIter<unsigned int const*,double>::sortKeys();
  }
  *(_DWORD *)(result + 12) = 0;
  *(void *)(result + 16) = a3;
  *(void *)(result + ++*(_DWORD *)(result + 24) = 0;
  return result;
}

void LHashIter<unsigned int const*,double>::sortKeys()
{
}

void sub_1B22F1470(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    MEMORY[0x1B3EA8630](a12, 0x50C80EE9192B6);
  }
  _Unwind_Resume(exception_object);
}

uint64_t LHashIter<unsigned int const*,double>::next(uint64_t a1, void *a2)
{
  uint64_t v2 = *(unsigned int **)a1;
  if (!*(void *)a1) {
    return 0;
  }
  unsigned int v11 = 0;
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  if (v4 == *(_DWORD *)(a1 + 12)) {
    return 0;
  }
  unint64_t v10 = v2;
  uint64_t v7 = *(void *)(a1 + 24);
  *(_DWORD *)(a1 + 8) = v4 + 1;
  LHash<unsigned int const*,double>::locate(&v10, *(int **)(v7 + 8 * v4), &v11);
  unint64_t v10 = 0;
  uint64_t v8 = v11;
  *a2 = *(void *)(*(void *)a1 + 16 * v11 + 16);
  uint64_t v9 = *(unsigned int **)a1;
  LHash<unsigned int const*,double>::clear(&v10, 0);
  return (uint64_t)&v9[4 * v8 + 2];
}

void sub_1B22F1540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *LHash<unsigned int,LHash<unsigned int const*,double>>::alloc(void *a1, unsigned int a2)
{
  char v3 = -1;
  do
    uint64_t v4 = (1 << ++v3);
  while (v4 < a2);
  uint64_t result = BM_malloc(16 * (v4 - 1) + 24);
  *a1 = result;
  *(_DWORD *)uint64_t result = *(_DWORD *)result & 0xFFFFFFE0 | v3 & 0x1F;
  *(_DWORD *)*a1 &= 0x1Fu;
  int v6 = (_DWORD *)(*a1 + 16);
  do
  {
    _DWORD *v6 = -1;
    *((void *)v6 - 1) = 0;
    v6 += 4;
    --v4;
  }
  while (v4);
  return result;
}

void LHash<unsigned int,LHash<unsigned int const*,double>>::clear(void *a1, unsigned int a2)
{
  uint64_t v4 = (void *)*a1;
  if (v4)
  {
    BM_free(v4, 16 * ~(-1 << *(_DWORD *)v4) + 24);
    *a1 = 0;
  }
  if (a2)
  {
    if (a2 >= 8) {
      a2 = (float)((float)(a2 + 1) / 0.8);
    }
    LHash<unsigned int,LHash<unsigned int const*,double>>::alloc(a1, a2);
  }
}

void *LHash<unsigned int,LHash<unsigned int const*,double>>::~LHash(void *a1)
{
  return a1;
}

uint64_t LHash<unsigned int,LHash<unsigned int const*,double>>::insert(void *a1, unsigned int a2, unsigned char *a3)
{
  if (!*a1) {
    LHash<unsigned int,LHash<unsigned int const*,double>>::alloc(a1, 1u);
  }
  unsigned int v17 = 0;
  int v6 = LHash<unsigned int,double>::locate((_DWORD **)a1, a2, &v17);
  *a3 = v6;
  uint64_t v7 = (void *)*a1;
  if (!v6)
  {
    unint64_t v8 = *(unsigned int *)v7;
    uint64_t v9 = 1 << (v8 & 0x1F);
    unint64_t v10 = v8 >> 5;
    if (v8 >= 0xE0) {
      unsigned int v11 = (float)((float)(v10 + 2) / 0.8);
    }
    else {
      unsigned int v11 = v10 + 1;
    }
    if (v11 > v9)
    {
      LHash<unsigned int,LHash<unsigned int const*,double>>::alloc(a1, v11);
      *(_DWORD *)*a1 = v8 & 0xFFFFFFE0 | *(_DWORD *)*a1 & 0x1F;
      if ((*(_DWORD *)*a1 & 0x1Fu) >= 3)
      {
        unint64_t v12 = (unsigned int *)(v7 + 2);
        uint64_t v13 = 1 << (v8 & 0x1F);
        do
        {
          if (*v12 != -1)
          {
            LHash<unsigned int,double>::locate((_DWORD **)a1, *v12, &v17);
            *(_OWORD *)(*a1 + 16 * v17 + 8) = *(_OWORD *)(v12 - 2);
          }
          v12 += 4;
          --v13;
        }
        while (v13);
      }
      else
      {
        memcpy((void *)(*a1 + 8), v7 + 1, 16 * v10);
      }
      BM_free(v7, 16 * (v9 - 1) + 24);
      LHash<unsigned int,double>::locate((_DWORD **)a1, a2, &v17);
      uint64_t v7 = (void *)*a1;
    }
    LODWORD(v7[2 * v17 + 2]) = a2;
    uint64_t v14 = v17;
    v7[2 * v17 + 1] = 0;
    int v15 = (_DWORD *)*a1;
    *(void *)(*a1 + 16 * v14 + 8) = 0;
    *v15 += 32;
    uint64_t v7 = (void *)*a1;
  }
  return (uint64_t)&v7[2 * v17 + 1];
}

uint64_t LHash<unsigned int,LHash<unsigned int const*,double>>::remove(unsigned int **a1, unsigned int a2, void *a3)
{
  unsigned int v16 = 0;
  uint64_t result = LHash<unsigned int,double>::locate(a1, a2, &v16);
  if (result)
  {
    int v6 = *a1;
    (*a1)[4 * v16 + 4] = -1;
    if (a3)
    {
      *a3 = *(void *)&v6[4 * v16 + 2];
      int v6 = *a1;
    }
    unsigned int v7 = *v6;
    unsigned int v8 = *v6 & 0x1F;
    if (v8 >= 3)
    {
      int v15 = 0;
      unsigned int v10 = v16 + 1;
      for (int i = -1 << v8; ; int i = -1 << *v6)
      {
        unsigned int v16 = v10 & ~i;
        unsigned int v12 = v6[4 * v16 + 4];
        if (v12 == -1) {
          break;
        }
        int v13 = LHash<unsigned int,double>::locate(a1, v12, &v15);
        int v6 = *a1;
        if (!v13)
        {
          uint64_t v14 = v16;
          *(_OWORD *)&v6[4 * v15 + 2] = *(_OWORD *)&v6[4 * v16 + 2];
          int v6 = *a1;
          (*a1)[4 * v14 + 4] = -1;
        }
        int v15 = 0;
        unsigned int v10 = v16 + 1;
      }
    }
    else
    {
      unsigned int v9 = v7 >> 5;
      memmove(&v6[4 * v16 + 2], &v6[4 * v16 + 6], 16 * (~v16 + (v7 >> 5)));
      int v6 = *a1;
      (*a1)[4 * v9] = -1;
    }
    *v6 -= 32;
    return 1;
  }
  return result;
}

uint64_t LHashIter<unsigned int,LHash<unsigned int const*,double>>::LHashIter(uint64_t result, _DWORD **a2, uint64_t a3)
{
  char v3 = *a2;
  *(void *)uint64_t result = *a2;
  *(_DWORD *)(result + 8) = 0;
  if (v3)
  {
    *(_DWORD *)(result + 12) = *v3 >> 5;
    *(void *)(result + 16) = a3;
    *(void *)(result + ++*(_DWORD *)(result + 24) = 0;
    LHashIter<unsigned int,LHash<unsigned int const*,double>>::sortKeys();
  }
  *(_DWORD *)(result + 12) = 0;
  *(void *)(result + 16) = a3;
  *(void *)(result + ++*(_DWORD *)(result + 24) = 0;
  return result;
}

void LHashIter<unsigned int,LHash<unsigned int const*,double>>::sortKeys()
{
}

void sub_1B22F1B2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    MEMORY[0x1B3EA8630](a12, 0x1000C8052888210);
  }
  _Unwind_Resume(exception_object);
}

uint64_t LHashIter<unsigned int,LHash<unsigned int const*,double>>::next(uint64_t a1, _DWORD *a2)
{
  uint64_t v2 = *(_DWORD **)a1;
  if (!*(void *)a1) {
    return 0;
  }
  unsigned int v10 = 0;
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  if (v4 == *(_DWORD *)(a1 + 12)) {
    return 0;
  }
  unsigned int v9 = v2;
  uint64_t v7 = *(void *)(a1 + 24);
  *(_DWORD *)(a1 + 8) = v4 + 1;
  LHash<unsigned int,double>::locate(&v9, *(_DWORD *)(v7 + 4 * v4), &v10);
  uint64_t v8 = *(void *)a1 + 16 * v10;
  uint64_t result = v8 + 8;
  *a2 = *(_DWORD *)(v8 + 16);
  return result;
}

void sub_1B22F1BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

_DWORD **Map2<unsigned int,unsigned int const*,double>::~Map2(_DWORD **a1)
{
  LHashIter<unsigned int,LHash<unsigned int const*,double>>::LHashIter((uint64_t)v5, a1, 0);
  int v4 = 0;
  while (1)
  {
    uint64_t v2 = (void *)LHashIter<unsigned int,LHash<unsigned int const*,double>>::next((uint64_t)v5, &v4);
    if (!v2) {
      break;
    }
    LHash<unsigned int const*,double>::clear(v2, 0);
  }
  if (v6) {
    MEMORY[0x1B3EA8630](v6, 0x1000C8052888210);
  }
  LHash<unsigned int,LHash<unsigned int const*,double>>::clear(a1, 0);
  return a1;
}

uint64_t Map2<unsigned int,unsigned int const*,double>::numEntries(_DWORD **a1, unsigned int a2)
{
  int v5 = 0;
  uint64_t result = LHash<unsigned int,double>::locate(a1, a2, &v5);
  if (result)
  {
    int v4 = *(_DWORD **)&(*a1)[4 * v5 + 2];
    if (v4) {
      return *v4 >> 5;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t Map2<unsigned int,unsigned int const*,double>::clear(unsigned int **a1)
{
  LHashIter<unsigned int,LHash<unsigned int const*,double>>::LHashIter((uint64_t)v5, a1, 0);
  for (unsigned int i = 0; ; LHash<unsigned int,LHash<unsigned int const*,double>>::remove(a1, i, 0))
  {
    uint64_t v2 = (void *)LHashIter<unsigned int,LHash<unsigned int const*,double>>::next((uint64_t)v5, &i);
    if (!v2) {
      break;
    }
    LHash<unsigned int const*,double>::clear(v2, 0);
  }
  LHash<unsigned int,LHash<unsigned int const*,double>>::clear(a1, 0);
  uint64_t result = v6;
  if (v6) {
    return MEMORY[0x1B3EA8630](v6, 0x1000C8052888210);
  }
  return result;
}

void sub_1B22F1D6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14) {
    MEMORY[0x1B3EA8630](a14, 0x1000C8052888210);
  }
  _Unwind_Resume(exception_object);
}

void *quasar::OnlineLatticeRescalingDecoder::OnlineLatticeRescalingDecoder(uint64_t a1, long long *a2)
{
  uint64_t result = (void *)quasar::Decoder::Decoder(a1, a2);
  *uint64_t result = &unk_1F0A57A10;
  return result;
}

void quasar::OnlineLatticeRescalingDecoder::finishInit(quasar::OnlineLatticeRescalingDecoder *this)
{
  float v1 = *((float *)this + 114);
  if (v1 > 0.0 || *((float *)this + 115) > 0.0) {
    *((unsigned char *)this + 465) = 1;
  }
  if (v1 < 0.0) {
    *((_DWORD *)this + 114) = *((_DWORD *)this + 112);
  }
  if (*((float *)this + 115) < 0.0) {
    *((_DWORD *)this + 115) = *((_DWORD *)this + 113);
  }
  if (!*((unsigned char *)this + 464) && quasar::gLogLevel >= 5)
  {
    memset(v2, 0, sizeof(v2));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"New scales will be applied to lattice without undoing existing scales", 69);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v2);
  }
}

void sub_1B22F1EA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void quasar::OnlineLatticeRescalingDecoder::runImpl(uint64_t a1, uint64_t a2, quasar::DecoderChainOutput **a3)
{
  if (*(unsigned char *)(a1 + 465)
    && fst::CompactLatticeContainsLME<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>(*((void *)*a3 + 19), 500000000))
  {
    if (quasar::gLogLevel >= 4)
    {
      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      long long v13 = 0u;
      long long v14 = 0u;
      *(_OWORD *)long long __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Rescore with LME-specific scales", 32);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
    }
    uint64_t v6 = *a3;
    float v7 = *(float *)(a1 + 460);
    float v8 = *(float *)(a1 + 456);
  }
  else
  {
    if (quasar::gLogLevel >= 5)
    {
      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      long long v13 = 0u;
      long long v14 = 0u;
      *(_OWORD *)long long __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Rescore with generic scales", 27);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
    }
    uint64_t v6 = *a3;
    float v7 = *(float *)(a1 + 452);
    float v8 = *(float *)(a1 + 448);
  }
  BOOL v9 = quasar::DecoderChainOutput::scaleResultLattice(v6, v7, v8, *(unsigned char *)(a1 + 464));
  unsigned int v10 = (uint64_t **)*((void *)*a3 + 132);
  if (v10) {
    BOOL v11 = !v9;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "rescored");
    quasar::UttInfo::addResult(v10, (const void **)__p, a2, *a3);
    if (SBYTE7(v13) < 0) {
      operator delete(__p[0]);
    }
  }
  fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::VectorFst();
}

void sub_1B22F2128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
}

BOOL fst::CompactLatticeContainsLME<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>(uint64_t a1, int a2)
{
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 160))(a1);
  if (v4 < 1) {
    return 0;
  }
  int v5 = v4;
  uint64_t v6 = 0;
  BOOL v7 = 1;
  while (2)
  {
    unint64_t v12 = 0;
    (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 136))(a1, v6, v10);
    while (1)
    {
      if (!v10[0])
      {
        if (v12 >= v10[2]) {
          goto LABEL_16;
        }
        goto LABEL_9;
      }
      if ((*(uint64_t (**)(void))(*(void *)v10[0] + 24))(v10[0])) {
        break;
      }
      if (v10[0])
      {
        float v8 = (_DWORD *)(*(uint64_t (**)(void))(*(void *)v10[0] + 32))();
        goto LABEL_10;
      }
LABEL_9:
      float v8 = (_DWORD *)(v10[1] + 48 * v12);
LABEL_10:
      if (*v8 >= a2)
      {
        if (v10[0])
        {
          (*(void (**)(void))(*(void *)v10[0] + 8))();
        }
        else if (v11)
        {
          --*v11;
        }
        return v7;
      }
      if (v10[0]) {
        (*(void (**)(void))(*(void *)v10[0] + 40))();
      }
      else {
        ++v12;
      }
    }
    if (v10[0])
    {
      (*(void (**)(void))(*(void *)v10[0] + 8))();
      goto LABEL_18;
    }
LABEL_16:
    if (v11) {
      --*v11;
    }
LABEL_18:
    uint64_t v6 = (v6 + 1);
    BOOL v7 = (int)v6 < v5;
    if (v6 != v5) {
      continue;
    }
    return v7;
  }
}

void sub_1B22F23C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    fst::CreateSuperFinal<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(a10);
  }
  else {
    quasar::InverseTextNormalizer::getNumTokens(v10);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::OnlineLatticeRescalingDecoder::supportsEager(quasar::OnlineLatticeRescalingDecoder *this)
{
  return 1;
}

double quasar::OnlineLatticeRescalingDecoder::registerParams(quasar::OnlineLatticeRescalingDecoder *this, quasar::SystemConfig *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v7, "am-scale");
  std::string::basic_string[abi:ne180100]<0>(__p, "Scaling factor for acoustic likelihoods");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v7, (uint64_t)this + 448, (uint64_t)__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "lm-scale");
  std::string::basic_string[abi:ne180100]<0>(__p, "Scaling factor for LM probabilities. Note: the ratio acoustic-scale/lm-scale is all that matters.");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v7, (uint64_t)this + 452, (uint64_t)__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "am-scale-for-lme");
  std::string::basic_string[abi:ne180100]<0>(__p, "Scaling factor for acoustic likelihoods when lattice contains at least one LME token");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v7, (uint64_t)this + 456, (uint64_t)__p, 0, 252, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "lm-scale-for-lme");
  std::string::basic_string[abi:ne180100]<0>(__p, "Scaling factor for LM probabilities when lattice contains at least one LME token");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v7, (uint64_t)this + 460, (uint64_t)__p, 0, 252, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "undo-old-scales");
  std::string::basic_string[abi:ne180100]<0>(__p, "true by default; if set to false, apply scales on lattice without undoing existing scales");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v7, (uint64_t)this + 464, (uint64_t)__p, 0, 252, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  double result = 0.00781250185;
  *((_OWORD *)this + 28) = xmmword_1B25AABE0;
  *((_WORD *)this + 232) = 1;
  return result;
}

void sub_1B22F2650(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void quasar::OnlineLatticeRescalingDecoder::~OnlineLatticeRescalingDecoder(quasar::OnlineLatticeRescalingDecoder *this)
{
  quasar::Decoder::~Decoder(this);
  JUMPOUT(0x1B3EA8670);
}

void quasar::SpokenFormLine::parseListAndFieldNames(quasar::SpokenFormLine *this)
{
  if (*((char *)this + 31) < 0)
  {
    if (!*((void *)this + 2)) {
      return;
    }
LABEL_5:
    std::string::basic_string[abi:ne180100]<0>(__p, " ");
    quasar::splitAndTrim((std::string *)((char *)this + 8), (char *)__p, (uint64_t *)&v45);
    if (SBYTE7(v27) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v2 = v45;
    char v3 = v46;
    if (v45 == v46)
    {
LABEL_60:
      __p[0] = &v45;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      return;
    }
    while (1)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "$");
      BOOL v4 = quasar::startsWith((unsigned __int8 *)v2, (unsigned __int8 *)__p);
      BOOL v5 = v4;
      if ((SBYTE7(v27) & 0x80000000) == 0) {
        break;
      }
      operator delete(__p[0]);
      if (v5) {
        goto LABEL_12;
      }
LABEL_59:
      if (++v2 == v3) {
        goto LABEL_60;
      }
    }
    if (!v4) {
      goto LABEL_59;
    }
LABEL_12:
    std::string::basic_string[abi:ne180100]<0>(__p, ".");
    quasar::splitAndTrim(v2, (char *)__p, (uint64_t *)v44);
    if (SBYTE7(v27) < 0) {
      operator delete(__p[0]);
    }
    if ((const std::string *)((char *)v44[1] - (char *)v44[0]) != (const std::string *)48)
    {
LABEL_58:
      __p[0] = v44;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      goto LABEL_59;
    }
    if (SHIBYTE(v44[0]->__r_.__value_.__r.__words[2]) < 0) {
      std::string::size_type size = v44[0]->__r_.__value_.__l.__size_;
    }
    else {
      std::string::size_type size = HIBYTE(v44[0]->__r_.__value_.__r.__words[2]);
    }
    std::string::basic_string(&__str, v44[0], 1uLL, size - 1, (std::allocator<char> *)v47);
    uint64_t v7 = *((unsigned __int8 *)this + 87);
    if (*((char *)this + 87) < 0)
    {
      size_t v8 = *((void *)this + 9);
      if (v8) {
        goto LABEL_22;
      }
    }
    else if (*((unsigned char *)this + 87))
    {
      size_t v8 = *((void *)this + 9);
LABEL_22:
      if ((v7 & 0x80u) == 0) {
        size_t v9 = *((unsigned __int8 *)this + 87);
      }
      else {
        size_t v9 = v8;
      }
      std::string::size_type v10 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v10 = __str.__r_.__value_.__l.__size_;
      }
      if (v9 != v10) {
        goto LABEL_39;
      }
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_str = &__str;
      }
      else {
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      if ((v7 & 0x80) == 0)
      {
        unint64_t v12 = (unsigned __int8 *)this + 64;
        while (*v12 == p_str->__r_.__value_.__s.__data_[0])
        {
          ++v12;
          p_str = (std::string *)((char *)p_str + 1);
          if (!--v7) {
            goto LABEL_53;
          }
        }
        goto LABEL_39;
      }
      if (memcmp(*((const void **)this + 8), p_str, v8))
      {
LABEL_39:
        if (quasar::gLogLevel >= 5)
        {
          long long v41 = 0u;
          long long v42 = 0u;
          long long v39 = 0u;
          long long v40 = 0u;
          long long v37 = 0u;
          long long v38 = 0u;
          long long v35 = 0u;
          long long v36 = 0u;
          long long v33 = 0u;
          long long v34 = 0u;
          long long v31 = 0u;
          long long v32 = 0u;
          long long v29 = 0u;
          long long v30 = 0u;
          long long v27 = 0u;
          long long v28 = 0u;
          *(_OWORD *)long long __p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          long long v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"More than one lists detected in ", 32);
          int v14 = *((char *)this + 31);
          if (v14 >= 0) {
            long long v15 = (char *)this + 8;
          }
          else {
            long long v15 = (char *)*((void *)this + 1);
          }
          if (v14 >= 0) {
            uint64_t v16 = *((unsigned __int8 *)this + 31);
          }
          else {
            uint64_t v16 = *((void *)this + 2);
          }
          long long v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v15, v16);
          long long v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)", only first list [", 19);
          int v19 = *((char *)this + 87);
          if (v19 >= 0) {
            long long v20 = (char *)this + 64;
          }
          else {
            long long v20 = (char *)*((void *)this + 8);
          }
          if (v19 >= 0) {
            uint64_t v21 = *((unsigned __int8 *)this + 87);
          }
          else {
            uint64_t v21 = *((void *)this + 9);
          }
          long long v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v20, v21);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"] will be used.", 15);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
        }
      }
LABEL_53:
      long long v23 = (long long *)&v44[0][1];
      unint64_t v24 = *((void *)this + 12);
      if (v24 >= *((void *)this + 13))
      {
        uint64_t v25 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)this + 11, v23);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)this + 88, v23);
        uint64_t v25 = v24 + 24;
      }
      *((void *)this + 12) = v25;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      goto LABEL_58;
    }
    std::string::operator=((std::string *)((char *)this + 64), &__str);
    goto LABEL_53;
  }
  if (*((unsigned char *)this + 31)) {
    goto LABEL_5;
  }
}

void sub_1B22F2A10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::SpokenFormLine::SpokenFormLine(uint64_t a1, std::string *a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  BOOL v4 = (std::string *)(a1 + 8);
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)a1 = 1065353216;
  *(_OWORD *)(a1 + ++*(_DWORD *)(result + 24) = 0u;
  *(_OWORD *)(a1 + 4std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = 0u;
  *(_WORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 8std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  std::string::basic_string[abi:ne180100]<0>(__p, "prior=");
  BOOL v5 = quasar::startsWith((unsigned __int8 *)a2, (unsigned __int8 *)__p);
  BOOL v6 = v5;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__r_.__value_.__l.__data_);
    if (!v6) {
      goto LABEL_24;
    }
  }
  else if (!v5)
  {
    goto LABEL_24;
  }
  char v7 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (v7 >= 0) {
    uint64_t size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  }
  else {
    uint64_t size = a2->__r_.__value_.__l.__size_;
  }
  if (v7 >= 0) {
    size_t v9 = a2;
  }
  else {
    size_t v9 = (std::string *)a2->__r_.__value_.__r.__words[0];
  }
  if (size >= 1)
  {
    std::string::size_type v10 = (char *)v9 + size;
    size_t v11 = size;
    unint64_t v12 = v9;
    do
    {
      long long v13 = (char *)memchr(v12, 32, v11);
      if (!v13) {
        break;
      }
      if (*v13 == 32)
      {
        if (v13 == v10) {
          break;
        }
        unint64_t v14 = v13 - (char *)v9;
        if (v14 == -1) {
          break;
        }
        std::string::basic_string(__p, a2, v14 + 1, size + ~v14, (std::allocator<char> *)&v17);
        if (*(char *)(a1 + 31) < 0) {
          operator delete(v4->__r_.__value_.__l.__data_);
        }
        std::string *v4 = __p[0];
        std::string::basic_string(__p, a2, 6uLL, v14 - 6, (std::allocator<char> *)&v17);
        *(float *)a1 = std::stof(__p, 0);
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p[0].__r_.__value_.__l.__data_);
        }
        *(unsigned char *)(a1 + 56) = 1;
        goto LABEL_25;
      }
      unint64_t v12 = (std::string *)(v13 + 1);
      size_t v11 = v10 - (char *)v12;
    }
    while (v10 - (char *)v12 >= 1);
  }
LABEL_24:
  std::string::operator=(v4, a2);
LABEL_25:
  quasar::SpokenFormLine::parseListAndFieldNames((quasar::SpokenFormLine *)a1);
  return a1;
}

void sub_1B22F2C64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long __p, long long a10, long long a11, long long a12, long long a13, long long a14, long long a15, long long a16, long long a17, long long a18, long long a19, long long a20,long long a21,long long a22,long long a23,long long a24,long long a25)
{
  if (SBYTE7(a10) < 0) {
    operator delete((void *)__p);
  }
  if (a2 == 1)
  {
    long long v30 = __cxa_begin_catch(a1);
    if (quasar::gLogLevel >= 1)
    {
      long long v31 = v30;
      a24 = 0u;
      a25 = 0u;
      a22 = 0u;
      a23 = 0u;
      a20 = 0u;
      a21 = 0u;
      a18 = 0u;
      a19 = 0u;
      a16 = 0u;
      a17 = 0u;
      a14 = 0u;
      a15 = 0u;
      a12 = 0u;
      a13 = 0u;
      a10 = 0u;
      a11 = 0u;
      long long __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      long long v32 = (const char *)(*(uint64_t (**)(void *))(*(void *)v31 + 16))(v31);
      size_t v33 = strlen(v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)v32, v33);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&__p);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B22F2C3CLL);
  }
  *(void *)&long long __p = v25 + 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (*(char *)(v25 + 87) < 0) {
    operator delete(*v27);
  }
  if (*(char *)(v25 + 55) < 0) {
    operator delete(*(void **)(v25 + 32));
  }
  if (*(char *)(v25 + 31) < 0) {
    operator delete(*v26);
  }
  _Unwind_Resume(a1);
}

quasar::SpokenFormLine *quasar::SpokenFormLine::SpokenFormLine(quasar::SpokenFormLine *this, _DWORD *a2, long long *a3)
{
  *(_DWORD *)this = *a2;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v4 = *a3;
    *((void *)this + 3) = *((void *)a3 + 2);
    *(_OWORD *)((char *)this + 8) = v4;
  }
  *((void *)this + 4) = 0;
  *((_OWORD *)this + 4) = 0u;
  *((_WORD *)this + 28) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((unsigned char *)this + 56) = 1;
  quasar::SpokenFormLine::parseListAndFieldNames(this);
  return this;
}

void sub_1B22F2E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  a10 = (void **)(v10 + 88);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (*(char *)(v10 + 87) < 0) {
    operator delete(*v13);
  }
  quasar::SpokenFormLine::SpokenFormLine(v10, v12, v11);
  _Unwind_Resume(a1);
}

quasar::SpokenFormLine *quasar::SpokenFormLine::SpokenFormLine(quasar::SpokenFormLine *this, const quasar::SpokenFormLine *a2)
{
  *(_DWORD *)this = 1065353216;
  *(_OWORD *)((char *)this + 8) = 0u;
  long long v4 = (std::string *)((char *)this + 32);
  *((_OWORD *)this + 4) = 0u;
  BOOL v5 = (std::string *)((char *)this + 64);
  BOOL v6 = (std::vector<std::wstring> *)((char *)this + 88);
  *(_OWORD *)((char *)this + ++*(_DWORD *)(result + 24) = 0u;
  *(_OWORD *)((char *)this + 4std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = 0u;
  *((_WORD *)this + 28) = 0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *(_DWORD *)this = *(_DWORD *)a2;
  std::string::operator=((std::string *)((char *)this + 8), (const std::string *)((char *)a2 + 8));
  std::string::operator=(v4, (const std::string *)((char *)a2 + 32));
  *((_WORD *)this + 28) = *((_WORD *)a2 + 28);
  std::string::operator=(v5, (const std::string *)((char *)a2 + 64));
  if (this != a2) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v6, *((std::string **)a2 + 11), *((long long **)a2 + 12), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 12) - *((void *)a2 + 11)) >> 3));
  }
  return this;
}

void sub_1B22F2F70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 87) < 0) {
    operator delete(*v5);
  }
  quasar::SpokenFormLine::SpokenFormLine(v2, v4, v3);
  _Unwind_Resume(a1);
}

void quasar::SpokenFormLine::removeTokenSpokenForm(uint64_t a1@<X0>, void *a2@<X8>)
{
  v4[6] = *MEMORY[0x1E4F143B8];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "\\"");
  quasar::split(a1, (uint64_t *)__p, 0, (unint64_t)v4);
}

void sub_1B22F317C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  long long __p = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(a1);
}

void quasar::SpokenFormLine::getTokenizedLineWithPrior(uint64_t a1@<X0>, uint64_t *a2@<X1>, unsigned __int8 **a3@<X2>, uint64_t *a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, std::string *a7@<X8>)
{
  if (*(unsigned char *)(a1 + 56))
  {
    std::to_string(&v28, *(float *)a1);
    unint64_t v14 = std::string::insert(&v28, 0, "prior=");
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v29.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    uint64_t v16 = std::string::append(&v29, " ");
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    uint64_t v18 = *a2;
    int v19 = (std::__shared_weak_count *)a2[1];
    v26[0] = v18;
    v26[1] = v19;
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    quasar::SpokenFormLine::getTokenizedLine(a1, v26, a3, a4, a5, a6, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    long long v22 = std::string::append(&v30, (const std::string::value_type *)p_p, size);
    long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    a7->__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&a7->__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v28.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    unint64_t v24 = (std::__shared_weak_count *)a2[1];
    v25[0] = *a2;
    v25[1] = v24;
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    quasar::SpokenFormLine::getTokenizedLine(a1, v25, a3, a4, a5, a6, a7);
    if (v24)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    }
  }
}

void sub_1B22F33D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  _Unwind_Resume(exception_object);
}

void quasar::SpokenFormLine::getTokenizedLine(uint64_t a1@<X0>, void *a2@<X1>, unsigned __int8 **a3@<X2>, uint64_t *a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, std::string *a7@<X8>)
{
  uint64_t v85 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 57)) {
    BOOL v9 = a5 == 0;
  }
  else {
    BOOL v9 = 0;
  }
  if (!v9)
  {
    std::string::basic_string[abi:ne180100]<0>(v78, "\\EOS");
    std::string::basic_string[abi:ne180100]<0>(__p, "[");
    std::string::basic_string[abi:ne180100]<0>((void *)&v81 + 1, "]");
    std::string::basic_string[abi:ne180100]<0>(v83, "(");
    std::string::basic_string[abi:ne180100]<0>((void *)&v83[1] + 1, ")");
    std::string::basic_string[abi:ne180100]<0>(v84, "|");
    std::string::basic_string[abi:ne180100]<0>((void *)&v84[1] + 1, "\\EOS");
    std::unordered_set<std::string>::unordered_set((uint64_t)v77, (unsigned __int8 *)__p, 6);
    for (uint64_t i = 0; i != -144; i -= 24)
    {
      if (*((char *)&v84[2] + i + 15) < 0) {
        operator delete(*(void **)((char *)&v84[1] + i + 8));
      }
    }
    long long v15 = *a3;
    unint64_t v14 = a3[1];
    while (v15 != v14)
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v77, v15, (uint64_t)v15);
      v15 += 24;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, " ");
    quasar::splitAndTrimNoEmpty((const std::string *)(a1 + 8), (char *)__p, &v74);
    if (SBYTE7(v81) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v16 = v75;
    if ((unint64_t)v75 >= v76)
    {
      uint64_t v18 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v74, (long long *)v78);
    }
    else
    {
      if (SHIBYTE(v79) < 0)
      {
        std::string::__init_copy_ctor_external(v75, (const std::string::value_type *)v78[0], (std::string::size_type)v78[1]);
      }
      else
      {
        long long v17 = *(_OWORD *)v78;
        v75->__r_.__value_.__r.__words[2] = v79;
        *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
      }
      uint64_t v18 = v16 + 1;
    }
    long long v75 = v18;
    *(void *)long long v71 = 0;
    unint64_t v72 = 0;
    unint64_t v73 = 0;
    memset(&v70, 0, sizeof(v70));
    uint64_t v19 = (uint64_t)v74;
    if (v74 != v18)
    {
      unint64_t v60 = v18;
      int v20 = 0;
      while (!std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v77, (unsigned __int8 *)v19))
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "//");
        if (quasar::startsWith((unsigned __int8 *)v19, (unsigned __int8 *)__p))
        {
          int v61 = 1;
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(&v67, "\\PM-");
          if (quasar::startsWith((unsigned __int8 *)v19, (unsigned __int8 *)&v67))
          {
            int v61 = 1;
          }
          else
          {
            std::string::basic_string[abi:ne180100]<0>(&v64, "prior=");
            BOOL v21 = quasar::startsWith((unsigned __int8 *)v19, (unsigned __int8 *)&v64)
               || a6 + 8 != std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a6, (const void **)v19);
            int v61 = v21;
            if (SHIBYTE(v66) < 0) {
              operator delete(v64);
            }
          }
          if ((char)v69 < 0) {
            operator delete(v67);
          }
        }
        if (SBYTE7(v81) < 0) {
          operator delete(__p[0]);
        }
        if ((v20 & 1) == v61)
        {
          int v61 = v20;
          goto LABEL_108;
        }
        if ((v20 & 1) == 0) {
          goto LABEL_41;
        }
        std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(&v70, v70.__end_, *(std::string **)v71, v72, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v72 - *(void *)v71) >> 3));
LABEL_102:
        long long v53 = *(std::string **)v71;
        for (uint64_t j = v72; j != (long long *)v53; uint64_t j = (long long *)((char *)j - 24))
        {
          if (*((char *)j - 1) < 0) {
            operator delete(*((void **)j - 3));
          }
        }
        unint64_t v72 = (long long *)v53;
LABEL_108:
        uint64_t v55 = v72;
        if ((unint64_t)v72 >= v73)
        {
          uint64_t v57 = (long long *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)v71, (long long *)v19);
        }
        else
        {
          if (*(char *)(v19 + 23) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v72, *(const std::string::value_type **)v19, *(void *)(v19 + 8));
          }
          else
          {
            long long v56 = *(_OWORD *)v19;
            *((void *)v72 + 2) = *(void *)(v19 + 16);
            *uint64_t v55 = v56;
          }
          uint64_t v57 = (long long *)((char *)v55 + 24);
        }
        unint64_t v72 = v57;
        v19 += 24;
        int v20 = v61;
        if ((std::string *)v19 == v60)
        {
          if (*(long long **)v71 != v57) {
            std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(&v70, v70.__end_, *(std::string **)v71, (long long *)((char *)v57 - 24), 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v57 - *(void *)v71 - 24) >> 3));
          }
          goto LABEL_117;
        }
      }
      int v61 = 1;
      if (v20) {
        goto LABEL_108;
      }
LABEL_41:
      if (*(long long **)v71 != v72)
      {
        __p[0] = " ";
        __p[1] = (void *)1;
        quasar::join<std::vector<std::string>>((uint64_t *)v71, (uint64_t *)__p);
        unint64_t v64 = 0;
        uint64_t v65 = 0;
        uint64_t v66 = 0;
        (*(void (**)(void, void **, void **))(*(void *)*a2 + 16))(*a2, &v67, &v64);
        if (v64 == v65)
        {
          if (quasar::gLogLevel >= 5)
          {
            memset(v84, 0, sizeof(v84));
            memset(v83, 0, sizeof(v83));
            long long v81 = 0u;
            long long v82 = 0u;
            *(_OWORD *)std::string __p = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
            long long v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Failed to tokenize ", 19);
            if ((v69 & 0x80u) == 0) {
              long long v23 = &v67;
            }
            else {
              long long v23 = v67;
            }
            if ((v69 & 0x80u) == 0) {
              uint64_t v24 = v69;
            }
            else {
              uint64_t v24 = v68;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v23, v24);
            quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
          }
          std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(&v70, v70.__end_, *(std::string **)v71, v72, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v72 - *(void *)v71) >> 3));
        }
        else if (v65 - (unsigned char *)v64 == 32)
        {
          if (*(void *)v64 != *((void *)v64 + 1)) {
            quasar::SpokenFormLine::removeTokenSpokenForm(*(void *)v64, v62);
          }
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(v62, "(");
          std::vector<std::string>::pointer end = v70.__end_;
          if (v70.__end_ >= v70.__end_cap_.__value_)
          {
            unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * (((char *)v70.__end_ - (char *)v70.__begin_) >> 3);
            unint64_t v28 = v27 + 1;
            if (v27 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            if (0x5555555555555556 * (((char *)v70.__end_cap_.__value_ - (char *)v70.__begin_) >> 3) > v28) {
              unint64_t v28 = 0x5555555555555556 * (((char *)v70.__end_cap_.__value_ - (char *)v70.__begin_) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v70.__end_cap_.__value_ - (char *)v70.__begin_) >> 3) >= 0x555555555555555) {
              unint64_t v29 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v29 = v28;
            }
            *(void *)&long long v82 = &v70.__end_cap_;
            if (v29) {
              std::string v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v70.__end_cap_, v29);
            }
            else {
              std::string v30 = 0;
            }
            long long v31 = &v30[24 * v27];
            __p[0] = v30;
            __p[1] = v31;
            *((void *)&v81 + 1) = &v30[24 * v29];
            long long v32 = *(_OWORD *)v62;
            *((void *)v31 + 2) = v63;
            *(_OWORD *)long long v31 = v32;
            v62[1] = 0;
            std::string::size_type v63 = 0;
            v62[0] = 0;
            *(void *)&long long v81 = v31 + 24;
            std::vector<std::string>::__swap_out_circular_buffer(&v70, (std::__split_buffer<std::string> *)__p);
            size_t v33 = v70.__end_;
            std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)__p);
            v70.__end_ = v33;
            if (SHIBYTE(v63) < 0) {
              operator delete(v62[0]);
            }
          }
          else
          {
            long long v26 = *(_OWORD *)v62;
            v70.__end_->__r_.__value_.__r.__words[2] = v63;
            *(_OWORD *)&end->__r_.__value_.__l.__data_ = v26;
            v70.__end_ = end + 1;
          }
          long long v34 = (uint64_t *)v64;
          while (v34 != (uint64_t *)v65)
          {
            if (*v34 != v34[1]) {
              quasar::SpokenFormLine::removeTokenSpokenForm(*v34, v62);
            }
            v34 += 4;
            if (v34 != (uint64_t *)v65)
            {
              std::string::basic_string[abi:ne180100]<0>(v62, "|");
              std::vector<std::string>::pointer v35 = v70.__end_;
              if (v70.__end_ >= v70.__end_cap_.__value_)
              {
                unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * (((char *)v70.__end_ - (char *)v70.__begin_) >> 3);
                unint64_t v38 = v37 + 1;
                if (v37 + 1 > 0xAAAAAAAAAAAAAAALL) {
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                }
                if (0x5555555555555556 * (((char *)v70.__end_cap_.__value_ - (char *)v70.__begin_) >> 3) > v38) {
                  unint64_t v38 = 0x5555555555555556 * (((char *)v70.__end_cap_.__value_ - (char *)v70.__begin_) >> 3);
                }
                if (0xAAAAAAAAAAAAAAABLL * (((char *)v70.__end_cap_.__value_ - (char *)v70.__begin_) >> 3) >= 0x555555555555555) {
                  unint64_t v39 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v39 = v38;
                }
                *(void *)&long long v82 = &v70.__end_cap_;
                if (v39) {
                  long long v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v70.__end_cap_, v39);
                }
                else {
                  long long v40 = 0;
                }
                long long v41 = &v40[24 * v37];
                __p[0] = v40;
                __p[1] = v41;
                *((void *)&v81 + 1) = &v40[24 * v39];
                long long v42 = *(_OWORD *)v62;
                *((void *)v41 + 2) = v63;
                *(_OWORD *)long long v41 = v42;
                v62[1] = 0;
                std::string::size_type v63 = 0;
                v62[0] = 0;
                *(void *)&long long v81 = v41 + 24;
                std::vector<std::string>::__swap_out_circular_buffer(&v70, (std::__split_buffer<std::string> *)__p);
                long long v43 = v70.__end_;
                std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)__p);
                v70.__end_ = v43;
                if (SHIBYTE(v63) < 0) {
                  operator delete(v62[0]);
                }
              }
              else
              {
                long long v36 = *(_OWORD *)v62;
                v70.__end_->__r_.__value_.__r.__words[2] = v63;
                *(_OWORD *)&v35->__r_.__value_.__l.__data_ = v36;
                v70.__end_ = v35 + 1;
              }
            }
          }
          std::string::basic_string[abi:ne180100]<0>(v62, ")");
          std::vector<std::string>::pointer v44 = v70.__end_;
          if (v70.__end_ >= v70.__end_cap_.__value_)
          {
            unint64_t v46 = 0xAAAAAAAAAAAAAAABLL * (((char *)v70.__end_ - (char *)v70.__begin_) >> 3);
            unint64_t v47 = v46 + 1;
            if (v46 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            if (0x5555555555555556 * (((char *)v70.__end_cap_.__value_ - (char *)v70.__begin_) >> 3) > v47) {
              unint64_t v47 = 0x5555555555555556 * (((char *)v70.__end_cap_.__value_ - (char *)v70.__begin_) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v70.__end_cap_.__value_ - (char *)v70.__begin_) >> 3) >= 0x555555555555555) {
              unint64_t v48 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v48 = v47;
            }
            *(void *)&long long v82 = &v70.__end_cap_;
            if (v48) {
              long long v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v70.__end_cap_, v48);
            }
            else {
              long long v49 = 0;
            }
            uint64_t v50 = &v49[24 * v46];
            __p[0] = v49;
            __p[1] = v50;
            *((void *)&v81 + 1) = &v49[24 * v48];
            long long v51 = *(_OWORD *)v62;
            *((void *)v50 + 2) = v63;
            *(_OWORD *)uint64_t v50 = v51;
            v62[1] = 0;
            std::string::size_type v63 = 0;
            v62[0] = 0;
            *(void *)&long long v81 = v50 + 24;
            std::vector<std::string>::__swap_out_circular_buffer(&v70, (std::__split_buffer<std::string> *)__p);
            unint64_t v52 = v70.__end_;
            std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)__p);
            v70.__end_ = v52;
            if (SHIBYTE(v63) < 0) {
              operator delete(v62[0]);
            }
          }
          else
          {
            long long v45 = *(_OWORD *)v62;
            v70.__end_->__r_.__value_.__r.__words[2] = v63;
            *(_OWORD *)&v44->__r_.__value_.__l.__data_ = v45;
            v70.__end_ = v44 + 1;
          }
        }
        __p[0] = &v64;
        std::vector<quasar::TextTokenizer::TokenString>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        if ((char)v69 < 0) {
          operator delete(v67);
        }
      }
      goto LABEL_102;
    }
LABEL_117:
    uint64_t v67 = " ";
    uint64_t v68 = 1;
    quasar::join<std::vector<std::string>>((uint64_t *)&v70, (uint64_t *)&v67);
    unint64_t v58 = (std::string *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      operator delete(v58->__r_.__value_.__l.__data_);
    }
    *(_OWORD *)&v58->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    *(void *)(a1 + 48) = v81;
    quasar::RegexRules::applyRules(a4, (uint64_t)v58, (std::string *)__p);
    std::string::operator=(v58, (const std::string *)__p);
    if (SBYTE7(v81) < 0) {
      operator delete(__p[0]);
    }
    *(unsigned char *)(a1 + 57) = 1;
    __p[0] = &v70;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    __p[0] = v71;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    __p[0] = &v74;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v77);
    if (SHIBYTE(v79) < 0) {
      operator delete(v78[0]);
    }
  }
  if (*(char *)(a1 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(a7, *(const std::string::value_type **)(a1 + 32), *(void *)(a1 + 40));
  }
  else
  {
    *(_OWORD *)&a7->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 32);
    a7->__r_.__value_.__r.__words[2] = *(void *)(a1 + 48);
  }
}

void sub_1B22F3FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,char a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,void **p_p,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,std::__split_buffer<std::wstring> *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *__pa,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  p_p = &__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&p_p);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a47);
  if (a57 < 0) {
    operator delete(__pa);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::SpokenForm::SpokenForm(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  quasar::SpokenForm::loadFromFile(a1, a2, &v4);
  return a1;
}

void sub_1B22F421C(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::SpokenFormSection>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void quasar::SpokenForm::loadFromFile(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  v40[19] = *MEMORY[0x1E4F143B8];
  memset(&__str, 0, sizeof(__str));
  std::ifstream::basic_ifstream(v38);
  *a3 = 1;
  std::string::basic_string[abi:ne180100]<0>(&v35, "");
  memset(v34, 0, sizeof(v34));
  if (!v39[15])
  {
    if (quasar::gLogLevel >= 1)
    {
      memset(v32, 0, sizeof(v32));
      *(_OWORD *)std::string __p = 0uLL;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Unable to open the file to read.", 32);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__p);
    }
    *a3 = 0;
    goto LABEL_108;
  }
  BOOL v5 = (std::locale::id *)MEMORY[0x1E4FBA258];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v38 + *(void *)(v38[0] - 24)));
    BOOL v6 = std::locale::use_facet((const std::locale *)__p, v5);
    unsigned __int8 v7 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
    std::locale::~locale((std::locale *)__p);
    size_t v8 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v38, (uint64_t)&__str, v7);
    if ((*((unsigned char *)v8 + *(void *)(*v8 - 24) + 32) & 5) != 0) {
      break;
    }
    quasar::trim(&__str);
    std::string::basic_string[abi:ne180100]<0>(__p, "#");
    if (quasar::startsWith((unsigned __int8 *)&__str, (unsigned __int8 *)__p)) {
      goto LABEL_5;
    }
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __str.__r_.__value_.__l.__size_;
    }
    if (SBYTE7(v32[0]) < 0)
    {
      operator delete(__p[0]);
      if (size)
      {
LABEL_14:
        std::string::basic_string[abi:ne180100]<0>(__p, "[");
        if (quasar::startsWith((unsigned __int8 *)&__str, (unsigned __int8 *)__p))
        {
          std::string::basic_string[abi:ne180100]<0>(&v33, "]");
          if (quasar::endsWith((uint64_t *)&__str, (uint64_t *)&v33))
          {
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int64_t v10 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
            }
            else {
              int64_t v10 = __str.__r_.__value_.__l.__size_;
            }
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_str = &__str;
            }
            else {
              p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
            }
            if (v10 < 1)
            {
              BOOL v16 = 1;
            }
            else
            {
              unint64_t v12 = (char *)p_str + v10;
              long long v13 = p_str;
              do
              {
                unint64_t v14 = memchr(v13, 32, v10);
                if (!v14) {
                  break;
                }
                if (*v14 == 32) {
                  goto LABEL_28;
                }
                long long v13 = (std::string *)(v14 + 1);
                int64_t v10 = v12 - (unsigned char *)v13;
              }
              while (v12 - (unsigned char *)v13 > 0);
              unint64_t v14 = v12;
LABEL_28:
              BOOL v16 = v14 == v12 || v14 - (unsigned char *)p_str == -1;
            }
          }
          else
          {
            BOOL v16 = 0;
          }
          if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v33.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          BOOL v16 = 0;
        }
        if ((SBYTE7(v32[0]) & 0x80000000) == 0)
        {
          if (v16) {
            goto LABEL_41;
          }
          goto LABEL_48;
        }
        operator delete(__p[0]);
        if (v16)
        {
LABEL_41:
          std::string::size_type v17 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
          if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v17 = v35.__r_.__value_.__l.__size_;
          }
          if (v17) {
            quasar::SpokenFormSection::appendRawLine(v34, &v35);
          }
          if (SHIBYTE(v34[0].__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)__p, v34[0].__r_.__value_.__l.__data_, v34[0].__r_.__value_.__l.__size_);
          }
          else
          {
            *(_OWORD *)std::string __p = *(_OWORD *)&v34[0].__r_.__value_.__l.__data_;
            *(void *)&v32[0] = *((void *)&v34[0].__r_.__value_.__l + 2);
          }
          if (SBYTE7(v32[0]) < 0)
          {
            long long v23 = __p[1];
            operator delete(__p[0]);
            if (!v23) {
              goto LABEL_79;
            }
          }
          else if (!BYTE7(v32[0]))
          {
            goto LABEL_79;
          }
          if (SHIBYTE(v34[0].__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)__p, v34[0].__r_.__value_.__l.__data_, v34[0].__r_.__value_.__l.__size_);
          }
          else
          {
            *(_OWORD *)std::string __p = *(_OWORD *)&v34[0].__r_.__value_.__l.__data_;
            *(void *)&v32[0] = *((void *)&v34[0].__r_.__value_.__l + 2);
          }
          v33.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          long long v26 = std::__hash_table<std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::SpokenFormSection>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (long long **)&v33);
          std::string::operator=((std::string *)(v26 + 40), v34);
          if (v26 + 40 != (unsigned __int8 *)v34) {
            std::vector<quasar::SpokenFormLine>::__assign_with_size[abi:ne180100]<quasar::SpokenFormLine*,quasar::SpokenFormLine*>((uint64_t)(v26 + 64), (quasar::SpokenFormLine *)v34[1].__r_.__value_.__l.__data_, (quasar::SpokenFormLine *)v34[1].__r_.__value_.__l.__size_, 0x6DB6DB6DB6DB6DB7* ((uint64_t)(v34[1].__r_.__value_.__l.__size_ - v34[1].__r_.__value_.__r.__words[0]) >> 4));
          }
          if (SBYTE7(v32[0]) < 0) {
            operator delete(__p[0]);
          }
LABEL_79:
          std::string::size_type v27 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v27 = __str.__r_.__value_.__l.__size_;
          }
          std::string::basic_string(&v33, &__str, 1uLL, v27 - 2, (std::allocator<char> *)&v37);
          quasar::SpokenFormSection::SpokenFormSection((uint64_t)__p, &v33);
          if (SHIBYTE(v34[0].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v34[0].__r_.__value_.__l.__data_);
          }
          *(_OWORD *)&v34[0].__r_.__value_.__l.__data_ = *(_OWORD *)__p;
          v34[0].__r_.__value_.__r.__words[2] = *(void *)&v32[0];
          BYTE7(v32[0]) = 0;
          LOBYTE(__p[0]) = 0;
          std::vector<quasar::SpokenFormLine>::__vdeallocate((void **)&v34[1].__r_.__value_.__l.__data_);
          v34[1] = *(std::string *)((char *)v32 + 8);
          memset((char *)v32 + 8, 0, 24);
          unint64_t v37 = (void **)v32 + 1;
          std::vector<quasar::SpokenFormLine>::__destroy_vector::operator()[abi:ne180100](&v37);
          if (SBYTE7(v32[0]) < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v33.__r_.__value_.__l.__data_);
          }
        }
        else
        {
LABEL_48:
          std::string::basic_string[abi:ne180100]<0>(__p, "\\"");
          BOOL v18 = quasar::endsWith((uint64_t *)&__str, (uint64_t *)__p);
          BOOL v19 = v18;
          if (SBYTE7(v32[0]) < 0)
          {
            operator delete(__p[0]);
            if (v19) {
              goto LABEL_50;
            }
LABEL_67:
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v24 = &__str;
            }
            else {
              uint64_t v24 = (std::string *)__str.__r_.__value_.__r.__words[0];
            }
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v25 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v25 = __str.__r_.__value_.__l.__size_;
            }
            std::string::append(&v35, (const std::string::value_type *)v24, v25);
            quasar::SpokenFormSection::appendRawLine(v34, &v35);
            MEMORY[0x1B3EA7B20](&v35, "");
          }
          else
          {
            if (!v18) {
              goto LABEL_67;
            }
LABEL_50:
            std::string::size_type v20 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type v20 = __str.__r_.__value_.__l.__size_;
            }
            std::string::basic_string((std::string *)__p, &__str, 0, v20 - 1, (std::allocator<char> *)&v33);
            if ((SBYTE7(v32[0]) & 0x80u) == 0) {
              BOOL v21 = __p;
            }
            else {
              BOOL v21 = (void **)__p[0];
            }
            if ((SBYTE7(v32[0]) & 0x80u) == 0) {
              std::string::size_type v22 = BYTE7(v32[0]);
            }
            else {
              std::string::size_type v22 = (std::string::size_type)__p[1];
            }
            std::string::append(&v35, (const std::string::value_type *)v21, v22);
LABEL_5:
            if (SBYTE7(v32[0]) < 0) {
              operator delete(__p[0]);
            }
          }
        }
      }
    }
    else if (size)
    {
      goto LABEL_14;
    }
  }
  std::string::size_type v28 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v28 = v35.__r_.__value_.__l.__size_;
  }
  if (v28) {
    quasar::SpokenFormSection::appendRawLine(v34, &v35);
  }
  if (SHIBYTE(v34[0].__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)__p, v34[0].__r_.__value_.__l.__data_, v34[0].__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)&v34[0].__r_.__value_.__l.__data_;
    *(void *)&v32[0] = *((void *)&v34[0].__r_.__value_.__l + 2);
  }
  if (SBYTE7(v32[0]) < 0)
  {
    unint64_t v29 = __p[1];
    operator delete(__p[0]);
    if (!v29) {
      goto LABEL_108;
    }
  }
  else if (!BYTE7(v32[0]))
  {
    goto LABEL_108;
  }
  if (SHIBYTE(v34[0].__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)__p, v34[0].__r_.__value_.__l.__data_, v34[0].__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)&v34[0].__r_.__value_.__l.__data_;
    *(void *)&v32[0] = *((void *)&v34[0].__r_.__value_.__l + 2);
  }
  v33.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  std::string v30 = std::__hash_table<std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::SpokenFormSection>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (long long **)&v33);
  std::string::operator=((std::string *)(v30 + 40), v34);
  if (v30 + 40 != (unsigned __int8 *)v34) {
    std::vector<quasar::SpokenFormLine>::__assign_with_size[abi:ne180100]<quasar::SpokenFormLine*,quasar::SpokenFormLine*>((uint64_t)(v30 + 64), (quasar::SpokenFormLine *)v34[1].__r_.__value_.__l.__data_, (quasar::SpokenFormLine *)v34[1].__r_.__value_.__l.__size_, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v34[1].__r_.__value_.__l.__size_ - v34[1].__r_.__value_.__r.__words[0]) >> 4));
  }
  if (SBYTE7(v32[0]) < 0) {
    operator delete(__p[0]);
  }
LABEL_108:
  __p[0] = &v34[1];
  std::vector<quasar::SpokenFormLine>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (SHIBYTE(v34[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34[0].__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  v38[0] = *MEMORY[0x1E4FBA3F8];
  *(uint64_t *)((char *)v38 + *(void *)(v38[0] - 24)) = *(void *)(MEMORY[0x1E4FBA3F8] + 24);
  MEMORY[0x1B3EA7CF0](v39);
  std::istream::~istream();
  MEMORY[0x1B3EA8520](v40);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_1B22F49E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,int a56,__int16 a57,char a58,char a59,void *a60,uint64_t a61,int a62,__int16 a63)
{
  quasar::SpokenFormSection::~SpokenFormSection(&a47);
  if (a59 < 0) {
    operator delete(__p);
  }
  std::ifstream::~ifstream(&a67);
  if (a65 < 0) {
    operator delete(a60);
  }
  _Unwind_Resume(a1);
}

double quasar::SpokenForm::SpokenForm(quasar::SpokenForm *this)
{
  double result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  return result;
}

void quasar::SpokenFormSection::appendRawLine(void *a1, std::string *a2)
{
  quasar::SpokenFormLine::SpokenFormLine((uint64_t)v5, a2);
  unint64_t v3 = a1[4];
  if (v3 >= a1[5])
  {
    uint64_t v4 = std::vector<quasar::SpokenFormLine>::__push_back_slow_path<quasar::SpokenFormLine>(a1 + 3, (const quasar::SpokenFormLine *)v5);
  }
  else
  {
    quasar::SpokenFormLine::SpokenFormLine((quasar::SpokenFormLine *)a1[4], (const quasar::SpokenFormLine *)v5);
    uint64_t v4 = v3 + 112;
    a1[4] = v3 + 112;
  }
  a1[4] = v4;
  long long v13 = (void **)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v13);
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9 < 0) {
    operator delete(v8);
  }
  if (v7 < 0) {
    operator delete(v6);
  }
}

void sub_1B22F4BB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  quasar::SpokenFormLine::~SpokenFormLine((void **)va);
  _Unwind_Resume(a1);
}

void quasar::SpokenFormSection::~SpokenFormSection(void **this)
{
  uint64_t v2 = this + 3;
  std::vector<quasar::SpokenFormLine>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void quasar::SpokenForm::getSectionNames(quasar::SpokenForm *this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    unint64_t v4 = 0;
    do
    {
      BOOL v5 = (long long *)(v2 + 2);
      if (v4 >= a2[2])
      {
        unint64_t v4 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a2, v5);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a2, v5);
        v4 += 24;
      }
      a2[1] = v4;
      uint64_t v2 = (void *)*v2;
    }
    while (v2);
  }
}

void sub_1B22F4C9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::SpokenForm::clear(quasar::SpokenForm *this)
{
  std::__hash_table<std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::SpokenFormSection>>>::clear((uint64_t)this);
  memset(v3, 0, sizeof(v3));
  int v4 = 1065353216;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::swap((uint64_t)v3, (uint64_t)this);
  return std::__hash_table<std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::SpokenFormSection>>>::~__hash_table((uint64_t)v3);
}

void quasar::SpokenFormLine::~SpokenFormLine(void **this)
{
  uint64_t v2 = this + 11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 87) < 0) {
    operator delete(this[8]);
  }
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

uint64_t std::vector<quasar::SpokenFormLine>::__push_back_slow_path<quasar::SpokenFormLine>(uint64_t *a1, const quasar::SpokenFormLine *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x249249249249249) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x124924924924924) {
    unint64_t v9 = 0x249249249249249;
  }
  else {
    unint64_t v9 = v5;
  }
  std::string::size_type v17 = a1 + 2;
  if (v9) {
    int64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandInterpretation>>(v7, v9);
  }
  else {
    int64_t v10 = 0;
  }
  long long v13 = v10;
  unint64_t v14 = (quasar::SpokenFormLine *)&v10[112 * v4];
  BOOL v16 = &v10[112 * v9];
  quasar::SpokenFormLine::SpokenFormLine(v14, a2);
  long long v15 = (char *)v14 + 112;
  std::vector<quasar::SpokenFormLine>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<quasar::SpokenFormLine>::~__split_buffer(&v13);
  return v11;
}

void sub_1B22F4E7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::SpokenFormLine>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::SpokenFormLine>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::SpokenFormLine>,std::reverse_iterator<quasar::SpokenFormLine*>,std::reverse_iterator<quasar::SpokenFormLine*>,std::reverse_iterator<quasar::SpokenFormLine*>>((uint64_t)(a1 + 2), a1[1], (const quasar::SpokenFormLine *)a1[1], *a1, (const quasar::SpokenFormLine *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::SpokenFormLine>,std::reverse_iterator<quasar::SpokenFormLine*>,std::reverse_iterator<quasar::SpokenFormLine*>,std::reverse_iterator<quasar::SpokenFormLine*>>(uint64_t a1, uint64_t a2, const quasar::SpokenFormLine *a3, uint64_t a4, const quasar::SpokenFormLine *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  char v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    unint64_t v9 = a3;
    do
    {
      unint64_t v9 = (const quasar::SpokenFormLine *)((char *)v9 - 112);
      quasar::SpokenFormLine::SpokenFormLine((quasar::SpokenFormLine *)(v7 - 112), v9);
      uint64_t v7 = *((void *)&v15 + 1) - 112;
      *((void *)&v15 + 1) -= 112;
    }
    while (v9 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::SpokenFormLine>,std::reverse_iterator<quasar::SpokenFormLine*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

void sub_1B22F4FB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::SpokenFormLine>,std::reverse_iterator<quasar::SpokenFormLine*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::SpokenFormLine>,std::reverse_iterator<quasar::SpokenFormLine*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::SpokenFormLine>,std::reverse_iterator<quasar::SpokenFormLine*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<quasar::SpokenFormLine>::destroy[abi:ne180100](v3, v1);
      v1 += 112;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<quasar::SpokenFormLine>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<quasar::SpokenFormLine>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 112;
    std::allocator<quasar::SpokenFormLine>::destroy[abi:ne180100](v4, i - 112);
  }
}

void std::vector<quasar::SpokenFormLine>::__assign_with_size[abi:ne180100]<quasar::SpokenFormLine*,quasar::SpokenFormLine*>(uint64_t a1, quasar::SpokenFormLine *a2, quasar::SpokenFormLine *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  unint64_t v9 = *(void **)a1;
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) < a4)
  {
    std::vector<quasar::SpokenFormLine>::__vdeallocate((void **)a1);
    if (a4 > 0x249249249249249) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4)) >= 0x124924924924924) {
      unint64_t v11 = 0x249249249249249;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<quasar::VoiceCommandInterpretation>::__vallocate[abi:ne180100]((void *)a1, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::SpokenFormLine>,quasar::SpokenFormLine*,quasar::SpokenFormLine*,quasar::SpokenFormLine*>(v8, a2, a3, *(quasar::SpokenFormLine **)(a1 + 8));
    goto LABEL_11;
  }
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4) < a4)
  {
    char v13 = (long long **)((char *)a2 + 16 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::SpokenFormLine *,quasar::SpokenFormLine *,quasar::SpokenFormLine *>((uint64_t)&v17, (long long **)a2, v13, (uint64_t)v9);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::SpokenFormLine>,quasar::SpokenFormLine*,quasar::SpokenFormLine*,quasar::SpokenFormLine*>(v8, (quasar::SpokenFormLine *)v13, a3, *(quasar::SpokenFormLine **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::SpokenFormLine *,quasar::SpokenFormLine *,quasar::SpokenFormLine *>((uint64_t)&v18, (long long **)a2, (long long **)a3, (uint64_t)v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 112;
      std::allocator<quasar::SpokenFormLine>::destroy[abi:ne180100](v8, v16);
    }
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_1B22F5260(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B22F5268(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

long long **std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::SpokenFormLine *,quasar::SpokenFormLine *,quasar::SpokenFormLine *>(uint64_t a1, long long **a2, long long **a3, uint64_t a4)
{
  if (a2 == a3) {
    return a2;
  }
  uint64_t v5 = a3;
  uint64_t v6 = a2 + 12;
  do
  {
    uint64_t v7 = v6 - 12;
    *(_DWORD *)a4 = *((_DWORD *)v6 - 24);
    std::string::operator=((std::string *)(a4 + 8), (const std::string *)(v6 - 11));
    std::string::operator=((std::string *)(a4 + 32), (const std::string *)(v6 - 8));
    *(_WORD *)(a4 + 56) = *((_WORD *)v6 - 20);
    std::string::operator=((std::string *)(a4 + 64), (const std::string *)(v6 - 4));
    if ((long long **)a4 != v6 - 12) {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)(a4 + 88), (std::string *)*(v6 - 1), *v6, 0xAAAAAAAAAAAAAAABLL * (((char *)*v6 - (char *)*(v6 - 1)) >> 3));
    }
    a4 += 112;
    v6 += 14;
  }
  while (v7 + 14 != v5);
  return v5;
}

uint64_t quasar::SpokenFormSection::SpokenFormSection(uint64_t a1, const std::string *a2)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  std::string::operator=((std::string *)a1, a2);
  return a1;
}

void sub_1B22F5370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  a10 = (void **)(v10 + 24);
  std::vector<quasar::SpokenFormLine>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (*(char *)(v10 + 23) < 0) {
    operator delete(*(void **)v10);
  }
  _Unwind_Resume(a1);
}

void quasar::ProcessingSource::process(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(char *)(a2 + 23);
  if (v3 < 0)
  {
    if (*(void *)(a2 + 8) != 2)
    {
LABEL_7:
      quasar::ProcessingBlock::send(a1, (const void **)a2, a3, 0);
      return;
    }
    uint64_t v4 = *(_WORD **)a2;
  }
  else
  {
    uint64_t v4 = (_WORD *)a2;
    if (v3 != 2) {
      goto LABEL_7;
    }
  }
  if (*v4 != 28265) {
    goto LABEL_7;
  }
  quasar::ProcessingBlock::send(a1, a3, 0);
}

uint64_t quasar::ProcessingSource::minConfigVersion(quasar::ProcessingSource *this)
{
  return 35;
}

void quasar::ProcessingSource::~ProcessingSource(char **this)
{
  quasar::ProcessingBlock::~ProcessingBlock(this);
  JUMPOUT(0x1B3EA8670);
}

const char *quasar::ProcessingSource::blockType(quasar::ProcessingSource *this)
{
  return "ProcessingSource";
}

uint64_t callBackParam(int a1, int a2, void *lpsrc, uint64_t *a4, TAllocator *a5)
{
  if (a4) {
    uint64_t v7 = *a4;
  }
  else {
    uint64_t v7 = 1;
  }
  if (*((_DWORD *)lpsrc + 2))
  {
    uint64_t v14 = (__int32 *)v16;
    long long v15 = xmmword_1B25607E0;
    char v17 = 1;
    (*(void (**)(void *, uint64_t, __int32 **))(*(void *)lpsrc + 16))(lpsrc, v7, &v14);
    if (*((_DWORD *)lpsrc + 2) == 4)
    {
      TStringParam::getGrammarValue(v8, v7, (uint64_t)&v14);
    }
    else
    {
      (*(void (**)(void *, uint64_t, __int32 **))(*(void *)lpsrc + 16))(lpsrc, v7, &v14);
    }
    if ((unint64_t)(*((void *)&v15 + 1) + 1) >> 62) {
      uint64_t v10 = -1;
    }
    else {
      uint64_t v10 = 4 * (*((void *)&v15 + 1) + 1);
    }
    unint64_t v11 = (__int32 *)TAllocator::allocate(a5, v10);
    if (*((void *)&v15 + 1) >= (unint64_t)v15)
    {
      if (v17)
      {
        int v18 = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v14, *((unint64_t *)&v15 + 1), &v18, 1uLL);
        uint64_t v12 = v14;
        --*((void *)&v15 + 1);
      }
      else
      {
        uint64_t v12 = v14;
        if ((void)v15) {
          v14[(void)v15 - 1] = 0;
        }
      }
    }
    else
    {
      uint64_t v12 = v14;
      v14[*((void *)&v15 + 1)] = 0;
    }
    wcscpy(v11, v12);
    if (v17 && v14 != (__int32 *)v16 && v14) {
      MEMORY[0x1B3EA8630]();
    }
  }
  else
  {
    TParam::getValidConfig(v9, v7);
  }
  return 1;
}

void sub_1B22F568C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (LOBYTE(STACK[0x420]) && a10 != v10)
  {
    if (a10) {
      MEMORY[0x1B3EA8630]();
    }
  }
  _Unwind_Resume(a1);
}

uint64_t callBackGetLength(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, TAllocator *a5)
{
  if (a2 != 1 || *(void *)a1 > 1uLL) {
    return 0;
  }
  unint64_t v11 = (__int32 *)v13;
  long long v12 = xmmword_1B25607E0;
  char v14 = 1;
  size_t v7 = wcslen(*(const __int32 **)(a1 + 8));
  {
    operator new();
  }
  TLocaleInfo::valueToString(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v7, (uint64_t)&v11, 0);
  if ((unint64_t)(*((void *)&v12 + 1) + 1) >> 62) {
    uint64_t v8 = -1;
  }
  else {
    uint64_t v8 = 4 * (*((void *)&v12 + 1) + 1);
  }
  unint64_t v9 = (__int32 *)TAllocator::allocate(a5, v8);
  if (*((void *)&v12 + 1) >= (unint64_t)v12)
  {
    if (v14)
    {
      int v15 = 0;
      TBuffer<wchar_t>::insert((uint64_t)&v11, *((unint64_t *)&v12 + 1), &v15, 1uLL);
      uint64_t v10 = v11;
      --*((void *)&v12 + 1);
    }
    else
    {
      uint64_t v10 = v11;
      if ((void)v12) {
        v11[(void)v12 - 1] = 0;
      }
    }
  }
  else
  {
    uint64_t v10 = v11;
    v11[*((void *)&v12 + 1)] = 0;
  }
  wcscpy(v9, v10);
  if (v14 && v11 != (__int32 *)v13)
  {
    if (v11) {
      MEMORY[0x1B3EA8630]();
    }
  }
  return 1;
}

void sub_1B22F5874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  MEMORY[0x1B3EA8670](v10, 0x1070C40ADD13FEBLL);
  if (LOBYTE(STACK[0x420]) && a10 != v11)
  {
    if (a10) {
      MEMORY[0x1B3EA8630]();
    }
  }
  _Unwind_Resume(a1);
}

uint64_t callBackRomanToDigit(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, TAllocator *a5)
{
  if (a2 != 1 || *a1 > 1uLL) {
    return 0;
  }
  uint64_t v5 = (__int32 *)a1[1];
  if (*v5)
  {
    unint64_t v16 = 0;
    if (romanToArabic(v5, &v16)) {
      return 0;
    }
    long long v12 = (__int32 *)v14;
    long long v13 = xmmword_1B25607E0;
    char v15 = 1;
    unint64_t v8 = v16;
    {
      operator new();
    }
    TLocaleInfo::valueToString(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v8, (uint64_t)&v12, 0);
    if ((unint64_t)(*((void *)&v13 + 1) + 1) >> 62) {
      uint64_t v9 = -1;
    }
    else {
      uint64_t v9 = 4 * (*((void *)&v13 + 1) + 1);
    }
    uint64_t v10 = (__int32 *)TAllocator::allocate(a5, v9);
    if (*((void *)&v13 + 1) >= (unint64_t)v13)
    {
      if (v15)
      {
        int v17 = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v12, *((unint64_t *)&v13 + 1), &v17, 1uLL);
        uint64_t v11 = v12;
        --*((void *)&v13 + 1);
      }
      else
      {
        uint64_t v11 = v12;
        if ((void)v13) {
          v12[(void)v13 - 1] = 0;
        }
      }
    }
    else
    {
      uint64_t v11 = v12;
      v12[*((void *)&v13 + 1)] = 0;
    }
    wcscpy(v10, v11);
    if (v15 && v12 != (__int32 *)v14)
    {
      if (v12) {
        MEMORY[0x1B3EA8630]();
      }
    }
  }
  return 1;
}

void sub_1B22F5AAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  MEMORY[0x1B3EA8670](v9, 0x1070C40ADD13FEBLL);
  if (LOBYTE(STACK[0x418]) && a9 != v10)
  {
    if (a9) {
      MEMORY[0x1B3EA8630]();
    }
  }
  _Unwind_Resume(a1);
}

uint64_t callBackDigitToRoman(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, TAllocator *a5)
{
  if (a2 != 1 || *a1 > 1uLL) {
    return 0;
  }
  size_t v7 = (unsigned int *)a1[1];
  if (!*v7) {
    return 1;
  }
  BOOL v17 = 0;
  {
    operator new();
  }
  unsigned int v9 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v7, &v17);
  uint64_t v5 = 1;
  if (!v17)
  {
    long long v13 = (__int32 *)v15;
    long long v14 = xmmword_1B25607E0;
    char v16 = 1;
    if (arabicToRoman(v9, (uint64_t)&v13))
    {
      uint64_t v5 = 0;
    }
    else
    {
      if ((unint64_t)(*((void *)&v14 + 1) + 1) >> 62) {
        uint64_t v10 = -1;
      }
      else {
        uint64_t v10 = 4 * (*((void *)&v14 + 1) + 1);
      }
      uint64_t v11 = (__int32 *)TAllocator::allocate(a5, v10);
      if (*((void *)&v14 + 1) >= (unint64_t)v14)
      {
        if (v16)
        {
          int v18 = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v13, *((unint64_t *)&v14 + 1), &v18, 1uLL);
          long long v12 = v13;
          --*((void *)&v14 + 1);
        }
        else
        {
          long long v12 = v13;
          if ((void)v14) {
            v13[(void)v14 - 1] = 0;
          }
        }
      }
      else
      {
        long long v12 = v13;
        v13[*((void *)&v14 + 1)] = 0;
      }
      wcscpy(v11, v12);
      uint64_t v5 = 1;
    }
    if (v16 && v13 != (__int32 *)v15 && v13) {
      MEMORY[0x1B3EA8630]();
    }
  }
  return v5;
}

void sub_1B22F5D04(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

uint64_t callBackFormat(void *a1, unint64_t a2, uint64_t a3, uint64_t a4, TAllocator *a5)
{
  if (a2 <= 1 && *a1 > 1uLL) {
    return 0;
  }
  std::string::size_type v25 = (__int32 *)v27;
  long long v26 = xmmword_1B25607E0;
  char v28 = 1;
  size_t v7 = (int *)a1[1];
  int v8 = *v7;
  if (*v7)
  {
    long long v23 = a5;
    uint64_t v24 = (const __int32 **)(a1 + 3);
    while (1)
    {
      while (1)
      {
        unsigned int v9 = v7;
        {
          operator new();
        }
        if (v8 > 159) {
          break;
        }
        if (v8 > 0x20 || ((1 << v8) & 0x100002600) == 0) {
          goto LABEL_19;
        }
LABEL_17:
        int v10 = v7[1];
        int v8 = v10;
        ++v7;
        if (!v10) {
          goto LABEL_49;
        }
      }
      if (v8 >= 12288)
      {
        if (v8 == 65279 || v8 == 12288) {
          goto LABEL_17;
        }
      }
      else if (v8 == 160 || v8 == 8203)
      {
        goto LABEL_17;
      }
LABEL_19:
      int v11 = *v7;
      if (!*v7) {
        goto LABEL_49;
      }
      while (1)
      {
        {
          operator new();
        }
        if (v11 <= 159)
        {
          if (v11 <= 0x20 && ((1 << v11) & 0x100002600) != 0) {
            goto LABEL_35;
          }
          goto LABEL_31;
        }
        if (v11 >= 12288) {
          break;
        }
        if (v11 == 160 || v11 == 8203) {
          goto LABEL_35;
        }
LABEL_31:
        int v12 = v7[1];
        ++v7;
        int v11 = v12;
        if (!v12) {
          goto LABEL_35;
        }
      }
      if (v11 != 12288 && v11 != 65279) {
        goto LABEL_31;
      }
LABEL_35:
      if (a2 >= 3)
      {
        unint64_t v13 = 2;
        long long v14 = v24;
        while (1)
        {
          if ((unint64_t)*(v14 - 1) > 1)
          {
            uint64_t v6 = 0;
            goto LABEL_62;
          }
          if (v7 - v9 == (int)wcslen(*v14) && !wcsncmp(v9, *v14, v7 - v9)) {
            break;
          }
          v14 += 4;
          v13 += 2;
          if (v13 >= a2) {
            goto LABEL_45;
          }
        }
        uint64_t v15 = 0;
        char v16 = (int *)v14[2];
        while (v16[v15++])
          ;
        TBuffer<wchar_t>::insert((uint64_t)&v25, *((unint64_t *)&v26 + 1), v16, v15 - 1);
      }
LABEL_45:
      int v8 = *v7;
      if (!*v7)
      {
LABEL_49:
        if ((unint64_t)(*((void *)&v26 + 1) + 1) >> 62) {
          uint64_t v18 = -1;
        }
        else {
          uint64_t v18 = 4 * (*((void *)&v26 + 1) + 1);
        }
        a5 = v23;
        goto LABEL_54;
      }
    }
  }
  uint64_t v18 = 4;
LABEL_54:
  BOOL v19 = (__int32 *)TAllocator::allocate(a5, v18);
  if (*((void *)&v26 + 1) >= (unint64_t)v26)
  {
    if (v28)
    {
      v29[0] = 0;
      TBuffer<wchar_t>::insert((uint64_t)&v25, *((unint64_t *)&v26 + 1), v29, 1uLL);
      std::string::size_type v20 = v25;
      --*((void *)&v26 + 1);
    }
    else
    {
      std::string::size_type v20 = v25;
      if ((void)v26) {
        v25[(void)v26 - 1] = 0;
      }
    }
  }
  else
  {
    std::string::size_type v20 = v25;
    v25[*((void *)&v26 + 1)] = 0;
  }
  wcscpy(v19, v20);
  uint64_t v6 = 1;
LABEL_62:
  if (v28)
  {
    if (v25 != (__int32 *)v27 && v25 != 0) {
      MEMORY[0x1B3EA8630]();
    }
  }
  return v6;
}

void sub_1B22F6108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  MEMORY[0x1B3EA8670](v13, 0x1070C40ADD13FEBLL);
  if (LOBYTE(STACK[0x438]) && a13 != a12)
  {
    if (a13) {
      MEMORY[0x1B3EA8630]();
    }
  }
  _Unwind_Resume(a1);
}

uint64_t callBackGetCategoryTag(void *a1, uint64_t a2, void *a3, uint64_t a4, TAllocator *a5)
{
  if (a2 != 1 || *a1 > 1uLL) {
    return 0;
  }
  uint64_t v6 = (__int32 *)a1[1];
  if (!*v6) {
    return 1;
  }
  uint64_t HeadClone = TLexicon::findHeadClone(a3, v6);
  uint64_t result = 1;
  if (HeadClone)
  {
    int v12 = (__int32 *)v14;
    long long v13 = xmmword_1B25607E0;
    char v15 = 1;
    TWord::getCategoryTag(HeadClone, &v12);
    if ((unint64_t)(*((void *)&v13 + 1) + 1) >> 62) {
      uint64_t v9 = -1;
    }
    else {
      uint64_t v9 = 4 * (*((void *)&v13 + 1) + 1);
    }
    int v10 = (__int32 *)TAllocator::allocate(a5, v9);
    if (*((void *)&v13 + 1) >= (unint64_t)v13)
    {
      if (v15)
      {
        int v16 = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v12, *((unint64_t *)&v13 + 1), &v16, 1uLL);
        int v11 = v12;
        --*((void *)&v13 + 1);
      }
      else
      {
        int v11 = v12;
        if ((void)v13) {
          v12[(void)v13 - 1] = 0;
        }
      }
    }
    else
    {
      int v11 = v12;
      v12[*((void *)&v13 + 1)] = 0;
    }
    wcscpy(v10, v11);
    if (v15 && v12 != (__int32 *)v14)
    {
      if (v12) {
        MEMORY[0x1B3EA8630]();
      }
    }
    return 1;
  }
  return result;
}

void sub_1B22F62F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (LOBYTE(STACK[0x420]) && a10 != v10)
  {
    if (a10) {
      MEMORY[0x1B3EA8630]();
    }
  }
  _Unwind_Resume(a1);
}

uint64_t callBackFind(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, TAllocator *a5)
{
  if (a2 != 2 || *(void *)a1 > 1uLL || *(void *)(a1 + 16) > 1uLL) {
    return 0;
  }
  int v8 = wcsstr(*(__int32 **)(a1 + 8), *(const __int32 **)(a1 + 24));
  uint64_t result = 1;
  if (v8)
  {
    long long v13 = (__int32 *)v15;
    long long v14 = xmmword_1B25607E0;
    char v16 = 1;
    uint64_t v9 = *(void *)(a1 + 8);
    {
      operator new();
    }
    TLocaleInfo::valueToString(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, ((uint64_t)v8 - v9) >> 2, (uint64_t)&v13, 0);
    if ((unint64_t)(*((void *)&v14 + 1) + 1) >> 62) {
      uint64_t v10 = -1;
    }
    else {
      uint64_t v10 = 4 * (*((void *)&v14 + 1) + 1);
    }
    int v11 = (__int32 *)TAllocator::allocate(a5, v10);
    if (*((void *)&v14 + 1) >= (unint64_t)v14)
    {
      if (v16)
      {
        int v17 = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v13, *((unint64_t *)&v14 + 1), &v17, 1uLL);
        int v12 = v13;
        --*((void *)&v14 + 1);
      }
      else
      {
        int v12 = v13;
        if ((void)v14) {
          v13[(void)v14 - 1] = 0;
        }
      }
    }
    else
    {
      int v12 = v13;
      v13[*((void *)&v14 + 1)] = 0;
    }
    wcscpy(v11, v12);
    if (v16 && v13 != (__int32 *)v15)
    {
      if (v13) {
        MEMORY[0x1B3EA8630]();
      }
    }
    return 1;
  }
  return result;
}

void sub_1B22F6508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  MEMORY[0x1B3EA8670](v10, 0x1070C40ADD13FEBLL);
  if (LOBYTE(STACK[0x420]) && a10 != v11)
  {
    if (a10) {
      MEMORY[0x1B3EA8630]();
    }
  }
  _Unwind_Resume(a1);
}

uint64_t callBackCopy(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, TAllocator *a5)
{
  if ((a2 & 0xFFFFFFFFFFFFFFFELL) != 2 || *a1 > 1uLL || a1[2] > 1uLL || a2 == 3 && a1[4] > 1uLL) {
    return 0;
  }
  int v8 = (const __int32 *)a1[1];
  BOOL v23 = 0;
  uint64_t v9 = (unsigned int *)a1[3];
  {
    operator new();
  }
  int v10 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v9, &v23);
  if (v23) {
    return 0;
  }
  unint64_t v12 = v10;
  long long v13 = (TLocaleInfo *)wcslen(v8);
  long long v14 = (char *)v13 - v12;
  if ((unint64_t)v13 >= v12)
  {
    char v15 = v13;
    size_t v16 = (size_t)v13;
    if (a2 == 3)
    {
      int v17 = (unsigned int *)a1[5];
      uint64_t GlobalLocaleInfo = TLocaleInfo::getGlobalLocaleInfo(v13);
      unsigned int v19 = TLocaleInfo::stringToUInt(GlobalLocaleInfo, v17, &v23);
      if (v23) {
        return 0;
      }
      size_t v16 = v19;
    }
    if (v16 + v12 <= (unint64_t)v15) {
      size_t v20 = v16;
    }
    else {
      size_t v20 = (size_t)v14;
    }
    if ((v20 + 1) >> 62) {
      uint64_t v21 = -1;
    }
    else {
      uint64_t v21 = 4 * (v20 + 1);
    }
    std::string::size_type v22 = (__int32 *)TAllocator::allocate(a5, v21);
    wcsncpy(v22, &v8[v12], v20);
    v22[v20] = 0;
  }
  return 1;
}

void sub_1B22F6710(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

void TCondition::TCondition(TCondition *this, unsigned int **a2, unint64_t a3, TLexicon *a4)
{
  TCondition::setEnum(this, (const TFileObject *)a2, a3);
  *((void *)this + 4) = a4;
  *(void *)this = 0;
  if (*((_DWORD *)this + 3) != 7) {
    buildRegExp((const TFileObject *)a2, a4);
  }
  if (TFileObject::verify((TFileObject *)a2, 0, 0))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    TException::TException(v12, (long long *)__p);
    v12[0].__vftable = (std::exception_vtbl *)&unk_1F0A33B90;
    if (v13 >= 0) {
      int v8 = (std::exception_vtbl *)&v12[1];
    }
    else {
      int v8 = v12[1].__vftable;
    }
    conditionalAssert((const char *)v8, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/tkn/mungemapmgr.cpp", 123);
    TException::~TException(v12);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v12, "");
    TException::TException(exception, (long long *)v12);
    void *exception = &unk_1F0A33B90;
  }
  LOBYTE(v12[0].__vftable) = 0;
  size_t v7 = a2[3];
  {
    operator new();
  }
  *(void *)this = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v7, (BOOL *)v12);
}

void sub_1B22F692C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  MEMORY[0x1B3EA8670](v21, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

uint64_t TCondition::setEnum(TCondition *this, const TFileObject *a2, unint64_t a3)
{
  uint64_t v6 = 0;
  size_t v7 = (const __int32 *)*((void *)a2 + 1);
  if (a3 > 1) {
    uint64_t v8 = 8;
  }
  else {
    uint64_t v8 = 9;
  }
  *((void *)this + 1) = 0x900000004;
  while (1)
  {
    uint64_t v9 = (const __int32 *)*(&TCondition::setEnum(TFileObject const*,unsigned long)::ppszSource + v6);
    size_t v10 = wcslen(v9);
    if (!wcsncmp(v7, v9, v10)) {
      break;
    }
    if (v8 == ++v6) {
      goto LABEL_12;
    }
  }
  *((_DWORD *)this + 3) = v6;
  if (a3 <= 1 && v6 == 8) {
    tknPrintf("Warning: Pron conditions are no longer supported in munge-map rules!\n", v11);
  }
  v7 += wcslen(v9);
LABEL_12:
  unsigned int v12 = *((_DWORD *)this + 3);
  if (v12 >= 2 && v12 != 7)
  {
    if (v12 == 9)
    {
      loggableFileObject((uint64_t *)a2);
      if (v30 >= 0) {
        uint64_t v24 = __p;
      }
      else {
        uint64_t v24 = (void **)__p[0];
      }
      tknPrintf("Error: %sInvalid attribute\n", v23, v24);
      if (v30 < 0) {
        operator delete(__p[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(v27, "");
      TException::TException(__p, (long long *)v27);
      __p[0] = &unk_1F0A33B90;
      if (v31 >= 0) {
        std::string::size_type v25 = (const char *)&__p[1];
      }
      else {
        std::string::size_type v25 = (const char *)__p[1];
      }
      conditionalAssert(v25, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/tkn/mungemapmgr.cpp", 180);
      TException::~TException((std::exception *)__p);
      if (v28 < 0) {
        operator delete(v27[0]);
      }
      exception = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      TException::TException(exception, (long long *)__p);
      void *exception = &unk_1F0A33B90;
    }
    uint64_t v16 = 0;
    v7 += 2 * (wcsncmp(v7, dword_1B25AAD78, 2uLL) == 0);
    while (1)
    {
      int v17 = (const __int32 *)*(&TCondition::setEnum(TFileObject const*,unsigned long)::ppszTokenPos + v16);
      size_t v18 = wcslen(v17);
      if (!wcsncmp(v7, v17, v18)) {
        break;
      }
      if (++v16 == 5) {
        goto LABEL_17;
      }
    }
    *((_DWORD *)this + 2) = v16;
    v7 += wcslen(v17);
  }
LABEL_17:
  long long v14 = &v7[2 * (wcsncmp(v7, dword_1B25AAE3C, 2uLL) == 0)];
  *((unsigned char *)this + 16) = 0;
  uint64_t result = wcsncmp(v14, dword_1B25AAE48, 3uLL);
  if (!result)
  {
    v14 += 3;
    *((unsigned char *)this + 16) = 1;
  }
  if (*v14)
  {
    loggableFileObject((uint64_t *)a2);
    if (v30 >= 0) {
      size_t v20 = __p;
    }
    else {
      size_t v20 = (void **)__p[0];
    }
    tknPrintf("Error: %sInvalid attribute\n", v19, v20);
    if (v30 < 0) {
      operator delete(__p[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v27, "");
    TException::TException(__p, (long long *)v27);
    __p[0] = &unk_1F0A33B90;
    if (v31 >= 0) {
      uint64_t v21 = (const char *)&__p[1];
    }
    else {
      uint64_t v21 = (const char *)__p[1];
    }
    conditionalAssert(v21, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/tkn/mungemapmgr.cpp", 226);
    TException::~TException((std::exception *)__p);
    if (v28 < 0) {
      operator delete(v27[0]);
    }
    std::string::size_type v22 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    TException::TException(v22, (long long *)__p);
    void *v22 = &unk_1F0A33B90;
  }
  return result;
}

void sub_1B22F6DB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((v22 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v21);
  goto LABEL_6;
}

void TCondition::~TCondition(TCondition *this)
{
  uint64_t v1 = (TRegExp *)*((void *)this + 3);
  if (v1)
  {
    TRegExp::~TRegExp(v1);
    MEMORY[0x1B3EA8670]();
  }
}

void TCondition::getSource(uint64_t a1, uint64_t a2, int *a3, int *a4, void *a5)
{
  TBuffer<wchar_t>::resize((uint64_t)a5, 0);
  switch(*(_DWORD *)(a1 + 12))
  {
    case 0:
      uint64_t v10 = 0;
      unint64_t v11 = a5[2];
      while (a3[v10++])
        ;
      unint64_t v13 = v10 - 1;
      uint64_t v14 = (uint64_t)a5;
      char v15 = a3;
      goto LABEL_8;
    case 1:
      uint64_t v16 = 0;
      unint64_t v11 = a5[2];
      while (a4[v16++])
        ;
      unint64_t v13 = v16 - 1;
      uint64_t v14 = (uint64_t)a5;
      char v15 = a4;
LABEL_8:
      TBuffer<wchar_t>::insert(v14, v11, v15, v13);
      return;
    case 2:
      int v18 = *(_DWORD *)(a2 + 48);
      if (v18 != 2 && v18 != 5)
      {
        size_t v20 = *(__int32 ***)(a2 + 56);
        TWord::getTokenName(v20, (uint64_t)a5);
      }
      return;
    case 3:
      int v21 = *(_DWORD *)(a2 + 48);
      if (v21 != 2 && v21 != 5) {
        goto LABEL_32;
      }
      return;
    case 4:
      uint64_t v23 = *(void *)(a2 + 56);
      TWord::getCategoryTag(v23, a5);
      return;
    case 5:
      uint64_t v24 = *(unsigned __int8 **)(*(void *)(a2 + 16) + 16);
      if (v24)
      {
        uint64_t v25 = *(void *)(*(void *)(a2 + 24) + 24);
        if (v25)
        {
          uint64_t v26 = *(void *)(a1 + 32) + 224;
          TLocaleInfo::multiByteToUnicode(v26, v24, v25 - (void)v24, (uint64_t)a5);
        }
      }
      return;
    case 6:
      if (*(_DWORD *)(a2 + 48) == 5)
      {
LABEL_32:
        std::string::size_type v27 = *(__int32 ***)(a2 + 56);
        TWord::getWrittenForm(v27, (uint64_t)a5);
      }
      break;
    default:
      return;
  }
}

uint64_t TCondition::test(uint64_t a1, uint64_t a2, int *a3, int *a4, std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *this)
{
  if (*(_DWORD *)(a1 + 12) == 7)
  {
    LOBYTE(v6) = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(this) < 0xFFFFFFFFLL * *(void *)a1 / 0x64uLL;
    return v6 & 1;
  }
  size_t v20 = 0;
  int v21 = 0;
  uint64_t v22 = 0;
  collectEdge(a2, *(_DWORD *)(a1 + 8), &v20);
  uint64_t v9 = v20;
  uint64_t v10 = v21;
  if (v21 == v20)
  {
    LOBYTE(v6) = 0;
    uint64_t v9 = v21;
    if (!v21) {
      return v6 & 1;
    }
    goto LABEL_21;
  }
  unint64_t v11 = 0;
  int v6 = 0;
  do
  {
    uint64_t v12 = v9[v11];
    if (*(_DWORD *)(v12 + 48) != 3)
    {
      uint64_t v16 = (unsigned int *)v18;
      long long v17 = xmmword_1B25607E0;
      char v19 = 1;
      TCondition::getSource(a1, v12, a3, a4, &v16);
      if (*((void *)&v17 + 1))
      {
        unint64_t v13 = *(void **)(a1 + 24);
        if (*((void *)&v17 + 1) >= (unint64_t)v17)
        {
          if (v19)
          {
            int v23 = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v16, *((unint64_t *)&v17 + 1), &v23, 1uLL);
            uint64_t v14 = v16;
            --*((void *)&v17 + 1);
          }
          else
          {
            uint64_t v14 = v16;
            if ((void)v17) {
              v16[(void)v17 - 1] = 0;
            }
          }
        }
        else
        {
          uint64_t v14 = v16;
          v16[*((void *)&v17 + 1)] = 0;
        }
        v6 |= TRegExp::match(v13, v14, 0) ^ (*(unsigned char *)(a1 + 16) != 0);
      }
      if (v19 && v16 != (unsigned int *)v18 && v16) {
        MEMORY[0x1B3EA8630]();
      }
      uint64_t v9 = v20;
      uint64_t v10 = v21;
    }
    ++v11;
  }
  while (v11 < v10 - v9);
  if (v9)
  {
LABEL_21:
    int v21 = v9;
    operator delete(v9);
  }
  return v6 & 1;
}

void sub_1B22F7278(_Unwind_Exception *a1)
{
  int v3 = *(void **)(v1 - 112);
  if (v3)
  {
    *(void *)(v1 - 104) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(a1);
}

void collectEdge(uint64_t a1, int a2, void *a3)
{
  switch(a2)
  {
    case 0:
      uint64_t v5 = TVertex::getInEdge(*(void *)(a1 + 16));
      if (!v5) {
        return;
      }
      uint64_t v6 = v5;
LABEL_4:
      collectEdge(v6, 1, a3);
      while (1)
      {
        uint64_t v6 = *(void *)v6;
        if (!v6) {
          return;
        }
        if (!*(unsigned char *)(v6 + 32)) {
          goto LABEL_4;
        }
      }
    case 1:
      uint64_t v7 = TVertex::getInEdge(*(void *)(a1 + 16));
      if (!v7) {
        return;
      }
      uint64_t v8 = v7;
      uint64_t v9 = a3 + 2;
      uint64_t v10 = (uint64_t *)a3[1];
LABEL_10:
      if ((unint64_t)v10 < *v9)
      {
        *v10++ = v8;
        goto LABEL_26;
      }
      uint64_t v11 = ((uint64_t)v10 - *a3) >> 3;
      if (!((unint64_t)(v11 + 1) >> 61))
      {
        uint64_t v12 = *v9 - *a3;
        uint64_t v13 = v12 >> 2;
        if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
          uint64_t v13 = v11 + 1;
        }
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14) {
          char v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a3 + 2), v14);
        }
        else {
          char v15 = 0;
        }
        uint64_t v16 = (uint64_t *)&v15[8 * v11];
        *uint64_t v16 = v8;
        uint64_t v10 = v16 + 1;
        int v18 = (char *)*a3;
        long long v17 = (char *)a3[1];
        if (v17 != (char *)*a3)
        {
          do
          {
            uint64_t v19 = *((void *)v17 - 1);
            v17 -= 8;
            *--uint64_t v16 = v19;
          }
          while (v17 != v18);
          long long v17 = (char *)*a3;
        }
        *a3 = v16;
        a3[1] = v10;
        a3[2] = &v15[8 * v14];
        if (v17) {
          operator delete(v17);
        }
LABEL_26:
        a3[1] = v10;
        while (1)
        {
          uint64_t v8 = *(void *)v8;
          if (!v8) {
            return;
          }
          if (!*(unsigned char *)(v8 + 32)) {
            goto LABEL_10;
          }
        }
      }
      goto LABEL_76;
    case 2:
      uint64_t OutEdge = TVertex::getOutEdge(*(void *)(a1 + 24));
      if (!OutEdge) {
        return;
      }
      uint64_t v21 = OutEdge;
      uint64_t v22 = a3 + 2;
      int v23 = (uint64_t *)a3[1];
LABEL_32:
      if ((unint64_t)v23 < *v22)
      {
        *v23++ = v21;
        goto LABEL_48;
      }
      uint64_t v24 = ((uint64_t)v23 - *a3) >> 3;
      if ((unint64_t)(v24 + 1) >> 61) {
        goto LABEL_76;
      }
      uint64_t v25 = *v22 - *a3;
      uint64_t v26 = v25 >> 2;
      if (v25 >> 2 <= (unint64_t)(v24 + 1)) {
        uint64_t v26 = v24 + 1;
      }
      if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v27 = v26;
      }
      if (v27) {
        char v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a3 + 2), v27);
      }
      else {
        char v28 = 0;
      }
      unint64_t v29 = (uint64_t *)&v28[8 * v24];
      uint64_t *v29 = v21;
      int v23 = v29 + 1;
      char v31 = (char *)*a3;
      char v30 = (char *)a3[1];
      if (v30 != (char *)*a3)
      {
        do
        {
          uint64_t v32 = *((void *)v30 - 1);
          v30 -= 8;
          *--unint64_t v29 = v32;
        }
        while (v30 != v31);
        char v30 = (char *)*a3;
      }
      *a3 = v29;
      a3[1] = v23;
      a3[2] = &v28[8 * v27];
      if (v30) {
        operator delete(v30);
      }
LABEL_48:
      a3[1] = v23;
      while (1)
      {
        uint64_t v21 = *(void *)(v21 + 8);
        if (!v21) {
          return;
        }
        if (!*(unsigned char *)(v21 + 32)) {
          goto LABEL_32;
        }
      }
    case 3:
      uint64_t v33 = TVertex::getOutEdge(*(void *)(a1 + 24));
      if (!v33) {
        return;
      }
      uint64_t v34 = v33;
LABEL_54:
      collectEdge(v34, 2, a3);
      while (1)
      {
        uint64_t v34 = *(void *)(v34 + 8);
        if (!v34) {
          return;
        }
        if (!*(unsigned char *)(v34 + 32)) {
          goto LABEL_54;
        }
      }
    case 4:
      unint64_t v35 = a3[2];
      long long v36 = (void *)a3[1];
      if ((unint64_t)v36 >= v35)
      {
        uint64_t v38 = ((uint64_t)v36 - *a3) >> 3;
        if ((unint64_t)(v38 + 1) >> 61) {
LABEL_76:
        }
          std::vector<int>::__throw_length_error[abi:ne180100]();
        uint64_t v39 = v35 - *a3;
        uint64_t v40 = v39 >> 2;
        if (v39 >> 2 <= (unint64_t)(v38 + 1)) {
          uint64_t v40 = v38 + 1;
        }
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v41 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v41 = v40;
        }
        if (v41) {
          long long v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a3 + 2), v41);
        }
        else {
          long long v42 = 0;
        }
        long long v43 = &v42[8 * v38];
        std::vector<std::string>::pointer v44 = &v42[8 * v41];
        *(void *)long long v43 = a1;
        unint64_t v37 = v43 + 8;
        unint64_t v46 = (char *)*a3;
        long long v45 = (char *)a3[1];
        if (v45 != (char *)*a3)
        {
          do
          {
            uint64_t v47 = *((void *)v45 - 1);
            v45 -= 8;
            *((void *)v43 - 1) = v47;
            v43 -= 8;
          }
          while (v45 != v46);
          long long v45 = (char *)*a3;
        }
        *a3 = v43;
        a3[1] = v37;
        a3[2] = v44;
        if (v45) {
          operator delete(v45);
        }
      }
      else
      {
        *long long v36 = a1;
        unint64_t v37 = v36 + 1;
      }
      a3[1] = v37;
      return;
    default:
      return;
  }
}

void TRule::TRule(TRule *this, const TFileObject *a2, TLexicon *a3, TAllocator *a4)
{
  *((unsigned char *)this + 32) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)this, 0xAuLL);
  for (uint64_t i = *((void *)a2 + 3); i; uint64_t i = *(void *)(i + 16))
  {
    if (wcscmp(*(const __int32 **)(i + 8), dword_1B25AAE58)) {
      operator new();
    }
    if (*((void *)this + 3))
    {
      loggableFileObject((uint64_t *)i);
      uint64_t v10 = __p;
      if (v20 < 0) {
        uint64_t v10 = (void **)__p[0];
      }
      tknPrintf("Error: %sRedefinition\n", v9, v10);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(v17, "");
      TException::TException(__p, (long long *)v17);
      __p[0] = &unk_1F0A33B90;
      if (v21 >= 0) {
        uint64_t v11 = (const char *)&__p[1];
      }
      else {
        uint64_t v11 = (const char *)__p[1];
      }
      conditionalAssert(v11, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/tkn/mungemapmgr.cpp", 422);
      TException::~TException((std::exception *)__p);
      if (v18 < 0) {
        operator delete(v17[0]);
      }
      exception = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      TException::TException(exception, (long long *)__p);
      void *exception = &unk_1F0A33B90;
    }
    *((void *)this + 3) = buildReplaceObject((const TFileObject *)i, a3, a4);
    *((unsigned char *)this + 32) = 1;
  }
  if (*(void *)this == *((void *)this + 1))
  {
    loggableFileObject((uint64_t *)a2);
    if (v20 >= 0) {
      unint64_t v14 = __p;
    }
    else {
      unint64_t v14 = (void **)__p[0];
    }
    tknPrintf("Error: %sRule is missing a condition\n", v13, v14);
    if (v20 < 0) {
      operator delete(__p[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v17, "");
    TException::TException(__p, (long long *)v17);
    __p[0] = &unk_1F0A33B90;
    if (v21 >= 0) {
      char v15 = (const char *)&__p[1];
    }
    else {
      char v15 = (const char *)__p[1];
    }
    conditionalAssert(v15, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/tkn/mungemapmgr.cpp", 445);
    TException::~TException((std::exception *)__p);
    if (v18 < 0) {
      operator delete(v17[0]);
    }
    uint64_t v16 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    TException::TException(v16, (long long *)__p);
    *uint64_t v16 = &unk_1F0A33B90;
  }
}

void sub_1B22F7BF4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (v26 == 1)
  {
    __cxa_begin_catch(v27);
    TRule::freeMemory(v25);
    __cxa_rethrow();
  }
  JUMPOUT(0x1B22F7CD4);
}

void sub_1B22F7CC0()
{
  __cxa_end_catch();
  uint64_t v1 = *(void **)v0;
  if (*(void *)v0)
  {
    *(void *)(v0 + 8) = v1;
    operator delete(v1);
  }
  _Unwind_Resume(v2);
}

TFileObject *buildReplaceObject(const TFileObject *a1, TLexicon *a2, TAllocator *a3)
{
  char v15 = &unk_1B25AAEC8;
  long long v16 = xmmword_1B257E4D0;
  uint64_t v17 = -1;
  if (TFileObject::verify((uint64_t)a1, (uint64_t)&v15, 1uLL, 1))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    TException::TException(v13, (long long *)__p);
    v13[0].__vftable = (std::exception_vtbl *)&unk_1F0A33B90;
    if (v14 >= 0) {
      uint64_t v9 = (std::exception_vtbl *)&v13[1];
    }
    else {
      uint64_t v9 = v13[1].__vftable;
    }
    conditionalAssert((const char *)v9, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/tkn/mungemapmgr.cpp", 388);
    TException::~TException(v13);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v13, "");
    TException::TException(exception, (long long *)v13);
    void *exception = &unk_1F0A33B90;
  }
  uint64_t v6 = (const TFileObject *)*((void *)a1 + 3);
  if (!v6) {
    return 0;
  }
  uint64_t v7 = 0;
  do
  {
    uint64_t v7 = compileAlt(v6, v7, a2, a3);
    uint64_t v6 = (const TFileObject *)*((void *)v6 + 2);
  }
  while (v6);
  return v7;
}

void sub_1B22F7E74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((v22 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v21);
  goto LABEL_6;
}

uint64_t *TRule::freeMemory(uint64_t *this)
{
  uint64_t v2 = *this;
  uint64_t v1 = this[1];
  if (v1 != *this)
  {
    int v3 = this;
    unint64_t v4 = 0;
    do
    {
      this = *(uint64_t **)(v2 + 8 * v4);
      if (this)
      {
        TCondition::~TCondition((TCondition *)this);
        this = (uint64_t *)MEMORY[0x1B3EA8670]();
        uint64_t v2 = *v3;
        uint64_t v1 = v3[1];
      }
      ++v4;
    }
    while (v4 < (v1 - v2) >> 3);
  }
  return this;
}

void TRule::~TRule(TRule *this)
{
  TRule::freeMemory((uint64_t *)this);
  uint64_t v2 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v2;
    operator delete(v2);
  }
}

uint64_t TRule::test(uint64_t *a1, uint64_t a2, int *a3, int *a4, std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *this)
{
  uint64_t v5 = *a1;
  if (a1[1] == *a1) {
    return 1;
  }
  unint64_t v11 = 0;
  do
  {
    uint64_t result = TCondition::test(*(void *)(v5 + 8 * v11), a2, a3, a4, this);
    if ((result & 1) == 0) {
      break;
    }
    ++v11;
    uint64_t v5 = *a1;
  }
  while (v11 < (a1[1] - *a1) >> 3);
  return result;
}

void TGroup::TGroup(TGroup *this, const TFileObject *a2, TRegExp *a3, uint64_t a4, TLexicon *a5, TAllocator *a6)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  *((unsigned char *)this + 32) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)this, 0xAuLL);
  long long v57 = xmmword_1B255FA20;
  long long v56 = dword_1B25AAE78;
  long long v60 = xmmword_1B257E4D0;
  uint64_t v58 = -1;
  int v59 = dword_1B25AAE94;
  long long v63 = xmmword_1B2563B40;
  uint64_t v61 = -1;
  int v62 = dword_1B25AAE58;
  uint64_t v64 = -1;
  if (TFileObject::verify((uint64_t)a2, (uint64_t)&v56, 3uLL, 1))
  {
    std::string::basic_string[abi:ne180100]<0>(&v52, "");
    TException::TException(&__p, (long long *)&v52);
    std::string __p = &unk_1F0A33B90;
    if (v41[7] >= 0) {
      char v31 = (const char *)&v40;
    }
    else {
      char v31 = (const char *)v40;
    }
    conditionalAssert(v31, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/tkn/mungemapmgr.cpp", 593);
    TException::~TException((std::exception *)&__p);
    if (v53.i8[15] < 0) {
      operator delete(v52);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    TException::TException(exception, (long long *)&__p);
    void *exception = &unk_1F0A33B90;
  }
  uint64_t v12 = *((void *)a2 + 3);
  if (v12)
  {
    uint64_t v33 = a6;
    while (1)
    {
      if (wcscmp(*(const __int32 **)(v12 + 8), dword_1B25AAE78))
      {
        if (!wcscmp(*(const __int32 **)(v12 + 8), dword_1B25AAE94)) {
          operator new();
        }
        if (!wcscmp(*(const __int32 **)(v12 + 8), dword_1B25AAE58))
        {
          *((void *)this + 3) = buildReplaceObject((const TFileObject *)v12, a5, a6);
          *((unsigned char *)this + 32) = 1;
        }
        goto LABEL_54;
      }
      int64x2_t v53 = vdupq_n_s64(1uLL);
      unint64_t v52 = &unk_1B25AAEC8;
      uint64_t v54 = -1;
      if (TFileObject::verify(v12, (uint64_t)&v52, 1uLL, 1))
      {
        std::string::basic_string[abi:ne180100]<0>(v47, "");
        TException::TException(&v49, (long long *)v47);
        v49.__vftable = (std::exception_vtbl *)&unk_1F0A33B90;
        if (v51 >= 0) {
          unint64_t v29 = (const char *)&v50;
        }
        else {
          unint64_t v29 = v50;
        }
        conditionalAssert(v29, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/tkn/mungemapmgr.cpp", 524);
        TException::~TException(&v49);
        if (v48 < 0) {
          operator delete(v47[0]);
        }
        char v30 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(&__p, "");
        TException::TException(v30, (long long *)&__p);
        *char v30 = &unk_1F0A33B90;
      }
      uint64_t v13 = *(void *)(v12 + 24);
      if (v13) {
        break;
      }
LABEL_54:
      uint64_t v12 = *(void *)(v12 + 16);
      if (!v12) {
        return;
      }
    }
    char v14 = 0;
    while (1)
    {
      if ((TFileObject::verify((TFileObject *)v13, 1, 0) & 1) == 0)
      {
        char v15 = *(__int32 **)(v13 + 24);
        if (*(_DWORD *)(v13 + 40) == 2)
        {
          TRegExp::add((uint64_t)a3, v15, a4);
          goto LABEL_15;
        }
        if (!TLexicon::checkName((uint64_t)a5, v15, 1, 0xFFFFFFFFFFFFFFFFLL))
        {
          if (*(unsigned char *)(getPropCheckTokenExistence() + 8) && !TLexicon::findHeadClone(a5, *(__int32 **)(v13 + 24)))
          {
            loggableFileObject((uint64_t *)v13);
            int v21 = v44;
            int v22 = (void **)v43;
            loggableUnicode(*(unsigned int **)(v13 + 24), &__p);
            uint64_t v24 = &v43;
            if (v21 < 0) {
              uint64_t v24 = v22;
            }
            p_p = &__p;
            if (v40 < 0) {
              p_p = __p;
            }
            tknPrintf("Warning: %s'%s' isn't lexicalized.\n", v23, v24, p_p);
            a6 = v33;
            if (SHIBYTE(v40) < 0) {
              operator delete(__p);
            }
            if (v44 < 0) {
              operator delete(v43);
            }
          }
          std::string __p = v41;
          long long v40 = xmmword_1B25607E0;
          char v42 = 1;
          TRegExp::stringToRegExp(*(void *)(v13 + 24), (uint64_t)&__p, 0, 3);
          if (*((void *)&v40 + 1) >= (unint64_t)v40)
          {
            if (v42)
            {
              int v55 = 0;
              TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v40 + 1), &v55, 1uLL);
              int v26 = (__int32 *)__p;
              --*((void *)&v40 + 1);
            }
            else
            {
              int v26 = (__int32 *)__p;
              if ((void)v40) {
                *((_DWORD *)__p + v40 - 1) = 0;
              }
            }
          }
          else
          {
            int v26 = (__int32 *)__p;
            *((_DWORD *)__p + *((void *)&v40 + 1)) = 0;
          }
          TRegExp::add((uint64_t)a3, v26, a4);
          if (v42 && __p != v41 && __p) {
            MEMORY[0x1B3EA8630]();
          }
          goto LABEL_15;
        }
        loggableFileObject((uint64_t *)v13);
        int v16 = v46;
        uint64_t v17 = (void **)v45;
        loggableUnicode(*(unsigned int **)(v13 + 24), &__p);
        uint64_t v19 = &v45;
        if (v16 < 0) {
          uint64_t v19 = v17;
        }
        char v20 = &__p;
        if (v40 < 0) {
          char v20 = __p;
        }
        tknPrintf("Error: %s'%s' is an invalid token name.\n", v18, v19, v20);
        if (SHIBYTE(v40) < 0) {
          operator delete(__p);
        }
        if (v46 < 0) {
          operator delete(v45);
        }
      }
      char v14 = 1;
LABEL_15:
      uint64_t v13 = *(void *)(v13 + 16);
      if (!v13)
      {
        if (v14)
        {
          std::string::basic_string[abi:ne180100]<0>(v34, "");
          TException::TException(&v36, (long long *)v34);
          v36.__vftable = (std::exception_vtbl *)&unk_1F0A33B90;
          if (v38 >= 0) {
            unint64_t v27 = (const char *)&v37;
          }
          else {
            unint64_t v27 = v37;
          }
          conditionalAssert(v27, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/tkn/mungemapmgr.cpp", 571);
          TException::~TException(&v36);
          if (v35 < 0) {
            operator delete(v34[0]);
          }
          char v28 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(&__p, "");
          TException::TException(v28, (long long *)&__p);
          *char v28 = &unk_1F0A33B90;
        }
        goto LABEL_54;
      }
    }
  }
}

void sub_1B22F8AFC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    TGroup::freeMemory(v37);
    __cxa_rethrow();
  }
  JUMPOUT(0x1B22F8BECLL);
}

void sub_1B22F8BDC(_Unwind_Exception *a1)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(a1);
}

void sub_1B22F8BE4()
{
}

uint64_t *TGroup::freeMemory(uint64_t *this)
{
  uint64_t v2 = *this;
  uint64_t v1 = this[1];
  if (v1 != *this)
  {
    int v3 = this;
    unint64_t v4 = 0;
    do
    {
      this = *(uint64_t **)(v2 + 8 * v4);
      if (this)
      {
        TRule::~TRule((TRule *)this);
        this = (uint64_t *)MEMORY[0x1B3EA8670]();
        uint64_t v2 = *v3;
        uint64_t v1 = v3[1];
      }
      ++v4;
    }
    while (v4 < (v1 - v2) >> 3);
  }
  return this;
}

void TGroup::~TGroup(TGroup *this)
{
  TGroup::freeMemory((uint64_t *)this);
  uint64_t v2 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v2;
    operator delete(v2);
  }
}

uint64_t TGroup::munge(uint64_t *a1, uint64_t a2, int *a3, int *a4, std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *this)
{
  uint64_t v6 = *a1;
  if (a1[1] == *a1)
  {
LABEL_5:
    uint64_t v12 = (uint64_t)(a1 + 3);
  }
  else
  {
    unint64_t v11 = 0;
    while ((TRule::test(*(uint64_t **)(v6 + 8 * v11), a2, a3, a4, this) & 1) == 0)
    {
      ++v11;
      uint64_t v6 = *a1;
      if (v11 >= (a1[1] - *a1) >> 3) {
        goto LABEL_5;
      }
    }
    uint64_t v12 = *(void *)(*a1 + 8 * v11) + 24;
  }
  return *(void *)v12;
}

void TMungeMapManager::TMungeMapManager(TMungeMapManager *this, TInputStream *a2, TLexicon *a3)
{
  TAllocator::TAllocator(this, 2048);
  v4[5] = 0;
  v4[6] = 0;
  void v4[7] = 0;
  v4[8] = a3;
  operator new();
}

void sub_1B22F92A8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,std::exception a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  TFileObjectParser::~TFileObjectParser((TFileObjectParser *)&v36);
  JUMPOUT(0x1B22F93B0);
}

void sub_1B22F93A8()
{
}

void sub_1B22F93D0(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v3, 0x60C40CE5A77A8);
  uint64_t v5 = *v2;
  if (*v2)
  {
    *((void *)v1 + 6) = v5;
    operator delete(v5);
  }
  TAllocator::clear(v1);
  _Unwind_Resume(a1);
}

void sub_1B22F93F8()
{
}

TRegExp *TMungeMapManager::freeMemory(TMungeMapManager *this)
{
  uint64_t result = (TRegExp *)*((void *)this + 9);
  if (result)
  {
    TRegExp::~TRegExp(result);
    uint64_t result = (TRegExp *)MEMORY[0x1B3EA8670]();
  }
  uint64_t v4 = *((void *)this + 5);
  uint64_t v3 = *((void *)this + 6);
  if (v3 != v4)
  {
    unint64_t v5 = 0;
    do
    {
      uint64_t result = *(TRegExp **)(v4 + 8 * v5);
      if (result)
      {
        TGroup::~TGroup(result);
        uint64_t result = (TRegExp *)MEMORY[0x1B3EA8670]();
        uint64_t v4 = *((void *)this + 5);
        uint64_t v3 = *((void *)this + 6);
      }
      ++v5;
    }
    while (v5 < (v3 - v4) >> 3);
  }
  return result;
}

void TMungeMapManager::~TMungeMapManager(TMungeMapManager *this)
{
  TMungeMapManager::freeMemory(this);
  uint64_t v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }
  TAllocator::clear(this);
}

void TMungeMapManager::mungeWithGroups(uint64_t a1, TVertex *this, TGraph *a3, int *a4, int *a5, TSegmenter *a6, unint64_t a7, unint64_t a8, std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *a9)
{
  unint64_t v11 = a6;
  *(void *)long long v56 = v58;
  long long v57 = xmmword_1B25607E0;
  char v59 = 1;
  char v14 = (char *)*((void *)this + 2);
  if (v14)
  {
    uint64_t PreviousSegment = TSegmenter::getPreviousSegment(a6, v14);
    if (PreviousSegment)
    {
      if (*(_DWORD *)(PreviousSegment + 24) == 5) {
        goto LABEL_6;
      }
      a4 = *(int **)PreviousSegment;
    }
    TBuffer<wchar_t>::assign((uint64_t)v56, a4);
  }
LABEL_6:
  uint64_t v54 = 0;
  std::string __p = 0;
  uint64_t v55 = 0;
  std::exception v49 = (unsigned int *)v51;
  long long v50 = xmmword_1B25607E0;
  char v52 = 1;
  uint64_t OutEdge = TVertex::getOutEdge((uint64_t)this);
  if (OutEdge)
  {
LABEL_7:
    unint64_t v18 = *(void *)(OutEdge + 40);
    if (v18 >= a7 && v18 < a8)
    {
      unsigned int v20 = *(_DWORD *)(OutEdge + 48);
      BOOL v21 = v20 > 5;
      int v22 = (1 << v20) & 0x2C;
      if (v21 || v22 == 0)
      {
        TWord::getTokenName(*(__int32 ***)(OutEdge + 56), (uint64_t)&v49);
        std::vector<TRegExpMatch>::resize((uint64_t)&__p, 0);
        uint64_t v24 = *(void **)(a1 + 72);
        if (*((void *)&v50 + 1) >= (unint64_t)v50)
        {
          if (v52)
          {
            v45[0] = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v49, *((unint64_t *)&v50 + 1), v45, 1uLL);
            uint64_t v25 = v49;
            --*((void *)&v50 + 1);
          }
          else
          {
            uint64_t v25 = v49;
            if ((void)v50) {
              v49[(void)v50 - 1] = 0;
            }
          }
        }
        else
        {
          uint64_t v25 = v49;
          v49[*((void *)&v50 + 1)] = 0;
        }
        TRegExp::match(v24, v25, 0, (uint64_t)&__p);
        if (__p != v54)
        {
          *(void *)long long v45 = sortMatch;
          std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*,false>((uint64_t)__p, v54, (uint64_t (**)(long long *, long long *))v45, 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v54 - (unsigned char *)__p) >> 3)), 1, v26);
          *(void *)long long v45 = v47;
          long long v46 = xmmword_1B25607E0;
          char v48 = 1;
          unint64_t v27 = *(char **)(*(void *)(OutEdge + 24) + 24);
          if (v27)
          {
            if (*v27)
            {
              uint64_t Segment = TSegmenter::getSegment(v11, v27);
              if (*(_DWORD *)(Segment + 24) != 5) {
                TBuffer<wchar_t>::assign((uint64_t)v45, *(int **)Segment);
              }
            }
            else
            {
              TBuffer<wchar_t>::assign((uint64_t)v45, a5);
            }
          }
          unint64_t v41 = v11;
          unint64_t v29 = __p;
          if (v54 == __p) {
            goto LABEL_67;
          }
          unint64_t v30 = 0;
          char v42 = *(TVertex **)(OutEdge + 24);
          while (1)
          {
            char v31 = *(uint64_t **)(*(void *)(a1 + 40) + 8 * v29[3 * v30 + 2]);
            if (*((void *)&v57 + 1) >= (unint64_t)v57)
            {
              if (v59)
              {
                v60[0] = 0;
                TBuffer<wchar_t>::insert((uint64_t)v56, *((unint64_t *)&v57 + 1), v60, 1uLL);
                uint64_t v32 = *(int **)v56;
                --*((void *)&v57 + 1);
              }
              else
              {
                uint64_t v32 = *(int **)v56;
                if ((void)v57) {
                  *(_DWORD *)(*(void *)v56 + 4 * v57 - 4) = 0;
                }
              }
            }
            else
            {
              uint64_t v32 = *(int **)v56;
              *(_DWORD *)(*(void *)v56 + 4 * *((void *)&v57 + 1)) = 0;
            }
            if (*((void *)&v46 + 1) >= (unint64_t)v46)
            {
              if (v48)
              {
                v60[0] = 0;
                TBuffer<wchar_t>::insert((uint64_t)v45, *((unint64_t *)&v46 + 1), v60, 1uLL);
                uint64_t v33 = *(int **)v45;
                --*((void *)&v46 + 1);
              }
              else
              {
                uint64_t v33 = *(int **)v45;
                if ((void)v46) {
                  *(_DWORD *)(*(void *)v45 + 4 * v46 - 4) = 0;
                }
              }
            }
            else
            {
              uint64_t v33 = *(int **)v45;
              *(_DWORD *)(*(void *)v45 + 4 * *((void *)&v46 + 1)) = 0;
            }
            char v35 = (const __int32 **)TGroup::munge(v31, OutEdge, v32, v33, a9);
            if (v35) {
              break;
            }
            if (v34)
            {
              uint64_t v36 = TVertex::getOutEdge((uint64_t)this);
              if (v36)
              {
                unint64_t v37 = 0;
LABEL_48:
                if (*(_DWORD *)(v36 + 48) != 5) {
                  ++v37;
                }
                while (1)
                {
                  uint64_t v36 = *(void *)(v36 + 8);
                  if (!v36) {
                    break;
                  }
                  if (!*(unsigned char *)(v36 + 32)) {
                    goto LABEL_48;
                  }
                }
                if (v37 >= 2)
                {
                  uint64_t v38 = TVertex::getInEdge((uint64_t)v42);
                  if (v38)
                  {
                    unint64_t v39 = 0;
LABEL_56:
                    if (*(_DWORD *)(v38 + 48) != 5) {
                      ++v39;
                    }
                    while (1)
                    {
                      uint64_t v38 = *(void *)v38;
                      if (!v38) {
                        break;
                      }
                      if (!*(unsigned char *)(v38 + 32)) {
                        goto LABEL_56;
                      }
                    }
                    if (v39 >= 2)
                    {
                      TGraph::deleteEdge((uint64_t)a3, OutEdge);
LABEL_67:
                      if (v48 && *(unsigned char **)v45 != v47 && *(void *)v45) {
                        MEMORY[0x1B3EA8630]();
                      }
                      unint64_t v11 = v41;
                      goto LABEL_15;
                    }
                  }
                }
              }
            }
            ++v30;
            unint64_t v29 = __p;
            if (v30 >= 0xAAAAAAAAAAAAAAABLL * (((char *)v54 - (unsigned char *)__p) >> 3)) {
              goto LABEL_67;
            }
          }
          if (v34) {
            TGraph::deleteEdge((uint64_t)a3, OutEdge);
          }
          addSequence(v35, this, v42, a3, *(TLexicon **)(a1 + 64), 0, 0, 0);
          goto LABEL_67;
        }
      }
    }
LABEL_15:
    while (1)
    {
      uint64_t OutEdge = *(void *)(OutEdge + 8);
      if (!OutEdge) {
        break;
      }
      if (!*(unsigned char *)(OutEdge + 32)) {
        goto LABEL_7;
      }
    }
  }
  if (v52)
  {
    if (v49 != (unsigned int *)v51 && v49 != 0) {
      MEMORY[0x1B3EA8630]();
    }
  }
  if (__p)
  {
    uint64_t v54 = (__n128 *)__p;
    operator delete(__p);
  }
  if (v59 && *(unsigned char **)v56 != v58)
  {
    if (*(void *)v56) {
      MEMORY[0x1B3EA8630]();
    }
  }
}

void sub_1B22F99FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (LOBYTE(STACK[0x460]) && a18 != a11 && a18) {
    MEMORY[0x1B3EA8630]();
  }
  if (LOBYTE(STACK[0x880]))
  {
    unint64_t v21 = STACK[0x468];
    if (STACK[0x468] != v18)
    {
      if (v21) {
        MEMORY[0x1B3EA8630](v21, 0x1000C8052888210);
      }
    }
  }
  int v22 = (void *)STACK[0x888];
  if (STACK[0x888])
  {
    STACK[0x890] = (unint64_t)v22;
    operator delete(v22);
  }
  if (LOBYTE(STACK[0xCB8]))
  {
    unint64_t v23 = STACK[0x8A0];
    if (STACK[0x8A0] != v19)
    {
      if (v23) {
        MEMORY[0x1B3EA8630](v23, 0x1000C8052888210);
      }
    }
  }
  _Unwind_Resume(a1);
}

BOOL sortMatch(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 16) < *(void *)(a2 + 16);
}

void TMungeMapManager::munge(uint64_t a1, TGraph *a2, int *a3, int *a4, TSegmenter *a5, unint64_t a6, std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *a7)
{
  if (*a3) {
    uint64_t v7 = a3;
  }
  else {
    uint64_t v7 = (int *)&unk_1B25AAEC0;
  }
  if (*a4) {
    uint64_t v8 = a4;
  }
  else {
    uint64_t v8 = (int *)&unk_1B25AAEC0;
  }
  uint64_t v9 = *((void *)a2 + 11) - *((void *)a2 + 10);
  if (v9)
  {
    uint64_t v15 = 0;
    unint64_t v16 = (uint64_t)(*((void *)a2 + 14) - *((void *)a2 + 13)) >> 3;
    unint64_t v17 = v9 >> 3;
    if (v17 <= 1) {
      uint64_t v18 = 1;
    }
    else {
      uint64_t v18 = v17;
    }
    do
    {
      uint64_t v19 = *(TVertex **)(*((void *)a2 + 10) + 8 * v15);
      if (!*((unsigned char *)v19 + 32)) {
        TMungeMapManager::mungeWithGroups(a1, v19, a2, v7, v8, a5, a6, v16, a7);
      }
      ++v15;
    }
    while (v18 != v15);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*,false>(uint64_t a1, __n128 *a2, uint64_t (**a3)(long long *, long long *), uint64_t a4, char a5, __n128 a6)
{
uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  if (result != a2)
  {
    uint64_t v17 = v3;
    uint64_t v18 = v4;
    uint64_t v6 = result;
    uint64_t v7 = result + 24;
    if (result + 24 != a2)
    {
      uint64_t v9 = 0;
      uint64_t v10 = result;
      do
      {
        uint64_t v11 = v10;
        uint64_t v10 = v7;
        uint64_t result = (*a3)(v7, v11);
        if (result)
        {
          long long v15 = *(_OWORD *)v10;
          uint64_t v16 = *(void *)(v10 + 16);
          uint64_t v12 = v9;
          while (1)
          {
            uint64_t v13 = v6 + v12;
            *(_OWORD *)(v13 + ++*(_DWORD *)(result + 24) = *(_OWORD *)(v6 + v12);
            *(void *)(v13 + 4std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = *(void *)(v6 + v12 + 16);
            if (!v12) {
              break;
            }
            v12 -= 24;
            uint64_t result = (*a3)((uint64_t)&v15, v12 + v6);
            if ((result & 1) == 0)
            {
              uint64_t v14 = v6 + v12 + 24;
              goto LABEL_10;
            }
          }
          uint64_t v14 = v6;
LABEL_10:
          *(_OWORD *)uint64_t v14 = v15;
          *(void *)(v14 + 16) = v16;
        }
        uint64_t v7 = v10 + 24;
        v9 += 24;
      }
      while (v10 + 24 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  if (result != a2)
  {
    uint64_t v14 = v3;
    uint64_t v15 = v4;
    uint64_t v6 = result;
    uint64_t v7 = result + 24;
    if (result + 24 != a2)
    {
      uint64_t v9 = result - 24;
      do
      {
        uint64_t v10 = v6;
        uint64_t v6 = v7;
        uint64_t result = (*a3)(v7, v10);
        if (result)
        {
          long long v12 = *(_OWORD *)v6;
          uint64_t v13 = *(void *)(v6 + 16);
          uint64_t v11 = v9;
          do
          {
            *(_OWORD *)(v11 + 48) = *(_OWORD *)(v11 + 24);
            *(void *)(v11 + 64) = *(void *)(v11 + 40);
            uint64_t result = (*a3)((uint64_t)&v12, v11);
            v11 -= 24;
          }
          while ((result & 1) != 0);
          *(_OWORD *)(v11 + 48) = v12;
          *(void *)(v11 + 64) = v13;
        }
        uint64_t v7 = v6 + 24;
        v9 += 24;
      }
      while (v6 + 24 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>(long long *a1, long long *a2, long long *a3, uint64_t (**a4)(long long *, long long *))
{
  char v8 = (*a4)(a2, a1);
  uint64_t result = (*a4)(a3, a2);
  if ((v8 & 1) == 0)
  {
    if (!result) {
      return result;
    }
    uint64_t v13 = *((void *)a2 + 2);
    long long v14 = *a2;
    uint64_t v15 = *((void *)a3 + 2);
    *a2 = *a3;
    *((void *)a2 + 2) = v15;
    *a3 = v14;
    *((void *)a3 + 2) = v13;
    if (!(*a4)(a2, a1)) {
      return 1;
    }
    uint64_t v16 = *((void *)a1 + 2);
    long long v17 = *a1;
    uint64_t v18 = *((void *)a2 + 2);
    *a1 = *a2;
    *((void *)a1 + 2) = v18;
    *a2 = v17;
    *((void *)a2 + 2) = v16;
    return 2;
  }
  if (!result)
  {
    uint64_t v19 = *((void *)a1 + 2);
    long long v20 = *a1;
    uint64_t v21 = *((void *)a2 + 2);
    *a1 = *a2;
    *((void *)a1 + 2) = v21;
    *a2 = v20;
    *((void *)a2 + 2) = v19;
    if (!(*a4)(a3, a2)) {
      return 1;
    }
    uint64_t v22 = *((void *)a2 + 2);
    long long v23 = *a2;
    uint64_t v24 = *((void *)a3 + 2);
    *a2 = *a3;
    *((void *)a2 + 2) = v24;
    *a3 = v23;
    *((void *)a3 + 2) = v22;
    return 2;
  }
  uint64_t v10 = *((void *)a1 + 2);
  long long v11 = *a1;
  uint64_t v12 = *((void *)a3 + 2);
  *a1 = *a3;
  *((void *)a1 + 2) = v12;
  *a3 = v11;
  *((void *)a3 + 2) = v10;
  return 1;
}

long long *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,TRegExpMatch *,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&)>(long long *a1, long long *a2, uint64_t (**a3)(long long *, long long *))
{
  uint64_t v4 = a2;
  long long v16 = *a1;
  uint64_t v17 = *((void *)a1 + 2);
  if ((*a3)(&v16, (long long *)((char *)a2 - 24)))
  {
    uint64_t v6 = a1;
    do
      uint64_t v6 = (long long *)((char *)v6 + 24);
    while (((*a3)(&v16, v6) & 1) == 0);
  }
  else
  {
    uint64_t v7 = (long long *)((char *)a1 + 24);
    do
    {
      uint64_t v6 = v7;
      if (v7 >= v4) {
        break;
      }
      int v8 = (*a3)(&v16, v7);
      uint64_t v7 = (long long *)((char *)v6 + 24);
    }
    while (!v8);
  }
  if (v6 < v4)
  {
    do
      uint64_t v4 = (long long *)((char *)v4 - 24);
    while (((*a3)(&v16, v4) & 1) != 0);
  }
  while (v6 < v4)
  {
    long long v9 = *v6;
    uint64_t v19 = *((void *)v6 + 2);
    long long v18 = v9;
    long long v10 = *v4;
    *((void *)v6 + 2) = *((void *)v4 + 2);
    long long *v6 = v10;
    long long v11 = v18;
    *((void *)v4 + 2) = v19;
    long long *v4 = v11;
    do
      uint64_t v6 = (long long *)((char *)v6 + 24);
    while (!(*a3)(&v16, v6));
    do
      uint64_t v4 = (long long *)((char *)v4 - 24);
    while (((*a3)(&v16, v4) & 1) != 0);
  }
  uint64_t v12 = (long long *)((char *)v6 - 24);
  if ((long long *)((char *)v6 - 24) != a1)
  {
    long long v13 = *v12;
    *((void *)a1 + 2) = *((void *)v6 - 1);
    *a1 = v13;
  }
  long long v14 = v16;
  *((void *)v6 - 1) = v17;
  *uint64_t v12 = v14;
  return v6;
}

uint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,TRegExpMatch *,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&)>(long long *a1, unint64_t a2, uint64_t (**a3)(char *, long long *))
{
  uint64_t v6 = 0;
  long long v17 = *a1;
  uint64_t v18 = *((void *)a1 + 2);
  do
    v6 += 24;
  while (((*a3)((char *)a1 + v6, &v17) & 1) != 0);
  unint64_t v7 = (unint64_t)a1 + v6;
  uint64_t v8 = (uint64_t)a1 + v6 - 24;
  if (v6 == 24)
  {
    do
    {
      if (v7 >= a2) {
        break;
      }
      a2 -= 24;
    }
    while (((*a3)((char *)a2, &v17) & 1) == 0);
  }
  else
  {
    do
      a2 -= 24;
    while (!(*a3)((char *)a2, &v17));
  }
  if (v7 < a2)
  {
    long long v9 = (long long *)((char *)a1 + v6);
    unint64_t v10 = a2;
    do
    {
      long long v19 = *v9;
      long long v11 = v19;
      uint64_t v20 = *((void *)v9 + 2);
      uint64_t v12 = v20;
      uint64_t v13 = *(void *)(v10 + 16);
      long long *v9 = *(_OWORD *)v10;
      *((void *)v9 + 2) = v13;
      *(void *)(v10 + 16) = v12;
      *(_OWORD *)unint64_t v10 = v11;
      do
        long long v9 = (long long *)((char *)v9 + 24);
      while (((*a3)((char *)v9, &v17) & 1) != 0);
      do
        v10 -= 24;
      while (!(*a3)((char *)v10, &v17));
    }
    while ((unint64_t)v9 < v10);
    uint64_t v8 = (uint64_t)v9 - 24;
  }
  if ((long long *)v8 != a1)
  {
    long long v14 = *(_OWORD *)v8;
    *((void *)a1 + 2) = *(void *)(v8 + 16);
    *a1 = v14;
  }
  long long v15 = v17;
  *(void *)(v8 + 16) = v18;
  *(_OWORD *)uint64_t v8 = v15;
  return v8;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(long long *, long long *))
{
  uint64_t v6 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v8 = (long long *)(a2 - 24);
      if ((*a3)((long long *)(a2 - 24), (long long *)a1))
      {
        uint64_t v9 = *(void *)(a1 + 16);
        long long v10 = *(_OWORD *)a1;
        uint64_t v11 = *(void *)(a2 - 8);
        *(_OWORD *)a1 = *v8;
        *(void *)(a1 + 16) = v11;
        *uint64_t v8 = v10;
        *(void *)(a2 - 8) = v9;
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>((long long *)a1, (long long *)(a1 + 24), (long long *)(a2 - 24), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>(a1, a1 + 24, a1 + 48, a2 - 24, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>((__n128 *)a1, a1 + 24, a1 + 48, a1 + 72, a2 - 24, a3);
      return 1;
    default:
      uint64_t v12 = (long long *)(a1 + 48);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>((long long *)a1, (long long *)(a1 + 24), (long long *)(a1 + 48), a3);
      uint64_t v13 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)((long long *)v13, v12))
    {
      long long v19 = *(_OWORD *)v13;
      uint64_t v20 = *(void *)(v13 + 16);
      uint64_t v16 = v14;
      while (1)
      {
        uint64_t v17 = a1 + v16;
        *(_OWORD *)(v17 + 72) = *(_OWORD *)(a1 + v16 + 48);
        *(void *)(v17 + 88) = *(void *)(a1 + v16 + 64);
        if (v16 == -48) {
          break;
        }
        v16 -= 24;
        if (((*a3)(&v19, (long long *)(v17 + 24)) & 1) == 0)
        {
          uint64_t v18 = a1 + v16 + 72;
          goto LABEL_12;
        }
      }
      uint64_t v18 = a1;
LABEL_12:
      *(_OWORD *)uint64_t v18 = v19;
      *(void *)(v18 + 16) = v20;
      if (++v15 == 8) {
        return v13 + 24 == a2;
      }
    }
    uint64_t v12 = (long long *)v13;
    v14 += 24;
    v13 += 24;
    if (v13 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(long long *, long long *))
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>((long long *)a1, (long long *)a2, (long long *)a3, a5);
  if ((*a5)((long long *)a4, (long long *)a3))
  {
    uint64_t v11 = *(void *)(a3 + 16);
    long long v12 = *(_OWORD *)a3;
    uint64_t v13 = *(void *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(void *)(a3 + 16) = v13;
    *(_OWORD *)a4 = v12;
    *(void *)(a4 + 16) = v11;
    if ((*a5)((long long *)a3, (long long *)a2))
    {
      uint64_t v14 = *(void *)(a2 + 16);
      long long v15 = *(_OWORD *)a2;
      uint64_t v16 = *(void *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(void *)(a2 + 16) = v16;
      *(_OWORD *)a3 = v15;
      *(void *)(a3 + 16) = v14;
      if ((*a5)((long long *)a2, (long long *)a1))
      {
        uint64_t v17 = *(void *)(a1 + 16);
        __n128 result = *(__n128 *)a1;
        uint64_t v18 = *(void *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = v18;
        *(__n128 *)a2 = result;
        *(void *)(a2 + 16) = v17;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (**a6)(long long *, long long *))
{
  __n128 v12 = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>((uint64_t)a1, a2, a3, a4, a6);
  if (((unsigned int (*)(uint64_t, uint64_t, __n128))*a6)(a5, a4, v12))
  {
    uint64_t v14 = *(void *)(a4 + 16);
    long long v15 = *(_OWORD *)a4;
    uint64_t v16 = *(void *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(void *)(a4 + 16) = v16;
    *(_OWORD *)a5 = v15;
    *(void *)(a5 + 16) = v14;
    if ((*a6)((long long *)a4, (long long *)a3))
    {
      uint64_t v17 = *(void *)(a3 + 16);
      long long v18 = *(_OWORD *)a3;
      uint64_t v19 = *(void *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(void *)(a3 + 16) = v19;
      *(_OWORD *)a4 = v18;
      *(void *)(a4 + 16) = v17;
      if ((*a6)((long long *)a3, (long long *)a2))
      {
        uint64_t v20 = *(void *)(a2 + 16);
        __n128 v21 = *(__n128 *)a2;
        uint64_t v22 = *(void *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(void *)(a2 + 16) = v22;
        *(__n128 *)a3 = v21;
        *(void *)(a3 + 16) = v20;
        if ((*a6)((long long *)a2, (long long *)a1))
        {
          unint64_t v23 = a1[1].n128_u64[0];
          __n128 result = *a1;
          unint64_t v24 = *(void *)(a2 + 16);
          *a1 = *(__n128 *)a2;
          a1[1].n128_u64[0] = v24;
          *(__n128 *)a2 = result;
          *(void *)(a2 + 16) = v23;
        }
      }
    }
  }
  return result;
}

__n128 *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*,TRegExpMatch*>(__n128 *a1, __n128 *a2, __n128 *a3, unsigned int (**a4)(uint64_t, __int8 *), __n128 a5)
{
  if (a1 != a2)
  {
    unint64_t v7 = a2;
    uint64_t v9 = (char *)a2 - (char *)a1;
    uint64_t v10 = ((char *)a2 - (char *)a1) / 24;
    if ((char *)a2 - (char *)a1 >= 25)
    {
      unint64_t v11 = (unint64_t)(v10 - 2) >> 1;
      unint64_t v12 = v11 + 1;
      uint64_t v13 = (__n128 *)((char *)a1 + 24 * v11);
      do
      {
        a5 = std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>((uint64_t)a1, a4, v10, v13);
        uint64_t v13 = (__n128 *)((char *)v13 - 24);
        --v12;
      }
      while (v12);
    }
    uint64_t v14 = v7;
    if (v7 != a3)
    {
      long long v15 = v7;
      do
      {
        if (((unsigned int (*)(__n128 *, __n128 *, __n128))*a4)(v15, a1, a5))
        {
          unint64_t v16 = v15[1].n128_u64[0];
          __n128 v17 = *v15;
          unint64_t v18 = a1[1].n128_u64[0];
          *long long v15 = *a1;
          v15[1].n128_u64[0] = v18;
          *a1 = v17;
          a1[1].n128_u64[0] = v16;
          a5 = std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>((uint64_t)a1, a4, v10, a1);
        }
        long long v15 = (__n128 *)((char *)v15 + 24);
      }
      while (v15 != a3);
      uint64_t v14 = a3;
    }
    if (v9 < 25)
    {
      return v14;
    }
    else
    {
      long long v29 = v14;
      int64_t v19 = v9 / 0x18uLL;
      do
      {
        long long v30 = v7;
        uint64_t v20 = 0;
        __n128 v31 = *a1;
        unint64_t v32 = a1[1].n128_u64[0];
        uint64_t v21 = (uint64_t)a1;
        do
        {
          uint64_t v22 = v21 + 24 * v20 + 24;
          uint64_t v23 = (2 * v20) | 1;
          uint64_t v24 = 2 * v20 + 2;
          if (v24 < v19 && (*a4)(v21 + 24 * v20 + 24, (__int8 *)(v21 + 24 * v20 + 48)))
          {
            v22 += 24;
            uint64_t v23 = v24;
          }
          long long v25 = *(_OWORD *)v22;
          *(void *)(v21 + 16) = *(void *)(v22 + 16);
          *(_OWORD *)uint64_t v21 = v25;
          uint64_t v21 = v22;
          uint64_t v20 = v23;
        }
        while (v23 <= (uint64_t)((unint64_t)(v19 - 2) >> 1));
        unint64_t v7 = (__n128 *)((char *)v30 - 24);
        if ((__int8 *)v22 == &v30[-2].n128_i8[8])
        {
          *(void *)(v22 + 16) = v32;
          *(__n128 *)uint64_t v22 = v31;
        }
        else
        {
          __n128 v26 = *v7;
          *(void *)(v22 + 16) = v30[-1].n128_u64[1];
          *(__n128 *)uint64_t v22 = v26;
          *unint64_t v7 = v31;
          v30[-1].n128_u64[1] = v32;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>((uint64_t)a1, v22 + 24, (uint64_t (**)(long long *, long long *))a4, 0xAAAAAAAAAAAAAAABLL * ((v22 + 24 - (uint64_t)a1) >> 3));
        }
      }
      while (v19-- > 2);
      return v29;
    }
  }
  return a3;
}

__n128 std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>(uint64_t a1, unsigned int (**a2)(uint64_t, __int8 *), uint64_t a3, __n128 *a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v22 = v4;
    uint64_t v23 = v5;
    unint64_t v7 = a4;
    uint64_t v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - a1) >> 3)))
    {
      uint64_t v12 = (0x5555555555555556 * (((uint64_t)a4 - a1) >> 3)) | 1;
      uint64_t v13 = (__n128 *)(a1 + 24 * v12);
      uint64_t v14 = 0x5555555555555556 * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v14 < a3 && (*a2)(a1 + 24 * v12, &v13[1].n128_i8[8]))
      {
        uint64_t v13 = (__n128 *)((char *)v13 + 24);
        uint64_t v12 = v14;
      }
      if ((((uint64_t (*)(__n128 *, __n128 *))*a2)(v13, v7) & 1) == 0)
      {
        __n128 v20 = *v7;
        unint64_t v21 = v7[1].n128_u64[0];
        do
        {
          unint64_t v16 = v13;
          __n128 v17 = *v13;
          v7[1].n128_u64[0] = v13[1].n128_u64[0];
          *unint64_t v7 = v17;
          if (v9 < v12) {
            break;
          }
          uint64_t v18 = (2 * v12) | 1;
          uint64_t v13 = (__n128 *)(a1 + 24 * v18);
          uint64_t v19 = 2 * v12 + 2;
          if (v19 < a3)
          {
            if ((*a2)(a1 + 24 * v18, &v13[1].n128_i8[8]))
            {
              uint64_t v13 = (__n128 *)((char *)v13 + 24);
              uint64_t v18 = v19;
            }
          }
          unint64_t v7 = v16;
          uint64_t v12 = v18;
        }
        while (!(*a2)((uint64_t)v13, (__int8 *)&v20));
        __n128 result = v20;
        v16[1].n128_u64[0] = v21;
        *unint64_t v16 = result;
      }
    }
  }
  return result;
}

double std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(long long *, long long *), uint64_t a4)
{
  unint64_t v6 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v17 = v4;
    uint64_t v18 = v5;
    unint64_t v9 = v6 >> 1;
    uint64_t v10 = (long long *)(a1 + 24 * (v6 >> 1));
    unint64_t v11 = (long long *)(a2 - 24);
    if ((*a3)(v10, (long long *)(a2 - 24)))
    {
      long long v15 = *v11;
      uint64_t v16 = *((void *)v11 + 2);
      do
      {
        uint64_t v13 = v10;
        long long v14 = *v10;
        *((void *)v11 + 2) = *((void *)v10 + 2);
        *unint64_t v11 = v14;
        if (!v9) {
          break;
        }
        unint64_t v9 = (v9 - 1) >> 1;
        uint64_t v10 = (long long *)(a1 + 24 * v9);
        unint64_t v11 = v13;
      }
      while (((*a3)(v10, &v15) & 1) != 0);
      double result = *(double *)&v15;
      *uint64_t v13 = v15;
      *((void *)v13 + 2) = v16;
    }
  }
  return result;
}

void kaldi::quasar::EspressoV2TensorData::~EspressoV2TensorData(kaldi::quasar::EspressoV2TensorData *this)
{
  *(void *)this = &unk_1F0A50F18;
  if (*((void *)this + 4) && e5rt_tensor_desc_dtype_release()
    || *((void *)this + 5) && e5rt_tensor_desc_release()
    || *((void *)this + 6) && e5rt_buffer_object_release())
  {
    last_error_message = (const char *)e5rt_get_last_error_message();
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Espresso V2 failure: ", 21);
    size_t v4 = strlen(last_error_message);
    uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)last_error_message, v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"\n", 1);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v6);
  }
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
  kaldi::quasar::ComputeEngineBufferItf::~ComputeEngineBufferItf((void **)this);
}

{
  uint64_t vars8;

  kaldi::quasar::EspressoV2TensorData::~EspressoV2TensorData(this);
  JUMPOUT(0x1B3EA8670);
}

uint64_t kaldi::quasar::EspressoV2NetworkConfig::EspressoV2NetworkConfig(uint64_t a1, long long *a2)
{
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = 0;
  *(_WORD *)(a1 + 32) = 0;
  *(void *)a1 = &unk_1F0A51258;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 40), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    *(void *)(a1 + 56) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 4std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = v3;
  }
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 8std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 88) = a1 + 96;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 12std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = 0;
  *(void *)(a1 + 128) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 136), "CPU");
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 16std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = 0u;
  return a1;
}

void sub_1B22FB118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  kaldi::quasar::ComputeEngineConfigItf::~ComputeEngineConfigItf(v10);
  _Unwind_Resume(a1);
}

void kaldi::quasar::EspressoV2NetworkConfig::Read(uint64_t a1, uint64_t *a2, char a3, uint64_t a4)
{
  memset(&__str, 0, sizeof(__str));
  v51[0] = 0;
  v51[1] = 0;
  uint64_t v52 = 0;
  memset(&v50, 0, sizeof(v50));
  size_t v4 = a2 + 4;
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 2) == 0)
  {
    uint64_t v8 = (std::string *)(a1 + 136);
    char v44 = (uint64_t **)(a1 + 88);
    uint64_t v45 = a1 + 112;
    while (1)
    {
      uint64_t v47 = 0;
      size_t v48 = 0;
      uint64_t v49 = 0;
      kaldi::ReadToken(a2, a3, (uint64_t)&v47);
      int v9 = *(char *)(a4 + 23);
      uint64_t v10 = *(void *)(a4 + 8);
      if (v9 >= 0) {
        uint64_t v10 = *(unsigned __int8 *)(a4 + 23);
      }
      if (!v10 || (v49 >= 0 ? (size_t v11 = HIBYTE(v49)) : (size_t v11 = v48), v11 != v10))
      {
LABEL_21:
        if ((v49 & 0x8000000000000000) == 0)
        {
          int v16 = 0;
          int v17 = 0;
          int v18 = 0;
          uint64_t v19 = &v47;
          switch(HIBYTE(v49))
          {
            case 0xA:
              goto LABEL_26;
            case 0xE:
              goto LABEL_34;
            case 0x11:
              goto LABEL_42;
            case 0x12:
              goto LABEL_53;
            default:
              goto LABEL_77;
          }
        }
        goto LABEL_24;
      }
      uint64_t v12 = v9 >= 0 ? (unsigned __int8 *)a4 : *(unsigned __int8 **)a4;
      if (v49 < 0) {
        break;
      }
      if (!HIBYTE(v49)) {
        goto LABEL_70;
      }
      uint64_t v13 = &v47;
      uint64_t v14 = HIBYTE(v49);
      do
      {
        if (*(unsigned __int8 *)v13 != *v12) {
          goto LABEL_21;
        }
        uint64_t v13 = (void **)((char *)v13 + 1);
        ++v12;
        --v14;
      }
      while (v14);
      int v15 = 0;
      if ((v49 & 0x8000000000000000) == 0)
      {
LABEL_63:
        if (!v15) {
          goto LABEL_70;
        }
        goto LABEL_64;
      }
LABEL_19:
      operator delete(v47);
      if ((v15 & 1) == 0) {
        goto LABEL_70;
      }
LABEL_64:
      if ((*((unsigned char *)v4 + *(void *)(*a2 - 24)) & 2) != 0) {
        goto LABEL_70;
      }
    }
    __n128 v20 = v47;
    if (!memcmp(v47, v12, v48))
    {
      operator delete(v20);
      goto LABEL_70;
    }
LABEL_24:
    size_t v21 = v48;
    if (v48 == 10)
    {
      int v16 = 1;
      uint64_t v19 = (void **)v47;
LABEL_26:
      uint64_t v22 = *v19;
      int v23 = *((unsigned __int16 *)v19 + 4);
      if (v22 == (void *)0x6F6974636E75463CLL && v23 == 15982)
      {
        p_str = &__str;
LABEL_61:
        kaldi::ReadToken(a2, a3, (uint64_t)p_str);
        goto LABEL_62;
      }
      if (!v16) {
        goto LABEL_77;
      }
      size_t v21 = v48;
    }
    if (v21 == 14)
    {
      int v17 = 1;
      uint64_t v19 = (void **)v47;
LABEL_34:
      long long v25 = *v19;
      uint64_t v26 = *(uint64_t *)((char *)v19 + 6);
      if (v25 == (void *)0x5474757074754F3CLL && v26 == 0x3E726F736E655474)
      {
        kaldi::ReadToken(a2, a3, (uint64_t)v51);
        v46[0] = (long long *)v51;
        unint64_t v39 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v44, v51, (uint64_t)&std::piecewise_construct, v46);
        std::string::operator=((std::string *)(v39 + 7), &__str);
        goto LABEL_62;
      }
      if (!v17) {
        goto LABEL_77;
      }
      size_t v21 = v48;
    }
    if (v21 != 17)
    {
LABEL_51:
      if (v21 != 18) {
        goto LABEL_77;
      }
      uint64_t v19 = (void **)v47;
LABEL_53:
      uint64_t v33 = *v19;
      char v34 = v19[1];
      int v35 = *((unsigned __int16 *)v19 + 8);
      BOOL v36 = v33 == (void *)0x6361626C6C61463CLL && v34 == (void *)0x726F6674616C506BLL;
      BOOL v37 = v36 && v35 == 15981;
      p_str = v8;
      if (!v37)
      {
LABEL_77:
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v46);
        long long v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"Unknown token ", 14);
        if (v49 >= 0) {
          unint64_t v41 = &v47;
        }
        else {
          unint64_t v41 = (void **)v47;
        }
        if (v49 >= 0) {
          uint64_t v42 = HIBYTE(v49);
        }
        else {
          uint64_t v42 = v48;
        }
        long long v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)v41, v42);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)", a typo in config file?", 24);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v46);
      }
      goto LABEL_61;
    }
    int v18 = 1;
    uint64_t v19 = (void **)v47;
LABEL_42:
    long long v28 = *v19;
    long long v29 = v19[1];
    int v30 = *((unsigned __int8 *)v19 + 16);
    if (v28 != (void *)0x657475706D6F433CLL || v29 != (void *)0x6D726F6674616C50 || v30 != 62)
    {
      if (!v18) {
        goto LABEL_77;
      }
      size_t v21 = v48;
      goto LABEL_51;
    }
    kaldi::ReadToken(a2, a3, (uint64_t)&v50);
    kaldi::SplitStringToVector(&v50, "|", 1, v45);
LABEL_62:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
    int v15 = 1;
    if ((v49 & 0x8000000000000000) == 0) {
      goto LABEL_63;
    }
    goto LABEL_19;
  }
LABEL_70:
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v52) < 0) {
    operator delete((void *)v51[0]);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_1B22FB584(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 169) < 0) {
    operator delete(*(void **)(v1 - 192));
  }
  if (*(char *)(v1 - 145) < 0) {
    operator delete(*(void **)(v1 - 168));
  }
  if (*(char *)(v1 - 121) < 0) {
    operator delete(*(void **)(v1 - 144));
  }
  if (*(char *)(v1 - 97) < 0) {
    operator delete(*(void **)(v1 - 120));
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::EspressoV2NetworkConfig::CreateBNNSFallbackEngine(kaldi::quasar::EspressoV2NetworkConfig *this)
{
  uint64_t v1 = (uint64_t *)((char *)this + 40);
  std::string::basic_string[abi:ne180100]<0>(__p, "bnnsir");
  kaldi::quasar::MakeComputeEngineCachePath(v1, (uint64_t *)__p, v4);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  kaldi::quasar::BNNSGraphNetworkConfig::BNNSGraphNetworkConfig(__p, v1, v4);
  kaldi::quasar::BNNSGraphNetworkConfig::CreateComputeEngine((kaldi::quasar::BNNSGraphNetworkConfig *)__p);
}

void sub_1B22FB688(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::quasar::BNNSGraphNetworkConfig::~BNNSGraphNetworkConfig((void **)va);
  if (*(char *)(v2 - 17) < 0) {
    operator delete(*(void **)(v2 - 40));
  }
  _Unwind_Resume(a1);
}

void kaldi::quasar::EspressoV2NetworkConfig::CreateComputeEngine(kaldi::quasar::EspressoV2NetworkConfig *this)
{
  if (kaldi::quasar::EspressoV2NetworkConfig::MilShouldUseBnnsFallback((unsigned __int8 **)this))
  {
    kaldi::quasar::EspressoV2NetworkConfig::CreateBNNSFallbackEngine(this);
  }
  operator new();
}

void sub_1B22FB750(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40EFF83A3CLL);
  _Unwind_Resume(a1);
}

BOOL kaldi::quasar::EspressoV2NetworkConfig::MilShouldUseBnnsFallback(unsigned __int8 **this)
{
  BOOL IsUniversalIntelChip = kaldi::quasar::IsUniversalIntelChip((kaldi::quasar *)this);
  if (IsUniversalIntelChip || (kaldi::quasar::IsVirtualMachine((kaldi::quasar *)IsUniversalIntelChip) & 1) != 0) {
    return 1;
  }
  uint64_t v4 = (uint64_t)std::__find_impl[abi:ne180100]<std::string const*,std::string const*,char [4],std::__identity>(this[14], this[15], "ANE");
  uint64_t v5 = v4;
  unint64_t v6 = this[15];
  unint64_t v7 = (unsigned __int16 *)(this + 17);
  int v8 = *((char *)this + 159);
  if (v8 < 0)
  {
    if (this[18] != (unsigned __int8 *)3)
    {
LABEL_14:
      LOBYTE(v12) = 1;
      goto LABEL_15;
    }
    unint64_t v7 = *(unsigned __int16 **)v7;
  }
  else if (v8 != 3)
  {
    goto LABEL_14;
  }
  int v9 = *v7;
  int v10 = *((unsigned __int8 *)v7 + 2);
  if (v9 != 20547 || v10 != 85) {
    goto LABEL_14;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "QuasarForceBnnsFallback");
  uint64_t v4 = kaldi::quasar::UserDefaultsBoolCached((uint64_t *)__p);
  int v12 = v4;
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  if (v12)
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Forced to use BNNS fallback by user default", 43);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
    }
    return 1;
  }
LABEL_15:
  {
    if (v4)
    {
      kaldi::quasar::EspressoV2NetworkConfig::MilShouldUseBnnsFallback(void)const::isLowEnd = kaldi::quasar::isLowEndDevice((kaldi::quasar *)v4);
    }
  }
  if (!kaldi::quasar::EspressoV2NetworkConfig::MilShouldUseBnnsFallback(void)const::isLowEnd) {
    return 0;
  }
  uint64_t v13 = (void *)kaldi::quasar::ProcessName((kaldi::quasar *)v4);
  int v14 = *((char *)v13 + 23);
  if (v14 < 0)
  {
    if (v13[1] != 50)
    {
LABEL_25:
      BOOL v16 = 0;
      goto LABEL_26;
    }
    uint64_t v13 = (void *)*v13;
  }
  else if (v14 != 50)
  {
    goto LABEL_25;
  }
  int v15 = memcmp(v13, "com.apple.SpeechRecognitionCore.speechrecognitiond", 0x32uLL);
  BOOL v16 = v15 == 0;
  if (!v15 && (kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Disabling milIsANEReadyOnLowEnd for speechrecognitiond", 54);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
    BOOL v16 = 1;
  }
LABEL_26:
  if ((unsigned __int8 *)v5 == v6) {
    char v17 = 1;
  }
  else {
    char v17 = v12;
  }
  if (v17) {
    return 0;
  }
  return !*((unsigned char *)this + 33) || v16;
}

void sub_1B22FB978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

void kaldi::quasar::EspressoV2NetworkConfig::CreateComputeEngineAllowingFallback(kaldi::quasar::EspressoV2NetworkConfig *this)
{
  if (kaldi::quasar::EspressoV2NetworkConfig::MilShouldUseBnnsFallback((unsigned __int8 **)this)) {
    kaldi::quasar::EspressoV2NetworkConfig::CreateBNNSFallbackEngine(this);
  }
  operator new();
}

void sub_1B22FBAE4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::EspressoV2NetworkConfig::ComputeEngineUpgradeLikelyExists(kaldi::quasar::EspressoV2NetworkConfig *this)
{
  if (!kaldi::quasar::EspressoV2NetworkConfig::MilShouldUseBnnsFallback((unsigned __int8 **)this))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, ".mil");
    unint64_t v3 = *((unsigned __int8 *)this + 63);
    unint64_t v4 = *((void *)this + 6);
    if ((v3 & 0x80u) == 0) {
      unint64_t v5 = *((unsigned __int8 *)this + 63);
    }
    else {
      unint64_t v5 = *((void *)this + 6);
    }
    unsigned __int8 v6 = v20;
    if ((v20 & 0x80u) == 0) {
      size_t v7 = v20;
    }
    else {
      size_t v7 = (size_t)__p[1];
    }
    BOOL v9 = v5 >= v7;
    unint64_t v8 = v5 - v7;
    if (!v9) {
      goto LABEL_37;
    }
    if ((v3 & 0x80) != 0)
    {
      if (v7 == -1 || v4 < v8) {
LABEL_42:
      }
        std::string::__throw_out_of_range[abi:ne180100]();
      if (v4 - v8 >= v7) {
        size_t v11 = v7;
      }
      else {
        size_t v11 = v4 - v8;
      }
      int v12 = (char *)*((void *)this + 5);
    }
    else
    {
      BOOL v9 = v7 != -1 && v3 >= v8;
      if (!v9) {
        goto LABEL_42;
      }
      size_t v10 = v3 - v8;
      if (v10 >= v7) {
        size_t v11 = v7;
      }
      else {
        size_t v11 = v10;
      }
      int v12 = (char *)this + 40;
    }
    if ((v20 & 0x80u) == 0) {
      int v14 = __p;
    }
    else {
      int v14 = (void **)__p[0];
    }
    int v15 = memcmp(&v12[v8], v14, v11);
    if (v11 == v7 && v15 == 0)
    {
      memset(v18, 0, sizeof(v18));
      uint64_t v2 = kaldi::quasar::checkCompiledCacheWithProgramLibrary((uint64_t)this + 40, (unsigned __int16 **)this + 14, v18);
      size_t v21 = (void **)v18;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v21);
      if ((v20 & 0x80) == 0) {
        return v2;
      }
      goto LABEL_38;
    }
LABEL_37:
    uint64_t v2 = 0;
    if ((v6 & 0x80) == 0) {
      return v2;
    }
LABEL_38:
    operator delete(__p[0]);
    return v2;
  }
  return 0;
}

void sub_1B22FBC80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

kaldi::quasar::EspressoV2Plan *kaldi::quasar::EspressoV2Plan::EspressoV2Plan(kaldi::quasar::EspressoV2Plan *this, const kaldi::quasar::EspressoV2NetworkConfig *a2, int a3)
{
  *(void *)this = &unk_1F0A504F0;
  kaldi::quasar::EspressoV2NetworkConfig::EspressoV2NetworkConfig((kaldi::quasar::EspressoV2Plan *)((char *)this + 8), a2);
  *((void *)this + 27) = 0;
  *((void *)this + 29) = 0;
  *((void *)this + 28) = (char *)this + 232;
  *((void *)this + 31) = 0;
  *((void *)this + 32) = 0;
  *((void *)this + 3std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = 0;
  *((unsigned char *)this + 264) = 0;
  kaldi::quasar::EspressoV2Plan::LoadNetwork((uint64_t)this, (uint64_t)this + 48, a3, (uint64_t *)this + 21, (uint64_t *)a2 + 23);
  return this;
}

void sub_1B22FBD48(_Unwind_Exception *a1)
{
  std::__tree<std::string>::destroy(v3, *v4);
  kaldi::quasar::EspressoV2NetworkConfig::~EspressoV2NetworkConfig(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::EspressoV2Plan::LoadNetwork(uint64_t a1, uint64_t a2, int a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v10 = *(void *)(a1 + 24);
  if (v10) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, a2);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, ".mil");
  unint64_t v11 = *(unsigned __int8 *)(a2 + 23);
  unint64_t v12 = *(void *)(a2 + 8);
  if ((v11 & 0x80u) == 0) {
    unint64_t v13 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    unint64_t v13 = *(void *)(a2 + 8);
  }
  int v14 = (char)v28;
  if ((v28 & 0x80u) == 0) {
    size_t v15 = v28;
  }
  else {
    size_t v15 = (size_t)__p[1];
  }
  BOOL v18 = v13 >= v15;
  unint64_t v16 = v13 - v15;
  if (!v18)
  {
    BOOL v17 = 0;
    if (((char)v28 & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if ((v11 & 0x80) != 0)
  {
    if (v15 == -1 || v12 < v16) {
LABEL_48:
    }
      std::string::__throw_out_of_range[abi:ne180100]();
    if (v12 - v16 >= v15) {
      size_t v20 = v15;
    }
    else {
      size_t v20 = v12 - v16;
    }
    uint64_t v21 = *(void *)a2;
  }
  else
  {
    BOOL v18 = v15 != -1 && v11 >= v16;
    if (!v18) {
      goto LABEL_48;
    }
    size_t v19 = v11 - v16;
    if (v19 >= v15) {
      size_t v20 = v15;
    }
    else {
      size_t v20 = v19;
    }
    uint64_t v21 = a2;
  }
  if ((v28 & 0x80u) == 0) {
    uint64_t v24 = __p;
  }
  else {
    uint64_t v24 = (void **)__p[0];
  }
  int v25 = memcmp((const void *)(v21 + v16), v24, v20);
  BOOL v17 = v20 == v15 && v25 == 0;
  if (v14 < 0) {
LABEL_11:
  }
    operator delete(__p[0]);
LABEL_12:
  if (v17) {
    kaldi::quasar::EspressoV2Plan::LoadNetworkMil(a1, a2, a3, a4, a5);
  }
  else {
    kaldi::quasar::EspressoV2Plan::LoadNetworkBundle(a1, a2, a4);
  }
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 24))(result, a2);
  }
  return result;
}

void kaldi::quasar::EspressoV2Plan::~EspressoV2Plan(kaldi::quasar::EspressoV2Plan *this)
{
  *(void *)this = &unk_1F0A504F0;
  uint64_t v2 = (void *)((char *)this + 216);
  if (*((void *)this + 27))
  {
    if (e5rt_execution_stream_operation_release()) {
      goto LABEL_20;
    }
    *uint64_t v2 = 0;
  }
  uint64_t v3 = (kaldi::quasar::EspressoV2Plan *)*((void *)this + 28);
  if (v3 != (kaldi::quasar::EspressoV2Plan *)((char *)this + 232))
  {
    while (!e5rt_execution_stream_operation_release())
    {
      unint64_t v4 = (kaldi::quasar::EspressoV2Plan *)*((void *)v3 + 1);
      if (v4)
      {
        do
        {
          unint64_t v5 = v4;
          unint64_t v4 = *(kaldi::quasar::EspressoV2Plan **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          unint64_t v5 = (kaldi::quasar::EspressoV2Plan *)*((void *)v3 + 2);
          BOOL v6 = *(void *)v5 == (void)v3;
          uint64_t v3 = v5;
        }
        while (!v6);
      }
      uint64_t v3 = v5;
      if (v5 == (kaldi::quasar::EspressoV2Plan *)((char *)this + 232)) {
        goto LABEL_12;
      }
    }
LABEL_20:
    last_error_message = (const char *)e5rt_get_last_error_message();
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
    unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Espresso V2 failure: ", 21);
    size_t v9 = strlen(last_error_message);
    uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)last_error_message, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"\n", 1);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v11);
  }
LABEL_12:
  if (*((void *)this + 31))
  {
    if (e5rt_execution_stream_release()) {
      goto LABEL_20;
    }
    *((void *)this + 31) = 0;
  }
  if (*((void *)this + 32))
  {
    e5rt_precompiled_compute_op_create_options_release();
    *((void *)this + 32) = 0;
  }
  std::__tree<std::string>::destroy((uint64_t)this + 224, *((char **)this + 29));
  kaldi::quasar::EspressoV2NetworkConfig::~EspressoV2NetworkConfig((void **)this + 1);
  quasar::Bitmap::~Bitmap(this);
}

{
  uint64_t vars8;

  kaldi::quasar::EspressoV2Plan::~EspressoV2Plan(this);
  JUMPOUT(0x1B3EA8670);
}

void kaldi::quasar::EspressoV2Plan::LoadNetworkMil(uint64_t a1, uint64_t a2, int a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v28 = 0;
  if (a3) {
    int v10 = 2;
  }
  else {
    int v10 = 0;
  }
  unint64_t v11 = (unsigned __int16 **)(a1 + 120);
  if (kaldi::quasar::compileWithProgramLibrary(a2, (unsigned __int16 **)(a1 + 120), &v28, v10, a5)) {
    BOOL v12 = v28 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  if (!v12)
  {
    BOOL v17 = kaldi::quasar::EspressoV2Plan::LoadNetworkWithProgramLibrary(a1, &v28, a4);
    e5rt_program_library_release();
    if (v17) {
      return;
    }
    if (a3)
    {
      if (kaldi::g_kaldi_verbose_level >= -1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
        unint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Compilation not loadable for v2 model: ", 39);
        int v18 = *(char *)(a2 + 23);
        if (v18 >= 0) {
          uint64_t v15 = a2;
        }
        else {
          uint64_t v15 = *(void *)a2;
        }
        if (v18 >= 0) {
          uint64_t v16 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          uint64_t v16 = *(void *)(a2 + 8);
        }
LABEL_26:
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v15, v16);
        kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
        return;
      }
      return;
    }
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
      size_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Loading not successful, starting forced recompilation for v2 model: ", 68);
      int v20 = *(char *)(a2 + 23);
      if (v20 >= 0) {
        uint64_t v21 = a2;
      }
      else {
        uint64_t v21 = *(void *)a2;
      }
      if (v20 >= 0) {
        uint64_t v22 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        uint64_t v22 = *(void *)(a2 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, v21, v22);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v27);
    }
    uint64_t v28 = 0;
    if (kaldi::quasar::compileWithProgramLibrary(a2, v11, &v28, 1, a5) && v28)
    {
      BOOL v23 = kaldi::quasar::EspressoV2Plan::LoadNetworkWithProgramLibrary(a1, &v28, a4);
      e5rt_program_library_release();
      if (v23) {
        return;
      }
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
      uint64_t v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Loading not successful for v2 model: ", 37);
      std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v26, a2);
    }
    else
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
      int v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Forced recompilation not successful for v2 model: ", 50);
      std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v25, a2);
    }
LABEL_40:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v27);
  }
  if (!a3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
    uint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Compilation not successful for v2 model: ", 41);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v24, a2);
    goto LABEL_40;
  }
  if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
    unint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Compilation not yet done for v2 model: ", 39);
    int v14 = *(char *)(a2 + 23);
    if (v14 >= 0) {
      uint64_t v15 = a2;
    }
    else {
      uint64_t v15 = *(void *)a2;
    }
    if (v14 >= 0) {
      uint64_t v16 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v16 = *(void *)(a2 + 8);
    }
    goto LABEL_26;
  }
}

void sub_1B22FC3EC(uint64_t a1, ...)
{
  va_start(va, a1);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void sub_1B22FC420(uint64_t a1, ...)
{
  va_start(va, a1);
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)va);
  JUMPOUT(0x1B22FC42CLL);
}

BOOL kaldi::quasar::EspressoV2Plan::LoadNetworkWithProgramLibrary(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = a3[1];
  if (*a3 != v4)
  {
    if (*a2)
    {
      unint64_t v5 = (uint64_t **)(a1 + 224);
      while (!e5rt_program_library_retain_program_function()
           && !e5rt_precompiled_compute_op_create_options_create_with_program_function())
      {
        e5rt_program_function_release();
        v23[0] = (long long *)v3;
        std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5, (const void **)v3, (uint64_t)&std::piecewise_construct, v23);
        int precompiled_compute_operation_with_options = e5rt_execution_stream_operation_create_precompiled_compute_operation_with_options();
        if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
          size_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Loaded v2 model function '", 26);
          int v8 = *(char *)(v3 + 23);
          if (v8 >= 0) {
            uint64_t v9 = v3;
          }
          else {
            uint64_t v9 = *(void *)v3;
          }
          if (v8 >= 0) {
            uint64_t v10 = *(unsigned __int8 *)(v3 + 23);
          }
          else {
            uint64_t v10 = *(void *)(v3 + 8);
          }
          unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"', status: ", 11);
          std::ostream::operator<<();
          kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v23);
        }
        if ((precompiled_compute_operation_with_options & 0xFFFFFFFB) == 9) {
          return 0;
        }
        if (precompiled_compute_operation_with_options) {
          goto LABEL_35;
        }
        v3 += 24;
        if (v3 == v4) {
          return 1;
        }
      }
      goto LABEL_35;
    }
LABEL_32:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v23, "e5ProgramLibrary != NULL");
    goto LABEL_33;
  }
  if (!*(void *)(a1 + 256))
  {
    if (!*a2) {
      goto LABEL_32;
    }
    if (e5rt_program_library_retain_program_function()
      || e5rt_precompiled_compute_op_create_options_create_with_program_function())
    {
      last_error_message = (const char *)e5rt_get_last_error_message();
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
      int v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Espresso V2 failure: ", 21);
      size_t v21 = strlen(last_error_message);
      uint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)last_error_message, v21);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v22, "\n");
LABEL_33:
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23);
    }
    e5rt_program_function_release();
  }
  unsigned int v12 = e5rt_execution_stream_operation_create_precompiled_compute_operation_with_options();
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Loaded v2 model, status: ", 25);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v23);
  }
  if (v12 > 0xD || ((1 << v12) & 0x2201) == 0)
  {
LABEL_35:
    uint64_t v15 = (const char *)e5rt_get_last_error_message();
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
    uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Espresso V2 failure: ", 21);
    size_t v17 = strlen(v15);
    int v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v15, v17);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v18, "\n");
    goto LABEL_33;
  }
  return (v12 & 0xFFFFFFFB) != 9;
}

void sub_1B22FC88C(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void kaldi::quasar::EspressoV2Plan::LoadNetworkBundle(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v20 = 0;
  size_t v21 = 0;
  unint64_t v22 = 0;
  uint64_t v4 = *a3;
  uint64_t v5 = a3[1];
  if (*a3 == v5)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "main");
    uint64_t v25 = a1 + 216;
    std::vector<std::pair<std::string,e5rt_execution_stream_operation **>>::__assign_with_size[abi:ne180100]<std::pair<std::string,e5rt_execution_stream_operation **> const*,std::pair<std::string,e5rt_execution_stream_operation **> const*>((uint64_t)&v20, &__p, v26, 1uLL);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v10 = v21;
  }
  else
  {
    BOOL v6 = (uint64_t **)(a1 + 224);
    do
    {
      BOOL v23 = (long long *)v4;
      size_t v7 = std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, (const void **)v4, (uint64_t)&std::piecewise_construct, &v23)+ 7;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
      int v8 = v21;
      if ((unint64_t)v21 >= v22)
      {
        uint64_t v10 = (std::string *)std::vector<std::pair<std::string,e5rt_execution_stream_operation **>>::__emplace_back_slow_path<std::string const&,e5rt_execution_stream_operation **>(&v20, (long long *)v4, &__p);
      }
      else
      {
        if (*(char *)(v4 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v21, *(const std::string::value_type **)v4, *(void *)(v4 + 8));
          size_t v7 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
        }
        else
        {
          long long v9 = *(_OWORD *)v4;
          v21->__r_.__value_.__r.__words[2] = *(void *)(v4 + 16);
          *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
        }
        v8[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
        uint64_t v10 = (std::string *)((char *)v8 + 32);
      }
      size_t v21 = v10;
      v4 += 24;
    }
    while (v4 != v5);
  }
  for (uint64_t i = v20; (std::string *)i != v10; i += 32)
  {
    if (*(char *)(i + 23) >= 0) {
      size_t v12 = *(unsigned __int8 *)(i + 23);
    }
    else {
      size_t v12 = *(void *)(i + 8);
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v12 + 5);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (v12)
    {
      if (*(char *)(i + 23) >= 0) {
        int v14 = (const void *)i;
      }
      else {
        int v14 = *(const void **)i;
      }
      memmove(p_p, v14, v12);
    }
    strcpy((char *)p_p + v12, " esop");
    int precompiled_compute_operation = e5rt_execution_stream_operation_create_precompiled_compute_operation();
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (precompiled_compute_operation)
    {
      last_error_message = (const char *)e5rt_get_last_error_message();
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      size_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Espresso V2 failure: ", 21);
      size_t v18 = strlen(last_error_message);
      size_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)last_error_message, v18);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"\n", 1);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
    }
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v20;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1B22FCBAC(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B22FCBF4);
}

void sub_1B22FCBE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a9;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void kaldi::quasar::EspressoV2Plan::ReduceEngineMemoryUsage(kaldi::quasar::EspressoV2Plan *this)
{
  *((unsigned char *)this + 264) = 0;
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    atomic_store(0, (unsigned __int8 *)(v2 + 8));
  }
  if (!*((unsigned char *)this + 40) && *((void *)this + 32))
  {
    uint64_t v3 = (void *)((char *)this + 216);
    if (*((void *)this + 27))
    {
      if (e5rt_execution_stream_operation_release()) {
        goto LABEL_14;
      }
      *uint64_t v3 = 0;
    }
    uint64_t v5 = *((void *)this + 31);
    uint64_t v4 = (void *)((char *)this + 248);
    if (!v5) {
      goto LABEL_12;
    }
    if (!e5rt_execution_stream_release())
    {
      void *v4 = 0;
LABEL_12:
      if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Unloaded v2 model to reduce memory", 34);
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v10);
      }
      return;
    }
LABEL_14:
    last_error_message = (const char *)e5rt_get_last_error_message();
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    size_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Espresso V2 failure: ", 21);
    size_t v8 = strlen(last_error_message);
    long long v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)last_error_message, v8);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "\n");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
}

void sub_1B22FCD70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void kaldi::quasar::EspressoV2Plan::CreateData()
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Not implemented CreateData from const std::vector<int32> &v");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

{
  void v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Not implemented CreateData from const std::vector<float> &v");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

{
  void v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Not implemented CreateData from const CuMatrixBase<BaseFloat> &m");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

{
  void v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Not implemented CreateData from const MatrixBase<BaseFloat> &m");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::quasar::EspressoV2Plan::CreateZeroedDataInt32()
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Not implemented CreateZeroedDataInt32 from const std::vector<int64> &dim_sizes");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::quasar::EspressoV2Plan::CreateZeroedDataFloat(uint64_t a1, uint64_t a2)
{
  std::vector<unsigned long>::vector(&__dst, (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 != *(void *)a2) {
    memmove(__dst, *(const void **)a2, v3 - *(void *)a2);
  }
  operator new();
}

void sub_1B22FCF6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  MEMORY[0x1B3EA8670](v11, 0x10B3C40ACDA1BA3);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void kaldi::quasar::EspressoV2Plan::CreateZeroedDataFloat16(uint64_t a1, uint64_t **a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  unint64_t v4 = v2 - *a2;
  memset(__p, 0, sizeof(__p));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<std::__wrap_iter<long long const*>,std::__wrap_iter<long long const*>>((char *)__p, v3, v2, v4);
  operator new();
}

void sub_1B22FD02C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  MEMORY[0x1B3EA8670](v11, 0x10B3C40ACDA1BA3);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::EspressoV2Plan::CopyFloat16(kaldi::quasar::EspressoV2Plan *this, const kaldi::quasar::ComputeEngineBufferItf *a2, kaldi::quasar::ComputeEngineBufferItf *a3)
{
  if (a2
  {
    uint64_t v6 = 0;
  }
  else
  {
    kaldi::quasar::ComputeEngineItf::CreateCopyFloat(this, a2, v16);
    uint64_t v6 = v16[0];
  }
  v16[34] = 0;
  v16[35] = 0;
  if (e5rt_tensor_desc_get_shape())
  {
    last_error_message = (const char *)e5rt_get_last_error_message();
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
    long long v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Espresso V2 failure: ", 21);
    size_t v10 = strlen(last_error_message);
    uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)last_error_message, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"\n", 1);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v16);
  }
  if (!a3
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Target type must match engine!", 30);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v16);
  }
  uint64_t result = e5rt_tensor_utils_cast_from_fp32_to_fp16();
  if (result)
  {
    size_t v12 = (const char *)e5rt_get_last_error_message();
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
    unint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Espresso V2 failure: ", 21);
    size_t v14 = strlen(v12);
    uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v12, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"\n", 1);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v16);
  }
  if (v6) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return result;
}

void sub_1B22FD2CC(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::EspressoV2Plan::CreateCopyFloat16(kaldi::quasar::EspressoV2Plan *this, const kaldi::quasar::ComputeEngineBufferItf *a2)
{
  if (!a2
  {
    kaldi::quasar::ComputeEngineItf::CreateCopyFloat(this, a2, __p);
  }
  unint64_t v10 = 0;
  uint64_t v11 = 0;
  if (!e5rt_tensor_desc_get_shape())
  {
    memset(__p, 0, 24);
    unint64_t v4 = std::vector<long long>::__init_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)__p, v11, &v11[v10], v10);
    kaldi::quasar::EspressoV2Plan::CreateZeroedDataFloat16((uint64_t)v4, (uint64_t **)__p);
  }
  last_error_message = (const char *)e5rt_get_last_error_message();
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Espresso V2 failure: ", 21);
  size_t v7 = strlen(last_error_message);
  size_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)last_error_message, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"\n", 1);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
}

void sub_1B22FD508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  *uint64_t v11 = 0;
  (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  _Unwind_Resume(a1);
}

void kaldi::quasar::EspressoV2Plan::CreateCopyFloat32(kaldi::quasar::EspressoV2Plan *this, const kaldi::quasar::ComputeEngineBufferItf *lpsrc)
{
  if (lpsrc
  {
    if (!e5rt_tensor_desc_get_shape())
    {
      memset(__p, 0, 24);
      uint64_t v2 = std::vector<long long>::__init_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)__p, 0, 0, 0);
      kaldi::quasar::EspressoV2Plan::CreateZeroedDataFloat((uint64_t)v2, (uint64_t)__p);
    }
    last_error_message = (const char *)e5rt_get_last_error_message();
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Espresso V2 failure: ", 21);
    size_t v5 = strlen(last_error_message);
    uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)last_error_message, v5);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v6, "\n");
  }
  else
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "EspressoV2TensorData expected");
  }
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
}

void kaldi::quasar::EspressoV2Plan::CreateConcat()
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Not implemented CreateConcat");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::quasar::EspressoV2Plan::CreateSplit(kaldi::quasar::EspressoV2Plan *this, const kaldi::quasar::ComputeEngineBufferItf *a2)
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "Not implemented CreateSplit");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
}

void kaldi::quasar::EspressoV2Plan::CreateSlice(kaldi::quasar::EspressoV2Plan *this, const kaldi::quasar::ComputeEngineBufferItf *a2)
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "Not implemented CreateSlice");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
}

void kaldi::quasar::EspressoV2Plan::PrepareInputsAndOutputs(uint64_t a1, uint64_t a2, const std::string **a3, uint64_t *a4, uint64_t *a5, int a6)
{
  uint64_t v10 = *a3;
  uint64_t v11 = a3[1];
  if (*a3 != v11)
  {
    do
    {
      std::string::pointer data = v10[1].__r_.__value_.__l.__data_;
      if (!data
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(&v32, "Unsupported input cast: %s");
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v32);
      }
      kaldi::quasar::EspressoV2TensorData::BindToInput(v13, a2, v10, a6);
      uint64_t v10 = (const std::string *)((char *)v10 + 32);
    }
    while (v10 != v11);
  }
  if (a5)
  {
    uint64_t v14 = *a5;
    uint64_t v15 = a5[1];
    unint64_t v16 = (v15 - *a5) >> 3;
    uint64_t v17 = *a4;
    if (v16 == 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3))
    {
      if (v15 == v14)
      {
LABEL_38:
        if (*a4 != a4[1]) {
          kaldi::quasar::EspressoV2TensorData::CreateAndBindToOutput();
        }
        return;
      }
      uint64_t v18 = 0;
      if (v16 <= 1) {
        uint64_t v19 = 1;
      }
      else {
        uint64_t v19 = (v15 - *a5) >> 3;
      }
      while (1)
      {
        uint64_t v20 = *(const void **)(v14 + 8 * v18);
        if (!v20) {
          break;
        }
        if (!v21) {
          break;
        }
        unint64_t v22 = (unsigned __int8 **)(v17 + 24 * v18);
        uint64_t v23 = v21[79];
        if ((v23 & 0x80u) == 0) {
          uint64_t v24 = (unsigned __int8 *)v21[79];
        }
        else {
          uint64_t v24 = (unsigned __int8 *)*((void *)v21 + 8);
        }
        uint64_t v25 = (unsigned __int8 *)*((unsigned __int8 *)v22 + 23);
        int v26 = (char)v25;
        if ((char)v25 < 0) {
          uint64_t v25 = v22[1];
        }
        if (v24 != v25) {
          break;
        }
        uint64_t v27 = (const void **)(v21 + 56);
        if (v26 >= 0) {
          uint64_t v28 = (unsigned __int8 *)(v17 + 24 * v18);
        }
        else {
          uint64_t v28 = *v22;
        }
        if ((v23 & 0x80) != 0)
        {
          if (memcmp(*v27, v28, *((void *)v21 + 8))) {
            break;
          }
        }
        else if (v21[79])
        {
          while (*(unsigned __int8 *)v27 == *v28)
          {
            uint64_t v27 = (const void **)((char *)v27 + 1);
            ++v28;
            if (!--v23) {
              goto LABEL_28;
            }
          }
          break;
        }
LABEL_28:
        if (++v18 == v19) {
          goto LABEL_31;
        }
      }
    }
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__clear[abi:ne180100](a5);
    uint64_t v14 = *a5;
    uint64_t v15 = a5[1];
LABEL_31:
    if (v14 != v15)
    {
      if (a6)
      {
        uint64_t v29 = 0;
        unint64_t v30 = 0;
        do
        {
          __n128 v31 = *(void **)(v14 + 8 * v30);
          if (v31) {
          kaldi::quasar::EspressoV2TensorData::BindToOutput((uint64_t)v31, a2, (const std::string *)(*a4 + v29));
          }
          ++v30;
          uint64_t v14 = *a5;
          v29 += 24;
        }
        while (v30 < (a5[1] - *a5) >> 3);
      }
      return;
    }
    goto LABEL_38;
  }
}

void sub_1B22FDC68()
{
}

std::string *kaldi::quasar::EspressoV2TensorData::BindToInput(std::string *result, uint64_t a2, const std::string *a3, int a4)
{
  size_t v5 = result;
  if (!a4)
  {
    p_std::string::size_type size = (const void **)&result[2].__r_.__value_.__l.__size_;
    uint64_t v7 = result[3].__r_.__value_.__s.__data_[7];
    std::string::size_type v8 = result[2].__r_.__value_.__r.__words[2];
    if ((v7 & 0x80u) == 0) {
      std::string::size_type v9 = result[3].__r_.__value_.__s.__data_[7];
    }
    else {
      std::string::size_type v9 = result[2].__r_.__value_.__r.__words[2];
    }
    std::string::size_type size = HIBYTE(a3->__r_.__value_.__r.__words[2]);
    int v11 = (char)size;
    if ((size & 0x80u) != 0) {
      std::string::size_type size = a3->__r_.__value_.__l.__size_;
    }
    if (v9 == size)
    {
      if (v11 >= 0) {
        uint64_t v12 = a3;
      }
      else {
        uint64_t v12 = (const std::string *)a3->__r_.__value_.__r.__words[0];
      }
      if ((v7 & 0x80) != 0)
      {
        uint64_t result = (std::string *)memcmp(*p_size, v12, result[2].__r_.__value_.__r.__words[2]);
        std::string::size_type v9 = v8;
        if (!result) {
          return result;
        }
      }
      else
      {
        if (!result[3].__r_.__value_.__s.__data_[7]) {
          return result;
        }
        for (uint64_t i = &result[2].__r_.__value_.__s.__data_[8]; *i == v12->__r_.__value_.__s.__data_[0]; ++i)
        {
          uint64_t v12 = (const std::string *)((char *)v12 + 1);
          if (!--v7) {
            return result;
          }
        }
      }
    }
    if (v9)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v24);
      uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Cannot bind to ", 15);
      int v19 = SHIBYTE(a3->__r_.__value_.__r.__words[2]);
      if (v19 >= 0) {
        uint64_t v20 = (uint64_t)a3;
      }
      else {
        uint64_t v20 = a3->__r_.__value_.__r.__words[0];
      }
      if (v19 >= 0) {
        uint64_t v21 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
      }
      else {
        uint64_t v21 = a3->__r_.__value_.__l.__size_;
      }
      unint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v20, v21);
      uint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" due to existing binding to ", 28);
      std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v23, (uint64_t)p_size);
LABEL_25:
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v24);
    }
  }
  if (e5rt_execution_stream_operation_retain_input_port()
    || e5rt_io_port_bind_buffer_object()
    || e5rt_io_port_release())
  {
    last_error_message = (const char *)e5rt_get_last_error_message();
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v24);
    uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Espresso V2 failure: ", 21);
    size_t v16 = strlen(last_error_message);
    uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)last_error_message, v16);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v17, "\n");
    goto LABEL_25;
  }
  return std::string::operator=((std::string *)((char *)v5 + 56), a3);
}

void sub_1B22FDF40(uint64_t a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void kaldi::quasar::EspressoV2TensorData::CreateAndBindToOutput()
{
  void v4[34] = 0;
  if (!e5rt_execution_stream_operation_retain_output_port()) {
    operator new();
  }
  last_error_message = (const char *)e5rt_get_last_error_message();
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Espresso V2 failure: ", 21);
  size_t v2 = strlen(last_error_message);
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)last_error_message, v2);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "\n");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
}

void sub_1B22FE138()
{
  MEMORY[0x1B3EA8670](v0, 0x10B3C40ACDA1BA3);
  JUMPOUT(0x1B22FE18CLL);
}

std::string *kaldi::quasar::EspressoV2TensorData::BindToOutput(uint64_t a1, uint64_t a2, const std::string *a3)
{
  void v10[34] = 0;
  if (e5rt_execution_stream_operation_retain_output_port()
    || e5rt_io_port_bind_buffer_object()
    || e5rt_io_port_release())
  {
    last_error_message = (const char *)e5rt_get_last_error_message();
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Espresso V2 failure: ", 21);
    size_t v8 = strlen(last_error_message);
    std::string::size_type v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)last_error_message, v8);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "\n");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
  return std::string::operator=((std::string *)(a1 + 56), a3);
}

void kaldi::quasar::EspressoV2Plan::Run(uint64_t a1, long long **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v26 = 0;
  unint64_t v27 = 0;
  unint64_t v28 = 0;
  std::string::size_type v9 = *a2;
  uint64_t v10 = a2[1];
  if (*a2 != v10)
  {
    do
    {
      int v11 = (void *)*((void *)v9 + 3);
      if (*((char *)v9 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v9, *((void *)v9 + 1));
      }
      else
      {
        long long v12 = *v9;
        __p.__r_.__value_.__r.__words[2] = *((void *)v9 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v12;
      }
      uint64_t v25 = v11;
      unint64_t v13 = v27;
      if (v27 >= v28)
      {
        uint64_t v15 = (uint64_t)(v27 - v26) >> 5;
        unint64_t v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 59) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v17 = v28 - v26;
        if ((uint64_t)(v28 - v26) >> 4 > v16) {
          unint64_t v16 = v17 >> 4;
        }
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v18 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v16;
        }
        v29[4] = (void **)&v28;
        int v19 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)&v28, v18);
        uint64_t v20 = &v19[4 * v15];
        v29[0] = v19;
        v29[1] = v20;
        int v29[3] = &v19[4 * v21];
        long long v22 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        _OWORD v20[2] = (void *)__p.__r_.__value_.__r.__words[2];
        *(_OWORD *)uint64_t v20 = v22;
        memset(&__p, 0, sizeof(__p));
        void v20[3] = v25;
        v29[2] = v20 + 4;
        std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__swap_out_circular_buffer(&v26, v29);
        unint64_t v23 = v27;
        std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)v29);
        unint64_t v27 = v23;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v14 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(void *)(v27 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v13 = v14;
        memset(&__p, 0, sizeof(__p));
        *(void *)(v13 + ++*(_DWORD *)(result + 24) = v25;
        unint64_t v27 = v13 + 32;
      }
      v9 += 2;
    }
    while (v9 != v10);
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 128))(a1, &v26, a3, a4, a5);
  v29[0] = (void **)&v26;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v29);
}

void sub_1B22FE504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
  std::string __p = &a16;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::EspressoV2Plan::Run(uint64_t a1, const std::string **a2, uint64_t *a3, uint64_t a4, uint64_t *a5)
{
  if (*(void *)(a1 + 216)) {
    goto LABEL_10;
  }
  if (!*(void *)(a1 + 256))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v17, "_main_builder != nullptr");
    goto LABEL_16;
  }
  uint64_t v9 = *(void *)(a1 + 24);
  if (v9) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, a1 + 48);
  }
  if (e5rt_execution_stream_operation_create_precompiled_compute_operation_with_options())
  {
    last_error_message = (const char *)e5rt_get_last_error_message();
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
    long long v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Espresso V2 failure: ", 21);
    size_t v15 = strlen(last_error_message);
    unint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)last_error_message, v15);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v16, "\n");
LABEL_16:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17);
  }
  uint64_t v10 = *(void *)(a1 + 24);
  if (v10) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 24))(v10, a1 + 48);
  }
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Loaded v2 model during Run", 26);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v17);
  }
LABEL_10:
  if (!*(unsigned char *)(a1 + 264))
  {
    uint64_t v11 = *(void *)(a1 + 24);
    if (v11) {
      atomic_store(1u, (unsigned __int8 *)(v11 + 8));
    }
    *(unsigned char *)(a1 + 264) = 1;
  }
  return kaldi::quasar::EspressoV2Plan::RunOp(a1, *(void *)(a1 + 216), a2, a3, (uint64_t)a5, a5);
}

void sub_1B22FE6F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B22FE70C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t kaldi::quasar::EspressoV2Plan::RunOp(uint64_t a1, uint64_t a2, const std::string **a3, uint64_t *a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v11 = (void *)(a1 + 248);
  uint64_t v10 = *(void *)(a1 + 248);
  if (v10 && (uint64_t v10 = e5rt_execution_stream_reset(), v10)
    || (kaldi::quasar::EspressoV2Plan::PrepareInputsAndOutputs(v10, a2, a3, a4, a6, 0), !*v11)
    && e5rt_execution_stream_create()
    || e5rt_execution_stream_encode_operation()
    || (uint64_t result = e5rt_execution_stream_execute_sync(), result))
  {
    last_error_message = (const char *)e5rt_get_last_error_message();
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
    long long v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Espresso V2 failure: ", 21);
    size_t v15 = strlen(last_error_message);
    unint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)last_error_message, v15);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v16, "\n");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17);
  }
  return result;
}

void kaldi::quasar::EspressoV2Plan::RunFunction(uint64_t a1, long long *a2, long long **a3, uint64_t *a4, uint64_t a5, uint64_t *a6)
{
  unint64_t v27 = 0;
  unint64_t v28 = 0;
  unint64_t v29 = 0;
  uint64_t v10 = *a3;
  uint64_t v11 = a3[1];
  if (*a3 != v11)
  {
    do
    {
      long long v12 = (void *)*((void *)v10 + 3);
      if (*((char *)v10 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v10, *((void *)v10 + 1));
      }
      else
      {
        long long v13 = *v10;
        __p.__r_.__value_.__r.__words[2] = *((void *)v10 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v13;
      }
      uint64_t v26 = v12;
      unint64_t v14 = v28;
      if (v28 >= v29)
      {
        uint64_t v16 = (uint64_t)(v28 - (void)v27) >> 5;
        unint64_t v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 59) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v18 = v29 - (void)v27;
        if ((uint64_t)(v29 - (void)v27) >> 4 > v17) {
          unint64_t v17 = v18 >> 4;
        }
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v19 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v19 = v17;
        }
        v30[4] = (void **)&v29;
        uint64_t v20 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)&v29, v19);
        uint64_t v21 = &v20[4 * v16];
        v30[0] = v20;
        v30[1] = v21;
        void v30[3] = &v20[4 * v22];
        long long v23 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        void v21[2] = (void *)__p.__r_.__value_.__r.__words[2];
        *(_OWORD *)uint64_t v21 = v23;
        memset(&__p, 0, sizeof(__p));
        v21[3] = v26;
        v30[2] = v21 + 4;
        std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__swap_out_circular_buffer((uint64_t *)&v27, v30);
        unint64_t v24 = v28;
        std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)v30);
        unint64_t v28 = v24;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v15 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(void *)(v28 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v14 = v15;
        memset(&__p, 0, sizeof(__p));
        *(void *)(v14 + ++*(_DWORD *)(result + 24) = v26;
        unint64_t v28 = v14 + 32;
      }
      v10 += 2;
    }
    while (v10 != v11);
  }
  kaldi::quasar::EspressoV2Plan::RunFunction(a1, a2, &v27, a4, a5, a6);
  v30[0] = (void **)&v27;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v30);
}

void sub_1B22FEAE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
  std::string __p = &a16;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::EspressoV2Plan::RunFunction(uint64_t a1, long long *a2, const std::string **a3, uint64_t *a4, uint64_t a5, uint64_t *a6)
{
  if (*(void *)(a1 + 216))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v15, "Default function (main) set, use Run");
    goto LABEL_6;
  }
  v15[0] = a2;
  uint64_t v11 = std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 224), (const void **)a2, (uint64_t)&std::piecewise_construct, v15)[7];
  if (!v11)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    unint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Function not found: ", 20);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v14, (uint64_t)a2);
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v15);
  }
  return kaldi::quasar::EspressoV2Plan::RunOp(a1, v11, a3, a4, v12, a6);
}

void kaldi::quasar::EspressoV2Plan::PrepareOpChain(void *a1@<X2>, uint64_t *a2@<X3>, uint64_t *a3@<X4>, uint64_t *a4@<X6>, void *a5@<X7>, uint64_t a6@<X8>, void *a7, char a8)
{
  v122[0] = 0;
  v122[1] = 0;
  long long v121 = v122;
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&> const*,std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&> const*,std::insert_iterator<std::map<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>>(*a2, a2[1], (uint64_t)&v121, (uint64_t)v122, (uint64_t)&v112);
  uint64_t v102 = a6;
  long long v119 = 0uLL;
  uint64_t v120 = 0;
  long long v117 = 0uLL;
  uint64_t v118 = 0;
  uint64_t v11 = (uint64_t)std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::emplace_back<>((uint64_t *)&v119);
  uint64_t v12 = *a1;
  if (a1[1] == *a1) {
    goto LABEL_102;
  }
  unint64_t v13 = 0;
  long long v104 = a1;
  do
  {
    if (kaldi::g_kaldi_verbose_level >= 5)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v112, 5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v112, (uint64_t)"Initializing model inference chain, position: ", 46);
      std::ostream::operator<<();
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v112);
      uint64_t v12 = *a1;
    }
    long long v109 = 0;
    unint64_t v110 = 0;
    unint64_t v111 = 0;
    memset(v108, 0, sizeof(v108));
    unint64_t v14 = (long long **)(*a7 + 24 * v13);
    long long v15 = *v14;
    uint64_t v16 = v14[1];
    while (v15 != v16)
    {
      uint64_t v11 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)&v121, (const void **)v15);
      uint64_t v17 = v11;
      if (v122 == (char **)v11)
      {
        uint64_t v11 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(*((void *)&v119 + 1) - 24, (const void **)v15);
        if (*((void *)&v119 + 1) - 16 == v11)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v112);
          int v78 = *((char *)v15 + 23);
          if (v78 >= 0) {
            uint64_t v79 = (uint64_t)v15;
          }
          else {
            uint64_t v79 = *(void *)v15;
          }
          if (v78 >= 0) {
            uint64_t v80 = *((unsigned __int8 *)v15 + 23);
          }
          else {
            uint64_t v80 = *((void *)v15 + 1);
          }
          long long v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, v79, v80);
          std::ostream::operator<<();
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v112);
        }
        uint64_t v18 = *(void *)(v11 + 56);
        if (*((char *)v15 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v106, *(const std::string::value_type **)v15, *((void *)v15 + 1));
        }
        else
        {
          long long v19 = *v15;
          v106.__r_.__value_.__r.__words[2] = *((void *)v15 + 2);
          *(_OWORD *)&v106.__r_.__value_.__l.__data_ = v19;
        }
        uint64_t v107 = v18;
        unint64_t v35 = v110;
        if (v110 >= v111)
        {
          uint64_t v37 = (uint64_t)(v110 - (void)v109) >> 5;
          unint64_t v38 = v37 + 1;
          if ((unint64_t)(v37 + 1) >> 59) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v39 = v111 - (void)v109;
          if ((uint64_t)(v111 - (void)v109) >> 4 > v38) {
            unint64_t v38 = v39 >> 4;
          }
          if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v40 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v40 = v38;
          }
          uint64_t v116 = &v111;
          unint64_t v41 = (long long *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)&v111, v40);
          uint64_t v42 = &v41[2 * v37];
          long long v112 = v41;
          long long v113 = v42;
          long long v115 = &v41[2 * v43];
          long long v44 = *(_OWORD *)&v106.__r_.__value_.__l.__data_;
          *((void *)v42 + 2) = *((void *)&v106.__r_.__value_.__l + 2);
          *uint64_t v42 = v44;
          memset(&v106, 0, sizeof(v106));
          *((void *)v42 + 3) = v107;
          long long v114 = v42 + 2;
          std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__swap_out_circular_buffer((uint64_t *)&v109, &v112);
          unint64_t v45 = v110;
          uint64_t v11 = std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)&v112);
          unint64_t v110 = v45;
          if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v106.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          long long v36 = *(_OWORD *)&v106.__r_.__value_.__l.__data_;
          *(void *)(v110 + 16) = *((void *)&v106.__r_.__value_.__l + 2);
          *(_OWORD *)unint64_t v35 = v36;
          memset(&v106, 0, sizeof(v106));
          *(void *)(v35 + ++*(_DWORD *)(result + 24) = v107;
          unint64_t v110 = v35 + 32;
        }
        if (kaldi::g_kaldi_verbose_level >= 5)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v112, 5);
          __n128 v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v112, (uint64_t)"  binding input to intermediate output: ", 40);
          int v46 = *((char *)v15 + 23);
          if (v46 >= 0) {
            uint64_t v33 = (uint64_t)v15;
          }
          else {
            uint64_t v33 = *(void *)v15;
          }
          if (v46 >= 0) {
            uint64_t v34 = *((unsigned __int8 *)v15 + 23);
          }
          else {
            uint64_t v34 = *((void *)v15 + 1);
          }
          goto LABEL_48;
        }
      }
      else
      {
        if (*(char *)(v11 + 55) < 0) {
          std::string::__init_copy_ctor_external(&v106, *(const std::string::value_type **)(v11 + 32), *(void *)(v11 + 40));
        }
        else {
          std::string v106 = *(std::string *)(v11 + 32);
        }
        uint64_t v107 = *(void *)(v17 + 56);
        unint64_t v20 = v110;
        if (v110 >= v111)
        {
          uint64_t v22 = (uint64_t)(v110 - (void)v109) >> 5;
          unint64_t v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 59) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v24 = v111 - (void)v109;
          if ((uint64_t)(v111 - (void)v109) >> 4 > v23) {
            unint64_t v23 = v24 >> 4;
          }
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v25 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v25 = v23;
          }
          uint64_t v116 = &v111;
          uint64_t v26 = (long long *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)&v111, v25);
          unint64_t v27 = &v26[2 * v22];
          long long v112 = v26;
          long long v113 = v27;
          long long v115 = &v26[2 * v28];
          long long v29 = *(_OWORD *)&v106.__r_.__value_.__l.__data_;
          *((void *)v27 + 2) = *((void *)&v106.__r_.__value_.__l + 2);
          *unint64_t v27 = v29;
          memset(&v106, 0, sizeof(v106));
          *((void *)v27 + 3) = v107;
          long long v114 = v27 + 2;
          std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__swap_out_circular_buffer((uint64_t *)&v109, &v112);
          unint64_t v30 = v110;
          uint64_t v11 = std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)&v112);
          unint64_t v110 = v30;
          if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v106.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          long long v21 = *(_OWORD *)&v106.__r_.__value_.__l.__data_;
          *(void *)(v110 + 16) = *((void *)&v106.__r_.__value_.__l + 2);
          *(_OWORD *)unint64_t v20 = v21;
          memset(&v106, 0, sizeof(v106));
          *(void *)(v20 + ++*(_DWORD *)(result + 24) = v107;
          unint64_t v110 = v20 + 32;
        }
        if (kaldi::g_kaldi_verbose_level >= 5)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v112, 5);
          __n128 v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v112, (uint64_t)"  binding input to provided input: ", 35);
          int v32 = *((char *)v15 + 23);
          if (v32 >= 0) {
            uint64_t v33 = (uint64_t)v15;
          }
          else {
            uint64_t v33 = *(void *)v15;
          }
          if (v32 >= 0) {
            uint64_t v34 = *((unsigned __int8 *)v15 + 23);
          }
          else {
            uint64_t v34 = *((void *)v15 + 1);
          }
LABEL_48:
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, v33, v34);
          kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v112);
        }
      }
      long long v15 = (long long *)((char *)v15 + 24);
    }
    a1 = v104;
    if (a8)
    {
      uint64_t v47 = (char *)v117;
      if ((void)v117 != *((void *)&v117 + 1))
      {
        if (e5rt_execution_stream_operation_bind_dependent_events())
        {
          last_error_message = (const char *)e5rt_get_last_error_message();
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v112);
          uint64_t v99 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v112, (uint64_t)"Espresso V2 failure: ", 21);
          size_t v100 = strlen(last_error_message);
          long long v101 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)last_error_message, v100);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v101, (uint64_t)"\n", 1);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v112);
        }
        uint64_t v47 = (char *)*((void *)&v117 + 1);
      }
      if (v47 >= v118)
      {
        uint64_t v49 = (uint64_t)&v47[-v117] >> 3;
        if ((unint64_t)(v49 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v50 = (uint64_t)&v118[-v117] >> 2;
        if (v50 <= v49 + 1) {
          unint64_t v50 = v49 + 1;
        }
        if ((unint64_t)&v118[-v117] >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v51 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v51 = v50;
        }
        if (v51) {
          uint64_t v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v118, v51);
        }
        else {
          uint64_t v52 = 0;
        }
        int64x2_t v53 = &v52[8 * v49];
        *(void *)int64x2_t v53 = 0;
        size_t v48 = v53 + 8;
        uint64_t v54 = (char *)*((void *)&v117 + 1);
        uint64_t v55 = (char *)v117;
        if (*((void *)&v117 + 1) != (void)v117)
        {
          do
          {
            uint64_t v56 = *((void *)v54 - 1);
            v54 -= 8;
            *((void *)v53 - 1) = v56;
            v53 -= 8;
          }
          while (v54 != v55);
          uint64_t v54 = (char *)v117;
        }
        *(void *)&long long v117 = v53;
        *((void *)&v117 + 1) = v48;
        uint64_t v118 = &v52[8 * v51];
        if (v54) {
          operator delete(v54);
        }
      }
      else
      {
        *(void *)uint64_t v47 = 0;
        size_t v48 = v47 + 8;
      }
      *((void *)&v117 + 1) = v48;
      if (e5rt_async_event_create())
      {
        uint64_t v86 = (const char *)e5rt_get_last_error_message();
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v112);
        int v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v112, (uint64_t)"Espresso V2 failure: ", 21);
        size_t v88 = strlen(v86);
        long long v89 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)v86, v88);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"\n", 1);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v112);
      }
      uint64_t v11 = e5rt_execution_stream_operation_bind_completion_event();
      if (v11)
      {
        long long v94 = (const char *)e5rt_get_last_error_message();
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v112);
        long long v95 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v112, (uint64_t)"Espresso V2 failure: ", 21);
        size_t v96 = strlen(v94);
        long long v97 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95, (uint64_t)v94, v96);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)"\n", 1);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v112);
      }
    }
    uint64_t v57 = *(void *)(v12 + 8 * v13);
    if (((uint64_t)(v104[1] - *v104) >> 3) - 1 <= v13)
    {
      kaldi::quasar::EspressoV2Plan::PrepareInputsAndOutputs(v11, v57, &v109, a3, a4, 1);
      if (e5rt_execution_stream_encode_operation())
      {
        long long v82 = (const char *)e5rt_get_last_error_message();
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v112);
        long long v83 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v112, (uint64_t)"Espresso V2 failure: ", 21);
        size_t v84 = strlen(v82);
        uint64_t v85 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)v82, v84);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)"\n", 1);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v112);
      }
      uint64_t v70 = *a3;
      uint64_t v71 = a3[1];
      if (*a3 != v71)
      {
        int v72 = kaldi::g_kaldi_verbose_level;
        do
        {
          if (v72 >= 5)
          {
            kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v112, 5);
            unint64_t v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v112, (uint64_t)"  binding final output: ", 24);
            int v74 = *(char *)(v70 + 23);
            if (v74 >= 0) {
              uint64_t v75 = v70;
            }
            else {
              uint64_t v75 = *(void *)v70;
            }
            if (v74 >= 0) {
              uint64_t v76 = *(unsigned __int8 *)(v70 + 23);
            }
            else {
              uint64_t v76 = *(void *)(v70 + 8);
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, v75, v76);
            kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v112);
            int v72 = kaldi::g_kaldi_verbose_level;
          }
          v70 += 24;
        }
        while (v70 != v71);
      }
    }
    else
    {
      kaldi::quasar::EspressoV2Plan::PrepareInputsAndOutputs(v11, v57, &v109, (uint64_t *)(*a5 + 24 * v13), v108, 1);
      if (e5rt_execution_stream_encode_operation())
      {
        long long v90 = (const char *)e5rt_get_last_error_message();
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v112);
        long long v91 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v112, (uint64_t)"Espresso V2 failure: ", 21);
        size_t v92 = strlen(v90);
        long long v93 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)v90, v92);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)"\n", 1);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v112);
      }
      std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::emplace_back<>((uint64_t *)&v119);
      uint64_t v58 = *(void *)(*a5 + 24 * v13);
      if (*(void *)(*a5 + 24 * v13 + 8) != v58)
      {
        uint64_t v59 = 0;
        unint64_t v60 = 0;
        do
        {
          uint64_t v61 = v108[0];
          long long v112 = (long long *)(v58 + v59);
          int v62 = std::__tree<std::__value_type<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(*((void *)&v119 + 1) - 24), (const void **)(v58 + v59), (uint64_t)&std::piecewise_construct, &v112);
          uint64_t v63 = *(void *)(v61 + 8 * v60);
          *(void *)(v61 + 8 * v6std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = 0;
          uint64_t v64 = v62[7];
          v62[7] = v63;
          if (v64) {
            (*(void (**)(uint64_t))(*(void *)v64 + 8))(v64);
          }
          if (kaldi::g_kaldi_verbose_level >= 5)
          {
            kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v112, 5);
            uint64_t v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v112, (uint64_t)"  storing intermediate output: ", 31);
            uint64_t v66 = *(void *)(*a5 + 24 * v13) + v59;
            int v67 = *(char *)(v66 + 23);
            if (v67 >= 0) {
              uint64_t v68 = *(void *)(*a5 + 24 * v13) + v59;
            }
            else {
              uint64_t v68 = *(void *)v66;
            }
            if (v67 >= 0) {
              uint64_t v69 = *(unsigned __int8 *)(v66 + 23);
            }
            else {
              uint64_t v69 = *(void *)(v66 + 8);
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, v68, v69);
            kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v112);
          }
          ++v60;
          uint64_t v58 = *(void *)(*a5 + 24 * v13);
          v59 += 24;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((*(void *)(*a5 + 24 * v13 + 8) - v58) >> 3) > v60);
      }
    }
    long long v112 = (long long *)v108;
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v112);
    long long v112 = (long long *)&v109;
    std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v112);
    ++v13;
    uint64_t v12 = *v104;
  }
  while (v13 < (uint64_t)(v104[1] - *v104) >> 3);
LABEL_102:
  *(_OWORD *)uint64_t v102 = v119;
  *(void *)(v102 + 16) = v120;
  uint64_t v120 = 0;
  long long v119 = 0uLL;
  *(_OWORD *)(v102 + ++*(_DWORD *)(result + 24) = v117;
  *(void *)(v102 + 4std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = v118;
  long long v112 = &v119;
  std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v112);
  std::__tree<std::string>::destroy((uint64_t)&v121, v122[0]);
}

void sub_1B22FF690(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1B22FF70CLL);
}

void sub_1B22FF6E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

void sub_1B22FF708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25)
{
  a17 = (void **)&a22;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&a17);
  a17 = (void **)&a25;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&a17);
  unint64_t v27 = *(void **)(v25 - 176);
  if (v27)
  {
    *(void *)(v25 - 168) = v27;
    operator delete(v27);
  }
  a17 = (void **)(v25 - 144);
  std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100](&a17);
  std::__tree<std::string>::destroy(v25 - 120, *(char **)(v25 - 112));
  _Unwind_Resume(a1);
}

void *std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::emplace_back<>(uint64_t *a1)
{
  unint64_t v4 = a1[2];
  size_t v2 = a1 + 2;
  unint64_t v3 = v4;
  size_t v5 = (void *)*(v2 - 1);
  if ((unint64_t)v5 >= v4)
  {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *a1) >> 3);
    unint64_t v8 = v7 + 1;
    if (v7 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - *a1) >> 3);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v8;
    }
    v14[4] = v2;
    if (v10) {
      uint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)v2, v10);
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v12 = &v11[24 * v7];
    v14[0] = v11;
    v14[1] = v12;
    void v14[3] = &v11[24 * v10];
    *((void *)v12 + 2) = 0;
    *((void *)v12 + 1) = 0;
    *(void *)uint64_t v12 = v12 + 8;
    void v14[2] = v12 + 24;
    std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(a1, v14);
    uint64_t v6 = (void *)a1[1];
    std::__split_buffer<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer(v14);
  }
  else
  {
    v5[2] = 0;
    v5[1] = 0;
    *size_t v5 = v5 + 1;
    uint64_t v6 = v5 + 3;
    a1[1] = (uint64_t)(v5 + 3);
  }
  a1[1] = (uint64_t)v6;
  return v6 - 3;
}

void sub_1B22FF870(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::EspressoV2Plan::RunOpChain(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t *a6, void *a7, void *a8)
{
  unint64_t v14 = (void *)(a1 + 248);
  if (*(void *)(a1 + 248))
  {
    if (e5rt_execution_stream_reset())
    {
LABEL_11:
      last_error_message = (const char *)e5rt_get_last_error_message();
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v30);
      long long v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Espresso V2 failure: ", 21);
      size_t v22 = strlen(last_error_message);
      unint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)last_error_message, v22);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v23, "\n");
LABEL_12:
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v30);
    }
    if (*v14) {
      goto LABEL_5;
    }
  }
  if (e5rt_execution_stream_create()) {
    goto LABEL_11;
  }
LABEL_5:
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  std::vector<e5rt_execution_stream_operation *>::__init_with_size[abi:ne180100]<e5rt_execution_stream_operation **,e5rt_execution_stream_operation **>(&v24, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  kaldi::quasar::EspressoV2Plan::PrepareOpChain(&v24, a3, a4, a6, a7, (uint64_t)v27, a8, 0);
  if (__p)
  {
    long long v29 = __p;
    operator delete(__p);
  }
  v30[0] = (void **)v27;
  std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100](v30);
  if (v24)
  {
    uint64_t v25 = v24;
    operator delete(v24);
  }
  uint64_t result = e5rt_execution_stream_execute_sync();
  if (result)
  {
    uint64_t v16 = (const char *)e5rt_get_last_error_message();
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v30);
    uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Espresso V2 failure: ", 21);
    size_t v18 = strlen(v16);
    long long v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v16, v18);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v19, "\n");
    goto LABEL_12;
  }
  return result;
}

void sub_1B22FFA94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::vector<e5rt_async_event *>>::~pair(uint64_t a1)
{
  size_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  unint64_t v4 = (void **)a1;
  std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  return a1;
}

uint64_t kaldi::quasar::EspressoV2Chain::EspressoV2Chain(uint64_t a1, void **a2, long long **a3, uint64_t a4)
{
  *(void *)a1 = &unk_1F0A506A0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = 0;
  std::vector<std::shared_ptr<kaldi::quasar::EspressoV2Plan>>::__init_with_size[abi:ne180100]<std::shared_ptr<kaldi::quasar::EspressoV2Plan>*,std::shared_ptr<kaldi::quasar::EspressoV2Plan>*>((void *)(a1 + 8), *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = 0;
  *(void *)(a1 + 48) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 32), *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 8std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = a1 + 88;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 104) = a1 + 112;
  *(void *)(a1 + 12std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 128) = a1 + 136;
  *(void *)(a1 + 16std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 1--*(_DWORD *)(a9 + 52) = a1 + 160;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 1--*(_DWORD *)(a9 + 84) = 0;
  *(void *)(a1 + 192) = 5000;
  if (*(void *)(a1 + 16) == *(void *)(a1 + 8))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"EspressoV2Chain must be initialized with at least one sub-net!", 62);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8);
  }
  if (a4) {
    *(void *)(a1 + 192) = a4;
  }
  return a1;
}

void sub_1B22FFC80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _Unwind_Exception *exception_object, uint64_t a14)
{
  std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::destroy(v21, *v19);
  std::__tree<std::string>::destroy(v20, *v17);
  std::__tree<std::__value_type<std::string,std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(a10, *v18);
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(a11, *v15);
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(v16, *v22);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  a14 = a12;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  quasar::Bitmap::~Bitmap(v14);
  _Unwind_Resume(a1);
}

void kaldi::quasar::EspressoV2Chain::~EspressoV2Chain(kaldi::quasar::EspressoV2Chain *this)
{
  *(void *)this = &unk_1F0A506A0;
  size_t v2 = (char *)this + 128;
  unint64_t v3 = (char *)*((void *)this + 16);
  unint64_t v4 = (char *)this + 136;
  if (v3 != (char *)this + 136)
  {
    while (!*((void *)v3 + 7) || !e5rt_execution_stream_release())
    {
      size_t v5 = (char *)*((void *)v3 + 1);
      if (v5)
      {
        do
        {
          uint64_t v6 = v5;
          size_t v5 = *(char **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          uint64_t v6 = (char *)*((void *)v3 + 2);
          BOOL v7 = *(void *)v6 == (void)v3;
          unint64_t v3 = v6;
        }
        while (!v7);
      }
      unint64_t v3 = v6;
      if (v6 == v4) {
        goto LABEL_10;
      }
    }
LABEL_25:
    last_error_message = (const char *)e5rt_get_last_error_message();
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
    unint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Espresso V2 failure: ", 21);
    size_t v15 = strlen(last_error_message);
    uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)last_error_message, v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"\n", 1);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17);
  }
LABEL_10:
  unint64_t v8 = (kaldi::quasar::EspressoV2Chain *)*((void *)this + 19);
  if (v8 != (kaldi::quasar::EspressoV2Chain *)((char *)this + 160))
  {
    do
    {
      unint64_t v9 = (void *)*((void *)v8 + 7);
      unint64_t v10 = (void *)*((void *)v8 + 8);
      while (v9 != v10)
      {
        if (*v9 && e5rt_async_event_release()) {
          goto LABEL_25;
        }
        ++v9;
      }
      uint64_t v11 = (kaldi::quasar::EspressoV2Chain *)*((void *)v8 + 1);
      if (v11)
      {
        do
        {
          uint64_t v12 = v11;
          uint64_t v11 = *(kaldi::quasar::EspressoV2Chain **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          uint64_t v12 = (kaldi::quasar::EspressoV2Chain *)*((void *)v8 + 2);
          BOOL v7 = *(void *)v12 == (void)v8;
          unint64_t v8 = v12;
        }
        while (!v7);
      }
      unint64_t v8 = v12;
    }
    while (v12 != (kaldi::quasar::EspressoV2Chain *)((char *)this + 160));
  }
  if (*((void *)this + 22) && e5rt_async_event_release()) {
    goto LABEL_25;
  }
  std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::destroy((uint64_t)this + 152, *((void **)this + 20));
  std::__tree<std::string>::destroy((uint64_t)v2, *((char **)this + 17));
  std::__tree<std::__value_type<std::string,std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)this + 104, *((void **)this + 14));
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)this + 80, *((void **)this + 11));
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)this + 56, *((void **)this + 8));
  v17[0] = (void **)((char *)this + 32);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v17);
  v17[0] = (void **)((char *)this + 8);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](v17);
  quasar::Bitmap::~Bitmap(this);
}

{
  uint64_t vars8;

  kaldi::quasar::EspressoV2Chain::~EspressoV2Chain(this);
  JUMPOUT(0x1B3EA8670);
}

uint64_t kaldi::quasar::EspressoV2Chain::CreateData(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 16))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 24))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 32))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 40))();
}

uint64_t kaldi::quasar::EspressoV2Chain::CreateZeroedDataInt32(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 48))();
}

uint64_t kaldi::quasar::EspressoV2Chain::CopyFloat16(kaldi::quasar::EspressoV2Plan ***this, const kaldi::quasar::ComputeEngineBufferItf *a2, kaldi::quasar::ComputeEngineBufferItf *a3)
{
  return kaldi::quasar::EspressoV2Plan::CopyFloat16(*this[1], a2, a3);
}

void kaldi::quasar::EspressoV2Chain::CreateCopyFloat16(kaldi::quasar::EspressoV2Plan ***this, const kaldi::quasar::ComputeEngineBufferItf *a2)
{
}

uint64_t kaldi::quasar::EspressoV2Chain::CreateConcat(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 96))();
}

uint64_t kaldi::quasar::EspressoV2Chain::CreateSplit(kaldi::quasar::EspressoV2Chain *this, const kaldi::quasar::ComputeEngineBufferItf *a2)
{
  return (*(uint64_t (**)(void, const kaldi::quasar::ComputeEngineBufferItf *))(***((void ***)this + 1)
                                                                                          + 104))(**((void **)this + 1), a2);
}

uint64_t kaldi::quasar::EspressoV2Chain::CreateSlice(kaldi::quasar::EspressoV2Chain *this, const kaldi::quasar::ComputeEngineBufferItf *a2)
{
  return (*(uint64_t (**)(void, const kaldi::quasar::ComputeEngineBufferItf *))(***((void ***)this + 1)
                                                                                          + 112))(**((void **)this + 1), a2);
}

void kaldi::quasar::EspressoV2Chain::Run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "main");
  (*(void (**)(uint64_t, void **, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 144))(a1, __p, a2, a3, a4, a5);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
}

{
  void *__p[2];
  char v11;

  std::string::basic_string[abi:ne180100]<0>(__p, "main");
  (*(void (**)(uint64_t, void **, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 152))(a1, __p, a2, a3, a4, a5);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B230021C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B23002DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::EspressoV2Chain::RunFunction(uint64_t a1, uint64_t a2, long long **a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v28 = 0;
  unint64_t v29 = 0;
  unint64_t v30 = 0;
  unint64_t v10 = *a3;
  char v11 = a3[1];
  if (*a3 != v11)
  {
    do
    {
      uint64_t v12 = (void *)*((void *)v10 + 3);
      if (*((char *)v10 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)v10, *((void *)v10 + 1));
      }
      else
      {
        long long v13 = *v10;
        v26.__r_.__value_.__r.__words[2] = *((void *)v10 + 2);
        *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v13;
      }
      unint64_t v27 = v12;
      unint64_t v14 = v29;
      if (v29 >= v30)
      {
        uint64_t v16 = (uint64_t)(v29 - v28) >> 5;
        unint64_t v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 59) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v18 = v30 - v28;
        if ((uint64_t)(v30 - v28) >> 4 > v17) {
          unint64_t v17 = v18 >> 4;
        }
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v19 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v19 = v17;
        }
        void v31[4] = (void **)&v30;
        uint64_t v20 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)&v30, v19);
        uint64_t v21 = &v20[4 * v16];
        v31[0] = v20;
        v31[1] = v21;
        v31[3] = &v20[4 * v22];
        long long v23 = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
        void v21[2] = (void *)v26.__r_.__value_.__r.__words[2];
        *(_OWORD *)uint64_t v21 = v23;
        memset(&v26, 0, sizeof(v26));
        v21[3] = v27;
        void v31[2] = v21 + 4;
        std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__swap_out_circular_buffer(&v28, v31);
        unint64_t v24 = v29;
        std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)v31);
        unint64_t v29 = v24;
        if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v26.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v15 = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
        *(void *)(v29 + 16) = *((void *)&v26.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v14 = v15;
        memset(&v26, 0, sizeof(v26));
        *(void *)(v14 + ++*(_DWORD *)(result + 24) = v27;
        unint64_t v29 = v14 + 32;
      }
      v10 += 2;
    }
    while (v10 != v11);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 152))(a1, a2, &v28, a4, a5, a6);
  v31[0] = (void **)&v28;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v31);
}

void sub_1B23004E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  std::string __p = &a18;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void kaldi::quasar::EspressoV2Chain::PrepareIntermediates(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  unint64_t v110 = 0;
  unint64_t v111 = 0;
  v112[0] = 0;
  int v4 = *(char *)(a2 + 23);
  if (v4 < 0)
  {
    if (*(void *)(a2 + 8) != 4) {
      goto LABEL_7;
    }
    size_t v5 = *(_DWORD **)a2;
  }
  else
  {
    size_t v5 = (_DWORD *)a2;
    if (v4 != 4)
    {
LABEL_7:
      uint64_t v6 = *(void **)(a1 + 8);
      BOOL v7 = *(void **)(a1 + 16);
      if (v6 != v7)
      {
        do
        {
          unint64_t v8 = (uint64_t **)(*v6 + 224);
          __v.__first_ = (std::__split_buffer<std::string>::pointer)a2;
          unint64_t v9 = std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, (const void **)a2, (uint64_t)&std::piecewise_construct, (long long **)&__v);
          unint64_t v10 = v9;
          char v11 = v111;
          if ((unint64_t)v111 >= v112[0])
          {
            uint64_t v13 = (v111 - v110) >> 3;
            if ((unint64_t)(v13 + 1) >> 61) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v14 = (uint64_t)(v112[0] - (void)v110) >> 2;
            if (v14 <= v13 + 1) {
              unint64_t v14 = v13 + 1;
            }
            if (v112[0] - (void)v110 >= 0x7FFFFFFFFFFFFFF8uLL) {
              unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v15 = v14;
            }
            if (v15) {
              uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v112, v15);
            }
            else {
              uint64_t v16 = 0;
            }
            unint64_t v17 = &v16[8 * v13];
            *(void *)unint64_t v17 = v10[7];
            uint64_t v12 = v17 + 8;
            unint64_t v19 = v110;
            uint64_t v18 = v111;
            if (v111 != v110)
            {
              do
              {
                uint64_t v20 = *((void *)v18 - 1);
                v18 -= 8;
                *((void *)v17 - 1) = v20;
                v17 -= 8;
              }
              while (v18 != v19);
              uint64_t v18 = v110;
            }
            unint64_t v110 = v17;
            unint64_t v111 = v12;
            v112[0] = &v16[8 * v15];
            if (v18) {
              operator delete(v18);
            }
          }
          else
          {
            *(void *)unint64_t v111 = v9[7];
            uint64_t v12 = v11 + 8;
          }
          unint64_t v111 = v12;
          v6 += 2;
        }
        while (v6 != v7);
        goto LABEL_47;
      }
LABEL_46:
      uint64_t v12 = 0;
      goto LABEL_47;
    }
  }
  if (*v5 != 1852399981) {
    goto LABEL_7;
  }
  uint64_t v21 = *(uint64_t **)(a1 + 8);
  uint64_t v22 = *(uint64_t **)(a1 + 16);
  if (v21 == v22) {
    goto LABEL_46;
  }
  uint64_t v12 = 0;
  do
  {
    uint64_t v23 = *v21;
    if ((unint64_t)v12 >= v112[0])
    {
      uint64_t v24 = (v12 - v110) >> 3;
      if ((unint64_t)(v24 + 1) >> 61) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v25 = (uint64_t)(v112[0] - (void)v110) >> 2;
      if (v25 <= v24 + 1) {
        unint64_t v25 = v24 + 1;
      }
      if (v112[0] - (void)v110 >= 0x7FFFFFFFFFFFFFF8uLL) {
        unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v26 = v25;
      }
      if (v26) {
        unint64_t v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v112, v26);
      }
      else {
        unint64_t v27 = 0;
      }
      uint64_t v28 = &v27[8 * v24];
      *(void *)uint64_t v28 = *(void *)(v23 + 216);
      uint64_t v12 = v28 + 8;
      unint64_t v30 = v110;
      unint64_t v29 = v111;
      if (v111 != v110)
      {
        do
        {
          uint64_t v31 = *((void *)v29 - 1);
          v29 -= 8;
          *((void *)v28 - 1) = v31;
          v28 -= 8;
        }
        while (v29 != v30);
        unint64_t v29 = v110;
      }
      unint64_t v110 = v28;
      unint64_t v111 = v12;
      v112[0] = &v27[8 * v26];
      if (v29) {
        operator delete(v29);
      }
    }
    else
    {
      *(void *)uint64_t v12 = *(void *)(v23 + 216);
      v12 += 8;
    }
    unint64_t v111 = v12;
    v21 += 2;
  }
  while (v21 != v22);
LABEL_47:
  uint64_t v107 = 0;
  long long v108 = 0;
  unint64_t v109 = 0;
  long long v104 = 0;
  uint64_t v105 = 0;
  unint64_t v106 = 0;
  int v32 = v110;
  for (uint64_t i = v12; v32 != i; v32 += 8)
  {
    uint64_t v33 = v105;
    if ((unint64_t)v105 >= v106)
    {
      unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * (((char *)v105 - (char *)v104) >> 3);
      unint64_t v36 = v35 + 1;
      if (v35 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * ((uint64_t)(v106 - (void)v104) >> 3) > v36) {
        unint64_t v36 = 0x5555555555555556 * ((uint64_t)(v106 - (void)v104) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v106 - (void)v104) >> 3) >= 0x555555555555555) {
        unint64_t v37 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v37 = v36;
      }
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v106;
      if (v37) {
        unint64_t v38 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v106, v37);
      }
      else {
        unint64_t v38 = 0;
      }
      uint64_t v39 = v38 + v35;
      __v.__first_ = v38;
      __v.__begin_ = v39;
      __v.__end_cap_.__value_ = &v38[v37];
      v39->__r_.__value_.__r.__words[0] = 0;
      v39->__r_.__value_.__l.__size_ = 0;
      v39->__r_.__value_.__r.__words[2] = 0;
      __v.__end_ = v39 + 1;
      std::vector<std::vector<std::string>>::__swap_out_circular_buffer((uint64_t *)&v104, &__v);
      uint64_t v34 = v105;
      std::__split_buffer<std::vector<std::string>>::~__split_buffer((void **)&__v.__first_);
    }
    else
    {
      v105->__begin_ = 0;
      v33->__end_ = 0;
      uint64_t v34 = v33 + 1;
      v33->__end_cap_.__value_ = 0;
    }
    uint64_t v105 = v34;
    unint64_t v103 = 0;
    if (e5rt_execution_stream_operation_get_num_outputs())
    {
      last_error_message = (const char *)e5rt_get_last_error_message();
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__v);
      long long v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__v, (uint64_t)"Espresso V2 failure: ", 21);
      size_t v83 = strlen(last_error_message);
      size_t v84 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)last_error_message, v83);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)"\n", 1);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__v);
    }
    std::vector<char const*>::vector(&v100, v103);
    if (e5rt_execution_stream_operation_get_output_names())
    {
      long long v77 = (const char *)e5rt_get_last_error_message();
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__v);
      int v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__v, (uint64_t)"Espresso V2 failure: ", 21);
      size_t v79 = strlen(v77);
      uint64_t v80 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)v77, v79);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"\n", 1);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__v);
    }
    unint64_t v41 = (char **)v100;
    unint64_t v40 = v101;
    while (v41 != v40)
    {
      uint64_t v42 = v105;
      std::string::basic_string[abi:ne180100]<0>(__p, *v41);
      value = v42[-1].__end_cap_.__value_;
      std::vector<std::string>::pointer end = v42[-1].__end_;
      if (end >= value)
      {
        std::vector<std::string>::pointer begin = v42[-1].__begin_;
        unint64_t v48 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3);
        unint64_t v49 = v48 + 1;
        if (v48 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v50 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3);
        if (2 * v50 > v49) {
          unint64_t v49 = 2 * v50;
        }
        if (v50 >= 0x555555555555555) {
          unint64_t v51 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v51 = v49;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v42[-1].__end_cap_;
        if (v51) {
          uint64_t v52 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v42[-1].__end_cap_, v51);
        }
        else {
          uint64_t v52 = 0;
        }
        int64x2_t v53 = v52 + v48;
        __v.__first_ = v52;
        __v.__begin_ = v53;
        __v.__end_cap_.__value_ = &v52[v51];
        long long v54 = *(_OWORD *)__p;
        v53->__r_.__value_.__r.__words[2] = v99;
        *(_OWORD *)&v53->__r_.__value_.__l.__data_ = v54;
        __p[1] = 0;
        std::string::size_type v99 = 0;
        __p[0] = 0;
        __v.__end_ = v53 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(v42 - 1, &__v);
        int v46 = v42[-1].__end_;
        std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
      }
      else
      {
        long long v45 = *(_OWORD *)__p;
        end->__r_.__value_.__r.__words[2] = v99;
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v45;
        __p[1] = 0;
        std::string::size_type v99 = 0;
        __p[0] = 0;
        int v46 = end + 1;
        v42[-1].__end_ = end + 1;
      }
      v42[-1].__end_ = v46;
      if (SHIBYTE(v99) < 0) {
        operator delete(__p[0]);
      }
      ++v41;
    }
    uint64_t v55 = v108;
    if ((unint64_t)v108 >= v109)
    {
      unint64_t v57 = 0xAAAAAAAAAAAAAAABLL * (((char *)v108 - (char *)v107) >> 3);
      unint64_t v58 = v57 + 1;
      if (v57 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * ((uint64_t)(v109 - (void)v107) >> 3) > v58) {
        unint64_t v58 = 0x5555555555555556 * ((uint64_t)(v109 - (void)v107) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v109 - (void)v107) >> 3) >= 0x555555555555555) {
        unint64_t v59 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v59 = v58;
      }
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v109;
      if (v59) {
        unint64_t v60 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v109, v59);
      }
      else {
        unint64_t v60 = 0;
      }
      uint64_t v61 = v60 + v57;
      __v.__first_ = v60;
      __v.__begin_ = v61;
      __v.__end_cap_.__value_ = &v60[v59];
      v61->__r_.__value_.__r.__words[0] = 0;
      v61->__r_.__value_.__l.__size_ = 0;
      v61->__r_.__value_.__r.__words[2] = 0;
      __v.__end_ = v61 + 1;
      std::vector<std::vector<std::string>>::__swap_out_circular_buffer((uint64_t *)&v107, &__v);
      uint64_t v56 = v108;
      std::__split_buffer<std::vector<std::string>>::~__split_buffer((void **)&__v.__first_);
    }
    else
    {
      v108->__begin_ = 0;
      v55->__end_ = 0;
      uint64_t v56 = v55 + 1;
      v55->__end_cap_.__value_ = 0;
    }
    long long v108 = v56;
    unint64_t v97 = 0;
    if (e5rt_execution_stream_operation_get_num_inputs())
    {
      long long v89 = (const char *)e5rt_get_last_error_message();
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__v);
      long long v90 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__v, (uint64_t)"Espresso V2 failure: ", 21);
      size_t v91 = strlen(v89);
      size_t v92 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)v89, v91);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)"\n", 1);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__v);
    }
    std::vector<char const*>::vector(__p, v97);
    if (e5rt_execution_stream_operation_get_input_names())
    {
      uint64_t v85 = (const char *)e5rt_get_last_error_message();
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__v);
      uint64_t v86 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__v, (uint64_t)"Espresso V2 failure: ", 21);
      size_t v87 = strlen(v85);
      size_t v88 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)v85, v87);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)"\n", 1);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__v);
    }
    uint64_t v63 = (char **)__p[0];
    int v62 = (char **)__p[1];
    if (__p[0] != __p[1])
    {
      do
      {
        uint64_t v64 = v108;
        std::string::basic_string[abi:ne180100]<0>(v95, *v63);
        uint64_t v65 = v64[-1].__end_cap_.__value_;
        std::vector<std::string>::pointer v66 = v64[-1].__end_;
        if (v66 >= v65)
        {
          std::vector<std::string>::pointer v69 = v64[-1].__begin_;
          unint64_t v70 = 0xAAAAAAAAAAAAAAABLL * (((char *)v66 - (char *)v69) >> 3);
          unint64_t v71 = v70 + 1;
          if (v70 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v72 = 0xAAAAAAAAAAAAAAABLL * (((char *)v65 - (char *)v69) >> 3);
          if (2 * v72 > v71) {
            unint64_t v71 = 2 * v72;
          }
          if (v72 >= 0x555555555555555) {
            unint64_t v73 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v73 = v71;
          }
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v64[-1].__end_cap_;
          if (v73) {
            int v74 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v64[-1].__end_cap_, v73);
          }
          else {
            int v74 = 0;
          }
          uint64_t v75 = v74 + v70;
          __v.__first_ = v74;
          __v.__begin_ = v75;
          __v.__end_cap_.__value_ = &v74[v73];
          long long v76 = *(_OWORD *)v95;
          v75->__r_.__value_.__r.__words[2] = v96;
          *(_OWORD *)&v75->__r_.__value_.__l.__data_ = v76;
          v95[1] = 0;
          std::string::size_type v96 = 0;
          v95[0] = 0;
          __v.__end_ = v75 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(v64 - 1, &__v);
          uint64_t v68 = v64[-1].__end_;
          std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
        }
        else
        {
          long long v67 = *(_OWORD *)v95;
          v66->__r_.__value_.__r.__words[2] = v96;
          *(_OWORD *)&v66->__r_.__value_.__l.__data_ = v67;
          v95[1] = 0;
          std::string::size_type v96 = 0;
          v95[0] = 0;
          uint64_t v68 = v66 + 1;
          v64[-1].__end_ = v66 + 1;
        }
        v64[-1].__end_ = v68;
        if (SHIBYTE(v96) < 0) {
          operator delete(v95[0]);
        }
        ++v63;
      }
      while (v63 != v62);
      uint64_t v63 = (char **)__p[0];
    }
    if (v63)
    {
      __p[1] = v63;
      operator delete(v63);
    }
    if (v100)
    {
      long long v101 = (char **)v100;
      operator delete(v100);
    }
  }
  _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJNS_6vectorIP31e5rt_execution_stream_operationNS_9allocatorIS5_EEEENS3_INS3_INS_12basic_stringIcNS_11char_traitsIcEENS6_IcEEEENS6_ISD_EEEENS6_ISF_EEEESH_EEC2B8ne180100IJLm0ELm1ELm2EEJS8_SH_SH_EJEJEJRS8_RSH_SL_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSN_IJDpT2_EEEDpOT3_(a3, (uint64_t)&v110, &v107, &v104);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v104;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v107;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  if (v110)
  {
    unint64_t v111 = v110;
    operator delete(v110);
  }
}

void sub_1B2300E28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  std::__split_buffer<std::vector<std::string>>::~__split_buffer((void **)va);
  JUMPOUT(0x1B2300EF8);
}

void sub_1B2300E48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  std::__split_buffer<std::vector<std::string>>::~__split_buffer((void **)va);
  JUMPOUT(0x1B2300F08);
}

void sub_1B2300E74()
{
}

void sub_1B2300E7C()
{
}

void sub_1B2300E88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *__p, uint64_t a7, int a8, __int16 a9, char a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__pa, uint64_t a20,uint64_t a21,std::__split_buffer<std::wstring> *a22)
{
  if (SHIBYTE(a21) < 0) {
    operator delete(__pa);
  }
  JUMPOUT(0x1B2300EE0);
}

void sub_1B2300EB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__split_buffer<std::wstring> *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
}

void sub_1B2300EDC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  JUMPOUT(0x1B2300EF8);
}

void sub_1B2300EF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (__p)
  {
    a22 = (uint64_t)__p;
    operator delete(__p);
  }
  std::string __p = (void *)(v22 - 160);
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  *(void *)(v22 - 16std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = v22 - 136;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 160));
  uint64_t v24 = *(void **)(v22 - 112);
  if (v24)
  {
    *(void *)(v22 - 104) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(a1);
}

void kaldi::quasar::EspressoV2Chain::RunFunction(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t *a6)
{
  kaldi::quasar::EspressoV2Chain::PrepareIntermediates(a1, a2, &v15);
  uint64_t v10 = **(void **)(a1 + 8);
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  std::string __p = 0;
  std::vector<e5rt_execution_stream_operation *>::__init_with_size[abi:ne180100]<e5rt_execution_stream_operation **,e5rt_execution_stream_operation **>(&__p, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_, (uint64_t)(v15.__r_.__value_.__l.__size_ - v15.__r_.__value_.__r.__words[0]) >> 3);
  kaldi::quasar::EspressoV2Plan::RunOpChain(v10, (uint64_t)&__p, a3, a4, v11, a6, v17, v16);
  if (__p)
  {
    uint64_t v13 = __p;
    operator delete(__p);
  }
  uint64_t v18 = (void **)v17;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v18);
  uint64_t v18 = (void **)v16;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v18);
  if (v15.__r_.__value_.__r.__words[0])
  {
    v15.__r_.__value_.__l.__size_ = v15.__r_.__value_.__r.__words[0];
    operator delete(v15.__r_.__value_.__l.__data_);
  }
}

void sub_1B2301014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p) {
    operator delete(__p);
  }
  std::tuple<std::vector<e5rt_execution_stream_operation *>,std::vector<std::vector<std::string>>,std::vector<std::vector<std::string>>>::~tuple((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t std::tuple<std::vector<e5rt_execution_stream_operation *>,std::vector<std::vector<std::string>>,std::vector<std::vector<std::string>>>::~tuple(uint64_t a1)
{
  int v4 = (void **)(a1 + 48);
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v4);
  int v4 = (void **)(a1 + 24);
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v4);
  size_t v2 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void kaldi::quasar::EspressoV2Chain::PrepareRun(uint64_t a1, const void **a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = (uint64_t **)(a1 + 56);
  if (std::__tree<std::string>::__count_unique<std::string>(a1 + 56, a2)
    || std::__tree<std::string>::__count_unique<std::string>(a1 + 80, a2)
    || std::__tree<std::string>::__count_unique<std::string>(a1 + 128, a2))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v56);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v56, "Rebinding buffers for EspressoV2Chain is not supported!");
    goto LABEL_39;
  }
  *(void *)&long long v56 = a2;
  uint64_t v12 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v11, a2, (uint64_t)&std::piecewise_construct, (long long **)&v56);
  uint64_t v14 = (void *)*a3;
  uint64_t v13 = a3[1];
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  std::string v15 = (std::__shared_weak_count *)v12[8];
  v12[7] = (uint64_t)v14;
  v12[8] = v13;
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  *(void *)&long long v56 = a2;
  uint64_t v16 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 80), a2, (uint64_t)&std::piecewise_construct, (long long **)&v56);
  uint64_t v18 = *(uint64_t **)a6;
  uint64_t v17 = *(void *)(a6 + 8);
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
  }
  int v46 = a4;
  unint64_t v19 = (std::__shared_weak_count *)v16[8];
  v16[7] = (uint64_t)v18;
  v16[8] = v17;
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  *(void *)&long long v56 = a2;
  std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 128), a2, (uint64_t)&std::piecewise_construct, (long long **)&v56);
  if (e5rt_execution_stream_create())
  {
    last_error_message = (const char *)e5rt_get_last_error_message();
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v56);
    uint64_t v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v56, (uint64_t)"Espresso V2 failure: ", 21);
    size_t v40 = strlen(last_error_message);
    unint64_t v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)last_error_message, v40);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v41, "\n");
LABEL_39:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v56);
  }
  uint64_t v53 = 0;
  unint64_t v54 = 0;
  unint64_t v55 = 0;
  uint64_t v20 = *(long long **)*a3;
  for (uint64_t i = *(long long **)(*a3 + 8); v20 != i; v20 += 2)
  {
    uint64_t v22 = *((void *)v20 + 3);
    if (*((char *)v20 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v50, *(const std::string::value_type **)v20, *((void *)v20 + 1));
    }
    else
    {
      long long v23 = *v20;
      v50.__r_.__value_.__r.__words[2] = *((void *)v20 + 2);
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v23;
    }
    v51[0] = v22;
    unint64_t v24 = v54;
    if (v54 >= v55)
    {
      uint64_t v26 = (uint64_t)(v54 - v53) >> 5;
      unint64_t v27 = v26 + 1;
      if ((unint64_t)(v26 + 1) >> 59) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v28 = v55 - v53;
      if ((uint64_t)(v55 - v53) >> 4 > v27) {
        unint64_t v27 = v28 >> 4;
      }
      if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v29 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v29 = v27;
      }
      *((void *)&v58 + 1) = &v55;
      unint64_t v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)&v55, v29);
      uint64_t v31 = &v30[32 * v26];
      *(void *)&long long v56 = v30;
      *((void *)&v56 + 1) = v31;
      *(void *)&long long v58 = &v30[32 * v32];
      long long v33 = *(_OWORD *)&v50.__r_.__value_.__l.__data_;
      *((void *)v31 + 2) = *((void *)&v50.__r_.__value_.__l + 2);
      *(_OWORD *)uint64_t v31 = v33;
      memset(&v50, 0, sizeof(v50));
      *((void *)v31 + 3) = v51[0];
      uint64_t v57 = (uint64_t)(v31 + 32);
      std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__swap_out_circular_buffer(&v53, &v56);
      unint64_t v34 = v54;
      std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)&v56);
      unint64_t v54 = v34;
      if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v50.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      long long v25 = *(_OWORD *)&v50.__r_.__value_.__l.__data_;
      *(void *)(v54 + 16) = *((void *)&v50.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v24 = v25;
      memset(&v50, 0, sizeof(v50));
      *(void *)(v24 + ++*(_DWORD *)(result + 24) = v51[0];
      unint64_t v54 = v24 + 32;
    }
  }
  kaldi::quasar::EspressoV2Chain::PrepareIntermediates(a1, (uint64_t)a2, &v50);
  v60[0] = (long long *)a2;
  std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 128), a2, (uint64_t)&std::piecewise_construct, v60);
  unint64_t v48 = 0;
  uint64_t v49 = 0;
  std::string __p = 0;
  std::vector<e5rt_execution_stream_operation *>::__init_with_size[abi:ne180100]<e5rt_execution_stream_operation **,e5rt_execution_stream_operation **>(&__p, v50.__r_.__value_.__l.__data_, v50.__r_.__value_.__l.__size_, (uint64_t)(v50.__r_.__value_.__l.__size_ - v50.__r_.__value_.__r.__words[0]) >> 3);
  kaldi::quasar::EspressoV2Plan::PrepareOpChain(&__p, &v53, v46, *(uint64_t **)a6, v52, (uint64_t)&v56, v51, 1);
  v60[0] = (long long *)a2;
  unint64_t v35 = std::__tree<std::__value_type<std::string,std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 104), a2, (uint64_t)&std::piecewise_construct, v60);
  v60[0] = (long long *)a2;
  unint64_t v36 = std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 152), a2, (uint64_t)&std::piecewise_construct, v60);
  std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__vdeallocate((void **)v35 + 7);
  *(_OWORD *)(v35 + 7) = v56;
  v35[9] = v57;
  unint64_t v37 = (void *)v36[7];
  uint64_t v57 = 0;
  long long v56 = 0uLL;
  if (v37)
  {
    v36[8] = (uint64_t)v37;
    operator delete(v37);
    v36[7] = 0;
    v36[8] = 0;
    v36[9] = 0;
  }
  *(_OWORD *)(v36 + 7) = v58;
  v36[9] = v59;
  uint64_t v59 = 0;
  long long v58 = 0uLL;
  v60[0] = &v56;
  std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v60);
  if (__p)
  {
    unint64_t v48 = __p;
    operator delete(__p);
  }
  *(void *)&long long v56 = a2;
  std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 128), a2, (uint64_t)&std::piecewise_construct, (long long **)&v56);
  e5rt_execution_stream_prewire_in_use_allocations();
  if (!*(void *)(a1 + 176) && e5rt_async_event_create())
  {
    uint64_t v42 = (const char *)e5rt_get_last_error_message();
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v56);
    uint64_t v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v56, (uint64_t)"Espresso V2 failure: ", 21);
    size_t v44 = strlen(v42);
    long long v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)v42, v44);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"\n", 1);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v56);
  }
  *(void *)&long long v56 = v52;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v56);
  *(void *)&long long v56 = v51;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v56);
  if (v50.__r_.__value_.__r.__words[0])
  {
    v50.__r_.__value_.__l.__size_ = v50.__r_.__value_.__r.__words[0];
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  *(void *)&long long v56 = &v53;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v56);
}

void sub_1B23015F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_1B2301614()
{
  std::tuple<std::vector<e5rt_execution_stream_operation *>,std::vector<std::vector<std::string>>,std::vector<std::vector<std::string>>>::~tuple(&v0);
  JUMPOUT(0x1B230165CLL);
}

void sub_1B2301634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)&a30);
  if (a20 < 0) {
    operator delete(__p);
  }
  uint64_t v31 = (void **)&v32;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v31);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::EspressoV2Chain::RunFunction(uint64_t a1, long long *a2)
{
  int v4 = (uint64_t **)(a1 + 152);
  v14[0] = a2;
  size_t v5 = std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 152), (const void **)a2, (uint64_t)&std::piecewise_construct, v14);
  if (v5[7] == v5[8])
  {
    v14[0] = a2;
    std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 128), (const void **)a2, (uint64_t)&std::piecewise_construct, v14);
    uint64_t result = e5rt_execution_stream_execute_sync();
    if (result) {
      goto LABEL_11;
    }
  }
  else
  {
    ++*(void *)(a1 + 184);
    v14[0] = a2;
    uint64_t v6 = std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, (const void **)a2, (uint64_t)&std::piecewise_construct, v14);
    uint64_t v7 = v6[7];
    uint64_t v8 = v6[8];
    while (v7 != v8)
    {
      if (e5rt_async_event_set_active_future_value()) {
        goto LABEL_11;
      }
      v7 += 8;
    }
    v14[0] = a2;
    std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 128), (const void **)a2, (uint64_t)&std::piecewise_construct, v14);
    if (e5rt_execution_stream_submit_async() || (uint64_t result = e5rt_async_event_sync_wait(), result))
    {
LABEL_11:
      last_error_message = (const char *)e5rt_get_last_error_message();
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
      uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Espresso V2 failure: ", 21);
      size_t v12 = strlen(last_error_message);
      uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)last_error_message, v12);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "\n");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v14);
    }
  }
  return result;
}

void sub_1B2301924(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

uint64_t ___ZN5kaldi6quasar15EspressoV2Chain11RunFunctionERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4)
  {
    last_error_message = (char *)e5rt_get_last_error_message();
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
    uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Espresso V2 failure during async call: ", 39);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v6, last_error_message);
    goto LABEL_6;
  }
  uint64_t result = e5rt_async_event_signal();
  if (result)
  {
    uint64_t v7 = (const char *)e5rt_get_last_error_message();
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
    uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Espresso V2 failure: ", 21);
    size_t v9 = strlen(v7);
    uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v7, v9);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "\n");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v11);
  }
  return result;
}

void kaldi::quasar::EspressoV2TensorData::Copy(kaldi::quasar::EspressoV2TensorData *this)
{
}

void sub_1B2301A58()
{
  void *v0 = v1;
}

void sub_1B2301A6C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40ACDA1BA3);
  _Unwind_Resume(a1);
}

void kaldi::quasar::EspressoV2TensorData::CopyToMatrix(kaldi::quasar::EspressoV2TensorData *a1, int32x2_t *a2)
{
  v16[34] = 0;
  uint64_t v17 = 0;
  if (e5rt_tensor_desc_get_shape())
  {
    last_error_message = (const char *)e5rt_get_last_error_message();
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
    uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Espresso V2 failure: ", 21);
    size_t v14 = strlen(last_error_message);
    std::string v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)last_error_message, v14);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v15, "\n");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v16);
  }
  uint64_t v4 = *v17;
  uint64_t v5 = v17[1];
  kaldi::Matrix<float>::Resize(a2, *v17, v5, 1, 0);
  kaldi::quasar::EspressoV2TensorData::GetDataFloat(a1);
  if (v4)
  {
    for (uint64_t i = 0; i != v4; ++i)
    {
      if (v5)
      {
        uint64_t v8 = 0;
        uint64_t v9 = 0;
        uint64_t v10 = 0;
        uint64_t v11 = *(void *)a2 + 4 * a2[2].i32[0] * (int)i;
        do
        {
          *(_DWORD *)(v11 + (v9 >> 30)) = *(_DWORD *)(v6 + 4 * v10++);
          v9 += 0x100000000;
          v8 -= 4;
        }
        while (v5 != v10);
        v6 -= v8;
      }
    }
  }
}

uint64_t kaldi::quasar::EspressoV2TensorData::CopyToMatrix(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 24))(a1, a2 + 8);
}

float kaldi::quasar::EspressoV2TensorData::CopyToVector(kaldi::quasar::EspressoV2TensorData *a1, uint64_t a2)
{
  kaldi::quasar::EspressoV2TensorData::GetDataFloat(a1);
  uint64_t v4 = v3;
  v13[34] = 0;
  v13[35] = 0;
  if (e5rt_tensor_desc_get_shape())
  {
    last_error_message = (const char *)e5rt_get_last_error_message();
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Espresso V2 failure: ", 21);
    size_t v11 = strlen(last_error_message);
    size_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)last_error_message, v11);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v12, "\n");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
  }
  kaldi::CuVector<float>::Resize(a2, 1, 1);
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = *(void *)(a2 + 8);
  do
  {
    float result = *(float *)(v4 + 4 * v6);
    *(float *)(v7 + (v5 >> 30)) = result;
    ++v6;
    v5 += 0x100000000;
  }
  while (v6 != 1);
  return result;
}

void kaldi::quasar::EspressoV2TensorData::CopyToStdVector(kaldi::quasar::EspressoV2TensorData *a1, uint64_t a2)
{
  kaldi::quasar::EspressoV2TensorData::GetDataFloat(a1);
  uint64_t v4 = v3;
  v22[34] = 0;
  v22[35] = 0;
  if (e5rt_tensor_desc_get_shape())
  {
    last_error_message = (const char *)e5rt_get_last_error_message();
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
    unint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Espresso V2 failure: ", 21);
    size_t v20 = strlen(last_error_message);
    uint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)last_error_message, v20);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v21, "\n");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22);
  }
  uint64_t v5 = *(int **)a2;
  *(void *)(a2 + 8) = *(void *)a2;
  uint64_t v6 = 0;
  uint64_t v7 = (void *)(a2 + 16);
  do
  {
    int v8 = (int)*(float *)(v4 + 4 * v6);
    if ((unint64_t)v5 >= *v7)
    {
      uint64_t v10 = *(int **)a2;
      uint64_t v11 = ((uint64_t)v5 - *(void *)a2) >> 2;
      unint64_t v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 62) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v13 = *v7 - (void)v10;
      if (v13 >> 1 > v12) {
        unint64_t v12 = v13 >> 1;
      }
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v12;
      }
      if (v14)
      {
        std::string v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a2 + 16, v14);
        uint64_t v10 = *(int **)a2;
        uint64_t v5 = *(int **)(a2 + 8);
      }
      else
      {
        std::string v15 = 0;
      }
      uint64_t v16 = (int *)&v15[4 * v11];
      *uint64_t v16 = v8;
      uint64_t v9 = v16 + 1;
      while (v5 != v10)
      {
        int v17 = *--v5;
        *--uint64_t v16 = v17;
      }
      *(void *)a2 = v16;
      *(void *)(a2 + 8) = v9;
      *(void *)(a2 + 16) = &v15[4 * v14];
      if (v10) {
        operator delete(v10);
      }
    }
    else
    {
      *uint64_t v5 = v8;
      uint64_t v9 = v5 + 1;
    }
    *(void *)(a2 + 8) = v9;
    ++v6;
    uint64_t v5 = v9;
  }
  while (v6 != 1);
}

{
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  void *v7;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  int v16;
  const char *last_error_message;
  void *v18;
  size_t v19;
  void *v20;
  void v21[36];

  kaldi::quasar::EspressoV2TensorData::GetDataFloat(a1);
  uint64_t v4 = v3;
  v21[34] = 0;
  v21[35] = 0;
  if (e5rt_tensor_desc_get_shape())
  {
    last_error_message = (const char *)e5rt_get_last_error_message();
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v21);
    uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Espresso V2 failure: ", 21);
    unint64_t v19 = strlen(last_error_message);
    size_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)last_error_message, v19);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v20, "\n");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v21);
  }
  uint64_t v5 = *(_DWORD **)a2;
  *(void *)(a2 + 8) = *(void *)a2;
  uint64_t v6 = 0;
  uint64_t v7 = (void *)(a2 + 16);
  do
  {
    if ((unint64_t)v5 >= *v7)
    {
      uint64_t v9 = *(_DWORD **)a2;
      uint64_t v10 = ((uint64_t)v5 - *(void *)a2) >> 2;
      uint64_t v11 = v10 + 1;
      if ((unint64_t)(v10 + 1) >> 62) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v12 = *v7 - (void)v9;
      if (v12 >> 1 > v11) {
        uint64_t v11 = v12 >> 1;
      }
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
        uint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v13 = v11;
      }
      if (v13)
      {
        unint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a2 + 16, v13);
        uint64_t v9 = *(_DWORD **)a2;
        uint64_t v5 = *(_DWORD **)(a2 + 8);
      }
      else
      {
        unint64_t v14 = 0;
      }
      std::string v15 = &v14[4 * v10];
      *(_DWORD *)std::string v15 = *(_DWORD *)(v4 + 4 * v6);
      int v8 = v15 + 4;
      while (v5 != v9)
      {
        uint64_t v16 = *--v5;
        *((_DWORD *)v15 - 1) = v16;
        v15 -= 4;
      }
      *(void *)a2 = v15;
      *(void *)(a2 + 8) = v8;
      *(void *)(a2 + 16) = &v14[4 * v13];
      if (v9) {
        operator delete(v9);
      }
    }
    else
    {
      *uint64_t v5 = *(_DWORD *)(v4 + 4 * v6);
      int v8 = v5 + 1;
    }
    *(void *)(a2 + 8) = v8;
    ++v6;
    uint64_t v5 = v8;
  }
  while (v6 != 1);
}

uint64_t kaldi::quasar::EspressoV2TensorData::CopyFromImpl(kaldi::quasar::EspressoV2TensorData *this, const kaldi::quasar::ComputeEngineBufferItf *lpsrc)
{
  uint64_t result = e5rt_tensor_utils_copy_tensor();
  if (result)
  {
    last_error_message = (const char *)e5rt_get_last_error_message();
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
    uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Espresso V2 failure: ", 21);
    size_t v5 = strlen(last_error_message);
    uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)last_error_message, v5);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v6, "\n");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v7);
  }
  return result;
}

void *kaldi::quasar::EspressoV2TensorData::FlatRangeCopy(kaldi::quasar::EspressoV2TensorData *this, const kaldi::quasar::ComputeEngineBufferItf *a2, int a3, int a4, int a5)
{
  uint64_t v9 = (*(uint64_t (**)(const kaldi::quasar::ComputeEngineBufferItf *))(*(void *)a2 + 152))(a2);
  kaldi::quasar::EspressoV2TensorData::GetWritableDataFloat(this);
  if (a4 - a3 < 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "srcend - srcstart >= 0");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
  }
  uint64_t v11 = (void *)(v10 + 4 * a5);
  return memcpy(v11, (const void *)(v9 + 4 * a3), 4 * (a4 - a3));
}

float kaldi::quasar::EspressoV2TensorData::FlatRangeCopy(kaldi::quasar::EspressoV2TensorData *this, int *a2, unsigned int a3, int a4)
{
  if ((a3 & 0x80000000) != 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v12, "length >= 0");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12);
  }
  kaldi::quasar::EspressoV2TensorData::GetWritableDataFloat(this);
  if (a3)
  {
    uint64_t v9 = (float *)(v7 + 4 * a4);
    uint64_t v10 = a3;
    do
    {
      int v11 = *a2++;
      float result = (float)v11;
      *v9++ = (float)v11;
      --v10;
    }
    while (v10);
  }
  return result;
}

void *kaldi::quasar::EspressoV2TensorData::FlatRangeCopy(kaldi::quasar::EspressoV2TensorData *this, const float *a2, unsigned int a3, int a4)
{
  if ((a3 & 0x80000000) != 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "length >= 0");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
  kaldi::quasar::EspressoV2TensorData::GetWritableDataFloat(this);
  int v8 = (void *)(v7 + 4 * a4);
  return memcpy(v8, a2, 4 * a3);
}

float kaldi::quasar::EspressoV2TensorData::AssignScalar(kaldi::quasar::EspressoV2TensorData *this, int a2, int a3)
{
  kaldi::quasar::EspressoV2TensorData::GetWritableDataFloat(this);
  float result = (float)a2;
  *(float *)(v6 + 4 * a3) = (float)a2;
  return result;
}

void kaldi::quasar::EspressoV2TensorData::AssignScalar(kaldi::quasar::EspressoV2TensorData *this, float a2, int a3)
{
  kaldi::quasar::EspressoV2TensorData::GetWritableDataFloat(this);
  *(float *)(v5 + 4 * a3) = a2;
}

float kaldi::quasar::EspressoV2TensorData::GetFloatScalar(kaldi::quasar::EspressoV2TensorData *this, int a2)
{
  kaldi::quasar::EspressoV2TensorData::GetDataFloat(this);
  return *(float *)(v3 + 4 * a2);
}

void kaldi::quasar::EspressoV2TensorData::GetWritableDataFloat(kaldi::quasar::EspressoV2TensorData *this)
{
  int v7 = 0;
  if (e5rt_tensor_desc_dtype_get_component_dtype()
    || e5rt_tensor_desc_dtype_get_component_pack())
  {
    last_error_message = (const char *)e5rt_get_last_error_message();
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Espresso V2 failure: ", 21);
    size_t v4 = strlen(last_error_message);
    uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)last_error_message, v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, "\n");
  }
  else
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Not implemented GetWritableDataFloat from non-E5RT_TENSOR_DESC_COMPONENT_DTYPE_FLOAT, non-fp32 types", 100);
    uint64_t v1 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)", ", 2);
    std::ostream::operator<<();
  }
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v6);
}

void kaldi::quasar::EspressoV2TensorData::GetDataFloat(kaldi::quasar::EspressoV2TensorData *this)
{
  int v6 = 0;
  if (e5rt_tensor_desc_dtype_get_component_dtype())
  {
    last_error_message = (const char *)e5rt_get_last_error_message();
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
    size_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Espresso V2 failure: ", 21);
    size_t v3 = strlen(last_error_message);
    size_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)last_error_message, v3);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "\n");
  }
  else
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Not implemented GetDataFloat const from non-E5RT_TENSOR_DESC_COMPONENT_DTYPE_FLOAT types", 88);
    std::ostream::operator<<();
  }
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5);
}

uint64_t kaldi::quasar::EspressoV2TensorData::GetNumDims(kaldi::quasar::EspressoV2TensorData *this)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  if (e5rt_tensor_desc_get_shape())
  {
    last_error_message = (const char *)e5rt_get_last_error_message();
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    size_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Espresso V2 failure: ", 21);
    size_t v4 = strlen(last_error_message);
    uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)last_error_message, v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, "\n");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v6);
  }
  return v7;
}

uint64_t kaldi::quasar::EspressoV2TensorData::GetDimSize(kaldi::quasar::EspressoV2TensorData *this, int a2)
{
  void v8[34] = 0;
  uint64_t v9 = 0;
  if (e5rt_tensor_desc_get_shape())
  {
    last_error_message = (const char *)e5rt_get_last_error_message();
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
    uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Espresso V2 failure: ", 21);
    size_t v6 = strlen(last_error_message);
    uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)last_error_message, v6);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, "\n");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8);
  }
  return *(void *)(v9 + 8 * a2);
}

void kaldi::quasar::EspressoV2TensorData::Reshape()
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented TODO");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

unsigned __int8 *std::__find_impl[abi:ne180100]<std::string const*,std::string const*,char [4],std::__identity>(unsigned __int8 *a1, unsigned __int8 *a2, char *__s)
{
  size_t v3 = a1;
  if (a1 != a2)
  {
    size_t v6 = strlen(__s);
    while (1)
    {
      if ((char)v3[23] < 0)
      {
        if (v6 == *((void *)v3 + 1))
        {
          if (v6 == -1) {
LABEL_14:
          }
            std::string::__throw_out_of_range[abi:ne180100]();
          uint64_t v7 = *(unsigned __int8 **)v3;
LABEL_10:
          if (!memcmp(v7, __s, v6)) {
            return v3;
          }
        }
      }
      else if (v6 == v3[23])
      {
        uint64_t v7 = v3;
        if (v6 == -1) {
          goto LABEL_14;
        }
        goto LABEL_10;
      }
      v3 += 24;
      if (v3 == a2) {
        return a2;
      }
    }
  }
  return v3;
}

kaldi::quasar::EspressoV2NetworkConfig *kaldi::quasar::EspressoV2NetworkConfig::EspressoV2NetworkConfig(kaldi::quasar::EspressoV2NetworkConfig *this, const kaldi::quasar::EspressoV2NetworkConfig *a2)
{
  *(void *)this = &unk_1F0A511C0;
  *((unsigned char *)this + 8) = *((unsigned char *)a2 + 8);
  *((void *)this + 2) = *((void *)a2 + 2);
  uint64_t v4 = *((void *)a2 + 3);
  *((void *)this + 3) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *((_WORD *)this + 16) = *((_WORD *)a2 + 16);
  *(void *)this = &unk_1F0A51258;
  if (*((char *)a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 40), *((const std::string::value_type **)a2 + 5), *((void *)a2 + 6));
  }
  else
  {
    long long v5 = *(_OWORD *)((char *)a2 + 40);
    *((void *)this + 7) = *((void *)a2 + 7);
    *(_OWORD *)((char *)this + 4std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = v5;
  }
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 1std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 64), *((long long **)a2 + 8), *((long long **)a2 + 9), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 9) - *((void *)a2 + 8)) >> 3));
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t *)this + 11, (const void ***)a2 + 11);
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 112), *((long long **)a2 + 14), *((long long **)a2 + 15), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 15) - *((void *)a2 + 14)) >> 3));
  if (*((char *)a2 + 159) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 136), *((const std::string::value_type **)a2 + 17), *((void *)a2 + 18));
  }
  else
  {
    long long v6 = *(_OWORD *)((char *)a2 + 136);
    *((void *)this + 19) = *((void *)a2 + 19);
    *(_OWORD *)((char *)this + 136) = v6;
  }
  *((void *)this + 2std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = 0;
  *((void *)this + 21) = 0;
  *((void *)this + 22) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 160), *((long long **)a2 + 20), *((long long **)a2 + 21), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 21) - *((void *)a2 + 20)) >> 3));
  *((void *)this + 23) = 0;
  *((void *)this + ++*(_DWORD *)(result + 24) = 0;
  *((void *)this + 25) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 184), *((long long **)a2 + 23), *((long long **)a2 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 24) - *((void *)a2 + 23)) >> 3));
  return this;
}

void sub_1B2302CC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v4, *(void **)(v2 + 96));
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 63) < 0) {
    operator delete(*v3);
  }
  kaldi::quasar::ComputeEngineConfigItf::~ComputeEngineConfigItf((kaldi::quasar::ComputeEngineConfigItf *)v2);
  _Unwind_Resume(a1);
}

void sub_1B2302D50()
{
}

void *kaldi::quasar::EspressoV2TensorData::EspressoV2TensorData(void *a1)
{
  uint64_t v2 = kaldi::quasar::ComputeEngineBufferItf::ComputeEngineBufferItf(a1);
  *uint64_t v2 = &unk_1F0A50F18;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  *((_OWORD *)v2 + 4) = 0u;
  if (e5rt_io_port_retain_tensor_desc())
  {
    last_error_message = (const char *)e5rt_get_last_error_message();
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
    long long v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Espresso V2 failure: ", 21);
    size_t v6 = strlen(last_error_message);
    uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)last_error_message, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"\n", 1);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v16);
  }
  if (e5rt_tensor_desc_retain_dtype())
  {
    uint64_t v8 = (const char *)e5rt_get_last_error_message();
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
    uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Espresso V2 failure: ", 21);
    size_t v10 = strlen(v8);
    int v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v8, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"\n", 1);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v16);
  }
  if (e5rt_tensor_desc_alloc_buffer_object())
  {
    unint64_t v12 = (const char *)e5rt_get_last_error_message();
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
    uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Espresso V2 failure: ", 21);
    size_t v14 = strlen(v12);
    std::string v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v12, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"\n", 1);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v16);
  }
  return a1;
}

{
  void *v2;

  uint64_t v2 = kaldi::quasar::ComputeEngineBufferItf::ComputeEngineBufferItf(a1);
  *uint64_t v2 = &unk_1F0A50F18;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  *((_OWORD *)v2 + 4) = 0u;
  kaldi::quasar::EspressoV2TensorData::InitWithShape();
  return a1;
}

void sub_1B2302F34(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 79) < 0) {
    operator delete(*(void **)(v1 + 56));
  }
  kaldi::quasar::ComputeEngineBufferItf::~ComputeEngineBufferItf((void **)v1);
  _Unwind_Resume(a1);
}

std::string *_ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJNS_6vectorIP31e5rt_execution_stream_operationNS_9allocatorIS5_EEEENS3_INS3_INS_12basic_stringIcNS_11char_traitsIcEENS6_IcEEEENS6_ISD_EEEENS6_ISF_EEEESH_EEC2B8ne180100IJLm0ELm1ELm2EEJS8_SH_SH_EJEJEJRS8_RSH_SL_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSN_IJDpT2_EEEDpOT3_(std::string *a1, uint64_t a2, long long ***a3, long long ***a4)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::vector<e5rt_execution_stream_operation *>::__init_with_size[abi:ne180100]<e5rt_execution_stream_operation **,e5rt_execution_stream_operation **>(a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  a1[1].__r_.__value_.__r.__words[0] = 0;
  a1[1].__r_.__value_.__l.__size_ = 0;
  a1[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::vector<std::string>>::__init_with_size[abi:ne180100]<std::vector<std::string>*,std::vector<std::string>*>(a1 + 1, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (a3[1] - *a3));
  a1[2].__r_.__value_.__r.__words[0] = 0;
  a1[2].__r_.__value_.__l.__size_ = 0;
  a1[2].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::vector<std::string>>::__init_with_size[abi:ne180100]<std::vector<std::string>*,std::vector<std::string>*>(a1 + 2, *a4, a4[1], 0xAAAAAAAAAAAAAAABLL * (a4[1] - *a4));
  return a1;
}

void sub_1B2303018(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  uint64_t v4 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

std::string *std::vector<std::vector<std::string>>::__init_with_size[abi:ne180100]<std::vector<std::string>*,std::vector<std::string>*>(std::string *result, long long **a2, long long **a3, unint64_t a4)
{
  if (a4)
  {
    size_t v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    float result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::string>>,std::vector<std::string>*,std::vector<std::string>*,std::vector<std::string>*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1B23030B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void kaldi::quasar::EspressoV2TensorData::EspressoV2TensorData(kaldi::quasar::EspressoV2TensorData *this, const kaldi::quasar::EspressoV2TensorData *a2)
{
  uint64_t v2 = kaldi::quasar::ComputeEngineBufferItf::ComputeEngineBufferItf(this);
  *uint64_t v2 = &unk_1F0A50F18;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  *((_OWORD *)v2 + 4) = 0u;
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Copies of espressoV2 Tensors are not supported", 46);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
}

void sub_1B2303150(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 79) < 0) {
    operator delete(*(void **)(v1 + 56));
  }
  kaldi::quasar::ComputeEngineBufferItf::~ComputeEngineBufferItf((void **)v1);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<std::string,e5rt_execution_stream_operation **>>::__assign_with_size[abi:ne180100]<std::pair<std::string,e5rt_execution_stream_operation **> const*,std::pair<std::string,e5rt_execution_stream_operation **> const*>(uint64_t a1, std::string *__str, long long *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(std::string **)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 5)
  {
    std::vector<std::pair<std::string,float>>::__vdeallocate((uint64_t *)a1);
    if (a4 >> 59) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v11 = v10 >> 4;
    if (v10 >> 4 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    std::vector<quasar::TextTokenizer::Token>::__vallocate[abi:ne180100]((void *)a1, v12);
    uint64_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,e5rt_execution_stream_operation **>>,std::pair<std::string,e5rt_execution_stream_operation **> const*,std::pair<std::string,e5rt_execution_stream_operation **> const*,std::pair<std::string,e5rt_execution_stream_operation **>*>(v8, (long long *)__str, a3, *(std::string **)(a1 + 8));
    goto LABEL_11;
  }
  unint64_t v14 = (uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 5;
  if (v14 < a4)
  {
    std::string v15 = (std::string *)((char *)__str + 32 * v14);
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,quasar::EuclidNeighbor *,quasar::EuclidNeighbor *,quasar::EuclidNeighbor *,0>(__str, v15, v9);
    uint64_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,e5rt_execution_stream_operation **>>,std::pair<std::string,e5rt_execution_stream_operation **> const*,std::pair<std::string,e5rt_execution_stream_operation **> const*,std::pair<std::string,e5rt_execution_stream_operation **>*>(v8, (long long *)v15, a3, *(std::string **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v13;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,quasar::EuclidNeighbor *,quasar::EuclidNeighbor *,quasar::EuclidNeighbor *,0>(__str, (std::string *)a3, v9);
  uint64_t v17 = v16;
  uint64_t v18 = *(void *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      if (*(char *)(v18 - 9) < 0) {
        operator delete(*(void **)(v18 - 32));
      }
      v18 -= 32;
    }
    while (v18 != v17);
  }
  *(void *)(a1 + 8) = v17;
}

void sub_1B23032AC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B23032B4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,e5rt_execution_stream_operation **>>,std::pair<std::string,e5rt_execution_stream_operation **> const*,std::pair<std::string,e5rt_execution_stream_operation **> const*,std::pair<std::string,e5rt_execution_stream_operation **>*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  uint64_t v4 = this;
  unint64_t v12 = this;
  uint64_t v13 = this;
  v10[0] = a1;
  v10[1] = &v12;
  void v10[2] = &v13;
  char v11 = 0;
  if (a2 != a3)
  {
    size_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        uint64_t v8 = v13;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
        uint64_t v8 = v4;
      }
      v4[1].__r_.__value_.__r.__words[0] = *((void *)v6 + 3);
      v6 += 2;
      uint64_t v4 = (std::string *)((char *)v8 + 32);
      uint64_t v13 = (std::string *)((char *)v8 + 32);
    }
    while (v6 != a3);
  }
  char v11 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,e5rt_execution_stream_operation **>>,std::pair<std::string,e5rt_execution_stream_operation **>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
  return v4;
}

void sub_1B2303374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,e5rt_execution_stream_operation **>>,std::pair<std::string,e5rt_execution_stream_operation **>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::Token>,quasar::TextTokenizer::Token*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::vector<std::pair<std::string,e5rt_execution_stream_operation **>>::__emplace_back_slow_path<std::string const&,e5rt_execution_stream_operation **>(uint64_t *a1, long long *a2, void *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (a1[1] - *a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v10 = a1[2] - v4;
  if (v10 >> 4 > v6) {
    unint64_t v6 = v10 >> 4;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v6;
  }
  size_t v20 = a1 + 2;
  if (v11) {
    unint64_t v12 = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v9, v11);
  }
  else {
    unint64_t v12 = 0;
  }
  uint64_t v13 = (std::string *)&v12[4 * v5];
  v17[0] = v12;
  v17[1] = v13;
  uint64_t v18 = v13;
  unint64_t v19 = (char *)&v12[4 * v11];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    uint64_t v13 = v18;
  }
  else
  {
    long long v14 = *a2;
    v13->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
  }
  v12[4 * v5 + 3] = *a3;
  uint64_t v18 = (std::string *)((char *)v13 + 32);
  std::vector<std::pair<std::string,e5rt_execution_stream_operation **>>::__swap_out_circular_buffer(a1, v17);
  uint64_t v15 = a1[1];
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)v17);
  return v15;
}

void sub_1B23034C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::string,e5rt_execution_stream_operation **>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,e5rt_execution_stream_operation **>>,std::reverse_iterator<std::pair<std::string,e5rt_execution_stream_operation **>*>,std::reverse_iterator<std::pair<std::string,e5rt_execution_stream_operation **>*>,std::reverse_iterator<std::pair<std::string,e5rt_execution_stream_operation **>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,e5rt_execution_stream_operation **>>,std::reverse_iterator<std::pair<std::string,e5rt_execution_stream_operation **>*>,std::reverse_iterator<std::pair<std::string,e5rt_execution_stream_operation **>*>,std::reverse_iterator<std::pair<std::string,e5rt_execution_stream_operation **>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = a7;
    do
    {
      long long v9 = *(_OWORD *)(a3 - 32);
      *(void *)(v8 - 16) = *(void *)(a3 - 16);
      *(_OWORD *)(v8 - 32) = v9;
      *(void *)(a3 - ++*(_DWORD *)(result + 24) = 0;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(v8 - 8) = *(void *)(a3 - 8);
      v8 -= 32;
      v7 -= 32;
      a3 -= 32;
    }
    while (a3 != a5);
    *((void *)&v15 + 1) = v8;
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,e5rt_execution_stream_operation **>>,std::reverse_iterator<std::pair<std::string,e5rt_execution_stream_operation **>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,e5rt_execution_stream_operation **>>,std::reverse_iterator<std::pair<std::string,e5rt_execution_stream_operation **>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::Token>,std::reverse_iterator<quasar::TextTokenizer::Token*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void sub_1B23036A8(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 79) < 0) {
    operator delete(*(void **)(v1 + 56));
  }
  kaldi::quasar::ComputeEngineBufferItf::~ComputeEngineBufferItf((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::EspressoV2TensorData::InitWithShape()
{
  if (e5rt_tensor_desc_dtype_create()
    || e5rt_tensor_desc_create()
    || (uint64_t result = e5rt_tensor_desc_alloc_buffer_object(), result))
  {
    last_error_message = (const char *)e5rt_get_last_error_message();
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
    uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Espresso V2 failure: ", 21);
    size_t v3 = strlen(last_error_message);
    uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)last_error_message, v3);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "\n");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5);
  }
  return result;
}

char *std::vector<unsigned long>::__init_with_size[abi:ne180100]<std::__wrap_iter<long long const*>,std::__wrap_iter<long long const*>>(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = (void *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      uint64_t v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_1B23038B8(_Unwind_Exception *exception_object)
{
  size_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<long long>::__init_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = (void *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      uint64_t v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_1B230392C(_Unwind_Exception *exception_object)
{
  size_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&> const*,std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&> const*,std::insert_iterator<std::map<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>>@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5 = a1;
  *(void *)&long long v11 = a3;
  *((void *)&v11 + 1) = a4;
  if (a1 != a2)
  {
    do
    {
      if (*(char *)(v5 + 23) < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v5, *(void *)(v5 + 8));
      }
      else {
        std::string __p = *(std::string *)v5;
      }
      uint64_t v10 = *(void *)(v5 + 24);
      std::insert_iterator<std::map<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::operator=[abi:ne180100]((uint64_t)&v11, (const void **)&__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      v5 += 32;
    }
    while (v5 != a2);
    uint64_t v5 = a2;
  }
  *(void *)a5 = v5;
  double result = *(double *)&v11;
  *(_OWORD *)(a5 + 8) = v11;
  return result;
}

void sub_1B23039F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::insert_iterator<std::map<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::operator=[abi:ne180100](uint64_t a1, const void **a2)
{
  size_t v3 = std::__tree<std::__value_type<std::string,BOOL *>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL *>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,BOOL *> const&>(*(uint64_t ***)a1, *(uint64_t **)(a1 + 8), a2, (uint64_t)a2);
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = (uint64_t *)v3[1];
  if (v4)
  {
    do
    {
      uint64_t v5 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  else
  {
    do
    {
      uint64_t v5 = (uint64_t *)v3[2];
      BOOL v6 = *v5 == (void)v3;
      size_t v3 = v5;
    }
    while (!v6);
  }
  *(void *)(a1 + 8) = v5;
  return a1;
}

void std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        BOOL v6 = v4 - 24;
        std::__tree<std::__value_type<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>::destroy((uint64_t)(v4 - 24), *((void **)v4 - 2));
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__tree<std::__value_type<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>,0>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    size_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

uint64_t std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>,std::reverse_iterator<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>,std::reverse_iterator<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>,std::reverse_iterator<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>,std::reverse_iterator<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v19 = a6;
  *((void *)&v19 + 1) = a7;
  long long v18 = v19;
  v16[0] = a1;
  v16[1] = &v18;
  void v16[2] = &v19;
  if (a3 == a5)
  {
    uint64_t v14 = a6;
  }
  else
  {
    uint64_t v8 = a3;
    do
    {
      uint64_t v9 = *(void *)(v8 - 24);
      v8 -= 24;
      *(void *)(v7 - ++*(_DWORD *)(result + 24) = v9;
      uint64_t v10 = (void *)(a3 - 16);
      uint64_t v11 = *(void *)(a3 - 16);
      *(void *)(v7 - 16) = v11;
      uint64_t v12 = v7 - 16;
      uint64_t v13 = *(void *)(a3 - 8);
      *(void *)(v7 - 8) = v13;
      if (v13)
      {
        *(void *)(v11 + 16) = v12;
        *(void *)(a3 - ++*(_DWORD *)(result + 24) = v10;
        *uint64_t v10 = 0;
        *(void *)(a3 - 8) = 0;
      }
      else
      {
        *(void *)(v7 - ++*(_DWORD *)(result + 24) = v12;
      }
      uint64_t v7 = *((void *)&v19 + 1) - 24;
      *((void *)&v19 + 1) -= 24;
      a3 = v8;
    }
    while (v8 != a5);
    uint64_t v14 = v19;
  }
  char v17 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v16);
  return v14;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    std::__tree<std::__value_type<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>::destroy(v1, *(void **)(v1 + 8));
    v1 += 24;
  }
}

void **std::__split_buffer<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 24;
    std::__tree<std::__value_type<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>::destroy(i - 24, *(void **)(i - 16));
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    std::__tree<std::__value_type<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 32);
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    *((void *)v6 + 6) = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  *((void *)v6 + 7) = 0;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_1B2303F38(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void *std::vector<e5rt_execution_stream_operation *>::__init_with_size[abi:ne180100]<e5rt_execution_stream_operation **,e5rt_execution_stream_operation **>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B2304008(_Unwind_Exception *exception_object)
{
  size_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<std::shared_ptr<kaldi::quasar::EspressoV2Plan>>::__init_with_size[abi:ne180100]<std::shared_ptr<kaldi::quasar::EspressoV2Plan>*,std::shared_ptr<kaldi::quasar::EspressoV2Plan>*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<kaldi::quasar::EspressoV2Plan>>,std::shared_ptr<kaldi::quasar::EspressoV2Plan>*,std::shared_ptr<kaldi::quasar::EspressoV2Plan>*,std::shared_ptr<kaldi::quasar::EspressoV2Plan>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B230408C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<kaldi::quasar::EspressoV2Plan>>,std::shared_ptr<kaldi::quasar::EspressoV2Plan>*,std::shared_ptr<kaldi::quasar::EspressoV2Plan>*,std::shared_ptr<kaldi::quasar::EspressoV2Plan>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  _DWORD v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      void *v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<kaldi::quasar::EspressoV2Plan>>,std::shared_ptr<kaldi::quasar::EspressoV2Plan>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<kaldi::quasar::EspressoV2Plan>>,std::shared_ptr<kaldi::quasar::EspressoV2Plan>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>,std::shared_ptr<kaldi::quasar::ComputeEngineItf>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::__tree<std::__value_type<std::string,std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,0>(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 24);
  std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    char v8 = v6;
    std::__tree<std::__value_type<std::string,std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 4);
  char v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_1B2304344(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__vdeallocate(void **a1)
{
  uint64_t v1 = (char *)*a1;
  if (*a1)
  {
    size_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        uint64_t v5 = v3 - 24;
        std::__tree<std::__value_type<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>::destroy((uint64_t)(v3 - 24), *((void **)v3 - 2));
        size_t v3 = v5;
      }
      while (v5 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t quasar::EvaluationTask::EvaluationTask(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = a4;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  kaldi::SplitStringToVector((const std::string *)a2, "-", 1, (uint64_t)&v49);
  if (v50 - (void)v49 != 48)
  {
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v32 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
    uint64_t v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"invalid evaluation task specification ", 38);
    int v29 = *(char *)(a2 + 23);
    if (v29 >= 0) {
      uint64_t v30 = a2;
    }
    else {
      uint64_t v30 = *(void *)a2;
    }
    if (v29 >= 0) {
      uint64_t v31 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v31 = *(void *)(a2 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, v30, v31);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v32);
  }
  uint64_t v7 = 0;
  char v8 = "train";
  while (std::string::compare(v49, v8))
  {
    ++v7;
    v8 += 20;
    if (v7 == 4) {
      goto LABEL_5;
    }
  }
  *(_DWORD *)a1 = v7;
  if (v7 == 4)
  {
LABEL_5:
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v32 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
    long long v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"invalid data specifier: ", 24);
    int v10 = SHIBYTE(v49->__r_.__value_.__r.__words[2]);
    if (v10 >= 0) {
      uint64_t v11 = v49;
    }
    else {
      uint64_t v11 = (const std::string *)v49->__r_.__value_.__r.__words[0];
    }
    if (v10 >= 0) {
      std::string::size_type size = HIBYTE(v49->__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v49->__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v11, size);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v32);
  }
  uint64_t v13 = 0;
  for (char i = 1; ; char i = 0)
  {
    char v15 = i;
    if (!std::string::compare(v49 + 1, &quasar::EvaluationTask::metricOptions[20 * v13])) {
      break;
    }
    uint64_t v13 = 1;
    if ((v15 & 1) == 0)
    {
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v32 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
      uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"invalid metric specifier: ", 26);
      int v17 = SHIBYTE(v49[1].__r_.__value_.__r.__words[2]);
      if (v17 >= 0) {
        std::string::pointer data = v49 + 1;
      }
      else {
        std::string::pointer data = (const std::string *)v49[1].__r_.__value_.__l.__data_;
      }
      if (v17 >= 0) {
        std::string::size_type v19 = HIBYTE(v49[1].__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v19 = v49[1].__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)data, v19);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v32);
    }
  }
  *(_DWORD *)(a1 + 4) = v13;
  uint64_t v20 = *(unsigned __int8 *)(a3 + 23);
  if ((v20 & 0x80u) != 0) {
    uint64_t v20 = *(void *)(a3 + 8);
  }
  if (v20)
  {
    uint64_t v21 = 0;
    for (uint64_t j = "none"; std::string::compare((const std::string *)a3, j); j += 20)
    {
      if (++v21 == 3)
      {
        long long v47 = 0u;
        long long v48 = 0u;
        long long v45 = 0u;
        long long v46 = 0u;
        long long v43 = 0u;
        long long v44 = 0u;
        long long v41 = 0u;
        long long v42 = 0u;
        long long v39 = 0u;
        long long v40 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        long long v33 = 0u;
        long long v34 = 0u;
        long long v32 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
        long long v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"invalid optimization specifier: ", 32);
        int v24 = *(char *)(a3 + 23);
        if (v24 >= 0) {
          uint64_t v25 = a3;
        }
        else {
          uint64_t v25 = *(void *)a3;
        }
        if (v24 >= 0) {
          uint64_t v26 = *(unsigned __int8 *)(a3 + 23);
        }
        else {
          uint64_t v26 = *(void *)(a3 + 8);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, v25, v26);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v32);
      }
    }
    *(_DWORD *)(a1 + 8) = v21;
  }
  *(void *)&long long v32 = &v49;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  return a1;
}

void sub_1B2304758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  a9 = (void **)(v9 - 88);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void quasar::EvaluationTask::printTask(quasar::EvaluationTask *this@<X0>, std::string *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, &quasar::EvaluationTask::dataSetOptions[20 * *(unsigned int *)this]);
  uint64_t v4 = std::string::append(&v11, "-");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v12.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, &quasar::EvaluationTask::metricOptions[20 * *((unsigned int *)this + 1)]);
  if ((v10 & 0x80u) == 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if ((v10 & 0x80u) == 0) {
    std::string::size_type v7 = v10;
  }
  else {
    std::string::size_type v7 = (std::string::size_type)__p[1];
  }
  char v8 = std::string::append(&v12, (const std::string::value_type *)v6, v7);
  *a2 = *v8;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if ((char)v10 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
}

void sub_1B2304870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void quasar::EvaluationTask::optimizationPtree(quasar::EvaluationTask *this@<X0>, float a2@<S0>, quasar::PTree *a3@<X8>)
{
  quasar::PTree::PTree(a3);
  std::string::basic_string[abi:ne180100]<0>(v14, "select-based-on");
  quasar::EvaluationTask::printTask(this, &__p);
  quasar::PTree::PTree(&Type, &__p);
  quasar::PTree::putChild((uint64_t)a3, (uint64_t)v14, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v15 < 0) {
    operator delete(v14[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v14, "optimization-method");
  std::string::basic_string[abi:ne180100]<0>(&__p, &quasar::EvaluationTask::optimizeOptions[20 * *((unsigned int *)this + 2)]);
  quasar::PTree::PTree(&Type, &__p);
  quasar::PTree::putChild((uint64_t)a3, (uint64_t)v14, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v15 < 0) {
    operator delete(v14[0]);
  }
  uint64_t v6 = (quasar *)std::string::basic_string[abi:ne180100]<0>(v14, "best-weight");
  int Type = quasar::getType(v6, a2);
  std::to_string(&v9, a2);
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  char v13 = 1;
  quasar::PTree::putChild((uint64_t)a3, (uint64_t)v14, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v15 < 0) {
    operator delete(v14[0]);
  }
}

void sub_1B2304A3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  quasar::PTree::~PTree((quasar::PTree *)&a15);
  if (*(char *)(v16 - 33) < 0) {
    operator delete(*(void **)(v16 - 56));
  }
  quasar::PTree::~PTree(v15);
  _Unwind_Resume(a1);
}

uint64_t quasar::getFloatRangeFromSpecifier(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = *(unsigned __int8 *)(a1 + 23);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a1 + 8);
  }
  if (!v3) {
    return 0;
  }
  long long v45 = 0;
  long long v46 = 0;
  uint64_t v47 = 0;
  kaldi::SplitStringToFloats<float>(a1, ":", 1, &v45);
  if ((char *)v46 - (char *)v45 == 12)
  {
    float v7 = v45[2];
    if (v7 <= *v45 || (float v8 = v45[1], fabsf(v8) < 0.000001))
    {
      if (quasar::gLogLevel >= 2)
      {
        long long v43 = 0u;
        long long v44 = 0u;
        long long v41 = 0u;
        long long v42 = 0u;
        long long v39 = 0u;
        long long v40 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        long long v33 = 0u;
        long long v34 = 0u;
        long long v31 = 0u;
        long long v32 = 0u;
        long long v29 = 0u;
        long long v30 = 0u;
        long long v28 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v28);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"weight list contains invalid range specification (should be e.g.\"0.0:0.2:10.0\")", 79);
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v28);
      }
LABEL_16:
      uint64_t v9 = 0;
      goto LABEL_42;
    }
    float v10 = (float)(v7 - *v45) * 1000.0 / v8;
    int v11 = (int)(floor(roundf(v10) * 0.001) + 1.0);
    if (v11 > a3)
    {
      if (quasar::gLogLevel >= 2)
      {
        long long v43 = 0u;
        long long v44 = 0u;
        long long v41 = 0u;
        long long v42 = 0u;
        long long v39 = 0u;
        long long v40 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        long long v33 = 0u;
        long long v34 = 0u;
        long long v31 = 0u;
        long long v32 = 0u;
        long long v29 = 0u;
        long long v30 = 0u;
        long long v28 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v28);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"weight list range specification exceeds maximum number of weights: ", 67);
        std::ostream::operator<<();
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v28);
      }
      goto LABEL_16;
    }
    std::vector<float>::reserve((void **)a2, v11);
    uint64_t v12 = v45;
    for (float i = *v45; ; float i = v15 + v45[1])
    {
      float v14 = v12[2];
      if (i > v14
        && (COERCE_INT(fabs(i - v14)) > 2139095039 || fabsf(i - v14) > (float)((float)(fabsf(i) + fabsf(v14)) * 0.001)))
      {
        break;
      }
      if (i <= v14) {
        float v15 = i;
      }
      else {
        float v15 = v12[2];
      }
      int v17 = *(float **)(a2 + 8);
      unint64_t v16 = *(void *)(a2 + 16);
      if ((unint64_t)v17 >= v16)
      {
        std::string::size_type v19 = *(float **)a2;
        uint64_t v20 = ((uint64_t)v17 - *(void *)a2) >> 2;
        unint64_t v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v22 = v16 - (void)v19;
        if (v22 >> 1 > v21) {
          unint64_t v21 = v22 >> 1;
        }
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v23 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v23 = v21;
        }
        if (v23)
        {
          int v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a2 + 16, v23);
          std::string::size_type v19 = *(float **)a2;
          int v17 = *(float **)(a2 + 8);
        }
        else
        {
          int v24 = 0;
        }
        uint64_t v25 = (float *)&v24[4 * v20];
        *uint64_t v25 = v15;
        long long v18 = v25 + 1;
        while (v17 != v19)
        {
          int v26 = *((_DWORD *)v17-- - 1);
          *((_DWORD *)v25-- - 1) = v26;
        }
        *(void *)a2 = v25;
        *(void *)(a2 + 8) = v18;
        *(void *)(a2 + 16) = &v24[4 * v23];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        *int v17 = v15;
        long long v18 = v17 + 1;
      }
      *(void *)(a2 + 8) = v18;
      uint64_t v12 = v45;
    }
  }
  else
  {
    kaldi::SplitStringToFloats<float>(a1, ",", 1, (void *)a2);
    if (a3 < (unint64_t)((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2))
    {
      if (quasar::gLogLevel >= 2)
      {
        long long v43 = 0u;
        long long v44 = 0u;
        long long v41 = 0u;
        long long v42 = 0u;
        long long v39 = 0u;
        long long v40 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        long long v33 = 0u;
        long long v34 = 0u;
        long long v31 = 0u;
        long long v32 = 0u;
        long long v29 = 0u;
        long long v30 = 0u;
        long long v28 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v28);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"weight list should be comma-separated list of maximum size ", 59);
        std::ostream::operator<<();
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v28);
      }
      goto LABEL_16;
    }
  }
  uint64_t v9 = 1;
LABEL_42:
  if (v45)
  {
    long long v46 = v45;
    operator delete(v45);
  }
  return v9;
}

void sub_1B2304E78(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 - 104);
  if (v3)
  {
    *(void *)(v1 - 96) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void quasar::LmEvaluator::LmEvaluator(std::string *this, uint64_t a2, uint64_t a3, long long *a4)
{
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v7 = *a4;
    this->__r_.__value_.__r.__words[2] = *((void *)a4 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v7;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[2].__r_.__value_.__s.__data_[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  int64x2_t v19 = vdupq_n_s64(0x4076800000000000uLL);
  *(int64x2_t *)&v30[0].__r_.__value_.__l.__data_ = v19;
  *(double *)&this[2].__r_.__value_.__l.__size_ = quasar::Location::getLatitude((quasar::Location *)v30);
  *(int64x2_t *)&v30[0].__r_.__value_.__l.__data_ = v19;
  double Weight = quasar::corrective_reranking::VoiceEditingWFST::Path::getWeight((quasar::corrective_reranking::VoiceEditingWFST::Path *)v30);
  __asm { FMOV            V1.4S, #-1.0 }
  *(_OWORD *)&this[7].__r_.__value_.__l.__data_ = _Q1;
  *(double *)&this[2].__r_.__value_.__r.__words[2] = Weight;
  LODWORD(this[3].__r_.__value_.__l.__data_) = 1;
  this[3].__r_.__value_.__l.__size_ = 0;
  this[3].__r_.__value_.__s.__data_[16] = 0;
  *(_OWORD *)&this[4].__r_.__value_.__l.__data_ = 0u;
  this[6].__r_.__value_.__r.__words[0] = 0x7FFFFFFF00000000;
  *(_OWORD *)&this[4].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[5].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[6].__r_.__value_.__r.__words[1] = xmmword_1B25AAF70;
  LODWORD(this[7].__r_.__value_.__r.__words[2]) = -1082130432;
  this[9].__r_.__value_.__s.__data_[0] = 1;
  kaldi::Timer::Reset((kaldi::Timer *)&this[8], v14);
  this[9].__r_.__value_.__l.__size_ = 0;
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::size_type v15 = *(void *)(a3 + 8);
    if (v15)
    {
      std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)a3, v15);
      goto LABEL_10;
    }
  }
  else if (*(unsigned char *)(a3 + 23))
  {
    std::string v31 = *(std::string *)a3;
    goto LABEL_10;
  }
  std::string::basic_string[abi:ne180100]<0>(&v31, "lm-personalize.evaluator");
LABEL_10:
  v20[0] = 0;
  v20[1] = 0;
  *(void *)&long long v21 = 0;
  *(_OWORD *)std::string __p = 0u;
  long long v23 = 0u;
  LODWORD(v++*(_DWORD *)(result + 24) = 1065353216;
  quasar::SystemConfig::SystemConfig((quasar::SystemConfig *)v30, a2, (uint64_t *)v20, (uint64_t)__p);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)__p);
  __p[0] = v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  memset(v29, 0, sizeof(v29));
  memset(v28, 0, sizeof(v28));
  memset(v27, 0, sizeof(v27));
  memset(v26, 0, sizeof(v26));
  std::string::basic_string[abi:ne180100]<0>(v25, "Dictation");
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v31.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v31.__r_.__value_.__l.__size_;
  }
  std::string::basic_string[abi:ne180100]((uint64_t)__p, size + 1);
  if ((SBYTE7(v23) & 0x80u) == 0) {
    int v17 = __p;
  }
  else {
    int v17 = (void **)__p[0];
  }
  if (size)
  {
    if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v18 = &v31;
    }
    else {
      long long v18 = (std::string *)v31.__r_.__value_.__r.__words[0];
    }
    memmove(v17, v18, size);
  }
  *(_WORD *)((char *)v17 + size) = 46;
  quasar::SystemConfig::setPrefix(v30, (const std::string *)__p);
  if (SBYTE7(v23) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "latitude");
  std::string::basic_string[abi:ne180100]<0>(v20, "Latitude used in evaluation");
  quasar::SystemConfig::Register<double>((uint64_t)v30, (const void **)__p, (uint64_t)&this[2].__r_.__value_.__l.__size_, (uint64_t)v20, 0, 173, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SBYTE7(v21) < 0) {
    operator delete(v20[0]);
  }
  if (SBYTE7(v23) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "longitude");
  std::string::basic_string[abi:ne180100]<0>(v20, "Longitude used in evaluation");
  quasar::SystemConfig::Register<double>((uint64_t)v30, (const void **)__p, (uint64_t)&this[2].__r_.__value_.__r.__words[2], (uint64_t)v20, 0, 173, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SBYTE7(v21) < 0) {
    operator delete(v20[0]);
  }
  if (SBYTE7(v23) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "evaluation-metrics");
  std::string::basic_string[abi:ne180100]<0>(v20, "List of metrics calculated during evaluation (e.g. dev-ppl, test-wer)");
  quasar::SystemConfig::Register<std::string>((uint64_t)v30, (const void **)__p, (uint64_t)v28, (uint64_t)v20, 1, 173, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SBYTE7(v21) < 0) {
    operator delete(v20[0]);
  }
  if (SBYTE7(v23) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "select-model-based-on");
  std::string::basic_string[abi:ne180100]<0>(v20, "Metric based on which the best model is selected (i.e. usually dev-ppl)");
  quasar::SystemConfig::Register<std::string>((uint64_t)v30, (const void **)__p, (uint64_t)v27, (uint64_t)v20, 0, 173, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SBYTE7(v21) < 0) {
    operator delete(v20[0]);
  }
  if (SBYTE7(v23) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "optimization-method");
  std::string::basic_string[abi:ne180100]<0>(v20, "Method to find the best model: \"interpolation\"(default) or \"sweep-weights\"");
  quasar::SystemConfig::Register<std::string>((uint64_t)v30, (const void **)__p, (uint64_t)v26, (uint64_t)v20, 0, 173, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SBYTE7(v21) < 0) {
    operator delete(v20[0]);
  }
  if (SBYTE7(v23) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "sweep-weights");
  std::string::basic_string[abi:ne180100]<0>(v20, "Range of interpolation weights tested with optimization \"sweep-weights\"");
  quasar::SystemConfig::Register<std::string>((uint64_t)v30, (const void **)__p, (uint64_t)v29, (uint64_t)v20, 0, 173, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SBYTE7(v21) < 0) {
    operator delete(v20[0]);
  }
  if (SBYTE7(v23) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "min-audio");
  std::string::basic_string[abi:ne180100]<0>(v20, "Required number of audio files");
  quasar::SystemConfig::Register<int>((uint64_t)v30, (const void **)__p, (uint64_t)&this[6], (uint64_t)v20, 0, 173, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SBYTE7(v21) < 0) {
    operator delete(v20[0]);
  }
  if (SBYTE7(v23) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "max-audio");
  std::string::basic_string[abi:ne180100]<0>(v20, "Maximum number of audio files");
  quasar::SystemConfig::Register<int>((uint64_t)v30, (const void **)__p, (uint64_t)this[6].__r_.__value_.__r.__words + 4, (uint64_t)v20, 0, 173, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SBYTE7(v21) < 0) {
    operator delete(v20[0]);
  }
  if (SBYTE7(v23) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "remove-unk");
  std::string::basic_string[abi:ne180100]<0>(v20, "If true simply removes all OOVs from input");
  quasar::SystemConfig::Register<BOOL>((uint64_t)v30, (const void **)__p, (uint64_t)&this[3].__r_.__value_.__r.__words[2], (uint64_t)v20, 0, 173, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SBYTE7(v21) < 0) {
    operator delete(v20[0]);
  }
  if (SBYTE7(v23) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "min-weight");
  std::string::basic_string[abi:ne180100]<0>(v20, "If final weight <= this value, model will not be used");
  quasar::SystemConfig::Register<float>((uint64_t)v30, (const void **)__p, (uint64_t)&this[6].__r_.__value_.__l.__size_, (uint64_t)v20, 0, 173, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SBYTE7(v21) < 0) {
    operator delete(v20[0]);
  }
  if (SBYTE7(v23) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "max-weight");
  std::string::basic_string[abi:ne180100]<0>(v20, "Weight will get clipped to this value when saving model");
  quasar::SystemConfig::Register<float>((uint64_t)v30, (const void **)__p, (uint64_t)&this[6].__r_.__value_.__r.__words[1] + 4, (uint64_t)v20, 0, 173, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SBYTE7(v21) < 0) {
    operator delete(v20[0]);
  }
  if (SBYTE7(v23) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "min-pass-rate");
  std::string::basic_string[abi:ne180100]<0>(v20, "If >= 0: Fail the evaluation if ANY computeTextStats() call (1) returns failure OR (2) returns success but doesn't process enough utterances correctly to meet this threshold");
  quasar::SystemConfig::Register<float>((uint64_t)v30, (const void **)__p, (uint64_t)&this[6].__r_.__value_.__r.__words[2], (uint64_t)v20, 0, 182, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SBYTE7(v21) < 0) {
    operator delete(v20[0]);
  }
  if (SBYTE7(v23) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "min-unadapted-dev-ppl");
  std::string::basic_string[abi:ne180100]<0>(v20, "If >= 0: Model will not be used if this condition is not met");
  quasar::SystemConfig::Register<float>((uint64_t)v30, (const void **)__p, (uint64_t)&this[6].__r_.__value_.__r.__words[2] + 4, (uint64_t)v20, 0, 182, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SBYTE7(v21) < 0) {
    operator delete(v20[0]);
  }
  if (SBYTE7(v23) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "max-unadapted-dev-ppl");
  std::string::basic_string[abi:ne180100]<0>(v20, "If >= 0: Model will not be used if this condition is not met");
  quasar::SystemConfig::Register<float>((uint64_t)v30, (const void **)__p, (uint64_t)&this[7], (uint64_t)v20, 0, 182, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SBYTE7(v21) < 0) {
    operator delete(v20[0]);
  }
  if (SBYTE7(v23) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "min-best-weight-dev-ppl");
  std::string::basic_string[abi:ne180100]<0>(v20, "If >= 0: Model will not be used if this condition is not met");
  quasar::SystemConfig::Register<float>((uint64_t)v30, (const void **)__p, (uint64_t)this[7].__r_.__value_.__r.__words + 4, (uint64_t)v20, 0, 182, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SBYTE7(v21) < 0) {
    operator delete(v20[0]);
  }
  if (SBYTE7(v23) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "max-best-weight-dev-ppl");
  std::string::basic_string[abi:ne180100]<0>(v20, "If >= 0: Model will not be used if this condition is not met");
  quasar::SystemConfig::Register<float>((uint64_t)v30, (const void **)__p, (uint64_t)&this[7].__r_.__value_.__l.__size_, (uint64_t)v20, 0, 182, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SBYTE7(v21) < 0) {
    operator delete(v20[0]);
  }
  if (SBYTE7(v23) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "min-dev-ppl-abs-improvement");
  std::string::basic_string[abi:ne180100]<0>(v20, "If >= 0: Model will not be used if this condition is not met");
  quasar::SystemConfig::Register<float>((uint64_t)v30, (const void **)__p, (uint64_t)&this[7].__r_.__value_.__r.__words[1] + 4, (uint64_t)v20, 0, 182, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SBYTE7(v21) < 0) {
    operator delete(v20[0]);
  }
  if (SBYTE7(v23) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "min-dev-ppl-rel-improvement");
  std::string::basic_string[abi:ne180100]<0>(v20, "If >= 0: Model will not be used if this condition is not met");
  quasar::SystemConfig::Register<float>((uint64_t)v30, (const void **)__p, (uint64_t)&this[7].__r_.__value_.__r.__words[2], (uint64_t)v20, 0, 182, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SBYTE7(v21) < 0) {
    operator delete(v20[0]);
  }
  if (SBYTE7(v23) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "task-name");
  std::string::basic_string[abi:ne180100]<0>(v20, "Name of the task to lookup, e.g., Dictation");
  quasar::SystemConfig::Register<std::string>((uint64_t)v30, (const void **)__p, (uint64_t)v25, (uint64_t)v20, 0, 192, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SBYTE7(v21) < 0) {
    operator delete(v20[0]);
  }
  if (SBYTE7(v23) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "decoder-chain-name");
  std::string::basic_string[abi:ne180100]<0>(v20, "Name of the decoder for the given task from which to take the bigG FST, e.g., msg");
  quasar::SystemConfig::Register<std::string>((uint64_t)v30, (const void **)__p, (uint64_t)&this[1], (uint64_t)v20, 0, 192, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SBYTE7(v21) < 0) {
    operator delete(v20[0]);
  }
  if (SBYTE7(v23) < 0) {
    operator delete(__p[0]);
  }
  quasar::SystemConfig::readPtree((uint64_t)v30, (uint64_t)&v31);
}

char *std::vector<float>::insert(uint64_t a1, char *__src, float *a3)
{
  uint64_t v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  unint64_t v9 = *(void *)(a1 + 16);
  uint64_t v7 = a1 + 16;
  unint64_t v8 = v9;
  if ((unint64_t)v6 >= v9)
  {
    clockid_t v14 = *(unsigned char **)a1;
    unint64_t v15 = ((uint64_t)&v6[-*(void *)a1] >> 2) + 1;
    if (v15 >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v16 = (__src - v14) >> 2;
    uint64_t v17 = v8 - (void)v14;
    if (v17 >> 1 > v15) {
      unint64_t v15 = v17 >> 1;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v15;
    }
    uint64_t v25 = v7;
    if (v18) {
      int64x2_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v7, v18);
    }
    else {
      int64x2_t v19 = 0;
    }
    std::string __p = v19;
    uint64_t v22 = &v19[4 * v16];
    long long v23 = v22;
    long long v24 = &v19[4 * v18];
    std::__split_buffer<float>::push_back(&__p, a3);
    uint64_t v4 = std::vector<float>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
    if (v23 != v22) {
      v23 += (v22 - v23 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(float *)std::vector<int> __src = *a3;
    *(void *)(a1 + 8) = __src + 4;
  }
  else
  {
    float v10 = __src + 4;
    int v11 = v6 - 4;
    uint64_t v12 = v6;
    while (v11 < v6)
    {
      int v13 = *(_DWORD *)v11;
      v11 += 4;
      *(_DWORD *)uint64_t v12 = v13;
      v12 += 4;
    }
    *(void *)(a1 + 8) = v12;
    if (v6 != v10) {
      memmove(&v6[-4 * ((v6 - v10) >> 2)], __src, v6 - v10);
    }
    *(float *)uint64_t v4 = *a3;
  }
  return v4;
}

void sub_1B230691C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<float>::insert(uint64_t a1, char *__src, char *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    int v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 2) + 1;
    if (v14 >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 2;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 1 > v14) {
      unint64_t v14 = v17 >> 1;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      int64x2_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 16, v18);
    }
    else {
      int64x2_t v19 = 0;
    }
    uint64_t v20 = &v19[4 * v16];
    std::string __p = v19;
    unint64_t v27 = v20;
    long long v28 = v20;
    long long v29 = &v19[4 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 1;
        }
        long long v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v8, v22);
        uint64_t v20 = &v23[v22 & 0xFFFFFFFFFFFFFFFCLL];
        std::string __p = v23;
        unint64_t v27 = v20;
        long long v29 = &v23[4 * v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 4 * (v21 >> 1);
        unint64_t v27 = v20;
      }
    }
    *(_DWORD *)uint64_t v20 = *(_DWORD *)v3;
    long long v28 = v20 + 4;
    uint64_t v4 = std::vector<float>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(_DWORD *)std::vector<int> __src = *(_DWORD *)a3;
    *(void *)(a1 + 8) = __src + 4;
  }
  else
  {
    unint64_t v9 = __src + 4;
    float v10 = v6 - 4;
    int v11 = *(_DWORD **)(a1 + 8);
    while (v10 < v6)
    {
      int v12 = *(_DWORD *)v10;
      v10 += 4;
      *v11++ = v12;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-4 * ((v6 - v9) >> 2)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 4 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(_DWORD *)uint64_t v4 = *(_DWORD *)v3;
  }
  return v4;
}

void sub_1B2306B60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::LmEvaluator::runEvaluation(uint64_t a1, uint64_t a2, uint64_t a3, quasar *a4, float *a5, int a6, char a7)
{
  v70[9] = *MEMORY[0x1E4F143B8];
  double Seconds = kaldi::Timer::GetSeconds((kaldi::Timer *)5, (clockid_t)a2);
  quasar::PTree::PTree((quasar::PTree *)v69);
  if (!*(void *)(a1 + 80)) {
    operator new();
  }
  uint64_t v14 = 0;
  *(unsigned char *)(a1 + 48) = a7;
  do
  {
    uint64_t v15 = &v69[v14 + 64];
    void v15[2] = 0;
    *(void *)&v69[v14 + 72] = 0;
    *uint64_t v15 = &v69[v14 + 72];
    v14 += 24;
  }
  while (v14 != 96);
  uint64_t v16 = *(long long **)(a1 + 96);
  if (!*((unsigned char *)v16 + 12))
  {
    long long v67 = 0u;
    long long v68 = 0u;
    long long v65 = 0u;
    long long v66 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    *(_OWORD *)uint64_t v52 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v52);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"First task should be on tuning on dev set", 41);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v52);
  }
  if (*((_DWORD *)v16 + 2) == 2)
  {
    unint64_t v18 = *(float **)(a1 + 120);
    uint64_t v17 = *(void *)(a1 + 128);
    if ((unint64_t)(v17 - (void)v18) < 5 || *v18 != 0.0 || *(float *)(v17 - 4) != 1.0)
    {
      long long v67 = 0u;
      long long v68 = 0u;
      long long v65 = 0u;
      long long v66 = 0u;
      long long v63 = 0u;
      long long v64 = 0u;
      long long v61 = 0u;
      long long v62 = 0u;
      long long v59 = 0u;
      long long v60 = 0u;
      long long v57 = 0u;
      long long v58 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      *(_OWORD *)uint64_t v52 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v52);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"For interpolated models, we should evaluate weights 0 and 1", 59);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v52);
    }
  }
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  int64x2_t v19 = *(long long **)(a1 + 104);
  if (v16 == v19)
  {
    float v20 = 0.0;
    int v30 = 1;
  }
  else
  {
    float v20 = 0.0;
    while (1)
    {
      long long v48 = *v16;
      v47[0] = 0;
      v47[1] = 0;
      long long v46 = v47;
      uint64_t v21 = *((void *)&v48 + 1);
      unint64_t v22 = &v69[24 * v48 + 64];
      if ((quasar::LmEvaluator::runTask((void *)a1, v48, *((uint64_t *)&v48 + 1), a2, a3, (uint64_t)&v49, (uint64_t)v22, (uint64_t **)&v46) & 1) == 0)break; {
      if ((v21 & 0xFF00000000) != 0 && (unint64_t)(v50 - (unsigned char *)v49) >= 5)
      }
      {
        float v20 = *((float *)v49 + 1);
        std::string::basic_string[abi:ne180100]<0>(__p, "model-selection");
        quasar::EvaluationTask::optimizationPtree((quasar::EvaluationTask *)&v48, v20, (quasar::PTree *)v52);
        quasar::PTree::putChild((uint64_t)a4, (uint64_t)__p, (uint64_t)v52, 1);
        quasar::PTree::~PTree((quasar::PTree *)v52);
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p[0].__r_.__value_.__l.__data_);
        }
      }
      quasar::PTree::PTree((quasar::PTree *)v52);
      uint64_t v25 = (float *)*v22;
      long long v23 = (float *)(v22 + 1);
      uint64_t v24 = v25;
      if (v25 != v23)
      {
        do
        {
          quasar::CorpusStats::Ptree(*((quasar::CorpusStats **)v24 + 5), a6 ^ 1, (quasar::PTree *)__p);
          quasar::weightToStr((uint64_t *)&v44, v26, v24[8]);
          quasar::PTree::putChild((uint64_t)v52, (uint64_t)&v44, (uint64_t)__p, 0);
          if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v44.__r_.__value_.__l.__data_);
          }
          quasar::PTree::~PTree((quasar::PTree *)__p);
          unint64_t v27 = (float *)*((void *)v24 + 1);
          if (v27)
          {
            do
            {
              long long v28 = v27;
              unint64_t v27 = *(float **)v27;
            }
            while (v27);
          }
          else
          {
            do
            {
              long long v28 = (float *)*((void *)v24 + 2);
              BOOL v29 = *(void *)v28 == (void)v24;
              uint64_t v24 = v28;
            }
            while (!v29);
          }
          uint64_t v24 = v28;
        }
        while (v28 != v23);
      }
      quasar::EvaluationTask::printTask((quasar::EvaluationTask *)&v48, &v44);
      quasar::times2Ptree(&v46, (quasar::PTree *)__p);
      quasar::PTree::putChild((uint64_t)v69, (uint64_t)&v44, (uint64_t)__p, 0);
      quasar::PTree::~PTree((quasar::PTree *)__p);
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v44.__r_.__value_.__l.__data_);
      }
      quasar::EvaluationTask::printTask((quasar::EvaluationTask *)&v48, __p);
      quasar::PTree::putChild((uint64_t)a4, (uint64_t)__p, (uint64_t)v52, 0);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
      quasar::PTree::~PTree((quasar::PTree *)v52);
      std::__tree<std::string>::destroy((uint64_t)&v46, v47[0]);
      if (++v16 == v19)
      {
        int v30 = 1;
        goto LABEL_36;
      }
    }
    if (quasar::gLogLevel >= 4)
    {
      long long v67 = 0u;
      long long v68 = 0u;
      long long v65 = 0u;
      long long v66 = 0u;
      long long v63 = 0u;
      long long v64 = 0u;
      long long v61 = 0u;
      long long v62 = 0u;
      long long v59 = 0u;
      long long v60 = 0u;
      long long v57 = 0u;
      long long v58 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      *(_OWORD *)uint64_t v52 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v52);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"Task failed", 11);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v52);
    }
    std::__tree<std::string>::destroy((uint64_t)&v46, v47[0]);
    int v30 = 0;
  }
LABEL_36:
  if (a6) {
    quasar::roundCountsInPtree(a4, v13);
  }
  float v31 = *(float *)(a1 + 156);
  if (v20 <= v31)
  {
    float v31 = v20;
  }
  else if (quasar::gLogLevel >= 4)
  {
    long long v67 = 0u;
    long long v68 = 0u;
    long long v65 = 0u;
    long long v66 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    *(_OWORD *)uint64_t v52 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v52);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"bestWeight (", 12);
    long long v32 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)") exceeds maxWeight (", 21);
    long long v33 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"). Clipping to maxWeight", 24);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v52);
    float v31 = *(float *)(a1 + 156);
  }
  if (v31 == 0.0 || v31 < *(float *)(a1 + 152))
  {
    if (quasar::gLogLevel < 4)
    {
LABEL_47:
      uint64_t v36 = 0;
      goto LABEL_48;
    }
    long long v67 = 0u;
    long long v68 = 0u;
    long long v65 = 0u;
    long long v66 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    *(_OWORD *)uint64_t v52 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v52);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"bestWeight (", 12);
    long long v34 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)") is below minWeight (", 22);
    long long v35 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"). Model will not be used", 25);
LABEL_46:
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v52);
    goto LABEL_47;
  }
  if (!v30) {
    goto LABEL_47;
  }
  if (!quasar::LmEvaluator::checkPpl(a1, (uint64_t)v70, v31))
  {
    if (quasar::gLogLevel < 4) {
      goto LABEL_47;
    }
    long long v67 = 0u;
    long long v68 = 0u;
    long long v65 = 0u;
    long long v66 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    *(_OWORD *)uint64_t v52 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v52);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"PPL checks failed", 17);
    goto LABEL_46;
  }
  uint64_t v36 = 1;
LABEL_48:
  if (a5) {
    *a5 = v31;
  }
  double v37 = kaldi::Timer::GetSeconds((kaldi::Timer *)5, (clockid_t)v13);
  long long v38 = (quasar *)std::string::basic_string[abi:ne180100]<0>(__p, "totalTime");
  double v39 = v37 - Seconds;
  LODWORD(v52[0]) = quasar::getType(v38, *(float *)&v39);
  std::to_string((std::string *)&v52[1], v39);
  long long v54 = 0uLL;
  *(void *)&long long v55 = 0;
  BYTE8(v55) = 1;
  quasar::PTree::putChild((uint64_t)a4, (uint64_t)__p, (uint64_t)v52, 1);
  quasar::PTree::~PTree((quasar::PTree *)v52);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v52, "times");
  quasar::PTree::putChild((uint64_t)a4, (uint64_t)v52, (uint64_t)v69, 1);
  if (SBYTE7(v53) < 0) {
    operator delete(v52[0]);
  }
  if (v49)
  {
    uint64_t v50 = v49;
    operator delete(v49);
  }
  for (uint64_t i = 0; i != -12; i -= 3)
    std::__tree<std::__value_type<float,std::unique_ptr<quasar::CorpusStats>>,std::__map_value_compare<float,std::__value_type<float,std::unique_ptr<quasar::CorpusStats>>,std::less<float>,true>,std::allocator<std::__value_type<float,std::unique_ptr<quasar::CorpusStats>>>>::destroy((uint64_t)&v70[i + 6], (void *)v70[i + 7]);
  quasar::PTree::~PTree((quasar::PTree *)v69);
  return v36;
}

void sub_1B2307340()
{
  MEMORY[0x1B3EA8670](v0, 0x10A1C402FEF67C7);
  JUMPOUT(0x1B23074E4);
}

void sub_1B2307360()
{
}

void sub_1B2307370(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B23074ECLL);
}

void sub_1B2307384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a36 < 0) {
    operator delete(__p);
  }
  if (a28) {
    operator delete(a28);
  }
  for (uint64_t i = 0; i != -96; i -= 24)
    std::__tree<std::__value_type<float,std::unique_ptr<quasar::CorpusStats>>,std::__map_value_compare<float,std::__value_type<float,std::unique_ptr<quasar::CorpusStats>>,std::less<float>,true>,std::allocator<std::__value_type<float,std::unique_ptr<quasar::CorpusStats>>>>::destroy(v68 - 224 + i + 72, *(void **)(v68 - 224 + i + 80));
  quasar::PTree::~PTree((quasar::PTree *)&a68);
  _Unwind_Resume(a1);
}

void sub_1B230739C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  quasar::PTree::~PTree((quasar::PTree *)&a34);
  if (a19 < 0) {
    JUMPOUT(0x1B23073DCLL);
  }
  if (a31) {
    operator delete(a31);
  }
  for (uint64_t i = 0; i != -96; i -= 24)
    std::__tree<std::__value_type<float,std::unique_ptr<quasar::CorpusStats>>,std::__map_value_compare<float,std::__value_type<float,std::unique_ptr<quasar::CorpusStats>>,std::less<float>,true>,std::allocator<std::__value_type<float,std::unique_ptr<quasar::CorpusStats>>>>::destroy(v68 - 224 + i + 72, *(void *)(v68 - 224 + i + 80));
  quasar::PTree::~PTree((quasar::PTree *)&a68);
  _Unwind_Resume(a1);
}

void sub_1B23073B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (__p) {
    operator delete(__p);
  }
  for (uint64_t i = 0; i != -96; i -= 24)
    std::__tree<std::__value_type<float,std::unique_ptr<quasar::CorpusStats>>,std::__map_value_compare<float,std::__value_type<float,std::unique_ptr<quasar::CorpusStats>>,std::less<float>,true>,std::allocator<std::__value_type<float,std::unique_ptr<quasar::CorpusStats>>>>::destroy(v65 - 224 + i + 72, *(void **)(v65 - 224 + i + 80));
  quasar::PTree::~PTree((quasar::PTree *)&a65);
  _Unwind_Resume(a1);
}

void sub_1B23073B8()
{
}

void sub_1B23073C0()
{
}

void sub_1B23073E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a31);
  if (a28) {
    operator delete(a28);
  }
  for (uint64_t i = 0; i != -96; i -= 24)
    std::__tree<std::__value_type<float,std::unique_ptr<quasar::CorpusStats>>,std::__map_value_compare<float,std::__value_type<float,std::unique_ptr<quasar::CorpusStats>>,std::less<float>,true>,std::allocator<std::__value_type<float,std::unique_ptr<quasar::CorpusStats>>>>::destroy(v65 - 224 + i + 72, *(void **)(v65 - 224 + i + 80));
  quasar::PTree::~PTree((quasar::PTree *)&a65);
  _Unwind_Resume(a1);
}

void sub_1B23073F4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  std::__tree<std::string>::destroy((uint64_t)&a25, a26);
  JUMPOUT(0x1B23074B0);
}

void sub_1B2307424(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1B230749CLL);
}

void sub_1B2307468(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
}

void sub_1B2307470(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
}

uint64_t quasar::LmEvaluator::runTask(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t **a8)
{
  int v31 = a3;
  int v9 = HIDWORD(a2);
  v53[0] = a2;
  v53[1] = a3;
  Sentences = (void *)quasar::LmData::getSentences(a4, a2);
  quasar::EvaluationTask::printTask((quasar::EvaluationTask *)v53, &v52);
  if (quasar::gLogLevel >= 4)
  {
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    int v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Running evaluation task ", 24);
    if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v14 = &v52;
    }
    else {
      uint64_t v14 = (std::string *)v52.__r_.__value_.__r.__words[0];
    }
    if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v52.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v52.__r_.__value_.__l.__size_;
    }
    uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, size);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" with ", 6);
    uint64_t v17 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" utterances", 11);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__p);
  }
  if (v9 == 1)
  {
    if (quasar::gLogLevel < 2) {
      goto LABEL_44;
    }
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    long long v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"no audio data available for ", 28);
    quasar::EvaluationTask::printTask((quasar::EvaluationTask *)v53, &v34);
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v24 = &v34;
    }
    else {
      uint64_t v24 = (std::string *)v34.__r_.__value_.__r.__words[0];
    }
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v25 = HIBYTE(v34.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v25 = v34.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v24, v25);
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v34.__r_.__value_.__l.__data_);
    }
LABEL_43:
    quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&__p);
    goto LABEL_44;
  }
  if (v9)
  {
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"invalid evaluation metric", 25);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&__p);
  }
  if (Sentences[1] == *Sentences)
  {
    if (quasar::gLogLevel < 2) {
      goto LABEL_44;
    }
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    int v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"no text data available for ", 27);
    quasar::EvaluationTask::printTask((quasar::EvaluationTask *)v53, &v34);
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v27 = &v34;
    }
    else {
      unint64_t v27 = (std::string *)v34.__r_.__value_.__r.__words[0];
    }
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v28 = HIBYTE(v34.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v28 = v34.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v27, v28);
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v34.__r_.__value_.__l.__data_);
    }
    goto LABEL_43;
  }
  int64x2_t v19 = (float *)a1[15];
  for (uint64_t i = (float *)a1[16]; v19 != i; ++v19)
  {
    float v20 = *v19;
    float v32 = *v19;
    if (v31 == 2 && v20 != 0.0 && v20 != 1.0) {
      continue;
    }
    quasar::weightToStr((uint64_t *)&__p, v12, v20);
    p_p = &__p;
    unint64_t v22 = (double *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a8, (const void **)&__p, (uint64_t)&std::piecewise_construct, &p_p);
    quasar::ScopedTimer::ScopedTimer((quasar::ScopedTimer *)&v34, (const kaldi::Timer *)(a1 + 24), v22 + 7);
    if (SBYTE7(v36) < 0) {
      operator delete((void *)__p);
    }
    *(float *)(*(void *)a5 + 12) = v32;
    operator new();
  }
LABEL_44:
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_1B2308210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (__p) {
    operator delete(__p);
  }
  quasar::ScopedTimer::~ScopedTimer((quasar::ScopedTimer *)&a30);
  if (a34)
  {
    a35 = (uint64_t)a34;
    operator delete(a34);
  }
  if (*(char *)(v42 - 129) < 0) {
    operator delete(*(void **)(v42 - 152));
  }
  _Unwind_Resume(a1);
}

void sub_1B23082B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

void sub_1B23082C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  quasar::ScopedTimer::~ScopedTimer((quasar::ScopedTimer *)&a34);
  if (*(char *)(v34 - 129) < 0) {
    operator delete(*(void **)(v34 - 152));
  }
  _Unwind_Resume(a1);
}

void sub_1B23082D0()
{
}

void sub_1B23082D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  uint64_t v38 = a38;
  a38 = 0;
  if (v38) {
    std::default_delete<quasar::CorpusStats>::operator()[abi:ne180100](a12, v38);
  }
  uint64_t v39 = a30;
  a30 = 0;
  if (v39) {
    std::default_delete<quasar::CorpusStats>::operator()[abi:ne180100]((uint64_t)&a30, v39);
  }
  quasar::ScopedTimer::~ScopedTimer((quasar::ScopedTimer *)&a34);
  JUMPOUT(0x1B2308334);
}

void sub_1B2308308(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

void sub_1B2308320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a42 < 0) {
    JUMPOUT(0x1B2308330);
  }
  if (*(char *)(v42 - 129) < 0) {
    operator delete(*(void **)(v42 - 152));
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::weightToStr(quasar *this, double a2)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v3);
  *(void *)((char *)&v3[2] + *(void *)(v3[0] - 24)) = 16;
  std::ostream::operator<<();
  std::stringbuf::str();
  v3[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v3 + *(void *)(v3[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v3[1] = MEMORY[0x1E4FBA470] + 16;
  if (v4 < 0) {
    operator delete((void *)v3[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](&v5);
}

void sub_1B23084A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL quasar::LmEvaluator::checkPpl(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  int v4 = *(_DWORD *)(a1 + 164);
  int v5 = *(_DWORD *)(a1 + 168);
  *(float *)&v54[1] = a3;
  int v6 = *(_DWORD *)(a1 + 172);
  int v7 = *(_DWORD *)(a1 + 176);
  v53[0] = v4;
  v53[1] = v6;
  v54[0] = 0;
  v52[0] = v5;
  v52[1] = v7;
  int64x2_t v51 = vdupq_n_s64(0x444B1AE4D6E2EF50uLL);
  BOOL v8 = *(float *)(a1 + 180) >= 0.0 || *(float *)(a1 + 184) >= 0.0;
  uint64_t v9 = 0;
  float v10 = (float *)(a2 + 8);
  char v11 = 1;
  do
  {
    char v12 = v11;
    float v13 = *(float *)&v53[v9];
    if (v13 >= 0.0 || (*(float *)&v52[v9] >= 0.0 ? (int v14 = 1) : (int v14 = v8), v14 == 1))
    {
      uint64_t v15 = *(void *)v10;
      if (!*(void *)v10) {
        goto LABEL_37;
      }
      float v16 = *(float *)&v54[v9];
      uint64_t v17 = v10;
      do
      {
        unint64_t v18 = (uint64_t *)(v15 + 8);
        if (*(float *)(v15 + 32) >= v16)
        {
          unint64_t v18 = (uint64_t *)v15;
          uint64_t v17 = (float *)v15;
        }
        uint64_t v15 = *v18;
      }
      while (*v18);
      if (v17 == v10 || v16 < v17[8])
      {
LABEL_37:
        if (quasar::gLogLevel >= 4)
        {
          long long v49 = 0u;
          long long v50 = 0u;
          long long v47 = 0u;
          long long v48 = 0u;
          long long v45 = 0u;
          long long v46 = 0u;
          long long v43 = 0u;
          long long v44 = 0u;
          long long v41 = 0u;
          long long v42 = 0u;
          long long v39 = 0u;
          long long v40 = 0u;
          long long v37 = 0u;
          long long v38 = 0u;
          long long v35 = 0u;
          long long v36 = 0u;
          long long v34 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v34);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v34, (uint64_t)"checkPPL ", 9);
          long long v33 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)": No CorpusStat", 15);
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v34);
        }
        return 0;
      }
      uint64_t v19 = *((void *)v17 + 5);
      double v20 = *(double *)(v19 + 56);
      *(double *)&v51.i64[v9] = v20;
      double v21 = v20;
      if (quasar::gLogLevel >= 4)
      {
        long long v49 = 0u;
        long long v50 = 0u;
        long long v47 = 0u;
        long long v48 = 0u;
        long long v45 = 0u;
        long long v46 = 0u;
        long long v43 = 0u;
        long long v44 = 0u;
        long long v41 = 0u;
        long long v42 = 0u;
        long long v39 = 0u;
        long long v40 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        long long v34 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v34);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v34, (uint64_t)"checkPPL ", 9);
        unint64_t v22 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)": ppl ", 6);
        long long v23 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" minPpl ", 8);
        uint64_t v24 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" maxPpl ", 8);
        std::ostream::operator<<();
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v34);
        double v21 = *(double *)(v19 + 56);
      }
      if (v21 == 1.0e21 || v13 >= 0.0 && v20 < v13) {
        return 0;
      }
      float v25 = *(float *)&v52[v9];
      if (v25 >= 0.0 && v20 > v25) {
        return 0;
      }
    }
    char v11 = 0;
    uint64_t v9 = 1;
  }
  while ((v12 & 1) != 0);
  if (!v8) {
    return 1;
  }
  if (*(double *)v51.i64 == 0.0) {
    return 0;
  }
  double v27 = *(double *)v51.i64 - *(double *)&v51.i64[1];
  double v28 = (*(double *)v51.i64 - *(double *)&v51.i64[1]) / *(double *)v51.i64;
  if (quasar::gLogLevel >= 4)
  {
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v34 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v34);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v34, (uint64_t)"checkPPL: absImprovement ", 25);
    BOOL v29 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)" relImprovement ", 16);
    std::ostream::operator<<();
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v34);
  }
  float v30 = *(float *)(a1 + 180);
  if (v30 >= 0.0 && v27 < v30) {
    return 0;
  }
  float v31 = *(float *)(a1 + 184);
  return v28 >= v31 || v31 < 0.0;
}

void sub_1B2308860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t quasar::LmEvaluator::computeTextStats(uint64_t a1, uint64_t *a2, void *a3, quasar::CorpusStats *a4)
{
  v44[0] = *MEMORY[0x1E4F143B8];
  if (quasar::gLogLevel >= 4)
  {
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v26 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"computing text stats for weight ", 32);
    std::ostream::operator<<();
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v26);
  }
  uint64_t v7 = *a2;
  if (*a2 != a2[1])
  {
    quasar::LmInfo::LmInfo((uint64_t)v25, *(_DWORD *)(a1 + 72), (long long *)(v7 + 8));
    uint64_t v8 = *(void *)(a1 + 80);
    long long v26 = 0uLL;
    *(void *)&long long v27 = 0;
    double v9 = *(double *)(a1 + 56);
    double v10 = *(double *)(a1 + 64);
    int64x2_t v23 = vdupq_n_s64(0x4076800000000000uLL);
    v24[0] = quasar::Location::knownOrFallback((uint64_t)&v23, v9, v10);
    v24[1] = v11;
    int v12 = *(unsigned __int8 *)(a1 + 48);
    uint64_t v13 = a3[1];
    v43[0] = *a3;
    v43[1] = v13;
    if (v13) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
    }
    double v20 = 0;
    double v21 = 0;
    unint64_t v22 = 0;
    __p[0] = &v20;
    LOBYTE(__p[1]) = 0;
    double v20 = operator new(0x10uLL);
    double v21 = v20;
    unint64_t v22 = v20 + 2;
    double v21 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<kaldi::quasar::LmHandle>>,std::shared_ptr<kaldi::quasar::LmHandle>*,std::shared_ptr<kaldi::quasar::LmHandle>*,std::shared_ptr<kaldi::quasar::LmHandle>*>((uint64_t)&v22, v43, v44, v20);
    int v14 = *(unsigned __int8 *)(a1 + 88);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    memset(v18, 0, sizeof(v18));
    BYTE2(v16) = 0;
    LOWORD(v16) = 0;
    quasar::FstLmScorer::computeLmScore(v8, (int)&v26, (int)v24, (long long *)(a1 + 24), v7 + 32, v12 != 0, (int)v25, &v20, v14 != 0, (long long *)__p, v7 + 56, v16, 0, (uint64_t)v18, 1);
  }
  if (quasar::CorpusStats::computePerplexity(a4))
  {
    if (*((void *)a4 + 3))
    {
      quasar::CorpusStats::print(a4);
      return 1;
    }
  }
  else if (quasar::gLogLevel >= 2)
  {
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v26 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"perplexity calculation failed, numTokens is ", 44);
    std::ostream::operator<<();
    quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v26);
  }
  return 0;
}

void sub_1B2308CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
}

void sub_1B2308DC8()
{
}

uint64_t quasar::LmEvaluator::optimizePerplexity(uint64_t a1, uint64_t **a2, int a3, char *a4)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  if (*((void *)a4 + 1) != *(void *)a4)
  {
    long long v68 = 0u;
    long long v69 = 0u;
    long long v66 = 0u;
    long long v67 = 0u;
    long long v64 = 0u;
    long long v65 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    long long __src = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__src);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&__src, "bestWeights should be empty");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&__src);
  }
  if (a3 != 1)
  {
    if (a3 == 2)
    {
      int v43 = *(_DWORD *)(a1 + 72);
      long long v44 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      int64x2_t v47 = vdupq_n_s64(0x444B1AE4D6E2EF50uLL);
      long long v48 = 0u;
      *(_OWORD *)long long v49 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      uint64_t v52 = 0;
      long long __p = 0;
      long long v41 = 0;
      unint64_t v42 = 0;
      LODWORD(v39) = 0;
      *(void *)&long long __src = &v39;
      int v6 = std::__tree<std::__value_type<float,kaldi::MelBanks *>,std::__map_value_compare<float,std::__value_type<float,kaldi::MelBanks *>,std::less<float>,true>,std::allocator<std::__value_type<float,kaldi::MelBanks *>>>::__emplace_unique_key_args<float,std::piecewise_construct_t const&,std::tuple<float const&>,std::tuple<>>(a2, (float *)&v39, (uint64_t)&std::piecewise_construct, (_DWORD **)&__src)[5];
      uint64_t v7 = v41;
      if ((unint64_t)v41 >= v42)
      {
        uint64_t v15 = (v41 - (unsigned char *)__p) >> 3;
        if ((unint64_t)(v15 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v16 = (uint64_t)(v42 - (void)__p) >> 2;
        if (v16 <= v15 + 1) {
          unint64_t v16 = v15 + 1;
        }
        if (v42 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v16;
        }
        if (v17) {
          unint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v42, v17);
        }
        else {
          unint64_t v18 = 0;
        }
        uint64_t v19 = (uint64_t **)&v18[8 * v15];
        double v20 = &v18[8 * v17];
        *uint64_t v19 = v6;
        uint64_t v8 = (char *)(v19 + 1);
        unint64_t v22 = (char *)__p;
        double v21 = v41;
        if (v41 != __p)
        {
          do
          {
            int64x2_t v23 = (uint64_t *)*((void *)v21 - 1);
            v21 -= 8;
            *--uint64_t v19 = v23;
          }
          while (v21 != v22);
          double v21 = (char *)__p;
        }
        long long __p = v19;
        long long v41 = v8;
        unint64_t v42 = (unint64_t)v20;
        if (v21) {
          operator delete(v21);
        }
      }
      else
      {
        *(void *)long long v41 = v6;
        uint64_t v8 = v7 + 8;
      }
      long long v41 = v8;
      LODWORD(v39) = 1065353216;
      *(void *)&long long __src = &v39;
      uint64_t v24 = std::__tree<std::__value_type<float,kaldi::MelBanks *>,std::__map_value_compare<float,std::__value_type<float,kaldi::MelBanks *>,std::less<float>,true>,std::allocator<std::__value_type<float,kaldi::MelBanks *>>>::__emplace_unique_key_args<float,std::piecewise_construct_t const&,std::tuple<float const&>,std::tuple<>>(a2, (float *)&v39, (uint64_t)&std::piecewise_construct, (_DWORD **)&__src)[5];
      float v25 = v41;
      if ((unint64_t)v41 >= v42)
      {
        uint64_t v27 = (v41 - (unsigned char *)__p) >> 3;
        if ((unint64_t)(v27 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v28 = (uint64_t)(v42 - (void)__p) >> 2;
        if (v28 <= v27 + 1) {
          unint64_t v28 = v27 + 1;
        }
        if (v42 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v29 = v28;
        }
        if (v29) {
          long long v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v42, v29);
        }
        else {
          long long v30 = 0;
        }
        long long v31 = (uint64_t **)&v30[8 * v27];
        long long v32 = &v30[8 * v29];
        *long long v31 = v24;
        long long v26 = (char *)(v31 + 1);
        long long v34 = (char *)__p;
        long long v33 = v41;
        if (v41 != __p)
        {
          do
          {
            long long v35 = (uint64_t *)*((void *)v33 - 1);
            v33 -= 8;
            *--long long v31 = v35;
          }
          while (v33 != v34);
          long long v33 = (char *)__p;
        }
        long long __p = v31;
        long long v41 = v26;
        unint64_t v42 = (unint64_t)v32;
        if (v33) {
          operator delete(v33);
        }
      }
      else
      {
        *(void *)long long v41 = v24;
        long long v26 = v25 + 8;
      }
      long long v41 = v26;
      if (quasar::CorpusStats::interpolateCorpusStatsWithBestWeights((char **)&__p, (uint64_t)a4, (uint64_t)&v43))
      {
        if (*((void *)a4 + 1) - *(void *)a4 == 8)
        {
          float v36 = **(float **)a4 + *(float *)(*(void *)a4 + 4);
          if (v36 == 1.0
            || COERCE_INT(fabs(v36 + -1.0)) <= 2139095039
            && fabsf(v36 + -1.0) <= (float)((float)(fabsf(v36) + 1.0) * 0.001))
          {
            std::make_unique[abi:ne180100]<quasar::CorpusStats,quasar::CorpusStats&>();
          }
        }
        long long v68 = 0u;
        long long v69 = 0u;
        long long v66 = 0u;
        long long v67 = 0u;
        long long v64 = 0u;
        long long v65 = 0u;
        long long v62 = 0u;
        long long v63 = 0u;
        long long v60 = 0u;
        long long v61 = 0u;
        long long v58 = 0u;
        long long v59 = 0u;
        long long v56 = 0u;
        long long v57 = 0u;
        long long v54 = 0u;
        long long v55 = 0u;
        long long __src = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__src);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__src, (uint64_t)"best weights have wrong size or don't sum up to one", 51);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&__src);
      }
      long long v68 = 0u;
      long long v69 = 0u;
      long long v66 = 0u;
      long long v67 = 0u;
      long long v64 = 0u;
      long long v65 = 0u;
      long long v62 = 0u;
      long long v63 = 0u;
      long long v60 = 0u;
      long long v61 = 0u;
      long long v58 = 0u;
      long long v59 = 0u;
      long long v56 = 0u;
      long long v57 = 0u;
      long long v54 = 0u;
      long long v55 = 0u;
      long long __src = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__src);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__src, (uint64_t)"best weight estimation for perplexity interpolation failed", 58);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&__src);
    }
    long long v68 = 0u;
    long long v69 = 0u;
    long long v66 = 0u;
    long long v67 = 0u;
    long long v64 = 0u;
    long long v65 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    long long __src = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__src);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&__src, "invalid optimization method");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&__src);
  }
  double v9 = *a2;
  if (*a2 == (uint64_t *)(a2 + 1))
  {
    float v10 = INFINITY;
  }
  else
  {
    float v10 = INFINITY;
    double v11 = 1.0e21;
    do
    {
      if (*(double *)(v9[5] + 56) < v11)
      {
        float v10 = *((float *)v9 + 8);
        double v11 = *(double *)(v9[5] + 56);
      }
      int v12 = (uint64_t *)v9[1];
      if (v12)
      {
        do
        {
          uint64_t v13 = (uint64_t **)v12;
          int v12 = (uint64_t *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          uint64_t v13 = (uint64_t **)v9[2];
          BOOL v14 = *v13 == v9;
          double v9 = (uint64_t *)v13;
        }
        while (!v14);
      }
      double v9 = (uint64_t *)v13;
    }
    while (v13 != a2 + 1);
  }
  *(float *)&long long __src = 1.0 - v10;
  *((float *)&__src + 1) = v10;
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(a4, (char *)&__src, (uint64_t)&__src + 8, 2uLL);
  if ((LODWORD(v10) & 0x7FFFFFFFu) > 0x7F7FFFFF || v10 < 0.0 || v10 > 1.0)
  {
    long long v68 = 0u;
    long long v69 = 0u;
    long long v66 = 0u;
    long long v67 = 0u;
    long long v64 = 0u;
    long long v65 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    long long __src = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__src);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&__src, "model selection returned an invalid weight");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&__src);
  }
  if (quasar::gLogLevel >= 4)
  {
    long long v68 = 0u;
    long long v69 = 0u;
    long long v66 = 0u;
    long long v67 = 0u;
    long long v64 = 0u;
    long long v65 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    long long __src = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__src);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__src, (uint64_t)"best weight: ", 13);
    long long v37 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)" PPL: ", 6);
    std::ostream::operator<<();
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__src);
  }
  return 1;
}

void sub_1B23094C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14)
{
  if (__p) {
    operator delete(__p);
  }
  quasar::CorpusStats::~CorpusStats((quasar::CorpusStats *)&a14);
  _Unwind_Resume(a1);
}

void sub_1B23094E4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1B23094F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void std::make_unique[abi:ne180100]<quasar::CorpusStats,quasar::CorpusStats&>()
{
}

void sub_1B2309600(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  int v5 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 104) = v5;
    operator delete(v5);
  }
  std::vector<quasar::LmInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  MEMORY[0x1B3EA8670](v2, 0x1030C4063630190);
  _Unwind_Resume(a1);
}

void quasar::CorpusStats::~CorpusStats(quasar::CorpusStats *this)
{
  uint64_t v3 = (void **)((char *)this + 120);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v2 = (void *)*((void *)this + 12);
  if (v2)
  {
    *((void *)this + 13) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void **)((char *)this + 72);
  std::vector<quasar::LmInfo>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void quasar::LmEvaluator::~LmEvaluator(quasar::LmEvaluator *this)
{
  uint64_t v2 = (void *)*((void *)this + 15);
  if (v2)
  {
    *((void *)this + 16) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 12);
  if (v3)
  {
    *((void *)this + 13) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *((void *)this + 10);
  *((void *)this + 1std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void std::vector<quasar::LmInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    int v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 104;
        std::allocator<quasar::LmInfo>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

float std::__split_buffer<float>::push_back(void *a1, float *a2)
{
  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    int v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        unint64_t v16 = 1;
      }
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 1;
      }
      unint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1[4], v16);
      uint64_t v19 = &v17[v16 & 0xFFFFFFFFFFFFFFFCLL];
      double v20 = (int *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFFCLL];
        uint64_t v22 = 4 * (v21 >> 2);
        int64x2_t v23 = &v17[v16 & 0xFFFFFFFFFFFFFFFCLL];
        do
        {
          int v24 = *v20++;
          *(_DWORD *)int64x2_t v23 = v24;
          v23 += 4;
          v22 -= 4;
        }
        while (v22);
      }
      float v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[4 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v7 = v6 >> 2;
      BOOL v8 = v6 >> 2 < -1;
      uint64_t v9 = (v6 >> 2) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-4 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-4 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }
      uint64_t v15 = &v4[4 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
    }
  }
  float result = *a2;
  *(float *)uint64_t v4 = *a2;
  a1[2] = v4 + 4;
  return result;
}

void std::__tree<std::__value_type<float,std::unique_ptr<quasar::CorpusStats>>,std::__map_value_compare<float,std::__value_type<float,std::unique_ptr<quasar::CorpusStats>>,std::less<float>,true>,std::allocator<std::__value_type<float,std::unique_ptr<quasar::CorpusStats>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<float,std::unique_ptr<quasar::CorpusStats>>,std::__map_value_compare<float,std::__value_type<float,std::unique_ptr<quasar::CorpusStats>>,std::less<float>,true>,std::allocator<std::__value_type<float,std::unique_ptr<quasar::CorpusStats>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<float,std::unique_ptr<quasar::CorpusStats>>,std::__map_value_compare<float,std::__value_type<float,std::unique_ptr<quasar::CorpusStats>>,std::less<float>,true>,std::allocator<std::__value_type<float,std::unique_ptr<quasar::CorpusStats>>>>::destroy(a1, a2[1]);
    uint64_t v4 = a2[5];
    a2[5] = 0;
    if (v4) {
      std::default_delete<quasar::CorpusStats>::operator()[abi:ne180100]((uint64_t)(a2 + 5), v4);
    }
    operator delete(a2);
  }
}

void std::default_delete<quasar::CorpusStats>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v4 = (void **)(a2 + 120);
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v4);
    uint64_t v3 = *(void **)(a2 + 96);
    if (v3)
    {
      *(void *)(a2 + 104) = v3;
      operator delete(v3);
    }
    uint64_t v4 = (void **)(a2 + 72);
    std::vector<quasar::LmInfo>::__destroy_vector::operator()[abi:ne180100](&v4);
    MEMORY[0x1B3EA8670](a2, 0x1030C4063630190);
  }
}

uint64_t **std::__tree<std::__value_type<float,std::unique_ptr<quasar::CorpusStats>>,std::__map_value_compare<float,std::__value_type<float,std::unique_ptr<quasar::CorpusStats>>,std::less<float>,true>,std::allocator<std::__value_type<float,std::unique_ptr<quasar::CorpusStats>>>>::__emplace_unique_key_args<float,std::pair<float const,std::unique_ptr<quasar::CorpusStats>>>(uint64_t **a1, float *a2, uint64_t a3)
{
  uint64_t v6 = a1 + 1;
  int v5 = a1[1];
  if (v5)
  {
    float v7 = *a2;
    while (1)
    {
      while (1)
      {
        BOOL v8 = (uint64_t **)v5;
        float v9 = *((float *)v5 + 8);
        if (v7 >= v9) {
          break;
        }
        int v5 = (uint64_t *)*v5;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      int v5 = (uint64_t *)v5[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    BOOL v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = operator new(0x30uLL);
    v10[8] = *(_DWORD *)a3;
    uint64_t v11 = *(void *)(a3 + 8);
    *(void *)(a3 + 8) = 0;
    *((void *)v10 + 5) = v11;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v8, v6, (uint64_t *)v10);
    return (uint64_t **)v10;
  }
  return v8;
}

void *std::vector<quasar::LmInfo>::__init_with_size[abi:ne180100]<quasar::LmInfo*,quasar::LmInfo*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<kaldi::ChosenArc>::__vallocate[abi:ne180100](result, a4);
    float result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::LmInfo>,quasar::LmInfo*,quasar::LmInfo*,quasar::LmInfo*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B2309AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<quasar::LmInfo>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::LmInfo>,quasar::LmInfo*,quasar::LmInfo*,quasar::LmInfo*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::allocator<quasar::LmInfo>::construct[abi:ne180100]<quasar::LmInfo,quasar::LmInfo&>(a1, v4, v6);
      v6 += 104;
      uint64_t v4 = v12 + 104;
      v12 += 104;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::LmInfo>,quasar::LmInfo*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1B2309BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::allocator<quasar::LmInfo>::construct[abi:ne180100]<quasar::LmInfo,quasar::LmInfo&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a2 = *(_DWORD *)a3;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + ++*(_DWORD *)(result + 24) = 0;
  std::vector<quasar::TokenLmInfo>::__init_with_size[abi:ne180100]<quasar::TokenLmInfo*,quasar::TokenLmInfo*>((std::string *)(a2 + 8), *(long long **)(a3 + 8), *(long long **)(a3 + 16), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a3 + 16) - *(void *)(a3 + 8)) >> 3));
  int v5 = *(_DWORD *)(a3 + 32);
  *(unsigned char *)(a2 + 36) = *(unsigned char *)(a3 + 36);
  *(_DWORD *)(a2 + 32) = v5;
  if (*(char *)(a3 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a2 + 40), *(const std::string::value_type **)(a3 + 40), *(void *)(a3 + 48));
  }
  else
  {
    long long v6 = *(_OWORD *)(a3 + 40);
    *(void *)(a2 + 56) = *(void *)(a3 + 56);
    *(_OWORD *)(a2 + 4std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = v6;
  }
  uint64_t v7 = *(void *)(a3 + 64);
  char v8 = *(unsigned char *)(a3 + 72);
  *(void *)(a2 + 8std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = 0;
  *(unsigned char *)(a2 + 72) = v8;
  *(void *)(a2 + 64) = v7;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  return std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)(a2 + 80), *(const void **)(a3 + 80), *(void *)(a3 + 88), (uint64_t)(*(void *)(a3 + 88) - *(void *)(a3 + 80)) >> 2);
}

void sub_1B2309CA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<quasar::TokenLmInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::LmInfo>,quasar::LmInfo*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::LmInfo>,quasar::LmInfo*>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::LmInfo>,quasar::LmInfo*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 104;
      std::allocator<quasar::LmInfo>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

void *std::vector<std::vector<unsigned long long>>::__init_with_size[abi:ne180100]<std::vector<unsigned long long>*,std::vector<unsigned long long>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    float result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<unsigned long long>>,std::vector<unsigned long long>*,std::vector<unsigned long long>*,std::vector<unsigned long long>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B2309DC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<unsigned long long>>,std::vector<unsigned long long>*,std::vector<unsigned long long>*,std::vector<unsigned long long>*>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      void *v4 = 0;
      v4[1] = 0;
      void v4[2] = 0;
      std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(v4, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 3);
      uint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long long>>,std::vector<unsigned long long>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B2309E88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    float result = std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      float result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B2309EFC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long long>>,std::vector<unsigned long long>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::vector<int>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void sub_1B230A0B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B230A16C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t tknLogString(const char *a1)
{
  fputs(a1, (FILE *)*MEMORY[0x1E4F143C8]);
  uint64_t v1 = (FILE *)*MEMORY[0x1E4F143D8];
  return fflush(v1);
}

uint64_t quasar::E2EAsrConfidence::finishInit(uint64_t this)
{
  if (*(char *)(this + 471) < 0)
  {
    if (*(void *)(this + 456))
    {
LABEL_3:
      *(unsigned char *)(this + 504) = 1;
      int v1 = *(_DWORD *)(this + 496);
      if ((v1 & 0x80000000) == 0)
      {
        if ((*(_DWORD *)(this + 500) & 0x80000000) != 0) {
          *(_DWORD *)(this + 50std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = v1;
        }
        operator new();
      }
      long long v17 = 0u;
      long long v18 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      long long v13 = 0u;
      long long v14 = 0u;
      long long v11 = 0u;
      long long v12 = 0u;
      long long v9 = 0u;
      long long v10 = 0u;
      long long v7 = 0u;
      long long v8 = 0u;
      long long v5 = 0u;
      long long v6 = 0u;
      long long v3 = 0u;
      long long v4 = 0u;
      long long v2 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v2);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(&v2, "num-input-hyps must be provided for using model-based confidence");
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v2);
    }
  }
  else if (*(unsigned char *)(this + 471))
  {
    goto LABEL_3;
  }
  if (*(unsigned char *)(this + 505))
  {
    long long v2 = 0uLL;
    *(void *)&long long v3 = 0;
    operator new();
  }
  return this;
}

uint64_t quasar::E2EAsrConfidence::runImpl(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v154 = *MEMORY[0x1E4F143B8];
  long long v4 = *(void **)(*a3 + 352);
  if (v4)
  {
    long long v5 = a3;
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4[1] - *v4) >> 3);
    if (v7 == 1)
    {
      if (*(void *)(*v4 + 8) == *(void *)*v4)
      {
        if (quasar::gLogLevel < 5) {
          return 0;
        }
        long long v143 = 0u;
        long long v144 = 0u;
        long long v141 = 0u;
        long long v142 = 0u;
        long long v139 = 0u;
        long long v140 = 0u;
        long long v137 = 0u;
        long long v138 = 0u;
        long long v135 = 0u;
        long long v136 = 0u;
        long long v133 = 0u;
        long long v134 = 0u;
        long long v131 = 0u;
        long long v132 = 0u;
        long long v129 = 0u;
        long long v130 = 0u;
        long long __p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Only one result in resultChoices and its empty. Skipping confidence estimation", 78);
        goto LABEL_6;
      }
    }
    else if (!v7)
    {
      goto LABEL_4;
    }
    if ((*(_DWORD *)(a1 + 496) & 0x80000000) != 0)
    {
      *(_DWORD *)(a1 + 496) = v7;
      if (*(unsigned char *)(a1 + 505)) {
        **(_DWORD **)(a1 + 52std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = v7;
      }
    }
    int v8 = *(_DWORD *)(a1 + 500);
    int v9 = *(_DWORD *)(*(void *)a4 + 16);
    if (v8 < 0 || v8 > v9)
    {
      if (v9 >= *(_DWORD *)(a1 + 496)) {
        int v9 = *(_DWORD *)(a1 + 496);
      }
      *(_DWORD *)(a1 + 50std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = v9;
      if (*(unsigned char *)(a1 + 505)) {
        *(_DWORD *)(*(void *)(a1 + 520) + 4) = v9;
      }
    }
    std::vector<std::vector<std::string>>::vector(v127, *(int *)(a1 + 496));
    long long v115 = v5;
    uint64_t v116 = a1;
    uint64_t v10 = *v4;
    uint64_t v11 = v4[1];
    int v12 = -1431655765 * ((unint64_t)(v11 - *v4) >> 3);
    int v13 = *(_DWORD *)(a1 + 496);
    if (v13 < v12) {
      int v12 = *(_DWORD *)(a1 + 496);
    }
    if (v12 >= 1)
    {
      for (uint64_t i = 0; i < v27; ++i)
      {
        uint64_t v15 = *(void *)(v10 + 24 * i);
        if (*(void *)(v10 + 24 * i + 8) != v15)
        {
          unint64_t v16 = 0;
          do
          {
            uint64_t v17 = v15 + 224 * v16;
            long long v18 = *(long long **)(v17 + 120);
            if (*(long long **)(v17 + 128) == v18)
            {
              int64x2_t v23 = (uint64_t *)(v127[0] + 24 * i);
              int v24 = v23 + 1;
              unint64_t v25 = v23[1];
              if (v25 >= v23[2])
              {
                uint64_t v26 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v23, (long long *)v17);
              }
              else
              {
                std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v23, (long long *)v17);
                uint64_t v26 = v25 + 24;
              }
              uint64_t *v24 = v26;
              uint64_t v10 = *v4;
              uint64_t v15 = *(void *)(*v4 + 24 * i);
            }
            else
            {
              do
              {
                uint64_t v19 = (uint64_t *)(v127[0] + 24 * i);
                double v20 = v19 + 1;
                unint64_t v21 = v19[1];
                if (v21 >= v19[2])
                {
                  uint64_t v22 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v19, v18);
                }
                else
                {
                  std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v19, v18);
                  uint64_t v22 = v21 + 24;
                }
                *double v20 = v22;
                v18 += 2;
                uint64_t v10 = *v4;
                uint64_t v15 = *(void *)(*v4 + 24 * i);
              }
              while (v18 != *(long long **)(v15 + 224 * v16 + 128));
            }
            ++v16;
          }
          while (0x6DB6DB6DB6DB6DB7 * ((*(void *)(v10 + 24 * i + 8) - v15) >> 5) > v16);
          uint64_t v11 = v4[1];
          long long v5 = v115;
          int v13 = *(_DWORD *)(a1 + 496);
        }
        int v27 = -1431655765 * ((unint64_t)(v11 - v10) >> 3);
        if (v13 < v27) {
          int v27 = v13;
        }
      }
    }
    uint64_t v124 = 0;
    uint64_t v125 = 0;
    uint64_t v126 = 0;
    uint64_t v28 = a1;
    if (*(unsigned char *)(a1 + 504) || *(unsigned char *)(a1 + 505))
    {
      unint64_t v29 = **(double ***)(*v5 + 392);
      uint64_t v30 = *(void *)(a1 + 520);
      long long __p = 0uLL;
      *(void *)&long long v129 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<double *>,std::__wrap_iter<double *>>((char *)&__p, v29, &v29[v13], v13);
      kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(v30, v127, (uint64_t)&__p, *(_DWORD *)(*v5 + 576), &v124);
      if ((void)__p)
      {
        *((void *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
      uint64_t v31 = *v5;
      if (!*(void *)(*v5 + 224))
      {
        long long v32 = operator new(0x30uLL);
        v32[1] = 0;
        v32[2] = 0;
        void *v32 = &unk_1F0A62B70;
        v32[4] = 0;
        v32[5] = 0;
        void v32[3] = 0;
        long long v33 = *(std::__shared_weak_count **)(v31 + 232);
        *(void *)(v31 + 2++*(_DWORD *)(result + 24) = v32 + 3;
        *(void *)(v31 + 232) = v32;
        if (v33) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v33);
        }
        uint64_t v34 = *(void *)(v116 + 520);
        *(void *)&long long v129 = 0;
        long long __p = 0uLL;
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&__p, *(long long **)(v34 + 56), *(long long **)(v34 + 64), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v34 + 64) - *(void *)(v34 + 56)) >> 3));
        long long v35 = *(std::vector<std::wstring> **)(*v5 + 224);
        std::vector<std::string>::__vdeallocate(v35);
        *(_OWORD *)&v35->__begin_ = __p;
        v35->__end_cap_.__value_ = (std::wstring *)v129;
        long long __p = 0uLL;
        *(void *)&long long v129 = 0;
        v147.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v147);
      }
      float v36 = operator new(0x30uLL);
      v36[1] = 0;
      v36[2] = 0;
      *float v36 = &unk_1F0A629B0;
      v36[4] = 0;
      v36[5] = 0;
      void v36[3] = 0;
      uint64_t v37 = *v5;
      long long v38 = *(std::__shared_weak_count **)(*v5 + 248);
      *(void *)(v37 + 24std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = v36 + 3;
      *(void *)(v37 + 248) = v36;
      if (v38) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v38);
      }
      uint64_t v39 = *(uint64_t **)(*v5 + 240);
      if (v39 != &v124) {
        std::vector<kaldi::Matrix<float>>::__assign_with_size[abi:ne180100]<kaldi::Matrix<float>*,kaldi::Matrix<float>*>((uint64_t)v39, v124, v125, 0xCCCCCCCCCCCCCCCDLL * ((v125 - v124) >> 3));
      }
      long long v40 = operator new(0x30uLL);
      v40[1] = 0;
      v40[2] = 0;
      void *v40 = &unk_1F0A62A90;
      int v40[4] = 0;
      v40[5] = 0;
      v40[3] = 0;
      uint64_t v41 = *v5;
      unint64_t v42 = *(std::__shared_weak_count **)(*v5 + 264);
      *(void *)(v41 + 256) = v40 + 3;
      *(void *)(v41 + 264) = v40;
      if (v42) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v42);
      }
    }
    if (*(unsigned char *)(v116 + 504))
    {
      uint64_t v43 = v124;
      if (v125 != v124)
      {
        unint64_t v44 = 0;
        do
        {
          long long __p = 0uLL;
          *(void *)&long long v129 = 0;
          uint64_t v45 = *(void *)(v116 + 512);
          uint64_t v46 = *(void *)(v116 + 520);
          memset(&v147, 0, sizeof(v147));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v147, *(long long **)(v46 + 56), *(long long **)(v46 + 64), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v46 + 64) - *(void *)(v46 + 56)) >> 3));
          kaldi::quasar::LogisticRegressionModel::GetOutput(v45, v43 + 40 * v44, (unsigned __int8 **)&v147, &__p);
          v123[0] = &v147;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v123);
          int64x2_t v47 = (uint64_t *)(*v4 + 24 * v44);
          uint64_t v48 = *v47;
          uint64_t v49 = v47[1];
          if (v48 != v49)
          {
            int v50 = 0;
            uint64_t v51 = __p;
            do
            {
              uint64_t v53 = *(void *)(v48 + 120);
              uint64_t v52 = *(void *)(v48 + 128);
              if (v52 == v53)
              {
                *(float *)(v48 + 4std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = roundf(*(float *)(v51 + 4 * v50++) * 1000.0);
              }
              else
              {
                long long v54 = (float *)(v51 + 4 * v50);
                float v55 = 1.0;
                do
                {
                  *(float *)(v53 + ++*(_DWORD *)(result + 24) = roundf(*v54 * 1000.0);
                  float v56 = *v54++;
                  float v55 = v55 * v56;
                  v53 += 32;
                  ++v50;
                }
                while (v53 != v52);
                *(float *)(v48 + 4std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = roundf(v55 * 1000.0);
              }
              v48 += 224;
            }
            while (v48 != v49);
          }
          uint64_t v57 = *(void *)(*v115 + 256);
          unint64_t v58 = *(void *)(v57 + 8);
          if (v58 >= *(void *)(v57 + 16))
          {
            uint64_t v59 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(*(uint64_t **)(*v115 + 256), (uint64_t)&__p);
          }
          else
          {
            std::vector<std::vector<float>>::__construct_one_at_end[abi:ne180100]<std::vector<float> const&>(*(void *)(*v115 + 256), (uint64_t)&__p);
            uint64_t v59 = v58 + 24;
          }
          *(void *)(v57 + 8) = v59;
          if ((void)__p)
          {
            *((void *)&__p + 1) = __p;
            operator delete((void *)__p);
          }
          ++v44;
          uint64_t v43 = v124;
        }
        while (0xCCCCCCCCCCCCCCCDLL * ((v125 - v124) >> 3) > v44);
      }
    }
    else
    {
      std::vector<float>::vector(v123, (uint64_t)(*(void *)(*(void *)(*v5 + 392) + 8) - **(void **)(*v5 + 392)) >> 3);
      long long v60 = *(double ***)(*v5 + 392);
      long long v61 = *v60;
      long long v62 = v60[1];
      if (v61 != v62)
      {
        long long v63 = (float *)v123[0];
        do
        {
          double v64 = *v61++;
          float v65 = v64;
          *v63++ = -v65;
        }
        while (v61 != v62);
      }
      kaldi::quasar::ApplySoftMax((float **)v123);
      v146[0] = &unk_1F0A5AC28;
      v146[3] = v146;
      v145[0] = &unk_1F0A5AC80;
      v145[3] = v145;
      kaldi::quasar::ConfusionNetwork<std::string>::ConfusionNetwork(&v147, v127, v123, v146, v145);
      std::__function::__value_func<std::string ()(std::string)>::~__value_func[abi:ne180100](v145);
      std::__function::__value_func<std::vector<std::string> ()(std::vector<std::string>)>::~__value_func[abi:ne180100](v146);
      std::vector<std::vector<float>>::resize(*(uint64_t **)(*v5 + 256), *(int *)(v116 + 500));
      uint64_t v120 = 0;
      uint64_t v121 = 0;
      uint64_t v122 = 0;
      std::vector<kaldi::quasar::ConfusionNetworkSlot<std::string>>::__init_with_size[abi:ne180100]<kaldi::quasar::ConfusionNetworkSlot<std::string>*,kaldi::quasar::ConfusionNetworkSlot<std::string>*>(&v120, v152, v153, 0x2E8BA2E8BA2E8BA3 * ((v153 - v152) >> 4));
      unint64_t v66 = *(int *)(v116 + 496);
      *(void *)&long long __p = 0;
      std::vector<unsigned long>::vector(v119, v66, &__p);
      unint64_t v67 = *(int *)(v116 + 496);
      long long __p = 0uLL;
      *(void *)&long long v129 = 0;
      std::vector<std::vector<unsigned long>>::vector(v118, v67, (uint64_t)&__p);
      if ((void)__p)
      {
        *((void *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
      uint64_t v69 = v120;
      uint64_t v68 = v121;
      if (v121 != v120)
      {
        unint64_t v70 = 0;
        LODWORD(v71) = *(_DWORD *)(v116 + 500);
        do
        {
          if ((int)v71 >= 1)
          {
            uint64_t v72 = 0;
            do
            {
              if (kaldi::quasar::ConfusionNetworkSlot<std::string>::HasTokenFromSequence(v120 + 176 * v70, v72))
              {
                memset(&v117, 0, sizeof(v117));
                uint64_t v73 = *((void *)v119[0] + v72);
                uint64_t v74 = *(void *)(*v4 + 24 * v72);
                uint64_t v75 = *(void *)(v74 + 224 * v73 + 120);
                uint64_t v76 = *(void *)(v74 + 224 * v73 + 128);
                if (v76 == v75)
                {
                  long long v81 = (const std::string *)(v74 + 224 * v73);
                }
                else
                {
                  long long v77 = (uint64_t *)(v118[0] + 24 * v72);
                  uint64_t v78 = *v77;
                  if (v77[1] == *v77)
                  {
                    unint64_t v79 = 0x6DB6DB6DB6DB6DB7 * ((*(void *)(*v4 + 24 * v72 + 8) - v74) >> 5);
                    *(void *)&long long __p = 0;
                    std::vector<unsigned long>::resize((uint64_t)v77, v79, &__p);
                    uint64_t v73 = *((void *)v119[0] + v72);
                    uint64_t v78 = *(void *)(v118[0] + 24 * v72);
                    uint64_t v75 = *(void *)(*(void *)(*v4 + 24 * v72) + 224 * v73 + 120);
                    uint64_t v76 = *(void *)(*(void *)(*v4 + 24 * v72) + 224 * v73 + 128);
                  }
                  unint64_t v80 = *(void *)(v78 + 8 * v73);
                  if (v80 >= (v76 - v75) >> 5)
                  {
                    long long v143 = 0u;
                    long long v144 = 0u;
                    long long v141 = 0u;
                    long long v142 = 0u;
                    long long v139 = 0u;
                    long long v140 = 0u;
                    long long v137 = 0u;
                    long long v138 = 0u;
                    long long v135 = 0u;
                    long long v136 = 0u;
                    long long v133 = 0u;
                    long long v134 = 0u;
                    long long v131 = 0u;
                    long long v132 = 0u;
                    long long v129 = 0u;
                    long long v130 = 0u;
                    long long __p = 0u;
                    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Subword token index exceeds the number of subwords in the token", 63);
                    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&__p);
                  }
                  long long v81 = (const std::string *)(v75 + 32 * v80);
                }
                std::string::operator=(&v117, v81);
                if (!kaldi::quasar::ConfusionNetworkSlot<std::string>::HasToken(v120 + 176 * v70, (uint64_t)&v117))
                {
                  long long v143 = 0u;
                  long long v144 = 0u;
                  long long v141 = 0u;
                  long long v142 = 0u;
                  long long v139 = 0u;
                  long long v140 = 0u;
                  long long v137 = 0u;
                  long long v138 = 0u;
                  long long v135 = 0u;
                  long long v136 = 0u;
                  long long v133 = 0u;
                  long long v134 = 0u;
                  long long v131 = 0u;
                  long long v132 = 0u;
                  long long v129 = 0u;
                  long long v130 = 0u;
                  long long __p = 0u;
                  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
                  unint64_t v109 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Hypothesis token (", 18);
                  uint64_t v110 = *(void *)(*v4 + 24 * v72) + 224 * *((void *)v119[0] + v72);
                  int v111 = *(char *)(v110 + 23);
                  if (v111 >= 0) {
                    uint64_t v112 = *(void *)(*v4 + 24 * v72) + 224 * *((void *)v119[0] + v72);
                  }
                  else {
                    uint64_t v112 = *(void *)v110;
                  }
                  if (v111 >= 0) {
                    uint64_t v113 = *(unsigned __int8 *)(v110 + 23);
                  }
                  else {
                    uint64_t v113 = *(void *)(v110 + 8);
                  }
                  long long v114 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v109, v112, v113);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v114, (uint64_t)") does not match any arc in the confusion network slot", 54);
                  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&__p);
                }
                uint64_t v82 = *((void *)v119[0] + v72);
                uint64_t v83 = v120 + 176 * v70;
                uint64_t v84 = *(void *)(v127[0] + 24 * v72) + 24 * v82;
                if (*(void *)(*(void *)(*v4 + 24 * v72) + 224 * v82 + 128) == *(void *)(*(void *)(*v4 + 24 * v72)
                                                                                             + 224 * v82
                                                                                             + 120))
                {
                  Tokendouble Weight = kaldi::quasar::ConfusionNetworkSlot<std::string>::GetTokenWeight(v83, v84);
                  uint64_t v86 = *((void *)v119[0] + v72);
                  uint64_t v87 = *(void *)(*v4 + 24 * v72);
                  *(float *)(v87 + 224 * v86 + 4std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = roundf(*(float *)&TokenWeight * 1000.0);
                }
                else
                {
                  double v85 = kaldi::quasar::ConfusionNetworkSlot<std::string>::GetTokenWeight(v83, v84);
                  uint64_t v86 = *((void *)v119[0] + v72);
                  uint64_t v87 = *(void *)(*v4 + 24 * v72);
                  *(float *)(*(void *)(v87 + 224 * v86 + 120)
                           + 32 * *(void *)(*(void *)(v118[0] + 24 * v72) + 8 * v86)
                           + ++*(_DWORD *)(result + 24) = roundf(*(float *)&v85 * 1000.0);
                }
                uint64_t v89 = **(void **)(*v5 + 256) + 24 * v72;
                long long v90 = (_DWORD *)(v87 + 224 * v86 + 40);
                size_t v92 = (_DWORD **)(v89 + 8);
                size_t v91 = *(_DWORD **)(v89 + 8);
                long long v94 = (void *)(v89 + 16);
                unint64_t v93 = *(void *)(v89 + 16);
                if ((unint64_t)v91 >= v93)
                {
                  std::string::size_type v96 = *(_DWORD **)v89;
                  uint64_t v97 = ((uint64_t)v91 - *(void *)v89) >> 2;
                  unint64_t v98 = v97 + 1;
                  if ((unint64_t)(v97 + 1) >> 62) {
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v99 = v93 - (void)v96;
                  if (v99 >> 1 > v98) {
                    unint64_t v98 = v99 >> 1;
                  }
                  if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v100 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v100 = v98;
                  }
                  if (v100)
                  {
                    long long v101 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v94, v100);
                    size_t v91 = *v92;
                    std::string::size_type v96 = *(_DWORD **)v89;
                  }
                  else
                  {
                    long long v101 = 0;
                  }
                  uint64_t v102 = &v101[4 * v97];
                  *(_DWORD *)uint64_t v102 = *v90;
                  long long v95 = v102 + 4;
                  if (v91 == v96)
                  {
                    long long v5 = v115;
                  }
                  else
                  {
                    long long v5 = v115;
                    do
                    {
                      int v103 = *--v91;
                      *((_DWORD *)v102 - 1) = v103;
                      v102 -= 4;
                    }
                    while (v91 != v96);
                  }
                  *(void *)uint64_t v89 = v102;
                  *size_t v92 = v95;
                  void *v94 = &v101[4 * v100];
                  if (v96) {
                    operator delete(v96);
                  }
                }
                else
                {
                  *size_t v91 = *v90;
                  long long v95 = v91 + 1;
                }
                uint64_t v28 = v116;
                *size_t v92 = v95;
                uint64_t v104 = *((void *)v119[0] + v72);
                uint64_t v105 = *(void *)(*(void *)(*v4 + 24 * v72) + 224 * v104 + 128)
                     - *(void *)(*(void *)(*v4 + 24 * v72) + 224 * v104 + 120);
                if (v105
                  && (uint64_t v106 = *(void *)(v118[0] + 24 * v72),
                      uint64_t v107 = *(void *)(v106 + 8 * v104) + 1,
                      v107 != v105 >> 5))
                {
                  *(void *)(v106 + 8 * v104) = v107;
                }
                else
                {
                  *((void *)v119[0] + v72) = v104 + 1;
                }
                if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v117.__r_.__value_.__l.__data_);
                }
              }
              ++v72;
              uint64_t v71 = *(int *)(v28 + 500);
            }
            while (v72 < v71);
            uint64_t v69 = v120;
            uint64_t v68 = v121;
          }
          ++v70;
        }
        while (0x2E8BA2E8BA2E8BA3 * ((v68 - v69) >> 4) > v70);
      }
      *(void *)&long long __p = v118;
      std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      if (v119[0])
      {
        v119[1] = v119[0];
        operator delete(v119[0]);
      }
      *(void *)&long long __p = &v120;
      std::vector<kaldi::quasar::ConfusionNetworkSlot<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      *(void *)&long long __p = &v152;
      std::vector<kaldi::quasar::ConfusionNetworkSlot<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      *(void *)&long long __p = &v151;
      std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      if (v149)
      {
        float v150 = v149;
        operator delete(v149);
      }
      std::__function::__value_func<std::string ()(std::string)>::~__value_func[abi:ne180100](v148);
      std::__function::__value_func<std::vector<std::string> ()(std::vector<std::string>)>::~__value_func[abi:ne180100](&v147.__r_.__value_.__l.__size_);
      if (v123[0])
      {
        v123[1] = v123[0];
        operator delete(v123[0]);
      }
    }
    *(void *)&long long __p = &v124;
    std::vector<kaldi::Matrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    *(void *)&long long __p = v127;
    std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    return 0;
  }
LABEL_4:
  if (quasar::gLogLevel >= 5)
  {
    long long v143 = 0u;
    long long v144 = 0u;
    long long v141 = 0u;
    long long v142 = 0u;
    long long v139 = 0u;
    long long v140 = 0u;
    long long v137 = 0u;
    long long v138 = 0u;
    long long v135 = 0u;
    long long v136 = 0u;
    long long v133 = 0u;
    long long v134 = 0u;
    long long v131 = 0u;
    long long v132 = 0u;
    long long v129 = 0u;
    long long v130 = 0u;
    long long __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"No result choices available. Skipping confidence estimation", 59);
LABEL_6:
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&__p);
  }
  return 0;
}

void sub_1B230B1EC(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B230B28CLL);
}

void sub_1B230B200()
{
}

void sub_1B230B208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,char *a36)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  a36 = &a18;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a36);
  if (a21)
  {
    a22 = (uint64_t)a21;
    operator delete(a21);
  }
  a36 = &a24;
  std::vector<kaldi::quasar::ConfusionNetworkSlot<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a36);
  kaldi::quasar::ConfusionNetwork<std::string>::~ConfusionNetwork(v36 - 248);
  if (a27)
  {
    a28 = (uint64_t)a27;
    operator delete(a27);
  }
  a36 = &a30;
  std::vector<kaldi::Matrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a36);
  a36 = &a33;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a36);
  _Unwind_Resume(a1);
}

void quasar::E2EAsrConfidence::registerParams(quasar::E2EAsrConfidence *this, quasar::SystemConfig *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "e2e-asr-confidence");
  quasar::SystemConfig::enforceMinVersion((uint64_t)a2, 171, 0, (uint64_t)__p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "confidence-model-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "Filename for confidence model file. Each line must have the format: intercept <value> OR, <FEATURE> <WEIGHT> [ <FEATURE-MEAN> [ <FEATURE-STD> ] ](feature mean and std values are both optional, could be provided for feature normalization)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 448, (uint64_t)v4, 0, 171, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "token-unigram-freqs");
  std::string::basic_string[abi:ne180100]<0>(v4, "Name of the file with token unigram frequencies");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 472, (uint64_t)v4, 0, 171, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "num-input-hyps");
  std::string::basic_string[abi:ne180100]<0>(v4, "number of hypotheses to expect as input to the confidence feature extractor");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 496, (uint64_t)v4, 0, 171, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "num-output-hyps");
  std::string::basic_string[abi:ne180100]<0>(v4, "number of hypotheses to produce confidence values for");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 500, (uint64_t)v4, 0, 171, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "extract-features");
  std::string::basic_string[abi:ne180100]<0>(v4, "Extract confidence features (even if model is not provided)");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)this + 505, (uint64_t)v4, 0, 195, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B230B510(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void quasar::E2EAsrConfidence::~E2EAsrConfidence(quasar::E2EAsrConfidence *this)
{
  quasar::E2EAsrConfidence::~E2EAsrConfidence(this);
  JUMPOUT(0x1B3EA8670);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_1F0A532A8;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 528);
  long long v2 = *((void *)this + 65);
  *((void *)this + 65) = 0;
  if (v2) {
    std::default_delete<kaldi::quasar::ConfidenceFeatureExtractor<std::string>>::operator()[abi:ne180100]((uint64_t)this + 520, v2);
  }
  long long v3 = *((void *)this + 64);
  *((void *)this + 64) = 0;
  if (v3) {
    std::default_delete<kaldi::quasar::LogisticRegressionModel>::operator()[abi:ne180100]((uint64_t)this + 512, v3);
  }
  if (*((char *)this + 495) < 0) {
    operator delete(*((void **)this + 59));
  }
  if (*((char *)this + 471) < 0) {
    operator delete(*((void **)this + 56));
  }
  quasar::Decoder::~Decoder(this);
}

void std::default_delete<kaldi::quasar::LogisticRegressionModel>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    long long v3 = *(void **)(a2 + 80);
    if (v3)
    {
      *(void *)(a2 + 88) = v3;
      operator delete(v3);
    }
    long long v4 = *(void **)(a2 + 56);
    if (v4)
    {
      *(void *)(a2 + 64) = v4;
      operator delete(v4);
    }
    long long v6 = (void **)(a2 + 32);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
    char v5 = *(void **)a2;
    if (*(void *)a2)
    {
      *(void *)(a2 + 8) = v5;
      operator delete(v5);
    }
    MEMORY[0x1B3EA8670](a2, 0x10A0C40763862BBLL);
  }
}

uint64_t std::default_delete<kaldi::quasar::ConfidenceFeatureExtractor<std::string>>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    long long v4 = (void **)(a2 + 56);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a2 + 8);
    return MEMORY[0x1B3EA8670](a2, 0x10A0C40C6F6957FLL);
  }
  return result;
}

char *std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<double *>,std::__wrap_iter<double *>>(char *result, double *a2, double *a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    uint64_t result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    char v7 = (float *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      double v8 = *a2++;
      float v9 = v8;
      *v7++ = v9;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_1B230B788(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<std::vector<std::string>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62B70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<std::string>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62B70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<std::vector<std::string>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::__shared_ptr_emplace<std::vector<kaldi::Matrix<float>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A629B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<kaldi::Matrix<float>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A629B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<std::vector<kaldi::Matrix<float>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 24);
  std::vector<kaldi::Matrix<float>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

uint64_t std::vector<kaldi::Matrix<float>>::__assign_with_size[abi:ne180100]<kaldi::Matrix<float>*,kaldi::Matrix<float>*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  float v9 = *(int32x2_t **)a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    std::vector<kaldi::Matrix<float>>::__vdeallocate((void **)a1);
    if (a4 > 0x666666666666666) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x999999999999999ALL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x333333333333333) {
      unint64_t v11 = 0x666666666666666;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<quasar::AlternativeSelectionSpan>::__vallocate[abi:ne180100]((void *)a1, v11);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::Matrix<float>>,kaldi::Matrix<float>*,kaldi::Matrix<float>*,kaldi::Matrix<float>*>(v8, a2, a3, *(void *)(a1 + 8));
    goto LABEL_11;
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    uint64_t v13 = a2 + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3);
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,kaldi::Matrix<float> *,kaldi::Matrix<float> *,kaldi::Matrix<float> *,0>(a2, v13, v9);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::Matrix<float>>,kaldi::Matrix<float>*,kaldi::Matrix<float>*,kaldi::Matrix<float>*>(v8, v13, a3, *(void *)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = result;
    return result;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,kaldi::Matrix<float> *,kaldi::Matrix<float> *,kaldi::Matrix<float> *,0>(a2, a3, v9);
  uint64_t v15 = v14;
  uint64_t result = *(void *)(a1 + 8);
  if (result != v14)
  {
    do
      uint64_t result = kaldi::Matrix<float>::~Matrix(result - 40);
    while (result != v15);
  }
  *(void *)(a1 + 8) = v15;
  return result;
}

void sub_1B230BA48(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B230BA50(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<kaldi::Matrix<float>>::__vdeallocate(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    long long v4 = v1;
    if ((void *)v3 != v1)
    {
      do
        uint64_t v3 = kaldi::Matrix<float>::~Matrix(v3 - 40);
      while ((void *)v3 != v1);
      long long v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::Matrix<float>>,kaldi::Matrix<float>*,kaldi::Matrix<float>*,kaldi::Matrix<float>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      kaldi::Matrix<float>::Matrix(a4 + v7, a2 + v7);
      v7 += 40;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1B230BB18(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 40;
    do
    {
      kaldi::Matrix<float>::~Matrix(v4 + v2);
      v2 -= 40;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,kaldi::Matrix<float> *,kaldi::Matrix<float> *,kaldi::Matrix<float> *,0>(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      kaldi::Matrix<float>::operator=(a3, v4);
      v4 += 40;
      a3 += 5;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

void std::__shared_ptr_emplace<std::vector<std::vector<float>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62A90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<std::vector<float>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62A90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<std::vector<std::vector<float>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 24);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void *std::vector<std::vector<unsigned long>>::vector(void *a1, unint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    long long v6 = (void *)a1[1];
    uint64_t v7 = 3 * a2;
    uint64_t v8 = &v6[3 * a2];
    uint64_t v9 = 8 * v7;
    do
    {
      void *v6 = 0;
      v6[1] = 0;
      int v6[2] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v6, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3);
      v6 += 3;
      v9 -= 24;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_1B230BCDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void quasar::corrective_reranking::Parser::RunArgs::RunArgs(quasar::corrective_reranking::Parser::RunArgs *this, const quasar::PTree *a2)
{
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((void *)this + 12) = 0x101010101010101;
  *((_DWORD *)this + 26) = 0;
  *((_WORD *)this + 54) = 257;
  *((unsigned char *)this + 11std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = 0;
  *((_DWORD *)this + 28) = 10;
  *((_WORD *)this + 58) = 256;
  std::string::basic_string[abi:ne180100]<0>(__p, "displayed_text");
  quasar::PTree::getChild((uint64_t)a2, (uint64_t)__p);
}

void sub_1B230C150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  uint64_t v17 = *(void **)(v15 + 72);
  if (v17)
  {
    *(void *)(v15 + 8std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = v17;
    operator delete(v17);
  }
  long long v18 = *(void **)(v15 + 48);
  if (v18)
  {
    *(void *)(v15 + 56) = v18;
    operator delete(v18);
  }
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::corrective_reranking::ASRCandidate>::emplace_back<quasar::PTree const&>(uint64_t *a1, quasar::PTree *a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v9 = (uint64_t)(v7 - *a1) >> 5;
    if ((unint64_t)(v9 + 1) >> 59) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v5 - *a1;
    uint64_t v11 = v10 >> 4;
    if (v10 >> 4 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t v19 = v4;
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v15 = v13;
    unint64_t v16 = (quasar::corrective_reranking::ASRCandidate *)&v13[32 * v9];
    long long v18 = &v13[32 * v12];
    quasar::corrective_reranking::ASRCandidate::ASRCandidate(v16, a2);
    uint64_t v17 = (char *)v16 + 32;
    std::vector<quasar::corrective_reranking::ASRCandidate>::__swap_out_circular_buffer(a1, &v15);
    uint64_t v8 = a1[1];
    std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    quasar::corrective_reranking::ASRCandidate::ASRCandidate(*(quasar::corrective_reranking::ASRCandidate **)(v4 - 8), a2);
    uint64_t v8 = v7 + 32;
    a1[1] = v7 + 32;
  }
  a1[1] = v8;
  return v8 - 32;
}

void sub_1B230C324(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void quasar::corrective_reranking::Parser::Output::toPtree(unsigned int *a1@<X0>, uint64_t *a2@<X1>, quasar::PTree *a3@<X8>)
{
  quasar::PTree::PTree(a3);
  if (*((unsigned char *)a1 + 4))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "disambiguation_ui_result");
    if (!*((unsigned char *)a1 + 4)) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    int v6 = *a1;
    int Type = quasar::getType((quasar *)*a1);
    std::to_string(&v21, v6);
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    char v25 = 1;
    quasar::PTree::putChild((uint64_t)a3, (uint64_t)&__p, (uint64_t)&Type, 1);
    quasar::PTree::~PTree((quasar::PTree *)&Type);
    if (v15.__r_.__value_.__s.__data_[15] < 0) {
      operator delete(__p);
    }
  }
  quasar::PTree::PTree((quasar::PTree *)&Type);
  uint64_t v7 = *((void *)a1 + 1);
  uint64_t v8 = *((void *)a1 + 2);
  while (v7 != v8)
  {
    quasar::corrective_reranking::Parse::toPtree(v7, a2, (quasar::PTree *)&__p);
    quasar::PTree::addChild((quasar::PTree *)&Type, (const quasar::PTree *)&__p);
    quasar::PTree::~PTree((quasar::PTree *)&__p);
    v7 += 232;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "parses");
  quasar::PTree::putChild((uint64_t)a3, (uint64_t)&__p, (uint64_t)&Type, 1);
  if (v15.__r_.__value_.__s.__data_[15] < 0) {
    operator delete(__p);
  }
  if (*((unsigned char *)a1 + 33))
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "intent_gating_passed");
    if (!*((unsigned char *)a1 + 33)) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    int v9 = *((unsigned __int8 *)a1 + 32);
    LODWORD(__p) = quasar::getType((quasar *)*((unsigned __int8 *)a1 + 32));
    std::to_string(&v15, v9);
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    char v19 = 1;
    quasar::PTree::putChild((uint64_t)a3, (uint64_t)v12, (uint64_t)&__p, 1);
    quasar::PTree::~PTree((quasar::PTree *)&__p);
    if (v13 < 0) {
      operator delete(v12[0]);
    }
  }
  if (*((unsigned char *)a1 + 40))
  {
    uint64_t v10 = (quasar *)std::string::basic_string[abi:ne180100]<0>(v12, "edit_intent_score");
    if (!*((unsigned char *)a1 + 40)) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    float v11 = *((float *)a1 + 9);
    LODWORD(__p) = quasar::getType(v10, v11);
    std::to_string(&v15, v11);
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    char v19 = 1;
    quasar::PTree::putChild((uint64_t)a3, (uint64_t)v12, (uint64_t)&__p, 1);
    quasar::PTree::~PTree((quasar::PTree *)&__p);
    if (v13 < 0) {
      operator delete(v12[0]);
    }
  }
  quasar::PTree::~PTree((quasar::PTree *)&Type);
}

void sub_1B230C59C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  quasar::PTree::~PTree((quasar::PTree *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  quasar::PTree::~PTree((quasar::PTree *)&a27);
  quasar::PTree::~PTree(v27);
  _Unwind_Resume(a1);
}

void quasar::corrective_reranking::Parser::Parser(uint64_t a1, uint64_t a2)
{
}

void sub_1B230C680(_Unwind_Exception *a1)
{
  quasar::corrective_reranking::Config::~Config(v1);
  _Unwind_Resume(a1);
}

void quasar::corrective_reranking::Parser::run(quasar::corrective_reranking::Parser *this@<X0>, const quasar::corrective_reranking::Parser::RunArgs *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v86 = *MEMORY[0x1E4F143B8];
  v84[0] = &unk_1F0A5CB18;
  v84[1] = this;
  v84[2] = a2;
  void v84[3] = v84;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v85, (uint64_t)v84);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v84);
  int v6 = *((unsigned __int8 *)a2 + 103);
  uint64_t v7 = *((void *)a2 + 3);
  uint64_t v8 = *((void *)a2 + 4);
  long long v65 = 0uLL;
  uint64_t v66 = 0;
  *(unsigned char *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  int v9 = (long long *)(a3 + 8);
  *(unsigned char *)(a3 + 4) = 0;
  *(unsigned char *)(a3 + 36) = 0;
  *(unsigned char *)(a3 + 4std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = 0;
  *(_DWORD *)(a3 + 44) = 0;
  *(unsigned char *)(a3 + 48) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + ++*(_DWORD *)(result + 24) = 0;
  *(_WORD *)(a3 + 32) = 0;
  if (v7 == v8) {
    goto LABEL_144;
  }
  int v48 = v6;
  if (*((unsigned char *)a2 + 116))
  {
    uint64_t v10 = 0;
    unint64_t v58 = 0;
    uint64_t v59 = 0;
    long long v60 = 0;
    do
    {
      if (v10 >= (std::string *)v60)
      {
        uint64_t v10 = (std::string *)std::vector<std::string>::__emplace_back_slow_path<std::string const&>((uint64_t *)&v58, (long long *)v7);
      }
      else
      {
        if (*(char *)(v7 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)v7, *(void *)(v7 + 8));
        }
        else
        {
          long long v11 = *(_OWORD *)v7;
          v10->__r_.__value_.__r.__words[2] = *(void *)(v7 + 16);
          *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
        }
        ++v10;
      }
      uint64_t v59 = v10;
      v7 += 32;
    }
    while (v7 != v8);
    if (quasar::gLogLevel > 4)
    {
      long long v82 = 0u;
      long long v83 = 0u;
      long long v80 = 0u;
      long long v81 = 0u;
      long long v78 = 0u;
      long long v79 = 0u;
      long long v76 = 0u;
      long long v77 = 0u;
      long long v74 = 0u;
      long long v75 = 0u;
      long long v72 = 0u;
      long long v73 = 0u;
      long long v70 = 0u;
      long long v71 = 0u;
      long long v69 = 0u;
      memset(v68, 0, sizeof(v68));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v68);
      unint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"== UTTERANCES: ", 15);
      quasar::joinToList<std::vector<std::string>>((uint64_t *)&v58, 0);
      if ((v64 & 0x80u) == 0) {
        char v13 = __p;
      }
      else {
        char v13 = (void **)__p[0];
      }
      if ((v64 & 0x80u) == 0) {
        uint64_t v14 = v64;
      }
      else {
        uint64_t v14 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
      if ((char)v64 < 0) {
        operator delete(__p[0]);
      }
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v68);
    }
    *(void *)uint64_t v68 = &v58;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v68);
  }
  if (!*((unsigned char *)a2 + 110)
    || (int v15 = quasar::corrective_reranking::TargetIndexFilter::filterAsrCandidatesForTargetIndex(*((void *)this + 80), (uint64_t *)a2 + 3, *((_DWORD *)a2 + 28)), !v16))
  {
    quasar::corrective_reranking::Models::generateWFSTParses((uint64_t)this + 592, 1, (uint64_t *)a2 + 3, (unsigned __int8 *)a2, 0, (uint64_t *)__p);
    *(unsigned char *)(a3 + 44) = quasar::corrective_reranking::containsParseWithCompleteCommand((quasar::corrective_reranking::Parse **)__p);
    if (*((unsigned char *)a2 + 116) && quasar::gLogLevel >= 5)
    {
      long long v82 = 0u;
      long long v83 = 0u;
      long long v80 = 0u;
      long long v81 = 0u;
      long long v78 = 0u;
      long long v79 = 0u;
      long long v76 = 0u;
      long long v77 = 0u;
      long long v74 = 0u;
      long long v75 = 0u;
      long long v72 = 0u;
      long long v73 = 0u;
      long long v70 = 0u;
      long long v71 = 0u;
      long long v69 = 0u;
      memset(v68, 0, sizeof(v68));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v68);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"hasVoiceCommandInExhaustiveParses: ", 35);
      std::ostream::operator<<();
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v68);
    }
    quasar::corrective_reranking::Models::generateWFSTParses((uint64_t)this + 592, 0, (uint64_t *)a2 + 3, (unsigned __int8 *)a2, 0, (uint64_t *)v68);
    std::vector<quasar::corrective_reranking::Parse>::__vdeallocate((void **)&v65);
    long long v65 = *(_OWORD *)v68;
    uint64_t v66 = *(void *)&v68[16];
    memset(v68, 0, 24);
    unint64_t v58 = v68;
    std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
    if (*((unsigned char *)a2 + 116))
    {
      if (quasar::gLogLevel >= 5)
      {
        long long v82 = 0u;
        long long v83 = 0u;
        long long v80 = 0u;
        long long v81 = 0u;
        long long v78 = 0u;
        long long v79 = 0u;
        long long v76 = 0u;
        long long v77 = 0u;
        long long v74 = 0u;
        long long v75 = 0u;
        long long v72 = 0u;
        long long v73 = 0u;
        long long v70 = 0u;
        long long v71 = 0u;
        long long v69 = 0u;
        memset(v68, 0, sizeof(v68));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v68);
        uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"== WFST PARSES ==", 17);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" ", 1);
        std::ostream::operator<<();
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v68);
        if (quasar::gLogLevel >= 5)
        {
          long long v82 = 0u;
          long long v83 = 0u;
          long long v80 = 0u;
          long long v81 = 0u;
          long long v78 = 0u;
          long long v79 = 0u;
          long long v76 = 0u;
          long long v77 = 0u;
          long long v74 = 0u;
          long long v75 = 0u;
          long long v72 = 0u;
          long long v73 = 0u;
          long long v70 = 0u;
          long long v71 = 0u;
          long long v69 = 0u;
          memset(v68, 0, sizeof(v68));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v68);
          unint64_t v58 = &v65;
          LOBYTE(v59) = 0;
          long long v60 = a2;
          quasar::corrective_reranking::operator<<(v68, (uint64_t **)&v58);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v68);
        }
      }
    }
    if (*((unsigned char *)a2 + 98))
    {
      quasar::corrective_reranking::CorrectiveReranker::applyOverridePhrases(*((void *)this + 78), (uint64_t *)&v65, 0, (std::string::size_type)v68);
      std::vector<quasar::corrective_reranking::Parse>::__vdeallocate((void **)&v65);
      long long v65 = *(_OWORD *)v68;
      uint64_t v66 = *(void *)&v68[16];
      memset(v68, 0, 24);
      unint64_t v58 = v68;
      std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
      if (*((unsigned char *)a2 + 116))
      {
        if (quasar::gLogLevel >= 5)
        {
          long long v82 = 0u;
          long long v83 = 0u;
          long long v80 = 0u;
          long long v81 = 0u;
          long long v78 = 0u;
          long long v79 = 0u;
          long long v76 = 0u;
          long long v77 = 0u;
          long long v74 = 0u;
          long long v75 = 0u;
          long long v72 = 0u;
          long long v73 = 0u;
          long long v70 = 0u;
          long long v71 = 0u;
          long long v69 = 0u;
          memset(v68, 0, sizeof(v68));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v68);
          char v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"[Apply Override Phrases]\n", 25);
          unint64_t v58 = &v65;
          LOBYTE(v59) = 0;
          long long v60 = a2;
          quasar::corrective_reranking::operator<<(v19, (uint64_t **)&v58);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v68);
        }
      }
    }
    std::string v21 = (quasar::corrective_reranking::Parse *)*((void *)&v65 + 1);
    double v20 = (quasar::corrective_reranking::Parse *)v65;
    if ((void)v65 == *((void *)&v65 + 1))
    {
      uint64_t v26 = (char *)a2 + 24;
      uint64_t v25 = *((void *)a2 + 3);
      if (*((void *)v26 + 1) == v25) {
        std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
      }
      memset(v62, 0, sizeof(v62));
      LOBYTE(v58) = 0;
      char v61 = 0;
      std::string::basic_string[abi:ne180100]<0>(v56, "");
      uint64_t v53 = 0;
      long long v54 = 0;
      uint64_t v55 = 0;
      memset(v52, 0, sizeof(v52));
      memset(v51, 0, sizeof(v51));
      quasar::corrective_reranking::Parse::Parse((std::string *)v68, v25, v62, (uint64_t)&v58, (long long *)v56, (uint64_t)&v53, 1, v52, INFINITY, 0.0, (long long **)v51);
      std::vector<quasar::corrective_reranking::Parse>::__assign_with_size[abi:ne180100]<quasar::corrective_reranking::Parse const*,quasar::corrective_reranking::Parse const*>(a3 + 8, (uint64_t)v68, (uint64_t)&v81 + 8, 1uLL);
      quasar::corrective_reranking::Parse::~Parse((quasar::corrective_reranking::Parse *)v68);
      unint64_t v67 = v51;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
      v51[0] = (void **)v52;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v51);
      if (v53)
      {
        long long v54 = v53;
        operator delete(v53);
      }
      if (v57 < 0) {
        operator delete(v56[0]);
      }
      if (v61 && v58)
      {
        uint64_t v59 = v58;
        operator delete(v58);
      }
      unint64_t v58 = v62;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
LABEL_71:
      __int16 v27 = 256;
LABEL_142:
      *(_WORD *)(a3 + 32) = v27;
LABEL_143:
      *(void *)uint64_t v68 = __p;
      std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100]((void ***)v68);
      goto LABEL_144;
    }
    if (*((unsigned char *)a2 + 96))
    {
      do
      {
        quasar::corrective_reranking::Parse::getIntent(v20, (uint64_t)v68);
        if ((v68[23] & 0x80000000) != 0)
        {
          if (*(void *)&v68[8] != 7)
          {
            operator delete(*(void **)v68);
            goto LABEL_73;
          }
          BOOL v24 = **(_DWORD **)v68 != 1952672100 || *(_DWORD *)(*(void *)v68 + 3) != 1702125940;
          operator delete(*(void **)v68);
          if (v24) {
            goto LABEL_73;
          }
        }
        else
        {
          if (v68[23] != 7) {
            goto LABEL_73;
          }
          if (*(_DWORD *)v68 != 1952672100 || *(_DWORD *)&v68[3] != 1702125940) {
            goto LABEL_73;
          }
        }
        double v20 = (quasar::corrective_reranking::Parse *)((char *)v20 + 232);
      }
      while (v20 != v21);
      if (*((unsigned char *)a2 + 116) && quasar::gLogLevel >= 5)
      {
        long long v82 = 0u;
        long long v83 = 0u;
        long long v80 = 0u;
        long long v81 = 0u;
        long long v78 = 0u;
        long long v79 = 0u;
        long long v76 = 0u;
        long long v77 = 0u;
        long long v74 = 0u;
        long long v75 = 0u;
        long long v72 = 0u;
        long long v73 = 0u;
        long long v70 = 0u;
        long long v71 = 0u;
        long long v69 = 0u;
        memset(v68, 0, sizeof(v68));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v68);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Early Exit due to no edit parses", 32);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v68);
      }
      if (*((void *)&v65 + 1) == (void)v65) {
        std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
      }
      quasar::corrective_reranking::Parse::Parse((std::string *)v68, (const quasar::corrective_reranking::Parse *)v65);
      std::vector<quasar::corrective_reranking::Parse>::__assign_with_size[abi:ne180100]<quasar::corrective_reranking::Parse const*,quasar::corrective_reranking::Parse const*>(a3 + 8, (uint64_t)v68, (uint64_t)&v81 + 8, 1uLL);
      quasar::corrective_reranking::Parse::~Parse((quasar::corrective_reranking::Parse *)v68);
      goto LABEL_71;
    }
LABEL_73:
    *(unsigned char *)(a3 + 45) = quasar::corrective_reranking::containsParseWithCompleteCommand((quasar::corrective_reranking::Parse **)&v65);
    if (*((unsigned char *)a2 + 116) && quasar::gLogLevel >= 5)
    {
      long long v82 = 0u;
      long long v83 = 0u;
      long long v80 = 0u;
      long long v81 = 0u;
      long long v78 = 0u;
      long long v79 = 0u;
      long long v76 = 0u;
      long long v77 = 0u;
      long long v74 = 0u;
      long long v75 = 0u;
      long long v72 = 0u;
      long long v73 = 0u;
      long long v70 = 0u;
      long long v71 = 0u;
      long long v69 = 0u;
      memset(v68, 0, sizeof(v68));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v68);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"hasVoiceCommandParses: ", 23);
      std::ostream::operator<<();
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v68);
    }
    if (*((unsigned char *)a2 + 97))
    {
      uint64_t v28 = *((void *)this + 79);
      memset(v50, 0, sizeof(v50));
      std::vector<quasar::corrective_reranking::Parse>::__init_with_size[abi:ne180100]<quasar::corrective_reranking::Parse*,quasar::corrective_reranking::Parse*>(v50, v65, *((uint64_t *)&v65 + 1), 0x34F72C234F72C235 * ((uint64_t)(*((void *)&v65 + 1) - v65) >> 3));
      float v29 = quasar::corrective_reranking::FusedIntentClassifier::classifyIntent(v28, v50, (uint64_t)a2, (uint64_t)a2 + 48, (uint64_t)a2 + 72);
      *(void *)uint64_t v68 = v50;
      std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100]((void ***)v68);
      *(float *)(a3 + 36) = v29;
      *(unsigned char *)(a3 + 4std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = 1;
      float v30 = *((float *)this + 66);
      if (*((unsigned char *)a2 + 116))
      {
        if (quasar::gLogLevel >= 5)
        {
          long long v82 = 0u;
          long long v83 = 0u;
          long long v80 = 0u;
          long long v81 = 0u;
          long long v78 = 0u;
          long long v79 = 0u;
          long long v76 = 0u;
          long long v77 = 0u;
          long long v74 = 0u;
          long long v75 = 0u;
          long long v72 = 0u;
          long long v73 = 0u;
          long long v70 = 0u;
          long long v71 = 0u;
          long long v69 = 0u;
          memset(v68, 0, sizeof(v68));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v68);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"== PASS 1: Edit Intent Score ==", 31);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v68);
          if (quasar::gLogLevel >= 5)
          {
            long long v82 = 0u;
            long long v83 = 0u;
            long long v80 = 0u;
            long long v81 = 0u;
            long long v78 = 0u;
            long long v79 = 0u;
            long long v76 = 0u;
            long long v77 = 0u;
            long long v74 = 0u;
            long long v75 = 0u;
            long long v72 = 0u;
            long long v73 = 0u;
            long long v70 = 0u;
            long long v71 = 0u;
            long long v69 = 0u;
            memset(v68, 0, sizeof(v68));
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v68);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Edit score = ", 13);
            std::ostream::operator<<();
            quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v68);
            if (quasar::gLogLevel >= 5)
            {
              long long v82 = 0u;
              long long v83 = 0u;
              long long v80 = 0u;
              long long v81 = 0u;
              long long v78 = 0u;
              long long v79 = 0u;
              long long v76 = 0u;
              long long v77 = 0u;
              long long v74 = 0u;
              long long v75 = 0u;
              long long v72 = 0u;
              long long v73 = 0u;
              long long v70 = 0u;
              long long v71 = 0u;
              long long v69 = 0u;
              memset(v68, 0, sizeof(v68));
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v68);
              uint64_t v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Intent = ", 9);
              if (v29 < v30) {
                long long v32 = "Dictate";
              }
              else {
                long long v32 = "Edit";
              }
              if (v29 < v30) {
                uint64_t v33 = 7;
              }
              else {
                uint64_t v33 = 4;
              }
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v32, v33);
              quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v68);
            }
          }
        }
      }
      if (v29 < v30)
      {
        if (*((unsigned char *)a2 + 116) && quasar::gLogLevel >= 5)
        {
          long long v82 = 0u;
          long long v83 = 0u;
          long long v80 = 0u;
          long long v81 = 0u;
          long long v78 = 0u;
          long long v79 = 0u;
          long long v76 = 0u;
          long long v77 = 0u;
          long long v74 = 0u;
          long long v75 = 0u;
          long long v72 = 0u;
          long long v73 = 0u;
          long long v70 = 0u;
          long long v71 = 0u;
          long long v69 = 0u;
          memset(v68, 0, sizeof(v68));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v68);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Early Exit in Pass 1", 20);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v68);
        }
        memset(v68, 0, 24);
        long long v38 = (quasar::corrective_reranking::Parse *)*((void *)&v65 + 1);
        for (uint64_t i = (quasar::corrective_reranking::Parse *)v65;
              i != v38;
              uint64_t i = (quasar::corrective_reranking::Parse *)((char *)i + 232))
        {
          quasar::corrective_reranking::Parse::getIntent(i, (uint64_t)&v58);
          if (SHIBYTE(v60) < 0)
          {
            if (v59 == (void *)7)
            {
              BOOL v41 = *(_DWORD *)v58 != 1952672100 || *(_DWORD *)((char *)v58 + 3) != 1702125940;
              operator delete(v58);
              if (!v41)
              {
LABEL_145:
                uint64_t v46 = *(void *)&v68[8];
                if (*(void *)&v68[8] >= *(void *)&v68[16])
                {
                  uint64_t v47 = std::vector<quasar::corrective_reranking::Parse>::__emplace_back_slow_path<quasar::corrective_reranking::Parse const&>((uint64_t *)v68, i);
                }
                else
                {
                  quasar::corrective_reranking::Parse::Parse(*(std::string **)&v68[8], i);
                  uint64_t v47 = v46 + 232;
                }
                *(void *)&v68[8] = v47;
                break;
              }
            }
            else
            {
              operator delete(v58);
            }
          }
          else if (SHIBYTE(v60) == 7 && v58 == 1952672100 && *(_DWORD *)((char *)&v58 + 3) == 1702125940)
          {
            goto LABEL_145;
          }
        }
        if (v9 != (long long *)v68) {
          std::vector<quasar::corrective_reranking::Parse>::__assign_with_size[abi:ne180100]<quasar::corrective_reranking::Parse*,quasar::corrective_reranking::Parse*>(a3 + 8, *(uint64_t *)v68, *(uint64_t *)&v68[8], 0x34F72C234F72C235 * ((uint64_t)(*(void *)&v68[8] - *(void *)v68) >> 3));
        }
        *(_WORD *)(a3 + 32) = 256;
        unint64_t v58 = v68;
        std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
        goto LABEL_143;
      }
    }
    *(unsigned char *)(a3 + 46) = 1;
    if (*((unsigned char *)a2 + 116) && quasar::gLogLevel >= 5)
    {
      long long v82 = 0u;
      long long v83 = 0u;
      long long v80 = 0u;
      long long v81 = 0u;
      long long v78 = 0u;
      long long v79 = 0u;
      long long v76 = 0u;
      long long v77 = 0u;
      long long v74 = 0u;
      long long v75 = 0u;
      long long v72 = 0u;
      long long v73 = 0u;
      long long v70 = 0u;
      long long v71 = 0u;
      long long v69 = 0u;
      memset(v68, 0, sizeof(v68));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v68);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"== PASS 2: Corrective Re-Ranking ==", 35);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v68);
    }
    uint64_t v34 = *((void *)this + 78);
    memset(v49, 0, sizeof(v49));
    std::vector<quasar::corrective_reranking::Parse>::__init_with_size[abi:ne180100]<quasar::corrective_reranking::Parse*,quasar::corrective_reranking::Parse*>(v49, v65, *((uint64_t *)&v65 + 1), 0x34F72C234F72C235 * ((uint64_t)(*((void *)&v65 + 1) - v65) >> 3));
    quasar::corrective_reranking::CorrectiveReranker::performCorrectiveReranking(v34, (uint64_t)v49, (uint64_t)a2, (uint64_t)a2 + 48, (uint64_t)a2 + 72, *((unsigned __int8 *)a2 + 99), *((unsigned __int8 *)a2 + 100), *((unsigned __int8 *)a2 + 101), (uint64_t)v68, *((unsigned char *)a2 + 102), v48 != 0, *((_DWORD *)a2 + 26), *((_WORD *)a2 + 54), HIBYTE(*((_WORD *)a2 + 54)), *((unsigned char *)a2 + 116));
    std::vector<quasar::corrective_reranking::Parse>::__vdeallocate((void **)&v65);
    long long v65 = *(_OWORD *)v68;
    uint64_t v66 = *(void *)&v68[16];
    memset(v68, 0, 24);
    unint64_t v58 = v68;
    std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
    unint64_t v58 = v49;
    std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
    if (*((unsigned char *)a2 + 116))
    {
      if ((void)v65 != *((void *)&v65 + 1) && quasar::gLogLevel >= 5)
      {
        long long v82 = 0u;
        long long v83 = 0u;
        long long v80 = 0u;
        long long v81 = 0u;
        long long v78 = 0u;
        long long v79 = 0u;
        long long v76 = 0u;
        long long v77 = 0u;
        long long v74 = 0u;
        long long v75 = 0u;
        long long v72 = 0u;
        long long v73 = 0u;
        long long v70 = 0u;
        long long v71 = 0u;
        long long v69 = 0u;
        memset(v68, 0, sizeof(v68));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v68);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"== TOP PARSE ==", 15);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v68);
        if (quasar::gLogLevel >= 5)
        {
          long long v82 = 0u;
          long long v83 = 0u;
          long long v80 = 0u;
          long long v81 = 0u;
          long long v78 = 0u;
          long long v79 = 0u;
          long long v76 = 0u;
          long long v77 = 0u;
          long long v74 = 0u;
          long long v75 = 0u;
          long long v72 = 0u;
          long long v73 = 0u;
          long long v70 = 0u;
          long long v71 = 0u;
          long long v69 = 0u;
          memset(v68, 0, sizeof(v68));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v68);
          quasar::corrective_reranking::operator<<(v68, v65);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v68);
        }
      }
    }
    if ((void)v65 == *((void *)&v65 + 1))
    {
      *(unsigned char *)(a3 + 47) = 0;
    }
    else
    {
      quasar::corrective_reranking::Parse::getIntent((quasar::corrective_reranking::Parse *)v65, (uint64_t)v68);
      int v35 = v68[23];
      if ((v68[23] & 0x80000000) != 0)
      {
        if (*(void *)&v68[8] != 7)
        {
          *(unsigned char *)(a3 + 47) = 1;
LABEL_138:
          operator delete(*(void **)v68);
          goto LABEL_139;
        }
        uint64_t v36 = *(int **)v68;
LABEL_128:
        int v42 = *v36;
        int v43 = *(int *)((char *)v36 + 3);
        BOOL v45 = v42 != 1952672100 || v43 != 1702125940;
        *(unsigned char *)(a3 + 47) = v45;
        if ((v35 & 0x80000000) == 0) {
          goto LABEL_139;
        }
        goto LABEL_138;
      }
      if (v68[23] == 7)
      {
        uint64_t v36 = (int *)v68;
        goto LABEL_128;
      }
      *(unsigned char *)(a3 + 47) = 1;
    }
LABEL_139:
    if (v9 != &v65) {
      std::vector<quasar::corrective_reranking::Parse>::__assign_with_size[abi:ne180100]<quasar::corrective_reranking::Parse*,quasar::corrective_reranking::Parse*>(a3 + 8, v65, *((uint64_t *)&v65 + 1), 0x34F72C234F72C235 * ((uint64_t)(*((void *)&v65 + 1) - v65) >> 3));
    }
    __int16 v27 = 257;
    goto LABEL_142;
  }
  int v17 = v15;
  if (*((unsigned char *)a2 + 116) && quasar::gLogLevel > 4)
  {
    long long v82 = 0u;
    long long v83 = 0u;
    long long v80 = 0u;
    long long v81 = 0u;
    long long v78 = 0u;
    long long v79 = 0u;
    long long v76 = 0u;
    long long v77 = 0u;
    long long v74 = 0u;
    long long v75 = 0u;
    long long v72 = 0u;
    long long v73 = 0u;
    long long v70 = 0u;
    long long v71 = 0u;
    long long v69 = 0u;
    memset(v68, 0, sizeof(v68));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v68);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Early exit due to Disambiguation UI with option: ", 49);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v68);
  }
  *(_DWORD *)a3 = v17;
  *(unsigned char *)(a3 + 4) = 1;
LABEL_144:
  *(void *)uint64_t v68 = &v65;
  std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100]((void ***)v68);
  quasar::ScopeGuard::~ScopeGuard((quasar::ScopeGuard *)v85);
}

void sub_1B230D560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char **a32,uint64_t a33,uint64_t a34,char a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,char *a52,uint64_t a53)
{
  a32 = &a52;
  std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100]((void ***)&a32);
  a52 = (char *)&a42;
  std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100]((void ***)&a52);
  std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100]((void ***)&a52);
  a52 = &a48;
  std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100]((void ***)&a52);
  quasar::ScopeGuard::~ScopeGuard((quasar::ScopeGuard *)(v53 - 152));
  _Unwind_Resume(a1);
}

uint64_t quasar::joinToList<std::vector<std::string>>(uint64_t *a1, int a2)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"[", 1);
  if (*a1 != a1[1])
  {
    if (a2)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"\n ", 2);
      uint64_t v4 = ",\n ";
    }
    else
    {
      uint64_t v4 = ", ";
    }
    v7[0] = (uint64_t)v4;
    v7[1] = strlen(v4);
    quasar::joinToStream<std::vector<std::string>>(v9, a1, v7);
    if (a2) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"\n", 1);
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"]", 1);
  std::stringbuf::str();
  v8[0] = *MEMORY[0x1E4FBA408];
  uint64_t v5 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v8 + *(void *)(v8[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v9[0] = v5;
  v9[1] = MEMORY[0x1E4FBA470] + 16;
  if (v10 < 0) {
    operator delete((void *)v9[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EA8520](&v11);
}

void sub_1B230D99C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::corrective_reranking::containsParseWithCompleteCommand(quasar::corrective_reranking::Parse **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 == v2) {
    return 0;
  }
  while (1)
  {
    quasar::corrective_reranking::Parse::getIntent(v1, (uint64_t)__p);
    if ((v8 & 0x80000000) == 0) {
      break;
    }
    if (__p[1] != (void *)7) {
      goto LABEL_15;
    }
    if (*(_DWORD *)__p[0] != 1952672100 || *(_DWORD *)((char *)__p[0] + 3) != 1702125940) {
      goto LABEL_15;
    }
    operator delete(__p[0]);
LABEL_18:
    uint64_t v1 = (quasar::corrective_reranking::Parse *)((char *)v1 + 232);
    if (v1 == v2) {
      return 0;
    }
  }
  if (v8 == 7 && LODWORD(__p[0]) == 1952672100 && *(_DWORD *)((char *)__p + 3) == 1702125940) {
    goto LABEL_18;
  }
LABEL_15:
  BOOL isIncomplete = quasar::corrective_reranking::Parse::isIncomplete(v1);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (isIncomplete) {
    goto LABEL_18;
  }
  return 1;
}

void sub_1B230DAA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::corrective_reranking::Parser::runJson(uint64_t a1, const std::string *a2)
{
  std::istringstream::basic_istringstream[abi:ne180100](v3, a2, 8);
  quasar::PTree::PTree((quasar::PTree *)v2);
  quasar::PTree::readJson();
}

uint64_t sub_1B230DB40()
{
  quasar::PTree::~PTree((quasar::PTree *)&v1);
  std::stringbuf::str();
  v2[0] = *(void ***)MEMORY[0x1E4FBA418];
  *(void ***)((char *)v2 + (unint64_t)*(v2[0] - 3)) = *(void ***)(MEMORY[0x1E4FBA418] + 24);
  v2[1] = (void **)(MEMORY[0x1E4FBA470] + 16);
  if (v3 < 0) {
    operator delete(v2[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1B3EA8520](&v4);
  v2[0] = v5;
  std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100](v2);
  if (v10)
  {
    uint64_t v11 = v10;
    operator delete(v10);
  }
  if (v8)
  {
    int v9 = v8;
    operator delete(v8);
  }
  v2[0] = (void **)&v7;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v2);
  if (v6 < 0) {
    operator delete(v5[6]);
  }
  quasar::PTree::~PTree((quasar::PTree *)&v12);
  v13[0] = *MEMORY[0x1E4FBA410];
  *(void *)((char *)v13 + *(void *)(v13[0] - 24)) = *(void *)(MEMORY[0x1E4FBA410] + 24);
  v13[2] = MEMORY[0x1E4FBA470] + 16;
  if (v14 < 0) {
    operator delete((void *)v13[10]);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  return MEMORY[0x1B3EA8520](&v15);
}

void sub_1B230DD80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  a18 = (void **)&a52;
  std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100](&a18);
  quasar::corrective_reranking::Parser::RunArgs::~RunArgs((quasar::corrective_reranking::Parser::RunArgs *)&a58);
  quasar::PTree::~PTree((quasar::PTree *)&STACK[0x200]);
  std::istringstream::~istringstream((uint64_t)&STACK[0x240]);
  _Unwind_Resume(a1);
}

void sub_1B230DDF0()
{
}

void quasar::corrective_reranking::Parser::clearLongTermCache(quasar::corrective_reranking::PhoneticMatcher **this)
{
}

void quasar::corrective_reranking::intentToCommandIdentifier(uint64_t *a1@<X0>, std::string *a2@<X8>)
{
  int v2 = *((unsigned __int8 *)a1 + 23);
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    char v3 = a1;
    switch(*((unsigned char *)a1 + 23))
    {
      case 9:
        goto LABEL_46;
      case 0xA:
        goto LABEL_40;
      case 0xB:
        if (*a1 != 0x6661747265736E69 || *(uint64_t *)((char *)a1 + 3) != 0x7265746661747265) {
          goto LABEL_60;
        }
        goto LABEL_36;
      case 0xC:
        goto LABEL_22;
      case 0xD:
        if (*a1 != 0x6562747265736E69 || *(uint64_t *)((char *)a1 + 5) != 0x6E65657774656274) {
          goto LABEL_60;
        }
        goto LABEL_35;
      default:
        goto LABEL_60;
    }
  }
  char v3 = (uint64_t *)*a1;
  std::string::size_type v5 = a1[1];
  if (v5 == 11)
  {
    if (*v3 != 0x6661747265736E69 || *(uint64_t *)((char *)v3 + 3) != 0x7265746661747265)
    {
      char v3 = (uint64_t *)*a1;
      std::string::size_type v5 = a1[1];
      goto LABEL_21;
    }
LABEL_36:
    char v10 = "insertAfter";
LABEL_62:
    std::string::basic_string[abi:ne180100]<0>(a2, v10);
    return;
  }
  if (v5 == 13 && *v3 == 0x6562747265736E69 && *(uint64_t *)((char *)v3 + 5) == 0x6E65657774656274)
  {
LABEL_35:
    char v10 = "insertBetween";
    goto LABEL_62;
  }
LABEL_21:
  if (v5 != 12) {
    goto LABEL_39;
  }
LABEL_22:
  if (*v3 == 0x6562747265736E69 && *((_DWORD *)v3 + 2) == 1701998438)
  {
    char v10 = "insertBefore";
    goto LABEL_62;
  }
  if ((v2 & 0x80) == 0)
  {
    if (v2 == 9) {
      goto LABEL_46;
    }
    char v3 = a1;
    if (v2 != 10) {
      goto LABEL_60;
    }
    goto LABEL_40;
  }
  char v3 = (uint64_t *)*a1;
  std::string::size_type v5 = a1[1];
LABEL_39:
  if (v5 != 10) {
    goto LABEL_54;
  }
LABEL_40:
  if (*v3 == 0x696C617469706163 && *((_WORD *)v3 + 4) == 25978)
  {
    char v10 = "uppercase";
    goto LABEL_62;
  }
  if ((v2 & 0x80) == 0)
  {
    if (v2 == 9)
    {
LABEL_46:
      if (*a1 != 0x7361637265707075 || *((unsigned char *)a1 + 8) != 101) {
        goto LABEL_60;
      }
      goto LABEL_61;
    }
LABEL_60:
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = a1[2];
    return;
  }
  char v3 = (uint64_t *)*a1;
  std::string::size_type v5 = a1[1];
LABEL_54:
  if (v5 == 9)
  {
    if (*v3 == 0x7361637265707075 && *((unsigned char *)v3 + 8) == 101)
    {
LABEL_61:
      char v10 = "allCaps";
      goto LABEL_62;
    }
    if ((v2 & 0x80) == 0) {
      goto LABEL_60;
    }
  }
  std::string::__init_copy_ctor_external(a2, (const std::string::value_type *)v3, v5);
}

void quasar::configSupportsVoiceCommands(quasar *this, const quasar::SystemConfig *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "text-proc.voice-commands.enable");
  quasar::SystemConfig::getPtreeOptional((uint64_t)this, (uint64_t)__p);
}

void sub_1B230E104(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::localeSupportsVoiceCommands(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "text-proc.voice-commands.locales");
  quasar::SystemConfig::getPtreeOptional(a1, (uint64_t)__p);
}

void sub_1B230E248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::configSupportsCorrectiveReranking(quasar *this, const quasar::SystemConfig *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "text-proc.voice-commands.corrective-reranking");
  quasar::SystemConfig::getPtreeOptional((uint64_t)this, (uint64_t)__p);
}

void sub_1B230E2C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<quasar::corrective_reranking::Parser::run(quasar::corrective_reranking::Parser::RunArgs const&)::$_0,std::allocator<quasar::corrective_reranking::Parser::run(quasar::corrective_reranking::Parser::RunArgs const&)::$_0>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<quasar::corrective_reranking::Parser::run(quasar::corrective_reranking::Parser::RunArgs const&)::$_0,std::allocator<quasar::corrective_reranking::Parser::run(quasar::corrective_reranking::Parser::RunArgs const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  int v2 = (char *)operator new(0x18uLL);
  *(void *)int v2 = &unk_1F0A5CB18;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<quasar::corrective_reranking::Parser::run(quasar::corrective_reranking::Parser::RunArgs const&)::$_0,std::allocator<quasar::corrective_reranking::Parser::run(quasar::corrective_reranking::Parser::RunArgs const&)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F0A5CB18;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<quasar::corrective_reranking::Parser::run(quasar::corrective_reranking::Parser::RunArgs const&)::$_0,std::allocator<quasar::corrective_reranking::Parser::run(quasar::corrective_reranking::Parser::RunArgs const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  int v2 = (quasar::corrective_reranking::TransformerClassifier **)(*(void *)(a1 + 8) + 592);
  quasar::corrective_reranking::Models::clearShortTermCache(v2);
  if (*(unsigned char *)(*(void *)(a1 + 16) + 117))
  {
    quasar::corrective_reranking::Models::clearLongTermCache(v2);
  }
}

uint64_t std::__function::__func<quasar::corrective_reranking::Parser::run(quasar::corrective_reranking::Parser::RunArgs const&)::$_0,std::allocator<quasar::corrective_reranking::Parser::run(quasar::corrective_reranking::Parser::RunArgs const&)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::corrective_reranking::Parser::run(quasar::corrective_reranking::Parser::RunArgs const&)::$_0,std::allocator<quasar::corrective_reranking::Parser::run(quasar::corrective_reranking::Parser::RunArgs const&)::$_0>,void ()(void)>::target_type()
{
}

void std::vector<quasar::corrective_reranking::Parse>::__assign_with_size[abi:ne180100]<quasar::corrective_reranking::Parse const*,quasar::corrective_reranking::Parse const*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  int v9 = *(void **)a1;
  if (0x34F72C234F72C235 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    std::vector<quasar::corrective_reranking::Parse>::__vdeallocate((void **)a1);
    if (a4 > 0x11A7B9611A7B961) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x69EE58469EE5846ALL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if ((unint64_t)(0x34F72C234F72C235 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3)) >= 0x8D3DCB08D3DCB0) {
      unint64_t v11 = 0x11A7B9611A7B961;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<quasar::corrective_reranking::Parse>::__vallocate[abi:ne180100]((void *)a1, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::corrective_reranking::Parse>,quasar::corrective_reranking::Parse const*,quasar::corrective_reranking::Parse const*,quasar::corrective_reranking::Parse*>(v8, a2, a3, *(void *)(a1 + 8));
    goto LABEL_11;
  }
  if (0x34F72C234F72C235 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    uint64_t v13 = a2 + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3);
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<quasar::corrective_reranking::Parse *>,std::__wrap_iter<quasar::corrective_reranking::Parse *>,quasar::corrective_reranking::Parse *,0>(a2, v13, (uint64_t)v9);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::corrective_reranking::Parse>,quasar::corrective_reranking::Parse const*,quasar::corrective_reranking::Parse const*,quasar::corrective_reranking::Parse*>(v8, v13, a3, *(void *)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<quasar::corrective_reranking::Parse *>,std::__wrap_iter<quasar::corrective_reranking::Parse *>,quasar::corrective_reranking::Parse *,0>(a2, a3, (uint64_t)v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
      quasar::corrective_reranking::Parse::~Parse((quasar::corrective_reranking::Parse *)(v16 - 232));
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_1B230E598(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B230E5A0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<quasar::corrective_reranking::Parse>::__assign_with_size[abi:ne180100]<quasar::corrective_reranking::Parse*,quasar::corrective_reranking::Parse*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  int v9 = *(void **)a1;
  if (0x34F72C234F72C235 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    std::vector<quasar::corrective_reranking::Parse>::__vdeallocate((void **)a1);
    if (a4 > 0x11A7B9611A7B961) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x69EE58469EE5846ALL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if ((unint64_t)(0x34F72C234F72C235 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3)) >= 0x8D3DCB08D3DCB0) {
      unint64_t v11 = 0x11A7B9611A7B961;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<quasar::corrective_reranking::Parse>::__vallocate[abi:ne180100]((void *)a1, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::corrective_reranking::Parse>,quasar::corrective_reranking::Parse*,quasar::corrective_reranking::Parse*,quasar::corrective_reranking::Parse*>(v8, a2, a3, *(void *)(a1 + 8));
    goto LABEL_11;
  }
  if (0x34F72C234F72C235 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    uint64_t v13 = a2 + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3);
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<quasar::corrective_reranking::Parse *>,std::__wrap_iter<quasar::corrective_reranking::Parse *>,quasar::corrective_reranking::Parse *,0>(a2, v13, (uint64_t)v9);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::corrective_reranking::Parse>,quasar::corrective_reranking::Parse*,quasar::corrective_reranking::Parse*,quasar::corrective_reranking::Parse*>(v8, v13, a3, *(void *)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<quasar::corrective_reranking::Parse *>,std::__wrap_iter<quasar::corrective_reranking::Parse *>,quasar::corrective_reranking::Parse *,0>(a2, a3, (uint64_t)v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
      quasar::corrective_reranking::Parse::~Parse((quasar::corrective_reranking::Parse *)(v16 - 232));
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_1B230E724(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B230E72C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t Opt_Parse(int a1, const char **a2, unint64_t a3, int a4, unsigned int a5)
{
  unsigned int v7 = a1 - 1;
  if (a1 == 1)
  {
    int v38 = 0;
    int v11 = 1;
    goto LABEL_81;
  }
  int v8 = a4;
  unint64_t v49 = a3 + 32 * (a4 - 1);
  unint64_t v10 = a2 + 1;
  int v48 = (a5 >> 1) & 1;
  int v11 = 1;
  int v12 = -1;
  while (1)
  {
    uint64_t v13 = *v10;
    if (**v10 == 45) {
      break;
    }
    a2[v11++] = v13;
    ++v10;
    --v7;
    int v36 = v48;
LABEL_70:
    int v38 = 0;
    if (!v7 || v36) {
      goto LABEL_78;
    }
  }
  int v52 = v11;
  uint64_t v14 = v13 + 1;
  if (!strcmp(v13 + 1, "?") || !strcmp(v14, "help"))
  {
    size_t v42 = (size_t)*a2;
    uint64_t v43 = a3;
    int v44 = v8;
LABEL_85:
    Opt_PrintUsage(v42, v43, v44);
    exit(0);
  }
  int v51 = 0;
  --v7;
  ++v10;
  uint64_t v15 = v14;
  uint64_t v53 = v10;
  int v47 = v12;
  unsigned int v16 = v7;
LABEL_7:
  if (v8 < 1)
  {
    int v36 = 0;
    int v12 = v47;
    if ((a5 & 4) != 0) {
      goto LABEL_77;
    }
LABEL_69:
    uint64_t v37 = (FILE **)MEMORY[0x1E4F143C8];
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "Unknown option \"-%s\";", v14);
    fprintf(*v37, "  type \"%s -help\" for information\n", *a2);
    int v11 = v52;
    goto LABEL_70;
  }
  unsigned int v54 = v16;
  unint64_t v17 = v49;
  do
  {
    uint64_t v18 = *(const char **)(v17 + 8);
    if (v18 && *(unsigned __int8 *)v18 == *(unsigned __int8 *)v15)
    {
      char v19 = *(const char **)(v17 + 8);
      if (a5)
      {
        int v12 = strlen(v19);
        if (!strncmp(v18, v15, v12))
        {
LABEL_17:
          int v20 = *(_DWORD *)v17;
          if ((*(_DWORD *)v17 & 0x80000000) != 0)
          {
            switch(v20)
            {
              case -9:
                if (!v54) {
                  goto LABEL_39;
                }
                uint64_t v22 = *v53;
                BOOL v45 = *(uint64_t **)(v17 + 16);
                uint64_t v46 = *a2;
                v56[0] = 0;
                memset(&__endptr.tm_wday, 0, 32);
                uint64_t v23 = strtol(v22, v56, 0);
                BOOL v24 = v22;
                unsigned int v25 = v54;
                if (v56[0] == v22) {
                  goto LABEL_57;
                }
                if (*v56[0] != 46)
                {
                  if (!*v56[0])
                  {
                    uint64_t *v45 = v23;
                    goto LABEL_58;
                  }
LABEL_57:
                  fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s: can't parse \"%s\" as a time.\n", v46, v24);
                  goto LABEL_58;
                }
                int v29 = v23 - 1900;
                if ((int)v23 <= 1900) {
                  int v29 = v23;
                }
                __endptr.tm_year = v29;
                int v30 = strtol(v56[0] + 1, v56, 0);
                BOOL v24 = v22;
                __endptr.tm_mon = v30 - 1;
                if (v56[0] == v22) {
                  goto LABEL_57;
                }
                if (*v56[0] != 46) {
                  goto LABEL_57;
                }
                int v31 = strtol(v56[0] + 1, v56, 0);
                BOOL v24 = v22;
                __endptr.tm_mday = v31;
                if (v56[0] == v22) {
                  goto LABEL_57;
                }
                if (*v56[0] != 46) {
                  goto LABEL_57;
                }
                int v32 = strtol(v56[0] + 1, v56, 0);
                BOOL v24 = v22;
                __endptr.tm_hour = v32;
                if (v56[0] == v22) {
                  goto LABEL_57;
                }
                if (*v56[0] != 46) {
                  goto LABEL_57;
                }
                int v33 = strtol(v56[0] + 1, v56, 0);
                BOOL v24 = v22;
                __endptr.tm_min = v33;
                if (v56[0] == v22) {
                  goto LABEL_57;
                }
                if (*v56[0] != 46) {
                  goto LABEL_57;
                }
                int v34 = strtol(v56[0] + 1, v56, 0);
                BOOL v24 = v22;
                __endptr.tm_sec = v34;
                if (v56[0] == v22 || *v56[0]) {
                  goto LABEL_57;
                }
                time_t v35 = mktime(&__endptr);
                if (v35 == -1) {
                  fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s: can't represent the time \"%s\".\n", v46, v22);
                }
                else {
                  uint64_t *v45 = v35;
                }
                unsigned int v25 = v54;
LABEL_58:
                ++v53;
                unsigned int v16 = v25 - 1;
LABEL_59:
                int v8 = a4;
                break;
              case -8:
                size_t v42 = (size_t)*a2;
                uint64_t v43 = a3;
                int v44 = a4;
                goto LABEL_85;
              case -7:
                unsigned int v16 = (*(uint64_t (**)(const char *, void, const char **))(v17 + 16))(v18, v54, v53);
                goto LABEL_59;
              case -6:
                BOOL v26 = (*(uint64_t (**)(const char *, const char *))(v17 + 16))(v18, *v53) != 0;
                v53 += v26;
                unsigned int v16 = v54 - v26;
                goto LABEL_59;
              case -5:
                if (!v54) {
                  goto LABEL_39;
                }
                *(void *)&__endptr.tm_sec = 0;
                double v27 = strtod(*v53, (char **)&__endptr);
                if (*(const char **)&__endptr.tm_sec == *v53) {
                  fprintf((FILE *)*MEMORY[0x1E4F143C8], "Warning: option \"-%s\" got non-floating-point argument \"%s\".  Using default: %lg.\n");
                }
                else {
                  **(double **)(v17 + 16) = v27;
                }
                goto LABEL_43;
              case -4:
                **(_DWORD **)(v17 + 16) = v52;
                int v51 = 1;
                goto LABEL_19;
              case -3:
                if (!v54) {
                  goto LABEL_39;
                }
                uint64_t v28 = *v53++;
                **(void **)(v17 + 16) = v28;
                unsigned int v16 = v54 - 1;
                goto LABEL_59;
              case -2:
              case -1:
                if (!v54)
                {
LABEL_39:
                  fprintf((FILE *)*MEMORY[0x1E4F143C8], "Warning: %s option \"-%s\" needs an argument\n", *a2, v18);
                  unsigned int v16 = 0;
                  goto LABEL_59;
                }
                *(void *)&__endptr.tm_sec = 0;
                int v21 = strtol(*v53, (char **)&__endptr, 0);
                if (*(const char **)&__endptr.tm_sec == *v53)
                {
                  fprintf((FILE *)*MEMORY[0x1E4F143C8], "Warning: option \"-%s\" got a non-numeric argument \"%s\".  Using default: %d\n");
LABEL_43:
                  int v8 = a4;
                }
                else
                {
                  int v8 = a4;
                  if (*(_DWORD *)v17 == -2 && v21 < 0) {
                    fprintf((FILE *)*MEMORY[0x1E4F143C8], "Warning: option \"-%s\" got a negative argument \"%s\".  Using default: %u.\n", *(const char **)(v17 + 8), *v53, **(_DWORD **)(v17 + 16));
                  }
                  else {
                    **(_DWORD **)(v17 + 16) = v21;
                  }
                }
                ++v53;
                unsigned int v16 = v54 - 1;
                break;
              default:
                goto LABEL_19;
            }
          }
          else
          {
            **(_DWORD **)(v17 + 16) = v20;
LABEL_19:
            int v8 = a4;
            unsigned int v16 = v54;
          }
          if ((a5 & 1) == 0 || (v15 += v12, !*v15))
          {
            unint64_t v10 = v53;
            unsigned int v7 = v16;
            int v36 = v51;
            int v11 = v52;
            goto LABEL_70;
          }
          goto LABEL_7;
        }
      }
      else if (!strcmp(v19, v15))
      {
        goto LABEL_17;
      }
    }
    v17 -= 32;
  }
  while (v17 >= a3);
  uint64_t v14 = v15;
  unint64_t v10 = v53;
  unsigned int v7 = v54;
  int v8 = a4;
  int v36 = v51;
  if ((a5 & 4) == 0) {
    goto LABEL_69;
  }
LABEL_77:
  int v38 = 1;
  int v11 = v52;
LABEL_78:
  if (v7)
  {
    uint64_t v39 = &a2[v11];
    v11 += v7;
    do
    {
      long long v40 = *v10++;
      *v39++ = v40;
      --v7;
    }
    while (v7);
  }
LABEL_81:
  a2[v11] = 0;
  if (((v38 != 0) & (a5 >> 2)) != 0) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v11;
  }
}

size_t Opt_PrintUsage(size_t result, uint64_t a2, int a3)
{
  std::string::size_type v5 = (const char *)result;
  uint64_t v6 = a3;
  if (a3 < 1)
  {
    int v8 = 4;
  }
  else
  {
    unsigned int v7 = (size_t *)(a2 + 8);
    int v8 = 4;
    uint64_t v9 = a3;
    do
    {
      __n128 result = *v7;
      if (*v7)
      {
        __n128 result = strlen((const char *)result);
        if (v8 <= (int)result) {
          int v8 = result;
        }
      }
      v7 += 4;
      --v9;
    }
    while (v9);
  }
  unint64_t v10 = (FILE **)MEMORY[0x1E4F143C8];
  if (v5) {
    __n128 result = fprintf((FILE *)*MEMORY[0x1E4F143C8], "Usage of command \"%s\"\n", v5);
  }
  if (a3 >= 1)
  {
    uint64_t v11 = a2 + 16;
    do
    {
      int v12 = *v10;
      if (*(_DWORD *)(v11 - 16) == -8)
      {
        __n128 result = fprintf(v12, " %s\n");
      }
      else
      {
        int v13 = strlen(*(const char **)(v11 - 8));
        __n128 result = fprintf(v12, " -%s%-*s %s\n", *(const char **)(v11 - 8), v8 + 1 - v13, ":", *(const char **)(v11 + 8));
        switch(*(_DWORD *)(v11 - 16))
        {
          case 0xFFFFFFFB:
            __n128 result = fprintf(*v10, "\t\tDefault value: %lg\n");
            break;
          case 0xFFFFFFFD:
            if (**(void **)v11) {
              __n128 result = fprintf(*v10, "\t\tDefault value: \"%s\"\n");
            }
            break;
          case 0xFFFFFFFE:
            __n128 result = fprintf(*v10, "\t\tDefault value: %u\n");
            break;
          case 0xFFFFFFFF:
            __n128 result = fprintf(*v10, "\t\tDefault value: %d\n");
            break;
          default:
            break;
        }
      }
      v11 += 32;
      --v6;
    }
    while (v6);
  }
  if (v5) {
    return fprintf(*v10, " -help%-*s Print this message\n", v8 - 3, ":");
  }
  return result;
}

void MemStats::clearAllocStats(MemStats *this)
{
}

void MemStats::MemStats(MemStats *this)
{
}

void *MemStats::print(uint64_t a1, void *a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"total memory ", 13);
  uint64_t v4 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" (", 2);
  std::string::size_type v5 = (void *)std::ostream::operator<<();
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"M)", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)", used ", 7);
  unsigned int v7 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" (", 2);
  int v8 = (void *)std::ostream::operator<<();
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"M)", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", wasted ", 9);
  unint64_t v10 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" (", 2);
  uint64_t v11 = (void *)std::ostream::operator<<();
  int v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"M)", 2);
  std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  int v13 = std::locale::use_facet(&v23, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
  std::locale::~locale(&v23);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v14 = 0;
  uint64_t v15 = (std::locale::id *)MEMORY[0x1E4FBA258];
  do
  {
    if (*(_DWORD *)(a1 + 16 + 4 * v14))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"allocations of size ", 20);
      unsigned int v16 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)": ", 2);
      unint64_t v17 = (void *)std::ostream::operator<<();
      std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(void *)(*v17 - 24)));
      uint64_t v18 = std::locale::use_facet(&v23, v15);
      ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
      std::locale::~locale(&v23);
      std::ostream::put();
      std::ostream::flush();
    }
    ++v14;
  }
  while (v14 != 256);
  if (*(_DWORD *)(a1 + 1040))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"allocations of size >= ", 23);
    char v19 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)": ", 2);
    int v20 = (void *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(void *)(*v20 - 24)));
    int v21 = std::locale::use_facet(&v23, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
    std::locale::~locale(&v23);
    std::ostream::put();
    std::ostream::flush();
  }
  return a2;
}

void sub_1B230F32C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

double kaldi::quasar::NnlmDecoderWord::NnlmDecoderWord(kaldi::quasar::NnlmDecoderWord *this)
{
  *((void *)this + 1) = 0;
  *((unsigned char *)this + 16) = 0;
  *((void *)this + 4) = 0;
  *((unsigned char *)this + 4std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 6) = (char *)this + 56;
  *((void *)this + 25) = 0;
  double result = 0.0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 1std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = 0u;
  return result;
}

uint64_t kaldi::quasar::NnlmDecoderWord::GetWordId(kaldi::quasar::NnlmDecoderWord *this, unsigned int a2)
{
  if ((a2 & 0x80000000) != 0 || *((void *)this + 4) <= (unint64_t)a2)
  {
    if (kaldi::g_kaldi_verbose_level >= 4)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v4, 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Word passed to NNLM doesn't exist in wordmap. The decoder will use <oos> to score instead", 89);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v4);
    }
    a2 = *((_DWORD *)this + 44);
  }
  return *(unsigned int *)(*((void *)this + 3) + 4 * (int)a2);
}

void sub_1B230F40C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::NnlmDecoderWord::IsPhoneWord(kaldi::quasar::NnlmDecoderWord *this, signed int a2)
{
  if (a2 < 0 || *((void *)this + 4) <= (unint64_t)a2)
  {
    if (kaldi::g_kaldi_verbose_level >= 4)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v6, 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Word passed to NNLM doesn't exist in wordmap. The decoder will use <oos> to score instead", 89);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v6);
    }
    a2 = *((_DWORD *)this + 44);
  }
  if (a2 <= *((_DWORD *)this + 19) && a2 >= *((_DWORD *)this + 18))
  {
    for (uint64_t i = (uint64_t *)*((void *)this + 7); i; uint64_t i = (uint64_t *)*i)
    {
      int v4 = *((_DWORD *)i + 7);
      if (a2 >= v4)
      {
        if (v4 >= a2) {
          return 1;
        }
        ++i;
      }
    }
  }
  return 0;
}

void sub_1B230F4E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

void kaldi::quasar::NnlmDecoderWord::ReadMapped(uint64_t a1, uint64_t a2)
{
}

void kaldi::ReadMapped<kaldi::quasar::NnlmDecoderWord>(uint64_t a1)
{
  void v18[34] = *MEMORY[0x1E4F143B8];
  char v8 = 0;
  kaldi::Input::Input(v7, a1, &v8);
  if (v8)
  {
    uint64_t v2 = kaldi::Input::Stream((kaldi::Input *)v7);
    std::istream::seekg();
    std::istream::tellg();
    uint64_t v17 = 0;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    std::istream::seekg();
    fst::MappedFile::Map(v2, a1, (fst::MappedFile *)v18[16]);
  }
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v18);
  char v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Memory mapping failed. Not a valid Kaldi binary file: ", 54);
  int v4 = *(char *)(a1 + 23);
  if (v4 >= 0) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = *(void *)a1;
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v6 = *(void *)(a1 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, v5, v6);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v18);
}

void sub_1B230F760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void kaldi::quasar::NnlmDecoderWord::ReadData(uint64_t a1, uint64_t *a2, int a3, uint64_t a4)
{
  kaldi::ExpectToken(a2, a3, "<UnknownWord>");
  kaldi::ReadToken(a2, a3, a1 + 80);
  kaldi::ReadBasicType<int>(a2, a3, a1 + 176);
  kaldi::ExpectToken(a2, a3, "<BeginOfSentenceWord>");
  kaldi::ReadToken(a2, a3, a1 + 128);
  kaldi::ReadBasicType<int>(a2, a3, a1 + 184);
  kaldi::ExpectToken(a2, a3, "<EndOfSentenceWord>");
  kaldi::ReadToken(a2, a3, a1 + 152);
  kaldi::ReadBasicType<int>(a2, a3, a1 + 188);
  kaldi::ExpectToken(a2, a3, "<NullWord>");
  kaldi::ReadToken(a2, a3, a1 + 104);
  kaldi::ReadBasicType<int>(a2, a3, a1 + 180);
  kaldi::ExpectToken(a2, a3, "<ContextSize>");
  kaldi::ReadBasicType<int>(a2, a3, a1 + 192);
  kaldi::ExpectToken(a2, a3, "<SymbolToWord>");
  memset(&__p, 0, sizeof(__p));
  int64_t v16 = 0;
  uint64_t v17 = 0;
  kaldi::ReadIntegerVector<int>(a2, a3, &__p, a4, 0, &v17, &v16);
  if (__p.__begin_ != __p.__end_)
  {
    int64_t v14 = __p.__end_ - __p.__begin_;
    char v15 = 1;
    operator new[]();
  }
  int64_t v14 = v16;
  char v15 = 0;
  uint64_t v13 = v17;
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  kaldi::MappableVector<int>::operator=(a1 + 24, (uint64_t)&v13);
  if (v15 && v13) {
    MEMORY[0x1B3EA8630](v13, 0x1000C8077774924);
  }
  kaldi::ExpectToken(a2, a3, "<WordToSymbol>");
  memset(&__p, 0, sizeof(__p));
  int64_t v16 = 0;
  uint64_t v17 = 0;
  kaldi::ReadIntegerVector<int>(a2, a3, &__p, a4, 0, &v17, &v16);
  if (__p.__begin_ != __p.__end_)
  {
    int64_t v14 = __p.__end_ - __p.__begin_;
    char v15 = 1;
    operator new[]();
  }
  int64_t v14 = v16;
  char v15 = 0;
  uint64_t v13 = v17;
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  kaldi::MappableVector<int>::operator=(a1, (uint64_t)&v13);
  if (v15 && v13) {
    MEMORY[0x1B3EA8630](v13, 0x1000C8077774924);
  }
  kaldi::ExpectToken(a2, a3, "<PhoneWordSymbol>");
  memset(&__p, 0, sizeof(__p));
  kaldi::ReadIntegerVector<int>(a2, a3, &__p, 0, 0, 0, 0);
  kaldi::CopyVectorToSet<int>(&__p.__begin_, a1 + 48);
  if (*(void *)(a1 + 64))
  {
    uint64_t v8 = a1 + 56;
    uint64_t v9 = *(void *)(a1 + 56);
    *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)(a1 + 48) + 28);
    if (v9)
    {
      do
      {
        uint64_t v10 = v9;
        uint64_t v9 = *(void *)(v9 + 8);
      }
      while (v9);
    }
    else
    {
      do
      {
        uint64_t v10 = *(void *)(v8 + 16);
        BOOL v11 = *(void *)v10 == v8;
        uint64_t v8 = v10;
      }
      while (v11);
    }
    int v12 = *(_DWORD *)(v10 + 28);
  }
  else
  {
    int v12 = -1;
    *(_DWORD *)(a1 + 72) = -1;
  }
  *(_DWORD *)(a1 + 76) = v12;
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
}

void sub_1B230FB5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::CopyVectorToSet<int>(int **a1, uint64_t a2)
{
  int v4 = (uint64_t *)(a2 + 8);
  std::__tree<int>::destroy(a2, *(void **)(a2 + 8));
  *(void *)a2 = v4;
  *(void *)(a2 + 16) = 0;
  uint64_t *v4 = 0;
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  while (v5 != v6)
  {
    std::__tree<int>::__emplace_hint_unique_key_args<int,int const&>((uint64_t **)a2, v4, v5, v5);
    ++v5;
  }
}

uint64_t kaldi::quasar::NnlmDecoderWord::BosSymbol(kaldi::quasar::NnlmDecoderWord *this)
{
  return *((unsigned int *)this + 46);
}

void *quasar::PDecModelVersionChecker::PDecModelVersionChecker(void *result, uint64_t a2)
{
  *double result = a2;
  return result;
}

void quasar::PDecModelVersionChecker::checkVersion(quasar::PDecModelVersionChecker *this, int a2)
{
  uint64_t v3 = *(void *)this;
  int v4 = (const void **)(*(void *)this + 3552);
  uint64_t v5 = quasar::PDecModelVersionChecker::modelTypeMinimumVersion(this);
  uint64_t v6 = (quasar::PDecModelVersionChecker *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(v5, v4);
  unsigned int v7 = (quasar::PDecModelVersionChecker *)quasar::PDecModelVersionChecker::modelTypeMinimumVersion(v6);
  if ((quasar::PDecModelVersionChecker *)((char *)v7 + 8) == v6)
  {
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v34 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v34);
    int v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v34, (uint64_t)"Unknown PDec model type: ", 25);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v31, (uint64_t)v4);
    goto LABEL_30;
  }
  if (*((_DWORD *)v6 + 14) > a2)
  {
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v34 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v34);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v34, (uint64_t)"Incompatible system config version. Needs to be >= ", 51);
    int v32 = (void *)std::ostream::operator<<();
    int v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)".0 to use PDec model type: ", 27);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v33, (uint64_t)v4);
    goto LABEL_30;
  }
  if (quasar::gLogLevel >= 5)
  {
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v34 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v34);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v34, (uint64_t)"Compatible system config version (", 34);
    uint64_t v8 = (void *)std::ostream::operator<<();
    uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)".0) for PDec model type ", 24);
    int v10 = *(char *)(v3 + 3575);
    if (v10 >= 0) {
      uint64_t v11 = (uint64_t)v4;
    }
    else {
      uint64_t v11 = *(void *)(v3 + 3552);
    }
    if (v10 >= 0) {
      uint64_t v12 = *(unsigned __int8 *)(v3 + 3575);
    }
    else {
      uint64_t v12 = *(void *)(v3 + 3560);
    }
    uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" (", 2);
    int64_t v14 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)".0 required)", 12);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v34);
  }
  char v15 = *(const void ***)(v3 + 3600);
  if (v15 != (const void **)(v3 + 3608))
  {
    while (1)
    {
      uint64_t v16 = quasar::PDecModelVersionChecker::featureFlagMinimumVersion(v7);
      uint64_t v17 = (quasar::PDecModelVersionChecker *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(v16, v15 + 4);
      unsigned int v7 = (quasar::PDecModelVersionChecker *)quasar::PDecModelVersionChecker::featureFlagMinimumVersion(v17);
      if ((quasar::PDecModelVersionChecker *)((char *)v7 + 8) == v17)
      {
        long long v49 = 0u;
        long long v50 = 0u;
        long long v47 = 0u;
        long long v48 = 0u;
        long long v45 = 0u;
        long long v46 = 0u;
        long long v43 = 0u;
        long long v44 = 0u;
        long long v41 = 0u;
        long long v42 = 0u;
        long long v39 = 0u;
        long long v40 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        long long v34 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v34);
        uint64_t v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v34, (uint64_t)"Unknown PDec feature flag: ", 27);
        std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v28, (uint64_t)(v15 + 4));
        goto LABEL_30;
      }
      if (*((_DWORD *)v17 + 14) > a2) {
        break;
      }
      if (quasar::gLogLevel >= 5)
      {
        long long v49 = 0u;
        long long v50 = 0u;
        long long v47 = 0u;
        long long v48 = 0u;
        long long v45 = 0u;
        long long v46 = 0u;
        long long v43 = 0u;
        long long v44 = 0u;
        long long v41 = 0u;
        long long v42 = 0u;
        long long v39 = 0u;
        long long v40 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        long long v34 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v34);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v34, (uint64_t)"Compatible system config version (", 34);
        uint64_t v18 = (void *)std::ostream::operator<<();
        char v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)".0) for PDec feature flag ", 26);
        int v20 = *((char *)v15 + 55);
        if (v20 >= 0) {
          uint64_t v21 = (uint64_t)(v15 + 4);
        }
        else {
          uint64_t v21 = (uint64_t)v15[4];
        }
        if (v20 >= 0) {
          uint64_t v22 = *((unsigned __int8 *)v15 + 55);
        }
        else {
          uint64_t v22 = (uint64_t)v15[5];
        }
        std::locale v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, v21, v22);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" (", 2);
        BOOL v24 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)".0 required)", 12);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v34);
      }
      unsigned int v25 = (const void **)v15[1];
      if (v25)
      {
        do
        {
          BOOL v26 = (const void ***)v25;
          unsigned int v25 = (const void **)*v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          BOOL v26 = (const void ***)v15[2];
          BOOL v27 = *v26 == v15;
          char v15 = (const void **)v26;
        }
        while (!v27);
      }
      char v15 = (const void **)v26;
      if (v26 == (const void ***)(v3 + 3608)) {
        return;
      }
    }
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v34 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v34);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v34, (uint64_t)"Incompatible system config version. Needs to be >= ", 51);
    int v29 = (void *)std::ostream::operator<<();
    int v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)".0 to use PDec feature flag: ", 29);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v30, (uint64_t)(v15 + 4));
LABEL_30:
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v34);
  }
}

void sub_1B230FFEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t quasar::PDecModelVersionChecker::modelTypeMinimumVersion(quasar::PDecModelVersionChecker *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return quasar::PDecModelVersionChecker::modelTypeMinimumVersion(void)::versionMap;
}

void sub_1B2310180(_Unwind_Exception *a1)
{
  uint64_t v4 = 0;
  while (1)
  {
    if (*(char *)(v2 + v4 + 119) < 0) {
      operator delete(*(void **)(v2 + v4 + 96));
    }
    v4 -= 32;
    if (v4 == -128)
    {
      MEMORY[0x1B3EA8670](v1, 0x1020C4062D53EE8);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t quasar::PDecModelVersionChecker::featureFlagMinimumVersion(quasar::PDecModelVersionChecker *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return quasar::PDecModelVersionChecker::featureFlagMinimumVersion(void)::versionMap;
}

void sub_1B23104D4(_Unwind_Exception *a1)
{
  uint64_t v4 = 544;
  while (1)
  {
    if (*(char *)(v2 + v4 - 9) < 0) {
      operator delete(*(void **)(v2 + v4 - 32));
    }
    v4 -= 32;
    if (!v4)
    {
      MEMORY[0x1B3EA8670](v1, 0x1020C4062D53EE8);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t std::map<std::string,int>::map[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 32 * a3;
    do
    {
      std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,int> const&>((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 4;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_1B23105C4(_Unwind_Exception *a1)
{
  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void *quasar::AmbiguityAnnotatorOptions::options@<X0>(quasar::AmbiguityAnnotatorOptions *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (char *)this + 2256;
  uint64_t v5 = *(void *)(*((void *)this + 282) - 24);
  uint64_t v6 = (char *)this + 2408;
  uint64_t v7 = *(void *)(*((void *)this + 301) - 24);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  double result = operator new(0x48uLL);
  a2[1] = result + 9;
  a2[2] = result + 9;
  *double result = (char *)this + 1216;
  result[1] = (char *)this + 1376;
  result[2] = (char *)this + 1536;
  result[3] = (char *)this + 1680;
  result[4] = (char *)this + 1824;
  result[5] = (char *)this + 1968;
  result[6] = (char *)this + 2112;
  result[7] = &v4[v5];
  result[8] = &v6[v7];
  *a2 = result;
  return result;
}

void quasar::AmbiguityAnnotatorBlock::init(quasar::AmbiguityAnnotatorBlock *this)
{
  std::string::basic_string[abi:ne180100]<0>(&v12, "AmbiguityAnnotatorBlock");
  uint64_t v2 = std::string::append(&v12, " config:");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  std::string::size_type v14 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::vector<int> __p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  quasar::OptionsBase::debugLog((void (***)(void **__return_ptr, void))this + 1, (uint64_t)__p);
  if (SHIBYTE(v14) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  uint64_t v4 = quasar::OptionValue<std::string>::value((void *)this + 173);
  if (*(char *)(v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)v4, *(void *)(v4 + 8));
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    v11.__r_.__value_.__r.__words[2] = *(void *)(v4 + 16);
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v5;
  }
  int v6 = *(unsigned __int8 *)quasar::OptionValue<BOOL>::value((void *)this + 3);
  uint64_t v7 = (long long *)quasar::OptionValue<std::string>::value((void *)this + 115);
  uint64_t v8 = (std::string::value_type *)quasar::OptionValue<BOOL>::value((void *)this + 135);
  quasar::PhraseBookFactory::createPhraseBook(&v11, v6 != 0, v7, *v8, &v12);
  long long v9 = *(_OWORD *)&v12.__r_.__value_.__l.__data_;
  *(_OWORD *)&v12.__r_.__value_.__l.__data_ = 0uLL;
  int v10 = (std::__shared_weak_count *)*((void *)this + 337);
  *((_OWORD *)this + 168) = v9;
  if (v10)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    if (v12.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v12.__r_.__value_.__l.__size_);
    }
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
}

void sub_1B2310834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void virtual thunk to'quasar::AmbiguityAnnotatorBlock::init(quasar::AmbiguityAnnotatorBlock *this)
{
  quasar::AmbiguityAnnotatorBlock::init((quasar::AmbiguityAnnotatorBlock *)((char *)this
                                                                          + *(void *)(*(void *)this - 88)));
}

void quasar::AmbiguityAnnotatorBlock::addAnnotation(quasar::AmbiguityAnnotatorBlock *this, quasar::MetaInfo::Impl **a2, const quasar::AmbiguityAnnotatorBlock::SenseMatches *a3)
{
  uint64_t v30 = 0;
  int v31 = 0;
  unint64_t v32 = 0;
  std::vector<quasar::MetaInfo::Sense>::reserve(&v30, 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*((void *)a3 + 1) - *(void *)a3) >> 3));
  uint64_t v5 = *(void *)a3;
  uint64_t v6 = *((void *)a3 + 1);
  if (*(void *)a3 != v6)
  {
    uint64_t v7 = (void *)((char *)this + 2120);
    do
    {
      if (*(char *)(v5 + 111) < 0)
      {
        std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)(v5 + 88), *(void *)(v5 + 96));
      }
      else
      {
        long long v8 = *(_OWORD *)(v5 + 88);
        v19.__r_.__value_.__r.__words[2] = *(void *)(v5 + 104);
        *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v8;
      }
      if (*(char *)(v5 + 135) < 0)
      {
        std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)(v5 + 112), *(void *)(v5 + 120));
      }
      else
      {
        long long v9 = *(_OWORD *)(v5 + 112);
        v18.__r_.__value_.__r.__words[2] = *(void *)(v5 + 128);
        *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
      }
      if (*(char *)(v5 + 159) < 0)
      {
        std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)(v5 + 136), *(void *)(v5 + 144));
      }
      else
      {
        long long v10 = *(_OWORD *)(v5 + 136);
        v17.__r_.__value_.__r.__words[2] = *(void *)(v5 + 152);
        *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v10;
      }
      quasar::MetaInfo::Sense::Sense((uint64_t)v20, (long long *)&v19, (long long *)&v18, (__n128 *)&v17);
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v17.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v18.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v19.__r_.__value_.__l.__data_);
      }
      quasar::AmbiguityAnnotatorBlock::Match::toString((quasar::AmbiguityAnnotatorBlock::Match *)v5, (uint64_t)&__str);
      std::string::operator=(&v21, &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      uint64_t v22 = *(void *)(v5 + 24);
      quasar::AmbiguityAnnotatorBlock::Match::toString((quasar::AmbiguityAnnotatorBlock::Match *)(v5 + 32), (uint64_t)&__str);
      std::string::operator=(&v23, &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      uint64_t v24 = *(void *)(v5 + 56);
      std::optional<std::string>::operator=[abi:ne180100]<std::string const&,void>(&v25, (const std::string *)(v5 + 160));
      std::optional<std::string>::operator=[abi:ne180100]<std::string const&,void>(&v26, (const std::string *)(v5 + 184));
      if (!*(unsigned char *)quasar::OptionValue<BOOL>::value(v7)) {
        std::optional<std::string>::operator=[abi:ne180100]<std::string const&,void>(&v27, (const std::string *)(v5 + 208));
      }
      std::optional<std::string>::operator=[abi:ne180100]<std::string const&,void>(&v28, (const std::string *)(v5 + 232));
      std::optional<std::string>::operator=[abi:ne180100]<std::string const&,void>(&v29, (const std::string *)(v5 + 256));
      std::string v11 = v31;
      if ((unint64_t)v31 >= v32)
      {
        std::string v12 = (std::string *)std::vector<quasar::MetaInfo::Sense>::__emplace_back_slow_path<quasar::MetaInfo::Sense&>(&v30, (const quasar::MetaInfo::Sense *)v20);
      }
      else
      {
        quasar::MetaInfo::Sense::Sense(v31, (const quasar::MetaInfo::Sense *)v20);
        std::string v12 = (std::string *)((char *)v11 + 296);
      }
      int v31 = v12;
      quasar::MetaInfo::Sense::~Sense(v20);
      v5 += 280;
    }
    while (v5 != v6);
  }
  long long v14 = 0uLL;
  uint64_t v15 = 0;
  std::vector<quasar::MetaInfo::Sense>::__init_with_size[abi:ne180100]<quasar::MetaInfo::Sense*,quasar::MetaInfo::Sense*>(&v14, v30, (uint64_t)v31, 0x14C1BACF914C1BADLL * (((uint64_t)v31 - v30) >> 3));
  quasar::MetaInfo::setAmbiguityAnnotatorSenses(a2, &v14);
  v20[0] = &v14;
  std::vector<quasar::MetaInfo::Sense>::__destroy_vector::operator()[abi:ne180100]((void ***)v20);
  v20[0] = &v30;
  std::vector<quasar::MetaInfo::Sense>::__destroy_vector::operator()[abi:ne180100]((void ***)v20);
}

void sub_1B2310B60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40)
{
  std::vector<quasar::MetaInfo::Sense>::__destroy_vector::operator()[abi:ne180100]((void ***)&a40);
  a40 = v40 - 112;
  std::vector<quasar::MetaInfo::Sense>::__destroy_vector::operator()[abi:ne180100]((void ***)&a40);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::MetaInfo::Sense>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0x14C1BACF914C1BADLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xDD67C8A60DD67DLL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::MetaInfo::Sense>>(result, a2);
    v7[1] = v7[0] + v5;
    uint64_t v7[2] = v7[0] + v5;
    void v7[3] = v7[0] + 296 * v6;
    std::vector<quasar::MetaInfo::Sense>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<quasar::MetaInfo::Sense>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1B2310CC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::MetaInfo::Sense>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::AmbiguityAnnotatorBlock::Match::toString(quasar::AmbiguityAnnotatorBlock::Match *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  kaldi::JoinVectorToString((uint64_t *)this, " ", 1, (long long *)a2);
}

void sub_1B2310D18(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::optional<std::string>::operator=[abi:ne180100]<std::string const&,void>(std::string *this, const std::string *a2)
{
  if (this[1].__r_.__value_.__s.__data_[0])
  {
    std::string::operator=(this, a2);
  }
  else
  {
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(this, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
    }
    else
    {
      long long v3 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
      this->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
    }
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
  return this;
}

void quasar::AmbiguityAnnotatorBlock::extractTokenSequence(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = quasar::MetaInfo::get((quasar::MetaInfo *)(a2 + 192));
  std::string::basic_string[abi:ne180100]<0>(__p, "tokenizer output");
  quasar::PTree::getChildOptional(v2, (uint64_t)__p);
}

void sub_1B2311044(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

void quasar::AmbiguityAnnotatorBlock::convertTokenToCharacterSpan(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = quasar::MetaInfo::get((quasar::MetaInfo *)(a2 + 192));
  v5[0] = 0;
  v5[1] = 0;
  uint64_t v4 = v5;
  std::string::basic_string[abi:ne180100]<0>(v3, "tokenizer output");
  quasar::PTree::getChildOptional(v2, (uint64_t)v3);
}

void sub_1B2311418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&__p);
  std::__tree<int>::destroy(v54 - 128, *(void **)(v54 - 120));
  _Unwind_Resume(a1);
}

void quasar::AmbiguityAnnotatorBlock::processBody(quasar::AmbiguityAnnotatorBlock *this)
{
  uint64_t v2 = (quasar::AmbiguityAnnotatorBlock *)((char *)this + 2576);
  Value = (void *)quasar::ProcessingInput::getValue((quasar::AmbiguityAnnotatorBlock *)((char *)this + 2576));
  if (*Value == Value[1] && quasar::gLogLevel >= 1)
  {
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    long long v8 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)"empty source input received", 27);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v8);
  }
  uint64_t v5 = (void *)quasar::ProcessingInput::getValue((quasar::AmbiguityAnnotatorBlock *)((char *)this + 2632));
  if (*v5 == v5[1] && quasar::gLogLevel >= 1)
  {
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    long long v8 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)"empty nbest input received", 26);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v8);
  }
  uint64_t v7 = (uint64_t *)quasar::ProcessingInput::getValue(v2);
  quasar::AmbiguityAnnotatorBlock::extractTokenSequence((uint64_t)v7, *v7);
}

void sub_1B2311908(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,uint64_t a32,char *a33)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  a33 = &a30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  _Unwind_Resume(a1);
}

void *quasar::AmbiguityAnnotatorBlock::annotateAmbiguity(void *a1, uint64_t a2, void *a3, uint64_t *a4)
{
  void (***v48)(uint64_t *__return_ptr);
  std::__shared_weak_count *v49;
  int *v50;
  quasar::AmbiguityAnnotatorBlock::Senses *v51[3];
  void v52[7];

  float v52[4] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = (std::__shared_weak_count *)a1[337];
  long long v48 = (void (***)(uint64_t *__return_ptr))a1[336];
  long long v49 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v8 = (int *)quasar::OptionValue<int>::value(a1 + 193);
  int v9 = *(unsigned __int8 *)quasar::OptionValue<BOOL>::value(a1 + 211);
  long long v10 = (unsigned __int8 *)quasar::OptionValue<BOOL>::value(a1 + 229);
  quasar::AmbiguityAnnotatorBlock::Senses::Senses(v51, a3, &v48, v8, v9 != 0, *v10);
  if (v49) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v49);
  }
  long long v45 = 0;
  long long v46 = 0;
  unint64_t v47 = 0;
  quasar::AmbiguityAnnotatorBlock::Senses::keys(v51, &v43);
  long long v12 = v43;
  long long v11 = v44;
  if (v43 != v44)
  {
    while (1)
    {
      if (quasar::gLogLevel >= 5)
      {
        long long v41 = 0u;
        long long v42 = 0u;
        long long v39 = 0u;
        long long v40 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        long long v33 = 0u;
        long long v34 = 0u;
        long long v31 = 0u;
        long long v32 = 0u;
        long long v29 = 0u;
        long long v30 = 0u;
        long long v27 = 0u;
        long long v28 = 0u;
        long long v26 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v26);
        long long v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"source span: ", 13);
        quasar::operator<<(v13);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v26);
      }
      v25[0] = 0;
      v25[1] = 0;
      long long v24 = v25;
      if (quasar::AmbiguityAnnotatorBlock::findAlternatives((uint64_t)a1, (uint64_t)v12, (uint64_t)v51, (uint64_t **)&v24, a4))
      {
        break;
      }
      std::__tree<std::__value_type<int,std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatches>>,std::__map_value_compare<int,std::__value_type<int,std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatches>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatches>>>>::destroy((uint64_t)&v24, v25[0]);
      v12 += 8;
      if (v12 == v11) {
        goto LABEL_24;
      }
    }
    if (quasar::gLogLevel >= 5)
    {
      long long v41 = 0u;
      long long v42 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v26 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v26);
      long long v14 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" alternatives", 13);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v26);
    }
    int v23 = 0;
    if (a4[1] != *a4)
    {
      do
      {
        long long v50 = &v23;
        long long v15 = std::__tree<std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v24, &v23, (uint64_t)&std::piecewise_construct, &v50);
        if (v15[6] != v15[5])
        {
          long long v50 = &v23;
          long long v16 = std::__tree<std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v24, &v23, (uint64_t)&std::piecewise_construct, &v50);
          *(void *)&long long v26 = 0;
          quasar::AmbiguityAnnotatorBlock::convertTokenToCharacterSpan((uint64_t)v16, a2);
        }
        if (!*(unsigned char *)quasar::OptionValue<BOOL>::value((void *)((char *)a1 + *(void *)(a1[283] - 24) + 2264)))
        {
          long long v18 = (const quasar::TranslationPhraseInternal *)(*a4 + 200 * v23);
          long long v19 = v46;
          if ((unint64_t)v46 >= v47)
          {
            long long v17 = (std::string *)std::vector<quasar::TranslationPhraseInternal>::__push_back_slow_path<quasar::TranslationPhraseInternal const&>((uint64_t *)&v45, v18);
          }
          else
          {
            quasar::TranslationPhraseInternal::TranslationPhraseInternal(v46, v18);
            long long v17 = (std::string *)((char *)v19 + 200);
          }
          long long v46 = v17;
        }
        unint64_t v20 = ++v23;
      }
      while (0x8F5C28F5C28F5C29 * ((a4[1] - *a4) >> 3) > v20);
    }
    std::__tree<std::__value_type<int,std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatches>>,std::__map_value_compare<int,std::__value_type<int,std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatches>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatches>>>>::destroy((uint64_t)&v24, v25[0]);
LABEL_24:
    long long v12 = v43;
  }
  if (v12)
  {
    long long v44 = v12;
    operator delete(v12);
  }
  if (v45 == v46)
  {
    if (quasar::gLogLevel >= 5)
    {
      long long v41 = 0u;
      long long v42 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v26 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v26);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"no alternatives", 15);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v26);
    }
  }
  else
  {
    a4 = (uint64_t *)&v45;
  }
  quasar::AmbiguityAnnotatorBlock::sender(a1, a4);
  *(void *)&long long v26 = &v45;
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  std::__tree<std::__value_type<quasar::AmbiguityAnnotatorBlock::MatchSpan,quasar::AmbiguityAnnotatorBlock::SenseMatches>,std::__map_value_compare<quasar::AmbiguityAnnotatorBlock::MatchSpan,std::__value_type<quasar::AmbiguityAnnotatorBlock::MatchSpan,quasar::AmbiguityAnnotatorBlock::SenseMatches>,std::function<BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>,false>,std::allocator<std::__value_type<quasar::AmbiguityAnnotatorBlock::MatchSpan,quasar::AmbiguityAnnotatorBlock::SenseMatches>>>::destroy((uint64_t)v51, (char *)v51[1]);
  return std::__function::__value_func<BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::~__value_func[abi:ne180100](v52);
}

void sub_1B2311E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13, uint64_t a14, void **a15)
{
  std::__tree<std::__value_type<int,std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatches>>,std::__map_value_compare<int,std::__value_type<int,std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatches>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatches>>>>::destroy((uint64_t)&a12, a13);
  long long v18 = *(void **)(v15 + 272);
  if (v18)
  {
    *(void *)(v15 + 28std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = v18;
    operator delete(v18);
  }
  a15 = (void **)(v16 - 216);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&a15);
  quasar::AmbiguityAnnotatorBlock::Senses::~Senses((char **)(v16 - 160));
  _Unwind_Resume(a1);
}

void non-virtual thunk to'quasar::AmbiguityAnnotatorBlock::processBody(quasar::AmbiguityAnnotatorBlock *this)
{
}

BOOL quasar::AmbiguityAnnotatorBlock::findAlternatives(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4, uint64_t *a5)
{
  long long v8 = std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatches>::vector(&v131, 0x8F5C28F5C28F5C29 * ((a5[1] - *a5) >> 3));
  uint64_t v128 = 0;
  uint64_t v129 = 0;
  uint64_t v130 = 0;
  uint64_t v9 = *a5;
  if (*a5 != a5[1])
  {
    memset(v107, 0, 24);
    quasar::AmbiguityAnnotatorBlock::extractTokenSequence((uint64_t)v8, v9);
  }
  long long v101 = a4;
  v127[0] = 0;
  v127[1] = 0;
  uint64_t v126 = (uint64_t *)v127;
  long long v10 = (uint64_t *)std::map<quasar::AmbiguityAnnotatorBlock::MatchSpan,quasar::AmbiguityAnnotatorBlock::SenseMatches,std::function<BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>,std::allocator<std::pair<quasar::AmbiguityAnnotatorBlock::MatchSpan const,quasar::AmbiguityAnnotatorBlock::SenseMatches>>>::at(a3, a2);
  uint64_t v11 = *v10;
  uint64_t v102 = v10[1];
  if (*v10 != v102)
  {
    while (1)
    {
      uint64_t v12 = v128;
      uint64_t v13 = v129;
      if (v128 != v129) {
        break;
      }
LABEL_47:
      v11 += 280;
      if (v11 == v102) {
        goto LABEL_48;
      }
    }
    int v14 = 0;
    while (1)
    {
      uint64_t v15 = *(unsigned __int8 **)v12;
      uint64_t v16 = *(void *)(v12 + 8);
      long long v17 = *(unsigned __int8 **)(v11 + 64);
      long long v18 = *(unsigned __int8 **)(v11 + 72);
      LOBYTE(v104) = 0;
      long long v19 = std::__search_impl[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>,std::__equal_to,std::__identity,std::__identity>(v15, v16, v17, v18, (uint64_t)&v123, (uint64_t)&v104, (uint64_t)&v104);
      if (*(unsigned __int8 **)(v12 + 8) != v19)
      {
        if (!*(unsigned char *)quasar::OptionValue<BOOL>::value((void *)(a1
                                                                  + 2416
                                                                  + *(void *)(*(void *)(a1 + 2416) - 24))))
        {
          std::pair<std::string,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>((std::string *)v107, (long long *)(v11 + 88), (long long *)(v11 + 208));
          std::__tree<std::pair<std::string,std::string>>::__emplace_unique_key_args<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(&v126, (const void **)v107, (uint64_t)v107);
          char v21 = v20;
          if (SHIBYTE(v108) < 0) {
            operator delete(*(void **)&v107[24]);
          }
          if ((v107[23] & 0x80000000) != 0) {
            operator delete(*(void **)v107);
          }
          if (!v21) {
            goto LABEL_46;
          }
        }
        unsigned int v125 = -1431655765 * ((unint64_t)&v19[-*(void *)v12] >> 3);
        *(_DWORD *)uint64_t v107 = -1431655765 * ((*(void *)(v11 + 72) - *(void *)(v11 + 64)) >> 3);
        quasar::AmbiguityAnnotatorBlock::SenseMatch::addTargetMatch(v11, (long long **)(v11 + 64), &v125, (int *)v107);
        if (quasar::gLogLevel >= 5)
        {
          long long v123 = 0uLL;
          uint64_t v124 = 0;
          kaldi::JoinVectorToString((uint64_t *)(v11 + 64), " ", 1, &v123);
          if (quasar::gLogLevel >= 5)
          {
            long long v121 = 0u;
            long long v122 = 0u;
            long long v119 = 0u;
            long long v120 = 0u;
            long long v117 = 0u;
            long long v118 = 0u;
            long long v115 = 0u;
            long long v116 = 0u;
            long long v113 = 0u;
            long long v114 = 0u;
            long long v111 = 0u;
            long long v112 = 0u;
            long long v109 = 0u;
            long long v110 = 0u;
            long long v108 = 0u;
            memset(v107, 0, sizeof(v107));
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v107);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v107, (uint64_t)"in hypothesis ", 14);
            long long v22 = (void *)std::ostream::operator<<();
            int v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" ", 1);
            long long v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"\"", 1);
            quasar::AmbiguityAnnotatorBlock::Match::toString((quasar::AmbiguityAnnotatorBlock::Match *)v11, (uint64_t)&v104);
            if ((v106 & 0x80u) == 0) {
              std::string v25 = &v104;
            }
            else {
              std::string v25 = v104;
            }
            if ((v106 & 0x80u) == 0) {
              uint64_t v26 = v106;
            }
            else {
              uint64_t v26 = (uint64_t)v105;
            }
            long long v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v25, v26);
            long long v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"\" ", 2);
            long long v29 = quasar::operator<<(v28);
            long long v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)" is translated as \"", 19);
            if (v124 >= 0) {
              long long v31 = &v123;
            }
            else {
              long long v31 = (long long *)v123;
            }
            if (v124 >= 0) {
              uint64_t v32 = HIBYTE(v124);
            }
            else {
              uint64_t v32 = *((void *)&v123 + 1);
            }
            long long v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)v31, v32);
            long long v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"\" ", 2);
            long long v133 = (unsigned int *)__PAIR64__(-1431655765 * ((*(void *)(v11 + 72) - *(void *)(v11 + 64)) >> 3), v125);
            long long v35 = quasar::operator<<(v34);
            long long v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" in sense ", 10);
            long long v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"\"", 1);
            int v38 = *(char *)(v11 + 111);
            if (v38 >= 0) {
              uint64_t v39 = v11 + 88;
            }
            else {
              uint64_t v39 = *(void *)(v11 + 88);
            }
            if (v38 >= 0) {
              uint64_t v40 = *(unsigned __int8 *)(v11 + 111);
            }
            else {
              uint64_t v40 = *(void *)(v11 + 96);
            }
            long long v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, v39, v40);
            long long v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"\"", 1);
            long long v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)" (", 2);
            char v44 = *(unsigned char *)(v11 + 135);
            if (v44 >= 0) {
              uint64_t v45 = v11 + 112;
            }
            else {
              uint64_t v45 = *(void *)(v11 + 112);
            }
            if (v44 >= 0) {
              uint64_t v46 = *(unsigned __int8 *)(v11 + 135);
            }
            else {
              uint64_t v46 = *(void *)(v11 + 120);
            }
            unint64_t v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, v45, v46);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)")", 1);
            if ((char)v106 < 0) {
              operator delete(v104);
            }
            quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v107);
          }
          if (SHIBYTE(v124) < 0) {
            operator delete((void *)v123);
          }
        }
        quasar::AmbiguityAnnotatorBlock::SenseMatches::add((quasar::AmbiguityAnnotatorBlock::SenseMatches *)&v131[3 * v14], (const quasar::AmbiguityAnnotatorBlock::SenseMatch *)v11);
      }
      ++v14;
LABEL_46:
      v12 += 24;
      if (v12 == v13) {
        goto LABEL_47;
      }
    }
  }
LABEL_48:
  long long v48 = v131;
  long long v49 = v132;
  if (v131 != v132)
  {
    long long v50 = (void *)(a1 + 1976);
    do
    {
      unint64_t v51 = 0xAF8AF8AF8AF8AF8BLL * ((v48[1] - *v48) >> 3);
      if (v51 >= 2 && v51 > *(int *)quasar::OptionValue<int>::value(v50))
      {
        if (quasar::gLogLevel >= 5)
        {
          long long v121 = 0u;
          long long v122 = 0u;
          long long v119 = 0u;
          long long v120 = 0u;
          long long v117 = 0u;
          long long v118 = 0u;
          long long v115 = 0u;
          long long v116 = 0u;
          long long v113 = 0u;
          long long v114 = 0u;
          long long v111 = 0u;
          long long v112 = 0u;
          long long v109 = 0u;
          long long v110 = 0u;
          long long v108 = 0u;
          memset(v107, 0, sizeof(v107));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v107);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v107, (uint64_t)"limiting senses to ", 19);
          quasar::OptionValue<int>::value(v50);
          int v52 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)": ", 2);
          uint64_t v53 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)" before limit", 13);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v107);
        }
        uint64_t v54 = *v48;
        uint64_t v55 = (int *)quasar::OptionValue<int>::value(v50);
        std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatch>::erase((uint64_t)v48, v54 + 280 * *v55, v48[1]);
        if (quasar::gLogLevel >= 5)
        {
          long long v121 = 0u;
          long long v122 = 0u;
          long long v119 = 0u;
          long long v120 = 0u;
          long long v117 = 0u;
          long long v118 = 0u;
          long long v115 = 0u;
          long long v116 = 0u;
          long long v113 = 0u;
          long long v114 = 0u;
          long long v111 = 0u;
          long long v112 = 0u;
          long long v109 = 0u;
          long long v110 = 0u;
          long long v108 = 0u;
          memset(v107, 0, sizeof(v107));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v107);
          float v56 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)" after limit", 12);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v107);
        }
      }
      v48 += 3;
    }
    while (v48 != v49);
    if (v132 != v131 && *v131 != v131[1])
    {
      quasar::AmbiguityAnnotatorBlock::SenseMatches::senseIDs(v131, (uint64_t)&v123);
      char v57 = (long long *)v123;
      uint64_t v58 = (uint64_t)v101;
      if ((long long *)v123 != (long long *)((char *)&v123 + 8))
      {
        int v59 = quasar::gLogLevel;
        do
        {
          if (v59 >= 5)
          {
            long long v121 = 0u;
            long long v122 = 0u;
            long long v119 = 0u;
            long long v120 = 0u;
            long long v117 = 0u;
            long long v118 = 0u;
            long long v115 = 0u;
            long long v116 = 0u;
            long long v113 = 0u;
            long long v114 = 0u;
            long long v111 = 0u;
            long long v112 = 0u;
            long long v109 = 0u;
            long long v110 = 0u;
            long long v108 = 0u;
            memset(v107, 0, sizeof(v107));
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v107);
            long long v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v107, (uint64_t)"found the sense \"", 17);
            int v61 = *((char *)v57 + 55);
            if (v61 >= 0) {
              uint64_t v62 = (uint64_t)(v57 + 2);
            }
            else {
              uint64_t v62 = *((void *)v57 + 4);
            }
            if (v61 >= 0) {
              uint64_t v63 = *((unsigned __int8 *)v57 + 55);
            }
            else {
              uint64_t v63 = *((void *)v57 + 5);
            }
            unsigned __int8 v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, v62, v63);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)"\" in 1-best", 11);
            quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v107);
            int v59 = quasar::gLogLevel;
          }
          long long v65 = (long long *)*((void *)v57 + 1);
          if (v65)
          {
            do
            {
              uint64_t v66 = v65;
              long long v65 = *(long long **)v65;
            }
            while (v65);
          }
          else
          {
            do
            {
              uint64_t v66 = (long long *)*((void *)v57 + 2);
              BOOL v67 = *(void *)v66 == (void)v57;
              char v57 = v66;
            }
            while (!v67);
          }
          char v57 = v66;
        }
        while (v66 != (long long *)((char *)&v123 + 8));
      }
      if (*(unsigned char *)quasar::OptionValue<BOOL>::value((void *)(a1 + 2416 + *(void *)(*(void *)(a1 + 2416) - 24))))
      {
        *(_DWORD *)uint64_t v107 = 0;
        if (v132 != v131)
        {
          do
          {
            uint64_t v104 = v107;
            uint64_t v68 = std::__tree<std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v101, (int *)v107, (uint64_t)&std::piecewise_construct, (_DWORD **)&v104);
            long long v69 = (uint64_t *)(v68 + 5);
            long long v70 = &v131[3 * *(int *)v107];
            long long v71 = v68[6];
            if (v71 >= v68[7])
            {
              uint64_t v72 = std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatches>::__push_back_slow_path<quasar::AmbiguityAnnotatorBlock::SenseMatches const&>(v69, v70);
            }
            else
            {
              std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatches>::__construct_one_at_end[abi:ne180100]<quasar::AmbiguityAnnotatorBlock::SenseMatches const&>((uint64_t)v69, v70);
              uint64_t v72 = (uint64_t)(v71 + 3);
            }
            v68[6] = (uint64_t *)v72;
            unint64_t v73 = *(int *)v107 + 1;
            ++*(_DWORD *)v107;
          }
          while (0xAAAAAAAAAAAAAAABLL * (v132 - v131) > v73);
        }
        goto LABEL_120;
      }
      *(_DWORD *)uint64_t v107 = 0;
      uint64_t v104 = v107;
      long long v74 = std::__tree<std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v101, (int *)v107, (uint64_t)&std::piecewise_construct, (_DWORD **)&v104);
      long long v75 = (uint64_t *)(v74 + 5);
      long long v76 = v74[6];
      if (v76 >= v74[7])
      {
        uint64_t v77 = std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatches>::__push_back_slow_path<quasar::AmbiguityAnnotatorBlock::SenseMatches const&>(v75, v131);
      }
      else
      {
        std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatches>::__construct_one_at_end[abi:ne180100]<quasar::AmbiguityAnnotatorBlock::SenseMatches const&>((uint64_t)v75, v131);
        uint64_t v77 = (uint64_t)(v76 + 3);
      }
      v74[6] = (uint64_t *)v77;
      unsigned int v125 = 1;
      long long v78 = v131;
      if (0xAAAAAAAAAAAAAAABLL * (v132 - v131) < 2)
      {
LABEL_119:
        uint64_t v58 = (uint64_t)v101;
LABEL_120:
        std::__tree<std::string>::destroy((uint64_t)&v123, *((char **)&v123 + 1));
        goto LABEL_121;
      }
      unint64_t v79 = 1;
      while (1)
      {
        quasar::AmbiguityAnnotatorBlock::SenseMatches::senseIDs(&v78[3 * v79], (uint64_t)&v104);
        long long v80 = (char *)v104;
        if (v104 != &v105) {
          break;
        }
LABEL_118:
        std::__tree<std::string>::destroy((uint64_t)&v104, v105);
        unint64_t v79 = (int)v125++ + 1;
        long long v78 = v131;
        if (0xAAAAAAAAAAAAAAABLL * (v132 - v131) <= v79) {
          goto LABEL_119;
        }
      }
      while (1)
      {
        if ((long long *)((char *)&v123 + 8) == (long long *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)&v123, (const void **)v80 + 4))goto LABEL_100; {
        if (v80[55] < 0)
        }
        {
          long long v82 = (unsigned __int8 *)*((void *)v80 + 4);
          uint64_t v81 = *((void *)v80 + 5);
          if (v81)
          {
LABEL_95:
            uint64_t v83 = 0;
            do
            {
              int v84 = *v82++;
              if (v84 == 46) {
                ++v83;
              }
              --v81;
            }
            while (v81);
            if (v83 != 3) {
              goto LABEL_112;
            }
LABEL_100:
            if (quasar::gLogLevel >= 5)
            {
              long long v121 = 0u;
              long long v122 = 0u;
              long long v119 = 0u;
              long long v120 = 0u;
              long long v117 = 0u;
              long long v118 = 0u;
              long long v115 = 0u;
              long long v116 = 0u;
              long long v113 = 0u;
              long long v114 = 0u;
              long long v111 = 0u;
              long long v112 = 0u;
              long long v109 = 0u;
              long long v110 = 0u;
              long long v108 = 0u;
              memset(v107, 0, sizeof(v107));
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v107);
              double v85 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v107, (uint64_t)"found the sense \"", 17);
              int v86 = v80[55];
              if (v86 >= 0) {
                uint64_t v87 = (uint64_t)(v80 + 32);
              }
              else {
                uint64_t v87 = *((void *)v80 + 4);
              }
              if (v86 >= 0) {
                uint64_t v88 = v80[55];
              }
              else {
                uint64_t v88 = *((void *)v80 + 5);
              }
              uint64_t v89 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, v87, v88);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"\" in hypothesis ", 16);
              std::ostream::operator<<();
              quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v107);
            }
            long long v133 = &v125;
            long long v90 = std::__tree<std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v101, (int *)&v125, (uint64_t)&std::piecewise_construct, &v133);
            size_t v91 = (uint64_t *)(v90 + 5);
            size_t v92 = &v131[3 * (int)v125];
            unint64_t v93 = v90[6];
            if (v93 >= v90[7])
            {
              uint64_t v94 = std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatches>::__push_back_slow_path<quasar::AmbiguityAnnotatorBlock::SenseMatches const&>(v91, v92);
            }
            else
            {
              std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatches>::__construct_one_at_end[abi:ne180100]<quasar::AmbiguityAnnotatorBlock::SenseMatches const&>((uint64_t)v91, v92);
              uint64_t v94 = (uint64_t)(v93 + 3);
            }
            v90[6] = (uint64_t *)v94;
            std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v123, (const void **)v80 + 4, (uint64_t)(v80 + 32));
          }
        }
        else
        {
          uint64_t v81 = v80[55];
          long long v82 = (unsigned __int8 *)(v80 + 32);
          if (v80[55]) {
            goto LABEL_95;
          }
        }
LABEL_112:
        long long v95 = (char *)*((void *)v80 + 1);
        if (v95)
        {
          do
          {
            std::string::size_type v96 = (char **)v95;
            long long v95 = *(char **)v95;
          }
          while (v95);
        }
        else
        {
          do
          {
            std::string::size_type v96 = (char **)*((void *)v80 + 2);
            BOOL v67 = *v96 == v80;
            long long v80 = (char *)v96;
          }
          while (!v67);
        }
        long long v80 = (char *)v96;
        if (v96 == &v105) {
          goto LABEL_118;
        }
      }
    }
  }
  uint64_t v58 = (uint64_t)v101;
  if (quasar::gLogLevel >= 5)
  {
    long long v121 = 0u;
    long long v122 = 0u;
    long long v119 = 0u;
    long long v120 = 0u;
    long long v117 = 0u;
    long long v118 = 0u;
    long long v115 = 0u;
    long long v116 = 0u;
    long long v113 = 0u;
    long long v114 = 0u;
    long long v111 = 0u;
    long long v112 = 0u;
    long long v109 = 0u;
    long long v110 = 0u;
    long long v108 = 0u;
    memset(v107, 0, sizeof(v107));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v107);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v107, (uint64_t)"best hypothesis has no sense match", 34);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v107);
  }
LABEL_121:
  uint64_t v97 = *(void *)(v58 + 16);
  if (v97 == 1)
  {
    std::__tree<std::__value_type<int,std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatches>>,std::__map_value_compare<int,std::__value_type<int,std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatches>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatches>>>>::destroy(v58, *(char **)(v58 + 8));
    uint64_t v97 = 0;
    *(void *)uint64_t v58 = v58 + 8;
    *(void *)(v58 + 16) = 0;
    *(void *)(v58 + 8) = 0;
  }
  BOOL v98 = v97 != 0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v126, v127[0]);
  *(void *)uint64_t v107 = &v128;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)v107);
  *(void *)uint64_t v107 = &v131;
  std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatches>::__destroy_vector::operator()[abi:ne180100]((void ***)v107);
  return v98;
}

void sub_1B2312AD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  std::__tree<std::string>::destroy(v22 - 216, *(char **)(v22 - 208));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v22 - 184, *(void **)(v22 - 176));
  a22 = v22 - 160;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  a22 = v22 - 136;
  std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatches>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  _Unwind_Resume(a1);
}

void quasar::AmbiguityAnnotatorBlock::SenseMatch::addTargetMatch(uint64_t a1, long long **a2, _DWORD *a3, int *a4)
{
  int v6 = *a4;
  memset(&v9, 0, sizeof(v9));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v9, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  LODWORD(v1std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = *a3;
  HIDWORD(v1std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = v6;
  std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(a1 + 32));
  *(_OWORD *)(a1 + 32) = *(_OWORD *)&v9.__r_.__value_.__l.__data_;
  std::string::size_type v7 = v9.__r_.__value_.__r.__words[2];
  uint64_t v8 = v10;
  memset(&v9, 0, sizeof(v9));
  *(void *)(a1 + 48) = v7;
  *(void *)(a1 + 56) = v8;
  uint64_t v11 = &v9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
}

uint64_t quasar::AmbiguityAnnotatorBlock::SenseMatches::add(quasar::AmbiguityAnnotatorBlock::SenseMatches *this, const quasar::AmbiguityAnnotatorBlock::SenseMatch *a2)
{
  unint64_t v3 = *((void *)this + 1);
  if (v3 >= *((void *)this + 2))
  {
    uint64_t result = std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatch>::__push_back_slow_path<quasar::AmbiguityAnnotatorBlock::SenseMatch const&>((uint64_t *)this, a2);
  }
  else
  {
    quasar::AmbiguityAnnotatorBlock::SenseMatch::SenseMatch(*((quasar::AmbiguityAnnotatorBlock::SenseMatch **)this + 1), a2);
    uint64_t result = v3 + 280;
    *((void *)this + 1) = v3 + 280;
  }
  *((void *)this + 1) = result;
  return result;
}

void sub_1B2312D18(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatch>::erase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,quasar::AmbiguityAnnotatorBlock::SenseMatch *,quasar::AmbiguityAnnotatorBlock::SenseMatch *,quasar::AmbiguityAnnotatorBlock::SenseMatch *,0>(a3, *(void *)(a1 + 8), a2);
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7 != v5)
    {
      do
        quasar::AmbiguityAnnotatorBlock::SenseMatch::~SenseMatch((void **)(v7 - 280));
      while (v7 != v6);
    }
    *(void *)(a1 + 8) = v6;
  }
  return a2;
}

uint64_t *quasar::AmbiguityAnnotatorBlock::SenseMatches::senseIDs@<X0>(uint64_t *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)a2 = a2 + 8;
  uint64_t v3 = *this;
  uint64_t v4 = this[1];
  while (v3 != v4)
  {
    this = std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)a2, (const void **)(v3 + 88), v3 + 88);
    v3 += 280;
  }
  return this;
}

void sub_1B2312DE8(_Unwind_Exception *a1)
{
  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void quasar::AmbiguityAnnotatorBlock::sender(void *a1, uint64_t *a2)
{
  if (quasar::gLogLevel >= 6)
  {
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    long long v8 = 0u;
    long long v9 = 0u;
    *(_OWORD *)std::vector<int> __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"metainfo for the alternatives:", 30);
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)__p);
  }
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      uint64_t v6 = (quasar::PTree *)quasar::MetaInfo::get((quasar::MetaInfo *)(v4 + 192));
      std::string::basic_string[abi:ne180100]<0>(__p, "tokenizer input");
      quasar::PTree::erase((uint64_t)v6, (unsigned __int8 *)__p);
      if (SBYTE7(v8) < 0) {
        operator delete(__p[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "tokenizer output");
      quasar::PTree::erase((uint64_t)v6, (unsigned __int8 *)__p);
      if (SBYTE7(v8) < 0) {
        operator delete(__p[0]);
      }
      if (quasar::gLogLevel >= 6)
      {
        long long v22 = 0u;
        long long v23 = 0u;
        long long v20 = 0u;
        long long v21 = 0u;
        long long v18 = 0u;
        long long v19 = 0u;
        long long v16 = 0u;
        long long v17 = 0u;
        long long v14 = 0u;
        long long v15 = 0u;
        long long v12 = 0u;
        long long v13 = 0u;
        long long v10 = 0u;
        long long v11 = 0u;
        long long v8 = 0u;
        long long v9 = 0u;
        *(_OWORD *)std::vector<int> __p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        quasar::operator<<(__p, v6);
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)__p);
      }
      v4 += 200;
    }
    while (v4 != v5);
  }
  quasar::ProcessingBlock::send((uint64_t)a1 + *(void *)(*a1 - 24), (uint64_t)a2, 0);
}

void sub_1B2312FA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

void quasar::AmbiguityAnnotatorBlock::Senses::keys(quasar::AmbiguityAnnotatorBlock::Senses **this@<X0>, char **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = this + 1;
  uint64_t v3 = *this;
  if (*this != (quasar::AmbiguityAnnotatorBlock::Senses *)(this + 1))
  {
    uint64_t v5 = 0;
    uint64_t v6 = a2 + 2;
    do
    {
      if ((unint64_t)v5 >= *v6)
      {
        uint64_t v7 = (v5 - *a2) >> 3;
        if ((unint64_t)(v7 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v8 = *v6 - (void)*a2;
        uint64_t v9 = v8 >> 2;
        if (v8 >> 2 <= (unint64_t)(v7 + 1)) {
          uint64_t v9 = v7 + 1;
        }
        if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v10 = v9;
        }
        if (v10) {
          long long v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v6, v10);
        }
        else {
          long long v11 = 0;
        }
        long long v12 = &v11[8 * v7];
        *(void *)long long v12 = *((void *)v3 + 4);
        uint64_t v5 = v12 + 8;
        long long v14 = *a2;
        long long v13 = a2[1];
        if (v13 != *a2)
        {
          do
          {
            uint64_t v15 = *((void *)v13 - 1);
            v13 -= 8;
            *((void *)v12 - 1) = v15;
            v12 -= 8;
          }
          while (v13 != v14);
          long long v13 = *a2;
        }
        *a2 = v12;
        a2[1] = v5;
        a2[2] = &v11[8 * v10];
        if (v13) {
          operator delete(v13);
        }
      }
      else
      {
        *(void *)uint64_t v5 = *((void *)v3 + 4);
        v5 += 8;
      }
      a2[1] = v5;
      long long v16 = (quasar::AmbiguityAnnotatorBlock::Senses *)*((void *)v3 + 1);
      if (v16)
      {
        do
        {
          long long v17 = (quasar::AmbiguityAnnotatorBlock::Senses **)v16;
          long long v16 = *(quasar::AmbiguityAnnotatorBlock::Senses **)v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          long long v17 = (quasar::AmbiguityAnnotatorBlock::Senses **)*((void *)v3 + 2);
          BOOL v18 = *v17 == v3;
          uint64_t v3 = (quasar::AmbiguityAnnotatorBlock::Senses *)v17;
        }
        while (!v18);
      }
      uint64_t v3 = (quasar::AmbiguityAnnotatorBlock::Senses *)v17;
    }
    while (v17 != v2);
  }
}

void sub_1B2313124(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void quasar::AmbiguityAnnotatorBlock::Senses::~Senses(char **this)
{
}

uint64_t quasar::AmbiguityAnnotatorBlock::minConfigVersion(quasar::AmbiguityAnnotatorBlock *this)
{
  return 144;
}

uint64_t virtual thunk to'quasar::AmbiguityAnnotatorBlock::minConfigVersion(quasar::AmbiguityAnnotatorBlock *this)
{
  return 144;
}

void quasar::ConfiguredProcessingBlock<quasar::AmbiguityAnnotatorOptions>::setContextProvider(uint64_t a1, uint64_t *a2)
{
  void (***v3)(uint64_t **__return_ptr);
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t *v10;
  uint64_t *v11;

  uint64_t v3 = (void (***)(uint64_t **__return_ptr))(*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
  (**v3)(&v10);
  uint64_t v4 = v10;
  uint64_t v5 = v11;
  if (v10 != v11)
  {
    do
    {
      uint64_t v6 = *v4;
      uint64_t v7 = (std::__shared_weak_count *)a2[1];
      uint64_t v8 = *a2;
      uint64_t v9 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      quasar::OptionValueBase::setContextProvider(v6, &v8);
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
      ++v4;
    }
    while (v4 != v5);
    uint64_t v4 = v10;
  }
  if (v4)
  {
    long long v11 = v4;
    operator delete(v4);
  }
}

void sub_1B2313260(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::ConfiguredProcessingBlock<quasar::AmbiguityAnnotatorOptions>::getOptions(uint64_t a1)
{
  return a1 + 8;
}

void virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::AmbiguityAnnotatorOptions>::setContextProvider(void *a1, uint64_t *a2)
{
}

uint64_t virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::AmbiguityAnnotatorOptions>::getOptions(void *a1)
{
  return (uint64_t)a1 + *(void *)(*a1 - 104) + 8;
}

void quasar::AmbiguityAnnotatorBlock::~AmbiguityAnnotatorBlock(quasar::AmbiguityAnnotatorBlock *this)
{
  quasar::ProcessingBlock::~ProcessingBlock((char **)(v1 + 2704));
}

{
  uint64_t v1;
  uint64_t vars8;

  quasar::ProcessingBlock::~ProcessingBlock((char **)(v1 + 2704));
  JUMPOUT(0x1B3EA8670);
}

const char *quasar::AmbiguityAnnotatorBlock::blockType(quasar::AmbiguityAnnotatorBlock *this)
{
  return "AmbiguityAnnotatorBlock";
}

void *quasar::AmbiguityAnnotatorBlock::inputs@<X0>(quasar::AmbiguityAnnotatorBlock *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t result = operator new(0x10uLL);
  a2[1] = result + 2;
  a2[2] = result + 2;
  *uint64_t result = (char *)this + 2576;
  result[1] = (char *)this + 2632;
  *a2 = result;
  return result;
}

void *non-virtual thunk to'quasar::AmbiguityAnnotatorBlock::inputs@<X0>(quasar::AmbiguityAnnotatorBlock *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t result = operator new(0x10uLL);
  a2[1] = result + 2;
  a2[2] = result + 2;
  *uint64_t result = (char *)this + 8;
  result[1] = (char *)this + 64;
  *a2 = result;
  return result;
}

void non-virtual thunk to'quasar::AmbiguityAnnotatorBlock::~AmbiguityAnnotatorBlock(char **this)
{
  quasar::ProcessingBlock::~ProcessingBlock(this + 17);
}

{
  uint64_t vars8;

  quasar::ProcessingBlock::~ProcessingBlock(this + 17);
  JUMPOUT(0x1B3EA8670);
}

void virtual thunk to'quasar::AmbiguityAnnotatorBlock::~AmbiguityAnnotatorBlock(quasar::AmbiguityAnnotatorBlock *this)
{
  uint64_t v2 = (char **)(v1 + 2704);
  quasar::ProcessingBlock::~ProcessingBlock(v2);
}

{
  char **v1;
  uint64_t vars8;

  uint64_t v1 = (char **)((char *)this + *(void *)(*(void *)this - 24));
  quasar::ProcessingBlock::~ProcessingBlock(v1 + 338);
  JUMPOUT(0x1B3EA8670);
}

const char *virtual thunk to'quasar::AmbiguityAnnotatorBlock::blockType(quasar::AmbiguityAnnotatorBlock *this)
{
  return "AmbiguityAnnotatorBlock";
}

uint64_t std::map<quasar::AmbiguityAnnotatorBlock::MatchSpan,quasar::AmbiguityAnnotatorBlock::SenseMatches,std::function<BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>,std::allocator<std::pair<quasar::AmbiguityAnnotatorBlock::MatchSpan const,quasar::AmbiguityAnnotatorBlock::SenseMatches>>>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *std::__tree<std::__value_type<quasar::AmbiguityAnnotatorBlock::MatchSpan,quasar::AmbiguityAnnotatorBlock::SenseMatches>,std::__map_value_compare<quasar::AmbiguityAnnotatorBlock::MatchSpan,std::__value_type<quasar::AmbiguityAnnotatorBlock::MatchSpan,quasar::AmbiguityAnnotatorBlock::SenseMatches>,std::function<BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>,false>,std::allocator<std::__value_type<quasar::AmbiguityAnnotatorBlock::MatchSpan,quasar::AmbiguityAnnotatorBlock::SenseMatches>>>::__find_equal<quasar::AmbiguityAnnotatorBlock::MatchSpan>(a1, &v4, a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  }
  return v2 + 40;
}

void *std::__tree<std::__value_type<quasar::AmbiguityAnnotatorBlock::MatchSpan,quasar::AmbiguityAnnotatorBlock::SenseMatches>,std::__map_value_compare<quasar::AmbiguityAnnotatorBlock::MatchSpan,std::__value_type<quasar::AmbiguityAnnotatorBlock::MatchSpan,quasar::AmbiguityAnnotatorBlock::SenseMatches>,std::function<BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>,false>,std::allocator<std::__value_type<quasar::AmbiguityAnnotatorBlock::MatchSpan,quasar::AmbiguityAnnotatorBlock::SenseMatches>>>::__find_equal<quasar::AmbiguityAnnotatorBlock::MatchSpan>(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = (void *)(a1 + 8);
  uint64_t v5 = *(void **)(a1 + 8);
  if (v5)
  {
    uint64_t v7 = *(void *)(a1 + 48);
    if (!v7) {
LABEL_10:
    }
      std::__throw_bad_function_call[abi:ne180100]();
    while (1)
    {
      if ((*(unsigned int (**)(uint64_t, uint64_t, void *))(*(void *)v7 + 48))(v7, a3, v5 + 4))
      {
        uint64_t v9 = (void *)*v5;
        uint64_t v4 = v5;
        if (!*v5) {
          goto LABEL_12;
        }
      }
      else
      {
        uint64_t v10 = *(void *)(a1 + 48);
        if (!v10) {
          goto LABEL_10;
        }
        if (!(*(unsigned int (**)(uint64_t, void *, uint64_t))(*(void *)v10 + 48))(v10, v5 + 4, a3)) {
          goto LABEL_12;
        }
        uint64_t v4 = v5 + 1;
        uint64_t v9 = (void *)v5[1];
        if (!v9) {
          goto LABEL_12;
        }
      }
      uint64_t v7 = *(void *)(a1 + 48);
      uint64_t v5 = v9;
      if (!v7) {
        goto LABEL_10;
      }
    }
  }
  uint64_t v5 = (void *)(a1 + 8);
LABEL_12:
  *a2 = v5;
  return v4;
}

uint64_t std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatch>::__push_back_slow_path<quasar::AmbiguityAnnotatorBlock::SenseMatch const&>(uint64_t *a1, const quasar::AmbiguityAnnotatorBlock::SenseMatch *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAF8AF8AF8AF8AF8BLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xEA0EA0EA0EA0EALL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAF8AF8AF8AF8AF8BLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x75075075075075) {
    unint64_t v9 = 0xEA0EA0EA0EA0EALL;
  }
  else {
    unint64_t v9 = v5;
  }
  long long v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::AmbiguityAnnotatorBlock::SenseMatch>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  long long v13 = v10;
  long long v14 = (quasar::AmbiguityAnnotatorBlock::SenseMatch *)&v10[280 * v4];
  long long v16 = &v10[280 * v9];
  quasar::AmbiguityAnnotatorBlock::SenseMatch::SenseMatch(v14, a2);
  uint64_t v15 = (char *)v14 + 280;
  std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatch>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<quasar::AmbiguityAnnotatorBlock::SenseMatch>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1B23137A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::AmbiguityAnnotatorBlock::SenseMatch>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

quasar::AmbiguityAnnotatorBlock::SenseMatch *quasar::AmbiguityAnnotatorBlock::SenseMatch::SenseMatch(quasar::AmbiguityAnnotatorBlock::SenseMatch *this, const quasar::AmbiguityAnnotatorBlock::SenseMatch *a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this, *(long long **)a2, *((long long **)a2 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 3));
  uint64_t v4 = *((void *)a2 + 3);
  *((void *)this + 4) = 0;
  *((void *)this + std::__function::__value_func<BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::~__value_func[abi:ne180100](this + 3) = v4;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 32), *((long long **)a2 + 4), *((long long **)a2 + 5), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 3));
  uint64_t v5 = *((void *)a2 + 7);
  *((void *)this + 8) = 0;
  *((void *)this + 7) = v5;
  *((void *)this + 9) = 0;
  *((void *)this + 1std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 64), *((long long **)a2 + 8), *((long long **)a2 + 9), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 9) - *((void *)a2 + 8)) >> 3));
  if (*((char *)a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 88), *((const std::string::value_type **)a2 + 11), *((void *)a2 + 12));
  }
  else
  {
    long long v6 = *(_OWORD *)((char *)a2 + 88);
    *((void *)this + 1std::__function::__value_func<BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::~__value_func[abi:ne180100](this + 3) = *((void *)a2 + 13);
    *(_OWORD *)((char *)this + 88) = v6;
  }
  if (*((char *)a2 + 135) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 112), *((const std::string::value_type **)a2 + 14), *((void *)a2 + 15));
  }
  else
  {
    long long v7 = *((_OWORD *)a2 + 7);
    *((void *)this + 16) = *((void *)a2 + 16);
    *((_OWORD *)this + 7) = v7;
  }
  if (*((char *)a2 + 159) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 136), *((const std::string::value_type **)a2 + 17), *((void *)a2 + 18));
  }
  else
  {
    long long v8 = *(_OWORD *)((char *)a2 + 136);
    *((void *)this + 19) = *((void *)a2 + 19);
    *(_OWORD *)((char *)this + 136) = v8;
  }
  if (*((char *)a2 + 183) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 160), *((const std::string::value_type **)a2 + 20), *((void *)a2 + 21));
  }
  else
  {
    long long v9 = *((_OWORD *)a2 + 10);
    *((void *)this + 22) = *((void *)a2 + 22);
    *((_OWORD *)this + 1std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = v9;
  }
  if (*((char *)a2 + 207) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 184), *((const std::string::value_type **)a2 + 23), *((void *)a2 + 24));
  }
  else
  {
    long long v10 = *(_OWORD *)((char *)a2 + 184);
    *((void *)this + 25) = *((void *)a2 + 25);
    *(_OWORD *)((char *)this + 1--*(_DWORD *)(a9 + 84) = v10;
  }
  if (*((char *)a2 + 231) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 208), *((const std::string::value_type **)a2 + 26), *((void *)a2 + 27));
  }
  else
  {
    long long v11 = *((_OWORD *)a2 + 13);
    *((void *)this + 28) = *((void *)a2 + 28);
    *((_OWORD *)this + 1std::__function::__value_func<BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::~__value_func[abi:ne180100](this + 3) = v11;
  }
  if (*((char *)a2 + 255) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 232), *((const std::string::value_type **)a2 + 29), *((void *)a2 + 30));
  }
  else
  {
    long long v12 = *(_OWORD *)((char *)a2 + 232);
    *((void *)this + 31) = *((void *)a2 + 31);
    *(_OWORD *)((char *)this + 232) = v12;
  }
  long long v13 = (std::string *)((char *)this + 256);
  if (*((char *)a2 + 279) < 0)
  {
    std::string::__init_copy_ctor_external(v13, *((const std::string::value_type **)a2 + 32), *((void *)a2 + 33));
  }
  else
  {
    long long v14 = *((_OWORD *)a2 + 16);
    *((void *)this + 34) = *((void *)a2 + 34);
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
  }
  return this;
}

void sub_1B2313A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void **a10)
{
  if (*(char *)(v10 + 255) < 0) {
    operator delete(*v11);
  }
  if (*(char *)(v10 + 231) < 0) {
    operator delete(*v16);
  }
  if (*(char *)(v10 + 207) < 0) {
    operator delete(*v15);
  }
  if (*(char *)(v10 + 183) < 0) {
    operator delete(*v14);
  }
  if (*(char *)(v10 + 159) < 0) {
    operator delete(*v13);
  }
  if (*(char *)(v10 + 135) < 0) {
    operator delete(*v12);
  }
  if (*(char *)(v10 + 111) < 0) {
    operator delete(*a9);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = (void **)v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void sub_1B2313AF0()
{
}

void std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatch>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v6 = a2[1];
  if (v4 != *a1)
  {
    do
    {
      v6 -= 280;
      v4 -= 280;
      std::allocator<quasar::AmbiguityAnnotatorBlock::SenseMatch>::construct[abi:ne180100]<quasar::AmbiguityAnnotatorBlock::SenseMatch,quasar::AmbiguityAnnotatorBlock::SenseMatch>((uint64_t)(a1 + 2), v6, v4);
    }
    while (v4 != v5);
  }
  a2[1] = v6;
  uint64_t v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::AmbiguityAnnotatorBlock::SenseMatch>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xEA0EA0EA0EA0EBLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(280 * a2);
}

__n128 std::allocator<quasar::AmbiguityAnnotatorBlock::SenseMatch>::construct[abi:ne180100]<quasar::AmbiguityAnnotatorBlock::SenseMatch,quasar::AmbiguityAnnotatorBlock::SenseMatch>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(void *)(a2 + 16) = *(void *)(a3 + 16);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  uint64_t v3 = *(void *)(a3 + 24);
  *(void *)(a2 + 4std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + ++*(_DWORD *)(result + 24) = v3;
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a3 + 32);
  *(void *)(a2 + 48) = *(void *)(a3 + 48);
  *(void *)(a3 + 4std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = 0;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 32) = 0;
  uint64_t v4 = *(void *)(a3 + 56);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 8std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = 0;
  *(void *)(a2 + 56) = v4;
  *(void *)(a2 + 64) = 0;
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
  *(void *)(a2 + 8std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = *(void *)(a3 + 80);
  *(void *)(a3 + 64) = 0;
  *(void *)(a3 + 72) = 0;
  *(void *)(a3 + 8std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = 0;
  long long v5 = *(_OWORD *)(a3 + 88);
  *(void *)(a2 + 104) = *(void *)(a3 + 104);
  *(_OWORD *)(a2 + 88) = v5;
  *(void *)(a3 + 96) = 0;
  *(void *)(a3 + 104) = 0;
  *(void *)(a3 + 88) = 0;
  long long v6 = *(_OWORD *)(a3 + 112);
  *(void *)(a2 + 128) = *(void *)(a3 + 128);
  *(_OWORD *)(a2 + 112) = v6;
  *(void *)(a3 + 12std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = 0;
  *(void *)(a3 + 128) = 0;
  *(void *)(a3 + 112) = 0;
  long long v7 = *(_OWORD *)(a3 + 136);
  *(void *)(a2 + 1--*(_DWORD *)(a9 + 52) = *(void *)(a3 + 152);
  *(_OWORD *)(a2 + 136) = v7;
  *(void *)(a3 + 136) = 0;
  *(void *)(a3 + 144) = 0;
  *(void *)(a3 + 1--*(_DWORD *)(a9 + 52) = 0;
  long long v8 = *(_OWORD *)(a3 + 160);
  *(void *)(a2 + 176) = *(void *)(a3 + 176);
  *(_OWORD *)(a2 + 16std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = v8;
  *(void *)(a3 + 16std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = 0;
  *(void *)(a3 + 168) = 0;
  *(void *)(a3 + 176) = 0;
  long long v9 = *(_OWORD *)(a3 + 184);
  *(void *)(a2 + 20std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = *(void *)(a3 + 200);
  *(_OWORD *)(a2 + 1--*(_DWORD *)(a9 + 84) = v9;
  *(void *)(a3 + 1--*(_DWORD *)(a9 + 84) = 0;
  *(void *)(a3 + 192) = 0;
  *(void *)(a3 + 20std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = 0;
  long long v10 = *(_OWORD *)(a3 + 208);
  *(void *)(a2 + 2++*(_DWORD *)(result + 24) = *(void *)(a3 + 224);
  *(_OWORD *)(a2 + 208) = v10;
  *(void *)(a3 + 208) = 0;
  *(void *)(a3 + 216) = 0;
  *(void *)(a3 + 2++*(_DWORD *)(result + 24) = 0;
  long long v11 = *(_OWORD *)(a3 + 232);
  *(void *)(a2 + 248) = *(void *)(a3 + 248);
  *(_OWORD *)(a2 + 232) = v11;
  *(void *)(a3 + 232) = 0;
  *(void *)(a3 + 24std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = 0;
  *(void *)(a3 + 248) = 0;
  __n128 result = *(__n128 *)(a3 + 256);
  *(void *)(a2 + 272) = *(void *)(a3 + 272);
  *(__n128 *)(a2 + 256) = result;
  *(void *)(a3 + 256) = 0;
  *(void *)(a3 + 264) = 0;
  *(void *)(a3 + 272) = 0;
  return result;
}

void quasar::AmbiguityAnnotatorBlock::SenseMatch::~SenseMatch(void **this)
{
  if (*((char *)this + 279) < 0) {
    operator delete(this[32]);
  }
  if (*((char *)this + 255) < 0) {
    operator delete(this[29]);
  }
  if (*((char *)this + 231) < 0) {
    operator delete(this[26]);
  }
  if (*((char *)this + 207) < 0) {
    operator delete(this[23]);
  }
  if (*((char *)this + 183) < 0) {
    operator delete(this[20]);
  }
  if (*((char *)this + 159) < 0) {
    operator delete(this[17]);
  }
  if (*((char *)this + 135) < 0) {
    operator delete(this[14]);
  }
  if (*((char *)this + 111) < 0) {
    operator delete(this[11]);
  }
  uint64_t v2 = this + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = this + 4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = this;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
}

uint64_t std::__split_buffer<quasar::AmbiguityAnnotatorBlock::SenseMatch>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 280;
    quasar::AmbiguityAnnotatorBlock::SenseMatch::~SenseMatch((void **)(i - 280));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

quasar::AmbiguityAnnotatorBlock::Senses **quasar::AmbiguityAnnotatorBlock::Senses::Senses(quasar::AmbiguityAnnotatorBlock::Senses **a1, void *a2, void (****a3)(uint64_t *__return_ptr), int *a4, int a5, int a6)
{
  void (***v13)(uint64_t *__return_ptr);
  long long *v14;
  long long v15;
  long long v16;
  void *v18;
  void *v19;
  char *v20;
  char *v21;
  void *v22;
  void *v23;
  void **v24;
  std::string::size_type v25;
  void *v26;
  std::string *v27;
  std::string::size_type size;
  void *v29;
  std::string::size_type v31;
  std::string::size_type v32;
  void *v36[2];
  uint64_t v37;
  void *v38[2];
  std::string v39;
  void v40[3];
  char *v41;
  char *v42;
  void v43[3];
  int v44;
  int v45;
  std::string v46;
  void *v47;
  char v48;
  uint64_t v49;
  void *__p[2];
  long long v51;
  long long v52;
  long long v53;
  long long v54;
  long long v55;
  long long v56;
  long long v57;
  long long v58;
  long long v59;
  long long v60;
  long long v61;
  long long v62;
  long long v63;
  long long v64;
  long long v65;
  long long v66;
  uint64_t v67;

  BOOL v67 = *MEMORY[0x1E4F143B8];
  if (a5)
  {
    if (a6) {
      long long v7 = &unk_1F0A5B5C8;
    }
    else {
      long long v7 = &unk_1F0A5B620;
    }
  }
  else if (a6)
  {
    long long v7 = &unk_1F0A5B678;
  }
  else
  {
    long long v7 = &unk_1F0A5B6D0;
  }
  __p[0] = v7;
  *((void *)&v51 + 1) = __p;
  std::map<quasar::AmbiguityAnnotatorBlock::MatchSpan,quasar::AmbiguityAnnotatorBlock::SenseMatches,std::function<BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>,std::allocator<std::pair<quasar::AmbiguityAnnotatorBlock::MatchSpan const,quasar::AmbiguityAnnotatorBlock::SenseMatches>>>::map[abi:ne180100](a1, (uint64_t)__p);
  std::__function::__value_func<BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::~__value_func[abi:ne180100](__p);
  if (a2[1] != *a2)
  {
    unint64_t v8 = 0;
    long long v31 = *MEMORY[0x1E4FBA418];
    uint64_t v32 = *(void *)(MEMORY[0x1E4FBA418] + 24);
    do
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v46);
      int v9 = *a4;
      if (*a4 >= 1)
      {
        uint64_t v10 = 1;
        do
        {
          char v44 = v8;
          uint64_t v45 = v10;
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3) >= (v10 + v8))
          {
            std::operator+<char>();
            if ((SBYTE7(v51) & 0x80u) == 0) {
              long long v11 = __p;
            }
            else {
              long long v11 = (void **)__p[0];
            }
            if ((SBYTE7(v51) & 0x80u) == 0) {
              uint64_t v12 = BYTE7(v51);
            }
            else {
              uint64_t v12 = (uint64_t)__p[1];
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v46, (uint64_t)v11, v12);
            if (SBYTE7(v51) < 0) {
              operator delete(__p[0]);
            }
            long long v13 = *a3;
            std::stringbuf::str();
            quasar::GenericPhraseBook::lookup(v13, 0, v43);
            if (SBYTE7(v51) < 0) {
              operator delete(__p[0]);
            }
            long long v14 = (long long *)v43[0];
            if (v43[0] != v43[1])
            {
              quasar::PTree::PTree((quasar::PTree *)&v41);
              memset(v40, 0, sizeof(v40));
              if (*((char *)v14 + 23) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)v14, *((void *)v14 + 1));
              }
              else
              {
                uint64_t v15 = *v14;
                *(void *)&unint64_t v51 = *((void *)v14 + 2);
                *(_OWORD *)std::vector<int> __p = v15;
              }
              kaldi::SplitStringToVector((const std::string *)__p, " ", 1, (uint64_t)v40);
              if (SBYTE7(v51) < 0) {
                operator delete(__p[0]);
              }
              if (*((char *)v14 + 47) < 0)
              {
                std::string::__init_copy_ctor_external(&v39, *((const std::string::value_type **)v14 + 3), *((void *)v14 + 4));
              }
              else
              {
                long long v16 = *(long long *)((char *)v14 + 24);
                v39.__r_.__value_.__r.__words[2] = *((void *)v14 + 5);
                *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v16;
              }
              quasar::json2Ptree((uint64_t)&v39);
              std::string::basic_string[abi:ne180100]<0>(v38, "syn");
              quasar::PTree::getStringOptional((uint64_t)&v41, (uint64_t)v38);
            }
            __p[0] = v43;
            std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
            int v9 = *a4;
          }
        }
        while (v10++ < v9);
      }
      v46.__r_.__value_.__r.__words[0] = v31;
      *(std::string::size_type *)((char *)v46.__r_.__value_.__r.__words + *(void *)(v31 - 24)) = v32;
      v46.__r_.__value_.__l.__size_ = MEMORY[0x1E4FBA470] + 16;
      if (v48 < 0) {
        operator delete(v47);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1B3EA8520](&v49);
      ++v8;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3) > v8);
  }
  if (quasar::gLogLevel > 4)
  {
    quasar::AmbiguityAnnotatorBlock::Senses::keys(a1, (char **)__p);
    BOOL v18 = __p[1];
    long long v19 = __p[0];
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v18 == v19)
    {
      if (quasar::gLogLevel >= 5)
      {
        long long v65 = 0u;
        uint64_t v66 = 0u;
        uint64_t v63 = 0u;
        unsigned __int8 v64 = 0u;
        int v61 = 0u;
        uint64_t v62 = 0u;
        int v59 = 0u;
        long long v60 = 0u;
        char v57 = 0u;
        uint64_t v58 = 0u;
        uint64_t v55 = 0u;
        float v56 = 0u;
        uint64_t v53 = 0u;
        uint64_t v54 = 0u;
        unint64_t v51 = 0u;
        int v52 = 0u;
        *(_OWORD *)std::vector<int> __p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"no source spans are ambiguous", 29);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
      }
    }
    else
    {
      memset(&v46, 0, sizeof(v46));
      quasar::AmbiguityAnnotatorBlock::Senses::keys(a1, &v41);
      long long v20 = v41;
      long long v21 = v42;
      if (v41 != v42)
      {
        long long v22 = (void *)*MEMORY[0x1E4FBA418];
        long long v23 = *(void **)(MEMORY[0x1E4FBA418] + 24);
        do
        {
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
          quasar::operator<<(__p);
          std::stringbuf::str();
          if (v37 >= 0) {
            long long v24 = v36;
          }
          else {
            long long v24 = (void **)v36[0];
          }
          if (v37 >= 0) {
            std::string v25 = HIBYTE(v37);
          }
          else {
            std::string v25 = (std::string::size_type)v36[1];
          }
          std::string::append(&v46, (const std::string::value_type *)v24, v25);
          if (SHIBYTE(v37) < 0) {
            operator delete(v36[0]);
          }
          __p[0] = v22;
          *(void **)((char *)__p + *((void *)v22 - 3)) = v23;
          __p[1] = (void *)(MEMORY[0x1E4FBA470] + 16);
          if (SHIBYTE(v55) < 0) {
            operator delete(*((void **)&v54 + 1));
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          MEMORY[0x1B3EA8520](&v57);
          v20 += 8;
        }
        while (v20 != v21);
        long long v20 = v41;
      }
      if (v20)
      {
        long long v42 = v20;
        operator delete(v20);
      }
      if (quasar::gLogLevel > 4)
      {
        long long v65 = 0u;
        uint64_t v66 = 0u;
        uint64_t v63 = 0u;
        unsigned __int8 v64 = 0u;
        int v61 = 0u;
        uint64_t v62 = 0u;
        int v59 = 0u;
        long long v60 = 0u;
        char v57 = 0u;
        uint64_t v58 = 0u;
        uint64_t v55 = 0u;
        float v56 = 0u;
        uint64_t v53 = 0u;
        uint64_t v54 = 0u;
        unint64_t v51 = 0u;
        int v52 = 0u;
        *(_OWORD *)std::vector<int> __p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        uint64_t v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"these source spans: ", 20);
        if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v27 = &v46;
        }
        else {
          long long v27 = (std::string *)v46.__r_.__value_.__r.__words[0];
        }
        if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v46.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v46.__r_.__value_.__l.__size_;
        }
        long long v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v27, size);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)" are ambiguous", 14);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
      }
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v46.__r_.__value_.__l.__data_);
      }
    }
  }
  return a1;
}

void sub_1B231476C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
}

void *std::map<quasar::AmbiguityAnnotatorBlock::MatchSpan,quasar::AmbiguityAnnotatorBlock::SenseMatches,std::function<BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>,std::allocator<std::pair<quasar::AmbiguityAnnotatorBlock::MatchSpan const,quasar::AmbiguityAnnotatorBlock::SenseMatches>>>::map[abi:ne180100](void *a1, uint64_t a2)
{
  void v5[4] = *MEMORY[0x1E4F143B8];
  std::__function::__value_func<BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::__value_func[abi:ne180100]((uint64_t)v5, (uint64_t)v4);
  a1[1] = 0;
  a1[2] = 0;
  std::__function::__value_func<BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::__value_func[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)v5);
  *a1 = a1 + 1;
  std::__function::__value_func<BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::~__value_func[abi:ne180100](v5);
  std::__function::__value_func<BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::~__value_func[abi:ne180100](v4);
  return a1;
}

void sub_1B2314B14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  std::__function::__value_func<BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  std::__function::__value_func<BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + ++*(_DWORD *)(result + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + ++*(_DWORD *)(result + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + ++*(_DWORD *)(result + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void quasar::AmbiguityAnnotatorBlock::SenseMatch::SenseMatch(quasar::AmbiguityAnnotatorBlock::SenseMatch *this, long long **a2, const quasar::PTree *a3)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  uint64_t v6 = a2[3];
  *((void *)this + 4) = 0;
  *((void *)this + std::__function::__value_func<BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::~__value_func[abi:ne180100](this + 3) = v6;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((_DWORD *)this + 14) = -1;
  *(void *)((char *)this + 6std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = 0;
  *(void *)((char *)this + 76) = 0;
  *(void *)((char *)this + 68) = 0;
  *((_DWORD *)this + 21) = 0;
  std::string::basic_string[abi:ne180100]<0>(v7, "syn");
  quasar::PTree::getStringOptional((uint64_t)a3, (uint64_t)v7);
}

void sub_1B23152B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a21 && a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a34 && a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (v40[111] < 0) {
    operator delete(*v41);
  }
  a28 = v40 + 64;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a28 = v40;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  _Unwind_Resume(a1);
}

void sub_1B23155CC()
{
}

void sub_1B23155E8()
{
}

uint64_t *std::__tree<std::__value_type<quasar::AmbiguityAnnotatorBlock::MatchSpan,quasar::AmbiguityAnnotatorBlock::SenseMatches>,std::__map_value_compare<quasar::AmbiguityAnnotatorBlock::MatchSpan,std::__value_type<quasar::AmbiguityAnnotatorBlock::MatchSpan,quasar::AmbiguityAnnotatorBlock::SenseMatches>,std::function<BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>,false>,std::allocator<std::__value_type<quasar::AmbiguityAnnotatorBlock::MatchSpan,quasar::AmbiguityAnnotatorBlock::SenseMatches>>>::__emplace_unique_key_args<quasar::AmbiguityAnnotatorBlock::MatchSpan,std::piecewise_construct_t const&,std::tuple<quasar::AmbiguityAnnotatorBlock::MatchSpan const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  matched = (uint64_t **)std::__tree<std::__value_type<quasar::AmbiguityAnnotatorBlock::MatchSpan,quasar::AmbiguityAnnotatorBlock::SenseMatches>,std::__map_value_compare<quasar::AmbiguityAnnotatorBlock::MatchSpan,std::__value_type<quasar::AmbiguityAnnotatorBlock::MatchSpan,quasar::AmbiguityAnnotatorBlock::SenseMatches>,std::function<BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>,false>,std::allocator<std::__value_type<quasar::AmbiguityAnnotatorBlock::MatchSpan,quasar::AmbiguityAnnotatorBlock::SenseMatches>>>::__find_equal<quasar::AmbiguityAnnotatorBlock::MatchSpan>((uint64_t)a1, &v11, a2);
  uint64_t v7 = *matched;
  if (!*matched)
  {
    unint64_t v8 = matched;
    uint64_t v7 = (uint64_t *)operator new(0x40uLL);
    uint64_t v9 = **a4;
    v7[6] = 0;
    v7[7] = 0;
    v7[4] = v9;
    void v7[5] = 0;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v11, v8, v7);
  }
  return v7;
}

void std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatch>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        quasar::AmbiguityAnnotatorBlock::SenseMatch::~SenseMatch(v4 - 35);
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__tree<std::__value_type<quasar::AmbiguityAnnotatorBlock::MatchSpan,quasar::AmbiguityAnnotatorBlock::SenseMatches>,std::__map_value_compare<quasar::AmbiguityAnnotatorBlock::MatchSpan,std::__value_type<quasar::AmbiguityAnnotatorBlock::MatchSpan,quasar::AmbiguityAnnotatorBlock::SenseMatches>,std::function<BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>,false>,std::allocator<std::__value_type<quasar::AmbiguityAnnotatorBlock::MatchSpan,quasar::AmbiguityAnnotatorBlock::SenseMatches>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<quasar::AmbiguityAnnotatorBlock::MatchSpan,quasar::AmbiguityAnnotatorBlock::SenseMatches>,std::__map_value_compare<quasar::AmbiguityAnnotatorBlock::MatchSpan,std::__value_type<quasar::AmbiguityAnnotatorBlock::MatchSpan,quasar::AmbiguityAnnotatorBlock::SenseMatches>,std::function<BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>,false>,std::allocator<std::__value_type<quasar::AmbiguityAnnotatorBlock::MatchSpan,quasar::AmbiguityAnnotatorBlock::SenseMatches>>>::destroy(a1, *(void *)a2);
    std::__tree<std::__value_type<quasar::AmbiguityAnnotatorBlock::MatchSpan,quasar::AmbiguityAnnotatorBlock::SenseMatches>,std::__map_value_compare<quasar::AmbiguityAnnotatorBlock::MatchSpan,std::__value_type<quasar::AmbiguityAnnotatorBlock::MatchSpan,quasar::AmbiguityAnnotatorBlock::SenseMatches>,std::function<BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>,false>,std::allocator<std::__value_type<quasar::AmbiguityAnnotatorBlock::MatchSpan,quasar::AmbiguityAnnotatorBlock::SenseMatches>>>::destroy(a1, *((void *)a2 + 1));
    uint64_t v4 = (void **)(a2 + 40);
    std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatch>::__destroy_vector::operator()[abi:ne180100](&v4);
    operator delete(a2);
  }
}

void quasar::AmbiguityAnnotatorBlock::~AmbiguityAnnotatorBlock(quasar::AmbiguityAnnotatorBlock *this, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v4 - 24)) = a2[5];
  *((void *)this + 321) = a2[6];
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 337);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v7 = (void **)((char *)this + 2664);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v7);
  if (*((char *)this + 2655) < 0) {
    operator delete(*((void **)this + 329));
  }
  uint64_t v7 = (void **)((char *)this + 2608);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v7);
  if (*((char *)this + 2599) < 0) {
    operator delete(*((void **)this + 322));
  }
  uint64_t v6 = a2[1];
  *(void *)this = v6;
  *(void *)((char *)this + *(void *)(v6 - 24)) = a2[2];
  quasar::AmbiguityAnnotatorOptions::~AmbiguityAnnotatorOptions((quasar::AmbiguityAnnotatorBlock *)((char *)this + 8));
}

void std::__function::__func<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_0,std::allocator<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_0>,BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::~__func()
{
}

void *std::__function::__func<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_0,std::allocator<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_0>,BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1F0A5B5C8;
  return result;
}

void std::__function::__func<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_0,std::allocator<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_0>,BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F0A5B5C8;
}

BOOL std::__function::__func<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_0,std::allocator<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_0>,BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::operator()(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  if (*a2 < *a3) {
    return 1;
  }
  if (*a2 <= *a3) {
    return a2[1] > a3[1];
  }
  return 0;
}

uint64_t std::__function::__func<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_0,std::allocator<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_0>,BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_0,std::allocator<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_0>,BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::target_type()
{
}

void std::__function::__func<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_1,std::allocator<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_1>,BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::~__func()
{
}

void *std::__function::__func<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_1,std::allocator<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_1>,BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1F0A5B620;
  return result;
}

void std::__function::__func<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_1,std::allocator<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_1>,BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F0A5B620;
}

BOOL std::__function::__func<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_1,std::allocator<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_1>,BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::operator()(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  if (*a2 < *a3) {
    return 1;
  }
  if (*a2 <= *a3) {
    return a2[1] < a3[1];
  }
  return 0;
}

uint64_t std::__function::__func<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_1,std::allocator<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_1>,BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_1,std::allocator<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_1>,BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::target_type()
{
}

void std::__function::__func<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_2,std::allocator<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_2>,BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::~__func()
{
}

void *std::__function::__func<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_2,std::allocator<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_2>,BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1F0A5B678;
  return result;
}

void std::__function::__func<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_2,std::allocator<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_2>,BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F0A5B678;
}

BOOL std::__function::__func<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_2,std::allocator<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_2>,BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::operator()(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  int v3 = a2[1];
  int v4 = a3[1];
  if (v3 > v4) {
    return 1;
  }
  if (v3 < v4) {
    return 0;
  }
  return *a2 < *a3;
}

uint64_t std::__function::__func<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_2,std::allocator<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_2>,BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_2,std::allocator<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_2>,BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::target_type()
{
}

void std::__function::__func<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_3,std::allocator<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_3>,BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::~__func()
{
}

void *std::__function::__func<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_3,std::allocator<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_3>,BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1F0A5B6D0;
  return result;
}

void std::__function::__func<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_3,std::allocator<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_3>,BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F0A5B6D0;
}

BOOL std::__function::__func<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_3,std::allocator<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_3>,BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::operator()(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  int v3 = a2[1];
  int v4 = a3[1];
  if (v3 < v4) {
    return 1;
  }
  if (v3 <= v4) {
    return *a2 < *a3;
  }
  return 0;
}

uint64_t std::__function::__func<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_3,std::allocator<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_3>,BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_3,std::allocator<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_3>,BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::target_type()
{
}

void *std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatches>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    int v4 = (char *)a1[1];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1B2315DA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatches>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    int v4 = (void **)v1[1];
    size_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        uint64_t v6 = v4;
        std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatch>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      size_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,quasar::AmbiguityAnnotatorBlock::SenseMatch *,quasar::AmbiguityAnnotatorBlock::SenseMatch *,quasar::AmbiguityAnnotatorBlock::SenseMatch *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      quasar::AmbiguityAnnotatorBlock::SenseMatch::operator=(a3, v4);
      v4 += 280;
      a3 += 280;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t quasar::AmbiguityAnnotatorBlock::SenseMatch::operator=(uint64_t a1, uint64_t a2)
{
  std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = *(void *)(a2 + 24);
  std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(a1 + 32));
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 4std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(a1 + 64));
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 8std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = *(void *)(a2 + 80);
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 8std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = 0;
  uint64_t v4 = (void **)(a1 + 88);
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*v4);
  }
  long long v5 = *(_OWORD *)(a2 + 88);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(_OWORD *)uint64_t v4 = v5;
  *(unsigned char *)(a2 + 111) = 0;
  *(unsigned char *)(a2 + 88) = 0;
  uint64_t v6 = (void **)(a1 + 112);
  if (*(char *)(a1 + 135) < 0) {
    operator delete(*v6);
  }
  long long v7 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)uint64_t v6 = v7;
  *(unsigned char *)(a2 + 135) = 0;
  *(unsigned char *)(a2 + 112) = 0;
  unint64_t v8 = (void **)(a1 + 136);
  if (*(char *)(a1 + 159) < 0) {
    operator delete(*v8);
  }
  long long v9 = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 1--*(_DWORD *)(a9 + 52) = *(void *)(a2 + 152);
  *(_OWORD *)unint64_t v8 = v9;
  *(unsigned char *)(a2 + 159) = 0;
  *(unsigned char *)(a2 + 136) = 0;
  uint64_t v10 = (void **)(a1 + 160);
  if (*(char *)(a1 + 183) < 0) {
    operator delete(*v10);
  }
  long long v11 = *(_OWORD *)(a2 + 160);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(_OWORD *)uint64_t v10 = v11;
  *(unsigned char *)(a2 + 18std::__function::__value_func<BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::~__value_func[abi:ne180100](this + 3) = 0;
  *(unsigned char *)(a2 + 16std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = 0;
  uint64_t v12 = (void **)(a1 + 184);
  if (*(char *)(a1 + 207) < 0) {
    operator delete(*v12);
  }
  long long v13 = *(_OWORD *)(a2 + 184);
  *(void *)(a1 + 20std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = *(void *)(a2 + 200);
  *(_OWORD *)uint64_t v12 = v13;
  *(unsigned char *)(a2 + 207) = 0;
  *(unsigned char *)(a2 + 1--*(_DWORD *)(a9 + 84) = 0;
  long long v14 = (void **)(a1 + 208);
  if (*(char *)(a1 + 231) < 0) {
    operator delete(*v14);
  }
  long long v15 = *(_OWORD *)(a2 + 208);
  *(void *)(a1 + 2++*(_DWORD *)(result + 24) = *(void *)(a2 + 224);
  *(_OWORD *)long long v14 = v15;
  *(unsigned char *)(a2 + 231) = 0;
  *(unsigned char *)(a2 + 208) = 0;
  long long v16 = (void **)(a1 + 232);
  if (*(char *)(a1 + 255) < 0) {
    operator delete(*v16);
  }
  long long v17 = *(_OWORD *)(a2 + 232);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(_OWORD *)long long v16 = v17;
  *(unsigned char *)(a2 + 255) = 0;
  *(unsigned char *)(a2 + 232) = 0;
  BOOL v18 = (void **)(a1 + 256);
  if (*(char *)(a1 + 279) < 0) {
    operator delete(*v18);
  }
  long long v19 = *(_OWORD *)(a2 + 256);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(_OWORD *)BOOL v18 = v19;
  *(unsigned char *)(a2 + 279) = 0;
  *(unsigned char *)(a2 + 256) = 0;
  return a1;
}

void *std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatches>::__construct_one_at_end[abi:ne180100]<quasar::AmbiguityAnnotatorBlock::SenseMatches const&>(uint64_t a1, uint64_t *a2)
{
  int v3 = *(void **)(a1 + 8);
  *int v3 = 0;
  v3[1] = 0;
  _OWORD v3[2] = 0;
  __n128 result = std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatch>::__init_with_size[abi:ne180100]<quasar::AmbiguityAnnotatorBlock::SenseMatch*,quasar::AmbiguityAnnotatorBlock::SenseMatch*>(v3, *a2, a2[1], 0xAF8AF8AF8AF8AF8BLL * ((a2[1] - *a2) >> 3));
  *(void *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_1B2316100(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatches>::__push_back_slow_path<quasar::AmbiguityAnnotatorBlock::SenseMatches const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  long long v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  long long v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  long long v15 = v11;
  long long v16 = &v10[24 * v9];
  *(void *)long long v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatch>::__init_with_size[abi:ne180100]<quasar::AmbiguityAnnotatorBlock::SenseMatch*,quasar::AmbiguityAnnotatorBlock::SenseMatch*>(v11, *a2, a2[1], 0xAF8AF8AF8AF8AF8BLL * ((a2[1] - *a2) >> 3));
  v15 += 24;
  std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatches>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<quasar::AmbiguityAnnotatorBlock::SenseMatches>::~__split_buffer(v14);
  return v12;
}

void sub_1B2316220(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::AmbiguityAnnotatorBlock::SenseMatches>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void *std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatch>::__init_with_size[abi:ne180100]<quasar::AmbiguityAnnotatorBlock::SenseMatch*,quasar::AmbiguityAnnotatorBlock::SenseMatch*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatch>::__vallocate[abi:ne180100](result, a4);
    __n128 result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::AmbiguityAnnotatorBlock::SenseMatch>,quasar::AmbiguityAnnotatorBlock::SenseMatch*,quasar::AmbiguityAnnotatorBlock::SenseMatch*,quasar::AmbiguityAnnotatorBlock::SenseMatch*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B231629C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatch>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatch>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xEA0EA0EA0EA0EBLL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::AmbiguityAnnotatorBlock::SenseMatch>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[280 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::AmbiguityAnnotatorBlock::SenseMatch>,quasar::AmbiguityAnnotatorBlock::SenseMatch*,quasar::AmbiguityAnnotatorBlock::SenseMatch*,quasar::AmbiguityAnnotatorBlock::SenseMatch*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      quasar::AmbiguityAnnotatorBlock::SenseMatch::SenseMatch((quasar::AmbiguityAnnotatorBlock::SenseMatch *)(a4 + v7), (const quasar::AmbiguityAnnotatorBlock::SenseMatch *)(a2 + v7));
      v7 += 280;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1B2316374(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 280;
    do
    {
      quasar::AmbiguityAnnotatorBlock::SenseMatch::~SenseMatch((void **)(v4 + v2));
      v2 -= 280;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatches>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::AmbiguityAnnotatorBlock::SenseMatches>,std::reverse_iterator<quasar::AmbiguityAnnotatorBlock::SenseMatches*>,std::reverse_iterator<quasar::AmbiguityAnnotatorBlock::SenseMatches*>,std::reverse_iterator<quasar::AmbiguityAnnotatorBlock::SenseMatches*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::AmbiguityAnnotatorBlock::SenseMatches>,std::reverse_iterator<quasar::AmbiguityAnnotatorBlock::SenseMatches*>,std::reverse_iterator<quasar::AmbiguityAnnotatorBlock::SenseMatches*>,std::reverse_iterator<quasar::AmbiguityAnnotatorBlock::SenseMatches*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - ++*(_DWORD *)(result + 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - ++*(_DWORD *)(result + 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::AmbiguityAnnotatorBlock::SenseMatches>,std::reverse_iterator<quasar::AmbiguityAnnotatorBlock::SenseMatches*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::AmbiguityAnnotatorBlock::SenseMatches>,std::reverse_iterator<quasar::AmbiguityAnnotatorBlock::SenseMatches*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::AmbiguityAnnotatorBlock::SenseMatches>,std::reverse_iterator<quasar::AmbiguityAnnotatorBlock::SenseMatches*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::AmbiguityAnnotatorBlock::SenseMatches>,std::reverse_iterator<quasar::AmbiguityAnnotatorBlock::SenseMatches*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = v1;
    std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatch>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<quasar::AmbiguityAnnotatorBlock::SenseMatches>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<quasar::AmbiguityAnnotatorBlock::SenseMatches>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatch>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

void std::__tree<std::__value_type<int,std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatches>>,std::__map_value_compare<int,std::__value_type<int,std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatches>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatches>>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<int,std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatches>>,std::__map_value_compare<int,std::__value_type<int,std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatches>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatches>>>>::destroy(a1, *(void *)a2);
    std::__tree<std::__value_type<int,std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatches>>,std::__map_value_compare<int,std::__value_type<int,std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatches>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatches>>>>::destroy(a1, *((void *)a2 + 1));
    uint64_t v4 = (void **)(a2 + 40);
    std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatches>::__destroy_vector::operator()[abi:ne180100](&v4);
    operator delete(a2);
  }
}

__n128 kaldi::quasar::ShortlistDataInOneFile::ShortlistDataInOneFile(void *a1, uint64_t *a2, __n128 *a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = *a2;
  *a2 = 0;
  *a1 = &unk_1F0A51200;
  a1[1] = v4;
  do
  {
    uint64_t v5 = &a1[v3];
    uint64_t v6 = &a2[v3];
    uint64_t v7 = a2[v3 + 2];
    void v5[2] = a2[v3 + 1];
    v5[3] = v7;
    *((unsigned char *)v5 + 32) = a2[v3 + 3];
    v6[1] = 0;
    int v6[2] = 0;
    *((unsigned char *)v6 + ++*(_DWORD *)(result + 24) = 0;
    v3 += 3;
  }
  while (v3 != 9);
  char v8 = 0;
  uint64_t v9 = 0;
  do
  {
    uint64_t v10 = 3 * v9;
    uint64_t v11 = (uint64_t)&a1[v10 + 11];
    uint64_t v12 = (uint64_t)&a2[v10 + 10];
    uint64_t v13 = *(void *)(v12 + 8);
    *(void *)uint64_t v11 = *(void *)v12;
    *(void *)(v11 + 8) = v13;
    *(unsigned char *)(v11 + 16) = *(unsigned char *)(v12 + 16);
    LOBYTE(v11) = v8;
    *(void *)uint64_t v12 = 0;
    *(void *)(v12 + 8) = 0;
    *(unsigned char *)(v12 + 16) = 0;
    char v8 = 1;
    uint64_t v9 = 1;
  }
  while ((v11 & 1) == 0);
  a1[17] = 0;
  a1[18] = 0;
  a1[19] = 0;
  __n128 result = *a3;
  *(__n128 *)(a1 + 17) = *a3;
  a1[19] = a3[1].n128_u64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  return result;
}

uint64_t kaldi::quasar::ShortlistDataInOneFile::GetConstrainedWordIds@<X0>(uint64_t result@<X0>, unsigned __int8 *a2@<X1>, int **a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7 = *(void *)(result + 136);
  uint64_t v6 = *(void *)(result + 144);
  if (v6 == v7)
  {
LABEL_22:
    *(_OWORD *)a6 = 0u;
    *(_OWORD *)(a6 + 16) = 0u;
    *(_DWORD *)(a6 + 32) = 1065353216;
    return result;
  }
  uint64_t v9 = result;
  uint64_t v10 = 0;
  uint64_t v11 = a2[23];
  long long v24 = *(const void **)a2;
  size_t v25 = *((void *)a2 + 1);
  if ((v11 & 0x80u) == 0) {
    uint64_t v12 = a2[23];
  }
  else {
    uint64_t v12 = *((void *)a2 + 1);
  }
  if ((unint64_t)((v6 - v7) / 24) <= 1) {
    uint64_t v13 = 1;
  }
  else {
    uint64_t v13 = (v6 - v7) / 24;
  }
  while (1)
  {
    uint64_t v14 = v7 + 24 * v10;
    uint64_t v15 = *(unsigned __int8 *)(v14 + 23);
    int v16 = (char)v15;
    if ((v15 & 0x80u) != 0) {
      uint64_t v15 = *(void *)(v14 + 8);
    }
    if (v12 != v15) {
      goto LABEL_21;
    }
    long long v17 = v16 >= 0 ? (unsigned __int8 *)(v7 + 24 * v10) : *(unsigned __int8 **)v14;
    if ((v11 & 0x80) != 0) {
      break;
    }
    if (!v11) {
      goto LABEL_23;
    }
    BOOL v18 = a2;
    uint64_t v19 = v11;
    while (*v18 == *v17)
    {
      ++v18;
      ++v17;
      if (!--v19) {
        goto LABEL_23;
      }
    }
LABEL_21:
    if (++v10 == v13) {
      goto LABEL_22;
    }
  }
  long long v23 = a3;
  uint64_t v20 = a5;
  uint64_t v21 = a4;
  uint64_t v22 = a6;
  __n128 result = memcmp(v24, v17, v25);
  a6 = v22;
  a3 = v23;
  a4 = v21;
  a5 = v20;
  if (result) {
    goto LABEL_21;
  }
LABEL_23:
  return kaldi::quasar::ShortlistDataOnDisk::GetConstrainedWordIds(v9 + 8, v10, a3, a4, a5, a6);
}

void kaldi::quasar::ShortlistDataInOneFile::Write(uint64_t a1, void *a2, uint64_t a3)
{
  kaldi::WriteToken(a2, a3, "<ShortlistTable>");
  kaldi::quasar::ShortlistDataOnDisk::Write(a1 + 8, a2, a3);
  kaldi::WriteToken(a2, a3, "<ShortlistLangPairs>");
  kaldi::JoinVectorToString<std::string>((uint64_t *)(a1 + 136), ",");
  kaldi::WriteToken(a2, a3, (char *)&__p);
  if (v7 < 0) {
    operator delete(__p);
  }
}

void sub_1B2316900(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL kaldi::quasar::ShortlistDataInOneFile::IsLanguagePairSupported(uint64_t a1, unsigned __int8 **a2)
{
  return std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(*(void *)(a1 + 136), *(void *)(a1 + 144), a2) != *(void *)(a1 + 144);
}

void kaldi::quasar::ShortlistDataInOneFile::Combine(uint64_t a1, void *lpsrc)
{
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = v3[17];
    uint64_t v6 = v3[18];
    if (v5 == v6)
    {
      char v7 = *(std::string **)(a1 + 144);
      uint64_t v9 = (std::string *)v3[17];
    }
    else
    {
      char v7 = *(std::string **)(a1 + 144);
      do
      {
        uint64_t v8 = std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(*(void *)(a1 + 136), (uint64_t)v7, v5);
        if (v8 != *(void *)(a1 + 144))
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
          std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "Find duplicated keys when combine 2 shortlists");
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
        }
        char v7 = (std::string *)v8;
        v5 += 3;
      }
      while (v5 != v6);
      uint64_t v9 = (std::string *)v4[17];
      uint64_t v5 = v4[18];
    }
    std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>((std::vector<std::string> *)(a1 + 136), v7, v9, (long long *)v5, 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)v9) >> 3));
    kaldi::MappableVector<int>::append();
  }
  __cxa_bad_cast();
}

void sub_1B2316AF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t kaldi::quasar::ShortlistDataInOneFile::operator==(uint64_t a1, void *lpsrc)
{
  if (!v3) {
    __cxa_bad_cast();
  }
  uint64_t v4 = v3;
  uint64_t v5 = *(unsigned __int8 **)(a1 + 136);
  uint64_t v6 = *(unsigned __int8 **)(a1 + 144);
  char v7 = v3[17];
  if (v6 - v5 == v3[18] - v7)
  {
    while (v5 != v6)
    {
      uint64_t result = std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&v13, v5, v7);
      if (!result) {
        return result;
      }
      v5 += 24;
      v7 += 24;
    }
    uint64_t v9 = 0;
    while (1)
    {
      uint64_t v10 = *(unsigned __int8 **)(a1 + v9 * 8 + 24);
      if (v10 != v4[v9 + 3] || memcmp(*(const void **)(a1 + v9 * 8 + 16), v4[v9 + 2], 4 * (void)v10)) {
        break;
      }
      v9 += 3;
      if (v9 == 9)
      {
        uint64_t v11 = 0;
        while (1)
        {
          uint64_t v12 = *(unsigned __int8 **)(a1 + v11 * 8 + 96);
          if (v12 != v4[v11 + 12] || memcmp(*(const void **)(a1 + v11 * 8 + 88), v4[v11 + 11], 4 * (void)v12)) {
            break;
          }
          v11 += 3;
          if (v11 == 6) {
            return 1;
          }
        }
        return 0;
      }
    }
  }
  return 0;
}

uint64_t kaldi::quasar::ShortlistDataInOneFile::GetVocabSize(kaldi::quasar::ShortlistDataInOneFile *this)
{
  if (*((void *)this + 3) < 2uLL) {
    return (*((_DWORD *)this + 12) - **((_DWORD **)this + 2));
  }
  else {
    return (*(_DWORD *)(*((void *)this + 2) + 4) - **((_DWORD **)this + 2));
  }
}

void kaldi::quasar::ShortlistDataInOneFile::~ShortlistDataInOneFile(kaldi::quasar::ShortlistDataInOneFile *this)
{
  *(void *)this = &unk_1F0A51200;
  char v7 = (void **)((char *)this + 136);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  for (uint64_t i = 0; i != -48; i -= 24)
  {
    if (*((unsigned char *)this + i + 128))
    {
      uint64_t v3 = *(void *)((char *)this + i + 112);
      if (v3) {
        MEMORY[0x1B3EA8630](v3, 0x1000C8077774924);
      }
    }
  }
  for (uint64_t j = 0; j != -72; j -= 24)
  {
    if (*((unsigned char *)this + j + 80))
    {
      uint64_t v5 = *(void *)((char *)this + j + 64);
      if (v5) {
        MEMORY[0x1B3EA8630](v5, 0x1000C8077774924);
      }
    }
  }
  uint64_t v6 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
}

{
  uint64_t i;
  uint64_t v3;
  uint64_t j;
  uint64_t v5;
  uint64_t v6;
  void **v7;

  *(void *)this = &unk_1F0A51200;
  char v7 = (void **)((char *)this + 136);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  for (uint64_t i = 0; i != -48; i -= 24)
  {
    if (*((unsigned char *)this + i + 128))
    {
      uint64_t v3 = *(void *)((char *)this + i + 112);
      if (v3) {
        MEMORY[0x1B3EA8630](v3, 0x1000C8077774924);
      }
    }
  }
  for (uint64_t j = 0; j != -72; j -= 24)
  {
    if (*((unsigned char *)this + j + 80))
    {
      uint64_t v5 = *(void *)((char *)this + j + 64);
      if (v5) {
        MEMORY[0x1B3EA8630](v5, 0x1000C8077774924);
      }
    }
  }
  uint64_t v6 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  MEMORY[0x1B3EA8670](this, 0x10F1C408308A222);
}

uint64_t quasar::SymbolTableList::addSymbolTable(uint64_t *a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v8 = a1[1];
  if (v8 == *a1) {
    goto LABEL_8;
  }
  uint64_t v9 = *(void *)(v8 - 32);
  uint64_t v10 = (*(uint64_t (**)(void))(**(void **)(v9 + 96) + 112))(*(void *)(v9 + 96));
  if ((v10 & 0x8000000000000000) == 0) {
    v10 += *(void *)(v9 + 120);
  }
  if (v10 <= a3)
  {
LABEL_8:
    uint64_t v15 = *a2;
    int v16 = (std::__shared_weak_count *)a2[1];
    if (v16)
    {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      *((void *)&v17 + 1) = v16;
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      *((void *)&v17 + 1) = 0;
    }
    *(void *)&long long v17 = v15;
    *(void *)&long long v18 = a3;
    DWORD2(v18) = a4;
    std::vector<quasar::SymbolTableList::Data>::push_back[abi:ne180100](a1, (uint64_t)&v17);
    if (*((void *)&v17 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v17 + 1));
    }
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
    return 1;
  }
  else
  {
    if (quasar::gLogLevel >= 1)
    {
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      long long v17 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v17);
      uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)"Tried to add overlapping and/or out-of-order symbol table to symbol table list: ", 80);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"symTableFirstKey=", 17);
      uint64_t v12 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", previous symbol table's last key=", 35);
      uint64_t v13 = *(void *)(*(void *)(a1[1] - 32) + 96);
      (*(void (**)(uint64_t))(*(void *)v13 + 112))(v13);
      std::ostream::operator<<();
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v17);
    }
    return 0;
  }
}

void sub_1B2317054(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(exception_object);
}

void **std::vector<quasar::SymbolTableList::Data>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = (unint64_t)*(result - 1);
  if (v7 >= v6)
  {
    uint64_t v10 = (uint64_t)(v7 - *a1) >> 5;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 59) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 4 > v11) {
      unint64_t v11 = v12 >> 4;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v13 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    void v17[4] = result;
    if (v13) {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)result, v13);
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v15 = &v14[32 * v10];
    v17[0] = v14;
    v17[1] = v15;
    void v17[3] = &v14[32 * v13];
    *(_OWORD *)uint64_t v15 = *(_OWORD *)a2;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    uint64_t v16 = *(void *)(a2 + 16);
    *((_DWORD *)v15 + 6) = *(_DWORD *)(a2 + 24);
    *((void *)v15 + 2) = v16;
    void v17[2] = v15 + 32;
    std::vector<quasar::SymbolTableList::Data>::__swap_out_circular_buffer(a1, v17);
    uint64_t v9 = a1[1];
    uint64_t result = std::__split_buffer<quasar::SymbolTableList::Data>::~__split_buffer(v17);
  }
  else
  {
    *(_OWORD *)unint64_t v7 = *(_OWORD *)a2;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    uint64_t v8 = *(void *)(a2 + 16);
    *(_DWORD *)(v7 + ++*(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
    *(void *)(v7 + 16) = v8;
    uint64_t v9 = v7 + 32;
    a1[1] = v7 + 32;
  }
  a1[1] = v9;
  return result;
}

void sub_1B231719C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::SymbolTableList::Data>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::SymbolTableList::strsToSymbolIds@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t result = (uint64_t)std::vector<long long>::vector(a3, 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3), &fst::SymbolTable::kNoSymbol);
  uint64_t v7 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    do
    {
      uint64_t result = quasar::SymbolTableList::strToSymbolId(a1, v7 + v8);
      *(void *)(*a3 + 8 * v9++) = result;
      uint64_t v7 = *a2;
      v8 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) > v9);
  }
  return result;
}

void sub_1B2317258(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::SymbolTableList::strToSymbolId(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)a1;
  if (*(void *)a1 == *(void *)(a1 + 8)) {
    return -1;
  }
  while (1)
  {
    uint64_t result = quasar::QsrTextSymbolTable::Find(*v2, a2);
    if (result << 32 != 0xFFFFFFFF00000000) {
      break;
    }
    v2 += 4;
    if (v2 == *(uint64_t **)(a1 + 8)) {
      return -1;
    }
  }
  return (int)result;
}

void quasar::SymbolTableList::lookup(uint64_t *a1, int a2, unsigned __int8 *a3, _DWORD *a4)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  if (v5 == *a1) {
    return;
  }
  uint64_t v7 = a1[1];
  while (1)
  {
    unint64_t v9 = *(quasar::QsrTextSymbolTable **)(v7 - 32);
    v7 -= 32;
    uint64_t v8 = v9;
    if (v9)
    {
      if (*(void *)(v5 - 16) <= a2) {
        break;
      }
    }
    uint64_t v5 = v7;
    if (v7 == v4) {
      return;
    }
  }
  *a4 = *(_DWORD *)(v5 - 8);
  quasar::QsrTextSymbolTable::Find(v8, &v23);
  if ((char)a3[23] < 0) {
    operator delete(*(void **)a3);
  }
  *(_OWORD *)a3 = v23;
  *((void *)a3 + 2) = v24;
  if ((char)a3[23] < 0)
  {
    uint64_t v11 = *((void *)a3 + 1);
    if (v11 != 5)
    {
      if (!v11) {
        goto LABEL_15;
      }
      goto LABEL_23;
    }
    uint64_t v10 = *(unsigned __int8 **)a3;
  }
  else
  {
    uint64_t v10 = a3;
    if (a3[23] != 5)
    {
      if (!a3[23])
      {
LABEL_15:
        long long v38 = 0u;
        long long v39 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        long long v24 = 0u;
        long long v25 = 0u;
        long long v23 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v23);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v23, (uint64_t)"Word ID ", 8);
        uint64_t v12 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" not in symbol table ", 21);
        unint64_t v13 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" with start key ", 16);
        std::ostream::operator<<();
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v23);
      }
      goto LABEL_23;
    }
  }
  int v14 = *(_DWORD *)v10;
  int v15 = v10[4];
  if (v14 == 1936745788 && v15 == 62) {
    MEMORY[0x1B3EA7B20](a3, "");
  }
LABEL_23:
  if (quasar::gLogLevel >= 6)
  {
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v23 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v23);
    long long v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v23, (uint64_t)"Got word: ", 10);
    int v18 = (char)a3[23];
    if (v18 >= 0) {
      uint64_t v19 = (uint64_t)a3;
    }
    else {
      uint64_t v19 = *(void *)a3;
    }
    if (v18 >= 0) {
      uint64_t v20 = a3[23];
    }
    else {
      uint64_t v20 = *((void *)a3 + 1);
    }
    long long v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v19, v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" (", 2);
    long long v22 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)") from symbol table ", 20);
    std::ostream::operator<<();
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v23);
  }
}

void sub_1B2317520(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B2317530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void quasar::SymbolTableList::lookup(quasar::SymbolTableList *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  int v3 = 0;
  quasar::SymbolTableList::lookup((uint64_t *)this, a2, (unsigned __int8 *)a3, &v3);
}

void sub_1B2317584(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void quasar::SymbolTableList::lookup(uint64_t *a1, int **a2, uint64_t *a3, char **a4, int a5)
{
  std::vector<std::string>::__clear[abi:ne180100](a3);
  a4[1] = *a4;
  for (uint64_t i = *a2; i != a2[1]; ++i)
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v32 = 0;
    int v30 = 0;
    quasar::SymbolTableList::lookup(a1, *i, (unsigned __int8 *)__p, &v30);
    if (a5)
    {
      char v11 = HIBYTE(v32);
      if (SHIBYTE(v32) < 0)
      {
        if (__p[1] == (void *)3)
        {
          uint64_t v12 = (void **)__p[0];
LABEL_12:
          int v13 = *(unsigned __int16 *)v12;
          int v14 = *((unsigned __int8 *)v12 + 2);
          if (v13 == 16188 && v14 == 62) {
            goto LABEL_39;
          }
          goto LABEL_16;
        }
        if (!__p[1]) {
          goto LABEL_40;
        }
      }
      else
      {
        if (HIBYTE(v32) == 3)
        {
          uint64_t v12 = __p;
          goto LABEL_12;
        }
        if (!HIBYTE(v32)) {
          continue;
        }
      }
    }
LABEL_16:
    unint64_t v16 = a3[1];
    if (v16 >= a3[2])
    {
      uint64_t v18 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a3, (long long *)__p);
    }
    else
    {
      if (SHIBYTE(v32) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)a3[1], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      }
      else
      {
        long long v17 = *(_OWORD *)__p;
        *(void *)(v16 + 16) = v32;
        *(_OWORD *)unint64_t v16 = v17;
      }
      uint64_t v18 = v16 + 24;
      a3[1] = v16 + 24;
    }
    a3[1] = v18;
    uint64_t v20 = a4[1];
    unint64_t v19 = (unint64_t)a4[2];
    if ((unint64_t)v20 >= v19)
    {
      long long v22 = *a4;
      uint64_t v23 = (v20 - *a4) >> 2;
      unint64_t v24 = v23 + 1;
      if ((unint64_t)(v23 + 1) >> 62) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v25 = v19 - (void)v22;
      if (v25 >> 1 > v24) {
        unint64_t v24 = v25 >> 1;
      }
      if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v26 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v26 = v24;
      }
      if (v26)
      {
        long long v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a4 + 2), v26);
        long long v22 = *a4;
        uint64_t v20 = a4[1];
      }
      else
      {
        long long v27 = 0;
      }
      long long v28 = &v27[4 * v23];
      *(_DWORD *)long long v28 = v30;
      long long v21 = v28 + 4;
      while (v20 != v22)
      {
        int v29 = *((_DWORD *)v20 - 1);
        v20 -= 4;
        *((_DWORD *)v28 - 1) = v29;
        v28 -= 4;
      }
      *a4 = v28;
      a4[1] = v21;
      a4[2] = &v27[4 * v26];
      if (v22) {
        operator delete(v22);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v20 = v30;
      long long v21 = v20 + 4;
    }
    a4[1] = v21;
    char v11 = HIBYTE(v32);
LABEL_39:
    if (v11 < 0) {
LABEL_40:
    }
      operator delete(__p[0]);
  }
}

{
  int *i;
  char v11;
  void **v12;
  int v13;
  int v14;
  unint64_t v16;
  long long v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  int v29;
  int v30;
  void *__p[2];
  uint64_t v32;

  std::vector<std::string>::__clear[abi:ne180100](a3);
  a4[1] = *a4;
  for (uint64_t i = *a2; i != a2[1]; i += 12)
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v32 = 0;
    int v30 = 0;
    quasar::SymbolTableList::lookup(a1, *i, (unsigned __int8 *)__p, &v30);
    if (a5)
    {
      char v11 = HIBYTE(v32);
      if (SHIBYTE(v32) < 0)
      {
        if (__p[1] == (void *)3)
        {
          uint64_t v12 = (void **)__p[0];
LABEL_12:
          int v13 = *(unsigned __int16 *)v12;
          int v14 = *((unsigned __int8 *)v12 + 2);
          if (v13 == 16188 && v14 == 62) {
            goto LABEL_39;
          }
          goto LABEL_16;
        }
        if (!__p[1]) {
          goto LABEL_40;
        }
      }
      else
      {
        if (HIBYTE(v32) == 3)
        {
          uint64_t v12 = __p;
          goto LABEL_12;
        }
        if (!HIBYTE(v32)) {
          continue;
        }
      }
    }
LABEL_16:
    unint64_t v16 = a3[1];
    if (v16 >= a3[2])
    {
      uint64_t v18 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a3, (long long *)__p);
    }
    else
    {
      if (SHIBYTE(v32) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)a3[1], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      }
      else
      {
        long long v17 = *(_OWORD *)__p;
        *(void *)(v16 + 16) = v32;
        *(_OWORD *)unint64_t v16 = v17;
      }
      uint64_t v18 = v16 + 24;
      a3[1] = v16 + 24;
    }
    a3[1] = v18;
    uint64_t v20 = a4[1];
    unint64_t v19 = (unint64_t)a4[2];
    if ((unint64_t)v20 >= v19)
    {
      long long v22 = *a4;
      uint64_t v23 = (v20 - *a4) >> 2;
      unint64_t v24 = v23 + 1;
      if ((unint64_t)(v23 + 1) >> 62) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v25 = v19 - (void)v22;
      if (v25 >> 1 > v24) {
        unint64_t v24 = v25 >> 1;
      }
      if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v26 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v26 = v24;
      }
      if (v26)
      {
        long long v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a4 + 2), v26);
        long long v22 = *a4;
        uint64_t v20 = a4[1];
      }
      else
      {
        long long v27 = 0;
      }
      long long v28 = &v27[4 * v23];
      *(_DWORD *)long long v28 = v30;
      long long v21 = v28 + 4;
      while (v20 != v22)
      {
        int v29 = *((_DWORD *)v20 - 1);
        v20 -= 4;
        *((_DWORD *)v28 - 1) = v29;
        v28 -= 4;
      }
      *a4 = v28;
      a4[1] = v21;
      a4[2] = &v27[4 * v26];
      if (v22) {
        operator delete(v22);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v20 = v30;
      long long v21 = v20 + 4;
    }
    a4[1] = v21;
    char v11 = HIBYTE(v32);
LABEL_39:
    if (v11 < 0) {
LABEL_40:
    }
      operator delete(__p[0]);
  }
}

void sub_1B23177BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  *(void *)(v15 + 8) = v16;
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B2317A04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  *(void *)(v15 + 8) = v16;
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::SymbolTableList::flatten(void *a1, void *a2)
{
  for (uint64_t i = a1[1]; i != *a1; i -= 32)
  {
    unint64_t v6 = *(quasar::QsrTextSymbolTable **)(i - 32);
    uint64_t v5 = v6;
    if (v6)
    {
      unint64_t v7 = quasar::QsrTextSymbolTable::NumSymbols(v5);
      uint64_t NthKey = quasar::QsrTextSymbolTable::GetNthKey(v5);
      if (v7)
      {
        uint64_t v9 = NthKey;
        uint64_t v10 = 0;
        do
        {
          *(void *)&long long v14 = v9;
          if (std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(a2, (unint64_t *)&v14))
          {
            long long v29 = 0u;
            long long v30 = 0u;
            long long v27 = 0u;
            long long v28 = 0u;
            long long v25 = 0u;
            long long v26 = 0u;
            long long v23 = 0u;
            long long v24 = 0u;
            long long v21 = 0u;
            long long v22 = 0u;
            long long v19 = 0u;
            long long v20 = 0u;
            long long v17 = 0u;
            long long v18 = 0u;
            long long v15 = 0u;
            long long v16 = 0u;
            long long v14 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v14);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Word ID ", 8);
            int v13 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" is already in the symbol list - indices in different symbol tables are not distinct", 84);
            quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v14);
          }
          quasar::QsrTextSymbolTable::Find(v5, &v14);
          unint64_t v31 = v9;
          uint64_t v32 = &v31;
          char v11 = std::__hash_table<std::__hash_value_type<long long,std::string>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::string>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::string>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::string>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long &&>,std::tuple<>>((uint64_t)a2, &v31, (uint64_t)&std::piecewise_construct, (uint64_t **)&v32);
          uint64_t v12 = (void **)(v11 + 3);
          if (*((char *)v11 + 47) < 0) {
            operator delete(*v12);
          }
          *(_OWORD *)uint64_t v12 = v14;
          v12[2] = (void *)v15;
          if (++v10 < v7) {
            uint64_t v9 = quasar::QsrTextSymbolTable::GetNthKey(v5);
          }
        }
        while (v7 != v10);
      }
    }
  }
}

void sub_1B2317BCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::SymbolTableList::getLmeSymbolIdToNumWords(int **a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (uint64_t)(*a1 + 8);
  if ((int *)v3 != a1[1])
  {
    do
    {
      int64_t v5 = v2[12];
      uint64_t v2 = (int *)v3;
      while (1)
      {
        uint64_t v6 = *(void *)v2;
        uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(*(void *)v2 + 96) + 112))(*(void *)(*(void *)v2 + 96));
        if ((v7 & 0x8000000000000000) == 0) {
          v7 += *(void *)(v6 + 120);
        }
        if (v7 <= v5) {
          break;
        }
        quasar::QsrTextSymbolTable::Find(*(quasar::QsrTextSymbolTable **)v2, v19);
        if ((v20 & 0x80u) == 0) {
          unint64_t v8 = v20;
        }
        else {
          unint64_t v8 = (unint64_t)v19[1];
        }
        if (v8)
        {
          unint64_t v9 = 0;
          if ((v20 & 0x80u) == 0) {
            uint64_t v10 = v19;
          }
          else {
            uint64_t v10 = (void **)v19[0];
          }
          char v11 = (char *)v10 + v8;
          unsigned int v12 = 1;
LABEL_14:
          for (uint64_t i = (char *)v10 + v9; v11 - i >= 4; uint64_t i = v14 + 1)
          {
            long long v14 = (char *)memchr(i, 126, v11 - i - 3);
            if (!v14) {
              break;
            }
            if (*(_DWORD *)v14 == 808482686)
            {
              if (v14 != v11 && v14 - (char *)v10 != -1)
              {
                ++v12;
                unint64_t v9 = v14 - (char *)v10 + 4;
                if (v8 >= v9) {
                  goto LABEL_14;
                }
                goto LABEL_24;
              }
              break;
            }
          }
          if (v12 < 2) {
            goto LABEL_27;
          }
LABEL_24:
          int64_t v17 = v5;
          *(void *)&v18[0] = &v17;
          *((_DWORD *)std::__hash_table<std::__hash_value_type<long long,int>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,int>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,int>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,int>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long &&>,std::tuple<>>(a2, (unint64_t *)&v17, (uint64_t)&std::piecewise_construct, (void **)v18)+ 6) = v12;
        }
        else if (quasar::gLogLevel >= 1)
        {
          memset(v18, 0, sizeof(v18));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v18);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Found an empty LME word, which should not happen", 48);
          quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v18);
        }
LABEL_27:
        if ((char)v20 < 0) {
          operator delete(v19[0]);
        }
        ++v5;
        if (!v8) {
          return 0;
        }
      }
      uint64_t v3 = (uint64_t)(v2 + 8);
    }
    while (v2 + 8 != a1[1]);
  }
  return 1;
}

void sub_1B2317E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)va);
  if (*(char *)(v3 - 105) < 0) {
    operator delete(*(void **)(v3 - 128));
  }
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::SymbolTableList::Data>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::SymbolTableList::Data>,std::reverse_iterator<quasar::SymbolTableList::Data*>,std::reverse_iterator<quasar::SymbolTableList::Data*>,std::reverse_iterator<quasar::SymbolTableList::Data*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::SymbolTableList::Data>,std::reverse_iterator<quasar::SymbolTableList::Data*>,std::reverse_iterator<quasar::SymbolTableList::Data*>,std::reverse_iterator<quasar::SymbolTableList::Data*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 32);
      a3 -= 32;
      *(_OWORD *)(v7 - 32) = v8;
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      uint64_t v9 = *(void *)(a3 + 16);
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 24);
      *(void *)(v7 - 16) = v9;
      uint64_t v7 = *((void *)&v15 + 1) - 32;
      *((void *)&v15 + 1) -= 32;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::SymbolTableList::Data>,std::reverse_iterator<quasar::SymbolTableList::Data*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::SymbolTableList::Data>,std::reverse_iterator<quasar::SymbolTableList::Data*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::SymbolTableList::Data>,std::reverse_iterator<quasar::SymbolTableList::Data*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::SymbolTableList::Data>,std::reverse_iterator<quasar::SymbolTableList::Data*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    v1 += 32;
  }
}

void **std::__split_buffer<quasar::SymbolTableList::Data>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<quasar::SymbolTableList::Data>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 32;
    uint64_t v4 = *(std::__shared_weak_count **)(v1 - 24);
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 32;
    }
  }
}

void *std::__hash_table<std::__hash_value_type<long long,int>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,int>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,int>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,int>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long &&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      char v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          char v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  char v11 = operator new(0x20uLL);
  *char v11 = 0;
  v11[1] = v7;
  v11[2] = **a4;
  *((_DWORD *)v11 + 6) = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  unsigned __int8 v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *char v11 = *v20;
LABEL_38:
    *unsigned __int8 v20 = v11;
    goto LABEL_39;
  }
  *char v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    unsigned __int8 v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_1B2318268(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

double quasar::SeevaGreedyDecoder::SeevaGreedyDecoder(uint64_t a1, long long *a2)
{
  uint64_t v2 = quasar::Decoder::Decoder(a1, a2);
  *(void *)uint64_t v2 = &unk_1F0A54118;
  *(unsigned char *)(v2 + 57) = 0;
  double result = 0.0;
  *(_OWORD *)(v2 + 448) = 0u;
  *(_OWORD *)(v2 + 464) = 0u;
  *(_OWORD *)(v2 + 48std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = 0u;
  *(_OWORD *)(v2 + 496) = 0u;
  *(void *)(v2 + 512) = 0;
  *(void *)(v2 + 528) = 0;
  *(void *)(v2 + 544) = 0;
  *(void *)(v2 + 536) = 0;
  return result;
}

void quasar::SeevaGreedyDecoder::~SeevaGreedyDecoder(quasar::SeevaGreedyDecoder *this)
{
  *(void *)this = &unk_1F0A54118;
  uint64_t v2 = *((void *)this + 68);
  *((void *)this + 68) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 67);
  *((void *)this + 67) = 0;
  if (v3) {
    std::default_delete<kaldi::quasar::Vocab>::operator()[abi:ne180100]((uint64_t)this + 536, v3);
  }
  std::unique_ptr<kaldi::nnet1::Nnet>::reset[abi:ne180100]((kaldi::nnet1::Nnet **)this + 66, 0);
  if (*((char *)this + 519) < 0) {
    operator delete(*((void **)this + 62));
  }
  if (*((char *)this + 495) < 0) {
    operator delete(*((void **)this + 59));
  }
  if (*((char *)this + 471) < 0) {
    operator delete(*((void **)this + 56));
  }
  quasar::Decoder::~Decoder(this);
}

{
  uint64_t vars8;

  quasar::SeevaGreedyDecoder::~SeevaGreedyDecoder(this);
  JUMPOUT(0x1B3EA8670);
}

void quasar::SeevaGreedyDecoder::registerParams(quasar::SeevaGreedyDecoder *this, quasar::SystemConfig *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "seeva-greedy");
  quasar::SystemConfig::enforceMinVersion((uint64_t)a2, 145, 0, (uint64_t)__p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "model-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "model file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 448, (uint64_t)v4, 1, 145, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "vocab-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "list of vocab");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 472, (uint64_t)v4, 1, 145, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "transform-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "transform file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 496, (uint64_t)v4, 0, 145, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B2318580(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void quasar::SeevaGreedyDecoder::finishInit(quasar::SeevaGreedyDecoder *this)
{
  char v2 = 0;
  uint64_t v1 = 0;
  kaldi::Input::OpenInternal(&v1, (uint64_t)this + 472, 1, &v2);
  kaldi::Input::Stream((kaldi::Input *)&v1);
  operator new();
}

void sub_1B23187E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  MEMORY[0x1B3EA8670](v16, 0x10B0C4082B712C9);
  kaldi::Input::~Input((kaldi::Input *)&a16);
  _Unwind_Resume(a1);
}

uint64_t quasar::SeevaGreedyDecoder::runImpl(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v116 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a2;
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v88 = (*(uint64_t (**)(void))(**(void **)(v5 + 16) + 24))(*(void *)(v5 + 16));
  uint64_t v7 = 0;
  unsigned int v112 = *(_DWORD *)(v5 + 24);
  long long v110 = 0u;
  long long v111 = 0u;
  long long v109 = 0u;
  while (kaldi::OnlineFeatureMatrix::IsValidFrame((int32x2_t *)v5, v7, 1))
  {
    kaldi::OnlineFeatureMatrix::GetFrame((kaldi::OnlineFeatureMatrix *)v5, v7, (uint64_t *)&__v);
    LODWORD(v113.__loc_.__locale_) = 0;
    std::deque<std::vector<float>>::emplace_back<int const&,int>(&v109, (int *)&v112, (int *)&v113);
    uint64_t v8 = (int)v112;
    if (v112)
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      std::__split_buffer<std::string>::pointer first = __v.__first_;
      uint64_t v12 = *(void *)(*(void *)(*((void *)&v109 + 1)
                                  + 8 * ((*((void *)&v111 + 1) + (void)v111 - 1) / 0xAAuLL))
                      + 24 * ((*((void *)&v111 + 1) + (void)v111 - 1) % 0xAAuLL));
      do
      {
        *(_DWORD *)(v12 + 4 * v10++) = *(_DWORD *)((char *)&first->__r_.__value_.__l.__data_ + (v9 >> 30));
        v9 += 0x100000000;
      }
      while (v8 != v10);
    }
    ++v7;
  }
  kaldi::Matrix<float>::Matrix((uint64_t)v107, v7, v112, 0, 0);
  float v13 = (void **)*((void *)&v109 + 1);
  if (v7)
  {
    uint64_t v14 = 0;
    unsigned int v15 = v112;
    uint64_t v16 = v111;
    uint64_t v17 = *(void *)v107;
    if (v112 <= 1) {
      unsigned int v18 = 1;
    }
    else {
      unsigned int v18 = v112;
    }
    int v19 = v108;
    do
    {
      if (v15)
      {
        uint64_t v20 = 0;
        uint64_t v21 = 0;
        uint64_t v22 = *((void *)v13[(v16 + v14) / 0xAAuLL] + 3 * ((v16 + v14) % 0xAAuLL));
        do
        {
          *(_DWORD *)(v17 + 4 * v19 * (int)v14 + (v20 >> 30)) = *(_DWORD *)(v22 + 4 * v21++);
          v20 += 0x100000000;
        }
        while (v18 != v21);
      }
      ++v14;
    }
    while (v14 != v7);
  }
  long long v23 = (void **)v110;
  if ((void **)v110 == v13)
  {
    long long v23 = v13;
  }
  else
  {
    long long v24 = &v13[(unint64_t)v111 / 0xAA];
    unint64_t v25 = (unint64_t)*v24;
    unint64_t v26 = (unint64_t)*v24 + 24 * ((unint64_t)v111 % 0xAA);
    unint64_t v27 = (unint64_t)v13[(*((void *)&v111 + 1) + (void)v111) / 0xAAuLL]
        + 24 * ((*((void *)&v111 + 1) + (void)v111) % 0xAAuLL);
    if (v26 != v27)
    {
      do
      {
        long long v28 = *(void **)v26;
        if (*(void *)v26)
        {
          *(void *)(v26 + 8) = v28;
          operator delete(v28);
          unint64_t v25 = (unint64_t)*v24;
        }
        v26 += 24;
        if (v26 - v25 == 4080)
        {
          unint64_t v29 = (unint64_t)v24[1];
          ++v24;
          unint64_t v25 = v29;
          unint64_t v26 = v29;
        }
      }
      while (v26 != v27);
      float v13 = (void **)*((void *)&v109 + 1);
      long long v23 = (void **)v110;
    }
  }
  *((void *)&v111 + 1) = 0;
  unint64_t v30 = (char *)v23 - (char *)v13;
  if ((unint64_t)((char *)v23 - (char *)v13) >= 0x11)
  {
    do
    {
      operator delete(*v13);
      float v13 = (void **)(*((void *)&v109 + 1) + 8);
      *((void *)&v109 + 1) = v13;
      unint64_t v30 = v110 - (void)v13;
    }
    while ((void)v110 - (void)v13 > 0x10uLL);
  }
  if (v30 >> 3 == 1)
  {
    uint64_t v31 = 85;
  }
  else
  {
    if (v30 >> 3 != 2) {
      goto LABEL_34;
    }
    uint64_t v31 = 170;
  }
  *(void *)&long long v111 = v31;
LABEL_34:
  long long v90 = v6;
  if (*(void *)(a1 + 528))
  {
    memset(&__v.__begin_, 0, 32);
    __v.__first_ = (std::__split_buffer<std::string>::pointer)&unk_1F0A51768;
    char v95 = 0;
    kaldi::CuMatrix<float>::operator=((int32x2_t *)&__v, v107);
    long long v114 = 0u;
    *(_OWORD *)&v113.__ct_ = 0u;
    v113.__loc_.__locale_ = (std::locale::__imp *)&unk_1F0A51768;
    char v115 = 0;
    kaldi::nnet1::Nnet::Feedforward(*(uint64_t **)(a1 + 528), (uint64_t)&__v, (int32x2_t *)&v113, -1, 0);
    (*(void (**)(std::string **__return_ptr))(**(void **)(a1 + 544) + 32))(&v104);
    std::__split_buffer<std::string>::pointer v32 = v104;
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v113);
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&__v);
  }
  else
  {
    (*(void (**)(std::__split_buffer<std::string> *__return_ptr))(**(void **)(a1 + 544) + 40))(&__v);
    std::__split_buffer<std::string>::pointer v32 = __v.__first_;
  }
  uint64_t v105 = 0;
  uint64_t v104 = 0;
  uint64_t v106 = 0;
  uint64_t v33 = std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<char const(&)[32],kaldi::quasar::ComputeEngineBufferItf&>((uint64_t *)&v104, "SeevaModel/__QNNI__source_input", (uint64_t)v32);
  uint64_t v34 = *(void *)(a1 + 544);
  uint64_t v105 = v33;
  memset(v103, 0, sizeof(v103));
  std::string::basic_string[abi:ne180100]<0>(&v113, "SeevaModel/__QNNO__prediction");
  memset(&__v, 0, 24);
  std::vector<int> __p = &__v;
  LOBYTE(v101) = 0;
  __v.__first_ = (std::__split_buffer<std::string>::pointer)operator new(0x18uLL);
  __v.__begin_ = __v.__first_;
  __v.__end_ = __v.__first_ + 1;
  __v.__begin_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&__v.__end_, (long long *)&v113, &v114, __v.__first_);
  long long v101 = 0;
  std::vector<int> __p = 0;
  uint64_t v102 = 0;
  (*(void (**)(uint64_t, std::string **, std::__split_buffer<std::string> *, void **, void *))(*(void *)v34 + 128))(v34, &v104, &__v, &__p, v103);
  v99.__begin_ = (std::vector<std::string>::pointer)&__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v99);
  std::vector<int> __p = &__v;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (SHIBYTE(v113.__col_) < 0) {
    operator delete(v113.__loc_.__locale_);
  }
  long long v101 = 0;
  std::vector<int> __p = 0;
  uint64_t v102 = 0;
  (*(void (**)(void, void **))(**(void **)v103[0] + 48))(*(void *)v103[0], &__p);
  std::vector<std::string>::vector(&v99, 1uLL);
  long long v35 = (unsigned int *)__p;
  size_t v91 = v101;
  if (__p != v101)
  {
    do
    {
      if (*v35 == *(_DWORD *)(a1 + 520)) {
        break;
      }
      uint64_t Word = kaldi::quasar::Vocab::GetWord(*(kaldi::quasar::Vocab **)(a1 + 536), *v35);
      if (*(char *)(Word + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v98, *(const std::string::value_type **)Word, *(void *)(Word + 8));
      }
      else
      {
        long long v37 = *(_OWORD *)Word;
        v98.__r_.__value_.__r.__words[2] = *(void *)(Word + 16);
        *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v37;
      }
      uint64_t v38 = a1;
      int64_t size = HIBYTE(v98.__r_.__value_.__r.__words[2]);
      char v40 = HIBYTE(v98.__r_.__value_.__r.__words[2]);
      if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      {
        long long v41 = &v98;
      }
      else
      {
        int64_t size = v98.__r_.__value_.__l.__size_;
        long long v41 = (std::string *)v98.__r_.__value_.__r.__words[0];
      }
      if (size >= 4)
      {
        long long v42 = (char *)v41 + size;
        long long v43 = v41;
        do
        {
          char v44 = (char *)memchr(v43, 126, size - 3);
          if (!v44) {
            break;
          }
          if (*(_DWORD *)v44 == 808482686)
          {
            if (v44 != v42)
            {
              unint64_t v45 = v44 - (char *)v41;
              if (v44 - (char *)v41 != -1)
              {
                do
                {
                  if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    uint64_t v46 = &v98;
                  }
                  else {
                    uint64_t v46 = (std::string *)v98.__r_.__value_.__r.__words[0];
                  }
                  std::string::__init_with_size[abi:ne180100]<char *,char *>(&v113, (char *)v46, (char *)v46 + v45, v45);
                  if (SHIBYTE(v113.__col_) >= 0) {
                    locale = (const std::string::value_type *)&v113;
                  }
                  else {
                    locale = (const std::string::value_type *)v113.__loc_.__locale_;
                  }
                  if (SHIBYTE(v113.__col_) >= 0) {
                    std::string::size_type col_high = HIBYTE(v113.__col_);
                  }
                  else {
                    std::string::size_type col_high = (std::string::size_type)v113.__ct_;
                  }
                  std::string::append(v99.__end_ - 1, locale, col_high);
                  std::vector<std::string>::pointer end = v99.__end_;
                  if (v99.__end_ >= v99.__end_cap_.__value_)
                  {
                    unint64_t v51 = 0xAAAAAAAAAAAAAAABLL * (((char *)v99.__end_ - (char *)v99.__begin_) >> 3);
                    unint64_t v52 = v51 + 1;
                    if (v51 + 1 > 0xAAAAAAAAAAAAAAALL) {
                      std::vector<int>::__throw_length_error[abi:ne180100]();
                    }
                    if (0x5555555555555556 * (((char *)v99.__end_cap_.__value_ - (char *)v99.__begin_) >> 3) > v52) {
                      unint64_t v52 = 0x5555555555555556 * (((char *)v99.__end_cap_.__value_ - (char *)v99.__begin_) >> 3);
                    }
                    if (0xAAAAAAAAAAAAAAABLL * (((char *)v99.__end_cap_.__value_ - (char *)v99.__begin_) >> 3) >= 0x555555555555555) {
                      unint64_t v53 = 0xAAAAAAAAAAAAAAALL;
                    }
                    else {
                      unint64_t v53 = v52;
                    }
                    __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v99.__end_cap_;
                    if (v53) {
                      uint64_t v54 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v99.__end_cap_, v53);
                    }
                    else {
                      uint64_t v54 = 0;
                    }
                    uint64_t v55 = v54 + v51;
                    __v.__first_ = v54;
                    __v.__begin_ = v55;
                    __v.__end_cap_.__value_ = &v54[v53];
                    v55->__r_.__value_.__r.__words[0] = 0;
                    v55->__r_.__value_.__l.__size_ = 0;
                    v55->__r_.__value_.__r.__words[2] = 0;
                    __v.__end_ = v55 + 1;
                    std::vector<std::string>::__swap_out_circular_buffer(&v99, &__v);
                    long long v50 = v99.__end_;
                    std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
                  }
                  else
                  {
                    v99.__end_->__r_.__value_.__l.__data_ = 0;
                    end->__r_.__value_.__l.__size_ = 0;
                    long long v50 = end + 1;
                    end->__r_.__value_.__r.__words[2] = 0;
                  }
                  v99.__end_ = v50;
                  std::string::erase(&v98, 0, v45 + 4);
                  int64_t v56 = HIBYTE(v98.__r_.__value_.__r.__words[2]);
                  if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  {
                    char v57 = &v98;
                  }
                  else
                  {
                    int64_t v56 = v98.__r_.__value_.__l.__size_;
                    char v57 = (std::string *)v98.__r_.__value_.__r.__words[0];
                  }
                  uint64_t v58 = (char *)v57 + v56;
                  if (v56 >= 4)
                  {
                    int v59 = v57;
                    do
                    {
                      long long v60 = memchr(v59, 126, v56 - 3);
                      if (!v60) {
                        break;
                      }
                      int v61 = (char *)v60;
                      if (*v60 == 808482686) {
                        goto LABEL_85;
                      }
                      int v59 = (std::string *)((char *)v60 + 1);
                      int64_t v56 = v58 - (v61 + 1);
                    }
                    while (v56 > 3);
                  }
                  int v61 = v58;
LABEL_85:
                  if (SHIBYTE(v113.__col_) < 0) {
                    operator delete(v113.__loc_.__locale_);
                  }
                  if (v61 == v58) {
                    break;
                  }
                  unint64_t v45 = v61 - (char *)v57;
                }
                while (v45 != -1);
                char v40 = HIBYTE(v98.__r_.__value_.__r.__words[2]);
              }
            }
            break;
          }
          long long v43 = (std::string *)(v44 + 1);
          int64_t size = v42 - (char *)v43;
        }
        while (v42 - (char *)v43 >= 4);
      }
      if (v40 < 0)
      {
        std::string::size_type v64 = v98.__r_.__value_.__l.__size_;
        if (v98.__r_.__value_.__l.__size_ == 3)
        {
          BOOL v66 = *(_WORD *)v98.__r_.__value_.__l.__data_ == 29500
             && *(unsigned char *)(v98.__r_.__value_.__r.__words[0] + 2) == 62;
          a1 = v38;
          if (v66) {
            goto LABEL_129;
          }
          std::string::size_type v64 = v98.__r_.__value_.__l.__size_;
        }
        else if (v98.__r_.__value_.__l.__size_ == 5)
        {
          BOOL v65 = *(_DWORD *)v98.__r_.__value_.__l.__data_ == 1668313916
             && *(unsigned char *)(v98.__r_.__value_.__r.__words[0] + 4) == 62;
          a1 = v38;
          if (v65) {
            goto LABEL_129;
          }
        }
        a1 = v38;
        if (v64 != 4) {
          goto LABEL_114;
        }
        if (*(_DWORD *)v98.__r_.__value_.__l.__data_ != 1047736124)
        {
          std::string::size_type v64 = v98.__r_.__value_.__l.__size_;
LABEL_114:
          if (v64 != 5) {
            goto LABEL_128;
          }
          uint64_t v63 = (std::string *)v98.__r_.__value_.__r.__words[0];
LABEL_116:
          int data = (int)v63->__r_.__value_.__l.__data_;
          int v68 = v63->__r_.__value_.__s.__data_[4];
          if (data != 1802401084 || v68 != 62) {
            goto LABEL_128;
          }
        }
      }
      else
      {
        switch(v40)
        {
          case 3:
            BOOL v70 = LOWORD(v98.__r_.__value_.__l.__data_) == 29500 && v98.__r_.__value_.__s.__data_[2] == 62;
            a1 = v38;
            if (!v70) {
LABEL_128:
            }
              std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](&v113, "@[^#]*#|#[^@]*@", 0);
            break;
          case 4:
            a1 = v38;
            if (LODWORD(v98.__r_.__value_.__l.__data_) != 1047736124) {
              goto LABEL_128;
            }
            break;
          case 5:
            a1 = v38;
            if (LODWORD(v98.__r_.__value_.__l.__data_) != 1668313916 || v98.__r_.__value_.__s.__data_[4] != 62)
            {
              uint64_t v63 = &v98;
              goto LABEL_116;
            }
            break;
          default:
            goto LABEL_128;
        }
      }
LABEL_129:
      if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v98.__r_.__value_.__l.__data_);
      }
      ++v35;
    }
    while (v35 != v91);
  }
  std::vector<std::vector<quasar::Token>>::vector(&v113, 1uLL);
  std::vector<std::string>::pointer begin = v99.__begin_;
  for (std::vector<std::string>::pointer i = v99.__end_; begin != i; ++begin)
  {
    unint64_t v73 = v113.__loc_.__locale_;
    LODWORD(v98.__r_.__value_.__l.__data_) = 0;
    uint64_t v97 = 0;
    __v.__first_ = (std::__split_buffer<std::string>::pointer)0x3FF0000000000000;
    unsigned __int8 v96 = 0;
    unint64_t v74 = *((void *)v113.__loc_.__locale_ + 1);
    if (v74 >= *((void *)v113.__loc_.__locale_ + 2))
    {
      uint64_t v75 = std::vector<quasar::Token>::__emplace_back_slow_path<std::string,int,int,int,double,BOOL>((uint64_t *)v113.__loc_.__locale_, (uint64_t)begin, (int *)&v98, (int *)&v97 + 1, (int *)&v97, (double *)&__v, &v96);
    }
    else
    {
      std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,std::string,int,int,int,double,BOOL>((uint64_t)v113.__loc_.__locale_ + 16, *((std::string **)v113.__loc_.__locale_ + 1), (uint64_t)begin, (int *)&v98, (int *)&v97 + 1, (int *)&v97, (double *)&__v, &v96);
      uint64_t v75 = v74 + 224;
      *((void *)v73 + 1) = v74 + 224;
    }
    *((void *)v73 + 1) = v75;
  }
  long long v76 = operator new(8uLL);
  v98.__r_.__value_.__r.__words[0] = (std::string::size_type)v76;
  *long long v76 = 0x40C3878000000000;
  v98.__r_.__value_.__l.__size_ = (std::string::size_type)(v76 + 1);
  v98.__r_.__value_.__r.__words[2] = (std::string::size_type)(v76 + 1);
  int v77 = *(_DWORD *)(*(void *)a4 + 8);
  quasar::RecogResult::RecogResult((quasar::RecogResult *)&__v);
  long long v78 = *(std::__shared_weak_count **)(*(void *)a4 + 32);
  uint64_t v92 = *(void *)(*(void *)a4 + 24);
  unint64_t v93 = v78;
  if (v78) {
    atomic_fetch_add_explicit(&v78->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v79 = quasar::RecogResult::setParams((uint64_t)&__v, &v92);
  long long v80 = quasar::Token::resetSpacing((uint64_t **)&v113);
  uint64_t v81 = quasar::RecogResult::setResultChoices(v79, (uint64_t)v80);
  long long v82 = (void *)quasar::RecogResult::setResultCosts(v81, (uint64_t)&v98);
  uint64_t v83 = quasar::RecogResult::setLmeStatus(v82, (uint64_t *)(*a3 + 584));
  uint64_t started = quasar::RecogResult::setUtteranceStartMillis((uint64_t)v83, v77 * v88);
  quasar::RecogResult::setUtteranceDurationMillis(started, v7 * v88);
  if (v93) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v93);
  }
  (*(void (**)(void, std::__split_buffer<std::string> *, uint64_t))(**(void **)(*a3 + 560) + 40))(*(void *)(*a3 + 560), &__v, 1);
  uint64_t v85 = *a3;
  *(_DWORD *)(v85 + 576) = v7;
  *(_WORD *)(v85 + 58std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = 257;
  quasar::RecogResult::~RecogResult((quasar::RecogResult *)&__v);
  if (v98.__r_.__value_.__r.__words[0])
  {
    v98.__r_.__value_.__l.__size_ = v98.__r_.__value_.__r.__words[0];
    operator delete(v98.__r_.__value_.__l.__data_);
  }
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v113;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v99;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  if (__p)
  {
    long long v101 = (unsigned int *)__p;
    operator delete(__p);
  }
  __v.__first_ = (std::__split_buffer<std::string>::pointer)v103;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v104;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  (*(void (**)(std::__split_buffer<std::string>::pointer))(v32->__r_.__value_.__r.__words[0] + 8))(v32);
  kaldi::Matrix<float>::~Matrix((uint64_t)v107);
  std::deque<std::vector<int>>::~deque[abi:ne180100](&v109);
  if (v90) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v90);
  }
  return 0;
}

void sub_1B2319620(_Unwind_Exception *a1)
{
  kaldi::Matrix<float>::~Matrix((uint64_t)&STACK[0x258]);
  std::deque<std::vector<int>>::~deque[abi:ne180100]((void *)(v2 - 224));
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::vector<float>>::emplace_back<int const&,int>(void *a1, int *a2, int *a3)
{
  uint64_t v6 = a1[1];
  uint64_t v7 = a1[2];
  uint64_t v8 = 170 * ((v7 - v6) >> 3) - 1;
  if (v7 == v6) {
    uint64_t v8 = 0;
  }
  if (v8 == a1[5] + a1[4])
  {
    std::deque<std::vector<float>>::__add_back_capacity(a1);
    uint64_t v6 = a1[1];
    uint64_t v7 = a1[2];
  }
  if (v7 == v6)
  {
    uint64_t v10 = 0;
  }
  else
  {
    unint64_t v9 = a1[5] + a1[4];
    uint64_t v10 = (void *)(*(void *)(v6 + 8 * (v9 / 0xAA)) + 24 * (v9 % 0xAA));
  }
  unint64_t v11 = *a2;
  float v19 = (float)*a3;
  std::vector<float>::vector(v10, v11, &v19);
  uint64_t v12 = a1[4];
  uint64_t v13 = a1[5] + 1;
  a1[5] = v13;
  unint64_t v14 = v12 + v13;
  uint64_t v15 = a1[1];
  uint64_t v16 = (void *)(v15 + 8 * (v14 / 0xAA));
  uint64_t v17 = *v16 + 24 * (v14 % 0xAA);
  if (a1[2] == v15) {
    uint64_t v17 = 0;
  }
  if (v17 == *v16) {
    uint64_t v17 = *(v16 - 1) + 4080;
  }
  return v17 - 24;
}

uint64_t quasar::SeevaGreedyDecoder::affectsRecognitionResults(quasar::SeevaGreedyDecoder *this)
{
  return 1;
}

void std::default_delete<kaldi::quasar::Vocab>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(void **)(a2 + 144);
    if (v3)
    {
      *(void *)(a2 + 1--*(_DWORD *)(a9 + 52) = v3;
      operator delete(v3);
    }
    unint64_t v4 = (void **)(a2 + 120);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a2 + 80);
    if (*(char *)(a2 + 79) < 0) {
      operator delete(*(void **)(a2 + 56));
    }
    if (*(char *)(a2 + 55) < 0) {
      operator delete(*(void **)(a2 + 32));
    }
    if (*(char *)(a2 + 31) < 0) {
      operator delete(*(void **)(a2 + 8));
    }
    MEMORY[0x1B3EA8670](a2, 0x10B2C40DBFC2194);
  }
}

uint64_t std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<char const(&)[32],kaldi::quasar::ComputeEngineBufferItf&>(uint64_t *a1, char *a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (a1[1] - *a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v10 = a1[2] - v4;
  if (v10 >> 4 > v6) {
    unint64_t v6 = v10 >> 4;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v6;
  }
  float v19 = a1 + 2;
  if (v11) {
    uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v9, v11);
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v15 = v12;
  uint64_t v16 = &v12[32 * v5];
  uint64_t v17 = v16;
  unsigned int v18 = &v12[32 * v11];
  std::string::basic_string[abi:ne180100]<0>(v16, a2)[3] = a3;
  v17 += 32;
  std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__swap_out_circular_buffer(a1, &v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)&v15);
  return v13;
}

void sub_1B2319B04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::Token>::__emplace_back_slow_path<std::string,int,int,int,double,BOOL>(uint64_t *a1, uint64_t a2, int *a3, int *a4, int *a5, double *a6, unsigned __int8 *a7)
{
  uint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5);
  unint64_t v9 = v8 + 1;
  if ((unint64_t)(v8 + 1) > 0x124924924924924) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 5) > v9) {
    unint64_t v9 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 5);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 5)) >= 0x92492492492492) {
    unint64_t v16 = 0x124924924924924;
  }
  else {
    unint64_t v16 = v9;
  }
  long long v24 = a1 + 2;
  if (v16) {
    uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::Token>>((uint64_t)(a1 + 2), v16);
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t v20 = v17;
  uint64_t v21 = (std::string *)&v17[224 * v8];
  long long v23 = &v17[224 * v16];
  std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,std::string,int,int,int,double,BOOL>((uint64_t)(a1 + 2), v21, a2, a3, a4, a5, a6, a7);
  uint64_t v22 = &v21[9].__r_.__value_.__s.__data_[8];
  std::vector<quasar::Token>::__swap_out_circular_buffer(a1, &v20);
  uint64_t v18 = a1[1];
  std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)&v20);
  return v18;
}

void sub_1B2319C6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,std::string,int,int,int,double,BOOL>(uint64_t a1, std::string *a2, uint64_t a3, int *a4, int *a5, int *a6, double *a7, unsigned __int8 *a8)
{
  long long v22 = *(_OWORD *)a3;
  uint64_t v23 = *(void *)(a3 + 16);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  int v9 = *a4;
  int v10 = *a5;
  int v11 = *a6;
  double v12 = *a7;
  int v13 = *a8;
  std::string::basic_string[abi:ne180100]<0>(v20, "");
  std::string::basic_string[abi:ne180100]<0>(v18, "");
  memset(v17, 0, sizeof(v17));
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  float v14 = v12;
  quasar::Token::Token(a2, &v22, v9, v10, v11, v13 != 0, 0, (long long *)v20, v14, (long long *)v18, v17, 0, (long long *)__p, 0, 0);
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  __p[0] = v17;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  if (v21 < 0) {
    operator delete(v20[0]);
  }
  if (SHIBYTE(v23) < 0) {
    operator delete((void *)v22);
  }
}

void sub_1B2319DC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  std::vector<int> __p = &a21;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (a29 < 0) {
    operator delete(a24);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (*(char *)(v35 - 89) < 0) {
    operator delete(*(void **)(v35 - 112));
  }
  _Unwind_Resume(a1);
}

BOOL quasar::operator==(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

void sub_1B231A098(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::join<std::vector<quasar::AlternativeSelectionSpan::Alternative>>(uint64_t **a1, uint64_t *a2)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v6);
  quasar::joinToStream<std::vector<quasar::AlternativeSelectionSpan::Alternative>>(v7, a1, a2);
  std::stringbuf::str();
  v6[0] = *MEMORY[0x1E4FBA408];
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v6 + *(void *)(v6[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v7[0] = v4;
  v7[1] = MEMORY[0x1E4FBA470] + 16;
  if (v8 < 0) {
    operator delete((void *)v7[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EA8520](&v9);
}

void sub_1B231A22C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B231A358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::ostream & quasar::anonymous namespace'::operator<<<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>(std::ostream &,std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription> const&)::{lambda(quasar::AlternativeSelectionSpan::Alternative::GenderDescription&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription> const&>(void ***a1, _DWORD *a2)
{
  return quasar::operator<<(**a1, a2);
}

void *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::ostream & quasar::anonymous namespace'::operator<<<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>(std::ostream &,std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription> const&)::{lambda(quasar::AlternativeSelectionSpan::Alternative::GenderDescription&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription> const&>(void ***a1, uint64_t a2)
{
  return quasar::operator<<(**a1, a2);
}

void *quasar::joinToStream<std::vector<quasar::AlternativeSelectionSpan::Alternative>>(void *result, uint64_t **a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    unint64_t v6 = result;
    char v7 = 1;
    do
    {
      if ((v7 & 1) == 0) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *a3, a3[1]);
      }
      double result = quasar::operator<<(v6, v3);
      char v7 = 0;
      v3 += 3;
    }
    while (v3 != v4);
  }
  return result;
}

id EARHelpers::VectorToArray<quasar::AppLmData::Oov,_EAROovToken * (*)(quasar::AppLmData::Oov const&)>(long long **a1, void (*a2)(std::string *))
{
  uint64_t v4 = [MEMORY[0x1E4F1CA48] array];
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  if (*a1 != v6)
  {
    do
    {
      if (*((char *)v5 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v5, *((void *)v5 + 1));
      }
      else
      {
        long long v7 = *v5;
        __p.__r_.__value_.__r.__words[2] = *((void *)v5 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v7;
      }
      std::set<std::string>::set[abi:ne180100](v12, (const void ***)v5 + 3);
      int v13 = *((_DWORD *)v5 + 12);
      char v8 = a2(&__p);
      [v4 addObject:v8];

      std::__tree<std::string>::destroy((uint64_t)v12, (char *)v12[1]);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v5 = (long long *)((char *)v5 + 56);
    }
    while (v5 != v6);
  }
  uint64_t v9 = objc_msgSend(v4, "copy", __p.__r_.__value_.__r.__words[0], __p.__r_.__value_.__l.__size_, __p.__r_.__value_.__r.__words[2]);

  return v9;
}

void sub_1B231A628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(a1);
}

_EAROovToken *_earOovTokenFromAppLmDataOov(const quasar::AppLmData::Oov *a1)
{
  uint64_t v2 = [_EAROovToken alloc];
  int v3 = *((char *)a1 + 23);
  if (v3 >= 0) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(const quasar::AppLmData::Oov **)a1;
  }
  if (v3 >= 0) {
    uint64_t v5 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    uint64_t v5 = *((void *)a1 + 1);
  }
  unint64_t v6 = objc_msgSend(NSString, "ear_stringWithStringView:", v4, v5);
  long long v7 = EARHelpers::ContainerToNSSet<std::set<std::string>>((void *)a1 + 3);
  char v8 = [(_EAROovToken *)v2 initWithOrthography:v6 prons:v7 frequency:*((unsigned int *)a1 + 12)];

  return v8;
}

void sub_1B231A718(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B231A8B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B231ABD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  _Unwind_Resume(a1);
}

void sub_1B231ADDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B231B0D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9, char a10)
{
  objc_destroyWeak(&a9);
  kaldi::Matrix<float>::~Matrix((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_1B231B36C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__14(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__14(uint64_t a1)
{
}

void sub_1B231B540(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<quasar::SyncPSRAudioProcessor,std::allocator<quasar::SyncPSRAudioProcessor>,quasar::SystemConfig &,std::string,unsigned long &,BOOL &,long &,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, unsigned int *a3@<X3>, unsigned __int8 *a4@<X4>, unsigned int *a5@<X5>, void *a6@<X8>)
{
  double v12 = operator new(0xA8uLL);
  double result = std::__shared_ptr_emplace<quasar::SyncPSRAudioProcessor>::__shared_ptr_emplace[abi:ne180100]<quasar::SystemConfig &,std::string,unsigned long &,BOOL &,long &,std::allocator<quasar::SyncPSRAudioProcessor>,0>(v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 3;
  a6[1] = v12;
  return result;
}

void sub_1B231B870(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::SyncPSRAudioProcessor>::__shared_ptr_emplace[abi:ne180100]<quasar::SystemConfig &,std::string,unsigned long &,BOOL &,long &,std::allocator<quasar::SyncPSRAudioProcessor>,0>(void *a1, uint64_t a2, uint64_t a3, unsigned int *a4, unsigned __int8 *a5, unsigned int *a6)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A60E90;
  quasar::SyncPSRAudioProcessor::SyncPSRAudioProcessor(a1 + 3, a2, a3, *a4, *a5, *a6);
  return a1;
}

void sub_1B231B8D8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t quasar::PDecEngineBlockMixin::getPhraseBookMode(uint64_t **a1)
{
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    uint64_t v1 = *((unsigned __int8 *)a1 + 23);
    switch(*((unsigned char *)a1 + 23))
    {
      case 0:
        return v1;
      case 1:
      case 2:
      case 3:
      case 5:
      case 6:
        goto LABEL_33;
      case 4:
        if (*(_DWORD *)a1 == 1752461154) {
          return 2;
        }
        goto LABEL_33;
      case 7:
        if (*(_DWORD *)a1 != 1634953572 || *(_DWORD *)((char *)a1 + 3) != 1701601889) {
          goto LABEL_33;
        }
        return 1;
      case 8:
        uint64_t v8 = (uint64_t)*a1;
        goto LABEL_30;
      default:
        uint64_t v4 = (uint64_t *)a1;
        if (v1 == 16) {
          goto LABEL_16;
        }
        goto LABEL_33;
    }
  }
  uint64_t v2 = a1[1];
  uint64_t v1 = 0;
  switch((unint64_t)v2)
  {
    case 0uLL:
      return v1;
    case 4uLL:
      if (*(_DWORD *)*a1 == 1752461154) {
        return 2;
      }
      if (v2 != (uint64_t *)7) {
        goto LABEL_13;
      }
LABEL_8:
      if (*(_DWORD *)*a1 == 1634953572 && *(_DWORD *)((char *)*a1 + 3) == 1701601889) {
        return 1;
      }
      uint64_t v2 = a1[1];
LABEL_13:
      if (v2 != (uint64_t *)16) {
        goto LABEL_33;
      }
      uint64_t v4 = *a1;
LABEL_16:
      uint64_t v5 = *v4;
      uint64_t v6 = v4[1];
      if (v5 != 0x625F657361726870 || v6 != 0x796C6E6F5F6B6F6FLL)
      {
LABEL_33:
        memset(v13, 0, sizeof(v13));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
        int v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"unknown phrase-book-mode: ", 26);
        std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v11, (uint64_t)a1);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v13);
      }
      return 3;
    case 7uLL:
      goto LABEL_8;
    case 8uLL:
      uint64_t v8 = **a1;
LABEL_30:
      if (v8 != 0x6B6361626C6C6166) {
        goto LABEL_33;
      }
      return 0;
    default:
      goto LABEL_13;
  }
}

uint64_t quasar::PDecEngineBlockMixin::getLmModeFromStr(void *a1)
{
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    uint64_t v1 = *((unsigned __int8 *)a1 + 23);
    switch(*((unsigned char *)a1 + 23))
    {
      case 4:
        if (*(_DWORD *)a1 != 1701736302) {
          goto LABEL_55;
        }
        return 0;
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
        goto LABEL_55;
      case 0xA:
        if (*a1 != 0x7461726765746E69 || *((_WORD *)a1 + 4) != 25701) {
          goto LABEL_55;
        }
        return 1;
      case 0xB:
        if (*a1 != 0x5F65726F63736572 || *(void *)((char *)a1 + 3) != 0x6570625F65726F63) {
          goto LABEL_55;
        }
        return 3;
      case 0xC:
        if (*a1 == 0x5F65726F63736572 && *((_DWORD *)a1 + 2) == 1685221239) {
          return 4;
        }
        uint64_t v5 = a1;
        if (v1 == 12) {
          goto LABEL_35;
        }
        goto LABEL_55;
      default:
        if (*((unsigned char *)a1 + 23)) {
          goto LABEL_55;
        }
        return v1;
    }
  }
  uint64_t v1 = a1[1];
  if (v1)
  {
    if (v1 == 4 && *(_DWORD *)*a1 == 1701736302)
    {
      return 0;
    }
    else
    {
      if (v1 == 10)
      {
        if (*(void *)*a1 == 0x7461726765746E69 && *(_WORD *)(*a1 + 8) == 25701) {
          return 1;
        }
        uint64_t v1 = a1[1];
      }
      if (v1 == 11)
      {
        if (*(void *)*a1 == 0x5F65726F63736572 && *(void *)(*a1 + 3) == 0x6570625F65726F63) {
          return 3;
        }
        uint64_t v1 = a1[1];
      }
      if (v1 != 12) {
        goto LABEL_55;
      }
      if (*(void *)*a1 == 0x5F65726F63736572 && *(_DWORD *)(*a1 + 8) == 1685221239)
      {
        return 4;
      }
      else
      {
        if (a1[1] != 12) {
          goto LABEL_55;
        }
        uint64_t v5 = (void *)*a1;
LABEL_35:
        uint64_t v7 = *v5;
        int v8 = *((_DWORD *)v5 + 2);
        if (v7 != 0x5F6C616974726170 || v8 != 1935763810)
        {
LABEL_55:
          memset(v15, 0, sizeof(v15));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
          int v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"unknown lm-mode: ", 17);
          std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v13, (uint64_t)a1);
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v15);
        }
        return 5;
      }
    }
  }
  return v1;
}

uint64_t quasar::PDecEngineBlockMixin::getNormalizationMode(uint64_t a1, char a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 23);
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v5 = *(void *)(a1 + 8);
    if (v5 == 3 && **(_WORD **)a1 == 26223 && *(unsigned char *)(*(void *)a1 + 2) == 102)
    {
      uint64_t v8 = 0;
      goto LABEL_25;
    }
    if (v5 == 6)
    {
      if (**(_DWORD **)a1 == 1735288172 && *(_WORD *)(*(void *)a1 + 4) == 26740)
      {
        if ((a2 & 1) == 0) {
          return 1;
        }
        goto LABEL_38;
      }
      uint64_t v5 = *(void *)(a1 + 8);
    }
    if (v5 != 4)
    {
LABEL_48:
      uint64_t v13 = a1;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      long long v14 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v14);
      double v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"unknown 'norm-mode': ", 21);
      std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v12, v13);
      goto LABEL_50;
    }
    int v3 = *(_DWORD **)a1;
LABEL_23:
    if (*v3 == 1953328743)
    {
      uint64_t v8 = 2;
      goto LABEL_25;
    }
    goto LABEL_48;
  }
  if (v2 == 3)
  {
    if (*(_WORD *)a1 != 26223 || *(unsigned char *)(a1 + 2) != 102) {
      goto LABEL_48;
    }
    if (a2)
    {
LABEL_40:
      if (*(_WORD *)a1 != 26223 || *(unsigned char *)(a1 + 2) != 102) {
        goto LABEL_49;
      }
      return 1;
    }
    return 0;
  }
  int v3 = (_DWORD *)a1;
  if (v2 == 4) {
    goto LABEL_23;
  }
  if (v2 != 6) {
    goto LABEL_48;
  }
  if (*(_DWORD *)a1 != 1735288172 || *(_WORD *)(a1 + 4) != 26740) {
    goto LABEL_48;
  }
  uint64_t v8 = 1;
LABEL_25:
  if (a2)
  {
    if ((v2 & 0x80) == 0)
    {
      if (v2 != 3) {
        goto LABEL_49;
      }
      goto LABEL_40;
    }
LABEL_38:
    if (*(void *)(a1 + 8) != 3)
    {
LABEL_49:
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      long long v14 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v14);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(&v14, "specifying both 'norm-cost' (old parameter name) and 'norm-mode' (new name) at the same time is not allowed.");
LABEL_50:
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v14);
    }
    a1 = *(void *)a1;
    goto LABEL_40;
  }
  return v8;
}

uint64_t quasar::PDecEngineBlockMixin::getStopMode(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v1 = *(void *)(a1 + 8);
    if (!v1) {
      return v1;
    }
    if (v1 == 4)
    {
      if (**(_DWORD **)a1 == 1953719650) {
        return 1;
      }
      uint64_t v1 = *(void *)(a1 + 8);
    }
    else if (v1 == 5 && **(_DWORD **)a1 == 1634034286 && *(unsigned char *)(*(void *)a1 + 4) == 109)
    {
      return 0;
    }
    if (v1 != 14) {
      goto LABEL_35;
    }
    int v3 = *(uint64_t **)a1;
    goto LABEL_21;
  }
  uint64_t v1 = *(unsigned __int8 *)(a1 + 23);
  if (*(unsigned __int8 *)(a1 + 23) > 4u)
  {
    if (v1 != 5)
    {
      int v3 = (uint64_t *)a1;
      if (v1 != 14) {
        goto LABEL_35;
      }
LABEL_21:
      uint64_t v4 = *v3;
      uint64_t v5 = *(uint64_t *)((char *)v3 + 6);
      if (v4 == 0x64656873696E6966 && v5 == 0x65726F63735F6465) {
        return 2;
      }
LABEL_35:
      memset(v11, 0, sizeof(v11));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
      uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"unknown stop-mode: ", 19);
      std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v9, a1);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v11);
    }
    if (*(_DWORD *)a1 != 1634034286 || *(unsigned char *)(a1 + 4) != 109) {
      goto LABEL_35;
    }
    return 0;
  }
  if (*(unsigned char *)(a1 + 23))
  {
    if (v1 != 4 || *(_DWORD *)a1 != 1953719650) {
      goto LABEL_35;
    }
    return 1;
  }
  return v1;
}

void *quasar::PDecOptions::options@<X0>(quasar::PDecOptions *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  double result = operator new(0x78uLL);
  a2[2] = result + 15;
  *double result = (char *)this + 16;
  result[1] = (char *)this + 176;
  result[2] = (char *)this + 320;
  result[3] = (char *)this + 480;
  result[4] = (char *)this + 640;
  result[5] = (char *)this + 784;
  result[6] = (char *)this + 944;
  result[7] = (char *)this + 1088;
  result[8] = (char *)this + 1248;
  result[9] = (char *)this + 1408;
  result[10] = (char *)this + 1696;
  result[11] = (char *)this + 1552;
  result[12] = (char *)this + 1856;
  result[13] = (char *)this + 2016;
  result[14] = (char *)this + 2176;
  *a2 = result;
  a2[1] = result + 15;
  return result;
}

void quasar::PDecEngineBlockMixin::createDecoder(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, long long *a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, int a7@<W6>, int a8@<W7>, uint64_t *a9@<X8>, float a10@<S0>, float a11@<S1>, char a12, uint64_t a13, char a14)
{
  int v63 = a6;
  float v62 = a10;
  int v61 = a7;
  float v60 = a11;
  int v59 = a8;
  char v58 = a12;
  *a9 = 0;
  a9[1] = 0;
  uint64_t v55 = 0;
  int64_t v56 = 0;
  unint64_t v57 = 0;
  int64_t v56 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v55, a4);
  uint64_t v18 = quasar::OptionValue<std::string>::value(a3 + 60);
  long long v19 = v56;
  if ((unint64_t)v56 >= v57)
  {
    long long v21 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v55, (long long *)v18);
  }
  else
  {
    if (*(char *)(v18 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v56, *(const std::string::value_type **)v18, *(void *)(v18 + 8));
    }
    else
    {
      long long v20 = *(_OWORD *)v18;
      v56->__r_.__value_.__r.__words[2] = *(void *)(v18 + 16);
      *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v20;
    }
    long long v21 = v19 + 1;
  }
  int64_t v56 = v21;
  uint64_t v22 = quasar::OptionValue<std::string>::value(a3 + 98);
  long long v23 = v56;
  if ((unint64_t)v56 >= v57)
  {
    long long v25 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v55, (long long *)v22);
  }
  else
  {
    if (*(char *)(v22 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v56, *(const std::string::value_type **)v22, *(void *)(v22 + 8));
    }
    else
    {
      long long v24 = *(_OWORD *)v22;
      v56->__r_.__value_.__r.__words[2] = *(void *)(v22 + 16);
      *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v24;
    }
    long long v25 = v23 + 1;
  }
  int64_t v56 = v25;
  if ((unint64_t)v25 >= v57)
  {
    long long v27 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v55, (long long *)a5);
  }
  else
  {
    if (*(char *)(a5 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v25, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
    }
    else
    {
      long long v26 = *(_OWORD *)a5;
      v25->__r_.__value_.__r.__words[2] = *(void *)(a5 + 16);
      *(_OWORD *)&v25->__r_.__value_.__l.__data_ = v26;
    }
    long long v27 = v25 + 1;
  }
  int64_t v56 = v27;
  uint64_t v28 = quasar::OptionValue<std::string>::value(a3 + 136);
  long long v29 = v56;
  if ((unint64_t)v56 >= v57)
  {
    uint64_t v31 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v55, (long long *)v28);
  }
  else
  {
    if (*(char *)(v28 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v56, *(const std::string::value_type **)v28, *(void *)(v28 + 8));
    }
    else
    {
      long long v30 = *(_OWORD *)v28;
      v56->__r_.__value_.__r.__words[2] = *(void *)(v28 + 16);
      *(_OWORD *)&v29->__r_.__value_.__l.__data_ = v30;
    }
    uint64_t v31 = v29 + 1;
  }
  int64_t v56 = v31;
  if (!a2) {
    goto LABEL_33;
  }
  uint64_t v32 = std::__tree<std::vector<std::string>>::find<std::vector<std::string>>(a2, &v55);
  uint64_t v33 = v32;
  if (a2 + 8 == v32) {
    goto LABEL_33;
  }
  uint64_t v34 = *(std::__shared_weak_count **)(v32 + 64);
  if (!v34 || (uint64_t v35 = std::__shared_weak_count::lock(v34)) == 0)
  {
    *a9 = 0;
    a9[1] = 0;
    goto LABEL_33;
  }
  uint64_t v36 = *(void *)(v33 + 56);
  *a9 = v36;
  a9[1] = (uint64_t)v35;
  if (!v36)
  {
LABEL_33:
    long long v37 = a3 + 2;
    uint64_t v38 = quasar::OptionValue<std::string>::value(a3 + 2);
    int v39 = *(char *)(v38 + 23);
    if (v39 < 0)
    {
      if (*(void *)(v38 + 8) != 5) {
        goto LABEL_42;
      }
      uint64_t v38 = *(void *)v38;
    }
    else if (v39 != 5)
    {
      goto LABEL_42;
    }
    if (*(_DWORD *)v38 == 1684824427 && *(unsigned char *)(v38 + 4) == 105) {
      operator new();
    }
LABEL_42:
    uint64_t v41 = quasar::OptionValue<std::string>::value(a3 + 2);
    int v42 = *(char *)(v41 + 23);
    if (v42 < 0)
    {
      if (*(void *)(v41 + 8) != 8) {
        goto LABEL_54;
      }
      uint64_t v41 = *(void *)v41;
    }
    else if (v42 != 8)
    {
      goto LABEL_54;
    }
    if (*(void *)v41 == 0x6F73736572707365) {
      operator new();
    }
LABEL_54:
    memset(v54, 0, sizeof(v54));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v54);
    long long v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"Unknown 'model-type': ", 22);
    uint64_t v49 = quasar::OptionValue<std::string>::value(v37);
    int v50 = *(char *)(v49 + 23);
    if (v50 >= 0) {
      uint64_t v51 = v49;
    }
    else {
      uint64_t v51 = *(void *)v49;
    }
    if (v50 >= 0) {
      uint64_t v52 = *(unsigned __int8 *)(v49 + 23);
    }
    else {
      uint64_t v52 = *(void *)(v49 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, v51, v52);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v54);
  }
  uint64_t v43 = *a9;
  uint64_t v44 = quasar::OptionValue<std::string>::value(a3 + 312);
  uint64_t v45 = quasar::OptionValue<std::string>::value(a3 + 272);
  kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>::SelectModel(v43, v44, v45, a13, a14);
  long long v46 = v54[0];
  v54[0] = 0uLL;
  unint64_t v47 = *(std::__shared_weak_count **)(a1 + 64);
  *(_OWORD *)(a1 + 56) = v46;
  if (v47)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v47);
    if (*((void *)&v54[0] + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v54[0] + 1));
    }
  }
  *(void *)&v54[0] = &v55;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v54);
}

void sub_1B231C9B8()
{
  MEMORY[0x1B3EA8670](v0, 0x10B2C403A6CCAF3);
  JUMPOUT(0x1B231C9E0);
}

void sub_1B231C9DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17)
{
  a17 = (void **)(v18 - 144);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a17);
  long long v20 = *(std::__shared_weak_count **)(v17 + 8);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>::Read(uint64_t a1, uint64_t a2, char a3, char a4, char a5, uint64_t *a6)
{
  uint64_t v10 = a2;
  char v11 = a3;
  char v12 = a4;
  char v13 = a5;
  uint64_t v6 = (std::__shared_weak_count *)a6[1];
  uint64_t v14 = *a6;
  long long v15 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(unsigned int *)(a1 + 5888);
  if (v7 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  long long v16 = &v10;
  uint64_t v8 = ((uint64_t (*)(uint64_t **, uint64_t))off_1F0A643A0[v7])(&v16, a1);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  return v8;
}

void sub_1B231CA9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>::ReadPronunciationModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v5[0] = a2;
  v5[1] = a3;
  uint64_t v3 = *(unsigned int *)(a1 + 5888);
  if (v3 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  uint64_t v6 = v5;
  return ((uint64_t (*)(void **, uint64_t))off_1F0A643B0[v3])(&v6, a1);
}

uint64_t kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>::SetICUScripts(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(unsigned int *)(a1 + 5888);
  if (v2 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  uint64_t v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_1F0A643C0[v2])(&v5, a1);
}

uint64_t kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>::ReadConfidenceModel(uint64_t a1, uint64_t a2, char a3, char a4)
{
  uint64_t v6 = a2;
  char v7 = a3;
  char v8 = a4;
  uint64_t v4 = *(unsigned int *)(a1 + 5888);
  if (v4 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  uint64_t v9 = &v6;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_1F0A643D0[v4])(&v9, a1);
}

uint64_t kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>::ReadInputHammer(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(unsigned int *)(a1 + 5888);
  if (v2 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  uint64_t v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_1F0A643E0[v2])(&v5, a1);
}

uint64_t std::pair<std::vector<std::string>,std::shared_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>::~pair(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v4 = (void **)a1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  return a1;
}

uint64_t kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>::SelectModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  v7[0] = a2;
  v7[1] = a3;
  uint64_t v7[2] = a4;
  char v8 = a5;
  uint64_t v5 = *(unsigned int *)(a1 + 5888);
  if (v5 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  uint64_t v9 = v7;
  return ((uint64_t (*)(void **, uint64_t))off_1F0A643F0[v5])(&v9, a1);
}

uint64_t quasar::PDecEngineBlockMixin::replaceDegenerateTranslation(uint64_t result, uint64_t a2, quasar::TranslationPhraseInternal **a3, char a4, int a5)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a2 + 8) != *(void *)a2)
  {
    uint64_t v5 = a3;
    uint64_t v6 = *a3;
    if (a3[1] != *a3)
    {
      char v8 = (unsigned __int16 **)*((void *)v6 + 17);
      uint64_t v9 = (unsigned __int16 **)*((void *)v6 + 18);
      if (v8 == v9)
      {
LABEL_27:
        if (quasar::gLogLevel >= 4)
        {
          long long v48 = 0u;
          memset(v49, 0, sizeof(v49));
          long long v46 = 0u;
          long long v47 = 0u;
          long long v44 = 0u;
          long long v45 = 0u;
          long long v42 = 0u;
          long long v43 = 0u;
          *(_OWORD *)uint64_t v41 = 0u;
          memset(v40, 0, sizeof(v40));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v40);
          long long v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"Degenerate translation <", 24);
          quasar::TranslationPhraseInternal::convertTokensToString((uint64_t *)v37, *v5);
          if ((v38 & 0x80u) == 0) {
            uint64_t v22 = v37;
          }
          else {
            uint64_t v22 = (void **)v37[0];
          }
          if ((v38 & 0x80u) == 0) {
            uint64_t v23 = v38;
          }
          else {
            uint64_t v23 = (uint64_t)v37[1];
          }
          long long v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
          long long v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"> from <", 8);
          quasar::TranslationPhraseInternal::convertTokensToString((uint64_t *)&__p, *(quasar::TranslationPhraseInternal **)a2);
          if (v33.__r_.__value_.__s.__data_[15] >= 0) {
            p_p = &__p;
          }
          else {
            p_p = __p;
          }
          if (v33.__r_.__value_.__s.__data_[15] >= 0) {
            uint64_t v27 = v33.__r_.__value_.__s.__data_[15];
          }
          else {
            uint64_t v27 = v33.__r_.__value_.__r.__words[0];
          }
          uint64_t v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)p_p, v27);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)">. Copying the input sequence to the output.", 44);
          if (v33.__r_.__value_.__s.__data_[15] < 0) {
            operator delete(__p);
          }
          if ((char)v38 < 0) {
            operator delete(v37[0]);
          }
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v40);
        }
        quasar::TranslationPhraseInternal::TranslationPhraseInternal((std::string *)v40, *(const quasar::TranslationPhraseInternal **)a2);
        std::vector<quasar::TranslationPhraseInternal>::__assign_with_size[abi:ne180100]<quasar::TranslationPhraseInternal const*,quasar::TranslationPhraseInternal const*>((uint64_t)v5, (uint64_t *)v40, (uint64_t *)v49 + 1, 1uLL);
        quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)v40);
        long long v29 = *(quasar::TranslationPhraseInternal **)a2;
        quasar::PTree::PTree((quasar::PTree *)&__p);
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v40);
        std::ostream::operator<<();
        std::stringbuf::str();
        if ((a4 & 1) == 0)
        {
          uint64_t v30 = quasar::MetaInfo::get((quasar::TranslationPhraseInternal *)((char *)v29 + 192));
          LODWORD(__p) = *(_DWORD *)v30;
          std::string::operator=(&v33, (const std::string *)(v30 + 8));
          if ((void **)v30 != &__p) {
            std::vector<std::pair<std::string,quasar::PTree>>::__assign_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>((uint64_t)v34, *(std::string **)(v30 + 32), *(std::string **)(v30 + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(v30 + 40) - *(void *)(v30 + 32)) >> 3));
          }
          v34[24] = *(unsigned char *)(v30 + 56);
        }
        std::string::basic_string[abi:ne180100]<0>(&v39, "source");
        std::string::basic_string[abi:ne180100]<0>(v35, "decoder");
        quasar::PTree::PTree(v37, v35);
        quasar::PTree::putChild((uint64_t)&__p, (uint64_t)&v39, (uint64_t)v37, 1);
        quasar::PTree::~PTree((quasar::PTree *)v37);
        if (v36 < 0) {
          operator delete(v35[0]);
        }
        if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v39.__r_.__value_.__l.__data_);
        }
        std::string::basic_string[abi:ne180100]<0>(&v39, "prefilter input");
        quasar::PTree::getStringOptional((uint64_t)&__p, (uint64_t)&v39);
      }
      char v11 = (uint64_t *)result;
      while (1)
      {
        if (a5)
        {
          char v12 = v5;
          uint64_t v13 = *((int *)v8 + 16);
          uint64_t v14 = kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>::OutputSymbols(*v11);
          double result = (*(uint64_t (**)(uint64_t, const char *))(*(void *)v14 + 104))(v14, "▁");
          BOOL v17 = result == v13;
          uint64_t v5 = v12;
          if (!v17)
          {
            uint64_t v15 = *((int *)v8 + 16);
            uint64_t v16 = kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>::OutputSymbols(*v11);
            double result = (*(uint64_t (**)(uint64_t, const char *))(*(void *)v16 + 104))(v16, "");
            BOOL v17 = result == v15;
            uint64_t v5 = v12;
            if (!v17) {
              return result;
            }
          }
        }
        else if (*((char *)v8 + 23) < 0)
        {
          uint64_t v18 = v8[1];
          if (v18)
          {
            if (v18 != (unsigned __int16 *)3) {
              return result;
            }
            if (**v8 != 38626 || *((unsigned __int8 *)*v8 + 2) != 129) {
              return result;
            }
          }
        }
        else if (*((unsigned char *)v8 + 23))
        {
          if (*((unsigned char *)v8 + 23) != 3) {
            return result;
          }
          BOOL v17 = *(unsigned __int16 *)v8 == 38626 && *((unsigned __int8 *)v8 + 2) == 129;
          if (!v17) {
            return result;
          }
        }
        v8 += 17;
        if (v8 == v9) {
          goto LABEL_27;
        }
      }
    }
  }
  return result;
}

void sub_1B231D710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,char a57)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a50 < 0) {
    operator delete(a45);
  }
  if (a56 < 0) {
    operator delete(a51);
  }
  std::ostringstream::~ostringstream((uint64_t)&a57);
  quasar::PTree::~PTree((quasar::PTree *)&a11);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>::OutputSymbols(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 5888);
  if (v1 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  uint64_t v4 = &v3;
  return ((uint64_t (*)(char **, uint64_t))off_1F0A64400[v1])(&v4, a1);
}

void quasar::PDecEngineBlockMixin::processImplementation(uint64_t *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v90 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)a2;
  if (*(void *)(v6 + 136) == *(void *)(v6 + 144) && *(unsigned char *)(v6 + 128))
  {
    quasar::TranslationPhraseInternal::TranslationPhraseInternal((std::string *)v77, (const quasar::TranslationPhraseInternal *)v6);
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    unint64_t v57 = a4;
    BOOL v58 = 0;
    uint64_t v22 = (char *)operator new(0xC8uLL);
    *a4 = (uint64_t)v22;
    a4[1] = (uint64_t)v22;
    a4[2] = (uint64_t)(v22 + 200);
    a4[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::TranslationPhraseInternal>,quasar::TranslationPhraseInternal const*,quasar::TranslationPhraseInternal const*,quasar::TranslationPhraseInternal*>((uint64_t)(a4 + 2), (uint64_t)v77, (uint64_t)&v85 + 8, (uint64_t)v22);
    quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)v77);
    *(_DWORD *)(*a4 + 4) = 1148829696;
    return;
  }
  quasar::TranslationPhraseInternal::convertTokensToString((uint64_t *)v75, (quasar::TranslationPhraseInternal *)v6);
  std::string __p = 0;
  unint64_t v73 = 0;
  unint64_t v74 = 0;
  if (*(unsigned char *)(a1[2] + 307))
  {
    uint64_t v7 = *(void *)a2;
    if (!*(unsigned char *)(*(void *)a2 + 129))
    {
      long long v88 = 0u;
      long long v89 = 0u;
      long long v86 = 0u;
      long long v87 = 0u;
      long long v84 = 0u;
      long long v85 = 0u;
      long long v82 = 0u;
      long long v83 = 0u;
      long long v81 = 0u;
      long long v79 = 0u;
      memset(v80, 0, sizeof(v80));
      *(_OWORD *)__dst = 0u;
      memset(v77, 0, sizeof(v77));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v77);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"Decoding require valid SentencePiece IDs in input", 49);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v77);
    }
    uint64_t v8 = *(void *)(v7 + 136);
    uint64_t v9 = *(void *)(v7 + 144);
    if (v8 != v9)
    {
      uint64_t v10 = 0;
      do
      {
        if (v10 >= v74)
        {
          char v12 = (char *)__p;
          uint64_t v13 = (v10 - (unsigned char *)__p) >> 2;
          unint64_t v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v15 = v74 - (unsigned char *)__p;
          if ((v74 - (unsigned char *)__p) >> 1 > v14) {
            unint64_t v14 = v15 >> 1;
          }
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v16 = v14;
          }
          if (v16)
          {
            BOOL v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v74, v16);
            char v12 = (char *)__p;
            uint64_t v10 = v73;
          }
          else
          {
            BOOL v17 = 0;
          }
          uint64_t v18 = &v17[4 * v13];
          *(_DWORD *)uint64_t v18 = *(_DWORD *)(v8 + 64);
          char v11 = v18 + 4;
          while (v10 != v12)
          {
            int v19 = *((_DWORD *)v10 - 1);
            v10 -= 4;
            *((_DWORD *)v18 - 1) = v19;
            v18 -= 4;
          }
          std::string __p = v18;
          unint64_t v73 = v11;
          unint64_t v74 = &v17[4 * v16];
          if (v12) {
            operator delete(v12);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v10 = *(_DWORD *)(v8 + 64);
          char v11 = v10 + 4;
        }
        unint64_t v73 = v11;
        v8 += 136;
        uint64_t v10 = v11;
      }
      while (v8 != v9);
    }
  }
  long long v69 = 0;
  BOOL v70 = 0;
  uint64_t v71 = 0;
  quasar::PTree::PTree((quasar::PTree *)&v66);
  if ((a3 & 1) == 0)
  {
    uint64_t v20 = quasar::MetaInfo::get((quasar::MetaInfo *)(*(void *)a2 + 192));
    int v66 = *(_DWORD *)v20;
    std::string::operator=(&v67, (const std::string *)(v20 + 8));
    if (&v66 != (int *)v20) {
      std::vector<std::pair<std::string,quasar::PTree>>::__assign_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>((uint64_t)v68, *(std::string **)(v20 + 32), *(std::string **)(v20 + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(v20 + 40) - *(void *)(v20 + 32)) >> 3));
    }
    v68[24] = *(unsigned char *)(v20 + 56);
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t v21 = a1[2];
  if (*(_DWORD *)(v21 + 300))
  {
    if (!*(unsigned char *)(v21 + 307)) {
      operator new();
    }
    long long v88 = 0u;
    long long v89 = 0u;
    long long v86 = 0u;
    long long v87 = 0u;
    long long v84 = 0u;
    long long v85 = 0u;
    long long v82 = 0u;
    long long v83 = 0u;
    long long v81 = 0u;
    long long v79 = 0u;
    memset(v80, 0, sizeof(v80));
    *(_OWORD *)__dst = 0u;
    memset(v77, 0, sizeof(v77));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v77);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"Streaming decoding not compatible with 'use-sentencepiece-ids'", 62);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v77);
  }
  if (!*(unsigned char *)(*(void *)a2 + 128))
  {
    uint64_t v24 = a1[3];
    if (v24)
    {
      *(unsigned char *)(v24 + 306) = 0;
      uint64_t v25 = *a1;
      if (*(unsigned char *)(v21 + 307))
      {
LABEL_42:
        kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>::Decode<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(v25, (uint64_t)&__p, v24, (uint64_t)&v69);
        goto LABEL_43;
      }
      goto LABEL_112;
    }
  }
  *(unsigned char *)(v21 + 306) = *(unsigned char *)(*(void *)a2 + 128);
  uint64_t v23 = *a1;
  if (*(unsigned char *)(v21 + 307))
  {
    kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>::Decode<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(v23, (uint64_t)&__p, v21, (uint64_t)&v69);
    uint64_t v24 = a1[4];
    if (v24 && v69 != v70 && v69[7].i32[0] == 4)
    {
      if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v77);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"Repetitions detected, re-decoding with changed parameters.", 58);
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v77);
        uint64_t v24 = a1[4];
      }
      uint64_t v25 = *a1;
      goto LABEL_42;
    }
  }
  else
  {
    kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>::Decode<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(v23, (uint64_t)v75, v21, (uint64_t)&v69);
    uint64_t v24 = a1[4];
    if (v24 && v69 != v70 && v69[7].i32[0] == 4)
    {
      if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v77);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"Repetitions detected, re-decoding with changed parameters.", 58);
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v77);
        uint64_t v24 = a1[4];
      }
      uint64_t v25 = *a1;
LABEL_112:
      kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>::Decode<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(v25, (uint64_t)v75, v24, (uint64_t)&v69);
    }
  }
LABEL_43:
  long long v26 = v69;
  uint64_t v51 = v70;
  if (v69 != v70)
  {
    while (1)
    {
      __int32 v27 = v26[5].i32[0];
      quasar::TranslationPhraseInternal::TranslationPhraseInternal((quasar::TranslationPhraseInternal *)&v57);
      int32x2_t v28 = *v26;
      int32x2_t v29 = v26[1];
      while (*(void *)&v28 != *(void *)&v29)
      {
        __dst[0] = 0;
        __dst[1] = 0;
        *(void *)&long long v79 = 0;
        memset(v77, 0, 26);
        *((void *)&v79 + 1) = 3212836864;
        LODWORD(v80[0]) = -1;
        memset(&v80[1], 0, 56);
        *(void *)&long long v81 = -1;
        std::string::operator=((std::string *)v77, *(const std::string **)&v28);
        LODWORD(v80[0]) = *(_DWORD *)(*(void *)&v28 + 24);
        float v30 = *(float *)(*(void *)&v28 + 84);
        float v31 = *(float *)(*(void *)&v28 + 80) + v30;
        HIDWORD(v80[4]) = *(_DWORD *)(*(void *)&v28 + 80);
        *((float *)&v79 + std::__function::__value_func<BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::~__value_func[abi:ne180100](this + 3) = v31;
        *(float *)&v80[4] = v30;
        *((float *)&v79 + 2) = (float)*(int *)(*(void *)&v28 + 232);
        std::vector<int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>((std::vector<int> *)__dst, (uint64_t)__dst[1], *(char **)(*(void *)&v28 + 88), *(char **)(*(void *)&v28 + 96), (uint64_t)(*(void *)(*(void *)&v28 + 96) - *(void *)(*(void *)&v28 + 88)) >> 2);
        std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((uint64_t)&v80[5], (uint64_t)v80[6], *(char **)(*(void *)&v28 + 136), *(char **)(*(void *)&v28 + 144), (uint64_t)(*(void *)(*(void *)&v28 + 144) - *(void *)(*(void *)&v28 + 136)) >> 2);
        v77[24] = 1;
        uint64_t v32 = v62;
        if ((unint64_t)v62 >= v63)
        {
          std::string v33 = (std::string *)std::vector<quasar::TranslationTokenInternal>::__push_back_slow_path<quasar::TranslationTokenInternal const&>((uint64_t *)&v61, (const quasar::TranslationTokenInternal *)v77);
        }
        else
        {
          quasar::TranslationTokenInternal::TranslationTokenInternal(v62, (const quasar::TranslationTokenInternal *)v77);
          std::string v33 = (std::string *)((char *)v32 + 136);
        }
        float v62 = v33;
        if (v80[5])
        {
          v80[6] = v80[5];
          operator delete(v80[5]);
        }
        if (SHIBYTE(v80[3]) < 0) {
          operator delete(v80[1]);
        }
        if (__dst[0])
        {
          __dst[1] = __dst[0];
          operator delete(__dst[0]);
        }
        if ((v77[23] & 0x80000000) != 0) {
          operator delete(*(void **)v77);
        }
        *(void *)&v28 += 240;
      }
      if (v61 != v62 || !*(unsigned char *)(*(void *)a2 + 128)) {
        break;
      }
LABEL_98:
      quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)&v57);
      v26 += 34;
      if (v26 == v51) {
        goto LABEL_99;
      }
    }
    LODWORD(v57) = v27;
    int32x2_t v64 = vrev64_s32(v26[3]);
    int32x2_t v35 = *v26;
    int32x2_t v34 = v26[1];
    if (*(void *)&v34 == *v26)
    {
      LODWORD(v37) = 0;
    }
    else
    {
      LODWORD(v36) = 0;
      do
      {
        unint64_t v36 = *(int *)(*(void *)&v35 + 232) + (uint64_t)(int)v36;
        *(void *)&v35 += 240;
      }
      while (*(void *)&v35 != *(void *)&v34);
      unint64_t v37 = v36 / (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(void *)&v34 - *(void *)v26) >> 4));
    }
    *((float *)&v57 + 1) = (float)(int)v37;
    BOOL v58 = *(float *)(a1[2] + 176) > (float)(int)v37;
    if (v61 != v62) {
      v62[-5].__r_.__value_.__s.__data_[8] = 0;
    }
    kaldi::quasar::TranslationUtil::NbestElement::GetMetaInfo((kaldi::quasar::TranslationUtil::NbestElement *)v26, &v55);
    quasar::PTree::PTree((quasar::PTree *)&v54);
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v55.__r_.__value_.__l.__size_ != 2) {
        goto LABEL_74;
      }
      unsigned __int8 v38 = (std::string *)v55.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) != 2) {
        goto LABEL_74;
      }
      unsigned __int8 v38 = &v55;
    }
    if (LOWORD(v38->__r_.__value_.__l.__data_) != 32123)
    {
LABEL_74:
      if (quasar::gLogLevel >= 4)
      {
        long long v88 = 0u;
        long long v89 = 0u;
        long long v86 = 0u;
        long long v87 = 0u;
        long long v84 = 0u;
        long long v85 = 0u;
        long long v82 = 0u;
        long long v83 = 0u;
        long long v81 = 0u;
        long long v79 = 0u;
        memset(v80, 0, sizeof(v80));
        *(_OWORD *)__dst = 0u;
        memset(v77, 0, sizeof(v77));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v77);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"Using meta data from phrasebook loaded inside of PDec - deprecated in MT production!", 84);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v77);
      }
      std::istringstream::basic_istringstream[abi:ne180100]((uint64_t *)v77, &v55, 8);
      quasar::PTree::readJson();
    }
    uint64_t v39 = v56[0];
    uint64_t v40 = v56[1];
    while (v39 != v40)
    {
      quasar::PTree::PTree(v77, v39 + 24);
      quasar::PTree::putChild((uint64_t)&v54, v39, (uint64_t)v77, 1);
      quasar::PTree::~PTree((quasar::PTree *)v77);
      v39 += 48;
    }
    uint64_t v41 = quasar::PTree::begin((quasar::PTree *)&v54);
    uint64_t v42 = quasar::PTree::end((quasar::PTree *)&v54);
    while (1)
    {
      if (v41 == v42)
      {
        quasar::MetaInfo::update(&v65, (const quasar::PTree *)&v66);
        char v60 = *(unsigned char *)(a1[2] + 307);
        char v59 = *(unsigned char *)(*(void *)a2 + 128);
        unint64_t v48 = a4[1];
        if (v48 >= a4[2])
        {
          uint64_t v49 = std::vector<quasar::TranslationPhraseInternal>::__push_back_slow_path<quasar::TranslationPhraseInternal const&>(a4, (const quasar::TranslationPhraseInternal *)&v57);
          uint64_t v50 = a4;
        }
        else
        {
          quasar::TranslationPhraseInternal::TranslationPhraseInternal((std::string *)a4[1], (const quasar::TranslationPhraseInternal *)&v57);
          uint64_t v49 = v48 + 200;
          uint64_t v50 = a4;
          a4[1] = v48 + 200;
        }
        v50[1] = v49;
        quasar::PTree::~PTree((quasar::PTree *)&v54);
        *(void *)int v77 = v56;
        std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)v77);
        if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v55.__r_.__value_.__l.__data_);
        }
        goto LABEL_98;
      }
      int v43 = *(char *)(v41 + 23);
      if (v43 < 0)
      {
        if (*(void *)(v41 + 8) != 15) {
          goto LABEL_91;
        }
        long long v44 = *(uint64_t **)v41;
      }
      else
      {
        long long v44 = (uint64_t *)v41;
        if (v43 != 15) {
          goto LABEL_91;
        }
      }
      uint64_t v45 = *v44;
      uint64_t v46 = *(uint64_t *)((char *)v44 + 7);
      if (v45 == 0x65746C6966657270 && v46 == 0x7475706E69207265)
      {
        std::string::basic_string[abi:ne180100]<0>(v77, "prefilter input");
        quasar::PTree::getChildOptional((uint64_t)&v66, (uint64_t)v77);
      }
LABEL_91:
      quasar::PTree::putChild((uint64_t)&v66, v41, v41 + 24, 1);
      v41 += 88;
    }
  }
LABEL_99:
  if (*(unsigned char *)(*(void *)a2 + 128)) {
    quasar::PDecEngineBlockMixin::replaceDegenerateTranslation((uint64_t)a1, a2, (quasar::TranslationPhraseInternal **)a4, a3, *(unsigned __int8 *)(a1[2] + 307));
  }
  quasar::PTree::~PTree((quasar::PTree *)&v66);
  *(void *)int v77 = &v69;
  std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__destroy_vector::operator()[abi:ne180100]((void ***)v77);
  if (__p)
  {
    unint64_t v73 = (char *)__p;
    operator delete(__p);
  }
  if (v76 < 0) {
    operator delete(v75[0]);
  }
}

void sub_1B231E6E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, unint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)&a35);
  STACK[0x220] = (unint64_t)&a29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x220]);
  STACK[0x220] = (unint64_t)&a21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x220]);
  STACK[0x220] = a20;
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x220]);
  quasar::PTree::~PTree((quasar::PTree *)&a60);
  STACK[0x220] = (unint64_t)&a68;
  std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x220]);
  if (a71)
  {
    a72 = a71;
    operator delete(a71);
  }
  if (SLOBYTE(STACK[0x21F]) < 0) {
    operator delete((void *)STACK[0x208]);
  }
  _Unwind_Resume(a1);
}

void sub_1B231E740(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B231E910);
}

void sub_1B231E758()
{
}

void sub_1B231E760()
{
}

void sub_1B231E780()
{
}

void sub_1B231E798()
{
}

void sub_1B231E7A8()
{
}

void sub_1B231E7B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

void sub_1B231E7CC()
{
}

void sub_1B231E80C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  *(void *)(a20 + 8) = v29;
  quasar::PTree::~PTree((quasar::PTree *)&a21);
  std::pair<std::string,std::vector<std::pair<std::string,std::string>>>::~pair(&a29);
  JUMPOUT(0x1B231E8C0);
}

void sub_1B231E820(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
}

void sub_1B231E838(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
}

void sub_1B231E840()
{
}

void sub_1B231E848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, unint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  STACK[0x220] = a20;
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&STACK[0x220]);
  quasar::PTree::~PTree((quasar::PTree *)&a60);
  STACK[0x220] = (unint64_t)&a68;
  std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__destroy_vector::operator()[abi:ne180100](&STACK[0x220]);
  if (a71)
  {
    a72 = a71;
    operator delete(a71);
  }
  if (SLOBYTE(STACK[0x21F]) < 0) {
    operator delete((void *)STACK[0x208]);
  }
  _Unwind_Resume(a1);
}

void sub_1B231E858(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  if (SLOBYTE(STACK[0x237]) < 0) {
    operator delete((void *)STACK[0x220]);
  }
  quasar::PTree::~PTree((quasar::PTree *)&a21);
  std::pair<std::string,std::vector<std::pair<std::string,std::string>>>::~pair((uint64_t)&a29);
  JUMPOUT(0x1B231E8C0);
}

void sub_1B231E870()
{
}

void sub_1B231E884(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
}

void sub_1B231E88C()
{
}

uint64_t kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>::NumActiveHyps(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 5888);
  if (v1 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  uint64_t v4 = &v3;
  return ((uint64_t (*)(char **, uint64_t))off_1F0A64410[v1])(&v4, a1);
}

uint64_t kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>::Init<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v5[0] = a2;
  v5[1] = a3;
  uint64_t v3 = *(unsigned int *)(a1 + 5888);
  if (v3 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  uint64_t v6 = v5;
  return ((uint64_t (*)(void **, uint64_t))off_1F0A64420[v3])(&v6, a1);
}

uint64_t kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>::StaticReadWrite<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  v7[0] = a2;
  v7[1] = a3;
  uint64_t v7[2] = a4;
  char v8 = a5;
  uint64_t v5 = *(unsigned int *)(a1 + 5888);
  if (v5 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  uint64_t v9 = v7;
  return ((uint64_t (*)(void **, uint64_t))off_1F0A64430[v5])(&v9, a1);
}

uint64_t kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>::GetRawNbest<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v5[0] = a2;
  v5[1] = a3;
  uint64_t v3 = *(unsigned int *)(a1 + 5888);
  if (v3 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  uint64_t v6 = v5;
  return ((uint64_t (*)(void **, uint64_t))off_1F0A64440[v3])(&v6, a1);
}

uint64_t kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>::Decode<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v6[0] = a2;
  v6[1] = a3;
  void v6[2] = a4;
  uint64_t v4 = *(unsigned int *)(a1 + 5888);
  if (v4 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  uint64_t v7 = v6;
  return ((uint64_t (*)(void **, uint64_t))off_1F0A64450[v4])(&v7, a1);
}

{
  uint64_t v4;
  void v6[3];
  void *v7;

  v6[0] = a2;
  v6[1] = a3;
  void v6[2] = a4;
  uint64_t v4 = *(unsigned int *)(a1 + 5888);
  if (v4 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  uint64_t v7 = v6;
  return ((uint64_t (*)(void **, uint64_t))off_1F0A64460[v4])(&v7, a1);
}

void kaldi::quasar::TranslationUtil::NbestElement::GetMetaInfo(kaldi::quasar::TranslationUtil::NbestElement *this@<X0>, std::string *a2@<X8>)
{
  memset(&v23, 0, sizeof(v23));
  if ((*((_DWORD *)this + 14) - 5) >= 2)
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(&v21, "source", "decoder");
    std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](&v23, (long long *)&v21);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v21.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v4 = (_OWORD *)((char *)this + 120);
  if (*((char *)this + 143) < 0)
  {
    std::string::__init_copy_ctor_external(&v21, *((const std::string::value_type **)this + 15), *((void *)this + 16));
  }
  else
  {
    *(_OWORD *)&v21.__r_.__value_.__l.__data_ = *v4;
    v21.__r_.__value_.__r.__words[2] = *((void *)this + 17);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = v21.__r_.__value_.__l.__size_;
    operator delete(v21.__r_.__value_.__l.__data_);
    if (!size) {
      goto LABEL_22;
    }
  }
  else if (!*((unsigned char *)&v21.__r_.__value_.__s + 23))
  {
    goto LABEL_22;
  }
  if (*((char *)this + 143) < 0)
  {
    std::string::__init_copy_ctor_external(&v20, *((const std::string::value_type **)this + 15), *((void *)this + 16));
  }
  else
  {
    *(_OWORD *)&v20.__r_.__value_.__l.__data_ = *v4;
    v20.__r_.__value_.__r.__words[2] = *((void *)this + 17);
  }
  std::string::basic_string[abi:ne180100]<0>(&v21, "prefilter input");
  std::string __p = v20;
  memset(&v20, 0, sizeof(v20));
  std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](&v23, (long long *)&v21);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
LABEL_22:
  if (*((char *)this + 167) < 0) {
    std::string::__init_copy_ctor_external(&v20, *((const std::string::value_type **)this + 18), *((void *)this + 19));
  }
  else {
    std::string v20 = *(std::string *)((unsigned char *)this + 6);
  }
  std::string::basic_string[abi:ne180100]<0>(&v21, "input");
  std::string __p = v20;
  memset(&v20, 0, sizeof(v20));
  std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](&v23, (long long *)&v21);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  kaldi::quasar::TranslationUtil::NbestElement::OutputWordString(this, &v20);
  std::string::basic_string[abi:ne180100]<0>(&v21, "output");
  std::string __p = v20;
  memset(&v20, 0, sizeof(v20));
  std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](&v23, (long long *)&v21);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  uint64_t v19 = *((void *)this + 3);
  kaldi::quasar::TranslationUtil::NbestElement::NumToString<fst::LatticeWeightTpl<float>>((uint64_t)this, (float *)&v19);
  std::string::basic_string[abi:ne180100]<0>(&v21, "cost");
  std::string __p = v20;
  memset(&v20, 0, sizeof(v20));
  std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](&v23, (long long *)&v21);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  kaldi::quasar::TranslationUtil::NbestElement::NumToString<float>();
  std::string::basic_string[abi:ne180100]<0>(&v21, "norm_cost");
  std::string __p = v20;
  memset(&v20, 0, sizeof(v20));
  std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](&v23, (long long *)&v21);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  switch(*((_DWORD *)this + 14))
  {
    case 2:
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(&v21, "status", "vetoed");
      std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](&v23, (long long *)&v21);
      break;
    case 3:
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(&v21, "status", "stopped");
      std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](&v23, (long long *)&v21);
      break;
    case 4:
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(&v21, "status", "aborted");
      std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](&v23, (long long *)&v21);
      break;
    case 5:
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[17],0>(&v21, "status", "phrasebook_exact");
      std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](&v23, (long long *)&v21);
      break;
    case 6:
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[17],0>(&v21, "status", "phrasebook_fuzzy");
      std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](&v23, (long long *)&v21);
      break;
    default:
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(&v21, "status", "fine");
      std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](&v23, (long long *)&v21);
      break;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (*((char *)this + 87) < 0)
  {
    uint64_t v7 = (char *)*((void *)this + 8);
    uint64_t v6 = *((void *)this + 9);
  }
  else
  {
    uint64_t v6 = *((unsigned __int8 *)this + 87);
    uint64_t v7 = (char *)this + 64;
  }
  if (v6 >= 14)
  {
    char v8 = &v7[v6];
    uint64_t v9 = v7;
    do
    {
      uint64_t v10 = memchr(v9, 34, v6 - 13);
      if (!v10) {
        break;
      }
      BOOL v11 = *v10 == 0x7A696E616D6F7222 && *(void *)((char *)v10 + 6) == 0x226E6F6974617A69;
      if (v11)
      {
        if (v10 != (void *)v8 && (char *)v10 - v7 != -1) {
          goto LABEL_82;
        }
        break;
      }
      uint64_t v9 = (char *)v10 + 1;
      uint64_t v6 = v8 - (unsigned char *)v9;
    }
    while (v8 - (unsigned char *)v9 >= 14);
  }
  if (*((char *)this + 119) < 0)
  {
    if (!*((void *)this + 13)) {
      goto LABEL_82;
    }
  }
  else if (!*((unsigned char *)this + 119))
  {
    goto LABEL_82;
  }
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],std::string const&,0>(&v21, "romanization", (long long *)this + 6);
  std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](&v23, (long long *)&v21);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
LABEL_82:
  kaldi::quasar::TranslationUtil::NbestElement::ConfidenceString(this, &v20);
  std::string::basic_string[abi:ne180100]<0>(&v21, "word confidences");
  std::string __p = v20;
  memset(&v20, 0, sizeof(v20));
  std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](&v23, (long long *)&v21);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (*((void *)this + 28) != *((void *)this + 27) && *((unsigned char *)this + 88))
  {
    kaldi::quasar::TranslationUtil::NbestElement::RawConfidenceString(this, &v20);
    std::string::basic_string[abi:ne180100]<0>(&v21, "subword confidences");
    std::string __p = v20;
    memset(&v20, 0, sizeof(v20));
    std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](&v23, (long long *)&v21);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v21.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v13 = *(void *)this;
  uint64_t v12 = *((void *)this + 1);
  if (v12 != *(void *)this)
  {
    int v14 = 0;
    do
    {
      v14 += *(_DWORD *)(v13 + 232);
      v13 += 240;
    }
    while (v13 != v12);
  }
  kaldi::quasar::TranslationUtil::NbestElement::NumToString<int>();
  std::string::basic_string[abi:ne180100]<0>(&v21, "sentence confidence");
  std::string __p = v20;
  memset(&v20, 0, sizeof(v20));
  std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](&v23, (long long *)&v21);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  uint64_t v15 = "true";
  if (!*((unsigned char *)this + 240)) {
    uint64_t v15 = "false";
  }
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const*,0>(&v21, "low confidence", &v20.__r_.__value_.__l.__data_);
  std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](&v23, (long long *)&v21);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (*((unsigned char *)this + 88))
  {
    kaldi::quasar::TranslationUtil::NbestElement::RawSubWordString((uint64_t *)&v20, this);
    std::string::basic_string[abi:ne180100]<0>(&v21, "subword string");
    std::string __p = v20;
    memset(&v20, 0, sizeof(v20));
    std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](&v23, (long long *)&v21);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v21.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
  }
  unint64_t v16 = (kaldi::quasar::TranslationUtil::NbestElement *)*((void *)this + 31);
  if (v16 != (kaldi::quasar::TranslationUtil::NbestElement *)((char *)this + 256))
  {
    do
    {
      kaldi::quasar::TranslationUtil::NbestElement::NumToString<double>();
      if (*((char *)v16 + 55) < 0) {
        std::string::__init_copy_ctor_external(&v21, *((const std::string::value_type **)v16 + 4), *((void *)v16 + 5));
      }
      else {
        std::string v21 = *(std::string *)((char *)v16 + 32);
      }
      std::string __p = v20;
      memset(&v20, 0, sizeof(v20));
      std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](&v23, (long long *)&v21);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v21.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v20.__r_.__value_.__l.__data_);
      }
      BOOL v17 = (kaldi::quasar::TranslationUtil::NbestElement *)*((void *)v16 + 1);
      if (v17)
      {
        do
        {
          uint64_t v18 = v17;
          BOOL v17 = *(kaldi::quasar::TranslationUtil::NbestElement **)v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          uint64_t v18 = (kaldi::quasar::TranslationUtil::NbestElement *)*((void *)v16 + 2);
          BOOL v11 = *(void *)v18 == (void)v16;
          unint64_t v16 = v18;
        }
        while (!v11);
      }
      unint64_t v16 = v18;
    }
    while (v18 != (kaldi::quasar::TranslationUtil::NbestElement *)((char *)this + 256));
  }
  std::pair<std::string,std::vector<std::pair<std::string,std::string>>>::pair[abi:ne180100]<std::string const&,std::vector<std::pair<std::string,std::string>>&,0>(a2, (long long *)this + 4, (long long **)&v23);
  v21.__r_.__value_.__r.__words[0] = (std::string::size_type)&v23;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
}

void sub_1B231F43C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  a18 = &a25;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string,std::vector<std::pair<std::string,std::string>>>::~pair(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 24);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t quasar::PDecEngineBlockMixin::setGlobalMapPtrs(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = a2;
  *(void *)(result + 48) = a3;
  return result;
}

void quasar::PDecEngineBlockMixin::createPhrasebookList(void *a1@<X0>, const std::string *a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  char v53 = a3;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  kaldi::SplitStringToVector(a2, ",", 1, (uint64_t)&v50);
  uint64_t v6 = v50;
  for (uint64_t i = v51; v6 != i; v6 += 24)
  {
    long long v49 = 0uLL;
    if (!a1) {
      goto LABEL_20;
    }
    char v8 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(a1, (unsigned __int8 *)v6);
    uint64_t v9 = v8;
    if (v8)
    {
      uint64_t v10 = (std::__shared_weak_count *)*((void *)v8 + 6);
      if (v10 && (uint64_t v10 = std::__shared_weak_count::lock(v10)) != 0) {
        uint64_t v11 = *((void *)v9 + 5);
      }
      else {
        uint64_t v11 = 0;
      }
      uint64_t v12 = (std::__shared_weak_count *)*((void *)&v49 + 1);
      *(void *)&long long v49 = v11;
      *((void *)&v49 + 1) = v10;
      if (v12)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        uint64_t v11 = v49;
      }
      if (v11)
      {
        std::vector<std::shared_ptr<kaldi::quasar::PhraseBook>>::push_back[abi:ne180100](a4, &v49);
        if (quasar::gLogLevel >= 5)
        {
          long long v47 = 0u;
          long long v48 = 0u;
          long long v45 = 0u;
          long long v46 = 0u;
          long long v43 = 0u;
          long long v44 = 0u;
          long long v41 = 0u;
          long long v42 = 0u;
          long long v39 = 0u;
          long long v40 = 0u;
          long long v37 = 0u;
          long long v38 = 0u;
          long long v35 = 0u;
          long long v36 = 0u;
          long long v33 = 0u;
          long long v34 = 0u;
          *(_OWORD *)std::string __p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"use shared phrasebook: ", 23);
          int v14 = *(char *)(v6 + 23);
          if (v14 >= 0) {
            uint64_t v15 = v6;
          }
          else {
            uint64_t v15 = *(void *)v6;
          }
          if (v14 >= 0) {
            uint64_t v16 = *(unsigned __int8 *)(v6 + 23);
          }
          else {
            uint64_t v16 = *(void *)(v6 + 8);
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v15, v16);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
        }
      }
    }
    if (!(void)v49)
    {
LABEL_20:
      std::allocate_shared[abi:ne180100]<kaldi::quasar::PhraseBook,std::allocator<kaldi::quasar::PhraseBook>,BOOL &,void>(&v53, __p);
      long long v17 = *(_OWORD *)__p;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v18 = (std::__shared_weak_count *)*((void *)&v49 + 1);
      long long v49 = v17;
      if (v18)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v18);
        if (__p[1]) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
        }
      }
      uint64_t v19 = v49;
      *(unsigned char *)(v49 + 68) = v53;
      if (kaldi::quasar::PhraseBook::ReadRaw(v19, v6, 0))
      {
        std::vector<std::shared_ptr<kaldi::quasar::PhraseBook>>::push_back[abi:ne180100](a4, &v49);
        if (quasar::gLogLevel >= 5)
        {
          long long v47 = 0u;
          long long v48 = 0u;
          long long v45 = 0u;
          long long v46 = 0u;
          long long v43 = 0u;
          long long v44 = 0u;
          long long v41 = 0u;
          long long v42 = 0u;
          long long v39 = 0u;
          long long v40 = 0u;
          long long v37 = 0u;
          long long v38 = 0u;
          long long v35 = 0u;
          long long v36 = 0u;
          long long v33 = 0u;
          long long v34 = 0u;
          *(_OWORD *)std::string __p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          std::string v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"load phrasebook: ", 17);
          int v21 = *(char *)(v6 + 23);
          if (v21 >= 0) {
            uint64_t v22 = v6;
          }
          else {
            uint64_t v22 = *(void *)v6;
          }
          if (v21 >= 0) {
            uint64_t v23 = *(unsigned __int8 *)(v6 + 23);
          }
          else {
            uint64_t v23 = *(void *)(v6 + 8);
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v22, v23);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
        }
        if (a1)
        {
          std::pair<std::string,std::shared_ptr<quasar::InverseTextNormalizer>>::pair[abi:ne180100]<true,0>((std::string *)__p, (long long *)v6, (std::string::size_type *)&v49);
          std::__hash_table<std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::shared_ptr<kaldi::quasar::PhraseBook>>>((uint64_t)a1, (unsigned __int8 *)__p, (uint64_t)__p);
          if ((void)v34) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v34);
          }
          if (SBYTE7(v33) < 0) {
            operator delete(__p[0]);
          }
          if (quasar::gLogLevel >= 5)
          {
            long long v47 = 0u;
            long long v48 = 0u;
            long long v45 = 0u;
            long long v46 = 0u;
            long long v43 = 0u;
            long long v44 = 0u;
            long long v41 = 0u;
            long long v42 = 0u;
            long long v39 = 0u;
            long long v40 = 0u;
            long long v37 = 0u;
            long long v38 = 0u;
            long long v35 = 0u;
            long long v36 = 0u;
            long long v33 = 0u;
            long long v34 = 0u;
            *(_OWORD *)std::string __p = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
            uint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Cache phrasebook: ", 18);
            int v25 = *(char *)(v6 + 23);
            if (v25 >= 0) {
              uint64_t v26 = v6;
            }
            else {
              uint64_t v26 = *(void *)v6;
            }
            if (v25 >= 0) {
              uint64_t v27 = *(unsigned __int8 *)(v6 + 23);
            }
            else {
              uint64_t v27 = *(void *)(v6 + 8);
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, v26, v27);
            quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
          }
        }
      }
      else if (quasar::gLogLevel >= 1)
      {
        long long v47 = 0u;
        long long v48 = 0u;
        long long v45 = 0u;
        long long v46 = 0u;
        long long v43 = 0u;
        long long v44 = 0u;
        long long v41 = 0u;
        long long v42 = 0u;
        long long v39 = 0u;
        long long v40 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        long long v33 = 0u;
        long long v34 = 0u;
        *(_OWORD *)std::string __p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        int32x2_t v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"failed loading phrasebook: ", 27);
        int v29 = *(char *)(v6 + 23);
        if (v29 >= 0) {
          uint64_t v30 = v6;
        }
        else {
          uint64_t v30 = *(void *)v6;
        }
        if (v29 >= 0) {
          uint64_t v31 = *(unsigned __int8 *)(v6 + 23);
        }
        else {
          uint64_t v31 = *(void *)(v6 + 8);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, v30, v31);
        quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__p);
      }
    }
    if (*((void *)&v49 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v49 + 1));
    }
  }
  __p[0] = &v50;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1B231F950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  a9 = (void **)(v9 - 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void **std::vector<std::shared_ptr<kaldi::quasar::PhraseBook>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  double result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    int v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)result, v13);
    uint64_t v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    uint64_t v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)uint64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    void v18[2] = v15 + 16;
    std::vector<std::shared_ptr<kaldi::quasar::PhraseBook>>::__swap_out_circular_buffer(a1, v18);
    uint64_t v9 = (void *)a1[1];
    double result = std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer(v18);
  }
  else
  {
    *uint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_1B231FAEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void quasar::TranslatorOptions::~TranslatorOptions(quasar::TranslatorOptions *this)
{
  uint64_t v2 = (char *)this + 8343;
  *(void *)this = &unk_1F0A53DD8;
  *((void *)this + 1064) = &unk_1F0A51E20;
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy((uint64_t)this + 8648, *((void **)this + 1082));
  long long v41 = (void **)((char *)this + 8616);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v41);
  *((void *)this + 1064) = &unk_1F0A52FB8;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 1076);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (v2[248] < 0) {
    operator delete(*((void **)this + 1071));
  }
  if (v2[224] < 0) {
    operator delete(*((void **)this + 1068));
  }
  if (v2[200] < 0) {
    operator delete(*((void **)this + 1065));
  }
  *((void *)this + 1039) = &unk_1F0A51DB0;
  std::__tree<std::__value_type<std::string,quasar::PTree>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::PTree>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::PTree>>>::destroy((uint64_t)this + 8488, *((void **)this + 1062));
  quasar::PTree::~PTree((quasar::TranslatorOptions *)((char *)this + 8416));
  *((void *)this + 1039) = &unk_1F0A52FB8;
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 1051);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (v2[48] < 0) {
    operator delete(*((void **)this + 1046));
  }
  if (v2[24] < 0) {
    operator delete(*((void **)this + 1043));
  }
  if (*v2 < 0) {
    operator delete(*((void **)this + 1040));
  }
  *((void *)this + 1021) = &unk_1F0A51E58;
  std::__tree<std::string>::destroy((uint64_t)this + 8288, *((char **)this + 1037));
  *((void *)this + 1021) = &unk_1F0A52FB8;
  unint64_t v5 = (std::__shared_weak_count *)*((void *)this + 1033);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (*((char *)this + 8247) < 0) {
    operator delete(*((void **)this + 1028));
  }
  if (*((char *)this + 8223) < 0) {
    operator delete(*((void **)this + 1025));
  }
  if (*((char *)this + 8199) < 0) {
    operator delete(*((void **)this + 1022));
  }
  *((void *)this + 100std::__function::__value_func<BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::~__value_func[abi:ne180100](this + 3) = &unk_1F0A51E58;
  std::__tree<std::string>::destroy((uint64_t)this + 8144, *((char **)this + 1019));
  *((void *)this + 100std::__function::__value_func<BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::~__value_func[abi:ne180100](this + 3) = &unk_1F0A52FB8;
  unint64_t v6 = (std::__shared_weak_count *)*((void *)this + 1015);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (*((char *)this + 8103) < 0) {
    operator delete(*((void **)this + 1010));
  }
  if (*((char *)this + 8079) < 0) {
    operator delete(*((void **)this + 1007));
  }
  if (*((char *)this + 8055) < 0) {
    operator delete(*((void **)this + 1004));
  }
  *((void *)this + 985) = &unk_1F0A51E90;
  std::__tree<std::string>::destroy((uint64_t)this + 8000, *((char **)this + 1001));
  *((void *)this + 985) = &unk_1F0A52FB8;
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 997);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (*((char *)this + 7959) < 0) {
    operator delete(*((void **)this + 992));
  }
  if (*((char *)this + 7935) < 0) {
    operator delete(*((void **)this + 989));
  }
  if (*((char *)this + 7911) < 0) {
    operator delete(*((void **)this + 986));
  }
  *((void *)this + 967) = &unk_1F0A51E58;
  std::__tree<std::string>::destroy((uint64_t)this + 7856, *((char **)this + 983));
  *((void *)this + 967) = &unk_1F0A52FB8;
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 979);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (*((char *)this + 7815) < 0) {
    operator delete(*((void **)this + 974));
  }
  if (*((char *)this + 7791) < 0) {
    operator delete(*((void **)this + 971));
  }
  if (*((char *)this + 7767) < 0) {
    operator delete(*((void **)this + 968));
  }
  *((void *)this + 942) = &unk_1F0A51DB0;
  std::__tree<std::__value_type<std::string,quasar::PTree>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::PTree>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::PTree>>>::destroy((uint64_t)this + 7712, *((void **)this + 965));
  quasar::PTree::~PTree((quasar::TranslatorOptions *)((char *)this + 7640));
  *((void *)this + 942) = &unk_1F0A52FB8;
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 954);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (*((char *)this + 7615) < 0) {
    operator delete(*((void **)this + 949));
  }
  if (*((char *)this + 7591) < 0) {
    operator delete(*((void **)this + 946));
  }
  if (*((char *)this + 7567) < 0) {
    operator delete(*((void **)this + 943));
  }
  *((void *)this + 9++*(_DWORD *)(result + 24) = &unk_1F0A51E58;
  std::__tree<std::string>::destroy((uint64_t)this + 7512, *((char **)this + 940));
  *((void *)this + 9++*(_DWORD *)(result + 24) = &unk_1F0A52FB8;
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 936);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (*((char *)this + 7471) < 0) {
    operator delete(*((void **)this + 931));
  }
  if (*((char *)this + 7447) < 0) {
    operator delete(*((void **)this + 928));
  }
  if (*((char *)this + 7423) < 0) {
    operator delete(*((void **)this + 925));
  }
  *((void *)this + 906) = &unk_1F0A51EC8;
  std::__tree<std::string>::destroy((uint64_t)this + 7368, *((char **)this + 922));
  *((void *)this + 906) = &unk_1F0A52FB8;
  unint64_t v11 = (std::__shared_weak_count *)*((void *)this + 918);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (*((char *)this + 7327) < 0) {
    operator delete(*((void **)this + 913));
  }
  if (*((char *)this + 7303) < 0) {
    operator delete(*((void **)this + 910));
  }
  if (*((char *)this + 7279) < 0) {
    operator delete(*((void **)this + 907));
  }
  *((void *)this + 888) = &unk_1F0A51EC8;
  std::__tree<std::string>::destroy((uint64_t)this + 7224, *((char **)this + 904));
  *((void *)this + 888) = &unk_1F0A52FB8;
  uint64_t v12 = (std::__shared_weak_count *)*((void *)this + 900);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (*((char *)this + 7183) < 0) {
    operator delete(*((void **)this + 895));
  }
  if (*((char *)this + 7159) < 0) {
    operator delete(*((void **)this + 892));
  }
  if (*((char *)this + 7135) < 0) {
    operator delete(*((void **)this + 889));
  }
  *((void *)this + 87std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = &unk_1F0A51EC8;
  std::__tree<std::string>::destroy((uint64_t)this + 7080, *((char **)this + 886));
  *((void *)this + 87std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = &unk_1F0A52FB8;
  unint64_t v13 = (std::__shared_weak_count *)*((void *)this + 882);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (*((char *)this + 7039) < 0) {
    operator delete(*((void **)this + 877));
  }
  if (*((char *)this + 7015) < 0) {
    operator delete(*((void **)this + 874));
  }
  if (*((char *)this + 6991) < 0) {
    operator delete(*((void **)this + 871));
  }
  *((void *)this + 8--*(_DWORD *)(a9 + 52) = &unk_1F0A51EC8;
  std::__tree<std::string>::destroy((uint64_t)this + 6936, *((char **)this + 868));
  *((void *)this + 8--*(_DWORD *)(a9 + 52) = &unk_1F0A52FB8;
  int v14 = (std::__shared_weak_count *)*((void *)this + 864);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (*((char *)this + 6895) < 0) {
    operator delete(*((void **)this + 859));
  }
  if (*((char *)this + 6871) < 0) {
    operator delete(*((void **)this + 856));
  }
  if (*((char *)this + 6847) < 0) {
    operator delete(*((void **)this + 853));
  }
  *((void *)this + 834) = &unk_1F0A51EC8;
  std::__tree<std::string>::destroy((uint64_t)this + 6792, *((char **)this + 850));
  *((void *)this + 834) = &unk_1F0A52FB8;
  uint64_t v15 = (std::__shared_weak_count *)*((void *)this + 846);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (*((char *)this + 6751) < 0) {
    operator delete(*((void **)this + 841));
  }
  if (*((char *)this + 6727) < 0) {
    operator delete(*((void **)this + 838));
  }
  if (*((char *)this + 6703) < 0) {
    operator delete(*((void **)this + 835));
  }
  *((void *)this + 816) = &unk_1F0A51EC8;
  std::__tree<std::string>::destroy((uint64_t)this + 6648, *((char **)this + 832));
  *((void *)this + 816) = &unk_1F0A52FB8;
  uint64_t v16 = (std::__shared_weak_count *)*((void *)this + 828);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (*((char *)this + 6607) < 0) {
    operator delete(*((void **)this + 823));
  }
  if (*((char *)this + 6583) < 0) {
    operator delete(*((void **)this + 820));
  }
  if (*((char *)this + 6559) < 0) {
    operator delete(*((void **)this + 817));
  }
  *((void *)this + 796) = &unk_1F0A51DE8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 6504, *((void **)this + 814));
  if (*((char *)this + 6495) < 0) {
    operator delete(*((void **)this + 809));
  }
  *((void *)this + 796) = &unk_1F0A52FB8;
  long long v17 = (std::__shared_weak_count *)*((void *)this + 808);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (*((char *)this + 6447) < 0) {
    operator delete(*((void **)this + 803));
  }
  if (*((char *)this + 6423) < 0) {
    operator delete(*((void **)this + 800));
  }
  if (*((char *)this + 6399) < 0) {
    operator delete(*((void **)this + 797));
  }
  *((void *)this + 776) = &unk_1F0A51DE8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 6344, *((void **)this + 794));
  if (*((char *)this + 6335) < 0) {
    operator delete(*((void **)this + 789));
  }
  *((void *)this + 776) = &unk_1F0A52FB8;
  uint64_t v18 = (std::__shared_weak_count *)*((void *)this + 788);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if (*((char *)this + 6287) < 0) {
    operator delete(*((void **)this + 783));
  }
  if (*((char *)this + 6263) < 0) {
    operator delete(*((void **)this + 780));
  }
  if (*((char *)this + 6239) < 0) {
    operator delete(*((void **)this + 777));
  }
  *((void *)this + 756) = &unk_1F0A51DE8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 6184, *((void **)this + 774));
  if (*((char *)this + 6175) < 0) {
    operator delete(*((void **)this + 769));
  }
  *((void *)this + 756) = &unk_1F0A52FB8;
  uint64_t v19 = (std::__shared_weak_count *)*((void *)this + 768);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (*((char *)this + 6127) < 0) {
    operator delete(*((void **)this + 763));
  }
  if (*((char *)this + 6103) < 0) {
    operator delete(*((void **)this + 760));
  }
  if (*((char *)this + 6079) < 0) {
    operator delete(*((void **)this + 757));
  }
  *((void *)this + 736) = &unk_1F0A51DE8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 6024, *((void **)this + 754));
  if (*((char *)this + 6015) < 0) {
    operator delete(*((void **)this + 749));
  }
  *((void *)this + 736) = &unk_1F0A52FB8;
  std::string v20 = (std::__shared_weak_count *)*((void *)this + 748);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  if (*((char *)this + 5967) < 0) {
    operator delete(*((void **)this + 743));
  }
  if (*((char *)this + 5943) < 0) {
    operator delete(*((void **)this + 740));
  }
  if (*((char *)this + 5919) < 0) {
    operator delete(*((void **)this + 737));
  }
  *((void *)this + 716) = &unk_1F0A51DE8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 5864, *((void **)this + 734));
  if (*((char *)this + 5855) < 0) {
    operator delete(*((void **)this + 729));
  }
  *((void *)this + 716) = &unk_1F0A52FB8;
  int v21 = (std::__shared_weak_count *)*((void *)this + 728);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  if (*((char *)this + 5807) < 0) {
    operator delete(*((void **)this + 723));
  }
  if (*((char *)this + 5783) < 0) {
    operator delete(*((void **)this + 720));
  }
  if (*((char *)this + 5759) < 0) {
    operator delete(*((void **)this + 717));
  }
  *((void *)this + 698) = &unk_1F0A51EC8;
  std::__tree<std::string>::destroy((uint64_t)this + 5704, *((char **)this + 714));
  *((void *)this + 698) = &unk_1F0A52FB8;
  uint64_t v22 = (std::__shared_weak_count *)*((void *)this + 710);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  if (*((char *)this + 5663) < 0) {
    operator delete(*((void **)this + 705));
  }
  if (*((char *)this + 5639) < 0) {
    operator delete(*((void **)this + 702));
  }
  if (*((char *)this + 5615) < 0) {
    operator delete(*((void **)this + 699));
  }
  *((void *)this + 68std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = &unk_1F0A51E90;
  std::__tree<std::string>::destroy((uint64_t)this + 5560, *((char **)this + 696));
  *((void *)this + 68std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = &unk_1F0A52FB8;
  uint64_t v23 = (std::__shared_weak_count *)*((void *)this + 692);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  if (*((char *)this + 5519) < 0) {
    operator delete(*((void **)this + 687));
  }
  if (*((char *)this + 5495) < 0) {
    operator delete(*((void **)this + 684));
  }
  if (*((char *)this + 5471) < 0) {
    operator delete(*((void **)this + 681));
  }
  *((void *)this + 662) = &unk_1F0A51EC8;
  std::__tree<std::string>::destroy((uint64_t)this + 5416, *((char **)this + 678));
  *((void *)this + 662) = &unk_1F0A52FB8;
  uint64_t v24 = (std::__shared_weak_count *)*((void *)this + 674);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  if (*((char *)this + 5375) < 0) {
    operator delete(*((void **)this + 669));
  }
  if (*((char *)this + 5351) < 0) {
    operator delete(*((void **)this + 666));
  }
  if (*((char *)this + 5327) < 0) {
    operator delete(*((void **)this + 663));
  }
  *((void *)this + 644) = &unk_1F0A51E58;
  std::__tree<std::string>::destroy((uint64_t)this + 5272, *((char **)this + 660));
  *((void *)this + 644) = &unk_1F0A52FB8;
  int v25 = (std::__shared_weak_count *)*((void *)this + 656);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  if (*((char *)this + 5231) < 0) {
    operator delete(*((void **)this + 651));
  }
  if (*((char *)this + 5207) < 0) {
    operator delete(*((void **)this + 648));
  }
  if (*((char *)this + 5183) < 0) {
    operator delete(*((void **)this + 645));
  }
  *((void *)this + 626) = &unk_1F0A51E90;
  std::__tree<std::string>::destroy((uint64_t)this + 5128, *((char **)this + 642));
  *((void *)this + 626) = &unk_1F0A52FB8;
  uint64_t v26 = (std::__shared_weak_count *)*((void *)this + 638);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  if (*((char *)this + 5087) < 0) {
    operator delete(*((void **)this + 633));
  }
  if (*((char *)this + 5063) < 0) {
    operator delete(*((void **)this + 630));
  }
  if (*((char *)this + 5039) < 0) {
    operator delete(*((void **)this + 627));
  }
  *((void *)this + 608) = &unk_1F0A51E90;
  std::__tree<std::string>::destroy((uint64_t)this + 4984, *((char **)this + 624));
  *((void *)this + 608) = &unk_1F0A52FB8;
  uint64_t v27 = (std::__shared_weak_count *)*((void *)this + 620);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  if (*((char *)this + 4943) < 0) {
    operator delete(*((void **)this + 615));
  }
  if (*((char *)this + 4919) < 0) {
    operator delete(*((void **)this + 612));
  }
  if (*((char *)this + 4895) < 0) {
    operator delete(*((void **)this + 609));
  }
  *((void *)this + 588) = &unk_1F0A51DE8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 4840, *((void **)this + 606));
  if (*((char *)this + 4831) < 0) {
    operator delete(*((void **)this + 601));
  }
  *((void *)this + 588) = &unk_1F0A52FB8;
  int32x2_t v28 = (std::__shared_weak_count *)*((void *)this + 600);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  if (*((char *)this + 4783) < 0) {
    operator delete(*((void **)this + 595));
  }
  if (*((char *)this + 4759) < 0) {
    operator delete(*((void **)this + 592));
  }
  if (*((char *)this + 4735) < 0) {
    operator delete(*((void **)this + 589));
  }
  *((void *)this + 57std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = &unk_1F0A51E58;
  std::__tree<std::string>::destroy((uint64_t)this + 4680, *((char **)this + 586));
  *((void *)this + 57std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = &unk_1F0A52FB8;
  int v29 = (std::__shared_weak_count *)*((void *)this + 582);
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  if (*((char *)this + 4639) < 0) {
    operator delete(*((void **)this + 577));
  }
  if (*((char *)this + 4615) < 0) {
    operator delete(*((void **)this + 574));
  }
  if (*((char *)this + 4591) < 0) {
    operator delete(*((void **)this + 571));
  }
  *((void *)this + 5--*(_DWORD *)(a9 + 52) = &unk_1F0A51EC8;
  std::__tree<std::string>::destroy((uint64_t)this + 4536, *((char **)this + 568));
  *((void *)this + 5--*(_DWORD *)(a9 + 52) = &unk_1F0A52FB8;
  uint64_t v30 = (std::__shared_weak_count *)*((void *)this + 564);
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  if (*((char *)this + 4495) < 0) {
    operator delete(*((void **)this + 559));
  }
  if (*((char *)this + 4471) < 0) {
    operator delete(*((void **)this + 556));
  }
  if (*((char *)this + 4447) < 0) {
    operator delete(*((void **)this + 553));
  }
  *((void *)this + 534) = &unk_1F0A51E58;
  std::__tree<std::string>::destroy((uint64_t)this + 4392, *((char **)this + 550));
  *((void *)this + 534) = &unk_1F0A52FB8;
  uint64_t v31 = (std::__shared_weak_count *)*((void *)this + 546);
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  if (*((char *)this + 4351) < 0) {
    operator delete(*((void **)this + 541));
  }
  if (*((char *)this + 4327) < 0) {
    operator delete(*((void **)this + 538));
  }
  if (*((char *)this + 4303) < 0) {
    operator delete(*((void **)this + 535));
  }
  *((void *)this + 516) = &unk_1F0A51E90;
  std::__tree<std::string>::destroy((uint64_t)this + 4248, *((char **)this + 532));
  *((void *)this + 516) = &unk_1F0A52FB8;
  uint64_t v32 = (std::__shared_weak_count *)*((void *)this + 528);
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  if (*((char *)this + 4207) < 0) {
    operator delete(*((void **)this + 523));
  }
  if (*((char *)this + 4183) < 0) {
    operator delete(*((void **)this + 520));
  }
  if (*((char *)this + 4159) < 0) {
    operator delete(*((void **)this + 517));
  }
  *((void *)this + 498) = &unk_1F0A51E90;
  std::__tree<std::string>::destroy((uint64_t)this + 4104, *((char **)this + 514));
  *((void *)this + 498) = &unk_1F0A52FB8;
  long long v33 = (std::__shared_weak_count *)*((void *)this + 510);
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  if (*((char *)this + 4063) < 0) {
    operator delete(*((void **)this + 505));
  }
  if (*((char *)this + 4039) < 0) {
    operator delete(*((void **)this + 502));
  }
  if (*((char *)this + 4015) < 0) {
    operator delete(*((void **)this + 499));
  }
  *((void *)this + 478) = &unk_1F0A51DE8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 3960, *((void **)this + 496));
  if (*((char *)this + 3951) < 0) {
    operator delete(*((void **)this + 491));
  }
  *((void *)this + 478) = &unk_1F0A52FB8;
  long long v34 = (std::__shared_weak_count *)*((void *)this + 490);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  if (*((char *)this + 3903) < 0) {
    operator delete(*((void **)this + 485));
  }
  if (*((char *)this + 3879) < 0) {
    operator delete(*((void **)this + 482));
  }
  if (*((char *)this + 3855) < 0) {
    operator delete(*((void **)this + 479));
  }
  *((void *)this + 46std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = &unk_1F0A51E90;
  std::__tree<std::string>::destroy((uint64_t)this + 3800, *((char **)this + 476));
  *((void *)this + 46std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = &unk_1F0A52FB8;
  long long v35 = (std::__shared_weak_count *)*((void *)this + 472);
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  if (*((char *)this + 3759) < 0) {
    operator delete(*((void **)this + 467));
  }
  if (*((char *)this + 3735) < 0) {
    operator delete(*((void **)this + 464));
  }
  if (*((char *)this + 3711) < 0) {
    operator delete(*((void **)this + 461));
  }
  *((void *)this + 442) = &unk_1F0A51EC8;
  std::__tree<std::string>::destroy((uint64_t)this + 3656, *((char **)this + 458));
  *((void *)this + 442) = &unk_1F0A52FB8;
  long long v36 = (std::__shared_weak_count *)*((void *)this + 454);
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  if (*((char *)this + 3615) < 0) {
    operator delete(*((void **)this + 449));
  }
  if (*((char *)this + 3591) < 0) {
    operator delete(*((void **)this + 446));
  }
  if (*((char *)this + 3567) < 0) {
    operator delete(*((void **)this + 443));
  }
  *((void *)this + 4++*(_DWORD *)(result + 24) = &unk_1F0A51E90;
  std::__tree<std::string>::destroy((uint64_t)this + 3512, *((char **)this + 440));
  *((void *)this + 4++*(_DWORD *)(result + 24) = &unk_1F0A52FB8;
  long long v37 = (std::__shared_weak_count *)*((void *)this + 436);
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  if (*((char *)this + 3471) < 0) {
    operator delete(*((void **)this + 431));
  }
  if (*((char *)this + 3447) < 0) {
    operator delete(*((void **)this + 428));
  }
  if (*((char *)this + 3423) < 0) {
    operator delete(*((void **)this + 425));
  }
  *((void *)this + 406) = &unk_1F0A51E90;
  std::__tree<std::string>::destroy((uint64_t)this + 3368, *((char **)this + 422));
  *((void *)this + 406) = &unk_1F0A52FB8;
  long long v38 = (std::__shared_weak_count *)*((void *)this + 418);
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  if (*((char *)this + 3327) < 0) {
    operator delete(*((void **)this + 413));
  }
  if (*((char *)this + 3303) < 0) {
    operator delete(*((void **)this + 410));
  }
  if (*((char *)this + 3279) < 0) {
    operator delete(*((void **)this + 407));
  }
  *((void *)this + 388) = &unk_1F0A51EC8;
  std::__tree<std::string>::destroy((uint64_t)this + 3224, *((char **)this + 404));
  *((void *)this + 388) = &unk_1F0A52FB8;
  long long v39 = (std::__shared_weak_count *)*((void *)this + 400);
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
  if (*((char *)this + 3183) < 0) {
    operator delete(*((void **)this + 395));
  }
  if (*((char *)this + 3159) < 0) {
    operator delete(*((void **)this + 392));
  }
  if (*((char *)this + 3135) < 0) {
    operator delete(*((void **)this + 389));
  }
  *((void *)this + 368) = &unk_1F0A51DE8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 3080, *((void **)this + 386));
  if (*((char *)this + 3071) < 0) {
    operator delete(*((void **)this + 381));
  }
  *((void *)this + 368) = &unk_1F0A52FB8;
  long long v40 = (std::__shared_weak_count *)*((void *)this + 380);
  if (v40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  }
  if (*((char *)this + 3023) < 0) {
    operator delete(*((void **)this + 375));
  }
  if (*((char *)this + 2999) < 0) {
    operator delete(*((void **)this + 372));
  }
  if (*((char *)this + 2975) < 0) {
    operator delete(*((void **)this + 369));
  }
  quasar::PDecOptions::~PDecOptions(this);
}

{
  uint64_t vars8;

  quasar::TranslatorOptions::~TranslatorOptions(this);
  JUMPOUT(0x1B3EA8670);
}

uint64_t quasar::OptionValue<std::vector<std::string>>::~OptionValue(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A51E20;
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(a1 + 136, *(void **)(a1 + 144));
  uint64_t v4 = (void **)(a1 + 104);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  *(void *)a1 = &unk_1F0A52FB8;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 96);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void quasar::TranslatorOptions::TranslatorOptions(void *a1, uint64_t a2, uint64_t a3)
{
  *(void *)quasar::PDecOptions::PDecOptions((quasar::PDecOptions *)a1) = &unk_1F0A53DD8;
  std::string::basic_string[abi:ne180100]<0>(v8, "model-file");
  std::string::basic_string[abi:ne180100]<0>(&v10, "");
  std::string::basic_string[abi:ne180100]<0>(&v9, "mt model file name");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)(a1 + 368), v8, &v10, &v9, 35);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "beam");
  LODWORD(v9.__r_.__value_.__l.__data_) = 4;
  std::string::basic_string[abi:ne180100]<0>(&v10, "maximum number of active beams in pruning");
  uint64_t v7 = a1 + 388;
  quasar::OptionValue<int>::OptionValue((uint64_t)(a1 + 388), v8, &v9, &v10, 35);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "as-beam");
  v9.__r_.__value_.__r.__words[0] = 0x41E0000000000000;
  std::string::basic_string[abi:ne180100]<0>(&v10, "as_beam pruning value");
  quasar::OptionValue<double>::OptionValue((uint64_t)(a1 + 406), v8, &v9, &v10, 96);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "rs-beam");
  v9.__r_.__value_.__r.__words[0] = 0x41E0000000000000;
  std::string::basic_string[abi:ne180100]<0>(&v10, "rs_beam pruning value");
  quasar::OptionValue<double>::OptionValue((uint64_t)(a1 + 424), v8, &v9, &v10, 96);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "beam-batch");
  LODWORD(v9.__r_.__value_.__l.__data_) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v10, "beam batch size for (espresso) decoder model (0 = off, -1 = any)");
  quasar::OptionValue<int>::OptionValue((uint64_t)(a1 + 442), v8, &v9, &v10, 213);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "confidence-threshold");
  v9.__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v10, "confidence threshold");
  quasar::OptionValue<double>::OptionValue((uint64_t)(a1 + 460), v8, &v9, &v10, 35);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "lm-model-file");
  std::string::basic_string[abi:ne180100]<0>(&v10, "");
  std::string::basic_string[abi:ne180100]<0>(&v9, "path to language model file");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)(a1 + 478), v8, &v10, &v9, 35);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "lm-weight");
  v9.__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v10, "language model weight");
  quasar::OptionValue<double>::OptionValue((uint64_t)(a1 + 498), v8, &v9, &v10, 35);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "veto-factor");
  v9.__r_.__value_.__r.__words[0] = 0x3FE0000000000000;
  std::string::basic_string[abi:ne180100]<0>(&v10, "MT defcoding veto factor");
  quasar::OptionValue<double>::OptionValue((uint64_t)(a1 + 516), v8, &v9, &v10, 35);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "veto-factor-exclude-input-tags");
  v9.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v10, "MT decoding, exclude input tags in  veto factor computation");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)(a1 + 534), v8, &v9, &v10, 138);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "veto-factor-num-external-input-tags");
  LODWORD(v9.__r_.__value_.__l.__data_) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v10, "MT decoding, num externally provided tags to exclude for veto factor");
  quasar::OptionValue<int>::OptionValue((uint64_t)(a1 + 552), v8, &v9, &v10, 138);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "norm-costs");
  v9.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v10, "normalize costs in mt decoding? (backward compatible version)");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)(a1 + 570), v8, &v9, &v10, 35);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "norm-mode");
  std::string::basic_string[abi:ne180100]<0>(&v10, "off");
  std::string::basic_string[abi:ne180100]<0>(&v9, "normalize costs in mt decoding? (off|length|gnmt)");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)(a1 + 588), v8, &v10, &v9, 97);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "norm-alpha");
  v9.__r_.__value_.__r.__words[0] = 0x3FF0000000000000;
  std::string::basic_string[abi:ne180100]<0>(&v10, "normalization alpha parameter");
  quasar::OptionValue<double>::OptionValue((uint64_t)(a1 + 608), v8, &v9, &v10, 97);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "norm-sigma");
  v9.__r_.__value_.__r.__words[0] = 0x4014000000000000;
  std::string::basic_string[abi:ne180100]<0>(&v10, "normalization sigma parameter");
  quasar::OptionValue<double>::OptionValue((uint64_t)(a1 + 626), v8, &v9, &v10, 97);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "unk-replace");
  v9.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v10, "oov");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)(a1 + 644), v8, &v9, &v10, 35);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "max-seq-length");
  LODWORD(v9.__r_.__value_.__l.__data_) = 100;
  std::string::basic_string[abi:ne180100]<0>(&v10, "maximum decoding sequence length");
  quasar::OptionValue<int>::OptionValue((uint64_t)(a1 + 662), v8, &v9, &v10, 35);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "max-seq-length-relative");
  v9.__r_.__value_.__r.__words[0] = 0xBFF0000000000000;
  std::string::basic_string[abi:ne180100]<0>(&v10, "maximum decoding sequence length as factor of input length");
  quasar::OptionValue<double>::OptionValue((uint64_t)(a1 + 680), v8, &v9, &v10, 160);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "max-seq-length-floor");
  LODWORD(v9.__r_.__value_.__l.__data_) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v10, "maximum decoding sequence length floor (used with input length factor)");
  quasar::OptionValue<int>::OptionValue((uint64_t)(a1 + 698), v8, &v9, &v10, 160);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "lm-mode");
  std::string::basic_string[abi:ne180100]<0>(&v10, "");
  std::string::basic_string[abi:ne180100]<0>(&v9, "lm mode");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)(a1 + 716), v8, &v10, &v9, 35);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "confidence-model-file");
  std::string::basic_string[abi:ne180100]<0>(&v10, "");
  std::string::basic_string[abi:ne180100]<0>(&v9, "confidence model file");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)(a1 + 736), v8, &v10, &v9, 35);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "stop-mode");
  std::string::basic_string[abi:ne180100]<0>(&v10, "");
  std::string::basic_string[abi:ne180100]<0>(&v9, "stop mode in mt decoding (nbeam|best|finished_score)");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)(a1 + 756), v8, &v10, &v9, 99);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "block-control");
  std::string::basic_string[abi:ne180100]<0>(&v10, "");
  std::string::basic_string[abi:ne180100]<0>(&v9, "flow control for block sequence (<empty>|optional|optional_stop_on_success)");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)(a1 + 776), v8, &v10, &v9, 106);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "shortlist-lang-pair");
  std::string::basic_string[abi:ne180100]<0>(&v10, "");
  std::string::basic_string[abi:ne180100]<0>(&v9, "language pair used for shortlist");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)(a1 + 796), v8, &v10, &v9, 121);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "shortlist-cond-n");
  LODWORD(v9.__r_.__value_.__l.__data_) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v10, "top n in condition table used for shortlist");
  quasar::OptionValue<int>::OptionValue((uint64_t)(a1 + 816), v8, &v9, &v10, 121);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "shortlist-freq-n");
  LODWORD(v9.__r_.__value_.__l.__data_) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v10, "top n in freq words used for shortlist");
  quasar::OptionValue<int>::OptionValue((uint64_t)(a1 + 834), v8, &v9, &v10, 121);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "nbest");
  std::string::basic_string[abi:ne180100]<0>(&v10, "maximum entries in nbest list to produce (default to same as 'beam'}");
  uint64_t v4 = (_DWORD *)quasar::OptionValue<int>::value(v7);
  quasar::OptionValue<int>::OptionValue((uint64_t)(a1 + 852), v8, v4, &v10, 35);
  a1[866] = v7;
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "stop-mode-finished-score-beam");
  LODWORD(v9.__r_.__value_.__l.__data_) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v10, "number of finished hypotheses considered for finished score stop mode (default: 1)");
  quasar::OptionValue<int>::OptionValue((uint64_t)(a1 + 870), v8, &v9, &v10, 99);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "stream-buffer-n");
  LODWORD(v9.__r_.__value_.__l.__data_) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v10, "stream decoding initial read length (effective read buffer)");
  quasar::OptionValue<int>::OptionValue((uint64_t)(a1 + 888), v8, &v9, &v10, 129);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "stream-block-m");
  LODWORD(v9.__r_.__value_.__l.__data_) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v10, "stream decoding read/write length (block size for looped read/write calls)");
  quasar::OptionValue<int>::OptionValue((uint64_t)(a1 + 906), v8, &v9, &v10, 129);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "stream-stabilize");
  v9.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v10, "stabilize partial stream decoding results after each read/write block");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)(a1 + 924), v8, &v9, &v10, 129);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v10, "partial-input-override");
  quasar::PTree::PTree((quasar::PTree *)v8);
  std::string::basic_string[abi:ne180100]<0>(&v9, "optional override parameter block to change parameter settings for partial-input processing");
  quasar::OptionValue<quasar::PTree>::OptionValue((uint64_t)(a1 + 942), &v10, (uint64_t)v8, &v9, 229);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  quasar::PTree::~PTree((quasar::PTree *)v8);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "timing-meta-info");
  v9.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v10, "include decoder timing information in meta info json");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)(a1 + 967), v8, &v9, &v10, 240);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "repetition-threshold");
  v9.__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v10, "probility threshold for detecting repetitions");
  quasar::OptionValue<double>::OptionValue((uint64_t)(a1 + 985), v8, &v9, &v10, 269);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "abort-on-repetitions");
  v9.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v10, "abort decoding on detecting repetitions");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)(a1 + 1003), v8, &v9, &v10, 269);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "redecode-on-repetitions");
  v9.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v10, "retry decoding without shortlist on detecting repetitions");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)(a1 + 1021), v8, &v9, &v10, 269);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v10, "redecode-override");
  quasar::PTree::PTree((quasar::PTree *)v8);
  std::string::basic_string[abi:ne180100]<0>(&v9, "optional override parameter block to change parameter settings for redecode");
  quasar::OptionValue<quasar::PTree>::OptionValue((uint64_t)(a1 + 1039), &v10, (uint64_t)v8, &v9, 269);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  quasar::PTree::~PTree((quasar::PTree *)v8);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "shortlist-suppress-tokens");
  memset(&v10, 0, sizeof(v10));
  quasar::OptionValue<std::vector<std::string>>::OptionValue((uint64_t)(a1 + 1064), v8, (uint64_t)&v10, &v9, 121);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  v9.__r_.__value_.__r.__words[0] = (std::string::size_type)&v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v9);
  if (SHIBYTE(v8[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8[0].__r_.__value_.__l.__data_);
  }
  quasar::OptionsBase::update((void (***)(void **__return_ptr))a1, a2, a3);
}

void sub_1B2322208(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  *(void *)(v46 - 216) = a1;
  quasar::OptionValue<std::vector<std::string>>::~OptionValue(v38);
  quasar::OptionValue<quasar::PTree>::~OptionValue(v42);
  quasar::OptionValue<BOOL>::~OptionValue(v41);
  quasar::OptionValue<BOOL>::~OptionValue(v40);
  quasar::OptionValue<double>::~OptionValue(v39);
  quasar::OptionValue<BOOL>::~OptionValue(v37);
  quasar::OptionValue<quasar::PTree>::~OptionValue(v45);
  quasar::OptionValue<BOOL>::~OptionValue(v44);
  quasar::OptionValue<int>::~OptionValue(v43);
  quasar::OptionValue<int>::~OptionValue(a9);
  quasar::OptionValue<int>::~OptionValue(a10);
  quasar::OptionValue<int>::~OptionValue(a11);
  quasar::OptionValue<int>::~OptionValue(a12);
  quasar::OptionValue<int>::~OptionValue(a13);
  quasar::OptionValue<std::string>::~OptionValue(a14);
  quasar::OptionValue<std::string>::~OptionValue(a15);
  quasar::OptionValue<std::string>::~OptionValue(a16);
  quasar::OptionValue<std::string>::~OptionValue(a17);
  quasar::OptionValue<std::string>::~OptionValue(a18);
  quasar::OptionValue<int>::~OptionValue(a19);
  quasar::OptionValue<double>::~OptionValue(a20);
  quasar::OptionValue<int>::~OptionValue(a21);
  quasar::OptionValue<BOOL>::~OptionValue(a22);
  quasar::OptionValue<double>::~OptionValue(a23);
  quasar::OptionValue<double>::~OptionValue(a24);
  quasar::OptionValue<std::string>::~OptionValue(a25);
  quasar::OptionValue<BOOL>::~OptionValue(a26);
  quasar::OptionValue<int>::~OptionValue(a27);
  quasar::OptionValue<BOOL>::~OptionValue(a28);
  quasar::OptionValue<double>::~OptionValue(a29);
  quasar::OptionValue<double>::~OptionValue(a30);
  quasar::OptionValue<std::string>::~OptionValue(a31);
  quasar::OptionValue<double>::~OptionValue(a32);
  quasar::OptionValue<int>::~OptionValue(a33);
  quasar::OptionValue<double>::~OptionValue(a34);
  quasar::OptionValue<double>::~OptionValue(a35);
  quasar::OptionValue<int>::~OptionValue(*(void *)(v46 - 208));
  quasar::OptionValue<std::string>::~OptionValue(a36);
  quasar::PDecOptions::~PDecOptions(v36);
  _Unwind_Resume(*(_Unwind_Exception **)(v46 - 216));
}

void sub_1B23223DC(uint64_t a1)
{
  *(void *)(v1 - 216) = a1;
  if (*(char *)(v1 - 89) < 0) {
    operator delete(*(void **)(v1 - 112));
  }
  if (*(char *)(v1 - 177) < 0) {
    operator delete(*(void **)(v1 - 200));
  }
  JUMPOUT(0x1B23222B4);
}

void sub_1B232240C(uint64_t a1)
{
  *(void *)(v1 - 216) = a1;
  JUMPOUT(0x1B23222B4);
}

void sub_1B2322414(uint64_t a1)
{
  *(void *)(v1 - 216) = a1;
  if (*(char *)(v1 - 89) < 0) {
    operator delete(*(void **)(v1 - 112));
  }
  if (*(char *)(v1 - 177) < 0) {
    operator delete(*(void **)(v1 - 200));
  }
  JUMPOUT(0x1B23222BCLL);
}

void sub_1B2322444(uint64_t a1)
{
  *(void *)(v1 - 216) = a1;
  JUMPOUT(0x1B23222BCLL);
}

void sub_1B232244C(uint64_t a1)
{
  *(void *)(v1 - 216) = a1;
  if (*(char *)(v1 - 89) < 0) {
    operator delete(*(void **)(v1 - 112));
  }
  if (*(char *)(v1 - 177) < 0) {
    operator delete(*(void **)(v1 - 200));
  }
  JUMPOUT(0x1B23222C4);
}

void sub_1B232247C(uint64_t a1)
{
  *(void *)(v1 - 216) = a1;
  JUMPOUT(0x1B23222C4);
}

void sub_1B2322484(uint64_t a1)
{
  *(void *)(v1 - 216) = a1;
  if (*(char *)(v1 - 89) < 0) {
    operator delete(*(void **)(v1 - 112));
  }
  if (*(char *)(v1 - 177) < 0) {
    operator delete(*(void **)(v1 - 200));
  }
  JUMPOUT(0x1B23222CCLL);
}

void sub_1B23224B4(uint64_t a1)
{
  *(void *)(v1 - 216) = a1;
  JUMPOUT(0x1B23222CCLL);
}

void sub_1B23224BC(uint64_t a1)
{
  *(void *)(v1 - 216) = a1;
  if (*(char *)(v1 - 113) < 0) {
    operator delete(*(void **)(v1 - 136));
  }
  quasar::PTree::~PTree((quasar::PTree *)(v1 - 200));
  if (*(char *)(v1 - 89) < 0) {
    operator delete(*(void **)(v1 - 112));
  }
  JUMPOUT(0x1B23222D4);
}

void sub_1B23224FC(uint64_t a1)
{
  *(void *)(v1 - 216) = a1;
  JUMPOUT(0x1B23222D4);
}

void sub_1B2322504(uint64_t a1)
{
  *(void *)(v1 - 216) = a1;
  if (*(char *)(v1 - 89) < 0) {
    operator delete(*(void **)(v1 - 112));
  }
  if (*(char *)(v1 - 177) < 0) {
    operator delete(*(void **)(v1 - 200));
  }
  JUMPOUT(0x1B23222DCLL);
}

void sub_1B2322534(uint64_t a1)
{
  *(void *)(v1 - 216) = a1;
  JUMPOUT(0x1B23222DCLL);
}

void sub_1B232253C(uint64_t a1)
{
  *(void *)(v1 - 216) = a1;
  if (*(char *)(v1 - 89) < 0) {
    operator delete(*(void **)(v1 - 112));
  }
  if (*(char *)(v1 - 177) < 0) {
    operator delete(*(void **)(v1 - 200));
  }
  JUMPOUT(0x1B23222E4);
}

void sub_1B232256C(uint64_t a1)
{
  *(void *)(v1 - 216) = a1;
  JUMPOUT(0x1B23222E4);
}

void sub_1B2322574(uint64_t a1)
{
  *(void *)(v1 - 216) = a1;
  if (*(char *)(v1 - 89) < 0) {
    operator delete(*(void **)(v1 - 112));
  }
  if (*(char *)(v1 - 177) < 0) {
    operator delete(*(void **)(v1 - 200));
  }
  JUMPOUT(0x1B23222ECLL);
}

void sub_1B23225A4(uint64_t a1)
{
  *(void *)(v1 - 216) = a1;
  JUMPOUT(0x1B23222ECLL);
}

void sub_1B23225AC(uint64_t a1)
{
  *(void *)(v1 - 216) = a1;
  if (*(char *)(v1 - 89) < 0) {
    operator delete(*(void **)(v1 - 112));
  }
  if (*(char *)(v1 - 177) < 0) {
    operator delete(*(void **)(v1 - 200));
  }
  JUMPOUT(0x1B23222F4);
}

void sub_1B23225DC(uint64_t a1)
{
  *(void *)(v1 - 216) = a1;
  JUMPOUT(0x1B23222F4);
}

void sub_1B23225E4(uint64_t a1)
{
  *(void *)(v1 - 216) = a1;
  if (*(char *)(v1 - 177) < 0) {
    operator delete(*(void **)(v1 - 200));
  }
  JUMPOUT(0x1B23222FCLL);
}

void *quasar::TranslatorOptions::options@<X0>(quasar::TranslatorOptions *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  double result = operator new(0x1B8uLL);
  *double result = (char *)this + 16;
  result[1] = (char *)this + 2944;
  result[2] = (char *)this + 3104;
  result[3] = (char *)this + 3248;
  result[4] = (char *)this + 3392;
  result[5] = (char *)this + 3536;
  result[6] = (char *)this + 6816;
  result[7] = (char *)this + 3680;
  result[8] = (char *)this + 3824;
  result[9] = (char *)this + 3984;
  result[10] = (char *)this + 4128;
  result[11] = (char *)this + 4272;
  result[12] = (char *)this + 4416;
  result[13] = (char *)this + 4560;
  result[14] = (char *)this + 4704;
  result[15] = (char *)this + 4864;
  result[16] = (char *)this + 5008;
  result[17] = (char *)this + 5152;
  result[18] = (char *)this + 5296;
  result[19] = (char *)this + 5440;
  result[20] = (char *)this + 5584;
  result[21] = (char *)this + 176;
  result[22] = (char *)this + 320;
  result[23] = (char *)this + 5728;
  result[24] = (char *)this + 480;
  result[25] = (char *)this + 640;
  result[26] = (char *)this + 784;
  result[27] = (char *)this + 944;
  result[28] = (char *)this + 5888;
  result[29] = (char *)this + 1088;
  result[30] = (char *)this + 1248;
  result[31] = (char *)this + 1552;
  result[32] = (char *)this + 2016;
  result[33] = (char *)this + 2176;
  result[34] = (char *)this + 1696;
  result[35] = (char *)this + 1856;
  result[36] = (char *)this + 6048;
  result[37] = (char *)this + 6960;
  result[38] = (char *)this + 6208;
  result[39] = (char *)this + 6368;
  result[40] = (char *)this + 6528;
  result[41] = (char *)this + 6672;
  result[42] = (char *)this + 7104;
  result[43] = (char *)this + 7248;
  result[44] = (char *)this + 7392;
  result[45] = (char *)this + 2656;
  result[46] = (char *)this + 2800;
  result[47] = (char *)this + 7536;
  result[48] = (char *)this + 7736;
  result[49] = (char *)this + 2336;
  result[50] = (char *)this + 7880;
  result[51] = (char *)this + 8024;
  result[52] = (char *)this + 8168;
  result[53] = (char *)this + 8312;
  result[54] = (char *)this + 8512;
  *a2 = result;
  a2[1] = result + 55;
  a2[2] = result + 55;
  return result;
}

void quasar::TranslatorOptions::setLocales(uint64_t a1, const std::string *a2, const std::string *a3)
{
  std::string::basic_string[abi:ne180100]<0>(&__str, "<constructor argument>");
  std::string::operator=((std::string *)(a1 + 1800), a2);
  std::string::operator=((std::string *)(a1 + 1728), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__str, "<constructor argument>");
  std::string::operator=((std::string *)(a1 + 1960), a3);
  std::string::operator=((std::string *)(a1 + 1888), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_1B2322F3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::PDecTranslatorBlock::~PDecTranslatorBlock(quasar::PDecTranslatorBlock *this, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v4 - 24)) = a2[3];
  unint64_t v5 = (std::__shared_weak_count *)*((void *)this + 3266);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  quasar::TranslatorOptions::~TranslatorOptions((quasar::PDecTranslatorBlock *)((char *)this + 17448));
  quasar::TranslatorOptions::~TranslatorOptions((quasar::PDecTranslatorBlock *)((char *)this + 8776));
  unint64_t v6 = (std::__shared_weak_count *)*((void *)this + 1096);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v7 = *((void *)this + 1094);
  *((void *)this + 1094) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 48))(v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 1093);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  std::unique_ptr<kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::reset[abi:ne180100]((uint64_t *)this + 1089, 0);
  std::unique_ptr<kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::reset[abi:ne180100]((uint64_t *)this + 1088, 0);
  std::unique_ptr<kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::reset[abi:ne180100]((uint64_t *)this + 1087, 0);
  std::string v9 = (std::__shared_weak_count *)*((void *)this + 1086);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  uint64_t v10 = a2[1];
  *(void *)this = v10;
  *(void *)((char *)this + *(void *)(v10 - 24)) = a2[2];
  quasar::TranslatorOptions::~TranslatorOptions((quasar::PDecTranslatorBlock *)((char *)this + 8));
}

void quasar::PDecTranslatorBlock::~PDecTranslatorBlock(quasar::PDecTranslatorBlock *this)
{
  quasar::ProcessingBlock::~ProcessingBlock((char **)(v1 + 26136));
}

{
  uint64_t v1;
  uint64_t vars8;

  quasar::ProcessingBlock::~ProcessingBlock((char **)(v1 + 26136));
  JUMPOUT(0x1B3EA8670);
}

void virtual thunk to'quasar::PDecTranslatorBlock::~PDecTranslatorBlock(quasar::PDecTranslatorBlock *this)
{
  uint64_t v2 = (char **)(v1 + 26136);
  quasar::ProcessingBlock::~ProcessingBlock(v2);
}

{
  quasar::PDecTranslatorBlock::~PDecTranslatorBlock((quasar::PDecTranslatorBlock *)((char *)this
                                                                                  + *(void *)(*(void *)this - 24)));
}

void quasar::PDecTranslatorBlock::updateConfiguration(uint64_t a1, quasar::SystemConfig *a2, uint64_t a3, uint64_t a4)
{
  quasar::ProcessingBlock::updateConfiguration(a1 + *(void *)(*(void *)a1 - 24), (uint64_t)a2, a3, a4);
  ModelLoaderPtr = (uint64_t *)quasar::SystemConfig::getModelLoaderPtr(a2);
  uint64_t v10 = *ModelLoaderPtr;
  uint64_t v9 = ModelLoaderPtr[1];
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 876std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = v10;
  unint64_t v11 = *(std::__shared_weak_count **)(a1 + 8768);
  *(void *)(a1 + 8768) = v9;
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  quasar::OptionsBase::update((void (***)(void **__return_ptr))(a1 + 8776), a3, a4);
}

void virtual thunk to'quasar::PDecTranslatorBlock::updateConfiguration(void *a1, quasar::SystemConfig *a2, uint64_t a3, uint64_t a4)
{
}

void quasar::PDecTranslatorBlock::createDecodeOptions(quasar::PDecTranslatorBlock *this, quasar::TranslatorOptions *a2)
{
  uint64_t v3 = quasar::OptionValue<std::string>::value((void *)a2 + 588);
  uint64_t v4 = (char *)quasar::OptionValue<BOOL>::value((void *)a2 + 570);
  quasar::PDecEngineBlockMixin::getNormalizationMode(v3, *v4);
  operator new();
}

void sub_1B23236C0(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1032C40806CDC9ALL);
  _Unwind_Resume(a1);
}

void quasar::PDecTranslatorBlock::init(quasar::PDecTranslatorBlock *this)
{
  uint64_t v2 = (quasar::PDecTranslatorBlock *)((char *)this + 8);
  uint64_t v3 = (void *)((char *)this + 3832);
  uint64_t v4 = quasar::OptionValue<std::string>::value((void *)this + 479);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 23);
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(v4 + 8);
  }
  if (v5)
  {
    uint64_t v6 = quasar::OptionValue<std::string>::value(v3);
    quasar::PDecTranslatorBlock::createDeterminizedLm((uint64_t)this, v6);
  }
  quasar::PDecTranslatorBlock::createDecodeOptions(this, v2);
}

void sub_1B2323D6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B2323DA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void quasar::PDecTranslatorBlock::createDeterminizedLm(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 8760) + 16))(&v24);
  if (v24)
  {
    __p[0] = 0;
    __p[1] = 0;
    *(void *)&long long v8 = 0;
    operator new();
  }
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  *(_OWORD *)std::string __p = 0u;
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Failed to read lm fst from: ", 28);
  int v4 = *(char *)(a2 + 23);
  if (v4 >= 0) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = *(void *)a2;
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, v5, v6);
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
}

void sub_1B2323EE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  long long v12 = *(std::__shared_weak_count **)(v10 - 40);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  _Unwind_Resume(exception_object);
}

void quasar::PDecTranslatorBlock::createDecoder(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t *a6@<X8>)
{
  uint64_t v9 = a1 + 8680;
  uint64_t v10 = (long long *)quasar::OptionValue<std::string>::value(a3 + 368);
  uint64_t v11 = quasar::OptionValue<std::string>::value(a3 + 736);
  int v12 = *(_DWORD *)quasar::OptionValue<int>::value(a3 + 662);
  float v13 = *(double *)quasar::OptionValue<double>::value(a3 + 680);
  int v14 = *(_DWORD *)quasar::OptionValue<int>::value(a3 + 698);
  float v15 = *(double *)quasar::OptionValue<double>::value(a3 + 516);
  uint64_t v16 = quasar::OptionValue<std::string>::value(a3 + 588);
  long long v17 = (char *)quasar::OptionValue<BOOL>::value(a3 + 570);
  int NormalizationMode = quasar::PDecEngineBlockMixin::getNormalizationMode(v16, *v17);
  int v19 = *(unsigned __int8 *)quasar::OptionValue<BOOL>::value(a3 + 644);
  uint64_t v20 = quasar::OptionValue<std::string>::value(a3 + 796);
  long long v21 = *(std::__shared_weak_count **)(a4 + 8);
  if (v21) {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  quasar::PDecEngineBlockMixin::createDecoder(v9, a2, a3, v10, v11, v12, v14, NormalizationMode, a6, v13, v15, v19 != 0, v20, a5);
  if (v21)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
}

void sub_1B23240E4(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void virtual thunk to'quasar::PDecTranslatorBlock::init(quasar::PDecTranslatorBlock *this)
{
}

void quasar::PDecTranslatorBlock::initCompilationSpecs(quasar::PDecTranslatorBlock *this)
{
}

void sub_1B2324274(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void quasar::PDecTranslatorBlock::process(void *a1, uint64_t a2, void *a3)
{
  if (*a3 == a3[1])
  {
    if (quasar::gLogLevel >= 2)
    {
      memset(v8, 0, sizeof(v8));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Empty token received", 20);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)v8);
    }
    quasar::ProcessingBlock::send((uint64_t)a1 + *(void *)(*a1 - 24), (uint64_t)a3, 0);
  }
  else
  {
    uint64_t v5 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v6 = a1 + 1085;
    uint64_t v7 = (char *)quasar::OptionValue<BOOL>::value(a1 + 195);
    quasar::PDecEngineBlockMixin::processImplementation(v6, (uint64_t)a3, *v7, (uint64_t *)v8);
    quasar::ProcessingBlock::send(v5, (uint64_t)v8, 0);
    uint64_t v9 = (void **)v8;
    std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v9);
  }
}

void sub_1B23243BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void virtual thunk to'quasar::PDecTranslatorBlock::process(void *a1, uint64_t a2, void *a3)
{
}

uint64_t quasar::PDecTranslatorBlock::minConfigVersion(quasar::PDecTranslatorBlock *this)
{
  return 35;
}

uint64_t virtual thunk to'quasar::PDecTranslatorBlock::minConfigVersion(quasar::PDecTranslatorBlock *this)
{
  return 35;
}

void quasar::PDecTranslatorBlock::compilationSpecs(quasar::PDecTranslatorBlock *this@<X0>, uint64_t *a2@<X8>)
{
  if (*((unsigned char *)this + *(void *)(*(void *)this - 24) + 56)) {
    quasar::PDecTranslatorBlock::initCompilationSpecs(this);
  }
  uint64_t v4 = *((void *)this + 1085);
  if (*(_DWORD *)(v4 + 5888) == 1)
  {
    if (quasar::gLogLevel >= 5)
    {
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      long long v14 = 0u;
      long long v15 = 0u;
      long long v12 = 0u;
      long long v13 = 0u;
      long long v10 = 0u;
      long long v11 = 0u;
      long long v8 = 0u;
      long long v9 = 0u;
      long long v6 = 0u;
      long long v7 = 0u;
      long long v5 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v5, (uint64_t)"Getting compilation specs", 25);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v5);
      uint64_t v4 = *((void *)this + 1085);
      if (*(_DWORD *)(v4 + 5888) != 1) {
        std::__throw_bad_variant_access[abi:ne180100]();
      }
    }
    kaldi::quasar::Encdec::CompilationSpecs(*(kaldi::quasar::Encdec **)(v4 + 136), a2);
    if (quasar::gLogLevel >= 5)
    {
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      long long v14 = 0u;
      long long v15 = 0u;
      long long v12 = 0u;
      long long v13 = 0u;
      long long v10 = 0u;
      long long v11 = 0u;
      long long v8 = 0u;
      long long v9 = 0u;
      long long v6 = 0u;
      long long v7 = 0u;
      long long v5 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v5, (uint64_t)"Got compilation specs", 21);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v5);
    }
  }
  else
  {
    a2[2] = 0;
    a2[1] = 0;
    *a2 = (uint64_t)(a2 + 1);
  }
}

void sub_1B232456C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a9);
  std::__tree<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,kaldi::quasar::TMTools::SpecCmp,std::allocator<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>>::destroy(v9, *(void **)(v9 + 8));
  _Unwind_Resume(a1);
}

uint64_t *kaldi::quasar::Encdec::CompilationSpecs@<X0>(kaldi::quasar::Encdec *this@<X0>, uint64_t *a2@<X8>)
{
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Returning compilation spec from kaldi...", 40);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v5);
  }
  return std::set<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,kaldi::quasar::TMTools::SpecCmp,std::allocator<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>>::set[abi:ne180100](a2, (uint64_t)this + 1104);
}

void sub_1B2324618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void virtual thunk to'quasar::PDecTranslatorBlock::compilationSpecs(quasar::PDecTranslatorBlock *this@<X0>, uint64_t *a2@<X8>)
{
}

void quasar::PDecTranslatorBlock::setContextProvider(uint64_t a1, void *a2)
{
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  uint64_t v8 = *a2;
  uint64_t v9 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  quasar::ConfiguredProcessingBlock<quasar::TranslatorOptions>::setContextProvider(a1, &v8);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  uint64_t v6 = *(void *)(*a2 + 16);
  uint64_t v5 = *(void *)(*a2 + 24);
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 2612std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = v6;
  long long v7 = *(std::__shared_weak_count **)(a1 + 26128);
  *(void *)(a1 + 26128) = v5;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_1B23246D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void quasar::ConfiguredProcessingBlock<quasar::TranslatorOptions>::setContextProvider(uint64_t a1, uint64_t *a2)
{
  void (***v3)(uint64_t **__return_ptr);
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t *v10;
  uint64_t *v11;

  uint64_t v3 = (void (***)(uint64_t **__return_ptr))(*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
  (**v3)(&v10);
  uint64_t v4 = v10;
  uint64_t v5 = v11;
  if (v10 != v11)
  {
    do
    {
      uint64_t v6 = *v4;
      long long v7 = (std::__shared_weak_count *)a2[1];
      uint64_t v8 = *a2;
      uint64_t v9 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      quasar::OptionValueBase::setContextProvider(v6, &v8);
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
      ++v4;
    }
    while (v4 != v5);
    uint64_t v4 = v10;
  }
  if (v4)
  {
    long long v11 = v4;
    operator delete(v4);
  }
}

void sub_1B23247C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void virtual thunk to'quasar::PDecTranslatorBlock::setContextProvider(void *a1, void *a2)
{
}

uint64_t quasar::ConfiguredProcessingBlock<quasar::TranslatorOptions>::getOptions(uint64_t a1)
{
  return a1 + 8;
}

void virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::TranslatorOptions>::setContextProvider(void *a1, uint64_t *a2)
{
}

uint64_t virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::TranslatorOptions>::getOptions(void *a1)
{
  return (uint64_t)a1 + *(void *)(*a1 - 104) + 8;
}

const char *quasar::PDecTranslatorBlock::blockType(quasar::PDecTranslatorBlock *this)
{
  return "PDecTranslatorBlock";
}

const char *virtual thunk to'quasar::PDecTranslatorBlock::blockType(quasar::PDecTranslatorBlock *this)
{
  return "PDecTranslatorBlock";
}

std::string *std::pair<std::vector<std::string>,std::shared_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>::pair[abi:ne180100]<std::vector<std::string>&,std::shared_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>&,0>(std::string *a1, long long **a2, std::string::size_type *a3)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a1, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  std::string::size_type v5 = a3[1];
  a1[1].__r_.__value_.__r.__words[0] = *a3;
  a1[1].__r_.__value_.__l.__size_ = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

uint64_t kaldi::quasar::TranslationUtil::NbestElement::OutputWordString@<X0>(kaldi::quasar::TranslationUtil::NbestElement *this@<X0>, std::string *a2@<X8>)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v14);
  uint64_t v4 = *(void *)this;
  if (*((void *)this + 1) != *(void *)this)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    do
    {
      uint64_t v7 = v4 + v5;
      int v8 = *(char *)(v7 + 23);
      if (v8 >= 0) {
        uint64_t v9 = v7;
      }
      else {
        uint64_t v9 = *(void *)v7;
      }
      if (v8 >= 0) {
        uint64_t v10 = *(unsigned __int8 *)(v7 + 23);
      }
      else {
        uint64_t v10 = *(void *)(v7 + 8);
      }
      long long v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v9, v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" ", 1);
      ++v6;
      uint64_t v4 = *(void *)this;
      v5 += 240;
    }
    while (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*((void *)this + 1) - *(void *)this) >> 4) > v6);
  }
  std::stringbuf::str();
  kaldi::Trim(a2);
  v14[0] = *MEMORY[0x1E4FBA408];
  uint64_t v12 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v14 + *(void *)(v14[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v15[0] = v12;
  v15[1] = MEMORY[0x1E4FBA470] + 16;
  if (v16 < 0) {
    operator delete((void *)v15[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EA8520](&v17);
}

void sub_1B2324ABC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::TranslationUtil::NbestElement::NumToString<fst::LatticeWeightTpl<float>>(uint64_t a1, float *a2)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  fst::operator<<<float>(v6, a2);
  std::stringbuf::str();
  v5[0] = *MEMORY[0x1E4FBA408];
  uint64_t v3 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v5 + *(void *)(v5[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v6[0] = v3;
  v6[1] = MEMORY[0x1E4FBA470] + 16;
  if (v7 < 0) {
    operator delete((void *)v6[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EA8520](&v8);
}

void sub_1B2324C5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::TranslationUtil::NbestElement::NumToString<float>()
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v2);
  std::ostream::operator<<();
  std::stringbuf::str();
  v2[0] = *MEMORY[0x1E4FBA408];
  uint64_t v0 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v2 + *(void *)(v2[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v2[2] = v0;
  v2[3] = MEMORY[0x1E4FBA470] + 16;
  if (v3 < 0) {
    operator delete((void *)v2[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EA8520](&v4);
}

void sub_1B2324DE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::quasar::TranslationUtil::NbestElement::ConfidenceString(kaldi::quasar::TranslationUtil::NbestElement *this@<X0>, void *a2@<X8>)
{
  std::string __p = 0;
  char v16 = 0;
  uint64_t v17 = 0;
  uint64_t v3 = *(void *)this;
  uint64_t v4 = *((void *)this + 1);
  if (*(void *)this != v4)
  {
    uint64_t v5 = 0;
    do
    {
      if (v5 >= v17)
      {
        char v7 = (char *)__p;
        uint64_t v8 = (v5 - (unsigned char *)__p) >> 2;
        unint64_t v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v10 = v17 - (unsigned char *)__p;
        if ((v17 - (unsigned char *)__p) >> 1 > v9) {
          unint64_t v9 = v10 >> 1;
        }
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v11 = v9;
        }
        if (v11)
        {
          uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v17, v11);
          char v7 = (char *)__p;
          uint64_t v5 = v16;
        }
        else
        {
          uint64_t v12 = 0;
        }
        long long v13 = &v12[4 * v8];
        *(_DWORD *)long long v13 = *(_DWORD *)(v3 + 232);
        unint64_t v6 = v13 + 4;
        while (v5 != v7)
        {
          int v14 = *((_DWORD *)v5 - 1);
          v5 -= 4;
          *((_DWORD *)v13 - 1) = v14;
          v13 -= 4;
        }
        std::string __p = v13;
        char v16 = v6;
        uint64_t v17 = &v12[4 * v11];
        if (v7) {
          operator delete(v7);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v5 = *(_DWORD *)(v3 + 232);
        unint64_t v6 = v5 + 4;
      }
      char v16 = v6;
      v3 += 240;
      uint64_t v5 = v6;
    }
    while (v3 != v4);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  kaldi::JoinVectorToString<int>(&__p, " ", (uint64_t)a2);
  if (__p)
  {
    char v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1B2324F50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (*(char *)(v11 + 23) < 0) {
    operator delete(*(void **)v11);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::TranslationUtil::NbestElement::RawConfidenceString@<X0>(kaldi::quasar::TranslationUtil::NbestElement *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return kaldi::JoinVectorToString<float>((void *)this + 27, " ", (uint64_t)a2);
}

void sub_1B2324FC4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::TranslationUtil::NbestElement::NumToString<int>()
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v2);
  std::ostream::operator<<();
  std::stringbuf::str();
  v2[0] = *MEMORY[0x1E4FBA408];
  uint64_t v0 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v2 + *(void *)(v2[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v2[2] = v0;
  v2[3] = MEMORY[0x1E4FBA470] + 16;
  if (v3 < 0) {
    operator delete((void *)v2[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EA8520](&v4);
}

void sub_1B2325150(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::TranslationUtil::NbestElement::RawSubWordString(kaldi::quasar::TranslationUtil::NbestElement *this)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v2 = *(void *)this;
  if (*((void *)this + 1) != *(void *)this)
  {
    unint64_t v3 = 0;
    uint64_t v4 = 160;
    do
    {
      std::string __p = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      kaldi::JoinVectorToString<std::string>((uint64_t *)(v2 + v4 - 128), " ", (uint64_t)&__p);
      if (v15 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      if (v15 >= 0) {
        uint64_t v6 = HIBYTE(v15);
      }
      else {
        uint64_t v6 = v14;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)p_p, v6);
      kaldi::JoinVectorToString<int>((void *)(*(void *)this + v4), " ", (uint64_t)&__p);
      char v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"(", 1);
      if (v15 >= 0) {
        uint64_t v8 = &__p;
      }
      else {
        uint64_t v8 = __p;
      }
      if (v15 >= 0) {
        uint64_t v9 = HIBYTE(v15);
      }
      else {
        uint64_t v9 = v14;
      }
      uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)")", 1);
      if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*((void *)this + 1) - *(void *)this) >> 4) - 1 > v3) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" ", 1);
      }
      if (SHIBYTE(v15) < 0) {
        operator delete(__p);
      }
      ++v3;
      uint64_t v2 = *(void *)this;
      v4 += 240;
    }
    while (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*((void *)this + 1) - *(void *)this) >> 4) > v3);
  }
  std::stringbuf::str();
  v16[0] = *MEMORY[0x1E4FBA408];
  uint64_t v11 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v16 + *(void *)(v16[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v17[0] = v11;
  v17[1] = MEMORY[0x1E4FBA470] + 16;
  if (v18 < 0) {
    operator delete((void *)v17[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EA8520](&v19);
}

void sub_1B23253FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

uint64_t kaldi::quasar::TranslationUtil::NbestElement::NumToString<double>()
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v2);
  std::ostream::operator<<();
  std::stringbuf::str();
  v2[0] = *MEMORY[0x1E4FBA408];
  uint64_t v0 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v2 + *(void *)(v2[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v2[2] = v0;
  v2[3] = MEMORY[0x1E4FBA470] + 16;
  if (v3 < 0) {
    operator delete((void *)v2[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EA8520](&v4);
}

void sub_1B23255A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B23255EC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B2325640(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[17],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B2325694(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B23256E8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],std::string const&,0>(void *a1, char *a2, long long *a3)
{
  uint64_t v5 = (std::string *)(std::string::basic_string[abi:ne180100]<0>(a1, a2) + 3);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v6 = *a3;
    v5->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return a1;
}

void sub_1B2325758(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::JoinVectorToString<float>(void *a1, const char *a2, uint64_t a3)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v14);
  if (a1[1] != *a1)
  {
    unint64_t v6 = 0;
    do
    {
      std::ostream::operator<<();
      ++v6;
      uint64_t v7 = a1[1] - *a1;
      if (v6 < v7 >> 2)
      {
        size_t v8 = strlen(a2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)a2, v8);
        uint64_t v7 = a1[1] - *a1;
      }
    }
    while (v6 < v7 >> 2);
  }
  std::stringbuf::str();
  if (*(char *)(a3 + 23) < 0) {
    operator delete(*(void **)a3);
  }
  *(_OWORD *)a3 = v12;
  uint64_t v9 = (void *)MEMORY[0x1E4FBA408];
  *(void *)(a3 + 16) = v13;
  v14[0] = *v9;
  uint64_t v10 = v9[9];
  *(void *)((char *)v14 + *(void *)(v14[0] - 24)) = v9[8];
  v15[0] = v10;
  v15[1] = MEMORY[0x1E4FBA470] + 16;
  if (v16 < 0) {
    operator delete((void *)v15[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EA8520](&v17);
}

void sub_1B2325964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const*,0>(void *a1, char *a2, char **a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, *a3);
  return a1;
}

void sub_1B23259B4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::pair<std::string,std::vector<std::pair<std::string,std::string>>>::pair[abi:ne180100]<std::string const&,std::vector<std::pair<std::string,std::string>>&,0>(std::string *this, long long *a2, long long **a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(this + 1, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (a3[1] - *a3));
  return this;
}

void sub_1B2325A4C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::PhraseBook::ReadRaw(uint64_t a1, uint64_t a2, char a3)
{
  v43[19] = *MEMORY[0x1E4F143B8];
  if ((a3 & 1) == 0) {
    std::__hash_table<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>>>::clear(a1);
  }
  std::ifstream::basic_ifstream(v41);
  if (v42[15])
  {
    *(_DWORD *)(a1 + 64) = 0;
    memset(&v39, 0, sizeof(v39));
    uint64_t v4 = (std::locale::id *)MEMORY[0x1E4FBA258];
    while (1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v41 + *(void *)(v41[0] - 24)));
      long long v5 = std::locale::use_facet((const std::locale *)&v22, v4);
      unsigned __int8 v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
      std::locale::~locale((std::locale *)&v22);
      uint64_t v7 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v41, (uint64_t)&v39, v6);
      if ((*((unsigned char *)v7 + *(void *)(*v7 - 24) + 32) & 5) != 0) {
        break;
      }
      kaldi::Trim(&v39);
      long long v36 = 0;
      uint64_t v37 = 0;
      uint64_t v38 = 0;
      kaldi::SplitStringOnString((uint64_t)&v39, (char *)(a1 + 40), (uint64_t *)&v36);
      if (((0xAAAAAAAAAAAAAAABLL * ((v37 - (uint64_t)v36) >> 3)) & 0xFFFFFFFFFFFFFFFELL) != 2)
      {
        if (kaldi::g_kaldi_verbose_level >= -1)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v22);
          uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"Invalid entry terminating ReadRaw : ", 36);
          if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            char v18 = &v39;
          }
          else {
            char v18 = (std::string *)v39.__r_.__value_.__r.__words[0];
          }
          if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v39.__r_.__value_.__l.__size_;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v18, size);
          kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v22);
        }
        *(_DWORD *)(a1 + 64) = 0;
        std::__hash_table<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>>>::clear(a1);
        v22.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
        if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v39.__r_.__value_.__l.__data_);
        }
        goto LABEL_60;
      }
      kaldi::Trim(v36);
      size_t v8 = v36;
      if (SHIBYTE(v36->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v35, v36->__r_.__value_.__l.__data_, v36->__r_.__value_.__l.__size_);
        size_t v8 = v36;
      }
      else
      {
        long long v9 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
        v35.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v9;
      }
      kaldi::quasar::PhraseBook::PreProcess(a1, (uint64_t)v8, &v34);
      kaldi::Trim(v36 + 1);
      uint64_t v10 = v36;
      if (SHIBYTE(v36[1].__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v33, v36[1].__r_.__value_.__l.__data_, v36[1].__r_.__value_.__l.__size_);
        uint64_t v10 = v36;
      }
      else
      {
        std::string v33 = v36[1];
      }
      memset(&v32, 0, sizeof(v32));
      if (v37 - (void)v10 == 72)
      {
        kaldi::Trim(v10 + 2);
        std::string::operator=(&v32, v36 + 2);
      }
      if (!std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((void *)a1, (unsigned __int8 *)&v34))
      {
        memset(&v22, 0, sizeof(v22));
        uint64_t v40 = &v34;
        uint64_t v11 = std::__hash_table<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (unsigned __int8 *)&v34, (uint64_t)&std::piecewise_construct, (long long **)&v40);
        std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>::__vdeallocate((void **)v11 + 5);
        *(std::string *)(v11 + 4std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = v22;
        memset(&v22, 0, sizeof(v22));
        v31.__r_.__value_.__r.__words[0] = (std::string::size_type)&v22;
        std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
      }
      if (v37 - (void)v36 == 72)
      {
        if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v31, v32.__r_.__value_.__l.__data_, v32.__r_.__value_.__l.__size_);
        }
        else {
          std::string v31 = v32;
        }
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&v31, "");
      }
      kaldi::quasar::PhraseBook::PhraseBookEntry::PhraseBookEntry(&v22, (long long *)&v34, (long long *)&v35, (long long *)&v33, (long long *)&v31);
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v31.__r_.__value_.__l.__data_);
      }
      v31.__r_.__value_.__r.__words[0] = (std::string::size_type)&v34;
      long long v12 = std::__hash_table<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (unsigned __int8 *)&v34, (uint64_t)&std::piecewise_construct, (long long **)&v31);
      uint64_t v13 = v12;
      unint64_t v14 = *((void *)v12 + 6);
      if (v14 >= *((void *)v12 + 7))
      {
        uint64_t v15 = std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>::__push_back_slow_path<kaldi::quasar::PhraseBook::PhraseBookEntry const&>((uint64_t *)v12 + 5, (const kaldi::quasar::PhraseBook::PhraseBookEntry *)&v22);
      }
      else
      {
        kaldi::quasar::PhraseBook::PhraseBookEntry::PhraseBookEntry(*((std::string **)v12 + 6), (const kaldi::quasar::PhraseBook::PhraseBookEntry *)&v22);
        uint64_t v15 = v14 + 120;
        *((void *)v13 + 6) = v14 + 120;
      }
      *((void *)v13 + 6) = v15;
      ++*(_DWORD *)(a1 + 64);
      if (v30 < 0) {
        operator delete(__p);
      }
      if (v28 < 0) {
        operator delete(v27);
      }
      if (v26 < 0) {
        operator delete(v25);
      }
      if (v24 < 0) {
        operator delete(v23);
      }
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v22.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v32.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v33.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v34.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v35.__r_.__value_.__l.__data_);
      }
      v22.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
    }
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v22);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"Read ", 5);
      char v16 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" phrasebook entries", 19);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v22);
    }
    uint64_t v20 = 1;
  }
  else
  {
LABEL_60:
    uint64_t v20 = 0;
  }
  v41[0] = *MEMORY[0x1E4FBA3F8];
  *(uint64_t *)((char *)v41 + *(void *)(v41[0] - 24)) = *(void *)(MEMORY[0x1E4FBA3F8] + 24);
  MEMORY[0x1B3EA7CF0](v42);
  std::istream::~istream();
  MEMORY[0x1B3EA8520](v43);
  return v20;
}

void sub_1B2326058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *__p,uint64_t a63)
{
  std::ifstream::~ifstream(&a67);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + ++*(_DWORD *)(result + 24) = 0;
  }
}

uint64_t std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>::__push_back_slow_path<kaldi::quasar::PhraseBook::PhraseBookEntry const&>(uint64_t *a1, const kaldi::quasar::PhraseBook::PhraseBookEntry *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xEEEEEEEEEEEEEEEFLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x222222222222222) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xEEEEEEEEEEEEEEEFLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x111111111111111) {
    unint64_t v9 = 0x222222222222222;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v13 = v10;
  unint64_t v14 = (std::string *)&v10[120 * v4];
  char v16 = &v10[120 * v9];
  kaldi::quasar::PhraseBook::PhraseBookEntry::PhraseBookEntry(v14, a2);
  uint64_t v15 = v14 + 5;
  std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<kaldi::quasar::PhraseBook::PhraseBookEntry>::~__split_buffer(&v13);
  return v11;
}

void sub_1B23262E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<kaldi::quasar::PhraseBook::PhraseBookEntry>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t *std::set<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,kaldi::quasar::TMTools::SpecCmp,std::allocator<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,kaldi::quasar::TMTools::SpecCmp,std::allocator<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>>::insert[abi:ne180100]<std::__tree_const_iterator<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,std::__tree_node<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,void *> *,long>>(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_1B232633C(_Unwind_Exception *a1)
{
  std::__tree<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,kaldi::quasar::TMTools::SpecCmp,std::allocator<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void std::__variant_detail::__alt<0ul,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>>::__alt[abi:ne180100]<int &,float &,kaldi::quasar::NormalizationMode &,BOOL &,kaldi::quasar::PhraseBookMode &,kaldi::quasar::BPEMode &,kaldi::quasar::BPEMode &,quasar::OptionValue<BOOL> const&,quasar::OptionValue<BOOL> const&,float &,int &,quasar::OptionValue<BOOL> const&>(uint64_t a1, int *a2, float *a3, int *a4, char *a5, int *a6, int *a7, int *a8, void *a9, void *a10, float *a11, int *a12, void *a13)
{
  int v22 = *a2;
  float v13 = *a3;
  int v14 = *a4;
  char v15 = *a5;
  int v16 = *a6;
  int v17 = *a7;
  int v18 = *a8;
  char v19 = *(unsigned char *)quasar::OptionValue<BOOL>::value(a9);
  char v20 = *(unsigned char *)quasar::OptionValue<BOOL>::value(a10);
  float v21 = *a11;
  int v25 = *a12;
  char v26 = *(unsigned char *)quasar::OptionValue<BOOL>::value(a13);
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::TranslationBeamSearch(a1, v22, v14, v15, v16, v17, v18, v19, v13, v21, 1.0, 5.0, v20, v25, v26);
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::TranslationBeamSearch(uint64_t a1, int a2, int a3, char a4, int a5, int a6, int a7, char a8, float a9, float a10, float a11, float a12, char a13, int a14, char a15)
{
  v29[0] = a8;
  *(void *)a1 = &unk_1F0A51068;
  *(_OWORD *)(a1 + ++*(_DWORD *)(result + 24) = 0u;
  *(_DWORD *)(a1 + 4std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = 1065353216;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 8std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = 1065353216;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = 0;
  *(_WORD *)(a1 + 112) = 1;
  *(unsigned char *)(a1 + 12std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = 0;
  *(void *)(a1 + 1++*(_DWORD *)(result + 24) = 0x400000003;
  *(unsigned char *)(a1 + 132) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "UNK");
  kaldi::quasar::BPE::BPE(a1 + 152, 1, (long long *)__p);
  if (v28 < 0) {
    operator delete(__p[0]);
  }
  std::allocate_shared[abi:ne180100]<kaldi::quasar::PhraseBook,std::allocator<kaldi::quasar::PhraseBook>,BOOL &,void>(v29, (void *)(a1 + 392));
  kaldi::quasar::NNMTTransliterator::NNMTTransliterator((kaldi::quasar::NNMTTransliterator *)(a1 + 408), a13);
  *(unsigned char *)(a1 + 488std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = 1;
  kaldi::Timer::Reset((kaldi::Timer *)(a1 + 4856), v26);
  *(void *)(a1 + 4888) = 0;
  *(unsigned char *)(a1 + 4896) = 0;
  *(void *)(a1 + 4904) = 0;
  *(void *)(a1 + 492std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = 0;
  *(void *)(a1 + 4912) = 0;
  *(unsigned char *)(a1 + 4929) = 0;
  *(_OWORD *)(a1 + 49--*(_DWORD *)(a9 + 84) = 0u;
  *(_OWORD *)(a1 + 500std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = 0u;
  *(void *)(a1 + 4968) = 0;
  *(_OWORD *)(a1 + 4936) = 0u;
  *(_OWORD *)(a1 + 49--*(_DWORD *)(a9 + 52) = 0u;
  *(void *)(a1 + 4976) = &unk_1F0A51768;
  *(unsigned char *)(a1 + 5016) = 0;
  *(_OWORD *)(a1 + 5032) = 0u;
  *(_OWORD *)(a1 + 5048) = 0u;
  *(void *)(a1 + 50++*(_DWORD *)(result + 24) = &unk_1F0A51768;
  *(unsigned char *)(a1 + 5064) = 0;
  kaldi::Matrix<float>::Matrix(a1 + 5072);
  *(_OWORD *)(a1 + 5144) = 0u;
  *(_OWORD *)(a1 + 516std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = 0u;
  *(_OWORD *)(a1 + 5112) = 0u;
  *(_OWORD *)(a1 + 5128) = 0u;
  *(void *)(a1 + 5176) = -1;
  *(_DWORD *)(a1 + 51--*(_DWORD *)(a9 + 84) = -1;
  *(_DWORD *)(a1 + 5188) = a2;
  *(float *)(a1 + 5192) = a10;
  *(_DWORD *)(a1 + 5196) = a14;
  *(float *)(a1 + 520std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = a9;
  *(_OWORD *)(a1 + 5204) = 0u;
  *(_DWORD *)(a1 + 522std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = a5;
  *(_DWORD *)(a1 + 52++*(_DWORD *)(result + 24) = a3;
  *(float *)(a1 + 5228) = a11;
  *(float *)(a1 + 5232) = a12;
  *(unsigned char *)(a1 + 5236) = a4;
  *(unsigned char *)(a1 + 5237) = a15;
  *(_WORD *)(a1 + 5238) = 256;
  *(unsigned char *)(a1 + 524std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = 0;
  *(_DWORD *)(a1 + 5244) = a6;
  *(_DWORD *)(a1 + 5248) = a7;
  kaldi::nnet1::Nnet::Nnet((kaldi::nnet1::Nnet *)(a1 + 5256));
}

void sub_1B2326844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, kaldi::quasar::NNMTTransliterator *a11, kaldi::quasar::BPE *a12, kaldi::quasar::InputHammer *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&a20);
  char v28 = *(void **)(v20 + 5864);
  if (v28)
  {
    *(void *)(v20 + 5872) = v28;
    operator delete(v28);
  }
  int v29 = *(void **)(v20 + 5840);
  if (v29)
  {
    *(void *)(v20 + 5848) = v29;
    operator delete(v29);
  }
  char v30 = (void **)(v20 + 5736);
  std::string v31 = *(void **)(v20 + 5808);
  if (v31)
  {
    *(void *)(v20 + 5816) = v31;
    operator delete(v31);
  }
  std::string v32 = *v21;
  if (*v21)
  {
    *(void *)(v20 + 5792) = v32;
    operator delete(v32);
  }
  std::string v33 = *v30;
  if (*v30)
  {
    *(void *)(v20 + 5744) = v33;
    operator delete(v33);
  }
  kaldi::Matrix<float>::~Matrix(v26);
  kaldi::nnet1::Nnet::~Nnet(v25);
  a20 = v20 + 5152;
  std::vector<kaldi::Matrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  a20 = v20 + 5128;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  std::string v34 = *(std::__shared_weak_count **)(v20 + 5120);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  kaldi::Matrix<float>::~Matrix(a10);
  kaldi::CuMatrix<float>::~CuMatrix(v23);
  kaldi::CuMatrix<float>::~CuMatrix(v22);
  a20 = v20 + 4952;
  std::vector<kaldi::Matrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  std::string v35 = *(std::__shared_weak_count **)(v20 + 4944);
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  if (*(char *)(v24 + 47) < 0) {
    operator delete(*(void **)(v20 + 4904));
  }
  kaldi::quasar::NNMTTransliterator::~NNMTTransliterator(a11);
  long long v36 = *(std::__shared_weak_count **)(v20 + 400);
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  kaldi::quasar::BPE::~BPE(a12);
  uint64_t v37 = *(std::__shared_weak_count **)(v20 + 144);
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  kaldi::quasar::InputHammer::~InputHammer(a13);
  _Unwind_Resume(a1);
}

void sub_1B23269C8()
{
}

void sub_1B23269D0()
{
}

void sub_1B23269D8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1B23269ACLL);
}

void sub_1B23269F0()
{
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::~TranslationBeamSearch(uint64_t a1)
{
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::~TranslationBeamSearch(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::~TranslationBeamSearch(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A51068;
  uint64_t v2 = *(void **)(a1 + 5864);
  if (v2)
  {
    *(void *)(a1 + 5872) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 5840);
  if (v3)
  {
    *(void *)(a1 + 5848) = v3;
    operator delete(v3);
  }
  unint64_t v4 = *(void **)(a1 + 5808);
  if (v4)
  {
    *(void *)(a1 + 5816) = v4;
    operator delete(v4);
  }
  unint64_t v5 = *(void **)(a1 + 5784);
  if (v5)
  {
    *(void *)(a1 + 5792) = v5;
    operator delete(v5);
  }
  unsigned __int8 v6 = *(void **)(a1 + 5736);
  if (v6)
  {
    *(void *)(a1 + 5744) = v6;
    operator delete(v6);
  }
  kaldi::Matrix<float>::~Matrix(a1 + 5632);
  kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::Nnet *)(a1 + 5256));
  long long v12 = (void **)(a1 + 5152);
  std::vector<kaldi::Matrix<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
  long long v12 = (void **)(a1 + 5128);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 5120);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  kaldi::Matrix<float>::~Matrix(a1 + 5072);
  kaldi::CuMatrix<float>::~CuMatrix(a1 + 5024);
  kaldi::CuMatrix<float>::~CuMatrix(a1 + 4976);
  long long v12 = (void **)(a1 + 4952);
  std::vector<kaldi::Matrix<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
  unint64_t v8 = *(std::__shared_weak_count **)(a1 + 4944);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (*(char *)(a1 + 4927) < 0) {
    operator delete(*(void **)(a1 + 4904));
  }
  kaldi::quasar::NNMTTransliterator::~NNMTTransliterator((kaldi::quasar::NNMTTransliterator *)(a1 + 408));
  unint64_t v9 = *(std::__shared_weak_count **)(a1 + 400);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  kaldi::quasar::BPE::~BPE((kaldi::quasar::BPE *)(a1 + 152));
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 144);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  long long v12 = (void **)(a1 + 88);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v12);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::~__hash_table(a1 + 48);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 8);
  return a1;
}

void std::shared_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>::shared_ptr[abi:ne180100]<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1B2326C30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>> *,std::shared_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>::__shared_ptr_default_delete<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>,kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>,std::allocator<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_pointer<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>> *,std::shared_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>::__shared_ptr_default_delete<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>,kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>,std::allocator<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result)
  {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>,(std::__variant_detail::_Trait)1>::~__dtor(result);
    JUMPOUT(0x1B3EA8670);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>> *,std::shared_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>::__shared_ptr_default_delete<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>,kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>,std::allocator<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 5888);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_1F0A64390[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 5888) = -1;
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN5kaldi6quasar21TranslationBeamSearchINS9_19TorchEncoderDecoderEEENSA_INS9_6EncdecEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSC_SE_EEEEEEDcSI_DpT0_(uint64_t a1, uint64_t a2)
{
  return kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::~TranslationBeamSearch(a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN5kaldi6quasar21TranslationBeamSearchINS9_19TorchEncoderDecoderEEENSA_INS9_6EncdecEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSC_SE_EEEEEEDcSI_DpT0_(uint64_t a1, uint64_t a2)
{
  return kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::~TranslationBeamSearch(a2);
}

uint64_t std::unique_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>,(std::__variant_detail::_Trait)1>::~__dtor(result);
    JUMPOUT(0x1B3EA8670);
  }
  return result;
}

void std::__variant_detail::__alt<1ul,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>::__alt[abi:ne180100]<int &,float &,kaldi::quasar::NormalizationMode &,BOOL &,kaldi::quasar::PhraseBookMode &,kaldi::quasar::BPEMode &,kaldi::quasar::BPEMode &,quasar::OptionValue<BOOL> const&,quasar::OptionValue<BOOL> const&,float &,int &,quasar::OptionValue<BOOL> const&>(uint64_t a1, int *a2, float *a3, int *a4, char *a5, int *a6, int *a7, int *a8, void *a9, void *a10, float *a11, int *a12, void *a13)
{
  int v22 = *a2;
  float v13 = *a3;
  int v14 = *a4;
  char v15 = *a5;
  int v16 = *a6;
  int v17 = *a7;
  int v18 = *a8;
  char v19 = *(unsigned char *)quasar::OptionValue<BOOL>::value(a9);
  char v20 = *(unsigned char *)quasar::OptionValue<BOOL>::value(a10);
  float v21 = *a11;
  int v25 = *a12;
  char v26 = *(unsigned char *)quasar::OptionValue<BOOL>::value(a13);
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::TranslationBeamSearch(a1, v22, v14, v15, v16, v17, v18, v19, v13, v21, 1.0, 5.0, v20, v25, v26);
}

void _ZNKSt3__116__variant_detail12__visitation9__variant15__value_visitorIZN5kaldi6quasar17TranslationEngineIJNS5_21TranslationBeamSearchINS5_19TorchEncoderDecoderEEENS7_INS5_6EncdecEEEEE4ReadERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbbbNS_10shared_ptrINS5_7TMTools12ModelSharingEEEEUlOT_E_EclB8ne180100IJRNS0_5__altILm0ES9_EEEEEDcDpOT_(const std::string ***a1, uint64_t a2)
{
  uint64_t v3 = **a1;
  int v4 = *((unsigned __int8 *)*a1 + 8);
  int v5 = *((unsigned __int8 *)*a1 + 9);
  int v6 = *((unsigned __int8 *)*a1 + 10);
  uint64_t v7 = (uint64_t)(*a1)[3];
  v8[0] = (uint64_t)(*a1)[2];
  v8[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Read(a2, v3, v4 != 0, v5 != 0, v6 != 0, v8);
}

void sub_1B2326F50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Read(uint64_t a1, const std::string *a2, int a3, char a4, char a5, uint64_t *a6)
{
  long long v12 = (unsigned char *)(a1 + 4928);
  std::string::operator=((std::string *)(a1 + 4904), a2);
  *long long v12 = a4;
  v12[1] = a5;
  uint64_t v14 = *a6;
  uint64_t v13 = a6[1];
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 4936) = v14;
  char v15 = *(std::__shared_weak_count **)(a1 + 4944);
  *(void *)(a1 + 4944) = v13;
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (a3)
  {
    fst::FstReadOptions::FstReadOptions(__p, a2, 0, 0, 0);
    int v19 = 2;
    kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ReadMapped(a1, (uint64_t)__p);
  }
  unsigned __int8 v21 = 0;
  int v16 = (kaldi::Input *)kaldi::Input::Input(v20, a2, &v21);
  uint64_t v17 = kaldi::Input::Stream(v16);
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Read(a1, v17, v21, 0);
}

void sub_1B23270E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  kaldi::Input::~Input((kaldi::Input *)(v14 - 80));
  _Unwind_Resume(a1);
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ReadMapped(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 5112)) {
    kaldi::ReadMapped<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>>(a2);
  }
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "Already mapped from a file");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
}

void sub_1B232723C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, char a11)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Read(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4 = *(unsigned __int8 *)(a1 + 4928);
  int v5 = *(unsigned __int8 *)(a1 + 4929);
  uint64_t v6 = *(void *)(a1 + 4936);
  uint64_t v7 = *(void *)(a1 + 4944);
  unint64_t v8 = (long long *)(a1 + 4904);
  v9[0] = v6;
  v9[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  kaldi::quasar::TMTools::GetModel<kaldi::quasar::TorchEncoderDecoder>(v8, a2, a3, a4, v4 != 0, v5 != 0, v9);
}

void sub_1B2327640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::ReadMapped<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>>(uint64_t a1)
{
  void v18[34] = *MEMORY[0x1E4F143B8];
  char v8 = 0;
  kaldi::Input::Input(v7, a1, &v8);
  if (v8)
  {
    uint64_t v2 = kaldi::Input::Stream((kaldi::Input *)v7);
    std::istream::seekg();
    std::istream::tellg();
    uint64_t v17 = 0;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    std::istream::seekg();
    fst::MappedFile::Map(v2, a1, (fst::MappedFile *)v18[16]);
  }
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v18);
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Memory mapping failed. Not a valid Kaldi binary file: ", 54);
  int v4 = *(char *)(a1 + 23);
  if (v4 >= 0) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = *(void *)a1;
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v6 = *(void *)(a1 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, v5, v6);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v18);
}

void sub_1B232795C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void kaldi::quasar::TMTools::GetModel<kaldi::quasar::TorchEncoderDecoder>(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, void *a7)
{
  if (*a7) {
    kaldi::quasar::TMTools::ModelSharing::Cache<kaldi::quasar::TorchEncoderDecoder>();
  }
  long long v9 = (uint64_t **)kaldi::quasar::TorchEncoderDecoder::ModelFileMap(0);
  if (a5)
  {
    long long v11 = a1;
    long long v10 = (std::__shared_weak_count *)std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, (const void **)a1, (uint64_t)&std::piecewise_construct, &v11)[8];
    if (v10) {
      std::__shared_weak_count::lock(v10);
    }
  }
  operator new();
}

void sub_1B2327C7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, char a12)
{
  long long v14 = *(std::__shared_weak_count **)(v12 - 104);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

void _ZNKSt3__116__variant_detail12__visitation9__variant15__value_visitorIZN5kaldi6quasar17TranslationEngineIJNS5_21TranslationBeamSearchINS5_19TorchEncoderDecoderEEENS7_INS5_6EncdecEEEEE4ReadERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbbbNS_10shared_ptrINS5_7TMTools12ModelSharingEEEEUlOT_E_EclB8ne180100IJRNS0_5__altILm1ESB_EEEEEDcDpOT_(const std::string ***a1, uint64_t a2)
{
  uint64_t v3 = **a1;
  int v4 = *((unsigned __int8 *)*a1 + 8);
  int v5 = *((unsigned __int8 *)*a1 + 9);
  int v6 = *((unsigned __int8 *)*a1 + 10);
  uint64_t v7 = (uint64_t)(*a1)[3];
  v8[0] = (uint64_t)(*a1)[2];
  v8[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::Read(a2, v3, v4 != 0, v5 != 0, v6 != 0, v8);
}

void sub_1B2327D7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZN5kaldi6quasar17TranslationEngineIJNS9_21TranslationBeamSearchINS9_19TorchEncoderDecoderEEENSB_INS9_6EncdecEEEEE22ReadPronunciationModelERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESO_EUlOT_E_EEJRNS0_6__baseILNS0_6_TraitE1EJSD_SF_EEEEEEDcSP_DpT0_(uint64_t **a1, uint64_t a2)
{
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZN5kaldi6quasar17TranslationEngineIJNS9_21TranslationBeamSearchINS9_19TorchEncoderDecoderEEENSB_INS9_6EncdecEEEEE22ReadPronunciationModelERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESO_EUlOT_E_EEJRNS0_6__baseILNS0_6_TraitE1EJSD_SF_EEEEEEDcSP_DpT0_(uint64_t **a1, uint64_t a2)
{
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZN5kaldi6quasar17TranslationEngineIJNS9_21TranslationBeamSearchINS9_19TorchEncoderDecoderEEENSB_INS9_6EncdecEEEEE13SetICUScriptsERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEUlOT_E_EEJRNS0_6__baseILNS0_6_TraitE1EJSD_SF_EEEEEEDcSP_DpT0_(uint64_t **a1, uint64_t a2)
{
  return kaldi::quasar::NNMTTransliterator::SetICUScripts(a2 + 408, **a1);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZN5kaldi6quasar17TranslationEngineIJNS9_21TranslationBeamSearchINS9_19TorchEncoderDecoderEEENSB_INS9_6EncdecEEEEE13SetICUScriptsERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEUlOT_E_EEJRNS0_6__baseILNS0_6_TraitE1EJSD_SF_EEEEEEDcSP_DpT0_(uint64_t **a1, uint64_t a2)
{
  return kaldi::quasar::NNMTTransliterator::SetICUScripts(a2 + 408, **a1);
}

void _ZNKSt3__116__variant_detail12__visitation9__variant15__value_visitorIZN5kaldi6quasar17TranslationEngineIJNS5_21TranslationBeamSearchINS5_19TorchEncoderDecoderEEENS7_INS5_6EncdecEEEEE19ReadConfidenceModelERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbbEUlOT_E_EclB8ne180100IJRNS0_5__altILm0ES9_EEEEEDcDpOT_(const std::string ***a1, uint64_t a2)
{
  uint64_t v3 = **a1;
  int v4 = *((unsigned __int8 *)*a1 + 8);
  char v5 = *((unsigned char *)*a1 + 9);
  v6[0] = 0;
  v6[1] = 0;
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Read(a2, v3, v4, v5, 0, v6);
}

void sub_1B2327E54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void _ZNKSt3__116__variant_detail12__visitation9__variant15__value_visitorIZN5kaldi6quasar17TranslationEngineIJNS5_21TranslationBeamSearchINS5_19TorchEncoderDecoderEEENS7_INS5_6EncdecEEEEE19ReadConfidenceModelERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbbEUlOT_E_EclB8ne180100IJRNS0_5__altILm1ESB_EEEEEDcDpOT_(const std::string ***a1, uint64_t a2)
{
  uint64_t v3 = **a1;
  int v4 = *((unsigned __int8 *)*a1 + 8);
  char v5 = *((unsigned char *)*a1 + 9);
  v6[0] = 0;
  v6[1] = 0;
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::Read(a2, v3, v4, v5, 0, v6);
}

void sub_1B2327ECC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZN5kaldi6quasar17TranslationEngineIJNS9_21TranslationBeamSearchINS9_19TorchEncoderDecoderEEENSB_INS9_6EncdecEEEEE15ReadInputHammerERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEUlOT_E_EEJRNS0_6__baseILNS0_6_TraitE1EJSD_SF_EEEEEEDcSP_DpT0_(uint64_t **a1, uint64_t a2)
{
  return kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ReadInputHammer(a2, **a1);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZN5kaldi6quasar17TranslationEngineIJNS9_21TranslationBeamSearchINS9_19TorchEncoderDecoderEEENSB_INS9_6EncdecEEEEE15ReadInputHammerERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEUlOT_E_EEJRNS0_6__baseILNS0_6_TraitE1EJSD_SF_EEEEEEDcSP_DpT0_(uint64_t **a1, uint64_t a2)
{
  return kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ReadInputHammer(a2, **a1);
}

uint64_t kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ReadInputHammer(uint64_t a1, uint64_t a2)
{
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Reading tag filters from : ", 27);
    int v5 = *(char *)(a2 + 23);
    if (v5 >= 0) {
      uint64_t v6 = a2;
    }
    else {
      uint64_t v6 = *(void *)a2;
    }
    if (v5 >= 0) {
      uint64_t v7 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v7 = *(void *)(a2 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v6, v7);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v9);
  }
  return kaldi::quasar::InputHammer::ReadRaw(a1 + 8);
}

void sub_1B2327F9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t kaldi::quasar::InputHammer::ReadRaw(uint64_t a1)
{
  v6[19] = *MEMORY[0x1E4F143B8];
  std::ifstream::basic_ifstream(v4);
  if (v5[15]) {
    uint64_t Raw = kaldi::quasar::InputHammer::ReadRaw(a1, v4);
  }
  else {
    uint64_t Raw = 0;
  }
  v4[0] = *MEMORY[0x1E4FBA3F8];
  *(uint64_t *)((char *)v4 + *(void *)(v4[0] - 24)) = *(void *)(MEMORY[0x1E4FBA3F8] + 24);
  MEMORY[0x1B3EA7CF0](v5);
  std::istream::~istream();
  MEMORY[0x1B3EA8520](v6);
  return Raw;
}

void sub_1B23280F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ifstream::~ifstream((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::InputHammer::ReadRaw(uint64_t a1, uint64_t *a2)
{
  kaldi::quasar::InputHammer::Info((uint64_t *)&v66, (kaldi::quasar::InputHammer *)a1);
  if (v67 < 0) {
    operator delete(v66);
  }
  memset(&v65, 0, sizeof(v65));
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 2) != 0) {
    goto LABEL_28;
  }
  kaldi::ReadToken(a2, 0, (uint64_t)&v65);
  std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v65.__r_.__value_.__l.__size_ != 9) {
      goto LABEL_13;
    }
    uint64_t v3 = (std::string *)v65.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) != 9) {
      goto LABEL_13;
    }
    uint64_t v3 = &v65;
  }
  std::string::size_type v4 = v3->__r_.__value_.__r.__words[0];
  int v5 = v3->__r_.__value_.__s.__data_[8];
  if (v4 != 0x7473694C464E443CLL || v5 != 62)
  {
LABEL_13:
    uint64_t v7 = (std::locale::id *)MEMORY[0x1E4FBA258];
    do
    {
      kaldi::Trim(&v65);
      memset(&v64, 0, sizeof(v64));
      kaldi::SplitStringToVector(&v65, "\\"", 1, (uint64_t)&v64);
      if (v64.__r_.__value_.__l.__size_ - v64.__r_.__value_.__r.__words[0] == 24)
      {
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, (unsigned __int8 *)v64.__r_.__value_.__l.__data_, (uint64_t)v64.__r_.__value_.__l.__data_);
      }
      else if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v61);
        char v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)"Skipping tag ", 13);
        if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v9 = &v65;
        }
        else {
          long long v9 = (std::string *)v65.__r_.__value_.__r.__words[0];
        }
        if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v65.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v65.__r_.__value_.__l.__size_;
        }
        long long v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, size);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" ", 1);
        std::ostream::operator<<();
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v61);
      }
      v61[0].__locale_ = (std::locale::__imp *)&v64;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v61);
      std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)));
      uint64_t v12 = std::locale::use_facet(v61, v7);
      unsigned __int8 v13 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
      std::locale::~locale(v61);
      long long v14 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&v65, v13);
    }
    while ((*((unsigned char *)v14 + *(void *)(*v14 - 24) + 32) & 5) == 0);
    if (kaldi::g_kaldi_verbose_level < 0) {
      goto LABEL_28;
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v61);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)"Input hammer has ", 17);
    long long v15 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" known entries it will remove", 29);
LABEL_27:
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v61);
LABEL_28:
    uint64_t v16 = 1;
    goto LABEL_29;
  }
  if (kaldi::quasar::InputHammer::ReadHeader(a1, a2, 0))
  {
    *(unsigned char *)(a1 + 105) = 1;
    std::string::size_type v19 = *(void *)(a1 + 80);
    uint64_t v18 = *(void *)(a1 + 88);
    if (v19 != v18)
    {
      char v20 = (void *)(a1 + 40);
      do
      {
        if (!std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v20, (unsigned __int8 *)v19))
        {
          *(_OWORD *)&v61[0].__locale_ = 0u;
          long long v62 = 0u;
          int v63 = 1065353216;
          v64.__r_.__value_.__r.__words[0] = v19;
          unsigned __int8 v21 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v20, (unsigned __int8 *)v19, (uint64_t)&std::piecewise_construct, (long long **)&v64);
          std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__move_assign((uint64_t)(v21 + 40), (uint64_t *)v61);
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v61);
        }
        if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v61);
          int v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)"Add tag ", 8);
          int v23 = *(char *)(v19 + 23);
          if (v23 >= 0) {
            uint64_t v24 = v19;
          }
          else {
            uint64_t v24 = *(void *)v19;
          }
          if (v23 >= 0) {
            uint64_t v25 = *(unsigned __int8 *)(v19 + 23);
          }
          else {
            uint64_t v25 = *(void *)(v19 + 8);
          }
          char v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, v24, v25);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" to pass lists", 14);
          kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v61);
        }
        v19 += 24;
      }
      while (v19 != v18);
    }
    memset(&v64, 0, sizeof(v64));
    uint64_t v27 = (void *)(a1 + 40);
    char v28 = (std::locale::id *)MEMORY[0x1E4FBA258];
    while (1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)));
      int v29 = std::locale::use_facet(v61, v28);
      unsigned __int8 v30 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v29->__vftable[2].~facet_0)(v29, 10);
      std::locale::~locale(v61);
      std::string v31 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&v64, v30);
      if ((*((unsigned char *)v31 + *(void *)(*v31 - 24) + 32) & 5) != 0) {
        break;
      }
      if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v61);
        if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string v32 = &v64;
        }
        else {
          std::string v32 = (std::string *)v64.__r_.__value_.__r.__words[0];
        }
        if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v33 = HIBYTE(v64.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v33 = v64.__r_.__value_.__l.__size_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)v32, v33);
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v61);
      }
      kaldi::Trim(&v64);
      BOOL v58 = 0;
      uint64_t v59 = 0;
      uint64_t v60 = 0;
      std::string::basic_string[abi:ne180100]<0>(v61, "|||");
      kaldi::SplitStringOnString((uint64_t)&v64, (char *)v61, (uint64_t *)&v58);
      if (SBYTE7(v62) < 0) {
        operator delete(v61[0].__locale_);
      }
      uint64_t v34 = (uint64_t)v58;
      if (v59 - (void)v58 == 48)
      {
        if (*((char *)v58 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)v58, *((void *)v58 + 1));
          uint64_t v34 = (uint64_t)v58;
        }
        else
        {
          long long v35 = *v58;
          v57.__r_.__value_.__r.__words[2] = *((void *)v58 + 2);
          *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v35;
        }
        if (*(char *)(v34 + 47) < 0) {
          std::string::__init_copy_ctor_external(&v56, *(const std::string::value_type **)(v34 + 24), *(void *)(v34 + 32));
        }
        else {
          std::string v56 = *(std::string *)(v34 + 24);
        }
        kaldi::Trim(&v57);
        kaldi::Trim(&v56);
        std::string::size_type v40 = v57.__r_.__value_.__l.__size_;
        if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v40 = HIBYTE(v57.__r_.__value_.__r.__words[2]);
        }
        std::string::size_type v41 = HIBYTE(v56.__r_.__value_.__r.__words[2]);
        char v42 = HIBYTE(v56.__r_.__value_.__r.__words[2]);
        if (v40)
        {
          if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v41 = v56.__r_.__value_.__l.__size_;
          }
          if (v41)
          {
            if (!std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v27, (unsigned __int8 *)&v56))
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v61);
              long long v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)"Not configured for locale : ", 28);
              if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                long long v49 = &v56;
              }
              else {
                long long v49 = (std::string *)v56.__r_.__value_.__r.__words[0];
              }
              if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v50 = HIBYTE(v56.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v50 = v56.__r_.__value_.__l.__size_;
              }
              uint64_t v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)v49, v50);
              uint64_t v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)" on line ", 9);
              if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                char v53 = &v64;
              }
              else {
                char v53 = (std::string *)v64.__r_.__value_.__r.__words[0];
              }
              if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v54 = HIBYTE(v64.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v54 = v64.__r_.__value_.__l.__size_;
              }
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)v53, v54);
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v61);
            }
            int v68 = &v56;
            uint64_t v43 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v27, (unsigned __int8 *)&v56, (uint64_t)&std::piecewise_construct, (long long **)&v68);
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)(v43 + 40), (unsigned __int8 *)&v57, (uint64_t)&v57);
            char v42 = HIBYTE(v56.__r_.__value_.__r.__words[2]);
          }
        }
        if (v42 < 0) {
          operator delete(v56.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v57.__r_.__value_.__l.__data_);
        }
      }
      else if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v61);
        long long v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)"Skipping tag ", 13);
        if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v37 = &v64;
        }
        else {
          uint64_t v37 = (std::string *)v64.__r_.__value_.__r.__words[0];
        }
        if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v38 = HIBYTE(v64.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v38 = v64.__r_.__value_.__l.__size_;
        }
        std::string v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)v37, v38);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)" ", 1);
        std::ostream::operator<<();
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v61);
      }
      v61[0].__locale_ = (std::locale::__imp *)&v58;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v61);
    }
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v64.__r_.__value_.__l.__data_);
    }
    if (kaldi::g_kaldi_verbose_level < 0) {
      goto LABEL_28;
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v61);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)"Input hammer has DNF ", 21);
    uint64_t v44 = *(uint64_t **)(a1 + 56);
    if (v44)
    {
      int v45 = 0;
      do
      {
        v45 += *((_DWORD *)v44 + 16);
        uint64_t v44 = (uint64_t *)*v44;
      }
      while (v44);
    }
    uint64_t v46 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)" known entries across ", 22);
    long long v47 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)" locales it will leave in place", 31);
    goto LABEL_27;
  }
  uint64_t v16 = 0;
LABEL_29:
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v65.__r_.__value_.__l.__data_);
  }
  return v16;
}

void sub_1B23288E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&a27);
  if (*(char *)(v32 - 129) < 0) {
    operator delete(*(void **)(v32 - 152));
  }
  _Unwind_Resume(a1);
}

void sub_1B2328960(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)va);
  JUMPOUT(0x1B2328994);
}

void sub_1B23289A8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::locale a21)
{
}

void sub_1B23289D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)va);
  JUMPOUT(0x1B23289E8);
}

void sub_1B23289E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21)
{
  a21 = (void **)(v21 - 176);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a21);
  JUMPOUT(0x1B2328A10);
}

void sub_1B23289FC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::locale a21)
{
}

uint64_t kaldi::quasar::InputHammer::Info(kaldi::quasar::InputHammer *this)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"RemoveUnderScores = ", 20);
  uint64_t v2 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", StripTokenLocales = ", 22);
  uint64_t v3 = *((void *)this + 10);
  for (uint64_t i = *((void *)this + 11); v3 != i; v3 += 24)
  {
    int v5 = *(char *)(v3 + 23);
    if (v5 >= 0) {
      uint64_t v6 = v3;
    }
    else {
      uint64_t v6 = *(void *)v3;
    }
    if (v5 >= 0) {
      uint64_t v7 = *(unsigned __int8 *)(v3 + 23);
    }
    else {
      uint64_t v7 = *(void *)(v3 + 8);
    }
    char v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v6, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" ", 1);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", # of entries ", 15);
  long long v9 = (uint64_t *)*((void *)this + 7);
  if (v9)
  {
    int v10 = 0;
    do
    {
      v10 += *((_DWORD *)v9 + 16);
      long long v9 = (uint64_t *)*v9;
    }
    while (v9);
  }
  std::ostream::operator<<();
  std::stringbuf::str();
  v13[0] = *MEMORY[0x1E4FBA408];
  uint64_t v11 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v13 + *(void *)(v13[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v14[0] = v11;
  v14[1] = MEMORY[0x1E4FBA470] + 16;
  if (v15 < 0) {
    operator delete((void *)v14[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EA8520](&v16);
}

void sub_1B2328C4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::InputHammer::ReadHeader(uint64_t a1, uint64_t *a2, int a3)
{
  int v36 = -1;
  uint64_t v6 = a2 + 4;
  uint64_t v7 = (uint64_t *)(a1 + 80);
  std::string v31 = (char *)(a1 + 104);
  do
  {
    while (1)
    {
      if ((*((unsigned char *)v6 + *(void *)(*a2 - 24)) & 2) != 0) {
        return 1;
      }
      memset(&v35, 0, sizeof(v35));
      kaldi::ReadToken(a2, a3, (uint64_t)&v35);
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::size_type size = v35.__r_.__value_.__l.__size_;
        if (v35.__r_.__value_.__l.__size_ == 10
          && *(void *)v35.__r_.__value_.__l.__data_ == 0x73694C464E442F3CLL
          && *(_WORD *)(v35.__r_.__value_.__r.__words[0] + 8) == 15988)
        {
LABEL_68:
          int v26 = 3;
          goto LABEL_77;
        }
        if (v35.__r_.__value_.__l.__size_ != 19) {
          goto LABEL_46;
        }
        if (*(void *)v35.__r_.__value_.__l.__data_ == 0x5565766F6D65523CLL
          && *(void *)(v35.__r_.__value_.__r.__words[0] + 8) == 0x726F63537265646ELL
          && *(void *)(v35.__r_.__value_.__r.__words[0] + 11) == 0x3E7365726F635372)
        {
LABEL_67:
          kaldi::ReadBasicType<BOOL>(a2, a3, v31);
          goto LABEL_76;
        }
        std::string::size_type size = v35.__r_.__value_.__l.__size_;
        if (*(void *)v35.__r_.__value_.__l.__data_ == 0x6F5470697274533CLL
          && *(void *)(v35.__r_.__value_.__r.__words[0] + 8) == 0x6C61636F4C6E656BLL
          && *(void *)(v35.__r_.__value_.__r.__words[0] + 11) == 0x3E73656C61636F4CLL)
        {
LABEL_69:
          kaldi::ReadToken(a2, a3, (uint64_t)&v35);
          uint64_t v32 = 0;
          std::string::size_type v33 = 0;
          uint64_t v34 = 0;
          kaldi::SplitStringToVector(&v35, ",", 1, (uint64_t)&v32);
          char v28 = v32;
          uint64_t v27 = v33;
          if (v32 != v33)
          {
            unint64_t v29 = *(void *)(a1 + 88);
            do
            {
              if (v29 >= *(void *)(a1 + 96))
              {
                unint64_t v29 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v7, v28);
              }
              else
              {
                std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v7, v28);
                v29 += 24;
              }
              *(void *)(a1 + 88) = v29;
              char v28 = (long long *)((char *)v28 + 24);
            }
            while (v28 != v27);
          }
          uint64_t v37 = &v32;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
          goto LABEL_76;
        }
        if ((*((unsigned char *)&v35.__r_.__value_.__s + 23) & 0x80) != 0)
        {
LABEL_46:
          if (size != 9) {
            goto LABEL_58;
          }
          uint64_t v18 = (std::string *)v35.__r_.__value_.__r.__words[0];
          goto LABEL_48;
        }
        if (HIBYTE(v35.__r_.__value_.__r.__words[2]) != 9) {
          goto LABEL_58;
        }
      }
      else if (HIBYTE(v35.__r_.__value_.__r.__words[2]) != 9)
      {
        if (HIBYTE(v35.__r_.__value_.__r.__words[2]) == 10)
        {
          if (v35.__r_.__value_.__r.__words[0] == 0x73694C464E442F3CLL
            && LOWORD(v35.__r_.__value_.__r.__words[1]) == 15988)
          {
            goto LABEL_68;
          }
        }
        else if (HIBYTE(v35.__r_.__value_.__r.__words[2]) == 19)
        {
          if (v35.__r_.__value_.__r.__words[0] == 0x5565766F6D65523CLL
            && v35.__r_.__value_.__l.__size_ == 0x726F63537265646ELL
            && *(std::string::size_type *)((char *)&v35.__r_.__value_.__r.__words[1] + 3) == 0x3E7365726F635372)
          {
            goto LABEL_67;
          }
          if (v35.__r_.__value_.__r.__words[0] == 0x6F5470697274533CLL
            && v35.__r_.__value_.__l.__size_ == 0x6C61636F4C6E656BLL
            && *(std::string::size_type *)((char *)&v35.__r_.__value_.__r.__words[1] + 3) == 0x3E73656C61636F4CLL)
          {
            goto LABEL_69;
          }
        }
        goto LABEL_58;
      }
      uint64_t v18 = &v35;
LABEL_48:
      std::string::size_type v19 = v18->__r_.__value_.__r.__words[0];
      int v20 = v18->__r_.__value_.__s.__data_[8];
      if (v19 == 0x6E6F69737265563CLL && v20 == 62)
      {
        kaldi::ReadBasicType<int>(a2, a3, (uint64_t)&v36);
LABEL_76:
        std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
        int v26 = 0;
        goto LABEL_77;
      }
LABEL_58:
      if (kaldi::g_kaldi_verbose_level >= -1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
        int v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"Unknown token ", 14);
        if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v24 = &v35;
        }
        else {
          uint64_t v24 = (std::string *)v35.__r_.__value_.__r.__words[0];
        }
        if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v25 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v25 = v35.__r_.__value_.__l.__size_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v24, v25);
        kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
      }
      int v26 = 1;
LABEL_77:
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
        break;
      }
      if (v26) {
        return v26 == 3;
      }
    }
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  while (!v26);
  return v26 == 3;
}

void sub_1B2329078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  *(void *)(v11 - 96) = &a11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v11 - 96));
  if (*(char *)(v11 - 105) < 0) {
    operator delete(*(void **)(v11 - 128));
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ReadInputHammer(uint64_t a1, uint64_t a2)
{
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::string::size_type v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Reading tag filters from : ", 27);
    int v5 = *(char *)(a2 + 23);
    if (v5 >= 0) {
      uint64_t v6 = a2;
    }
    else {
      uint64_t v6 = *(void *)a2;
    }
    if (v5 >= 0) {
      uint64_t v7 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v7 = *(void *)(a2 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v6, v7);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v9);
  }
  return kaldi::quasar::InputHammer::ReadRaw(a1 + 8);
}

void sub_1B2329158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *std::__tree<std::__value_type<std::vector<std::string>,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>,std::__map_value_compare<std::vector<std::string>,std::__value_type<std::vector<std::string>,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>,std::less<std::vector<std::string>>,true>,std::allocator<std::__value_type<std::vector<std::string>,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>>>::__emplace_unique_key_args<std::vector<std::string>,std::pair<std::vector<std::string>,std::shared_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>>(uint64_t **a1, const void ***a2, uint64_t a3)
{
  int v5 = std::__tree<std::vector<std::string>>::__find_equal<std::vector<std::string>>((uint64_t)a1, &v10, a2);
  uint64_t v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    std::__tree<std::__value_type<std::vector<std::string>,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>,std::__map_value_compare<std::vector<std::string>,std::__value_type<std::vector<std::string>,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>,std::less<std::vector<std::string>>,true>,std::allocator<std::__value_type<std::vector<std::string>,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>>>::__construct_node<std::pair<std::vector<std::string>,std::shared_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>>((uint64_t)a1, a3, (uint64_t)v9);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v10, v7, v9[0]);
    uint64_t v6 = v9[0];
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::vector<std::string>,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::vector<std::string>,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

_OWORD *std::__tree<std::__value_type<std::vector<std::string>,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>,std::__map_value_compare<std::vector<std::string>,std::__value_type<std::vector<std::string>,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>,std::less<std::vector<std::string>>,true>,std::allocator<std::__value_type<std::vector<std::string>,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>>>::__construct_node<std::pair<std::vector<std::string>,std::shared_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t result = operator new(0x48uLL);
  *(void *)a3 = result;
  *(void *)(a3 + 8) = v5;
  result[2] = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  *(void *)(a2 + 16) = 0;
  *((void *)result + 6) = v7;
  *((void *)result + 7) = v8;
  uint64_t v9 = *(void *)(a2 + 32);
  *((void *)result + 8) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 16), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::vector<std::string>,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::vector<std::string>,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::vector<std::string> const,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void _ZNKSt3__116__variant_detail12__visitation9__variant15__value_visitorIZN5kaldi6quasar17TranslationEngineIJNS5_21TranslationBeamSearchINS5_19TorchEncoderDecoderEEENS7_INS5_6EncdecEEEEE11SelectModelERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESK_SK_bEUlOT_E_EclB8ne180100IJRNS0_5__altILm0ES9_EEEEEDcDpOT_(uint64_t **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (*(unsigned char *)(a2 + 4896))
  {
    kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::SelectModel((void **)(a2 + 136), **a1, (*a1)[1], a3);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
}

void _ZNKSt3__116__variant_detail12__visitation9__variant15__value_visitorIZN5kaldi6quasar17TranslationEngineIJNS5_21TranslationBeamSearchINS5_19TorchEncoderDecoderEEENS7_INS5_6EncdecEEEEE11SelectModelERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESK_SK_bEUlOT_E_EclB8ne180100IJRNS0_5__altILm1ESB_EEEEEDcDpOT_(std::string::size_type **a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (*(unsigned char *)(a2 + 4896))
  {
    kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::SelectModel((uint64_t *)(a2 + 136), **a1, (*a1)[1], *((unsigned char *)*a1 + 24) != 0, a3);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZN5kaldi6quasar17TranslationEngineIJNS9_21TranslationBeamSearchINS9_19TorchEncoderDecoderEEENSB_INS9_6EncdecEEEEE13OutputSymbolsEvEUlOT_E_EEJRNS0_6__baseILNS0_6_TraitE1EJSD_SF_EEEEEEDcSH_DpT0_(uint64_t a1, uint64_t a2)
{
  return kaldi::quasar::TorchEncoderDecoder::OutputSymbols(*(kaldi::quasar::TorchEncoderDecoder **)(a2 + 136));
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZN5kaldi6quasar17TranslationEngineIJNS9_21TranslationBeamSearchINS9_19TorchEncoderDecoderEEENSB_INS9_6EncdecEEEEE13OutputSymbolsEvEUlOT_E_EEJRNS0_6__baseILNS0_6_TraitE1EJSD_SF_EEEEEEDcSH_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)(a2 + 136) + 560);
}

void std::vector<quasar::TranslationPhraseInternal>::__assign_with_size[abi:ne180100]<quasar::TranslationPhraseInternal const*,quasar::TranslationPhraseInternal const*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(void **)a1;
  if (0x8F5C28F5C28F5C29 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    std::vector<quasar::TranslationPhraseInternal>::__vdeallocate((void **)a1);
    if (a4 > 0x147AE147AE147AELL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x1EB851EB851EB852 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0x8F5C28F5C28F5C29 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0xA3D70A3D70A3D7) {
      unint64_t v11 = 0x147AE147AE147AELL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<quasar::TranslationPhraseInternal>::__vallocate[abi:ne180100]((void *)a1, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::TranslationPhraseInternal>,quasar::TranslationPhraseInternal const*,quasar::TranslationPhraseInternal const*,quasar::TranslationPhraseInternal*>(v8, (uint64_t)a2, (uint64_t)a3, *(void *)(a1 + 8));
    goto LABEL_11;
  }
  if (0x8F5C28F5C28F5C29 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    unsigned __int8 v13 = &a2[(uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3];
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,quasar::TranslationPhraseInternal *,quasar::TranslationPhraseInternal *,quasar::TranslationPhraseInternal *,0>(a2, v13, (uint64_t)v9);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::TranslationPhraseInternal>,quasar::TranslationPhraseInternal const*,quasar::TranslationPhraseInternal const*,quasar::TranslationPhraseInternal*>(v8, (uint64_t)v13, (uint64_t)a3, *(void *)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,quasar::TranslationPhraseInternal *,quasar::TranslationPhraseInternal *,quasar::TranslationPhraseInternal *,0>(a2, a3, (uint64_t)v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
      quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)(v16 - 200));
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_1B23294D4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B23294DC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZNK5kaldi6quasar17TranslationEngineIJNS9_21TranslationBeamSearchINS9_19TorchEncoderDecoderEEENSB_INS9_6EncdecEEEEE13NumActiveHypsEvEUlOT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSD_SF_EEEEEEDcSH_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 5836)) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = *(void *)(a2 + 5872) == *(void *)(a2 + 5864);
  }
  if (v2) {
    return ((*(void *)(a2 + 5792) - *(void *)(a2 + 5784)) >> 3);
  }
  else {
    return 1;
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZNK5kaldi6quasar17TranslationEngineIJNS9_21TranslationBeamSearchINS9_19TorchEncoderDecoderEEENSB_INS9_6EncdecEEEEE13NumActiveHypsEvEUlOT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSD_SF_EEEEEEDcSH_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 5836)) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = *(void *)(a2 + 5872) == *(void *)(a2 + 5864);
  }
  if (v2) {
    return ((*(void *)(a2 + 5792) - *(void *)(a2 + 5784)) >> 3);
  }
  else {
    return 1;
  }
}

double std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<void kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>::Init<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> const*,fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>> *)::{lambda(fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>> &>(uint64_t **a1, uint64_t a2)
{
  return kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Init<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a2, **a1, (*a1)[1]);
}

double std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<void kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>::Init<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> const*,fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>> *)::{lambda(fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>> &>(uint64_t **a1, uint64_t a2)
{
  return kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::Init<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a2, **a1, (*a1)[1]);
}

double kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Init<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v19, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"entered Init with #ActiveHyps: ", 31);
    uint64_t v6 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" at decoding-position: ", 23);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v19);
  }
  *(void *)(a1 + 5712) = a3;
  kaldi::quasar::TorchEncoderDecoder::Start(*(void **)(a1 + 136), *(clockid_t *)(a2 + 312), a2 + 112);
  (*(void (**)(void))(**(void **)(a1 + 5712) + 224))(*(void *)(a1 + 5712));
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 200))(a3);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 5712) + 176))(*(void *)(a1 + 5712), v7);
  *(_DWORD *)(a1 + 572std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = -1;
  *(int32x2_t *)(a1 + 5728) = vdup_n_s32(0x7F800000u);
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 5736), 0, 0, 0);
  int v8 = *(_DWORD *)(a2 + 184);
  *(void *)(a1 + 576std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = 0x3F8000004F000000;
  if (v8 == 1) {
    *(float *)(a1 + 5764) = 1.0 - *(float *)(a2 + 180);
  }
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare::NbestCompare((uint64_t)&v19, *(_DWORD *)(a2 + 216), *(float *)(a2 + 220), *(float *)(a2 + 224));
  *(void *)(a1 + 5768) = v19;
  *(_DWORD *)(a1 + 5776) = v20;
  *(void *)(a1 + 5792) = *(void *)(a1 + 5784);
  std::vector<kaldi::Matrix<float>>::resize((uint64_t *)(a1 + 4952), 1uLL);
  kaldi::Matrix<float>::Resize(*(int32x2_t **)(a1 + 4952), 0, 0, 0, 0);
  uint64_t v9 = *(void **)(a1 + 5136);
  unint64_t v10 = *(void **)(a1 + 5128);
  if (v9 != v10)
  {
    unint64_t v11 = v9 - 6;
    uint64_t v12 = v9 - 6;
    unsigned __int8 v13 = v9 - 6;
    do
    {
      uint64_t v14 = *v13;
      v13 -= 6;
      (*(void (**)(void *))(v14 + 16))(v12);
      v11 -= 6;
      BOOL v15 = v12 == v10;
      uint64_t v12 = v13;
    }
    while (!v15);
  }
  *(void *)(a1 + 5136) = v10;
  uint64_t v16 = *(void *)(a1 + 5160);
  uint64_t v17 = *(void *)(a1 + 5152);
  while (v16 != v17)
    uint64_t v16 = kaldi::Matrix<float>::~Matrix(v16 - 40);
  *(void *)(a1 + 516std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = v17;
  double result = 0.0;
  *(void *)(a1 + 5832) = 0;
  *(void *)(a1 + 5872) = *(void *)(a1 + 5864);
  return result;
}

void sub_1B23297E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare::NbestCompare(uint64_t a1, int a2, float a3, float a4)
{
  *(_DWORD *)a1 = a2;
  *(float *)(a1 + 4) = a3;
  *(float *)(a1 + 8) = a4;
  if (kaldi::g_kaldi_verbose_level >= 1)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v7, 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Initializing NbestCompare. alpha: ", 34);
    uint64_t v5 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)", sigma: ", 9);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v7);
  }
  return a1;
}

void sub_1B232988C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

float std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<float kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>::StaticReadWrite<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> const*,std::vector<std::string> const&,std::vector<std::string>*,BOOL)::{lambda(fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>> &>(uint64_t **a1, uint64_t a2)
{
  return kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::StaticReadWrite<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a2, **a1, (uint64_t *)(*a1)[1], (uint64_t *)(*a1)[2], *((unsigned __int8 *)*a1 + 24));
}

float std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<float kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>::StaticReadWrite<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> const*,std::vector<std::string> const&,std::vector<std::string>*,BOOL)::{lambda(fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>> &>(uint64_t **a1, uint64_t a2)
{
  return kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::StaticReadWrite<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a2, **a1, (uint64_t *)(*a1)[1], (uint64_t *)(*a1)[2], *((unsigned __int8 *)*a1 + 24));
}

float kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::StaticReadWrite<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, int a5)
{
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"entered StaticReadWrite final: ", 31);
    uint64_t v9 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" with #ActiveHyps: ", 19);
    unint64_t v10 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" at decoding-position: ", 23);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
  }
  int v73 = a5;
  int v11 = kaldi::MatrixBase<float>::NumRows(*(void *)(a1 + 4952));
  memset(&v76, 0, sizeof(v76));
  uint64_t v12 = *a3;
  if (a3[1] == *a3)
  {
    v15.__i_ = 0;
    std::vector<std::string>::pointer end = 0;
  }
  else
  {
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    do
    {
      __p[0] = 0;
      __p[1] = 0;
      v83[0] = 0;
      kaldi::quasar::InputHammer::FilterTags(a1 + 8, v12 + v13, (uint64_t)__p, a2 + 64);
      long long v79 = 0;
      long long v80 = 0;
      long long v81 = 0;
      if (SHIBYTE(v83[0]) < 0)
      {
        std::string::__init_copy_ctor_external(&v78, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      }
      else
      {
        *(_OWORD *)&v78.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
        v78.__r_.__value_.__r.__words[2] = v83[0];
      }
      kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::TokenizeInputString(a1, &v78, (uint64_t *)&v79);
      if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v78.__r_.__value_.__l.__data_);
      }
      std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(&v76, v76.__end_, (std::string *)v79, v80, 0xAAAAAAAAAAAAAAABLL * (((char *)v80 - (unsigned char *)v79) >> 3));
      v74[0] = &v79;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v74);
      if (SHIBYTE(v83[0]) < 0) {
        operator delete(__p[0]);
      }
      ++v14;
      uint64_t v12 = *a3;
      v13 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3) > v14);
    v15.__i_ = v76.__begin_;
    std::vector<std::string>::pointer end = v76.__end_;
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)v15.__i_) >> 3) > v11 || (v73 & 1) != 0)
  {
    *(void *)(a1 + 5872) = *(void *)(a1 + 5864);
    if (v11 >= 1)
    {
      v19.__i_ = &v15.__i_[v11];
      std::vector<std::string>::erase(&v76, v15, v19);
      v15.__i_ = v76.__begin_;
    }
    memset(&v77, 0, sizeof(v77));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v77, (long long *)v15.__i_, (long long *)v76.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v76.__end_ - (char *)v15.__i_) >> 3));
    uint64_t v71 = (void **)(a1 + 5864);
    kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Symbolize(a1, (uint64_t *)&v77, a1 + 5864, 0);
    __p[0] = &v77;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    __p[0] = &v76;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    if (v73)
    {
      int v20 = kaldi::quasar::TorchEncoderDecoder::EosSourceId(*(kaldi::quasar::TorchEncoderDecoder **)(a1 + 136)) - 1;
      uint64_t v21 = *(char **)(a1 + 5872);
      unint64_t v22 = *(void *)(a1 + 5880);
      if ((unint64_t)v21 >= v22)
      {
        uint64_t v24 = (char *)*v71;
        uint64_t v25 = (v21 - (unsigned char *)*v71) >> 2;
        unint64_t v26 = v25 + 1;
        if ((unint64_t)(v25 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v27 = v22 - (void)v24;
        if (v27 >> 1 > v26) {
          unint64_t v26 = v27 >> 1;
        }
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v28 = v26;
        }
        if (v28)
        {
          unint64_t v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 5880, v28);
          uint64_t v21 = *(char **)(a1 + 5872);
          uint64_t v24 = *(char **)(a1 + 5864);
        }
        else
        {
          unint64_t v29 = 0;
        }
        unsigned __int8 v30 = &v29[4 * v25];
        std::string v31 = &v29[4 * v28];
        *(_DWORD *)unsigned __int8 v30 = v20;
        int v23 = v30 + 4;
        while (v21 != v24)
        {
          int v32 = *((_DWORD *)v21 - 1);
          v21 -= 4;
          *((_DWORD *)v30 - 1) = v32;
          v30 -= 4;
        }
        *(void *)(a1 + 5864) = v30;
        *(void *)(a1 + 5872) = v23;
        *(void *)(a1 + 588std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = v31;
        if (v24) {
          operator delete(v24);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v21 = v20;
        int v23 = v21 + 4;
      }
      *(void *)(a1 + 5872) = v23;
    }
    if (*(_DWORD *)(a1 + 5836)) {
      int v33 = 0;
    }
    else {
      int v33 = *(_DWORD *)(a2 + 296);
    }
    LODWORD(v34) = *(_DWORD *)(a2 + 300);
    if ((int)v34 + v33 > (unint64_t)((uint64_t)(*(void *)(a1 + 5872) - *(void *)(a1 + 5864)) >> 2)
      && v73 == 0)
    {
      float v18 = 2147500000.0;
    }
    else
    {
      BOOL v70 = (void *)*MEMORY[0x1E4FBA408];
      uint64_t v68 = *(void *)(MEMORY[0x1E4FBA408] + 72);
      long long v69 = *(void **)(MEMORY[0x1E4FBA408] + 64);
      do
      {
        long long v79 = 0;
        long long v80 = 0;
        long long v81 = 0;
        if ((int)v34 + v33 >= 1)
        {
          int v36 = 0;
          uint64_t v37 = 0;
          while (1)
          {
            std::string::size_type v38 = *(_DWORD **)(a1 + 5864);
            if (v37 >= (unint64_t)((uint64_t)(*(void *)(a1 + 5872) - (void)v38) >> 2)) {
              break;
            }
            if (v36 >= v81)
            {
              std::string::size_type v40 = (long long *)v79;
              uint64_t v41 = ((char *)v36 - (unsigned char *)v79) >> 2;
              unint64_t v42 = v41 + 1;
              if ((unint64_t)(v41 + 1) >> 62) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v43 = (char *)v81 - (unsigned char *)v79;
              if (((char *)v81 - (unsigned char *)v79) >> 1 > v42) {
                unint64_t v42 = v43 >> 1;
              }
              if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v44 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v44 = v42;
              }
              if (v44)
              {
                int v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v81, v44);
                std::string::size_type v40 = (long long *)v79;
                int v36 = v80;
              }
              else
              {
                int v45 = 0;
              }
              uint64_t v46 = &v45[4 * v41];
              *(_DWORD *)uint64_t v46 = v38[v37];
              std::string v39 = (long long *)(v46 + 4);
              while (v36 != v40)
              {
                int v47 = *((_DWORD *)v36 - 1);
                int v36 = (long long *)((char *)v36 - 4);
                *((_DWORD *)v46 - 1) = v47;
                v46 -= 4;
              }
              long long v79 = v46;
              long long v80 = v39;
              long long v81 = (long long *)&v45[4 * v44];
              if (v40) {
                operator delete(v40);
              }
            }
            else
            {
              *(_DWORD *)int v36 = v38[v37];
              std::string v39 = (long long *)((char *)v36 + 4);
            }
            long long v80 = v39;
            ++v37;
            int v36 = v39;
            if (v37 >= *(int *)(a2 + 300) + (uint64_t)v33)
            {
              std::string::size_type v38 = *v71;
              break;
            }
          }
          if (v37)
          {
            long long v48 = (char *)&v38[v37];
            long long v49 = *(unsigned char **)(a1 + 5872);
            uint64_t v50 = v49 - v48;
            if (v49 != v48) {
              memmove(v38, v48, v49 - v48);
            }
            *(void *)(a1 + 5872) = (char *)v38 + v50;
          }
        }
        int v51 = kaldi::g_kaldi_verbose_level;
        if (kaldi::g_kaldi_verbose_level >= 5)
        {
          uint64_t v52 = kaldi::quasar::TorchEncoderDecoder::InputSymbols(*(kaldi::quasar::TorchEncoderDecoder **)(a1 + 136));
          if (v52)
          {
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
            char v53 = (long long *)v79;
            std::string::size_type v54 = v80;
            while (v53 != v54)
            {
              uint64_t v55 = *(int *)v53;
              std::string v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)" ", 1);
              (*(void (**)(std::vector<std::string> *__return_ptr, uint64_t, uint64_t))(*(void *)v52 + 88))(&v76, v52, v55 + 1);
              if (SHIBYTE(v76.__end_cap_.__value_) >= 0) {
                std::vector<std::string>::pointer begin = &v76;
              }
              else {
                std::vector<std::string>::pointer begin = v76.__begin_;
              }
              if (SHIBYTE(v76.__end_cap_.__value_) >= 0) {
                uint64_t value_high = HIBYTE(v76.__end_cap_.__value_);
              }
              else {
                uint64_t value_high = (uint64_t)v76.__end_;
              }
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)begin, value_high);
              if (SHIBYTE(v76.__end_cap_.__value_) < 0) {
                operator delete(v76.__begin_);
              }
              char v53 = (long long *)((char *)v53 + 4);
            }
            if (kaldi::g_kaldi_verbose_level > 4)
            {
              kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v76, 5);
              uint64_t v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v76, (uint64_t)"partial_input_addition:", 23);
              std::stringbuf::str();
              if ((v75 & 0x80u) == 0) {
                uint64_t v60 = v74;
              }
              else {
                uint64_t v60 = (void **)v74[0];
              }
              if ((v75 & 0x80u) == 0) {
                uint64_t v61 = v75;
              }
              else {
                uint64_t v61 = (uint64_t)v74[1];
              }
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)v60, v61);
              if ((char)v75 < 0) {
                operator delete(v74[0]);
              }
              kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v76);
            }
            __p[0] = v70;
            *(void **)((char *)__p + *((void *)v70 - 3)) = v69;
            v83[0] = v68;
            v83[1] = MEMORY[0x1E4FBA470] + 16;
            if (v84 < 0) {
              operator delete((void *)v83[9]);
            }
            std::streambuf::~streambuf();
            std::iostream::~basic_iostream();
            MEMORY[0x1B3EA8520](&v85);
          }
          int v51 = kaldi::g_kaldi_verbose_level;
        }
        if ((v51 & 0x80000000) == 0)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"src_input_host_[0].NumRows(): ", 30);
          kaldi::MatrixBase<float>::NumRows(*(void *)(a1 + 4952));
          std::ostream::operator<<();
          kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
        }
        kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Read<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, (uint64_t)&v79, 0);
        if (v73 && *(void *)(a1 + 5872) == *(void *)(a1 + 5864)) {
          float v62 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Write<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, *(_DWORD *)(a1 + 5188) - *(_DWORD *)(a1 + 5836), 1);
        }
        else {
          float v62 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Write<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, *(_DWORD *)(a2 + 300), 0);
        }
        float v18 = v62;
        if (*(unsigned char *)(a2 + 304)) {
          kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::PruneCurrentHyps(a1, 1);
        }
        BOOL v63 = !v73 || *(void *)(a1 + 5872) != *(void *)(a1 + 5864);
        if (v79)
        {
          long long v80 = (long long *)v79;
          operator delete(v79);
        }
        if (!v63) {
          break;
        }
        int v33 = 0;
        unint64_t v34 = *(int *)(a2 + 300);
      }
      while (v34 <= (uint64_t)(*(void *)(a1 + 5872) - *(void *)(a1 + 5864)) >> 2 || v73);
    }
    kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::GetCurrentBestWords(a1, (uint64_t)a4);
    if (kaldi::g_kaldi_verbose_level >= 5)
    {
      memset(&v76, 0, sizeof(v76));
      kaldi::JoinVectorToString<std::string>(a4, " ", (uint64_t)&v76);
      if (kaldi::g_kaldi_verbose_level >= 5)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 5);
        std::string v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"partial_output: ", 16);
        if (SHIBYTE(v76.__end_cap_.__value_) >= 0) {
          std::string v65 = &v76;
        }
        else {
          std::string v65 = v76.__begin_;
        }
        if (SHIBYTE(v76.__end_cap_.__value_) >= 0) {
          uint64_t v66 = HIBYTE(v76.__end_cap_.__value_);
        }
        else {
          uint64_t v66 = (uint64_t)v76.__end_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)v65, v66);
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
      }
      if (SHIBYTE(v76.__end_cap_.__value_) < 0) {
        operator delete(v76.__begin_);
      }
    }
  }
  else
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Input stream did not grow. Previously processed: ", 49);
      uint64_t v17 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" provided: ", 11);
      std::ostream::operator<<();
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    }
    kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::GetCurrentBestWords(a1, (uint64_t)a4);
    __p[0] = &v76;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    return 2147500000.0;
  }
  return v18;
}

void sub_1B232A2D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::InputHammer::FilterTags(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)(a1 + 105)) {
    return kaldi::quasar::InputHammer::PassSpecifiedTags(a1, a2, a3, a4);
  }
  else {
    return kaldi::quasar::InputHammer::RemoveSpecifiedTags((void *)a1, a2, a3);
  }
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::TokenizeInputString(uint64_t a1, const std::string *a2, uint64_t *a3)
{
  if (*(_DWORD *)(a1 + 5244) == 1)
  {
    memset(v12, 0, sizeof(v12));
    kaldi::SplitStringToVector(a2, " ", 1, (uint64_t)v12);
    kaldi::quasar::BPE::Apply(a1 + 152, v12, a3);
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    kaldi::JoinVectorToString<std::string>(a3, " ", (uint64_t)&v9);
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
      uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"BPE input ", 10);
      if (v11 >= 0) {
        uint64_t v6 = (void **)&v9;
      }
      else {
        uint64_t v6 = v9;
      }
      if (v11 >= 0) {
        uint64_t v7 = HIBYTE(v11);
      }
      else {
        uint64_t v7 = v10;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, v7);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v8);
    }
    if (SHIBYTE(v11) < 0) {
      operator delete(v9);
    }
    v8[0] = (void **)v12;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v8);
  }
  else
  {
    kaldi::SplitStringToVector(a2, " ", 1, (uint64_t)a3);
  }
}

void sub_1B232A584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  if (*(char *)(v9 - 57) < 0) {
    operator delete(*(void **)(v9 - 80));
  }
  a9 = (void **)(v9 - 56);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

__n128 kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::GetCurrentBestWords(uint64_t a1, uint64_t a2)
{
  std::string::size_type v4 = *(void **)(a1 + 5784);
  if (*(void **)(a1 + 5792) == v4) {
    uint64_t v5 = (unsigned int *)(a1 + 5832);
  }
  else {
    uint64_t v5 = (unsigned int *)(*v4 + 32);
  }
  uint64_t v6 = *v5;
  if ((int)v6 < 1) {
    return result;
  }
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)a2);
  do
  {
    if (*(_DWORD *)(a1 + 5248) == 1)
    {
      uint64_t v7 = kaldi::quasar::TorchEncoderDecoder::OutputSymbols(*(kaldi::quasar::TorchEncoderDecoder **)(a1 + 136));
      (*(void (**)(std::string *__return_ptr))(*(void *)v7 + 88))(&v53);
      if (kaldi::quasar::BPE::IsIntraWord(a1 + 152, (uint64_t **)&v53))
      {
        kaldi::quasar::BPE::StripSeparator(a1 + 152, &v53, &__p);
        uint64_t v9 = *(__n128 **)(a2 + 8);
        unint64_t v8 = *(void *)(a2 + 16);
        if ((unint64_t)v9 >= v8)
        {
          unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - *(void *)a2) >> 3);
          unint64_t v24 = v23 + 1;
          if (v23 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - *(void *)a2) >> 3);
          if (2 * v25 > v24) {
            unint64_t v24 = 2 * v25;
          }
          if (v25 >= 0x555555555555555) {
            unint64_t v26 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v26 = v24;
          }
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
          if (v26) {
            uint64_t v27 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(a2 + 16, v26);
          }
          else {
            uint64_t v27 = 0;
          }
          uint64_t v37 = v27 + v23;
          __v.__first_ = v27;
          __v.__begin_ = v37;
          __v.__end_cap_.__value_ = &v27[v26];
          long long v38 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          v37->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v37->__r_.__value_.__l.__data_ = v38;
          memset(&__p, 0, sizeof(__p));
          __v.__end_ = v37 + 1;
          std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
          uint64_t v39 = *(void *)(a2 + 8);
          std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
          int v40 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
          *(void *)(a2 + 8) = v39;
          if (v40 < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          __n128 result = *(__n128 *)&__p.__r_.__value_.__l.__data_;
          v9[1].n128_u64[0] = __p.__r_.__value_.__r.__words[2];
          __n128 *v9 = result;
          *(void *)(a2 + 8) = (char *)v9 + 24;
        }
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, " ");
        unint64_t v15 = *(void *)(a2 + 8);
        unint64_t v14 = *(void *)(a2 + 16);
        if (v15 >= v14)
        {
          unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - *(void *)a2) >> 3);
          unint64_t v29 = v28 + 1;
          if (v28 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - *(void *)a2) >> 3);
          if (2 * v30 > v29) {
            unint64_t v29 = 2 * v30;
          }
          if (v30 >= 0x555555555555555) {
            unint64_t v31 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v31 = v29;
          }
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
          if (v31) {
            int v32 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(a2 + 16, v31);
          }
          else {
            int v32 = 0;
          }
          uint64_t v41 = v32 + v28;
          __v.__first_ = v32;
          __v.__begin_ = v41;
          __v.__end_cap_.__value_ = &v32[v31];
          long long v42 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          v41->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v41->__r_.__value_.__l.__data_ = v42;
          memset(&__p, 0, sizeof(__p));
          __v.__end_ = v41 + 1;
          std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
          uint64_t v17 = *(std::string **)(a2 + 8);
          std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
          int v43 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
          *(void *)(a2 + 8) = v17;
          if (v43 < 0)
          {
            operator delete(__p.__r_.__value_.__l.__data_);
            uint64_t v17 = *(std::string **)(a2 + 8);
          }
        }
        else
        {
          long long v16 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *(void *)(v15 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
          *(_OWORD *)unint64_t v15 = v16;
          uint64_t v17 = (std::string *)(v15 + 24);
          *(void *)(a2 + 8) = v15 + 24;
        }
        if ((unint64_t)v17 >= *(void *)(a2 + 16))
        {
          uint64_t v44 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a2, (long long *)&v53);
        }
        else
        {
          if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v17, v53.__r_.__value_.__l.__data_, v53.__r_.__value_.__l.__size_);
          }
          else
          {
            __n128 result = *(__n128 *)&v53.__r_.__value_.__l.__data_;
            v17->__r_.__value_.__r.__words[2] = v53.__r_.__value_.__r.__words[2];
            *(__n128 *)&v17->__r_.__value_.__l.__data_ = result;
          }
          uint64_t v44 = (uint64_t)&v17[1];
          *(void *)(a2 + 8) = v17 + 1;
        }
        *(void *)(a2 + 8) = v44;
      }
      if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_55;
      }
    }
    else
    {
      uint64_t v11 = kaldi::quasar::TorchEncoderDecoder::OutputSymbols(*(kaldi::quasar::TorchEncoderDecoder **)(a1 + 136));
      (*(void (**)(std::string *__return_ptr))(*(void *)v11 + 88))(&v53);
      uint64_t v13 = *(__n128 **)(a2 + 8);
      unint64_t v12 = *(void *)(a2 + 16);
      if ((unint64_t)v13 < v12)
      {
        __n128 result = *(__n128 *)&v53.__r_.__value_.__l.__data_;
        v13[1].n128_u64[0] = v53.__r_.__value_.__r.__words[2];
        *uint64_t v13 = result;
        *(void *)(a2 + 8) = (char *)v13 + 24;
        goto LABEL_56;
      }
      unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v13 - *(void *)a2) >> 3);
      unint64_t v19 = v18 + 1;
      if (v18 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - *(void *)a2) >> 3);
      if (2 * v20 > v19) {
        unint64_t v19 = 2 * v20;
      }
      if (v20 >= 0x555555555555555) {
        unint64_t v21 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v21 = v19;
      }
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
      if (v21) {
        unint64_t v22 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(a2 + 16, v21);
      }
      else {
        unint64_t v22 = 0;
      }
      int v33 = v22 + v18;
      __v.__first_ = v22;
      __v.__begin_ = v33;
      __v.__end_cap_.__value_ = &v22[v21];
      long long v34 = *(_OWORD *)&v53.__r_.__value_.__l.__data_;
      v33->__r_.__value_.__r.__words[2] = v53.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v33->__r_.__value_.__l.__data_ = v34;
      memset(&v53, 0, sizeof(v53));
      __v.__end_ = v33 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
      uint64_t v35 = *(void *)(a2 + 8);
      std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
      int v36 = SHIBYTE(v53.__r_.__value_.__r.__words[2]);
      *(void *)(a2 + 8) = v35;
      if (v36 < 0) {
LABEL_55:
      }
        operator delete(v53.__r_.__value_.__l.__data_);
    }
LABEL_56:
    LODWORD(v6) = *(_DWORD *)(*(void *)(a1 + 5808) + 8 * v6);
  }
  while ((int)v6 > 0);
  unint64_t v46 = *(void *)a2;
  uint64_t v45 = *(void *)(a2 + 8);
  if (*(void *)a2 != v45)
  {
    unint64_t v47 = v45 - 24;
    if (v47 > v46)
    {
      unint64_t v48 = v46 + 24;
      do
      {
        uint64_t v49 = *(void *)(v48 - 8);
        __n128 result = *(__n128 *)(v48 - 24);
        uint64_t v50 = *(void *)(v47 + 16);
        *(_OWORD *)(v48 - ++*(_DWORD *)(result + 24) = *(_OWORD *)v47;
        *(void *)(v48 - 8) = v50;
        *(__n128 *)unint64_t v47 = result;
        *(void *)(v47 + 16) = v49;
        v47 -= 24;
        BOOL v51 = v48 >= v47;
        v48 += 24;
      }
      while (!v51);
    }
  }
  return result;
}

void sub_1B232AA98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::__split_buffer<std::wstring> *a22)
{
  *(void *)(v22 + 8) = v23;
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Symbolize(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = kaldi::quasar::TorchEncoderDecoder::InputSymbols(*(kaldi::quasar::TorchEncoderDecoder **)(a1 + 136));
  int v9 = kaldi::quasar::TorchEncoderDecoder::UnkSourceId(*(kaldi::quasar::TorchEncoderDecoder **)(a1 + 136));
  if (a2[1] != *a2)
  {
    int v10 = v9;
    uint64_t v11 = 0;
    do
    {
      BOOL v12 = kaldi::quasar::TorchEncoderDecoder::Reverse(*(kaldi::quasar::TorchEncoderDecoder **)(a1 + 136));
      uint64_t v13 = *a2;
      LODWORD(v14) = v11;
      if (v12) {
        uint64_t v14 = ~v11 - 0x5555555555555555 * ((a2[1] - v13) >> 3);
      }
      int v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v8 + 96))(v8, v13 + 24 * (int)v14);
      if (v15 == -1)
      {
        if (a4)
        {
          uint64_t v17 = *(_DWORD **)(a4 + 8);
          unint64_t v16 = *(void *)(a4 + 16);
          if ((unint64_t)v17 >= v16)
          {
            unint64_t v19 = *(_DWORD **)a4;
            uint64_t v20 = ((uint64_t)v17 - *(void *)a4) >> 2;
            unint64_t v21 = v20 + 1;
            if ((unint64_t)(v20 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v22 = v16 - (void)v19;
            if (v22 >> 1 > v21) {
              unint64_t v21 = v22 >> 1;
            }
            if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v23 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v23 = v21;
            }
            if (v23)
            {
              unint64_t v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 16, v23);
              unint64_t v19 = *(_DWORD **)a4;
              uint64_t v17 = *(_DWORD **)(a4 + 8);
            }
            else
            {
              unint64_t v24 = 0;
            }
            unint64_t v25 = &v24[4 * v20];
            *(_DWORD *)unint64_t v25 = v11;
            unint64_t v18 = v25 + 4;
            while (v17 != v19)
            {
              int v26 = *--v17;
              *((_DWORD *)v25 - 1) = v26;
              v25 -= 4;
            }
            *(void *)a4 = v25;
            *(void *)(a4 + 8) = v18;
            *(void *)(a4 + 16) = &v24[4 * v23];
            if (v19) {
              operator delete(v19);
            }
          }
          else
          {
            *uint64_t v17 = v11;
            unint64_t v18 = v17 + 1;
          }
          *(void *)(a4 + 8) = v18;
        }
        int v15 = v10;
        if (v10 == -1)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v45);
          uint64_t v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"Couldn't find symbol ", 21);
          uint64_t v40 = *a2 + 24 * v11;
          int v41 = *(char *)(v40 + 23);
          if (v41 >= 0) {
            uint64_t v42 = *a2 + 24 * v11;
          }
          else {
            uint64_t v42 = *(void *)v40;
          }
          if (v41 >= 0) {
            uint64_t v43 = *(unsigned __int8 *)(v40 + 23);
          }
          else {
            uint64_t v43 = *(void *)(v40 + 8);
          }
          uint64_t v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, v42, v43);
          std::operator<<[abi:ne180100]<std::char_traits<char>>(v44, " or <unk> UNK symbol");
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v45);
        }
      }
      int v27 = v15 - 1;
      unint64_t v29 = *(_DWORD **)(a3 + 8);
      unint64_t v28 = *(void *)(a3 + 16);
      if ((unint64_t)v29 >= v28)
      {
        unint64_t v31 = *(_DWORD **)a3;
        uint64_t v32 = ((uint64_t)v29 - *(void *)a3) >> 2;
        unint64_t v33 = v32 + 1;
        if ((unint64_t)(v32 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v34 = v28 - (void)v31;
        if (v34 >> 1 > v33) {
          unint64_t v33 = v34 >> 1;
        }
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v35 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v35 = v33;
        }
        if (v35)
        {
          int v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a3 + 16, v35);
          unint64_t v31 = *(_DWORD **)a3;
          unint64_t v29 = *(_DWORD **)(a3 + 8);
        }
        else
        {
          int v36 = 0;
        }
        uint64_t v37 = &v36[4 * v32];
        *(_DWORD *)uint64_t v37 = v27;
        unint64_t v30 = v37 + 4;
        while (v29 != v31)
        {
          int v38 = *--v29;
          *((_DWORD *)v37 - 1) = v38;
          v37 -= 4;
        }
        *(void *)a3 = v37;
        *(void *)(a3 + 8) = v30;
        *(void *)(a3 + 16) = &v36[4 * v35];
        if (v31) {
          operator delete(v31);
        }
      }
      else
      {
        _DWORD *v29 = v27;
        unint64_t v30 = v29 + 1;
      }
      *(void *)(a3 + 8) = v30;
      ++v11;
    }
    while (v11 != 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  }
}

void sub_1B232ADE8(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

uint64_t kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Read<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v32, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"entered Read to process #tokens: ", 33);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v32);
  }
  uint64_t v8 = (uint64_t *)(a1 + 4952);
  uint64_t v9 = *(void *)(a1 + 4952);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(void *)(a1 + 4960) - v9) >> 3) <= a4)
  {
    std::vector<kaldi::Matrix<float>>::resize((uint64_t *)(a1 + 4952), a4 + 1);
    uint64_t v9 = *v8;
  }
  long long v33 = 0u;
  long long v34 = 0u;
  int32x2_t v32 = (int32x2_t)&unk_1F0A51768;
  char v35 = 0;
  int v10 = kaldi::MatrixBase<float>::NumRows(v9 + 40 * a4);
  kaldi::Matrix<float>::Resize((int32x2_t *)(*v8 + 40 * a4), v10 + ((*(void *)(a3 + 8) - *(void *)a3) >> 2), 1, 2, 0);
  uint64_t v11 = *(int **)a3;
  uint64_t v12 = *v8;
  uint64_t v13 = *(void *)(a3 + 8) - *(void *)a3;
  if (v13)
  {
    uint64_t v14 = v13 >> 2;
    int v15 = (uint64_t *)(v12 + 40 * a4);
    int v16 = *((_DWORD *)v15 + 2);
    uint64_t v17 = *v15;
    uint64_t v18 = *((int *)v15 + 4);
    uint64_t v19 = v10;
    if ((unint64_t)(v13 >> 2) <= 1) {
      uint64_t v14 = 1;
    }
    uint64_t v20 = (float *)(v17 + 4 * (int)v18 * (uint64_t)v10);
    uint64_t v21 = 4 * v18;
    do
    {
      int v22 = *v11++;
      *uint64_t v20 = (float)v22;
      uint64_t v20 = (float *)((char *)v20 + v21);
      ++v19;
      --v14;
    }
    while (v14);
  }
  else
  {
    int v16 = *(_DWORD *)(v12 + 40 * a4 + 8);
  }
  kaldi::SubMatrix<float>::SubMatrix((uint64_t)&__p, v12 + 40 * a4, v10, (unint64_t)v13 >> 2, 0, v16);
  kaldi::CuMatrix<float>::operator=(&v32, (int *)&__p);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&__p);
  uint64_t v23 = *(void *)(a1 + 136);
  if (!v10)
  {
    int v24 = *(_DWORD *)(a2 + 288);
    int v25 = *(_DWORD *)(a2 + 292);
    std::string __p = 0;
    unint64_t v30 = 0;
    uint64_t v31 = 0;
    kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::SuppressedIds(a1, a2 + 64, a2 + 88, (uint64_t *)(a2 + 328), (uint64_t)v28);
    kaldi::quasar::TorchEncoderDecoder::ConstrainSoftmax(v23, a2 + 264, v24, v25, (int **)a3, (int **)&__p, v28);
    std::__tree<int>::destroy((uint64_t)v28, (void *)v28[1]);
    if (__p)
    {
      unint64_t v30 = __p;
      operator delete(__p);
    }
    kaldi::quasar::TorchEncoderDecoder::ResetHistoryState(*(kaldi::quasar::TorchEncoderDecoder **)(a1 + 136), 1);
    uint64_t v26 = *(void *)(a1 + 136);
    if (*(_DWORD *)(a2 + 300)) {
      kaldi::quasar::TorchEncoderDecoder::EncFeedforward(v26, (uint64_t)&v32, a4);
    }
    else {
      kaldi::quasar::TorchEncoderDecoder::StartFeedforward(v26, (uint64_t)&v32, a4, 0);
    }
    kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::AddInitialHypToCurrent<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2);
  }
  kaldi::quasar::TorchEncoderDecoder::EncFeedforward(*(void *)(a1 + 136), (uint64_t)&v32, a4);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v32);
}

void sub_1B232B0B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a16);
  _Unwind_Resume(a1);
}

float kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Write<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, int a3, int a4)
{
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"entered Write with #ActiveHyps: ", 32);
    uint64_t v7 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" at decoding-position: ", 23);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
  }
  v293 = 0;
  long long __src = 0;
  uint64_t v294 = 0;
  v290 = 0;
  v289 = 0;
  v291 = 0;
  v287 = 0;
  v286 = 0;
  uint64_t v288 = 0;
  std::priority_queue<float>::push((uint64_t)&v286, kaldi::quasar::kMaxCost);
  if (*(float *)(a2 + 320) != 0.0)
  {
    uint64_t v9 = *(void *)(a1 + 136);
    if (!*(unsigned char *)(v9 + 3922) || !*(unsigned char *)(v9 + 3923))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Decoder repetition detection requires an alignment model with shifted alignments!", 81);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
    }
  }
  BOOL v240 = (*(void *)(a2 + 200) || *(void *)(a2 + 208)) && (*(_DWORD *)(a2 + 184) - 1) < 2;
  uint64_t v241 = a2;
  if (a3 >= 1)
  {
    v246 = (unsigned __int8 *)(a1 + 5238);
    int v10 = *(_DWORD *)(a2 + 188);
    uint64_t v11 = *(int *)(a1 + 5836);
    int64_t v230 = v11 + a3;
    v234 = (int32x2_t *)(a1 + 4976);
    uint64_t v232 = 0;
    v233 = (int32x2_t *)(a1 + 5024);
    uint64_t v12 = (int32x2_t *)(a1 + 5072);
    double v13 = 1.0;
    uint64_t v14 = 0x4F0000004F000000;
    float v227 = 2147500000.0;
    uint64_t v15 = 0x4F0000004F000000;
    int v229 = v10;
    v228 = (char *)(a1 + 5784);
    v231 = (void *)(a1 + 5808);
    while (1)
    {
      uint64_t v16 = *(void *)(a1 + 5784);
      uint64_t v17 = *(void *)(a1 + 5792);
      if (v16 == v17) {
        goto LABEL_300;
      }
      if ((v10 != 1) | v232 & 1)
      {
        if (v10 == 2)
        {
          if (*(float *)v286 < v227) {
            goto LABEL_300;
          }
        }
        else if (v10 || SHIDWORD(v232) >= *(_DWORD *)(a2 + 160))
        {
          goto LABEL_300;
        }
      }
      if (*(float *)(a2 + 320) != 0.0 && *(unsigned char *)(*(void *)v16 + 200)) {
        goto LABEL_300;
      }
      uint64_t v18 = v289;
      uint64_t v19 = v290;
      if (v290 != v289)
      {
        do
        {
          std::vector<std::string>::pointer end = v19[-2].__end_;
          if (end)
          {
            v19[-2].__end_cap_.__value_ = end;
            operator delete(end);
          }
          uint64_t v19 = (std::vector<int> *)((char *)v19 - 56);
        }
        while (v19 != v18);
        uint64_t v17 = *(void *)(a1 + 5792);
        uint64_t v16 = *(void *)(a1 + 5784);
      }
      v290 = v18;
      *(_OWORD *)v283 = 0u;
      long long v284 = 0u;
      int v285 = 1065353216;
      uint64_t v236 = v11;
      if (v17 != v16)
      {
        unint64_t v21 = 0;
        do
        {
          *(_DWORD *)std::string __p = 0;
          *(_DWORD *)std::string __p = **(_DWORD **)(v16 + 8 * v21);
          v253 = (void **)__p;
          int v22 = std::__hash_table<std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)v283, (int *)__p, (uint64_t)&std::piecewise_construct, (_DWORD **)&v253);
          uint64_t v23 = v22;
          int v24 = (unint64_t *)v22[4];
          uint64_t v25 = (uint64_t)(v22 + 5);
          unint64_t v26 = v22[5];
          if ((unint64_t)v24 >= v26)
          {
            unint64_t v28 = (unint64_t *)v22[3];
            uint64_t v29 = v24 - v28;
            if ((unint64_t)(v29 + 1) >> 61) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v30 = v26 - (void)v28;
            unint64_t v31 = (uint64_t)(v26 - (void)v28) >> 2;
            if (v31 <= v29 + 1) {
              unint64_t v31 = v29 + 1;
            }
            if (v30 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v32 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v32 = v31;
            }
            if (v32)
            {
              long long v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v25, v32);
              unint64_t v28 = (unint64_t *)v23[3];
              int v24 = (unint64_t *)v23[4];
            }
            else
            {
              long long v33 = 0;
            }
            long long v34 = (unint64_t *)&v33[8 * v29];
            *long long v34 = v21;
            int v27 = v34 + 1;
            while (v24 != v28)
            {
              unint64_t v35 = *--v24;
              *--long long v34 = v35;
            }
            void v23[3] = v34;
            v23[4] = v27;
            v23[5] = &v33[8 * v32];
            if (v28) {
              operator delete(v28);
            }
          }
          else
          {
            unint64_t *v24 = v21;
            int v27 = v24 + 1;
          }
          v23[4] = v27;
          ++v21;
          uint64_t v16 = *(void *)(a1 + 5784);
        }
        while (v21 < (*(void *)(a1 + 5792) - v16) >> 3);
        int v36 = (void *)v284;
LABEL_45:
        v238 = v36;
        if (v36)
        {
          if (kaldi::g_kaldi_verbose_level >= 5)
          {
            kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 5);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"input_batch_idx: ", 17);
            std::ostream::operator<<();
            kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
          }
          kaldi::CuMatrix<float>::Resize(v234, (v238[4] - v238[3]) >> 3, 1, 0, 0);
          uint64_t v37 = (void *)v238[3];
          int v38 = (void *)v238[4];
          if (v37 != v38)
          {
            uint64_t v39 = 0;
            do
            {
              if (kaldi::g_kaldi_verbose_level >= 5)
              {
                kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 5);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"hyp_idx: ", 9);
                std::ostream::operator<<();
                kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
              }
              uint64_t v40 = *(void *)(*(void *)(a1 + 5784) + 8 * *v37);
              if (v11 >= 1 && *(_DWORD *)(v40 + 40) == *(_DWORD *)(a1 + 5180))
              {
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Final word in hyp list", 22);
                kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
              }
              uint64_t v41 = *(void *)(v40 + 56);
              uint64_t v42 = *(void *)(v40 + 64);
              uint64_t v43 = v42 - v41;
              if (v42 != v41)
              {
                uint64_t v44 = 0;
                unint64_t v45 = v43 >> 2;
                if (v45 <= 1) {
                  unint64_t v45 = 1;
                }
                uint64_t v46 = *(void *)(a1 + 4984) + 4 * *(_DWORD *)(a1 + 5000) * (int)v39;
                do
                {
                  *(float *)(v46 + 4 * v44) = (float)*(int *)(v41 + 4 * v44);
                  ++v44;
                }
                while (v45 != v44);
              }
              kaldi::quasar::TorchEncoderDecoder::SetHistoryState(*(void *)(a1 + 136), (uint64_t *)(v40 + 8), v39, (v238[4] - v238[3]) >> 3);
              uint64_t v39 = (v39 + 1);
              ++v37;
            }
            while (v37 != v38);
          }
          kaldi::quasar::TorchEncoderDecoder::Feedforward(*(void *)(a1 + 136), v234, v233, 0);
          uint64_t v242 = *(unsigned int *)(a1 + 5040);
          kaldi::Matrix<float>::Resize(v12, (v238[4] - v238[3]) >> 3, v242, 0, 0);
          kaldi::CuMatrixBase<float>::CopyToMat<float>((uint64_t)v233, (int *)v12, 111);
          unint64_t v47 = (void *)v238[3];
          v237 = (void *)v238[4];
          if (v47 == v237) {
            goto LABEL_191;
          }
          uint64_t v48 = 0;
          while (1)
          {
            uint64_t v49 = *(int **)(*(void *)(a1 + 5784) + 8 * *v47);
            kaldi::quasar::TorchEncoderDecoder::GetHistoryState(*(void *)(a1 + 136), (uint64_t *)v49 + 1, v48);
            ++*(_DWORD *)(a1 + 5216);
            v262[0] = 0;
            v262[1] = 0;
            *(void *)&long long v263 = 0;
            kaldi::quasar::TorchEncoderDecoder::GetCurrentAlignment(*(void *)(a1 + 136), v262, v48);
            uint64_t v50 = (uint64_t *)(v49 + 52);
            unint64_t v51 = *((void *)v49 + 27);
            if (v51 >= *((void *)v49 + 28))
            {
              uint64_t v52 = std::vector<kaldi::Vector<float>>::__push_back_slow_path<kaldi::Vector<float> const&>(v50, (uint64_t)v262);
            }
            else
            {
              std::vector<kaldi::Vector<float>>::__construct_one_at_end[abi:ne180100]<kaldi::Vector<float> const&>((uint64_t)v50, (uint64_t)v262);
              uint64_t v52 = v51 + 24;
            }
            *((void *)v49 + 27) = v52;
            v281 = 0;
            v280 = 0;
            unint64_t v282 = 0;
            int BestAlignment = kaldi::quasar::TorchEncoderDecoder::GetBestAlignment(*(kaldi::quasar::TorchEncoderDecoder **)(a1 + 136), v48);
            v278 = 0;
            v277 = 0;
            uint64_t v279 = 0;
            kaldi::quasar::TorchEncoderDecoder::GetAlignmentProbabilities(*(void **)(a1 + 136), (uint64_t)&v277, v48);
            if (kaldi::quasar::TorchEncoderDecoder::Reverse(*(kaldi::quasar::TorchEncoderDecoder **)(a1 + 136))) {
              int BestAlignment = kaldi::MatrixBase<float>::NumRows(*(void *)(a1 + 4952) + 40 * *v49) + ~BestAlignment;
            }
            if (*(float *)(a2 + 320) != 0.0)
            {
              v253 = (void **)(v49 + 10);
              std::string v53 = (std::vector<unsigned int> *)std::__hash_table<std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)(v49 + 20), v49 + 10, (uint64_t)&std::piecewise_construct, (_DWORD **)&v253);
              std::string::size_type v54 = v53 + 1;
              unint64_t v55 = (unint64_t)((char *)v53[1].__end_ - (char *)v53[1].__begin_) >> 2;
              if (BestAlignment + 1 > (int)v55) {
                LODWORD(v55) = BestAlignment + 1;
              }
              std::vector<int>::resize(v53 + 1, (int)v55);
              if ((int)v54->__begin_[BestAlignment] >= 1)
              {
                v253 = (void **)(v49 + 10);
                std::string v56 = std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)(v49 + 40), v49 + 10, (uint64_t)&std::piecewise_construct, (_DWORD **)&v253);
                ++*((_DWORD *)v56 + 5);
              }
              v253 = (void **)(v49 + 10);
              std::string v57 = std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)(v49 + 30), v49 + 10, (uint64_t)&std::piecewise_construct, (_DWORD **)&v253);
              ++*((_DWORD *)v57 + 5);
              ++v54->__begin_[BestAlignment];
            }
            if (*(unsigned char *)(a1 + 5673))
            {
              memset(&__p[8], 0, 32);
              *(void *)std::string __p = &unk_1F0A51768;
              LOBYTE(v296) = 0;
              unint64_t v58 = *(void *)(a1 + 5136);
              uint64_t v59 = *(void *)(a1 + 5128);
              if (v58 >= *(void *)(a1 + 5144))
              {
                uint64_t v60 = std::vector<kaldi::CuMatrix<float>>::__push_back_slow_path<kaldi::CuMatrix<float> const&>((uint64_t *)(a1 + 5128), (uint64_t)__p);
              }
              else
              {
                kaldi::CuMatrix<float>::CuMatrix(*(void *)(a1 + 5136), __p, 111);
                uint64_t v60 = v58 + 48;
                *(void *)(a1 + 5136) = v58 + 48;
              }
              *(void *)(a1 + 5136) = v60;
              double v61 = kaldi::SubMatrix<float>::SubMatrix((uint64_t)v275, a1 + 5072, v48, 1, 0, *(_DWORD *)(a1 + 5080));
              kaldi::Matrix<float>::Matrix(&v253, v275, 111, v61);
              unint64_t v62 = *(void *)(a1 + 5160);
              if (v62 >= *(void *)(a1 + 5168))
              {
                uint64_t v63 = std::vector<kaldi::Matrix<float>>::__push_back_slow_path<kaldi::Matrix<float>>((uint64_t *)(a1 + 5152), (uint64_t)&v253);
              }
              else
              {
                kaldi::Matrix<float>::Matrix(*(void *)(a1 + 5160), &v253);
                uint64_t v63 = v62 + 40;
                *(void *)(a1 + 516std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = v62 + 40;
              }
              unint64_t v64 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v58 - v59) >> 4);
              *(void *)(a1 + 516std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = v63;
              kaldi::Matrix<float>::~Matrix((uint64_t)&v253);
              quasar::Bitmap::~Bitmap((quasar::Bitmap *)v275);
              kaldi::quasar::TorchEncoderDecoder::CopyDecoderHiddenState(*(void *)(a1 + 136), (int32x2_t *)(*(void *)(a1 + 5128) + 48 * (int)v64));
              kaldi::CuMatrix<float>::~CuMatrix((uint64_t)__p);
              int BestAlignment = v64;
            }
            if (*(_DWORD *)(a2 + 184) != 2) {
              break;
            }
            uint64_t v65 = *(void *)(a2 + 208);
            uint64_t v66 = v49[9];
            unint64_t v257 = 0;
            (*(void (**)(uint64_t, uint64_t, void ***))(*(void *)v65 + 136))(v65, v66, &v253);
            int v67 = -1;
            while (1)
            {
              if (!v253)
              {
                if (v257 >= (unint64_t)v255) {
                  goto LABEL_155;
                }
LABEL_90:
                uint64_t v68 = (*((_DWORD *)v254 + 4 * v257) - 1);
LABEL_91:
                int v67 = *((_DWORD *)v254 + 4 * v257 + 3);
                goto LABEL_92;
              }
              if ((*((unsigned int (**)(void **))*v253 + 3))(v253)) {
                break;
              }
              if (!v253) {
                goto LABEL_90;
              }
              uint64_t v68 = (*(_DWORD *)(*((uint64_t (**)(void))*v253 + 4))() - 1);
              if (!v253) {
                goto LABEL_91;
              }
              int v67 = *(_DWORD *)((*((uint64_t (**)(void **))*v253 + 4))(v253) + 12);
              if (v253)
              {
                long long v69 = (char *)(*((uint64_t (**)(void **))*v253 + 4))(v253);
                goto LABEL_93;
              }
LABEL_92:
              long long v69 = (char *)v254 + 16 * v257;
LABEL_93:
              int v70 = *((_DWORD *)v69 + 2);
              int VocabWordIdx = kaldi::quasar::TorchEncoderDecoder::GetVocabWordIdx(*(kaldi::quasar::TorchEncoderDecoder **)(a1 + 136), v68);
              *(_DWORD *)std::string __p = *(_DWORD *)(*(void *)(a1 + 5072)
                                         + 4 * *(_DWORD *)(a1 + 5088) * (int)v48
                                         + 4 * (int)v68);
              memset(&__p[8], 0, 24);
              *(_DWORD *)&__p[32] = VocabWordIdx;
              *(_DWORD *)&__p[36] = v67;
              LODWORD(v296) = v70;
              uint64_t v72 = v281;
              if ((unint64_t)v281 >= v282)
              {
                unint64_t v74 = (uint64_t *)std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement>>::__push_back_slow_path<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement const&>((uint64_t *)&v280, (uint64_t)__p);
              }
              else
              {
                *(void *)v281 = *(void *)__p;
                *((void *)v72 + 2) = 0;
                *((void *)v72 + std::__function::__value_func<BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::~__value_func[abi:ne180100](this + 3) = 0;
                *((void *)v72 + 1) = 0;
                std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)v72 + 1, *(const void **)&__p[8], *(uint64_t *)&__p[16], (uint64_t)(*(void *)&__p[16] - *(void *)&__p[8]) >> 2);
                uint64_t v73 = *(void *)&__p[32];
                *((_DWORD *)v72 + 1std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = v296;
                *((void *)v72 + 4) = v73;
                unint64_t v74 = (uint64_t *)(v72 + 48);
              }
              v281 = (char *)v74;
              if (*(void *)&__p[8])
              {
                *(void *)&__p[16] = *(void *)&__p[8];
                operator delete(*(void **)&__p[8]);
              }
              if (v253) {
                (*((void (**)(void **))*v253 + 5))(v253);
              }
              else {
                ++v257;
              }
            }
            if (v253)
            {
              (*((void (**)(void))*v253 + 1))();
              goto LABEL_157;
            }
LABEL_155:
            if (v256) {
              --*v256;
            }
LABEL_157:
            *(_DWORD *)std::string __p = (*(float (**)(void, void))(**(void **)(a2 + 208) + 32))(*(void *)(a2 + 208), v49[9]);
            LODWORD(v25std::__function::__value_func<BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::~__value_func[abi:ne180100](this + 3) = 2139095040;
            if (*(float *)__p != INFINITY)
            {
              float v104 = (*(float (**)(void, void))(**(void **)(a2 + 208) + 32))(*(void *)(a2 + 208), v49[9]);
              SoftmaxEosuint64_t Id = kaldi::quasar::TorchEncoderDecoder::GetSoftmaxEosId(*(kaldi::quasar::TorchEncoderDecoder **)(a1 + 136));
              int v106 = *(_DWORD *)(a1 + 5180);
              *(_DWORD *)std::string __p = *(_DWORD *)(*(void *)(a1 + 5072)
                                         + 4 * *(_DWORD *)(a1 + 5088) * (int)v48
                                         + 4 * SoftmaxEosId);
              memset(&__p[8], 0, 24);
              *(_DWORD *)&__p[32] = v106;
              *(_DWORD *)&__p[36] = v67;
              *(float *)&long long v296 = v104;
              uint64_t v107 = v281;
              if ((unint64_t)v281 >= v282)
              {
                long long v109 = (uint64_t *)std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement>>::__push_back_slow_path<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement const&>((uint64_t *)&v280, (uint64_t)__p);
              }
              else
              {
                *(void *)v281 = *(void *)__p;
                *((void *)v107 + 2) = 0;
                *((void *)v107 + std::__function::__value_func<BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::~__value_func[abi:ne180100](this + 3) = 0;
                *((void *)v107 + 1) = 0;
                std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)v107 + 1, *(const void **)&__p[8], *(uint64_t *)&__p[16], (uint64_t)(*(void *)&__p[16] - *(void *)&__p[8]) >> 2);
                uint64_t v108 = *(void *)&__p[32];
                *((_DWORD *)v107 + 1std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = v296;
                *((void *)v107 + 4) = v108;
                long long v109 = (uint64_t *)(v107 + 48);
              }
              v281 = (char *)v109;
              if (*(void *)&__p[8])
              {
                *(void *)&__p[16] = *(void *)&__p[8];
                operator delete(*(void **)&__p[8]);
              }
            }
            std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,std::__wrap_iter<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>>((uint64_t)v280, (uint64_t)v281, (uint64_t)&v253, 0xAAAAAAAAAAAAAAABLL * ((v281 - v280) >> 4));
LABEL_164:
            long long v110 = v281;
            long long v111 = v280;
            if (*(unsigned char *)(a1 + 5239))
            {
              a2 = v241;
            }
            else
            {
              unint64_t v112 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((v281 - v280) >> 4));
              if (v281 == v280) {
                uint64_t v113 = 0;
              }
              else {
                uint64_t v113 = v112;
              }
              std::__introsort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement *,false>((std::vector<int> *)v280, (uint64_t *)v281, (uint64_t)&v253, v113, 1);
              a2 = v241;
              std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>>::erase((uint64_t)&v280, (uint64_t)&v280[48 * *(int *)(v241 + 160)], (uint64_t)v281);
              long long v110 = v281;
              long long v111 = v280;
            }
            if (v110 == v111 && kaldi::g_kaldi_verbose_level >= -1)
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Nothing left in heap", 20);
              kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
            }
            if (*(_DWORD *)(a2 + 184) != 5)
            {
              uint64_t v116 = (float *)v280;
              long long v117 = v281;
              goto LABEL_187;
            }
            uint64_t v114 = *(void *)(a1 + 5840);
            unint64_t v115 = *(int *)(a1 + 5836);
            uint64_t v116 = (float *)v280;
            long long v117 = v281;
            if (v115 >= (*(void *)(a1 + 5848) - v114) >> 2)
            {
LABEL_187:
              while (v116 != (float *)v117)
              {
                float v118 = *(float *)(a1 + 5764);
                int v119 = *v246;
                float v120 = *v116;
                float v121 = logf(*v116);
                if (!v119) {
                  float v121 = v120;
                }
                float v122 = -(float)(v118 * v121);
                float v123 = *(float *)(a2 + 180) * v116[10];
                int v124 = *((_DWORD *)v116 + 8);
                *(float *)std::string __p = v123 + (float)(v122 + (float)(*((float *)v49 + 11) + *((float *)v49 + 12)));
                *(float *)&__p[4] = v122;
                *(float *)&__p[8] = v123;
                *(_DWORD *)&__p[12] = BestAlignment;
                memset(&__p[16], 0, 24);
                std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p[16], v277, (uint64_t)v278, (v278 - (unsigned char *)v277) >> 2);
                LODWORD(v296) = v124;
                *((float *)&v296 + 1) = v116[9];
                *((void *)&v296 + 1) = *v47;
                unsigned int v125 = v290;
                if (v290 >= v291)
                {
                  uint64_t v126 = (std::vector<int> *)std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ScoreElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ScoreElement>>::__push_back_slow_path<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ScoreElement const&>((uint64_t *)&v289, (uint64_t)__p);
                }
                else
                {
                  *(_OWORD *)&v290->__begin_ = *(_OWORD *)__p;
                  v125[1].__begin_ = 0;
                  v125[1].__end_ = 0;
                  v125->__end_cap_.__value_ = 0;
                  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v125->__end_cap_.__value_, *(const void **)&__p[16], *(uint64_t *)&__p[24], (uint64_t)(*(void *)&__p[24] - *(void *)&__p[16]) >> 2);
                  *(_OWORD *)&v125[1].__end_cap_.__value_ = v296;
                  uint64_t v126 = (std::vector<int> *)((char *)v125 + 56);
                }
                v290 = v126;
                if (*(void *)&__p[16])
                {
                  *(void *)&__p[24] = *(void *)&__p[16];
                  operator delete(*(void **)&__p[16]);
                }
                v116 += 12;
              }
            }
            else if (v281 != v280)
            {
              if (*((_DWORD *)v280 + 8) != *(_DWORD *)(v114 + 4 * v115)) {
                *(void *)(a1 + 5848) = v114;
              }
              goto LABEL_187;
            }
            if (v277)
            {
              v278 = v277;
              operator delete(v277);
            }
            *(void *)std::string __p = &v280;
            std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
            kaldi::Vector<float>::Destroy((uint64_t)v262);
            uint64_t v48 = (v48 + 1);
            if (++v47 == v237)
            {
LABEL_191:
              int v36 = (void *)*v238;
              uint64_t v11 = v236;
              uint64_t v12 = (int32x2_t *)(a1 + 5072);
              goto LABEL_45;
            }
          }
          int v75 = kaldi::MatrixBase<float>::NumRows(*(void *)(a1 + 4952) + 40 * *v49);
          if (!v242) {
            goto LABEL_164;
          }
          uint64_t v76 = 0;
          LODWORD(v77) = (int)(float)(*(float *)(a1 + 5200)
                                    * (float)(v75 - (*(_DWORD *)(a1 + 5204) + *(_DWORD *)(v241 + 236))));
          if ((int)v77 <= 1) {
            uint64_t v77 = 1;
          }
          else {
            uint64_t v77 = v77;
          }
          if (v236 >= v77) {
            char v78 = a4;
          }
          else {
            char v78 = 0;
          }
          while (1)
          {
            float v79 = *(float *)(*(void *)(a1 + 5072) + 4 * (int)v48 * *(_DWORD *)(a1 + 5088) + 4 * v76);
            int v80 = kaldi::quasar::TorchEncoderDecoder::GetVocabWordIdx(*(kaldi::quasar::TorchEncoderDecoder **)(a1 + 136), v76);
            int v81 = v80;
            if (v80 == *(_DWORD *)(a1 + 5180)) {
              char v82 = v78;
            }
            else {
              char v82 = 1;
            }
            if ((v82 & 1) == 0)
            {
              if (!*v47)
              {
                float v84 = *(float *)(a1 + 5764);
                int v85 = *v246;
                float v86 = logf(v79);
                if (!v85) {
                  float v86 = v79;
                }
                *(float *)(a1 + 576std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = -(float)(v84 * v86);
                *(_DWORD *)(a1 + 572std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = v49[8];
              }
              if (kaldi::g_kaldi_verbose_level >= 5)
              {
                kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 5);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Skipping target eos symbol", 26);
                kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
              }
              goto LABEL_151;
            }
            if (v80 == *(_DWORD *)(a1 + 5184)
              && (kaldi::quasar::TorchEncoderDecoder::HasBpeModel(*(kaldi::quasar::TorchEncoderDecoder **)(a1 + 136)) & 1) != 0)
            {
              goto LABEL_151;
            }
            if (v240)
            {
              if (v81 != *(_DWORD *)(a1 + 5180))
              {
                if (((*(uint64_t (**)(void, void, void, unsigned char *))(**(void **)(v241 + 200) + 32))(*(void *)(v241 + 200), v49[9], (v81 + 1), __p) & 1) == 0)
                {
                  int v88 = *(_DWORD *)(a1 + 5184);
                  if (v88 < 0
                    || ((*(uint64_t (**)(void, void, void, unsigned char *))(**(void **)(v241 + 200) + 32))(*(void *)(v241 + 200), v49[9], (v88 + 1), __p) & 1) == 0)
                  {
                    goto LABEL_151;
                  }
                }
                int v87 = *(_DWORD *)&__p[12];
                float v83 = *(float *)&__p[8];
                goto LABEL_130;
              }
              *(_DWORD *)std::string __p = (*(float (**)(void, void))(**(void **)(v241 + 200) + 16))(*(void *)(v241 + 200), v49[9]);
              LODWORD(v25std::__function::__value_func<BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::~__value_func[abi:ne180100](this + 3) = 2139095040;
              if (*(float *)__p == INFINITY) {
                goto LABEL_151;
              }
              float v83 = (*(float (**)(void, void))(**(void **)(v241 + 200) + 16))(*(void *)(v241 + 200), v49[9]);
            }
            else
            {
              float v83 = 0.0;
            }
            int v87 = -1;
LABEL_130:
            if (*(_DWORD *)(v241 + 184) == 5)
            {
              uint64_t v89 = *(void *)(a1 + 5840);
              unint64_t v90 = *(int *)(a1 + 5836);
              if (v90 < (*(void *)(a1 + 5848) - v89) >> 2)
              {
                float v91 = *(float *)(v241 + 180);
                float v92 = (v13 - v91) * v79;
                if (*(_DWORD *)(v89 + 4 * v90) != v81) {
                  float v91 = -0.0;
                }
                float v79 = v91 + v92;
              }
            }
            if (*(unsigned char *)(a1 + 5239))
            {
              unint64_t v93 = v281;
              unint64_t v94 = 0xAAAAAAAAAAAAAAABLL * ((v281 - v280) >> 4);
              unint64_t v95 = *(int *)(v241 + 160);
              if (v94 == v95 && v79 > *(float *)v280)
              {
                std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::MinHeapCompare,std::__wrap_iter<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement *>>((uint64_t)v280, (uint64_t)v281, (uint64_t)&v253, v94);
                unsigned __int8 v96 = v281;
                uint64_t v97 = (void *)*((void *)v281 - 5);
                if (v97)
                {
                  *((void *)v281 - 4) = v97;
                  operator delete(v97);
                }
                unint64_t v93 = v96 - 48;
                v281 = v93;
                unint64_t v95 = *(int *)(v241 + 160);
                unint64_t v94 = 0xAAAAAAAAAAAAAAABLL * ((v93 - v280) >> 4);
              }
              if (v94 >= v95) {
                goto LABEL_151;
              }
              *(float *)std::string __p = v79;
              memset(&__p[8], 0, 24);
              *(_DWORD *)&__p[32] = v81;
              *(_DWORD *)&__p[36] = v87;
              *(float *)&long long v296 = v83;
              if ((unint64_t)v93 >= v282)
              {
                std::vector<std::string> v99 = (uint64_t *)std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement>>::__push_back_slow_path<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement const&>((uint64_t *)&v280, (uint64_t)__p);
              }
              else
              {
                *(void *)unint64_t v93 = *(void *)__p;
                *((void *)v93 + 2) = 0;
                *((void *)v93 + std::__function::__value_func<BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::~__value_func[abi:ne180100](this + 3) = 0;
                *((void *)v93 + 1) = 0;
                std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)v93 + 1, *(const void **)&__p[8], *(uint64_t *)&__p[16], (uint64_t)(*(void *)&__p[16] - *(void *)&__p[8]) >> 2);
                uint64_t v98 = *(void *)&__p[32];
                *((_DWORD *)v93 + 1std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = v296;
                *((void *)v93 + 4) = v98;
                std::vector<std::string> v99 = (uint64_t *)(v93 + 48);
              }
              v281 = (char *)v99;
              std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,std::__wrap_iter<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>>((uint64_t)v280, (uint64_t)v99, (uint64_t)&v253, 0xAAAAAAAAAAAAAAABLL * (((char *)v99 - v280) >> 4));
              int v103 = *(void **)&__p[8];
              if (!*(void *)&__p[8]) {
                goto LABEL_151;
              }
LABEL_150:
              *(void *)&__p[16] = v103;
              operator delete(v103);
              goto LABEL_151;
            }
            *(float *)std::string __p = v79;
            memset(&__p[8], 0, 24);
            *(_DWORD *)&__p[32] = v81;
            *(_DWORD *)&__p[36] = v87;
            *(float *)&long long v296 = v83;
            unint64_t v100 = v281;
            if ((unint64_t)v281 >= v282)
            {
              uint64_t v102 = (uint64_t *)std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement>>::__push_back_slow_path<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement>((uint64_t *)&v280, (uint64_t)__p);
              int v103 = *(void **)&__p[8];
              v281 = (char *)v102;
              if (!*(void *)&__p[8]) {
                goto LABEL_151;
              }
              goto LABEL_150;
            }
            *(void *)v281 = *(void *)__p;
            *((void *)v100 + 1) = 0;
            *((void *)v100 + 2) = 0;
            *((void *)v100 + std::__function::__value_func<BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::~__value_func[abi:ne180100](this + 3) = 0;
            *(_OWORD *)(v100 + 8) = *(_OWORD *)&__p[8];
            *((void *)v100 + std::__function::__value_func<BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::~__value_func[abi:ne180100](this + 3) = *(void *)&__p[24];
            memset(&__p[8], 0, 24);
            int v101 = v296;
            *((void *)v100 + 4) = *(void *)&__p[32];
            *((_DWORD *)v100 + 1std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = v101;
            v281 = v100 + 48;
LABEL_151:
            if (v242 == ++v76) {
              goto LABEL_164;
            }
          }
        }
      }
      if (v11 == v230 && (kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Beam decoder hit maximum sequence length", 40);
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
      }
      if (v290 == v289)
      {
        if (kaldi::g_kaldi_verbose_level >= -1)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Pruned all hyps, nothing left to expand", 39);
          kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        }
      }
      else
      {
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ScoreElement *,false>(v289, (unint64_t)v290, (uint64_t)&v253, 126 - 2 * __clz(0x6DB6DB6DB6DB6DB7 * (((char *)v290 - (char *)v289) >> 3)), 1);
        LODWORD(v14) = v289->__begin_;
        int v127 = *(_DWORD *)(a1 + 5768);
        if (v127 == 2)
        {
          float v129 = *(float *)(a1 + 5776);
          float v130 = *(float *)(a1 + 5772);
          float v131 = powf(v129 + (float)(unint64_t)(v11 + 1), v130);
          float v128 = v131 / powf(v129 + 1.0, v130);
        }
        else
        {
          float v128 = (float)(unint64_t)(v11 + 2);
          if (v127 != 1) {
            float v128 = 1.0;
          }
        }
        float v227 = *(float *)&v14 / v128;
      }
      memset(v275, 0, sizeof(v275));
      int v276 = 1065353216;
      BOOL v132 = *(float *)(a2 + 164) < 2147500000.0 || *(float *)(a2 + 168) < 2147500000.0;
      BOOL v245 = v132;
      int64_t v133 = v11 + 1;
      if (*(int *)(a2 + 160) >= 1) {
        break;
      }
LABEL_287:
      if (kaldi::g_kaldi_verbose_level > 4)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 5);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"At output position ", 19);
        v201 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v201, (uint64_t)", # surviving hypotheses: ", 26);
        std::ostream::operator<<();
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
      }
      v202 = *(uint64_t **)(a1 + 5784);
      v203 = *(uint64_t **)(a1 + 5792);
      while (v202 != v203)
      {
        if (*v202)
        {
          uint64_t v204 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Hyp::~Hyp(*v202);
          MEMORY[0x1B3EA8670](v204, 0x10B0C406F3D429DLL);
        }
        ++v202;
      }
      v205 = __src;
      if (v228 == (char *)&__src)
      {
        int v10 = v229;
      }
      else
      {
        std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(v228, (char *)__src, (uint64_t)v293, ((unsigned char *)v293 - (unsigned char *)__src) >> 3);
        int v10 = v229;
        v205 = __src;
      }
      v293 = v205;
      ++*(_DWORD *)(a1 + 5836);
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v275);
      std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::~__hash_table((uint64_t)v283);
      uint64_t v11 = v133;
      if (v133 >= v230) {
        goto LABEL_300;
      }
    }
    unint64_t v134 = 0;
    float v135 = (float)(unint64_t)v133;
    float v239 = (float)(unint64_t)(v11 + 2);
    int64_t v243 = v11 + 1;
    while (1)
    {
      long long v136 = v289;
      if (0x6DB6DB6DB6DB6DB7 * (((char *)v290 - (char *)v289) >> 3) <= v134) {
        goto LABEL_287;
      }
      char v137 = !v245;
      if (!v134) {
        char v137 = 1;
      }
      if ((v137 & 1) == 0)
      {
        float v138 = *((float *)&v289->__begin_ + 14 * v134);
        if ((float)(*(float *)&v14 + *(float *)(a2 + 164)) < v138
          || (float)(*(float *)&v14 * (float)(*(float *)(a2 + 168) + 1.0)) < v138)
        {
          goto LABEL_287;
        }
      }
      long long v139 = (char *)v289 + 56 * v134;
      long long v140 = *(int **)(*(void *)(a1 + 5784) + 8 * *((void *)v139 + 6));
      long long v141 = v139 + 40;
      if (*((_DWORD *)v139 + 10) != *(_DWORD *)(a1 + 5180))
      {
        unint64_t v143 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 4960) - *(void *)(a1 + 4952)) >> 3);
        if (v143 > 1)
        {
          int v145 = v140[8];
          BOOL v146 = __OFSUB__(v145, 1);
          unint64_t v147 = (v145 - 1);
          if (((v147 & 0x80000000) != 0) != v146) {
            unint64_t v148 = 0;
          }
          else {
            unint64_t v148 = v147 / v143;
          }
          v262[0] = 0;
          v262[0] = (void *)(*(int *)v141 + (v148 << 32));
          float v157 = std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(v275, (unint64_t *)v262);
          uint64_t v158 = *(void *)(a1 + 4960);
          uint64_t v159 = *(void *)(a1 + 4952);
          if (v157)
          {
            v253 = v262;
            uint64_t v160 = std::__hash_table<std::__hash_value_type<long long,std::pair<float,int>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::pair<float,int>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::pair<float,int>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::pair<float,int>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v275, (unint64_t *)v262, (uint64_t)&std::piecewise_construct, &v253);
            unint64_t v161 = v158 - v159;
          }
          else
          {
            if (v158 == v159)
            {
              unint64_t v164 = 0xCCCCCCCCCCCCCCCDLL * ((v158 - v159) >> 3);
              int v165 = -1;
            }
            else
            {
              unint64_t v162 = 0;
              do
              {
                int v163 = (*(uint64_t (**)(void))(**(void **)(a1 + 5712) + 200))(*(void *)(a1 + 5712));
                ++v162;
                unint64_t v164 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 4960) - *(void *)(a1 + 4952)) >> 3);
              }
              while (v162 < v164);
              int v165 = v163;
            }
            float v192 = *(float *)v139;
            v253 = v262;
            v193 = (float *)std::__hash_table<std::__hash_value_type<long long,std::pair<float,int>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::pair<float,int>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::pair<float,int>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::pair<float,int>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v275, (unint64_t *)v262, (uint64_t)&std::piecewise_construct, &v253);
            v193[6] = v192;
            *((_DWORD *)v193 + 7) = (v165 - 1) / v164;
            uint64_t v194 = *(void *)(a1 + 4960);
            uint64_t v195 = *(void *)(a1 + 4952);
            v253 = v262;
            uint64_t v160 = std::__hash_table<std::__hash_value_type<long long,std::pair<float,int>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::pair<float,int>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::pair<float,int>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::pair<float,int>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v275, (unint64_t *)v262, (uint64_t)&std::piecewise_construct, &v253);
            unint64_t v161 = v194 - v195;
          }
          int v144 = *v140 - 858993459 * (v161 >> 3) * *((_DWORD *)v160 + 7) + 1;
          if (kaldi::g_kaldi_verbose_level >= 5)
          {
            kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 5);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"using lattice state:", 20);
            std::ostream::operator<<();
            kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
          }
        }
        else
        {
          int v144 = (*(uint64_t (**)(void))(**(void **)(a1 + 5712) + 200))(*(void *)(a1 + 5712));
        }
        v260 = 0;
        uint64_t v261 = 0;
        v259 = 0;
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v259, *((const void **)&v136->__end_cap_.__value_ + 7 * v134), *((void *)&v136[1].__begin_ + 7 * v134), (uint64_t)(*((void *)&v136[1].__begin_ + 7 * v134) - *((void *)&v136->__end_cap_.__value_ + 7 * v134)) >> 2);
        *(_OWORD *)v262 = 0u;
        long long v263 = 0u;
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v262[1], v259, (uint64_t)v260, (v260 - (unsigned char *)v259) >> 2);
        if (v259)
        {
          v260 = v259;
          operator delete(v259);
        }
        v262[0] = (void *)vrev64_s32(*(int32x2_t *)((char *)&v136->__begin_ + 56 * v134 + 4));
        if (*((_DWORD *)&v136->__end_ + 14 * v134 + 1) < (signed int)(kaldi::MatrixBase<float>::NumRows(*(void *)(a1 + 4952) + 40 * *v140)
                                                                     + *(unsigned __int8 *)(*(void *)(a1 + 136)
                                                                                          + 3918)))
        {
          int v196 = *(_DWORD *)v141 + 1;
          LODWORD(v25std::__function::__value_func<BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::~__value_func[abi:ne180100](this + 3) = *((_DWORD *)&v136->__end_ + 14 * v134 + 1);
          HIDWORD(v25std::__function::__value_func<BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::~__value_func[abi:ne180100](this + 3) = v196;
          v254 = v262[0];
          v256 = 0;
          unint64_t v257 = 0;
          v255 = 0;
          std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v255, v262[1], v263, (uint64_t)(v263 - (unint64_t)v262[1]) >> 2);
          int v258 = v144;
          (*(void (**)(void, void, void ***))(**(void **)(a1 + 5712) + 208))(*(void *)(a1 + 5712), v140[8], &v253);
          std::vector<std::pair<int,int>>::resize((uint64_t)v231, v144 + 1);
          int v197 = *(_DWORD *)v141;
          v198 = (_DWORD *)(*v231 + 8 * v144);
          _DWORD *v198 = v140[8];
          v198[1] = v197;
          if (*(float *)(v241 + 320) != 0.0
            && std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)v140 + 20, (int *)v141))
          {
            v280 = v141;
            int v199 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)(v140 + 40), (int *)v141, (uint64_t)&std::piecewise_construct, (_DWORD **)&v280)+ 5);
            v280 = v141;
            if ((float)((float)v199
                       / (float)*((int *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)(v140 + 30), (int *)v141, (uint64_t)&std::piecewise_construct, (_DWORD **)&v280)+ 5)) > *(float *)(v241 + 316)&& kaldi::g_kaldi_verbose_level >= 1)
            {
              kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 1);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Repeating token in beam: ", 25);
              std::ostream::operator<<();
              kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
            }
          }
          operator new();
        }
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Adding invalid arc ", 19);
        v224 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v224, (uint64_t)" ", 1);
        v225 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v225, (uint64_t)" ", 1);
        v226 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v226, (uint64_t)" ", 1);
        kaldi::MatrixBase<float>::NumRows(*(void *)(a1 + 4952) + 40 * *v140);
        std::ostream::operator<<();
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
      }
      LODWORD(v142) = (int)(float)(*(float *)(a1 + 5200)
                                 * (float)(int)(kaldi::MatrixBase<float>::NumRows(*(void *)(a1 + 4952) + 40 * *v140)
                                              - (*(_DWORD *)(a1 + 5204)
                                               + *(_DWORD *)(a2 + 236))));
      uint64_t v142 = (int)v142 <= 1 ? 1 : v142;
      if (v236 >= v142) {
        break;
      }
      *(int32x2_t *)(a1 + 5728) = vrev64_s32((int32x2_t)vadd_f32(*(float32x2_t *)(v140 + 11), *(float32x2_t *)((char *)&v136->__begin_ + 56 * v134 + 4)));
      *(_DWORD *)(a1 + 572std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = v140[8];
      *(_DWORD *)(a1 + 576std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = *(_DWORD *)v139;
      uint64_t v12 = (int32x2_t *)(a1 + 5072);
LABEL_286:
      if ((uint64_t)++v134 >= *(int *)(a2 + 160)) {
        goto LABEL_287;
      }
    }
    uint64_t v149 = v140[8];
    v254 = 0;
    v255 = 0;
    v256 = 0;
    if (*(unsigned char *)(a1 + 5704))
    {
      uint64_t v274 = 0;
      v272 = 0;
      v273 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v272, *((const void **)&v136->__end_cap_.__value_ + 7 * v134), *((void *)&v136[1].__begin_ + 7 * v134), (uint64_t)(*((void *)&v136[1].__begin_ + 7 * v134) - *((void *)&v136->__end_cap_.__value_ + 7 * v134)) >> 2);
      memset(__p, 0, 32);
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p[8], v272, (uint64_t)v273, (v273 - (unsigned char *)v272) >> 2);
      v253 = *(void ***)__p;
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v254, *(char **)&__p[8], *(uint64_t *)&__p[16], (uint64_t)(*(void *)&__p[16] - *(void *)&__p[8]) >> 2);
      if (*(void *)&__p[8])
      {
        *(void *)&__p[16] = *(void *)&__p[8];
        operator delete(*(void **)&__p[8]);
      }
      if (v272)
      {
        v273 = v272;
        operator delete(v272);
      }
      uint64_t v149 = (*(uint64_t (**)(void))(**(void **)(a1 + 5712) + 200))(*(void *)(a1 + 5712));
      int v150 = *(_DWORD *)v141 + 1;
      *(_DWORD *)std::string __p = *((_DWORD *)&v136->__end_ + 14 * v134 + 1);
      *(_DWORD *)&__p[4] = v150;
      *(void *)&__p[8] = v253;
      memset(&__p[16], 0, 24);
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p[16], v254, (uint64_t)v255, ((unsigned char *)v255 - (unsigned char *)v254) >> 2);
      LODWORD(v296) = v149;
      (*(void (**)(void, void, unsigned char *))(**(void **)(a1 + 5712) + 208))(*(void *)(a1 + 5712), v140[8], __p);
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v254, 0, 0, 0);
      if (*(void *)&__p[16])
      {
        *(void *)&__p[24] = *(void *)&__p[16];
        operator delete(*(void **)&__p[16]);
      }
    }
    uint64_t v151 = (char *)v136 + 56 * v134;
    unsigned int v152 = *((_DWORD *)v151 + 1);
    unsigned int v153 = *((_DWORD *)v151 + 2);
    v253 = (void **)__PAIR64__(v152, v153);
    unint64_t v154 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 4960) - *(void *)(a1 + 4952)) >> 3);
    if (v154 > 1)
    {
      unint64_t v156 = ((int)v149 - 1) / v154;
      v280 = 0;
      v280 = (char *)(*(int *)v141 + (v156 << 32));
      uint64_t v12 = (int32x2_t *)(a1 + 5072);
      if (std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(v275, (unint64_t *)&v280))
      {
        if (kaldi::g_kaldi_verbose_level >= 5)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 5);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"dropping worse identical hyp; score-diff: ",
            42);
          v262[0] = &v280;
          std::__hash_table<std::__hash_value_type<long long,std::pair<float,int>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::pair<float,int>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::pair<float,int>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::pair<float,int>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v275, (unint64_t *)&v280, (uint64_t)&std::piecewise_construct, (void **)v262);
          std::ostream::operator<<();
          kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
        }
      }
      else
      {
        uint64_t v166 = *(void *)(a1 + 5712);
        v264 = v253;
        v266 = 0;
        uint64_t v267 = 0;
        v265 = 0;
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v265, v254, (uint64_t)v255, ((unsigned char *)v255 - (unsigned char *)v254) >> 2);
        (*(void (**)(uint64_t, uint64_t, void ***))(*(void *)v166 + 184))(v166, v149, &v264);
        if (v265)
        {
          v266 = v265;
          operator delete(v265);
        }
        int v167 = *(_DWORD *)v139;
        v262[0] = &v280;
        float v168 = std::__hash_table<std::__hash_value_type<long long,std::pair<float,int>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::pair<float,int>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::pair<float,int>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::pair<float,int>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v275, (unint64_t *)&v280, (uint64_t)&std::piecewise_construct, (void **)v262);
        *((_DWORD *)v168 + 6) = v167;
        *((_DWORD *)v168 + 7) = v156;
      }
    }
    else
    {
      uint64_t v155 = *(void *)(a1 + 5712);
      v268[0] = v153;
      v268[1] = v152;
      v270 = 0;
      uint64_t v271 = 0;
      v269 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v269, v254, (uint64_t)v255, ((unsigned char *)v255 - (unsigned char *)v254) >> 2);
      (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(void *)v155 + 184))(v155, v149, v268);
      uint64_t v12 = (int32x2_t *)(a1 + 5072);
      if (v269)
      {
        v270 = v269;
        operator delete(v269);
      }
    }
    float v169 = *(float *)v139;
    if (*(float *)v139 <= *(float *)&v15)
    {
      *(_DWORD *)(a1 + 5832) = v149;
      *(float *)&uint64_t v15 = v169;
    }
    int v170 = *(_DWORD *)(a1 + 5768);
    if (v170 == 2)
    {
      float v172 = *(float *)(a1 + 5776);
      float v173 = *(float *)(a1 + 5772);
      uint64_t v174 = v14;
      uint64_t v175 = v15;
      float v176 = v135;
      float v177 = powf(v172 + v135, v173);
      float v171 = v177 / powf(v172 + 1.0, v173);
      float v135 = v176;
      uint64_t v15 = v175;
      uint64_t v14 = v174;
      double v13 = 1.0;
      int64_t v133 = v243;
    }
    else
    {
      float v171 = 1.0;
      int64_t v133 = v243;
      if (v170 == 1) {
        float v171 = v239;
      }
    }
    *(float *)std::string __p = v169 / v171;
    std::priority_queue<float>::push((uint64_t)&v286, __p);
    v178 = v287;
    v179 = v286;
    uint64_t v180 = (v287 - (unsigned char *)v286) >> 2;
    if (v180 <= (unint64_t)*(int *)(a2 + 192))
    {
LABEL_268:
      if (v254)
      {
        v255 = v254;
        operator delete(v254);
      }
      LOBYTE(v232) = (v134 == 0) | v232;
      ++HIDWORD(v232);
      goto LABEL_286;
    }
    if (v287 - (unsigned char *)v286 >= 5)
    {
      uint64_t v181 = 0;
      float v182 = *(float *)v286;
      v183 = (float *)v286;
      do
      {
        uint64_t v184 = v183;
        v183 += v181 + 1;
        uint64_t v185 = 2 * v181;
        uint64_t v181 = (2 * v181) | 1;
        uint64_t v186 = v185 + 2;
        if (v186 < v180 && *v183 < v183[1])
        {
          ++v183;
          uint64_t v181 = v186;
        }
        *uint64_t v184 = *v183;
      }
      while (v181 <= (uint64_t)((unint64_t)(v180 - 2) >> 1));
      float v187 = (float *)(v178 - 4);
      if (v183 != (float *)(v178 - 4))
      {
        float *v183 = *v187;
        *float v187 = v182;
        uint64_t v188 = (char *)v183 - v179 + 4;
        if (v188 < 5) {
          goto LABEL_267;
        }
        unint64_t v189 = (((unint64_t)v188 >> 2) - 2) >> 1;
        v190 = (float *)&v179[4 * v189];
        float v191 = *v190;
        float v182 = *v183;
        if (*v190 >= *v183) {
          goto LABEL_267;
        }
        do
        {
          float *v183 = v191;
          v183 = v190;
          if (!v189) {
            break;
          }
          unint64_t v189 = (v189 - 1) >> 1;
          v190 = (float *)&v179[4 * v189];
          float v191 = *v190;
        }
        while (*v190 < v182);
      }
      float *v183 = v182;
    }
LABEL_267:
    v287 = v178 - 4;
    goto LABEL_268;
  }
  HIDWORD(v232) = 0;
  LODWORD(v15) = 1325400064;
LABEL_300:
  if (a4)
  {
    if (!HIDWORD(v232) && (kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"No hyps finished, setting ", 26);
      v206 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v206, (uint64_t)" partial hyps to final", 22);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
    }
    v207 = *(uint64_t **)(a1 + 5784);
    v208 = *(uint64_t **)(a1 + 5792);
    if (v207 != v208)
    {
      while (1)
      {
        if (HIDWORD(v232))
        {
          uint64_t v209 = *v207;
          if (!*v207) {
            goto LABEL_324;
          }
        }
        else
        {
          uint64_t v210 = (*(uint64_t (**)(void))(**(void **)(a1 + 5712) + 200))(*(void *)(a1 + 5712));
          uint64_t v211 = *v207;
          if (*(unsigned char *)(*v207 + 200))
          {
            float v212 = *(float *)(a2 + 320);
            if (v212 == 0.0) {
              int v213 = -3;
            }
            else {
              int v213 = -4;
            }
            if (v212 != 0.0 && (kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Repetitions detected, beam search aborted.", 42);
              kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
              uint64_t v211 = *v207;
            }
          }
          else
          {
            int v213 = -3;
          }
          uint64_t v214 = *(void *)(a1 + 5712);
          uint64_t v215 = *(unsigned int *)(v211 + 32);
          *(_DWORD *)std::string __p = v213;
          memset(&__p[4], 0, 36);
          std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p[16], 0, 0, 0);
          LODWORD(v296) = v210;
          (*(void (**)(uint64_t, uint64_t, unsigned char *))(*(void *)v214 + 208))(v214, v215, __p);
          a2 = v241;
          if (*(void *)&__p[16])
          {
            *(void *)&__p[24] = *(void *)&__p[16];
            operator delete(*(void **)&__p[16]);
          }
          uint64_t v216 = *(void *)(a1 + 5712);
          *(_OWORD *)v251 = 0u;
          long long v252 = 0u;
          std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v251[1], 0, 0, 0);
          (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v216 + 184))(v216, v210, v251);
          if (v251[1])
          {
            *(void **)&long long v252 = v251[1];
            operator delete(v251[1]);
          }
          uint64_t v209 = *v207;
          float v217 = *(float *)(*v207 + 48);
          if ((float)(*(float *)(*v207 + 44) + v217) < *(float *)&v15) {
            *(float *)&uint64_t v15 = *(float *)(*v207 + 44) + v217;
          }
          ++*(_DWORD *)(a1 + 5212);
        }
        uint64_t v218 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Hyp::~Hyp(v209);
        MEMORY[0x1B3EA8670](v218, 0x10B0C406F3D429DLL);
LABEL_324:
        if (++v207 == v208)
        {
          v207 = *(uint64_t **)(a1 + 5784);
          break;
        }
      }
    }
    *(void *)(a1 + 5792) = v207;
    *(_DWORD *)(a1 + 5836) = 0;
    if (!HIDWORD(v232) && *(_DWORD *)(a1 + 5720) != -1)
    {
      if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Setting longest vetoted translation as best ", 44);
        std::ostream::operator<<();
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
      }
      uint64_t v219 = (*(uint64_t (**)(void))(**(void **)(a1 + 5712) + 200))(*(void *)(a1 + 5712));
      uint64_t v220 = *(void *)(a1 + 5712);
      uint64_t v221 = *(unsigned int *)(a1 + 5720);
      memset(&__p[4], 0, 36);
      *(_DWORD *)std::string __p = -2;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p[16], 0, 0, 0);
      LODWORD(v296) = v219;
      (*(void (**)(uint64_t, uint64_t, unsigned char *))(*(void *)v220 + 208))(v220, v221, __p);
      if (*(void *)&__p[16])
      {
        *(void *)&__p[24] = *(void *)&__p[16];
        operator delete(*(void **)&__p[16]);
      }
      uint64_t v222 = *(void *)(a1 + 5712);
      uint64_t v247 = *(void *)(a1 + 5728);
      v249 = 0;
      uint64_t v250 = 0;
      v248 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v248, *(const void **)(a1 + 5736), *(void *)(a1 + 5744), (uint64_t)(*(void *)(a1 + 5744) - *(void *)(a1 + 5736)) >> 2);
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v222 + 184))(v222, v219, &v247);
      if (v248)
      {
        v249 = v248;
        operator delete(v248);
      }
      LODWORD(v15) = *(_DWORD *)(a1 + 5760);
      ++*(_DWORD *)(a1 + 5208);
    }
    kaldi::quasar::TorchEncoderDecoder::Finish(*(kaldi::quasar::TorchEncoderDecoder **)(a1 + 136), v8);
    if (kaldi::g_kaldi_verbose_level >= 5)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"# of cached states ", 19);
      std::ostream::operator<<();
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
    }
    if (*(_DWORD *)(a2 + 184) == 5)
    {
      *(void *)(a1 + 5848) = *(void *)(a1 + 5840);
      if (*(float *)(a2 + 180) > 0.0 && !*(unsigned char *)(a2 + 306)) {
        fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::VectorFst();
      }
    }
  }
  if (v286)
  {
    v287 = v286;
    operator delete(v286);
  }
  *(void *)std::string __p = &v289;
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (__src)
  {
    v293 = __src;
    operator delete(__src);
  }
  return *(float *)&v15;
}

void sub_1B232DF08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  kaldi::Matrix<float>::~Matrix((uint64_t)&a52);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&STACK[0x220]);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&STACK[0x300]);
  unint64_t v62 = (void *)STACK[0x250];
  if (STACK[0x250])
  {
    STACK[0x258] = (unint64_t)v62;
    operator delete(v62);
  }
  STACK[0x300] = (unint64_t)&STACK[0x268];
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x300]);
  kaldi::Vector<float>::Destroy((uint64_t)&a61);
  std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::~__hash_table((uint64_t)&STACK[0x280]);
  uint64_t v63 = (void *)STACK[0x2B0];
  if (STACK[0x2B0])
  {
    STACK[0x2B8] = (unint64_t)v63;
    operator delete(v63);
  }
  STACK[0x300] = (unint64_t)&STACK[0x2D0];
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x300]);
  unint64_t v64 = (void *)STACK[0x2E8];
  if (STACK[0x2E8])
  {
    STACK[0x2F0] = (unint64_t)v64;
    operator delete(v64);
  }
  _Unwind_Resume(a1);
}

void sub_1B232DFB0()
{
}

void sub_1B232DFB8()
{
}

void sub_1B232DFEC()
{
}

void sub_1B232DFF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&STACK[0x300]);
  unint64_t v62 = (void *)STACK[0x250];
  if (STACK[0x250])
  {
    STACK[0x258] = (unint64_t)v62;
    operator delete(v62);
  }
  STACK[0x300] = (unint64_t)&STACK[0x268];
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x300]);
  kaldi::Vector<float>::Destroy((uint64_t)&a61);
  std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::~__hash_table((uint64_t)&STACK[0x280]);
  uint64_t v63 = (void *)STACK[0x2B0];
  if (STACK[0x2B0])
  {
    STACK[0x2B8] = (unint64_t)v63;
    operator delete(v63);
  }
  STACK[0x300] = (unint64_t)&STACK[0x2D0];
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x300]);
  unint64_t v64 = (void *)STACK[0x2E8];
  if (STACK[0x2E8])
  {
    STACK[0x2F0] = (unint64_t)v64;
    operator delete(v64);
  }
  _Unwind_Resume(a1);
}

void sub_1B232E00C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,_DWORD *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  unint64_t v62 = (void *)STACK[0x308];
  if (STACK[0x308])
  {
    STACK[0x310] = (unint64_t)v62;
    operator delete(v62);
  }
  if (a52)
  {
    (*(void (**)(uint64_t))(*(void *)a52 + 8))(a52);
  }
  else if (a55)
  {
    --*a55;
  }
  uint64_t v63 = (void *)STACK[0x250];
  if (STACK[0x250])
  {
    STACK[0x258] = (unint64_t)v63;
    operator delete(v63);
  }
  STACK[0x300] = (unint64_t)&STACK[0x268];
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x300]);
  kaldi::Vector<float>::Destroy((uint64_t)&a61);
  std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::~__hash_table((uint64_t)&STACK[0x280]);
  unint64_t v64 = (void *)STACK[0x2B0];
  if (STACK[0x2B0])
  {
    STACK[0x2B8] = (unint64_t)v64;
    operator delete(v64);
  }
  STACK[0x300] = (unint64_t)&STACK[0x2D0];
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x300]);
  uint64_t v65 = (void *)STACK[0x2E8];
  if (STACK[0x2E8])
  {
    STACK[0x2F0] = (unint64_t)v65;
    operator delete(v65);
  }
  _Unwind_Resume(a1);
}

void sub_1B232E030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  if (STACK[0x310])
  {
    STACK[0x318] = STACK[0x310];
    JUMPOUT(0x1B232E04CLL);
  }
  unint64_t v62 = (void *)STACK[0x250];
  if (STACK[0x250])
  {
    STACK[0x258] = (unint64_t)v62;
    operator delete(v62);
  }
  STACK[0x300] = (unint64_t)&STACK[0x268];
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>>::__destroy_vector::operator()[abi:ne180100](&STACK[0x300]);
  kaldi::Vector<float>::Destroy(&a61);
  std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::~__hash_table(&STACK[0x280]);
  uint64_t v63 = (void *)STACK[0x2B0];
  if (STACK[0x2B0])
  {
    STACK[0x2B8] = (unint64_t)v63;
    operator delete(v63);
  }
  STACK[0x300] = (unint64_t)&STACK[0x2D0];
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement>>::__destroy_vector::operator()[abi:ne180100](&STACK[0x300]);
  unint64_t v64 = (void *)STACK[0x2E8];
  if (STACK[0x2E8])
  {
    STACK[0x2F0] = (unint64_t)v64;
    operator delete(v64);
  }
  _Unwind_Resume(a1);
}

void sub_1B232E060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  unint64_t v62 = (void *)STACK[0x250];
  if (STACK[0x250])
  {
    STACK[0x258] = (unint64_t)v62;
    operator delete(v62);
  }
  STACK[0x300] = (unint64_t)&STACK[0x268];
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x300]);
  kaldi::Vector<float>::Destroy((uint64_t)&a61);
  std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::~__hash_table((uint64_t)&STACK[0x280]);
  uint64_t v63 = (void *)STACK[0x2B0];
  if (STACK[0x2B0])
  {
    STACK[0x2B8] = (unint64_t)v63;
    operator delete(v63);
  }
  STACK[0x300] = (unint64_t)&STACK[0x2D0];
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x300]);
  unint64_t v64 = (void *)STACK[0x2E8];
  if (STACK[0x2E8])
  {
    STACK[0x2F0] = (unint64_t)v64;
    operator delete(v64);
  }
  _Unwind_Resume(a1);
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::PruneCurrentHyps(uint64_t a1, int a2)
{
  unint64_t v3 = a2;
  uint64_t v4 = *(void *)(a1 + 5792);
  uint64_t v5 = *(void *)(a1 + 5784);
  unint64_t v6 = (v4 - v5) >> 3;
  if (v6 > a2)
  {
    unint64_t v7 = a2;
    do
    {
      uint64_t v8 = *(void *)(v5 + 8 * v7);
      if (v8)
      {
        uint64_t v9 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Hyp::~Hyp(v8);
        MEMORY[0x1B3EA8670](v9, 0x10B0C406F3D429DLL);
        uint64_t v4 = *(void *)(a1 + 5792);
        uint64_t v5 = *(void *)(a1 + 5784);
      }
      ++v7;
    }
    while (v7 < (v4 - v5) >> 3);
    unint64_t v6 = (v4 - v5) >> 3;
  }
  if (v6 > v3)
  {
    std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize(a1 + 5784, v3);
  }
}

uint64_t kaldi::quasar::InputHammer::PassSpecifiedTags(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = a1 + 40;
  if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((void *)(a1 + 40), (unsigned __int8 *)a4))
  {
    uint64_t v55 = 0;
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    uint64_t v52 = 0;
    std::string v53 = 0;
    unint64_t v54 = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, " ");
    kaldi::SplitStringOnString(a2, (char *)&__p, &v55);
    if (SHIBYTE(v51) < 0) {
      operator delete(__p);
    }
    if (*(char *)(a3 + 23) < 0)
    {
      **(unsigned char **)a3 = 0;
      *(void *)(a3 + 8) = 0;
    }
    else
    {
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 2std::__function::__value_func<BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::~__value_func[abi:ne180100](this + 3) = 0;
    }
    p_p = (void **)a4;
    double v13 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, (unsigned __int8 *)a4, (uint64_t)&std::piecewise_construct, (long long **)&p_p);
    uint64_t v14 = v55;
    uint64_t v15 = v56;
    if (v55 != v56)
    {
      uint64_t v16 = v13 + 40;
      while (1)
      {
        if (*(char *)(v14 + 23) < 0)
        {
          uint64_t v17 = *(const std::string::value_type **)v14;
          uint64_t v18 = *(void *)(v14 + 8);
        }
        else
        {
          uint64_t v17 = (const std::string::value_type *)v14;
          uint64_t v18 = *(unsigned __int8 *)(v14 + 23);
        }
        uint64_t v19 = v17 - 1;
        do
        {
          if (!v18) {
            goto LABEL_30;
          }
          int v20 = v19[v18--];
        }
        while (v20 != 92);
        if (v18 != -1) {
          break;
        }
LABEL_30:
        uint64_t v25 = v53;
        if ((unint64_t)v53 >= v54)
        {
          int v27 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v52, (long long *)v14);
        }
        else
        {
          if ((*(unsigned char *)(v14 + 23) & 0x80) != 0)
          {
            std::string::__init_copy_ctor_external(v53, *(const std::string::value_type **)v14, *(void *)(v14 + 8));
          }
          else
          {
            long long v26 = *(_OWORD *)v14;
            v53->__r_.__value_.__r.__words[2] = *(void *)(v14 + 16);
            *(_OWORD *)&v25->__r_.__value_.__l.__data_ = v26;
          }
          int v27 = v25 + 1;
        }
        std::string v53 = v27;
LABEL_51:
        v14 += 24;
        if (v14 == v15) {
          goto LABEL_52;
        }
      }
      std::string __p = 0;
      uint64_t v50 = 0;
      uint64_t v51 = 0;
      kaldi::SplitStringToVector((const std::string *)v14, "\\"", 0, (uint64_t)&__p);
      if (v50 - (void)__p == 48)
      {
        if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v16, (unsigned __int8 *)__p + 24))
        {
          unint64_t v21 = v53;
          int v22 = (long long *)v14;
          if ((unint64_t)v53 < v54)
          {
            if (*(char *)(v14 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(v53, *(const std::string::value_type **)v14, *(void *)(v14 + 8));
              goto LABEL_48;
            }
            long long v23 = *(_OWORD *)v14;
            std::string::size_type v24 = *(void *)(v14 + 16);
LABEL_44:
            v21->__r_.__value_.__r.__words[2] = v24;
            *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v23;
LABEL_48:
            unint64_t v28 = v21 + 1;
            goto LABEL_49;
          }
          goto LABEL_45;
        }
        int v22 = (long long *)__p;
        if ((*((char *)__p + 23) & 0x80000000) == 0)
        {
          if (!*((unsigned char *)__p + 23)) {
            goto LABEL_50;
          }
LABEL_41:
          unint64_t v21 = v53;
          if ((unint64_t)v53 < v54)
          {
            if ((*((unsigned char *)__p + 23) & 0x80) != 0)
            {
              std::string::__init_copy_ctor_external(v53, *(const std::string::value_type **)__p, *((void *)__p + 1));
              goto LABEL_48;
            }
            long long v23 = *(_OWORD *)__p;
            std::string::size_type v24 = *((void *)__p + 2);
            goto LABEL_44;
          }
LABEL_45:
          unint64_t v28 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v52, v22);
LABEL_49:
          std::string v53 = v28;
          goto LABEL_50;
        }
        if (*((void *)__p + 1)) {
          goto LABEL_41;
        }
      }
LABEL_50:
      p_p = &__p;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&p_p);
      goto LABEL_51;
    }
LABEL_52:
    kaldi::JoinVectorToString<std::string>(&v52, " ", a3);
    unsigned int v29 = *(unsigned __int8 *)(a3 + 23);
    if (*(unsigned char *)(a1 + 104))
    {
      if ((v29 & 0x80) != 0)
      {
        unint64_t v30 = *(unsigned char **)a3;
        uint64_t v31 = *(void *)(a3 + 8);
        if (!v31) {
          goto LABEL_61;
        }
      }
      else
      {
        unint64_t v30 = (unsigned char *)a3;
        uint64_t v31 = *(unsigned __int8 *)(a3 + 23);
        if (!*(unsigned char *)(a3 + 23)) {
          goto LABEL_61;
        }
      }
      do
      {
        if (*v30 == 95) {
          *unint64_t v30 = 32;
        }
        ++v30;
        --v31;
      }
      while (v31);
      unsigned int v29 = *(unsigned __int8 *)(a3 + 23);
    }
LABEL_61:
    uint64_t v32 = v29;
    if ((v29 & 0x80u) == 0) {
      uint64_t v33 = v29;
    }
    else {
      uint64_t v33 = *(void *)(a3 + 8);
    }
    uint64_t v34 = *(unsigned __int8 *)(a2 + 23);
    int v35 = (char)v34;
    if ((v34 & 0x80u) != 0) {
      uint64_t v34 = *(void *)(a2 + 8);
    }
    if (v33 != v34) {
      goto LABEL_77;
    }
    if (v35 >= 0) {
      int v36 = (unsigned __int8 *)a2;
    }
    else {
      int v36 = *(unsigned __int8 **)a2;
    }
    if ((v32 & 0x80) != 0)
    {
      if (memcmp(*(const void **)a3, v36, *(void *)(a3 + 8))) {
        goto LABEL_77;
      }
    }
    else if (v32)
    {
      uint64_t v37 = (unsigned __int8 *)a3;
      while (*v37 == *v36)
      {
        ++v37;
        ++v36;
        if (!--v32) {
          goto LABEL_90;
        }
      }
LABEL_77:
      if (kaldi::g_kaldi_verbose_level >= 1)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 1);
        int v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Input hammer removed tags ", 26);
        int v39 = *(char *)(a2 + 23);
        if (v39 >= 0) {
          uint64_t v40 = a2;
        }
        else {
          uint64_t v40 = *(void *)a2;
        }
        if (v39 >= 0) {
          uint64_t v41 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          uint64_t v41 = *(void *)(a2 + 8);
        }
        uint64_t v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, v40, v41);
        uint64_t v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)" -> ", 4);
        int v44 = *(char *)(a3 + 23);
        if (v44 >= 0) {
          unint64_t v45 = (const void *)a3;
        }
        else {
          unint64_t v45 = *(const void **)a3;
        }
        if (v44 >= 0) {
          uint64_t v46 = *(unsigned __int8 *)(a3 + 23);
        }
        else {
          uint64_t v46 = *(void *)(a3 + 8);
        }
        goto LABEL_97;
      }
      goto LABEL_98;
    }
LABEL_90:
    if (kaldi::g_kaldi_verbose_level >= 1)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 1);
      uint64_t v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Input hammer did not change anything ", 37);
      int v47 = *(char *)(a2 + 23);
      if (v47 >= 0) {
        unint64_t v45 = (const void *)a2;
      }
      else {
        unint64_t v45 = *(const void **)a2;
      }
      if (v47 >= 0) {
        uint64_t v46 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        uint64_t v46 = *(void *)(a2 + 8);
      }
LABEL_97:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)v45, v46);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
    }
LABEL_98:
    std::string __p = &v52;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    std::string __p = &v55;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    return 0;
  }
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Locale not in pass list ", 24);
    int v10 = *(char *)(a4 + 23);
    if (v10 >= 0) {
      uint64_t v11 = a4;
    }
    else {
      uint64_t v11 = *(void *)a4;
    }
    if (v10 >= 0) {
      uint64_t v12 = *(unsigned __int8 *)(a4 + 23);
    }
    else {
      uint64_t v12 = *(void *)(a4 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&__p);
  }
  std::string::operator=((std::string *)a3, (const std::string *)a2);
  return 0;
}

void sub_1B232E688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  *(void *)(v16 - 136) = v15;
  *(void *)(v16 - 88) = &__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v16 - 88));
  std::string __p = (void *)(v16 - 144);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::string __p = (void *)(v16 - 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::InputHammer::RemoveSpecifiedTags(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  unint64_t v42 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, " ");
  kaldi::SplitStringOnString(a2, (char *)&__p, &v43);
  if (SHIBYTE(v39) < 0) {
    operator delete(__p);
  }
  if (*(char *)(a3 + 23) < 0)
  {
    **(unsigned char **)a3 = 0;
    *(void *)(a3 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 2std::__function::__value_func<BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::~__value_func[abi:ne180100](this + 3) = 0;
  }
  uint64_t v6 = v43;
  uint64_t v7 = v44;
  if (v43 != v44)
  {
    while (1)
    {
      if (*(char *)(v6 + 23) < 0)
      {
        uint64_t v8 = *(const std::string::value_type **)v6;
        uint64_t v9 = *(void *)(v6 + 8);
      }
      else
      {
        uint64_t v8 = (const std::string::value_type *)v6;
        uint64_t v9 = *(unsigned __int8 *)(v6 + 23);
      }
      int v10 = v8 - 1;
      do
      {
        if (!v9) {
          goto LABEL_19;
        }
        int v11 = v10[v9--];
      }
      while (v11 != 92);
      if (v9 != -1) {
        break;
      }
LABEL_19:
      double v13 = v41;
      if ((unint64_t)v41 >= v42)
      {
        uint64_t v15 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v40, (long long *)v6);
      }
      else
      {
        if ((*(unsigned char *)(v6 + 23) & 0x80) != 0)
        {
          std::string::__init_copy_ctor_external(v41, *(const std::string::value_type **)v6, *(void *)(v6 + 8));
        }
        else
        {
          long long v14 = *(_OWORD *)v6;
          v41->__r_.__value_.__r.__words[2] = *(void *)(v6 + 16);
          *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
        }
        uint64_t v15 = v13 + 1;
      }
      uint64_t v41 = v15;
LABEL_40:
      v6 += 24;
      if (v6 == v7) {
        goto LABEL_41;
      }
    }
    std::string __p = 0;
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    kaldi::SplitStringToVector((const std::string *)v6, "\\"", 0, (uint64_t)&__p);
    if (v38 - (void)__p == 48)
    {
      if (!std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(a1, (unsigned __int8 *)__p + 24))
      {
        uint64_t v16 = v41;
        uint64_t v12 = (long long *)v6;
        if ((unint64_t)v41 < v42)
        {
          if (*(char *)(v6 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v41, *(const std::string::value_type **)v6, *(void *)(v6 + 8));
            goto LABEL_37;
          }
          long long v17 = *(_OWORD *)v6;
          std::string::size_type v18 = *(void *)(v6 + 16);
          goto LABEL_33;
        }
LABEL_34:
        uint64_t v19 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v40, v12);
LABEL_38:
        uint64_t v41 = v19;
        goto LABEL_39;
      }
      uint64_t v12 = (long long *)__p;
      if ((*((char *)__p + 23) & 0x80000000) == 0)
      {
        if (!*((unsigned char *)__p + 23)) {
          goto LABEL_39;
        }
LABEL_30:
        uint64_t v16 = v41;
        if ((unint64_t)v41 < v42)
        {
          if ((*((unsigned char *)__p + 23) & 0x80) != 0)
          {
            std::string::__init_copy_ctor_external(v41, *(const std::string::value_type **)__p, *((void *)__p + 1));
            goto LABEL_37;
          }
          long long v17 = *(_OWORD *)__p;
          std::string::size_type v18 = *((void *)__p + 2);
LABEL_33:
          v16->__r_.__value_.__r.__words[2] = v18;
          *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
LABEL_37:
          uint64_t v19 = v16 + 1;
          goto LABEL_38;
        }
        goto LABEL_34;
      }
      if (*((void *)__p + 1)) {
        goto LABEL_30;
      }
    }
LABEL_39:
    p_p = &__p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&p_p);
    goto LABEL_40;
  }
LABEL_41:
  kaldi::JoinVectorToString<std::string>(&v40, " ", a3);
  uint64_t v20 = *(unsigned __int8 *)(a3 + 23);
  if ((v20 & 0x80u) == 0) {
    uint64_t v21 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v21 = *(void *)(a3 + 8);
  }
  uint64_t v22 = *(unsigned __int8 *)(a2 + 23);
  int v23 = (char)v22;
  if ((v22 & 0x80u) != 0) {
    uint64_t v22 = *(void *)(a2 + 8);
  }
  if (v21 != v22)
  {
LABEL_57:
    if (kaldi::g_kaldi_verbose_level >= 1)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 1);
      long long v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Input hammer removed tags ", 26);
      int v27 = *(char *)(a2 + 23);
      if (v27 >= 0) {
        uint64_t v28 = a2;
      }
      else {
        uint64_t v28 = *(void *)a2;
      }
      if (v27 >= 0) {
        uint64_t v29 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        uint64_t v29 = *(void *)(a2 + 8);
      }
      unint64_t v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, v28, v29);
      uint64_t v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" -> ", 4);
      int v32 = *(char *)(a3 + 23);
      if (v32 >= 0) {
        uint64_t v33 = (unsigned char *)a3;
      }
      else {
        uint64_t v33 = *(unsigned char **)a3;
      }
      if (v32 >= 0) {
        uint64_t v34 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v34 = *(void *)(a3 + 8);
      }
      goto LABEL_77;
    }
    goto LABEL_78;
  }
  if (v23 >= 0) {
    std::string::size_type v24 = (unsigned __int8 *)a2;
  }
  else {
    std::string::size_type v24 = *(unsigned __int8 **)a2;
  }
  if ((v20 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a3, v24, *(void *)(a3 + 8))) {
      goto LABEL_57;
    }
  }
  else if (*(unsigned char *)(a3 + 23))
  {
    uint64_t v25 = (unsigned __int8 *)a3;
    while (*v25 == *v24)
    {
      ++v25;
      ++v24;
      if (!--v20) {
        goto LABEL_70;
      }
    }
    goto LABEL_57;
  }
LABEL_70:
  if (kaldi::g_kaldi_verbose_level >= 1)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 1);
    uint64_t v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Input hammer did not change anything ", 37);
    int v35 = *(char *)(a2 + 23);
    if (v35 >= 0) {
      uint64_t v33 = (unsigned char *)a2;
    }
    else {
      uint64_t v33 = *(unsigned char **)a2;
    }
    if (v35 >= 0) {
      uint64_t v34 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v34 = *(void *)(a2 + 8);
    }
LABEL_77:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v33, v34);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
  }
LABEL_78:
  std::string __p = &v40;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::string __p = &v43;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  return 0;
}

void sub_1B232EB00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::string __p = (void *)(v14 - 136);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::string __p = (void *)(v14 - 112);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

BOOL kaldi::quasar::BPE::IsIntraWord(uint64_t a1, uint64_t **a2)
{
  size_t v2 = *((unsigned __int8 *)a2 + 23);
  size_t v3 = (size_t)a2[1];
  if ((v2 & 0x80u) == 0) {
    size_t v4 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v4 = (size_t)a2[1];
  }
  int v5 = *(char *)(a1 + 159);
  if (v5 >= 0) {
    size_t v6 = *(unsigned __int8 *)(a1 + 159);
  }
  else {
    size_t v6 = *(void *)(a1 + 144);
  }
  BOOL v9 = v4 >= v6;
  size_t v7 = v4 - v6;
  if (!v9) {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if (v6 == -1 || v3 < v7) {
LABEL_36:
    }
      std::string::__throw_out_of_range[abi:ne180100]();
    if (v3 - v7 >= v6) {
      size_t v11 = v6;
    }
    else {
      size_t v11 = v3 - v7;
    }
    a2 = (uint64_t **)*a2;
  }
  else
  {
    BOOL v9 = v6 != -1 && v2 >= v7;
    if (!v9) {
      goto LABEL_36;
    }
    size_t v10 = v2 - v7;
    if (v10 >= v6) {
      size_t v11 = v6;
    }
    else {
      size_t v11 = v10;
    }
  }
  if (v5 >= 0) {
    double v13 = (const void *)(a1 + 136);
  }
  else {
    double v13 = *(const void **)(a1 + 136);
  }
  int v14 = memcmp((char *)a2 + v7, v13, v11);
  return v11 == v6 && v14 == 0;
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::SuppressedIds(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  kaldi::quasar::MultiLangDecorator::GetTags(a1 + 120, a2, a3, (uint64_t)&v23);
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  kaldi::SplitStringToVector(&v23, " ", 1, (uint64_t)&v20);
  *(void *)(a5 + 16) = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)a5 = a5 + 8;
  uint64_t v8 = v20;
  uint64_t v9 = v21;
  while (v8 != v9)
  {
    uint64_t v10 = kaldi::quasar::TorchEncoderDecoder::OutputSymbols(*(kaldi::quasar::TorchEncoderDecoder **)(a1 + 136));
    LODWORD(v19[0]) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v10 + 96))(v10, v8) - 1;
    std::__tree<int>::__emplace_unique_key_args<int,int const&>((uint64_t **)a5, (int *)v19, v19);
    v8 += 24;
  }
  uint64_t v12 = *a4;
  uint64_t v11 = a4[1];
  while (v12 != v11)
  {
    uint64_t v13 = kaldi::quasar::TorchEncoderDecoder::OutputSymbols(*(kaldi::quasar::TorchEncoderDecoder **)(a1 + 136));
    uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v13 + 96))(v13, v12);
    if (v14 == -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
      uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Token to suppress not found in symbol table: ", 45);
      int v16 = *(char *)(v12 + 23);
      if (v16 >= 0) {
        uint64_t v17 = v12;
      }
      else {
        uint64_t v17 = *(void *)v12;
      }
      if (v16 >= 0) {
        uint64_t v18 = *(unsigned __int8 *)(v12 + 23);
      }
      else {
        uint64_t v18 = *(void *)(v12 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v17, v18);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19);
    }
    LODWORD(v19[0]) = v14 - 1;
    std::__tree<int>::__emplace_unique_key_args<int,int const&>((uint64_t **)a5, (int *)v19, v19);
    v12 += 24;
  }
  v19[0] = (void **)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v19);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
}

void sub_1B232EE1C()
{
  std::__tree<int>::destroy(v0, *(void **)(v0 + 8));
  JUMPOUT(0x1B232EE38);
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::AddInitialHypToCurrent<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2)
{
  size_t v3 = *(void (****)(void))(a2 + 200);
  if (v3) {
    (**v3)(v3);
  }
  if (*(_DWORD *)(a2 + 184) == 2) {
    (*(void (**)(void))(**(void **)(a2 + 208) + 24))(*(void *)(a2 + 208));
  }
  operator new();
}

uint64_t std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement>>::__push_back_slow_path<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v9 = 0x555555555555555;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v19 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[48 * v4];
  v16[0] = v10;
  v16[1] = v11;
  uint64_t v17 = v11;
  uint64_t v18 = &v10[48 * v9];
  *(void *)uint64_t v11 = *(void *)a2;
  *((void *)v11 + 2) = 0;
  *((void *)v11 + std::__function::__value_func<BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::~__value_func[abi:ne180100](this + 3) = 0;
  *((void *)v11 + 1) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)v11 + 1, *(const void **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  uint64_t v12 = &v10[48 * v4];
  uint64_t v13 = *(void *)(a2 + 32);
  *((_DWORD *)v12 + 1std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = *(_DWORD *)(a2 + 40);
  *((void *)v12 + 4) = v13;
  v17 += 48;
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement>>::__swap_out_circular_buffer(a1, v16);
  uint64_t v14 = a1[1];
  std::__split_buffer<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement> &>::~__split_buffer((uint64_t)v16);
  return v14;
}

void sub_1B232F1CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement>,std::reverse_iterator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement*>,std::reverse_iterator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement*>,std::reverse_iterator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement>,std::reverse_iterator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement*>,std::reverse_iterator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement*>,std::reverse_iterator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    do
    {
      uint64_t v8 = *(void *)(a3 - 48);
      a3 -= 48;
      *(void *)(v7 - 48) = v8;
      *(void *)(v7 - 4std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = 0;
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - ++*(_DWORD *)(result + 24) = 0;
      *(_OWORD *)(v7 - 4std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = *(_OWORD *)(a3 + 8);
      *(void *)(v7 - ++*(_DWORD *)(result + 24) = *(void *)(a3 + 24);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + ++*(_DWORD *)(result + 24) = 0;
      uint64_t v9 = *(void *)(a3 + 32);
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 40);
      *(void *)(v7 - 16) = v9;
      uint64_t v7 = *((void *)&v15 + 1) - 48;
      *((void *)&v15 + 1) -= 48;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement>,std::reverse_iterator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement>,std::reverse_iterator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>,std::reverse_iterator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement>>::__push_back_slow_path<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v9 = 0x555555555555555;
  }
  else {
    unint64_t v9 = v5;
  }
  v15[4] = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[48 * v4];
  v15[0] = v10;
  v15[1] = v11;
  void v15[3] = &v10[48 * v9];
  *(void *)uint64_t v11 = *(void *)a2;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  *((void *)v11 + std::__function::__value_func<BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::~__value_func[abi:ne180100](this + 3) = 0;
  *(_OWORD *)(v11 + 8) = *(_OWORD *)(a2 + 8);
  *((void *)v11 + std::__function::__value_func<BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::~__value_func[abi:ne180100](this + 3) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + ++*(_DWORD *)(result + 24) = 0;
  uint64_t v12 = *(void *)(a2 + 32);
  *((_DWORD *)v11 + 1std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = *(_DWORD *)(a2 + 40);
  *((void *)v11 + 4) = v12;
  void v15[2] = v11 + 48;
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement>>::__swap_out_circular_buffer(a1, v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement> &>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_1B232F460(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::MinHeapCompare,std::__wrap_iter<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement *>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v8 = *(void *)a1;
    uint64_t v7 = *(void *)(a1 + 8);
    uint64_t v10 = *(void *)(a1 + 16);
    uint64_t v9 = *(void *)(a1 + 24);
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + ++*(_DWORD *)(result + 24) = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v18 = *(void *)(a1 + 32);
    int v19 = *(_DWORD *)(a1 + 40);
    uint64_t v11 = (void *)std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,std::__wrap_iter<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>>(a1, a3, a4);
    uint64_t v12 = v11;
    if ((void *)(a2 - 48) == v11)
    {
      *uint64_t v11 = v8;
      uint64_t v17 = v11 + 1;
      int v16 = (void *)v11[1];
      if (v16)
      {
        v12[2] = v16;
        operator delete(v16);
        *uint64_t v17 = 0;
        v12[2] = 0;
        void v12[3] = 0;
      }
      v12[1] = v7;
      v12[2] = v10;
      void v12[3] = v9;
      v12[4] = v18;
      *((_DWORD *)v12 + 1std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = v19;
    }
    else
    {
      *uint64_t v11 = *(void *)(a2 - 48);
      std::vector<int>::__move_assign((uint64_t)(v11 + 1), (__n128 *)(a2 - 40));
      uint64_t v13 = *(void *)(a2 - 16);
      *((_DWORD *)v12 + 1std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = *(_DWORD *)(a2 - 8);
      v12[4] = v13;
      uint64_t v14 = (uint64_t)(v12 + 6);
      *(void *)(a2 - 48) = v8;
      long long v15 = *(void **)(a2 - 40);
      if (v15)
      {
        *(void *)(a2 - 32) = v15;
        operator delete(v15);
        *(void *)(a2 - 4std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = 0;
        *(void *)(a2 - 32) = 0;
        *(void *)(a2 - ++*(_DWORD *)(result + 24) = 0;
      }
      *(void *)(a2 - 4std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = v7;
      *(void *)(a2 - 32) = v10;
      *(void *)(a2 - ++*(_DWORD *)(result + 24) = v9;
      *(void *)(a2 - 16) = v18;
      *(_DWORD *)(a2 - 8) = v19;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,std::__wrap_iter<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>>(a1, v14, a3, 0xAAAAAAAAAAAAAAABLL * ((v14 - a1) >> 4));
    }
  }
}

void sub_1B232F5C8(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__introsort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement *,false>(std::vector<int> *a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v9 = a2;
  uint64_t v10 = (uint64_t *)a1;
  uint64_t v25 = a2;
  long long v26 = a1;
LABEL_2:
  for (uint64_t i = 1 - a4; ; ++i)
  {
    uint64_t v12 = (char *)v9 - (char *)v10;
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (char *)v10) >> 4);
    if (!(!v6 & v5))
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          float v23 = *((float *)v9 - 12);
          uint64_t v25 = v9 - 6;
          if (v23 > *(float *)v10) {
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&>((uint64_t *)&v26, &v25);
          }
          break;
        case 3uLL:
          uint64_t v25 = v9 - 6;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>((float *)v10, v10 + 6, v9 - 6);
          break;
        case 4uLL:
          uint64_t v25 = v9 - 6;
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>((float *)v10, v10 + 6, v10 + 12, v9 - 6);
          break;
        case 5uLL:
          uint64_t v25 = v9 - 6;
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>((float *)v10, v10 + 6, v10 + 12, v10 + 18, v9 - 6);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v12 <= 1151)
    {
      if (a5) {
        std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>((uint64_t)v10, (uint64_t)v9);
      }
      else {
        std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>((uint64_t)v10, (uint64_t)v9);
      }
      return;
    }
    if (i == 1) {
      break;
    }
    unint64_t v14 = v13 >> 1;
    long long v15 = v9 - 6;
    if ((unint64_t)v12 >= 0x1801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>((float *)v10, &v10[6 * (v13 >> 1)], v15);
      int v16 = v25;
      uint64_t v17 = 3 * v14;
      uint64_t v18 = 2 * v14;
      uint64_t v19 = 48 * v14 - 48;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>((float *)&v26[2], (uint64_t *)((char *)v26 + v19), v25 - 12);
      v18 += 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>((float *)&v26[4], (uint64_t *)&v26[v18], v16 - 18);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>((float *)((char *)v26 + v19), (uint64_t *)&v26[(unint64_t)(16 * v17) / 0x18], (uint64_t *)&v26[v18]);
      std::string::size_type v24 = &v26[(unint64_t)(16 * v17) / 0x18];
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&>((uint64_t *)&v26, (uint64_t **)&v24);
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>((float *)&v10[6 * (v13 >> 1)], v10, v15);
    }
    if (a5)
    {
      uint64_t v9 = v25;
    }
    else
    {
      uint64_t v9 = v25;
      if (*(float *)&v26[-2].__begin_ <= *(float *)&v26->__begin_)
      {
        uint64_t v10 = (uint64_t *)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &>(v26, v25);
        goto LABEL_22;
      }
    }
    uint64_t v20 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &>(v26, v9);
    if ((v21 & 1) == 0) {
      goto LABEL_20;
    }
    BOOL v22 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement *>((uint64_t)v26, (uint64_t *)v20);
    uint64_t v10 = (uint64_t *)&v20[2];
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement *>((uint64_t)&v20[2], v9))
    {
      if (v22) {
        return;
      }
      uint64_t v25 = (uint64_t *)v20;
      uint64_t v10 = (uint64_t *)v26;
      uint64_t v9 = (uint64_t *)v20;
    }
    else
    {
      if (!v22)
      {
LABEL_20:
        std::__introsort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement *,false>(v26, v20, a3, -i, a5 & 1);
        uint64_t v10 = (uint64_t *)&v20[2];
LABEL_22:
        a5 = 0;
        long long v26 = (std::vector<int> *)v10;
        a4 = -i;
        goto LABEL_2;
      }
      long long v26 = v20 + 2;
    }
  }
  if (v10 != v9) {
    std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement *,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement *>(v10, v9, (float *)v9, a3);
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement *>(uint64_t a1, uint64_t *a2)
{
  size_t v2 = a2;
  uint64_t v19 = a2;
  uint64_t v20 = a1;
  uint64_t v4 = ((uint64_t)a2 - a1) >> 4;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      float v6 = *((float *)a2 - 12);
      uint64_t v19 = a2 - 6;
      if (v6 > *(float *)a1)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&>(&v20, &v19);
        return 1;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>((float *)a1, (uint64_t *)(a1 + 48), a2 - 6);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>((float *)a1, (uint64_t *)(a1 + 48), (uint64_t *)(a1 + 96), a2 - 6);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>((float *)a1, (uint64_t *)(a1 + 48), (uint64_t *)(a1 + 96), (uint64_t *)(a1 + 144), a2 - 6);
      return 1;
    default:
      uint64_t v7 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>((float *)a1, (uint64_t *)(a1 + 48), (uint64_t *)(a1 + 96));
      uint64_t v8 = a1 + 144;
      if ((uint64_t *)v8 == v2) {
        return 1;
      }
      int v9 = 0;
      break;
  }
  while (1)
  {
    float v10 = *(float *)v8;
    if (*(float *)v8 > *(float *)v7) {
      break;
    }
LABEL_14:
    uint64_t v7 = v8;
    v8 += 48;
    if ((uint64_t *)v8 == v2) {
      return 1;
    }
  }
  int v11 = *(_DWORD *)(v8 + 4);
  long long v16 = *(_OWORD *)(v8 + 8);
  uint64_t v13 = *(void *)(v8 + 24);
  uint64_t v12 = *(void *)(v8 + 32);
  *(void *)(v8 + 16) = 0;
  *(void *)(v8 + ++*(_DWORD *)(result + 24) = 0;
  *(void *)(v8 + 8) = 0;
  uint64_t v17 = v12;
  int v18 = *(_DWORD *)(v8 + 40);
  do
  {
    uint64_t v14 = v7;
    *(void *)(v7 + 48) = *(void *)v7;
    std::vector<int>::__move_assign(v7 + 56, (__n128 *)(v7 + 8));
    *(void *)(v7 + 8std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = *(void *)(v7 + 32);
    *(_DWORD *)(v7 + 88) = *(_DWORD *)(v7 + 40);
    if (v7 == v20) {
      break;
    }
    v7 -= 48;
  }
  while (*(float *)(v14 - 48) < v10);
  *(float *)uint64_t v14 = v10;
  *(_DWORD *)(v14 + 4) = v11;
  long long v15 = *(void **)(v14 + 8);
  if (v15)
  {
    *(void *)(v14 + 16) = v15;
    operator delete(v15);
  }
  *(_OWORD *)(v14 + 8) = v16;
  *(void *)(v14 + ++*(_DWORD *)(result + 24) = v13;
  *(_DWORD *)(v14 + 4std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = v18;
  *(void *)(v14 + 32) = v17;
  if (++v9 != 8)
  {
    size_t v2 = v19;
    goto LABEL_14;
  }
  return v8 + 48 == (void)v19;
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement *,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement *>(uint64_t *a1, uint64_t *a2, float *a3, uint64_t a4)
{
  int v18 = (float *)a1;
  if (a1 != a2)
  {
    uint64_t v6 = (uint64_t)a2;
    uint64_t v7 = a1;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) / 48;
    if ((char *)a2 - (char *)a1 >= 49)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = (uint64_t)&a1[6 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>((uint64_t)v7, a4, v9, v12);
        v12 -= 48;
        --v11;
      }
      while (v11);
    }
    uint64_t v17 = (float *)v6;
    if ((float *)v6 == a3)
    {
      a3 = (float *)v6;
    }
    else
    {
      uint64_t v13 = (float *)v6;
      do
      {
        if (*v13 > *v18)
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&>((uint64_t *)&v17, (uint64_t **)&v18);
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>((uint64_t)v18, a4, v9, (uint64_t)v18);
          uint64_t v13 = v17;
        }
        v13 += 12;
        uint64_t v17 = v13;
      }
      while (v13 != a3);
      uint64_t v7 = (uint64_t *)v18;
      uint64_t v8 = v6 - (void)v18;
    }
    if (v8 >= 49)
    {
      unint64_t v14 = v8 / 0x30uLL;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::MinHeapCompare,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement *>((uint64_t)v7, v6, a4, v14);
        v6 -= 48;
      }
      while (v14-- > 2);
      return (uint64_t)v17;
    }
  }
  return (uint64_t)a3;
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::MinHeapCompare,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v8 = *(void *)a1;
    uint64_t v7 = *(void *)(a1 + 8);
    uint64_t v10 = *(void *)(a1 + 16);
    uint64_t v9 = *(void *)(a1 + 24);
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + ++*(_DWORD *)(result + 24) = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v18 = *(void *)(a1 + 32);
    int v19 = *(_DWORD *)(a1 + 40);
    unint64_t v11 = (void *)std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,std::__wrap_iter<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>>(a1, a3, a4);
    uint64_t v12 = v11;
    if (v11 == (void *)(a2 - 48))
    {
      *unint64_t v11 = v8;
      uint64_t v17 = v11 + 1;
      long long v16 = (void *)v11[1];
      if (v16)
      {
        v12[2] = v16;
        operator delete(v16);
        *uint64_t v17 = 0;
        v12[2] = 0;
        void v12[3] = 0;
      }
      v12[1] = v7;
      v12[2] = v10;
      void v12[3] = v9;
      v12[4] = v18;
      *((_DWORD *)v12 + 1std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = v19;
    }
    else
    {
      *unint64_t v11 = *(void *)(a2 - 48);
      std::vector<int>::__move_assign((uint64_t)(v11 + 1), (__n128 *)(a2 - 40));
      uint64_t v13 = *(void *)(a2 - 16);
      *((_DWORD *)v12 + 1std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = *(_DWORD *)(a2 - 8);
      v12[4] = v13;
      uint64_t v14 = (uint64_t)(v12 + 6);
      *(void *)(a2 - 48) = v8;
      long long v15 = *(void **)(a2 - 40);
      if (v15)
      {
        *(void *)(a2 - 32) = v15;
        operator delete(v15);
        *(void *)(a2 - 4std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = 0;
        *(void *)(a2 - 32) = 0;
        *(void *)(a2 - ++*(_DWORD *)(result + 24) = 0;
      }
      *(void *)(a2 - 4std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = v7;
      *(void *)(a2 - 32) = v10;
      *(void *)(a2 - ++*(_DWORD *)(result + 24) = v9;
      *(void *)(a2 - 16) = v18;
      *(_DWORD *)(a2 - 8) = v19;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,std::__wrap_iter<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>>(a1, v14, a3, 0xAAAAAAAAAAAAAAABLL * ((v14 - a1) >> 4));
    }
  }
}

void sub_1B232FDBC(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ScoreElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ScoreElement>>::__push_back_slow_path<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ScoreElement const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x249249249249249) {
    unint64_t v9 = 0x492492492492492;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  unint64_t v11 = &v10[56 * v4];
  v14[0] = v10;
  v14[1] = v11;
  long long v15 = v11;
  long long v16 = &v10[56 * v9];
  *(_OWORD *)unint64_t v11 = *(_OWORD *)a2;
  *((void *)v11 + std::__function::__value_func<BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::~__value_func[abi:ne180100](this + 3) = 0;
  *((void *)v11 + 4) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)v11 + 2, *(const void **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 2);
  *(_OWORD *)&v10[56 * v4 + 40] = *(_OWORD *)(a2 + 40);
  v15 += 56;
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ScoreElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ScoreElement>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement> &>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1B232FF08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ScoreElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ScoreElement>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ScoreElement>,std::reverse_iterator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ScoreElement*>,std::reverse_iterator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ScoreElement*>,std::reverse_iterator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ScoreElement*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ScoreElement>,std::reverse_iterator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ScoreElement*>,std::reverse_iterator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ScoreElement*>,std::reverse_iterator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ScoreElement*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v13 = a6;
  *((void *)&v13 + 1) = a7;
  long long v12 = v13;
  v10[0] = a1;
  v10[1] = &v12;
  void v10[2] = &v13;
  if (a3 == a5)
  {
    uint64_t v8 = a6;
  }
  else
  {
    do
    {
      *(_OWORD *)(v7 - 56) = *(_OWORD *)(a3 - 56);
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - ++*(_DWORD *)(result + 24) = 0;
      *(void *)(v7 - 4std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = 0;
      *(_OWORD *)(v7 - 4std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = *(_OWORD *)(a3 - 40);
      *(void *)(v7 - ++*(_DWORD *)(result + 24) = *(void *)(a3 - 24);
      *(void *)(a3 - 4std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(a3 - ++*(_DWORD *)(result + 24) = 0;
      *(_OWORD *)(v7 - 16) = *(_OWORD *)(a3 - 16);
      uint64_t v7 = *((void *)&v13 + 1) - 56;
      *((void *)&v13 + 1) -= 56;
      a3 -= 56;
    }
    while (a3 != a5);
    uint64_t v8 = v13;
  }
  char v11 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ScoreElement>,std::reverse_iterator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ScoreElement*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
  return v8;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ScoreElement>,std::reverse_iterator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ScoreElement*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement>,std::reverse_iterator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ScoreElement *,false>(std::vector<int> *a1, unint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v9 = (long long *)a2;
  uint64_t v10 = (long long *)a1;
  unint64_t v24 = a2;
  uint64_t v25 = a1;
LABEL_2:
  for (uint64_t i = 1 - a4; ; ++i)
  {
    uint64_t v12 = (char *)v9 - (char *)v10;
    unint64_t v13 = 0x6DB6DB6DB6DB6DB7 * (((char *)v9 - (char *)v10) >> 3);
    if (!(!v6 & v5))
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          float v22 = *((float *)v9 - 14);
          unint64_t v24 = (unint64_t)v9 - 56;
          if (v22 < *(float *)v10) {
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&>((long long **)&v25, (uint64_t *)&v24);
          }
          break;
        case 3uLL:
          unint64_t v24 = (unint64_t)v9 - 56;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>(v10, (long long *)((char *)v10 + 56), (float *)v9 - 14);
          break;
        case 4uLL:
          unint64_t v24 = (unint64_t)v9 - 56;
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>(v10, (long long *)((char *)v10 + 56), v10 + 7, (unsigned __int32 *)v9 - 14);
          break;
        case 5uLL:
          unint64_t v24 = (unint64_t)v9 - 56;
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>(v10, (long long *)((char *)v10 + 56), v10 + 7, (long long *)((char *)v10 + 168), (unsigned __int32 *)v9 - 14);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v12 <= 1343)
    {
      if (a5) {
        std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>((uint64_t)v10, (uint64_t)v9);
      }
      else {
        std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>((uint64_t)v10, (uint64_t)v9);
      }
      return;
    }
    if (i == 1) {
      break;
    }
    unint64_t v14 = v13 >> 1;
    long long v15 = (float *)v9 - 14;
    if ((unint64_t)v12 >= 0x1C01)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>(v10, (long long *)((char *)v10 + 56 * (v13 >> 1)), v15);
      uint64_t v16 = 56 * v14;
      uint64_t v17 = 56 * v14 - 56;
      unint64_t v18 = v24;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>((long long *)&v25[2].__end_, (long long *)((char *)v25 + v17), (float *)(v24 - 112));
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>((long long *)&v25[4].__end_cap_, (long long *)((char *)&v25[2].__end_ + v16), (float *)(v18 - 168));
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>((long long *)((char *)v25 + v17), (long long *)((char *)v25 + v16), (float *)((char *)&v25[2].__end_ + v16));
      uint64_t v23 = (uint64_t)v25 + v16;
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&>((long long **)&v25, &v23);
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>((long long *)((char *)v10 + 56 * (v13 >> 1)), v10, v15);
    }
    if (a5)
    {
      unint64_t v9 = (long long *)v24;
    }
    else
    {
      unint64_t v9 = (long long *)v24;
      if (*(float *)&v25[-3].__end_cap_.__value_ >= *(float *)&v25->__begin_)
      {
        uint64_t v10 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *,std::__less<void,void> &>(v25, v24);
        goto LABEL_22;
      }
    }
    unint64_t v19 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *,std::__less<void,void> &>(v25, (unint64_t)v9);
    if ((v20 & 1) == 0) {
      goto LABEL_20;
    }
    BOOL v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ScoreElement *>((long long *)v25, v19);
    uint64_t v10 = (long long *)(v19 + 56);
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ScoreElement *>((long long *)(v19 + 56), (uint64_t)v9))
    {
      if (v21) {
        return;
      }
      unint64_t v24 = v19;
      uint64_t v10 = (long long *)v25;
      unint64_t v9 = (long long *)v19;
    }
    else
    {
      if (!v21)
      {
LABEL_20:
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ScoreElement *,false>(v25, v19, a3, -i, a5 & 1);
        uint64_t v10 = (long long *)(v19 + 56);
LABEL_22:
        a5 = 0;
        uint64_t v25 = (std::vector<int> *)v10;
        a4 = -i;
        goto LABEL_2;
      }
      uint64_t v25 = (std::vector<int> *)(v19 + 56);
    }
  }
  if (v10 != v9) {
    std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ScoreElement *,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ScoreElement *>((float *)v10, v9, v9, a3);
  }
}