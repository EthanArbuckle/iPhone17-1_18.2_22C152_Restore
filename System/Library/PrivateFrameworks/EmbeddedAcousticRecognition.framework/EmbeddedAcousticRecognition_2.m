uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>::InitArcIterator(uint64_t a1, int a2, void *a3)
{
  uint64_t vars8;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>::Expand(a1, a2); {
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InitArcIterator(a1, a2, a3);
  }
}

void std::allocate_shared[abi:ne180100]<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>,std::allocator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>>,fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper> &,fst::StdToLatticeMapper<float>&,fst::ArcMapFstOptions &,void>()
{
  v0 = operator new(0x28uLL);
  std::__shared_ptr_emplace<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>>::__shared_ptr_emplace[abi:ne180100]<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper> &,fst::StdToLatticeMapper<float>&,fst::ArcMapFstOptions &,std::allocator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>>,0>(v0);
}

void sub_1B1B93AB8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>>::__shared_ptr_emplace[abi:ne180100]<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper> &,fst::StdToLatticeMapper<float>&,fst::ArcMapFstOptions &,std::allocator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5E618;
  fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::ArcMapFst();
}

void sub_1B1B93B14(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 16;
      v7 = v4 - 16;
      v8 = v4 - 16;
      do
      {
        v9 = *(void (***)(char *))v8;
        v8 -= 16;
        (*v9)(v7);
        v6 -= 16;
        BOOL v10 = v7 == v2;
        v7 = v8;
      }
      while (!v10);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 16 * v6;
    std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1B1B93C68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::resize(void *result, unint64_t a2)
{
  v2 = result;
  uint64_t v3 = result[1];
  unint64_t v4 = (v3 - *result) >> 4;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      uint64_t v6 = *result + 16 * a2;
      if (v3 != v6)
      {
        uint64_t v7 = v3 - 16;
        v8 = (uint64_t (***)(void))(v3 - 16);
        v9 = (uint64_t (***)(void))(v3 - 16);
        do
        {
          BOOL v10 = *v9;
          v9 -= 2;
          uint64_t result = (void *)(*v10)(v8);
          v7 -= 16;
          BOOL v11 = v8 == (uint64_t (***)(void))v6;
          v8 = v9;
        }
        while (!v11);
      }
      v2[1] = v6;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    return (void *)std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::__append(result, v5);
  }
  return result;
}

uint64_t *std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  if (v3 != *result)
  {
    uint64_t v5 = v4 - 16;
    do
    {
      *(void *)(v4 - 16) = &unk_1F0A45D90;
      v4 -= 16;
      uint64_t v6 = *(void *)(v3 - 8);
      *(void *)(v4 + 8) = v6;
      ++*(_DWORD *)(v6 + 56);
      v5 -= 16;
      v3 -= 16;
    }
    while (v3 != v2);
  }
  a2[1] = v4;
  uint64_t v7 = *result;
  *uint64_t result = v4;
  a2[1] = v7;
  uint64_t v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = *(void (***)(void))(i - 16);
    *(void *)(a1 + 16) = i - 16;
    (*v4)();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::__append(void *a1, unint64_t a2)
{
  uint64_t v5 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  uint64_t v4 = v5;
  uint64_t v6 = *(void *)(result - 8);
  if (a2 > (v5 - v6) >> 4)
  {
    unint64_t v7 = a2 + ((v6 - *a1) >> 4);
    if (!(v7 >> 60))
    {
      uint64_t v8 = v4 - *a1;
      if (v8 >> 3 > v7) {
        unint64_t v7 = v8 >> 3;
      }
      if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v9 = v7;
      }
      if (v9) {
        std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(result, v9);
      }
      fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst();
    }
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (a2) {
    fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst();
  }
  a1[1] = v6;
  return result;
}

void sub_1B1B93F54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t fst::StateMap<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::ArcSortMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (result != -1)
  {
    unint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    uint64_t v6 = (*(uint64_t (**)(void))(*(void *)*a2 + 24))();
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 176))(a1, v6);
    if ((*(int (**)(uint64_t))(*(void *)a1 + 160))(a1) >= 1)
    {
      uint64_t v7 = 0;
      do
      {
        fst::ArcSortMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::SetState(a2, v7);
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 240))(a1, v7);
        for (unint64_t i = a2[5]; ; a2[5] = i)
        {
          uint64_t v9 = a2[2];
          if (i >= 0xCCCCCCCCCCCCCCCDLL * ((a2[3] - v9) >> 2)) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)a1 + 208))(a1, v7, v9 + 20 * i);
          unint64_t i = a2[5] + 1;
        }
        (*(void (**)(uint64_t *__return_ptr))(*(void *)*a2 + 32))(&v10);
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 184))(a1, v7, &v10);
        uint64_t v7 = (v7 + 1);
      }
      while ((int)v7 < (*(int (**)(uint64_t))(*(void *)a1 + 160))(a1));
    }
    return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a1 + 192))(a1, v5 & 0x3FFF0FFF0007 | (((v5 >> 16) & 1) << 28) | 0x40000000, 0x3FFFFFFF0007);
  }
  return result;
}

void fst::ArcSortMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::SetState(uint64_t *a1, uint64_t a2)
{
  a1[5] = 0;
  uint64_t v4 = a1 + 2;
  a1[3] = a1[2];
  unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)*a1 + 40))(*a1);
  std::vector<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::reserve(v4, v5);
  uint64_t v6 = *a1;
  unint64_t v16 = 0;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v6 + 136))(v6, a2, v14);
  while (1)
  {
    if (!v14[0])
    {
      if (v16 >= v14[2]) {
        goto LABEL_16;
      }
      goto LABEL_7;
    }
    if ((*(unsigned int (**)(void))(*(void *)v14[0] + 24))(v14[0])) {
      break;
    }
    if (v14[0])
    {
      uint64_t v7 = (*(uint64_t (**)(void))(*(void *)v14[0] + 32))();
      goto LABEL_8;
    }
LABEL_7:
    uint64_t v7 = v14[1] + 20 * v16;
LABEL_8:
    unint64_t v8 = a1[3];
    if (v8 >= a1[4])
    {
      uint64_t v9 = std::vector<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::__push_back_slow_path<fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const&>(v4, v7);
    }
    else
    {
      *(void *)unint64_t v8 = *(void *)v7;
      *(void *)(v8 + 8) = *(void *)(v7 + 8);
      *(_DWORD *)(v8 + 16) = *(_DWORD *)(v7 + 16);
      uint64_t v9 = v8 + 20;
    }
    a1[3] = v9;
    if (v14[0]) {
      (*(void (**)(void))(*(void *)v14[0] + 40))(v14[0]);
    }
    else {
      ++v16;
    }
  }
  if (v14[0])
  {
    (*(void (**)(void))(*(void *)v14[0] + 8))();
    goto LABEL_18;
  }
LABEL_16:
  if (v15) {
    --*v15;
  }
LABEL_18:
  uint64_t v10 = (uint64_t *)a1[2];
  BOOL v11 = (uint64_t *)a1[3];
  unint64_t v12 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * (((char *)v11 - (char *)v10) >> 2));
  if (v11 == v10) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = v12;
  }
  std::__introsort<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*,false>(v10, v11, (uint64_t)v14, v13, 1);
}

void sub_1B1B9444C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    fst::StateSort<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>();
  }
  else {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((uint64_t)&a10);
  }
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*,false>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(uint64_t result, void *a2)
{
  if ((void *)result != a2)
  {
    uint64_t v2 = (void *)(result + 20);
    if ((void *)(result + 20) != a2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = (void *)result;
      do
      {
        char v5 = v2;
        if (*((_DWORD *)v4 + 6) < *((_DWORD *)v4 + 1))
        {
          uint64_t v6 = *v2;
          uint64_t v7 = *(void *)((char *)v4 + 28);
          int v8 = *((_DWORD *)v4 + 9);
          uint64_t v9 = HIDWORD(*v5);
          uint64_t v10 = v3;
          while (1)
          {
            uint64_t v11 = result + v10;
            *(void *)(v11 + 20) = *(void *)(result + v10);
            *(void *)(v11 + 28) = *(void *)(result + v10 + 8);
            *(_DWORD *)(v11 + 36) = *(_DWORD *)(result + v10 + 16);
            if (!v10) {
              break;
            }
            v10 -= 20;
            if (*(_DWORD *)(v11 - 16) <= (int)v9)
            {
              uint64_t v12 = result + v10 + 20;
              goto LABEL_10;
            }
          }
          uint64_t v12 = result;
LABEL_10:
          *(void *)uint64_t v12 = v6;
          *(void *)(v12 + 8) = v7;
          *(_DWORD *)(v12 + 16) = v8;
        }
        uint64_t v2 = (void *)((char *)v5 + 20);
        v3 += 20;
        uint64_t v4 = v5;
      }
      while ((void *)((char *)v5 + 20) != a2);
    }
  }
  return result;
}

void *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(void *result, void *a2)
{
  if (result != a2)
  {
    uint64_t v2 = (void *)((char *)result + 20);
    if ((void *)((char *)result + 20) != a2)
    {
      uint64_t v3 = (_DWORD *)result + 9;
      do
      {
        uint64_t v4 = v2;
        if (*((_DWORD *)result + 6) < *((_DWORD *)result + 1))
        {
          uint64_t v5 = *v2;
          uint64_t v6 = *(void *)((char *)result + 28);
          int v7 = *((_DWORD *)result + 9);
          uint64_t v8 = HIDWORD(*v4);
          uint64_t v9 = v3;
          do
          {
            uint64_t v10 = v9;
            *((void *)v9 - 2) = *(void *)(v9 - 9);
            *((void *)v9 - 1) = *(void *)(v9 - 7);
            int v11 = *(v9 - 5);
            v9 -= 5;
            *uint64_t v10 = v11;
          }
          while (*(v10 - 13) > (int)v8);
          *((void *)v9 - 2) = v5;
          *((void *)v9 - 1) = v6;
          *uint64_t v9 = v7;
        }
        uint64_t v2 = (void *)((char *)v4 + 20);
        v3 += 5;
        uint64_t result = v4;
      }
      while ((void *)((char *)v4 + 20) != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  int v3 = *((_DWORD *)a2 + 1);
  int v4 = *((_DWORD *)a3 + 1);
  if (v3 < *((_DWORD *)a1 + 1))
  {
    uint64_t v5 = *a1;
    int v7 = *((_DWORD *)a1 + 2);
    int v6 = *((_DWORD *)a1 + 3);
    int v8 = *((_DWORD *)a1 + 4);
    if (v4 < v3)
    {
      *a1 = *a3;
      a1[1] = a3[1];
      *((_DWORD *)a1 + 4) = *((_DWORD *)a3 + 4);
      *a3 = v5;
      *((_DWORD *)a3 + 2) = v7;
      *((_DWORD *)a3 + 3) = v6;
      *((_DWORD *)a3 + 4) = v8;
      return 1;
    }
    *a1 = *a2;
    a1[1] = a2[1];
    *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
    *a2 = v5;
    *((_DWORD *)a2 + 2) = v7;
    *((_DWORD *)a2 + 3) = v6;
    *((_DWORD *)a2 + 4) = v8;
    if (*((_DWORD *)a3 + 1) >= SHIDWORD(v5)) {
      return 1;
    }
    *a2 = *a3;
    a2[1] = a3[1];
    *((_DWORD *)a2 + 4) = *((_DWORD *)a3 + 4);
    *a3 = v5;
    *((_DWORD *)a3 + 2) = v7;
    *((_DWORD *)a3 + 3) = v6;
    *((_DWORD *)a3 + 4) = v8;
    return 2;
  }
  if (v4 < v3)
  {
    uint64_t v9 = *a2;
    int v10 = *((_DWORD *)a2 + 4);
    *a2 = *a3;
    uint64_t v11 = a3[1];
    *((_DWORD *)a2 + 4) = *((_DWORD *)a3 + 4);
    uint64_t v12 = a2[1];
    a2[1] = v11;
    *a3 = v9;
    a3[1] = v12;
    *((_DWORD *)a3 + 4) = v10;
    if (*((_DWORD *)a2 + 1) >= *((_DWORD *)a1 + 1)) {
      return 1;
    }
    uint64_t v13 = *a1;
    int v14 = *((_DWORD *)a1 + 4);
    *a1 = *a2;
    uint64_t v15 = a2[1];
    *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
    uint64_t v16 = a1[1];
    a1[1] = v15;
    *a2 = v13;
    a2[1] = v16;
    *((_DWORD *)a2 + 4) = v14;
    return 2;
  }
  return 0;
}

uint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::LatticeWeightTpl<float>,int> *,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &>(uint64_t *a1, unint64_t a2)
{
  unint64_t v2 = *a1;
  unint64_t v3 = HIDWORD(*a1);
  if (*(_DWORD *)(a2 - 16) <= (int)v3)
  {
    int v7 = (uint64_t *)((char *)a1 + 20);
    do
    {
      uint64_t v5 = v7;
      if ((unint64_t)v7 >= a2) {
        break;
      }
      int v8 = *((_DWORD *)v7 + 1);
      int v7 = (uint64_t *)((char *)v7 + 20);
    }
    while (v8 <= (int)v3);
  }
  else
  {
    int v4 = a1;
    do
    {
      uint64_t v5 = (uint64_t *)((char *)v4 + 20);
      int v6 = *((_DWORD *)v4 + 6);
      int v4 = (uint64_t *)((char *)v4 + 20);
    }
    while (v6 <= (int)v3);
  }
  if ((unint64_t)v5 >= a2)
  {
    unint64_t v9 = a2;
  }
  else
  {
    do
    {
      unint64_t v9 = a2 - 20;
      int v10 = *(_DWORD *)(a2 - 16);
      a2 -= 20;
    }
    while (v10 > (int)v3);
  }
  uint64_t v11 = a1[1];
  int v12 = *((_DWORD *)a1 + 4);
  while ((unint64_t)v5 < v9)
  {
    uint64_t v13 = *v5;
    int v14 = *((_DWORD *)v5 + 4);
    uint64_t *v5 = *(void *)v9;
    uint64_t v15 = *(void *)(v9 + 8);
    *((_DWORD *)v5 + 4) = *(_DWORD *)(v9 + 16);
    uint64_t v16 = v5[1];
    v5[1] = v15;
    *(void *)unint64_t v9 = v13;
    *(void *)(v9 + 8) = v16;
    *(_DWORD *)(v9 + 16) = v14;
    do
    {
      int v17 = *((_DWORD *)v5 + 6);
      uint64_t v5 = (uint64_t *)((char *)v5 + 20);
    }
    while (v17 <= (int)v3);
    do
    {
      int v18 = *(_DWORD *)(v9 - 16);
      v9 -= 20;
    }
    while (v18 > (int)v3);
  }
  if ((uint64_t *)((char *)v5 - 20) != a1)
  {
    *a1 = *(uint64_t *)((char *)v5 - 20);
    a1[1] = *(uint64_t *)((char *)v5 - 12);
    *((_DWORD *)a1 + 4) = *((_DWORD *)v5 - 1);
  }
  *(uint64_t *)((char *)v5 - 20) = v2;
  *(uint64_t *)((char *)v5 - 12) = v11;
  *((_DWORD *)v5 - 1) = v12;
  return v5;
}

uint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::LatticeWeightTpl<float>,int> *,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &>(uint64_t *a1, unint64_t a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  int v5 = *((_DWORD *)a1 + 4);
  unint64_t v6 = HIDWORD(*a1);
  do
  {
    int v7 = *(_DWORD *)((char *)a1 + v2 + 24);
    v2 += 20;
  }
  while (v7 < (int)v6);
  int v8 = (uint64_t *)((char *)a1 + v2);
  if (v2 == 20)
  {
    while ((unint64_t)v8 < a2)
    {
      unint64_t v9 = a2 - 20;
      int v11 = *(_DWORD *)(a2 - 16);
      a2 -= 20;
      if (v11 < (int)v6) {
        goto LABEL_9;
      }
    }
    unint64_t v9 = a2;
  }
  else
  {
    do
    {
      unint64_t v9 = a2 - 20;
      int v10 = *(_DWORD *)(a2 - 16);
      a2 -= 20;
    }
    while (v10 >= (int)v6);
  }
LABEL_9:
  int v12 = v8;
  if ((unint64_t)v8 < v9)
  {
    unint64_t v13 = v9;
    do
    {
      uint64_t v14 = *v12;
      int v15 = *((_DWORD *)v12 + 4);
      *int v12 = *(void *)v13;
      uint64_t v16 = *(void *)(v13 + 8);
      *((_DWORD *)v12 + 4) = *(_DWORD *)(v13 + 16);
      uint64_t v17 = v12[1];
      v12[1] = v16;
      *(void *)unint64_t v13 = v14;
      *(void *)(v13 + 8) = v17;
      *(_DWORD *)(v13 + 16) = v15;
      do
      {
        int v18 = *((_DWORD *)v12 + 6);
        int v12 = (uint64_t *)((char *)v12 + 20);
      }
      while (v18 < (int)v6);
      do
      {
        int v19 = *(_DWORD *)(v13 - 16);
        v13 -= 20;
      }
      while (v19 >= (int)v6);
    }
    while ((unint64_t)v12 < v13);
  }
  if ((uint64_t *)((char *)v12 - 20) != a1)
  {
    *a1 = *(uint64_t *)((char *)v12 - 20);
    a1[1] = *(uint64_t *)((char *)v12 - 12);
    *((_DWORD *)a1 + 4) = *((_DWORD *)v12 - 1);
  }
  *(uint64_t *)((char *)v12 - 20) = v3;
  *(uint64_t *)((char *)v12 - 12) = v4;
  *((_DWORD *)v12 - 1) = v5;
  return (uint64_t)v12 - 20;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 2;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(_DWORD *)(a2 - 16) < *(_DWORD *)(a1 + 4))
      {
        uint64_t v6 = *(void *)a1;
        int v7 = *(_DWORD *)(a1 + 16);
        *(void *)a1 = *(void *)(a2 - 20);
        uint64_t v8 = *(void *)(a2 - 12);
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 - 4);
        uint64_t v9 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v8;
        *(void *)(a2 - 20) = v6;
        *(void *)(a2 - 12) = v9;
        *(_DWORD *)(a2 - 4) = v7;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t *)a1, (uint64_t *)(a1 + 20), (uint64_t *)(a2 - 20));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(a1, a1 + 20, a1 + 40, a2 - 20);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(a1, a1 + 20, a1 + 40, a1 + 60, a2 - 20);
      return 1;
    default:
      uint64_t v10 = a1 + 40;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t *)a1, (uint64_t *)(a1 + 20), (uint64_t *)(a1 + 40));
      uint64_t v11 = a1 + 60;
      if (a1 + 60 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    if (*(_DWORD *)(v11 + 4) < *(_DWORD *)(v10 + 4))
    {
      uint64_t v14 = *(void *)v11;
      uint64_t v15 = *(void *)(v11 + 8);
      int v16 = *(_DWORD *)(v11 + 16);
      uint64_t v17 = HIDWORD(*(void *)v11);
      uint64_t v18 = v12;
      while (1)
      {
        uint64_t v19 = a1 + v18;
        *(void *)(v19 + 60) = *(void *)(a1 + v18 + 40);
        *(void *)(v19 + 68) = *(void *)(a1 + v18 + 48);
        *(_DWORD *)(v19 + 76) = *(_DWORD *)(a1 + v18 + 56);
        if (v18 == -40) {
          break;
        }
        v18 -= 20;
        if (*(_DWORD *)(v19 + 24) <= (int)v17)
        {
          uint64_t v20 = a1 + v18 + 60;
          goto LABEL_12;
        }
      }
      uint64_t v20 = a1;
LABEL_12:
      *(void *)uint64_t v20 = v14;
      *(void *)(v20 + 8) = v15;
      *(_DWORD *)(v20 + 16) = v16;
      if (++v13 == 8) {
        return v11 + 20 == a2;
      }
    }
    uint64_t v10 = v11;
    v12 += 20;
    v11 += 20;
    if (v11 == a2) {
      return 1;
    }
  }
}

double std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t *)a1, (uint64_t *)a2, (uint64_t *)a3);
  if (*(_DWORD *)(a4 + 4) < *(_DWORD *)(a3 + 4))
  {
    uint64_t v9 = *(void *)a3;
    int v10 = *(_DWORD *)(a3 + 16);
    *(void *)a3 = *(void *)a4;
    double result = *(double *)(a4 + 8);
    *(_DWORD *)(a3 + 16) = *(_DWORD *)(a4 + 16);
    uint64_t v11 = *(void *)(a3 + 8);
    *(double *)(a3 + 8) = result;
    *(void *)a4 = v9;
    *(void *)(a4 + 8) = v11;
    *(_DWORD *)(a4 + 16) = v10;
    if (*(_DWORD *)(a3 + 4) < *(_DWORD *)(a2 + 4))
    {
      uint64_t v12 = *(void *)a2;
      int v13 = *(_DWORD *)(a2 + 16);
      *(void *)a2 = *(void *)a3;
      double result = *(double *)(a3 + 8);
      *(_DWORD *)(a2 + 16) = *(_DWORD *)(a3 + 16);
      uint64_t v14 = *(void *)(a2 + 8);
      *(double *)(a2 + 8) = result;
      *(void *)a3 = v12;
      *(void *)(a3 + 8) = v14;
      *(_DWORD *)(a3 + 16) = v13;
      if (*(_DWORD *)(a2 + 4) < *(_DWORD *)(a1 + 4))
      {
        uint64_t v15 = *(void *)a1;
        int v16 = *(_DWORD *)(a1 + 16);
        *(void *)a1 = *(void *)a2;
        double result = *(double *)(a2 + 8);
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
        uint64_t v17 = *(void *)(a1 + 8);
        *(double *)(a1 + 8) = result;
        *(void *)a2 = v15;
        *(void *)(a2 + 8) = v17;
        *(_DWORD *)(a2 + 16) = v16;
      }
    }
  }
  return result;
}

double std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(a1, a2, a3, a4);
  if (*(_DWORD *)(a5 + 4) < *(_DWORD *)(a4 + 4))
  {
    uint64_t v11 = *(void *)a4;
    int v12 = *(_DWORD *)(a4 + 16);
    *(void *)a4 = *(void *)a5;
    double result = *(double *)(a5 + 8);
    *(_DWORD *)(a4 + 16) = *(_DWORD *)(a5 + 16);
    uint64_t v13 = *(void *)(a4 + 8);
    *(double *)(a4 + 8) = result;
    *(void *)a5 = v11;
    *(void *)(a5 + 8) = v13;
    *(_DWORD *)(a5 + 16) = v12;
    if (*(_DWORD *)(a4 + 4) < *(_DWORD *)(a3 + 4))
    {
      uint64_t v14 = *(void *)a3;
      int v15 = *(_DWORD *)(a3 + 16);
      *(void *)a3 = *(void *)a4;
      double result = *(double *)(a4 + 8);
      *(_DWORD *)(a3 + 16) = *(_DWORD *)(a4 + 16);
      uint64_t v16 = *(void *)(a3 + 8);
      *(double *)(a3 + 8) = result;
      *(void *)a4 = v14;
      *(void *)(a4 + 8) = v16;
      *(_DWORD *)(a4 + 16) = v15;
      if (*(_DWORD *)(a3 + 4) < *(_DWORD *)(a2 + 4))
      {
        uint64_t v17 = *(void *)a2;
        int v18 = *(_DWORD *)(a2 + 16);
        *(void *)a2 = *(void *)a3;
        double result = *(double *)(a3 + 8);
        *(_DWORD *)(a2 + 16) = *(_DWORD *)(a3 + 16);
        uint64_t v19 = *(void *)(a2 + 8);
        *(double *)(a2 + 8) = result;
        *(void *)a3 = v17;
        *(void *)(a3 + 8) = v19;
        *(_DWORD *)(a3 + 16) = v18;
        if (*(_DWORD *)(a2 + 4) < *(_DWORD *)(a1 + 4))
        {
          uint64_t v20 = *(void *)a1;
          int v21 = *(_DWORD *)(a1 + 16);
          *(void *)a1 = *(void *)a2;
          double result = *(double *)(a2 + 8);
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
          uint64_t v22 = *(void *)(a1 + 8);
          *(double *)(a1 + 8) = result;
          *(void *)a2 = v20;
          *(void *)(a2 + 8) = v22;
          *(_DWORD *)(a2 + 16) = v21;
        }
      }
    }
  }
  return result;
}

uint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v8 = (uint64_t)a2 - a1;
    uint64_t v9 = ((uint64_t)a2 - a1) / 20;
    if ((uint64_t)a2 - a1 >= 21)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      int v12 = (uint64_t *)(a1 + 20 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(a1, a4, v9, v12);
        int v12 = (uint64_t *)((char *)v12 - 20);
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = a2;
    if (a2 != a3)
    {
      uint64_t v14 = a2;
      do
      {
        if (*((_DWORD *)v14 + 1) < *(_DWORD *)(a1 + 4))
        {
          uint64_t v15 = *v14;
          int v16 = *((_DWORD *)v14 + 4);
          *uint64_t v14 = *(void *)a1;
          uint64_t v17 = *(void *)(a1 + 8);
          *((_DWORD *)v14 + 4) = *(_DWORD *)(a1 + 16);
          uint64_t v18 = v14[1];
          v14[1] = v17;
          *(void *)a1 = v15;
          *(void *)(a1 + 8) = v18;
          *(_DWORD *)(a1 + 16) = v16;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(a1, a4, v9, (uint64_t *)a1);
        }
        uint64_t v14 = (uint64_t *)((char *)v14 + 20);
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 21)
    {
      int64_t v19 = v8 / 0x14uLL;
      uint64_t v20 = (uint64_t)a2 - 20;
      do
      {
        uint64_t v21 = *(void *)a1;
        int v23 = *(_DWORD *)(a1 + 8);
        int v22 = *(_DWORD *)(a1 + 12);
        int v24 = *(_DWORD *)(a1 + 16);
        uint64_t v25 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(a1, a4, v19);
        if (v20 == v25)
        {
          *(void *)uint64_t v25 = v21;
          *(_DWORD *)(v25 + 8) = v23;
          *(_DWORD *)(v25 + 12) = v22;
          *(_DWORD *)(v25 + 16) = v24;
        }
        else
        {
          *(void *)uint64_t v25 = *(void *)v20;
          *(void *)(v25 + 8) = *(void *)(v20 + 8);
          *(_DWORD *)(v25 + 16) = *(_DWORD *)(v20 + 16);
          *(void *)uint64_t v20 = v21;
          *(_DWORD *)(v20 + 8) = v23;
          *(_DWORD *)(v20 + 12) = v22;
          *(_DWORD *)(v20 + 16) = v24;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(a1, v25 + 20, a4, 0xCCCCCCCCCCCCCCCDLL * ((v25 + 20 - a1) >> 2));
        }
        v20 -= 20;
      }
      while (v19-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 >= 2)
  {
    int64_t v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= (uint64_t)(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a4 - result) >> 2)))
    {
      int64_t v5 = (0x999999999999999ALL * (((uint64_t)a4 - result) >> 2)) | 1;
      uint64_t v6 = (uint64_t *)(result + 20 * v5);
      if ((uint64_t)(0x999999999999999ALL * (((uint64_t)a4 - result) >> 2) + 2) < a3)
      {
        int v7 = *(_DWORD *)(result + 20 * v5 + 4);
        int v8 = *((_DWORD *)v6 + 6);
        uint64_t v6 = (uint64_t *)((char *)v6 + 20 * (v7 < v8));
        if (v7 < v8) {
          int64_t v5 = 0x999999999999999ALL * (((uint64_t)a4 - result) >> 2) + 2;
        }
      }
      if (*((_DWORD *)v6 + 1) >= *((_DWORD *)a4 + 1))
      {
        uint64_t v9 = *a4;
        uint64_t v10 = a4[1];
        int v11 = *((_DWORD *)a4 + 4);
        unint64_t v12 = HIDWORD(*a4);
        do
        {
          uint64_t v13 = a4;
          a4 = v6;
          *uint64_t v13 = *v6;
          v13[1] = v6[1];
          *((_DWORD *)v13 + 4) = *((_DWORD *)v6 + 4);
          if (v4 < v5) {
            break;
          }
          uint64_t v14 = (2 * v5) | 1;
          uint64_t v6 = (uint64_t *)(result + 20 * v14);
          uint64_t v15 = 2 * v5 + 2;
          if (v15 < a3)
          {
            int v16 = *(_DWORD *)(result + 20 * v14 + 4);
            int v17 = *((_DWORD *)v6 + 6);
            uint64_t v6 = (uint64_t *)((char *)v6 + 20 * (v16 < v17));
            if (v16 < v17) {
              uint64_t v14 = v15;
            }
          }
          int64_t v5 = v14;
        }
        while (*((_DWORD *)v6 + 1) >= (int)v12);
        *a4 = v9;
        a4[1] = v10;
        *((_DWORD *)a4 + 4) = v11;
      }
    }
  }
  return result;
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  do
  {
    uint64_t v6 = v3 + 1;
    uint64_t v7 = a1 + 20 * (v3 + 1);
    uint64_t v8 = (2 * v3) | 1;
    uint64_t v9 = 2 * v3 + 2;
    if (v9 < a3)
    {
      int v10 = *(_DWORD *)(a1 + 20 * v6 + 4);
      int v11 = *(_DWORD *)(v7 + 24);
      v7 += 20 * (v10 < v11);
      if (v10 < v11) {
        uint64_t v8 = v9;
      }
    }
    *(void *)a1 = *(void *)v7;
    *(void *)(a1 + 8) = *(void *)(v7 + 8);
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(v7 + 16);
    a1 = v7;
    uint64_t v3 = v8;
  }
  while (v8 <= v5);
  return v7;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    unint64_t v4 = (unint64_t)(a4 - 2) >> 1;
    if (*(_DWORD *)(result + 20 * v4 + 4) < *(_DWORD *)(a2 - 16))
    {
      unint64_t v7 = *(void *)(a2 - 20);
      uint64_t v5 = a2 - 20;
      unint64_t v6 = v7;
      uint64_t v8 = *(void *)(v5 + 8);
      int v9 = *(_DWORD *)(v5 + 16);
      unint64_t v10 = HIDWORD(v7);
      do
      {
        uint64_t v11 = v5;
        uint64_t v5 = result + 20 * v4;
        *(void *)uint64_t v11 = *(void *)v5;
        *(void *)(v11 + 8) = *(void *)(v5 + 8);
        *(_DWORD *)(v11 + 16) = *(_DWORD *)(v5 + 16);
        if (!v4) {
          break;
        }
        unint64_t v4 = (v4 - 1) >> 1;
      }
      while (*(_DWORD *)(result + 20 * v4 + 4) < (int)v10);
      *(void *)uint64_t v5 = v6;
      *(void *)(v5 + 8) = v8;
      *(_DWORD *)(v5 + 16) = v9;
    }
  }
  return result;
}

void fst::ComposeFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::CreateBase(uint64_t a1, uint64_t a2)
{
  int v2 = fst::LookAheadMatchType<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1, a2);
  if (v2)
  {
    if (v2 == 1) {
      fst::ComposeFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::CreateBase2<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>();
    }
    fst::ComposeFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::CreateBase2<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>();
  }
  fst::ComposeFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::CreateBase2<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>();
}

void fst::ComposeFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~ComposeFst(void *a1)
{
  fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~ImplToFst(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::ComposeFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Copy()
{
}

void sub_1B1B956C0(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

void fst::ComposeFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::InitStateIterator()
{
}

void sub_1B1B9579C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C408BA93049);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::InitArcIterator(uint64_t a1, uint64_t a2, void *a3)
{
  return fst::ComposeFstImplBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::InitArcIterator(*(void *)(a1 + 8), a2, a3);
}

uint64_t fst::ComposeFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::InitMatcher(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8), a1, a2);
}

uint64_t fst::LookAheadMatchType<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(uint64_t a1, uint64_t a2)
{
  fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::LookAheadMatcher((uint64_t)v6, a1, 1);
  fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::LookAheadMatcher((uint64_t)v5, a2, 0);
  uint64_t v3 = fst::LookAheadMatchType<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(v6, v5);
  if (v5[0]) {
    (*(void (**)(void))(*(void *)v5[0] + 8))(v5[0]);
  }
  if (v6[0]) {
    (*(void (**)(void))(*(void *)v6[0] + 8))(v6[0]);
  }
  return v3;
}

void sub_1B1B958AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a9) {
    fst::LookAheadMatchType<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>();
  }
  if (a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::LookAheadMatchType<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(void *a1, void *a2)
{
  int v4 = (*(uint64_t (**)(void, void))(*(void *)*a1 + 24))(*a1, 0);
  int v5 = (*(uint64_t (**)(void, void))(*(void *)*a2 + 24))(*a2, 0);
  if (v4 == 1 && ((*(uint64_t (**)(void))(*(void *)*a1 + 48))() & 0x20) != 0) {
    return 1;
  }
  if (!v5 && ((*(uint64_t (**)(void))(*(void *)*a2 + 48))() & 0x10) != 0) {
    return 0;
  }
  if (((*(uint64_t (**)(void))(*(void *)*a1 + 48))() & 0x20) == 0
    || (uint64_t v6 = *a1,
        unint64_t v7 = *(unsigned int (**)(uint64_t, uint64_t))(*(void *)*a1 + 24),
        uint64_t v8 = 1,
        v7(v6, 1) != 1))
  {
    if (((*(uint64_t (**)(void))(*(void *)*a2 + 48))() & 0x10) == 0
      || (*(unsigned int (**)(void, uint64_t))(*(void *)*a2 + 24))(*a2, 1))
    {
      return 3;
    }
    return 0;
  }
  return v8;
}

uint64_t fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::LookAheadMatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 144))(a2, a3);
  *(void *)a1 = v4;
  if (!v4) {
    operator new();
  }
  *(unsigned char *)(a1 + 8) = 0;
  return a1;
}

void sub_1B1B95B5C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C40158ED6A5);
  _Unwind_Resume(a1);
}

void fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::SortedMatcher(uint64_t a1, uint64_t a2, int a3, int a4)
{
  *(void *)a1 = &unk_1F0A39188;
  *(void *)(a1 + 8) = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 88))(a2, 0);
  *(_DWORD *)(a1 + 16) = -1;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = a3;
  *(_DWORD *)(a1 + 36) = a4;
  *(_DWORD *)(a1 + 40) = -1;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0xFFFFFFFFLL;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = -1;
  *(unsigned char *)(a1 + 78) = 0;
  fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::MemoryPool((void *)(a1 + 80), 1);
}

void sub_1B1B95CF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0) {
    operator delete(__p);
  }
  fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::~MemoryPool(v18);
  _Unwind_Resume(a1);
}

void fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::~MemoryPool(quasar::Bitmap *a1)
{
  *(void *)a1 = &unk_1F0A36B80;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::Link>::~MemoryArena((void *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_1F0A36B80;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::Link>::~MemoryArena((void *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~SortedMatcher(void *a1)
{
  fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~SortedMatcher(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Copy()
{
}

void sub_1B1B95E2C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C40158ED6A5);
  _Unwind_Resume(a1);
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Type(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 32);
  if (v2 == 3) {
    return 3;
  }
  if (v2) {
    uint64_t v6 = 0x40000000;
  }
  else {
    uint64_t v6 = 0x10000000;
  }
  uint64_t v7 = *(void *)(a1 + 8);
  if (v2) {
    uint64_t v8 = 3221225472;
  }
  else {
    uint64_t v8 = 805306368;
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 64))(v7, v8, a2);
  if ((v9 & v6) != 0) {
    return *(unsigned int *)(a1 + 32);
  }
  uint64_t v10 = 0x80000000;
  if (!v2) {
    uint64_t v10 = 0x20000000;
  }
  if ((v9 & v10) != 0) {
    return 3;
  }
  else {
    return 4;
  }
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::GetFst(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 78)) {
    return a2 | 4;
  }
  else {
    return a2;
  }
}

uint64_t fst::MatcherBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Flags()
{
  return 0;
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Final_(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 32))();
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Priority_(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))();
}

uint64_t fst::MatcherBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Final_(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1) + 32);
  return v1();
}

void fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::MemoryPool(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A36B80;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::Link>::MemoryArena(a1 + 1, a2);
}

void sub_1B1B96050(_Unwind_Exception *a1)
{
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::Size()
{
  return 40;
}

void fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::Link>::MemoryArena(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A37B38;
  a1[1] = 48 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_1B1B96168(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::Link>::~MemoryArena(void *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1B3EA8670);
}

{
  void *v2;
  void *i;
  uint64_t v4;
  uint64_t vars8;

  *a1 = &unk_1F0A37B38;
  int v2 = a1 + 3;
  for (unint64_t i = (void *)a1[4]; i != v2; unint64_t i = (void *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x1B3EA8630](v4, 0x1000C8077774924);
    }
  }
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::Link>::Size()
{
  return 48;
}

void *fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~SortedMatcher(void *a1)
{
  *a1 = &unk_1F0A39188;
  int v2 = (void *)a1[3];
  if (v2)
  {
    if (*v2)
    {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    else
    {
      uint64_t v3 = (_DWORD *)v2[3];
      if (v3) {
        --*v3;
      }
    }
    v2[5] = a1[17];
    a1[17] = v2;
  }
  uint64_t v4 = a1[1];
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  a1[10] = &unk_1F0A36B80;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::Link>::~MemoryArena(a1 + 11);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)(a1 + 10));
  return a1;
}

void fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::SortedMatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = &unk_1F0A39188;
  *(void *)(a1 + 8) = (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 8) + 88))(*(void *)(a2 + 8), a3);
  *(_DWORD *)(a1 + 16) = -1;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = -1;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 78) = *(unsigned char *)(a2 + 78);
  fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::MemoryPool((void *)(a1 + 80), 1);
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::SetState(uint64_t result, uint64_t a2)
{
  if (*(_DWORD *)(result + 16) != a2)
  {
    uint64_t v3 = result;
    *(_DWORD *)(result + 16) = a2;
    if (*(_DWORD *)(result + 32) == 3)
    {
      if (FLAGS_fst_error_fatal) {
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      }
      else {
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      }
      uint64_t v4 = fst::LogMessage::LogMessage((fst *)&v11, (uint64_t)__p);
      int v5 = (void *)fst::cerr(v4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"SortedMatcher: bad match type", 29);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v11);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
      *(unsigned char *)(v3 + 78) = 1;
    }
    uint64_t v6 = *(void **)(v3 + 24);
    if (v6)
    {
      fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Reinit(v6, *(void *)(v3 + 8), a2);
      uint64_t v7 = *(void **)(v3 + 24);
    }
    else
    {
      uint64_t v7 = *(void **)(v3 + 136);
      if (v7)
      {
        *(void *)(v3 + 136) = v7[5];
      }
      else
      {
        uint64_t v7 = (void *)fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Link>::Allocate((void *)(v3 + 88), 1);
        void v7[5] = 0;
      }
      uint64_t v8 = *(void *)(v3 + 8);
      v7[4] = 0;
      (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v8 + 136))(v8, a2, v7);
      *(void *)(v3 + 24) = v7;
    }
    if (*v7) {
      (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v7 + 80))(*v7, 16, 16);
    }
    double result = (*(uint64_t (**)(void, uint64_t))(**(void **)(v3 + 8) + 40))(*(void *)(v3 + 8), a2);
    *(void *)(v3 + 48) = result;
    *(_DWORD *)(v3 + 72) = a2;
  }
  return result;
}

void sub_1B1B965C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Reinit(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  if (!v6) {
    goto LABEL_5;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, a3);
  if (result) {
    return result;
  }
  if (*a1)
  {
    (*(void (**)(void))(*(void *)*a1 + 8))(*a1);
  }
  else
  {
LABEL_5:
    uint64_t v8 = (_DWORD *)a1[3];
    if (v8) {
      --*v8;
    }
  }
  a1[4] = 0;
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a2 + 136);
  return v9(a2, a3, a1);
}

BOOL fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Find(uint64_t a1, int a2)
{
  *(unsigned char *)(a1 + 77) = 1;
  if (*(unsigned char *)(a1 + 78))
  {
    BOOL result = 0;
    *(unsigned char *)(a1 + 76) = 0;
    *(_DWORD *)(a1 + 40) = -1;
  }
  else
  {
    *(unsigned char *)(a1 + 76) = a2 == 0;
    if (a2 == -1) {
      int v4 = 0;
    }
    else {
      int v4 = a2;
    }
    *(_DWORD *)(a1 + 40) = v4;
    return (fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Search(a1) & 1) != 0
        || *(unsigned char *)(a1 + 76) != 0;
  }
  return result;
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Search(uint64_t a1)
{
  uint64_t v2 = **(void **)(a1 + 24);
  if (v2)
  {
    if (*(_DWORD *)(a1 + 32)) {
      uint64_t v3 = 2;
    }
    else {
      uint64_t v3 = 1;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2 + 80))(v2, v3, 15);
  }
  if (*(_DWORD *)(a1 + 40) < *(_DWORD *)(a1 + 36))
  {
    int v4 = *(void **)(a1 + 24);
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 56))(*v4);
    }
    else {
      v4[4] = 0;
    }
    while (1)
    {
      uint64_t v14 = *(void **)(a1 + 24);
      if (*v14)
      {
        if ((*(uint64_t (**)(void))(*(void *)*v14 + 24))(*v14)) {
          return 0;
        }
      }
      else if (v14[4] >= v14[2])
      {
        return 0;
      }
      uint64_t v15 = *(uint64_t **)(a1 + 24);
      uint64_t v16 = *v15;
      if (*(_DWORD *)(a1 + 32))
      {
        uint64_t v17 = v16 ? (*(uint64_t (**)(uint64_t))(*(void *)v16 + 32))(v16) : v15[1] + 20 * v15[4];
        uint64_t v18 = (_DWORD *)(v17 + 4);
      }
      else
      {
        uint64_t v18 = (_DWORD *)(v16 ? (*(uint64_t (**)(uint64_t))(*(void *)v16 + 32))(v16) : v15[1] + 20 * v15[4]);
      }
      int v19 = *(_DWORD *)(a1 + 40);
      int v20 = *v18 <= v19 ? 0 : 7;
      if (*v18 == v19) {
        int v20 = 1;
      }
      if (v20) {
        break;
      }
      uint64_t v21 = *(void **)(a1 + 24);
      if (*v21) {
        (*(void (**)(void))(*(void *)*v21 + 40))(*v21);
      }
      else {
        ++v21[4];
      }
    }
    uint64_t result = 0;
    if (v20 == 1) {
      return 1;
    }
    return result;
  }
  unint64_t v5 = *(void *)(a1 + 48);
  if (!v5)
  {
    unint64_t v6 = 0;
LABEL_53:
    int v23 = *(uint64_t **)(a1 + 24);
    uint64_t result = *v23;
    if (*v23)
    {
      (*(void (**)(uint64_t, unint64_t))(*(void *)result + 64))(result, v6);
      return 0;
    }
    else
    {
      v23[4] = v6;
    }
    return result;
  }
  unint64_t v6 = 0;
  while (1)
  {
    unint64_t v7 = (v5 + v6) >> 1;
    uint64_t v8 = *(void **)(a1 + 24);
    if (*v8) {
      (*(void (**)(void, unint64_t))(*(void *)*v8 + 64))(*v8, (v5 + v6) >> 1);
    }
    else {
      v8[4] = v7;
    }
    uint64_t v9 = *(uint64_t **)(a1 + 24);
    uint64_t v10 = *v9;
    if (*(_DWORD *)(a1 + 32))
    {
      uint64_t v11 = v10 ? (*(uint64_t (**)(uint64_t))(*(void *)v10 + 32))(v10) : v9[1] + 20 * v9[4];
      unint64_t v12 = (_DWORD *)(v11 + 4);
    }
    else
    {
      unint64_t v12 = (_DWORD *)(v10 ? (*(uint64_t (**)(uint64_t))(*(void *)v10 + 32))(v10) : v9[1] + 20 * v9[4]);
    }
    int v13 = *(_DWORD *)(a1 + 40);
    if (*v12 <= v13) {
      break;
    }
    unint64_t v5 = (v5 + v6) >> 1;
LABEL_25:
    if (v6 >= v5) {
      goto LABEL_53;
    }
  }
  if (*v12 < v13)
  {
    unint64_t v6 = v7 + 1;
    goto LABEL_25;
  }
  while (v7 > v6)
  {
    int v24 = *(void **)(a1 + 24);
    --v7;
    if (*v24) {
      (*(void (**)(void, unint64_t))(*(void *)*v24 + 64))(*v24, v7);
    }
    else {
      v24[4] = v7;
    }
    uint64_t v25 = *(uint64_t **)(a1 + 24);
    uint64_t v26 = *v25;
    if (*(_DWORD *)(a1 + 32))
    {
      if (v26) {
        uint64_t v27 = (*(uint64_t (**)(uint64_t))(*(void *)v26 + 32))(v26);
      }
      else {
        uint64_t v27 = v25[1] + 20 * v25[4];
      }
      uint64_t v28 = (_DWORD *)(v27 + 4);
    }
    else if (v26)
    {
      uint64_t v28 = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v26 + 32))(v26);
    }
    else
    {
      uint64_t v28 = (_DWORD *)(v25[1] + 20 * v25[4]);
    }
    if (*v28 != *(_DWORD *)(a1 + 40))
    {
      v29 = *(void **)(a1 + 24);
      unint64_t v30 = v7 + 1;
      if (*v29) {
        (*(void (**)(void, unint64_t))(*(void *)*v29 + 64))(*v29, v30);
      }
      else {
        v29[4] = v30;
      }
      return 1;
    }
  }
  return 1;
}

BOOL fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Done(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 76)) {
    return 0;
  }
  uint64_t v3 = *(void **)(a1 + 24);
  if (*v3)
  {
    if ((*(uint64_t (**)(void))(*(void *)*v3 + 24))(*v3)) {
      return 1;
    }
  }
  else if (v3[4] >= v3[2])
  {
    return 1;
  }
  if (!*(unsigned char *)(a1 + 77)) {
    return 0;
  }
  int v4 = *(_DWORD *)(a1 + 32);
  uint64_t v5 = **(void **)(a1 + 24);
  if (v5)
  {
    if (v4) {
      uint64_t v6 = 2;
    }
    else {
      uint64_t v6 = 1;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5 + 80))(v5, v6, 15);
    int v4 = *(_DWORD *)(a1 + 32);
  }
  unint64_t v7 = *(uint64_t **)(a1 + 24);
  uint64_t v8 = *v7;
  if (v4)
  {
    if (v8) {
      uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 32))(v8);
    }
    else {
      uint64_t v9 = v7[1] + 20 * v7[4];
    }
    uint64_t v10 = (_DWORD *)(v9 + 4);
  }
  else if (v8)
  {
    uint64_t v10 = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 32))(v8);
  }
  else
  {
    uint64_t v10 = (_DWORD *)(v7[1] + 20 * v7[4]);
  }
  return *v10 != *(_DWORD *)(a1 + 40);
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Value(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 76)) {
    return a1 + 56;
  }
  uint64_t v3 = *(void **)(a1 + 24);
  if (!*v3) {
    return v3[1] + 20 * v3[4];
  }
  (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v3 + 80))(*v3, 15, 15);
  uint64_t v3 = *(void **)(a1 + 24);
  if (!*v3) {
    return v3[1] + 20 * v3[4];
  }
  int v4 = *(uint64_t (**)(void))(*(void *)*v3 + 32);
  return v4();
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Next(uint64_t result)
{
  if (*(unsigned char *)(result + 76))
  {
    *(unsigned char *)(result + 76) = 0;
  }
  else
  {
    uint64_t v1 = *(uint64_t **)(result + 24);
    uint64_t result = *v1;
    if (*v1) {
      return (*(uint64_t (**)(void))(*(void *)result + 40))();
    }
    else {
      ++v1[4];
    }
  }
  return result;
}

void fst::ComposeFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::CreateBase2<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>()
{
}

void sub_1B1B96EBC(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)fst::ComposeFstImplBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::ComposeFstImplBase(a1, a2, a3, a4) = &unk_1F0A3A9C0;
  uint64_t v8 = *(long long **)(a4 + 40);
  if (!v8) {
    operator new();
  }
  *(void *)(a1 + 136) = v8;
  long long v9 = *v8;
  *(_OWORD *)(a1 + 144) = *v8;
  *(void *)(a1 + 160) = (*(uint64_t (**)(void))(**(void **)v9 + 32))();
  *(void *)(a1 + 168) = (*(uint64_t (**)(void))(***(void ***)(a1 + 152) + 32))(**(void **)(a1 + 152));
  uint64_t v10 = *(void *)(a4 + 48);
  if (!v10) {
    operator new();
  }
  *(void *)(a1 + 176) = v10;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetMatchType(a1);
  if (*(_DWORD *)(a1 + 184) == 3) {
    *(void *)(a1 + 8) |= 4uLL;
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a3 + 64))(a3, 0x3FFFFFFF0007, 0);
  unint64_t v13 = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 144) + 40))(**(void **)(a1 + 144), v11);
  uint64_t v14 = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 152) + 40))(**(void **)(a1 + 152), v12);
  *(void *)(a1 + 8) = *(void *)(a1 + 8) & 0xFFFFC0000000FFFFLL | fst::ComposeProperties(v13, v14) & 0x3FFFFFFF0004;
  return a1;
}

void sub_1B1B97140(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImplBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::ComposeFstImplBase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7 = (void *)fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::CacheBaseImpl(a1, a4);
  void *v7 = &unk_1F0A3DBA8;
  fst::ComposeFstImplBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::InitBase((uint64_t)v7, a2, a3);
  return a1;
}

void sub_1B1B97208(_Unwind_Exception *a1)
{
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetMatchType(uint64_t a1)
{
  if (((*(uint64_t (**)(void))(***(void ***)(a1 + 144) + 48))(**(void **)(a1 + 144)) & 1) != 0
    && (*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 144) + 24))(**(void **)(a1 + 144), 1) != 1)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    unint64_t v13 = fst::LogMessage::LogMessage((fst *)&v18, (uint64_t)__p);
    uint64_t v14 = (void *)fst::cerr(v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"ComposeFst: 1st argument requires matching but cannot.", 54);
  }
  else if (((*(uint64_t (**)(void))(***(void ***)(a1 + 152) + 48))(**(void **)(a1 + 152)) & 1) != 0 {
         && (*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 152) + 24))(**(void **)(a1 + 152), 1))
  }
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    uint64_t v2 = fst::LogMessage::LogMessage((fst *)&v18, (uint64_t)__p);
    uint64_t v3 = (void *)fst::cerr(v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"ComposeFst: 2nd argument requires matching but cannot.", 54);
  }
  else
  {
    int v4 = (*(uint64_t (**)(void, void))(***(void ***)(a1 + 144) + 24))(**(void **)(a1 + 144), 0);
    int v5 = (*(uint64_t (**)(void, void))(***(void ***)(a1 + 152) + 24))(**(void **)(a1 + 152), 0);
    if (v5) {
      BOOL v6 = 0;
    }
    else {
      BOOL v6 = v4 == 1;
    }
    if (v6) {
      int v7 = 2;
    }
    else {
      int v7 = 1;
    }
    BOOL v8 = v4 == 1;
    if (v4 == 1) {
      int v9 = v7;
    }
    else {
      int v9 = 0;
    }
    if (v8 || v5 == 0) {
      goto LABEL_36;
    }
    int v9 = 1;
    if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 144) + 24))(**(void **)(a1 + 144), 1) == 1)goto LABEL_36; {
    if (!(*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 152) + 24))(**(void **)(a1 + 152), 1))
    }
    {
      int v9 = 0;
      goto LABEL_36;
    }
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    uint64_t v11 = fst::LogMessage::LogMessage((fst *)&v18, (uint64_t)__p);
    uint64_t v12 = (void *)fst::cerr(v11);
    uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ComposeFst: 1st argument cannot match on output labels ", 55);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"and 2nd argument cannot match on input labels (sort?).", 54);
  }
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v18);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  int v9 = 3;
LABEL_36:
  *(_DWORD *)(a1 + 184) = v9;
}

void sub_1B1B97570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(void *a1)
{
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 160) + 64))(*(void *)(a1 + 160), 4, 0)|| (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 168) + 64))(*(void *)(a1 + 168), 4, 0)|| ((*(uint64_t (**)(void, void))(***(void ***)(a1 + 144) + 40))(**(void **)(a1 + 144), 0) & 4) != 0|| ((*(uint64_t (**)(void, void))(***(void ***)(a1 + 152) + 40))(**(void **)(a1 + 152), 0) & 4) != 0))
  {
    *(void *)(a1 + 8) |= 4uLL;
  }
  return *(void *)(a1 + 8) & a2;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy()
{
}

void sub_1B1B9778C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Expand(void *a1, int a2)
{
  int v4 = (unsigned int *)(*(void *)(a1[22] + 80) + 12 * a2);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  int v7 = (void *)a1[17];
  char v16 = *((unsigned char *)v4 + 8);
  fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::SetState(v7, v5, v6, &v16);
  if (fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput((uint64_t)a1, v5, v6))
  {
    uint64_t v9 = a1[20];
    uint64_t v8 = a1[21];
    uint64_t v10 = (void *)a1[19];
    uint64_t v11 = (uint64_t)a1;
    int v12 = a2;
    uint64_t v13 = v6;
    uint64_t v14 = v5;
    int v15 = 1;
  }
  else
  {
    uint64_t v8 = a1[20];
    uint64_t v9 = a1[21];
    uint64_t v10 = (void *)a1[18];
    uint64_t v11 = (uint64_t)a1;
    int v12 = a2;
    uint64_t v13 = v5;
    uint64_t v14 = v6;
    int v15 = 0;
  }
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(v11, v12, v8, v13, v9, v14, v10, v15);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::InitMatcher(uint64_t a1, uint64_t a2, int a3)
{
  if ((*(unsigned int (**)(void, void))(***(void ***)(a1 + 144) + 24))(**(void **)(a1 + 144), 0) == a3
    && (*(unsigned int (**)(void, void))(***(void ***)(a1 + 152) + 24))(**(void **)(a1 + 152), 0) == a3)
  {
    operator new();
  }
  return 0;
}

void sub_1B1B97940(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C40A1003FB7);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeStart(void **a1)
{
  uint64_t result = (*(uint64_t (**)(void *))(*a1[20] + 24))(a1[20]);
  if (result != -1)
  {
    unsigned int v3 = result;
    uint64_t result = (*(uint64_t (**)(void *))(*a1[21] + 24))(a1[21]);
    if (result != -1)
    {
      unint64_t v4 = __PAIR64__(result, v3);
      char v5 = 0;
      return fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(a1[22], (uint64_t *)&v4, 1);
    }
  }
  return result;
}

void *fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeFinal@<X0>(uint64_t a1@<X0>, int a2@<W1>, float32x2_t *a3@<X8>)
{
  uint64_t v6 = *(void *)(*(void *)(a1 + 176) + 80);
  int v7 = (unsigned int *)(v6 + 12 * a2);
  uint64_t v8 = *v7;
  uint64_t result = (*(void *(**)(float32x2_t *__return_ptr))(***(void ***)(a1 + 144) + 96))(&v15);
  float v19 = v15.f32[1];
  v14.i32[0] = v15.i32[0];
  float v18 = INFINITY;
  float v17 = INFINITY;
  if (v15.f32[0] == INFINITY && v19 == v17)
  {
    *a3 = v15;
  }
  else
  {
    int v10 = v7[1];
    uint64_t result = (*(void *(**)(float32x2_t *__return_ptr))(***(void ***)(a1 + 152) + 96))(&v14);
    float32x2_t v12 = v14;
    LODWORD(v18) = HIDWORD(*(void *)&v12);
    v11.i32[0] = (__int32)v12;
    float v19 = v14.f32[0];
    float v17 = INFINITY;
    float v16 = INFINITY;
    if (v14.f32[0] == INFINITY && v18 == v16)
    {
      v11.i32[1] = v14.i32[1];
    }
    else
    {
      uint64_t v13 = *(void **)(a1 + 136);
      LOBYTE(v19) = *(unsigned char *)(v6 + 12 * a2 + 8);
      uint64_t result = fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::SetState(v13, v8, v10, &v19);
      float32x2_t v11 = vadd_f32(v15, v14);
    }
    *a3 = v11;
  }
  return result;
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::CacheBaseImpl(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A3FD18;
  *(void *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)a1 = &unk_1F0A38C48;
  *(unsigned char *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = -1;
  *(unsigned char *)(a1 + 104) = *(unsigned char *)a2;
  *(void *)(a1 + 112) = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  if (!v4) {
    operator new();
  }
  *(void *)(a1 + 120) = v4;
  *(unsigned char *)(a1 + 128) = v4 == 0;
  return a1;
}

void sub_1B1B97CA4(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x10A0C407A9BBF1FLL);
  uint64_t v4 = *(void **)(v1 + 72);
  if (v4) {
    operator delete(v4);
  }
  fst::FstImpl<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImplBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::InitBase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::string::basic_string[abi:ne180100]<0>(&__str, "compose");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  uint64_t v6 = (fst *)(*(uint64_t (**)(uint64_t))(*(void *)a3 + 112))(a3);
  int v7 = (const fst::SymbolTable *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 120))(a2);
  if (!fst::CompatSymbols(v6, v7, (const fst::SymbolTable *)1))
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(&__str, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(&__str, "ERROR");
    }
    uint64_t v8 = fst::LogMessage::LogMessage((fst *)&v14, (uint64_t)&__str);
    uint64_t v9 = (void *)fst::cerr(v8);
    int v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"ComposeFst: output symbol table of 1st argument ", 48);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"does not match input symbol table of 2nd argument", 49);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v14);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    *(void *)(a1 + 8) |= 4uLL;
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetInputSymbols(a1, v11);
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 120))(a3);
  return fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetOutputSymbols(a1, v12);
}

void sub_1B1B97EB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImplBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::InitMatcher()
{
  return 0;
}

uint64_t fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::SequenceComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a4) {
    operator new();
  }
  *(void *)a1 = a4;
  if (!a5) {
    operator new();
  }
  *(void *)(a1 + 8) = a5;
  *(void *)(a1 + 16) = (*(uint64_t (**)(void))(**(void **)a4 + 32))();
  *(void *)(a1 + 24) = -1;
  *(unsigned char *)(a1 + 32) = -1;
  return a1;
}

void sub_1B1B97FD0(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

uint64_t *fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Matcher(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 144))(a2, a3);
  *a1 = v4;
  if (!v4) {
    operator new();
  }
  return a1;
}

void sub_1B1B98098(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C40158ED6A5);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(void *a1)
{
  *a1 = &unk_1F0A3A9C0;
  uint64_t v2 = a1[17];
  if (v2)
  {
    uint64_t v3 = fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::~SequenceComposeFilter(v2);
    MEMORY[0x1B3EA8670](v3, 0x1060C40AD892F49);
  }
  uint64_t v4 = a1[22];
  if (v4)
  {
    char v5 = *(void **)(v4 + 80);
    if (v5)
    {
      *(void *)(v4 + 88) = v5;
      operator delete(v5);
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v4 + 24);
    MEMORY[0x1B3EA8670](v4, 0x10E0C406D28CB5CLL);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~CacheBaseImpl(a1);
}

uint64_t fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::~SequenceComposeFilter(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (*(void *)a1)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    MEMORY[0x1B3EA8670](v2, 0x20C4093837F09);
  }
  uint64_t v3 = *(void **)(a1 + 8);
  if (v3)
  {
    if (*v3) {
      (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
    }
    MEMORY[0x1B3EA8670](v3, 0x20C4093837F09);
  }
  return a1;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl(uint64_t a1, uint64_t a2)
{
}

void sub_1B1B98334(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImplBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::ComposeFstImplBase(uint64_t a1, uint64_t a2)
{
}

void sub_1B1B98430(_Unwind_Exception *a1)
{
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::SequenceComposeFilter()
{
}

void fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Copy()
{
}

void sub_1B1B9854C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

void *fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::SetState(void *result, uint64_t a2, int a3, unsigned char *a4)
{
  char v5 = result;
  if (*((_DWORD *)result + 6) != a2 || *((_DWORD *)result + 7) != a3 || *a4 != *((unsigned char *)result + 32))
  {
    *((_DWORD *)result + 6) = a2;
    *((_DWORD *)result + 7) = a3;
    *((unsigned char *)result + 32) = *a4;
    uint64_t v6 = (*(uint64_t (**)(void, uint64_t))(*(void *)result[2] + 40))(result[2], a2);
    uint64_t v7 = (*(uint64_t (**)(void, uint64_t))(*(void *)v5[2] + 56))(v5[2], a2);
    uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(*(void *)v5[2] + 32))(&v9);
    BOOL v8 = 0;
    float v12 = *((float *)&v9 + 1);
    int v13 = v9;
    int v11 = 2139095040;
    float v10 = INFINITY;
    if (*(float *)&v9 == INFINITY) {
      BOOL v8 = v12 == v10;
    }
    if (v6 != v7) {
      BOOL v8 = 0;
    }
    *((unsigned char *)v5 + 33) = v8;
    *((unsigned char *)v5 + 34) = v7 == 0;
  }
  return result;
}

BOOL fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a1 + 184);
  if (!v3) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v7 = (*(uint64_t (**)(void))(***(void ***)(a1 + 144) + 104))(**(void **)(a1 + 144));
  uint64_t v8 = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 152) + 104))(**(void **)(a1 + 152), a3);
  if (v7 == -1 && v8 == -1)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    int v11 = fst::LogMessage::LogMessage((fst *)&v15, (uint64_t)__p);
    float v12 = (void *)fst::cerr(v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ComposeFst: both sides can't require match", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v15);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    *(void *)(a1 + 8) |= 4uLL;
    return 1;
  }
  if (v7 == -1) {
    return 0;
  }
  return v8 == -1 || v7 <= v8;
}

void sub_1B1B9882C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, int a8)
{
  (*(void (**)(void, uint64_t))(*(void *)*a7 + 56))(*a7, a4);
  v18[0] = a8 - 1;
  v18[1] = a8 << 31 >> 31;
  v18[2] = 0;
  v18[3] = 0;
  v18[4] = a6;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(a1, a2, a7, v18, a8);
  unint64_t v17 = 0;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a5 + 136))(a5, a6, v15);
  while (1)
  {
    if (!v15[0])
    {
      if (v17 >= v15[2]) {
        goto LABEL_13;
      }
LABEL_7:
      char v14 = (unsigned int *)(v15[1] + 20 * v17);
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(void))(*(void *)v15[0] + 24))(v15[0])) {
      break;
    }
    if (!v15[0]) {
      goto LABEL_7;
    }
    char v14 = (unsigned int *)(*(uint64_t (**)(void))(*(void *)v15[0] + 32))();
LABEL_8:
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(a1, a2, a7, v14, a8);
    if (v15[0]) {
      (*(void (**)(void))(*(void *)v15[0] + 40))(v15[0]);
    }
    else {
      ++v17;
    }
  }
  if (v15[0])
  {
    (*(void (**)(void))(*(void *)v15[0] + 8))();
    goto LABEL_15;
  }
LABEL_13:
  if (v16) {
    --*v16;
  }
LABEL_15:
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::SetArcs(a1, a2);
}

void sub_1B1B98A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9) {
    fst::StateSort<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>();
  }
  else {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((uint64_t)&a9);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(uint64_t a1, int a2, void *a3, unsigned int *a4, int a5)
{
  float v10 = a4 + 1;
  if (!a5) {
    float v10 = a4;
  }
  uint64_t result = (*(uint64_t (**)(void, void))(*(void *)*a3 + 64))(*a3, *v10);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)*a3 + 72))();
    if ((result & 1) == 0)
    {
      do
      {
        uint64_t v12 = (*(uint64_t (**)(void))(*(void *)*a3 + 80))();
        unint64_t v13 = *(void *)v12;
        v30[0] = *(void *)v12;
        v30[1] = *(void *)(v12 + 8);
        int v31 = *(_DWORD *)(v12 + 16);
        unint64_t v14 = *(void *)a4;
        v28[0] = *(void *)a4;
        v28[1] = *((void *)a4 + 1);
        unsigned int v29 = a4[4];
        if (a5)
        {
          unint64_t v15 = HIDWORD(v14);
          float v16 = *(unsigned __int8 **)(a1 + 136);
          if (v15 != -1)
          {
            if (v13 == -1)
            {
              int v17 = v16[32];
              if (v16[32]) {
                char v18 = -1;
              }
              else {
                char v18 = 0;
              }
              char v27 = v18;
              if (v17) {
                goto LABEL_35;
              }
            }
            else
            {
              if (v15) {
                char v23 = 0;
              }
              else {
                char v23 = -1;
              }
              char v27 = v23;
              if (!v15) {
                goto LABEL_35;
              }
            }
LABEL_28:
            int v24 = (float32x2_t *)v28;
            uint64_t v25 = (float32x2_t *)v30;
LABEL_34:
            fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::AddArc(a1, a2, v24, v25, &v27);
            goto LABEL_35;
          }
          if (!v16[33])
          {
            char v27 = v16[34] ^ 1;
            goto LABEL_28;
          }
        }
        else
        {
          unint64_t v19 = HIDWORD(v13);
          int v20 = *(unsigned __int8 **)(a1 + 136);
          if (v19 != -1)
          {
            if (v14 == -1)
            {
              int v21 = v20[32];
              if (v21) {
                char v22 = -1;
              }
              else {
                char v22 = 0;
              }
              char v27 = v22;
              if (v21) {
                goto LABEL_35;
              }
            }
            else
            {
              if (v19) {
                char v26 = 0;
              }
              else {
                char v26 = -1;
              }
              char v27 = v26;
              if (!v19) {
                goto LABEL_35;
              }
            }
LABEL_33:
            int v24 = (float32x2_t *)v30;
            uint64_t v25 = (float32x2_t *)v28;
            goto LABEL_34;
          }
          if (!v20[33])
          {
            char v27 = v20[34] ^ 1;
            goto LABEL_33;
          }
        }
LABEL_35:
        (*(void (**)(void))(*(void *)*a3 + 88))();
        uint64_t result = (*(uint64_t (**)(void))(*(void *)*a3 + 72))();
      }
      while (!result);
    }
  }
  return result;
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::AddArc(uint64_t a1, int a2, float32x2_t *a3, float32x2_t *a4, char *a5)
{
  __int32 v7 = a4[2].i32[0];
  LODWORD(v17) = a3[2].i32[0];
  HIDWORD(v17) = v7;
  char v18 = *a5;
  __int32 v8 = a3->i32[0];
  __int32 v9 = a4->i32[1];
  float32x2_t v10 = vadd_f32(a3[1], a4[1]);
  int Id = fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(*(void **)(a1 + 176), &v17, 1);
  v14[0] = v8;
  v14[1] = v9;
  float32x2_t v15 = v10;
  int v16 = Id;
  MutableState = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
  return fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::PushArc(MutableState, (uint64_t)v14);
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(void *)a1 = &unk_1F0A3C860;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 24) = -1;
  *(_DWORD *)(a1 + 28) = a4;
  fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Copy();
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(void *a1)
{
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy()
{
}

void sub_1B1B98E88(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C40A1003FB7);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Type(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32));
  if (result != 3)
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2);
    if (result != 3)
    {
      if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) != 4|| (uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2), result != 4))
      {
        if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) == 4&& (*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2) == *(_DWORD *)(a1 + 28))
        {
          return 4;
        }
        else if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28)|| (uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2), result != 4))
        {
          if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28))return 3; {
          uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2);
          }
          if (result != *(_DWORD *)(a1 + 28)) {
            return 3;
          }
        }
      }
    }
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::GetFst(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 92)) {
    return a2 | 4;
  }
  else {
    return a2;
  }
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetState_(uint64_t result, int a2)
{
  if (*(_DWORD *)(result + 24) != a2)
  {
    uint64_t v2 = result;
    *(_DWORD *)(result + 24) = a2;
    int v3 = (unsigned int *)(*(void *)(*(void *)(*(void *)(result + 16) + 176) + 80) + 12 * a2);
    uint64_t v4 = v3[1];
    (*(void (**)(void, void))(***(void ***)(result + 32) + 56))(**(void **)(result + 32), *v3);
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(v2 + 40) + 56))(**(void **)(v2 + 40), v4);
    *(_DWORD *)(v2 + 68) = *(_DWORD *)(v2 + 24);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Find_(float32x2_t *a1, uint64_t a2)
{
  a1[6].i8[0] = a2 == 0;
  if (a1[3].i32[1])
  {
    if (a2)
    {
      uint64_t v2 = (uint64_t *)&a1[5];
      int v3 = a1 + 4;
      return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(a1, a2, *v2, *v3);
    }
  }
  else if (a2)
  {
    uint64_t v2 = (uint64_t *)&a1[4];
    int v3 = a1 + 5;
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(a1, a2, *v2, (void *)*v3);
  }
  return 1;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Done_(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48)
    || !(*(unsigned int (**)(void))(***(void ***)(a1 + 32) + 72))(**(void **)(a1 + 32)))
  {
    return 0;
  }
  uint64_t v2 = *(uint64_t (**)(void))(***(void ***)(a1 + 40) + 72);
  return v2();
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Value_(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48)) {
    return a1 + 52;
  }
  else {
    return a1 + 72;
  }
}

float32x2_t *fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Next_(float32x2_t *result)
{
  if (result[6].i8[0])
  {
    result[6].i8[0] = 0;
  }
  else
  {
    if (result[3].i32[1])
    {
      uint64_t v2 = (void *)result[4];
      uint64_t v1 = (uint64_t)result[5];
    }
    else
    {
      uint64_t v1 = (uint64_t)result[4];
      uint64_t v2 = (void *)result[5];
    }
    return (float32x2_t *)fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(result, v1, v2);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Priority_(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))();
}

void *fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(void *a1)
{
  *a1 = &unk_1F0A3C860;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    MEMORY[0x1B3EA8670](v2, 0x20C4093837F09);
  }
  int v3 = (void *)a1[5];
  if (v3)
  {
    if (*v3) {
      (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
    }
    MEMORY[0x1B3EA8670](v3, 0x20C4093837F09);
  }
  return a1;
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A3C860;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = -1;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Copy();
}

void sub_1B1B99558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(float32x2_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a3 + 64))();
  if (result)
  {
    __int32 v8 = a1[3].i32[1];
    uint64_t v9 = (*(uint64_t (**)(void))(**(void **)a3 + 80))();
    float32x2_t v10 = (unsigned int *)(v9 + 4);
    if (v8) {
      float32x2_t v10 = (unsigned int *)v9;
    }
    (*(void (**)(void, void))(*(void *)*a4 + 64))(*a4, *v10);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(a1, a3, a4);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(float32x2_t *a1, uint64_t a2, void *a3)
{
  while (!(*(unsigned int (**)(void))(**(void **)a2 + 72))()
       || ((*(uint64_t (**)(void))(*(void *)*a3 + 72))() & 1) == 0)
  {
    if ((*(unsigned int (**)(void))(*(void *)*a3 + 72))())
    {
      (*(void (**)(void))(**(void **)a2 + 88))();
      if (((*(uint64_t (**)(void))(**(void **)a2 + 72))() & 1) == 0)
      {
        do
        {
          __int32 v6 = a1[3].i32[1];
          uint64_t v7 = (*(uint64_t (**)(void))(**(void **)a2 + 80))();
          __int32 v8 = (unsigned int *)(v7 + 4);
          if (v6) {
            __int32 v8 = (unsigned int *)v7;
          }
          if ((*(uint64_t (**)(void, void))(*(void *)*a3 + 64))(*a3, *v8)) {
            break;
          }
          (*(void (**)(void))(**(void **)a2 + 88))();
        }
        while (!(*(unsigned int (**)(void))(**(void **)a2 + 72))());
      }
    }
    while (((*(uint64_t (**)(void))(*(void *)*a3 + 72))() & 1) == 0)
    {
      uint64_t v9 = (*(uint64_t (**)(void))(**(void **)a2 + 80))();
      uint64_t v10 = (*(uint64_t (**)(void))(*(void *)*a3 + 80))();
      (*(void (**)(void))(*(void *)*a3 + 88))();
      uint64_t v11 = a1[3].u32[0];
      __int32 v12 = a1[3].i32[1];
      BOOL v13 = v12 == 0;
      if (v12) {
        unint64_t v14 = (float32x2_t *)v10;
      }
      else {
        unint64_t v14 = (float32x2_t *)v9;
      }
      v19[0] = *v14;
      v19[1] = v14[1];
      __int32 v20 = v14[2].i32[0];
      if (v13) {
        float32x2_t v15 = (float32x2_t *)v10;
      }
      else {
        float32x2_t v15 = (float32x2_t *)v9;
      }
      v17[0] = *v15;
      v17[1] = v15[1];
      __int32 v18 = v15[2].i32[0];
      if (fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc(a1, v11, v19, v17))return 1; {
    }
      }
  }
  return 0;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc(float32x2_t *a1, uint64_t a2, float32x2_t *a3, float32x2_t *a4)
{
  float32x2_t v4 = a1[2];
  char v5 = *(unsigned __int8 **)(*(void *)&v4 + 136);
  __int32 v6 = a3->i32[1];
  if (v6 != -1)
  {
    if (a4->i32[0] == -1)
    {
      uint64_t v7 = 0;
      LODWORD(v5) = v5[32];
      if (v5) {
        return v7;
      }
    }
    else
    {
      LOBYTE(v5) = 0;
      if (!v6) {
        return 0;
      }
    }
LABEL_10:
    __int32 v8 = a4[2].i32[0];
    LODWORD(v11) = a3[2].i32[0];
    HIDWORD(v11) = v8;
    char v12 = (char)v5;
    __int32 v9 = a4->i32[1];
    a1[9].i32[0] = a3->i32[0];
    a1[9].i32[1] = v9;
    a1[10] = vadd_f32(a3[1], a4[1]);
    uint64_t v7 = 1;
    a1[11].i32[0] = fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(*(void **)(*(void *)&v4 + 176), &v11, 1);
    return v7;
  }
  if (!v5[33])
  {
    LOBYTE(v5) = v5[34] ^ 1;
    goto LABEL_10;
  }
  return 0;
}

void fst::ComposeFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::CreateBase2<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>()
{
}

void sub_1B1B99A88(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)fst::ComposeFstImplBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::ComposeFstImplBase(a1, a2, a3, a4) = &unk_1F0A3AA80;
  __int32 v8 = *(long long **)(a4 + 40);
  if (!v8) {
    operator new();
  }
  *(void *)(a1 + 136) = v8;
  long long v9 = *v8;
  *(_OWORD *)(a1 + 144) = *v8;
  *(void *)(a1 + 160) = (*(uint64_t (**)(void))(**(void **)v9 + 32))();
  *(void *)(a1 + 168) = (*(uint64_t (**)(void))(***(void ***)(a1 + 152) + 32))(**(void **)(a1 + 152));
  uint64_t v10 = *(void *)(a4 + 48);
  if (!v10) {
    operator new();
  }
  *(void *)(a1 + 176) = v10;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetMatchType(a1);
  if (*(_DWORD *)(a1 + 184) == 3) {
    *(void *)(a1 + 8) |= 4uLL;
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a3 + 64))(a3, 0x3FFFFFFF0007, 0);
  unint64_t v13 = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 144) + 40))(**(void **)(a1 + 144), v11);
  uint64_t v14 = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 152) + 40))(**(void **)(a1 + 152), v12);
  unint64_t v15 = fst::ComposeProperties(v13, v14);
  if (*(_DWORD *)(*(void *)(a1 + 136) + 40) == 3) {
    uint64_t v16 = v15 | 4;
  }
  else {
    uint64_t v16 = v15;
  }
  *(void *)(a1 + 8) = v16 & 0x3FFFFFFF0004 | *(void *)(a1 + 8) & 0xFFFFC0000000FFFFLL;
  return a1;
}

void sub_1B1B99D20(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(void *a1)
{
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0)
  {
    if ((*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 160) + 64))(*(void *)(a1 + 160), 4, 0)|| (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 168) + 64))(*(void *)(a1 + 168), 4, 0)|| ((*(uint64_t (**)(void, void))(***(void ***)(a1 + 144) + 40))(**(void **)(a1 + 144), 0) & 4) != 0|| ((uint64_t v4 = (*(uint64_t (**)(void, void))(***(void ***)(a1 + 152) + 40))(**(void **)(a1 + 152), 0) & 4, *(_DWORD *)(*(void *)(a1 + 136) + 40) != 3)? (v5 = v4 == 0): (v5 = 0), !v5))
    {
      *(void *)(a1 + 8) |= 4uLL;
    }
  }
  return *(void *)(a1 + 8) & a2;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy()
{
}

void sub_1B1B99F54(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Expand(void *a1, int a2)
{
  uint64_t v4 = (unsigned int *)(*(void *)(a1[22] + 80) + 12 * a2);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  uint64_t v7 = (void *)a1[17];
  char v16 = *((unsigned char *)v4 + 8);
  fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::SetState(v7, v5, v6, &v16);
  if (fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput((uint64_t)a1, v5, v6))
  {
    uint64_t v9 = a1[20];
    uint64_t v8 = a1[21];
    uint64_t v10 = (void *)a1[19];
    uint64_t v11 = (uint64_t)a1;
    int v12 = a2;
    uint64_t v13 = v6;
    uint64_t v14 = v5;
    int v15 = 1;
  }
  else
  {
    uint64_t v8 = a1[20];
    uint64_t v9 = a1[21];
    uint64_t v10 = (void *)a1[18];
    uint64_t v11 = (uint64_t)a1;
    int v12 = a2;
    uint64_t v13 = v5;
    uint64_t v14 = v6;
    int v15 = 0;
  }
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(v11, v12, v8, v13, v9, v14, v10, v15);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::InitMatcher(uint64_t a1, uint64_t a2, int a3)
{
  if ((*(unsigned int (**)(void, void))(***(void ***)(a1 + 144) + 24))(**(void **)(a1 + 144), 0) == a3
    && (*(unsigned int (**)(void, void))(***(void ***)(a1 + 152) + 24))(**(void **)(a1 + 152), 0) == a3
    && *(_DWORD *)(*(void *)(a1 + 136) + 40) != 3)
  {
    operator new();
  }
  return 0;
}

void sub_1B1B9A118(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C40A1003FB7);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeStart(void **a1)
{
  uint64_t result = (*(uint64_t (**)(void *))(*a1[20] + 24))(a1[20]);
  if (result != -1)
  {
    unsigned int v3 = result;
    uint64_t result = (*(uint64_t (**)(void *))(*a1[21] + 24))(a1[21]);
    if (result != -1)
    {
      unint64_t v4 = __PAIR64__(result, v3);
      char v5 = 0;
      return fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(a1[22], (uint64_t *)&v4, 1);
    }
  }
  return result;
}

void *fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeFinal@<X0>(uint64_t a1@<X0>, int a2@<W1>, float32x2_t *a3@<X8>)
{
  uint64_t v6 = *(void *)(*(void *)(a1 + 176) + 80);
  uint64_t v7 = v6 + 12 * a2;
  int v8 = *(_DWORD *)v7;
  uint64_t result = (*(void *(**)(float32x2_t *__return_ptr))(***(void ***)(a1 + 144) + 96))(&v15);
  float v19 = v15.f32[1];
  v14.i32[0] = v15.i32[0];
  float v18 = INFINITY;
  float v17 = INFINITY;
  if (v15.f32[0] == INFINITY && v19 == v17)
  {
    *a3 = v15;
  }
  else
  {
    uint64_t v10 = *(unsigned int *)(v7 + 4);
    uint64_t result = (*(void *(**)(float32x2_t *__return_ptr))(***(void ***)(a1 + 152) + 96))(&v14);
    float32x2_t v12 = v14;
    LODWORD(v18) = HIDWORD(*(void *)&v12);
    v11.i32[0] = (__int32)v12;
    float v19 = v14.f32[0];
    float v17 = INFINITY;
    float v16 = INFINITY;
    if (v14.f32[0] == INFINITY && v18 == v16)
    {
      v11.i32[1] = v14.i32[1];
    }
    else
    {
      uint64_t v13 = *(void **)(a1 + 136);
      LOBYTE(v19) = *(unsigned char *)(v6 + 12 * a2 + 8);
      uint64_t result = fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::SetState(v13, v8, v10, &v19);
      float32x2_t v11 = vadd_f32(v15, v14);
    }
    *a3 = v11;
  }
  return result;
}

void fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>::LookAheadComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = (void **)fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::AltSequenceComposeFilter(a1, a2, a3, a4, a5);
  *(_DWORD *)(a1 + 40) = fst::LookAheadMatchType<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(*v6, *(void **)(a1 + 8));
  fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Copy();
}

void sub_1B1B9A550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0) {
    operator delete(__p);
  }
  fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v18 + 48);
  fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v18);
  _Unwind_Resume(a1);
}

uint64_t fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::AltSequenceComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a4) {
    operator new();
  }
  *(void *)a1 = a4;
  if (!a5) {
    operator new();
  }
  *(void *)(a1 + 8) = a5;
  *(void *)(a1 + 16) = (*(uint64_t (**)(void))(**(void **)a5 + 32))();
  *(void *)(a1 + 24) = -1;
  *(unsigned char *)(a1 + 32) = -1;
  return a1;
}

void sub_1B1B9A68C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1020C405F07FB98);
  _Unwind_Resume(a1);
}

void fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Copy()
{
}

void sub_1B1B9A738(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1020C405F07FB98);
  _Unwind_Resume(a1);
}

uint64_t fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::LookAheadCheck(unsigned char *a1)
{
  if (!a1[8])
  {
    int v2 = (*(uint64_t (**)(void))(**(void **)a1 + 48))() & 0x30;
    a1[8] = v2 != 0;
    if (!v2)
    {
      if (FLAGS_fst_error_fatal) {
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      }
      else {
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      }
      unsigned int v3 = fst::LogMessage::LogMessage((fst *)&v8, (uint64_t)__p);
      unint64_t v4 = (void *)fst::cerr(v3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"LookAheadMatcher: No look-ahead matcher defined", 47);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v8);
      if (v7 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  return a1[8];
}

void sub_1B1B9A844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(uint64_t a1)
{
  int v2 = *(void **)a1;
  if (*(void *)a1)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    MEMORY[0x1B3EA8670](v2, 0x1020C405F07FB98);
  }
  unsigned int v3 = *(void **)(a1 + 8);
  if (v3)
  {
    if (*v3) {
      (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
    }
    MEMORY[0x1B3EA8670](v3, 0x1020C405F07FB98);
  }
  return a1;
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(void *a1)
{
  *a1 = &unk_1F0A3AA80;
  uint64_t v2 = a1[17];
  if (v2)
  {
    fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v2 + 48);
    uint64_t v3 = fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v2);
    MEMORY[0x1B3EA8670](v3, 0x1060C40FF020D0FLL);
  }
  uint64_t v4 = a1[22];
  if (v4)
  {
    char v5 = *(void **)(v4 + 80);
    if (v5)
    {
      *(void *)(v4 + 88) = v5;
      operator delete(v5);
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v4 + 24);
    MEMORY[0x1B3EA8670](v4, 0x10E0C406D28CB5CLL);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~CacheBaseImpl(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl(uint64_t a1, uint64_t a2)
{
}

void sub_1B1B9AB00(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>::LookAheadComposeFilter()
{
}

void sub_1B1B9AC4C(_Unwind_Exception *a1)
{
  fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v1);
  _Unwind_Resume(a1);
}

void fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::AltSequenceComposeFilter()
{
}

BOOL fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a1 + 184);
  if (!v3) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v7 = (*(uint64_t (**)(void))(***(void ***)(a1 + 144) + 104))(**(void **)(a1 + 144));
  uint64_t v8 = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 152) + 104))(**(void **)(a1 + 152), a3);
  if (v7 == -1 && v8 == -1)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    float32x2_t v11 = fst::LogMessage::LogMessage((fst *)&v15, (uint64_t)__p);
    float32x2_t v12 = (void *)fst::cerr(v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ComposeFst: both sides can't require match", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v15);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    *(void *)(a1 + 8) |= 4uLL;
    return 1;
  }
  if (v7 == -1) {
    return 0;
  }
  return v8 == -1 || v7 <= v8;
}

void sub_1B1B9AE54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, int a8)
{
  (*(void (**)(void, uint64_t))(*(void *)*a7 + 56))(*a7, a4);
  v18[0] = a8 - 1;
  v18[1] = a8 << 31 >> 31;
  v18[2] = 0;
  v18[3] = 0;
  v18[4] = a6;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(a1, a2, a7, v18, a8);
  unint64_t v17 = 0;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a5 + 136))(a5, a6, v15);
  while (1)
  {
    if (!v15[0])
    {
      if (v17 >= v15[2]) {
        goto LABEL_13;
      }
LABEL_7:
      char v14 = (unsigned int *)(v15[1] + 20 * v17);
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(void))(*(void *)v15[0] + 24))(v15[0])) {
      break;
    }
    if (!v15[0]) {
      goto LABEL_7;
    }
    char v14 = (unsigned int *)(*(uint64_t (**)(void))(*(void *)v15[0] + 32))();
LABEL_8:
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(a1, a2, a7, v14, a8);
    if (v15[0]) {
      (*(void (**)(void))(*(void *)v15[0] + 40))(v15[0]);
    }
    else {
      ++v17;
    }
  }
  if (v15[0])
  {
    (*(void (**)(void))(*(void *)v15[0] + 8))();
    goto LABEL_15;
  }
LABEL_13:
  if (v16) {
    --*v16;
  }
LABEL_15:
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::SetArcs(a1, a2);
}

void sub_1B1B9B08C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9) {
    fst::StateSort<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>();
  }
  else {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((uint64_t)&a9);
  }
  _Unwind_Resume(a1);
}

void *fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::SetState(void *result, int a2, uint64_t a3, unsigned char *a4)
{
  char v5 = result;
  if (*((_DWORD *)result + 6) != a2 || *((_DWORD *)result + 7) != a3 || *a4 != *((unsigned char *)result + 32))
  {
    *((_DWORD *)result + 6) = a2;
    *((_DWORD *)result + 7) = a3;
    *((unsigned char *)result + 32) = *a4;
    uint64_t v6 = (*(uint64_t (**)(void, uint64_t))(*(void *)result[2] + 40))(result[2], a3);
    uint64_t v7 = (*(uint64_t (**)(void, uint64_t))(*(void *)v5[2] + 48))(v5[2], a3);
    uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(*(void *)v5[2] + 32))(&v9);
    BOOL v8 = 0;
    float v12 = *((float *)&v9 + 1);
    int v13 = v9;
    int v11 = 2139095040;
    float v10 = INFINITY;
    if (*(float *)&v9 == INFINITY) {
      BOOL v8 = v12 == v10;
    }
    if (v6 != v7) {
      BOOL v8 = 0;
    }
    *((unsigned char *)v5 + 33) = v8;
    *((unsigned char *)v5 + 34) = v7 == 0;
  }
  return result;
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(uint64_t a1, int a2, void *a3, unsigned int *a4, int a5)
{
  float v10 = a4 + 1;
  if (!a5) {
    float v10 = a4;
  }
  uint64_t result = (*(uint64_t (**)(void, void))(*(void *)*a3 + 64))(*a3, *v10);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)*a3 + 72))();
    if ((result & 1) == 0)
    {
      do
      {
        uint64_t v12 = (*(uint64_t (**)(void))(*(void *)*a3 + 80))();
        v18[0] = *(void *)v12;
        v18[1] = *(void *)(v12 + 8);
        int v19 = *(_DWORD *)(v12 + 16);
        v16[0] = *(void *)a4;
        v16[1] = *((void *)a4 + 1);
        unsigned int v17 = a4[4];
        if (a5)
        {
          char v15 = fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(*(void *)(a1 + 136), (uint64_t)v16, v18);
          if (v15 != -1)
          {
            int v13 = (float32x2_t *)v16;
            char v14 = (float32x2_t *)v18;
LABEL_10:
            fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::AddArc(a1, a2, v13, v14, &v15);
          }
        }
        else
        {
          char v15 = fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(*(void *)(a1 + 136), (uint64_t)v18, v16);
          if (v15 != -1)
          {
            int v13 = (float32x2_t *)v18;
            char v14 = (float32x2_t *)v16;
            goto LABEL_10;
          }
        }
        (*(void (**)(void))(*(void *)*a3 + 88))();
        uint64_t result = (*(uint64_t (**)(void))(*(void *)*a3 + 72))();
      }
      while (!result);
    }
  }
  return result;
}

uint64_t fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v3 = (_DWORD *)a2;
  *(unsigned char *)(a1 + 76) = 0;
  if (*a3 == -1)
  {
    if (!*(unsigned char *)(a1 + 33))
    {
      unsigned __int8 v5 = *(unsigned char *)(a1 + 34) ^ 1;
      goto LABEL_7;
    }
    return 255;
  }
  int v4 = *(_DWORD *)(a2 + 4);
  if (v4 == -1)
  {
    int v6 = *(unsigned __int8 *)(a1 + 32);
    BOOL v7 = v6 == 1;
    if (v6 == 1) {
      unsigned __int8 v8 = -1;
    }
    else {
      unsigned __int8 v8 = 0;
    }
    unsigned __int8 v10 = v8;
    if (!v7) {
      goto LABEL_14;
    }
    return 255;
  }
  if (!v4) {
    return 255;
  }
  unsigned __int8 v5 = 0;
LABEL_7:
  unsigned __int8 v10 = v5;
LABEL_14:
  if (*(_DWORD *)(a1 + 40) != 1)
  {
    a2 = (uint64_t)a3;
    a3 = v3;
  }
  return fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>::LookAheadFilterArc(a1, a2, (uint64_t)a3, &v10);
}

uint64_t fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>::LookAheadFilterArc(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  int v7 = *(_DWORD *)(a1 + 72);
  if (*(_DWORD *)(a2 + 4 * (*(_DWORD *)(a1 + 40) == 1)))
  {
    if ((v7 & 0x100) == 0) {
      return *a4;
    }
  }
  else if ((v7 & 0x200) == 0)
  {
    return *a4;
  }
  *(unsigned char *)(a1 + 76) = 1;
  if (*(_DWORD *)(a1 + 64) == 1) {
    uint64_t v8 = 48;
  }
  else {
    uint64_t v8 = 56;
  }
  (*(void (**)(void, void))(***(void ***)(a1 + v8) + 56))(**(void **)(a1 + v8), *(unsigned int *)(a2 + 16));
  int v9 = *(_DWORD *)(a1 + 64);
  BOOL v10 = v9 == 1;
  if (v9 == 1) {
    uint64_t v11 = 48;
  }
  else {
    uint64_t v11 = 56;
  }
  uint64_t v12 = *(unsigned char **)(a1 + v11);
  if (v10) {
    uint64_t v13 = 56;
  }
  else {
    uint64_t v13 = 48;
  }
  uint64_t v14 = (*(uint64_t (**)(void))(***(void ***)(a1 + v13) + 32))(**(void **)(a1 + v13));
  uint64_t v15 = *(unsigned int *)(a3 + 16);
  if (!fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::LookAheadCheck(v12)
    || (*(unsigned int (**)(void, uint64_t, uint64_t))(**(void **)v12 + 128))(*(void *)v12, v14, v15))
  {
    return *a4;
  }
  return 255;
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(void *)a1 = &unk_1F0A3C960;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 24) = -1;
  *(_DWORD *)(a1 + 28) = a4;
  fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Copy();
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(void *a1)
{
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy()
{
}

void sub_1B1B9B6E4(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C40A1003FB7);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Type(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32));
  if (result != 3)
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2);
    if (result != 3)
    {
      if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) != 4|| (uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2), result != 4))
      {
        if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) == 4&& (*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2) == *(_DWORD *)(a1 + 28))
        {
          return 4;
        }
        else if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28)|| (uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2), result != 4))
        {
          if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28))return 3; {
          uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2);
          }
          if (result != *(_DWORD *)(a1 + 28)) {
            return 3;
          }
        }
      }
    }
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::GetFst(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 92)) {
    return a2 | 4;
  }
  else {
    return a2;
  }
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetState_(uint64_t result, int a2)
{
  if (*(_DWORD *)(result + 24) != a2)
  {
    uint64_t v2 = result;
    *(_DWORD *)(result + 24) = a2;
    int v3 = (unsigned int *)(*(void *)(*(void *)(*(void *)(result + 16) + 176) + 80) + 12 * a2);
    uint64_t v4 = v3[1];
    (*(void (**)(void, void))(***(void ***)(result + 32) + 56))(**(void **)(result + 32), *v3);
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(v2 + 40) + 56))(**(void **)(v2 + 40), v4);
    *(_DWORD *)(v2 + 68) = *(_DWORD *)(v2 + 24);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Find_(float32x2_t *a1, uint64_t a2)
{
  a1[6].i8[0] = a2 == 0;
  if (a1[3].i32[1])
  {
    if (a2)
    {
      uint64_t v2 = (uint64_t *)&a1[5];
      int v3 = a1 + 4;
      return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(a1, a2, *v2, *v3);
    }
  }
  else if (a2)
  {
    uint64_t v2 = (uint64_t *)&a1[4];
    int v3 = a1 + 5;
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(a1, a2, *v2, (void *)*v3);
  }
  return 1;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Done_(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48)
    || !(*(unsigned int (**)(void))(***(void ***)(a1 + 32) + 72))(**(void **)(a1 + 32)))
  {
    return 0;
  }
  uint64_t v2 = *(uint64_t (**)(void))(***(void ***)(a1 + 40) + 72);
  return v2();
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Value_(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48)) {
    return a1 + 52;
  }
  else {
    return a1 + 72;
  }
}

float32x2_t *fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Next_(float32x2_t *result)
{
  if (result[6].i8[0])
  {
    result[6].i8[0] = 0;
  }
  else
  {
    if (result[3].i32[1])
    {
      uint64_t v2 = (void *)result[4];
      uint64_t v1 = (uint64_t)result[5];
    }
    else
    {
      uint64_t v1 = (uint64_t)result[4];
      uint64_t v2 = (void *)result[5];
    }
    return (float32x2_t *)fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(result, v1, v2);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Priority_(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))();
}

void *fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(void *a1)
{
  *a1 = &unk_1F0A3C960;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    MEMORY[0x1B3EA8670](v2, 0x1020C405F07FB98);
  }
  int v3 = (void *)a1[5];
  if (v3)
  {
    if (*v3) {
      (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
    }
    MEMORY[0x1B3EA8670](v3, 0x1020C405F07FB98);
  }
  return a1;
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A3C960;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = -1;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Copy();
}

void sub_1B1B9BDB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(float32x2_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a3 + 64))();
  if (result)
  {
    __int32 v8 = a1[3].i32[1];
    uint64_t v9 = (*(uint64_t (**)(void))(**(void **)a3 + 80))();
    BOOL v10 = (unsigned int *)(v9 + 4);
    if (v8) {
      BOOL v10 = (unsigned int *)v9;
    }
    (*(void (**)(void, void))(*(void *)*a4 + 64))(*a4, *v10);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(a1, a3, a4);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(float32x2_t *a1, uint64_t a2, void *a3)
{
  while (!(*(unsigned int (**)(void))(**(void **)a2 + 72))()
       || ((*(uint64_t (**)(void))(*(void *)*a3 + 72))() & 1) == 0)
  {
    if ((*(unsigned int (**)(void))(*(void *)*a3 + 72))())
    {
      (*(void (**)(void))(**(void **)a2 + 88))();
      if (((*(uint64_t (**)(void))(**(void **)a2 + 72))() & 1) == 0)
      {
        do
        {
          __int32 v6 = a1[3].i32[1];
          uint64_t v7 = (*(uint64_t (**)(void))(**(void **)a2 + 80))();
          __int32 v8 = (unsigned int *)(v7 + 4);
          if (v6) {
            __int32 v8 = (unsigned int *)v7;
          }
          if ((*(uint64_t (**)(void, void))(*(void *)*a3 + 64))(*a3, *v8)) {
            break;
          }
          (*(void (**)(void))(**(void **)a2 + 88))();
        }
        while (!(*(unsigned int (**)(void))(**(void **)a2 + 72))());
      }
    }
    while (((*(uint64_t (**)(void))(*(void *)*a3 + 72))() & 1) == 0)
    {
      uint64_t v9 = (*(uint64_t (**)(void))(**(void **)a2 + 80))();
      uint64_t v10 = (*(uint64_t (**)(void))(*(void *)*a3 + 80))();
      (*(void (**)(void))(*(void *)*a3 + 88))();
      uint64_t v11 = a1[3].u32[0];
      __int32 v12 = a1[3].i32[1];
      BOOL v13 = v12 == 0;
      if (v12) {
        uint64_t v14 = (float32x2_t *)v10;
      }
      else {
        uint64_t v14 = (float32x2_t *)v9;
      }
      v19[0] = *v14;
      v19[1] = v14[1];
      __int32 v20 = v14[2].i32[0];
      if (v13) {
        uint64_t v15 = (float32x2_t *)v10;
      }
      else {
        uint64_t v15 = (float32x2_t *)v9;
      }
      v17[0] = *v15;
      v17[1] = v15[1];
      __int32 v18 = v15[2].i32[0];
      if (fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc(a1, v11, v19, v17))
      {
        return 1;
      }
    }
  }
  return 0;
}

BOOL fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc(float32x2_t *a1, uint64_t a2, float32x2_t *a3, float32x2_t *a4)
{
  char v7 = fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(*(void *)(*(void *)&a1[2] + 136), (uint64_t)a3, a4);
  char v8 = v7;
  if (v7 != -1)
  {
    __int32 v9 = a4[2].i32[0];
    LODWORD(v12) = a3[2].i32[0];
    HIDWORD(v12) = v9;
    char v13 = v7;
    __int32 v10 = a4->i32[1];
    a1[9].i32[0] = a3->i32[0];
    a1[9].i32[1] = v10;
    a1[10] = vadd_f32(a3[1], a4[1]);
    a1[11].i32[0] = fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(*(void **)(*(void *)&a1[2] + 176), &v12, 1);
  }
  return ~v8 != 0;
}

void fst::ComposeFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::CreateBase2<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>()
{
}

void sub_1B1B9C2D0(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)fst::ComposeFstImplBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::ComposeFstImplBase(a1, a2, a3, a4) = &unk_1F0A3AA20;
  char v8 = *(long long **)(a4 + 40);
  if (!v8) {
    operator new();
  }
  *(void *)(a1 + 136) = v8;
  long long v9 = *v8;
  *(_OWORD *)(a1 + 144) = *v8;
  *(void *)(a1 + 160) = (*(uint64_t (**)(void))(**(void **)v9 + 32))();
  *(void *)(a1 + 168) = (*(uint64_t (**)(void))(***(void ***)(a1 + 152) + 32))(**(void **)(a1 + 152));
  uint64_t v10 = *(void *)(a4 + 48);
  if (!v10) {
    operator new();
  }
  *(void *)(a1 + 176) = v10;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetMatchType(a1);
  if (*(_DWORD *)(a1 + 184) == 3) {
    *(void *)(a1 + 8) |= 4uLL;
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a3 + 64))(a3, 0x3FFFFFFF0007, 0);
  unint64_t v13 = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 144) + 40))(**(void **)(a1 + 144), v11);
  uint64_t v14 = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 152) + 40))(**(void **)(a1 + 152), v12);
  unint64_t v15 = fst::ComposeProperties(v13, v14);
  if (*(_DWORD *)(*(void *)(a1 + 136) + 40) == 3) {
    uint64_t v16 = v15 | 4;
  }
  else {
    uint64_t v16 = v15;
  }
  *(void *)(a1 + 8) = v16 & 0x3FFFFFFF0004 | *(void *)(a1 + 8) & 0xFFFFC0000000FFFFLL;
  return a1;
}

void sub_1B1B9C568(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(void *a1)
{
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0)
  {
    if ((*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 160) + 64))(*(void *)(a1 + 160), 4, 0)|| (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 168) + 64))(*(void *)(a1 + 168), 4, 0)|| ((*(uint64_t (**)(void, void))(***(void ***)(a1 + 144) + 40))(**(void **)(a1 + 144), 0) & 4) != 0|| ((uint64_t v4 = (*(uint64_t (**)(void, void))(***(void ***)(a1 + 152) + 40))(**(void **)(a1 + 152), 0) & 4, *(_DWORD *)(*(void *)(a1 + 136) + 40) != 3)? (v5 = v4 == 0): (v5 = 0), !v5))
    {
      *(void *)(a1 + 8) |= 4uLL;
    }
  }
  return *(void *)(a1 + 8) & a2;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy()
{
}

void sub_1B1B9C79C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Expand(void *a1, int a2)
{
  uint64_t v4 = (unsigned int *)(*(void *)(a1[22] + 80) + 12 * a2);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  char v7 = (void *)a1[17];
  char v16 = *((unsigned char *)v4 + 8);
  fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::SetState(v7, v5, v6, &v16);
  if (fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput((uint64_t)a1, v5, v6))
  {
    uint64_t v9 = a1[20];
    uint64_t v8 = a1[21];
    uint64_t v10 = (void *)a1[19];
    uint64_t v11 = (uint64_t)a1;
    int v12 = a2;
    uint64_t v13 = v6;
    uint64_t v14 = v5;
    int v15 = 1;
  }
  else
  {
    uint64_t v8 = a1[20];
    uint64_t v9 = a1[21];
    uint64_t v10 = (void *)a1[18];
    uint64_t v11 = (uint64_t)a1;
    int v12 = a2;
    uint64_t v13 = v5;
    uint64_t v14 = v6;
    int v15 = 0;
  }
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(v11, v12, v8, v13, v9, v14, v10, v15);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::InitMatcher(uint64_t a1, uint64_t a2, int a3)
{
  if ((*(unsigned int (**)(void, void))(***(void ***)(a1 + 144) + 24))(**(void **)(a1 + 144), 0) == a3
    && (*(unsigned int (**)(void, void))(***(void ***)(a1 + 152) + 24))(**(void **)(a1 + 152), 0) == a3
    && *(_DWORD *)(*(void *)(a1 + 136) + 40) != 3)
  {
    operator new();
  }
  return 0;
}

void sub_1B1B9C960(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C40A1003FB7);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeStart(void **a1)
{
  uint64_t result = (*(uint64_t (**)(void *))(*a1[20] + 24))(a1[20]);
  if (result != -1)
  {
    unsigned int v3 = result;
    uint64_t result = (*(uint64_t (**)(void *))(*a1[21] + 24))(a1[21]);
    if (result != -1)
    {
      unint64_t v4 = __PAIR64__(result, v3);
      char v5 = 0;
      return fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(a1[22], (uint64_t *)&v4, 1);
    }
  }
  return result;
}

void *fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeFinal@<X0>(uint64_t a1@<X0>, int a2@<W1>, float32x2_t *a3@<X8>)
{
  uint64_t v6 = *(void *)(*(void *)(a1 + 176) + 80);
  char v7 = (unsigned int *)(v6 + 12 * a2);
  uint64_t v8 = *v7;
  uint64_t result = (*(void *(**)(float32x2_t *__return_ptr))(***(void ***)(a1 + 144) + 96))(&v15);
  float v19 = v15.f32[1];
  v14.i32[0] = v15.i32[0];
  float v18 = INFINITY;
  float v17 = INFINITY;
  if (v15.f32[0] == INFINITY && v19 == v17)
  {
    *a3 = v15;
  }
  else
  {
    int v10 = v7[1];
    uint64_t result = (*(void *(**)(float32x2_t *__return_ptr))(***(void ***)(a1 + 152) + 96))(&v14);
    float32x2_t v12 = v14;
    LODWORD(v18) = HIDWORD(*(void *)&v12);
    v11.i32[0] = (__int32)v12;
    float v19 = v14.f32[0];
    float v17 = INFINITY;
    float v16 = INFINITY;
    if (v14.f32[0] == INFINITY && v18 == v16)
    {
      v11.i32[1] = v14.i32[1];
    }
    else
    {
      uint64_t v13 = *(void **)(a1 + 136);
      LOBYTE(v19) = *(unsigned char *)(v6 + 12 * a2 + 8);
      uint64_t result = fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::SetState(v13, v8, v10, &v19);
      float32x2_t v11 = vadd_f32(v15, v14);
    }
    *a3 = v11;
  }
  return result;
}

void fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>::LookAheadComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = (void **)fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::SequenceComposeFilter(a1, a2, a3, a4, a5);
  *(_DWORD *)(a1 + 40) = fst::LookAheadMatchType<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(*v6, *(void **)(a1 + 8));
  fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Copy();
}

void sub_1B1B9CD98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0) {
    operator delete(__p);
  }
  fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v18 + 48);
  fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v18);
  _Unwind_Resume(a1);
}

uint64_t fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::SequenceComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a4) {
    operator new();
  }
  *(void *)a1 = a4;
  if (!a5) {
    operator new();
  }
  *(void *)(a1 + 8) = a5;
  *(void *)(a1 + 16) = (*(uint64_t (**)(void))(**(void **)a4 + 32))();
  *(void *)(a1 + 24) = -1;
  *(unsigned char *)(a1 + 32) = -1;
  return a1;
}

void sub_1B1B9CED4(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1020C405F07FB98);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(void *a1)
{
  *a1 = &unk_1F0A3AA20;
  uint64_t v2 = a1[17];
  if (v2)
  {
    fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v2 + 48);
    uint64_t v3 = fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v2);
    MEMORY[0x1B3EA8670](v3, 0x1060C40FF020D0FLL);
  }
  uint64_t v4 = a1[22];
  if (v4)
  {
    char v5 = *(void **)(v4 + 80);
    if (v5)
    {
      *(void *)(v4 + 88) = v5;
      operator delete(v5);
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v4 + 24);
    MEMORY[0x1B3EA8670](v4, 0x10E0C406D28CB5CLL);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~CacheBaseImpl(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl(uint64_t a1, uint64_t a2)
{
}

void sub_1B1B9D0CC(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>::LookAheadComposeFilter()
{
}

void sub_1B1B9D218(_Unwind_Exception *a1)
{
  fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v1);
  _Unwind_Resume(a1);
}

void fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::SequenceComposeFilter()
{
}

BOOL fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a1 + 184);
  if (!v3) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v7 = (*(uint64_t (**)(void))(***(void ***)(a1 + 144) + 104))(**(void **)(a1 + 144));
  uint64_t v8 = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 152) + 104))(**(void **)(a1 + 152), a3);
  if (v7 == -1 && v8 == -1)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    float32x2_t v11 = fst::LogMessage::LogMessage((fst *)&v15, (uint64_t)__p);
    float32x2_t v12 = (void *)fst::cerr(v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ComposeFst: both sides can't require match", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v15);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    *(void *)(a1 + 8) |= 4uLL;
    return 1;
  }
  if (v7 == -1) {
    return 0;
  }
  return v8 == -1 || v7 <= v8;
}

void sub_1B1B9D424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, int a8)
{
  (*(void (**)(void, uint64_t))(*(void *)*a7 + 56))(*a7, a4);
  v18[0] = a8 - 1;
  v18[1] = a8 << 31 >> 31;
  void v18[2] = 0;
  v18[3] = 0;
  v18[4] = a6;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(a1, a2, a7, v18, a8);
  unint64_t v17 = 0;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a5 + 136))(a5, a6, v15);
  while (1)
  {
    if (!v15[0])
    {
      if (v17 >= v15[2]) {
        goto LABEL_13;
      }
LABEL_7:
      char v14 = (unsigned int *)(v15[1] + 20 * v17);
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(void))(*(void *)v15[0] + 24))(v15[0])) {
      break;
    }
    if (!v15[0]) {
      goto LABEL_7;
    }
    char v14 = (unsigned int *)(*(uint64_t (**)(void))(*(void *)v15[0] + 32))();
LABEL_8:
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(a1, a2, a7, v14, a8);
    if (v15[0]) {
      (*(void (**)(void))(*(void *)v15[0] + 40))(v15[0]);
    }
    else {
      ++v17;
    }
  }
  if (v15[0])
  {
    (*(void (**)(void))(*(void *)v15[0] + 8))();
    goto LABEL_15;
  }
LABEL_13:
  if (v16) {
    --*v16;
  }
LABEL_15:
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::SetArcs(a1, a2);
}

void sub_1B1B9D65C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9) {
    fst::StateSort<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>();
  }
  else {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((uint64_t)&a9);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(uint64_t a1, int a2, void *a3, unsigned int *a4, int a5)
{
  int v10 = a4 + 1;
  if (!a5) {
    int v10 = a4;
  }
  uint64_t result = (*(uint64_t (**)(void, void))(*(void *)*a3 + 64))(*a3, *v10);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)*a3 + 72))();
    if ((result & 1) == 0)
    {
      do
      {
        uint64_t v12 = (*(uint64_t (**)(void))(*(void *)*a3 + 80))();
        v18[0] = *(void *)v12;
        v18[1] = *(void *)(v12 + 8);
        int v19 = *(_DWORD *)(v12 + 16);
        v16[0] = *(void *)a4;
        v16[1] = *((void *)a4 + 1);
        unsigned int v17 = a4[4];
        if (a5)
        {
          char v15 = fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(*(void *)(a1 + 136), (uint64_t)v16, v18);
          if (v15 != -1)
          {
            uint64_t v13 = (float32x2_t *)v16;
            char v14 = (float32x2_t *)v18;
LABEL_10:
            fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::AddArc(a1, a2, v13, v14, &v15);
          }
        }
        else
        {
          char v15 = fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(*(void *)(a1 + 136), (uint64_t)v18, v16);
          if (v15 != -1)
          {
            uint64_t v13 = (float32x2_t *)v18;
            char v14 = (float32x2_t *)v16;
            goto LABEL_10;
          }
        }
        (*(void (**)(void))(*(void *)*a3 + 88))();
        uint64_t result = (*(uint64_t (**)(void))(*(void *)*a3 + 72))();
      }
      while (!result);
    }
  }
  return result;
}

uint64_t fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v3 = (_DWORD *)a2;
  *(unsigned char *)(a1 + 76) = 0;
  int v4 = *(_DWORD *)(a2 + 4);
  if (v4 == -1)
  {
    if (*(unsigned char *)(a1 + 33)) {
      return 255;
    }
    unsigned __int8 v9 = *(unsigned char *)(a1 + 34) ^ 1;
  }
  else if (*a3 == -1)
  {
    int v6 = *(unsigned __int8 *)(a1 + 32);
    if (*(unsigned char *)(a1 + 32)) {
      unsigned __int8 v7 = -1;
    }
    else {
      unsigned __int8 v7 = 0;
    }
    unsigned __int8 v9 = v7;
    if (v6) {
      return 255;
    }
  }
  else
  {
    if (v4) {
      unsigned __int8 v5 = 0;
    }
    else {
      unsigned __int8 v5 = -1;
    }
    unsigned __int8 v9 = v5;
    if (!v4) {
      return 255;
    }
  }
  if (*(_DWORD *)(a1 + 40) != 1)
  {
    a2 = (uint64_t)a3;
    a3 = v3;
  }
  return fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>::LookAheadFilterArc(a1, a2, (uint64_t)a3, &v9);
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(void *)a1 = &unk_1F0A3C8E0;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 24) = -1;
  *(_DWORD *)(a1 + 28) = a4;
  fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Copy();
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(void *a1)
{
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy()
{
}

void sub_1B1B9DA20(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C40A1003FB7);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Type(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32));
  if (result != 3)
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2);
    if (result != 3)
    {
      if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) != 4|| (uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2), result != 4))
      {
        if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) == 4&& (*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2) == *(_DWORD *)(a1 + 28))
        {
          return 4;
        }
        else if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28)|| (uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2), result != 4))
        {
          if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28))return 3; {
          uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2);
          }
          if (result != *(_DWORD *)(a1 + 28)) {
            return 3;
          }
        }
      }
    }
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::GetFst(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 92)) {
    return a2 | 4;
  }
  else {
    return a2;
  }
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetState_(uint64_t result, int a2)
{
  if (*(_DWORD *)(result + 24) != a2)
  {
    uint64_t v2 = result;
    *(_DWORD *)(result + 24) = a2;
    int v3 = (unsigned int *)(*(void *)(*(void *)(*(void *)(result + 16) + 176) + 80) + 12 * a2);
    uint64_t v4 = v3[1];
    (*(void (**)(void, void))(***(void ***)(result + 32) + 56))(**(void **)(result + 32), *v3);
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(v2 + 40) + 56))(**(void **)(v2 + 40), v4);
    *(_DWORD *)(v2 + 68) = *(_DWORD *)(v2 + 24);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Find_(float32x2_t *a1, uint64_t a2)
{
  a1[6].i8[0] = a2 == 0;
  if (a1[3].i32[1])
  {
    if (a2)
    {
      uint64_t v2 = (uint64_t *)&a1[5];
      int v3 = a1 + 4;
      return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(a1, a2, *v2, *v3);
    }
  }
  else if (a2)
  {
    uint64_t v2 = (uint64_t *)&a1[4];
    int v3 = a1 + 5;
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(a1, a2, *v2, (void *)*v3);
  }
  return 1;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Done_(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48)
    || !(*(unsigned int (**)(void))(***(void ***)(a1 + 32) + 72))(**(void **)(a1 + 32)))
  {
    return 0;
  }
  uint64_t v2 = *(uint64_t (**)(void))(***(void ***)(a1 + 40) + 72);
  return v2();
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Value_(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48)) {
    return a1 + 52;
  }
  else {
    return a1 + 72;
  }
}

float32x2_t *fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Next_(float32x2_t *result)
{
  if (result[6].i8[0])
  {
    result[6].i8[0] = 0;
  }
  else
  {
    if (result[3].i32[1])
    {
      uint64_t v2 = (void *)result[4];
      uint64_t v1 = (uint64_t)result[5];
    }
    else
    {
      uint64_t v1 = (uint64_t)result[4];
      uint64_t v2 = (void *)result[5];
    }
    return (float32x2_t *)fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(result, v1, v2);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Priority_(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))();
}

void *fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(void *a1)
{
  *a1 = &unk_1F0A3C8E0;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    MEMORY[0x1B3EA8670](v2, 0x1020C405F07FB98);
  }
  int v3 = (void *)a1[5];
  if (v3)
  {
    if (*v3) {
      (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
    }
    MEMORY[0x1B3EA8670](v3, 0x1020C405F07FB98);
  }
  return a1;
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A3C8E0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = -1;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Copy();
}

void sub_1B1B9E0F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(float32x2_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a3 + 64))();
  if (result)
  {
    __int32 v8 = a1[3].i32[1];
    uint64_t v9 = (*(uint64_t (**)(void))(**(void **)a3 + 80))();
    int v10 = (unsigned int *)(v9 + 4);
    if (v8) {
      int v10 = (unsigned int *)v9;
    }
    (*(void (**)(void, void))(*(void *)*a4 + 64))(*a4, *v10);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(a1, a3, a4);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(float32x2_t *a1, uint64_t a2, void *a3)
{
  while (!(*(unsigned int (**)(void))(**(void **)a2 + 72))()
       || ((*(uint64_t (**)(void))(*(void *)*a3 + 72))() & 1) == 0)
  {
    if ((*(unsigned int (**)(void))(*(void *)*a3 + 72))())
    {
      (*(void (**)(void))(**(void **)a2 + 88))();
      if (((*(uint64_t (**)(void))(**(void **)a2 + 72))() & 1) == 0)
      {
        do
        {
          __int32 v6 = a1[3].i32[1];
          uint64_t v7 = (*(uint64_t (**)(void))(**(void **)a2 + 80))();
          __int32 v8 = (unsigned int *)(v7 + 4);
          if (v6) {
            __int32 v8 = (unsigned int *)v7;
          }
          if ((*(uint64_t (**)(void, void))(*(void *)*a3 + 64))(*a3, *v8)) {
            break;
          }
          (*(void (**)(void))(**(void **)a2 + 88))();
        }
        while (!(*(unsigned int (**)(void))(**(void **)a2 + 72))());
      }
    }
    while (((*(uint64_t (**)(void))(*(void *)*a3 + 72))() & 1) == 0)
    {
      uint64_t v9 = (*(uint64_t (**)(void))(**(void **)a2 + 80))();
      uint64_t v10 = (*(uint64_t (**)(void))(*(void *)*a3 + 80))();
      (*(void (**)(void))(*(void *)*a3 + 88))();
      uint64_t v11 = a1[3].u32[0];
      __int32 v12 = a1[3].i32[1];
      BOOL v13 = v12 == 0;
      if (v12) {
        char v14 = (float32x2_t *)v10;
      }
      else {
        char v14 = (float32x2_t *)v9;
      }
      v19[0] = *v14;
      v19[1] = v14[1];
      __int32 v20 = v14[2].i32[0];
      if (v13) {
        char v15 = (float32x2_t *)v10;
      }
      else {
        char v15 = (float32x2_t *)v9;
      }
      v17[0] = *v15;
      v17[1] = v15[1];
      __int32 v18 = v15[2].i32[0];
      if (fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc(a1, v11, v19, v17))
      {
        return 1;
      }
    }
  }
  return 0;
}

BOOL fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc(float32x2_t *a1, uint64_t a2, float32x2_t *a3, float32x2_t *a4)
{
  char v7 = fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(*(void *)(*(void *)&a1[2] + 136), (uint64_t)a3, a4);
  char v8 = v7;
  if (v7 != -1)
  {
    __int32 v9 = a4[2].i32[0];
    LODWORD(v12) = a3[2].i32[0];
    HIDWORD(v12) = v9;
    char v13 = v7;
    __int32 v10 = a4->i32[1];
    a1[9].i32[0] = a3->i32[0];
    a1[9].i32[1] = v10;
    a1[10] = vadd_f32(a3[1], a4[1]);
    a1[11].i32[0] = fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(*(void **)(*(void *)&a1[2] + 176), &v12, 1);
  }
  return ~v8 != 0;
}

void *fst::ComposeFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::ComposeFst(void *a1, uint64_t a2, int a3)
{
  *a1 = &unk_1F0A36720;
  a1[1] = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  if (a3)
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
    __int32 v6 = (_DWORD *)a1[1];
    if (v6)
    {
      int v7 = v6[14] - 1;
      v6[14] = v7;
      if (!v7) {
        (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
      }
    }
    a1[1] = v5;
  }
  else
  {
    fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::SetImpl((uint64_t)a1, v4, 0);
  }
  return a1;
}

void sub_1B1B9E66C(_Unwind_Exception *a1)
{
  fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~ImplToFst(v1);
  _Unwind_Resume(a1);
}

_DWORD *fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::SetImpl(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0) {
    ++*(_DWORD *)(a2 + 56);
  }
  uint64_t result = *(_DWORD **)(a1 + 8);
  if (result)
  {
    int v6 = result[14] - 1;
    result[14] = v6;
    if (!v6) {
      uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)result + 8))(result);
    }
  }
  *(void *)(a1 + 8) = a2;
  return result;
}

void fst::StateIterator<fst::ComposeFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::~StateIterator()
{
}

uint64_t fst::CacheStateIterator<fst::ComposeFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t fst::CacheStateIterator<fst::ComposeFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::Next_(uint64_t result)
{
  return result;
}

uint64_t fst::CacheStateIterator<fst::ComposeFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::Reset_(uint64_t result)
{
  *(_DWORD *)(result + ++*(_DWORD *)(result + 24) = 0;
  return result;
}

void fst::CacheStateIterator<fst::ComposeFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::~CacheStateIterator()
{
}

uint64_t fst::CacheStateIterator<fst::ComposeFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::Done(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v2 < *(_DWORD *)(v3 + 68)) {
    return 0;
  }
  uint64_t v5 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v3);
  if ((int)v5 >= *(_DWORD *)(*(void *)(a1 + 16) + 68)) {
    return 1;
  }
  uint64_t v6 = v5;
  do
  {
    fst::ArcIterator<fst::ComposeFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::ArcIterator(&v19, *(void *)(a1 + 8), v6);
    unint64_t v7 = v20;
    uint64_t v8 = *((void *)v19 + 3);
    unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * ((*((void *)v19 + 4) - v8) >> 2);
    uint64_t v10 = *(void *)(a1 + 16);
    if (v20 < v9)
    {
      int v11 = *(_DWORD *)(v10 + 68);
      uint64_t v12 = (int *)(v8 + 20 * v20 + 16);
      do
      {
        int v14 = *v12;
        v12 += 5;
        int v13 = v14;
        if (v11 <= v14)
        {
          int v11 = v13 + 1;
          *(_DWORD *)(v10 + 68) = v13 + 1;
        }
        ++v7;
      }
      while (v9 != v7);
      unint64_t v20 = v9;
    }
    fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetExpandedState(v10, v6);
    int v15 = *(_DWORD *)(a1 + 24);
    uint64_t v16 = *(void *)(a1 + 16);
    int v17 = *(_DWORD *)(v16 + 68);
    --*((_DWORD *)v19 + 13);
    BOOL v4 = v15 >= v17;
    if (v15 < v17) {
      break;
    }
    uint64_t v6 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v16);
  }
  while ((int)v6 < *(_DWORD *)(*(void *)(a1 + 16) + 68));
  return v4;
}

void sub_1B1B9E874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char **fst::ArcIterator<fst::ComposeFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::ArcIterator(char **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  a1[1] = 0;
  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>::GetMutableState(*(void *)(v6 + 120), a3);
  *a1 = MutableState;
  ++*((_DWORD *)MutableState + 13);
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(*(void *)(a2 + 8), a3) & 1) == 0)(*(void (**)(void, uint64_t))(**(void **)(a2 + 8) + 48))(*(void *)(a2 + 8), a3); {
  return a1;
  }
}

void sub_1B1B9E91C(_Unwind_Exception *a1)
{
  --*(_DWORD *)(*(void *)v1 + 52);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImplBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::InitArcIterator(uint64_t a1, uint64_t a2, void *a3)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)(*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2); {
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::InitArcIterator(a1, a2, a3);
  }
}

void fst::ShortestPath<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 24);
  if (v7 == 1 && *(unsigned char *)(a4 + 35) == 0)
  {
    uint64_t v10 = 0;
    int v11 = 0;
    uint64_t v12 = 0;
    LODWORD(__p) = 0;
    if (fst::SingleShortestPath<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(a1, (int32x2_t **)a3, (uint64_t *)a4, &__p, (__n128 **)&v10))fst::SingleShortestPathBacktrace<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1, a2, &v10, __p); {
    else
    }
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 192))(a2, 4, 4);
    if (v10)
    {
      int v11 = v10;
      operator delete(v10);
    }
  }
  else if (v7)
  {
    if (*(unsigned char *)(a4 + 33)
      || (fst::ShortestDistance<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(a1, (void *)a3, a4), *(void *)(a3 + 8) - *(void *)a3 != 8)|| fst::LatticeWeightTpl<float>::Member(*(float **)a3))
    {
      fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::VectorFst();
    }
    unint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 192);
    v9(a2, 4, 4);
  }
}

void sub_1B1B9ECFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::~ImplToFst((void *)(v19 - 64));
  _Unwind_Resume(a1);
}

void fst::AutoQueue<int>::AutoQueue<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = 7;
  *(unsigned char *)(a1 + 12) = 0;
  *(void *)a1 = &unk_1F0A40F38;
  *(_OWORD *)(a1 + ++*(_DWORD *)(result + 24) = 0u;
  uint64_t v3 = a1 + 48;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x4E00000000, 0);
  if ((v4 & 0x4000000000) == 0 && (*(unsigned int (**)(uint64_t))(*(void *)a2 + 24))(a2) != -1)
  {
    if ((v4 & 0x800000000) == 0)
    {
      if ((v4 & 0x200000000) == 0)
      {
        uint64_t v6 = 0;
        v5[0] = v3;
        v5[1] = 0;
        void v5[2] = 0;
        v5[3] = &v6;
        fst::DfsVisit<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(a2, (uint64_t)v5);
      }
      operator new();
    }
    operator new();
  }
  operator new();
}

void sub_1B1B9F5D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, char a16, char a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a18) {
    operator delete(a18);
  }
  unint64_t v30 = *v28;
  if (*v28)
  {
    *(void *)(v26 + 56) = v30;
    operator delete(v30);
  }
  int v31 = *v27;
  if (*v27)
  {
    *(void *)(v26 + 32) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::AutoQueue<int>::SccQueueType<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NaturalLess<fst::LatticeWeightTpl<float>>>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unsigned char *a5, unsigned char *a6)
{
  *a5 = 1;
  *a6 = 1;
  uint64_t v12 = *(void *)(a3 + 8) - *(void *)a3;
  if (v12)
  {
    unint64_t v13 = v12 >> 2;
    if (v13 <= 1) {
      unint64_t v13 = 1;
    }
    bzero(*(void **)a3, 4 * v13);
  }
  unsigned int v30 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v28);
  while (1)
  {
    uint64_t result = v28;
    if (!v28)
    {
      if ((int)v30 >= v29) {
        return result;
      }
LABEL_11:
      uint64_t v16 = v30;
      goto LABEL_12;
    }
    int v15 = (*(uint64_t (**)(uint64_t))(*(void *)v28 + 16))(v28);
    uint64_t result = v28;
    if (v15) {
      break;
    }
    if (!v28) {
      goto LABEL_11;
    }
    uint64_t v16 = (*(uint64_t (**)(void))(*(void *)v28 + 24))();
LABEL_12:
    unint64_t v27 = 0;
    (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 136))(a1, v16, v25);
    while (1)
    {
      if (!v25[0])
      {
        if (v27 >= v25[2]) {
          goto LABEL_44;
        }
        goto LABEL_18;
      }
      if ((*(unsigned int (**)(void))(*(void *)v25[0] + 24))(v25[0])) {
        break;
      }
      if (v25[0])
      {
        uint64_t v18 = (*(uint64_t (**)(void))(*(void *)v25[0] + 32))();
        goto LABEL_19;
      }
LABEL_18:
      uint64_t v18 = v25[1] + 20 * v27;
LABEL_19:
      uint64_t v19 = *(int *)(*a2 + 4 * (int)v16);
      if (v19 == *(_DWORD *)(*a2 + 4 * *(int *)(v18 + 16)))
      {
        unint64_t v20 = *(_DWORD **)a3;
        if (!a4
          || (v22 = *(float *)(v18 + 8), float v21 = *(float *)(v18 + 12), (float)(v22 + v21) < 0.0)
          || v22 < 0.0 && (float)(v22 + v21) <= 0.0)
        {
          int v23 = 1;
          goto LABEL_25;
        }
        if ((v20[v19] | 2) == 2)
        {
          float v34 = *(float *)(v18 + 8);
          float v33 = v21;
          int v32 = 2139095040;
          float v31 = INFINITY;
          if (v22 == INFINITY && v33 == v31 || (v34 = v22, v33 = v21, v32 = 0, float v31 = 0.0, v22 == 0.0) && v33 == v31) {
            int v23 = 2;
          }
          else {
            int v23 = 3;
          }
LABEL_25:
          v20[v19] = v23;
        }
        *a5 = 0;
      }
      float v34 = 0.0;
      v17.n128_u32[0] = *(_DWORD *)(v18 + 8);
      float v24 = *(float *)(v18 + 12);
      float v34 = v17.n128_f32[0];
      float v33 = v24;
      int v32 = 2139095040;
      float v31 = INFINITY;
      if (v17.n128_f32[0] != INFINITY || v33 != v31)
      {
        float v34 = v17.n128_f32[0];
        float v33 = v24;
        int v32 = 0;
        float v31 = 0.0;
        if (v17.n128_f32[0] != 0.0 || (v17.n128_f32[0] = v33, v33 != v31)) {
          *a6 = 0;
        }
      }
      if (v25[0]) {
        (*(void (**)(void, __n128))(*(void *)v25[0] + 40))(v25[0], v17);
      }
      else {
        ++v27;
      }
    }
    if (v25[0])
    {
      (*(void (**)(void))(*(void *)v25[0] + 8))();
      goto LABEL_46;
    }
LABEL_44:
    if (v26) {
      --*v26;
    }
LABEL_46:
    if (v28) {
      (*(void (**)(uint64_t))(*(void *)v28 + 32))(v28);
    }
    else {
      ++v30;
    }
  }
  if (v28) {
    return (*(uint64_t (**)(void))(*(void *)v28 + 8))();
  }
  return result;
}

void sub_1B1B9FB6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 8))(a14);
  }
  _Unwind_Resume(exception_object);
}

void fst::TopOrderQueue<int>::TopOrderQueue<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 4;
  *(unsigned char *)(a1 + 12) = 0;
  *(void *)a1 = &unk_1F0A3A1C8;
  *(void *)(a1 + 16) = 0xFFFFFFFF00000000;
  *(_OWORD *)(a1 + ++*(_DWORD *)(result + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  char v3 = 0;
  uint64_t v1 = a1 + 24;
  int v2 = &v3;
  fst::DfsVisit<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::TopOrderVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>();
}

void sub_1B1B9FD40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0) {
    operator delete(__p);
  }
  float v22 = *v19;
  if (*v19)
  {
    *(void *)(v18 + 56) = v22;
    operator delete(v22);
  }
  int v23 = *v20;
  if (*v20)
  {
    *(void *)(v18 + 32) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(a1);
}

void *fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::LatticeWeightTpl<float>>>,false>::~ShortestFirstQueue(void *a1)
{
  *a1 = &unk_1F0A3EC20;
  int v2 = (void *)a1[14];
  if (v2)
  {
    a1[15] = v2;
    operator delete(v2);
  }
  fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>,false>::~Heap(a1 + 2);
  return a1;
}

void fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::LatticeWeightTpl<float>>>,false>::~ShortestFirstQueue(void *a1)
{
  *a1 = &unk_1F0A3EC20;
  int v2 = (void *)a1[14];
  if (v2)
  {
    a1[15] = v2;
    operator delete(v2);
  }
  fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>,false>::~Heap(a1 + 2);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::LatticeWeightTpl<float>>>,false>::Head_(uint64_t a1)
{
  return **(unsigned int **)(a1 + 80);
}

uint64_t fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::LatticeWeightTpl<float>>>,false>::Enqueue_(uint64_t a1, int a2)
{
  int v3 = a2;
  return fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::LatticeWeightTpl<float>>>,false>::Insert(a1 + 16, &v3);
}

uint64_t fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::LatticeWeightTpl<float>>>,false>::Dequeue_(uint64_t a1)
{
  return fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::LatticeWeightTpl<float>>>,false>::Pop(a1 + 16);
}

BOOL fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::LatticeWeightTpl<float>>>,false>::Empty_(uint64_t a1)
{
  return *(_DWORD *)(a1 + 104) == 0;
}

uint64_t fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::LatticeWeightTpl<float>>>,false>::Clear_(uint64_t result)
{
  *(_DWORD *)(result + 104) = 0;
  return result;
}

uint64_t fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::LatticeWeightTpl<float>>>,false>::Insert(uint64_t a1, int *a2)
{
  uint64_t v5 = a1 + 64;
  uint64_t v4 = *(int **)(a1 + 64);
  unint64_t v6 = *(int *)(v5 + 24);
  uint64_t v7 = *(int **)(v5 + 8);
  unint64_t v8 = v7 - v4;
  if (v8 > v6)
  {
    v4[v6] = *a2;
    *(_DWORD *)(*(void *)(a1 + 16) + 4 * *(int *)(*(void *)(a1 + 40) + 4 * *(int *)(a1 + 88))) = *(_DWORD *)(a1 + 88);
    goto LABEL_52;
  }
  unint64_t v9 = *(void *)(a1 + 80);
  if ((unint64_t)v7 >= v9)
  {
    if ((v8 + 1) >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = v9 - (void)v4;
    unint64_t v12 = (uint64_t)(v9 - (void)v4) >> 1;
    if (v12 <= v8 + 1) {
      unint64_t v12 = v8 + 1;
    }
    if (v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13)
    {
      int v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 80, v13);
      uint64_t v4 = *(int **)(a1 + 64);
      uint64_t v7 = *(int **)(a1 + 72);
    }
    else
    {
      int v14 = 0;
    }
    int v15 = (int *)&v14[4 * v8];
    uint64_t v16 = &v14[4 * v13];
    int *v15 = *a2;
    uint64_t v10 = v15 + 1;
    while (v7 != v4)
    {
      int v17 = *--v7;
      *--int v15 = v17;
    }
    *(void *)(a1 + 64) = v15;
    *(void *)(a1 + 72) = v10;
    *(void *)(a1 + 80) = v16;
    if (v4) {
      operator delete(v4);
    }
  }
  else
  {
    int *v7 = *a2;
    uint64_t v10 = v7 + 1;
  }
  unint64_t v18 = *(void *)(a1 + 32);
  *(void *)(a1 + 72) = v10;
  uint64_t v19 = *(char **)(a1 + 24);
  if ((unint64_t)v19 >= v18)
  {
    float v21 = *(char **)(a1 + 16);
    uint64_t v22 = (v19 - v21) >> 2;
    if ((unint64_t)(v22 + 1) >> 62) {
      goto LABEL_55;
    }
    unint64_t v23 = v18 - (void)v21;
    unint64_t v24 = (uint64_t)(v18 - (void)v21) >> 1;
    if (v24 <= v22 + 1) {
      unint64_t v24 = v22 + 1;
    }
    if (v23 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v25 = v24;
    }
    if (v25)
    {
      uint64_t v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 32, v25);
      float v21 = *(char **)(a1 + 16);
      uint64_t v19 = *(char **)(a1 + 24);
    }
    else
    {
      uint64_t v26 = 0;
    }
    unint64_t v27 = &v26[4 * v22];
    uint64_t v28 = &v26[4 * v25];
    *(_DWORD *)unint64_t v27 = *(_DWORD *)(a1 + 88);
    unint64_t v20 = v27 + 4;
    while (v19 != v21)
    {
      int v29 = *((_DWORD *)v19 - 1);
      v19 -= 4;
      *((_DWORD *)v27 - 1) = v29;
      v27 -= 4;
    }
    *(void *)(a1 + 16) = v27;
    *(void *)(a1 + ++*(_DWORD *)(result + 24) = v20;
    *(void *)(a1 + 32) = v28;
    if (v21) {
      operator delete(v21);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v19 = *(_DWORD *)(a1 + 88);
    unint64_t v20 = v19 + 4;
  }
  unint64_t v30 = *(void *)(a1 + 56);
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = v20;
  float v31 = *(char **)(a1 + 48);
  if ((unint64_t)v31 >= v30)
  {
    float v33 = *(char **)(a1 + 40);
    uint64_t v34 = (v31 - v33) >> 2;
    if (!((unint64_t)(v34 + 1) >> 62))
    {
      unint64_t v35 = v30 - (void)v33;
      unint64_t v36 = (uint64_t)(v30 - (void)v33) >> 1;
      if (v36 <= v34 + 1) {
        unint64_t v36 = v34 + 1;
      }
      if (v35 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v37 = v36;
      }
      if (v37)
      {
        v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 56, v37);
        float v33 = *(char **)(a1 + 40);
        float v31 = *(char **)(a1 + 48);
      }
      else
      {
        v38 = 0;
      }
      v39 = &v38[4 * v34];
      v40 = &v38[4 * v37];
      *(_DWORD *)v39 = *(_DWORD *)(a1 + 88);
      int v32 = v39 + 4;
      while (v31 != v33)
      {
        int v41 = *((_DWORD *)v31 - 1);
        v31 -= 4;
        *((_DWORD *)v39 - 1) = v41;
        v39 -= 4;
      }
      *(void *)(a1 + 40) = v39;
      *(void *)(a1 + 48) = v32;
      *(void *)(a1 + 56) = v40;
      if (v33) {
        operator delete(v33);
      }
      goto LABEL_51;
    }
LABEL_55:
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  *(_DWORD *)float v31 = *(_DWORD *)(a1 + 88);
  int v32 = v31 + 4;
LABEL_51:
  *(void *)(a1 + 48) = v32;
LABEL_52:
  int v42 = *(_DWORD *)(a1 + 88);
  *(_DWORD *)(a1 + 88) = v42 + 1;
  return fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::LatticeWeightTpl<float>>>,false>::Insert(a1, a2, v42);
}

uint64_t fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::LatticeWeightTpl<float>>>,false>::Insert(uint64_t a1, int *a2, int a3)
{
  unsigned int v3 = a3;
  if (a3 >= 1)
  {
    uint64_t v6 = *(void *)(a1 + 64);
    while (1)
    {
      unsigned int v7 = v3 - 1;
      uint64_t v8 = (v3 - 1) >> 1;
      if (fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::LatticeWeightTpl<float>>>,false>::Better((uint64_t **)a1, (int *)(v6 + 4 * v8), a2))
      {
        break;
      }
      uint64_t v9 = *(void *)(a1 + 40);
      uint64_t v10 = *(int *)(v9 + 4 * v3);
      uint64_t v11 = *(int *)(v9 + 4 * v8);
      *(_DWORD *)(v9 + 4 * v3) = v11;
      uint64_t v12 = *(void *)(a1 + 16);
      *(_DWORD *)(v12 + 4 * v11) = v3;
      *(_DWORD *)(v9 + 4 * v8) = v10;
      *(_DWORD *)(v12 + 4 * v10) = v8;
      uint64_t v6 = *(void *)(a1 + 64);
      LODWORD(v10) = *(_DWORD *)(v6 + 4 * v3);
      *(_DWORD *)(v6 + 4 * v3) = *(_DWORD *)(v6 + 4 * v8);
      *(_DWORD *)(v6 + 4 * v8) = v10;
      unsigned int v3 = v7 >> 1;
      if (v7 <= 1) {
        return *(unsigned int *)(*(void *)(a1 + 40) + 4 * (int)v8);
      }
    }
  }
  LODWORD(v8) = v3;
  return *(unsigned int *)(*(void *)(a1 + 40) + 4 * (int)v8);
}

BOOL fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::LatticeWeightTpl<float>>>,false>::Better(uint64_t **a1, int *a2, int *a3)
{
  uint64_t v3 = **a1;
  uint64_t v4 = (float *)(v3 + 8 * *a2);
  uint64_t v5 = (float *)(v3 + 8 * *a3);
  float v6 = *v4 + v4[1];
  float v7 = *v5 + v5[1];
  return v6 < v7 || v6 <= v7 && *v4 < *v5;
}

uint64_t fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::LatticeWeightTpl<float>>>,false>::Pop(uint64_t a1)
{
  uint64_t v1 = *(_DWORD **)(a1 + 64);
  uint64_t v2 = *v1;
  uint64_t v3 = *(int *)(a1 + 88) - 1;
  uint64_t v4 = *(int **)(a1 + 40);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[v3];
  int *v4 = v6;
  uint64_t v7 = *(void *)(a1 + 16);
  *(_DWORD *)(v7 + 4 * v6) = 0;
  v4[v3] = v5;
  *(_DWORD *)(v7 + 4 * v5) = v3;
  LODWORD(v4) = *v1;
  _DWORD *v1 = v1[v3];
  v1[v3] = v4;
  --*(_DWORD *)(a1 + 88);
  fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::LatticeWeightTpl<float>>>,false>::Heapify(a1, 0);
  return v2;
}

BOOL fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::LatticeWeightTpl<float>>>,false>::Heapify(BOOL result, uint64_t a2)
{
  uint64_t v3 = result;
  while (1)
  {
    uint64_t v4 = (2 * a2) | 1u;
    if ((int)v4 >= *(_DWORD *)(v3 + 88)
      || !(uint64_t result = fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::LatticeWeightTpl<float>>>,false>::Better((uint64_t **)v3, (int *)(*(void *)(v3 + 64) + 4 * (int)v4), (int *)(*(void *)(v3 + 64) + 4 * (int)a2))))
    {
      uint64_t v4 = a2;
    }
    unsigned int v5 = 2 * a2 + 2;
    if ((signed int)v5 < *(_DWORD *)(v3 + 88))
    {
      uint64_t result = fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::LatticeWeightTpl<float>>>,false>::Better((uint64_t **)v3, (int *)(*(void *)(v3 + 64) + 4 * (int)v5), (int *)(*(void *)(v3 + 64) + 4 * (int)v4));
      if (result) {
        uint64_t v4 = v5;
      }
      else {
        uint64_t v4 = v4;
      }
    }
    if (v4 == a2) {
      break;
    }
    uint64_t v6 = *(void *)(v3 + 40);
    uint64_t v7 = *(int *)(v6 + 4 * (int)a2);
    uint64_t v8 = *(int *)(v6 + 4 * (int)v4);
    *(_DWORD *)(v6 + 4 * (int)a2) = v8;
    uint64_t v9 = *(void *)(v3 + 16);
    *(_DWORD *)(v9 + 4 * v8) = a2;
    *(_DWORD *)(v6 + 4 * (int)v4) = v7;
    *(_DWORD *)(v9 + 4 * v7) = v4;
    uint64_t v10 = *(void *)(v3 + 64);
    LODWORD(v7) = *(_DWORD *)(v10 + 4 * (int)a2);
    *(_DWORD *)(v10 + 4 * (int)a2) = *(_DWORD *)(v10 + 4 * (int)v4);
    *(_DWORD *)(v10 + 4 * (int)v4) = v7;
    a2 = v4;
  }
  return result;
}

uint64_t fst::SingleShortestPath<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(uint64_t a1, int32x2_t **a2, uint64_t *a3, _DWORD *a4, __n128 **a5)
{
  a5[1] = *a5;
  *a4 = -1;
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 24))(a1) == -1) {
    return 1;
  }
  memset(v140, 0, sizeof(v140));
  uint64_t v9 = *a3;
  uint64_t v10 = *((unsigned int *)a3 + 3);
  if (v10 == -1) {
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  a2[1] = *a2;
  (*(void (**)(void))(**(void **)(v9 + 16) + 56))(*(void *)(v9 + 16));
  if (a3[3] != 1)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    int v15 = fst::LogMessage::LogMessage((fst *)v144, (uint64_t)__p);
    uint64_t v16 = (void *)fst::cerr(v15);
    v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"SingleShortestPath: for nshortest > 1, use ShortestPath", 55);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)" instead", 8);
    goto LABEL_51;
  }
  LODWORD(__p[0]) = 0;
  LODWORD(__p[0]) = *((_DWORD *)a3 + 9);
  v144[0] = 0.0;
  v144[0] = *((float *)a3 + 10);
  float v143 = INFINITY;
  float v142 = INFINITY;
  if (*(float *)__p != INFINITY || (v11.n128_f32[0] = v144[0], v144[0] != v142) || *((_DWORD *)a3 + 11) != -1)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    uint64_t v12 = fst::LogMessage::LogMessage((fst *)v144, (uint64_t)__p);
    unint64_t v13 = (void *)fst::cerr(v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"SingleShortestPath: weight and state thresholds not applicable", 62);
LABEL_51:
    fst::LogMessage::~LogMessage((fst::LogMessage *)v144);
    if (SHIBYTE(v137) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v14 = 0;
    goto LABEL_54;
  }
  uint64_t v134 = v9;
  v131 = a4;
  v132 = a3;
  int v17 = *a2;
  unint64_t v18 = a2[1];
  unint64_t v19 = v18 - *a2;
  if (v19 < (int)v10)
  {
    unint64_t v20 = a2 + 2;
    int32x2_t v21 = vdup_n_s32(0x7F800000u);
    do
    {
      if ((unint64_t)v18 >= *v20)
      {
        if ((v19 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v23 = *v20 - (void)v17;
        uint64_t v24 = v23 >> 2;
        if (v23 >> 2 <= v19 + 1) {
          uint64_t v24 = v19 + 1;
        }
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v25 = v24;
        }
        uint64_t v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a2 + 2), v25);
        uint64_t v28 = (int32x2_t *)&v26[8 * v19];
        *uint64_t v28 = v21;
        uint64_t v22 = v28 + 1;
        int v29 = *a2;
        for (unint64_t i = a2[1]; i != v29; --i)
        {
          int32x2_t v31 = i[-1];
          v28[-1] = v31;
          --v28;
        }
        *a2 = v28;
        a2[1] = v22;
        a2[2] = (int32x2_t *)&v26[8 * v27];
        if (v29) {
          operator delete(v29);
        }
      }
      else
      {
        int32x2_t *v18 = v21;
        uint64_t v22 = v18 + 1;
      }
      a2[1] = v22;
      LOBYTE(__p[0]) = 0;
      std::vector<BOOL>::push_back((uint64_t)v140, __p);
      float v33 = a5[1];
      unint64_t v32 = (unint64_t)a5[2];
      if ((unint64_t)v33 >= v32)
      {
        unint64_t v35 = *a5;
        uint64_t v36 = v33 - *a5;
        unint64_t v37 = v36 + 1;
        if ((unint64_t)(v36 + 1) >> 60) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v38 = v32 - (void)v35;
        if (v38 >> 3 > v37) {
          unint64_t v37 = v38 >> 3;
        }
        if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v39 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v39 = v37;
        }
        if (v39)
        {
          v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a5 + 2), v39);
          unint64_t v35 = *a5;
          float v33 = a5[1];
        }
        else
        {
          v40 = 0;
        }
        int v41 = &v40[16 * v36];
        *(_DWORD *)int v41 = -1;
        *((void *)v41 + 1) = -1;
        int v42 = (__n128 *)v41;
        if (v33 != v35)
        {
          do
          {
            __n128 v11 = v33[-1];
            v42[-1] = v11;
            --v42;
            --v33;
          }
          while (v33 != v35);
          unint64_t v35 = *a5;
        }
        uint64_t v34 = v41 + 16;
        *a5 = v42;
        a5[1] = (__n128 *)(v41 + 16);
        a5[2] = (__n128 *)&v40[16 * v39];
        if (v35) {
          operator delete(v35);
        }
      }
      else
      {
        v33->n128_u32[0] = -1;
        v33->n128_u64[1] = -1;
        uint64_t v34 = (char *)&v33[1];
      }
      a5[1] = (__n128 *)v34;
      int v17 = *a2;
      unint64_t v18 = a2[1];
      unint64_t v19 = v18 - *a2;
    }
    while (v19 < (int)v10);
  }
  v44 = a2 + 2;
  unint64_t v43 = (unint64_t)a2[2];
  if ((unint64_t)v18 >= v43)
  {
    if ((v19 + 1) >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v49 = v43 - (void)v17;
    uint64_t v50 = v49 >> 2;
    if (v49 >> 2 <= v19 + 1) {
      uint64_t v50 = v19 + 1;
    }
    if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v51 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v51 = v50;
    }
    v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a2 + 2), v51);
    uint64_t v46 = v9;
    v53 = &v52[8 * v19];
    v55 = &v52[8 * v54];
    *(void *)v53 = 0;
    v45 = (int32x2_t *)(v53 + 8);
    v56 = *a2;
    v57 = a2[1];
    while (v57 != v56)
    {
      unint64_t v58 = (unint64_t)v57[-1];
      --v57;
      v11.n128_u64[0] = v58;
      *((void *)v53 - 1) = v58;
      v53 -= 8;
    }
    *a2 = (int32x2_t *)v53;
    a2[1] = v45;
    a2[2] = (int32x2_t *)v55;
    if (v56) {
      operator delete(v56);
    }
  }
  else
  {
    int32x2_t *v18 = 0;
    v45 = v18 + 1;
    uint64_t v46 = v9;
  }
  a2[1] = v45;
  unint64_t v59 = (unint64_t)a5[2];
  v60 = a5[1];
  if ((unint64_t)v60 >= v59)
  {
    v62 = *a5;
    uint64_t v63 = v60 - *a5;
    unint64_t v64 = v63 + 1;
    if ((unint64_t)(v63 + 1) >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v65 = v59 - (void)v62;
    if (v65 >> 3 > v64) {
      unint64_t v64 = v65 >> 3;
    }
    if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v66 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v66 = v64;
    }
    if (v66)
    {
      v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a5 + 2), v66);
      v62 = *a5;
      v60 = a5[1];
    }
    else
    {
      v67 = 0;
    }
    v68 = (__n128 *)&v67[16 * v63];
    v69 = &v67[16 * v66];
    v68->n128_u32[0] = -1;
    v68->n128_u64[1] = -1;
    v61 = (char *)&v68[1];
    if (v60 != v62)
    {
      do
      {
        __n128 v11 = v60[-1];
        v68[-1] = v11;
        --v68;
        --v60;
      }
      while (v60 != v62);
      v62 = *a5;
    }
    *a5 = v68;
    a5[1] = (__n128 *)v61;
    a5[2] = (__n128 *)v69;
    if (v62) {
      operator delete(v62);
    }
  }
  else
  {
    v60->n128_u32[0] = -1;
    v60->n128_u64[1] = -1;
    v61 = (char *)&v60[1];
  }
  a5[1] = (__n128 *)v61;
  (*(void (**)(void, uint64_t, __n128))(**(void **)(v46 + 16) + 24))(*(void *)(v46 + 16), v10, v11);
  LOBYTE(__p[0]) = 1;
  std::vector<BOOL>::push_back((uint64_t)v140, __p);
  float v70 = INFINITY;
  int32x2_t v71 = vdup_n_s32(0x7F800000u);
  float v72 = INFINITY;
  do
  {
    if ((*(uint64_t (**)(void))(**(void **)(v134 + 16) + 48))(*(void *)(v134 + 16))) {
      goto LABEL_189;
    }
    uint64_t v135 = (*(uint64_t (**)(void))(**(void **)(v134 + 16) + 16))(*(void *)(v134 + 16));
    (*(void (**)(void))(**(void **)(v134 + 16) + 32))(*(void *)(v134 + 16));
    *(void *)((char *)v140[0] + (((unint64_t)(int)v135 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v135);
    v73 = (float *)&(*a2)[(int)v135];
    float v74 = *v73;
    float v75 = v73[1];
    (*(void (**)(void **__return_ptr))(*(void *)a1 + 32))(__p);
    float v143 = *((float *)__p + 1);
    v144[0] = *(float *)__p;
    float v142 = INFINITY;
    float v141 = INFINITY;
    v76.n128_u32[0] = (unsigned __int32)__p[0];
    if (*(float *)__p != INFINITY || (v76.n128_f32[0] = v143, v143 != v141))
    {
      (*(void (**)(void **__return_ptr, __n128))(*(void *)a1 + 32))(__p, v76);
      float v77 = v74 + *(float *)__p;
      float v78 = v70 + v72;
      float v79 = (float)(v74 + *(float *)__p) + (float)(v75 + *((float *)__p + 1));
      float v80 = v72;
      float v81 = v70;
      if ((float)(v70 + v72) >= v79)
      {
        if ((float)(v70 + v72) > v79 || (v70 >= v77 ? (v82 = v70 <= v77) : (v82 = 1), float v80 = v72, v81 = v70, !v82))
        {
          float v80 = v75 + *((float *)__p + 1);
          float v81 = v74 + *(float *)__p;
        }
      }
      *(float *)__p = v70;
      v144[0] = v72;
      float v143 = v81;
      float v142 = v80;
      if (v70 != v81 || v144[0] != v142)
      {
        if (v78 >= v79)
        {
          if (v78 > v79 || (v70 >= v77 ? (BOOL v83 = v70 <= v77) : (BOOL v83 = 1), !v83))
          {
            float v72 = v75 + *((float *)__p + 1);
            float v70 = v77;
          }
        }
        _DWORD *v131 = v135;
      }
      uint64_t v14 = 0;
      if (v72 == -INFINITY || v70 == -INFINITY) {
        break;
      }
      if (v70 == INFINITY || v72 == INFINITY)
      {
        uint64_t v14 = 0;
        if (v70 != INFINITY || v72 != INFINITY) {
          break;
        }
      }
      if (*((unsigned char *)v132 + 34))
      {
LABEL_189:
        uint64_t v14 = 1;
        break;
      }
    }
    unint64_t v139 = 0;
    (*(void (**)(uint64_t, uint64_t, void **))(*(void *)a1 + 136))(a1, v135, __p);
    while (1)
    {
      if (__p[0])
      {
        char v84 = (*(uint64_t (**)(void *))(*(void *)__p[0] + 24))(__p[0]);
        v85 = __p[0];
        if (v84)
        {
          int v130 = 0;
          if (!__p[0]) {
            goto LABEL_185;
          }
LABEL_183:
          (*(void (**)(void *))(*(void *)v85 + 8))(v85);
          goto LABEL_187;
        }
        if (__p[0])
        {
          v86 = (float *)(*(uint64_t (**)(void))(*(void *)__p[0] + 32))();
          goto LABEL_151;
        }
      }
      else if (v139 >= v137)
      {
        int v130 = 0;
        goto LABEL_185;
      }
      v86 = (float *)((char *)__p[1] + 20 * v139);
LABEL_151:
      while (1)
      {
        v108 = *a2;
        v109 = a2[1];
        unint64_t v110 = v109 - *a2;
        unint64_t v111 = *((int *)v86 + 4);
        if (v110 > v111) {
          break;
        }
        if ((unint64_t)v109 >= *v44)
        {
          if ((v110 + 1) >> 61) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v88 = *v44 - (void)v108;
          uint64_t v89 = v88 >> 2;
          if (v88 >> 2 <= v110 + 1) {
            uint64_t v89 = v110 + 1;
          }
          if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v90 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v90 = v89;
          }
          v91 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a2 + 2), v90);
          v93 = (int32x2_t *)&v91[8 * v110];
          int32x2_t *v93 = v71;
          v87 = v93 + 1;
          v94 = *a2;
          for (j = a2[1]; j != v94; --j)
          {
            int32x2_t v96 = j[-1];
            v93[-1] = v96;
            --v93;
          }
          *a2 = v93;
          a2[1] = v87;
          a2[2] = (int32x2_t *)&v91[8 * v92];
          if (v94) {
            operator delete(v94);
          }
        }
        else
        {
          int32x2_t *v109 = v71;
          v87 = v109 + 1;
        }
        a2[1] = v87;
        LOBYTE(v144[0]) = 0;
        std::vector<BOOL>::push_back((uint64_t)v140, v144);
        v98 = a5[1];
        unint64_t v97 = (unint64_t)a5[2];
        if ((unint64_t)v98 >= v97)
        {
          v100 = *a5;
          uint64_t v101 = v98 - *a5;
          unint64_t v102 = v101 + 1;
          if ((unint64_t)(v101 + 1) >> 60) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v103 = v97 - (void)v100;
          if (v103 >> 3 > v102) {
            unint64_t v102 = v103 >> 3;
          }
          if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v104 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v104 = v102;
          }
          if (v104)
          {
            v105 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a5 + 2), v104);
            v100 = *a5;
            v98 = a5[1];
          }
          else
          {
            v105 = 0;
          }
          v106 = &v105[16 * v101];
          *(_DWORD *)v106 = -1;
          *((void *)v106 + 1) = -1;
          v107 = v106;
          if (v98 != v100)
          {
            do
            {
              *((__n128 *)v107 - 1) = v98[-1];
              v107 -= 16;
              --v98;
            }
            while (v98 != v100);
            v100 = *a5;
          }
          v99 = v106 + 16;
          *a5 = (__n128 *)v107;
          a5[1] = (__n128 *)(v106 + 16);
          a5[2] = (__n128 *)&v105[16 * v104];
          if (v100) {
            operator delete(v100);
          }
        }
        else
        {
          v98->n128_u32[0] = -1;
          v98->n128_u64[1] = -1;
          v99 = (char *)&v98[1];
        }
        a5[1] = (__n128 *)v99;
      }
      v112 = (float *)&v108[v111];
      float v113 = v74 + v86[2];
      float v114 = v75 + v86[3];
      float v115 = *v112;
      v116 = v112 + 1;
      float v117 = v112[1];
      float v118 = *v112 + v117;
      float v119 = v113 + v114;
      if (v118 >= (float)(v113 + v114))
      {
        if (v118 > (float)(v113 + v114) || (v115 >= v113 ? (BOOL v120 = v115 <= v113) : (BOOL v120 = 1), !v120))
        {
          float v117 = v75 + v86[3];
          float v115 = v74 + v86[2];
        }
      }
      v144[0] = 0.0;
      v144[0] = *v112;
      float v143 = 0.0;
      float v143 = *v116;
      float v142 = v115;
      float v141 = v117;
      if (v144[0] != v115 || v143 != v141) {
        break;
      }
LABEL_177:
      if (__p[0]) {
        (*(void (**)(void *))(*(void *)__p[0] + 40))(__p[0]);
      }
      else {
        ++v139;
      }
    }
    float v121 = *v112;
    float v122 = *v116;
    float v123 = *v112 + *v116;
    if (v123 >= v119)
    {
      if (v123 > v119 || (v121 >= v113 ? (BOOL v124 = v121 <= v113) : (BOOL v124 = 1), !v124))
      {
        float v122 = v114;
        float v121 = v113;
      }
    }
    float *v112 = v121;
    float *v116 = v122;
    BOOL v125 = fst::LatticeWeightTpl<float>::Member(v112);
    v85 = __p[0];
    if (v125)
    {
      if (__p[0]) {
        uint64_t v126 = (*(uint64_t (**)(void))(*(void *)__p[0] + 48))();
      }
      else {
        uint64_t v126 = v139;
      }
      unint64_t v127 = *((int *)v86 + 4);
      uint64_t v128 = (uint64_t)&(*a5)[v127];
      *(_DWORD *)uint64_t v128 = v135;
      *(void *)(v128 + 8) = v126;
      uint64_t v129 = **(void **)(v134 + 16);
      if ((*(void *)((char *)v140[0] + ((v127 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v127))
      {
        (*(void (**)(void))(v129 + 40))();
      }
      else
      {
        (*(void (**)(void))(v129 + 24))();
        *(void *)((char *)v140[0] + (((unint64_t)*((int *)v86 + 4) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *((_DWORD *)v86 + 4);
      }
      goto LABEL_177;
    }
    int v130 = 1;
    if (__p[0]) {
      goto LABEL_183;
    }
LABEL_185:
    if (v138) {
      --*v138;
    }
LABEL_187:
    uint64_t v14 = 0;
  }
  while (!v130);
LABEL_54:
  if (v140[0]) {
    operator delete(v140[0]);
  }
  return v14;
}

void sub_1B1BA112C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,int a26,char a27)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::SingleShortestPathBacktrace<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  (*(void (**)(uint64_t))(*(void *)a2 + 224))(a2);
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 280))(a2, v8);
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 288))(a2, v9);
  if (a4 != -1)
  {
    int v10 = -1;
    uint64_t v11 = a4;
    int v12 = -1;
    while (1)
    {
      uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2);
      if (v10 != -1) {
        break;
      }
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(&v24, a1, a4);
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a2 + 184))(a2, v13, &v24);
LABEL_15:
      int v10 = v11;
      uint64_t v11 = *(unsigned int *)(*a3 + 16 * (int)v11);
      int v12 = v13;
      if (v11 == -1) {
        goto LABEL_18;
      }
    }
    uint64_t v23 = 0;
    (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 136))(a1, v11, v21);
    uint64_t v14 = *(void *)(*a3 + 16 * v10 + 8);
    if (v21[0])
    {
      (*(void (**)(void, uint64_t))(*(void *)v21[0] + 64))(v21[0], v14);
      if (v21[0])
      {
        int v15 = (void *)(*(uint64_t (**)(void))(*(void *)v21[0] + 32))(v21[0]);
        goto LABEL_11;
      }
      uint64_t v14 = v23;
    }
    else
    {
      uint64_t v23 = *(void *)(*a3 + 16 * v10 + 8);
    }
    int v15 = (void *)(v21[1] + 20 * v14);
LABEL_11:
    v19[0] = *v15;
    v19[1] = v15[1];
    int v20 = v12;
    (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a2 + 208))(a2, v13, v19);
    if (v21[0])
    {
      (*(void (**)(void))(*(void *)v21[0] + 8))(v21[0]);
    }
    else if (v22)
    {
      --*v22;
    }
    goto LABEL_15;
  }
  uint64_t v13 = 0xFFFFFFFFLL;
LABEL_18:
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 176))(a2, v13);
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 4, 0)) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 192))(a2, 4, 4);
  }
  unint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  unint64_t v17 = fst::ShortestPathProperties(v16, 0);
  return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 192))(a2, v17, 0x3FFFFFFF0007);
}

void sub_1B1BA169C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _DWORD *a16)
{
  if (a13)
  {
    (*(void (**)(uint64_t))(*(void *)a13 + 8))(a13);
  }
  else if (a16)
  {
    --*a16;
  }
  _Unwind_Resume(exception_object);
}

void *fst::ShortestDistance<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(uint64_t a1, void *a2, uint64_t a3)
{
  v6[0] = a1;
  v6[1] = a2;
  void v6[2] = *(void *)a3;
  int v7 = *(_DWORD *)(a3 + 16);
  char v8 = *(unsigned char *)(a3 + 20);
  char v9 = 0;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  memset(v13, 0, 29);
  a2[1] = *a2;
  fst::ShortestDistanceState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::ShortestDistance(v6, *(_DWORD *)(a3 + 12));
  if (BYTE12(v13[1]))
  {
    a2[1] = *a2;
    int32x2_t v5 = vdup_n_s32(0x7FC00000u);
    std::vector<fst::LatticeWeightTpl<float>>::resize((uint64_t)a2, 1uLL, &v5);
  }
  return fst::ShortestDistanceState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ShortestDistanceState(v6);
}

void sub_1B1BA1790(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  fst::ShortestDistanceState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ShortestDistanceState((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t fst::Reverse<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(uint64_t a1, uint64_t *a2, char a3)
{
  (*(void (**)(uint64_t *))(*a2 + 224))(a2);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  (*(void (**)(uint64_t *, uint64_t))(*a2 + 280))(a2, v6);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  (*(void (**)(uint64_t *, uint64_t))(*a2 + 288))(a2, v7);
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 1, 0))
  {
    int v8 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1);
    (*(void (**)(uint64_t *, void))(*a2 + 248))(a2, (v8 + 1));
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  uint64_t v46 = 0;
  if (a3) {
    goto LABEL_38;
  }
  LODWORD(v40) = 0;
  (*(void (**)(uint64_t, float32x2_t **))(*(void *)a1 + 128))(a1, &v38);
  for (uint64_t i = 0xFFFFFFFFLL; ; uint64_t i = v12)
  {
    if (v38)
    {
      if ((*(uint64_t (**)(float32x2_t *))(*(void *)v38 + 16))(v38)) {
        goto LABEL_28;
      }
      if (v38)
      {
        uint64_t v12 = (*(uint64_t (**)(float32x2_t *))(*(void *)v38 + 24))(v38);
        goto LABEL_11;
      }
    }
    else if ((int)v40 >= (int)v39)
    {
LABEL_28:
      uint64_t v12 = i;
      goto LABEL_30;
    }
    uint64_t v12 = v40;
LABEL_11:
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(&v35, a1, v12);
    LODWORD(v33) = HIDWORD(v35);
    v43.i32[0] = v35;
    float v48 = INFINITY;
    float v47 = INFINITY;
    v10.n128_u32[0] = v35;
    if (*(float *)&v35 != INFINITY) {
      break;
    }
    v10.n128_u32[0] = v33;
    if (i == -1) {
      unsigned int v13 = v12;
    }
    else {
      unsigned int v13 = -1;
    }
    if (*(float *)&v33 == v47) {
      int v14 = 4;
    }
    else {
      int v14 = 2 * (i != -1);
    }
    if (*(float *)&v33 == v47) {
      uint64_t v12 = i;
    }
    else {
      uint64_t v12 = v13;
    }
    if ((v14 | 4) != 4) {
      goto LABEL_30;
    }
LABEL_24:
    if (v38) {
      (*(void (**)(float32x2_t *, __n128))(*(void *)v38 + 32))(v38, v10);
    }
    else {
      LODWORD(v40) = v40 + 1;
    }
  }
  if (i == -1) {
    goto LABEL_24;
  }
  uint64_t v12 = 0xFFFFFFFFLL;
LABEL_30:
  if (v38) {
    (*(void (**)(float32x2_t *, __n128))(*(void *)v38 + 8))(v38, v10);
  }
  if (v12 == -1)
  {
LABEL_38:
    uint64_t v12 = (*(uint64_t (**)(uint64_t *))(*a2 + 200))(a2);
    int v16 = 1;
    goto LABEL_39;
  }
  (*(void (**)(float32x2_t **__return_ptr, uint64_t, uint64_t, __n128))(*(void *)a1 + 32))(&v38, a1, v12, v10);
  v43.i32[0] = HIDWORD(v38);
  LODWORD(v35) = v38;
  LODWORD(v33) = 0;
  float v48 = 0.0;
  if (*(float *)&v38 != 0.0 || (v15.n128_u32[0] = v43.i32[0], v43.f32[0] != v48))
  {
    float32x2_t v43 = 0;
    float32x2_t v44 = 0;
    uint64_t v45 = 0;
    uint64_t v38 = &v43;
    uint64_t v39 = 0;
    unint64_t v40 = 0;
    int v41 = &v46;
    fst::DfsVisit<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(a1, (uint64_t)&v38);
  }
  int v16 = 0;
LABEL_39:
  LODWORD(v37) = 0;
  (*(void (**)(uint64_t, uint64_t *, __n128))(*(void *)a1 + 128))(a1, &v35, v15);
  while (2)
  {
    if (!v35)
    {
      if ((int)v37 >= (int)v36) {
        goto LABEL_83;
      }
      goto LABEL_45;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(void *)v35 + 16))(v35))
    {
      if (v35)
      {
        uint64_t v17 = (*(uint64_t (**)(void))(*(void *)v35 + 24))();
LABEL_46:
        int v18 = v17 + v16;
        while ((*(int (**)(uint64_t *))(*a2 + 160))(a2) <= v18)
          (*(void (**)(uint64_t *))(*a2 + 200))(a2);
        if (v17 == v9)
        {
          uint64_t v34 = 0;
          (*(void (**)(uint64_t *, void, uint64_t *))(*a2 + 184))(a2, (v17 + v16), &v34);
        }
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(&v33, a1, v17);
        v43.i32[0] = HIDWORD(v33);
        LODWORD(v38) = v33;
        float v48 = INFINITY;
        float v47 = INFINITY;
        BOOL v19 = *(float *)&v33 != INFINITY || v43.f32[0] != v47;
        if ((v16 & v19) == 1)
        {
          uint64_t v38 = 0;
          uint64_t v39 = v33;
          LODWORD(v40) = v17 + v16;
          (*(void (**)(uint64_t *, void, float32x2_t **))(*a2 + 208))(a2, 0, &v38);
        }
        unint64_t v42 = 0;
        (*(void (**)(uint64_t, uint64_t, float32x2_t **))(*(void *)a1 + 136))(a1, v17, &v38);
LABEL_57:
        if (v38)
        {
          if ((*(unsigned int (**)(float32x2_t *))(*(void *)v38 + 24))(v38))
          {
            if (v38)
            {
              (*(void (**)(void))(*(void *)v38 + 8))();
              goto LABEL_78;
            }
LABEL_76:
            if (v41) {
              --*(_DWORD *)v41;
            }
LABEL_78:
            if (v35) {
              (*(void (**)(uint64_t))(*(void *)v35 + 32))(v35);
            }
            else {
              LODWORD(v37) = v37 + 1;
            }
            continue;
          }
          if (v38)
          {
            int v20 = (float32x2_t *)(*(uint64_t (**)(void))(*(void *)v38 + 32))();
LABEL_63:
            uint64_t v21 = (v20[2].i32[0] + v16);
            float32x2_t v22 = v20[1];
            if (v21 == v12) {
              char v23 = v16;
            }
            else {
              char v23 = 1;
            }
            if ((v23 & 1) == 0)
            {
              (*(void (**)(float32x2_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(&v43, a1, v12);
              float32x2_t v22 = vadd_f32(v22, v43);
            }
            float32x2_t v43 = *v20;
            float32x2_t v44 = v22;
            LODWORD(v45) = v18;
            while (1)
            {
              int v24 = (*(uint64_t (**)(uint64_t *))(*a2 + 160))(a2);
              uint64_t v25 = *a2;
              if (v24 > (int)v21) {
                break;
              }
              (*(void (**)(uint64_t *))(v25 + 200))(a2);
            }
            (*(void (**)(uint64_t *, uint64_t, float32x2_t *))(v25 + 208))(a2, v21, &v43);
            if (v38) {
              (*(void (**)(float32x2_t *))(*(void *)v38 + 40))(v38);
            }
            else {
              ++v42;
            }
            goto LABEL_57;
          }
        }
        else if (v42 >= v40)
        {
          goto LABEL_76;
        }
        int v20 = (float32x2_t *)(v39 + 20 * v42);
        goto LABEL_63;
      }
LABEL_45:
      uint64_t v17 = v37;
      goto LABEL_46;
    }
    break;
  }
  if (v35) {
    (*(void (**)(void))(*(void *)v35 + 8))();
  }
LABEL_83:
  (*(void (**)(uint64_t *, uint64_t))(*a2 + 176))(a2, v12);
  if (v12 == v9) {
    char v26 = v16;
  }
  else {
    char v26 = 1;
  }
  if ((v26 & 1) == 0)
  {
    (*(void (**)(float32x2_t **__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(&v38, a1, v9);
    unint64_t v32 = v38;
    (*(void (**)(uint64_t *, uint64_t, float32x2_t **))(*a2 + 184))(a2, v9, &v32);
  }
  uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  unint64_t v28 = v46 | v27;
  uint64_t v29 = (*(uint64_t (**)(uint64_t *, uint64_t, void))(*a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  unint64_t v30 = fst::ReverseProperties(v28, v16);
  return (*(uint64_t (**)(uint64_t *, unint64_t, uint64_t))(*a2 + 192))(a2, v29 | v30, 0x3FFFFFFF0007);
}

void sub_1B1BA2428(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  char v23 = *(void **)(v21 - 144);
  if (v23)
  {
    *(void *)(v21 - 136) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<fst::LatticeWeightTpl<float>>::insert(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = (uint64_t *)a2;
  unint64_t v6 = *(void *)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if (v6 >= v7)
  {
    uint64_t v9 = *(uint64_t **)a1;
    unint64_t v10 = ((uint64_t)(v6 - *(void *)a1) >> 3) + 1;
    if (v10 >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = a2 - (void)v9;
    uint64_t v12 = (a2 - (uint64_t)v9) >> 3;
    uint64_t v13 = v7 - (void)v9;
    if (v13 >> 2 > v10) {
      unint64_t v10 = v13 >> 2;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v10;
    }
    uint64_t v26 = a1 + 16;
    if (v14) {
      __n128 v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1 + 16, v14);
    }
    else {
      __n128 v15 = 0;
    }
    int v16 = &v15[8 * v12];
    __p = v15;
    char v23 = v16;
    int v24 = v16;
    uint64_t v25 = &v15[8 * v14];
    if (v12 == v14)
    {
      if (v11 < 1)
      {
        if (v9 == v4) {
          unint64_t v18 = 1;
        }
        else {
          unint64_t v18 = v11 >> 2;
        }
        BOOL v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v8, v18);
        int v16 = &v19[8 * (v18 >> 2)];
        __p = v19;
        char v23 = v16;
        uint64_t v25 = &v19[8 * v20];
        if (v15) {
          operator delete(v15);
        }
      }
      else
      {
        unint64_t v17 = v12 + 2;
        if (v12 >= -1) {
          unint64_t v17 = v12 + 1;
        }
        v16 -= 8 * (v17 >> 1);
        char v23 = v16;
      }
    }
    *(void *)int v16 = *a3;
    int v24 = v16 + 8;
    uint64_t v4 = std::vector<fst::LatticeWeightTpl<float>>::__swap_out_circular_buffer((uint64_t **)a1, &__p, v4);
    if (v24 != v23) {
      v24 += (v23 - v24 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (a2 == v6)
  {
    *(void *)a2 = *a3;
    *(void *)(a1 + 8) = a2 + 8;
  }
  else
  {
    std::vector<fst::LatticeWeightTpl<float>>::__move_range(a1, a2, v6, (double *)(a2 + 8));
    if (v4 <= a3) {
      a3 += *(void *)(a1 + 8) > (unint64_t)a3;
    }
    uint64_t *v4 = *a3;
  }
  return v4;
}

void sub_1B1BA2710(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::NShortestPath<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4, float *a5, int a6, int a7, float a8)
{
  if (a4)
  {
    if ((a7 & 1) != 0
      && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 64))(a1, 0x400000000, 1))
    {
      if (FLAGS_fst_error_fatal) {
        std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
      }
      else {
        std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      }
      unint64_t v17 = fst::LogMessage::LogMessage((fst *)&v135, (uint64_t)&__p);
      unint64_t v18 = (void *)fst::cerr(v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"NShortestPath: FST has a cycle and include_final_ties was set to true. This is not currently supported.", 103);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v135);
      if (SHIBYTE(v119) < 0) {
        operator delete((void *)__p);
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 192))(a2, 4, 4);
    }
    else
    {
      int v105 = a6;
      (*(void (**)(uint64_t))(*(void *)a2 + 224))(a2);
      uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
      (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 280))(a2, v19);
      uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
      (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 288))(a2, v20);
      uint64_t v135 = 0;
      v136 = 0;
      unint64_t v137 = 0;
      v132 = 0;
      v133 = 0;
      unint64_t v134 = 0;
      uint64_t v129 = 0;
      int v130 = 0;
      v131 = 0;
      if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 24))(a1) != -1)
      {
        uint64_t v23 = *a3;
        uint64_t v22 = a3[1];
        if ((*(int (**)(uint64_t))(*(void *)a1 + 24))(a1) < (unint64_t)((v22 - v23) >> 3))
        {
          int v24 = (_DWORD *)(*a3 + 8 * (*(int (**)(uint64_t))(*(void *)a1 + 24))(a1));
          LODWORD(__p) = 0;
          LODWORD(__p) = *v24;
          LODWORD(v125) = 0;
          LODWORD(v125) = v24[1];
          v114.i32[0] = 2139095040;
          v113[0] = INFINITY;
          if (*(float *)&__p != INFINITY || (v21.n128_u32[0] = v125, *(float *)&v125 != v113[0]))
          {
            v21.n128_f32[0] = *a5;
            float v25 = *a5 + a5[1];
            if (v25 >= 0.0)
            {
              BOOL v26 = v21.n128_f32[0] < 0.0;
              if (v25 > 0.0) {
                BOOL v26 = 0;
              }
              if (v105 && !v26)
              {
                uint64_t v27 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2);
                (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 176))(a2, v27);
                int v128 = 0;
                int v128 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2);
                v127[1] = 0;
                (*(void (**)(uint64_t))(*(void *)a2 + 184))(a2);
                uint64_t v29 = v135;
                unint64_t v28 = (unint64_t)v136;
                if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v136 - v135) >> 2) <= v128)
                {
                  int32x2_t v30 = vdup_n_s32(0x7F800000u);
                  do
                  {
                    LODWORD(__p) = -1;
                    *(int32x2_t *)((char *)&__p + 4) = v30;
                    if (v28 >= v137)
                    {
                      unint64_t v28 = std::vector<std::pair<int,fst::LatticeWeightTpl<float>>>::__push_back_slow_path<std::pair<int,fst::LatticeWeightTpl<float>>>(&v135, (uint64_t)&__p);
                      uint64_t v29 = v135;
                    }
                    else
                    {
                      *(_DWORD *)unint64_t v28 = -1;
                      *(int32x2_t *)(v28 + 4) = v30;
                      v28 += 12;
                    }
                    v136 = (float *)v28;
                  }
                  while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - v29) >> 2) <= v128);
                }
                int v31 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
                unint64_t v32 = (_DWORD *)(v135 + 12 * v128);
                v32[1] = 0;
                v32[2] = 0;
                *unint64_t v32 = v31;
                std::vector<int>::push_back[abi:ne180100]((uint64_t)&v132, &v128);
                uint64_t v33 = *a3 + 8 * (*(int (**)(uint64_t))(*(void *)a1 + 24))(a1);
                float v35 = *(float *)v33;
                LODWORD(v34) = *(_DWORD *)(v33 + 4);
                float v37 = *a5;
                float v36 = a5[1];
                BOOL v125 = 0;
                uint64_t v126 = 0;
                v127[0] = 0;
                uint64_t v39 = v132;
                uint64_t v38 = (char *)v133;
                if (v132 == v133) {
LABEL_146:
                }
                  fst::Connect<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a2);
                BOOL v104 = 0;
                float v40 = v35 + v37;
                float v41 = (float)(v35 + v37) + (float)(*(float *)&v34 + v36);
                int32x2_t v42 = vdup_n_s32(0x7F800000u);
                while (1)
                {
                  v122[0] = &v135;
                  v122[1] = a3;
                  int v123 = -1;
                  float v124 = a8;
                  if (v38 - (char *)v39 >= 5)
                  {
                    int v43 = *v39;
                    float32x2_t v44 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ShortestPathCompare<int,fst::LatticeWeightTpl<float>> &,std::__wrap_iter<int *>>(v39, v122, (unint64_t)(v38 - (char *)v39) >> 2);
                    uint64_t v45 = (int *)(v38 - 4);
                    if (v38 - 4 == (char *)v44)
                    {
                      int *v44 = v43;
                    }
                    else
                    {
                      int *v44 = *v45;
                      int *v45 = v43;
                      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ShortestPathCompare<int,fst::LatticeWeightTpl<float>> &,std::__wrap_iter<int *>>((uint64_t)v39, (uint64_t)(v44 + 1), v122, v44 + 1 - v39);
                    }
                  }
                  float v46 = *((float *)v133 - 1);
                  float v47 = (int *)(v135 + 12 * SLODWORD(v46));
                  unint64_t v48 = *v47;
                  *(void *)&long long v34 = *(void *)(v47 + 1);
                  long long v106 = v34;
                  --v133;
                  if (v48 == -1)
                  {
                    float32x2_t v49 = 0;
                    int v50 = v105;
                  }
                  else
                  {
                    float32x2_t v49 = (float32x2_t)v42;
                    int v50 = v105;
                    if (v48 < (a3[1] - *a3) >> 3) {
                      float32x2_t v49 = *(float32x2_t *)(*a3 + 8 * v48);
                    }
                  }
                  float32x2_t v51 = vadd_f32(*(float32x2_t *)&v106, v49);
                  float v52 = vaddv_f32(v51);
                  BOOL v53 = v40 < v51.f32[0];
                  if (v41 > v52) {
                    BOOL v53 = 0;
                  }
                  if (v41 < v52
                    || v53
                    || v50 != -1 && (*(int (**)(uint64_t))(*(void *)a2 + 160))(a2) >= v50)
                  {
                    goto LABEL_145;
                  }
                  unint64_t v54 = v48 + 1;
                  v55 = v129;
                  v56 = v130;
                  unint64_t v57 = (v130 - v129) >> 2;
                  while (v57 <= v54)
                  {
                    if (v56 >= v131)
                    {
                      unint64_t v59 = v57 + 1;
                      if ((v57 + 1) >> 62) {
                        std::vector<int>::__throw_length_error[abi:ne180100]();
                      }
                      uint64_t v60 = v131 - v55;
                      if ((v131 - v55) >> 1 > v59) {
                        unint64_t v59 = v60 >> 1;
                      }
                      if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFFCLL) {
                        unint64_t v61 = 0x3FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v61 = v59;
                      }
                      if (v61)
                      {
                        v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v131, v61);
                        v55 = v129;
                        v56 = v130;
                      }
                      else
                      {
                        v62 = 0;
                      }
                      uint64_t v63 = &v62[4 * v57];
                      *(_DWORD *)uint64_t v63 = 0;
                      unint64_t v58 = v63 + 4;
                      while (v56 != v55)
                      {
                        int v64 = *((_DWORD *)v56 - 1);
                        v56 -= 4;
                        *((_DWORD *)v63 - 1) = v64;
                        v63 -= 4;
                      }
                      uint64_t v129 = v63;
                      int v130 = v58;
                      v131 = &v62[4 * v61];
                      if (v55)
                      {
                        operator delete(v55);
                        v55 = v129;
                      }
                      else
                      {
                        v55 = v63;
                      }
                    }
                    else
                    {
                      *(_DWORD *)v56 = 0;
                      unint64_t v58 = v56 + 4;
                    }
                    int v130 = v58;
                    unint64_t v57 = (v58 - v55) >> 2;
                    v56 = v58;
                  }
                  if (a7)
                  {
                    uint64_t v65 = v125;
                    unint64_t v66 = v126;
                    unint64_t v67 = ((char *)v126 - (unsigned char *)v125) >> 3;
                    if (v67 <= v54)
                    {
                      do
                      {
                        if ((unint64_t)v66 >= v127[0])
                        {
                          if ((v67 + 1) >> 61) {
                            std::vector<int>::__throw_length_error[abi:ne180100]();
                          }
                          uint64_t v68 = v127[0] - (void)v65;
                          uint64_t v69 = v68 >> 2;
                          if (v68 >> 2 <= v67 + 1) {
                            uint64_t v69 = v67 + 1;
                          }
                          if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF8) {
                            unint64_t v70 = 0x1FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v70 = v69;
                          }
                          int32x2_t v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v127, v70);
                          v73 = (int32x2_t *)&v71[8 * v67];
                          int32x2_t *v73 = v42;
                          unint64_t v66 = v73 + 1;
                          float v74 = (int32x2_t *)v125;
                          for (uint64_t i = v126; i != v74; --i)
                          {
                            int32x2_t v76 = i[-1];
                            v73[-1] = v76;
                            --v73;
                          }
                          BOOL v125 = v73;
                          uint64_t v126 = v66;
                          v127[0] = &v71[8 * v72];
                          if (v74) {
                            operator delete(v74);
                          }
                        }
                        else
                        {
                          *v66++ = v42;
                        }
                        uint64_t v126 = v66;
                        uint64_t v65 = v125;
                        unint64_t v67 = ((char *)v66 - (unsigned char *)v125) >> 3;
                      }
                      while (v67 <= v54);
                      ++*(_DWORD *)&v129[4 * v54];
                      if (v48 != -1)
                      {
LABEL_84:
                        unint64_t v77 = *(int *)&v129[4 * v54];
                        if (v77 == a4)
                        {
                          *((void *)v125 + v54) = v106;
                        }
                        else if (v77 > a4)
                        {
                          float v80 = (float *)((char *)v125 + 8 * v54);
                          float v81 = v80[1];
                          BOOL v82 = *(float *)&v106 == *v80 && *((float *)&v106 + 1) == v81;
                          float v83 = vabds_f32(*(float *)&v106 + *((float *)&v106 + 1), *v80 + v81);
                          if (!v82 && v83 > 0.00097656) {
                            goto LABEL_145;
                          }
                        }
LABEL_110:
                        unint64_t v121 = 0;
                        (*(void (**)(uint64_t, unint64_t, long long *))(*(void *)a1 + 136))(a1, v48, &__p);
                        while (2)
                        {
                          if ((void)__p)
                          {
                            if ((*(unsigned int (**)(void))(*(void *)__p + 24))(__p))
                            {
                              if ((void)__p)
                              {
                                (*(void (**)(void))(*(void *)__p + 8))();
                              }
                              else
                              {
LABEL_141:
                                if (v120) {
                                  --*v120;
                                }
                              }
                              (*(void (**)(long long *__return_ptr, uint64_t, unint64_t))(*(void *)a1 + 32))(&__p, a1, v48);
                              float32x2_t v114 = (float32x2_t)__p;
                              *(int32x2_t *)&long long __p = v42;
                              if (fst::operator!=<float>((float *)&v114, (float *)&__p))
                              {
                                float32x2_t v102 = v114;
                                v113[0] = 0.0;
                                LODWORD(v113[0]) = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2);
                                LODWORD(__p) = -1;
                                *(float32x2_t *)((char *)&__p + 4) = vadd_f32(*(float32x2_t *)&v106, v102);
                                std::vector<std::pair<int,fst::LatticeWeightTpl<float>>>::push_back[abi:ne180100](&v135, (uint64_t)&__p);
                                *(void *)&long long __p = 0;
                                *((float32x2_t *)&__p + 1) = v114;
                                *(float *)&unint64_t v119 = v46;
                                (*(void (**)(uint64_t, void, long long *))(*(void *)a2 + 208))(a2, LODWORD(v113[0]), &__p);
                                std::vector<int>::push_back[abi:ne180100]((uint64_t)&v132, v113);
                                v107[0] = &v135;
                                v107[1] = a3;
                                int v108 = -1;
                                float v109 = a8;
                                std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ShortestPathCompare<int,fst::LatticeWeightTpl<float>> &,std::__wrap_iter<int *>>((uint64_t)v132, (uint64_t)v133, v107, v133 - v132);
                              }
                              goto LABEL_145;
                            }
                            if ((void)__p)
                            {
                              uint64_t v85 = (*(uint64_t (**)(void))(*(void *)__p + 32))();
LABEL_117:
                              float v87 = *(float *)(v85 + 8);
                              float v86 = *(float *)(v85 + 12);
                              float v88 = *(float *)(v85 + 16);
                              float32x2_t v114 = *(float32x2_t *)v85;
                              float v115 = v87;
                              float v116 = v86;
                              float v117 = v88;
                              uint64_t v89 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2);
                              v113[0] = v117;
                              v113[1] = *(float *)&v106 + v87;
                              v113[2] = *((float *)&v106 + 1) + v86;
                              unint64_t v90 = v136;
                              if ((unint64_t)v136 >= v137)
                              {
                                uint64_t v91 = std::vector<std::pair<int,fst::LatticeWeightTpl<float>>>::__push_back_slow_path<std::pair<int,fst::LatticeWeightTpl<float>>>(&v135, (uint64_t)v113);
                              }
                              else
                              {
                                float *v136 = v117;
                                uint64_t v91 = (uint64_t)(v90 + 3);
                                v90[1] = *(float *)&v106 + v87;
                                v90[2] = *((float *)&v106 + 1) + v86;
                              }
                              v136 = (float *)v91;
                              float v117 = v46;
                              (*(void (**)(uint64_t, uint64_t, float32x2_t *))(*(void *)a2 + 208))(a2, v89, &v114);
                              uint64_t v92 = v133;
                              if ((unint64_t)v133 >= v134)
                              {
                                v94 = v132;
                                uint64_t v95 = v133 - v132;
                                unint64_t v96 = v95 + 1;
                                if ((unint64_t)(v95 + 1) >> 62) {
                                  std::vector<int>::__throw_length_error[abi:ne180100]();
                                }
                                uint64_t v97 = v134 - (void)v132;
                                if ((uint64_t)(v134 - (void)v132) >> 1 > v96) {
                                  unint64_t v96 = v97 >> 1;
                                }
                                if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFFCLL) {
                                  unint64_t v98 = 0x3FFFFFFFFFFFFFFFLL;
                                }
                                else {
                                  unint64_t v98 = v96;
                                }
                                if (v98)
                                {
                                  v99 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v134, v98);
                                  v94 = v132;
                                  uint64_t v92 = v133;
                                }
                                else
                                {
                                  v99 = 0;
                                }
                                v100 = (int *)&v99[4 * v95];
                                int *v100 = v89;
                                v93 = v100 + 1;
                                while (v92 != v94)
                                {
                                  int v101 = *--v92;
                                  *--v100 = v101;
                                }
                                v132 = v100;
                                v133 = v93;
                                unint64_t v134 = (unint64_t)&v99[4 * v98];
                                if (v94) {
                                  operator delete(v94);
                                }
                              }
                              else
                              {
                                int *v133 = v89;
                                v93 = v92 + 1;
                              }
                              v133 = v93;
                              v110[0] = &v135;
                              v110[1] = a3;
                              int v111 = -1;
                              float v112 = a8;
                              std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ShortestPathCompare<int,fst::LatticeWeightTpl<float>> &,std::__wrap_iter<int *>>((uint64_t)v132, (uint64_t)v93, v110, v93 - v132);
                              if ((void)__p) {
                                (*(void (**)(void))(*(void *)__p + 40))(__p);
                              }
                              else {
                                ++v121;
                              }
                              continue;
                            }
                          }
                          else if (v121 >= v119)
                          {
                            goto LABEL_141;
                          }
                          break;
                        }
                        uint64_t v85 = *((void *)&__p + 1) + 20 * v121;
                        goto LABEL_117;
                      }
                    }
                    else
                    {
                      ++*(_DWORD *)&v55[4 * v54];
                      if (v48 != -1) {
                        goto LABEL_84;
                      }
                    }
                  }
                  else
                  {
                    ++*(_DWORD *)&v55[4 * v54];
                    if (v48 != -1)
                    {
                      if (*(int *)&v129[4 * v54] > a4) {
                        goto LABEL_145;
                      }
                      goto LABEL_110;
                    }
                  }
                  if (v104
                    && (v8 != *(float *)&v106 || v103 != *((float *)&v106 + 1))
                    && vabds_f32(v8 + v103, *(float *)&v106 + *((float *)&v106 + 1)) > 0.00097656)
                  {
                    goto LABEL_146;
                  }
                  uint64_t v78 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
                  long long __p = 0uLL;
                  *(float *)&unint64_t v119 = v46;
                  (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)a2 + 208))(a2, v78, &__p);
                  if (v104)
                  {
                    BOOL v104 = 1;
                    goto LABEL_145;
                  }
                  BOOL v104 = *(int *)&v129[4 * v54] == a4;
                  *((void *)&v34 + 1) = *((void *)&v106 + 1);
                  if (*(_DWORD *)&v129[4 * v54] == a4) {
                    float v8 = *(float *)&v106;
                  }
                  float v79 = v103;
                  if (*(_DWORD *)&v129[4 * v54] == a4) {
                    float v79 = *((float *)&v106 + 1);
                  }
                  float v103 = v79;
                  if (*(_DWORD *)&v129[4 * v54] == a4 && (a7 & 1) == 0) {
                    goto LABEL_146;
                  }
LABEL_145:
                  uint64_t v39 = v132;
                  uint64_t v38 = (char *)v133;
                  if (v132 == v133) {
                    goto LABEL_146;
                  }
                }
              }
            }
          }
        }
      }
      if ((*(uint64_t (**)(uint64_t, uint64_t, void, __n128))(*(void *)a1 + 64))(a1, 4, 0, v21)) {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 192))(a2, 4, 4);
      }
    }
  }
}

void sub_1B1BA36C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44)
{
  float v46 = *(void **)(v44 - 224);
  if (v46)
  {
    *(void *)(v44 - 216) = v46;
    operator delete(v46);
  }
  float v47 = *(void **)(v44 - 200);
  if (v47)
  {
    *(void *)(v44 - 192) = v47;
    operator delete(v47);
  }
  unint64_t v48 = *(void **)(v44 - 176);
  if (v48)
  {
    *(void *)(v44 - 168) = v48;
    operator delete(v48);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ShortestDistanceState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::ShortestDistance(void *a1, int a2)
{
  if ((*(unsigned int (**)(void))(*(void *)*a1 + 24))(*a1) == -1)
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t, void))(*(void *)*a1 + 64))(*a1, 4, 0);
    if (!result) {
      return result;
    }
    v150 = (char *)a1 + 116;
    goto LABEL_200;
  }
  (*(void (**)(void))(**(void **)(a1[2] + 16) + 56))(*(void *)(a1[2] + 16));
  if (!*((unsigned char *)a1 + 33))
  {
    *(void *)(a1[1] + 8) = *(void *)a1[1];
    a1[6] = a1[5];
    a1[9] = 0;
  }
  if (a2 == -1) {
    a2 = (*(uint64_t (**)(void))(*(void *)*a1 + 24))();
  }
  unint64_t v4 = a2;
  int32x2_t v5 = (int32x2_t **)a1[1];
  unint64_t v6 = (void **)(v5 + 1);
  unint64_t v7 = v5[1];
  float v8 = *v5;
  unint64_t v9 = v7 - *v5;
  if (v9 <= a2)
  {
    v151 = a1 + 5;
    int32x2_t v10 = vdup_n_s32(0x7F800000u);
    do
    {
      unint64_t v11 = (unint64_t)v5[2];
      if ((unint64_t)v7 >= v11)
      {
        if ((v9 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v13 = v11 - (void)v8;
        uint64_t v14 = v13 >> 2;
        if (v13 >> 2 <= v9 + 1) {
          uint64_t v14 = v9 + 1;
        }
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v14;
        }
        int v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(v5 + 2), v15);
        unint64_t v18 = (int32x2_t *)&v16[8 * v9];
        int32x2_t *v18 = v10;
        uint64_t v12 = v18 + 1;
        uint64_t v19 = (int32x2_t *)*v6;
        uint64_t v20 = *v5;
        while (v19 != v20)
        {
          int32x2_t v21 = v19[-1];
          --v19;
          v18[-1] = v21;
          --v18;
        }
        float *v5 = v18;
        _DWORD *v6 = v12;
        void v5[2] = (int32x2_t *)&v16[8 * v17];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        int32x2_t *v7 = v10;
        uint64_t v12 = v7 + 1;
      }
      _DWORD *v6 = v12;
      uint64_t v23 = (int32x2_t *)a1[6];
      unint64_t v22 = a1[7];
      if ((unint64_t)v23 >= v22)
      {
        uint64_t v25 = ((uint64_t)v23 - *v151) >> 3;
        if ((unint64_t)(v25 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v26 = v22 - *v151;
        uint64_t v27 = v26 >> 2;
        if (v26 >> 2 <= (unint64_t)(v25 + 1)) {
          uint64_t v27 = v25 + 1;
        }
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v28 = v27;
        }
        int32x2_t v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 7), v28);
        int v31 = (int32x2_t *)&v30[8 * v25];
        *int v31 = v10;
        int v24 = v31 + 1;
        unint64_t v32 = (char *)a1[5];
        for (uint64_t i = (char *)a1[6]; i != v32; i -= 8)
        {
          int32x2_t v34 = *(int32x2_t *)(i - 8);
          v31[-1] = v34;
          --v31;
        }
        a1[5] = v31;
        a1[6] = v24;
        a1[7] = &v30[8 * v29];
        if (v32) {
          operator delete(v32);
        }
      }
      else
      {
        *uint64_t v23 = v10;
        int v24 = v23 + 1;
      }
      a1[6] = v24;
      LOBYTE(v153[0]) = 0;
      std::vector<BOOL>::push_back((uint64_t)(a1 + 8), v153);
      int32x2_t v5 = (int32x2_t **)a1[1];
      unint64_t v6 = (void **)(v5 + 1);
      unint64_t v7 = v5[1];
      float v8 = *v5;
      unint64_t v9 = v7 - *v5;
    }
    while (v9 <= a2);
  }
  if (*((unsigned char *)a1 + 33))
  {
    float v35 = (char *)a1[11];
    float v36 = (char *)a1[12];
    unint64_t v37 = (v36 - v35) >> 2;
    if (v37 <= a2)
    {
      uint64_t v38 = a1 + 13;
      do
      {
        if ((unint64_t)v36 >= *v38)
        {
          unint64_t v40 = v37 + 1;
          if ((v37 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v41 = *v38 - (void)v35;
          if (v41 >> 1 > v40) {
            unint64_t v40 = v41 >> 1;
          }
          if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v42 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v42 = v40;
          }
          if (v42)
          {
            int v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 13), v42);
            float v35 = (char *)a1[11];
            float v36 = (char *)a1[12];
          }
          else
          {
            int v43 = 0;
          }
          uint64_t v44 = &v43[4 * v37];
          *(_DWORD *)uint64_t v44 = -1;
          uint64_t v39 = v44 + 4;
          while (v36 != v35)
          {
            int v45 = *((_DWORD *)v36 - 1);
            v36 -= 4;
            *((_DWORD *)v44 - 1) = v45;
            v44 -= 4;
          }
          a1[11] = v44;
          a1[12] = v39;
          a1[13] = &v43[4 * v42];
          if (v35)
          {
            operator delete(v35);
            float v35 = (char *)a1[11];
          }
          else
          {
            float v35 = v44;
          }
        }
        else
        {
          *(_DWORD *)float v36 = -1;
          uint64_t v39 = v36 + 4;
        }
        a1[12] = v39;
        unint64_t v37 = (v39 - v35) >> 2;
        float v36 = v39;
      }
      while (v37 <= a2);
      float v8 = *(int32x2_t **)a1[1];
    }
    *(_DWORD *)&v35[4 * a2] = *((_DWORD *)a1 + 28);
  }
  v8[a2] = 0;
  float v46 = a1 + 5;
  *(void *)(a1[5] + 8 * v4) = 0;
  float v47 = a1 + 8;
  *(void *)(a1[8] + ((v4 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v4;
  (*(void (**)(void, unint64_t))(**(void **)(a1[2] + 16) + 24))(*(void *)(a1[2] + 16), v4);
  unint64_t v48 = a1 + 13;
  v150 = (char *)a1 + 116;
  int32x2_t v49 = vdup_n_s32(0x7F800000u);
  uint64_t v152 = (uint64_t)(a1 + 7);
  do
  {
    if ((*(uint64_t (**)(void))(**(void **)(a1[2] + 16) + 48))(*(void *)(a1[2] + 16))) {
      goto LABEL_196;
    }
    int v51 = (*(uint64_t (**)(void))(**(void **)(a1[2] + 16) + 16))(*(void *)(a1[2] + 16));
    (*(void (**)(void))(**(void **)(a1[2] + 16) + 32))(*(void *)(a1[2] + 16));
    int v52 = v51;
    unint64_t v53 = v51;
    unint64_t v54 = (void **)a1[1];
    v56 = v54 + 1;
    v55 = (int32x2_t *)v54[1];
    unint64_t v57 = *v54;
    unint64_t v58 = ((char *)v55 - (unsigned char *)*v54) >> 3;
    if (v58 <= v52)
    {
      do
      {
        unint64_t v59 = (unint64_t)v54[2];
        if ((unint64_t)v55 >= v59)
        {
          if ((v58 + 1) >> 61) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v61 = v59 - (void)v57;
          uint64_t v62 = v61 >> 2;
          if (v61 >> 2 <= v58 + 1) {
            uint64_t v62 = v58 + 1;
          }
          if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v63 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v63 = v62;
          }
          int v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(v54 + 2), v63);
          unint64_t v66 = (int32x2_t *)&v64[8 * v58];
          *unint64_t v66 = v49;
          uint64_t v60 = v66 + 1;
          unint64_t v67 = (char *)*v56;
          uint64_t v68 = (char *)*v54;
          while (v67 != v68)
          {
            int32x2_t v69 = *(int32x2_t *)(v67 - 8);
            v67 -= 8;
            v66[-1] = v69;
            --v66;
          }
          *unint64_t v54 = v66;
          char *v56 = v60;
          v54[2] = &v64[8 * v65];
          if (v68) {
            operator delete(v68);
          }
        }
        else
        {
          int32x2_t *v55 = v49;
          uint64_t v60 = v55 + 1;
        }
        char *v56 = v60;
        int32x2_t v71 = (int32x2_t *)a1[6];
        unint64_t v70 = a1[7];
        if ((unint64_t)v71 >= v70)
        {
          uint64_t v73 = ((uint64_t)v71 - *v46) >> 3;
          if ((unint64_t)(v73 + 1) >> 61) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v74 = v70 - *v46;
          uint64_t v75 = v74 >> 2;
          if (v74 >> 2 <= (unint64_t)(v73 + 1)) {
            uint64_t v75 = v73 + 1;
          }
          if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v76 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v76 = v75;
          }
          uint64_t v78 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v152, v76);
          float v79 = (int32x2_t *)&v78[8 * v73];
          *float v79 = v49;
          uint64_t v72 = v79 + 1;
          float v80 = (char *)a1[5];
          for (j = (char *)a1[6]; j != v80; j -= 8)
          {
            int32x2_t v82 = *(int32x2_t *)(j - 8);
            v79[-1] = v82;
            --v79;
          }
          a1[5] = v79;
          a1[6] = v72;
          a1[7] = &v78[8 * v77];
          if (v80) {
            operator delete(v80);
          }
        }
        else
        {
          *int32x2_t v71 = v49;
          uint64_t v72 = v71 + 1;
        }
        a1[6] = v72;
        LOBYTE(v153[0]) = 0;
        std::vector<BOOL>::push_back((uint64_t)(a1 + 8), v153);
        unint64_t v54 = (void **)a1[1];
        v56 = v54 + 1;
        v55 = (int32x2_t *)v54[1];
        unint64_t v57 = *v54;
        unint64_t v58 = ((char *)v55 - (unsigned char *)*v54) >> 3;
      }
      while (v58 <= v53);
    }
    if (*((unsigned char *)a1 + 32))
    {
      (*(void (**)(void *__return_ptr))(*(void *)*a1 + 32))(v153);
      float v158 = *((float *)v153 + 1);
      int v159 = v153[0];
      int v157 = 2139095040;
      float v156 = INFINITY;
      v50.n128_u32[0] = v153[0];
      if (*(float *)v153 != INFINITY || (v50.n128_f32[0] = v158, v158 != v156))
      {
LABEL_196:
        ++*((_DWORD *)a1 + 28);
        uint64_t result = (*(uint64_t (**)(void, uint64_t, void, __n128))(*(void *)*a1 + 64))(*a1, 4, 0, v50);
        if (!result) {
          return result;
        }
LABEL_200:
        unsigned char *v150 = 1;
        return result;
      }
    }
    *(void *)(a1[8] + ((v53 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v53);
    float v83 = (float *)(a1[5] + 8 * v53);
    float v84 = *v83;
    float v85 = v83[1];
    *(int32x2_t *)float v83 = v49;
    uint64_t v86 = *a1;
    unint64_t v155 = 0;
    (*(void (**)(uint64_t, unint64_t, void *))(*(void *)v86 + 136))(v86, v53, v153);
    while (1)
    {
      if (v153[0])
      {
        if ((*(uint64_t (**)(void))(*(void *)v153[0] + 24))(v153[0])) {
          goto LABEL_188;
        }
        if (v153[0])
        {
          uint64_t v87 = (*(uint64_t (**)(void))(*(void *)v153[0] + 32))(v153[0]);
          goto LABEL_98;
        }
      }
      else if (v155 >= v153[2])
      {
LABEL_188:
        char v148 = 1;
        goto LABEL_190;
      }
      uint64_t v87 = v153[1] + 20 * v155;
LABEL_98:
      float v88 = (int32x2_t **)a1[1];
      unint64_t v90 = (void **)(v88 + 1);
      uint64_t v89 = v88[1];
      uint64_t v91 = *v88;
      unint64_t v92 = v89 - *v88;
      if (v92 <= *(int *)(v87 + 16))
      {
        do
        {
          unint64_t v94 = (unint64_t)v88[2];
          if ((unint64_t)v89 >= v94)
          {
            if ((v92 + 1) >> 61) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v96 = v94 - (void)v91;
            uint64_t v97 = v96 >> 2;
            if (v96 >> 2 <= v92 + 1) {
              uint64_t v97 = v92 + 1;
            }
            if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v98 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v98 = v97;
            }
            v99 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(v88 + 2), v98);
            int v101 = (int32x2_t *)&v99[8 * v92];
            *int v101 = v49;
            uint64_t v95 = v101 + 1;
            float32x2_t v102 = (int32x2_t *)*v90;
            float v103 = *v88;
            while (v102 != v103)
            {
              int32x2_t v104 = v102[-1];
              --v102;
              v101[-1] = v104;
              --v101;
            }
            *float v88 = v101;
            *unint64_t v90 = v95;
            v88[2] = (int32x2_t *)&v99[8 * v100];
            if (v103) {
              operator delete(v103);
            }
          }
          else
          {
            *uint64_t v89 = v49;
            uint64_t v95 = v89 + 1;
          }
          *unint64_t v90 = v95;
          long long v106 = (int32x2_t *)a1[6];
          unint64_t v105 = a1[7];
          if ((unint64_t)v106 >= v105)
          {
            uint64_t v108 = ((uint64_t)v106 - *v46) >> 3;
            if ((unint64_t)(v108 + 1) >> 61) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v109 = v105 - *v46;
            uint64_t v110 = v109 >> 2;
            if (v109 >> 2 <= (unint64_t)(v108 + 1)) {
              uint64_t v110 = v108 + 1;
            }
            if ((unint64_t)v109 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v111 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v111 = v110;
            }
            float v112 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v152, v111);
            float32x2_t v114 = (int32x2_t *)&v112[8 * v108];
            *float32x2_t v114 = v49;
            v107 = v114 + 1;
            float v115 = (char *)a1[5];
            for (k = (char *)a1[6]; k != v115; k -= 8)
            {
              int32x2_t v117 = *(int32x2_t *)(k - 8);
              v114[-1] = v117;
              --v114;
            }
            a1[5] = v114;
            a1[6] = v107;
            a1[7] = &v112[8 * v113];
            if (v115) {
              operator delete(v115);
            }
          }
          else
          {
            int32x2_t *v106 = v49;
            v107 = v106 + 1;
          }
          a1[6] = v107;
          LOBYTE(v159) = 0;
          std::vector<BOOL>::push_back((uint64_t)(a1 + 8), &v159);
          float v88 = (int32x2_t **)a1[1];
          unint64_t v90 = (void **)(v88 + 1);
          uint64_t v89 = v88[1];
          uint64_t v91 = *v88;
          unint64_t v92 = v89 - *v88;
          unint64_t v93 = *(int *)(v87 + 16);
        }
        while (v92 <= v93);
      }
      else
      {
        LODWORD(v93) = *(_DWORD *)(v87 + 16);
      }
      if (*((unsigned char *)a1 + 33))
      {
        float v118 = (char *)a1[11];
        unint64_t v119 = (char *)a1[12];
        unint64_t v120 = (v119 - v118) >> 2;
        if (v120 <= (int)v93)
        {
          do
          {
            if ((unint64_t)v119 >= *v48)
            {
              unint64_t v123 = v120 + 1;
              if ((v120 + 1) >> 62) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v124 = *v48 - (void)v118;
              if (v124 >> 1 > v123) {
                unint64_t v123 = v124 >> 1;
              }
              if ((unint64_t)v124 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v125 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v125 = v123;
              }
              if (v125)
              {
                uint64_t v126 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 13), v125);
                float v118 = (char *)a1[11];
                unint64_t v119 = (char *)a1[12];
              }
              else
              {
                uint64_t v126 = 0;
              }
              unint64_t v127 = &v126[4 * v120];
              *(_DWORD *)unint64_t v127 = -1;
              float v122 = v127 + 4;
              while (v119 != v118)
              {
                int v128 = *((_DWORD *)v119 - 1);
                v119 -= 4;
                *((_DWORD *)v127 - 1) = v128;
                v127 -= 4;
              }
              a1[11] = v127;
              a1[12] = v122;
              a1[13] = &v126[4 * v125];
              if (v118)
              {
                operator delete(v118);
                float v118 = (char *)a1[11];
              }
              else
              {
                float v118 = v127;
              }
            }
            else
            {
              *(_DWORD *)unint64_t v119 = -1;
              float v122 = v119 + 4;
            }
            a1[12] = v122;
            unint64_t v120 = (v122 - v118) >> 2;
            LODWORD(v93) = *(_DWORD *)(v87 + 16);
            unint64_t v119 = v122;
          }
          while (v120 <= (int)v93);
          unint64_t v121 = (int)v93;
          float v88 = (int32x2_t **)a1[1];
        }
        else
        {
          unint64_t v121 = (int)v93;
        }
        int v129 = *((_DWORD *)a1 + 28);
        uint64_t v91 = *v88;
        if (*(_DWORD *)&v118[4 * v121] != v129)
        {
          v91[v121] = v49;
          *(int32x2_t *)(*v46 + 8 * v121) = v49;
          *(void *)(*v47 + ((v121 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v121);
          *(_DWORD *)&v118[4 * v121] = v129;
          LODWORD(v93) = *(_DWORD *)(v87 + 16);
        }
      }
      int v130 = (float *)&v91[(int)v93];
      float v131 = v84 + *(float *)(v87 + 8);
      float v132 = v85 + *(float *)(v87 + 12);
      float v133 = v130[1];
      float v134 = *v130;
      float v135 = *v130 + v133;
      float v136 = v131 + v132;
      float v137 = v133;
      float v138 = *v130;
      if (v135 >= (float)(v131 + v132))
      {
        if (v135 > (float)(v131 + v132)
          || (v134 >= v131 ? (v139 = v134 <= v131) : (v139 = 1), float v137 = v130[1], v138 = *v130, !v139))
        {
          float v137 = v85 + *(float *)(v87 + 12);
          float v138 = v84 + *(float *)(v87 + 8);
        }
      }
      BOOL v140 = v133 == v137 && v134 == v138;
      if (!v140 && vabds_f32(v135, v137 + v138) > *((float *)a1 + 7)) {
        break;
      }
LABEL_185:
      if (v153[0]) {
        (*(void (**)(void))(*(void *)v153[0] + 40))(v153[0]);
      }
      else {
        ++v155;
      }
    }
    if (v135 >= v136)
    {
      if (v135 > v136 || (v134 >= v131 ? (BOOL v141 = v134 <= v131) : (BOOL v141 = 1), !v141))
      {
        float v133 = v85 + *(float *)(v87 + 12);
        float v134 = v84 + *(float *)(v87 + 8);
      }
    }
    float v142 = (float *)(*v46 + 8 * (int)v93);
    *int v130 = v134;
    v130[1] = v133;
    float v143 = *v142;
    float v144 = v142[1];
    float v145 = *v142 + v144;
    if (v145 >= v136)
    {
      if (v145 > v136 || (v143 >= v131 ? (BOOL v146 = v143 <= v131) : (BOOL v146 = 1), !v146))
      {
        float v144 = v132;
        float v143 = v131;
      }
    }
    *float v142 = v143;
    v142[1] = v144;
    if (fst::LatticeWeightTpl<float>::Member(v130) && fst::LatticeWeightTpl<float>::Member(v142))
    {
      uint64_t v147 = **(void **)(a1[2] + 16);
      if ((*(void *)(a1[8] + (((unint64_t)*(int *)(v87 + 16) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *(_DWORD *)(v87 + 16)))
      {
        (*(void (**)(void))(v147 + 40))();
      }
      else
      {
        (*(void (**)(void))(v147 + 24))();
        *(void *)(*v47 + (((unint64_t)*(int *)(v87 + 16) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *(_DWORD *)(v87 + 16);
      }
      goto LABEL_185;
    }
    char v148 = 0;
    unsigned char *v150 = 1;
LABEL_190:
    uint64_t result = v153[0];
    if (v153[0])
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)v153[0] + 8))(v153[0]);
    }
    else if (v154)
    {
      --*v154;
    }
  }
  while ((v148 & 1) != 0);
  return result;
}

void sub_1B1BA453C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _DWORD *a15)
{
  if (a12)
  {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  else if (a15)
  {
    --*a15;
  }
  _Unwind_Resume(exception_object);
}

void std::vector<fst::LatticeWeightTpl<float>>::resize(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v3 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v3)
  {
    if (a2 < v3) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<fst::LatticeWeightTpl<float>>::__append((void **)a1, a2 - v3, a3);
  }
}

void std::vector<fst::LatticeWeightTpl<float>>::__append(void **a1, unint64_t a2, void *a3)
{
  float v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  unint64_t v7 = v8;
  unint64_t v9 = *(void **)(v6 - 8);
  if (a2 <= (v8 - (unsigned char *)v9) >> 3)
  {
    if (a2)
    {
      uint64_t v16 = 8 * a2;
      uint64_t v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 8;
      }
      while (v16);
      unint64_t v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    uint64_t v10 = (char *)v9 - (unsigned char *)*a1;
    unint64_t v11 = a2 + (v10 >> 3);
    if (v11 >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v10 >> 3;
    uint64_t v13 = v7 - (unsigned char *)*a1;
    if (v13 >> 2 > v11) {
      unint64_t v11 = v13 >> 2;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v11;
    }
    if (v14) {
      unint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v6, v14);
    }
    else {
      unint64_t v15 = 0;
    }
    unint64_t v18 = &v15[8 * v12];
    uint64_t v19 = &v18[8 * a2];
    uint64_t v20 = 8 * a2;
    int32x2_t v21 = v18;
    do
    {
      *(void *)int32x2_t v21 = *a3;
      v21 += 8;
      v20 -= 8;
    }
    while (v20);
    unint64_t v22 = &v15[8 * v14];
    uint64_t v23 = (char *)*a1;
    for (uint64_t i = (char *)a1[1]; i != v23; i -= 8)
    {
      uint64_t v25 = *((void *)i - 1);
      *((void *)v18 - 1) = v25;
      v18 -= 8;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
    {
      operator delete(v23);
    }
  }
}

void fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::VectorFst()
{
}

void sub_1B1BA4764(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

void fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::~VectorFst(void *a1)
{
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::~ImplToFst(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::Start(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 8) + 88);
}

double fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::Final@<D0>(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  unint64_t v3 = *(double **)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2);
  double result = *v3;
  *a3 = *(void *)v3;
  return result;
}

unint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::NumArcs(uint64_t a1, int a2)
{
  return 0xCCCCCCCCCCCCCCCDLL
       * ((uint64_t)(*(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 32)
                  - *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 24)) >> 2);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 8);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 16);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = fst::TestProperties<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    unint64_t v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return v7();
  }
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::Type(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

void fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::GetArcs(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
}

void fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::Copy()
{
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::InitStateIterator(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 8) = (*(void *)(v2 + 72) - *(void *)(v2 + 64)) >> 3;
  return result;
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::InitArcIterator(uint64_t result, int a2, void *a3)
{
  uint64_t v3 = *(void *)(result + 8);
  *a3 = 0;
  unint64_t v5 = (uint64_t *)(*(void *)(*(void *)(v3 + 64) + 8 * a2) + 24);
  uint64_t v4 = *v5;
  unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * ((v5[1] - *v5) >> 2);
  if (v5[1] == *v5) {
    uint64_t v4 = 0;
  }
  a3[1] = v4;
  a3[2] = v6;
  a3[3] = 0;
  return result;
}

uint64_t fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::IsMemoryMapped()
{
  return 0;
}

uint64_t fst::ImplToExpandedFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::NumStates(uint64_t a1)
{
  return (*(void *)(*(void *)(a1 + 8) + 72) - *(void *)(*(void *)(a1 + 8) + 64)) >> 3;
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::operator=(uint64_t result, uint64_t a2)
{
  if (result != a2) {
    operator new();
  }
  return result;
}

void sub_1B1BA4AC8(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

unint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::SetStart(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::MutateCheck(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  *(_DWORD *)(v4 + 88) = a2;
  unint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
  *(void *)(v4 + 8) = result & 0xCCFFFFF0007 | (((result >> 35) & 1) << 37) | *(void *)(v4 + 8) & 4;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::SetFinal(uint64_t a1, int a2, uint64_t *a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::MutateCheck(a1);
  unint64_t v6 = *(uint64_t **)(a1 + 8);
  uint64_t v8 = *a3;
  return fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::SetFinal(v6, a2, &v8);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::SetProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a3 & 4;
  uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), v6);
  if (result != (v6 & a2)) {
    uint64_t result = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::MutateCheck(a1);
  }
  *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~a3 | 4) | a3 & a2;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::AddState(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::MutateCheck(a1);
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::AddState(v2);
  v2[1] = v2[1] & 4 | (*(uint64_t (**)(void *))(*v2 + 24))(v2) & 0x2AFFFFFF0007;
  return v3;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::AddArc(uint64_t a1, int a2, float *a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::MutateCheck(a1);
  uint64_t v6 = *(void **)(a1 + 8);
  return fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::AddArc(v6, a2, a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::DeleteStates(uint64_t a1, char **a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::MutateCheck(a1);
  uint64_t v4 = *(void **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::DeleteStates((uint64_t)v4, a2);
  uint64_t result = (*(uint64_t (**)(void *))(*v4 + 24))(v4);
  v4[1] = v4[1] & 4 | result & 0x6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::DeleteStates(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::MutateCheck(a1);
  uint64_t v2 = *(void **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::DeleteStates((uint64_t)v2);
  uint64_t result = (*(uint64_t (**)(void *))(*v2 + 24))(v2);
  v2[1] = (*((_DWORD *)v2 + 2) | result) & 4 | 0x156A5A950003;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::DeleteArcs(uint64_t a1, int a2, uint64_t a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::MutateCheck(a1);
  uint64_t v6 = *(void **)(a1 + 8);
  fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::DeleteArcs(*(void **)(v6[8] + 8 * a2), a3);
  uint64_t result = (*(uint64_t (**)(void *))(*v6 + 24))(v6);
  v6[1] = v6[1] & 4 | result & 0xA6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::DeleteArcs(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::MutateCheck(a1);
  uint64_t v4 = *(void **)(a1 + 8);
  unint64_t v5 = *(void **)(v4[8] + 8 * a2);
  v5[1] = 0;
  void v5[2] = 0;
  v5[4] = v5[3];
  uint64_t result = (*(uint64_t (**)(void *))(*v4 + 24))(v4);
  v4[1] = v4[1] & 4 | result & 0xA6A5A950007;
  return result;
}

void fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::ReserveStates(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::MutateCheck(a1);
  uint64_t v4 = (void **)(*(void *)(a1 + 8) + 64);
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve(v4, a2);
}

void fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::ReserveArcs(uint64_t a1, int a2, unint64_t a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::MutateCheck(a1);
  uint64_t v6 = (uint64_t *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 24);
  std::vector<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::reserve(v6, a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::MutableInputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::MutableOutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::SetInputSymbols(uint64_t a1, uint64_t a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::MutateCheck(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  return fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetInputSymbols(v4, a2);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::SetOutputSymbols(uint64_t a1, uint64_t a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::MutateCheck(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  return fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetOutputSymbols(v4, a2);
}

void fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::InitMutableArcIterator()
{
}

void sub_1B1BA5134(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B1C402DF695F1);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::VectorFstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A3FB20;
  *(void *)(a1 + 8) = 0;
  uint64_t v2 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(void *)a1 = &unk_1F0A3A250;
  std::string::basic_string[abi:ne180100]<0>(&__str, "vector");
  std::string::operator=(v2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 8) = *(void *)(a1 + 8) & 4 | 0x156A5A950003;
  return a1;
}

void sub_1B1BA5234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::~VectorFstBaseImpl(v15);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::~VectorFstBaseImpl(void *a1)
{
  *a1 = &unk_1F0A3D050;
  uint64_t v2 = (void **)a1[9];
  if (v2 != (void **)a1[8])
  {
    unint64_t v3 = 0;
    uint64_t v2 = (void **)a1[8];
    do
    {
      fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Destroy(v2[v3++]);
      uint64_t v2 = (void **)a1[8];
    }
    while (v3 < (uint64_t)(a1[9] - (void)v2) >> 3);
  }
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  return fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~FstImpl((uint64_t)a1);
}

void fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::~VectorFstImpl(void *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::HasSequentialStates()
{
  return 1;
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Properties(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 8) & a2;
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::~VectorFstBaseImpl(void *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~FstImpl(uint64_t a1)
{
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~FstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~FstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A3FB20;
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

uint64_t fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Write(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  uint64_t v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  uint64_t v3 = (void *)fst::cerr(v2);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write stream method for ", 39);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
  int v6 = *(char *)(v5 + 23);
  if (v6 >= 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = *(void *)v5;
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    uint64_t v8 = *(void *)(v5 + 8);
  }
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

{
  fst *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *__p[2];
  char v12;
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  uint64_t v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  uint64_t v3 = (void *)fst::cerr(v2);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write filename method for ", 41);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
  int v6 = *(char *)(v5 + 23);
  if (v6 >= 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = *(void *)v5;
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    uint64_t v8 = *(void *)(v5 + 8);
  }
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_1B1BA5548(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B1BA5644(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::operator=(uint64_t a1)
{
  if (FLAGS_fst_error_fatal) {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
  }
  else {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  }
  uint64_t v2 = fst::LogMessage::LogMessage((fst *)&v7, (uint64_t)__p);
  uint64_t v3 = (void *)fst::cerr(v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"ImplToFst: Assignment operator disallowed", 41);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *(void *)(*(void *)(a1 + 8) + 8) |= 4uLL;
  return a1;
}

void sub_1B1BA5748(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::MutateCheck(uint64_t result)
{
  if (*(int *)(*(void *)(result + 8) + 56) >= 2) {
    operator new();
  }
  return result;
}

void sub_1B1BA5814(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::VectorFstImpl(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A3FB20;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)(a1 + 64) = 0;
  uint64_t v5 = (void *)(a1 + 64);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(void *)a1 = &unk_1F0A3A250;
  std::string::basic_string[abi:ne180100]<0>(&__str, "vector");
  std::string::operator=(v4, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetInputSymbols(a1, v6);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 120))(a2);
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetOutputSymbols(a1, v7);
  *(_DWORD *)(a1 + 88) = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 1, 0))
  {
    int v8 = fst::CountStates<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(a2);
    std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(a1 + 64), v8);
  }
  unsigned int v19 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 128))(a2, &v17);
  while (1)
  {
    if (!v17)
    {
      if ((int)v19 >= v18) {
        goto LABEL_31;
      }
LABEL_11:
      uint64_t v9 = v19;
      goto LABEL_12;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v17 + 16))(v17)) {
      break;
    }
    if (!v17) {
      goto LABEL_11;
    }
    uint64_t v9 = (*(uint64_t (**)(void))(*(void *)v17 + 24))();
LABEL_12:
    fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::AddState((void *)a1);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a2 + 32))(&v16, a2, v9);
    **(void **)(*v5 + 8 * (int)v9) = v16;
    unint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, v9);
    std::vector<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::reserve((uint64_t *)(*(void *)(*v5 + 8 * (int)v9) + 24), v10);
    std::string::size_type v15 = 0;
    (*(void (**)(uint64_t, uint64_t, std::string *))(*(void *)a2 + 136))(a2, v9, &__str);
    while (1)
    {
      if (!__str.__r_.__value_.__r.__words[0])
      {
        if (v15 >= __str.__r_.__value_.__r.__words[2]) {
          goto LABEL_24;
        }
LABEL_18:
        uint64_t v11 = __str.__r_.__value_.__l.__size_ + 20 * v15;
        goto LABEL_19;
      }
      if ((*(unsigned int (**)(std::string::size_type))(*(void *)__str.__r_.__value_.__l.__data_ + 24))(__str.__r_.__value_.__r.__words[0])) {
        break;
      }
      if (!__str.__r_.__value_.__r.__words[0]) {
        goto LABEL_18;
      }
      uint64_t v11 = (*(uint64_t (**)(void))(*(void *)__str.__r_.__value_.__l.__data_ + 32))();
LABEL_19:
      fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::AddArc(*(void **)(*v5 + 8 * (int)v9), v11);
      if (__str.__r_.__value_.__r.__words[0]) {
        (*(void (**)(std::string::size_type))(*(void *)__str.__r_.__value_.__l.__data_ + 40))(__str.__r_.__value_.__r.__words[0]);
      }
      else {
        ++v15;
      }
    }
    if (__str.__r_.__value_.__r.__words[0])
    {
      (*(void (**)(void))(*(void *)__str.__r_.__value_.__l.__data_ + 8))();
      goto LABEL_26;
    }
LABEL_24:
    if (v14) {
      --*v14;
    }
LABEL_26:
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 32))(v17);
    }
    else {
      ++v19;
    }
  }
  if (v17) {
    (*(void (**)(void))(*(void *)v17 + 8))();
  }
LABEL_31:
  *(void *)(a1 + 8) = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x3FFFFFFF0004, 0) | *(void *)(a1 + 8) & 4 | 3;
  return a1;
}

void sub_1B1BA5D1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::~VectorFstBaseImpl(v19);
  _Unwind_Resume(a1);
}

uint64_t fst::CountStates<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(uint64_t a1)
{
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 1, 0))
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 160);
    return v2(a1);
  }
  int v7 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v5);
  uint64_t v4 = 0;
  while (1)
  {
    while (!v5)
    {
      if (v7 >= v6) {
        return v4;
      }
      uint64_t v4 = (v4 + 1);
LABEL_12:
      ++v7;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 16))(v5)) {
      break;
    }
    uint64_t v4 = (v4 + 1);
    if (!v5) {
      goto LABEL_12;
    }
    (*(void (**)(void))(*(void *)v5 + 32))();
  }
  if (v5) {
    (*(void (**)(void))(*(void *)v5 + 8))();
  }
  return v4;
}

void sub_1B1BA5F64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    fst::CountStates<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>();
  }
  _Unwind_Resume(exception_object);
}

void std::vector<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - *a1) >> 2) < a2)
  {
    if (a2 >= 0xCCCCCCCCCCCCCCDLL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    uint64_t v11 = v3;
    long long __p = std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(v3, a2);
    int v8 = (char *)__p + v5;
    uint64_t v9 = (char *)__p + v5;
    unint64_t v10 = (char *)__p + 20 * v6;
    std::vector<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::__swap_out_circular_buffer(a1, &__p);
    if (v9 != v8) {
      uint64_t v9 = &v8[(v9 - v8 - 20) % 0x14uLL];
    }
    if (__p) {
      operator delete(__p);
    }
  }
}

void sub_1B1BA6054(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::AddArc(void *a1, uint64_t a2)
{
  if (!*(_DWORD *)a2) {
    ++a1[1];
  }
  if (!*(_DWORD *)(a2 + 4)) {
    ++a1[2];
  }
  unint64_t v3 = a1[4];
  if (v3 >= a1[5])
  {
    uint64_t result = std::vector<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::__push_back_slow_path<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> const&>(a1 + 3, a2);
  }
  else
  {
    *(void *)unint64_t v3 = *(void *)a2;
    *(void *)(v3 + 8) = *(void *)(a2 + 8);
    *(_DWORD *)(v3 + 16) = *(_DWORD *)(a2 + 16);
    uint64_t result = v3 + 20;
  }
  a1[4] = result;
  return result;
}

uint64_t std::vector<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::__push_back_slow_path<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 2);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xCCCCCCCCCCCCCCCLL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 2);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x666666666666666) {
    unint64_t v9 = 0xCCCCCCCCCCCCCCCLL;
  }
  else {
    unint64_t v9 = v5;
  }
  unsigned int v19 = a1 + 2;
  unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(v7, v9);
  uint64_t v11 = &v10[20 * v4];
  long long __p = v10;
  uint64_t v16 = v11;
  int v18 = &v10[20 * v12];
  *(void *)uint64_t v11 = *(void *)a2;
  *((void *)v11 + 1) = *(void *)(a2 + 8);
  *((_DWORD *)v11 + 4) = *(_DWORD *)(a2 + 16);
  uint64_t v17 = v11 + 20;
  std::vector<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::__swap_out_circular_buffer(a1, &__p);
  uint64_t v13 = a1[1];
  if (v17 != v16) {
    uint64_t v17 = &v16[(v17 - v16 - 20) % 0x14uLL];
  }
  if (__p) {
    operator delete(__p);
  }
  return v13;
}

void sub_1B1BA6248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t fst::TestProperties<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (FLAGS_fst_verify_properties)
  {
    unint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    unint64_t v7 = fst::ComputeProperties<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(a1, a2, a3, 0);
    if (!fst::CompatProperties(v6, v7))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      unint64_t v8 = fst::LogMessage::LogMessage((fst *)&v14, (uint64_t)__p);
      unint64_t v9 = (void *)fst::cerr(v8);
      unint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"TestProperties: stored Fst properties incorrect", 47);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" (stored: props1, computed: props2)", 35);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v14);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }
    return v7;
  }
  else
  {
    return fst::ComputeProperties<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(a1, a2, a3, 1);
  }
}

void sub_1B1BA63CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t fst::ComputeProperties<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  uint64_t v7 = a1;
  unint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  unint64_t v9 = v8;
  if (!a4
    || (uint64_t v10 = v8 & 0x3FFFFFFF0000 | (2 * v8) & 0x2AAAAAAA0000 | (v8 >> 1) & 0x155555550000 | 7, (a2 & ~v10) != 0))
  {
    unint64_t v9 = v8 & 7;
    unint64_t v72 = v9;
    int v11 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 16))(v7);
    if ((a2 & 0xF3C00000000) != 0 && v11)
    {
      uint64_t v67 = 0;
      uint64_t v68 = 0;
      unint64_t v69 = 0;
      unint64_t v70 = &v72;
      fst::DfsVisit<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SccVisitor<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(v7, (uint64_t)&v67);
    }
    if ((a2 & 0xFFFFF0C3FFFFFFF8) != 0)
    {
      uint64_t v12 = a2 & 0xC0000;
      uint64_t v13 = 0x10425A810000;
      if ((a2 & 0xC0000) != 0) {
        uint64_t v13 = 0x10425A850000;
      }
      unint64_t v14 = v9 | v13;
      uint64_t v15 = a2 & 0x300000;
      if ((a2 & 0x300000) != 0) {
        v14 |= 0x100000uLL;
      }
      unint64_t v72 = v14;
      memset(&v66, 0, sizeof(v66));
      memset(&v65, 0, sizeof(v65));
      unsigned int v64 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v7 + 128))(v7, &v62);
      int v16 = 0;
      uint64_t v61 = v7;
LABEL_12:
      if (v62)
      {
        if (!(*(unsigned int (**)(uint64_t))(*(void *)v62 + 16))(v62))
        {
          if (v62)
          {
            uint64_t v17 = (*(uint64_t (**)(void))(*(void *)v62 + 24))();
LABEL_18:
            std::vector<unsigned int>::size_type v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 40))(v7, v17);
            v66.__end_ = v66.__begin_;
            v65.__end_ = v65.__begin_;
            if (v12) {
              std::vector<int>::reserve(&v66, v18);
            }
            if (v15) {
              std::vector<int>::reserve(&v65, v18);
            }
            unint64_t v71 = 0;
            (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v7 + 136))(v7, v17, &v67);
            char v20 = 1;
            while (1)
            {
              if (v67)
              {
                if ((*(unsigned int (**)(uint64_t))(*(void *)v67 + 24))(v67))
                {
                  if (v67)
                  {
                    (*(void (**)(void))(*(void *)v67 + 8))();
                  }
                  else
                  {
LABEL_94:
                    if (v70) {
                      --*(_DWORD *)v70;
                    }
                  }
                  uint64_t v7 = v61;
                  if (v12
                    && (std::__sort<std::__less<int,int> &,int *>(),
                        (std::vector<unsigned int>::pointer)((char *)v66.__end_ - (char *)v66.__begin_) >= (std::vector<unsigned int>::pointer)5))
                  {
                    unint64_t v48 = v66.__end_ - v66.__begin_;
                    if (v48 <= 2) {
                      unint64_t v48 = 2;
                    }
                    std::vector<unsigned int>::pointer v49 = v66.__begin_ + 1;
                    unsigned int v50 = *v66.__begin_;
                    unint64_t v51 = v48 - 1;
                    while (1)
                    {
                      unsigned int v53 = *v49++;
                      unsigned int v52 = v53;
                      if (v53 == v50) {
                        break;
                      }
                      unsigned int v50 = v52;
                      if (!--v51) {
                        goto LABEL_103;
                      }
                    }
                    unint64_t v72 = v72 & 0xFFFFFFFFFFF3FFFFLL | 0x80000;
                    if (!v15)
                    {
LABEL_114:
                      if (v16 >= 1) {
                        unint64_t v72 = v72 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
                      }
                      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)v61 + 32))(&v67, v61, v17);
                      float v75 = *((float *)&v67 + 1);
                      unsigned __int32 v76 = v67;
                      int v74 = 2139095040;
                      float v73 = INFINITY;
                      if (*(float *)&v67 == INFINITY && v75 == v73)
                      {
                        if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v61 + 40))(v61, v17) != 1) {
                          unint64_t v72 = v72 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
                        }
                      }
                      else
                      {
                        float v75 = *((float *)&v67 + 1);
                        unsigned __int32 v76 = v67;
                        int v74 = 0;
                        float v73 = 0.0;
                        if (*(float *)&v67 != 0.0 || v75 != v73) {
                          unint64_t v72 = v72 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
                        }
                        ++v16;
                      }
                      if (v62) {
                        (*(void (**)(uint64_t))(*(void *)v62 + 32))(v62);
                      }
                      else {
                        ++v64;
                      }
                      goto LABEL_12;
                    }
                  }
                  else
                  {
LABEL_103:
                    if (!v15) {
                      goto LABEL_114;
                    }
                  }
                  std::__sort<std::__less<int,int> &,int *>();
                  if ((std::vector<unsigned int>::pointer)((char *)v65.__end_ - (char *)v65.__begin_) >= (std::vector<unsigned int>::pointer)5)
                  {
                    unint64_t v54 = v65.__end_ - v65.__begin_;
                    if (v54 <= 2) {
                      unint64_t v54 = 2;
                    }
                    std::vector<unsigned int>::pointer v55 = v65.__begin_ + 1;
                    unsigned int v56 = *v65.__begin_;
                    unint64_t v57 = v54 - 1;
                    while (1)
                    {
                      unsigned int v59 = *v55++;
                      unsigned int v58 = v59;
                      if (v59 == v56) {
                        break;
                      }
                      unsigned int v56 = v58;
                      if (!--v57) {
                        goto LABEL_114;
                      }
                    }
                    unint64_t v72 = v72 & 0xFFFFFFFFFFCFFFFFLL | 0x200000;
                  }
                  goto LABEL_114;
                }
                if (v67)
                {
                  int32x2_t v21 = (int *)(*(uint64_t (**)(void))(*(void *)v67 + 32))();
                  goto LABEL_29;
                }
              }
              else if (v71 >= v69)
              {
                goto LABEL_94;
              }
              int32x2_t v21 = (int *)(v68 + 20 * v71);
LABEL_29:
              int v22 = *v21;
              int v23 = *v21;
              if (*v21 != v21[1])
              {
                unint64_t v72 = v72 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
                int v23 = v21[1];
              }
              if (v22 | v23)
              {
                if (v22)
                {
                  if (v23) {
                    goto LABEL_35;
                  }
                  goto LABEL_39;
                }
                unint64_t v24 = v72;
              }
              else
              {
                unint64_t v24 = v72 & 0xFFFFFFFFFF3FFFFFLL | 0x400000;
              }
              unint64_t v72 = v24 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
              if (v23)
              {
LABEL_35:
                if (v20) {
                  goto LABEL_44;
                }
                goto LABEL_40;
              }
LABEL_39:
              unint64_t v72 = v72 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
              if (v20) {
                goto LABEL_44;
              }
LABEL_40:
              if (v22 < (int)v9) {
                unint64_t v72 = v72 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
              }
              if (v23 < SHIDWORD(v9)) {
                unint64_t v72 = v72 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
              }
LABEL_44:
              unsigned __int32 v76 = 0;
              v19.n128_u32[0] = v21[2];
              float v25 = *((float *)v21 + 3);
              unsigned __int32 v76 = v19.n128_u32[0];
              float v75 = v25;
              int v74 = 0;
              float v73 = 0.0;
              if (v19.n128_f32[0] != 0.0 || v75 != v73)
              {
                unsigned __int32 v76 = v19.n128_u32[0];
                float v75 = v25;
                int v74 = 2139095040;
                float v73 = INFINITY;
                if (v19.n128_f32[0] != INFINITY || (v19.n128_f32[0] = v75, v75 != v73)) {
                  unint64_t v72 = v72 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
                }
              }
              int v26 = v21[4];
              if (v26 <= (int)v17) {
                unint64_t v72 = v72 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
              }
              if (v26 != v17 + 1) {
                unint64_t v72 = v72 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
              }
              unint64_t v9 = *(void *)v21;
              if (v12)
              {
                std::vector<unsigned int>::pointer end = v66.__end_;
                if (v66.__end_ >= v66.__end_cap_.__value_)
                {
                  std::vector<unsigned int>::pointer begin = v66.__begin_;
                  int64_t v30 = v66.__end_ - v66.__begin_;
                  unint64_t v31 = v30 + 1;
                  if ((unint64_t)(v30 + 1) >> 62) {
                    goto LABEL_139;
                  }
                  int64_t v32 = (char *)v66.__end_cap_.__value_ - (char *)v66.__begin_;
                  if (((char *)v66.__end_cap_.__value_ - (char *)v66.__begin_) >> 1 > v31) {
                    unint64_t v31 = v32 >> 1;
                  }
                  if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v33 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v33 = v31;
                  }
                  if (v33)
                  {
                    int32x2_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v66.__end_cap_, v33);
                    std::vector<unsigned int>::pointer begin = v66.__begin_;
                    std::vector<unsigned int>::pointer end = v66.__end_;
                    LODWORD(v35) = *v21;
                  }
                  else
                  {
                    int32x2_t v34 = 0;
                    unint64_t v35 = *(void *)v21;
                  }
                  float v36 = (unsigned int *)&v34[4 * v30];
                  *float v36 = v35;
                  unint64_t v28 = v36 + 1;
                  while (end != begin)
                  {
                    unsigned int v37 = *--end;
                    *--float v36 = v37;
                  }
                  v66.__begin_ = v36;
                  v66.__end_ = v28;
                  v66.__end_cap_.__value_ = (unsigned int *)&v34[4 * v33];
                  if (begin) {
                    operator delete(begin);
                  }
                }
                else
                {
                  *v66.__end_ = v9;
                  unint64_t v28 = end + 1;
                }
                v66.__end_ = v28;
              }
              if (v15)
              {
                std::vector<unsigned int>::pointer v38 = v65.__end_;
                if (v65.__end_ >= v65.__end_cap_.__value_)
                {
                  std::vector<unsigned int>::pointer v40 = v65.__begin_;
                  int64_t v41 = v65.__end_ - v65.__begin_;
                  unint64_t v42 = v41 + 1;
                  if ((unint64_t)(v41 + 1) >> 62) {
LABEL_139:
                  }
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  int64_t v43 = (char *)v65.__end_cap_.__value_ - (char *)v65.__begin_;
                  if (((char *)v65.__end_cap_.__value_ - (char *)v65.__begin_) >> 1 > v42) {
                    unint64_t v42 = v43 >> 1;
                  }
                  if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v44 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v44 = v42;
                  }
                  if (v44)
                  {
                    int v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v65.__end_cap_, v44);
                    std::vector<unsigned int>::pointer v40 = v65.__begin_;
                    std::vector<unsigned int>::pointer v38 = v65.__end_;
                  }
                  else
                  {
                    int v45 = 0;
                  }
                  float v46 = (unsigned int *)&v45[4 * v41];
                  *float v46 = v21[1];
                  uint64_t v39 = v46 + 1;
                  while (v38 != v40)
                  {
                    unsigned int v47 = *--v38;
                    *--float v46 = v47;
                  }
                  v65.__begin_ = v46;
                  v65.__end_ = v39;
                  v65.__end_cap_.__value_ = (unsigned int *)&v45[4 * v44];
                  if (v40) {
                    operator delete(v40);
                  }
                }
                else
                {
                  *v65.__end_ = v21[1];
                  uint64_t v39 = v38 + 1;
                }
                v65.__end_ = v39;
              }
              if (v67)
              {
                (*(void (**)(uint64_t, __n128))(*(void *)v67 + 40))(v67, v19);
                char v20 = 0;
              }
              else
              {
                char v20 = 0;
                ++v71;
              }
            }
          }
LABEL_17:
          uint64_t v17 = v64;
          goto LABEL_18;
        }
        if (v62) {
          (*(void (**)(void))(*(void *)v62 + 8))();
        }
      }
      else if ((int)v64 < v63)
      {
        goto LABEL_17;
      }
      if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 24))(v7) != -1
        && (*(unsigned int (**)(uint64_t))(*(void *)v7 + 24))(v7))
      {
        unint64_t v72 = v72 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
      }
      if (v65.__begin_)
      {
        v65.__end_ = v65.__begin_;
        operator delete(v65.__begin_);
      }
      if (v66.__begin_)
      {
        v66.__end_ = v66.__begin_;
        operator delete(v66.__begin_);
      }
      unint64_t v9 = v72;
    }
    uint64_t v10 = v9 & 0x3FFFFFFF0000 | (2 * v9) & 0x2AAAAAAA0000 | (v9 >> 1) & 0x155555550000 | 7;
  }
  *a3 = v10;
  return v9;
}

void sub_1B1BA6DE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a21) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

void fst::DfsVisit<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SccVisitor<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2)
{
}

void sub_1B1BA7728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::~MemoryPool((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va1);
  int v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(void *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

void fst::SccVisitor<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::InitVisit(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1) {
    *(void *)(*(void *)a1 + 8) = **(void **)a1;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    *(void *)(v3 + 8) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    *(void *)(v4 + 8) = 0;
    *(unsigned char *)(a1 + --*(_DWORD *)(a9 + 52) = 0;
    **(void **)(a1 + ++*(_DWORD *)(result + 24) = **(void **)(a1 + 24) & 0xFFFFF0C3FFFFFFFFLL | 0x52800000000;
    *(void *)(a1 + 32) = a2;
    int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
    *(_DWORD *)(a1 + 44) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 40) = v5;
    operator new();
  }
  operator new();
}

unint64_t fst::SccVisitor<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::FinishState(uint64_t a1, int a2, int a3)
{
  unint64_t result = (unint64_t)(*(void *(**)(uint64_t *__return_ptr))(**(void **)(a1 + 32) + 32))(&v22);
  float v25 = *((float *)&v22 + 1);
  int v26 = v22;
  int v24 = 2139095040;
  float v23 = INFINITY;
  if (*(float *)&v22 == INFINITY && v25 == v23)
  {
    unint64_t v7 = a2;
  }
  else
  {
    unint64_t v7 = a2;
    *(void *)(**(void **)(a1 + 16) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  }
  uint64_t v8 = **(void **)(a1 + 64);
  if (*(_DWORD *)(**(void **)(a1 + 56) + 4 * v7) != *(_DWORD *)(v8 + 4 * v7)) {
    goto LABEL_17;
  }
  char v9 = 0;
  uint64_t v10 = *(void **)(a1 + 80);
  uint64_t v11 = v10[1];
  uint64_t v12 = **(void **)(a1 + 16);
  uint64_t v13 = (int *)(((v11 - *v10) & 0xFFFFFFFFFFFFFFFCLL) + *v10 - 4);
  do
  {
    unint64_t v14 = *v13--;
    v9 |= *(void *)(v12 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v14;
  }
  while (v14 != a2);
  uint64_t v15 = *(void **)a1;
  uint64_t v16 = **(void **)(a1 + 72);
  for (uint64_t i = (int *)(v11 - 4); ; --i)
  {
    unint64_t v18 = *i;
    if (v15) {
      *(_DWORD *)(*v15 + 4 * v18) = *(_DWORD *)(a1 + 48);
    }
    unint64_t result = v18 >> 6;
    uint64_t v19 = 1 << v18;
    if ((v9 & 1) == 0) {
      break;
    }
    *(void *)(v12 + 8 * result) |= v19;
    *(void *)(v16 + 8 * result) &= ~v19;
    if (v18 == a2)
    {
      v10[1] = i;
      goto LABEL_16;
    }
LABEL_14:
    ;
  }
  *(void *)(v16 + 8 * result) &= ~v19;
  if (v18 != a2) {
    goto LABEL_14;
  }
  v10[1] = i;
  **(void **)(a1 + ++*(_DWORD *)(result + 24) = **(void **)(a1 + 24) & 0xFFFFF3FFFFFFFFFFLL | 0x80000000000;
LABEL_16:
  ++*(_DWORD *)(a1 + 48);
LABEL_17:
  if (a3 != -1)
  {
    uint64_t v20 = **(void **)(a1 + 16);
    if ((*(void *)(v20 + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v7)) {
      *(void *)(v20 + (((unint64_t)a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a3;
    }
    int v21 = *(_DWORD *)(v8 + 4 * v7);
    if (v21 < *(_DWORD *)(v8 + 4 * a3)) {
      *(_DWORD *)(v8 + 4 * a3) = v21;
    }
  }
  return result;
}

void fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::~MemoryPool(quasar::Bitmap *a1)
{
  *(void *)a1 = &unk_1F0A36C98;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::Link>::~MemoryArena((void *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_1F0A36C98;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::Link>::~MemoryArena((void *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::MemoryPool(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A36C98;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::Link>::MemoryArena(a1 + 1, a2);
}

void sub_1B1BA7BFC(_Unwind_Exception *a1)
{
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::Size()
{
  return 48;
}

void fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::Link>::MemoryArena(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A37C50;
  a1[1] = 56 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_1B1BA7D14(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::Link>::~MemoryArena(void *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1B3EA8670);
}

{
  void *v2;
  void *i;
  uint64_t v4;
  uint64_t vars8;

  *a1 = &unk_1F0A37C50;
  uint64_t v2 = a1 + 3;
  for (uint64_t i = (void *)a1[4]; i != v2; uint64_t i = (void *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x1B3EA8630](v4, 0x1000C8077774924);
    }
  }
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::Link>::Size()
{
  return 56;
}

void std::deque<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>> *>>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>> *>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>> *>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    char v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      int32x2_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      unint64_t v35 = &v34[8 * (v33 >> 2)];
      unsigned int v37 = &v34[8 * v36];
      std::vector<unsigned int>::pointer v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        int64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)int64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    unint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      int32x2_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      unint64_t v35 = &v34[8 * (v46 >> 2)];
      unsigned int v37 = &v34[8 * v47];
      unint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      int64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unsigned int v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  unsigned int v53 = operator new(0x1000uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1B1BA815C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::ArcBuffer<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::SetFromFst<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t **))(*(void *)a2 + 136))(a2, a3, &v25);
  if (!v25 && (a4 & 1) == 0)
  {
    uint64_t v10 = v26 + 20 * v27;
    *(void *)(a1 + 16) = v26;
    *(void *)(a1 + ++*(_DWORD *)(result + 24) = v10;
    if (*(void *)a1)
    {
      free(*(void **)a1);
      *(void *)a1 = 0;
    }
    *(void *)(a1 + 8) = 0;
    return;
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, a3);
  uint64_t v12 = a5;
  if (!a4) {
    uint64_t v12 = 0;
  }
  unint64_t v13 = v11 + v12;
  if (*(void *)(a1 + 8) < (unint64_t)(v11 + v12))
  {
    if (*(void *)a1) {
      free(*(void **)a1);
    }
    uint64_t v24 = 0x4000;
    if (v13 > 0x4000) {
      uint64_t v24 = v13;
    }
    *(void *)(a1 + 8) = v24;
    uint64_t v15 = malloc_type_malloc(20 * v24, 0x1000040A86A77D5uLL);
    *(void *)a1 = v15;
    *(void *)(a1 + 16) = v15;
    BOOL v14 = v15;
  }
  else
  {
    BOOL v14 = *(_DWORD **)(a1 + 16);
    uint64_t v15 = *(_DWORD **)a1;
  }
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = &v14[5 * v13];
  uint64_t v16 = v25;
  uint64_t v17 = v26;
  unint64_t v19 = v27;
  uint64_t v18 = v28;
  if (v28) {
    ++*v28;
  }
  unint64_t v20 = 0;
LABEL_13:
  v15 += 5;
  while (v16)
  {
    int v21 = (*(uint64_t (**)(uint64_t *))(*v16 + 24))(v16);
    uint64_t v22 = *v16;
    if (v21)
    {
      (*(void (**)(uint64_t *))(v22 + 8))(v16);
      return;
    }
    uint64_t v23 = (*(uint64_t (**)(uint64_t *))(v22 + 32))(v16);
LABEL_18:
    *(void *)(v15 - 5) = *(void *)v23;
    *(void *)(v15 - 3) = *(void *)(v23 + 8);
    *(v15 - 1) = *(_DWORD *)(v23 + 16);
    if (!v16)
    {
      ++v20;
      goto LABEL_13;
    }
    v15 += 5;
    (*(void (**)(uint64_t *))(*v16 + 40))(v16);
  }
  uint64_t v23 = v17 + 20 * v20;
  if (v20 < v19) {
    goto LABEL_18;
  }
  if (v18) {
    --*v18;
  }
}

void sub_1B1BA8424(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::WriteFst<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>(void *a1, void *a2, uint64_t a3)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  long long v35 = 0u;
  long long v34 = 0u;
  *(_OWORD *)unint64_t v33 = 0u;
  *(_OWORD *)long long v32 = 0u;
  uint64_t v6 = -1;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v36 = -1;
  uint64_t v36 = (*(int (**)(void *))(*a1 + 24))(a1);
  uint64_t v37 = -1;
  if ((*(uint64_t (**)(void *, uint64_t, void))(*a1 + 64))(a1, 1, 0))
  {
    uint64_t v6 = 0;
LABEL_3:
    int v7 = 0;
    uint64_t v37 = (int)fst::CountStates<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>((uint64_t)a1);
    goto LABEL_6;
  }
  unint64_t v8 = (char *)a2 + *(void *)(*a2 - 24);
  if ((v8[32] & 5) == 0)
  {
    (*(void (**)(std::string *__return_ptr))(**((void **)v8 + 5) + 32))(__p);
    uint64_t v6 = v41;
    if (v41 != -1) {
      goto LABEL_3;
    }
  }
  int v7 = 1;
LABEL_6:
  uint64_t v9 = (*(uint64_t (**)(void *, uint64_t, void))(*a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  uint64_t v10 = v9 | 3;
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::WriteFstHeader((uint64_t)a1, (uint64_t)a2, (unsigned char *)a3, 2, __p, v10, (uint64_t)v31);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  unint64_t v11 = *(void *)(a1[1] + 72) - *(void *)(a1[1] + 64);
  unint64_t v12 = v11 >> 3;
  if ((int)(v11 >> 3) < 1)
  {
    LODWORD(v12) = 0;
  }
  else
  {
    int v30 = v7;
    uint64_t v13 = 0;
    uint64_t v14 = (v11 >> 3);
    do
    {
      (*(void (**)(std::string *__return_ptr, void *, uint64_t))(*a1 + 32))(__p, a1, v13);
      int data = (int)__p[0].__r_.__value_.__l.__data_;
      std::ostream::write();
      int data = HIDWORD(__p[0].__r_.__value_.__r.__words[0]);
      std::ostream::write();
      __p[0].__r_.__value_.__r.__words[0] = (*(uint64_t (**)(void *, uint64_t))(*a1 + 40))(a1, v13);
      std::ostream::write();
      uint64_t v15 = *(void *)(*(void *)(*(void *)(a1[1] + 64) + 8 * v13) + 24);
      uint64_t v16 = *(void *)(*(void *)(*(void *)(a1[1] + 64) + 8 * v13) + 32) - v15;
      if (v16)
      {
        unint64_t v17 = v16 / 20;
        if (v17 <= 1) {
          uint64_t v18 = 1;
        }
        else {
          uint64_t v18 = v17;
        }
        uint64_t v19 = v15 + 8;
        do
        {
          LODWORD(__p[0].__r_.__value_.__l.__data_) = *(_DWORD *)(v19 - 8);
          std::ostream::write();
          LODWORD(__p[0].__r_.__value_.__l.__data_) = *(_DWORD *)(v19 - 4);
          std::ostream::write();
          fst::LatticeWeightTpl<float>::Write(v19, (uint64_t)a2);
          LODWORD(__p[0].__r_.__value_.__l.__data_) = *(_DWORD *)(v19 + 8);
          std::ostream::write();
          v19 += 20;
          --v18;
        }
        while (v18);
      }
      ++v13;
    }
    while (v13 != v14);
    int v7 = v30;
  }
  std::ostream::flush();
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    unint64_t v20 = fst::LogMessage::LogMessage((fst *)&data, (uint64_t)__p);
    int v21 = (void *)fst::cerr(v20);
    uint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"VectorFst::Write: write failed: ", 32);
    int v23 = *(char *)(a3 + 23);
    if (v23 >= 0) {
      uint64_t v24 = a3;
    }
    else {
      uint64_t v24 = *(void *)a3;
    }
    if (v23 >= 0) {
      uint64_t v25 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v25 = *(void *)(a3 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, v24, v25);
LABEL_27:
    fst::LogMessage::~LogMessage((fst::LogMessage *)&data);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    uint64_t updated = 0;
    goto LABEL_30;
  }
  if (!v7)
  {
    if (v37 == v12)
    {
      uint64_t updated = 1;
      goto LABEL_30;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    uint64_t v28 = fst::LogMessage::LogMessage((fst *)&data, (uint64_t)__p);
    uint64_t v29 = (void *)fst::cerr(v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Inconsistent number of states observed during write", 51);
    goto LABEL_27;
  }
  uint64_t v37 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  uint64_t updated = fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::UpdateFstHeader((uint64_t)a1, a2, a3, 2, __p, v10, (uint64_t)v31, v6);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
LABEL_30:
  if (SHIBYTE(v34) < 0) {
    operator delete(v33[1]);
  }
  if (SHIBYTE(v33[0]) < 0) {
    operator delete(v32[0]);
  }
  return updated;
}

void sub_1B1BA8938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  fst::FstHeader::~FstHeader(&a11);
  _Unwind_Resume(a1);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::WriteFstHeader(uint64_t a1, uint64_t a2, unsigned char *a3, int a4, std::string *__str, uint64_t a6, uint64_t a7)
{
  if (a3[24])
  {
    std::string::operator=((std::string *)(a7 + 8), __str);
    uint64_t v13 = (const std::string *)fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Type();
    std::string::operator=((std::string *)(a7 + 32), v13);
    *(_DWORD *)(a7 + 56) = a4;
    *(void *)(a7 + 64) = a6;
    if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1)) {
      BOOL v14 = a3[25] == 0;
    }
    else {
      BOOL v14 = 1;
    }
    int v15 = !v14;
    uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
    if (a3[26]) {
      BOOL v17 = v16 == 0;
    }
    else {
      BOOL v17 = 1;
    }
    int v18 = v15 | 2;
    if (v17) {
      int v18 = v15;
    }
    if (a3[27]) {
      v18 |= 4u;
    }
    *(_DWORD *)(a7 + 60) = v18;
    fst::FstHeader::Write();
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1)) {
    BOOL v19 = a3[25] == 0;
  }
  else {
    BOOL v19 = 1;
  }
  if (!v19)
  {
    uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 72))(v20, a2);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  if (result && a3[26])
  {
    uint64_t v22 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1) + 72);
    return v22();
  }
  return result;
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::UpdateFstHeader(uint64_t a1, void *a2, uint64_t a3, int a4, std::string *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  MEMORY[0x1B3EA7E70](v32);
  uint64_t v16 = (char *)a2 + *(void *)(*a2 - 24);
  if ((v16[32] & 5) == 0)
  {
    uint64_t v17 = *((void *)v16 + 5);
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long __p = 0u;
    long long v35 = 0u;
    uint64_t v42 = a8;
    (*(void (**)(void *__return_ptr))(*(void *)v17 + 40))(v33);
    if (v33[16] == -1) {
      std::ios_base::clear((std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32) | 4);
    }
  }
  MEMORY[0x1B3EA7E80](v32);
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    int v18 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
    BOOL v19 = (void *)fst::cerr(v18);
    uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
    int v21 = *(char *)(a3 + 23);
    if (v21 >= 0) {
      uint64_t v22 = a3;
    }
    else {
      uint64_t v22 = *(void *)a3;
    }
    if (v21 >= 0) {
      uint64_t v23 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v23 = *(void *)(a3 + 8);
    }
  }
  else
  {
    fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::WriteFstHeader(a1, (uint64_t)a2, (unsigned char *)a3, a4, a5, a6, a7);
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      uint64_t v24 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
      uint64_t v25 = (void *)fst::cerr(v24);
      uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      int v26 = *(char *)(a3 + 23);
      if (v26 >= 0) {
        uint64_t v22 = a3;
      }
      else {
        uint64_t v22 = *(void *)a3;
      }
      if (v26 >= 0) {
        uint64_t v23 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v23 = *(void *)(a3 + 8);
      }
    }
    else
    {
      MEMORY[0x1B3EA7E70](v33, a2);
      unint64_t v27 = (char *)a2 + *(void *)(*a2 - 24);
      if ((v27[32] & 5) == 0)
      {
        (*(void (**)(long long *__return_ptr))(**((void **)v27 + 5) + 32))(&__p);
        if (v42 == -1) {
          std::ios_base::clear((std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32) | 4);
        }
      }
      MEMORY[0x1B3EA7E80](v33);
      if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) == 0) {
        return 1;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      uint64_t v28 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
      uint64_t v29 = (void *)fst::cerr(v28);
      uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      int v30 = *(char *)(a3 + 23);
      if (v30 >= 0) {
        uint64_t v22 = a3;
      }
      else {
        uint64_t v22 = *(void *)a3;
      }
      if (v30 >= 0) {
        uint64_t v23 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v23 = *(void *)(a3 + 8);
      }
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v22, v23);
  fst::LogMessage::~LogMessage((fst::LogMessage *)v33);
  if (SBYTE7(v35) < 0) {
    operator delete((void *)__p);
  }
  return 0;
}

void sub_1B1BA8F64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
}

uint64_t fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Type()
{
  {
    operator new();
  }
  return fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Type(void)::type;
}

void sub_1B1BA9058(_Unwind_Exception *a1)
{
}

uint64_t fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::WriteFile(fst *a1, uint64_t a2)
{
  v25[19] = *MEMORY[0x1E4F143B8];
  if (*(char *)(a2 + 23) < 0)
  {
    if (*(void *)(a2 + 8))
    {
LABEL_5:
      std::ofstream::basic_ofstream((uint64_t *)&v20);
      if ((v24[*(void *)(v20.__r_.__value_.__r.__words[0] - 24)] & 5) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
        unint64_t v4 = fst::LogMessage::LogMessage((fst *)&v19, (uint64_t)&__p);
        uint64_t v5 = (void *)fst::cerr(v4);
        uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Fst::Write: Can't open file: ", 29);
        int v7 = *(char *)(a2 + 23);
        if (v7 >= 0) {
          unint64_t v8 = (const std::string::value_type *)a2;
        }
        else {
          unint64_t v8 = *(const std::string::value_type **)a2;
        }
        if (v7 >= 0) {
          uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          uint64_t v9 = *(void *)(a2 + 8);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v8, v9);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v19);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        uint64_t v10 = 0;
      }
      else
      {
        char v13 = FLAGS_fst_align;
        if (*(char *)(a2 + 23) < 0) {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
        }
        else {
          std::string __p = *(std::string *)a2;
        }
        __int16 v16 = 257;
        char v17 = 1;
        char v18 = v13;
        uint64_t v10 = (*(uint64_t (**)(fst *, std::string *, std::string *))(*(void *)a1 + 96))(a1, &v20, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      v20.__r_.__value_.__r.__words[0] = *MEMORY[0x1E4FBA400];
      *(std::string::size_type *)((char *)v20.__r_.__value_.__r.__words
                                + *(void *)(v20.__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x1E4FBA400]
                                                                                                  + 24);
      MEMORY[0x1B3EA7CF0](&v20.__r_.__value_.__r.__words[1]);
      std::ostream::~ostream();
      MEMORY[0x1B3EA8520](v25);
      return v10;
    }
  }
  else if (*(unsigned char *)(a2 + 23))
  {
    goto LABEL_5;
  }
  uint64_t v11 = fst::cout(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "standard output");
  char v12 = FLAGS_fst_align;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v20, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v20 = __p;
  }
  __int16 v21 = 257;
  char v22 = 1;
  char v23 = v12;
  uint64_t v10 = (*(uint64_t (**)(fst *, uint64_t, std::string *))(*(void *)a1 + 96))(a1, v11, &v20);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v10;
}

void sub_1B1BA93A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::SetFinal(uint64_t *a1, int a2, uint64_t *a3)
{
  uint64_t v5 = *(uint64_t **)(a1[8] + 8 * a2);
  uint64_t v6 = *a1;
  uint64_t v7 = *v5;
  uint64_t *v5 = *a3;
  unint64_t v8 = (*(uint64_t (**)(void))(v6 + 24))();
  uint64_t v10 = *a3;
  uint64_t v11 = v7;
  uint64_t result = fst::SetFinalProperties<fst::LatticeWeightTpl<float>>(v8, (float *)&v11, (float *)&v10);
  a1[1] = a1[1] & 4 | result;
  return result;
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::AddArc(void *a1, int a2, float *a3)
{
  uint64_t v6 = *(void *)(*(void *)(a1[8] + 8 * a2) + 32);
  if (v6 == *(void *)(*(void *)(a1[8] + 8 * a2) + 24)) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = (_DWORD *)(v6 - 20);
  }
  unint64_t v8 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
  a1[1] = a1[1] & 4 | fst::AddArcProperties<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(v8, a2, a3, v7);
  uint64_t v9 = *(void **)(a1[8] + 8 * a2);
  return fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::AddArc(v9, (uint64_t)a3);
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::DeleteStates(uint64_t a1, char **a2)
{
  unint64_t v4 = (uint64_t *)(a1 + 64);
  std::vector<int>::size_type v5 = (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 3;
  std::vector<int>::value_type __x = 0;
  std::vector<int>::vector(&v33, v5, &__x);
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1] - *a2;
  if (v7)
  {
    unint64_t v8 = v7 >> 2;
    std::vector<int>::pointer begin = v33.__begin_;
    if (v8 <= 1) {
      unint64_t v8 = 1;
    }
    do
    {
      uint64_t v10 = *(int *)v6;
      v6 += 4;
      begin[v10] = -1;
      --v8;
    }
    while (v8);
  }
  uint64_t v11 = *(void *)(a1 + 64);
  if (*(void *)(a1 + 72) == v11)
  {
    int v13 = 0;
  }
  else
  {
    unint64_t v12 = 0;
    int v13 = 0;
    do
    {
      if (v33.__begin_[v12] == -1)
      {
        fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Destroy(*(void **)(v11 + 8 * v12));
      }
      else
      {
        v33.__begin_[v12] = v13;
        if (v12 != v13) {
          *(void *)(v11 + 8 * v13) = *(void *)(v11 + 8 * v12);
        }
        ++v13;
      }
      ++v12;
      uint64_t v11 = *(void *)(a1 + 64);
    }
    while (v12 < (*(void *)(a1 + 72) - v11) >> 3);
  }
  std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)v4, v13);
  uint64_t v14 = *(void *)(a1 + 64);
  if (*(void *)(a1 + 72) != v14)
  {
    unint64_t v15 = 0;
    do
    {
      uint64_t v16 = *(void *)(v14 + 8 * v15);
      uint64_t v18 = *(void *)(v16 + 24);
      uint64_t v17 = *(void *)(v16 + 32);
      int64x2_t v19 = *(int64x2_t *)(v16 + 8);
      uint64_t v20 = v17 - v18;
      if (v17 == v18)
      {
        int64x2_t v31 = *(int64x2_t *)(v16 + 8);
        uint64_t v27 = 0;
        unint64_t v28 = 0xCCCCCCCCCCCCCCCDLL * (v20 >> 2);
      }
      else
      {
        unint64_t v21 = 0;
        uint64_t v27 = 0;
        char v22 = (int *)(v18 + 16);
        do
        {
          int v23 = v33.__begin_[*v22];
          if (v23 == -1)
          {
            uint64_t v25 = *((void *)v22 - 2);
            v26.i64[0] = v25;
            v26.i64[1] = HIDWORD(v25);
            int64x2_t v19 = vaddq_s64(v19, vceqzq_s64(v26));
          }
          else
          {
            *char v22 = v23;
            if (v21 != v27)
            {
              uint64_t v24 = v18 + 20 * v27;
              *(void *)uint64_t v24 = *((void *)v22 - 2);
              *(void *)(v24 + 8) = *((void *)v22 - 1);
              *(_DWORD *)(v24 + 16) = v23;
              uint64_t v14 = *v4;
            }
            ++v27;
          }
          ++v21;
          uint64_t v16 = *(void *)(v14 + 8 * v15);
          unint64_t v28 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v16 + 32) - *(void *)(v16 + 24)) >> 2);
          v22 += 5;
        }
        while (v21 < v28);
        int64x2_t v31 = v19;
      }
      fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::DeleteArcs((void *)v16, v28 - v27);
      uint64_t v14 = *(void *)(a1 + 64);
      *(int64x2_t *)(*(void *)(v14 + 8 * v15++) + 8) = v31;
    }
    while (v15 < (*(void *)(a1 + 72) - v14) >> 3);
  }
  uint64_t v29 = *(int *)(a1 + 88);
  if (v29 == -1)
  {
    int v30 = v33.__begin_;
    if (!v33.__begin_) {
      return;
    }
  }
  else
  {
    int v30 = v33.__begin_;
    *(_DWORD *)(a1 + 88) = v33.__begin_[v29];
  }
  v33.__end_ = v30;
  operator delete(v30);
}

void sub_1B1BA9788(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>::~MutableArcIterator()
{
}

uint64_t fst::ArcIteratorBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Reinit()
{
  return 0;
}

BOOL fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>::Done_(uint64_t a1)
{
  return *(void *)(a1 + 24) >= 0xCCCCCCCCCCCCCCCDLL
                               * ((uint64_t)(*(void *)(*(void *)(a1 + 8) + 32)
                                          - *(void *)(*(void *)(a1 + 8) + 24)) >> 2);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>::Value_(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 24) + 20 * *(void *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>::Next_(uint64_t result)
{
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>::Position_(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>::Reset_(uint64_t result)
{
  *(void *)(result + ++*(void *)(result + 24) = 0;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>::Seek_(uint64_t result, uint64_t a2)
{
  *(void *)(result + ++*(void *)(result + 24) = a2;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>::Flags_()
{
  return 15;
}

double std::vector<fst::LatticeWeightTpl<float>>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, double *a4)
{
  unint64_t v4 = *(double **)(a1 + 8);
  uint64_t v5 = (char *)v4 - (char *)a4;
  uint64_t v6 = (double *)(a2 + (char *)v4 - (char *)a4);
  uint64_t v7 = v4;
  while ((unint64_t)v6 < a3)
  {
    double v8 = *v6++;
    double result = v8;
    *v7++ = v8;
  }
  *(void *)(a1 + 8) = v7;
  if (v4 != a4)
  {
    uint64_t v10 = v4 - 1;
    uint64_t v11 = 8 * (v5 >> 3);
    do
    {
      double result = *(double *)(a2 - 8 + v11);
      *v10-- = result;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t *std::vector<fst::LatticeWeightTpl<float>>::__swap_out_circular_buffer(uint64_t **a1, void *a2, uint64_t *a3)
{
  double result = (uint64_t *)a2[1];
  uint64_t v5 = *a1;
  uint64_t v6 = result;
  if (*a1 != a3)
  {
    uint64_t v7 = a3;
    uint64_t v6 = (uint64_t *)a2[1];
    do
    {
      uint64_t v8 = *--v7;
      *--uint64_t v6 = v8;
    }
    while (v7 != v5);
  }
  a2[1] = v6;
  uint64_t v9 = a1[1];
  for (uint64_t i = (void *)a2[2]; a3 != v9; ++i)
  {
    uint64_t v11 = *a3++;
    *uint64_t i = v11;
  }
  a2[2] = i;
  unint64_t v12 = *a1;
  *a1 = v6;
  a2[1] = v12;
  int v13 = a1[1];
  a1[1] = (uint64_t *)a2[2];
  a2[2] = v13;
  uint64_t v14 = a1[2];
  a1[2] = (uint64_t *)a2[3];
  a2[3] = v14;
  *a2 = a2[1];
  return result;
}

uint64_t std::vector<std::pair<int,fst::LatticeWeightTpl<float>>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = a1[1];
  if (v3 >= a1[2])
  {
    uint64_t result = std::vector<std::pair<int,fst::LatticeWeightTpl<float>>>::__push_back_slow_path<std::pair<int,fst::LatticeWeightTpl<float>>>(a1, a2);
  }
  else
  {
    *(_DWORD *)unint64_t v3 = *(_DWORD *)a2;
    *(void *)(v3 + 4) = *(void *)(a2 + 4);
    uint64_t result = v3 + 12;
  }
  a1[1] = result;
  return result;
}

void fst::Connect<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(uint64_t a1)
{
  memset(v4, 0, sizeof(v4));
  memset(v3, 0, sizeof(v3));
  uint64_t v2 = 0;
  v1[0] = 0;
  v1[1] = v4;
  v1[2] = v3;
  v1[3] = &v2;
  fst::DfsVisit<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(a1, (uint64_t)v1);
}

void sub_1B1BA9B80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  int v13 = *(void **)(v11 - 112);
  if (v13) {
    operator delete(v13);
  }
  uint64_t v14 = *(void **)(v11 - 88);
  if (v14) {
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::pair<int,fst::LatticeWeightTpl<float>>>::__push_back_slow_path<std::pair<int,fst::LatticeWeightTpl<float>>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 2);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x1555555555555555) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 2);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0xAAAAAAAAAAAAAAALL) {
    unint64_t v9 = 0x1555555555555555;
  }
  else {
    unint64_t v9 = v5;
  }
  int64x2_t v19 = a1 + 2;
  uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<int,float,int>>>(v7, v9);
  uint64_t v11 = &v10[12 * v4];
  std::string __p = v10;
  uint64_t v16 = v11;
  uint64_t v18 = &v10[12 * v12];
  *(_DWORD *)uint64_t v11 = *(_DWORD *)a2;
  *(void *)(v11 + 4) = *(void *)(a2 + 4);
  uint64_t v17 = v11 + 12;
  std::vector<std::pair<int,fst::LatticeWeightTpl<float>>>::__swap_out_circular_buffer(a1, &__p);
  uint64_t v13 = a1[1];
  if (v17 != v16) {
    uint64_t v17 = &v16[(v17 - v16 - 12) % 0xCuLL];
  }
  if (__p) {
    operator delete(__p);
  }
  return v13;
}

void sub_1B1BA9CE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<std::pair<int,fst::LatticeWeightTpl<float>>>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    int v5 = *(_DWORD *)(v2 - 12);
    v2 -= 12;
    *(_DWORD *)(v4 - 12) = v5;
    v4 -= 12;
    *(void *)(v4 + 4) = *(void *)(v2 + 4);
  }
  a2[1] = v4;
  uint64_t v6 = *result;
  *uint64_t result = v4;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

int *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ShortestPathCompare<int,fst::LatticeWeightTpl<float>> &,std::__wrap_iter<int *>>(int *a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    unint64_t v9 = &a1[v6 + 1];
    uint64_t v10 = (2 * v6) | 1;
    uint64_t v11 = 2 * v6 + 2;
    if (v11 < a3
      && fst::ShortestPathCompare<int,fst::LatticeWeightTpl<float>>::operator()(a2, *v9, a1[v6 + 2]))
    {
      ++v9;
      uint64_t v10 = v11;
    }
    *a1 = *v9;
    a1 = v9;
    uint64_t v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ShortestPathCompare<int,fst::LatticeWeightTpl<float>> &,std::__wrap_iter<int *>>(uint64_t result, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v6 = result;
    unint64_t v7 = v4 >> 1;
    uint64_t v8 = (int *)(result + 4 * (v4 >> 1));
    unint64_t v9 = (int *)(a2 - 4);
    uint64_t result = fst::ShortestPathCompare<int,fst::LatticeWeightTpl<float>>::operator()(a3, *v8, *(_DWORD *)(a2 - 4));
    if (result)
    {
      int v10 = *v9;
      do
      {
        uint64_t v11 = v8;
        *unint64_t v9 = *v8;
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        uint64_t v8 = (int *)(v6 + 4 * v7);
        uint64_t result = fst::ShortestPathCompare<int,fst::LatticeWeightTpl<float>>::operator()(a3, *v8, v10);
        unint64_t v9 = v11;
      }
      while ((result & 1) != 0);
      *uint64_t v11 = v10;
    }
  }
  return result;
}

uint64_t fst::ShortestPathCompare<int,fst::LatticeWeightTpl<float>>::operator()(uint64_t **a1, int a2, int a3)
{
  uint64_t v3 = **a1;
  unint64_t v4 = *(int *)(v3 + 12 * a2);
  int v5 = *((_DWORD *)a1 + 4);
  float32x2_t v6 = 0;
  float32x2_t v7 = 0;
  if (v4 != v5)
  {
    uint64_t v8 = *a1[1];
    if (v4 >= (a1[1][1] - v8) >> 3) {
      float32x2_t v7 = (float32x2_t)vdup_n_s32(0x7F800000u);
    }
    else {
      float32x2_t v7 = *(float32x2_t *)(v8 + 8 * v4);
    }
  }
  unint64_t v9 = *(int *)(v3 + 12 * a3);
  if (v9 != v5)
  {
    uint64_t v10 = *a1[1];
    if (v9 >= (a1[1][1] - v10) >> 3) {
      float32x2_t v6 = (float32x2_t)vdup_n_s32(0x7F800000u);
    }
    else {
      float32x2_t v6 = *(float32x2_t *)(v10 + 8 * v9);
    }
  }
  float32x2_t v11 = vadd_f32(v7, *(float32x2_t *)(v3 + 12 * a2 + 4));
  float32x2_t v12 = vadd_f32(v6, *(float32x2_t *)(v3 + 12 * a3 + 4));
  float32x2_t v13 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)v12, (int32x2_t)v11), (float32x2_t)vzip2_s32((int32x2_t)v12, (int32x2_t)v11));
  if (v4 == v5 && v9 != v5)
  {
    if (v13.f32[0] >= v13.f32[1] && ((vcgt_f32(v11, v12).u8[0] & 1) == 0 || v13.f32[0] > v13.f32[1]))
    {
      int32x2_t v17 = vceq_f32(v11, v12);
      if ((v17.i32[0] & v17.i32[1] & 1) == 0)
      {
        unsigned __int8 v16 = vabds_f32(v13.f32[1], v13.f32[0]) <= *((float *)a1 + 5);
        return v16 & 1;
      }
    }
    goto LABEL_25;
  }
  if (v4 == v5 || v9 != v5)
  {
    if (v13.f32[0] < v13.f32[1])
    {
LABEL_25:
      unsigned __int8 v16 = 1;
      return v16 & 1;
    }
    if (v13.f32[0] <= v13.f32[1])
    {
      unsigned __int8 v16 = vcgt_f32(v11, v12).u8[0];
      return v16 & 1;
    }
LABEL_30:
    unsigned __int8 v16 = 0;
    return v16 & 1;
  }
  if (v13.f32[0] < v13.f32[1] || (unsigned __int8 v16 = 0, (vcgt_f32(v11, v12).u8[0] & 1) != 0) && v13.f32[0] <= v13.f32[1])
  {
    int32x2_t v18 = vceq_f32(v11, v12);
    if ((v18.i32[0] & v18.i32[1] & 1) == 0)
    {
      unsigned __int8 v16 = vabds_f32(v13.f32[1], v13.f32[0]) > *((float *)a1 + 5);
      return v16 & 1;
    }
    goto LABEL_30;
  }
  return v16 & 1;
}

void fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::DeterminizeFst<fst::DefaultCommonDivisor<fst::LatticeWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A3B018;
  a1[1] = 0;
  if (!(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 64))(a2, 0x10000, 1))
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    uint64_t v3 = fst::LogMessage::LogMessage((fst *)&v8, (uint64_t)__p);
    unint64_t v4 = (void *)fst::cerr(v3);
    int v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"DeterminizeFst:", 15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" distance to final states computed for acceptors only", 53);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v8);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    *(void *)(a1[1] + 8) |= 4uLL;
  }
  operator new();
}

void sub_1B1BAA210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0) {
    operator delete(__p);
  }
  fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::~ImplToFst(v18);
  _Unwind_Resume(a1);
}

_DWORD *fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::SetImpl(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0) {
    ++*(_DWORD *)(a2 + 56);
  }
  uint64_t result = *(_DWORD **)(a1 + 8);
  if (result)
  {
    int v6 = result[14] - 1;
    result[14] = v6;
    if (!v6) {
      uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)result + 8))(result);
    }
  }
  *(void *)(a1 + 8) = a2;
  return result;
}

void *fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::~ImplToFst(void *a1)
{
  *a1 = &unk_1F0A44718;
  uint64_t v2 = (_DWORD *)a1[1];
  if (v2)
  {
    int v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

void fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~DeterminizeFst(void *a1)
{
  fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::~ImplToFst(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::Start(uint64_t a1)
{
  return fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Start(*(void *)(a1 + 8));
}

double fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::Final@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Final(*(uint64_t **)(a1 + 8), a2, a3);
}

unint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::NumArcs(uint64_t a1, uint64_t a2)
{
  return fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::NumArcs(*(void **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::NumInputEpsilons(uint64_t a1, uint64_t a2)
{
  return fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::NumInputEpsilons(*(void **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::NumOutputEpsilons(uint64_t a1, uint64_t a2)
{
  return fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::NumOutputEpsilons(*(void **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = fst::TestProperties<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    char v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return v7();
  }
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::Type(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

void fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Copy()
{
}

void sub_1B1BAA510(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

void fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::InitStateIterator()
{
}

void sub_1B1BAA604(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C408BA93049);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::InitArcIterator(uint64_t a1, uint64_t a2, void *a3)
{
  return fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::InitArcIterator(*(void *)(a1 + 8), a2, a3);
}

void fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::DeterminizeFsaImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

void sub_1B1BAA820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0) {
    operator delete(__p);
  }
  fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~DeterminizeFstImplBase(v18);
  _Unwind_Resume(a1);
}

void fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::DeterminizeFstImplBase<fst::DefaultCommonDivisor<fst::LatticeWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1B1BAAA3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::~CacheBaseImpl(v15);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~DeterminizeFstImplBase(void *a1)
{
  *a1 = &unk_1F0A3F2C0;
  uint64_t v2 = a1[17];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::~CacheBaseImpl(a1);
}

void fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::~DeterminizeFsaImpl(void *a1)
{
  fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::~DeterminizeFsaImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 136) + 64))(*(void *)(a1 + 136), 4, 0))
  {
    *(void *)(a1 + 8) |= 4uLL;
  }
  return *(void *)(a1 + 8) & a2;
}

void fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::Copy()
{
}

void sub_1B1BAAC10(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C405CF36722);
  _Unwind_Resume(a1);
}

void fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::Expand(void *a1, int a2)
{
  v9[0] = 0;
  v9[1] = 0;
  uint64_t v8 = (uint64_t *)v9;
  fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::GetLabelMap(a1, a2, &v8);
  unint64_t v4 = v8;
  if (v8 != (uint64_t *)v9)
  {
    do
    {
      fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::AddArc((uint64_t)a1, a2, (uint64_t)(v4 + 5));
      unint64_t v5 = (uint64_t *)v4[1];
      if (v5)
      {
        do
        {
          int v6 = v5;
          unint64_t v5 = (uint64_t *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          int v6 = (uint64_t *)v4[2];
          BOOL v7 = *v6 == (void)v4;
          unint64_t v4 = v6;
        }
        while (!v7);
      }
      unint64_t v4 = v6;
    }
    while (v6 != (uint64_t *)v9);
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::SetArcs((uint64_t)a1, a2);
  std::__tree<int>::destroy((uint64_t)&v8, v9[0]);
}

void sub_1B1BAACEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

uint64_t fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::ComputeStart(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 24))(*(void *)(a1 + 136));
  if (result != -1) {
    operator new();
  }
  return result;
}

uint64_t fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::ComputeFinal@<X0>(uint64_t result@<X0>, int a2@<W1>, float *a3@<X8>)
{
  unint64_t v4 = *(float ***)(*(void *)(*(void *)(result + 184) + 88) + 8 * a2);
  *(int32x2_t *)a3 = vdup_n_s32(0x7F800000u);
  unint64_t v5 = *v4;
  if (*v4)
  {
    uint64_t v6 = result;
    do
    {
      (*(void (**)(uint64_t *__return_ptr))(**(void **)(v6 + 136) + 32))(&v13);
      float v7 = v5[3] + *(float *)&v13;
      float v8 = v5[4] + *((float *)&v13 + 1);
      float v10 = *a3;
      float v9 = a3[1];
      float v11 = *a3 + v9;
      if (v11 >= (float)(v7 + v8))
      {
        if (v11 > (float)(v7 + v8) || (v10 >= v7 ? (BOOL v12 = v10 <= v7) : (BOOL v12 = 1), !v12))
        {
          float v9 = v5[4] + *((float *)&v13 + 1);
          float v10 = v5[3] + *(float *)&v13;
        }
      }
      *a3 = v10;
      a3[1] = v9;
      uint64_t result = fst::LatticeWeightTpl<float>::Member(a3);
      if ((result & 1) == 0) {
        *(void *)(v6 + 8) |= 4uLL;
      }
      unint64_t v5 = *(float **)v5;
    }
    while (v5);
  }
  return result;
}

void fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::CacheBaseImpl(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A3FB20;
  *(void *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)a1 = &unk_1F0A38AF8;
  *(unsigned char *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = -1;
  *(unsigned char *)(a1 + 104) = *(unsigned char *)a2;
  *(void *)(a1 + 112) = *(void *)(a2 + 8);
  operator new();
}

{
  *(void *)a1 = &unk_1F0A3FB20;
  *(void *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)a1 = &unk_1F0A38AF8;
  *(unsigned char *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = -1;
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  operator new();
}

void sub_1B1BAAFD0(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x10A0C407A9BBF1FLL);
  unint64_t v4 = *(void **)(v1 + 72);
  if (v4) {
    operator delete(v4);
  }
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

void fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::~CacheBaseImpl(void *a1)
{
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::~CacheBaseImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

void *fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::VectorCacheStore(void *a1, unsigned char *a2)
{
  *(unsigned char *)a1 = *a2;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = a1 + 4;
  a1[5] = a1 + 4;
  a1[6] = 0;
  a1[7] = 0;
  fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Clear(a1);
  a1[7] = a1[5];
  return a1;
}

void sub_1B1BAB0A4(_Unwind_Exception *a1)
{
  unint64_t v4 = v3;
  std::__list_imp<char *>::clear(v2);
  uint64_t v6 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 16) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::~CacheBaseImpl(void *a1)
{
  *a1 = &unk_1F0A38AF8;
  uint64_t v2 = (void *)a1[15];
  if (v2)
  {
    int v3 = fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::~VectorCacheStore(v2);
    MEMORY[0x1B3EA8670](v3, 0x10A0C407A9BBF1FLL);
  }
  unint64_t v4 = (void *)a1[9];
  if (v4) {
    operator delete(v4);
  }
  return fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~FstImpl((uint64_t)a1);
}

void *fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::~VectorCacheStore(void *a1)
{
  fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Clear(a1);
  std::__list_imp<char *>::clear(a1 + 4);
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::CompactHashBiTable(uint64_t a1, size_t a2)
{
  *(void *)(a1 + 8) = a1;
  *(void *)(a1 + 16) = a1;
  std::unordered_set<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::unordered_set(a1 + 24, a2, (void *)(a1 + 8), (void *)(a1 + 16));
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  if (a2) {
    std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(a1 + 80), a2);
  }
  return a1;
}

void sub_1B1BAB1F0(_Unwind_Exception *a1)
{
  unint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 88) = v5;
    operator delete(v5);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::unordered_set(uint64_t a1, size_t a2, void *a3, void *a4)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = *a3;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(void *)(a1 + 48) = *a4;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, a2);
  return a1;
}

void sub_1B1BAB25C(_Unwind_Exception *a1)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::~DeterminizeFsaImpl(void *a1)
{
  *a1 = &unk_1F0A3DCC8;
  uint64_t v2 = (void *)a1[22];
  if (v2)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    MEMORY[0x1B3EA8670](v2, 0x20C4093837F09);
  }
  uint64_t v3 = a1[23];
  if (v3)
  {
    uint64_t v4 = fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::~DefaultDeterminizeStateTable(v3);
    MEMORY[0x1B3EA8670](v4, 0x10E0C400200E20DLL);
  }
  return fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~DeterminizeFstImplBase(a1);
}

void fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::DeterminizeFsaImpl(uint64_t a1, uint64_t a2)
{
}

void sub_1B1BAB4B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0) {
    operator delete(__p);
  }
  fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~DeterminizeFstImplBase(v18);
  _Unwind_Resume(a1);
}

void fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::DeterminizeFstImplBase(uint64_t a1, uint64_t a2)
{
}

void sub_1B1BAB644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::~CacheBaseImpl(v15);
  _Unwind_Resume(a1);
}

void sub_1B1BAB808(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v3, 0x10A0C407A9BBF1FLL);
  if (*v2) {
    operator delete(*v2);
  }
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::CopyStates((void *)a1, a2);
    *(void *)(a1 + 56) = *(void *)(a1 + 40);
    *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
    *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
    if (*(_DWORD *)(a2 + 76) == -1) {
      MutableState = 0;
    }
    else {
      MutableState = fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::GetMutableState(a1, 0);
    }
    *(void *)(a1 + 80) = MutableState;
  }
  return a1;
}

void fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::CopyStates(void *a1, uint64_t a2)
{
  fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Clear(a1);
  uint64_t v4 = (char **)(a1 + 1);
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)a1 + 1, (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
  uint64_t v5 = *(void *)(a2 + 8);
  if (*(void *)(a2 + 16) != v5)
  {
    unint64_t v6 = 0;
    do
    {
      uint64_t v7 = *(void *)(v5 + 8 * v6);
      if (v7)
      {
        float v8 = operator new(0x38uLL);
        fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::CacheState((uint64_t)v8, v7);
        if (*(unsigned char *)a1)
        {
          float v9 = operator new(0x18uLL);
          v9[4] = v6;
          uint64_t v10 = a1[4];
          *(void *)float v9 = v10;
          *((void *)v9 + 1) = a1 + 4;
          *(void *)(v10 + 8) = v9;
          a1[4] = v9;
          ++a1[6];
        }
      }
      else
      {
        float v8 = 0;
      }
      BOOL v12 = (void *)a1[2];
      unint64_t v11 = a1[3];
      if ((unint64_t)v12 >= v11)
      {
        uint64_t v14 = ((char *)v12 - *v4) >> 3;
        if ((unint64_t)(v14 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = v11 - (void)*v4;
        uint64_t v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1)) {
          uint64_t v16 = v14 + 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v16;
        }
        if (v17) {
          int32x2_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v17);
        }
        else {
          int32x2_t v18 = 0;
        }
        int64x2_t v19 = &v18[8 * v14];
        *(void *)int64x2_t v19 = v8;
        uint64_t v13 = v19 + 8;
        unint64_t v21 = (char *)a1[1];
        uint64_t v20 = (char *)a1[2];
        if (v20 != v21)
        {
          do
          {
            uint64_t v22 = *((void *)v20 - 1);
            v20 -= 8;
            *((void *)v19 - 1) = v22;
            v19 -= 8;
          }
          while (v20 != v21);
          uint64_t v20 = *v4;
        }
        a1[1] = v19;
        a1[2] = v13;
        a1[3] = &v18[8 * v17];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        *BOOL v12 = v8;
        uint64_t v13 = v12 + 1;
      }
      a1[2] = v13;
      ++v6;
      uint64_t v5 = *(void *)(a2 + 8);
    }
    while (v6 < (*(void *)(a2 + 16) - v5) >> 3);
  }
}

uint64_t fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::CacheState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + ++*(void *)(result + 24) = 0;
  std::vector<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::__init_with_size[abi:ne180100]<std::__wrap_iter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> const*>,std::__wrap_iter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> const*>>((char *)(a1 + 24), v4, v5, 0xCCCCCCCCCCCCCCCDLL * ((v5 - v4) >> 2));
  *(void *)(a1 + 48) = *(unsigned int *)(a2 + 48);
  return a1;
}

char *std::vector<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::__init_with_size[abi:ne180100]<std::__wrap_iter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> const*>,std::__wrap_iter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> const*>>(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = std::vector<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = *((void *)v6 + 1);
    while (a2 != a3)
    {
      *(void *)uint64_t v7 = *(void *)a2;
      *(void *)(v7 + 8) = *(void *)(a2 + 8);
      *(_DWORD *)(v7 + 16) = *(_DWORD *)(a2 + 16);
      v7 += 20;
      a2 += 20;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_1B1BABB2C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::GetLabelMap(void *a1, int a2, uint64_t **a3)
{
  uint64_t v5 = **(uint64_t ***)(*(void *)(a1[23] + 88) + 8 * a2);
  if (!v5) {
    goto LABEL_17;
  }
  do
  {
    uint64_t v6 = *((unsigned int *)v5 + 2);
    uint64_t v7 = a1[17];
    unint64_t v19 = 0;
    (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v7 + 136))(v7, v6, v17);
    while (1)
    {
      if (!v17[0])
      {
        if (v19 >= v17[2]) {
          goto LABEL_14;
        }
LABEL_8:
        float v8 = (float32x2_t *)(v17[1] + 20 * v19);
        goto LABEL_9;
      }
      if ((*(unsigned int (**)(void))(*(void *)v17[0] + 24))(v17[0])) {
        break;
      }
      if (!v17[0]) {
        goto LABEL_8;
      }
      float v8 = (float32x2_t *)(*(uint64_t (**)(void))(*(void *)v17[0] + 32))();
LABEL_9:
      __int32 v15 = v8[2].i32[0];
      float32x2_t v16 = vadd_f32(*(float32x2_t *)((char *)v5 + 12), v8[1]);
      fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::FilterArc(a1[22], v8, (uint64_t)(v5 + 1), (uint64_t)&v15, a3);
      if (v17[0]) {
        (*(void (**)(void))(*(void *)v17[0] + 40))(v17[0]);
      }
      else {
        ++v19;
      }
    }
    if (v17[0])
    {
      (*(void (**)(void))(*(void *)v17[0] + 8))();
      goto LABEL_16;
    }
LABEL_14:
    if (v18) {
      --*v18;
    }
LABEL_16:
    uint64_t v5 = (uint64_t *)*v5;
  }
  while (v5);
LABEL_17:
  unint64_t v11 = *a3;
  float v9 = a3 + 1;
  uint64_t v10 = v11;
  if (v11 != (uint64_t *)v9)
  {
    do
    {
      fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::NormArc((uint64_t)a1, (uint64_t)(v10 + 5));
      BOOL v12 = (uint64_t *)v10[1];
      if (v12)
      {
        do
        {
          uint64_t v13 = v12;
          BOOL v12 = (uint64_t *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          uint64_t v13 = (uint64_t *)v10[2];
          BOOL v14 = *v13 == (void)v10;
          uint64_t v10 = v13;
        }
        while (!v14);
      }
      uint64_t v10 = v13;
    }
    while (v13 != (uint64_t *)v9);
  }
}

void sub_1B1BABD5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _DWORD *a15)
{
  if (a12)
  {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  else if (a15)
  {
    --*a15;
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::AddArc(uint64_t a1, int a2, uint64_t a3)
{
  v7[0] = *(_DWORD *)a3;
  v7[1] = v7[0];
  uint64_t v8 = *(void *)(a3 + 4);
  int State = fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::FindState(a1, *(uint64_t ***)(a3 + 16));
  Mutableint State = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
  return fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::PushArc(MutableState, (uint64_t)v7);
}

void fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::SetArcs(uint64_t a1, int a2)
{
  Mutableint State = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
  fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>>::SetArcs(*(void *)(a1 + 120), (uint64_t)MutableState);
  uint64_t v5 = *((void *)MutableState + 3);
  uint64_t v6 = *((void *)MutableState + 4) - v5;
  if (v6)
  {
    unint64_t v7 = v6 / 20;
    int v8 = *(_DWORD *)(a1 + 68);
    if (v7 <= 1) {
      unint64_t v7 = 1;
    }
    float v9 = (int *)(v5 + 16);
    do
    {
      int v11 = *v9;
      v9 += 5;
      int v10 = v11;
      if (v11 >= v8)
      {
        int v8 = v10 + 1;
        *(_DWORD *)(a1 + 68) = v10 + 1;
      }
      --v7;
    }
    while (v7);
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetExpandedState(a1, a2);
  *((_DWORD *)MutableState + 12) |= 0xAu;
}

uint64_t fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::FilterArc(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t **a5)
{
  int v11 = a2;
  uint64_t v6 = std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a5, a2, (uint64_t)&std::piecewise_construct, &v11);
  if (*((_DWORD *)v6 + 10) == -1) {
    operator new();
  }
  unint64_t v7 = v6[7];
  uint64_t v8 = *v7;
  float v9 = (char *)operator new(0x18uLL);
  *(void *)float v9 = v8;
  *((_DWORD *)v9 + 2) = *(_DWORD *)a4;
  *(void *)(v9 + 12) = *(void *)(a4 + 4);
  uint64_t *v7 = (uint64_t)v9;
  return 1;
}

void fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::NormArc(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(uint64_t ***)(a2 + 16);
  std::forward_list<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::sort[abi:ne180100](v4);
  uint64_t v5 = *v4;
  if (*v4)
  {
    uint64_t v6 = *v4;
    do
    {
      float v8 = *(float *)(a2 + 4);
      float v7 = *(float *)(a2 + 8);
      float v9 = *((float *)v6 + 3);
      float v10 = *((float *)v6 + 4);
      if ((float)(v8 + v7) >= (float)(v9 + v10))
      {
        if ((float)(v8 + v7) > (float)(v9 + v10) || (v8 >= v9 ? (BOOL v11 = v8 <= v9) : (BOOL v11 = 1), !v11))
        {
          float v7 = *((float *)v6 + 4);
          float v8 = *((float *)v6 + 3);
        }
      }
      *(float *)(a2 + 4) = v8;
      *(float *)(a2 + 8) = v7;
      if (v5 == v6 || *((_DWORD *)v6 + 2) != *((_DWORD *)v5 + 2))
      {
        unint64_t v17 = (uint64_t *)*v6;
        uint64_t v5 = v6;
      }
      else
      {
        float v13 = *((float *)v5 + 3);
        float v12 = *((float *)v5 + 4);
        float v14 = *((float *)v6 + 3);
        float v15 = *((float *)v6 + 4);
        if ((float)(v13 + v12) >= (float)(v14 + v15))
        {
          if ((float)(v13 + v12) > (float)(v14 + v15) || (v13 >= v14 ? (BOOL v16 = v13 <= v14) : (BOOL v16 = 1), !v16))
          {
            float v12 = *((float *)v6 + 4);
            float v13 = *((float *)v6 + 3);
          }
        }
        *((float *)v5 + 3) = v13;
        *((float *)v5 + 4) = v12;
        if (!fst::LatticeWeightTpl<float>::Member((float *)v5 + 3)) {
          *(void *)(a1 + 8) |= 4uLL;
        }
        unint64_t v17 = (uint64_t *)*v6;
        int32x2_t v18 = (void *)*v5;
        uint64_t *v5 = *(void *)*v5;
        operator delete(v18);
      }
      uint64_t v6 = v17;
    }
    while (v17);
    unint64_t v19 = *v4;
    if (*v4)
    {
      float32x4_t v20 = (float32x4_t)xmmword_1B2561FD0;
      int8x8_t v21 = (int8x8_t)vdup_n_s32(0x7F800000u);
      do
      {
        int8x8_t v22 = (int8x8_t)vsub_f32(*(float32x2_t *)((char *)v19 + 12), *(float32x2_t *)(a2 + 4));
        *(int8x8_t *)v23.f32 = v22;
        *(int8x8_t *)&v23.u32[2] = v22;
        v24.i32[0] = vmovn_s32(vceqq_f32(v23, v20)).u32[0];
        v24.i32[1] = vmovn_s32((int32x4_t)vmvnq_s8(vorrq_s8((int8x16_t)vcltzq_f32(v23), (int8x16_t)vcgezq_f32(v23)))).i32[1];
        if (vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(v24, 0xFuLL))))
        {
          float32x2_t v25 = (float32x2_t)v21;
          if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v30);
            int64x2_t v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"LatticeWeightTpl::Divide, NaN or invalid number produced. ", 58);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"[dividing by zero?]  Returning zero.", 36);
            kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v30);
            float32x2_t v25 = (float32x2_t)v21;
            float32x4_t v20 = (float32x4_t)xmmword_1B2561FD0;
          }
        }
        else
        {
          unsigned int v27 = *(float *)v22.i32 == INFINITY;
          if (*(float *)&v22.i32[1] == INFINITY) {
            unsigned int v27 = 1;
          }
          float32x2_t v25 = (float32x2_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v27), 0x1FuLL)), v21, v22);
        }
        *(uint64_t *)((char *)v19 + 12) = (uint64_t)v25;
        float v28 = vaddv_f32(v25);
        int32x2_t v29 = (int32x2_t)0x7F0000007FLL;
        if (v28 != -INFINITY)
        {
          int32x2_t v29 = (int32x2_t)v21;
          if (v28 != INFINITY)
          {
            v29.i32[0] = *(_DWORD *)(a1 + 144);
            int32x2_t v29 = (int32x2_t)vmul_n_f32(vrndm_f32(vadd_f32(vdiv_f32(v25, (float32x2_t)vdup_lane_s32(v29, 0)), (float32x2_t)0x3F0000003F000000)), *(float *)v29.i32);
          }
        }
        *(uint64_t *)((char *)v19 + 12) = (uint64_t)v29;
        unint64_t v19 = (uint64_t *)*v19;
      }
      while (v19);
    }
  }
}

void sub_1B1BAC218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  float v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        float v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        float v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        float v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    float v9 = a1 + 1;
LABEL_10:
    BOOL v11 = (char *)operator new(0x40uLL);
    *((_DWORD *)v11 + 8) = **a4;
    *((_DWORD *)v11 + 10) = -1;
    *(int32x2_t *)(v11 + 44) = vdup_n_s32(0x7F800000u);
    *((void *)v11 + 7) = 0;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::FindState(uint64_t a1, uint64_t **a2)
{
  uint64_t State = fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::FindState(*(void **)(a1 + 184), a2);
  uint64_t v5 = State;
  if (*(void *)(a1 + 152))
  {
    uint64_t v6 = *(void ***)(a1 + 160);
    if ((int)State >= (unint64_t)(((unsigned char *)v6[1] - (unsigned char *)*v6) >> 3))
    {
      fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::ComputeDistance(a1, a2, (float *)&v22);
      unint64_t v7 = (unint64_t)v6[2];
      int v8 = v6[1];
      if ((unint64_t)v8 >= v7)
      {
        uint64_t v10 = ((char *)v8 - (unsigned char *)*v6) >> 3;
        if ((unint64_t)(v10 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v11 = v7 - (void)*v6;
        uint64_t v12 = v11 >> 2;
        if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
          uint64_t v12 = v10 + 1;
        }
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v12;
        }
        float v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(v6 + 2), v13);
        float v15 = &v14[8 * v10];
        unint64_t v17 = &v14[8 * v16];
        *(void *)float v15 = v22;
        float v9 = v15 + 8;
        int32x2_t v18 = (char *)*v6;
        for (uint64_t i = (char *)v6[1]; i != v18; i -= 8)
        {
          uint64_t v20 = *((void *)i - 1);
          *((void *)v15 - 1) = v20;
          v15 -= 8;
        }
        uint64_t *v6 = v15;
        v6[1] = v9;
        void v6[2] = v17;
        if (v18) {
          operator delete(v18);
        }
      }
      else
      {
        void *v8 = v22;
        float v9 = v8 + 1;
      }
      v6[1] = v9;
    }
  }
  return v5;
}

uint64_t fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::FindState(void *a1, void **a2)
{
  int v8 = a2;
  uint64_t v2 = (a1[12] - a1[11]) >> 3;
  uint64_t Id = fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::FindId(a1 + 1, &v8, 1);
  if (Id != v2)
  {
    uint64_t v4 = v8;
    if (v8)
    {
      uint64_t v5 = *v8;
      if (*v8)
      {
        do
        {
          uint64_t v6 = (void *)*v5;
          operator delete(v5);
          uint64_t v5 = v6;
        }
        while (v6);
      }
      void *v4 = 0;
      MEMORY[0x1B3EA8670](v4, 0x1020C405F07FB98);
    }
  }
  return Id;
}

uint64_t fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::ComputeDistance@<X0>(uint64_t result@<X0>, uint64_t **a2@<X1>, float *a3@<X8>)
{
  *a3 = INFINITY;
  uint64_t v3 = *a2;
  if (*a2)
  {
    uint64_t v4 = **(void **)(result + 152);
    int v5 = 2139095040;
    int32x2_t v6 = vdup_n_s32(0x7F800000u);
    float v7 = INFINITY;
    do
    {
      unint64_t v8 = *((int *)v3 + 2);
      float32x2_t v9 = (float32x2_t)v6;
      if ((*(void *)(*(void *)(result + 152) + 8) - v4) >> 3 > v8) {
        float32x2_t v9 = *(float32x2_t *)(v4 + 8 * v8);
      }
      int32x2_t v10 = (int32x2_t)vadd_f32(v9, *(float32x2_t *)((char *)v3 + 12));
      float32x2_t v11 = (float32x2_t)vdup_lane_s32(v10, 0);
      v11.f32[0] = v7;
      float32x2_t v12 = vadd_f32(v11, (float32x2_t)__PAIR64__(v10.u32[1], v5));
      if (v12.f32[0] >= v12.f32[1])
      {
        if (v12.f32[0] > v12.f32[1] || (v7 >= *(float *)v10.i32 ? (BOOL v13 = v7 <= *(float *)v10.i32) : (BOOL v13 = 1), !v13))
        {
          int v5 = v10.i32[1];
          float v7 = *(float *)v10.i32;
        }
      }
      uint64_t v3 = (uint64_t *)*v3;
    }
    while (v3);
    *a3 = v7;
  }
  else
  {
    int v5 = 2139095040;
  }
  *((_DWORD *)a3 + 1) = v5;
  return result;
}

uint64_t fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::FindId(void *a1, void *a2, int a3)
{
  a1[13] = a2;
  uint64_t v6 = (uint64_t)(a1 + 3);
  float v7 = std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::find<int>(a1 + 3, &fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::kCurrentKey);
  if (v7) {
    return *((unsigned int *)v7 + 4);
  }
  if (!a3) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v9 = a1[10];
  int32x2_t v10 = (void *)a1[11];
  uint64_t v11 = ((uint64_t)v10 - v9) >> 3;
  unsigned int v23 = v11;
  unint64_t v12 = a1[12];
  if ((unint64_t)v10 >= v12)
  {
    if ((unint64_t)(v11 + 1) >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v14 = v12 - v9;
    uint64_t v15 = v14 >> 2;
    if (v14 >> 2 <= (unint64_t)(v11 + 1)) {
      uint64_t v15 = v11 + 1;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v15;
    }
    if (v16) {
      unint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 12), v16);
    }
    else {
      unint64_t v17 = 0;
    }
    int32x2_t v18 = &v17[8 * v11];
    unint64_t v19 = &v17[8 * v16];
    *(void *)int32x2_t v18 = *a2;
    BOOL v13 = v18 + 8;
    int8x8_t v21 = (char *)a1[10];
    uint64_t v20 = (char *)a1[11];
    if (v20 != v21)
    {
      do
      {
        uint64_t v22 = *((void *)v20 - 1);
        v20 -= 8;
        *((void *)v18 - 1) = v22;
        v18 -= 8;
      }
      while (v20 != v21);
      uint64_t v20 = (char *)a1[10];
    }
    a1[10] = v18;
    a1[11] = v13;
    a1[12] = v19;
    if (v20) {
      operator delete(v20);
    }
  }
  else
  {
    *int32x2_t v10 = *a2;
    BOOL v13 = v10 + 1;
  }
  a1[11] = v13;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(v6, (int *)&v23, &v23);
  return v23;
}

uint64_t *std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::find<int>(void *a1, int *a2)
{
  uint64_t v4 = *a2;
  if ((int)v4 < -1)
  {
    unint64_t v7 = 0;
  }
  else
  {
    uint64_t v5 = a1[4];
    if (v4 == -1) {
      uint64_t v6 = *(uint64_t ****)(v5 + 104);
    }
    else {
      uint64_t v6 = (uint64_t ***)(*(void *)(v5 + 80) + 8 * v4);
    }
    unint64_t v7 = fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey::operator()(v5, *v6);
  }
  int8x8_t v8 = (int8x8_t)a1[1];
  if (!*(void *)&v8) {
    return 0;
  }
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v8);
  v9.i16[0] = vaddlv_u8(v9);
  unint64_t v10 = v9.u32[0];
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v11 = v7;
    if (v7 >= *(void *)&v8) {
      unint64_t v11 = v7 % *(void *)&v8;
    }
  }
  else
  {
    unint64_t v11 = (*(void *)&v8 - 1) & v7;
  }
  unint64_t v12 = *(uint64_t ***)(*a1 + 8 * v11);
  if (!v12) {
    return 0;
  }
  BOOL v13 = *v12;
  if (*v12)
  {
    uint64_t v14 = a1 + 6;
    do
    {
      unint64_t v15 = v13[1];
      if (v15 == v7)
      {
        if (fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual::operator()(v14, *((_DWORD *)v13 + 4), *a2))return v13; {
      }
        }
      else
      {
        if (v10 > 1)
        {
          if (v15 >= *(void *)&v8) {
            v15 %= *(void *)&v8;
          }
        }
        else
        {
          v15 &= *(void *)&v8 - 1;
        }
        if (v15 != v11) {
          return 0;
        }
      }
      BOOL v13 = (uint64_t *)*v13;
    }
    while (v13);
  }
  return v13;
}

uint64_t fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual::operator()(uint64_t *a1, int a2, int a3)
{
  if (a2 < -1 || a3 < -1) {
    return a2 == a3;
  }
  uint64_t v3 = *a1;
  if (a2 == -1) {
    uint64_t v4 = *(uint64_t **)(v3 + 104);
  }
  else {
    uint64_t v4 = (uint64_t *)(*(void *)(v3 + 80) + 8 * a2);
  }
  if (a3 == -1) {
    uint64_t v6 = *(uint64_t **)(v3 + 104);
  }
  else {
    uint64_t v6 = (uint64_t *)(*(void *)(v3 + 80) + 8 * a3);
  }
  return fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::operator==(*v4, *v6);
}

uint64_t fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t result = *((char *)a2 + 8);
  for (uint64_t i = *a2; i; uint64_t i = (uint64_t *)*i)
  {
    int v4 = *((_DWORD *)i + 3);
    int v5 = *((_DWORD *)i + 4);
    BOOL v6 = __CFADD__(v5, v4);
    uint64_t v7 = (v5 + v4);
    if (v6) {
      uint64_t v8 = 0x100000000;
    }
    else {
      uint64_t v8 = 0;
    }
    result ^= (2 * result) ^ (32 * *((int *)i + 2)) ^ ((unint64_t)*((int *)i + 2) >> 59) ^ (v8 | v7);
  }
  return result;
}

uint64_t fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a2 + 8) != *(unsigned __int8 *)(a1 + 8)) {
    return 0;
  }
  uint64_t v2 = (void *)a2;
  uint64_t v3 = (void *)a1;
  while (1)
  {
    uint64_t v2 = (void *)*v2;
    uint64_t v3 = (void *)*v3;
    if (!v2 || v3 == 0) {
      break;
    }
    if (!fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::operator==((uint64_t)(v2 + 1), (uint64_t)(v3 + 1)))return 0; {
  }
    }
  return (v2 != 0) ^ (v3 == 0);
}

BOOL fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::operator==(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)a1 == *(_DWORD *)a2
      && *(float *)(a1 + 4) == *(float *)(a2 + 4)
      && *(float *)(a1 + 8) == *(float *)(a2 + 8);
}

void *std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(uint64_t a1, int *a2, _DWORD *a3)
{
  uint64_t v7 = *a2;
  if ((int)v7 < -1)
  {
    unint64_t v10 = 0;
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if (v7 == -1) {
      uint8x8_t v9 = *(uint64_t ****)(v8 + 104);
    }
    else {
      uint8x8_t v9 = (uint64_t ***)(*(void *)(v8 + 80) + 8 * v7);
    }
    unint64_t v10 = fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey::operator()(v8, *v9);
  }
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v10;
      if (v10 >= v11) {
        unint64_t v3 = v10 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v10;
    }
    uint64_t v14 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(void **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual::operator()((uint64_t *)(a1 + 48), *((_DWORD *)i + 4), *a2))return i; {
        }
          }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x18uLL);
  *(void *)uint64_t i = 0;
  *((void *)i + 1) = v10;
  *((_DWORD *)i + 4) = *a3;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 40);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v3 = v10 % v11;
      }
      else {
        unint64_t v3 = v10;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v10;
    }
  }
  uint64_t v23 = *(void *)a1;
  int16x4_t v24 = *(void **)(*(void *)a1 + 8 * v3);
  if (v24)
  {
    *(void *)uint64_t i = *v24;
LABEL_44:
    *int16x4_t v24 = i;
    goto LABEL_45;
  }
  *(void *)uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v23 + 8 * v3) = a1 + 16;
  if (*(void *)i)
  {
    unint64_t v25 = *(void *)(*(void *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v25 >= v11) {
        v25 %= v11;
      }
    }
    else
    {
      v25 &= v11 - 1;
    }
    int16x4_t v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_44;
  }
LABEL_45:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1B1BACBB8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>>::GetMutableState(uint64_t a1, int a2)
{
  Mutableuint64_t State = fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>::GetMutableState(a1, a2);
  int v4 = MutableState;
  if (*(unsigned char *)(a1 + 88))
  {
    int v5 = *((_DWORD *)MutableState + 12);
    if ((v5 & 4) == 0)
    {
      *((_DWORD *)MutableState + 12) = v5 | 4;
      unint64_t v6 = *((void *)MutableState + 4) - *((void *)MutableState + 3) + *(void *)(a1 + 112) + 56;
      *(void *)(a1 + 112) = v6;
      *(unsigned char *)(a1 + 104) = 1;
      if (v6 > *(void *)(a1 + 96)) {
        fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>>::GC(a1, MutableState, 0, 0.666);
      }
    }
  }
  return v4;
}

uint64_t fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::PushArc(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = a1[4];
  if (v3 >= a1[5])
  {
    uint64_t result = std::vector<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::__push_back_slow_path<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> const&>(a1 + 3, a2);
  }
  else
  {
    *(void *)unint64_t v3 = *(void *)a2;
    *(void *)(v3 + 8) = *(void *)(a2 + 8);
    *(_DWORD *)(v3 + 16) = *(_DWORD *)(a2 + 16);
    uint64_t result = v3 + 20;
  }
  a1[4] = result;
  return result;
}

char *fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>::GetMutableState(uint64_t a1, int a2)
{
  int v3 = *(_DWORD *)(a1 + 76);
  if (v3 == a2) {
    return *(char **)(a1 + 80);
  }
  if (*(unsigned char *)(a1 + 72))
  {
    if (v3 == -1)
    {
      *(_DWORD *)(a1 + 76) = a2;
      Mutableuint64_t State = fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::GetMutableState(a1, 0);
      *(void *)(a1 + 80) = MutableState;
      *((_DWORD *)MutableState + 12) |= 4u;
      std::vector<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::reserve((uint64_t *)MutableState + 3, 0x80uLL);
      return *(char **)(a1 + 80);
    }
    int v5 = *(int32x2_t **)(a1 + 80);
    if (!v5[6].i32[1])
    {
      *(_DWORD *)(a1 + 76) = a2;
      int32x2_t *v5 = vdup_n_s32(0x7F800000u);
      v5[6] = 0;
      v5[1] = 0;
      void v5[2] = 0;
      v5[4] = v5[3];
      uint64_t result = *(char **)(a1 + 80);
      *((_DWORD *)result + 12) |= 4u;
      return result;
    }
    v5[6].i32[0] &= ~4u;
    *(unsigned char *)(a1 + 72) = 0;
  }
  int v6 = a2 + 1;
  return fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::GetMutableState(a1, v6);
}

void fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>>::GC(uint64_t a1, char *a2, char a3, float a4)
{
  if (*(unsigned char *)(a1 + 104))
  {
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      uint64_t v8 = fst::LogMessage::LogMessage((fst *)v37, (uint64_t)__p);
      uint8x8_t v9 = (void *)fst::cerr(v8);
      unint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"GCCacheStore: Enter GC: object = ", 33);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(", 1);
      unint64_t v11 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"), free recently cached = ", 26);
      uint8x8_t v12 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", cache size = ", 15);
      unint64_t v13 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", cache frac = ", 15);
      uint64_t v14 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", cache limit = ", 16);
      unint64_t v15 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"\n", 1);
      fst::LogMessage::~LogMessage((fst::LogMessage *)v37);
      if (v42 < 0) {
        operator delete(__p[0]);
      }
    }
    unint64_t v16 = (unint64_t)(float)((float)*(unint64_t *)(a1 + 96) * a4);
    uint64_t v17 = *(void *)(a1 + 40);
    *(void *)(a1 + 56) = v17;
    while (v17 != a1 + 32)
    {
      int v18 = *(_DWORD *)(v17 + 16);
      if (v18) {
        int v19 = v18 - 1;
      }
      else {
        int v19 = *(_DWORD *)(a1 + 76);
      }
      Mutableuint64_t State = fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>::GetMutableState(a1, v19);
      unint64_t v21 = *(void *)(a1 + 112);
      if (v21 > v16 && !*((_DWORD *)MutableState + 13))
      {
        if (a3)
        {
          if (MutableState != a2)
          {
            int v22 = *((_DWORD *)MutableState + 12);
LABEL_19:
            if ((v22 & 4) != 0)
            {
              unint64_t v23 = *((void *)MutableState + 4) - *((void *)MutableState + 3) + 56;
              FstCheck(v23 <= v21, "(size) <= (cache_size_)", "../libquasar/libkaldi/tools/openfst/src/include/fst/cache.h");
              *(void *)(a1 + 112) -= v23;
            }
            fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::Delete((void *)a1);
            uint64_t v17 = *(void *)(a1 + 56);
            continue;
          }
        }
        else
        {
          int v22 = *((_DWORD *)MutableState + 12);
          if ((v22 & 8) == 0 && MutableState != a2) {
            goto LABEL_19;
          }
        }
      }
      *((_DWORD *)MutableState + 12) &= ~8u;
      uint64_t v17 = *(void *)(*(void *)(a1 + 56) + 8);
      *(void *)(a1 + 56) = v17;
    }
    if ((a3 & 1) != 0 || *(void *)(a1 + 112) <= v16)
    {
      unint64_t v24 = *(void *)(a1 + 112);
      if (v16)
      {
        if (v24 > v16)
        {
          uint64_t v25 = *(void *)(a1 + 96);
          do
          {
            v25 *= 2;
            BOOL v26 = v24 > 2 * v16;
            v16 *= 2;
          }
          while (v26);
          *(void *)(a1 + 96) = v25;
        }
      }
      else if (v24)
      {
        if (FLAGS_fst_error_fatal) {
          std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
        }
        else {
          std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
        }
        unsigned int v27 = fst::LogMessage::LogMessage((fst *)&v40, (uint64_t)__p);
        float v28 = (void *)fst::cerr(v27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"GCCacheStore:GC: Unable to free all cached states", 49);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v40);
        if (v42 < 0) {
          operator delete(__p[0]);
        }
      }
    }
    else
    {
      fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>>::GC(a1, a2, 1, a4);
    }
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(v37, "INFO");
      int32x2_t v29 = fst::LogMessage::LogMessage((fst *)&v39, (uint64_t)v37);
      int v30 = (void *)fst::cerr(v29);
      int64x2_t v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"GCCacheStore: Exit GC: object = ", 32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"(", 1);
      long long v32 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"), free recently cached = ", 26);
      std::vector<int> v33 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)", cache size = ", 15);
      long long v34 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)", cache frac = ", 15);
      long long v35 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)", cache limit = ", 16);
      long long v36 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"\n", 1);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v39);
      if (v38 < 0) {
        operator delete(v37[0]);
      }
    }
  }
}

void sub_1B1BAD178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>>::SetArcs(uint64_t a1, uint64_t a2)
{
  fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::SetArcs((void *)a2);
  if (*(unsigned char *)(a1 + 104))
  {
    if ((*(unsigned char *)(a2 + 48) & 4) != 0)
    {
      unint64_t v4 = *(void *)(a2 + 32) - *(void *)(a2 + 24) + *(void *)(a1 + 112);
      *(void *)(a1 + 112) = v4;
      if (v4 > *(void *)(a1 + 96))
      {
        fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>>::GC(a1, (char *)a2, 0, 0.666);
      }
    }
  }
}

uint64_t fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Start(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 60))
  {
    if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 4))
    {
      *(unsigned char *)(a1 + 60) = 1;
    }
    else if (!*(unsigned char *)(a1 + 60))
    {
      int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
      if (v3 != -1)
      {
        *(_DWORD *)(a1 + 64) = v3;
        *(unsigned char *)(a1 + 60) = 1;
        if (*(_DWORD *)(a1 + 68) <= v3) {
          *(_DWORD *)(a1 + 68) = v3 + 1;
        }
      }
    }
  }
  return *(unsigned int *)(a1 + 64);
}

double fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Final@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasFinal((uint64_t)a1, a2) & 1) == 0)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t))(*a1 + 64))(&v12, a1, a2);
    uint64_t v6 = v12;
    Mutableuint64_t State = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>>::GetMutableState(a1[15], a2);
    *(void *)Mutableuint64_t State = v6;
    *((_DWORD *)MutableState + 12) |= 9u;
  }
  uint64_t v8 = a1[15];
  if (*(_DWORD *)(v8 + 76) == a2) {
    uint8x8_t v9 = (double **)(v8 + 80);
  }
  else {
    uint8x8_t v9 = (double **)(*(void *)(v8 + 8) + 8 * ((int)a2 + 1));
  }
  unint64_t v10 = *v9;
  double result = *v10;
  *a3 = *(void *)v10;
  return result;
}

unint64_t fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::NumArcs(void *a1, uint64_t a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs((uint64_t)a1, a2) & 1) == 0)(*(void (**)(void *, uint64_t))(*a1 + 48))(a1, a2); {
  uint64_t v4 = a1[15];
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * ((int)a2 + 1);
  }
  return 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(*(void *)v5 + 32) - *(void *)(*(void *)v5 + 24)) >> 2);
}

uint64_t fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::NumInputEpsilons(void *a1, uint64_t a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs((uint64_t)a1, a2) & 1) == 0)(*(void (**)(void *, uint64_t))(*a1 + 48))(a1, a2); {
  uint64_t v4 = a1[15];
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * ((int)a2 + 1);
  }
  return *(void *)(*(void *)v5 + 8);
}

uint64_t fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::NumOutputEpsilons(void *a1, uint64_t a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs((uint64_t)a1, a2) & 1) == 0)(*(void (**)(void *, uint64_t))(*a1 + 48))(a1, a2); {
  uint64_t v4 = a1[15];
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * ((int)a2 + 1);
  }
  return *(void *)(*(void *)v5 + 16);
}

void *fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::DeterminizeFst(void *a1, uint64_t a2, int a3)
{
  *a1 = &unk_1F0A3B018;
  a1[1] = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  if (a3)
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
    uint64_t v6 = (_DWORD *)a1[1];
    if (v6)
    {
      int v7 = v6[14] - 1;
      v6[14] = v7;
      if (!v7) {
        (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
      }
    }
    a1[1] = v5;
  }
  else
  {
    fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::SetImpl((uint64_t)a1, v4, 0);
  }
  return a1;
}

void sub_1B1BAD660(_Unwind_Exception *a1)
{
  fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::~ImplToFst(v1);
  _Unwind_Resume(a1);
}

void fst::StateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::~StateIterator()
{
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::Next_(uint64_t result)
{
  return result;
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::Reset_(uint64_t result)
{
  *(_DWORD *)(result + ++*(_DWORD *)(result + 24) = 0;
  return result;
}

void fst::CacheStateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::~CacheStateIterator()
{
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::Done(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v2 < *(_DWORD *)(v3 + 68)) {
    return 0;
  }
  uint64_t v5 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v3);
  if ((int)v5 >= *(_DWORD *)(*(void *)(a1 + 16) + 68)) {
    return 1;
  }
  uint64_t v6 = v5;
  do
  {
    fst::ArcIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::ArcIterator(&v19, *(void *)(a1 + 8), v6);
    unint64_t v7 = v20;
    uint64_t v8 = *((void *)v19 + 3);
    unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * ((*((void *)v19 + 4) - v8) >> 2);
    uint64_t v10 = *(void *)(a1 + 16);
    if (v20 < v9)
    {
      int v11 = *(_DWORD *)(v10 + 68);
      uint64_t v12 = (int *)(v8 + 20 * v20 + 16);
      do
      {
        int v14 = *v12;
        v12 += 5;
        int v13 = v14;
        if (v11 <= v14)
        {
          int v11 = v13 + 1;
          *(_DWORD *)(v10 + 68) = v13 + 1;
        }
        ++v7;
      }
      while (v9 != v7);
      unint64_t v20 = v9;
    }
    fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetExpandedState(v10, v6);
    int v15 = *(_DWORD *)(a1 + 24);
    uint64_t v16 = *(void *)(a1 + 16);
    int v17 = *(_DWORD *)(v16 + 68);
    --*((_DWORD *)v19 + 13);
    BOOL v4 = v15 >= v17;
    if (v15 < v17) {
      break;
    }
    uint64_t v6 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v16);
  }
  while ((int)v6 < *(_DWORD *)(*(void *)(a1 + 16) + 68));
  return v4;
}

void sub_1B1BAD7F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char **fst::ArcIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::ArcIterator(char **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  a1[1] = 0;
  Mutableuint64_t State = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>>>::GetMutableState(*(void *)(v6 + 120), a3);
  *a1 = MutableState;
  ++*((_DWORD *)MutableState + 13);
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(*(void *)(a2 + 8), a3) & 1) == 0)(*(void (**)(void, uint64_t))(**(void **)(a2 + 8) + 48))(*(void *)(a2 + 8), a3); {
  return a1;
  }
}

void sub_1B1BAD89C(_Unwind_Exception *a1)
{
  --*(_DWORD *)(*(void *)v1 + 52);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::InitArcIterator(uint64_t a1, uint64_t a2, void *a3)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)(*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2); {
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::InitArcIterator(a1, a2, a3);
  }
}

void *fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::~ImplToFst(void *a1)
{
  *a1 = &unk_1F0A41FA0;
  int v2 = (_DWORD *)a1[1];
  if (v2)
  {
    int v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

void std::vector<std::pair<std::string,std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  int v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::allocator<std::pair<std::string,std::vector<std::string>>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<std::pair<std::string,std::vector<std::string>>>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  int v3 = (void **)(a2 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
}

uint64_t std::vector<quasar::Token>::__emplace_back_slow_path<std::string const&,int,int,int,int,BOOL>(uint64_t *a1, uint64_t a2, int *a3, int *a4, int *a5, int *a6, unsigned __int8 *a7)
{
  uint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5);
  unint64_t v9 = v8 + 1;
  if ((unint64_t)(v8 + 1) > 0x124924924924924) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 5) > v9) {
    unint64_t v9 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 5);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 5)) >= 0x92492492492492) {
    unint64_t v16 = 0x124924924924924;
  }
  else {
    unint64_t v16 = v9;
  }
  unint64_t v24 = a1 + 2;
  if (v16) {
    int v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::Token>>((uint64_t)(a1 + 2), v16);
  }
  else {
    int v17 = 0;
  }
  unint64_t v20 = v17;
  unint64_t v21 = (std::string *)&v17[224 * v8];
  unint64_t v23 = &v17[224 * v16];
  std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,std::string const&,int,int,int,int,BOOL>((uint64_t)(a1 + 2), v21, a2, a3, a4, a5, a6, a7);
  int v22 = &v21[9].__r_.__value_.__s.__data_[8];
  std::vector<quasar::Token>::__swap_out_circular_buffer(a1, &v20);
  uint64_t v18 = a1[1];
  std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)&v20);
  return v18;
}

void sub_1B1BADBE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,std::string const&,int,int,int,int,BOOL>(uint64_t a1, std::string *a2, uint64_t a3, int *a4, int *a5, int *a6, int *a7, unsigned __int8 *a8)
{
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v26 = *(std::string *)a3;
  }
  int v14 = *a4;
  int v15 = *a5;
  int v16 = *a6;
  int v17 = *a7;
  int v18 = *a8;
  std::string::basic_string[abi:ne180100]<0>(v24, "");
  std::string::basic_string[abi:ne180100]<0>(v22, "");
  memset(v21, 0, sizeof(v21));
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  quasar::Token::Token(a2, (long long *)&v26, v14, v15, v16, v18 != 0, 0, (long long *)v24, (float)v17, (long long *)v22, v21, 0, (long long *)__p, 0, 0);
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  __p[0] = v21;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (v23 < 0) {
    operator delete(v22[0]);
  }
  if (v25 < 0) {
    operator delete(v24[0]);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
}

void sub_1B1BADD5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  std::string __p = &a21;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (a29 < 0) {
    operator delete(a24);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (*(char *)(v35 - 89) < 0) {
    operator delete(*(void **)(v35 - 112));
  }
  _Unwind_Resume(a1);
}

void *std::vector<std::pair<std::string,float>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<quasar::TextTokenizer::Token>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = a1[1];
    uint64_t v5 = v4 + 32 * a2;
    uint64_t v6 = 32 * a2;
    do
    {
      *(void *)uint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
      *(_DWORD *)(v4 + ++*(_DWORD *)(result + 24) = 0;
      *(void *)(v4 + 16) = 0;
      v4 += 32;
      v6 -= 32;
    }
    while (v6);
    a1[1] = v5;
  }
  return a1;
}

void sub_1B1BADE44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *std::vector<std::vector<std::string>>::vector(void *a1, unint64_t a2, long long **a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v6 = (std::string *)a1[1];
    uint64_t v7 = 3 * a2;
    uint64_t v8 = &v6[a2];
    uint64_t v9 = 8 * v7;
    do
    {
      v6->__r_.__value_.__r.__words[0] = 0;
      v6->__r_.__value_.__l.__size_ = 0;
      v6->__r_.__value_.__r.__words[2] = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v6++, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
      v9 -= 24;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_1B1BADF00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  int v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        uint64_t v6 = v4;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<std::vector<std::string>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::string>>,std::reverse_iterator<std::vector<std::string>*>,std::reverse_iterator<std::vector<std::string>*>,std::reverse_iterator<std::vector<std::string>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::string>>,std::reverse_iterator<std::vector<std::string>*>,std::reverse_iterator<std::vector<std::string>*>,std::reverse_iterator<std::vector<std::string>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - ++*(_DWORD *)(result + 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - ++*(_DWORD *)(result + 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::reverse_iterator<std::vector<std::string>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::reverse_iterator<std::vector<std::string>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::reverse_iterator<std::vector<std::string>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::reverse_iterator<std::vector<std::string>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  int v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    int v3 = v1;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<std::string>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<std::string>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

uint64_t std::vector<std::pair<std::string,std::vector<std::string>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::vector<std::string>>>,std::reverse_iterator<std::pair<std::string,std::vector<std::string>>*>,std::reverse_iterator<std::pair<std::string,std::vector<std::string>>*>,std::reverse_iterator<std::pair<std::string,std::vector<std::string>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::vector<std::string>>>,std::reverse_iterator<std::pair<std::string,std::vector<std::string>>*>,std::reverse_iterator<std::pair<std::string,std::vector<std::string>>*>,std::reverse_iterator<std::pair<std::string,std::vector<std::string>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 48);
      *(void *)(v7 - 32) = *(void *)(a3 - 32);
      *(_OWORD *)(v7 - 48) = v8;
      *(void *)(a3 - 40) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(a3 - 48) = 0;
      *(void *)(v7 - ++*(_DWORD *)(result + 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      *(_OWORD *)(v7 - ++*(_DWORD *)(result + 24) = *(_OWORD *)(a3 - 24);
      *(void *)(v7 - 8) = *(void *)(a3 - 8);
      *(void *)(a3 - ++*(_DWORD *)(result + 24) = 0;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 48;
      *((void *)&v14 + 1) -= 48;
      a3 -= 48;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::vector<std::string>>>,std::reverse_iterator<std::pair<std::string,std::vector<std::string>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::vector<std::string>>>,std::reverse_iterator<std::pair<std::string,std::vector<std::string>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::vector<std::string>>>,std::reverse_iterator<std::pair<std::string,std::vector<std::string>>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::vector<std::string>>>,std::reverse_iterator<std::pair<std::string,std::vector<std::string>>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<std::pair<std::string,std::vector<std::string>>>::destroy[abi:ne180100](v3, v1);
      v1 += 48;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<std::pair<std::string,std::vector<std::string>>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::pair<std::string,std::vector<std::string>>>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 48;
    std::allocator<std::pair<std::string,std::vector<std::string>>>::destroy[abi:ne180100](v4, i - 48);
  }
}

std::vector<unsigned int> *kaldi::UniformRandomNumber::UniformRandomNumber(std::vector<unsigned int> *this, int a2, unsigned int *__n, unsigned int *a4)
{
  this->__begin_ = __n;
  this->__end_ = a4;
  LODWORD(this->__end_cap_.__value_) = a2;
  uint64_t v5 = std::vector<unsigned int>::vector(this + 1, (std::vector<unsigned int>::size_type)__n);
  std::vector<unsigned int>::pointer begin = this->__begin_;
  if (this->__begin_)
  {
    uint64_t v7 = 0;
    std::vector<unsigned int>::pointer v8 = v5->__begin_;
    do
    {
      v8[(void)v7] = v7 + 1;
      uint64_t v7 = (unsigned int *)((char *)v7 + 1);
    }
    while (begin != v7);
  }
  return this;
}

void kaldi::UniformRandomNumber::~UniformRandomNumber(kaldi::UniformRandomNumber *this)
{
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

void kaldi::UniformRandomNumber::SetRandomSeeds(kaldi::UniformRandomNumber *this, int a2)
{
  unint64_t v6 = *((void *)this + 5);
  uint64_t v4 = (char *)this + 40;
  unint64_t v5 = v6;
  uint64_t v7 = (_DWORD *)*((void *)v4 - 2);
  *((void *)v4 - 1) = v7;
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = v5 - (void)v7;
    uint64_t v10 = v9 >> 1;
    if ((unint64_t)(v9 >> 1) <= 1) {
      uint64_t v10 = 1;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    char v12 = std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v4, v11);
    long long v13 = (char *)*((void *)this + 3);
    long long v14 = (char *)*((void *)this + 4);
    int v16 = &v12[v15];
    *char v12 = a2;
    std::vector<unsigned int>::pointer v8 = v12 + 1;
    while (v14 != v13)
    {
      int v17 = *((_DWORD *)v14 - 1);
      v14 -= 4;
      *--char v12 = v17;
    }
    *((void *)this + 3) = v12;
    *((void *)this + 4) = v8;
    *((void *)this + 5) = v16;
    if (v13) {
      operator delete(v13);
    }
  }
  else
  {
    _DWORD *v7 = a2;
    std::vector<unsigned int>::pointer v8 = v7 + 1;
  }
  *((void *)this + 4) = v8;
  *(void *)this = 1;
}

float kaldi::UniformRandomNumber::RandUniform(kaldi::UniformRandomNumber *this, uint64_t a2)
{
  return (float)rand_r((unsigned int *)(*((void *)this + 3) + 4 * a2)) * 4.6566e-10;
}

uint64_t kaldi::UniformRandomNumber::Rand(kaldi::UniformRandomNumber *this, uint64_t a2)
{
  return (rand_r((unsigned int *)(*((void *)this + 3) + 4 * a2)) % (*((_DWORD *)this + 4) + 1));
}

kaldi::GaussRandomNumber *kaldi::GaussRandomNumber::GaussRandomNumber(kaldi::GaussRandomNumber *this, const kaldi::UniformRandomNumber *a2)
{
  unint64_t v4 = *(void *)a2;
  *(void *)this = a2;
  *((void *)this + 1) = v4;
  unint64_t v5 = (void *)((char *)this + 16);
  std::vector<std::vector<float>>::vector((void *)this + 2, v4);
  std::vector<short>::vector((void *)this + 5, *(void *)a2);
  *((_DWORD *)this + 16) = 2;
  if (*((void *)this + 1))
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    int v8 = 2;
    do
    {
      std::vector<float>::resize(*v5 + v6, v8);
      int v8 = *((_DWORD *)this + 16);
      *(_WORD *)(*((void *)this + 5) + 2 * v7++) = v8;
      v6 += 24;
    }
    while (*((void *)this + 1) > v7);
  }
  return this;
}

void sub_1B1BAE658(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void kaldi::GaussRandomNumber::Rand(kaldi::GaussRandomNumber *this, unsigned int a2)
{
  uint64_t v3 = a2;
  uint64_t v4 = *((void *)this + 5);
  int v5 = *(__int16 *)(v4 + 2 * a2);
  if (*((_DWORD *)this + 16) <= v5)
  {
    __asm
    {
      FMOV            V1.2D, #2.0
      FMOV            V0.2D, #-1.0
    }
    float64x2_t v16 = _Q0;
    float64x2_t v17 = _Q1;
    do
    {
      int v12 = rand_r((unsigned int *)(*(void *)(*(void *)this + 24) + 4 * v3));
      float32x2_t v13 = vcvt_f32_f64(vmlaq_f64(v16, v17, vcvtq_f64_f32(vmul_f32(vcvt_f32_s32((int32x2_t)__PAIR64__(rand_r((unsigned int *)(*(void *)(*(void *)this + 24) + 4 * v3)), v12)), (float32x2_t)0x3000000030000000))));
      float v14 = vmlas_n_f32(COERCE_FLOAT(vmul_f32(v13, v13).i32[1]), v13.f32[0], v13.f32[0]);
    }
    while (v14 >= 1.0);
    float32x2_t v18 = v13;
    float v15 = logf(v14) * -2.0 / v14;
    **(float32x2_t **)(*((void *)this + 2) + 24 * v3) = vmul_n_f32(v18, sqrtf(v15));
    *(_WORD *)(*((void *)this + 5) + 2 * v3) = 1;
  }
  else
  {
    *(_WORD *)(v4 + 2 * a2) = v5 + 1;
  }
}

void *std::vector<std::vector<float>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1B1BAE848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *std::vector<short>::vector(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<short>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 2 * a2);
    a1[1] = &v4[2 * a2];
  }
  return a1;
}

void sub_1B1BAE8B8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<short>::__vallocate[abi:ne180100](void *a1, uint64_t a2)
{
  if (a2 < 0) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[2 * v4];
  return result;
}

uint64_t kaldi::quasar::Vocab::Vocab(uint64_t a1, uint64_t *a2, int a3, int a4)
{
  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v8 = a1 + 8;
  uint64_t v9 = a1 + 32;
  *(_OWORD *)(a1 + 56) = 0u;
  uint64_t v10 = a1 + 56;
  unint64_t v11 = (void *)(a1 + 80);
  *(_OWORD *)(a1 + ++*(_DWORD *)(result + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 1065353216;
  *(_OWORD *)(a1 + 120) = 0u;
  int v12 = (uint64_t *)(a1 + 120);
  char v42 = (void **)(a1 + 144);
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 1--*(_DWORD *)(a9 + 52) = 0u;
  char v39 = (unsigned __int8 *)(a1 + 32);
  char v40 = (unsigned __int8 *)(a1 + 8);
  char v38 = (unsigned __int8 *)(a1 + 56);
  kaldi::ExpectToken(a2, a3, "<VocabSize>");
  kaldi::ReadBasicType<int>(a2, a3, a1);
  kaldi::ExpectToken(a2, a3, "<UnknownWord>");
  kaldi::ReadToken(a2, a3, v8);
  kaldi::ExpectToken(a2, a3, "<BeginOfSentenceWord>");
  kaldi::ReadToken(a2, a3, v9);
  kaldi::ExpectToken(a2, a3, "<EndOfSentenceWord>");
  kaldi::ReadToken(a2, a3, v10);
  if (*(int *)a1 >= 1)
  {
    int v13 = 0;
    uint64_t v41 = a1 + 160;
    do
    {
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v45 = 0;
      long double __x = 0.0;
      kaldi::ReadToken(a2, a3, (uint64_t)__p);
      kaldi::ReadBasicType<double>(a2, a3, &__x);
      unint64_t v46 = __p;
      *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v11, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (long long **)&v46)+ 10) = v13;
      unint64_t v14 = *(void *)(a1 + 128);
      if (v14 >= *(void *)(a1 + 136))
      {
        uint64_t v16 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v12, (long long *)__p);
      }
      else
      {
        if (SHIBYTE(v45) < 0)
        {
          std::string::__init_copy_ctor_external(*(std::string **)(a1 + 128), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          long long v15 = *(_OWORD *)__p;
          *(void *)(v14 + 16) = v45;
          *(_OWORD *)unint64_t v14 = v15;
        }
        uint64_t v16 = v14 + 24;
        *(void *)(a1 + 128) = v14 + 24;
      }
      *(void *)(a1 + 128) = v16;
      if (a4)
      {
        double v17 = log(__x);
        double v18 = v17;
        char v20 = *(double **)(a1 + 152);
        unint64_t v19 = *(void *)(a1 + 160);
        if ((unint64_t)v20 >= v19)
        {
          char v25 = (double *)*v42;
          uint64_t v26 = ((char *)v20 - (unsigned char *)*v42) >> 3;
          unint64_t v27 = v26 + 1;
          if ((unint64_t)(v26 + 1) >> 61) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v28 = v19 - (void)v25;
          if (v28 >> 2 > v27) {
            unint64_t v27 = v28 >> 2;
          }
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v29 = v27;
          }
          if (v29)
          {
            int v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v41, v29);
            char v25 = *(double **)(a1 + 144);
            char v20 = *(double **)(a1 + 152);
          }
          else
          {
            int v30 = 0;
          }
          long long v34 = (long double *)&v30[8 * v26];
          *long long v34 = v18;
          unint64_t v24 = v34 + 1;
          while (v20 != v25)
          {
            uint64_t v35 = *((void *)v20-- - 1);
            *((void *)v34-- - 1) = v35;
          }
LABEL_39:
          *(void *)(a1 + 144) = v34;
          *(void *)(a1 + 1--*(_DWORD *)(a9 + 52) = v24;
          *(void *)(a1 + 160) = &v30[8 * v29];
          if (v25) {
            operator delete(v25);
          }
          goto LABEL_41;
        }
        *char v20 = v17;
        unint64_t v21 = v20 + 1;
      }
      else
      {
        char v23 = *(double **)(a1 + 152);
        unint64_t v22 = *(void *)(a1 + 160);
        if ((unint64_t)v23 >= v22)
        {
          char v25 = (double *)*v42;
          uint64_t v31 = ((char *)v23 - (unsigned char *)*v42) >> 3;
          unint64_t v32 = v31 + 1;
          if ((unint64_t)(v31 + 1) >> 61) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v33 = v22 - (void)v25;
          if (v33 >> 2 > v32) {
            unint64_t v32 = v33 >> 2;
          }
          if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v29 = v32;
          }
          if (v29)
          {
            int v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v41, v29);
            char v25 = *(double **)(a1 + 144);
            char v23 = *(double **)(a1 + 152);
          }
          else
          {
            int v30 = 0;
          }
          long long v34 = (long double *)&v30[8 * v31];
          *long long v34 = __x;
          unint64_t v24 = v34 + 1;
          while (v23 != v25)
          {
            uint64_t v36 = *((void *)v23-- - 1);
            *((void *)v34-- - 1) = v36;
          }
          goto LABEL_39;
        }
        *char v23 = __x;
        unint64_t v21 = v23 + 1;
      }
      unint64_t v24 = v21;
LABEL_41:
      *(void *)(a1 + 1--*(_DWORD *)(a9 + 52) = v24;
      if (SHIBYTE(v45) < 0) {
        operator delete(__p[0]);
      }
      ++v13;
    }
    while (v13 < *(_DWORD *)a1);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v11, v40);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v11, v39);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v11, v38);
  unint64_t v46 = (void **)v40;
  *(_DWORD *)(a1 + 168) = *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v11, v40, (uint64_t)&std::piecewise_construct, (long long **)&v46)+ 10);
  return a1;
}

void sub_1B1BAECF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, void **a12, uint64_t a13, void **a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  unint64_t v24 = *a14;
  if (*a14)
  {
    *(void *)(v21 + 1--*(_DWORD *)(a9 + 52) = v24;
    operator delete(v24);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v22);
  if (*(char *)(v21 + 79) < 0) {
    operator delete(*a10);
  }
  if (*(char *)(v21 + 55) < 0) {
    operator delete(*a11);
  }
  if (*(char *)(v21 + 31) < 0) {
    operator delete(*a12);
  }
  _Unwind_Resume(a1);
}

void kaldi::quasar::Vocab::OOvWord(kaldi::quasar::Vocab *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 1), *((void *)this + 2));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 3);
  }
}

void kaldi::quasar::Vocab::BosWord(kaldi::quasar::Vocab *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 55) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 4), *((void *)this + 5));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 2);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 6);
  }
}

void kaldi::quasar::Vocab::EosWord(kaldi::quasar::Vocab *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 79) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 7), *((void *)this + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 56);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 9);
  }
}

uint64_t kaldi::quasar::Vocab::GetWordId(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((void *)(a1 + 80), a2);
  uint64_t v4 = (unsigned int *)(v3 + 40);
  if (!v3) {
    uint64_t v4 = (unsigned int *)(a1 + 168);
  }
  return *v4;
}

uint64_t kaldi::quasar::Vocab::GetWord(kaldi::quasar::Vocab *this, unsigned int a2)
{
  if ((a2 & 0x80000000) != 0 || *(_DWORD *)this <= (signed int)a2) {
    return (uint64_t)this + 8;
  }
  else {
    return *((void *)this + 15) + 24 * a2;
  }
}

uint64_t kaldi::quasar::Vocab::VocabSize(kaldi::quasar::Vocab *this)
{
  return *(unsigned int *)this;
}

void kaldi::CopySetToVector<int>(void *a1, std::vector<unsigned int> *this)
{
  std::vector<int>::resize(this, a1[2]);
  uint64_t v4 = (void *)*a1;
  if ((void *)*a1 != a1 + 1)
  {
    std::vector<unsigned int>::pointer begin = this->__begin_;
    do
    {
      *std::vector<unsigned int>::pointer begin = *((_DWORD *)v4 + 7);
      uint64_t v6 = (void *)v4[1];
      if (v6)
      {
        do
        {
          unint64_t v7 = v6;
          uint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          unint64_t v7 = (void *)v4[2];
          BOOL v8 = *v7 == (void)v4;
          uint64_t v4 = v7;
        }
        while (!v8);
      }
      ++begin;
      uint64_t v4 = v7;
    }
    while (v7 != a1 + 1);
  }
}

uint64_t kaldi::CuSubMatrix<float>::CuSubMatrix(uint64_t result, uint64_t a2, int a3)
{
  *(_OWORD *)(result + ++*(_DWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 8) = 0u;
  *(void *)uint64_t result = &unk_1F0A472A0;
  int v3 = *(_DWORD *)(a2 + 16);
  int v4 = v3 / a3;
  if (v3 % a3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"the vector cannot be represented as a matrix with rows ", 55);
    size_t v5 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" , while it has dimension ", 26);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v6);
  }
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(result + 16) = v4;
  *(_DWORD *)(result + 20) = a3;
  *(_DWORD *)(result + ++*(_DWORD *)(result + 24) = v4;
  *(_DWORD *)(result + 28) = v3;
  *(void *)(result + 32) = *(void *)(a2 + 24);
  return result;
}

void sub_1B1BAEFF8(_Unwind_Exception *a1)
{
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void sub_1B1BAF124(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B1BAF200(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B1BAF598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1B1BAF7C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1B1BAFBDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

id EARHelpers::VectorToArray<double>(double **a1)
{
  uint64_t v2 = [MEMORY[0x1E4F1CA48] array];
  int v3 = *a1;
  int v4 = a1[1];
  if (*a1 != v4)
  {
    do
    {
      size_t v5 = [NSNumber numberWithDouble:*v3];
      [v2 addObject:v5];

      ++v3;
    }
    while (v3 != v4);
  }
  uint64_t v6 = (void *)[v2 copy];

  return v6;
}

void sub_1B1BAFD04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B1BAFF2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  std::__tree<std::string>::destroy(v38 - 88, *(char **)(v38 - 80));
  _Unwind_Resume(a1);
}

void sub_1B1BB02E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

quasar::HybridEndpointer *std::unique_ptr<quasar::HybridEndpointer>::reset[abi:ne180100](quasar::HybridEndpointer **a1, quasar::HybridEndpointer *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    quasar::HybridEndpointer::~HybridEndpointer(result);
    JUMPOUT(0x1B3EA8670);
  }
  return result;
}

_OWORD *std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v6 = (void **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v12, a2);
  unint64_t v7 = *v6;
  if (!*v6)
  {
    BOOL v8 = (uint64_t **)v6;
    unint64_t v7 = operator new(0x40uLL);
    uint64_t v9 = *a4;
    uint64_t v10 = *((void *)*a4 + 2);
    _DWORD v7[2] = **a4;
    *((void *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *uint64_t v9 = 0;
    *((_DWORD *)v7 + 14) = 0;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v12, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t quasar::LatticeRnnMitigator::LatticeRnnMitigator(uint64_t a1, long long *a2)
{
  *(void *)quasar::Decoder::Decoder(a1, a2) = &unk_1F0A54878;
  int v3 = (char *)operator new(0xA8uLL);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = 0;
  *(void *)int v3 = &unk_1F0A60678;
  *((void *)v3 + 19) = 0;
  *((void *)v3 + 20) = 0;
  *((void *)v3 + 18) = 0;
  *(_OWORD *)(v3 + 40) = 0u;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + ++*(_DWORD *)(result + 24) = 0u;
  *((_DWORD *)v3 + 34) = 0;
  *(void *)(a1 + 448) = v3 + 24;
  *(void *)(a1 + 456) = v3;
  *(unsigned char *)(a1 + 688) = 0;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 6++*(_DWORD *)(result + 24) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(void *)(a1 + 696) = 1065353216;
  *(_DWORD *)(a1 + 704) = 0;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  return a1;
}

void sub_1B1BB0548(_Unwind_Exception *a1)
{
  quasar::Decoder::~Decoder(v1);
  _Unwind_Resume(a1);
}

void quasar::LatticeRnnMitigator::finishInit(quasar::LatticeRnnMitigator *this)
{
  quasar::QsrTextSymbolTable::init(*((const std::string **)this + 56), (quasar::LatticeRnnMitigator *)((char *)this + 32), 0, *((unsigned __int8 *)this + 441), 1);
  quasar::LatticeRnnMitigator::initArcFeatExtractors(this);
  uint64_t v2 = (uint64_t *)*((void *)this + 59);
  int v3 = (uint64_t *)*((void *)this + 60);
  while (v2 != v3)
  {
    uint64_t v4 = *v2;
    v2 += 2;
    *((_DWORD *)this + 176) += (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
  }
  std::string::basic_string[abi:ne180100]<0>(v22, "|");
  quasar::splitAndTrimNoEmpty((const std::string *)((char *)this + 712), (char *)v22, __p);
  std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)((char *)this + 760));
  *(_OWORD *)((char *)this + 760) = *(_OWORD *)__p;
  *((void *)this + 97) = v6;
  __p[1] = 0;
  *(void *)&long long v6 = 0;
  __p[0] = 0;
  unint64_t v24 = __p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v24);
  if (v23 < 0) {
    operator delete(v22[0]);
  }
  if (*((void *)this + 95) == *((void *)this + 96))
  {
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    long long v8 = 0u;
    long long v9 = 0u;
    long long v6 = 0u;
    long long v7 = 0u;
    *(_OWORD *)std::string __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "filter-devices cannot be empty");
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v22, "|");
    quasar::splitAndTrimNoEmpty((const std::string *)((char *)this + 736), (char *)v22, __p);
    std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)((char *)this + 784));
    *((_OWORD *)this + 49) = *(_OWORD *)__p;
    *((void *)this + 100) = v6;
    __p[1] = 0;
    *(void *)&long long v6 = 0;
    __p[0] = 0;
    unint64_t v24 = __p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v24);
    if (v23 < 0) {
      operator delete(v22[0]);
    }
    if (*((void *)this + 98) != *((void *)this + 99)) {
      operator new();
    }
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    long long v8 = 0u;
    long long v9 = 0u;
    long long v6 = 0u;
    long long v7 = 0u;
    *(_OWORD *)std::string __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "filter-input-origins cannot be empty");
  }
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
}

void sub_1B1BB07EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1B3EA8670](v14, 0x10B0C40310220B6);
  _Unwind_Resume(a1);
}

void quasar::LatticeRnnMitigator::initArcFeatExtractors(quasar::LatticeRnnMitigator *this)
{
  uint64_t v2 = (const std::string *)((char *)this + 664);
  std::string::basic_string[abi:ne180100]<0>(__p, ",");
  quasar::splitAndTrimNoEmpty(v2, (char *)__p, &v67);
  if (SBYTE7(v49) < 0) {
    operator delete(__p[0]);
  }
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__clear[abi:ne180100]((uint64_t *)this + 59);
  uint64_t v3 = v67;
  for (uint64_t i = v68; v3 != i; v3 += 24)
  {
    long long v66 = 0uLL;
    if (*(char *)(v3 + 23) < 0)
    {
      uint64_t v7 = *(void *)(v3 + 8);
      if (v7 == 7)
      {
        if (**(_DWORD **)v3 == 1130316609 && *(_DWORD *)(*(void *)v3 + 3) == 1414745923)
        {
LABEL_53:
          uint64_t v26 = operator new(0x20uLL);
          v26[1] = 0;
          v26[2] = 0;
          *uint64_t v26 = &unk_1F0A60EC8;
          v26[3] = &unk_1F0A55F28;
          *(void *)&long long v66 = v26 + 3;
          *((void *)&v66 + 1) = v26;
          goto LABEL_96;
        }
        uint64_t v7 = *(void *)(v3 + 8);
      }
      else if (v7 == 8 && **(void **)v3 == 0x45524F43535F4341)
      {
        goto LABEL_53;
      }
      if (v7 == 13)
      {
        long long v6 = *(uint64_t **)v3;
LABEL_20:
        uint64_t v9 = *v6;
        uint64_t v10 = *(uint64_t *)((char *)v6 + 5);
        if (v9 == 0x505F464F5F474142 && v10 == 0x53454E4F48505F46)
        {
          std::allocate_shared[abi:ne180100]<quasar::WlatArcFeBagOfPhones,std::allocator<quasar::WlatArcFeBagOfPhones>,std::string &,std::string &,BOOL &,void>((uint64_t)this + 640, (uint64_t)this + 616, (unsigned __int8 *)this + 688, __p);
          long long v12 = *(_OWORD *)__p;
          __p[0] = 0;
          __p[1] = 0;
          long long v13 = (std::__shared_weak_count *)*((void *)&v66 + 1);
          long long v66 = v12;
          if (!v13) {
            goto LABEL_96;
          }
          std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          uint64_t v14 = (std::__shared_weak_count *)__p[1];
          if (!__p[1]) {
            goto LABEL_96;
          }
          goto LABEL_95;
        }
      }
    }
    else
    {
      int v5 = *(unsigned __int8 *)(v3 + 23);
      if (v5 == 7)
      {
        if (*(_DWORD *)v3 == 1130316609 && *(_DWORD *)(v3 + 3) == 1414745923) {
          goto LABEL_53;
        }
      }
      else
      {
        if (v5 != 8)
        {
          long long v6 = (uint64_t *)v3;
          if (v5 != 13) {
            goto LABEL_29;
          }
          goto LABEL_20;
        }
        if (*(void *)v3 == 0x45524F43535F4341) {
          goto LABEL_53;
        }
      }
    }
LABEL_29:
    long long v15 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v65, "KEYWORD");
    long long v16 = std::string::append(v15, ":");
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    *(void *)&long long v49 = *((void *)&v16->__r_.__value_.__l + 2);
    *(_OWORD *)std::string __p = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    BOOL v18 = quasar::startsWith((unsigned __int8 *)v3, (unsigned __int8 *)__p);
    if (SBYTE7(v49) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v65.__r_.__value_.__l.__data_);
      if (v18)
      {
LABEL_33:
        std::string::basic_string(&v65, (const std::string *)v3, 8uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v69);
        int v19 = quasar::QsrTextSymbolTable::Find(*((void *)this + 56), (uint64_t)&v65);
        if (v19 == -1)
        {
          long long v63 = 0u;
          long long v64 = 0u;
          long long v61 = 0u;
          long long v62 = 0u;
          long long v59 = 0u;
          long long v60 = 0u;
          long long v57 = 0u;
          long long v58 = 0u;
          long long v55 = 0u;
          long long v56 = 0u;
          long long v53 = 0u;
          long long v54 = 0u;
          long long v51 = 0u;
          long long v52 = 0u;
          long long v49 = 0u;
          long long v50 = 0u;
          *(_OWORD *)std::string __p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          unint64_t v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Cannot find symbol ID for ", 26);
          int v45 = *(char *)(v3 + 23);
          if (v45 >= 0) {
            uint64_t v46 = v3;
          }
          else {
            uint64_t v46 = *(void *)v3;
          }
          if (v45 >= 0) {
            uint64_t v47 = *(unsigned __int8 *)(v3 + 23);
          }
          else {
            uint64_t v47 = *(void *)(v3 + 8);
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, v46, v47);
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
        }
        long long v20 = operator new(0x28uLL);
        v20[1] = 0;
        v20[2] = 0;
        *long long v20 = &unk_1F0A60288;
        v20[3] = &unk_1F0A53970;
        *((_DWORD *)v20 + 8) = v19;
        long long v21 = (std::__shared_weak_count *)*((void *)&v66 + 1);
        *(void *)&long long v66 = v20 + 3;
        *((void *)&v66 + 1) = v20;
        if (v21) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v21);
        }
        if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v65.__r_.__value_.__l.__data_);
        }
        goto LABEL_96;
      }
    }
    else if (v18)
    {
      goto LABEL_33;
    }
    int v22 = *(unsigned __int8 *)(v3 + 23);
    if (*(char *)(v3 + 23) < 0)
    {
      uint64_t v27 = *(void *)(v3 + 8);
      if (v27 == 8 && **(void **)v3 == 0x45524F43535F4D4CLL) {
        goto LABEL_91;
      }
      if (v27 == 10)
      {
        if (**(void **)v3 == 0x4F435F4850415247 && *(_WORD *)(*(void *)v3 + 8) == 21587) {
          goto LABEL_91;
        }
        uint64_t v27 = *(void *)(v3 + 8);
        if (v27 == 10)
        {
          if (**(void **)v3 == 0x4D4152465F4D554ELL && *(_WORD *)(*(void *)v3 + 8) == 21317) {
            goto LABEL_89;
          }
          if ((v22 & 0x80) == 0) {
            goto LABEL_100;
          }
        }
      }
      if (v27 != 13) {
        goto LABEL_100;
      }
      if (**(void **)v3 == 0x54534F505F474F4CLL && *(void *)(*(void *)v3 + 5) == 0x524F49524554534FLL) {
        goto LABEL_92;
      }
      if (*(void *)(v3 + 8) != 13) {
        goto LABEL_100;
      }
      unint64_t v24 = *(uint64_t **)v3;
    }
    else
    {
      if (v22 == 8)
      {
        if (*(void *)v3 != 0x45524F43535F4D4CLL) {
          goto LABEL_100;
        }
LABEL_91:
        long long v34 = operator new(0x20uLL);
        v34[1] = 0;
        v34[2] = 0;
        *long long v34 = &unk_1F0A607C8;
        uint64_t v35 = v34 + 3;
        uint64_t v36 = &unk_1F0A543E8;
        goto LABEL_93;
      }
      if (v22 == 10)
      {
        if (*(void *)v3 != 0x4F435F4850415247 || *(_WORD *)(v3 + 8) != 21587)
        {
          if (*(void *)v3 != 0x4D4152465F4D554ELL || *(_WORD *)(v3 + 8) != 21317)
          {
LABEL_100:
            long long v63 = 0u;
            long long v64 = 0u;
            long long v61 = 0u;
            long long v62 = 0u;
            long long v59 = 0u;
            long long v60 = 0u;
            long long v57 = 0u;
            long long v58 = 0u;
            long long v55 = 0u;
            long long v56 = 0u;
            long long v53 = 0u;
            long long v54 = 0u;
            long long v51 = 0u;
            long long v52 = 0u;
            long long v49 = 0u;
            long long v50 = 0u;
            *(_OWORD *)std::string __p = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
            char v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Unknown feature type: ", 22);
            int v41 = *(char *)(v3 + 23);
            if (v41 >= 0) {
              uint64_t v42 = v3;
            }
            else {
              uint64_t v42 = *(void *)v3;
            }
            if (v41 >= 0) {
              uint64_t v43 = *(unsigned __int8 *)(v3 + 23);
            }
            else {
              uint64_t v43 = *(void *)(v3 + 8);
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, v42, v43);
            quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
          }
LABEL_89:
          long long v34 = operator new(0x20uLL);
          v34[1] = 0;
          v34[2] = 0;
          *long long v34 = &unk_1F0A60800;
          uint64_t v35 = v34 + 3;
          uint64_t v36 = &unk_1F0A54418;
          goto LABEL_93;
        }
        goto LABEL_91;
      }
      if (v22 != 13) {
        goto LABEL_100;
      }
      if (*(void *)v3 == 0x54534F505F474F4CLL && *(void *)(v3 + 5) == 0x524F49524554534FLL)
      {
LABEL_92:
        long long v34 = operator new(0x20uLL);
        v34[1] = 0;
        v34[2] = 0;
        *long long v34 = &unk_1F0A60F38;
        uint64_t v35 = v34 + 3;
        uint64_t v36 = &unk_1F0A55F88;
        goto LABEL_93;
      }
      unint64_t v24 = (uint64_t *)v3;
    }
    uint64_t v31 = *v24;
    uint64_t v32 = *(uint64_t *)((char *)v24 + 5);
    if (v31 != 0x54534F505F4E494CLL || v32 != 0x524F49524554534FLL) {
      goto LABEL_100;
    }
    long long v34 = operator new(0x20uLL);
    v34[1] = 0;
    v34[2] = 0;
    *long long v34 = &unk_1F0A60F00;
    uint64_t v35 = v34 + 3;
    uint64_t v36 = &unk_1F0A55F58;
LABEL_93:
    v34[3] = v36;
    char v39 = (std::__shared_weak_count *)*((void *)&v66 + 1);
    *(void *)&long long v66 = v35;
    *((void *)&v66 + 1) = v34;
    if (v39)
    {
      uint64_t v14 = v39;
LABEL_95:
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
LABEL_96:
    std::vector<std::shared_ptr<quasar::WlatArcFeatureExtractor>>::push_back[abi:ne180100]((uint64_t *)this + 59, &v66);
    if (*((void *)&v66 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v66 + 1));
    }
  }
  __p[0] = &v67;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1B1BB0FE8(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 145) < 0) {
    operator delete(*(void **)(v1 - 168));
  }
  uint64_t v3 = *(std::__shared_weak_count **)(v1 - 136);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (void **)(v1 - 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  _Unwind_Resume(a1);
}

void sub_1B1BB1020(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1B1BB100CLL);
}

uint64_t quasar::LatticeRnnMitigator::runImpl(uint64_t a1, uint64_t *a2, uint64_t *a3, quasar::SpeechRequestData **a4)
{
  if (quasar::SpeechRequestData::isUtteranceDetectionEnabled(*a4))
  {
    if (quasar::gLogLevel >= 4)
    {
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      *(_OWORD *)std::string __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"This doesn't work when utt detect is enabled. Doing nothing.", 60);
LABEL_17:
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
      return 0;
    }
    return 0;
  }
  uint64_t v8 = *a3;
  if (!*(unsigned char *)(*a3 + 872))
  {
    Deviceuint64_t Id = (std::string *)quasar::SpeechRequestData::getDeviceId(*a4);
    if (!quasar::isMatchWithWildcard(DeviceId, (uint64_t *)(a1 + 760), 1)
      || (InputOrigin = (std::string *)quasar::SpeechRequestData::getInputOrigin(*a4),
          (quasar::isMatchWithWildcard(InputOrigin, (uint64_t *)(a1 + 784), 1) & 1) == 0))
    {
      if (quasar::gLogLevel >= 4)
      {
        long long v38 = 0u;
        long long v39 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        long long v24 = 0u;
        long long v25 = 0u;
        *(_OWORD *)std::string __p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Request does not match filter. Doing nothing.", 45);
        goto LABEL_17;
      }
      return 0;
    }
    uint64_t v11 = *a3;
    uint64_t v12 = a2[21];
    (*(void (**)(void))(**(void **)(*a2 + 16) + 32))(*(void *)(*a2 + 16));
    quasar::DecoderChainOutput::getWordHypLattice(v11, v12, a2[23], &v21);
    if (v21)
    {
      if (v21[3] != v21[2])
      {
        quasar::WlatArcFeatureExtractor::runArcFeatureExtraction((uint64_t)v21, *(unsigned int *)(a1 + 704), a1 + 472);
        BOOL v18 = 0;
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        long long v17 = &unk_1F0A517C0;
        kaldi::quasar::LatticeRnn::Run(*(void *)(a1 + 464), v21, &v17);
        if (v19 != 1)
        {
          long long v38 = 0u;
          long long v39 = 0u;
          long long v36 = 0u;
          long long v37 = 0u;
          long long v34 = 0u;
          long long v35 = 0u;
          long long v32 = 0u;
          long long v33 = 0u;
          long long v30 = 0u;
          long long v31 = 0u;
          long long v28 = 0u;
          long long v29 = 0u;
          long long v26 = 0u;
          long long v27 = 0u;
          long long v24 = 0u;
          long long v25 = 0u;
          *(_OWORD *)std::string __p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"LatticeRnn output is incorrect ", 31);
          std::ostream::operator<<();
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
        }
        float v13 = *v18;
        *(unsigned char *)(v8 + 872) = 1;
        std::string::operator=((std::string *)(v8 + 880), (const std::string *)(a1 + 496));
        *(double *)(v8 + 904) = *(float *)(a1 + 692);
        double v14 = v13;
        *(double *)(v8 + 912) = v14;
        *(void *)(v8 + 920) = *(void *)(a1 + 696);
        uint64_t v15 = *(void *)(*a3 + 424);
        std::string::basic_string[abi:ne180100]<0>(__p, "latnnMitigatorScore");
        quasar::SpeechRequestResultData::addDump(v15, (long long *)__p, v14);
        if (SBYTE7(v24) < 0) {
          operator delete(__p[0]);
        }
        kaldi::CuVector<float>::~CuVector(&v17);
        goto LABEL_24;
      }
      if (quasar::gLogLevel < 4)
      {
LABEL_24:
        if (v22) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v22);
        }
        return 0;
      }
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      *(_OWORD *)std::string __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Lattice is empty. Doing nothing", 31);
    }
    else
    {
      if (quasar::gLogLevel < 4) {
        goto LABEL_24;
      }
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      *(_OWORD *)std::string __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Lattice is null. Doing nothing", 30);
    }
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
    goto LABEL_24;
  }
  if (quasar::gLogLevel >= 4)
  {
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    *(_OWORD *)std::string __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"An earlier LatticeRnn in the decoder chain already ran. Doing nothing.", 70);
    goto LABEL_17;
  }
  return 0;
}

void sub_1B1BB14AC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
}

void sub_1B1BB14E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B1BB14F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)va);
  JUMPOUT(0x1B1BB1508);
}

uint64_t quasar::LatticeRnnMitigator::registerParams(quasar::QsrTextSymbolTable **this, quasar::SystemConfig *a2)
{
  quasar::QsrTextSymbolTable::Register(this[56], a2, 120, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  std::string::basic_string[abi:ne180100]<0>(v7, "version");
  std::string::basic_string[abi:ne180100]<0>(__p, "Model version");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v7, (uint64_t)(this + 62), (uint64_t)__p, 1, 120, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "transform-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "See LatticeRnn in nnet/lattice-rnn.h");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v7, (uint64_t)(this + 65), (uint64_t)__p, 1, 120, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "forward-model-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "See LatticeRnn in nnet/lattice-rnn.h");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v7, (uint64_t)(this + 68), (uint64_t)__p, 1, 120, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "backward-model-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "See LatticeRnn in nnet/lattice-rnn.h");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v7, (uint64_t)(this + 71), (uint64_t)__p, 0, 120, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "output-model-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "See LatticeRnn in nnet/lattice-rnn.h");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v7, (uint64_t)(this + 74), (uint64_t)__p, 1, 120, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "model-feature-list");
  std::string::basic_string[abi:ne180100]<0>(__p, "Comma-separated list of arc features. Example: \"BAG_OF_PHONES,KEYWORD:hey,KEYWORD:Siri,LM_SCORE,AC_SCORE,NUM_FRAMES,LOG_POSTERIOR,LIN_POSTERIOR\"");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v7, (uint64_t)(this + 83), (uint64_t)__p, 1, 120, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "phone-pd2pi-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "See LatticeRnn in nnet/lattice-rnn.h");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v7, (uint64_t)(this + 77), (uint64_t)__p, 1, 120, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "bag-of-phones-model-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "See LatticeRnn in nnet/lattice-rnn.h");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v7, (uint64_t)(this + 80), (uint64_t)__p, 1, 120, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "enable-memory-map");
  std::string::basic_string[abi:ne180100]<0>(__p, "Map model into memory (requires aligned models)");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v7, (uint64_t)(this + 86), (uint64_t)__p, 1, 120, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "threshold");
  std::string::basic_string[abi:ne180100]<0>(__p, "0 = not trigger, 1 = trigger");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v7, (uint64_t)this + 692, (uint64_t)__p, 1, 120, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "filter-devices");
  std::string::basic_string[abi:ne180100]<0>(__p, "FORMAT: Pipe-separated list of devices with support for wildcards. Wildcards must come at the end of each device in the list. Example 1: \"filter-devices\": \"*\" - matches any device. Example 2: \"filter-devices\": \"iPhone7|Watch*|AudioAccessory1\" - matches iPhone7, AudioAccessory1, and devices starting with \"Watch\". USAGE: One decoder chain can have multiple LatticeRnnMitigators, which are specified using colon notation to create unique names. Example decoder chain: lattice-biglm-lme-faster, ..., lattice-rnn-mitigator:X, lattice-rnn-mitigator:Y, lattice-rnn-mitigator:Z. The LatticeRnnMitigators are checked one-by-one in order. The first one that matches a request will 'claim' the request, run, and prevent the rest from running. All the filter-* conditions are AND'ed together, so a request must match all of them for the corresponding LatticeRnnMitigator to run.");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v7, (uint64_t)(this + 89), (uint64_t)__p, 1, 142, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "filter-input-origins");
  std::string::basic_string[abi:ne180100]<0>(__p, "List of input origins with the same format as filter-devices.");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v7, (uint64_t)(this + 92), (uint64_t)__p, 1, 142, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "calibration-scale");
  std::string::basic_string[abi:ne180100]<0>(__p, "Calibration Scale");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v7, (uint64_t)(this + 87), (uint64_t)__p, 0, 120, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "calibration-offset");
  std::string::basic_string[abi:ne180100]<0>(__p, "Calibration Offset");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v7, (uint64_t)this + 700, (uint64_t)__p, 0, 120, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  MEMORY[0x1B3EA7B20](this + 89, "*");
  return MEMORY[0x1B3EA7B20](this + 92, "VoiceTrigger");
}

void sub_1B1BB1B6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::LatticeRnnMitigator::affectsRecognitionResults(quasar::LatticeRnnMitigator *this)
{
  return 1;
}

uint64_t quasar::LatticeRnnMitigator::supportsEager(quasar::LatticeRnnMitigator *this)
{
  return 1;
}

void quasar::LatticeRnnMitigator::~LatticeRnnMitigator(void **this)
{
  quasar::LatticeRnnMitigator::~LatticeRnnMitigator(this);
  JUMPOUT(0x1B3EA8670);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;
  void **v4;

  *this = &unk_1F0A54878;
  uint64_t v4 = this + 98;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v4 = this + 95;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*((char *)this + 759) < 0) {
    operator delete(this[92]);
  }
  if (*((char *)this + 735) < 0) {
    operator delete(this[89]);
  }
  if (*((char *)this + 687) < 0) {
    operator delete(this[83]);
  }
  if (*((char *)this + 663) < 0) {
    operator delete(this[80]);
  }
  if (*((char *)this + 639) < 0) {
    operator delete(this[77]);
  }
  if (*((char *)this + 615) < 0) {
    operator delete(this[74]);
  }
  if (*((char *)this + 591) < 0) {
    operator delete(this[71]);
  }
  if (*((char *)this + 567) < 0) {
    operator delete(this[68]);
  }
  if (*((char *)this + 543) < 0) {
    operator delete(this[65]);
  }
  if (*((char *)this + 519) < 0) {
    operator delete(this[62]);
  }
  uint64_t v4 = this + 59;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v2 = (uint64_t)this[58];
  this[58] = 0;
  if (v2) {
    std::default_delete<kaldi::quasar::LatticeRnn>::operator()[abi:ne180100]((uint64_t)(this + 58), v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)this[57];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  quasar::Decoder::~Decoder((quasar::Decoder *)this);
}

void *std::allocate_shared[abi:ne180100]<quasar::WlatArcFeBagOfPhones,std::allocator<quasar::WlatArcFeBagOfPhones>,std::string &,std::string &,BOOL &,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, unsigned __int8 *a3@<X3>, void *a4@<X8>)
{
  char v8 = operator new(0x1B0uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::WlatArcFeBagOfPhones>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::string &,BOOL &,std::allocator<quasar::WlatArcFeBagOfPhones>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1B1BB1DF0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::WlatArcFeBagOfPhones>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::string &,BOOL &,std::allocator<quasar::WlatArcFeBagOfPhones>,0>(void *a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A60C60;
  quasar::WlatArcFeBagOfPhones::WlatArcFeBagOfPhones(a1 + 3, a2, a3, *a4);
  return a1;
}

void sub_1B1BB1E50(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::WlatArcFeBagOfPhones>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60C60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::WlatArcFeBagOfPhones>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60C60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::WlatArcFeBagOfPhones>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<quasar::WlatArcFeKeyword>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60288;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::WlatArcFeKeyword>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60288;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::WlatArcFeKeyword>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t kaldi::quasar::GrammarFst::CreateFst(uint64_t a1, const char ***a2, uint64_t a3, int a4)
{
  if (a2[1] == *a2)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v46);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v46, (uint64_t)"the input grammar data is empty", 31);
LABEL_52:
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v46);
    }
    return 0;
  }
  if (!(*(uint64_t (**)(uint64_t))(*(void *)a3 + 120))(a3))
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v46);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v46, (uint64_t)"the input symbol table is empty", 31);
      goto LABEL_52;
    }
    return 0;
  }
  (*(void (**)(uint64_t, const char *))(*(void *)a3 + 104))(a3, "<eps>");
  if (a4)
  {
    uint64_t v9 = *a2;
    char v8 = a2[1];
    if (*a2 == v8)
    {
      unint64_t v10 = 0;
    }
    else
    {
      unint64_t v10 = 0;
      do
      {
        uint64_t v11 = *v9;
        if (v9[1] == *v9) {
LABEL_54:
        }
          std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
        if (v11[23] < 0) {
          uint64_t v11 = *(const char **)v11;
        }
        v10 += atoi(v11);
        v9 += 3;
      }
      while (v9 != v8);
    }
  }
  else
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2);
  }
  if ((int)((*(void *)(*(void *)(a1 + 8) + 72) - *(void *)(*(void *)(a1 + 8) + 64)) >> 3) >= 1) {
    fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::DeleteStates(a1);
  }
  if (v10)
  {
    uint64_t v44 = a3;
    int v12 = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::AddState(a1);
    fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetStart(a1, v12);
    int v45 = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::AddState(a1);
    float v13 = *(float *)(a1 + 16);
    float v14 = *(float *)(a1 + 20);
    double v15 = log((double)v10);
    long long v17 = *a2;
    long long v16 = a2[1];
    if (*a2 == v16) {
      goto LABEL_39;
    }
    float v18 = v13 + (1.0 - v14) * v15;
    int v42 = a4;
    int v41 = a2;
LABEL_22:
    uint64_t v19 = *v17;
    uint64_t v20 = v17[1];
    if (a4)
    {
      if (v20 == v19) {
        goto LABEL_54;
      }
      long long v21 = *v17;
      if (v19[23] < 0) {
        long long v21 = *(const char **)v19;
      }
      int v22 = atoi(v21);
      float v23 = v18 - log((double)v22);
      unint64_t v24 = 1;
    }
    else
    {
      unint64_t v24 = 0;
      float v23 = v18;
    }
    unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((v20 - v19) >> 3);
    if (v24 >= v25) {
      goto LABEL_38;
    }
    uint64_t v26 = a1;
    int v27 = *(_DWORD *)(*(void *)(a1 + 8) + 88);
    float v43 = v23;
    uint64_t v28 = (8 * v24) | (16 * v24);
    char v29 = 1;
    while (1)
    {
      unint64_t v30 = v24 + 1;
      int v31 = v45;
      if (v24 + 1 != v25)
      {
        int v31 = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::AddState(v26);
        uint64_t v19 = *v17;
        uint64_t v20 = v17[1];
      }
      if (0xAAAAAAAAAAAAAAABLL * ((v20 - v19) >> 3) <= v24) {
        goto LABEL_54;
      }
      uint64_t v32 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)v44 + 96))(v44, &v19[v28]);
      if (v32 == -1) {
        break;
      }
      LODWORD(v46) = v32;
      HIDWORD(v46) = v32;
      float v33 = v43;
      if ((v29 & 1) == 0) {
        float v33 = 0.0;
      }
      float v47 = v33;
      int v48 = v31;
      fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck(v26);
      fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddArc(*(void **)(v26 + 8), v27, (float *)&v46);
      char v29 = 0;
      uint64_t v19 = *v17;
      uint64_t v20 = v17[1];
      unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((v20 - *v17) >> 3);
      v28 += 24;
      ++v24;
      int v27 = v31;
      if (v30 >= v25)
      {
        long long v16 = v41[1];
        a1 = v26;
        a4 = v42;
LABEL_38:
        v17 += 3;
        if (v17 == v16)
        {
LABEL_39:
          fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck(a1);
          fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetFinal(*(void **)(a1 + 8), v45, 0.0);
          return 1;
        }
        goto LABEL_22;
      }
    }
    if (kaldi::g_kaldi_verbose_level < -1) {
      return 0;
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v46);
    long long v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v46, (uint64_t)"word <", 6);
    if (0xAAAAAAAAAAAAAAABLL * ((v17[1] - *v17) >> 3) <= v24) {
      std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v36 = (uint64_t)&(*v17)[v28];
    int v37 = *(char *)(v36 + 23);
    if (v37 >= 0) {
      uint64_t v38 = (uint64_t)&(*v17)[v28];
    }
    else {
      uint64_t v38 = *(void *)v36;
    }
    if (v37 >= 0) {
      uint64_t v39 = *(unsigned __int8 *)(v36 + 23);
    }
    else {
      uint64_t v39 = *(void *)(v36 + 8);
    }
    char v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, v38, v39);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"> not in the input symbol table", 31);
    goto LABEL_52;
  }
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v46);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v46, (uint64_t)"LME: no user data available for creating a grammar FST", 54);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v46);
  }
  return 1;
}

void sub_1B1BB2410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::DeleteStates(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck(a1);
  uint64_t v2 = *(void **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::DeleteStates((uint64_t)v2);
  uint64_t result = (*(uint64_t (**)(void *))(*v2 + 24))(v2);
  v2[1] = (*((_DWORD *)v2 + 2) | result) & 4 | 0x156A5A950003;
  return result;
}

uint64_t kaldi::quasar::GrammarFst::SetClassSizeCost(uint64_t this, float a2, float a3)
{
  *(float *)(this + 16) = a2;
  *(float *)(this + 20) = a3;
  return this;
}

uint64_t *quasar::corrective_reranking::InitFeaturizers@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v3 = *result;
  if (*result != result[1])
  {
    quasar::PTree::PTree((quasar::PTree *)v5);
    quasar::PTree::getChildOptional(a2, v3);
  }
  return result;
}

void sub_1B1BB3254(_Unwind_Exception *a1)
{
  quasar::PTree::~PTree((quasar::PTree *)(v2 - 152));
  *(void *)(v2 - 1--*(_DWORD *)(a9 + 52) = v1;
  std::vector<std::unique_ptr<quasar::corrective_reranking::Featurizer>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 152));
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<quasar::corrective_reranking::ResultingTextProbabilityTransformerFeaturizer,quasar::PTree &>()
{
}

void sub_1B1BB33C4(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1081C409227ACB4);
  _Unwind_Resume(a1);
}

void quasar::corrective_reranking::WFSTWeightFeaturizer::~WFSTWeightFeaturizer(quasar::corrective_reranking::WFSTWeightFeaturizer *this)
{
}

float quasar::corrective_reranking::WFSTWeightFeaturizer::Run(uint64_t a1, uint64_t a2)
{
  return *(float *)(*(void *)(a2 + 8) + 80);
}

void quasar::corrective_reranking::ASRConfidenceFeaturizer::~ASRConfidenceFeaturizer(quasar::corrective_reranking::ASRConfidenceFeaturizer *this)
{
}

float quasar::corrective_reranking::ASRConfidenceFeaturizer::Run(uint64_t a1, uint64_t a2)
{
  return (float)*(int *)(*(void *)(a2 + 8) + 24);
}

void quasar::corrective_reranking::IsCommandFeaturizer::~IsCommandFeaturizer(quasar::corrective_reranking::IsCommandFeaturizer *this)
{
}

float quasar::corrective_reranking::IsCommandFeaturizer::Run(uint64_t a1, uint64_t a2)
{
  return (float)quasar::corrective_reranking::Parse::isEditCommand(*(quasar::corrective_reranking::Parse **)(a2 + 8));
}

void quasar::corrective_reranking::HasTargetFeaturizer::~HasTargetFeaturizer(quasar::corrective_reranking::HasTargetFeaturizer *this)
{
}

float quasar::corrective_reranking::HasTargetFeaturizer::Run(uint64_t a1, uint64_t a2)
{
  if (quasar::corrective_reranking::Parse::hasFullTextTarget(*(quasar::corrective_reranking::Parse **)(a2 + 8)))
  {
    quasar::corrective_reranking::tokenize(*(void *)(a2 + 24), &v5);
    BOOL v3 = (void)v5 == *((void *)&v5 + 1);
    char v6 = (void **)&v5;
    std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v6);
  }
  else
  {
    quasar::corrective_reranking::Parse::getTarget(*(quasar::corrective_reranking::Parse **)(a2 + 8), (uint64_t *)&v5);
    BOOL v3 = (void)v5 == *((void *)&v5 + 1);
    char v6 = (void **)&v5;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
  }
  return (float)!v3;
}

void quasar::corrective_reranking::HasMetaTargetFeaturizer::~HasMetaTargetFeaturizer(quasar::corrective_reranking::HasMetaTargetFeaturizer *this)
{
}

float quasar::corrective_reranking::HasMetaTargetFeaturizer::Run(uint64_t a1, uint64_t a2)
{
  return (float)quasar::corrective_reranking::Parse::hasFullTextTarget(*(quasar::corrective_reranking::Parse **)(a2 + 8));
}

void quasar::corrective_reranking::TargetTokenCountFeaturizer::~TargetTokenCountFeaturizer(quasar::corrective_reranking::TargetTokenCountFeaturizer *this)
{
}

float quasar::corrective_reranking::TargetTokenCountFeaturizer::Run(uint64_t a1, uint64_t a2)
{
  float v3 = -1.0;
  if (!quasar::corrective_reranking::Parse::hasFullTextTarget(*(quasar::corrective_reranking::Parse **)(a2 + 8)))
  {
    quasar::corrective_reranking::Parse::getTarget(*(quasar::corrective_reranking::Parse **)(a2 + 8), v5);
    float v3 = (float)(0xAAAAAAAAAAAAAAABLL * ((v5[1] - v5[0]) >> 3));
    char v6 = (void **)v5;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
  }
  return v3;
}

void quasar::corrective_reranking::MatchedTargetTokenCountFeaturizer::~MatchedTargetTokenCountFeaturizer(quasar::corrective_reranking::MatchedTargetTokenCountFeaturizer *this)
{
}

float quasar::corrective_reranking::MatchedTargetTokenCountFeaturizer::Run(uint64_t a1, uint64_t a2)
{
  if (quasar::corrective_reranking::Parse::hasFullTextTarget(*(quasar::corrective_reranking::Parse **)(a2 + 8)))
  {
    quasar::corrective_reranking::tokenize(*(void *)(a2 + 24), &v6);
    float v3 = (float)(unint64_t)((uint64_t)(*((void *)&v6 + 1) - v6) >> 5);
    uint64_t v7 = (void **)&v6;
    std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v7);
  }
  else
  {
    uint64_t v4 = *(void *)(a2 + 8);
    if (*(unsigned char *)(v4 + 112)) {
      return (float)(unint64_t)((uint64_t)(*(void *)(v4 + 96) - *(void *)(v4 + 88)) >> 3);
    }
    else {
      return 0.0;
    }
  }
  return v3;
}

void quasar::corrective_reranking::HasPayloadFeaturizer::~HasPayloadFeaturizer(quasar::corrective_reranking::HasPayloadFeaturizer *this)
{
}

float quasar::corrective_reranking::HasPayloadFeaturizer::Run(uint64_t a1, uint64_t a2)
{
  quasar::corrective_reranking::Parse::getPayload(*(quasar::corrective_reranking::Parse **)(a2 + 8), &v4);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
  {
    BOOL v2 = v4.__r_.__value_.__l.__size_ != 0;
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  else
  {
    return (float)(SHIBYTE(v4.__r_.__value_.__r.__words[2]) != 0);
  }
  return (float)v2;
}

void quasar::corrective_reranking::PayloadTokenCountFeaturizer::~PayloadTokenCountFeaturizer(quasar::corrective_reranking::PayloadTokenCountFeaturizer *this)
{
}

float quasar::corrective_reranking::PayloadTokenCountFeaturizer::Run(uint64_t a1, uint64_t a2)
{
  quasar::corrective_reranking::Parse::getPayload(*(quasar::corrective_reranking::Parse **)(a2 + 8), &__p);
  quasar::corrective_reranking::tokenize((uint64_t)&__p, &v5);
  long long v2 = v5;
  long long v6 = (void **)&v5;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return (float)(unint64_t)((uint64_t)(*((void *)&v2 + 1) - v2) >> 5);
}

void sub_1B1BB3794(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::corrective_reranking::FillerRateFeaturizer::~FillerRateFeaturizer(quasar::corrective_reranking::FillerRateFeaturizer *this)
{
}

float quasar::corrective_reranking::FillerRateFeaturizer::Run(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  uint64_t v3 = *(void *)(v2 + 56);
  uint64_t v4 = *(void *)(v2 + 64);
  if (v3 != v4)
  {
    int v5 = 0;
    while (1)
    {
      int v6 = *(char *)(v3 + 23);
      if (v6 < 0)
      {
        if (*(void *)(v3 + 8) == 4)
        {
          uint64_t v7 = *(unsigned int **)v3;
LABEL_8:
          unsigned int v8 = bswap32(*v7);
          BOOL v9 = v8 >= 0x4E6F6E65;
          int v10 = v8 > 0x4E6F6E65;
          int v11 = !v9;
          if (v10 == v11) {
            ++v5;
          }
        }
      }
      else
      {
        uint64_t v7 = (unsigned int *)v3;
        if (v6 == 4) {
          goto LABEL_8;
        }
      }
      v3 += 24;
      if (v3 == v4) {
        return (float)v5;
      }
    }
  }
  return (float)0;
}

void quasar::corrective_reranking::ResultingTextProbabilityTransformerFeaturizer::ResultingTextProbabilityTransformerFeaturizer(quasar::corrective_reranking::ResultingTextProbabilityTransformerFeaturizer *this, const quasar::PTree *a2)
{
  *(void *)this = &unk_1F0A55870;
  std::string::basic_string[abi:ne180100]<0>(__p, "transformer-invisible-change-probability");
  quasar::PTree::getDoubleOptional((uint64_t)a2, (uint64_t)__p);
}

void sub_1B1BB3994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

void quasar::corrective_reranking::ResultingTextProbabilityTransformerFeaturizer::~ResultingTextProbabilityTransformerFeaturizer(quasar::corrective_reranking::ResultingTextProbabilityTransformerFeaturizer *this)
{
}

float quasar::corrective_reranking::ResultingTextProbabilityTransformerFeaturizer::Run(uint64_t a1, uint64_t a2)
{
  if (!quasar::corrective_reranking::Parse::isChangeInvisibleToTransformer(*(quasar::corrective_reranking::Parse **)(a2 + 8)))
  {
    int v5 = *(long long ***)(a2 + 8);
    uint64_t v6 = *(void *)(*(void *)(a2 + 16) + 24);
    uint64_t v7 = *(void *)(a2 + 24);
    quasar::corrective_reranking::TransformerClassifier::validateParse(v6, v7, v5);
  }
  return *(float *)(a1 + 8);
}

void quasar::corrective_reranking::PhoneticTargetSimilarityFeaturizer::~PhoneticTargetSimilarityFeaturizer(quasar::corrective_reranking::PhoneticTargetSimilarityFeaturizer *this)
{
}

float quasar::corrective_reranking::PhoneticTargetSimilarityFeaturizer::Run(uint64_t a1, uint64_t a2)
{
  float v3 = -1.0;
  if (!quasar::corrective_reranking::Parse::hasFullTextTarget(*(quasar::corrective_reranking::Parse **)(a2 + 8)))
  {
    quasar::corrective_reranking::Parse::getTarget(*(quasar::corrective_reranking::Parse **)(a2 + 8), v9);
    if (v9[0] != v9[1])
    {
      uint64_t v4 = *(void *)(a2 + 8);
      if (*(unsigned char *)(v4 + 112))
      {
        quasar::corrective_reranking::TargetRange::getTargetFromText(v4 + 88, *(void *)(a2 + 24), &v8);
        quasar::corrective_reranking::detokenize(__p, v9);
        float v3 = quasar::corrective_reranking::PhoneticMatcher::phoneticSimilarity(**(void **)(a2 + 16), (uint64_t)&v8, (uint64_t)__p);
        if (v7 < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v8.__r_.__value_.__l.__data_);
        }
      }
    }
    v8.__r_.__value_.__r.__words[0] = (std::string::size_type)v9;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  }
  return v3;
}

void sub_1B1BB3B40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  a16 = &a22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  _Unwind_Resume(a1);
}

void quasar::corrective_reranking::PayloadUsageFrequencyFeaturizer::~PayloadUsageFrequencyFeaturizer(quasar::corrective_reranking::PayloadUsageFrequencyFeaturizer *this)
{
}

double quasar::corrective_reranking::PayloadUsageFrequencyFeaturizer::Run()
{
  return 0.0;
}

void quasar::corrective_reranking::InterUtterancePauseFeaturizer::~InterUtterancePauseFeaturizer(quasar::corrective_reranking::InterUtterancePauseFeaturizer *this)
{
}

double quasar::corrective_reranking::InterUtterancePauseFeaturizer::Run()
{
  return 0.0;
}

void quasar::corrective_reranking::GazeEditScoreFeaturizer::~GazeEditScoreFeaturizer(quasar::corrective_reranking::GazeEditScoreFeaturizer *this)
{
}

void quasar::corrective_reranking::GazeEditScoreFeaturizer::Run()
{
  memset(v0, 0, sizeof(v0));
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "GazeEditScore unimplemented");
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v0);
}

void quasar::corrective_reranking::GazeTargetScoreFeaturizer::~GazeTargetScoreFeaturizer(quasar::corrective_reranking::GazeTargetScoreFeaturizer *this)
{
}

void quasar::corrective_reranking::GazeTargetScoreFeaturizer::Run()
{
  memset(v0, 0, sizeof(v0));
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "GazeTargetScore unimplemented");
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v0);
}

void quasar::corrective_reranking::TextEditScoreFeaturizer::~TextEditScoreFeaturizer(quasar::corrective_reranking::TextEditScoreFeaturizer *this)
{
}

float quasar::corrective_reranking::TextEditScoreFeaturizer::Run(uint64_t a1, void *a2)
{
  uint64_t v2 = *(uint64_t **)(a2[2] + 24);
  uint64_t v3 = a2[3];
  quasar::corrective_reranking::detokenize((long long **)(a2[1] + 32), &__p);
  float v4 = quasar::corrective_reranking::TransformerClassifier::classifyIntent(v2, v3, (uint64_t)&__p, 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v4;
}

void sub_1B1BB3D5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::corrective_reranking::MaxTargetTokenCountFeaturizer::~MaxTargetTokenCountFeaturizer(quasar::corrective_reranking::MaxTargetTokenCountFeaturizer *this)
{
}

float quasar::corrective_reranking::MaxTargetTokenCountFeaturizer::Run(uint64_t a1, quasar::corrective_reranking::Parse ***a2)
{
  uint64_t v2 = **a2;
  uint64_t v3 = (*a2)[1];
  if (v2 == v3) {
    return -1.0;
  }
  int v4 = -1;
  do
  {
    quasar::corrective_reranking::Parse::getTarget(v2, &v6);
    if (v4 <= (int)(-1431655765 * ((unint64_t)(v7 - v6) >> 3))) {
      int v4 = -1431655765 * ((unint64_t)(v7 - v6) >> 3);
    }
    std::string v8 = (void **)&v6;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
    uint64_t v2 = (quasar::corrective_reranking::Parse *)((char *)v2 + 232);
  }
  while (v2 != v3);
  return (float)v4;
}

void quasar::corrective_reranking::MaxPayloadTokenCountFeaturizer::~MaxPayloadTokenCountFeaturizer(quasar::corrective_reranking::MaxPayloadTokenCountFeaturizer *this)
{
}

float quasar::corrective_reranking::MaxPayloadTokenCountFeaturizer::Run(uint64_t a1, quasar::corrective_reranking::Parse ***a2)
{
  uint64_t v2 = **a2;
  uint64_t v3 = (*a2)[1];
  if (v2 == v3) {
    return -1.0;
  }
  int v4 = -1;
  do
  {
    quasar::corrective_reranking::Parse::getPayload(v2, &__p);
    quasar::corrective_reranking::tokenize((uint64_t)&__p, &v7);
    if (v4 <= (int)((*((void *)&v7 + 1) - (void)v7) >> 5)) {
      int v4 = (*((void *)&v7 + 1) - (void)v7) >> 5;
    }
    std::string v8 = (void **)&v7;
    std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v8);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v2 = (quasar::corrective_reranking::Parse *)((char *)v2 + 232);
  }
  while (v2 != v3);
  return (float)v4;
}

void sub_1B1BB3EEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::corrective_reranking::NumberOfParsesFeaturizer::~NumberOfParsesFeaturizer(quasar::corrective_reranking::NumberOfParsesFeaturizer *this)
{
}

float quasar::corrective_reranking::NumberOfParsesFeaturizer::Run(uint64_t a1, uint64_t a2)
{
  return (float)(unint64_t)(0x34F72C234F72C235
                                 * ((uint64_t)(*(void *)(*(void *)a2 + 8) - **(void **)a2) >> 3));
}

void quasar::corrective_reranking::EditParseExistsFeaturizer::~EditParseExistsFeaturizer(quasar::corrective_reranking::EditParseExistsFeaturizer *this)
{
}

float quasar::corrective_reranking::EditParseExistsFeaturizer::Run(uint64_t a1, quasar::corrective_reranking::Parse ***a2)
{
  uint64_t v2 = **a2;
  uint64_t v3 = (*a2)[1];
  float v4 = 0.0;
  while (v2 != v3)
  {
    if (quasar::corrective_reranking::Parse::isEditCommand(v2)) {
      return 1.0;
    }
    uint64_t v2 = (quasar::corrective_reranking::Parse *)((char *)v2 + 232);
  }
  return v4;
}

void quasar::corrective_reranking::RecognizedByAsrFeaturizer::~RecognizedByAsrFeaturizer(quasar::corrective_reranking::RecognizedByAsrFeaturizer *this)
{
}

float quasar::corrective_reranking::RecognizedByAsrFeaturizer::Run(uint64_t a1, uint64_t a2)
{
  float result = 0.0;
  if (*(unsigned char *)(*(void *)(a2 + 8) + 176)) {
    return 1.0;
  }
  return result;
}

void quasar::corrective_reranking::TargetPrecedingFillerWordCount::~TargetPrecedingFillerWordCount(quasar::corrective_reranking::TargetPrecedingFillerWordCount *this)
{
}

float quasar::corrective_reranking::TargetPrecedingFillerWordCount::Run(uint64_t a1, uint64_t a2)
{
  quasar::corrective_reranking::Parse::getTargetPrecedingFillerTokens(*(quasar::corrective_reranking::Parse **)(a2 + 8), v4);
  float v2 = (float)(unint64_t)((v4[1] - v4[0]) >> 5);
  int v5 = (void **)v4;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v5);
  return v2;
}

uint64_t std::vector<std::unique_ptr<quasar::corrective_reranking::Featurizer>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<quasar::corrective_reranking::Featurizer>>,std::reverse_iterator<std::unique_ptr<quasar::corrective_reranking::Featurizer>*>,std::reverse_iterator<std::unique_ptr<quasar::corrective_reranking::Featurizer>*>,std::reverse_iterator<std::unique_ptr<quasar::corrective_reranking::Featurizer>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<quasar::corrective_reranking::Featurizer>>,std::reverse_iterator<std::unique_ptr<quasar::corrective_reranking::Featurizer>*>,std::reverse_iterator<std::unique_ptr<quasar::corrective_reranking::Featurizer>*>,std::reverse_iterator<std::unique_ptr<quasar::corrective_reranking::Featurizer>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  _OWORD v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    BOOL v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<quasar::corrective_reranking::Featurizer>>,std::reverse_iterator<std::unique_ptr<quasar::corrective_reranking::Featurizer>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<quasar::corrective_reranking::Featurizer>>,std::reverse_iterator<std::unique_ptr<quasar::corrective_reranking::Featurizer>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<quasar::corrective_reranking::Featurizer>>,std::reverse_iterator<std::unique_ptr<quasar::corrective_reranking::Featurizer>*>>::operator()[abi:ne180100]((void *)a1);
  }
  return a1;
}

void *std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<quasar::corrective_reranking::Featurizer>>,std::reverse_iterator<std::unique_ptr<quasar::corrective_reranking::Featurizer>*>>::operator()[abi:ne180100](void *result)
{
  uint64_t v1 = *(void ***)(result[2] + 8);
  float v2 = *(void ***)(result[1] + 8);
  while (v1 != v2)
  {
    uint64_t result = *v1;
    std::__shared_weak_count *v1 = 0;
    if (result) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
    ++v1;
  }
  return result;
}

void **std::__split_buffer<std::unique_ptr<quasar::corrective_reranking::Featurizer>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void *std::__split_buffer<std::unique_ptr<quasar::corrective_reranking::Featurizer>>::__destruct_at_end[abi:ne180100](void *result, uint64_t a2)
{
  uint64_t v2 = result[2];
  if (v2 != a2)
  {
    float v4 = result;
    do
    {
      v4[2] = v2 - 8;
      uint64_t result = *(void **)(v2 - 8);
      *(void *)(v2 - 8) = 0;
      if (result) {
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
      }
      uint64_t v2 = v4[2];
    }
    while (v2 != a2);
  }
  return result;
}

BOOL kaldi::quasar::LexiconItf::IsCompatibleWith(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  std::unordered_set<std::string>::unordered_set((uint64_t)v10, v3);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 56))(a2);
  std::unordered_set<std::string>::unordered_set((uint64_t)v9, v4);
  if (v12 == v9[3])
  {
    uint64_t v5 = v11;
    if (v11)
    {
      do
      {
        uint64_t v6 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v9, v5 + 16);
        BOOL v7 = v6 != 0;
        if (!v6) {
          break;
        }
        uint64_t v5 = *(unsigned __int8 **)v5;
      }
      while (v5);
    }
    else
    {
      BOOL v7 = 1;
    }
  }
  else
  {
    BOOL v7 = 0;
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v9);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v10);
  return v7;
}

void sub_1B1BB43A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *kaldi::quasar::Lexicon::begin@<X0>(uint64_t *this@<X0>, uint64_t *a2@<X8>)
{
  a2[2] = (uint64_t)this;
  uint64_t v3 = this[22];
  *a2 = v3;
  a2[1] = 0;
  if (v3)
  {
    this = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(this + 30, (int *)(v3 + 40));
    a2[1] = this[3];
  }
  return this;
}

uint64_t kaldi::quasar::Lexicon::end@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = this;
  return this;
}

void kaldi::quasar::Lexicon::Lexicon(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)a1 = &unk_1F0A516C0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + ++*(_DWORD *)(result + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_DWORD *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + --*(_DWORD *)(a9 + 52) = 0;
  *(unsigned char *)(a1 + 53) = a3;
  *(unsigned char *)(a1 + 54) = 0;
  operator new();
}

{
  *(void *)a1 = &unk_1F0A516C0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + ++*(_DWORD *)(result + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_DWORD *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + --*(_DWORD *)(a9 + 52) = 0;
  *(unsigned char *)(a1 + 53) = a3;
  *(unsigned char *)(a1 + 54) = 0;
  operator new();
}

{
  *(void *)a1 = &unk_1F0A516C0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + ++*(_DWORD *)(result + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_DWORD *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + --*(_DWORD *)(a9 + 52) = 0;
  *(unsigned char *)(a1 + 53) = a3;
  *(unsigned char *)(a1 + 54) = 0;
  operator new();
}

void sub_1B1BB4740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,std::locale a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  MEMORY[0x1B3EA8670](v34, 0x20C4093837F09);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a15);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::Lexicon::GetWordId(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = (void *)(a1 + 160);
  if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((void *)(a1 + 160), (unsigned __int8 *)a2))
  {
    return *((unsigned int *)std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v6, (unsigned __int8 *)a2)+ 10);
  }
  if (!a3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Word ", 5);
    int v11 = *(char *)(a2 + 23);
    if (v11 >= 0) {
      uint64_t v12 = a2;
    }
    else {
      uint64_t v12 = *(void *)a2;
    }
    if (v11 >= 0) {
      uint64_t v13 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v13 = *(void *)(a2 + 8);
    }
    char v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v12, v13);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v14, " not found in lexicon.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v15);
  }
  unsigned int v8 = *(_DWORD *)(a1 + 68);
  *(_DWORD *)(a1 + 68) = v8 + 1;
  unsigned int v16 = v8;
  v15[0] = (long long *)a2;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v6, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, v15)+ 10) = v8;
  v15[0] = (long long *)&v16;
  BOOL v9 = (std::string *)std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a1 + 200, (int *)&v16, (uint64_t)&std::piecewise_construct, (_DWORD **)v15);
  std::string::operator=(v9 + 1, (const std::string *)a2);
  return v16;
}

__n128 kaldi::quasar::Lexicon::NormalizePron(std::vector<std::string>::pointer *a1, int a2, int a3, int *a4)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  memset(&v60, 0, sizeof(v60));
  *a4 = -1;
  std::vector<std::string>::pointer v5 = *a1;
  if (a1[1] == *a1) {
    goto LABEL_93;
  }
  int v54 = a3;
  unint64_t v7 = 0;
  int v55 = 0;
  do
  {
    unsigned int v8 = &v5[v7];
    if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&__str, v8->__r_.__value_.__l.__data_, v8->__r_.__value_.__l.__size_);
    }
    else
    {
      long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v9;
    }
    std::string::size_type end_high = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_str = &__str;
    }
    else {
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v13 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v13 = __str.__r_.__value_.__l.__size_;
    }
    if (v13)
    {
      char v14 = (unsigned __int8 *)p_str + v13;
      long long v15 = p_str;
      while (2)
      {
        for (uint64_t i = 0; i != 5; ++i)
        {
          if (v15->__r_.__value_.__s.__data_[0] == asc_1B2680C75[i])
          {
            if (v15 != (std::string *)v14 && (char *)v15 - (char *)p_str != -1)
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v59);
              long long v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)"Illegal phone: ", 15);
              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                long long v52 = &__str;
              }
              else {
                long long v52 = (std::string *)__str.__r_.__value_.__r.__words[0];
              }
              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v53 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v53 = __str.__r_.__value_.__l.__size_;
              }
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)v52, v53);
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v59);
            }
            goto LABEL_21;
          }
        }
        long long v15 = (std::string *)((char *)v15 + 1);
        if (v15 != (std::string *)v14) {
          continue;
        }
        break;
      }
    }
LABEL_21:
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      int v17 = *__str.__r_.__value_.__l.__data_;
      if (v17 == 35) {
        goto LABEL_53;
      }
      if (v17 == 47 && *(unsigned char *)(__str.__r_.__value_.__r.__words[0] + __str.__r_.__value_.__l.__size_ - 1) == 47)
      {
        std::string::size_type end_high = __str.__r_.__value_.__l.__size_;
LABEL_30:
        std::string::basic_string((std::string *)v59, &__str, 1uLL, end_high - 2, (std::allocator<char> *)__p);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        __str.__r_.__value_.__r.__words[2] = (std::string::size_type)v59[0].__end_;
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)&v59[0].__first_;
        std::string::size_type end_high = HIBYTE(v59[0].__end_);
        std::string::size_type size = (std::string::size_type)v59[0].__begin_;
      }
    }
    else
    {
      if (__str.__r_.__value_.__s.__data_[0] == 35)
      {
        std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
LABEL_53:
        std::string::basic_string((std::string *)v59, &__str, 1uLL, size - 1, (std::allocator<char> *)__p);
        if (SHIBYTE(v59[0].__end_) < 0)
        {
          std::__split_buffer<std::wstring>::pointer first = v59[0].__first_;
          *a4 = atoi((const char *)v59[0].__first_);
          operator delete(first);
        }
        else
        {
          *a4 = atoi((const char *)v59);
        }
        goto LABEL_75;
      }
      if (__str.__r_.__value_.__s.__data_[0] == 47 && *(&v61 + HIBYTE(__str.__r_.__value_.__r.__words[2])) == 47) {
        goto LABEL_30;
      }
    }
    if (kaldi::quasar::Lexicon::IsPositionalPhone((uint64_t *)&__str))
    {
      if ((end_high & 0x80u) == 0) {
        std::string::size_type v18 = end_high;
      }
      else {
        std::string::size_type v18 = size;
      }
      std::string::basic_string((std::string *)v59, &__str, 0, v18 - 2, (std::allocator<char> *)__p);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      __str.__r_.__value_.__r.__words[2] = (std::string::size_type)v59[0].__end_;
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)&v59[0].__first_;
      std::string::size_type end_high = HIBYTE(v59[0].__end_);
      std::string::size_type size = (std::string::size_type)v59[0].__begin_;
    }
    int v19 = (char)end_high;
    if ((end_high & 0x80u) != 0) {
      std::string::size_type end_high = size;
    }
    if (end_high)
    {
      if (a2)
      {
        std::string::basic_string[abi:ne180100]((uint64_t)__p, end_high + 2);
        if (v58 >= 0) {
          uint64_t v20 = __p;
        }
        else {
          uint64_t v20 = (void **)__p[0];
        }
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v21 = &__str;
        }
        else {
          long long v21 = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        memmove(v20, v21, end_high);
        strcpy((char *)v20 + end_high, "_I");
        std::vector<std::string>::pointer end = v60.__end_;
        if (v60.__end_ >= v60.__end_cap_.__value_)
        {
          unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * (((char *)v60.__end_ - (char *)v60.__begin_) >> 3);
          unint64_t v29 = v28 + 1;
          if (v28 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * (((char *)v60.__end_cap_.__value_ - (char *)v60.__begin_) >> 3) > v29) {
            unint64_t v29 = 0x5555555555555556 * (((char *)v60.__end_cap_.__value_ - (char *)v60.__begin_) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v60.__end_cap_.__value_ - (char *)v60.__begin_) >> 3) >= 0x555555555555555) {
            unint64_t v30 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v30 = v29;
          }
          v59[0].__end_cap_.__value_ = (std::allocator<std::wstring> *)&v60.__end_cap_;
          if (v30) {
            int v31 = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v60.__end_cap_, v30);
          }
          else {
            int v31 = 0;
          }
          uint64_t v32 = v31 + v28;
          v59[0].__first_ = v31;
          v59[0].__begin_ = v32;
          v59[0].__end_cap_.__value_ = &v31[v30];
          long long v33 = *(_OWORD *)__p;
          v32->__r_.__value_.__r.__words[2] = v58;
          *(_OWORD *)&v32->__r_.__value_.__l.__data_ = v33;
          __p[1] = 0;
          int64_t v58 = 0;
          __p[0] = 0;
          v59[0].__end_ = v32 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(&v60, (std::__split_buffer<std::string> *)v59);
          uint64_t v34 = v60.__end_;
          std::__split_buffer<std::string>::~__split_buffer(v59);
          v60.__end_ = v34;
          if (SHIBYTE(v58) < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          long long v23 = *(_OWORD *)__p;
          v60.__end_->__r_.__value_.__r.__words[2] = v58;
          *(_OWORD *)&end->__r_.__value_.__l.__data_ = v23;
          v60.__end_ = end + 1;
        }
        int v55 = 1;
      }
      else
      {
        std::vector<std::string>::pointer v24 = v60.__end_;
        if (v60.__end_ >= v60.__end_cap_.__value_)
        {
          int v27 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v60, (long long *)&__str);
        }
        else
        {
          if (v19 < 0)
          {
            std::string::__init_copy_ctor_external(v60.__end_, __str.__r_.__value_.__l.__data_, size);
          }
          else
          {
            long long v25 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
            v60.__end_->__r_.__value_.__r.__words[2] = __str.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v25;
          }
          int v27 = v24 + 1;
        }
        v60.__end_ = v27;
      }
    }
LABEL_75:
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    ++v7;
    std::vector<std::string>::pointer v5 = *a1;
  }
  while (0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 3) > v7);
  a3 = v54;
  if (a2 & v55)
  {
    std::vector<std::string>::pointer begin = v60.__begin_;
    if ((std::vector<std::string>::pointer)((char *)v60.__end_ - (char *)v60.__begin_) == (std::vector<std::string>::pointer)24)
    {
      if (SHIBYTE(v60.__begin_->__r_.__value_.__r.__words[2]) < 0)
      {
        std::vector<std::string>::pointer begin = (std::vector<std::string>::pointer)v60.__begin_->__r_.__value_.__l.__data_;
        std::string::size_type v36 = v60.__begin_->__r_.__value_.__l.__size_;
      }
      else
      {
        std::string::size_type v36 = HIBYTE(v60.__begin_->__r_.__value_.__r.__words[2]);
      }
      uint64_t v38 = (char *)begin + v36;
      char v39 = 83;
      goto LABEL_92;
    }
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v60.__end_ - (char *)v60.__begin_) >> 3) >= 2)
    {
      if (SHIBYTE(v60.__begin_->__r_.__value_.__r.__words[2]) < 0)
      {
        std::vector<std::string>::pointer begin = (std::vector<std::string>::pointer)v60.__begin_->__r_.__value_.__l.__data_;
        std::string::size_type v37 = v60.__begin_->__r_.__value_.__l.__size_;
      }
      else
      {
        std::string::size_type v37 = HIBYTE(v60.__begin_->__r_.__value_.__r.__words[2]);
      }
      begin->__r_.__value_.__s.__data_[v37 - 1] = 66;
      if (SHIBYTE(v60.__end_[-1].__r_.__value_.__r.__words[2]) < 0)
      {
        std::vector<std::string>::pointer data = (std::vector<std::string>::pointer)v60.__end_[-1].__r_.__value_.__l.__data_;
        std::string::size_type v41 = v60.__end_[-1].__r_.__value_.__l.__size_;
      }
      else
      {
        std::vector<std::string>::pointer data = v60.__end_ - 1;
        std::string::size_type v41 = HIBYTE(v60.__end_[-1].__r_.__value_.__r.__words[2]);
      }
      uint64_t v38 = (char *)data + v41;
      char v39 = 69;
LABEL_92:
      *(v38 - 1) = v39;
    }
  }
LABEL_93:
  std::vector<std::string>::pointer v42 = v60.__begin_;
  if (a3)
  {
    std::vector<std::string>::pointer v43 = v60.__end_;
    if (v60.__begin_ != v60.__end_)
    {
      do
      {
        std::operator+<char>();
        uint64_t v44 = std::string::append((std::string *)v59, "/");
        std::string::size_type v45 = v44->__r_.__value_.__r.__words[0];
        __str.__r_.__value_.__r.__words[0] = v44->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v44->__r_.__value_.__r.__words[1] + 7);
        char v46 = HIBYTE(v44->__r_.__value_.__r.__words[2]);
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v42->__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v42->__r_.__value_.__l.__data_);
        }
        v42->__r_.__value_.__r.__words[0] = v45;
        v42->__r_.__value_.__l.__size_ = __str.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&v42->__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 7);
        *((unsigned char *)&v42->__r_.__value_.__s + 23) = v46;
        if (SHIBYTE(v59[0].__end_) < 0) {
          operator delete(v59[0].__first_);
        }
        ++v42;
      }
      while (v42 != v43);
      std::vector<std::string>::pointer v42 = v60.__begin_;
    }
  }
  float v47 = a1[2];
  long long v48 = *(_OWORD *)&v60.__end_;
  long long v49 = *(_OWORD *)a1;
  *a1 = v42;
  *(_OWORD *)&v60.__begin_ = v49;
  *(_OWORD *)(a1 + 1) = v48;
  v60.__end_cap_.__value_ = v47;
  v59[0].__first_ = (std::__split_buffer<std::wstring>::pointer)&v60;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v59);
  return result;
}

void sub_1B1BB5000(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B1BB505CLL);
}

void sub_1B1BB501C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 105) < 0) {
    operator delete(*(void **)(v1 - 128));
  }
  *(void *)(v1 - 128) = v1 - 160;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v1 - 128));
  _Unwind_Resume(a1);
}

void sub_1B1BB5030()
{
}

void sub_1B1BB5038(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    JUMPOUT(0x1B1BB5048);
  }
  JUMPOUT(0x1B1BB504CLL);
}

void kaldi::quasar::Lexicon::GetPhoneIds(uint64_t a1, uint64_t *a2, std::vector<unsigned int> *this, int a4)
{
  std::vector<int>::resize(this, 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  uint64_t v8 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    do
    {
      this->__begin_[v10++] = kaldi::quasar::Lexicon::GetPhoneId(a1, (long long *)(v8 + v9), a4);
      uint64_t v8 = *a2;
      v9 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) > v10);
  }
}

uint64_t kaldi::quasar::Lexicon::AddPron(uint64_t a1, int a2, uint64_t *a3, int a4)
{
  int v17 = a2;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::AddSequence(*(void ***)(a1 + 56), a3, &v16, &v15);
  std::string::size_type v18 = &v17;
  uint64_t v6 = (uint64_t **)std::__hash_table<std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a1 + 240, &v17, (uint64_t)&std::piecewise_construct, &v18);
  std::__tree<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>::__emplace_unique_key_args<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node * const&>(v6 + 3, (unint64_t *)&v15, &v15);
  unint64_t v7 = *(void *)(v15 + 64);
  std::string::size_type v18 = &v17;
  uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(v15 + 40, &v17, (uint64_t)&std::piecewise_construct, &v18);
  *(_DWORD *)(result + 20) = a4;
  if (*(unsigned char *)(a1 + 304))
  {
    if (*(void *)(v15 + 64) > v7 && v7 != 0)
    {
      if (v7 == 1)
      {
        for (uint64_t i = *(int **)(v15 + 56); i; uint64_t i = *(int **)i)
          uint64_t result = (uint64_t)std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(a1 + 312, i + 4, i + 4);
      }
      else
      {
        uint64_t result = (uint64_t)std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(a1 + 312, &v17, &v17);
      }
    }
  }
  if (a4 != -1)
  {
    if (*(_DWORD *)(a1 + 72) < a4) {
      *(_DWORD *)(a1 + 72) = a4;
    }
    return result;
  }
  uint64_t v10 = *(void *)(v16 + 64);
  if (v16 == v15)
  {
    if (v10 == 2)
    {
      std::string::size_type v13 = *(uint64_t **)(v16 + 56);
      if (v13)
      {
        int v14 = 1;
        do
        {
          *((_DWORD *)v13 + 5) = v14;
          std::string::size_type v13 = (uint64_t *)*v13;
          ++v14;
        }
        while (v13);
      }
      if (*(int *)(a1 + 72) <= 1)
      {
        int v11 = 2;
LABEL_27:
        *(_DWORD *)(a1 + 72) = v11;
      }
    }
    else
    {
      std::string::size_type v18 = &v17;
      uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(v16 + 40, &v17, (uint64_t)&std::piecewise_construct, &v18);
      *(_DWORD *)(result + 20) = v10;
      int v11 = *(_DWORD *)(v15 + 64);
      if (v11 == -1)
      {
        uint64_t result = kaldi::quasar::Lexicon::GetMaxDisambigId(a1, **(void **)(a1 + 56));
        *(_DWORD *)(a1 + 72) = result;
        return result;
      }
      if (*(_DWORD *)(a1 + 72) < v11) {
        goto LABEL_27;
      }
    }
  }
  else if (v10 == 1)
  {
    int v11 = 1;
    *(_DWORD *)(*(void *)(v16 + 56) + 20) = 1;
    if (*(int *)(a1 + 72) <= 0) {
      goto LABEL_27;
    }
  }
  return result;
}

void sub_1B1BB55E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  MEMORY[0x1B3EA8670](v28, 0x20C4093837F09);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a15);
  _Unwind_Resume(a1);
}

void sub_1B1BB5844(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v3);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__hash_table<std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>>>::~__hash_table(v8);
  std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::~__hash_table(v7);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v6);
  std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::~__hash_table(v5);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v4);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v2);
  _Unwind_Resume(a1);
}

void kaldi::quasar::Lexicon::MergePhoneSet(uint64_t a1, uint64_t a2)
{
  memset(&v8, 0, sizeof(v8));
  std::vector<std::string>::reserve(&v8, *(void *)(a2 + 24));
  uint64_t v4 = *(uint64_t **)(a2 + 16);
  if (v4)
  {
    std::vector<std::string>::pointer end = v8.__end_;
    do
    {
      uint64_t v6 = (long long *)(v4 + 2);
      if (end >= v8.__end_cap_.__value_)
      {
        std::vector<std::string>::pointer end = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v8, v6);
      }
      else
      {
        if (*((char *)v4 + 39) < 0)
        {
          std::string::__init_copy_ctor_external(end, (const std::string::value_type *)v4[2], v4[3]);
        }
        else
        {
          long long v7 = *v6;
          end->__r_.__value_.__r.__words[2] = v4[4];
          *(_OWORD *)&end->__r_.__value_.__l.__data_ = v7;
        }
        ++end;
      }
      v8.__end_ = end;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  kaldi::quasar::Lexicon::MergePhoneSet(a1, (long long **)&v8);
  uint64_t v9 = &v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v9);
}

void sub_1B1BB5984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void kaldi::quasar::Lexicon::MergePhoneSet(uint64_t a1, long long **a2)
{
  memset(&v67, 0, sizeof(v67));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v67, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  kaldi::quasar::Lexicon::BasifyPhones((unint64_t *)&v67);
  if (*(unsigned char *)(a1 + 53))
  {
    long long v3 = 0uLL;
    memset(&v66, 0, sizeof(v66));
    std::string::size_type size = v67.__r_.__value_.__l.__size_;
    std::string::size_type v4 = v67.__r_.__value_.__r.__words[0];
    if (v67.__r_.__value_.__r.__words[0] == v67.__r_.__value_.__l.__size_)
    {
      value = 0;
      int64x2_t v54 = vdupq_n_s64(v67.__r_.__value_.__r.__words[0]);
    }
    else
    {
      do
      {
        if (*(char *)(v4 + 23) >= 0) {
          size_t v6 = *(unsigned __int8 *)(v4 + 23);
        }
        else {
          size_t v6 = *(void *)(v4 + 8);
        }
        std::string::basic_string[abi:ne180100]((uint64_t)__p, v6 + 2);
        if (v65 >= 0) {
          long long v7 = __p;
        }
        else {
          long long v7 = (void **)__p[0];
        }
        if (v6)
        {
          if (*(char *)(v4 + 23) >= 0) {
            std::vector<std::string> v8 = (const void *)v4;
          }
          else {
            std::vector<std::string> v8 = *(const void **)v4;
          }
          memmove(v7, v8, v6);
        }
        strcpy((char *)v7 + v6, "_S");
        std::vector<std::string>::pointer end = v66.__end_;
        if (v66.__end_ >= v66.__end_cap_.__value_)
        {
          unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)v66.__end_ - (char *)v66.__begin_) >> 3);
          unint64_t v12 = v11 + 1;
          if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * (((char *)v66.__end_cap_.__value_ - (char *)v66.__begin_) >> 3) > v12) {
            unint64_t v12 = 0x5555555555555556 * (((char *)v66.__end_cap_.__value_ - (char *)v66.__begin_) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v66.__end_cap_.__value_ - (char *)v66.__begin_) >> 3) >= 0x555555555555555) {
            unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v13 = v12;
          }
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v66.__end_cap_;
          if (v13) {
            int v14 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v66.__end_cap_, v13);
          }
          else {
            int v14 = 0;
          }
          uint64_t v15 = v14 + v11;
          __v.__first_ = v14;
          __v.__begin_ = v15;
          __v.__end_cap_.__value_ = &v14[v13];
          long long v16 = *(_OWORD *)__p;
          v15->__r_.__value_.__r.__words[2] = v65;
          *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
          __p[1] = 0;
          int64_t v65 = 0;
          __p[0] = 0;
          __v.__end_ = v15 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(&v66, &__v);
          int v17 = v66.__end_;
          std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
          v66.__end_ = v17;
          if (SHIBYTE(v65) < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          long long v10 = *(_OWORD *)__p;
          v66.__end_->__r_.__value_.__r.__words[2] = v65;
          *(_OWORD *)&end->__r_.__value_.__l.__data_ = v10;
          v66.__end_ = end + 1;
        }
        if (*(char *)(v4 + 23) >= 0) {
          size_t v18 = *(unsigned __int8 *)(v4 + 23);
        }
        else {
          size_t v18 = *(void *)(v4 + 8);
        }
        std::string::basic_string[abi:ne180100]((uint64_t)__p, v18 + 2);
        if (v65 >= 0) {
          int v19 = __p;
        }
        else {
          int v19 = (void **)__p[0];
        }
        if (v18)
        {
          if (*(char *)(v4 + 23) >= 0) {
            uint64_t v20 = (const void *)v4;
          }
          else {
            uint64_t v20 = *(const void **)v4;
          }
          memmove(v19, v20, v18);
        }
        strcpy((char *)v19 + v18, "_B");
        std::vector<std::string>::pointer v21 = v66.__end_;
        if (v66.__end_ >= v66.__end_cap_.__value_)
        {
          unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * (((char *)v66.__end_ - (char *)v66.__begin_) >> 3);
          unint64_t v24 = v23 + 1;
          if (v23 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * (((char *)v66.__end_cap_.__value_ - (char *)v66.__begin_) >> 3) > v24) {
            unint64_t v24 = 0x5555555555555556 * (((char *)v66.__end_cap_.__value_ - (char *)v66.__begin_) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v66.__end_cap_.__value_ - (char *)v66.__begin_) >> 3) >= 0x555555555555555) {
            unint64_t v25 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v25 = v24;
          }
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v66.__end_cap_;
          if (v25) {
            uint64_t v26 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v66.__end_cap_, v25);
          }
          else {
            uint64_t v26 = 0;
          }
          int v27 = v26 + v23;
          __v.__first_ = v26;
          __v.__begin_ = v27;
          __v.__end_cap_.__value_ = &v26[v25];
          long long v28 = *(_OWORD *)__p;
          v27->__r_.__value_.__r.__words[2] = v65;
          *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v28;
          __p[1] = 0;
          int64_t v65 = 0;
          __p[0] = 0;
          __v.__end_ = v27 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(&v66, &__v);
          unint64_t v29 = v66.__end_;
          std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
          v66.__end_ = v29;
          if (SHIBYTE(v65) < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          long long v22 = *(_OWORD *)__p;
          v66.__end_->__r_.__value_.__r.__words[2] = v65;
          *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v22;
          v66.__end_ = v21 + 1;
        }
        if (*(char *)(v4 + 23) >= 0) {
          size_t v30 = *(unsigned __int8 *)(v4 + 23);
        }
        else {
          size_t v30 = *(void *)(v4 + 8);
        }
        std::string::basic_string[abi:ne180100]((uint64_t)__p, v30 + 2);
        if (v65 >= 0) {
          int v31 = __p;
        }
        else {
          int v31 = (void **)__p[0];
        }
        if (v30)
        {
          if (*(char *)(v4 + 23) >= 0) {
            uint64_t v32 = (const void *)v4;
          }
          else {
            uint64_t v32 = *(const void **)v4;
          }
          memmove(v31, v32, v30);
        }
        strcpy((char *)v31 + v30, "_I");
        std::vector<std::string>::pointer v33 = v66.__end_;
        if (v66.__end_ >= v66.__end_cap_.__value_)
        {
          unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * (((char *)v66.__end_ - (char *)v66.__begin_) >> 3);
          unint64_t v36 = v35 + 1;
          if (v35 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * (((char *)v66.__end_cap_.__value_ - (char *)v66.__begin_) >> 3) > v36) {
            unint64_t v36 = 0x5555555555555556 * (((char *)v66.__end_cap_.__value_ - (char *)v66.__begin_) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v66.__end_cap_.__value_ - (char *)v66.__begin_) >> 3) >= 0x555555555555555) {
            unint64_t v37 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v37 = v36;
          }
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v66.__end_cap_;
          if (v37) {
            uint64_t v38 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v66.__end_cap_, v37);
          }
          else {
            uint64_t v38 = 0;
          }
          char v39 = v38 + v35;
          __v.__first_ = v38;
          __v.__begin_ = v39;
          __v.__end_cap_.__value_ = &v38[v37];
          long long v40 = *(_OWORD *)__p;
          v39->__r_.__value_.__r.__words[2] = v65;
          *(_OWORD *)&v39->__r_.__value_.__l.__data_ = v40;
          __p[1] = 0;
          int64_t v65 = 0;
          __p[0] = 0;
          __v.__end_ = v39 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(&v66, &__v);
          std::string::size_type v41 = v66.__end_;
          std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
          v66.__end_ = v41;
          if (SHIBYTE(v65) < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          long long v34 = *(_OWORD *)__p;
          v66.__end_->__r_.__value_.__r.__words[2] = v65;
          *(_OWORD *)&v33->__r_.__value_.__l.__data_ = v34;
          v66.__end_ = v33 + 1;
        }
        if (*(char *)(v4 + 23) >= 0) {
          size_t v42 = *(unsigned __int8 *)(v4 + 23);
        }
        else {
          size_t v42 = *(void *)(v4 + 8);
        }
        std::string::basic_string[abi:ne180100]((uint64_t)__p, v42 + 2);
        if (v65 >= 0) {
          std::vector<std::string>::pointer v43 = __p;
        }
        else {
          std::vector<std::string>::pointer v43 = (void **)__p[0];
        }
        if (v42)
        {
          if (*(char *)(v4 + 23) >= 0) {
            uint64_t v44 = (const void *)v4;
          }
          else {
            uint64_t v44 = *(const void **)v4;
          }
          memmove(v43, v44, v42);
        }
        strcpy((char *)v43 + v42, "_E");
        std::vector<std::string>::pointer v45 = v66.__end_;
        if (v66.__end_ >= v66.__end_cap_.__value_)
        {
          unint64_t v47 = 0xAAAAAAAAAAAAAAABLL * (((char *)v66.__end_ - (char *)v66.__begin_) >> 3);
          unint64_t v48 = v47 + 1;
          if (v47 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * (((char *)v66.__end_cap_.__value_ - (char *)v66.__begin_) >> 3) > v48) {
            unint64_t v48 = 0x5555555555555556 * (((char *)v66.__end_cap_.__value_ - (char *)v66.__begin_) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v66.__end_cap_.__value_ - (char *)v66.__begin_) >> 3) >= 0x555555555555555) {
            unint64_t v49 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v49 = v48;
          }
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v66.__end_cap_;
          if (v49) {
            long long v50 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v66.__end_cap_, v49);
          }
          else {
            long long v50 = 0;
          }
          long long v51 = v50 + v47;
          __v.__first_ = v50;
          __v.__begin_ = v51;
          __v.__end_cap_.__value_ = &v50[v49];
          long long v52 = *(_OWORD *)__p;
          v51->__r_.__value_.__r.__words[2] = v65;
          *(_OWORD *)&v51->__r_.__value_.__l.__data_ = v52;
          __p[1] = 0;
          int64_t v65 = 0;
          __p[0] = 0;
          __v.__end_ = v51 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(&v66, &__v);
          std::string::size_type v53 = v66.__end_;
          std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
          v66.__end_ = v53;
          if (SHIBYTE(v65) < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          long long v46 = *(_OWORD *)__p;
          v66.__end_->__r_.__value_.__r.__words[2] = v65;
          *(_OWORD *)&v45->__r_.__value_.__l.__data_ = v46;
          v66.__end_ = v45 + 1;
        }
        v4 += 24;
      }
      while (v4 != size);
      int64x2_t v54 = *(int64x2_t *)&v67.__r_.__value_.__l.__data_;
      long long v3 = *(_OWORD *)&v66.__begin_;
      value = v66.__end_cap_.__value_;
    }
    *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v3;
    *(int64x2_t *)&v66.__begin_ = v54;
    long long v56 = (std::string *)v67.__r_.__value_.__r.__words[2];
    v67.__r_.__value_.__r.__words[2] = (std::string::size_type)value;
    v66.__end_cap_.__value_ = v56;
    __v.__first_ = (std::__split_buffer<std::string>::pointer)&v66;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  }
  std::string::size_type v58 = v67.__r_.__value_.__l.__size_;
  long long v57 = (std::string *)v67.__r_.__value_.__r.__words[0];
  if (v67.__r_.__value_.__r.__words[0] != v67.__r_.__value_.__l.__size_)
  {
    long long v59 = (void *)(a1 + 80);
    std::vector<std::string> v60 = (std::string *)(a1 + 64);
    uint64_t v61 = a1 + 120;
    do
    {
      if (!std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v59, (unsigned __int8 *)v57))
      {
        int data = (int)v60->__r_.__value_.__l.__data_;
        __v.__first_ = v57;
        *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v59, (unsigned __int8 *)v57, (uint64_t)&std::piecewise_construct, (long long **)&__v)+ 10) = data;
        __v.__first_ = v60;
        uint64_t v63 = (std::string *)std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v61, (int *)v60, (uint64_t)&std::piecewise_construct, &__v);
        std::string::operator=(v63 + 1, v57);
        ++LODWORD(v60->__r_.__value_.__l.__data_);
      }
      ++v57;
    }
    while (v57 != (std::string *)v58);
  }
  __v.__first_ = &v67;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
}

void sub_1B1BB607C(_Unwind_Exception *a1, void *__p, uint64_t a3, int a4, __int16 a5, char a6, char a7, uint64_t a8, uint64_t a9, void *__pa, uint64_t a11, char a12, char *a13, uint64_t a14, std::__split_buffer<std::wstring> *a15, uint64_t a16, char a17)
{
  a13 = &a17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  _Unwind_Resume(a1);
}

uint64_t *kaldi::quasar::Lexicon::GetPron(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  size_t v6 = (void *)(a3 + 8);
  std::__tree<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>::destroy(a3, *(char **)(a3 + 8));
  *(void *)a3 = v6;
  *(void *)(a3 + 16) = 0;
  void *v6 = 0;
  int v13 = *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((void *)(a1 + 160), a2)+ 10);
  long long v7 = (uint64_t *)std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 240), &v13)[3];
  uint64_t result = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 240), &v13);
  if (v7 != result + 4)
  {
    do
    {
      memset(v12, 0, sizeof(v12));
      kaldi::quasar::Lexicon::GetPron(a1, v13, v7[4], (uint64_t)v12);
      std::__tree<std::vector<std::string>>::__emplace_unique_key_args<std::vector<std::string>,std::vector<std::string> const&>((uint64_t **)a3, v12, (long long **)v12);
      int v14 = v12;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
      uint64_t v9 = (uint64_t *)v7[1];
      if (v9)
      {
        do
        {
          long long v10 = v9;
          uint64_t v9 = (uint64_t *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          long long v10 = (uint64_t *)v7[2];
          BOOL v11 = *v10 == (void)v7;
          long long v7 = v10;
        }
        while (!v11);
      }
      uint64_t result = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 240), &v13);
      long long v7 = v10;
    }
    while (v10 != result + 4);
  }
  return result;
}

void sub_1B1BB6234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::Lexicon::GetNumberOfDisambigSymbols(uint64_t this)
{
  uint64_t v1 = this;
  if (*(unsigned char *)(this + 54))
  {
    LODWORD(this) = kaldi::quasar::Lexicon::GetMaxDisambigId(this, **(void **)(this + 56));
    *(_DWORD *)(v1 + 72) = this;
    *(unsigned char *)(v1 + 54) = 0;
  }
  else
  {
    LODWORD(this) = *(_DWORD *)(this + 72);
  }
  return (int)this;
}

uint64_t kaldi::quasar::Lexicon::AddPron(uint64_t a1, uint64_t a2, long long **a3, int a4, int a5)
{
  if (kaldi::quasar::Lexicon::IsLegalWord((unsigned __int8 **)a2))
  {
    memset(&v22, 0, sizeof(v22));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v22, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
    int v21 = 0;
    kaldi::quasar::Lexicon::NormalizePron((std::vector<std::string>::pointer *)&v22, *(unsigned __int8 *)(a1 + 53), 0, &v21);
    if (a5 & 1) != 0 || (kaldi::quasar::Lexicon::IsValidPron(a1, (uint64_t *)&v22))
    {
      Worduint64_t Id = kaldi::quasar::Lexicon::GetWordId(a1, a2, a4);
      memset(__p, 0, 24);
      kaldi::quasar::Lexicon::GetPhoneIds(a1, (uint64_t *)&v22, __p, a5);
      kaldi::quasar::Lexicon::AddPron(a1, WordId, (uint64_t *)__p, -1);
      if (__p[0].__begin_)
      {
        __p[0].__end_ = __p[0].__begin_;
        operator delete(__p[0].__begin_);
      }
      uint64_t v11 = 1;
    }
    else
    {
      if (kaldi::g_kaldi_verbose_level >= -1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        long long v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Invalid phone in pron for word: ", 32);
        int v17 = *(char *)(a2 + 23);
        if (v17 >= 0) {
          size_t v18 = (unsigned __int8 *)a2;
        }
        else {
          size_t v18 = *(unsigned __int8 **)a2;
        }
        if (v17 >= 0) {
          uint64_t v19 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          uint64_t v19 = *(void *)(a2 + 8);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v18, v19);
        kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      }
      uint64_t v11 = 0;
    }
    __p[0].__begin_ = (std::vector<unsigned int>::pointer)&v22;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  }
  else
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      unint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Illegal word: ", 14);
      int v13 = *(char *)(a2 + 23);
      if (v13 >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = *(void *)a2;
      }
      if (v13 >= 0) {
        uint64_t v15 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        uint64_t v15 = *(void *)(a2 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    }
    return 0;
  }
  return v11;
}

void sub_1B1BB6468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *__p, uint64_t a14)
{
  std::string __p = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

BOOL kaldi::quasar::Lexicon::IsLegalWord(unsigned __int8 **a1)
{
  uint64_t v1 = (unsigned __int8 *)*((unsigned __int8 *)a1 + 23);
  if (*((char *)a1 + 23) < 0)
  {
    uint64_t v3 = (uint64_t)a1[1];
    if (v3)
    {
      std::string::size_type v4 = *a1;
      if (v3 != 5) {
        goto LABEL_18;
      }
      if (*(_DWORD *)v4 != 1936745788 || v4[4] != 62)
      {
        uint64_t v3 = 5;
        goto LABEL_18;
      }
    }
    return 0;
  }
  if (!*((unsigned char *)a1 + 23)) {
    return 0;
  }
  if (v1 != 5)
  {
    uint64_t v3 = *((unsigned __int8 *)a1 + 23);
    goto LABEL_17;
  }
  if (*(_DWORD *)a1 == 1936745788 && *((unsigned char *)a1 + 4) == 62) {
    return 0;
  }
  uint64_t v3 = 5;
LABEL_17:
  std::string::size_type v4 = (unsigned __int8 *)a1;
LABEL_18:
  size_t v6 = &v4[v3];
  long long v7 = v4;
  while (2)
  {
    for (uint64_t i = 0; i != 4; ++i)
    {
      if (*v7 == asc_1B2680C3D[i])
      {
        if (v7 == v6 || v7 - v4 == -1) {
          goto LABEL_27;
        }
        return 0;
      }
    }
    if (++v7 != v6) {
      continue;
    }
    break;
  }
LABEL_27:
  if ((v1 & 0x80) != 0)
  {
    if (**a1 != 47) {
      return 1;
    }
    uint64_t v1 = a1[1];
    a1 = (unsigned __int8 **)*a1;
    return *((unsigned char *)a1 + (void)v1 - 1) != 47;
  }
  if (*(unsigned char *)a1 == 47) {
    return *((unsigned char *)a1 + (void)v1 - 1) != 47;
  }
  return 1;
}

uint64_t kaldi::quasar::Lexicon::IsValidPron(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 == v3) {
    return 1;
  }
  std::string::size_type v4 = (void *)(a1 + 80);
  while (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v4, (unsigned __int8 *)v2))
  {
    v2 += 24;
    if (v2 == v3) {
      return 1;
    }
  }
  if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
    size_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Phone ", 6);
    int v7 = *(char *)(v2 + 23);
    if (v7 >= 0) {
      uint64_t v8 = v2;
    }
    else {
      uint64_t v8 = *(void *)v2;
    }
    if (v7 >= 0) {
      uint64_t v9 = *(unsigned __int8 *)(v2 + 23);
    }
    else {
      uint64_t v9 = *(void *)(v2 + 8);
    }
    long long v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" (", 2);
    uint64_t v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)") does not exist in the lexicon", 31);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
  }
  return 0;
}

void sub_1B1BB66DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t kaldi::quasar::Lexicon::AddProns(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[1];
  if (*a3 == v3) {
    return 1;
  }
  uint64_t v6 = *a3 + 8;
  do
  {
    memset(v12, 0, sizeof(v12));
    std::string::basic_string[abi:ne180100]<0>(&__p, *(char **)(v6 - 8));
    kaldi::SplitStringToVector(&__p, " \t", 1, (uint64_t)v12);
    kaldi::quasar::Lexicon::NormalizePron(v12, *(unsigned __int8 *)(a1 + 53), 0, &v10);
    uint64_t v7 = kaldi::quasar::Lexicon::AddPron(a1, a2, (long long **)v12, 1, 0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    if (v6 == v3) {
      char v8 = 0;
    }
    else {
      char v8 = v7;
    }
    v6 += 8;
  }
  while ((v8 & 1) != 0);
  return v7;
}

void sub_1B1BB67E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  std::string __p = &a17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void kaldi::quasar::Lexicon::BasifyPhone(std::string *a1)
{
  std::vector<std::string>::vector(&v3, 1uLL);
  std::string::operator=(v3.__begin_, a1);
  __n128 v2 = kaldi::quasar::Lexicon::NormalizePron(&v3.__begin_, 0, 0, (int *)&v4);
  if (v3.__begin_ == v3.__end_) {
    MEMORY[0x1B3EA7B20](a1, "", v2);
  }
  else {
    std::string::operator=(a1, v3.__begin_);
  }
  std::string::size_type v4 = &v3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v4);
}

void sub_1B1BB68A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void kaldi::quasar::Lexicon::BasifyPhones(unint64_t *a1)
{
  unint64_t v12 = 0;
  int64x2_t v2 = 0uLL;
  int64x2_t v11 = 0u;
  unint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  if (*a1 == v4)
  {
    unint64_t v9 = 0;
    int64x2_t v8 = vdupq_n_s64(v3);
    goto LABEL_16;
  }
  do
  {
    kaldi::quasar::Lexicon::BasifyPhone((std::string *)v3);
    if (*(char *)(v3 + 23) < 0)
    {
      if (!*(void *)(v3 + 8)) {
        goto LABEL_13;
      }
    }
    else if (!*(unsigned char *)(v3 + 23))
    {
      goto LABEL_13;
    }
    uint64_t v5 = (_OWORD *)v11.i64[1];
    if (v11.i64[1] >= v12)
    {
      uint64_t v7 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v11.i64, (long long *)v3);
    }
    else
    {
      if ((*(unsigned char *)(v3 + 23) & 0x80) != 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v11.i64[1], *(const std::string::value_type **)v3, *(void *)(v3 + 8));
      }
      else
      {
        long long v6 = *(_OWORD *)v3;
        *(void *)(v11.i64[1] + 16) = *(void *)(v3 + 16);
        _OWORD *v5 = v6;
      }
      uint64_t v7 = (uint64_t)v5 + 24;
    }
    v11.i64[1] = v7;
LABEL_13:
    v3 += 24;
  }
  while (v3 != v4);
  int64x2_t v8 = *(int64x2_t *)a1;
  int64x2_t v2 = v11;
  unint64_t v9 = v12;
LABEL_16:
  *(int64x2_t *)a1 = v2;
  int64x2_t v11 = v8;
  unint64_t v10 = a1[2];
  a1[2] = v9;
  unint64_t v12 = v10;
  int v13 = &v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v13);
}

void sub_1B1BB69C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::Lexicon::BasifyPhones(uint64_t a1)
{
  memset(v7, 0, sizeof(v7));
  int v8 = 1065353216;
  for (uint64_t i = *(uint64_t **)(a1 + 16); i; uint64_t i = (uint64_t *)*i)
  {
    if (*((char *)i + 39) < 0) {
      std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)i[2], i[3]);
    }
    else {
      std::string __p = *(std::string *)(i + 2);
    }
    kaldi::quasar::Lexicon::BasifyPhone(&__p);
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    char v4 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v7, (unsigned __int8 *)&__p, (uint64_t)&__p);
      char v4 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    if (v4 < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::swap(a1, (uint64_t)v7);
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v7);
}

void sub_1B1BB6AB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
}

void kaldi::quasar::Lexicon::Clear(kaldi::quasar::Lexicon *this)
{
  *((unsigned char *)this + 54) = 0;
  std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::clear((uint64_t)this + 80);
  std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::clear((uint64_t)this + 120);
  std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::clear((uint64_t)this + 160);
  std::__hash_table<std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>>>::clear((uint64_t)this + 240);
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this + 35);
  std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::clear((void *)this + 39);
  *((unsigned char *)this + 3--*(_DWORD *)(a9 + 52) = 1;
  int64x2_t v2 = (uint64_t *)*((void *)this + 7);
  if (v2)
  {
    unint64_t v3 = kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::~PrefixTree(v2);
    MEMORY[0x1B3EA8670](v3, 0x20C4093837F09);
  }
  operator new();
}

void sub_1B1BB6BC0(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

unint64_t kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::GetLongestPrefix(void **a1, uint64_t *a2, void *a3)
{
  unint64_t v3 = *a1;
  *a3 = v3;
  uint64_t v4 = *a2;
  if (a2[1] == *a2) {
    return 0;
  }
  uint64_t v7 = 0;
  unint64_t v8 = 0;
  do
  {
    unint64_t v9 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v3, (int *)(v4 + v7));
    if (!v9) {
      break;
    }
    unint64_t v3 = (void *)v9[3];
    *a3 = v3;
    ++v8;
    uint64_t v4 = *a2;
    v7 += 4;
  }
  while (v8 < (a2[1] - *a2) >> 2);
  return v8;
}

uint64_t *kaldi::quasar::Lexicon::DeletePron(uint64_t a1, int a2, void *a3)
{
  int v7 = a2;
  long long v6 = a3;
  kaldi::quasar::Lexicon::DeletePronOnly(a1, a2, a3);
  uint64_t v4 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 240), &v7);
  std::__tree<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>::__erase_unique<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>((uint64_t)(v4 + 3), (unint64_t *)&v6);
  uint64_t result = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 240), &v7);
  if (!result[5]) {
    uint64_t result = kaldi::quasar::Lexicon::DeleteWord((kaldi::quasar::Lexicon *)a1, v7);
  }
  *(unsigned char *)(a1 + 54) = 1;
  *(unsigned char *)(a1 + 3--*(_DWORD *)(a9 + 52) = 0;
  return result;
}

uint64_t *kaldi::quasar::Lexicon::DeleteWord(kaldi::quasar::Lexicon *this, int a2)
{
  int v10 = a2;
  unint64_t v3 = (void *)((char *)this + 240);
  uint64_t v4 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)this + 30, &v10)[3];
  if ((uint64_t *)v4 != std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v3, &v10)+ 4)
  {
    do
    {
      kaldi::quasar::Lexicon::DeletePronOnly((uint64_t)this, v10, *(void **)(v4 + 32));
      uint64_t v5 = *(uint64_t **)(v4 + 8);
      if (v5)
      {
        do
        {
          long long v6 = v5;
          uint64_t v5 = (uint64_t *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          long long v6 = *(uint64_t **)(v4 + 16);
          BOOL v7 = *v6 == v4;
          uint64_t v4 = (uint64_t)v6;
        }
        while (!v7);
      }
      uint64_t v4 = (uint64_t)v6;
    }
    while (v6 != std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v3, &v10) + 4);
  }
  std::__hash_table<std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>>>::__erase_unique<int>(v3, &v10);
  unint64_t v8 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)this + 25, &v10);
  std::__hash_table<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>>>::__erase_unique<std::string>((void *)this + 20, (unsigned __int8 *)v8 + 24);
  uint64_t result = std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::__erase_unique<int>((void *)this + 25, &v10);
  *((unsigned char *)this + 54) = 1;
  *((unsigned char *)this + 3--*(_DWORD *)(a9 + 52) = 0;
  return result;
}

char *kaldi::quasar::Lexicon::GetBasePhoneSet(kaldi::quasar::Lexicon *this)
{
  int64x2_t v2 = (char *)this + 8;
  std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::clear((uint64_t)this + 8);
  for (uint64_t i = (unsigned __int8 *)*((void *)this + 12); i; uint64_t i = *(unsigned __int8 **)i)
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v2, i + 16, (uint64_t)(i + 16));
  kaldi::quasar::Lexicon::BasifyPhones((uint64_t)v2);
  return v2;
}

uint64_t kaldi::quasar::Lexicon::GetNumberOfWords(kaldi::quasar::Lexicon *this)
{
  return *((void *)this + 23);
}

uint64_t kaldi::quasar::Lexicon::GetNumberOfProns(kaldi::quasar::Lexicon *this)
{
  uint64_t v1 = (void *)*((void *)this + 32);
  if (!v1) {
    return 0;
  }
  uint64_t result = 0;
  do
  {
    result += v1[5];
    uint64_t v1 = (void *)*v1;
  }
  while (v1);
  return result;
}

uint64_t kaldi::quasar::Lexicon::GetNumberOfPronsInWord(void *a1, unsigned __int8 *a2)
{
  if (((*(uint64_t (**)(void *))(*a1 + 16))(a1) & 1) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Word does not exist in lexicon: ", 32);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v5, (uint64_t)a2);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v6);
  }
  LODWORD(v6[0]) = *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(a1 + 20, a2)+ 10);
  return *((unsigned int *)std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(a1 + 30, (int *)v6)+ 10);
}

void kaldi::quasar::Lexicon::GetPhoneSymbols(uint64_t a1, std::vector<std::string> *this)
{
  void v28[2] = *MEMORY[0x1E4F143B8];
  std::vector<std::string>::resize(this, *(void *)(a1 + 104));
  uint64_t v4 = *(uint64_t **)(a1 + 96);
  if (v4)
  {
    uint64_t v5 = 0;
    do
    {
      if ((*(_DWORD *)(a1 + 48) | 2) == 3)
      {
        std::operator+<char>();
        long long v6 = std::string::append((std::string *)&v26, "/");
        std::string::size_type v7 = v6->__r_.__value_.__r.__words[0];
        v27.__r_.__value_.__r.__words[0] = v6->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v27.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v6->__r_.__value_.__r.__words[1] + 7);
        char v8 = HIBYTE(v6->__r_.__value_.__r.__words[2]);
        v6->__r_.__value_.__l.__size_ = 0;
        v6->__r_.__value_.__r.__words[2] = 0;
        v6->__r_.__value_.__r.__words[0] = 0;
        unint64_t v9 = &this->__begin_[v5];
        if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v9->__r_.__value_.__l.__data_);
        }
        v9->__r_.__value_.__r.__words[0] = v7;
        v9->__r_.__value_.__l.__size_ = v27.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&v9->__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v27.__r_.__value_.__r.__words + 7);
        *((unsigned char *)&v9->__r_.__value_.__s + 23) = v8;
        if (SHIBYTE(v26.__end_) < 0) {
          operator delete(v26.__first_);
        }
      }
      else
      {
        std::string::operator=(&this->__begin_[v5], (const std::string *)(v4 + 2));
      }
      uint64_t v4 = (uint64_t *)*v4;
      ++v5;
    }
    while (v4);
  }
  if (*(unsigned char *)(a1 + 52))
  {
    int v25 = 1;
    if (kaldi::quasar::Lexicon::GetNumberOfDisambigSymbols(a1))
    {
      do
      {
        kaldi::quasar::to_string<int>();
        int v10 = std::string::insert(&v27, 0, "#");
        std::string::size_type v11 = v10->__r_.__value_.__r.__words[0];
        v28[0] = v10->__r_.__value_.__l.__size_;
        *(void *)((char *)v28 + 7) = *(std::string::size_type *)((char *)&v10->__r_.__value_.__r.__words[1] + 7);
        char v12 = HIBYTE(v10->__r_.__value_.__r.__words[2]);
        v10->__r_.__value_.__l.__size_ = 0;
        v10->__r_.__value_.__r.__words[2] = 0;
        v10->__r_.__value_.__r.__words[0] = 0;
        std::vector<std::string>::pointer end = this->__end_;
        value = this->__end_cap_.__value_;
        if (end >= value)
        {
          unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
          unint64_t v18 = v17 + 1;
          if (v17 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3);
          if (2 * v19 > v18) {
            unint64_t v18 = 2 * v19;
          }
          if (v19 >= 0x555555555555555) {
            unint64_t v20 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v20 = v18;
          }
          v26.__end_cap_.__value_ = (std::allocator<std::string> *)&this->__end_cap_;
          if (v20) {
            int v21 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&this->__end_cap_, v20);
          }
          else {
            int v21 = 0;
          }
          std::string v22 = v21 + v17;
          v26.__first_ = v21;
          v26.__begin_ = v22;
          v26.__end_cap_.__value_ = &v21[v20];
          std::string::size_type v23 = v28[0];
          v22->__r_.__value_.__r.__words[0] = v11;
          v22->__r_.__value_.__l.__size_ = v23;
          *(std::string::size_type *)((char *)&v22->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v28 + 7);
          *((unsigned char *)&v22->__r_.__value_.__s + 23) = v12;
          v26.__end_ = v22 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(this, &v26);
          long long v16 = this->__end_;
          std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&v26);
        }
        else
        {
          std::string::size_type v15 = v28[0];
          end->__r_.__value_.__r.__words[0] = v11;
          end->__r_.__value_.__l.__size_ = v15;
          *(std::string::size_type *)((char *)&end->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v28 + 7);
          *((unsigned char *)&end->__r_.__value_.__s + 23) = v12;
          long long v16 = end + 1;
          this->__end_ = end + 1;
        }
        this->__end_ = v16;
        if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v27.__r_.__value_.__l.__data_);
        }
        unint64_t v24 = ++v25;
      }
      while (kaldi::quasar::Lexicon::GetNumberOfDisambigSymbols(a1) >= v24);
    }
  }
}

void sub_1B1BB71D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__split_buffer<std::wstring> *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__pa, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (v24 < 0) {
    operator delete(v23);
  }
  if (a23 < 0) {
    operator delete(__pa);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::string>::resize(std::vector<std::string> *this, std::vector<std::string>::size_type __sz)
{
  std::vector<std::string>::pointer end = this->__end_;
  std::vector<std::string>::size_type v4 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
  BOOL v5 = __sz >= v4;
  std::vector<std::string>::size_type v6 = __sz - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::string>::__append(this, v6);
  }
  else if (!v5)
  {
    std::string::size_type v7 = &this->__begin_[__sz];
    while (end != v7)
    {
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(end[-1].__r_.__value_.__l.__data_);
      }
      --end;
    }
    this->__end_ = v7;
  }
}

uint64_t kaldi::quasar::to_string<int>()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v1);
  std::ostream::operator<<();
  std::stringbuf::str();
  v1[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v1 + *(void *)(v1[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v1[1] = MEMORY[0x1E4FBA470] + 16;
  if (v2 < 0) {
    operator delete((void *)v1[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](&v3);
}

void sub_1B1BB740C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::quasar::Lexicon::GetPron(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, void **a3@<X8>)
{
  std::vector<std::string>::size_type v6 = (uint64_t *)(a1 + 280);
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)(a1 + 280));
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v31[0] = 0;
  v31[1] = 0;
  size_t v30 = v31;
  kaldi::quasar::Lexicon::GetPron(a1, a2, (uint64_t)&v30);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v29 = 0;
  std::string::size_type v7 = (char *)v30;
  if (v30 == v31)
  {
    uint64_t v10 = *(void *)(a1 + 288);
  }
  else
  {
    do
    {
      kaldi::JoinVectorToString((uint64_t *)v7 + 4, " ", 1, (long long *)__p);
      unint64_t v8 = *(void *)(a1 + 288);
      if (v8 >= *(void *)(a1 + 296))
      {
        uint64_t v10 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v6, (long long *)__p);
      }
      else
      {
        if (SHIBYTE(v29) < 0)
        {
          std::string::__init_copy_ctor_external(*(std::string **)(a1 + 288), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          long long v9 = *(_OWORD *)__p;
          *(void *)(v8 + 16) = v29;
          *(_OWORD *)unint64_t v8 = v9;
        }
        uint64_t v10 = v8 + 24;
        *(void *)(a1 + 288) = v10;
      }
      *(void *)(a1 + 288) = v10;
      std::string::size_type v11 = (char *)*((void *)v7 + 1);
      if (v11)
      {
        do
        {
          char v12 = (char **)v11;
          std::string::size_type v11 = *(char **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          char v12 = (char **)*((void *)v7 + 2);
          BOOL v13 = *v12 == v7;
          std::string::size_type v7 = (char *)v12;
        }
        while (!v13);
      }
      std::string::size_type v7 = (char *)v12;
    }
    while (v12 != v31);
  }
  for (uint64_t i = *v6; i != v10; i += 24)
  {
    uint64_t v15 = i;
    if (*(char *)(i + 23) < 0) {
      uint64_t v15 = *(void *)i;
    }
    unint64_t v17 = (uint64_t *)a3[1];
    unint64_t v16 = (unint64_t)a3[2];
    if ((unint64_t)v17 >= v16)
    {
      uint64_t v19 = ((char *)v17 - (unsigned char *)*a3) >> 3;
      if ((unint64_t)(v19 + 1) >> 61) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v20 = v16 - (void)*a3;
      uint64_t v21 = v20 >> 2;
      if (v20 >> 2 <= (unint64_t)(v19 + 1)) {
        uint64_t v21 = v19 + 1;
      }
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v22 = v21;
      }
      if (v22) {
        std::string::size_type v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a3 + 2), v22);
      }
      else {
        std::string::size_type v23 = 0;
      }
      int v24 = (uint64_t *)&v23[8 * v19];
      *int v24 = v15;
      unint64_t v18 = v24 + 1;
      std::__split_buffer<std::string> v26 = (char *)*a3;
      int v25 = (char *)a3[1];
      if (v25 != *a3)
      {
        do
        {
          uint64_t v27 = *((void *)v25 - 1);
          v25 -= 8;
          *--int v24 = v27;
        }
        while (v25 != v26);
        int v25 = (char *)*a3;
      }
      *a3 = v24;
      a3[1] = v18;
      a3[2] = &v23[8 * v22];
      if (v25) {
        operator delete(v25);
      }
    }
    else
    {
      uint64_t *v17 = v15;
      unint64_t v18 = v17 + 1;
    }
    a3[1] = v18;
  }
  if (SHIBYTE(v29) < 0) {
    operator delete(__p[0]);
  }
  std::__tree<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>::destroy((uint64_t)&v30, v31[0]);
}

void sub_1B1BB765C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, char *a16)
{
  std::__tree<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>::destroy((uint64_t)&a15, a16);
  unint64_t v18 = *(void **)v16;
  if (*(void *)v16)
  {
    *(void *)(v16 + 8) = v18;
    operator delete(v18);
  }
  _Unwind_Resume(a1);
}

void kaldi::quasar::Lexicon::GetPron(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  v48[2] = *MEMORY[0x1E4F143B8];
  int v45 = a2;
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)a4);
  if (**(void **)(a1 + 56) == a3)
  {
    uint64_t v10 = *(void *)(a4 + 8);
  }
  else
  {
    uint64_t v7 = a3;
    do
    {
      unint64_t v8 = (long long *)(std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 120), (int *)(v7 + 88))+ 3);
      unint64_t v9 = *(void *)(a4 + 8);
      if (v9 >= *(void *)(a4 + 16))
      {
        uint64_t v10 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a4, v8);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a4, v8);
        uint64_t v10 = v9 + 24;
      }
      *(void *)(a4 + 8) = v10;
      uint64_t v7 = *(void *)(v7 + 80);
    }
    while (v7 != **(void **)(a1 + 56));
  }
  unint64_t v11 = *(void *)a4;
  unint64_t v12 = v10 - 24;
  if (*(void *)a4 != v10 && v12 > v11)
  {
    unint64_t v14 = v11 + 24;
    do
    {
      *(_OWORD *)&v46.__first_ = *(_OWORD *)(v14 - 24);
      long long v15 = *(_OWORD *)&v46.__first_;
      v46.__end_ = *(std::__split_buffer<std::wstring>::pointer *)(v14 - 8);
      std::__split_buffer<std::wstring>::pointer end = v46.__end_;
      uint64_t v17 = *(void *)(v12 + 16);
      *(_OWORD *)(v14 - ++*(_DWORD *)(result + 24) = *(_OWORD *)v12;
      *(void *)(v14 - 8) = v17;
      *(void *)(v12 + 16) = end;
      *(_OWORD *)unint64_t v12 = v15;
      v12 -= 24;
      BOOL v18 = v14 >= v12;
      v14 += 24;
    }
    while (!v18);
  }
  int v19 = *(_DWORD *)(a1 + 48);
  switch(v19)
  {
    case 3:
      if (!*(unsigned char *)(a1 + 53)) {
        kaldi::quasar::Lexicon::BasePron2PositionalPron((std::string **)a4, 0);
      }
      uint64_t v25 = *(void *)a4;
      uint64_t v26 = *(void *)(a4 + 8);
      if (*(void *)a4 != v26)
      {
        do
        {
          std::operator+<char>();
          uint64_t v27 = std::string::append((std::string *)&v46, "/");
          std::string::size_type v28 = v27->__r_.__value_.__r.__words[0];
          v47.__r_.__value_.__r.__words[0] = v27->__r_.__value_.__l.__size_;
          *(std::string::size_type *)((char *)v47.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v27->__r_.__value_.__r.__words[1] + 7);
          char v29 = HIBYTE(v27->__r_.__value_.__r.__words[2]);
          v27->__r_.__value_.__l.__size_ = 0;
          v27->__r_.__value_.__r.__words[2] = 0;
          v27->__r_.__value_.__r.__words[0] = 0;
          if (*(char *)(v25 + 23) < 0) {
            operator delete(*(void **)v25);
          }
          *(void *)uint64_t v25 = v28;
          *(void *)(v25 + 8) = v47.__r_.__value_.__r.__words[0];
          *(void *)(v25 + 15) = *(std::string::size_type *)((char *)v47.__r_.__value_.__r.__words + 7);
          *(unsigned char *)(v25 + 23) = v29;
          if (SHIBYTE(v46.__end_) < 0) {
            operator delete(v46.__first_);
          }
          v25 += 24;
        }
        while (v25 != v26);
      }
      break;
    case 2:
      if (!*(unsigned char *)(a1 + 53)) {
        kaldi::quasar::Lexicon::BasePron2PositionalPron((std::string **)a4, 0);
      }
      break;
    case 1:
      uint64_t v20 = *(void *)a4;
      uint64_t v21 = *(void *)(a4 + 8);
      if (*(void *)a4 != v21)
      {
        do
        {
          std::operator+<char>();
          unint64_t v22 = std::string::append((std::string *)&v46, "/");
          std::string::size_type v23 = v22->__r_.__value_.__r.__words[0];
          v47.__r_.__value_.__r.__words[0] = v22->__r_.__value_.__l.__size_;
          *(std::string::size_type *)((char *)v47.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v22->__r_.__value_.__r.__words[1] + 7);
          char v24 = HIBYTE(v22->__r_.__value_.__r.__words[2]);
          v22->__r_.__value_.__l.__size_ = 0;
          v22->__r_.__value_.__r.__words[2] = 0;
          v22->__r_.__value_.__r.__words[0] = 0;
          if (*(char *)(v20 + 23) < 0) {
            operator delete(*(void **)v20);
          }
          *(void *)uint64_t v20 = v23;
          *(void *)(v20 + 8) = v47.__r_.__value_.__r.__words[0];
          *(void *)(v20 + 15) = *(std::string::size_type *)((char *)v47.__r_.__value_.__r.__words + 7);
          *(unsigned char *)(v20 + 23) = v24;
          if (SHIBYTE(v46.__end_) < 0) {
            operator delete(v46.__first_);
          }
          v20 += 24;
        }
        while (v20 != v21);
      }
      break;
  }
  int v30 = *((_DWORD *)std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a3 + 40), &v45)+ 5);
  if (*(unsigned char *)(a1 + 52) && v30 != -1)
  {
    kaldi::quasar::to_string<int>();
    int v31 = std::string::insert(&v47, 0, "#");
    std::string::size_type v32 = v31->__r_.__value_.__r.__words[0];
    v48[0] = v31->__r_.__value_.__l.__size_;
    *(void *)((char *)v48 + 7) = *(std::string::size_type *)((char *)&v31->__r_.__value_.__r.__words[1] + 7);
    char v33 = HIBYTE(v31->__r_.__value_.__r.__words[2]);
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    unint64_t v34 = *(void *)(a4 + 16);
    unint64_t v35 = *(void *)(a4 + 8);
    if (v35 >= v34)
    {
      unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - *(void *)a4) >> 3);
      unint64_t v39 = v38 + 1;
      if (v38 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v34 - *(void *)a4) >> 3);
      if (2 * v40 > v39) {
        unint64_t v39 = 2 * v40;
      }
      if (v40 >= 0x555555555555555) {
        unint64_t v41 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v41 = v39;
      }
      v46.__end_cap_.__value_ = (std::allocator<std::wstring> *)(a4 + 16);
      if (v41) {
        size_t v42 = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(a4 + 16, v41);
      }
      else {
        size_t v42 = 0;
      }
      std::vector<std::string>::pointer v43 = v42 + v38;
      v46.__first_ = v42;
      v46.__begin_ = v43;
      v46.__end_cap_.__value_ = &v42[v41];
      std::wstring::size_type v44 = v48[0];
      v43->__r_.__value_.__r.__words[0] = v32;
      v43->__r_.__value_.__l.__size_ = v44;
      *(std::wstring::size_type *)((char *)&v43->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v48 + 7);
      *((unsigned char *)&v43->__r_.__value_.__s + 23) = v33;
      v46.__end_ = v43 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a4, (std::__split_buffer<std::string> *)&v46);
      unint64_t v37 = *(void *)(a4 + 8);
      std::__split_buffer<std::string>::~__split_buffer(&v46);
    }
    else
    {
      uint64_t v36 = v48[0];
      *(void *)unint64_t v35 = v32;
      *(void *)(v35 + 8) = v36;
      *(void *)(v35 + 15) = *(void *)((char *)v48 + 7);
      *(unsigned char *)(v35 + 23) = v33;
      unint64_t v37 = v35 + 24;
      *(void *)(a4 + 8) = v35 + 24;
    }
    *(void *)(a4 + 8) = v37;
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v47.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1B1BB7ABC(_Unwind_Exception *a1, uint64_t a2, std::__split_buffer<std::wstring> *a3, uint64_t a4, void *__p, uint64_t a6, int a7, __int16 a8, char a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__pa, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__pa);
  }
  _Unwind_Resume(a1);
}

BOOL kaldi::quasar::Lexicon::HasWord(uint64_t a1, unsigned __int8 *a2)
{
  return std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((void *)(a1 + 160), a2) != 0;
}

void kaldi::quasar::Lexicon::GetWord(kaldi::quasar::Lexicon *this@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  int v6 = a2;
  std::vector<std::string>::size_type v4 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)this + 25, &v6);
  if (v4)
  {
    if (*((char *)v4 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(a3, (const std::string::value_type *)v4[3], v4[4]);
    }
    else
    {
      long long v5 = *(_OWORD *)(v4 + 3);
      a3->__r_.__value_.__r.__words[2] = v4[5];
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v5;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a3, "");
  }
}

uint64_t kaldi::quasar::Lexicon::IsPositionalPhone(uint64_t *a1)
{
  uint64_t v1 = *((unsigned __int8 *)a1 + 23);
  if (*((char *)a1 + 23) < 0)
  {
    unint64_t v2 = a1[1];
    if (v2 < 3) {
      return 0;
    }
  }
  else
  {
    if (v1 < 3) {
      return 0;
    }
    unint64_t v2 = *((unsigned __int8 *)a1 + 23);
  }
  if ((v1 & 0x80u) == 0) {
    uint64_t v3 = a1;
  }
  else {
    uint64_t v3 = (uint64_t *)*a1;
  }
  if ((v1 & 0x80u) != 0) {
    uint64_t v1 = a1[1];
  }
  if (*((unsigned char *)v3 + v1 - 2) == 95)
  {
    unsigned int v4 = *((unsigned __int8 *)v3 + v2 - 1) - 66;
    if (v4 <= 0x11) {
      return (0x20089u >> v4) & 1;
    }
  }
  return 0;
}

void kaldi::quasar::Lexicon::PruneHomophoneProns(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t **a3@<X2>, uint64_t **a4@<X8>)
{
  uint64_t v17 = 0;
  BOOL v18 = 0;
  uint64_t v16 = (uint64_t *)&v17;
  if (kaldi::quasar::Lexicon::GetNumberOfDisambigSymbols(a1) <= a2)
  {
    a4[2] = 0;
    a4[1] = 0;
    *a4 = (uint64_t *)(a4 + 1);
    BOOL v13 = v17;
  }
  else
  {
    kaldi::quasar::Lexicon::PruneHomophonePronsFromNode(a1, **(void **)(a1 + 56), a2, &v16, a3);
    unint64_t v8 = v16;
    unint64_t v9 = (uint64_t *)&v17;
    if (v16 != (uint64_t *)&v17)
    {
      do
      {
        if (a3 + 1 != (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)a3, (const void **)v8 + 4))std::__tree<std::string>::__erase_unique<std::string>(a3, (const void **)v8 + 4); {
        uint64_t v10 = (uint64_t *)v8[1];
        }
        if (v10)
        {
          do
          {
            unint64_t v11 = v10;
            uint64_t v10 = (uint64_t *)*v10;
          }
          while (v10);
        }
        else
        {
          do
          {
            unint64_t v11 = (uint64_t *)v8[2];
            BOOL v12 = *v11 == (void)v8;
            unint64_t v8 = v11;
          }
          while (!v12);
        }
        unint64_t v8 = v11;
      }
      while (v11 != (uint64_t *)&v17);
      unint64_t v9 = v16;
    }
    *a4 = v9;
    BOOL v13 = v17;
    unint64_t v14 = v18;
    a4[1] = v17;
    long long v15 = (uint64_t *)(a4 + 1);
    a4[2] = v14;
    if (v14)
    {
      _OWORD v13[2] = (uint64_t)v15;
      uint64_t v16 = (uint64_t *)&v17;
      uint64_t v17 = 0;
      BOOL v18 = 0;
      BOOL v13 = 0;
    }
    else
    {
      *a4 = v15;
    }
  }
  std::__tree<std::string>::destroy((uint64_t)&v16, (char *)v13);
}

void sub_1B1BB7D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
}

uint64_t kaldi::quasar::Lexicon::PruneHomophonePronsFromNode(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t **a4, uint64_t **a5)
{
  uint64_t v16 = a2;
  unsigned long long v15 = 0u;
  memset(v14, 0, sizeof(v14));
  std::deque<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>::push_back(v14, &v16);
  if (*((void *)&v15 + 1))
  {
    unint64_t v9 = v15;
    do
    {
      uint64_t v10 = *(void *)(*(void *)(*((void *)&v14[0] + 1) + ((v9 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v9 & 0x1FF));
      kaldi::quasar::Lexicon::PruneHomophonePronsForNode(a1, v10, a3, a4, a5);
      for (uint64_t i = (void *)(v10 + 16);
            ;
            std::deque<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>::push_back(v14, i + 3))
      {
        uint64_t i = (void *)*i;
        if (!i) {
          break;
        }
      }
      uint64_t v12 = *((void *)&v15 + 1) - 1;
      unint64_t v9 = v15 + 1;
      unsigned long long v15 = __PAIR128__(*((unint64_t *)&v15 + 1), (uint64_t)v15 + 1) + __PAIR128__(-1, 0);
      if (v9 >= 0x400)
      {
        operator delete(**((void ***)&v14[0] + 1));
        unint64_t v9 = v15 - 512;
        *((void *)&v14[0] + 1) += 8;
        *(void *)&unsigned long long v15 = v15 - 512;
        uint64_t v12 = *((void *)&v15 + 1);
      }
    }
    while (v12);
  }
  return std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100](v14);
}

void sub_1B1BB7E9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t kaldi::quasar::Lexicon::SetPronView(uint64_t result, unsigned int a2, int a3)
{
  if (a2 <= 1 && a3 && *(unsigned char *)(result + 53))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "For a lexicon using pos-dep phones, cannot view disambig IDs with pos-indep phones");
LABEL_12:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  if ((a2 & 0xFFFFFFFE) == 2 && !*(unsigned char *)(result + 53) && a3 != 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "For a lexicon using pos-indep phones, cannot view disambig IDs with pos-dep phones");
    goto LABEL_12;
  }
  *(_DWORD *)(result + 48) = a2;
  *(unsigned char *)(result + --*(_DWORD *)(a9 + 52) = a3;
  return result;
}

BOOL kaldi::quasar::Lexicon::WordHasDisambigLabel(void *a1, unsigned __int8 *a2)
{
  if (((*(uint64_t (**)(void *))(*a1 + 16))(a1) & 1) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Word does not exist in lexicon: ", 32);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v12, (uint64_t)a2);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
  }
  LODWORD(v13[0]) = *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(a1 + 20, a2)+ 10);
  unsigned int v4 = a1 + 30;
  long long v5 = (uint64_t *)std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(a1 + 30, (int *)v13)[3];
  if (v5 == std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(a1 + 30, (int *)v13)+ 4)return 0; {
  do
  }
  {
    int v6 = *((_DWORD *)std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(v5[4] + 40), (int *)v13)+ 5);
    BOOL v7 = v6 != -1;
    if (v6 != -1) {
      break;
    }
    unint64_t v8 = (uint64_t *)v5[1];
    if (v8)
    {
      do
      {
        unint64_t v9 = v8;
        unint64_t v8 = (uint64_t *)*v8;
      }
      while (v8);
    }
    else
    {
      do
      {
        unint64_t v9 = (uint64_t *)v5[2];
        BOOL v10 = *v9 == (void)v5;
        long long v5 = v9;
      }
      while (!v10);
    }
    long long v5 = v9;
  }
  while (v9 != std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v4, (int *)v13)
              + 4);
  return v7;
}

void kaldi::quasar::Lexicon::BasePron2PositionalPron(std::string **a1, int a2)
{
  v27[2] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (char *)a1[1] - (char *)*a1;
  if (v4 != 24)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v4 >> 3) < 2) {
      return;
    }
    if (a2)
    {
      std::operator+<char>();
      BOOL v10 = std::string::append(&__p, "_B/");
      std::string::size_type v11 = v10->__r_.__value_.__r.__words[0];
      v27[0] = v10->__r_.__value_.__l.__size_;
      *(void *)((char *)v27 + 7) = *(std::string::size_type *)((char *)&v10->__r_.__value_.__r.__words[1] + 7);
      char v12 = HIBYTE(v10->__r_.__value_.__r.__words[2]);
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      BOOL v13 = *a1;
      if (SHIBYTE((*a1)->__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v13->__r_.__value_.__l.__data_);
      }
      std::string::size_type v14 = v27[0];
      v13->__r_.__value_.__r.__words[0] = v11;
      v13->__r_.__value_.__l.__size_ = v14;
      *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v27 + 7);
      *((unsigned char *)&v13->__r_.__value_.__s + 23) = v12;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      std::string::append(*a1, "_B");
    }
    for (uint64_t i = (uint64_t)&(*a1)[1]; (std::string *)i != &a1[1][-1]; i += 24)
    {
      if (a2)
      {
        std::operator+<char>();
        uint64_t v17 = std::string::append(&__p, "_I/");
        std::string::size_type v18 = v17->__r_.__value_.__r.__words[0];
        v27[0] = v17->__r_.__value_.__l.__size_;
        *(void *)((char *)v27 + 7) = *(std::string::size_type *)((char *)&v17->__r_.__value_.__r.__words[1] + 7);
        char v19 = HIBYTE(v17->__r_.__value_.__r.__words[2]);
        v17->__r_.__value_.__l.__size_ = 0;
        v17->__r_.__value_.__r.__words[2] = 0;
        v17->__r_.__value_.__r.__words[0] = 0;
        if (*(char *)(i + 23) < 0) {
          operator delete(*(void **)i);
        }
        uint64_t v20 = v27[0];
        *(void *)uint64_t i = v18;
        *(void *)(i + 8) = v20;
        *(void *)(i + 15) = *(void *)((char *)v27 + 7);
        *(unsigned char *)(i + 23) = v19;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        std::string::append((std::string *)i, "_I");
      }
    }
    if ((a2 & 1) == 0)
    {
      std::string::append((std::string *)i, "_E");
      return;
    }
    std::operator+<char>();
    uint64_t v21 = std::string::append(&__p, "_E/");
    std::string::size_type v22 = v21->__r_.__value_.__r.__words[0];
    v27[0] = v21->__r_.__value_.__l.__size_;
    *(void *)((char *)v27 + 7) = *(std::string::size_type *)((char *)&v21->__r_.__value_.__r.__words[1] + 7);
    char v23 = HIBYTE(v21->__r_.__value_.__r.__words[2]);
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    char v24 = a1[1];
    if (SHIBYTE(v24[-1].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24[-1].__r_.__value_.__l.__data_);
    }
    std::string::size_type v25 = v27[0];
    v24[-1].__r_.__value_.__r.__words[0] = v22;
    v24[-1].__r_.__value_.__l.__size_ = v25;
    *(std::string::size_type *)((char *)&v24[-1].__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v27 + 7);
    *((unsigned char *)&v24[-1].__r_.__value_.__s + 23) = v23;
    goto LABEL_28;
  }
  if (a2)
  {
    std::operator+<char>();
    long long v5 = std::string::append(&__p, "_S/");
    std::string::size_type v6 = v5->__r_.__value_.__r.__words[0];
    v27[0] = v5->__r_.__value_.__l.__size_;
    *(void *)((char *)v27 + 7) = *(std::string::size_type *)((char *)&v5->__r_.__value_.__r.__words[1] + 7);
    char v7 = HIBYTE(v5->__r_.__value_.__r.__words[2]);
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    unint64_t v8 = *a1;
    if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v8->__r_.__value_.__l.__data_);
    }
    std::string::size_type v9 = v27[0];
    v8->__r_.__value_.__r.__words[0] = v6;
    v8->__r_.__value_.__l.__size_ = v9;
    *(std::string::size_type *)((char *)&v8->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v27 + 7);
    *((unsigned char *)&v8->__r_.__value_.__s + 23) = v7;
LABEL_28:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    return;
  }
  unsigned long long v15 = *a1;
  std::string::append(v15, "_S");
}

void sub_1B1BB83EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::AddSequence(void **a1, uint64_t *a2, void *a3, void *a4)
{
  LODWORD(result) = kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::GetLongestPrefix(a1, a2, a3);
  *a4 = *a3;
  if ((int)result < (unint64_t)((a2[1] - *a2) >> 2)) {
    operator new();
  }
  return (int)result;
}

uint64_t kaldi::quasar::Lexicon::DeletePronOnly(uint64_t a1, int a2, void *a3)
{
  int v9 = a2;
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__erase_unique<int>(a3 + 5, &v9);
  if (a3[8] == 1)
  {
    if (a3[3]) {
      int v5 = 1;
    }
    else {
      int v5 = -1;
    }
    *(_DWORD *)(a3[7] + 20) = v5;
  }
  else
  {
    std::string::size_type v6 = (uint64_t *)a3[7];
    if (v6)
    {
      int v7 = 1;
      do
      {
        *((_DWORD *)v6 + 5) = v7++;
        std::string::size_type v6 = (uint64_t *)*v6;
      }
      while (v6);
    }
  }
  uint64_t result = kaldi::quasar::Lexicon::PrunePron(a1, (uint64_t)a3);
  *(unsigned char *)(a1 + 54) = 1;
  *(unsigned char *)(a1 + 3--*(_DWORD *)(a9 + 52) = 0;
  return result;
}

uint64_t kaldi::quasar::Lexicon::PrunePron(uint64_t result, uint64_t a2)
{
  if (**(void **)(result + 56) != a2)
  {
    uint64_t v2 = a2;
    uint64_t v3 = result;
    do
    {
      if (*(void *)(v2 + 64)) {
        break;
      }
      if (*(void *)(v2 + 24)) {
        break;
      }
      uint64_t v4 = *(void **)(v2 + 80);
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__erase_unique<int>(v4, (int *)(v2 + 88));
      uint64_t v5 = kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node::~Node(v2);
      uint64_t result = MEMORY[0x1B3EA8670](v5, 0x10A0C40A79550FFLL);
      uint64_t v2 = (uint64_t)v4;
    }
    while (v4 != **(void ***)(v3 + 56));
  }
  return result;
}

uint64_t kaldi::quasar::Lexicon::GetMaxDisambigId(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = a2;
  unsigned long long v11 = 0u;
  memset(v10, 0, sizeof(v10));
  std::deque<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node const*,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node const*>>::push_back(v10, &v12);
  if (*((void *)&v11 + 1))
  {
    LODWORD(v3) = 0;
    unint64_t v4 = v11;
    do
    {
      uint64_t v5 = *(void **)(*(void *)(*((void *)&v10[0] + 1) + ((v4 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v4 & 0x1FF));
      if (v5 == **(void ***)(a1 + 56))
      {
        LODWORD(v6) = 0;
      }
      else
      {
        uint64_t v6 = v5[8];
        if (v6 == 1) {
          LODWORD(v6) = *(_DWORD *)(v5[7] + 20) != -1;
        }
      }
      if ((int)v6 <= (int)v3) {
        uint64_t v3 = v3;
      }
      else {
        uint64_t v3 = v6;
      }
      for (uint64_t i = v5 + 2;
            ;
            std::deque<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node const*,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node const*>>::push_back(v10, i + 3))
      {
        uint64_t i = (void *)*i;
        if (!i) {
          break;
        }
      }
      uint64_t v8 = *((void *)&v11 + 1) - 1;
      unint64_t v4 = v11 + 1;
      unsigned long long v11 = __PAIR128__(*((unint64_t *)&v11 + 1), (uint64_t)v11 + 1) + __PAIR128__(-1, 0);
      if (v4 >= 0x400)
      {
        operator delete(**((void ***)&v10[0] + 1));
        unint64_t v4 = v11 - 512;
        *((void *)&v10[0] + 1) += 8;
        *(void *)&unsigned long long v11 = v11 - 512;
        uint64_t v8 = *((void *)&v11 + 1);
      }
    }
    while (v8);
  }
  else
  {
    uint64_t v3 = 0;
  }
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100](v10);
  return v3;
}

void sub_1B1BB8778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t kaldi::quasar::Lexicon::GetPhoneId(uint64_t a1, long long *a2, int a3)
{
  uint64_t v6 = (void *)(a1 + 80);
  if (!std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((void *)(a1 + 80), (unsigned __int8 *)a2))
  {
    if (!a3)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
      unsigned long long v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Invalid phone ", 14);
      std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v11, (uint64_t)a2);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12);
    }
    int v8 = *(_DWORD *)(a1 + 64);
    int v7 = (long long *)(a1 + 64);
    v12[0] = a2;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v6, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, v12)+ 10) = v8;
    v12[0] = v7;
    int v9 = (std::string *)std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)v7 + 56, (int *)v7, (uint64_t)&std::piecewise_construct, (_DWORD **)v12);
    std::string::operator=(v9 + 1, (const std::string *)a2);
    ++*(_DWORD *)v7;
  }
  return *((unsigned int *)std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v6, (unsigned __int8 *)a2)+ 10);
}

void kaldi::quasar::Lexicon::PruneHomophonePronsForNode(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t **a4, uint64_t **a5)
{
  if (*(void *)(a2 + 64) > a3)
  {
    int v7 = a3;
    uint64_t v36 = 0;
    unint64_t v37 = 0;
    unint64_t v38 = 0;
    BOOL v10 = *(int **)(a2 + 56);
    if (v10)
    {
      int v33 = a3;
      do
      {
        uint64_t v11 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 240), v10 + 4)[5];
        uint64_t v12 = v10[4];
        BOOL v13 = v37;
        if (v37 >= v38)
        {
          uint64_t v15 = v37 - v36;
          if ((unint64_t)(v15 + 1) >> 61) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v16 = ((char *)v38 - (char *)v36) >> 2;
          if (v16 <= v15 + 1) {
            unint64_t v16 = v15 + 1;
          }
          if ((unint64_t)((char *)v38 - (char *)v36) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v17 = v16;
          }
          if (v17) {
            std::string::size_type v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v38, v17);
          }
          else {
            std::string::size_type v18 = 0;
          }
          char v19 = (uint64_t *)&v18[8 * v15];
          *char v19 = v12 | (v11 << 32);
          std::string::size_type v14 = v19 + 1;
          uint64_t v21 = (char *)v36;
          uint64_t v20 = v37;
          if (v37 != v36)
          {
            do
            {
              uint64_t v22 = *--v20;
              *--char v19 = v22;
            }
            while (v20 != (uint64_t *)v21);
            uint64_t v20 = v36;
          }
          uint64_t v36 = v19;
          unint64_t v37 = v14;
          unint64_t v38 = (uint64_t *)&v18[8 * v17];
          if (v20) {
            operator delete(v20);
          }
        }
        else
        {
          *unint64_t v37 = v12 | (v11 << 32);
          std::string::size_type v14 = v13 + 1;
        }
        unint64_t v37 = v14;
        BOOL v10 = *(int **)v10;
      }
      while (v10);
      char v23 = v36;
      int v7 = v33;
    }
    else
    {
      std::string::size_type v14 = 0;
      char v23 = 0;
    }
    unint64_t v24 = 126 - 2 * __clz(v14 - v23);
    if (v14 == v23) {
      uint64_t v25 = 0;
    }
    else {
      uint64_t v25 = v24;
    }
    std::__introsort<std::_ClassicAlgPolicy,kaldi::quasar::Lexicon::HasMoreProns &,std::pair<int,int> *,false>((uint64_t)v23, v14, (uint64_t)v34, v25, 1);
    if (*(_DWORD *)(a2 + 64) - v7 >= 1)
    {
      unint64_t v26 = 0;
      uint64_t v27 = 8 * (*(_DWORD *)(a2 + 64) - v7);
      do
      {
        std::string::size_type v28 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 200), (int *)&v36[v26 / 8]);
        if (*((char *)v28 + 47) < 0) {
          std::string::__init_copy_ctor_external(&v35, (const std::string::value_type *)v28[3], v28[4]);
        }
        else {
          std::string v35 = *(std::string *)((unsigned char *)v28 + 1);
        }
        if (HIDWORD(v36[v26 / 8]) == 1) {
          char v29 = a4;
        }
        else {
          char v29 = a5;
        }
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(v29, (const void **)&v35.__r_.__value_.__l.__data_, (uint64_t)&v35);
        if (kaldi::g_kaldi_verbose_level >= 1)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v34, 1);
          int v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"Removing a pron for word: ", 26);
          if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v31 = &v35;
          }
          else {
            int v31 = (std::string *)v35.__r_.__value_.__r.__words[0];
          }
          if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v35.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v35.__r_.__value_.__l.__size_;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)v31, size);
          kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v34);
        }
        kaldi::quasar::Lexicon::DeletePron(a1, v36[v26 / 8], (void *)a2);
        if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v35.__r_.__value_.__l.__data_);
        }
        v26 += 8;
      }
      while (v27 != v26);
    }
    if (v36)
    {
      unint64_t v37 = v36;
      operator delete(v36);
    }
  }
}

void sub_1B1BB8B4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v12 = *(void **)(v10 - 112);
  if (v12)
  {
    *(void *)(v10 - 104) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::Lexicon::NumHomophones(kaldi::quasar::Lexicon *this)
{
  if (*((unsigned char *)this + 304) && *((unsigned char *)this + 352)) {
    return *((unsigned int *)this + 84);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

void kaldi::quasar::ConstLexicon::Init(kaldi::quasar::ConstLexicon *this)
{
  *((unsigned char *)this + 72) = 1;
  uint64_t v2 = *((void *)this + 8);
  uint64_t v3 = **((int **)this + 7);
  int v4 = strlen((const char *)(v2 + v3));
  char v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)(v2 + (int)v3 + v4 + 5));
  kaldi::SplitStringToVector(&__p, " \t", 1, (uint64_t)&v19);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v5 = v19;
  uint64_t v6 = v20;
  while (v5 != v6)
  {
    if ((char)v5[23] < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v5, *((void *)v5 + 1));
    }
    else
    {
      long long v7 = *(_OWORD *)v5;
      __p.__r_.__value_.__r.__words[2] = *((void *)v5 + 2);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v7;
    }
    kaldi::quasar::Lexicon::BasifyPhone(&__p);
    char v8 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v10 = v5[23];
    int v11 = (char)v10;
    if ((v10 & 0x80u) != 0) {
      uint64_t v10 = *((void *)v5 + 1);
    }
    if (size == v10)
    {
      if (v11 >= 0) {
        uint64_t v12 = (const std::string::value_type *)v5;
      }
      else {
        uint64_t v12 = *(const std::string::value_type **)v5;
      }
      if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        uint64_t v15 = (void *)__p.__r_.__value_.__r.__words[0];
        if (!memcmp(__p.__r_.__value_.__l.__data_, v12, __p.__r_.__value_.__l.__size_)) {
          goto LABEL_27;
        }
      }
      else
      {
        if (!*((unsigned char *)&__p.__r_.__value_.__s + 23)) {
          goto LABEL_28;
        }
        p_p = &__p;
        uint64_t v14 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        while (p_p->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v12)
        {
          p_p = (std::string *)((char *)p_p + 1);
          ++v12;
          if (!--v14)
          {
            if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) == 0) {
              goto LABEL_28;
            }
            goto LABEL_26;
          }
        }
      }
    }
    *((unsigned char *)this + 72) = 0;
    if ((v8 & 0x80) == 0) {
      goto LABEL_28;
    }
LABEL_26:
    uint64_t v15 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_27:
    operator delete(v15);
LABEL_28:
    v5 += 24;
  }
  std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::clear((uint64_t)this + 8);
  unint64_t v16 = v19;
  unint64_t v17 = v20;
  while (v16 != v17)
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)this + 8, v16, (uint64_t)v16);
    v16 += 24;
  }
  MEMORY[0x1B3EA7B20]((char *)this + 80, "");
  *((_DWORD *)this + 26) = -1;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1B1BB8D88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::string __p = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

BOOL kaldi::quasar::ConstLexicon::HasWord(uint64_t a1, const std::string *a2)
{
  int v4 = *(_DWORD *)(a1 + 48);
  if (v4 < 2)
  {
    uint64_t v18 = 1;
  }
  else
  {
    int v5 = 1;
    do
    {
      int v6 = v4 - v5;
      if (v4 < v5) {
        ++v6;
      }
      int v7 = v5 + (v6 >> 1);
      std::string::basic_string[abi:ne180100]<0>(&__p, (char *)(*(void *)(a1 + 64) + *(int *)(*(void *)(a1 + 56) + 4 * v7)));
      int v8 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
      int v9 = (char)v36;
      uint64_t v10 = __p;
      if ((v36 & 0x80u) == 0) {
        size_t v11 = v36;
      }
      else {
        size_t v11 = v35;
      }
      if ((v36 & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      if (v8 >= 0) {
        size_t size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
      }
      else {
        size_t size = a2->__r_.__value_.__l.__size_;
      }
      if (v8 >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (const std::string *)a2->__r_.__value_.__r.__words[0];
      }
      if (size >= v11) {
        size_t v15 = v11;
      }
      else {
        size_t v15 = size;
      }
      int v16 = memcmp(p_p, v14, v15);
      if (v16) {
        BOOL v17 = v16 < 0;
      }
      else {
        BOOL v17 = v11 < size;
      }
      if (v9 < 0) {
        operator delete(v10);
      }
      if (v17) {
        int v5 = v7 + 1;
      }
      else {
        int v4 = v7;
      }
    }
    while (v5 < v4);
    uint64_t v18 = v5;
  }
  std::string::operator=((std::string *)(a1 + 80), a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)(*(void *)(a1 + 64) + *(int *)(*(void *)(a1 + 56) + 4 * v18)));
  uint64_t v19 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if ((v19 & 0x80u) == 0) {
    std::string::size_type v20 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v20 = a2->__r_.__value_.__l.__size_;
  }
  size_t v21 = v36;
  int v22 = (char)v36;
  if ((v36 & 0x80u) != 0) {
    size_t v21 = v35;
  }
  if (v20 != v21)
  {
    BOOL v31 = 0;
    if (((char)v36 & 0x80000000) == 0) {
      goto LABEL_53;
    }
    goto LABEL_56;
  }
  if ((v36 & 0x80u) == 0) {
    char v23 = (unsigned __int8 *)&__p;
  }
  else {
    char v23 = (unsigned __int8 *)__p;
  }
  if ((v19 & 0x80) != 0)
  {
    BOOL v31 = memcmp(a2->__r_.__value_.__l.__data_, v23, a2->__r_.__value_.__l.__size_) == 0;
    goto LABEL_52;
  }
  if (*((unsigned char *)&a2->__r_.__value_.__s + 23))
  {
    uint64_t v24 = v19 - 1;
    do
    {
      int v26 = a2->__r_.__value_.__s.__data_[0];
      a2 = (const std::string *)((char *)a2 + 1);
      int v25 = v26;
      int v28 = *v23++;
      int v27 = v28;
      BOOL v30 = v24-- != 0;
      BOOL v31 = v25 == v27;
    }
    while (v25 == v27 && v30);
LABEL_52:
    if ((v22 & 0x80000000) == 0) {
      goto LABEL_53;
    }
LABEL_56:
    operator delete(__p);
    if (v31) {
      goto LABEL_54;
    }
LABEL_57:
    int v32 = -1;
    goto LABEL_58;
  }
  BOOL v31 = 1;
  if ((char)v36 < 0) {
    goto LABEL_56;
  }
LABEL_53:
  if (!v31) {
    goto LABEL_57;
  }
LABEL_54:
  int v32 = *(_DWORD *)(*(void *)(a1 + 56) + 4 * v18);
LABEL_58:
  *(_DWORD *)(a1 + 104) = v32;
  return v31;
}

uint64_t kaldi::quasar::ConstLexicon::GetPron@<X0>(uint64_t result@<X0>, unsigned __int8 *a2@<X1>, char **a3@<X8>)
{
  uint64_t v4 = result;
  uint64_t v6 = a2[23];
  size_t v7 = *((void *)a2 + 1);
  if ((v6 & 0x80u) == 0) {
    uint64_t v8 = a2[23];
  }
  else {
    uint64_t v8 = *((void *)a2 + 1);
  }
  uint64_t v9 = *(unsigned __int8 *)(result + 103);
  int v10 = (char)v9;
  if ((v9 & 0x80u) != 0) {
    uint64_t v9 = *(void *)(result + 88);
  }
  if (v8 == v9)
  {
    if (v10 >= 0) {
      size_t v11 = (unsigned __int8 *)(result + 80);
    }
    else {
      size_t v11 = *(unsigned __int8 **)(result + 80);
    }
    if ((v6 & 0x80) != 0)
    {
      uint64_t result = memcmp(*(const void **)a2, v11, v7);
      if (!result) {
        goto LABEL_18;
      }
    }
    else
    {
      if (!v6) {
        goto LABEL_18;
      }
      uint64_t v12 = a2;
      while (*v12 == *v11)
      {
        ++v12;
        ++v11;
        if (!--v6) {
          goto LABEL_18;
        }
      }
    }
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(*(void *)v4 + 16))(v4, a2);
LABEL_18:
  int v13 = *(_DWORD *)(v4 + 104);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  if ((v13 & 0x80000000) == 0)
  {
    int v14 = a2[23];
    if ((v14 & 0x80u) != 0) {
      int v14 = *((_DWORD *)a2 + 2);
    }
    int v15 = v13 + v14;
    uint64_t v16 = *(void *)(v4 + 64);
    int v17 = *(_DWORD *)(v16 + v15 + 1);
    if (v17 >= 1)
    {
      uint64_t v18 = 0;
      int v19 = 0;
      int v20 = v15 + 5;
      size_t v21 = a3 + 2;
      do
      {
        uint64_t v22 = v16 + v20;
        if ((unint64_t)v18 >= *v21)
        {
          uint64_t v23 = (v18 - *a3) >> 3;
          if ((unint64_t)(v23 + 1) >> 61) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v24 = *v21 - (void)*a3;
          uint64_t v25 = v24 >> 2;
          if (v24 >> 2 <= (unint64_t)(v23 + 1)) {
            uint64_t v25 = v23 + 1;
          }
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v26 = v25;
          }
          if (v26) {
            int v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a3 + 2), v26);
          }
          else {
            int v27 = 0;
          }
          int v28 = &v27[8 * v23];
          *(void *)int v28 = v22;
          uint64_t v18 = v28 + 8;
          BOOL v30 = *a3;
          char v29 = a3[1];
          if (v29 != *a3)
          {
            do
            {
              uint64_t v31 = *((void *)v29 - 1);
              v29 -= 8;
              *((void *)v28 - 1) = v31;
              v28 -= 8;
            }
            while (v29 != v30);
            char v29 = *a3;
          }
          *a3 = v28;
          a3[1] = v18;
          a3[2] = &v27[8 * v26];
          if (v29) {
            operator delete(v29);
          }
        }
        else
        {
          *(void *)uint64_t v18 = v22;
          v18 += 8;
        }
        a3[1] = v18;
        uint64_t v16 = *(void *)(v4 + 64);
        uint64_t result = strlen((const char *)(v16 + v20));
        v20 += result + 1;
        ++v19;
      }
      while (v19 != v17);
    }
  }
  return result;
}

void sub_1B1BB91C0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *kaldi::quasar::ConstLexicon::GetWord@<X0>(kaldi::quasar::ConstLexicon *this@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  if ((a2 & 0x80000000) != 0
    || (**(uint64_t (***)(kaldi::quasar::ConstLexicon *))this)(this) <= (unint64_t)a2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Invalid word idx ", 17);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8);
  }
  uint64_t v6 = (char *)(*((void *)this + 8) + *(int *)(*((void *)this + 7) + 4 * a2));
  return std::string::basic_string[abi:ne180100]<0>(a3, v6);
}

void kaldi::quasar::ExtractLexiconForLmeSlot(int a1, int a2, int a3, int a4, kaldi::quasar::Lexicon *this)
{
}

void sub_1B1BB9C24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
}

BOOL kaldi::quasar::Lexicon::IsBasePhoneSetMode(kaldi::quasar::Lexicon *this)
{
  return !*((_DWORD *)this + 12) && *((unsigned char *)this + 52) == 0;
}

void kaldi::quasar::Lexicon::~Lexicon(kaldi::quasar::Lexicon *this)
{
  kaldi::quasar::Lexicon::~Lexicon(this);
  JUMPOUT(0x1B3EA8670);
}

{
  uint64_t *v2;
  uint64_t *v3;
  void **v4;

  *(void *)this = &unk_1F0A516C0;
  uint64_t v2 = (uint64_t *)*((void *)this + 7);
  if (v2)
  {
    uint64_t v3 = kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::~PrefixTree(v2);
    MEMORY[0x1B3EA8670](v3, 0x20C4093837F09);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)this + 312);
  uint64_t v4 = (void **)((char *)this + 280);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::__hash_table<std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>>>::~__hash_table((uint64_t)this + 240);
  std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::~__hash_table((uint64_t)this + 200);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 160);
  std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::~__hash_table((uint64_t)this + 120);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 80);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 8);
}

uint64_t kaldi::quasar::ConstLexicon::GetNumberOfWords(kaldi::quasar::ConstLexicon *this)
{
  return *((int *)this + 12);
}

uint64_t kaldi::quasar::ConstLexicon::IsBasePhoneSetMode(kaldi::quasar::ConstLexicon *this)
{
  return *((unsigned __int8 *)this + 72);
}

void kaldi::quasar::ConstLexicon::~ConstLexicon(void **this)
{
  kaldi::quasar::ConstLexicon::~ConstLexicon(this);
  JUMPOUT(0x1B3EA8670);
}

{
  *this = &unk_1F0A50030;
  if (*((char *)this + 103) < 0) {
    operator delete(this[10]);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(this + 1));
}

uint64_t kaldi::quasar::ConstLexicon::GetBasePhoneSet(kaldi::quasar::ConstLexicon *this)
{
  return (uint64_t)this + 8;
}

uint64_t std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::__deallocate_node(a1, *(void ***)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::__deallocate_node(int a1, void **__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      uint64_t v3 = (void **)*v2;
      if (*((char *)v2 + 47) < 0) {
        operator delete(v2[3]);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>>>::__deallocate_node(a1, *(void ***)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>>>::__deallocate_node(uint64_t a1, void **a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = *v2;
      std::__tree<int>::destroy((uint64_t)(v2 + 3), v2[4]);
      operator delete(v2);
      uint64_t v2 = (void **)v3;
    }
    while (v3);
  }
}

uint64_t *kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::~PrefixTree(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    uint64_t v3 = kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node::~Node(v2);
    MEMORY[0x1B3EA8670](v3, 0x10A0C40A79550FFLL);
  }
  return a1;
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::swap(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  int v5 = *(void **)a2;
  *(void *)a2 = 0;
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = v5;
  if (v6) {
    operator delete(v6);
  }
  size_t v7 = *(void **)a2;
  *(void *)a2 = v4;
  if (v7) {
    operator delete(v7);
  }
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v9;
  uint64_t v11 = *(void *)(a1 + 24);
  uint64_t v12 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = v10;
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = v12;
  *(void *)(a2 + 16) = v8;
  *(void *)(a2 + ++*(_DWORD *)(result + 24) = v11;
  int v13 = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = v13;
  if (*(void *)(a1 + 24))
  {
    unint64_t v14 = *(void *)(a1 + 8);
    unint64_t v15 = *(void *)(*(void *)(a1 + 16) + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v15 >= v14) {
        v15 %= v14;
      }
    }
    else
    {
      v15 &= v14 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v15) = a1 + 16;
  }
  if (v11)
  {
    unint64_t v16 = *(void *)(a2 + 8);
    unint64_t v17 = *(void *)(*(void *)(a2 + 16) + 8);
    if ((v16 & (v16 - 1)) != 0)
    {
      if (v17 >= v16) {
        v17 %= v16;
      }
    }
    else
    {
      v17 &= v16 - 1;
    }
    *(void *)(*(void *)a2 + 8 * v17) = a2 + 16;
  }
}

void std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::__deallocate_node(a1, *(void ***)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + ++*(_DWORD *)(result + 24) = 0;
  }
}

void std::__hash_table<std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>>>::__deallocate_node(a1, *(void ***)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + ++*(_DWORD *)(result + 24) = 0;
  }
}

void std::vector<std::string>::__append(std::vector<std::string> *this, std::vector<std::string>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  int v5 = value;
  size_t v7 = p_end_cap[-1].__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)v7) >> 3) >= __n)
  {
    if (__n)
    {
      size_t v13 = 24 * ((24 * __n - 24) / 0x18) + 24;
      bzero(p_end_cap[-1].__value_, v13);
      size_t v7 = (std::string *)((char *)v7 + v13);
    }
    this->__end_ = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)this->__begin_) >> 3);
    unint64_t v9 = v8 + __n;
    if (v8 + __n > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)this->__begin_) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)p_end_cap;
    if (v11) {
      uint64_t v12 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)p_end_cap, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    __v.__first_ = v12;
    __v.__begin_ = v12 + v8;
    __v.__end_cap_.__value_ = &v12[v11];
    size_t v14 = 24 * ((24 * __n - 24) / 0x18) + 24;
    bzero(__v.__begin_, v14);
    __v.__end_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__begin_ + v14);
    std::vector<std::string>::__swap_out_circular_buffer(this, &__v);
    std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
  }
}

void sub_1B1BBA360(_Unwind_Exception *a1, std::__split_buffer<std::wstring> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t *std::__tree<std::vector<std::string>>::__emplace_unique_key_args<std::vector<std::string>,std::vector<std::string> const&>(uint64_t **a1, const void ***a2, long long **a3)
{
  int v5 = (uint64_t **)std::__tree<std::vector<std::string>>::__find_equal<std::vector<std::string>>((uint64_t)a1, &v8, a2);
  uint64_t result = *v5;
  if (!*v5)
  {
    std::__tree<std::vector<std::string>>::__construct_node<std::vector<std::string> const&>((uint64_t)a1, a3, (uint64_t)&v7);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

uint64_t *std::__tree<std::vector<std::string>>::__find_equal<std::vector<std::string>>(uint64_t a1, void *a2, const void ***a3)
{
  int v5 = (uint64_t *)(a1 + 8);
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        size_t v7 = v4;
        if (!std::__lexicographical_compare[abi:ne180100]<std::__less<void,void> &,std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(*a3, a3[1], (const void **)v4[4], (const void **)v4[5], (uint64_t)&v9))break; {
        uint64_t v4 = (uint64_t *)*v7;
        }
        int v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (!std::__lexicographical_compare[abi:ne180100]<std::__less<void,void> &,std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>((const void **)v7[4], (const void **)v7[5], *a3, a3[1], (uint64_t)&v10))break; {
      int v5 = v7 + 1;
      }
      uint64_t v4 = (uint64_t *)v7[1];
    }
    while (v4);
  }
  else
  {
    size_t v7 = (uint64_t *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

std::string *std::__tree<std::vector<std::string>>::__construct_node<std::vector<std::string> const&>@<X0>(uint64_t a1@<X0>, long long **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x38uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  *((void *)v6 + 5) = 0;
  *((void *)v6 + 6) = 0;
  *((void *)v6 + 4) = 0;
  uint64_t result = std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(v6 + 32), *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1B1BBA50C(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::vector<std::string>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t std::__lexicographical_compare[abi:ne180100]<std::__less<void,void> &,std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(const void **a1, const void **a2, const void **a3, const void **a4, uint64_t a5)
{
  if (a3 == a4) {
    return 0;
  }
  size_t v7 = a3;
  while (a1 != a2 && !std::less<std::string>::operator()[abi:ne180100](a5, a1, v7))
  {
    BOOL v10 = std::less<std::string>::operator()[abi:ne180100](a5, v7, a1);
    uint64_t result = 0;
    if (!v10)
    {
      a1 += 3;
      v7 += 3;
      if (v7 != a4) {
        continue;
      }
    }
    return result;
  }
  return 1;
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::vector<std::string>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = __p + 4;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  if (__p) {
    operator delete(__p);
  }
}

void *std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    BOOL v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      unint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          unint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  size_t v13 = (void *)(a1 + 16);
  unint64_t v11 = operator new(0x30uLL);
  *unint64_t v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  v11[4] = 0;
  v11[5] = 0;
  void v11[3] = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  size_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *unint64_t v11 = *v21;
LABEL_38:
    *size_t v21 = v11;
    goto LABEL_39;
  }
  *unint64_t v11 = *v13;
  *size_t v13 = v11;
  *(void *)(v20 + 8 * v4) = v13;
  if (*v11)
  {
    unint64_t v22 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    size_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_1B1BBA850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::string>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::string>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 47) < 0) {
      operator delete(__p[3]);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t std::__tree<std::string>::__erase_unique<std::string>(uint64_t **a1, const void **a2)
{
  uint64_t v3 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3) {
    return 0;
  }
  std::__tree<std::string>::erase(a1, v3);
  return 1;
}

uint64_t *std::__tree<std::string>::erase(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = std::__tree<std::string>::__remove_node_pointer(a1, (uint64_t *)a2);
  if (*(char *)(a2 + 55) < 0) {
    operator delete(*(void **)(a2 + 32));
  }
  operator delete((void *)a2);
  return v3;
}

uint64_t *std::__tree<std::string>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      uint64_t v3 = v2;
      uint64_t v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    unint64_t v4 = a2;
    do
    {
      uint64_t v3 = (uint64_t *)v4[2];
      BOOL v5 = *v3 == (void)v4;
      unint64_t v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2) {
    *a1 = v3;
  }
  uint64_t v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v6, a2);
  return v3;
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2;
  if (*a2)
  {
    unint64_t v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      uint64_t v3 = a2;
      goto LABEL_7;
    }
    do
    {
      uint64_t v3 = v4;
      unint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  int v5 = 1;
LABEL_8:
  uint64_t v6 = (uint64_t **)v3[2];
  unint64_t v7 = *v6;
  if (*v6 == v3)
  {
    uint64_t *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      unint64_t v7 = 0;
      uint64_t result = (uint64_t *)v2;
    }
    else
    {
      unint64_t v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    *uint64_t v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + ++*(_DWORD *)(result + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      uint64_t result = v3;
    }
  }
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + ++*(_DWORD *)(result + 24) = 1;
    return result;
  }
  while (1)
  {
    uint64_t v12 = v7[2];
    if (*(uint64_t **)v12 == v7) {
      break;
    }
    if (!*((unsigned char *)v7 + 24))
    {
      *((unsigned char *)v7 + ++*(_DWORD *)(result + 24) = 1;
      *(unsigned char *)(v12 + ++*(_DWORD *)(result + 24) = 0;
      size_t v13 = *(uint64_t **)(v12 + 8);
      uint64_t v14 = *v13;
      *(void *)(v12 + 8) = *v13;
      if (v14) {
        *(void *)(v14 + 16) = v12;
      }
      _OWORD v13[2] = *(void *)(v12 + 16);
      *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v13;
      *size_t v13 = v12;
      *(void *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7) {
        uint64_t result = v7;
      }
      unint64_t v7 = *(uint64_t **)(*v7 + 8);
    }
    float v15 = (void *)*v7;
    if (*v7 && !*((unsigned char *)v15 + 24))
    {
      BOOL v16 = (uint64_t *)v7[1];
      if (!v16) {
        goto LABEL_56;
      }
LABEL_55:
      if (*((unsigned char *)v16 + 24))
      {
LABEL_56:
        *((unsigned char *)v15 + ++*(_DWORD *)(result + 24) = 1;
        *((unsigned char *)v7 + ++*(_DWORD *)(result + 24) = 0;
        uint64_t v22 = v15[1];
        uint64_t *v7 = v22;
        if (v22) {
          *(void *)(v22 + 16) = v7;
        }
        v15[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
        v15[1] = v7;
        _OWORD v7[2] = (uint64_t)v15;
        BOOL v16 = v7;
      }
      else
      {
        float v15 = v7;
      }
      uint64_t v23 = v15[2];
      *((unsigned char *)v15 + ++*(_DWORD *)(result + 24) = *(unsigned char *)(v23 + 24);
      *(unsigned char *)(v23 + ++*(_DWORD *)(result + 24) = 1;
      *((unsigned char *)v16 + ++*(_DWORD *)(result + 24) = 1;
      uint64_t v24 = *(uint64_t **)(v23 + 8);
      uint64_t v25 = *v24;
      *(void *)(v23 + 8) = *v24;
      if (v25) {
        *(void *)(v25 + 16) = v23;
      }
      v24[2] = *(void *)(v23 + 16);
      *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
      *uint64_t v24 = v23;
      goto LABEL_72;
    }
    BOOL v16 = (uint64_t *)v7[1];
    if (v16 && !*((unsigned char *)v16 + 24)) {
      goto LABEL_55;
    }
    *((unsigned char *)v7 + ++*(_DWORD *)(result + 24) = 0;
    unint64_t v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      unint64_t v17 = result;
LABEL_53:
      *((unsigned char *)v17 + ++*(_DWORD *)(result + 24) = 1;
      return result;
    }
    if (!*((unsigned char *)v17 + 24)) {
      goto LABEL_53;
    }
LABEL_49:
    unint64_t v7 = *(uint64_t **)(v17[2] + 8 * (*(void *)v17[2] == (void)v17));
  }
  if (!*((unsigned char *)v7 + 24))
  {
    *((unsigned char *)v7 + ++*(_DWORD *)(result + 24) = 1;
    *(unsigned char *)(v12 + ++*(_DWORD *)(result + 24) = 0;
    uint64_t v18 = v7[1];
    *(void *)uint64_t v12 = v18;
    if (v18) {
      *(void *)(v18 + 16) = v12;
    }
    _OWORD v7[2] = *(void *)(v12 + 16);
    *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(void *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12) {
      uint64_t result = v7;
    }
    unint64_t v7 = *(uint64_t **)v12;
  }
  size_t v19 = (void *)*v7;
  if (*v7 && !*((unsigned char *)v19 + 24)) {
    goto LABEL_68;
  }
  uint64_t v20 = (uint64_t *)v7[1];
  if (!v20 || *((unsigned char *)v20 + 24))
  {
    *((unsigned char *)v7 + ++*(_DWORD *)(result + 24) = 0;
    unint64_t v17 = (uint64_t *)v7[2];
    if (*((unsigned char *)v17 + 24)) {
      BOOL v21 = v17 == result;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }
  if (v19 && !*((unsigned char *)v19 + 24))
  {
LABEL_68:
    uint64_t v20 = v7;
  }
  else
  {
    *((unsigned char *)v20 + ++*(_DWORD *)(result + 24) = 1;
    *((unsigned char *)v7 + ++*(_DWORD *)(result + 24) = 0;
    uint64_t v26 = *v20;
    v7[1] = *v20;
    if (v26) {
      *(void *)(v26 + 16) = v7;
    }
    v20[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v20;
    *uint64_t v20 = (uint64_t)v7;
    _OWORD v7[2] = (uint64_t)v20;
    size_t v19 = v7;
  }
  uint64_t v23 = v20[2];
  *((unsigned char *)v20 + ++*(_DWORD *)(result + 24) = *(unsigned char *)(v23 + 24);
  *(unsigned char *)(v23 + ++*(_DWORD *)(result + 24) = 1;
  *((unsigned char *)v19 + ++*(_DWORD *)(result + 24) = 1;
  uint64_t v24 = *(uint64_t **)v23;
  uint64_t v27 = *(void *)(*(void *)v23 + 8);
  *(void *)uint64_t v23 = v27;
  if (v27) {
    *(void *)(v27 + 16) = v23;
  }
  v24[2] = *(void *)(v23 + 16);
  *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(void *)(v23 + 16) = v24;
  return result;
}

void *std::__hash_table<std::__hash_value_type<int,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::__unordered_map_hasher<int,std::__hash_value_type<int,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v11 = operator new(0x20uLL);
  *uint64_t v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  void v11[3] = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  uint64_t v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *uint64_t v11 = *v20;
LABEL_38:
    *uint64_t v20 = v11;
    goto LABEL_39;
  }
  *uint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    uint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_1B1BBAF60(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  float v13 = (void *)(a1 + 16);
  uint64_t v11 = operator new(0x30uLL);
  *uint64_t v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  v11[5] = 0;
  v11[4] = 0;
  void v11[3] = v11 + 4;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  unint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *uint64_t v11 = *v21;
LABEL_38:
    *unint64_t v21 = v11;
    goto LABEL_39;
  }
  *uint64_t v11 = *v13;
  *float v13 = v11;
  *(void *)(v20 + 8 * v4) = v13;
  if (*v11)
  {
    unint64_t v22 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    unint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_1B1BBB1B4(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    std::__tree<int>::destroy((uint64_t)(a2 + 3), a2[4]);
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

uint64_t *std::__tree<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>::__emplace_unique_key_args<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node * const&>(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a1 + 1;
  int v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        int v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      int v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unint64_t v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = (uint64_t *)operator new(0x28uLL);
    v10[4] = *a3;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

uint64_t std::__tree<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>::__erase_unique<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  unint64_t v4 = (uint64_t *)(a1 + 8);
  do
  {
    unint64_t v5 = v2[4];
    BOOL v6 = v5 >= v3;
    if (v5 >= v3) {
      unint64_t v7 = v2;
    }
    else {
      unint64_t v7 = v2 + 1;
    }
    if (v6) {
      unint64_t v4 = v2;
    }
    uint64_t v2 = (void *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t *)(a1 + 8) || v3 < v4[4]) {
    return 0;
  }
  std::__tree<std::string>::__remove_node_pointer((uint64_t **)a1, v4);
  operator delete(v4);
  return 1;
}

uint64_t *std::__hash_table<std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>>>::__erase_unique<int>(void *a1, int *a2)
{
  uint64_t result = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>>>::erase(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::remove(a1, a2, (uint64_t)&v5);
  unint64_t v3 = v5;
  unint64_t v5 = 0;
  if (v3) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::set<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>,void *>>>::operator()[abi:ne180100]((uint64_t)&v6, v3);
  }
  return v2;
}

uint64_t *std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::__erase_unique<int>(void *a1, int *a2)
{
  uint64_t result = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::erase(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::remove(a1, a2, (uint64_t)&__p);
  unint64_t v3 = (void **)__p;
  std::string __p = 0;
  if (v3) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::string>,void *>>>::operator()[abi:ne180100]((uint64_t)&v6, v3);
  }
  return v2;
}

void std::deque<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node const*,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node const*>>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node const*,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node const*>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node const*,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node const*>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    unint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      size_t v35 = &v34[8 * (v33 >> 2)];
      unint64_t v37 = &v34[8 * v36];
      unint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        unint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)unint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    size_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      unint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    std::wstring::size_type v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    unint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      size_t v35 = &v34[8 * (v46 >> 2)];
      unint64_t v37 = &v34[8 * v47];
      unint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        long long v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)long long v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      std::vector<std::string>::pointer v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  long long v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  std::string::size_type v53 = operator new(0x1000uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  char v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1B1BBB7C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,kaldi::quasar::Lexicon::HasMoreProns &,std::pair<int,int> *,false>(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10 = (int *)result;
LABEL_2:
  uint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    uint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = ((char *)a2 - (char *)v11) >> 3;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t v22 = *(a2 - 1);
          uint64_t v23 = *(void *)v11;
          if (SHIDWORD(v22) > (int)HIDWORD(*(void *)v11))
          {
            *uint64_t v11 = v22;
            *((_DWORD *)a2 - 2) = v23;
            int v24 = v11[1];
            v11[1] = *((_DWORD *)a2 - 1);
            *((_DWORD *)a2 - 1) = v24;
          }
          break;
        case 3uLL:
          uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::Lexicon::HasMoreProns &,std::pair<int,int> *>(v11, v11 + 2, a2 - 1);
          break;
        case 4uLL:
          uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::Lexicon::HasMoreProns &,std::pair<int,int> *>(v11, v11 + 2, (uint64_t)(v11 + 4), (uint64_t)(a2 - 1));
          break;
        case 5uLL:
          uint64_t result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::Lexicon::HasMoreProns &,std::pair<int,int> *>(v11, v11 + 2, (uint64_t)(v11 + 4), (uint64_t)(v11 + 6), (uint64_t)(a2 - 1));
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 191) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != (int *)a2)
      {
        return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::Lexicon::HasMoreProns &,std::pair<int,int> *,std::pair<int,int> *>((uint64_t)v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    uint64_t v17 = &v11[2 * (v15 >> 1)];
    if ((unint64_t)v14 >= 0x401)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::Lexicon::HasMoreProns &,std::pair<int,int> *>(v11, &v11[2 * (v15 >> 1)], a2 - 1);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::Lexicon::HasMoreProns &,std::pair<int,int> *>(v11 + 2, v17 - 2, a2 - 2);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::Lexicon::HasMoreProns &,std::pair<int,int> *>(v11 + 4, &v11[2 * v16 + 2], a2 - 3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::Lexicon::HasMoreProns &,std::pair<int,int> *>(v17 - 2, v17, (uint64_t *)&v11[2 * v16 + 2]);
      uint64_t v18 = *(void *)v11;
      *(void *)uint64_t v11 = *(void *)v17;
      *(void *)uint64_t v17 = v18;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::Lexicon::HasMoreProns &,std::pair<int,int> *>(&v11[2 * (v15 >> 1)], v11, a2 - 1);
      if (a5) {
        goto LABEL_14;
      }
    }
    if (*(v11 - 1) <= v11[1])
    {
      uint64_t result = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,int> *,kaldi::quasar::Lexicon::HasMoreProns &>((uint64_t *)v11, a2);
      uint64_t v11 = (int *)result;
      goto LABEL_19;
    }
LABEL_14:
    HasMore = (uint64_t *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,int> *,kaldi::quasar::Lexicon::HasMoreProns &>((uint64_t *)v11, a2);
    if ((v20 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::Lexicon::HasMoreProns &,std::pair<int,int> *>((uint64_t *)v11, HasMore);
    uint64_t v11 = (int *)(HasMore + 1);
    uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::Lexicon::HasMoreProns &,std::pair<int,int> *>(HasMore + 1, a2);
    if (result)
    {
      a4 = -v13;
      a2 = HasMore;
      if (v21) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v21)
    {
LABEL_17:
      uint64_t result = std::__introsort<std::_ClassicAlgPolicy,kaldi::quasar::Lexicon::HasMoreProns &,std::pair<int,int> *,false>(v10, HasMore, a3, -v13, a5 & 1);
      uint64_t v11 = (int *)(HasMore + 1);
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::Lexicon::HasMoreProns &,std::pair<int,int> *>((uint64_t *)v11, a2);
  }
  else
  {
    return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::Lexicon::HasMoreProns &,std::pair<int,int> *>(v11, a2);
  }
}

uint64_t *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::Lexicon::HasMoreProns &,std::pair<int,int> *>(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    unint64_t v2 = result + 1;
    if (result + 1 != a2)
    {
      uint64_t v3 = 0;
      unint64_t v4 = result;
      do
      {
        uint64_t v6 = *v4;
        uint64_t v5 = v4[1];
        unint64_t v4 = v2;
        if (SHIDWORD(v5) > SHIDWORD(v6))
        {
          uint64_t v7 = v3;
          while (1)
          {
            unint64_t v8 = (char *)result + v7;
            int v9 = *(_DWORD *)((char *)result + v7 + 4);
            *((_DWORD *)v8 + 2) = v6;
            *((_DWORD *)v8 + 3) = v9;
            if (!v7) {
              break;
            }
            uint64_t v6 = *((void *)v8 - 1);
            v7 -= 8;
            if (SHIDWORD(v5) <= SHIDWORD(v6))
            {
              uint64_t v10 = (uint64_t *)((char *)result + v7 + 8);
              goto LABEL_10;
            }
          }
          uint64_t v10 = result;
LABEL_10:
          *uint64_t v10 = v5;
        }
        ++v2;
        v3 += 8;
      }
      while (v4 + 1 != a2);
    }
  }
  return result;
}

void *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::Lexicon::HasMoreProns &,std::pair<int,int> *>(void *result, void *a2)
{
  if (result != a2)
  {
    unint64_t v2 = result + 1;
    if (result + 1 != a2)
    {
      uint64_t v3 = (char *)result + 12;
      do
      {
        uint64_t v5 = *result;
        uint64_t v4 = result[1];
        uint64_t result = v2;
        if (SHIDWORD(v4) > SHIDWORD(v5))
        {
          uint64_t v6 = v3;
          do
          {
            uint64_t v7 = v6;
            *(v6 - 1) = v5;
            int v8 = *(v6 - 2);
            v6 -= 2;
            _DWORD *v7 = v8;
            uint64_t v5 = *(void *)(v7 - 5);
          }
          while (SHIDWORD(v4) > SHIDWORD(v5));
          *(void *)(v6 - 1) = v4;
        }
        ++v2;
        v3 += 8;
      }
      while (result + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::Lexicon::HasMoreProns &,std::pair<int,int> *>(int *a1, int *a2, uint64_t *a3)
{
  int v3 = *a2;
  int v4 = a2[1];
  unint64_t v5 = *a3;
  unint64_t v6 = HIDWORD(*a3);
  if (v4 > a1[1])
  {
    int v7 = *a1;
    if ((int)v6 > v4)
    {
      *a1 = v5;
      int v8 = a1 + 1;
      *(_DWORD *)a3 = v7;
      int v9 = (int *)a3 + 1;
      uint64_t v10 = 1;
LABEL_9:
      uint64_t v12 = v9;
      goto LABEL_10;
    }
    *a1 = v3;
    *a2 = v7;
    int v14 = a1[1];
    a1[1] = a2[1];
    a2[1] = v14;
    uint64_t v15 = *(void *)a2;
    if ((int)HIDWORD(*a3) > (int)HIDWORD(*(void *)a2))
    {
      *a2 = *a3;
      *(_DWORD *)a3 = v15;
      int v9 = (int *)a3 + 1;
      uint64_t v10 = 2;
      int v8 = a2 + 1;
      goto LABEL_9;
    }
    return 1;
  }
  if ((int)v6 <= v4) {
    return 0;
  }
  *a2 = v5;
  *(_DWORD *)a3 = v3;
  uint64_t v12 = a2 + 1;
  int v11 = a2[1];
  a2[1] = *((_DWORD *)a3 + 1);
  *((_DWORD *)a3 + 1) = v11;
  uint64_t v13 = *(void *)a1;
  if ((int)HIDWORD(*(void *)a2) <= (int)HIDWORD(*(void *)a1)) {
    return 1;
  }
  *a1 = *(void *)a2;
  int v8 = a1 + 1;
  *a2 = v13;
  uint64_t v10 = 2;
LABEL_10:
  int v16 = *v8;
  int *v8 = *v12;
  *uint64_t v12 = v16;
  return v10;
}

unint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,int> *,kaldi::quasar::Lexicon::HasMoreProns &>(uint64_t *a1, _DWORD *a2)
{
  unint64_t v2 = *a1;
  unint64_t v3 = HIDWORD(*a1);
  if ((int)v3 <= *(a2 - 1))
  {
    unint64_t v7 = (unint64_t)(a1 + 1);
    do
    {
      unint64_t v5 = v7;
      if (v7 >= (unint64_t)a2) {
        break;
      }
      int v8 = *(_DWORD *)(v7 + 4);
      v7 += 8;
    }
    while ((int)v3 <= v8);
  }
  else
  {
    int v4 = a1;
    do
    {
      unint64_t v5 = (unint64_t)(v4 + 1);
      int v6 = *((_DWORD *)v4++ + 3);
    }
    while ((int)v3 <= v6);
  }
  if (v5 >= (unint64_t)a2)
  {
    int v9 = a2;
  }
  else
  {
    do
    {
      int v9 = a2 - 2;
      int v10 = *(a2 - 1);
      a2 -= 2;
    }
    while ((int)v3 > v10);
  }
  if (v5 < (unint64_t)v9)
  {
    int v11 = *(_DWORD *)v5;
    int v12 = *v9;
    do
    {
      *(_DWORD *)unint64_t v5 = v12;
      *int v9 = v11;
      int v13 = *(_DWORD *)(v5 + 4);
      *(_DWORD *)(v5 + 4) = v9[1];
      v9[1] = v13;
      do
      {
        uint64_t v14 = *(void *)(v5 + 8);
        v5 += 8;
        int v11 = v14;
      }
      while ((int)v3 <= SHIDWORD(v14));
      do
      {
        uint64_t v15 = *((void *)v9 - 1);
        v9 -= 2;
        int v12 = v15;
      }
      while ((int)v3 > SHIDWORD(v15));
    }
    while (v5 < (unint64_t)v9);
  }
  if ((uint64_t *)(v5 - 8) != a1)
  {
    *(_DWORD *)a1 = *(_DWORD *)(v5 - 8);
    *((_DWORD *)a1 + 1) = *(_DWORD *)(v5 - 4);
  }
  *(_DWORD *)(v5 - 8) = v2;
  *(_DWORD *)(v5 - 4) = v3;
  return v5;
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,int> *,kaldi::quasar::Lexicon::HasMoreProns &>(uint64_t *a1, _DWORD *a2)
{
  uint64_t v2 = 0;
  unint64_t v3 = *a1;
  unint64_t v4 = HIDWORD(*a1);
  do
    uint64_t v5 = a1[++v2];
  while (SHIDWORD(v5) > (int)v4);
  unint64_t v6 = (unint64_t)&a1[v2];
  if (v2 == 1)
  {
    while (v6 < (unint64_t)a2)
    {
      unint64_t v7 = a2 - 2;
      int v9 = *(a2 - 1);
      a2 -= 2;
      if (v9 > (int)v4) {
        goto LABEL_9;
      }
    }
    unint64_t v7 = a2;
  }
  else
  {
    do
    {
      unint64_t v7 = a2 - 2;
      int v8 = *(a2 - 1);
      a2 -= 2;
    }
    while (v8 <= (int)v4);
  }
LABEL_9:
  if (v6 >= (unint64_t)v7)
  {
    unint64_t v11 = v6;
  }
  else
  {
    int v10 = *v7;
    unint64_t v11 = v6;
    int v12 = v7;
    do
    {
      *(_DWORD *)unint64_t v11 = v10;
      *int v12 = v5;
      int v13 = *(_DWORD *)(v11 + 4);
      *(_DWORD *)(v11 + 4) = v12[1];
      v12[1] = v13;
      do
      {
        uint64_t v14 = *(void *)(v11 + 8);
        v11 += 8;
        LODWORD(v5) = v14;
      }
      while (SHIDWORD(v14) > (int)v4);
      do
      {
        uint64_t v15 = *((void *)v12 - 1);
        v12 -= 2;
        int v10 = v15;
      }
      while (SHIDWORD(v15) <= (int)v4);
    }
    while (v11 < (unint64_t)v12);
  }
  if ((uint64_t *)(v11 - 8) != a1)
  {
    *(_DWORD *)a1 = *(_DWORD *)(v11 - 8);
    *((_DWORD *)a1 + 1) = *(_DWORD *)(v11 - 4);
  }
  *(_DWORD *)(v11 - 8) = v3;
  *(_DWORD *)(v11 - 4) = v4;
  return v11 - 8;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::Lexicon::HasMoreProns &,std::pair<int,int> *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(a2 - 1);
      uint64_t v7 = *a1;
      if (SHIDWORD(v6) > (int)HIDWORD(*a1))
      {
        *(_DWORD *)a1 = v6;
        *((_DWORD *)a2 - 2) = v7;
        int v8 = *((_DWORD *)a1 + 1);
        *((_DWORD *)a1 + 1) = *((_DWORD *)a2 - 1);
        *((_DWORD *)a2 - 1) = v8;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::Lexicon::HasMoreProns &,std::pair<int,int> *>((int *)a1, (int *)a1 + 2, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::Lexicon::HasMoreProns &,std::pair<int,int> *>((int *)a1, (int *)a1 + 2, (uint64_t)(a1 + 2), (uint64_t)(a2 - 1));
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::Lexicon::HasMoreProns &,std::pair<int,int> *>((int *)a1, (int *)a1 + 2, (uint64_t)(a1 + 2), (uint64_t)(a1 + 3), (uint64_t)(a2 - 1));
      return 1;
    default:
      int v9 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::Lexicon::HasMoreProns &,std::pair<int,int> *>((int *)a1, (int *)a1 + 2, a1 + 2);
      int v10 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    uint64_t v13 = *v10;
    uint64_t v14 = *v9;
    unint64_t v15 = HIDWORD(*v10);
    if ((int)v15 > (int)HIDWORD(*v9))
    {
      uint64_t v16 = v11;
      while (1)
      {
        uint64_t v17 = (uint64_t)a1 + v16;
        int v18 = *(_DWORD *)((char *)a1 + v16 + 20);
        *(_DWORD *)(v17 + ++*(_DWORD *)(result + 24) = v14;
        *(_DWORD *)(v17 + 28) = v18;
        if (v16 == -16) {
          break;
        }
        uint64_t v14 = *(void *)(v17 + 8);
        v16 -= 8;
        if ((int)v15 <= SHIDWORD(v14))
        {
          size_t v19 = (_DWORD *)((char *)a1 + v16 + 24);
          goto LABEL_12;
        }
      }
      size_t v19 = a1;
LABEL_12:
      *size_t v19 = v13;
      v19[1] = v15;
      if (++v12 == 8) {
        return v10 + 1 == a2;
      }
    }
    int v9 = v10;
    v11 += 8;
    if (++v10 == a2) {
      return 1;
    }
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::Lexicon::HasMoreProns &,std::pair<int,int> *>(int *a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::Lexicon::HasMoreProns &,std::pair<int,int> *>(a1, a2, (uint64_t *)a3);
  uint64_t v9 = *(void *)a3;
  if ((int)HIDWORD(*(void *)a4) > (int)HIDWORD(*(void *)a3))
  {
    *(_DWORD *)a3 = *(void *)a4;
    *(_DWORD *)a4 = v9;
    int v10 = *(_DWORD *)(a3 + 4);
    *(_DWORD *)(a3 + 4) = *(_DWORD *)(a4 + 4);
    *(_DWORD *)(a4 + 4) = v10;
    uint64_t v11 = *(void *)a2;
    if ((int)HIDWORD(*(void *)a3) > (int)HIDWORD(*(void *)a2))
    {
      *a2 = *(void *)a3;
      *(_DWORD *)a3 = v11;
      int v12 = a2[1];
      a2[1] = *(_DWORD *)(a3 + 4);
      *(_DWORD *)(a3 + 4) = v12;
      uint64_t v13 = *(void *)a1;
      if ((int)HIDWORD(*(void *)a2) > (int)HIDWORD(*(void *)a1))
      {
        *a1 = *(void *)a2;
        *a2 = v13;
        int v14 = a1[1];
        a1[1] = a2[1];
        a2[1] = v14;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::Lexicon::HasMoreProns &,std::pair<int,int> *>(int *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::Lexicon::HasMoreProns &,std::pair<int,int> *>(a1, a2, a3, a4);
  uint64_t v11 = *(void *)a4;
  if ((int)HIDWORD(*(void *)a5) > (int)HIDWORD(*(void *)a4))
  {
    *(_DWORD *)a4 = *(void *)a5;
    *(_DWORD *)a5 = v11;
    int v12 = *(_DWORD *)(a4 + 4);
    *(_DWORD *)(a4 + 4) = *(_DWORD *)(a5 + 4);
    *(_DWORD *)(a5 + 4) = v12;
    uint64_t v13 = *(void *)a3;
    if ((int)HIDWORD(*(void *)a4) > (int)HIDWORD(*(void *)a3))
    {
      *(_DWORD *)a3 = *(void *)a4;
      *(_DWORD *)a4 = v13;
      int v14 = *(_DWORD *)(a3 + 4);
      *(_DWORD *)(a3 + 4) = *(_DWORD *)(a4 + 4);
      *(_DWORD *)(a4 + 4) = v14;
      uint64_t v15 = *(void *)a2;
      if ((int)HIDWORD(*(void *)a3) > (int)HIDWORD(*(void *)a2))
      {
        *a2 = *(void *)a3;
        *(_DWORD *)a3 = v15;
        int v16 = a2[1];
        a2[1] = *(_DWORD *)(a3 + 4);
        *(_DWORD *)(a3 + 4) = v16;
        uint64_t v17 = *(void *)a1;
        if ((int)HIDWORD(*(void *)a2) > (int)HIDWORD(*(void *)a1))
        {
          *a1 = *(void *)a2;
          *a2 = v17;
          int v18 = a1[1];
          a1[1] = a2[1];
          a2[1] = v18;
        }
      }
    }
  }
  return result;
}

uint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::Lexicon::HasMoreProns &,std::pair<int,int> *,std::pair<int,int> *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v8 = (uint64_t)a2 - a1;
    uint64_t v9 = ((uint64_t)a2 - a1) >> 3;
    if ((uint64_t)a2 - a1 >= 9)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      int v12 = (unint64_t *)(a1 + 8 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::Lexicon::HasMoreProns &,std::pair<int,int> *>(a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = a2;
    if (a2 != a3)
    {
      int v14 = a2;
      do
      {
        uint64_t v15 = *v14;
        if ((int)HIDWORD(*v14) > (int)HIDWORD(*(void *)a1))
        {
          *(_DWORD *)int v14 = *(void *)a1;
          *(_DWORD *)a1 = v15;
          int v16 = *((_DWORD *)v14 + 1);
          *((_DWORD *)v14 + 1) = *(_DWORD *)(a1 + 4);
          *(_DWORD *)(a1 + 4) = v16;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::Lexicon::HasMoreProns &,std::pair<int,int> *>(a1, a4, v9, (unint64_t *)a1);
        }
        ++v14;
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 9)
    {
      uint64_t v17 = (unint64_t)v8 >> 3;
      int v18 = a2 - 1;
      do
      {
        int v20 = *(_DWORD *)a1;
        int v19 = *(_DWORD *)(a1 + 4);
        BOOL v21 = (uint64_t *)std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::Lexicon::HasMoreProns &,std::pair<int,int> *>((_DWORD *)a1, a4, v17);
        if (v18 == v21)
        {
          *(_DWORD *)BOOL v21 = v20;
          *((_DWORD *)v21 + 1) = v19;
        }
        else
        {
          *(_DWORD *)BOOL v21 = *(_DWORD *)v18;
          *((_DWORD *)v21 + 1) = *((_DWORD *)v18 + 1);
          *(_DWORD *)int v18 = v20;
          *((_DWORD *)v18 + 1) = v19;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::Lexicon::HasMoreProns &,std::pair<int,int> *>(a1, (uint64_t)(v21 + 1), a4, ((uint64_t)v21 - a1 + 8) >> 3);
        }
        --v18;
      }
      while (v17-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::Lexicon::HasMoreProns &,std::pair<int,int> *>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = (v4 >> 2) + 1;
      uint64_t v8 = (unint64_t *)(result + 8 * v7);
      uint64_t v9 = v6 + 2;
      unint64_t v10 = *v8;
      if (v9 < a3 && SHIDWORD(v10) > (int)HIDWORD(v8[1]))
      {
        unint64_t v10 = v8[1];
        ++v8;
        uint64_t v7 = v9;
      }
      unint64_t v11 = *a4;
      unint64_t v12 = HIDWORD(v10);
      unint64_t v13 = HIDWORD(*a4);
      if ((int)v12 <= (int)v13)
      {
        LODWORD(v14) = *(_DWORD *)v8;
        do
        {
          uint64_t v15 = a4;
          a4 = v8;
          *(_DWORD *)uint64_t v15 = v14;
          *((_DWORD *)v15 + 1) = *((_DWORD *)v8 + 1);
          if (v5 < v7) {
            break;
          }
          uint64_t v16 = (2 * v7) | 1;
          uint64_t v8 = (unint64_t *)(result + 8 * v16);
          uint64_t v7 = 2 * v7 + 2;
          unint64_t v14 = *v8;
          if (v7 >= a3)
          {
            uint64_t v7 = v16;
          }
          else if (SHIDWORD(v14) <= (int)HIDWORD(v8[1]))
          {
            uint64_t v7 = v16;
          }
          else
          {
            unint64_t v14 = v8[1];
            ++v8;
          }
        }
        while (SHIDWORD(v14) <= (int)v13);
        *(_DWORD *)a4 = v11;
        *((_DWORD *)a4 + 1) = v13;
      }
    }
  }
  return result;
}

_DWORD *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::Lexicon::HasMoreProns &,std::pair<int,int> *>(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  do
  {
    uint64_t v6 = &a1[2 * v3 + 2];
    uint64_t v7 = (2 * v3) | 1;
    uint64_t v8 = 2 * v3 + 2;
    if (v8 < a3 && v6[1] > v6[3])
    {
      v6 += 2;
      uint64_t v7 = v8;
    }
    *a1 = *v6;
    a1[1] = v6[1];
    a1 = v6;
    uint64_t v3 = v7;
  }
  while (v7 <= v5);
  return v6;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::Lexicon::HasMoreProns &,std::pair<int,int> *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    unint64_t v4 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v5 = (_DWORD *)(result + 8 * v4);
    uint64_t v6 = *(void *)v5;
    unint64_t v9 = *(void *)(a2 - 8);
    uint64_t v7 = (_DWORD *)(a2 - 8);
    int v8 = v9;
    unint64_t v10 = HIDWORD(v9);
    if ((int)HIDWORD(*(void *)v5) > SHIDWORD(v9))
    {
      do
      {
        unint64_t v11 = v7;
        uint64_t v7 = v5;
        *unint64_t v11 = v6;
        v11[1] = v5[1];
        if (!v4) {
          break;
        }
        unint64_t v4 = (v4 - 1) >> 1;
        uint64_t v5 = (_DWORD *)(result + 8 * v4);
        uint64_t v6 = *(void *)v5;
      }
      while ((int)HIDWORD(*(void *)v5) > (int)v10);
      _DWORD *v7 = v8;
      v7[1] = v10;
    }
  }
  return result;
}

void std::deque<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    unint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      size_t v35 = &v34[8 * (v33 >> 2)];
      unint64_t v37 = &v34[8 * v36];
      unint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        unint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)unint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    int v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      unint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    std::wstring::size_type v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    unint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      size_t v35 = &v34[8 * (v46 >> 2)];
      unint64_t v37 = &v34[8 * v47];
      unint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        long long v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)long long v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      std::vector<std::string>::pointer v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  long long v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  std::string::size_type v53 = operator new(0x1000uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  char v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1B1BBC9A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node::~Node(uint64_t a1)
{
  for (uint64_t i = (void *)a1; ; uint64_t i = (void *)v3)
  {
    while (i[3])
      uint64_t i = *(void **)(i[2] + 24);
    if (i == (void *)a1) {
      break;
    }
    uint64_t v3 = i[10];
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::erase((void *)v3, *(uint64_t **)(v3 + 16));
    uint64_t v4 = kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node::~Node(i);
    MEMORY[0x1B3EA8670](v4, 0x10A0C40A79550FFLL);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 40);
  return std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1);
}

std::string *std::vector<std::vector<std::string>>::__construct_one_at_end[abi:ne180100]<std::vector<std::string> const&>(uint64_t a1, long long **a2)
{
  uint64_t v3 = *(std::string **)(a1 + 8);
  v3->__r_.__value_.__r.__words[0] = 0;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  uint64_t result = std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v3, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  *(void *)(a1 + 8) = v3 + 1;
  return result;
}

void sub_1B1BBCAE4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::string>>::__push_back_slow_path<std::vector<std::string> const&>(uint64_t *a1, long long **a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = (std::string *)&v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  uint64_t v15 = v11;
  uint64_t v16 = &v10[24 * v9];
  v11->__r_.__value_.__r.__words[0] = 0;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v11, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  ++v15;
  std::vector<std::vector<std::string>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::vector<std::string>>::~__split_buffer(v14);
  return v12;
}

void sub_1B1BBCBFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<std::string>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void sub_1B1BBCC48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B1BBCCBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B1BBCF18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  if (a40 < 0) {
    operator delete(a35);
  }

  _Unwind_Resume(a1);
}

void sub_1B1BBD024(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B1BBD2D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B1BBD3DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B1BBD4C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B1BBD5FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B1BBD69C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B1BBD8E0(_Unwind_Exception *a1)
{
  unint64_t v5 = v3;

  _Unwind_Resume(a1);
}

void sub_1B1BBDAF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  if (v13 != v14) {
  if (v18 != v12)
  }

  _Unwind_Resume(a1);
}

void sub_1B1BBDC9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B1BBDDF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B1BBDF08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B1BBDFD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  std::pair<std::vector<std::vector<unsigned int>>,std::vector<std::vector<std::vector<quasar::Token>>>>::~pair((void **)&a9);
  a9 = &a15;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);

  _Unwind_Resume(a1);
}

void **std::pair<std::vector<std::vector<unsigned int>>,std::vector<std::vector<std::vector<quasar::Token>>>>::~pair(void **a1)
{
  uint64_t v3 = a1 + 3;
  std::vector<std::vector<std::vector<quasar::Token>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = a1;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

void sub_1B1BBE3FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  _Unwind_Resume(a1);
}

void sub_1B1BBE68C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_1B1BBE78C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B1BBE8D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  a9 = (void **)(v10 - 80);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&a9);
  a9 = (void **)(v10 - 56);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&a9);

  _Unwind_Resume(a1);
}

void sub_1B1BBE99C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B1BBF130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  STACK[0x290] = (unint64_t)&a23;
  std::vector<std::vector<std::vector<quasar::Token>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x290]);

  std::pair<std::vector<std::vector<unsigned int>>,std::vector<std::vector<std::vector<quasar::Token>>>>::~pair(a13);
  _Unwind_Resume(a1);
}

void sub_1B1BBF3D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void *);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  std::pair<std::vector<std::vector<unsigned int>>,std::vector<std::vector<std::vector<quasar::Token>>>>::~pair((void **)va1);
  std::pair<std::vector<std::vector<unsigned int>>,std::vector<std::vector<std::vector<quasar::Token>>>>::~pair((void **)va);
  _Unwind_Resume(a1);
}

void sub_1B1BBF770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1B1BBFE1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,id a60)
{
  _Block_object_dispose(&a55, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__2(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__2(uint64_t a1)
{
}

void sub_1B1BC0060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1B1BC01F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1B1BC0464(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B1BC0708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1B1BC0B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1B1BC0D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,void *a21,void *a22,void *a23)
{
  _Unwind_Resume(a1);
}

void sub_1B1BC0F34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

uint64_t quasar::join<std::vector<int>>(uint64_t *a1, uint64_t *a2)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v6);
  quasar::joinToStream<std::vector<int>>((uint64_t)v7, a1, a2);
  std::stringbuf::str();
  v6[0] = *MEMORY[0x1E4FBA408];
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v6 + *(void *)(v6[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v7[0] = v4;
  v7[1] = MEMORY[0x1E4FBA470] + 16;
  if (v8 < 0) {
    operator delete((void *)v7[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EA8520](&v9);
}

void sub_1B1BC1640(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

id EARHelpers::VectorToArray<int>(unsigned int **a1)
{
  uint64_t v2 = [MEMORY[0x1E4F1CA48] array];
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1 != v4)
  {
    do
    {
      uint64_t v5 = [NSNumber numberWithInt:*v3];
      [v2 addObject:v5];

      ++v3;
    }
    while (v3 != v4);
  }
  uint64_t v6 = (void *)[v2 copy];

  return v6;
}

void sub_1B1BC16FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B1BC1990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1B1BC1C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  *(void *)(v14 - 40) = v13;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 40));
  *(void *)(v14 - 40) = &a13;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 40));

  _Unwind_Resume(a1);
}

void sub_1B1BC1D1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void **a16)
{
  a16 = (void **)&a13;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&a16);

  _Unwind_Resume(a1);
}

void sub_1B1BC1E88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B1BC1F64(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

id EARSpeechRecognitionResultFromQuasarResult(void *a1, uint64_t *a2, void *a3, void *a4, uint64_t a5, unsigned int a6, int a7, char a8, uint64_t *a9, int a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t *a15, uint64_t *a16, unsigned __int8 a17, unsigned __int8 a18)
{
  unint64_t v22 = a1;
  id v23 = a3;
  id v24 = a4;
  dispatch_assert_queue_V2(v22[1]);
  long long v66 = 0uLL;
  uint64_t v67 = 0;
  memset(v65, 0, sizeof(v65));
  memset(v64, 0, sizeof(v64));
  memset(v63, 0, sizeof(v63));
  memset(v62, 0, sizeof(v62));
  memset(v61, 0, sizeof(v61));
  if ((a17 & a18) != 0) {
    double v26 = 0.0;
  }
  else {
    double v26 = (double)a6 / 1000.0;
  }
  if (v22[2])
  {
    std::string::size_type v58 = 0;
    long long v59 = 0;
    uint64_t v60 = 0;
    if (![(dispatch_queue_t *)v22 isLegacyVoiceCommandRequest]
      || (uint64_t v27 = a16[1], *a16 == v27))
    {
      if (&v58 != (void ***)a2) {
        std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>((uint64_t)&v58, *a2, a2[1], 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5));
      }
      uint64_t v28 = v58;
      char v29 = v59;
      if (v58 != v59)
      {
        int v30 = *((_DWORD *)v58 + 7);
        do
        {
          if (*((_DWORD *)v28 + 9)) {
            BOOL v31 = *((_DWORD *)v28 + 8) == 0;
          }
          else {
            BOOL v31 = 1;
          }
          if (v31)
          {
            *((_DWORD *)v28 + 7) = v30;
            v30 += 11;
            *((_DWORD *)v28 + 8) = v30;
            *((_DWORD *)v28 + 9) = v30;
          }
          v28 += 28;
        }
        while (v28 != v29);
      }
    }
    else if (&v58 != (void ***)a16)
    {
      std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>((uint64_t)&v58, *a16, v27, 0x6DB6DB6DB6DB6DB7 * ((v27 - *a16) >> 5));
    }
    dispatch_queue_t v32 = v22[2];
    unint64_t v33 = (std::__shared_weak_count *)a9[1];
    uint64_t v54 = *a9;
    long long v55 = v33;
    if (v33) {
      atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    __int16 v34 = [(dispatch_queue_t *)v22 itnEnablingFlags];
    char v35 = [(dispatch_queue_t *)v22 recognizeEmoji];
    uint64_t v36 = (std::__shared_weak_count *)a15[1];
    uint64_t v52 = *a15;
    std::string::size_type v53 = v36;
    if (v36) {
      atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v50[0] = MEMORY[0x1E4F143A8];
    v50[1] = 3221225472;
    v50[2] = ___Z42EARSpeechRecognitionResultFromQuasarResultP20_EARSpeechRecognizerRKNSt3__16vectorIN6quasar5TokenENS1_9allocatorIS4_EEEEP8NSStringSB_S9_jjbNS1_10shared_ptrINS3_25ContinuousListeningConfigEEEiS9_bS9_bNSC_IbEES9_bb_block_invoke;
    v50[3] = &unk_1E5FFE328;
    long long v51 = v22;
    if (v32)
    {
      LOBYTE(v44) = 0;
      BYTE1(v43) = a14;
      LOBYTE(v43) = 0;
      BYTE3(v42) = a12;
      BYTE2(v42) = v35;
      LOWORD(v42) = v34;
      BYTE4(v41) = a8;
      LODWORD(v41) = a7;
      -[NSObject formatWords:unrepairedWordsOut:task:language:preItnLeftContext:separateAutoEndPunctuation:partialResults:timestampOffset:zeroTimestamp:continuousListeningConfig:postItnLeftContext:itnResult:itnOverrides:itnEnablingFlags:recognizeEmoji:leftContextProvidedByClient:preItnRightContext:emojiTokenIndices:persistEmoji:shouldHideTrailingPunctuation:isTrailingPunctuationHidden:isFinal:choiceIdx:itnCompletion:](v32, "formatWords:unrepairedWordsOut:task:language:preItnLeftContext:separateAutoEndPunctuation:partialResults:timestampOffset:zeroTimestamp:continuousListeningConfig:postItnLeftContext:itnResult:itnOverrides:itnEnablingFlags:recognizeEmoji:leftContextProvidedByClient:preItnRightContext:emojiTokenIndices:persistEmoji:shouldHideTrailingPunctuation:isTrailingPunctuationHidden:isFinal:choiceIdx:itnCompletion:", &v58, v63, v23, v24, a5, 0, v65, v41, &v54, a11, v64, v62, v42, a13,
        v61,
        v43,
        &v52,
        v44,
        v50);
    }
    else
    {
      long long v56 = 0uLL;
      uint64_t v57 = 0;
    }
    std::vector<quasar::Token>::__vdeallocate((void **)&v66);
    long long v66 = v56;
    uint64_t v67 = v57;
    uint64_t v57 = 0;
    long long v56 = 0uLL;
    uint64_t v68 = (void **)&v56;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v68);
    if (v53) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v53);
    }
    if (v55) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v55);
    }

    *(void *)&long long v56 = &v58;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v56);
  }
  else if (&v66 != (long long *)a2)
  {
    std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>((uint64_t)&v66, *a2, a2[1], 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5));
  }
  std::string::size_type v58 = 0;
  long long v59 = 0;
  uint64_t v60 = 0;
  int v37 = quasar::QsrText::SingletonInstance(v25);
  quasar::QsrText::qsrToHatTokens(v37, (uint64_t)a2, (uint64_t *)&v58, 1);
  unint64_t v38 = [_EARSpeechRecognitionResult alloc];
  memset(v49, 0, sizeof(v49));
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v49, v66, *((uint64_t *)&v66 + 1), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)&v66 + 1) - v66) >> 5));
  memset(v48, 0, sizeof(v48));
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v48, (uint64_t)v58, (uint64_t)v59, 0x6DB6DB6DB6DB6DB7 * (((char *)v59 - (char *)v58) >> 5));
  id v39 = [(_EARSpeechRecognitionResult *)v38 _initWithTokens:v49 preITNTokens:v48 confidence:0 voiceCommandInterpretations:0 preITNVoiceCommandInterpretations:(double)a10 utteranceStart:v26];
  *(void *)&long long v56 = v48;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v56);
  *(void *)&long long v56 = v49;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v56);
  *(void *)&long long v56 = &v58;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v56);
  std::string::size_type v58 = (void **)v61;
  std::vector<std::pair<int,std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100](&v58);
  v61[0] = (void **)v62;
  std::vector<quasar::ItnOverride>::__destroy_vector::operator()[abi:ne180100](v61);
  v62[0] = (void **)v63;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](v62);
  v63[0] = (void **)v64;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](v63);
  v64[0] = (void **)v65;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](v64);
  v65[0] = (void **)&v66;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](v65);

  return v39;
}

void sub_1B1BC2578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void ***a47,uint64_t a48,uint64_t a49,void **a50)
{
  a47 = &a50;
  std::vector<std::pair<int,std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a47);
  a50 = (void **)(v53 - 240);
  std::vector<quasar::ItnOverride>::__destroy_vector::operator()[abi:ne180100](&a50);
  *(void *)(v53 - 240) = v53 - 216;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)(v53 - 240));
  *(void *)(v53 - 216) = v53 - 192;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)(v53 - 216));
  *(void *)(v53 - 192) = v53 - 168;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)(v53 - 192));
  *(void *)(v53 - 168) = v53 - 144;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)(v53 - 168));

  _Unwind_Resume(a1);
}

void ___Z42EARSpeechRecognitionResultFromQuasarResultP20_EARSpeechRecognizerRKNSt3__16vectorIN6quasar5TokenENS1_9allocatorIS4_EEEEP8NSStringSB_S9_jjbNS1_10shared_ptrINS3_25ContinuousListeningConfigEEEiS9_bS9_bNSC_IbEES9_bb_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  v8[1] = *MEMORY[0x1E4F143B8];
  id v5 = a4;
  uint64_t v6 = [*(id *)(a1 + 32) recognitionMetrics];
  v8[0] = v5;
  uint64_t v7 = [MEMORY[0x1E4F1C978] arrayWithObjects:v8 count:1];
  [v6 addItnRunIntervals:v7];
}

void sub_1B1BC271C(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

id RHPackageToEARPackage(uint64_t a1)
{
  id v30 = [[_EARSpeechRecognition alloc] _initWithNBestList:a1 useHatText:0 endsOfSentencePunctuations:0];
  id v29 = [[_EARSpeechRecognition alloc] _initWithNBestList:a1 + 48 useHatText:0 endsOfSentencePunctuations:0];
  id v31 = [[_EARSpeechRecognition alloc] _initWithNBestList:a1 + 24 useHatText:0 endsOfSentencePunctuations:0];
  int v2 = *(_DWORD *)(a1 + 76);
  if (!*(unsigned char *)(a1 + 368))
  {
    id v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    id v32 = 0;
    goto LABEL_43;
  }
  id v32 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  uint64_t v3 = EARHelpers::EARVoiceCommandInterpretationsFromQuasarCommandData(a1 + 184);
  if ([v3 count]) {
    [v32 addObject:v3];
  }
  if (!*(unsigned char *)(a1 + 368)) {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  quasar::topChoice2Str((uint64_t **)(a1 + 184), &v34);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v34.__r_.__value_.__l.__size_)
    {
      uint64_t v4 = (std::string *)v34.__r_.__value_.__r.__words[0];
      goto LABEL_11;
    }
  }
  else if (*((unsigned char *)&v34.__r_.__value_.__s + 23))
  {
    uint64_t v4 = &v34;
LABEL_11:
    uint64_t v8 = objc_msgSend(NSString, "ear_stringWithStringView:", v4);
    goto LABEL_13;
  }
  uint64_t v8 = 0;
LABEL_13:
  if (!*(unsigned char *)(a1 + 368)) {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  quasar::topChoice2Str((uint64_t **)(a1 + 208), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__p.__r_.__value_.__l.__size_)
    {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      goto LABEL_19;
    }
  }
  else if (*((unsigned char *)&__p.__r_.__value_.__s + 23))
  {
    p_p = &__p;
LABEL_19:
    uint64_t v7 = objc_msgSend(NSString, "ear_stringWithStringView:", p_p);
    goto LABEL_21;
  }
  uint64_t v7 = 0;
LABEL_21:
  if (!*(unsigned char *)(a1 + 368)) {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  uint64_t v10 = *(void *)(a1 + 336);
  if (*(void *)(a1 + 344) == v10)
  {
    id v5 = 0;
    uint64_t v6 = 0;
    goto LABEL_38;
  }
  uint64_t v11 = (void *)(v10 + 24);
  if (*(char *)(v10 + 47) < 0)
  {
    if (!*(void *)(v10 + 32))
    {
LABEL_30:
      uint64_t v6 = 0;
      goto LABEL_31;
    }
    uint64_t v11 = (void *)*v11;
  }
  else if (!*(unsigned char *)(v10 + 47))
  {
    goto LABEL_30;
  }
  uint64_t v6 = objc_msgSend(NSString, "ear_stringWithStringView:", v11);
LABEL_31:
  uint64_t v12 = (void *)(v10 + 48);
  if (*(char *)(v10 + 71) < 0)
  {
    if (!*(void *)(v10 + 56))
    {
LABEL_37:
      id v5 = 0;
      goto LABEL_38;
    }
    uint64_t v12 = (void *)*v12;
  }
  else if (!*(unsigned char *)(v10 + 71))
  {
    goto LABEL_37;
  }
  id v5 = objc_msgSend(NSString, "ear_stringWithStringView:", v12);
LABEL_38:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }

LABEL_43:
  uint64_t v13 = [_EARVoiceCommandDebugInfo alloc];
  *(_WORD *)((char *)&v25 + 1) = *(_WORD *)(a1 + 459);
  LOBYTE(v25) = *(unsigned char *)(a1 + 458);
  uint64_t v14 = -[_EARVoiceCommandDebugInfo initWithPrecedingUtterance:commandUtterance:target:payload:hasVoiceCommandInExhaustiveParses:hasVoiceCommandParses:hasVoiceCommandEditIntent:hasVoiceCommandAfterReranking:hasNoVoiceCommandAfterRespeakCheck:commandParserMachContinuousStartTicks:commandParserMachContinuousEndTicks:commandParserMachAbsoluteStartTicks:commandParserMachAbsoluteEndTicks:](v13, "initWithPrecedingUtterance:commandUtterance:target:payload:hasVoiceCommandInExhaustiveParses:hasVoiceCommandParses:hasVoiceCommandEditIntent:hasVoiceCommandAfterReranking:hasNoVoiceCommandAfterRespeakCheck:commandParserMachContinuousStartTicks:commandParserMachContinuousEndTicks:commandParserMachAbsoluteStartTicks:commandParserMachAbsoluteEndTicks:", v8, v7, v6, v5, *(unsigned __int8 *)(a1 + 456), *(unsigned __int8 *)(a1 + 457), v25, *(void *)(a1 + 464), *(void *)(a1 + 472), *(void *)(a1 + 480), *(void *)(a1 + 488));
  uint64_t v27 = (void *)v7;
  uint64_t v28 = (void *)v8;
  uint64_t v15 = [_EARPerformanceMarkers alloc];
  uint64_t v16 = (unsigned int **)(a1 + 88);
  uint64_t v17 = EARHelpers::VectorToArray<int>((unsigned int **)(a1 + 88));
  uint64_t v18 = EARHelpers::VectorToArray<int>((unsigned int **)(a1 + 112));
  int v19 = EARHelpers::VectorToArray<int>((unsigned int **)(a1 + 136));
  int64_t v20 = [(_EARPerformanceMarkers *)v15 initWithCorrectPartialResultIndexList:v17 correctAlignedPartialResultIndexList:v18 tokenDelayInMilliseconds:v19];

  uint64_t v21 = [_EARSpeechRecognitionResultPackage alloc];
  LOWORD(v26) = *(_WORD *)(a1 + 80);
  id v22 = -[_EARSpeechRecognitionResultPackage _initWithRecognition:preITNRecognition:unrepairedRecognition:recognitionIsFormatted:isFinal:audioAnalytics:utteranceStart:latticeMitigatorResult:nBestVoiceCommandInterpretations:preITNNBestVoiceCommandInterpretations:recognitionPaused:firstResultAfterResume:endOfSentenceLikelihood:numTokensExcludingTriggerPhrase:voiceCommandDebugInfo:performanceMarkers:](v21, "_initWithRecognition:preITNRecognition:unrepairedRecognition:recognitionIsFormatted:isFinal:audioAnalytics:utteranceStart:latticeMitigatorResult:nBestVoiceCommandInterpretations:preITNNBestVoiceCommandInterpretations:recognitionPaused:firstResultAfterResume:endOfSentenceLikelihood:numTokensExcludingTriggerPhrase:voiceCommandDebugInfo:performanceMarkers:", v29, v30, v31, 1, *(unsigned __int8 *)(a1 + 72), 0, (double)v2 / 1000.0, 0, v32, 0, v26, 0, 0, v14,
          v20);
  id v23 = EARHelpers::VectorToArray<int>(v16);
  [v22 setCorrectPartialResultIndexList:v23];

  return v22;
}

void sub_1B1BC2B50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22,void *a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (*(char *)(v30 - 89) < 0) {
    operator delete(*(void **)(v30 - 112));
  }

  _Unwind_Resume(a1);
}

void sub_1B1BC2C74()
{
  JUMPOUT(0x1B1BC2C4CLL);
}

void sub_1B1BC2C8C()
{
}

void sub_1B1BC2C94()
{
}

void EARPackageToRHPackage(_EARSpeechRecognitionResultPackage *a1)
{
}

void sub_1B1BC306C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, quasar::result_handler::Package **a10, uint64_t a11, void *a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }

  std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](a10, 0);
  _Unwind_Resume(a1);
}

void EARResultToRHPackage(_EARSpeechRecognitionResult *a1)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  operator new();
}

void sub_1B1BC32C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, char a11)
{
  a10 = (void **)&a11;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&a10);

  std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](v12, 0);
  _Unwind_Resume(a1);
}

void sub_1B1BC3470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&a16);
  _Unwind_Resume(a1);
}

void sub_1B1BC35C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B1BC37B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, char a15)
{
  a12 = (void **)&a15;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void EAROutputResultHandler::addPartialResultToContext(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained addPartialResultToContext:a2];
}

void sub_1B1BC3AB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B1BC3B4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void EARContinuousListeningResultHelper::writePartialImpl(uint64_t a1, uint64_t **a2, unsigned int a3, int a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, char a9, uint64_t *a10, unsigned __int8 a11)
{
  EARContinuousListeningResultHelper::setParser((EARContinuousListeningResultHelper *)a1);
  memset(v39, 0, sizeof(v39));
  std::vector<std::vector<quasar::Token>>::__init_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(v39, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 256));
  id v31 = objc_loadWeakRetained((id *)(a1 + 264));
  int v19 = *(void **)(a1 + 280);
  int64_t v20 = *(void **)(a1 + 288);
  id v30 = objc_loadWeakRetained((id *)(a1 + 256));
  unsigned int v28 = a3;
  if ([v30 isLegacyVoiceCommandRequest]) {
    int v21 = 0;
  }
  else {
    int v21 = a3;
  }
  int v27 = v21;
  id v29 = objc_loadWeakRetained((id *)(a1 + 256));
  char v22 = [v29 isLegacyVoiceCommandRequest];
  quasar::ContinuousListeningResultHelper::getContinuousListeningConfig(a1, &v37);
  id v23 = objc_loadWeakRetained((id *)(a1 + 272));
  id v24 = v23;
  uint64_t v25 = (std::__shared_weak_count *)a10[1];
  uint64_t v35 = *a10;
  uint64_t v36 = v25;
  if (v25) {
    atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v26 = *(std::__shared_weak_count **)(a1 + 304);
  uint64_t v33 = *(void *)(a1 + 296);
  std::string v34 = v26;
  if (v26) {
    atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ResultStreamWrapper::writePartialToResultStream((uint64_t)v39, WeakRetained, v31, v19, v20, a5, v27, v28, a4, v22, &v37, 0, v23, a6, a7, a8, a9, &v35, a11,
    &v33);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }

  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }

  uint64_t v40 = (void **)v39;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v40);
}

void sub_1B1BC3E2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,void *a25,void *a26,void *a27,uint64_t a28,std::__shared_weak_count *a29)
{
  if (a29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a29);
  }
  id v32 = *(std::__shared_weak_count **)(v30 - 144);
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }

  uint64_t v33 = *(std::__shared_weak_count **)(v30 - 128);
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }

  *(void *)(v30 - 96) = v30 - 120;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 96));
  _Unwind_Resume(a1);
}

void EARContinuousListeningResultHelper::setParser(EARContinuousListeningResultHelper *this)
{
  id WeakRetained = (dispatch_queue_t *)objc_loadWeakRetained((id *)this + 32);
  uint64_t v3 = WeakRetained;
  if (WeakRetained && *((void *)this + 39))
  {
    dispatch_assert_queue_V2(WeakRetained[1]);
    uint64_t v4 = *((void *)this + 39);
    [(dispatch_queue_t *)v3 getParser];
    quasar::result_handler::VoiceEditingResultHandler::setParser(v4, &v5);
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
    *((void *)this + 39) = 0;
  }
}

void sub_1B1BC3F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }

  _Unwind_Resume(a1);
}

void ResultStreamWrapper::writePartialToResultStream(uint64_t a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6, int a7, unsigned int a8, int a9, char a10, uint64_t *a11, int a12, void *a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t *a18, unsigned __int8 a19, void *a20)
{
  v169[0] = *MEMORY[0x1E4F143B8];
  id v115 = a2;
  id v25 = a3;
  id v113 = a4;
  id v114 = a5;
  id v104 = a13;
  unint64_t v105 = v25;
  long long v106 = (void *)a1;
  if (*(void *)a1 == *(void *)(a1 + 8))
  {
    long long v149 = 0uLL;
    *(void *)&long long v150 = 0;
    std::vector<std::vector<quasar::Token>>::__assign_with_size[abi:ne180100]<std::vector<quasar::Token> const*,std::vector<quasar::Token> const*>(a1, (uint64_t *)&v149, (uint64_t *)&v150 + 1, 1uLL);
    float v138 = (void **)&v149;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v138);
  }
  if (objc_opt_respondsToSelector())
  {
    id v26 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    unsigned int v28 = *(uint64_t **)a1;
    int v27 = *(uint64_t **)(a1 + 8);
    if (*(uint64_t **)a1 != v27)
    {
      do
      {
        id v29 = (std::__shared_weak_count *)a11[1];
        uint64_t v143 = *a11;
        float v144 = v29;
        if (v29) {
          atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v30 = (std::__shared_weak_count *)a18[1];
        uint64_t v141 = *a18;
        float v142 = v30;
        if (v30) {
          atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        long long v149 = 0uLL;
        *(void *)&long long v150 = 0;
        id v31 = EARSpeechRecognitionResultFromQuasarResult(v115, v28, v113, v114, a6, 0, a7, a10, &v143, 0, a14, a15, a16, a17, &v141, (uint64_t *)&v149, [v115 detectUtterances], objc_msgSend(v115, "concatenateUtterances"));
        [v26 addObject:v31];

        float v138 = (void **)&v149;
        std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v138);
        if (v142) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v142);
        }
        if (v144) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v144);
        }
        v28 += 3;
      }
      while (v28 != v27);
    }
    [v25 speechRecognizer:v115 didRecognizePartialResultNbest:v26];
  }
  else
  {
    float v138 = 0;
    BOOL v139 = 0;
    uint64_t v140 = 0;
    if ([v115 isLegacyVoiceCommandRequest])
    {
      if (&v138 != *(void ****)a1) {
        std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>((uint64_t)&v138, **(void **)a1, *(void *)(*(void *)a1 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(*(void *)a1 + 8) - **(void **)a1) >> 5));
      }
      uint64_t v33 = v138;
      id v32 = v139;
      if (v139 != v138)
      {
        uint64_t v34 = 0;
        unint64_t v35 = ((char *)v139 - (char *)v138) / 224;
        if (v35 <= 1) {
          unint64_t v35 = 1;
        }
        uint64_t v36 = (_DWORD *)v138 + 7;
        unint64_t v37 = 0xFFFFFFFF00000000;
        while (!v34 || *v36)
        {
          ++v34;
          v37 += 0x100000000;
          v36 += 56;
          if (v35 == v34)
          {
            int v38 = 0;
            goto LABEL_27;
          }
        }
        int v38 = (int)v138[28 * SHIDWORD(v37) + 4];
        do
        {
LABEL_27:
          if (*((_DWORD *)v33 + 9)) {
            BOOL v39 = *((_DWORD *)v33 + 8) == 0;
          }
          else {
            BOOL v39 = 1;
          }
          if (v39)
          {
            *((_DWORD *)v33 + 7) = v38;
            v38 += 11;
            *((_DWORD *)v33 + 8) = v38;
            *((_DWORD *)v33 + 9) = v38;
          }
          v33 += 28;
        }
        while (v33 != v32);
      }
    }
    uint64_t v40 = *(uint64_t **)a1;
    uint64_t v41 = (std::__shared_weak_count *)a11[1];
    uint64_t v136 = *a11;
    float v137 = v41;
    if (v41) {
      atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v42 = (std::__shared_weak_count *)a18[1];
    uint64_t v134 = *a18;
    float v135 = v42;
    if (v42) {
      atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    EARSpeechRecognitionResultFromQuasarResult(v115, v40, v113, v114, a6, a8, a7, 0, &v136, a12, a14, a15, a16, a17, &v134, (uint64_t *)&v138, [v115 detectUtterances], objc_msgSend(v115, "concatenateUtterances"));
    float v112 = (_EARSpeechRecognitionResult *)objc_claimAutoreleasedReturnValue();
    if (v135) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v135);
    }
    if (v137) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v137);
    }
    if ([v115 enableVoiceCommands]
      && (objc_opt_respondsToSelector() & 1) != 0
      && *((void *)v115 + 6))
    {
      uint64_t v43 = [_EARSpeechRecognition alloc];
      v166 = 0;
      uint64_t v167 = 0;
      uint64_t v168 = 0;
      std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(&v166, (uint64_t)v138, (uint64_t)v139, 0x6DB6DB6DB6DB6DB7 * (((char *)v139 - (char *)v138) >> 5));
      long long v149 = 0uLL;
      *(void *)&long long v150 = 0;
      float v145 = (void ***)&v149;
      char v146 = 0;
      *(void *)&long long v149 = operator new(0x18uLL);
      *((void *)&v149 + 1) = v149;
      *(void *)&long long v150 = v149 + 24;
      *((void *)&v149 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<quasar::Token>>,std::vector<quasar::Token> const*,std::vector<quasar::Token> const*,std::vector<quasar::Token>*>((uint64_t)&v150, (uint64_t *)&v166, v169, (void *)v149);
      id v107 = [(_EARSpeechRecognition *)v43 _initWithNBestList:&v149 useHatText:1 endsOfSentencePunctuations:*((void *)v115 + 9)];
      float v145 = (void ***)&v149;
      std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v145);
      float v145 = &v166;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v145);
      unsigned int v44 = [_EARSpeechRecognition alloc];
      uint64_t v45 = [(_EARSpeechRecognitionResult *)v112 tokens];
      EARHelpers::QuasarResultFromEARSpeechRecognitionTokens(v45, (uint64_t *)&v166);
      long long v149 = 0uLL;
      *(void *)&long long v150 = 0;
      float v145 = (void ***)&v149;
      char v146 = 0;
      *(void *)&long long v149 = operator new(0x18uLL);
      *((void *)&v149 + 1) = v149;
      *(void *)&long long v150 = v149 + 24;
      *((void *)&v149 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<quasar::Token>>,std::vector<quasar::Token> const*,std::vector<quasar::Token> const*,std::vector<quasar::Token>*>((uint64_t)&v150, (uint64_t *)&v166, v169, (void *)v149);
      id v110 = [(_EARSpeechRecognition *)v44 _initWithNBestList:&v149 useHatText:0 endsOfSentencePunctuations:*((void *)v115 + 9)];
      float v145 = (void ***)&v149;
      std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v145);
      float v145 = &v166;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v145);

      unint64_t v46 = [v110 tokenSausage];
      BOOL v47 = [v46 count] == 0;

      if (quasar::gLogLevel > 4 && v47)
      {
        long long v164 = 0u;
        long long v165 = 0u;
        long long v162 = 0u;
        long long v163 = 0u;
        long long v160 = 0u;
        long long v161 = 0u;
        long long v158 = 0u;
        long long v159 = 0u;
        long long v156 = 0u;
        long long v157 = 0u;
        long long v154 = 0u;
        long long v155 = 0u;
        long long v152 = 0u;
        long long v153 = 0u;
        long long v150 = 0u;
        long long v151 = 0u;
        long long v149 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v149);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v149, (uint64_t)"Unable to create valid recognition for voice command partial result", 67);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v149);
      }
      id v108 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      id v109 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      uint64_t v49 = [v110 potentialPrecedingRecognition];
      BOOL v50 = v49 == 0;

      if (v50)
      {
        if (quasar::gLogLevel >= 5)
        {
          long long v164 = 0u;
          long long v165 = 0u;
          long long v162 = 0u;
          long long v163 = 0u;
          long long v160 = 0u;
          long long v161 = 0u;
          long long v158 = 0u;
          long long v159 = 0u;
          long long v156 = 0u;
          long long v157 = 0u;
          long long v154 = 0u;
          long long v155 = 0u;
          long long v152 = 0u;
          long long v153 = 0u;
          long long v150 = 0u;
          long long v151 = 0u;
          long long v149 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v149);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v149, (uint64_t)"Voice Command: partial preceding utterance: NULL", 48);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v149);
        }
        id objb = 0;
        std::string::size_type v58 = 0;
      }
      else
      {
        long long v51 = [v110 potentialPrecedingRecognition];
        uint64_t v52 = [v51 nBest];
        id obja = [v52 firstObject];

        uint64_t v53 = transcriptFromTokens(obja);
        if (quasar::gLogLevel >= 5)
        {
          long long v164 = 0u;
          long long v165 = 0u;
          long long v162 = 0u;
          long long v163 = 0u;
          long long v160 = 0u;
          long long v161 = 0u;
          long long v158 = 0u;
          long long v159 = 0u;
          long long v156 = 0u;
          long long v157 = 0u;
          long long v154 = 0u;
          long long v155 = 0u;
          long long v152 = 0u;
          long long v153 = 0u;
          long long v150 = 0u;
          long long v151 = 0u;
          long long v149 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v149);
          uint64_t v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v149, (uint64_t)"Voice Command: partial preceding utterance: ", 44);
          if (v53)
          {
            objc_msgSend(v53, "ear_toString");
            unsigned int v55 = HIBYTE(v168);
            long long v56 = v166;
            uint64_t v57 = v167;
          }
          else
          {
            uint64_t v57 = 0;
            long long v56 = 0;
            unsigned int v55 = 0;
            v166 = 0;
            uint64_t v167 = 0;
            uint64_t v168 = 0;
          }
          if ((v55 & 0x80u) == 0) {
            long long v59 = (void **)&v166;
          }
          else {
            long long v59 = v56;
          }
          if ((v55 & 0x80u) == 0) {
            uint64_t v60 = v55;
          }
          else {
            uint64_t v60 = v57;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)v59, v60);
          if (SHIBYTE(v168) < 0) {
            operator delete(v166);
          }
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v149);
        }
        long long v132 = 0u;
        long long v133 = 0u;
        long long v130 = 0u;
        long long v131 = 0u;
        id objb = obja;
        uint64_t v61 = [objb countByEnumeratingWithState:&v130 objects:v148 count:16];
        if (v61)
        {
          uint64_t v62 = *(void *)v131;
          do
          {
            for (uint64_t i = 0; i != v61; ++i)
            {
              if (*(void *)v131 != v62) {
                objc_enumerationMutation(objb);
              }
              id v64 = *(id *)(*((void *)&v130 + 1) + 8 * i);
              if (quasar::gLogLevel >= 5)
              {
                long long v164 = 0u;
                long long v165 = 0u;
                long long v162 = 0u;
                long long v163 = 0u;
                long long v160 = 0u;
                long long v161 = 0u;
                long long v158 = 0u;
                long long v159 = 0u;
                long long v156 = 0u;
                long long v157 = 0u;
                long long v154 = 0u;
                long long v155 = 0u;
                long long v152 = 0u;
                long long v153 = 0u;
                long long v150 = 0u;
                long long v151 = 0u;
                long long v149 = 0u;
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v149);
                int64_t v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v149, (uint64_t)"Voice Command: partial preceding utterance tokens", 49);
                long long v66 = [v64 description];
                uint64_t v67 = v66;
                if (v66)
                {
                  objc_msgSend(v66, "ear_toString");
                  uint64_t v68 = HIBYTE(v168);
                  unint64_t v69 = v166;
                  uint64_t v70 = v167;
                }
                else
                {
                  uint64_t v70 = 0;
                  unint64_t v69 = 0;
                  uint64_t v68 = 0;
                  v166 = 0;
                  uint64_t v167 = 0;
                  uint64_t v168 = 0;
                }
                if ((v68 & 0x80u) == 0) {
                  unint64_t v71 = (void **)&v166;
                }
                else {
                  unint64_t v71 = v69;
                }
                if ((v68 & 0x80u) == 0) {
                  uint64_t v72 = v68;
                }
                else {
                  uint64_t v72 = v70;
                }
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)v71, v72);
                if (SHIBYTE(v168) < 0) {
                  operator delete(v166);
                }

                quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v149);
              }
            }
            uint64_t v61 = [objb countByEnumeratingWithState:&v130 objects:v148 count:16];
          }
          while (v61);
        }

        std::string::size_type v58 = v53;
      }
      float v73 = [v110 potentialCommandRecognition];
      int v74 = [v73 nBest];
      float v75 = [v74 firstObject];

      float v103 = transcriptFromTokens(v75);

      if (quasar::gLogLevel >= 5)
      {
        long long v164 = 0u;
        long long v165 = 0u;
        long long v162 = 0u;
        long long v163 = 0u;
        long long v160 = 0u;
        long long v161 = 0u;
        long long v158 = 0u;
        long long v159 = 0u;
        long long v156 = 0u;
        long long v157 = 0u;
        long long v154 = 0u;
        long long v155 = 0u;
        long long v152 = 0u;
        long long v153 = 0u;
        long long v150 = 0u;
        long long v151 = 0u;
        long long v149 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v149);
        unsigned __int32 v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v149, (uint64_t)"Voice Command: partial command utterance: ", 42);
        if (v103)
        {
          objc_msgSend(v103, "ear_toString");
          unsigned int v77 = HIBYTE(v168);
          uint64_t v78 = v166;
          uint64_t v79 = v167;
        }
        else
        {
          uint64_t v79 = 0;
          uint64_t v78 = 0;
          unsigned int v77 = 0;
          v166 = 0;
          uint64_t v167 = 0;
          uint64_t v168 = 0;
        }
        if ((v77 & 0x80u) == 0) {
          float v80 = (void **)&v166;
        }
        else {
          float v80 = v78;
        }
        if ((v77 & 0x80u) == 0) {
          uint64_t v81 = v77;
        }
        else {
          uint64_t v81 = v79;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)v80, v81);
        if (SHIBYTE(v168) < 0) {
          operator delete(v166);
        }
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v149);
      }
      long long v128 = 0u;
      long long v129 = 0u;
      long long v126 = 0u;
      long long v127 = 0u;
      id objc = v75;
      uint64_t v82 = [objc countByEnumeratingWithState:&v126 objects:v147 count:16];
      if (v82)
      {
        uint64_t v83 = *(void *)v127;
        do
        {
          for (uint64_t j = 0; j != v82; ++j)
          {
            if (*(void *)v127 != v83) {
              objc_enumerationMutation(objc);
            }
            id v85 = *(id *)(*((void *)&v126 + 1) + 8 * j);
            if (quasar::gLogLevel >= 5)
            {
              long long v164 = 0u;
              long long v165 = 0u;
              long long v162 = 0u;
              long long v163 = 0u;
              long long v160 = 0u;
              long long v161 = 0u;
              long long v158 = 0u;
              long long v159 = 0u;
              long long v156 = 0u;
              long long v157 = 0u;
              long long v154 = 0u;
              long long v155 = 0u;
              long long v152 = 0u;
              long long v153 = 0u;
              long long v150 = 0u;
              long long v151 = 0u;
              long long v149 = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v149);
              uint64_t v86 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v149, (uint64_t)"Voice Command: partial command token", 36);
              uint64_t v87 = [v85 description];
              float v88 = v87;
              if (v87)
              {
                objc_msgSend(v87, "ear_toString");
                uint64_t v89 = HIBYTE(v168);
                unint64_t v90 = v166;
                uint64_t v91 = v167;
              }
              else
              {
                uint64_t v91 = 0;
                unint64_t v90 = 0;
                uint64_t v89 = 0;
                v166 = 0;
                uint64_t v167 = 0;
                uint64_t v168 = 0;
              }
              if ((v89 & 0x80u) == 0) {
                unint64_t v92 = (void **)&v166;
              }
              else {
                unint64_t v92 = v90;
              }
              if ((v89 & 0x80u) == 0) {
                uint64_t v93 = v89;
              }
              else {
                uint64_t v93 = v91;
              }
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)v92, v93);
              if (SHIBYTE(v168) < 0) {
                operator delete(v166);
              }

              quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v149);
            }
          }
          uint64_t v82 = [objc countByEnumeratingWithState:&v126 objects:v147 count:16];
        }
        while (v82);
      }

      if (*((unsigned char *)v115 + 65))
      {
        unint64_t v94 = [v110 potentialPrecedingRecognition];
        int v95 = v94 ? 1 : a19;

        if (v95)
        {
          uint64_t v96 = [v110 potentialCommandRecognition];
          uint64_t v97 = [v96 nBest];

          v123[0] = MEMORY[0x1E4F143A8];
          v123[1] = 3221225472;
          v123[2] = ___ZN19ResultStreamWrapper26writePartialToResultStreamENSt3__16vectorINS1_IN6quasar5TokenENS0_9allocatorIS3_EEEENS4_IS6_EEEEP20_EARSpeechRecognizerPU44objcproto33_EARSpeechRecognitionResultStream11objc_objectP8NSStringSE_RKS6_jjibNS0_10shared_ptrINS2_25ContinuousListeningConfigEEEiP17_EARResultContextSG_bSG_bNSH_IbEEbNSH_INS2_14result_handler13ResultHandlerEEE_block_invoke;
          v123[3] = &unk_1E5FFE5A0;
          id v98 = v115;
          id v124 = v98;
          id v125 = v108;
          [v97 enumerateObjectsUsingBlock:v123];
          v99 = [v107 potentialCommandRecognition];
          uint64_t v100 = [v99 nBest];

          v120[0] = MEMORY[0x1E4F143A8];
          v120[1] = 3221225472;
          v120[2] = ___ZN19ResultStreamWrapper26writePartialToResultStreamENSt3__16vectorINS1_IN6quasar5TokenENS0_9allocatorIS3_EEEENS4_IS6_EEEEP20_EARSpeechRecognizerPU44objcproto33_EARSpeechRecognitionResultStream11objc_objectP8NSStringSE_RKS6_jjibNS0_10shared_ptrINS2_25ContinuousListeningConfigEEEiP17_EARResultContextSG_bSG_bNSH_IbEEbNSH_INS2_14result_handler13ResultHandlerEEE_block_invoke_2;
          v120[3] = &unk_1E5FFE5A0;
          id v121 = v98;
          id v122 = v109;
          [v100 enumerateObjectsUsingBlock:v120];
        }
      }
      LOWORD(v102) = 0;
      id v101 = -[_EARSpeechRecognitionResultPackage _initWithRecognition:preITNRecognition:unrepairedRecognition:recognitionIsFormatted:isFinal:audioAnalytics:utteranceStart:latticeMitigatorResult:nBestVoiceCommandInterpretations:preITNNBestVoiceCommandInterpretations:recognitionPaused:firstResultAfterResume:endOfSentenceLikelihood:]([_EARSpeechRecognitionResultPackage alloc], "_initWithRecognition:preITNRecognition:unrepairedRecognition:recognitionIsFormatted:isFinal:audioAnalytics:utteranceStart:latticeMitigatorResult:nBestVoiceCommandInterpretations:preITNNBestVoiceCommandInterpretations:recognitionPaused:firstResultAfterResume:endOfSentenceLikelihood:", v110, v107, 0, 1, 0, 0, 0.0, 0, v108, v109, v102, 0);
      [v105 speechRecognizer:v115 didRecognizePartialResultPackage:v101];
    }
    else
    {
      if (*a20) {
        EARResultToRHPackage(v112);
      }
      [v25 speechRecognizer:v115 didRecognizePartialResult:v112];
    }

    *(void *)&long long v149 = &v138;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v149);
  }
  [v104 addPartialResultToContext:*v106];
}

void sub_1B1BC4DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,uint64_t a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&STACK[0x310]);

  STACK[0x310] = (unint64_t)&a66;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x310]);

  _Unwind_Resume(a1);
}

void EARContinuousListeningResultHelper::writeFinalImpl(uint64_t a1, uint64_t **a2, uint64_t a3, unsigned int a4, unsigned int a5, int a6, unsigned __int8 a7, uint64_t a8, uint64_t a9, uint64_t *a10, char a11, unsigned __int8 a12, uint64_t a13, char a14)
{
  EARContinuousListeningResultHelper::setParser((EARContinuousListeningResultHelper *)a1);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 256));
  id v26 = objc_loadWeakRetained((id *)(a1 + 264));
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v41 = 0u;
  memset(v40, 0, sizeof(v40));
  long long v38 = 0u;
  *(_OWORD *)std::string __p = 0u;
  long long v37 = 0u;
  uint64_t v39 = 1065353216;
  int v21 = *(void **)(a1 + 280);
  char v22 = *(void **)(a1 + 288);
  id v23 = objc_loadWeakRetained((id *)(a1 + 272));
  quasar::ContinuousListeningResultHelper::getContinuousListeningConfig(a1, &v34);
  memset(v33, 0, sizeof(v33));
  v32[0] = 0;
  v32[1] = 0;
  id v31 = v32;
  memset(v30, 0, sizeof(v30));
  id v24 = *(std::__shared_weak_count **)(a1 + 304);
  uint64_t v28 = *(void *)(a1 + 296);
  id v29 = v24;
  if (v24) {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ResultStreamWrapper::writeFinalChoicesToResultStream(a2, a3, a4, WeakRetained, v26, (uint64_t)v40, (unsigned __int8 *)__p, v21, -1000.0, 9.0, a5, a6, v22, v23, 1, a7, a8, 0, &v34,
    a9,
    a10,
    (uint64_t)v33,
    (uint64_t)&v31,
    v30,
    a11,
    a12,
    a13,
    a14,
    0,
    &v28);
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  unint64_t v48 = (void **)v30;
  std::vector<std::set<std::string>>::__destroy_vector::operator()[abi:ne180100](&v48);
  std::__tree<std::string>::destroy((uint64_t)&v31, v32[0]);
  id v31 = (char **)v33;
  std::vector<quasar::ItnOverride>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }

  if (SHIBYTE(v37) < 0) {
    operator delete(__p[1]);
  }
  if ((void)v45)
  {
    *((void *)&v45 + 1) = v45;
    operator delete((void *)v45);
  }
  if ((void)v43)
  {
    *((void *)&v43 + 1) = v43;
    operator delete((void *)v43);
  }
  if ((void)v41)
  {
    *((void *)&v41 + 1) = v41;
    operator delete((void *)v41);
  }
  if (v40[0])
  {
    v40[1] = v40[0];
    operator delete(v40[0]);
  }
}

void sub_1B1BC5478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,void *a27,uint64_t a28,std::__shared_weak_count *a29,char a30,uint64_t a31,uint64_t a32,char *a33,char *a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,std::__shared_weak_count *a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a29);
  }
  *(void *)(v48 - 104) = &a30;
  std::vector<std::set<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v48 - 104));
  std::__tree<std::string>::destroy((uint64_t)&a33, a34);
  a33 = &a36;
  std::vector<quasar::ItnOverride>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  if (a40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a40);
  }

  if (a47 < 0) {
    operator delete(__p);
  }
  quasar::AudioAnalytics::~AudioAnalytics((quasar::AudioAnalytics *)(v48 - 256));

  _Unwind_Resume(a1);
}

void ResultStreamWrapper::writeFinalChoicesToResultStream(uint64_t **a1, uint64_t a2, unsigned int a3, void *a4, void *a5, uint64_t a6, unsigned __int8 *a7, void *a8, double a9, double a10, unsigned int a11, int a12, void *a13, void *a14, int a15, unsigned __int8 a16, uint64_t a17, char a18, uint64_t *a19, uint64_t a20,uint64_t *a21,uint64_t a22,uint64_t a23,void *a24,char a25,unsigned __int8 a26,uint64_t a27,char a28,int a29,void *a30)
{
  uint64_t v276 = *MEMORY[0x1E4F143B8];
  id v35 = a4;
  id v175 = a5;
  id v170 = a8;
  id v171 = a13;
  id v183 = a14;
  v180 = v35;
  dispatch_assert_queue_V2(*((dispatch_queue_t *)v35 + 1));
  uint64_t v167 = a1;
  if (*a1 == a1[1]) {
    std::string::basic_string[abi:ne180100]<0>(&__s1, "");
  }
  else {
    quasar::TextProc::GetOrthography((long long **)*a1, 0, &__s1);
  }
  if (v183)
  {
    [v183 prevBestRecogText];
    unsigned int v36 = BYTE7(v215);
    unint64_t v37 = (unint64_t)__p[1];
  }
  else
  {
    unint64_t v37 = 0;
    unsigned int v36 = 0;
    __p[1] = 0;
    __p[0] = 0;
    *(void *)&long long v215 = 0;
  }
  uint64_t v38 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __s1.__r_.__value_.__l.__size_;
  }
  if ((v36 & 0x80u) == 0) {
    unint64_t v37 = v36;
  }
  if (size != v37) {
    goto LABEL_23;
  }
  if ((v36 & 0x80u) == 0) {
    uint64_t v40 = __p;
  }
  else {
    uint64_t v40 = (void **)__p[0];
  }
  if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (memcmp(__s1.__r_.__value_.__l.__data_, v40, __s1.__r_.__value_.__l.__size_)) {
      goto LABEL_23;
    }
LABEL_45:
    BOOL v172 = [v183 countOfIsFinalFalseAlreadyWritten] != 0;
    if ((BYTE7(v215) & 0x80) == 0) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (!*((unsigned char *)&__s1.__r_.__value_.__s + 23)) {
    goto LABEL_45;
  }
  p_s1 = &__s1;
  while (p_s1->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v40)
  {
    p_s1 = (std::string *)((char *)p_s1 + 1);
    uint64_t v40 = (void **)((char *)v40 + 1);
    if (!--v38) {
      goto LABEL_45;
    }
  }
LABEL_23:
  BOOL v172 = 0;
  if ((v36 & 0x80) != 0) {
LABEL_24:
  }
    operator delete(__p[0]);
LABEL_25:
  uint64_t v264 = 0;
  v265 = &v264;
  uint64_t v266 = 0x3032000000;
  v267 = __Block_byref_object_copy__2;
  v268 = __Block_byref_object_dispose__2;
  id v269 = 0;
  uint64_t v258 = 0;
  v259 = &v258;
  uint64_t v260 = 0x3032000000;
  v261 = __Block_byref_object_copy__2;
  v262 = __Block_byref_object_dispose__2;
  id v263 = 0;
  uint64_t v252 = 0;
  v253 = &v252;
  uint64_t v254 = 0x3032000000;
  v255 = __Block_byref_object_copy__2;
  v256 = __Block_byref_object_dispose__2;
  id v257 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  if (v172 && [v35 canCloneIsFinalAsLastNonFinal])
  {
    long long v42 = [v183 prevPackage];
    char v43 = [v183 anyResults];
    [(_EARSpeechRecognitionResultPackage *)v42 setIsFinal:a3];
    long long v44 = (void *)*((void *)v35 + 2);
    v251[0] = MEMORY[0x1E4F143A8];
    v251[1] = 3221225472;
    v251[2] = ___ZN19ResultStreamWrapper31writeFinalChoicesToResultStreamERKNSt3__16vectorINS1_IN6quasar5TokenENS0_9allocatorIS3_EEEENS4_IS6_EEEERKNS1_IdNS4_IdEEEEbP20_EARSpeechRecognizerPU44objcproto33_EARSpeechRecognitionResultStream11objc_objectRKNS2_14AudioAnalyticsERKNS2_20LatnnMitigatorResultEdP8NSStringjjSQ_P17_EARResultContextNS2_21RecogResultStreamBase11RecogStatusEbRKS6_bNS0_10shared_ptrINS2_25ContinuousListeningConfigEEESW_RS8_RKNS1_INS2_11ItnOverrideENS4_IS11_EEEERKNS0_3setINS0_12basic_stringIcNS0_11char_traitsIcEENS4_IcEEEENS0_4lessIS1B_EENS4_IS1B_EEEERKNS1_IS1F_NS4_IS1F_EEEEbbSW_bdiNSX_INS2_14result_handler13ResultHandlerEEE_block_invoke;
    v251[3] = &unk_1E5FFE5C8;
    v251[4] = &v264;
    v251[5] = &v258;
    v251[6] = &v252;
    [v44 setItnMetricsWithCompletion:v251];
    v179 = v42;
    long long v45 = [(_EARSpeechRecognitionResultPackage *)v42 recognition];
    long long v46 = [v45 tokenSausage];
    double v47 = (double)(a12 + a11) / 1000.0;
    uint64_t v48 = ResultStreamWrapper::tokenSausageWithExtendedEndTime(v46, v47);
    uint64_t v49 = [(_EARSpeechRecognitionResultPackage *)v179 recognition];
    [v49 setTokenSausage:v48];

    BOOL v50 = [(_EARSpeechRecognitionResultPackage *)v179 preITNRecognition];
    long long v51 = [v50 tokenSausage];
    uint64_t v52 = ResultStreamWrapper::tokenSausageWithExtendedEndTime(v51, v47);
    uint64_t v53 = [(_EARSpeechRecognitionResultPackage *)v179 preITNRecognition];
    [v53 setTokenSausage:v52];

    uint64_t v54 = [(_EARSpeechRecognitionResultPackage *)v179 unrepairedRecognition];
    unsigned int v55 = [v54 tokenSausage];
    long long v56 = ResultStreamWrapper::tokenSausageWithExtendedEndTime(v55, v47);
    uint64_t v57 = [(_EARSpeechRecognitionResultPackage *)v179 unrepairedRecognition];
    [v57 setTokenSausage:v56];

    [(_EARSpeechRecognitionResultPackage *)v179 setFirstResultAfterResume:0];
    [(_EARSpeechRecognitionResultPackage *)v179 setRecognitionPaused:a26];
    if (*(void *)(a23 + 16))
    {
      std::string::size_type v58 = [v183 prevMuxPackages];
      long long v250 = 0u;
      long long v249 = 0u;
      long long v248 = 0u;
      long long v247 = 0u;
      id v59 = v58;
      uint64_t v60 = [v59 countByEnumeratingWithState:&v247 objects:v275 count:16];
      if (v60)
      {
        uint64_t v61 = *(void *)v248;
        do
        {
          for (uint64_t i = 0; i != v60; ++i)
          {
            if (*(void *)v248 != v61) {
              objc_enumerationMutation(v59);
            }
            uint64_t v63 = *(void *)(*((void *)&v247 + 1) + 8 * i);
            id v64 = [v183 prevMuxPackages];
            int64_t v65 = [v64 objectForKeyedSubscript:v63];

            [v65 setIsFinal:a3];
            long long v66 = [v65 recognition];
            uint64_t v67 = [v66 tokenSausage];
            uint64_t v68 = ResultStreamWrapper::tokenSausageWithExtendedEndTime(v67, v47);
            unint64_t v69 = [v65 recognition];
            [v69 setTokenSausage:v68];

            uint64_t v70 = [v65 preITNRecognition];
            unint64_t v71 = [v70 tokenSausage];
            uint64_t v72 = ResultStreamWrapper::tokenSausageWithExtendedEndTime(v71, v47);
            float v73 = [v65 preITNRecognition];
            [v73 setTokenSausage:v72];

            int v74 = [v65 unrepairedRecognition];
            float v75 = [v74 tokenSausage];
            unsigned __int32 v76 = ResultStreamWrapper::tokenSausageWithExtendedEndTime(v75, v47);
            unsigned int v77 = [v65 unrepairedRecognition];
            [v77 setTokenSausage:v76];
          }
          uint64_t v60 = [v59 countByEnumeratingWithState:&v247 objects:v275 count:16];
        }
        while (v60);
      }
    }
    else
    {
      id v59 = 0;
    }
    id v104 = [v183 prevPackageWithoutPersonalization];
    [v104 setIsFinal:a3];
    unint64_t v105 = [v104 recognition];
    id v177 = v104;
    long long v106 = [v105 tokenSausage];
    id v107 = ResultStreamWrapper::tokenSausageWithExtendedEndTime(v106, v47);
    id v108 = [v104 recognition];
    [v108 setTokenSausage:v107];

    id v109 = [v104 preITNRecognition];
    id v110 = [v109 tokenSausage];
    unint64_t v111 = ResultStreamWrapper::tokenSausageWithExtendedEndTime(v110, v47);
    float v112 = [v104 preITNRecognition];
    [v112 setTokenSausage:v111];

    id v113 = [v104 unrepairedRecognition];
    id v114 = [v113 tokenSausage];
    id v115 = ResultStreamWrapper::tokenSausageWithExtendedEndTime(v114, v47);
    float v116 = [v104 unrepairedRecognition];
    [v116 setTokenSausage:v115];

    [v104 setFirstResultAfterResume:0];
    [v104 setRecognitionPaused:a26];
    v174 = 0;
  }
  else
  {
    v173 = (_EARSpeechRecognitionResult *)*((void *)v35 + 2);
    id v246 = 0;
    uint64_t v78 = (std::__shared_weak_count *)a19[1];
    uint64_t v244 = *a19;
    v245 = v78;
    if (v78) {
      atomic_fetch_add_explicit(&v78->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unsigned __int8 v168 = [v35 detectUtterances];
    unsigned __int8 v166 = [v35 concatenateUtterances];
    __int16 v79 = [v35 itnEnablingFlags];
    unsigned __int8 v80 = [v35 recognizeEmoji];
    id v243 = 0;
    uint64_t v81 = *(void *)(a23 + 16);
    if (v81) {
      uint64_t v82 = &v242;
    }
    else {
      uint64_t v82 = 0;
    }
    if (v81) {
      id v242 = 0;
    }
    int v83 = *((unsigned __int8 *)v180 + 65);
    float v84 = (id *)(v265 + 5);
    obuint64_t j = (id)v265[5];
    id v85 = (id *)(v259 + 5);
    id v240 = (id)v259[5];
    id v239 = 0;
    uint64_t v86 = (void *)v180[9];
    uint64_t v87 = [v180 relevantTextContext];
    [v180 getParser];
    ResultStreamWrapper::resultPackageWithResultChoices(v167, a3, v173, a6, a7, v170, a11, v171, a9, a10, a16, a17, &v246, a18, &v244, v168, v166, a20, a21,
      a22,
      v79,
      v80,
      1,
      &v243,
      a24,
      v82,
      a25,
      a26,
      a27,
      v83 != 0,
      v180 + 6,
      a28,
      (uint64_t)&obj,
      (uint64_t)&v240,
      &v239,
      0,
      0,
      0,
      v86,
      a29,
      v87,
      &v237,
      [v180 isLegacyVoiceCommandRequest]);
    v179 = (_EARSpeechRecognitionResultPackage *)objc_claimAutoreleasedReturnValue();
    v174 = (_EARSpeechRecognitionResult *)v246;
    id v177 = v243;
    if (v81) {
      id v88 = v242;
    }
    else {
      id v88 = 0;
    }
    objc_storeStrong(v84, obj);
    objc_storeStrong(v85, v240);
    id v169 = v239;
    if (v238) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v238);
    }

    if (v245) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v245);
    }
    [(id)v253[5] addObjectsFromArray:v169];
    char v43 = [(_EARSpeechRecognitionResultPackage *)v179 hasNonEmptyToken];
    long long v236 = 0u;
    long long v235 = 0u;
    long long v233 = 0u;
    long long v234 = 0u;
    id v59 = v88;
    uint64_t v89 = [v59 countByEnumeratingWithState:&v233 objects:v274 count:16];
    if (v89)
    {
      uint64_t v90 = *(void *)v234;
      do
      {
        for (uint64_t j = 0; j != v89; ++j)
        {
          if (*(void *)v234 != v90) {
            objc_enumerationMutation(v59);
          }
          unint64_t v92 = [v59 objectForKeyedSubscript:*(void *)(*((void *)&v233 + 1) + 8 * j)];
          char v93 = [v92 hasNonEmptyToken];

          v43 |= v93;
        }
        uint64_t v89 = [v59 countByEnumeratingWithState:&v233 objects:v274 count:16];
      }
      while (v89);
    }

    if (v59)
    {
      id v94 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
      long long v231 = 0u;
      long long v232 = 0u;
      long long v229 = 0u;
      long long v230 = 0u;
      id v95 = v59;
      uint64_t v96 = [v95 countByEnumeratingWithState:&v229 objects:v273 count:16];
      if (v96)
      {
        uint64_t v97 = *(void *)v230;
        do
        {
          for (uint64_t k = 0; k != v96; ++k)
          {
            if (*(void *)v230 != v97) {
              objc_enumerationMutation(v95);
            }
            uint64_t v99 = *(void *)(*((void *)&v229 + 1) + 8 * k);
            uint64_t v100 = [v95 objectForKeyedSubscript:v99];
            id v101 = (void *)[v100 copy];
            [v94 setObject:v101 forKeyedSubscript:v99];
          }
          uint64_t v96 = [v95 countByEnumeratingWithState:&v229 objects:v273 count:16];
        }
        while (v96);
      }

      uint64_t v102 = v94;
    }
    else
    {
      uint64_t v102 = 0;
    }
    [v183 setAnyResults:v43 & 1];
    float v103 = (void *)[(_EARSpeechRecognitionResultPackage *)v179 copy];
    [v183 setPrevPackage:v103];

    [v183 setPrevMuxPackages:v102];
    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v228, __s1.__r_.__value_.__l.__data_, __s1.__r_.__value_.__l.__size_);
    }
    else {
      std::string v228 = __s1;
    }
    [v183 setPrevBestRecogText:&v228];
    if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v228.__r_.__value_.__l.__data_);
    }
    [v183 setPrevPackageWithoutPersonalization:v177];
    if ((a3 & 1) == 0) {
      [v183 incrementCountOfIsFinalFalseAlreadyWritten];
    }
  }
  int v117 = a3 ^ 1;
  if (a15 != 1) {
    int v117 = 1;
  }
  if ((v117 | v172)) {
    int v118 = 0;
  }
  else {
    int v118 = [v180 canCloneIsFinalAsLastNonFinal];
  }
  if (quasar::gLogLevel >= 5)
  {
    if (*(void *)(a23 + 16))
    {
      long long v226 = 0u;
      long long v227 = 0u;
      long long v224 = 0u;
      long long v225 = 0u;
      id v119 = v59;
      uint64_t v120 = [v119 countByEnumeratingWithState:&v224 objects:v272 count:16];
      if (v120)
      {
        uint64_t v121 = *(void *)v225;
        do
        {
          for (uint64_t m = 0; m != v120; ++m)
          {
            if (*(void *)v225 != v121) {
              objc_enumerationMutation(v119);
            }
            unint64_t v123 = *(NSString **)(*((void *)&v224 + 1) + 8 * m);
            id v124 = [v119 objectForKeyedSubscript:v123];
            logPackageToQuasarDebug(v124, v123);
          }
          uint64_t v120 = [v119 countByEnumeratingWithState:&v224 objects:v272 count:16];
        }
        while (v120);
      }
    }
    else
    {
      logPackageToQuasarDebug(v179, 0);
    }
  }
  if ((v43 & 1) != 0 || [(_EARSpeechRecognitionResultPackage *)v179 recognitionPaused])
  {
    if (*(void *)(a23 + 16))
    {
      [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3B8] format:@"Should never get here"];
      goto LABEL_99;
    }
    if ((objc_opt_respondsToSelector() & 1) == 0)
    {
      if (objc_opt_respondsToSelector())
      {
        long long v132 = [(_EARSpeechRecognitionResultPackage *)v179 nBestResults];
        long long v133 = [(_EARSpeechRecognitionResultPackage *)v179 recognition];
        uint64_t v134 = [v133 tokenSausage];
        float v135 = [(_EARSpeechRecognitionResultPackage *)v179 recognition];
        uint64_t v136 = [v135 interpretationIndices];
        [v175 speechRecognizer:v180 didRecognizeFinalResults:v132 tokenSausage:v134 nBestChoices:v136];
      }
      else
      {
        float v137 = [(_EARSpeechRecognitionResultPackage *)v179 nBestResults];
        [v175 speechRecognizer:v180 didRecognizeFinalResults:v137];
      }
LABEL_99:
      if ((v43 & 1) != 0 && (a26 & 1) == 0)
      {
        id v125 = [v180 relevantTextContext];
        long long v126 = [(_EARSpeechRecognitionResultPackage *)v179 recognition];
        long long v127 = [v126 oneBest];
        long long v128 = EARHelpers::EarTokensToNSString(v127);
        [v125 appendToLeftContext:v128];
      }
      goto LABEL_102;
    }
    if (v118)
    {
      long long v131 = (void *)[(_EARSpeechRecognitionResultPackage *)v179 copy];
      [v131 setIsFinal:0];
      [v175 speechRecognizer:v180 didRecognizeFinalResultPackage:v131];
    }
    if (*a30) {
      EARPackageToRHPackage(v179);
    }
    if ([v180 detectUtterances])
    {
      if (![v180 concatenateUtterances] || (a3 & 1) != 0)
      {
LABEL_142:
        if (v183)
        {
          [v183 partialResults];
        }
        else
        {
          __p[1] = 0;
          __p[0] = 0;
          *(void *)&long long v215 = 0;
        }
        float v142 = *v167;
        uint64_t v143 = v167[1];
        *(void *)&long long v211 = 0;
        v210[0] = 0;
        v210[1] = 0;
        if (v142 != v143) {
          std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v210, *v142, v142[1], 0x6DB6DB6DB6DB6DB7 * ((v142[1] - *v142) >> 5));
        }
        -[_EARSpeechRecognitionResultPackage setCorrectPartialResultIndexList:oneBestFinalResult:partialResultIndexOffset:](v179, "setCorrectPartialResultIndexList:oneBestFinalResult:partialResultIndexOffset:", __p, v210, [v183 partialResultIndexOffset]);
        v223[0] = v210;
        std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](v223);
        v210[0] = __p;
        std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)v210);
      }
    }
    else if (a3)
    {
      goto LABEL_142;
    }
    [v175 speechRecognizer:v180 didRecognizeFinalResultPackage:v179];
    goto LABEL_99;
  }
LABEL_102:
  if ([v180 detectUtterances] && (objc_msgSend(v180, "concatenateUtterances") & 1) == 0)
  {
    [v183 updateLoggableResultWithCurrentResult:v167 currentCosts:a2 startMilliseconds:a11];
    [v183 resetPartialResultContext];
  }
  long long v129 = [(_EARSpeechRecognitionResult *)v174 tokens];
  if ([v129 count])
  {
    BOOL v130 = [(_EARSpeechRecognitionResultPackage *)v179 recognitionPaused];

    if (!v130)
    {
      if (*a30) {
        EARResultToRHPackage(v174);
      }
      [v175 speechRecognizer:v180 didRecognizePartialResult:v174];
      if (v174)
      {
        [(_EARSpeechRecognitionResult *)v174 quasarPreItnTokens];
      }
      else
      {
        __p[1] = 0;
        __p[0] = 0;
        *(void *)&long long v215 = 0;
      }
      [v183 addPartialResultToContext:__p];
      v210[0] = __p;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v210);
    }
  }
  else
  {
  }
  if (a3)
  {
    if (*(void *)(a23 + 16))
    {
      [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3B8] format:@"Should never get here"];
      goto LABEL_129;
    }
    if (!v179 || (objc_opt_respondsToSelector() & 1) == 0) {
      goto LABEL_129;
    }
    if (![v180 detectUtterances] || (objc_msgSend(v180, "concatenateUtterances") & 1) != 0)
    {
      [v175 speechRecognizer:v180 didProduceLoggablePackage:v177];
LABEL_129:
      float v138 = [v180 recognitionMetrics];
      [v138 addPauseDurationMetric];

      BOOL v139 = [v180 recognitionMetrics];
      [v139 addItnRunIntervals:v253[5]];

      if (v265[5] && v259[5])
      {
        uint64_t v140 = [v180 recognitionMetrics];
        [v140 addEmojiRecognitionMetrics:v265[5] recognizedEmojis:v259[5]];
      }
      uint64_t v141 = [v180 relevantTextContext];
      [v141 reset];

      [v175 speechRecognizer:v180 didFinishRecognitionWithError:0];
      [v183 resetPartialResultContext];
      goto LABEL_133;
    }
    if (v183) {
      [v183 loggableConcatResult];
    }
    else {
      memset(v223, 0, sizeof(v223));
    }
    if (v265[5] && v259[5])
    {
      float v144 = (void *)v180[2];
      long long v221 = 0u;
      long long v222 = 0u;
      long long v219 = 0u;
      long long v220 = 0u;
      long long v217 = 0u;
      long long v218 = 0u;
      long long v215 = 0u;
      long long v216 = 0u;
      *(_OWORD *)std::string __p = 0u;
      long long v211 = 0u;
      long long v212 = 0u;
      *(_OWORD *)v210 = 0u;
      uint64_t v213 = 1065353216;
      uint64_t v208 = 0;
      uint64_t v207 = 0;
      uint64_t v209 = 0;
      id v206 = 0;
      v205 = 0;
      uint64_t v204 = 0;
      unsigned __int8 v145 = [v180 detectUtterances];
      unsigned __int8 v146 = [v180 concatenateUtterances];
      uint64_t v202 = 0;
      v201 = 0;
      uint64_t v203 = 0;
      __int16 v147 = [v180 itnEnablingFlags];
      unsigned __int8 v148 = [v180 recognizeEmoji];
      v198 = 0;
      uint64_t v199 = 0;
      uint64_t v200 = 0;
      v195 = 0;
      uint64_t v196 = 0;
      uint64_t v197 = 0;
      int v149 = *((unsigned __int8 *)v180 + 65);
      v193 = 0;
      id v194 = 0;
      long long v150 = (void *)v180[9];
      v192 = 0;
      ResultStreamWrapper::resultPackageWithResultChoices(v223, 1u, v144, (uint64_t)__p, (unsigned __int8 *)v210, v170, 0, v171, -1000.0, 9.0, 0, (uint64_t)&v207, &v206, 0, &v204, v145, v146, a20, a21,
        (uint64_t)&v201,
        v147,
        v148,
        0,
        0,
        &v198,
        0,
        a25,
        a26,
        (uint64_t)&v195,
        v149 != 0,
        v180 + 6,
        a28,
        0,
        0,
        &v194,
        0,
        0,
        0,
        v150,
        0,
        0,
        &v192,
      long long v151 = [v180 isLegacyVoiceCommandRequest]);
      id v152 = v206;
      id v153 = v194;
      if (v193) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v193);
      }
      v271 = (void ***)&v195;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v271);
      v195 = &v198;
      std::vector<std::set<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v195);
      v198 = &v201;
      std::vector<quasar::ItnOverride>::__destroy_vector::operator()[abi:ne180100]((void ***)&v198);
      long long v154 = v205;
      if (!v205) {
        goto LABEL_162;
      }
    }
    else
    {
      long long v155 = (void *)v180[2];
      long long v221 = 0u;
      long long v222 = 0u;
      long long v219 = 0u;
      long long v220 = 0u;
      long long v217 = 0u;
      long long v218 = 0u;
      long long v215 = 0u;
      long long v216 = 0u;
      *(_OWORD *)std::string __p = 0u;
      long long v211 = 0u;
      long long v212 = 0u;
      *(_OWORD *)v210 = 0u;
      uint64_t v213 = 1065353216;
      uint64_t v208 = 0;
      uint64_t v207 = 0;
      uint64_t v209 = 0;
      v190 = 0;
      id v191 = 0;
      uint64_t v189 = 0;
      unsigned __int8 v156 = [v180 detectUtterances];
      unsigned __int8 v157 = [v180 concatenateUtterances];
      v182 = v155;
      uint64_t v202 = 0;
      v201 = 0;
      uint64_t v203 = 0;
      __int16 v158 = [v180 itnEnablingFlags];
      unsigned __int8 v159 = [v180 recognizeEmoji];
      v198 = 0;
      uint64_t v199 = 0;
      uint64_t v200 = 0;
      v195 = 0;
      uint64_t v196 = 0;
      uint64_t v197 = 0;
      long long v161 = (id *)(v265 + 5);
      long long v160 = (void *)v265[5];
      long long v162 = (id *)(v259 + 5);
      int v163 = *((unsigned __int8 *)v180 + 65);
      id v187 = (id)v259[5];
      id v188 = v160;
      v185 = 0;
      id v186 = 0;
      long long v164 = (void *)v180[9];
      v184 = 0;
      ResultStreamWrapper::resultPackageWithResultChoices(v223, 1u, v182, (uint64_t)__p, (unsigned __int8 *)v210, v170, 0, v171, -1000.0, 9.0, 0, (uint64_t)&v207, &v191, 0, &v189, v156, v157, a20, a21,
        (uint64_t)&v201,
        v158,
        v159,
        0,
        0,
        &v198,
        0,
        a25,
        a26,
        (uint64_t)&v195,
        v163 != 0,
        v180 + 6,
        a28,
        (uint64_t)&v188,
        (uint64_t)&v187,
        &v186,
        0,
        0,
        0,
        v164,
        0,
        0,
        &v184,
      long long v151 = [v180 isLegacyVoiceCommandRequest]);
      id v152 = v191;
      objc_storeStrong(v161, v188);
      objc_storeStrong(v162, v187);
      id v153 = v186;
      if (v185) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v185);
      }
      v271 = (void ***)&v195;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v271);
      v195 = &v198;
      std::vector<std::set<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v195);
      v198 = &v201;
      std::vector<quasar::ItnOverride>::__destroy_vector::operator()[abi:ne180100]((void ***)&v198);
      long long v154 = v190;
      if (!v190) {
        goto LABEL_162;
      }
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v154);
LABEL_162:
    v201 = (void **)&v207;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v201);
    if (SHIBYTE(v211) < 0) {
      operator delete(v210[1]);
    }
    quasar::AudioAnalytics::~AudioAnalytics((quasar::AudioAnalytics *)__p);
    [(id)v253[5] addObjectsFromArray:v153];
    if (v151) {
      [v175 speechRecognizer:v180 didProduceLoggablePackage:v151];
    }

    __p[0] = v223;
    std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    goto LABEL_129;
  }
LABEL_133:
  _Block_object_dispose(&v252, 8);

  _Block_object_dispose(&v258, 8);
  _Block_object_dispose(&v264, 8);

  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s1.__r_.__value_.__l.__data_);
  }
}

void sub_1B1BC6D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,void *a46,uint64_t a47,uint64_t a48,void *a49,void *a50,uint64_t a51,void *a52,void *a53,void *a54,uint64_t a55,void *a56)
{
  _Block_object_dispose(&STACK[0x500], 8);

  _Block_object_dispose(&STACK[0x530], 8);
  _Block_object_dispose(&STACK[0x560], 8);

  if (SLOBYTE(STACK[0x5A7]) < 0) {
    operator delete((void *)STACK[0x590]);
  }

  _Unwind_Resume(a1);
}

void quasar::AudioAnalytics::~AudioAnalytics(quasar::AudioAnalytics *this)
{
  uint64_t v2 = (void *)*((void *)this + 12);
  if (v2)
  {
    *((void *)this + 13) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 8);
  if (v3)
  {
    *((void *)this + 9) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 4);
  if (v4)
  {
    *((void *)this + 5) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v5;
    operator delete(v5);
  }
}

void EARContinuousListeningResultHelper::writeFinalCandidateImpl(uint64_t a1, void *a2, uint64_t a3, unsigned int a4, int a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, char a10, char a11)
{
  EARContinuousListeningResultHelper::setParser((EARContinuousListeningResultHelper *)a1);
  memset(v47, 0, sizeof(v47));
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 256));
  id v24 = objc_loadWeakRetained((id *)(a1 + 264));
  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v38 = 0u;
  long long v36 = 0u;
  *(_OWORD *)std::string __p = 0u;
  long long v35 = 0u;
  uint64_t v37 = 1065353216;
  uint64_t v16 = *(void **)(a1 + 280);
  uint64_t v15 = *(void **)(a1 + 288);
  quasar::ContinuousListeningResultHelper::getContinuousListeningConfig(a1, &v32);
  memset(v31, 0, sizeof(v31));
  v30[0] = 0;
  v30[1] = 0;
  id v29 = v30;
  memset(v28, 0, sizeof(v28));
  uint64_t v17 = *(std::__shared_weak_count **)(a1 + 304);
  uint64_t v26 = *(void *)(a1 + 296);
  int v27 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  id v18 = objc_loadWeakRetained((id *)(a1 + 272));
  LODWORD(v19) = a5;
  ResultStreamWrapper::writeFinalCandidateChoicesToResultStream(a2, -1000.0, 9.0, a3, WeakRetained, v24, (uint64_t)&v38, (unsigned __int8 *)__p, v16, a4, v19, v15, a6, 0, &v32, a7, v47, (uint64_t)v31, (uint64_t)&v29,
    v28,
    a8,
    a9,
    a10,
    a11,
    0,
    &v26,
    v18);

  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  uint64_t v48 = (void **)v28;
  std::vector<std::set<std::string>>::__destroy_vector::operator()[abi:ne180100](&v48);
  std::__tree<std::string>::destroy((uint64_t)&v29, v30[0]);
  id v29 = (char **)v31;
  std::vector<quasar::ItnOverride>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  if (SHIBYTE(v35) < 0) {
    operator delete(__p[1]);
  }
  if ((void)v44)
  {
    *((void *)&v44 + 1) = v44;
    operator delete((void *)v44);
  }
  if ((void)v42)
  {
    *((void *)&v42 + 1) = v42;
    operator delete((void *)v42);
  }
  if ((void)v40)
  {
    *((void *)&v40 + 1) = v40;
    operator delete((void *)v40);
  }
  if ((void)v38)
  {
    *((void *)&v38 + 1) = v38;
    operator delete((void *)v38);
  }

  *(void *)&long long v38 = v47;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
}

void sub_1B1BC7604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,void *a29,uint64_t a30,std::__shared_weak_count *a31,char a32,uint64_t a33,uint64_t a34,char *a35,char *a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,std::__shared_weak_count *a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54)
{
  if (a31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a31);
  }
  *(void *)(v55 - 104) = &a32;
  std::vector<std::set<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v55 - 104));
  std::__tree<std::string>::destroy((uint64_t)&a35, a36);
  a35 = &a38;
  std::vector<quasar::ItnOverride>::__destroy_vector::operator()[abi:ne180100]((void ***)&a35);
  if (a42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a42);
  }
  if (a49 < 0) {
    operator delete(__p);
  }
  quasar::AudioAnalytics::~AudioAnalytics((quasar::AudioAnalytics *)&a54);

  a54 = v55 - 128;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a54);
  _Unwind_Resume(a1);
}

void ResultStreamWrapper::writeFinalCandidateChoicesToResultStream(void *a1, double a2, double a3, uint64_t a4, void *a5, void *a6, uint64_t a7, unsigned __int8 *a8, void *a9, unsigned int a10, uint64_t a11, void *a12, uint64_t a13, char a14, uint64_t *a15, uint64_t a16, uint64_t *a17, uint64_t a18, uint64_t a19, void *a20,char a21,uint64_t a22,char a23,char a24,int a25,uint64_t *a26,void *a27)
{
  id v31 = a5;
  id v55 = a6;
  id v58 = a9;
  id v57 = a12;
  id v54 = a27;
  if (*(void *)(a19 + 16))
  {
    double v47 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v48 = objc_msgSend(NSString, "stringWithUTF8String:", "static void ResultStreamWrapper::writeFinalCandidateChoicesToResultStream(const std::vector<std::vector<Token>> &, const std::vector<double> &, _EARSpeechRecognizer *__strong, __strong id<_EARSpeechRecognitionResultStream>, const AudioAnalytics &, const LatnnMitigatorResult &, const double, NSString *__strong, const unsigned int, const unsigned int, NSString *__strong, const std::vector<Token> &, BOOL, std::shared_ptr<ContinuousListeningConfig>, const std::vector<Token> &, std::vector<std::vector<Token>> &, const std::vector<quasar::ItnOverride> &, const std::set<std::string> &, const std::vector<std::set<std::string>> &, BOOL, const std::vector<quasar::Token> &, double, BOOL, BOOL, int, std::shared_ptr<result_handler::ResultHandler>, _EARResultContext *__strong)");
    [v47 handleFailureInFunction:v48 file:@"EARSpeechRecognizer.mm" lineNumber:3028 description:@"Mux is not supported for candidate packages"];
  }
  if (*a20 != a20[1])
  {
    uint64_t v49 = [MEMORY[0x1E4F28B00] currentHandler];
    BOOL v50 = objc_msgSend(NSString, "stringWithUTF8String:", "static void ResultStreamWrapper::writeFinalCandidateChoicesToResultStream(const std::vector<std::vector<Token>> &, const std::vector<double> &, _EARSpeechRecognizer *__strong, __strong id<_EARSpeechRecognitionResultStream>, const AudioAnalytics &, const LatnnMitigatorResult &, const double, NSString *__strong, const unsigned int, const unsigned int, NSString *__strong, const std::vector<Token> &, BOOL, std::shared_ptr<ContinuousListeningConfig>, const std::vector<Token> &, std::vector<std::vector<Token>> &, const std::vector<quasar::ItnOverride> &, const std::set<std::string> &, const std::vector<std::set<std::string>> &, BOOL, const std::vector<quasar::Token> &, double, BOOL, BOOL, int, std::shared_ptr<result_handler::ResultHandler>, _EARResultContext *__strong)");
    [v49 handleFailureInFunction:v50 file:@"EARSpeechRecognizer.mm" lineNumber:3029 description:@"Mux is not supported for candidate packages"];
  }
  dispatch_assert_queue_V2(v31[1]);
  dispatch_queue_t v32 = v31[2];
  uint64_t v33 = (std::__shared_weak_count *)a15[1];
  uint64_t v63 = *a15;
  id v64 = v33;
  if (v33) {
    atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned __int8 v34 = [(dispatch_queue_t *)v31 detectUtterances];
  unsigned __int8 v35 = [(dispatch_queue_t *)v31 concatenateUtterances];
  __int16 v36 = [(dispatch_queue_t *)v31 itnEnablingFlags];
  unsigned __int8 v37 = [(dispatch_queue_t *)v31 recognizeEmoji];
  id v61 = 0;
  id v62 = 0;
  int v38 = *((unsigned __int8 *)v31 + 65);
  dispatch_queue_t v39 = v31[9];
  long long v40 = [(dispatch_queue_t *)v31 relevantTextContext];
  [(dispatch_queue_t *)v31 getParser];
  ResultStreamWrapper::resultPackageWithResultChoices(a1, 0, v32, a7, a8, v58, a10, v57, a2, a3, 0, a13, 0, a14, &v63, v34, v35, a16, a17,
    a18,
    v36,
    v37,
    0,
    &v62,
    a20,
    0,
    a21,
    0,
    a22,
    v38 != 0,
    v31 + 6,
    0,
    0,
    0,
    &v61,
    a23,
    0,
    a24,
    v39,
    a25,
    v40,
    &v59,
    [(dispatch_queue_t *)v31 isLegacyVoiceCommandRequest]);
  long long v41 = (_EARSpeechRecognitionResultPackage *)objc_claimAutoreleasedReturnValue();
  id v42 = v62;
  id v43 = v61;
  if (v60) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v60);
  }

  if (v64) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v64);
  }
  BOOL v44 = [(_EARSpeechRecognitionResultPackage *)v41 hasNonEmptyToken];
  if (quasar::gLogLevel > 4) {
    logPackageToQuasarDebug(v41, 0);
  }
  if (v44)
  {
    uint64_t v45 = *a26;
    if (a23)
    {
      if (v45) {
        EARPackageToRHPackage(v41);
      }
      if (objc_opt_respondsToSelector()) {
        [v55 speechRecognizer:v31 didRecognizeVoiceCommandCandidatePackage:v41];
      }
    }
    else
    {
      if (v45) {
        EARPackageToRHPackage(v41);
      }
      if (objc_opt_respondsToSelector()) {
        [v55 speechRecognizer:v31 didRecognizeFinalResultCandidatePackage:v41];
      }
    }
  }
  long long v46 = [(dispatch_queue_t *)v31 recognitionMetrics];
  [v46 addItnRunIntervals:v43];
}

void sub_1B1BC7B3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ConvertCXXExceptionToNSException(void *a1)
{
  uint64_t v1 = a1;
  v1[2]();
}

uint64_t ConvertCXXExceptionToNSError(void *a1)
{
  uint64_t v1 = a1;
  v1[2]();

  return 1;
}

uint64_t EARErrorCodeForExceptionMessage(NSString *a1)
{
  uint64_t v1 = a1;
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2020000000;
  uint64_t v11 = 200;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  void v5[2] = ___ZL31EARErrorCodeForExceptionMessageP8NSString_block_invoke;
  uint64_t v5[3] = &unk_1E5FFE668;
  uint64_t v6 = v1;
  uint64_t v7 = &v8;
  uint64_t v2 = v1;
  [&unk_1F0A74130 enumerateKeysAndObjectsUsingBlock:v5];
  uint64_t v3 = v9[3];

  _Block_object_dispose(&v8, 8);
  return v3;
}

void sub_1B1BC8298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, ...)
{
  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id EARErrorWithCode(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = [MEMORY[0x1E4F1C9E8] dictionaryWithObject:v3 forKey:*MEMORY[0x1E4F28568]];
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t v5 = [MEMORY[0x1E4F28C58] errorWithDomain:@"EARErrorDomain" code:a1 userInfo:v4];

  return v5;
}

void sub_1B1BC8394(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B1BC8440(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1B1BC850C(_Unwind_Exception *a1)
{
  uint64_t v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1B1BC91A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37)
{
  _Block_object_dispose(&STACK[0x288], 8);
  _Block_object_dispose((const void *)(v41 - 208), 8);
  a37 = a21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a37);

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__523(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__524(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void sub_1B1BC9624(_Unwind_Exception *__p, uint64_t a2, int a3, __int16 a4, char a5, char a6, std::__split_buffer<std::wstring> *a7, uint64_t a8, void *__pa, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&a15);
  if (a14 < 0) {
    operator delete(__pa);
  }

  _Unwind_Resume(__p);
}

void sub_1B1BC98C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char *a18)
{
  quasar::SpeechRecognizerActiveConfiguration::~SpeechRecognizerActiveConfiguration(&a18);
  _Unwind_Resume(a1);
}

void sub_1B1BC9934(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1B1BC992CLL);
}

void sub_1B1BC9A08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1B1BC9AAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B1BC9FC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id a15, uint64_t a16, uint64_t a17, uint64_t a18, char *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,char a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,char *a56)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  std::string __p = &a25;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  a56 = &a46;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a56);
  a56 = (char *)&a49;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a56);
  _Unwind_Resume(a1);
}

void sub_1B1BCA1C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B1BCA3D0(_Unwind_Exception *a1)
{
  uint64_t v9 = v8;

  _Unwind_Resume(a1);
}

void sub_1B1BCA6B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1B1BCA764(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B1BCA8D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B1BCAAA0(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a2 == 4)
  {
    uint64_t v8 = (EARLogger *)__cxa_begin_catch(exception_object);
    uint64_t v9 = EARLogger::QuasarOSLogger(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT)) {
      -[_EARSpeechRecognizer loadParser]();
    }

    __cxa_rethrow();
  }
  if (a2 == 3)
  {
    id v3 = (EARLogger *)__cxa_begin_catch(exception_object);
    uint64_t v4 = EARLogger::QuasarOSLogger(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)) {
      -[_EARSpeechRecognizer loadParser]();
    }
  }
  else
  {
    uint64_t v5 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      uint64_t v6 = v5;
      uint64_t v7 = EARLogger::QuasarOSLogger(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT)) {
        -[_EARSpeechRecognizer loadParser]();
      }

      __cxa_end_catch();
LABEL_18:
      JUMPOUT(0x1B1BCAA6CLL);
    }
    uint64_t v4 = EARLogger::QuasarOSLogger((EARLogger *)v5);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)) {
      -[_EARSpeechRecognizer loadParser].cold.4();
    }
  }

  __cxa_end_catch();
  goto LABEL_18;
}

void sub_1B1BCB0CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B1BCB180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B1BCB280(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B1BCB2FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B1BCB36C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B1BCB934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, void *a12, uint64_t a13, void *a14, void *a15, uint64_t a16, void *a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1B1BCBB40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B1BCBCE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B1BCC024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (__p) {
    quasar::artifact::CreatePhraseCountsArtifact();
  }
  quasar::LmeDataStreams::~LmeDataStreams((char **)(v28 - 80));

  _Unwind_Resume(a1);
}

void sub_1B1BCC108()
{
}

void addAotLmeStreams(void **a1, void *a2, void *a3)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  char v22 = v5;
  if (v5)
  {
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    obuint64_t j = v5;
    uint64_t v7 = [obj countByEnumeratingWithState:&v30 objects:v34 count:16];
    if (!v7) {
      goto LABEL_31;
    }
    uint64_t v8 = *(void *)v31;
    while (1)
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v31 != v8) {
          objc_enumerationMutation(obj);
        }
        uint64_t v10 = *(void **)(*((void *)&v30 + 1) + 8 * i);
        uint64_t v11 = NSString;
        uint64_t v12 = objc_msgSend(v10, "userId", v22);
        uint64_t v13 = v12;
        if (v12)
        {
          objc_msgSend(v12, "ear_toString");
          uint64_t v14 = HIBYTE(v29);
          uint64_t v15 = (void **)__p;
          uint64_t v16 = v28;
        }
        else
        {
          uint64_t v16 = 0;
          uint64_t v15 = 0;
          uint64_t v14 = 0;
          std::string __p = 0;
          uint64_t v28 = 0;
          uint64_t v29 = 0;
        }
        if ((v14 & 0x80u) == 0) {
          p_p = &__p;
        }
        else {
          p_p = v15;
        }
        if ((v14 & 0x80u) == 0) {
          uint64_t v18 = v14;
        }
        else {
          uint64_t v18 = v16;
        }
        uint64_t v19 = objc_msgSend(v11, "ear_stringWithStringView:", p_p, v18);
        if (SHIBYTE(v29) < 0) {
          operator delete(__p);
        }

        uint64_t v20 = [v6 objectForKeyedSubscript:v19];
        uint64_t v21 = (void *)v20;
        if (v10)
        {
          [v10 lmeData];
          if (v21) {
            goto LABEL_20;
          }
        }
        else
        {
          long long v25 = 0uLL;
          if (v20)
          {
LABEL_20:
            objc_msgSend(v21, "ear_toString");
            goto LABEL_23;
          }
        }
        std::string __p = 0;
        uint64_t v28 = 0;
        uint64_t v29 = 0;
LABEL_23:
        unsigned int v24 = 0;
        std::allocate_shared[abi:ne180100]<quasar::LmeContainer,std::allocator<quasar::LmeContainer>,std::shared_ptr<quasar::LmeData const>,std::string,quasar::LmeDataFactoryBase::LmeType,void>(&v25, (uint64_t)&__p, &v24, &v26);
        quasar::LmeDataStreams::addLmeContainer(a1, 0, &v26);
        if (*((void *)&v26 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v26 + 1));
        }
        if (SHIBYTE(v29) < 0) {
          operator delete(__p);
        }
        if (*((void *)&v25 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v25 + 1));
        }
      }
      uint64_t v7 = [obj countByEnumeratingWithState:&v30 objects:v34 count:16];
      if (!v7)
      {
LABEL_31:

        break;
      }
    }
  }
}

void sub_1B1BCC35C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  _Unwind_Resume(a1);
}

uint64_t *__copy_helper_block_ea8_40c29_ZTSN6quasar14LmeDataStreamsE(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  id v3 = a1 + 5;
  a1[7] = 0;
  std::vector<quasar::LmeDataFactoryBase::LmeType>::__init_with_size[abi:ne180100]<quasar::LmeDataFactoryBase::LmeType*,quasar::LmeDataFactoryBase::LmeType*>(a1 + 5, *(const void **)(a2 + 40), *(void *)(a2 + 48), (uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 2);
  return std::map<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>::map[abi:ne180100](v3 + 3, a2 + 64);
}

void sub_1B1BCC47C(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 48) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_ea8_40c29_ZTSN6quasar14LmeDataStreamsE(uint64_t a1)
{
  std::__tree<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,std::__map_value_compare<quasar::LmeDataFactoryBase::LmeType,std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,std::less<quasar::LmeDataFactoryBase::LmeType>,true>,std::allocator<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>>>::destroy(a1 + 64, *(char **)(a1 + 72));
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void quasar::LmeDataStreams::~LmeDataStreams(char **this)
{
  std::__tree<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,std::__map_value_compare<quasar::LmeDataFactoryBase::LmeType,std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,std::less<quasar::LmeDataFactoryBase::LmeType>,true>,std::allocator<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>>>::destroy((uint64_t)(this + 3), this[4]);
  uint64_t v2 = *this;
  if (*this)
  {
    this[1] = v2;
    operator delete(v2);
  }
}

void sub_1B1BCC7E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (__p) {
    quasar::artifact::CreatePhraseCountsArtifact();
  }
  quasar::LmeDataStreams::~LmeDataStreams((char **)(v28 - 80));

  _Unwind_Resume(a1);
}

void sub_1B1BCC8C4()
{
}

void sub_1B1BCCB54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, void *a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  _Block_object_dispose(&a21, 8);
  _Unwind_Resume(a1);
}

void sub_1B1BCCD88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B1BCCE70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B1BCE544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (v71) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v71);
  }
  STACK[0x2C0] = (unint64_t)&a65;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2C0]);
  a65 = (void **)&a68;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a65);
  if (SLOBYTE(STACK[0x207]) < 0) {
    operator delete(__p);
  }
  if (SLOBYTE(STACK[0x2BF]) < 0) {
    operator delete((void *)STACK[0x2A8]);
  }
  STACK[0x2A8] = (unint64_t)&STACK[0x210];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2A8]);
  STACK[0x2A8] = (unint64_t)&STACK[0x230];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2A8]);
  std::promise<quasar::Location>::~promise((uint64_t *)&STACK[0x208]);
  quasar::LmeDataStreams::~LmeDataStreams((char **)&STACK[0x268]);

  _Unwind_Resume(a1);
}

BOOL ResultStreamWrapper::hasInterUtteranceLeftContext(ResultStreamWrapper *this)
{
  uint64_t v2 = (void *)*((void *)this + 10);
  if (!v2) {
    return 0;
  }
  [v2 continuousListeningResultHelper];
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (!v8) {
    return 0;
  }
  id v3 = (void *)*((void *)this + 10);
  if (v3)
  {
    [v3 continuousListeningResultHelper];
    id v3 = v6;
  }
  else
  {
    uint64_t v7 = 0;
  }
  quasar::ContinuousListeningResultHelper::getContinuousListeningConfig((uint64_t)v3, &v8);
  BOOL v4 = *(unsigned char *)(v8 + 12) != 0;
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  return v4;
}

void sub_1B1BCEBC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

__n128 __Block_byref_object_copy__586(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  return result;
}

void __Block_byref_object_dispose__587(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void _EARSpeechRecognizerExecutor(void *a1, void (*a2)(void *), void *a3)
{
  id v3 = a1[20];
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = ___ZL28_EARSpeechRecognizerExecutorPvPFvS_ES__block_invoke;
  uint64_t v4[3] = &__block_descriptor_48_e5_v8__0l;
  v4[4] = a2;
  v4[5] = a3;
  dispatch_async(v3, v4);
}

uint64_t __copy_helper_block_ea8_48c51_ZTSNSt3__110shared_ptrIN6quasar14RunAsyncParamsEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 56);
  *(void *)(result + 48) = *(void *)(a2 + 48);
  *(void *)(result + 56) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_ea8_48c51_ZTSNSt3__110shared_ptrIN6quasar14RunAsyncParamsEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void sub_1B1BCEEA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v15);

  _Unwind_Resume(a1);
}

void sub_1B1BCF038(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B1BCF794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__593(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  return result;
}

void __Block_byref_object_dispose__594(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void sub_1B1BCFAAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1B1BCFD14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void getModelFilesWithSuffix(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  long long v16 = 0u;
  long long v17 = 0u;
  int v18 = 1065353216;
  quasar::SystemConfig::SystemConfig((quasar::SystemConfig *)v15, a1, &v12, (uint64_t)&v16);
  id v5 = (void ***)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v16);
  *(void *)&long long v16 = &v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v5);
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  *(void *)&long long v16 = &unk_1F0A5A758;
  *((void *)&v16 + 1) = a2;
  *((void *)&v17 + 1) = &v16;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  Ptree = (quasar::PTree *)quasar::SystemConfig::getPtree((uint64_t)v15, (uint64_t)&__p);
  quasar::findLeafValuesWithCondition(Ptree, (uint64_t)&v16, &v12);
  if (v11 < 0) {
    operator delete(__p);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v7 = v12;
  if (v12 != v13)
  {
    std::string::basic_string[abi:ne180100]<0>(v9, ":,");
    quasar::splitStringSimple(v7, (uint64_t *)v9, (unint64_t)&__p);
  }
  uint64_t v8 = (void ***)std::__function::__value_func<BOOL ()(std::string const&)>::~__value_func[abi:ne180100](&v16);
  *(void *)&long long v16 = &v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v8);
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)v15);
}

void sub_1B1BCFF38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24)
{
  long long v26 = (void ***)std::__function::__value_func<BOOL ()(std::string const&)>::~__value_func[abi:ne180100]((void *)(v24 - 112));
  *(void *)(v24 - 112) = &a21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v26);
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)&a24);
  _Unwind_Resume(a1);
}

void sub_1B1BD0538(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,char *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  if (a2)
  {
    if (a26 < 0) {
      operator delete(__p);
    }
    if (a32 < 0) {
      operator delete(a27);
    }
    quasar::ModelLoader::~ModelLoader((quasar::ModelLoader *)&a48);
    a48 = &a41;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a48);
    id v55 = (EARLogger *)__cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      uint64_t v56 = (uint64_t)v55;
      id v57 = EARLogger::QuasarOSLogger(v55);
      if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR)) {
        +[_EARSpeechRecognizer compileRecognizerModels2WithConfiguration:error:](v56, v57);
      }
    }
    else
    {
      id v57 = EARLogger::QuasarOSLogger(v55);
      if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR)) {
        +[_EARSpeechRecognizer compileRecognizerModels2WithConfiguration:error:]();
      }
    }

    __cxa_end_catch();
    JUMPOUT(0x1B1BD0400);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B1BD0AB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B1BD0E24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,uint64_t a34,uint64_t a35,char *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a2)
  {
    if (a19 < 0) {
      operator delete(__p);
    }
    if (a25 < 0) {
      operator delete(a20);
    }
    quasar::ModelLoader::~ModelLoader((quasar::ModelLoader *)&a36);
    a36 = &a33;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a36);
    id v43 = (EARLogger *)__cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      uint64_t v44 = (uint64_t)v43;
      uint64_t v45 = EARLogger::QuasarOSLogger(v43);
      if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR)) {
        +[_EARSpeechRecognizer compileRecognizerModels2WithConfiguration:error:](v44, v45);
      }
    }
    else
    {
      uint64_t v45 = EARLogger::QuasarOSLogger(v43);
      if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR)) {
        +[_EARSpeechRecognizer purgeCompiledRecognizerModelsWithConfiguration:]();
      }
    }

    __cxa_end_catch();
    JUMPOUT(0x1B1BD0DE0);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B1BD13C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, char a13, void *a14, uint64_t a15, char a16, char *a17)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a13, a14);
  std::__tree<std::string>::destroy((uint64_t)&a16, a17);
  _Unwind_Resume(a1);
}

void sub_1B1BD15B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, char a13, void *a14, uint64_t a15, char a16, char *a17)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a13, a14);
  std::__tree<std::string>::destroy((uint64_t)&a16, a17);
  _Unwind_Resume(a1);
}

void sub_1B1BD16A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  quasar::PTree::~PTree((quasar::PTree *)&a10);
  a10 = (void **)(v10 - 40);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void sub_1B1BD1830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1B1BD18EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9)
{
}

void sub_1B1BD197C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

void sub_1B1BD1A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

void sub_1B1BD2038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49)
{
  a49 = &a23;
  std::vector<std::vector<std::vector<quasar::Token>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a49);

  _Unwind_Resume(a1);
}

void sub_1B1BD2318(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B1BD27C4(_Unwind_Exception *a1, id *location, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, void *a9, id *locationa, char a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30,id *__pa,uint64_t a32,uint64_t a33,uint64_t a34,std::__split_buffer<std::wstring> *a35)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a34);
  *(void *)(v35 - 2++*(_DWORD *)(result + 24) = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v35 - 224));
  __pa = &a19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&__pa);

  objc_destroyWeak(locationa);
  objc_destroyWeak(&a30);

  _Unwind_Resume(a1);
}

void sub_1B1BD2948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B1BD2AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B1BD2F94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  if (a61 < 0) {
    operator delete(__p);
  }
  quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&a18);

  _Unwind_Resume(a1);
}

void sub_1B1BD33BC(_Unwind_Exception *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, void *__p, uint64_t a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t *__pa, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__split_buffer<std::wstring> *a19)
{
  __pa = &a11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);

  __pa = (uint64_t *)a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);

  _Unwind_Resume(a1);
}

void sub_1B1BD3564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B1BD3B6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t quasar::SpeechModelInfo::operator=(uint64_t a1, uint64_t a2)
{
  std::string::operator=((std::string *)a1, (const std::string *)a2);
  std::string::operator=((std::string *)(a1 + 24), (const std::string *)(a2 + 24));
  if (a1 == a2)
  {
    std::string::operator=((std::string *)(a1 + 120), (const std::string *)(a2 + 120));
    std::string::operator=((std::string *)(a1 + 144), (const std::string *)(a2 + 144));
    std::string::operator=((std::string *)(a1 + 168), (const std::string *)(a2 + 168));
  }
  else
  {
    std::__tree<int>::__assign_multi<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>((uint64_t **)(a1 + 48), *(int **)(a2 + 48), (int *)(a2 + 56));
    std::__tree<std::string>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>((uint64_t **)(a1 + 72), *(void **)(a2 + 72), (void *)(a2 + 80));
    std::__tree<std::string>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>((uint64_t **)(a1 + 96), *(void **)(a2 + 96), (void *)(a2 + 104));
    std::string::operator=((std::string *)(a1 + 120), (const std::string *)(a2 + 120));
    std::string::operator=((std::string *)(a1 + 144), (const std::string *)(a2 + 144));
    std::string::operator=((std::string *)(a1 + 168), (const std::string *)(a2 + 168));
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)(a1 + 192), *(long long **)(a2 + 192), (long long *)(a2 + 200));
    std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::vector<std::string>>,std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *> *,long>>((uint64_t **)(a1 + 216), *(long long **)(a2 + 216), (long long *)(a2 + 224));
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)(a1 + 240), *(long long **)(a2 + 240), (long long *)(a2 + 248));
  }
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  return a1;
}

void sub_1B1BD3D98(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  long long v16 = (EARLogger *)__cxa_begin_catch(a1);
  if (a2 == 2)
  {
    uint64_t v17 = (uint64_t)v16;
    int v18 = EARLogger::QuasarOSLogger(v16);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
      +[_EARSpeechRecognizer compileRecognizerModels2WithConfiguration:error:](v17, v18);
    }
  }
  else
  {
    int v18 = EARLogger::QuasarOSLogger(v16);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
      -[_EARSpeechModelInfo initWithConfig:]();
    }
  }

  __cxa_end_catch();
  JUMPOUT(0x1B1BD3D1CLL);
}

void sub_1B1BD3E38(_Unwind_Exception *a1)
{
  __cxa_end_catch();

  _Unwind_Resume(a1);
}

uint64_t quasar::SpeechModelInfo::operator=(uint64_t a1, long long *a2)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  id v5 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*v5);
  }
  long long v6 = *(long long *)((char *)a2 + 24);
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *(_OWORD *)id v5 = v6;
  *((unsigned char *)a2 + 47) = 0;
  *((unsigned char *)a2 + ++*(_DWORD *)(result + 24) = 0;
  std::__tree<int>::__move_assign(a1 + 48, (void *)a2 + 6);
  std::__tree<std::string>::__move_assign(a1 + 72, (void *)a2 + 9);
  std::__tree<std::string>::__move_assign(a1 + 96, (void *)a2 + 12);
  uint64_t v7 = (void **)(a1 + 120);
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*v7);
  }
  long long v8 = *(long long *)((char *)a2 + 120);
  *(void *)(a1 + 136) = *((void *)a2 + 17);
  *(_OWORD *)uint64_t v7 = v8;
  *((unsigned char *)a2 + 143) = 0;
  *((unsigned char *)a2 + 120) = 0;
  uint64_t v9 = (void **)(a1 + 144);
  if (*(char *)(a1 + 167) < 0) {
    operator delete(*v9);
  }
  long long v10 = a2[9];
  *(void *)(a1 + 160) = *((void *)a2 + 20);
  *(_OWORD *)uint64_t v9 = v10;
  *((unsigned char *)a2 + 167) = 0;
  *((unsigned char *)a2 + 144) = 0;
  char v11 = (void **)(a1 + 168);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*v11);
  }
  long long v12 = *(long long *)((char *)a2 + 168);
  *(void *)(a1 + 184) = *((void *)a2 + 23);
  *(_OWORD *)char v11 = v12;
  *((unsigned char *)a2 + 191) = 0;
  *((unsigned char *)a2 + 168) = 0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__move_assign(a1 + 192, (void *)a2 + 24);
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__move_assign(a1 + 216, (void *)a2 + 27);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__move_assign(a1 + 240, (void *)a2 + 30);
  *(void *)(a1 + 264) = *((void *)a2 + 33);
  return a1;
}

void sub_1B1BD40F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B1BD41E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B1BD4508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1B1BD46D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B1BD4784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

void sub_1B1BD48C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

void sub_1B1BD4F48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,char *a57)
{
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a57);
  a57 = &a26;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a57);
  a57 = (char *)(v57 - 128);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a57);

  _Unwind_Resume(a1);
}

void sub_1B1BD526C(_Unwind_Exception *a1)
{
  id v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1B1BD53E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B1BD55D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id EARHelpers::ContainerToNSSet<std::set<unsigned int>>(void *a1)
{
  uint64_t v2 = [MEMORY[0x1E4F1CA80] setWithCapacity:a1[2]];
  id v3 = (void *)*a1;
  long long v4 = a1 + 1;
  if ((void *)*a1 != a1 + 1)
  {
    do
    {
      id v5 = [NSNumber numberWithUnsignedInt:*((unsigned int *)v3 + 7)];
      [v2 addObject:v5];

      long long v6 = (void *)v3[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          long long v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v3[2];
          BOOL v8 = *v7 == (void)v3;
          id v3 = v7;
        }
        while (!v8);
      }
      id v3 = v7;
    }
    while (v7 != v4);
  }
  uint64_t v9 = (void *)[v2 copy];

  return v9;
}

void sub_1B1BD56EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id EARHelpers::ContainerToNSSet<std::set<BOOL>>(void *a1)
{
  uint64_t v2 = [MEMORY[0x1E4F1CA80] setWithCapacity:a1[2]];
  id v3 = (void *)*a1;
  long long v4 = a1 + 1;
  if ((void *)*a1 != a1 + 1)
  {
    do
    {
      id v5 = [NSNumber numberWithBool:*((unsigned __int8 *)v3 + 25)];
      [v2 addObject:v5];

      long long v6 = (void *)v3[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          long long v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v3[2];
          BOOL v8 = *v7 == (void)v3;
          id v3 = v7;
        }
        while (!v8);
      }
      id v3 = v7;
    }
    while (v7 != v4);
  }
  uint64_t v9 = (void *)[v2 copy];

  return v9;
}

void sub_1B1BD57E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B1BD5D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,char *a26)
{
  std::__tree<std::string>::destroy((uint64_t)&a25, a26);

  quasar::SpeechRecognizerActiveConfiguration::~SpeechRecognizerActiveConfiguration(v26);
  _Unwind_Resume(a1);
}

uint64_t std::optional<std::set<unsigned int>>::operator=[abi:ne180100]<std::set<unsigned int>,void>(uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    std::__tree<int>::__move_assign(a1, a2);
  }
  else
  {
    *(void *)a1 = *a2;
    id v3 = a2 + 1;
    uint64_t v4 = a2[1];
    *(void *)(a1 + 8) = v4;
    uint64_t v5 = a1 + 8;
    uint64_t v6 = a2[2];
    *(void *)(a1 + 16) = v6;
    if (v6)
    {
      *(void *)(v4 + 16) = v5;
      *a2 = v3;
      *id v3 = 0;
      a2[2] = 0;
    }
    else
    {
      *(void *)a1 = v5;
    }
    *(unsigned char *)(a1 + ++*(_DWORD *)(result + 24) = 1;
  }
  return a1;
}

uint64_t std::optional<std::set<std::string>>::operator=[abi:ne180100]<std::set<std::string>,void>(uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    std::__tree<std::string>::__move_assign(a1, a2);
  }
  else
  {
    *(void *)a1 = *a2;
    id v3 = a2 + 1;
    uint64_t v4 = a2[1];
    *(void *)(a1 + 8) = v4;
    uint64_t v5 = a1 + 8;
    uint64_t v6 = a2[2];
    *(void *)(a1 + 16) = v6;
    if (v6)
    {
      *(void *)(v4 + 16) = v5;
      *a2 = v3;
      *id v3 = 0;
      a2[2] = 0;
    }
    else
    {
      *(void *)a1 = v5;
    }
    *(unsigned char *)(a1 + ++*(_DWORD *)(result + 24) = 1;
  }
  return a1;
}

void sub_1B1BD61C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a45);
  _Unwind_Resume(a1);
}

void sub_1B1BD63C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B1BD6470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  _Unwind_Resume(a1);
}

id EARHelpers::VectorToArray<float>(uint64_t a1)
{
  uint64_t v2 = [MEMORY[0x1E4F1CA48] array];
  uint64_t v4 = *(_DWORD **)a1;
  uint64_t v5 = *(_DWORD **)(a1 + 8);
  if (*(_DWORD **)a1 != v5)
  {
    do
    {
      LODWORD(v3) = *v4;
      uint64_t v6 = [NSNumber numberWithFloat:v3];
      [v2 addObject:v6];

      ++v4;
    }
    while (v4 != v5);
  }
  uint64_t v7 = (void *)[v2 copy];

  return v7;
}

void sub_1B1BD6544(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B1BD6654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void EARContinuousListeningResultHelper::~EARContinuousListeningResultHelper(EARContinuousListeningResultHelper *this)
{
  *(void *)this = &unk_1F0A34678;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  objc_destroyWeak((id *)this + 34);
  objc_destroyWeak((id *)this + 33);
  objc_destroyWeak((id *)this + 32);
  quasar::ContinuousListeningResultHelper::~ContinuousListeningResultHelper((void **)this);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F0A34678;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  objc_destroyWeak((id *)this + 34);
  objc_destroyWeak((id *)this + 33);
  objc_destroyWeak((id *)this + 32);
  quasar::ContinuousListeningResultHelper::~ContinuousListeningResultHelper((void **)this);
  JUMPOUT(0x1B3EA8670);
}

void quasar::Align::~Align(void **this)
{
  if (*((char *)this + 207) < 0) {
    operator delete(this[23]);
  }
  double v3 = this + 20;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v3);
  double v3 = this + 17;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v2 = this[13];
  if (v2) {
    operator delete(v2);
  }
  double v3 = this + 10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  double v3 = this + 7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  double v3 = this + 4;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v3);
  double v3 = this + 1;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v3);
}

id transcriptFromTokens(void *a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if ([v1 count])
  {
    id v2 = objc_alloc_init(MEMORY[0x1E4F28E78]);
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
    if (v4)
    {
      uint64_t v5 = *(void *)v11;
      do
      {
        for (uint64_t i = 0; i != v4; ++i)
        {
          if (*(void *)v11 != v5) {
            objc_enumerationMutation(v3);
          }
          uint64_t v7 = *(void **)(*((void *)&v10 + 1) + 8 * i);
          if (objc_msgSend(v7, "hasSpaceBefore", (void)v10)) {
            [v2 appendString:@" "];
          }
          BOOL v8 = [v7 tokenName];
          [v2 appendString:v8];

          if ([v7 hasSpaceAfter]) {
            [v2 appendString:@" "];
          }
        }
        uint64_t v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
      }
      while (v4);
    }
  }
  else
  {
    id v2 = 0;
  }

  return v2;
}

void sub_1B1BD6A94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN19ResultStreamWrapper26writePartialToResultStreamENSt3__16vectorINS1_IN6quasar5TokenENS0_9allocatorIS3_EEEENS4_IS6_EEEEP20_EARSpeechRecognizerPU44objcproto33_EARSpeechRecognitionResultStream11objc_objectP8NSStringSE_RKS6_jjibNS0_10shared_ptrINS2_25ContinuousListeningConfigEEEiP17_EARResultContextSG_bSG_bNSH_IbEEbNSH_INS2_14result_handler13ResultHandlerEEE_block_invoke(uint64_t a1, void *a2)
{
  EARHelpers::QuasarResultFromEARSpeechRecognitionTokens(a2, &v4);
  memset(v3, 0, sizeof(v3));
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v3, v4, v5, 0x6DB6DB6DB6DB6DB7 * ((v5 - v4) >> 5));
  EARVoiceCommandInterpretationsFromQuasarTokens(v3, *(void *)(*(void *)(a1 + 32) + 48));
}

void sub_1B1BD6B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  *(void *)(v14 - 40) = &a13;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 40));
  _Unwind_Resume(a1);
}

void EARVoiceCommandInterpretationsFromQuasarTokens(uint64_t *a1, uint64_t a2)
{
  memset(&v6, 0, sizeof(v6));
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(&v6, *a1, a1[1], 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5));
  EARHelpers::QuasarTokensToStdString(&v6, &v7);
  uint64_t v5 = &v6;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v4, v7.__r_.__value_.__l.__data_, v7.__r_.__value_.__l.__size_);
  }
  else {
    std::string v4 = v7;
  }
  EARHelpers::StdStringUTF8ToUTF16IndexMap((uint64_t *)&v4, &v5);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v3, v7.__r_.__value_.__l.__data_, v7.__r_.__value_.__l.__size_);
  }
  else {
    std::string v3 = v7;
  }
  quasar::VoiceCommandRecognize((uint64_t)&v3, a2);
}

void sub_1B1BD6D88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  long long v31 = *(void **)(v29 - 96);
  if (v31)
  {
    *(void *)(v29 - 88) = v31;
    operator delete(v31);
  }
  if (*(char *)(v29 - 25) < 0) {
    operator delete(*(void **)(v29 - 48));
  }
  _Unwind_Resume(exception_object);
}

void ___ZN19ResultStreamWrapper26writePartialToResultStreamENSt3__16vectorINS1_IN6quasar5TokenENS0_9allocatorIS3_EEEENS4_IS6_EEEEP20_EARSpeechRecognizerPU44objcproto33_EARSpeechRecognitionResultStream11objc_objectP8NSStringSE_RKS6_jjibNS0_10shared_ptrINS2_25ContinuousListeningConfigEEEiP17_EARResultContextSG_bSG_bNSH_IbEEbNSH_INS2_14result_handler13ResultHandlerEEE_block_invoke_2(uint64_t a1, void *a2)
{
  EARHelpers::QuasarResultFromEARSpeechRecognitionTokens(a2, &v4);
  memset(v3, 0, sizeof(v3));
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v3, v4, v5, 0x6DB6DB6DB6DB6DB7 * ((v5 - v4) >> 5));
  EARVoiceCommandInterpretationsFromQuasarTokens(v3, *(void *)(*(void *)(a1 + 32) + 48));
}

void sub_1B1BD6EF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  *(void *)(v14 - 40) = &a13;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 40));
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<quasar::Token>>,std::vector<quasar::Token> const*,std::vector<quasar::Token> const*,std::vector<quasar::Token>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4)
{
  uint64_t v4 = a4;
  long long v10 = a4;
  long long v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  void v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    std::string v6 = a2;
    do
    {
      void *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v4, *v6, v6[1], 0x6DB6DB6DB6DB6DB7 * ((v6[1] - *v6) >> 5));
      uint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 3;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::Token>>,std::vector<quasar::Token>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B1BD6FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZN19ResultStreamWrapper31writeFinalChoicesToResultStreamERKNSt3__16vectorINS1_IN6quasar5TokenENS0_9allocatorIS3_EEEENS4_IS6_EEEERKNS1_IdNS4_IdEEEEbP20_EARSpeechRecognizerPU44objcproto33_EARSpeechRecognitionResultStream11objc_objectRKNS2_14AudioAnalyticsERKNS2_20LatnnMitigatorResultEdP8NSStringjjSQ_P17_EARResultContextNS2_21RecogResultStreamBase11RecogStatusEbRKS6_bNS0_10shared_ptrINS2_25ContinuousListeningConfigEEESW_RS8_RKNS1_INS2_11ItnOverrideENS4_IS11_EEEERKNS0_3setINS0_12basic_stringIcNS0_11char_traitsIcEENS4_IcEEEENS0_4lessIS1B_EENS4_IS1B_EEEERKNS1_IS1F_NS4_IS1F_EEEEbbSW_bdiNSX_INS2_14result_handler13ResultHandlerEEE_block_invoke(void *a1, void *a2, void *a3, void *a4)
{
  id v10 = a2;
  id v8 = a3;
  id v9 = a4;
  objc_storeStrong((id *)(*(void *)(a1[4] + 8) + 40), a2);
  objc_storeStrong((id *)(*(void *)(a1[5] + 8) + 40), a3);
  if (v9) {
    [*(id *)(*(void *)(a1[6] + 8) + 40) addObject:v9];
  }
}

void sub_1B1BD70B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id ResultStreamWrapper::tokenSausageWithExtendedEndTime(void *a1, double a2)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  id v22 = a1;
  id v24 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v22, "count"));
  long long v47 = 0u;
  long long v48 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  obuint64_t j = v22;
  uint64_t v3 = [obj countByEnumeratingWithState:&v45 objects:v52 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v46;
    do
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v46 != v4) {
          objc_enumerationMutation(obj);
        }
        std::string v6 = *(void **)(*((void *)&v45 + 1) + 8 * i);
        std::string v7 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v6, "count"));
        long long v43 = 0u;
        long long v44 = 0u;
        long long v41 = 0u;
        long long v42 = 0u;
        id v8 = v6;
        uint64_t v9 = [v8 countByEnumeratingWithState:&v41 objects:v51 count:16];
        if (v9)
        {
          uint64_t v10 = *(void *)v42;
          do
          {
            for (uint64_t j = 0; j != v9; ++j)
            {
              if (*(void *)v42 != v10) {
                objc_enumerationMutation(v8);
              }
              long long v12 = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithArray:*(void *)(*((void *)&v41 + 1) + 8 * j) copyItems:1];
              [v7 addObject:v12];
            }
            uint64_t v9 = [v8 countByEnumeratingWithState:&v41 objects:v51 count:16];
          }
          while (v9);
        }

        [v24 addObject:v7];
      }
      uint64_t v3 = [obj countByEnumeratingWithState:&v45 objects:v52 count:16];
    }
    while (v3);
  }

  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v13 = [v24 lastObject];
  uint64_t v14 = [v13 countByEnumeratingWithState:&v37 objects:v50 count:16];
  if (v14)
  {
    uint64_t v15 = *(void *)v38;
    do
    {
      for (uint64_t k = 0; k != v14; ++k)
      {
        if (*(void *)v38 != v15) {
          objc_enumerationMutation(v13);
        }
        uint64_t v17 = *(void **)(*((void *)&v37 + 1) + 8 * k);
        if ([v17 count])
        {
          int v18 = [v17 lastObject];
          uint64_t v19 = v18;
          if (v18)
          {
            [v18 quasarToken];
          }
          else
          {
            long long v35 = 0u;
            long long v36 = 0u;
            long long v33 = 0u;
            *(_OWORD *)std::string __p = 0u;
            *(_OWORD *)long long v32 = 0u;
            *(_OWORD *)long long v30 = 0u;
            memset(v31, 0, sizeof(v31));
            memset(v29, 0, sizeof(v29));
            long long v27 = 0u;
            *(_OWORD *)uint64_t v28 = 0u;
            *(_OWORD *)long long v25 = 0u;
            long long v26 = 0u;
          }

          LODWORD(v27) = (a2 * 1000.0);
          id v20 = [[_EARSpeechRecognitionToken alloc] _initWithQuasarToken:v25];
          objc_msgSend(v17, "replaceObjectAtIndex:withObject:", objc_msgSend(v17, "count") - 1, v20);

          if (SBYTE7(v35) < 0) {
            operator delete(__p[0]);
          }
          if (SBYTE7(v33) < 0) {
            operator delete(v32[0]);
          }
          uint64_t v49 = (void **)v31 + 1;
          std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v49);
          if (SBYTE7(v31[0]) < 0) {
            operator delete(v30[0]);
          }
          uint64_t v49 = (void **)v29 + 1;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v49);
          if (SBYTE7(v29[0]) < 0) {
            operator delete(v28[0]);
          }
          if (SBYTE7(v26) < 0) {
            operator delete(v25[0]);
          }
        }
      }
      uint64_t v14 = [v13 countByEnumeratingWithState:&v37 objects:v50 count:16];
    }
    while (v14);
  }

  return v24;
}

void sub_1B1BD74A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

id ResultStreamWrapper::resultPackageWithResultChoices(void *a1, unsigned int a2, void *a3, uint64_t a4, unsigned __int8 *a5, void *a6, unsigned int a7, void *a8, double a9, double a10, unsigned __int8 a11, uint64_t a12, void *a13, char a14, uint64_t *a15, unsigned __int8 a16, unsigned __int8 a17, uint64_t a18, uint64_t *a19, uint64_t a20,__int16 a21,unsigned __int8 a22,char a23,void *a24,void *a25,void *a26,char a27,char a28,uint64_t a29,char a30,void *a31,char a32,uint64_t a33,uint64_t a34,void *a35,char a36,char a37,char a38,void *a39,int a40,void *a41,quasar::corrective_reranking::Parser **a42,char a43)
{
  uint64_t v308 = *MEMORY[0x1E4F143B8];
  id v208 = a3;
  id v197 = a6;
  id v198 = a8;
  id v207 = a39;
  id v184 = a41;
  id v186 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  id v185 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  id v201 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  id v183 = a5;
  v303 = 0;
  uint64_t v302 = 0;
  unint64_t v304 = 0;
  v300 = 0;
  uint64_t v299 = 0;
  unint64_t v301 = 0;
  v297 = 0;
  v296 = 0;
  unint64_t v298 = 0;
  v294 = 0;
  uint64_t v293 = 0;
  unint64_t v295 = 0;
  v292[1] = 0;
  v292[0] = 0;
  v291 = (uint64_t *)v292;
  v290[1] = 0;
  v290[0] = 0;
  v289 = (uint64_t *)v290;
  v288[1] = 0;
  v288[0] = 0;
  v287 = (uint64_t *)v288;
  v286[1] = 0;
  v286[0] = 0;
  v285 = (uint64_t *)v286;
  long long v48 = a1;
  uint64_t v49 = *a1;
  if (a26 && a1[1] - v49 != a25[1] - *a25)
  {
    v176 = [MEMORY[0x1E4F28B00] currentHandler];
    id v177 = objc_msgSend(NSString, "stringWithUTF8String:", "static _EARSpeechRecognitionResultPackage *ResultStreamWrapper::resultPackageWithResultChoices(const std::vector<std::vector<Token>> &, BOOL, _EARFormatter *__strong, const AudioAnalytics &, const LatnnMitigatorResult &, const double, NSString *__strong, const unsigned int, NSString *__strong, BOOL, const std::vector<Token> &, _EARSpeechRecognitionResult *__autoreleasing *, BOOL, std::shared_ptr<ContinuousListeningConfig>, BOOL, BOOL, const std::vector<Token> &, std::vector<std::vector<Token>> &, const std::vector<quasar::ItnOverride> &, quasar::ItnEnablingFlags::Flags, BOOL, BOOL, _EARSpeechRecognitionResultPackage *__autoreleasing *, const std::vector<std::set<std::string>> &, NSDictionary<NSString *,_EARSpeechRecognitionResultPackage *> *__autoreleasing *, BOOL, BOOL, const std::vector<quasar::Token> &, BOOL, const std::shared_ptr<const VoiceCommandActiveSetCompilation> &, BOOL, NSDictionary<NSString *,NSNumber *> *__autoreleasing *, NSArray<NSString *> *__autoreleasing *, double, NSArray<NSArray<NSNumber *> *> *__autoreleasing *, BOOL, BOOL, BOOL, NSSet<NSString *> *__strong, int, _EARRelevantTextContext *__strong, std::shared_ptr<quasar::corrective_reranking::Parser>, BOOL)");
    [v176 handleFailureInFunction:v177 file:@"EARSpeechRecognizer.mm" lineNumber:2309 description:@"Results are not properly labeled"];

    long long v48 = a1;
    uint64_t v49 = *a1;
  }
  if (v48[1] != v49)
  {
    unint64_t v50 = 0;
    do
    {
      long long v51 = (uint64_t *)(v49 + 24 * v50);
      long long __s = 0uLL;
      *(void *)&long long v253 = 0;
      uint64_t v52 = v51;
      std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(&__s, *v51, v52[1], 0x6DB6DB6DB6DB6DB7 * ((v52[1] - *v51) >> 5));
      long long __p = 0uLL;
      *(void *)&long long v233 = 0;
      p_p_p = 0;
      p_p = 0;
      uint64_t v225 = 0;
      memset(&v230, 0, sizeof(v230));
      memset(v284, 0, sizeof(v284));
      long long v282 = 0uLL;
      uint64_t v283 = 0;
      std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(&v282, *v51, v52[1], 0x6DB6DB6DB6DB6DB7 * ((v52[1] - *v51) >> 5));
      if (v208)
      {
        uint64_t v53 = (std::__shared_weak_count *)a15[1];
        uint64_t v278 = *a15;
        v279 = v53;
        if (v53) {
          atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v277 = 0;
        uint64_t v276 = 0;
        v271[0] = MEMORY[0x1E4F143A8];
        v271[1] = 3221225472;
        v271[2] = ___ZN19ResultStreamWrapper30resultPackageWithResultChoicesERKNSt3__16vectorINS1_IN6quasar5TokenENS0_9allocatorIS3_EEEENS4_IS6_EEEEbP13_EARFormatterRKNS2_14AudioAnalyticsERKNS2_20LatnnMitigatorResultEdP8NSStringjSK_bRKS6_PU15__autoreleasingP27_EARSpeechRecognitionResultbNS0_10shared_ptrINS2_25ContinuousListeningConfigEEEbbSM_RS8_RKNS1_INS2_11ItnOverrideENS4_ISV_EEEEtbbPU15__autoreleasingP34_EARSpeechRecognitionResultPackageRKNS1_INS0_3setINS0_12basic_stringIcNS0_11char_traitsIcEENS4_IcEEEENS0_4lessIS19_EENS4_IS19_EEEENS4_IS1D_EEEEPU15__autoreleasingP12NSDictionaryISK_S11_EbbSM_bRKNSR_IKNS2_32VoiceCommandActiveSetCompilationEEEbPU15__autoreleasingPS1I_ISK_P8NSNumberEPU15__autoreleasingP7NSArrayISK_EdPU15__autoreleasingPS1Y_IPS1Y_IS1T_EEbbbP5NSSetISK_EiP23_EARRelevantTextContextNSR_INS2_20corrective_reranking6ParserEEEb_block_invoke;
        v271[3] = &unk_1E5FFE5F0;
        id v54 = v201;
        int v275 = v50;
        id v272 = v54;
        uint64_t v273 = a33;
        uint64_t v274 = a34;
        HIDWORD(v182) = v50;
        LOBYTE(v182) = a2;
        BYTE1(v181) = a37;
        LOBYTE(v181) = a23;
        BYTE3(v180) = a27;
        BYTE2(v180) = a22;
        LOWORD(v180) = a21;
        BYTE4(v178) = a14;
        LODWORD(v178) = a7;
        objc_msgSend(v208, "formatWords:unrepairedWordsOut:task:language:preItnLeftContext:separateAutoEndPunctuation:partialResults:timestampOffset:zeroTimestamp:continuousListeningConfig:postItnLeftContext:itnResult:itnOverrides:itnEnablingFlags:recognizeEmoji:leftContextProvidedByClient:preItnRightContext:emojiTokenIndices:persistEmoji:shouldHideTrailingPunctuation:isTrailingPunctuationHidden:isFinal:choiceIdx:itnCompletion:", v51, &v230, v197, v198, a12, a11, &__p, v178, &v278, a18, &p_p, a20, v180, a29,
          v284,
          v181,
          &v276,
          v182,
          v271);
        std::vector<quasar::Token>::__vdeallocate((void **)&__s);
        long long __s = v280;
        *(void *)&long long v253 = v281;
        uint64_t v281 = 0;
        long long v280 = 0uLL;
        v305 = &v280;
        std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v305);
        if (v277) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v277);
        }
        if (v279) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v279);
        }
        [v208 formattedTokensWithoutEmojiModifier:&__s emojiTokenIndices:v284 recognizeEmoji:a22];
        std::vector<quasar::Token>::__vdeallocate((void **)&v282);
        long long v282 = v280;
        uint64_t v283 = v281;
        uint64_t v281 = 0;
        long long v280 = 0uLL;
        v305 = &v280;
        std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v305);
      }
      id v55 = v303;
      if ((unint64_t)v303 >= v304)
      {
        uint64_t v56 = std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>(&v302, (uint64_t *)&__s);
      }
      else
      {
        void *v303 = 0;
        v55[1] = 0;
        v55[2] = 0;
        std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v55, __s, *((uint64_t *)&__s + 1), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)&__s + 1) - __s) >> 5));
        uint64_t v56 = (uint64_t)(v55 + 3);
      }
      v303 = (void *)v56;
      uint64_t v57 = v300;
      if ((unint64_t)v300 >= v301)
      {
        uint64_t v58 = std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>(&v299, (uint64_t *)&v282);
      }
      else
      {
        void *v300 = 0;
        v57[1] = 0;
        v57[2] = 0;
        std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v57, v282, *((uint64_t *)&v282 + 1), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)&v282 + 1) - v282) >> 5));
        uint64_t v58 = (uint64_t)(v57 + 3);
      }
      v300 = (void *)v58;
      if (v208 && !v50) {
        [v208 appendNbestListWithEmojiAlternativesForFormattedTokens:&__s formattedTokensWithoutEmojiModifier:&v282 formattedNBestList:&v302 formattedNBestListWithoutEmojiModifier:&v299 emojiTokenIndices:v284 recognizeEmoji:a22];
      }
      id v59 = v297;
      if ((unint64_t)v297 >= v298)
      {
        uint64_t v60 = std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>((uint64_t *)&v296, (uint64_t *)&__p);
      }
      else
      {
        uint64_t *v297 = 0;
        v59[1] = 0;
        v59[2] = 0;
        std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v59, __p, *((uint64_t *)&__p + 1), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)&__p + 1) - __p) >> 5));
        uint64_t v60 = (uint64_t)(v59 + 3);
      }
      v297 = (uint64_t *)v60;
      unint64_t v61 = a19[1];
      if (v61 >= a19[2])
      {
        uint64_t v62 = std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>(a19, (uint64_t *)&p_p);
      }
      else
      {
        std::vector<std::vector<quasar::Token>>::__construct_one_at_end[abi:ne180100]<std::vector<quasar::Token> const&>((uint64_t)a19, (uint64_t *)&p_p);
        uint64_t v62 = v61 + 24;
      }
      a19[1] = v62;
      uint64_t v63 = v294;
      if ((unint64_t)v294 >= v295)
      {
        uint64_t v64 = std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>(&v293, (uint64_t *)&v230);
      }
      else
      {
        void *v294 = 0;
        v63[1] = 0;
        v63[2] = 0;
        std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v63, (uint64_t)v230.__r_.__value_.__l.__data_, v230.__r_.__value_.__l.__size_, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v230.__r_.__value_.__l.__size_ - v230.__r_.__value_.__r.__words[0]) >> 5));
        uint64_t v64 = (uint64_t)(v63 + 3);
      }
      v294 = (void *)v64;
      if (a26)
      {
        int64_t v65 = (void *)(*a25 + 24 * v50);
        uint64_t v68 = (void *)*v65;
        long long v66 = v65 + 1;
        uint64_t v67 = v68;
        if (v68 != v66)
        {
          do
          {
            v305 = (long long *)(v67 + 4);
            unint64_t v69 = std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v291, (const void **)v67 + 4, (uint64_t)&std::piecewise_construct, &v305);
            uint64_t v70 = v69 + 7;
            unint64_t v71 = v69[8];
            if (v71 >= v69[9])
            {
              uint64_t v72 = std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>(v70, v51);
            }
            else
            {
              std::vector<std::vector<quasar::Token>>::__construct_one_at_end[abi:ne180100]<std::vector<quasar::Token> const&>((uint64_t)v70, v51);
              uint64_t v72 = v71 + 24;
            }
            v69[8] = v72;
            v305 = (long long *)(v67 + 4);
            float v73 = std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v289, (const void **)v67 + 4, (uint64_t)&std::piecewise_construct, &v305);
            int v74 = v73 + 7;
            unint64_t v75 = v73[8];
            if (v75 >= v73[9])
            {
              uint64_t v76 = std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>(v74, (uint64_t *)&__s);
            }
            else
            {
              std::vector<std::vector<quasar::Token>>::__construct_one_at_end[abi:ne180100]<std::vector<quasar::Token> const&>((uint64_t)v74, (uint64_t *)&__s);
              uint64_t v76 = v75 + 24;
            }
            v73[8] = v76;
            v305 = (long long *)(v67 + 4);
            unsigned int v77 = std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v287, (const void **)v67 + 4, (uint64_t)&std::piecewise_construct, &v305);
            uint64_t v78 = v77 + 7;
            unint64_t v79 = v77[8];
            if (v79 >= v77[9])
            {
              uint64_t v80 = std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>(v78, (uint64_t *)&__p);
            }
            else
            {
              std::vector<std::vector<quasar::Token>>::__construct_one_at_end[abi:ne180100]<std::vector<quasar::Token> const&>((uint64_t)v78, (uint64_t *)&__p);
              uint64_t v80 = v79 + 24;
            }
            v77[8] = v80;
            v305 = (long long *)(v67 + 4);
            uint64_t v81 = std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v285, (const void **)v67 + 4, (uint64_t)&std::piecewise_construct, &v305);
            uint64_t v82 = v81 + 7;
            unint64_t v83 = v81[8];
            if (v83 >= v81[9])
            {
              uint64_t v84 = std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>(v82, (uint64_t *)&v230);
            }
            else
            {
              std::vector<std::vector<quasar::Token>>::__construct_one_at_end[abi:ne180100]<std::vector<quasar::Token> const&>((uint64_t)v82, (uint64_t *)&v230);
              uint64_t v84 = v83 + 24;
            }
            v81[8] = v84;
            id v85 = (void *)v67[1];
            if (v85)
            {
              do
              {
                uint64_t v86 = v85;
                id v85 = (void *)*v85;
              }
              while (v85);
            }
            else
            {
              do
              {
                uint64_t v86 = (void *)v67[2];
                BOOL v87 = *v86 == (void)v67;
                uint64_t v67 = v86;
              }
              while (!v87);
            }
            uint64_t v67 = v86;
          }
          while (v86 != v66);
        }
      }
      *(void *)&long long v280 = &v282;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v280);
      *(void *)&long long v282 = v284;
      std::vector<std::pair<int,std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v282);
      v284[0] = (void **)&v230;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](v284);
      v230.__r_.__value_.__r.__words[0] = (std::string::size_type)&p_p;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v230);
      p_p = (void **)&__p;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&p_p);
      *(void *)&long long __p = &__s;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      ++v50;
      uint64_t v49 = *a1;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3) > v50);
  }
  if (a35) {
    *a35 = (id)[objc_alloc(MEMORY[0x1E4F1C978]) initWithArray:v201];
  }
  id v194 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  id v88 = [NSNumber numberWithDouble:*(double *)(a4 + 128)];
  [v194 setObject:v88 forKeyedSubscript:@"speakingRate"];

  uint64_t v89 = [NSNumber numberWithDouble:*(double *)(a4 + 136)];
  [v194 setObject:v89 forKeyedSubscript:@"averagePauseDuration"];

  id v195 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  uint64_t v90 = ResultStreamWrapper::getEARAcousticFeature(a4);
  [v195 setObject:v90 forKeyedSubscript:@"jitter"];

  uint64_t v91 = ResultStreamWrapper::getEARAcousticFeature(a4 + 32);
  [v195 setObject:v91 forKeyedSubscript:@"shimmer"];

  unint64_t v92 = ResultStreamWrapper::getEARAcousticFeature(a4 + 64);
  [v195 setObject:v92 forKeyedSubscript:@"pitch"];

  char v93 = ResultStreamWrapper::getEARAcousticFeature(a4 + 96);
  [v195 setObject:v93 forKeyedSubscript:@"voicing"];

  id v202 = [[_EARAudioAnalytics alloc] _initWithSpeechRecognitionFeatures:v194 acousticFeatures:v195 snr:a9];
  int v94 = (char)v183[31];
  if (v94 >= 0) {
    id v95 = v183 + 8;
  }
  else {
    id v95 = (unsigned __int8 *)*((void *)v183 + 1);
  }
  if (v94 >= 0) {
    uint64_t v96 = v183[31];
  }
  else {
    uint64_t v96 = *((void *)v183 + 2);
  }
  v193 = objc_msgSend(NSString, "ear_stringWithStringView:", v95, v96);
  if (*v183 && [v193 length])
  {
    uint64_t v97 = [_EARLatticeMitigatorResult alloc];
    double v99 = *((double *)v183 + 4);
    double v98 = *((double *)v183 + 5);
    *(float *)&double v98 = v98;
    *(float *)&double v99 = v99;
    LODWORD(v100) = *((_DWORD *)v183 + 12);
    LODWORD(v101) = *((_DWORD *)v183 + 13);
    uint64_t v203 = [(_EARLatticeMitigatorResult *)v97 initWithVersion:v193 score:*v183 threshold:v98 calibrationScale:v99 calibrationOffset:v100 processed:v101];
  }
  else
  {
    uint64_t v203 = 0;
  }
  if ((a16 & a17) != 0) {
    double v102 = 0.0;
  }
  else {
    double v102 = (double)a7 / 1000.0;
  }
  if (a13 && v296 != v297)
  {
    float v103 = [_EARSpeechRecognitionResult alloc];
    memset(v270, 0, sizeof(v270));
    std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v270, *v296, v296[1], 0x6DB6DB6DB6DB6DB7 * ((v296[1] - *v296) >> 5));
    memset(v269, 0, sizeof(v269));
    *a13 = [(_EARSpeechRecognitionResult *)v103 _initWithTokens:v270 preITNTokens:v269 confidence:0 voiceCommandInterpretations:0 preITNVoiceCommandInterpretations:0.0 utteranceStart:v102];
    *(void *)&long long __s = v269;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s);
    *(void *)&long long __s = v270;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s);
  }
  if (a26)
  {
    id v211 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    id v104 = v289;
    if (v289 != (uint64_t *)v290)
    {
      do
      {
        unint64_t v105 = (void *)MEMORY[0x1B3EA9930]();
        long long v106 = [_EARSpeechRecognition alloc];
        id v107 = v104 + 4;
        *(void *)&long long __p = v104 + 4;
        id v108 = -[_EARSpeechRecognition _initWithNBestList:useHatText:endsOfSentencePunctuations:](v106, "_initWithNBestList:useHatText:endsOfSentencePunctuations:", std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v291, (const void **)v104 + 4, (uint64_t)&std::piecewise_construct, (long long **)&__p)+ 7, 1, v207);
        id v109 = v108;
        if (v208)
        {
          id v110 = [_EARSpeechRecognition alloc];
          *(void *)&long long __p = v104 + 4;
          id v111 = -[_EARSpeechRecognition _initWithNBestList:useHatText:endsOfSentencePunctuations:](v110, "_initWithNBestList:useHatText:endsOfSentencePunctuations:", std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v289, (const void **)v104 + 4, (uint64_t)&std::piecewise_construct, (long long **)&__p)+ 7, 0, v207);
        }
        else
        {
          id v111 = v108;
        }
        float v112 = [_EARSpeechRecognition alloc];
        *(void *)&long long __p = v104 + 4;
        id v113 = -[_EARSpeechRecognition _initWithNBestList:useHatText:endsOfSentencePunctuations:](v112, "_initWithNBestList:useHatText:endsOfSentencePunctuations:", std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v285, (const void **)v104 + 4, (uint64_t)&std::piecewise_construct, (long long **)&__p)+ 7, 0, v207);
        id v114 = [_EARSpeechRecognitionResultPackage alloc];
        id v115 = [NSNumber numberWithDouble:a10];
        BYTE1(v179) = a32;
        LOBYTE(v179) = a28;
        id v116 = -[_EARSpeechRecognitionResultPackage _initWithRecognition:preITNRecognition:unrepairedRecognition:recognitionIsFormatted:isFinal:audioAnalytics:utteranceStart:latticeMitigatorResult:nBestVoiceCommandInterpretations:preITNNBestVoiceCommandInterpretations:recognitionPaused:firstResultAfterResume:endOfSentenceLikelihood:numTokensExcludingTriggerPhrase:voiceCommandDebugInfo:performanceMarkers:](v114, "_initWithRecognition:preITNRecognition:unrepairedRecognition:recognitionIsFormatted:isFinal:audioAnalytics:utteranceStart:latticeMitigatorResult:nBestVoiceCommandInterpretations:preITNNBestVoiceCommandInterpretations:recognitionPaused:firstResultAfterResume:endOfSentenceLikelihood:numTokensExcludingTriggerPhrase:voiceCommandDebugInfo:performanceMarkers:", v111, v109, v113, v208 != 0, a2, v202, v102, v203, 0, 0, v179, v115, a40, 0,
                 0);

        if (*((char *)v104 + 55) < 0)
        {
          id v107 = (uint64_t *)v104[4];
          uint64_t v117 = v104[5];
        }
        else
        {
          uint64_t v117 = *((unsigned __int8 *)v104 + 55);
        }
        int v118 = objc_msgSend(NSString, "ear_stringWithStringView:", v107, v117);
        [v211 setObject:v116 forKeyedSubscript:v118];

        id v119 = (uint64_t *)v104[1];
        if (v119)
        {
          do
          {
            uint64_t v120 = v119;
            id v119 = (uint64_t *)*v119;
          }
          while (v119);
        }
        else
        {
          do
          {
            uint64_t v120 = (uint64_t *)v104[2];
            BOOL v87 = *v120 == (void)v104;
            id v104 = v120;
          }
          while (!v87);
        }
        id v104 = v120;
      }
      while (v120 != (uint64_t *)v290);
    }
    *a26 = (id)[v211 copy];
  }
  id v205 = [[_EARSpeechRecognition alloc] _initWithNBestList:a1 useHatText:1 endsOfSentencePunctuations:v207];
  if (v208)
  {
    id v196 = [[_EARSpeechRecognition alloc] _initWithNBestList:&v302 useHatText:0 endsOfSentencePunctuations:v207];
  }
  else
  {
    id v196 = v205;
  }
  id v200 = [[_EARSpeechRecognition alloc] _initWithNBestList:&v293 useHatText:0 endsOfSentencePunctuations:v207];
  if (v208)
  {
    id v192 = [[_EARSpeechRecognition alloc] _initWithNBestList:&v299 useHatText:0 endsOfSentencePunctuations:v207];
  }
  else
  {
    id v192 = v205;
  }
  if (a24)
  {
    uint64_t v121 = [_EARSpeechRecognitionResultPackage alloc];
    id v122 = [NSNumber numberWithDouble:a10];
    BYTE1(v179) = a32;
    LOBYTE(v179) = a28;
    *a24 = objc_autorelease(-[_EARSpeechRecognitionResultPackage _initWithRecognition:preITNRecognition:unrepairedRecognition:recognitionIsFormatted:isFinal:audioAnalytics:utteranceStart:latticeMitigatorResult:nBestVoiceCommandInterpretations:preITNNBestVoiceCommandInterpretations:recognitionPaused:firstResultAfterResume:endOfSentenceLikelihood:numTokensExcludingTriggerPhrase:voiceCommandDebugInfo:performanceMarkers:](v121, "_initWithRecognition:preITNRecognition:unrepairedRecognition:recognitionIsFormatted:isFinal:audioAnalytics:utteranceStart:latticeMitigatorResult:nBestVoiceCommandInterpretations:preITNNBestVoiceCommandInterpretations:recognitionPaused:firstResultAfterResume:endOfSentenceLikelihood:numTokensExcludingTriggerPhrase:voiceCommandDebugInfo:performanceMarkers:", v192, v205, v200, v208 != 0, a2, v202, v102, v203, 0, 0, v179, v122, a40,
               0,
               0));
  }
  if (a30 && a43 && a36)
  {
    uint64_t v189 = [v196 potentialPrecedingRecognition];
    id v191 = [v196 potentialCommandRecognition];
    if (v189)
    {
      unint64_t v123 = [v189 nBest];
      obuint64_t j = [v123 firstObject];

      transcriptFromTokens(obj);
      id v212 = (id)objc_claimAutoreleasedReturnValue();
      if (quasar::gLogLevel >= 5)
      {
        long long v267 = 0u;
        long long v268 = 0u;
        long long v265 = 0u;
        long long v266 = 0u;
        long long v263 = 0u;
        long long v264 = 0u;
        long long v261 = 0u;
        long long v262 = 0u;
        long long v259 = 0u;
        long long v260 = 0u;
        long long v257 = 0u;
        long long v258 = 0u;
        long long v255 = 0u;
        long long v256 = 0u;
        long long v253 = 0u;
        long long v254 = 0u;
        long long __s = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__s);
        id v124 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__s, (uint64_t)"Voice Command: candidate preceding utterance: ", 46);
        if (v212)
        {
          objc_msgSend(v212, "ear_toString");
          unsigned int v125 = BYTE7(v233);
          uint64_t v127 = *((void *)&__p + 1);
          long long v126 = (long long *)__p;
        }
        else
        {
          uint64_t v127 = 0;
          long long v126 = 0;
          unsigned int v125 = 0;
          long long __p = 0uLL;
          *(void *)&long long v233 = 0;
        }
        if ((v125 & 0x80u) == 0) {
          long long v128 = &__p;
        }
        else {
          long long v128 = v126;
        }
        if ((v125 & 0x80u) == 0) {
          uint64_t v129 = v125;
        }
        else {
          uint64_t v129 = v127;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v124, (uint64_t)v128, v129);
        if (SBYTE7(v233) < 0) {
          operator delete((void *)__p);
        }
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&__s);
      }
      long long v250 = 0u;
      long long v251 = 0u;
      long long v248 = 0u;
      long long v249 = 0u;
      id obja = obj;
      uint64_t v130 = [obja countByEnumeratingWithState:&v248 objects:v307 count:16];
      if (v130)
      {
        uint64_t v131 = *(void *)v249;
        do
        {
          for (uint64_t i = 0; i != v130; ++i)
          {
            if (*(void *)v249 != v131) {
              objc_enumerationMutation(obja);
            }
            id v133 = *(id *)(*((void *)&v248 + 1) + 8 * i);
            if (quasar::gLogLevel >= 5)
            {
              long long v267 = 0u;
              long long v268 = 0u;
              long long v265 = 0u;
              long long v266 = 0u;
              long long v263 = 0u;
              long long v264 = 0u;
              long long v261 = 0u;
              long long v262 = 0u;
              long long v259 = 0u;
              long long v260 = 0u;
              long long v257 = 0u;
              long long v258 = 0u;
              long long v255 = 0u;
              long long v256 = 0u;
              long long v253 = 0u;
              long long v254 = 0u;
              long long __s = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__s);
              uint64_t v134 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__s, (uint64_t)"Voice Command: candidate preceding utterance tokens", 51);
              float v135 = [v133 description];
              uint64_t v136 = v135;
              if (v135)
              {
                objc_msgSend(v135, "ear_toString");
                uint64_t v137 = BYTE7(v233);
                uint64_t v139 = *((void *)&__p + 1);
                float v138 = (long long *)__p;
              }
              else
              {
                uint64_t v139 = 0;
                float v138 = 0;
                uint64_t v137 = 0;
                long long __p = 0uLL;
                *(void *)&long long v233 = 0;
              }
              if ((v137 & 0x80u) == 0) {
                uint64_t v140 = &__p;
              }
              else {
                uint64_t v140 = v138;
              }
              if ((v137 & 0x80u) == 0) {
                uint64_t v141 = v137;
              }
              else {
                uint64_t v141 = v139;
              }
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v134, (uint64_t)v140, v141);
              if (SBYTE7(v233) < 0) {
                operator delete((void *)__p);
              }

              quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&__s);
            }
          }
          uint64_t v130 = [obja countByEnumeratingWithState:&v248 objects:v307 count:16];
        }
        while (v130);
      }

      v190 = v212;
    }
    else
    {
      if (quasar::gLogLevel >= 5)
      {
        long long v267 = 0u;
        long long v268 = 0u;
        long long v265 = 0u;
        long long v266 = 0u;
        long long v263 = 0u;
        long long v264 = 0u;
        long long v261 = 0u;
        long long v262 = 0u;
        long long v259 = 0u;
        long long v260 = 0u;
        long long v257 = 0u;
        long long v258 = 0u;
        long long v255 = 0u;
        long long v256 = 0u;
        long long v253 = 0u;
        long long v254 = 0u;
        long long __s = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__s);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__s, (uint64_t)"Voice Command: candidate preceding utterance: NULL", 50);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&__s);
      }
      id obja = 0;
      v190 = 0;
    }
    float v142 = [v191 nBest];
    uint64_t v143 = [v142 firstObject];

    id v188 = transcriptFromTokens(v143);
    if (quasar::gLogLevel >= 5)
    {
      long long v267 = 0u;
      long long v268 = 0u;
      long long v265 = 0u;
      long long v266 = 0u;
      long long v263 = 0u;
      long long v264 = 0u;
      long long v261 = 0u;
      long long v262 = 0u;
      long long v259 = 0u;
      long long v260 = 0u;
      long long v257 = 0u;
      long long v258 = 0u;
      long long v255 = 0u;
      long long v256 = 0u;
      long long v253 = 0u;
      long long v254 = 0u;
      long long __s = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__s);
      float v144 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__s, (uint64_t)"Voice Command: candidate command utterance: ", 44);
      if (v188)
      {
        objc_msgSend(v188, "ear_toString");
        unsigned int v145 = BYTE7(v233);
        uint64_t v147 = *((void *)&__p + 1);
        unsigned __int8 v146 = (long long *)__p;
      }
      else
      {
        uint64_t v147 = 0;
        unsigned __int8 v146 = 0;
        unsigned int v145 = 0;
        long long __p = 0uLL;
        *(void *)&long long v233 = 0;
      }
      if ((v145 & 0x80u) == 0) {
        unsigned __int8 v148 = &__p;
      }
      else {
        unsigned __int8 v148 = v146;
      }
      if ((v145 & 0x80u) == 0) {
        uint64_t v149 = v145;
      }
      else {
        uint64_t v149 = v147;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v144, (uint64_t)v148, v149);
      if (SBYTE7(v233) < 0) {
        operator delete((void *)__p);
      }
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&__s);
    }
    long long v246 = 0u;
    long long v247 = 0u;
    long long v244 = 0u;
    long long v245 = 0u;
    id v213 = v143;
    uint64_t v150 = [v213 countByEnumeratingWithState:&v244 objects:v306 count:16];
    if (v150)
    {
      uint64_t v151 = *(void *)v245;
      do
      {
        for (uint64_t j = 0; j != v150; ++j)
        {
          if (*(void *)v245 != v151) {
            objc_enumerationMutation(v213);
          }
          id v153 = *(id *)(*((void *)&v244 + 1) + 8 * j);
          if (quasar::gLogLevel >= 5)
          {
            long long v267 = 0u;
            long long v268 = 0u;
            long long v265 = 0u;
            long long v266 = 0u;
            long long v263 = 0u;
            long long v264 = 0u;
            long long v261 = 0u;
            long long v262 = 0u;
            long long v259 = 0u;
            long long v260 = 0u;
            long long v257 = 0u;
            long long v258 = 0u;
            long long v255 = 0u;
            long long v256 = 0u;
            long long v253 = 0u;
            long long v254 = 0u;
            long long __s = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__s);
            long long v154 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__s, (uint64_t)"Voice Command: candidate command token", 38);
            long long v155 = [v153 description];
            unsigned __int8 v156 = v155;
            if (v155)
            {
              objc_msgSend(v155, "ear_toString");
              uint64_t v157 = BYTE7(v233);
              uint64_t v159 = *((void *)&__p + 1);
              __int16 v158 = (long long *)__p;
            }
            else
            {
              uint64_t v159 = 0;
              __int16 v158 = 0;
              uint64_t v157 = 0;
              long long __p = 0uLL;
              *(void *)&long long v233 = 0;
            }
            if ((v157 & 0x80u) == 0) {
              long long v160 = &__p;
            }
            else {
              long long v160 = v158;
            }
            if ((v157 & 0x80u) == 0) {
              uint64_t v161 = v157;
            }
            else {
              uint64_t v161 = v159;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v154, (uint64_t)v160, v161);
            if (SBYTE7(v233) < 0) {
              operator delete((void *)__p);
            }

            quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&__s);
          }
        }
        uint64_t v150 = [v213 countByEnumeratingWithState:&v244 objects:v306 count:16];
      }
      while (v150);
    }

    long long v162 = [v191 nBest];
    int v163 = v162;
    if (!*a42 || ![v162 count])
    {
      char v166 = a38 ^ 1;
      if (v189) {
        char v166 = 0;
      }
      if ((v166 & 1) == 0 && *a31)
      {
        v217[0] = MEMORY[0x1E4F143A8];
        v217[1] = 3221225472;
        v217[2] = ___ZN19ResultStreamWrapper30resultPackageWithResultChoicesERKNSt3__16vectorINS1_IN6quasar5TokenENS0_9allocatorIS3_EEEENS4_IS6_EEEEbP13_EARFormatterRKNS2_14AudioAnalyticsERKNS2_20LatnnMitigatorResultEdP8NSStringjSK_bRKS6_PU15__autoreleasingP27_EARSpeechRecognitionResultbNS0_10shared_ptrINS2_25ContinuousListeningConfigEEEbbSM_RS8_RKNS1_INS2_11ItnOverrideENS4_ISV_EEEEtbbPU15__autoreleasingP34_EARSpeechRecognitionResultPackageRKNS1_INS0_3setINS0_12basic_stringIcNS0_11char_traitsIcEENS4_IcEEEENS0_4lessIS19_EENS4_IS19_EEEENS4_IS1D_EEEEPU15__autoreleasingP12NSDictionaryISK_S11_EbbSM_bRKNSR_IKNS2_32VoiceCommandActiveSetCompilationEEEbPU15__autoreleasingPS1I_ISK_P8NSNumberEPU15__autoreleasingP7NSArrayISK_EdPU15__autoreleasingPS1Y_IPS1Y_IS1T_EEbbbP5NSSetISK_EiP23_EARRelevantTextContextNSR_INS2_20corrective_reranking6ParserEEEb_block_invoke_2;
        v217[3] = &unk_1E5FFE640;
        long long v219 = a31;
        id v218 = v186;
        [v163 enumerateObjectsUsingBlock:v217];
        uint64_t v167 = [v191 nBest];
        v214[0] = MEMORY[0x1E4F143A8];
        v214[1] = 3221225472;
        v214[2] = ___ZN19ResultStreamWrapper30resultPackageWithResultChoicesERKNSt3__16vectorINS1_IN6quasar5TokenENS0_9allocatorIS3_EEEENS4_IS6_EEEEbP13_EARFormatterRKNS2_14AudioAnalyticsERKNS2_20LatnnMitigatorResultEdP8NSStringjSK_bRKS6_PU15__autoreleasingP27_EARSpeechRecognitionResultbNS0_10shared_ptrINS2_25ContinuousListeningConfigEEEbbSM_RS8_RKNS1_INS2_11ItnOverrideENS4_ISV_EEEEtbbPU15__autoreleasingP34_EARSpeechRecognitionResultPackageRKNS1_INS0_3setINS0_12basic_stringIcNS0_11char_traitsIcEENS4_IcEEEENS0_4lessIS19_EENS4_IS19_EEEENS4_IS1D_EEEEPU15__autoreleasingP12NSDictionaryISK_S11_EbbSM_bRKNSR_IKNS2_32VoiceCommandActiveSetCompilationEEEbPU15__autoreleasingPS1I_ISK_P8NSNumberEPU15__autoreleasingP7NSArrayISK_EdPU15__autoreleasingPS1Y_IPS1Y_IS1T_EEbbbP5NSSetISK_EiP23_EARRelevantTextContextNSR_INS2_20corrective_reranking6ParserEEEb_block_invoke_3;
        v214[3] = &unk_1E5FFE640;
        long long v216 = a31;
        id v215 = v185;
        [v167 enumerateObjectsUsingBlock:v214];
      }
      goto LABEL_201;
    }
    long long v237 = 0u;
    long long v236 = 0u;
    long long v235 = 0u;
    long long v234 = 0u;
    long long v233 = 0u;
    long long __p = 0u;
    uint64_t v238 = 0x101010101010101;
    int v239 = 0;
    __int16 v240 = 257;
    char v241 = 0;
    int v242 = 10;
    __int16 v243 = 256;
    long long v164 = [v163 objectAtIndex:0];
    long long v165 = EARHelpers::EarTokensToNSString(v164);

    if (v165)
    {
      objc_msgSend(v165, "ear_toString");
      if (SBYTE7(v253) < 0)
      {
        std::string::__init_copy_ctor_external(&v230, (const std::string::value_type *)__s, *((std::string::size_type *)&__s + 1));
        int v231 = 0;
        if (SBYTE7(v253) < 0) {
          operator delete((void *)__s);
        }
        goto LABEL_181;
      }
    }
    else
    {
      long long __s = 0uLL;
      *(void *)&long long v253 = 0;
    }
    *(_OWORD *)&v230.__r_.__value_.__l.__data_ = __s;
    v230.__r_.__value_.__r.__words[2] = v253;
    int v231 = 0;
LABEL_181:
    uint64_t v168 = v234;
    if ((unint64_t)v234 >= *((void *)&v234 + 1))
    {
      uint64_t v170 = std::vector<quasar::corrective_reranking::ASRCandidate>::__push_back_slow_path<quasar::corrective_reranking::ASRCandidate const&>((uint64_t *)&v233 + 1, (long long *)&v230);
    }
    else
    {
      if (SHIBYTE(v230.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v234, v230.__r_.__value_.__l.__data_, v230.__r_.__value_.__l.__size_);
      }
      else
      {
        long long v169 = *(_OWORD *)&v230.__r_.__value_.__l.__data_;
        *(void *)(v234 + 16) = *((void *)&v230.__r_.__value_.__l + 2);
        *(_OWORD *)uint64_t v168 = v169;
      }
      *(_DWORD *)(v168 + ++*(_DWORD *)(result + 24) = v231;
      uint64_t v170 = v168 + 32;
    }
    *(void *)&long long v234 = v170;
    p_p = 0;
    p_p_p = (const std::string *)&p_p;
    uint64_t v225 = 0x4812000000;
    long long v226 = __Block_byref_object_copy__1317;
    long long v227 = __Block_byref_object_dispose__1318;
    long long v228 = 0u;
    long long v229 = 0u;
    v220[0] = MEMORY[0x1E4F143A8];
    v220[1] = 3221225472;
    v220[2] = ___ZN19ResultStreamWrapper30resultPackageWithResultChoicesERKNSt3__16vectorINS1_IN6quasar5TokenENS0_9allocatorIS3_EEEENS4_IS6_EEEEbP13_EARFormatterRKNS2_14AudioAnalyticsERKNS2_20LatnnMitigatorResultEdP8NSStringjSK_bRKS6_PU15__autoreleasingP27_EARSpeechRecognitionResultbNS0_10shared_ptrINS2_25ContinuousListeningConfigEEEbbSM_RS8_RKNS1_INS2_11ItnOverrideENS4_ISV_EEEEtbbPU15__autoreleasingP34_EARSpeechRecognitionResultPackageRKNS1_INS0_3setINS0_12basic_stringIcNS0_11char_traitsIcEENS4_IcEEEENS0_4lessIS19_EENS4_IS19_EEEENS4_IS1D_EEEEPU15__autoreleasingP12NSDictionaryISK_S11_EbbSM_bRKNSR_IKNS2_32VoiceCommandActiveSetCompilationEEEbPU15__autoreleasingPS1I_ISK_P8NSNumberEPU15__autoreleasingP7NSArrayISK_EdPU15__autoreleasingPS1Y_IPS1Y_IS1T_EEbbbP5NSSetISK_EiP23_EARRelevantTextContextNSR_INS2_20corrective_reranking6ParserEEEb_block_invoke_1319;
    v220[3] = &unk_1E5FFE618;
    long long v222 = &p_p;
    id v221 = v190;
    [v184 getLeftAndRightContextWithCompletion:v220];
    std::string::operator=((std::string *)&__p, p_p_p + 2);
    LOBYTE(v243) = 1;
    char v241 = [v184 disambiguationActive];
    if (quasar::gLogLevel >= 5)
    {
      long long v267 = 0u;
      long long v268 = 0u;
      long long v265 = 0u;
      long long v266 = 0u;
      long long v263 = 0u;
      long long v264 = 0u;
      long long v261 = 0u;
      long long v262 = 0u;
      long long v259 = 0u;
      long long v260 = 0u;
      long long v257 = 0u;
      long long v258 = 0u;
      long long v255 = 0u;
      long long v256 = 0u;
      long long v253 = 0u;
      long long v254 = 0u;
      long long __s = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__s);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__s, (uint64_t)"Voice Command: disambiguationActive", 35);
      std::ostream::operator<<();
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&__s);
    }
    quasar::corrective_reranking::Parser::run(*a42, (const quasar::corrective_reranking::Parser::RunArgs *)&__p, (uint64_t)&__s);
    id v171 = EARHelpers::EARVoiceCommandInterpretationFromQuasarCorrectiveRerankingParserStackOutput((uint64_t)&__p, (uint64_t)&__s);
    if ([v171 count]) {
      [v186 addObject:v171];
    }

    v284[0] = (void **)&__s + 1;
    std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100](v284);

    _Block_object_dispose(&p_p, 8);
    if (SHIBYTE(v229) < 0) {
      operator delete(*((void **)&v228 + 1));
    }
    if (SHIBYTE(v230.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v230.__r_.__value_.__l.__data_);
    }

    if (*((void *)&v236 + 1))
    {
      *(void *)&long long v237 = *((void *)&v236 + 1);
      operator delete(*((void **)&v236 + 1));
    }
    if ((void)v235)
    {
      *((void *)&v235 + 1) = v235;
      operator delete((void *)v235);
    }
    *(void *)&long long __s = (char *)&v233 + 8;
    std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s);
    if (SBYTE7(v233) < 0) {
      operator delete((void *)__p);
    }
LABEL_201:
  }
  BOOL v172 = [_EARSpeechRecognitionResultPackage alloc];
  v173 = [NSNumber numberWithDouble:a10];
  BYTE1(v179) = a32;
  LOBYTE(v179) = a28;
  id v174 = -[_EARSpeechRecognitionResultPackage _initWithRecognition:preITNRecognition:unrepairedRecognition:recognitionIsFormatted:isFinal:audioAnalytics:utteranceStart:latticeMitigatorResult:nBestVoiceCommandInterpretations:preITNNBestVoiceCommandInterpretations:recognitionPaused:firstResultAfterResume:endOfSentenceLikelihood:numTokensExcludingTriggerPhrase:voiceCommandDebugInfo:performanceMarkers:](v172, "_initWithRecognition:preITNRecognition:unrepairedRecognition:recognitionIsFormatted:isFinal:audioAnalytics:utteranceStart:latticeMitigatorResult:nBestVoiceCommandInterpretations:preITNNBestVoiceCommandInterpretations:recognitionPaused:firstResultAfterResume:endOfSentenceLikelihood:numTokensExcludingTriggerPhrase:voiceCommandDebugInfo:performanceMarkers:", v196, v205, v200, v208 != 0, a2, v202, v102, v203, v186, v185, v179, v173, a40, 0,
           0);

  std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>>>::destroy((uint64_t)&v285, v286[0]);
  std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>>>::destroy((uint64_t)&v287, v288[0]);
  std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>>>::destroy((uint64_t)&v289, v290[0]);
  std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>>>::destroy((uint64_t)&v291, v292[0]);
  *(void *)&long long __s = &v293;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s);
  *(void *)&long long __s = &v296;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s);
  *(void *)&long long __s = &v299;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s);
  *(void *)&long long __s = &v302;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s);

  return v174;
}

void sub_1B1BD90E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,void *a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60,void *a61)
{
  std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>>>::destroy((uint64_t)&STACK[0x5A8], (void *)STACK[0x5B0]);
  std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>>>::destroy((uint64_t)&STACK[0x5C0], (void *)STACK[0x5C8]);
  std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>>>::destroy((uint64_t)&STACK[0x5D8], (void *)STACK[0x5E0]);
  std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>>>::destroy((uint64_t)&STACK[0x5F0], (void *)STACK[0x5F8]);
  STACK[0x3B0] = (unint64_t)&STACK[0x608];
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x3B0]);
  STACK[0x3B0] = (unint64_t)&STACK[0x620];
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x3B0]);
  STACK[0x3B0] = (unint64_t)&STACK[0x638];
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x3B0]);
  STACK[0x3B0] = (unint64_t)&STACK[0x650];
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x3B0]);

  _Unwind_Resume(a1);
}

void logPackageToQuasarDebug(_EARSpeechRecognitionResultPackage *a1, NSString *a2)
{
  long long v38 = a1;
  uint64_t v3 = a2;
  if (quasar::gLogLevel >= 5)
  {
    long long v62 = 0u;
    long long v63 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v47 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v47);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v47, (uint64_t)"Quasar PostITN Result. isFinal=", 31);
    [(_EARSpeechRecognitionResultPackage *)v38 isFinal];
    uint64_t v4 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" candidate=", 11);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v47);
  }
  long long v40 = [(_EARSpeechRecognitionResultPackage *)v38 nBestResults];
  int v5 = [v40 count];
  if (v5)
  {
    std::string v6 = [v40 firstObject];
    std::string v7 = [v6 tokens];

    long long v36 = v7;
    long long v37 = transcriptFromTokens(v7);
    if (quasar::gLogLevel >= 5)
    {
      long long v62 = 0u;
      long long v63 = 0u;
      long long v60 = 0u;
      long long v61 = 0u;
      long long v58 = 0u;
      long long v59 = 0u;
      long long v56 = 0u;
      long long v57 = 0u;
      long long v54 = 0u;
      long long v55 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      long long v47 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v47);
      id v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v47, (uint64_t)"PostITN 1-Best: ", 16);
      if (v37)
      {
        objc_msgSend(v37, "ear_toString");
        unsigned int v9 = HIBYTE(v46);
        uint64_t v10 = (void **)__p;
        uint64_t v11 = v45;
      }
      else
      {
        uint64_t v11 = 0;
        uint64_t v10 = 0;
        unsigned int v9 = 0;
        long long __p = 0;
        uint64_t v45 = 0;
        uint64_t v46 = 0;
      }
      if ((v9 & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = v10;
      }
      if ((v9 & 0x80u) == 0) {
        uint64_t v13 = v9;
      }
      else {
        uint64_t v13 = v11;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)p_p, v13);
      if (SHIBYTE(v46) < 0) {
        operator delete(__p);
      }
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v47);
    }
    if (v5 >= 1)
    {
      uint64_t v14 = 0;
      uint64_t v39 = v5;
      do
      {
        if (quasar::gLogLevel >= 5)
        {
          long long v62 = 0u;
          long long v63 = 0u;
          long long v60 = 0u;
          long long v61 = 0u;
          long long v58 = 0u;
          long long v59 = 0u;
          long long v56 = 0u;
          long long v57 = 0u;
          long long v54 = 0u;
          long long v55 = 0u;
          long long v52 = 0u;
          long long v53 = 0u;
          long long v50 = 0u;
          long long v51 = 0u;
          long long v48 = 0u;
          long long v49 = 0u;
          long long v47 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v47);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v47, (uint64_t)"PostITN Choice: ", 16);
          std::ostream::operator<<();
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v47);
        }
        uint64_t v15 = [v40 objectAtIndexedSubscript:v14];
        long long v16 = [v15 tokens];

        for (unint64_t i = 0; [v16 count] > i; ++i)
        {
          if (quasar::gLogLevel >= 5)
          {
            long long v62 = 0u;
            long long v63 = 0u;
            long long v60 = 0u;
            long long v61 = 0u;
            long long v58 = 0u;
            long long v59 = 0u;
            long long v56 = 0u;
            long long v57 = 0u;
            long long v54 = 0u;
            long long v55 = 0u;
            long long v52 = 0u;
            long long v53 = 0u;
            long long v50 = 0u;
            long long v51 = 0u;
            long long v48 = 0u;
            long long v49 = 0u;
            long long v47 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v47);
            int v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v47, (uint64_t)"PostITN Token[", 14);
            if (v3)
            {
              [(NSString *)v3 ear_toString];
              uint64_t v19 = HIBYTE(v46);
              id v20 = (void **)__p;
              uint64_t v21 = v45;
            }
            else
            {
              uint64_t v21 = 0;
              id v20 = 0;
              uint64_t v19 = 0;
              long long __p = 0;
              uint64_t v45 = 0;
              uint64_t v46 = 0;
            }
            if ((v19 & 0x80u) == 0) {
              id v22 = &__p;
            }
            else {
              id v22 = v20;
            }
            if ((v19 & 0x80u) == 0) {
              uint64_t v23 = v19;
            }
            else {
              uint64_t v23 = v21;
            }
            id v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v22, v23);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"][", 2);
            long long v25 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"][", 2);
            long long v26 = (void *)std::ostream::operator<<();
            long long v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"]: ", 3);
            uint64_t v28 = [v16 objectAtIndexedSubscript:i];
            uint64_t v29 = [v28 description];
            long long v30 = v29;
            if (v29)
            {
              objc_msgSend(v29, "ear_toString");
              uint64_t v31 = HIBYTE(v43);
              long long v32 = (void **)v41;
              uint64_t v33 = v42;
            }
            else
            {
              uint64_t v33 = 0;
              long long v32 = 0;
              uint64_t v31 = 0;
              long long v41 = 0;
              uint64_t v42 = 0;
              uint64_t v43 = 0;
            }
            if ((v31 & 0x80u) == 0) {
              unsigned __int8 v34 = &v41;
            }
            else {
              unsigned __int8 v34 = v32;
            }
            if ((v31 & 0x80u) == 0) {
              uint64_t v35 = v31;
            }
            else {
              uint64_t v35 = v33;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v34, v35);
            if (SHIBYTE(v43) < 0) {
              operator delete(v41);
            }

            if (SHIBYTE(v46) < 0) {
              operator delete(__p);
            }
            quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v47);
          }
        }

        ++v14;
      }
      while (v14 != v39);
    }
  }
}

void sub_1B1BD9C24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, void *a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a27);

  _Unwind_Resume(a1);
}

void ___ZN19ResultStreamWrapper30resultPackageWithResultChoicesERKNSt3__16vectorINS1_IN6quasar5TokenENS0_9allocatorIS3_EEEENS4_IS6_EEEEbP13_EARFormatterRKNS2_14AudioAnalyticsERKNS2_20LatnnMitigatorResultEdP8NSStringjSK_bRKS6_PU15__autoreleasingP27_EARSpeechRecognitionResultbNS0_10shared_ptrINS2_25ContinuousListeningConfigEEEbbSM_RS8_RKNS1_INS2_11ItnOverrideENS4_ISV_EEEEtbbPU15__autoreleasingP34_EARSpeechRecognitionResultPackageRKNS1_INS0_3setINS0_12basic_stringIcNS0_11char_traitsIcEENS4_IcEEEENS0_4lessIS19_EENS4_IS19_EEEENS4_IS1D_EEEEPU15__autoreleasingP12NSDictionaryISK_S11_EbbSM_bRKNSR_IKNS2_32VoiceCommandActiveSetCompilationEEEbPU15__autoreleasingPS1I_ISK_P8NSNumberEPU15__autoreleasingP7NSArrayISK_EdPU15__autoreleasingPS1Y_IPS1Y_IS1T_EEbbbP5NSSetISK_EiP23_EARRelevantTextContextNSR_INS2_20corrective_reranking6ParserEEEb_block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v9 = a2;
  id v7 = a3;
  id v8 = a4;
  [*(id *)(a1 + 32) addObject:v8];
  if (!*(_DWORD *)(a1 + 56) && *(void *)(a1 + 40) && *(void *)(a1 + 48))
  {
    **(void **)(a1 + 40) = (id)[objc_alloc(MEMORY[0x1E4F1C9E8]) initWithDictionary:v9];
    **(void **)(a1 + 48) = (id)[objc_alloc(MEMORY[0x1E4F1C978]) initWithArray:v7];
  }
}

void sub_1B1BD9E18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id ResultStreamWrapper::getEARAcousticFeature(uint64_t a1)
{
  id v2 = [[_EARLazyDoubleArray alloc] _initWithDoubleVector:a1];
  uint64_t v3 = [_EARAcousticFeature alloc];
  double v4 = *(double *)(a1 + 24) / 1000.0;
  *(float *)&double v4 = v4;
  id v5 = [(_EARAcousticFeature *)v3 _initWithAcousticFeatureValues:v2 frameDuration:v4];

  return v5;
}

void sub_1B1BD9EB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__1317(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a1[3] = result;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  a2[3].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__1318(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
}

void ___ZN19ResultStreamWrapper30resultPackageWithResultChoicesERKNSt3__16vectorINS1_IN6quasar5TokenENS0_9allocatorIS3_EEEENS4_IS6_EEEEbP13_EARFormatterRKNS2_14AudioAnalyticsERKNS2_20LatnnMitigatorResultEdP8NSStringjSK_bRKS6_PU15__autoreleasingP27_EARSpeechRecognitionResultbNS0_10shared_ptrINS2_25ContinuousListeningConfigEEEbbSM_RS8_RKNS1_INS2_11ItnOverrideENS4_ISV_EEEEtbbPU15__autoreleasingP34_EARSpeechRecognitionResultPackageRKNS1_INS0_3setINS0_12basic_stringIcNS0_11char_traitsIcEENS4_IcEEEENS0_4lessIS19_EENS4_IS19_EEEENS4_IS1D_EEEEPU15__autoreleasingP12NSDictionaryISK_S11_EbbSM_bRKNSR_IKNS2_32VoiceCommandActiveSetCompilationEEEbPU15__autoreleasingPS1I_ISK_P8NSNumberEPU15__autoreleasingP7NSArrayISK_EdPU15__autoreleasingPS1Y_IPS1Y_IS1T_EEbbbP5NSSetISK_EiP23_EARRelevantTextContextNSR_INS2_20corrective_reranking6ParserEEEb_block_invoke_1319(uint64_t a1, void *a2, void *a3)
{
  *(void *)&long long v22 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    objc_msgSend(v5, "ear_toString");
  }
  else
  {
    long long v15 = 0uLL;
    uint64_t v16 = 0;
  }
  id v7 = *(void **)(a1 + 32);
  if (v7)
  {
    objc_msgSend(v7, "ear_toString");
  }
  else
  {
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
  }
  if (v6)
  {
    objc_msgSend(v6, "ear_toString");
  }
  else
  {
    v20[0] = 0;
    v20[1] = 0;
    uint64_t v21 = 0;
  }
  memset(&v11, 0, sizeof(v11));
  uint64_t v13 = &v11;
  char v14 = 0;
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x48uLL);
  v11.__r_.__value_.__l.__size_ = v11.__r_.__value_.__r.__words[0];
  v11.__r_.__value_.__r.__words[2] = v11.__r_.__value_.__r.__words[0] + 72;
  v11.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v11.__r_.__value_.__r.__words[2], &v15, &v22, (std::string *)v11.__r_.__value_.__l.__data_);
  quasar::joinAndAutoSpace(&v11, &v12);
  uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8);
  id v9 = (void **)(v8 + 48);
  if (*(char *)(v8 + 71) < 0) {
    operator delete(*v9);
  }
  *(std::string *)id v9 = v12;
  *((unsigned char *)&v12.__r_.__value_.__s + 23) = 0;
  v12.__r_.__value_.__s.__data_[0] = 0;
  uint64_t v13 = &v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v13);
  for (uint64_t i = 0; i != -9; i -= 3)
  {
    if (*((char *)&v21 + i * 8 + 7) < 0) {
      operator delete((void *)v20[i]);
    }
  }
}

void sub_1B1BDA098(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void quasar::corrective_reranking::Parser::RunArgs::~RunArgs(quasar::corrective_reranking::Parser::RunArgs *this)
{
  id v2 = (void *)*((void *)this + 9);
  if (v2)
  {
    *((void *)this + 10) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 6);
  if (v3)
  {
    *((void *)this + 7) = v3;
    operator delete(v3);
  }
  double v4 = (void **)((char *)this + 24);
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void ___ZN19ResultStreamWrapper30resultPackageWithResultChoicesERKNSt3__16vectorINS1_IN6quasar5TokenENS0_9allocatorIS3_EEEENS4_IS6_EEEEbP13_EARFormatterRKNS2_14AudioAnalyticsERKNS2_20LatnnMitigatorResultEdP8NSStringjSK_bRKS6_PU15__autoreleasingP27_EARSpeechRecognitionResultbNS0_10shared_ptrINS2_25ContinuousListeningConfigEEEbbSM_RS8_RKNS1_INS2_11ItnOverrideENS4_ISV_EEEEtbbPU15__autoreleasingP34_EARSpeechRecognitionResultPackageRKNS1_INS0_3setINS0_12basic_stringIcNS0_11char_traitsIcEENS4_IcEEEENS0_4lessIS19_EENS4_IS19_EEEENS4_IS1D_EEEEPU15__autoreleasingP12NSDictionaryISK_S11_EbbSM_bRKNSR_IKNS2_32VoiceCommandActiveSetCompilationEEEbPU15__autoreleasingPS1I_ISK_P8NSNumberEPU15__autoreleasingP7NSArrayISK_EdPU15__autoreleasingPS1Y_IPS1Y_IS1T_EEbbbP5NSSetISK_EiP23_EARRelevantTextContextNSR_INS2_20corrective_reranking6ParserEEEb_block_invoke_2(uint64_t a1, void *a2)
{
  EARHelpers::QuasarResultFromEARSpeechRecognitionTokens(a2, &v4);
  memset(v3, 0, sizeof(v3));
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v3, v4, v5, 0x6DB6DB6DB6DB6DB7 * ((v5 - v4) >> 5));
  EARVoiceCommandInterpretationsFromQuasarTokens(v3, **(void **)(a1 + 40));
}

void sub_1B1BDA24C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  *(void *)(v14 - 40) = &a13;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 40));
  _Unwind_Resume(a1);
}

void ___ZN19ResultStreamWrapper30resultPackageWithResultChoicesERKNSt3__16vectorINS1_IN6quasar5TokenENS0_9allocatorIS3_EEEENS4_IS6_EEEEbP13_EARFormatterRKNS2_14AudioAnalyticsERKNS2_20LatnnMitigatorResultEdP8NSStringjSK_bRKS6_PU15__autoreleasingP27_EARSpeechRecognitionResultbNS0_10shared_ptrINS2_25ContinuousListeningConfigEEEbbSM_RS8_RKNS1_INS2_11ItnOverrideENS4_ISV_EEEEtbbPU15__autoreleasingP34_EARSpeechRecognitionResultPackageRKNS1_INS0_3setINS0_12basic_stringIcNS0_11char_traitsIcEENS4_IcEEEENS0_4lessIS19_EENS4_IS19_EEEENS4_IS1D_EEEEPU15__autoreleasingP12NSDictionaryISK_S11_EbbSM_bRKNSR_IKNS2_32VoiceCommandActiveSetCompilationEEEbPU15__autoreleasingPS1I_ISK_P8NSNumberEPU15__autoreleasingP7NSArrayISK_EdPU15__autoreleasingPS1Y_IPS1Y_IS1T_EEbbbP5NSSetISK_EiP23_EARRelevantTextContextNSR_INS2_20corrective_reranking6ParserEEEb_block_invoke_3(uint64_t a1, void *a2)
{
  EARHelpers::QuasarResultFromEARSpeechRecognitionTokens(a2, &v4);
  memset(v3, 0, sizeof(v3));
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v3, v4, v5, 0x6DB6DB6DB6DB6DB7 * ((v5 - v4) >> 5));
  EARVoiceCommandInterpretationsFromQuasarTokens(v3, **(void **)(a1 + 40));
}

void sub_1B1BDA33C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  *(void *)(v14 - 40) = &a13;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 40));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  id v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  id v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v11, v8, v10[0]);
    id v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  id v6 = operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  id v7 = (std::string *)(v6 + 4);
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_1B1BDA4A4(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  id v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::vector<quasar::Token>>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::vector<quasar::Token>>>,0>(uint64_t a1)
{
  id v2 = (void **)(a1 + 24);
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

uint64_t std::vector<quasar::corrective_reranking::ASRCandidate>::__push_back_slow_path<quasar::corrective_reranking::ASRCandidate const&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v18 = a1 + 2;
  if (v9) {
    uint64_t v10 = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = (std::string *)&v10[8 * v4];
  v15[0] = v10;
  v15[1] = v11;
  uint64_t v16 = v11;
  uint64_t v17 = (char *)&v10[8 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    uint64_t v11 = v16;
  }
  else
  {
    long long v12 = *a2;
    v11->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
  }
  v10[8 * v4 + 6] = *((_DWORD *)a2 + 6);
  uint64_t v16 = (std::string *)((char *)v11 + 32);
  std::vector<quasar::corrective_reranking::ASRCandidate>::__swap_out_circular_buffer(a1, v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_1B1BDA658(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::corrective_reranking::ASRCandidate>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::corrective_reranking::ASRCandidate>,std::reverse_iterator<quasar::corrective_reranking::ASRCandidate*>,std::reverse_iterator<quasar::corrective_reranking::ASRCandidate*>,std::reverse_iterator<quasar::corrective_reranking::ASRCandidate*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::corrective_reranking::ASRCandidate>,std::reverse_iterator<quasar::corrective_reranking::ASRCandidate*>,std::reverse_iterator<quasar::corrective_reranking::ASRCandidate*>,std::reverse_iterator<quasar::corrective_reranking::ASRCandidate*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = a7;
    do
    {
      long long v9 = *(_OWORD *)(a3 - 32);
      *(void *)(v8 - 16) = *(void *)(a3 - 16);
      *(_OWORD *)(v8 - 32) = v9;
      *(void *)(a3 - ++*(_DWORD *)(result + 24) = 0;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 32) = 0;
      *(_DWORD *)(v8 - 8) = *(_DWORD *)(a3 - 8);
      v8 -= 32;
      v7 -= 32;
      a3 -= 32;
    }
    while (a3 != a5);
    *((void *)&v15 + 1) = v8;
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::corrective_reranking::ASRCandidate>,std::reverse_iterator<quasar::corrective_reranking::ASRCandidate*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::corrective_reranking::ASRCandidate>,std::reverse_iterator<quasar::corrective_reranking::ASRCandidate*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::Token>,std::reverse_iterator<quasar::TextTokenizer::Token*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  id v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        quasar::corrective_reranking::Parse::~Parse((quasar::corrective_reranking::Parse *)(v4 - 232));
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void quasar::corrective_reranking::Parse::~Parse(quasar::corrective_reranking::Parse *this)
{
  uint64_t v4 = (void **)((char *)this + 208);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v4 = (void **)((char *)this + 184);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  id v2 = (void *)*((void *)this + 19);
  if (v2)
  {
    *((void *)this + 20) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 143) < 0) {
    operator delete(*((void **)this + 15));
  }
  if (*((unsigned char *)this + 112))
  {
    uint64_t v3 = (void *)*((void *)this + 11);
    if (v3)
    {
      *((void *)this + 12) = v3;
      operator delete(v3);
    }
  }
  uint64_t v4 = (void **)((char *)this + 56);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v4 = (void **)((char *)this + 32);
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::Token>>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::vector<quasar::Token>>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void ___ZL31EARErrorCodeForExceptionMessageP8NSString_block_invoke(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  id v8 = a2;
  id v7 = a3;
  if ([*(id *)(a1 + 32) containsString:v8])
  {
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + ++*(_DWORD *)(result + 24) = [v7 integerValue];
    *a4 = 1;
  }
}

void sub_1B1BDA9EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void quasar::SpeechRecognizerActiveConfiguration::~SpeechRecognizerActiveConfiguration(char **this)
{
  if (*((unsigned char *)this + 248)) {
    std::__tree<std::string>::destroy((uint64_t)(this + 28), this[29]);
  }
  if (*((unsigned char *)this + 216)) {
    std::__tree<std::string>::destroy((uint64_t)(this + 24), this[25]);
  }
  if (*((unsigned char *)this + 184)) {
    std::__tree<std::string>::destroy((uint64_t)(this + 20), this[21]);
  }
  if (*((unsigned char *)this + 152)) {
    std::__tree<int>::destroy((uint64_t)(this + 16), this[17]);
  }
  if (*((unsigned char *)this + 120)) {
    std::__tree<int>::destroy((uint64_t)(this + 12), this[13]);
  }
  if (*((unsigned char *)this + 88)) {
    std::__tree<std::string>::destroy((uint64_t)(this + 8), this[9]);
  }
  if (*((unsigned char *)this + 56)) {
    std::__tree<std::string>::destroy((uint64_t)(this + 4), this[5]);
  }
  if (*((unsigned char *)this + 24)) {
    std::__tree<int>::destroy((uint64_t)this, this[1]);
  }
}

void quasar::VoiceCommandActiveSetCompilation::CommandSpec::~CommandSpec(void **this)
{
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void *std::allocate_shared[abi:ne180100]<quasar::LmeContainer,std::allocator<quasar::LmeContainer>,std::shared_ptr<quasar::LmeData const>,std::string,quasar::LmeDataFactoryBase::LmeType,void>@<X0>(long long *a1@<X1>, uint64_t a2@<X2>, unsigned int *a3@<X3>, void *a4@<X8>)
{
  id v8 = operator new(0x48uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::LmeContainer>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::LmeData const>,std::string,quasar::LmeDataFactoryBase::LmeType,std::allocator<quasar::LmeContainer>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1B1BDAB78(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::LmeContainer>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::LmeData const>,std::string,quasar::LmeDataFactoryBase::LmeType,std::allocator<quasar::LmeContainer>,0>(void *a1, long long *a2, uint64_t a3, unsigned int *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5FA00;
  std::allocator<quasar::LmeContainer>::construct[abi:ne180100]<quasar::LmeContainer,std::shared_ptr<quasar::LmeData const>,std::string,quasar::LmeDataFactoryBase::LmeType>((uint64_t)&v6, (uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_1B1BDABF0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::LmeContainer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5FA00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::LmeContainer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5FA00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<quasar::LmeContainer>::__on_zero_shared(uint64_t a1)
{
  std::allocator<quasar::LmeContainer>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

void std::allocator<quasar::LmeContainer>::construct[abi:ne180100]<quasar::LmeContainer,std::shared_ptr<quasar::LmeData const>,std::string,quasar::LmeDataFactoryBase::LmeType>(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, unsigned int *a5)
{
  long long v5 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  quasar::LmeContainer::LmeContainer(a2, &v5, a4, *a5);
  if (*((void *)&v5 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v5 + 1));
  }
}

void sub_1B1BDACF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void std::allocator<quasar::LmeContainer>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 39) < 0) {
    operator delete(*(void **)(a2 + 16));
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a2 + 8);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void *std::vector<quasar::LmeDataFactoryBase::LmeType>::__init_with_size[abi:ne180100]<quasar::LmeDataFactoryBase::LmeType*,quasar::LmeDataFactoryBase::LmeType*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    char v6 = result;
    uint64_t result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B1BDADC4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::map<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,std::__tree_node<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,void *> *,long>>>(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_1B1BDAE20(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,std::__map_value_compare<quasar::LmeDataFactoryBase::LmeType,std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,std::less<quasar::LmeDataFactoryBase::LmeType>,true>,std::allocator<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,std::__tree_node<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,void *> *,long>>>(uint64_t *result, int *a2, int *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    long long v5 = (uint64_t **)result;
    char v6 = result + 1;
    do
    {
      uint64_t result = std::__tree<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,std::__map_value_compare<quasar::LmeDataFactoryBase::LmeType,std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,std::less<quasar::LmeDataFactoryBase::LmeType>,true>,std::allocator<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>>>::__emplace_hint_unique_key_args<quasar::LmeDataFactoryBase::LmeType,std::pair<quasar::LmeDataFactoryBase::LmeType const,std::vector<std::shared_ptr<quasar::LmeContainer>>> const&>(v5, v6, v4 + 8, (uint64_t)(v4 + 8));
      uint64_t v7 = (int *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          size_t v8 = v7;
          uint64_t v7 = *(int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          size_t v8 = (int *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,std::__map_value_compare<quasar::LmeDataFactoryBase::LmeType,std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,std::less<quasar::LmeDataFactoryBase::LmeType>,true>,std::allocator<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>>>::__emplace_hint_unique_key_args<quasar::LmeDataFactoryBase::LmeType,std::pair<quasar::LmeDataFactoryBase::LmeType const,std::vector<std::shared_ptr<quasar::LmeContainer>>> const&>(uint64_t **a1, uint64_t *a2, int *a3, uint64_t a4)
{
  char v6 = (uint64_t **)std::__tree<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,std::__map_value_compare<quasar::LmeDataFactoryBase::LmeType,std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,std::less<quasar::LmeDataFactoryBase::LmeType>,true>,std::allocator<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>>>::__find_equal<quasar::LmeDataFactoryBase::LmeType>(a1, a2, &v10, &v9, a3);
  uint64_t result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,std::__map_value_compare<quasar::LmeDataFactoryBase::LmeType,std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,std::less<quasar::LmeDataFactoryBase::LmeType>,true>,std::allocator<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>>>::__construct_node<std::pair<quasar::LmeDataFactoryBase::LmeType const,std::vector<std::shared_ptr<quasar::LmeContainer>>> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,std::__map_value_compare<quasar::LmeDataFactoryBase::LmeType,std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,std::less<quasar::LmeDataFactoryBase::LmeType>,true>,std::allocator<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>>>::__find_equal<quasar::LmeDataFactoryBase::LmeType>(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, int *a5)
{
  long long v5 = a1 + 1;
  if (a1 + 1 == a2 || (int v6 = *a5, v7 = *((_DWORD *)a2 + 8), *a5 < v7))
  {
    size_t v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      uint64_t v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        uint64_t v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      char v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        char v13 = v10;
      }
      while (v14);
    }
    int v15 = *a5;
    if (*((_DWORD *)v10 + 8) < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v17 = (uint64_t *)v16;
          int v18 = *(_DWORD *)(v16 + 32);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          long long v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        long long v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      uint64_t v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    long long v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      long long v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    uint64_t v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      uint64_t v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 8))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v21 = (uint64_t *)v20;
          int v22 = *(_DWORD *)(v20 + 32);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          long long v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        long long v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      uint64_t v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void *std::__tree<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,std::__map_value_compare<quasar::LmeDataFactoryBase::LmeType,std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,std::less<quasar::LmeDataFactoryBase::LmeType>,true>,std::allocator<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>>>::__construct_node<std::pair<quasar::LmeDataFactoryBase::LmeType const,std::vector<std::shared_ptr<quasar::LmeContainer>>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  int v6 = operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  v6[8] = *(_DWORD *)a2;
  *((void *)v6 + 6) = 0;
  *((void *)v6 + 7) = 0;
  *((void *)v6 + 5) = 0;
  uint64_t result = std::vector<std::shared_ptr<quasar::LmeContainer>>::__init_with_size[abi:ne180100]<std::shared_ptr<quasar::LmeContainer>*,std::shared_ptr<quasar::LmeContainer>*>((void *)v6 + 5, *(void **)(a2 + 8), *(void **)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 4);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1B1BDB16C(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void *std::vector<std::shared_ptr<quasar::LmeContainer>>::__init_with_size[abi:ne180100]<std::shared_ptr<quasar::LmeContainer>*,std::shared_ptr<quasar::LmeContainer>*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<quasar::LmeContainer>>,std::shared_ptr<quasar::LmeContainer>*,std::shared_ptr<quasar::LmeContainer>*,std::shared_ptr<quasar::LmeContainer>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B1BDB1F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<quasar::LmeContainer>>,std::shared_ptr<quasar::LmeContainer>*,std::shared_ptr<quasar::LmeContainer>*,std::shared_ptr<quasar::LmeContainer>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  _OWORD v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      void *v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::LmeContainer>>,std::shared_ptr<quasar::LmeContainer>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::LmeContainer>>,std::shared_ptr<quasar::LmeContainer>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>,std::shared_ptr<kaldi::quasar::ComputeEngineItf>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = __p + 5;
    std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  if (__p) {
    operator delete(__p);
  }
}

void std::__tree<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,std::__map_value_compare<quasar::LmeDataFactoryBase::LmeType,std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,std::less<quasar::LmeDataFactoryBase::LmeType>,true>,std::allocator<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,std::__map_value_compare<quasar::LmeDataFactoryBase::LmeType,std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,std::less<quasar::LmeDataFactoryBase::LmeType>,true>,std::allocator<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>>>::destroy(a1, *(void *)a2);
    std::__tree<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,std::__map_value_compare<quasar::LmeDataFactoryBase::LmeType,std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,std::less<quasar::LmeDataFactoryBase::LmeType>,true>,std::allocator<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>>>::destroy(a1, *((void *)a2 + 1));
    uint64_t v4 = (void **)(a2 + 40);
    std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v4);
    operator delete(a2);
  }
}

void ___ZL28_EARSpeechRecognizerExecutorPvPFvS_ES__block_invoke(uint64_t a1)
{
}

uint64_t **std::__tree<int>::__assign_multi<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>(uint64_t **result, int *a2, int *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    int v6 = *result;
    int v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    _OWORD v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      char v8 = (uint64_t *)v6[1];
    }
    else {
      char v8 = v6;
    }
    BOOL v14 = result;
    int v15 = v8;
    uint64_t v16 = v8;
    if (v8)
    {
      int v15 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        uint64_t v9 = a2;
        do
        {
          *((_DWORD *)v8 + 7) = v9[7];
          std::__tree<int>::__node_insert_multi(v5, (uint64_t)v8);
          char v8 = v15;
          uint64_t v16 = v15;
          if (v15) {
            int v15 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v15);
          }
          uint64_t v10 = (int *)*((void *)v9 + 1);
          if (v10)
          {
            do
            {
              a2 = v10;
              uint64_t v10 = *(int **)v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (int *)*((void *)v9 + 2);
              BOOL v11 = *(void *)a2 == (void)v9;
              uint64_t v9 = a2;
            }
            while (!v11);
          }
          if (!v8) {
            break;
          }
          uint64_t v9 = a2;
        }
        while (a2 != a3);
      }
    }
    uint64_t result = (uint64_t **)std::__tree<int>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)std::__tree<int>::__emplace_multi<int const&>(v5, a2 + 7);
      long long v12 = (int *)*((void *)a2 + 1);
      if (v12)
      {
        do
        {
          char v13 = v12;
          long long v12 = *(int **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          char v13 = (int *)*((void *)a2 + 2);
          BOOL v11 = *(void *)v13 == (void)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_1B1BDB658(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<int>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<int>::__node_insert_multi(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = a1 + 1;
  uint64_t v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v3 = (uint64_t **)v4;
        if (*(_DWORD *)(a2 + 28) >= *((_DWORD *)v4 + 7)) {
          break;
        }
        uint64_t v4 = (uint64_t *)*v4;
        uint64_t v5 = v3;
        if (!*v3) {
          goto LABEL_8;
        }
      }
      uint64_t v4 = (uint64_t *)v4[1];
    }
    while (v4);
    uint64_t v5 = v3 + 1;
  }
  else
  {
    uint64_t v5 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v3, v5, (uint64_t *)a2);
  return a2;
}

uint64_t std::__tree<int>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<int>::destroy(*(void *)a1, *(void **)(a1 + 16));
  id v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        id v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<int>::destroy(*(void *)a1, v2);
  }
  return a1;
}

uint64_t *std::__tree<int>::__emplace_multi<int const&>(uint64_t **a1, int *a2)
{
  uint64_t v4 = (uint64_t *)operator new(0x20uLL);
  int v5 = *a2;
  *((_DWORD *)v4 + 7) = *a2;
  int v6 = a1 + 1;
  int v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        int v6 = (uint64_t **)v7;
        if (v5 >= *((_DWORD *)v7 + 7)) {
          break;
        }
        int v7 = (uint64_t *)*v7;
        char v8 = v6;
        if (!*v6) {
          goto LABEL_8;
        }
      }
      int v7 = (uint64_t *)v7[1];
    }
    while (v7);
    char v8 = v6 + 1;
  }
  else
  {
    char v8 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v6, v8, v4);
  return v4;
}

uint64_t **std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>(uint64_t **result, long long *a2, long long *a3)
{
  int v5 = result;
  if (result[2])
  {
    int v6 = *result;
    int v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    _OWORD v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      char v8 = (uint64_t *)v6[1];
    }
    else {
      char v8 = v6;
    }
    int v15 = result;
    uint64_t v16 = v8;
    uint64_t v17 = (const void **)v8;
    if (v8)
    {
      uint64_t v16 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        uint64_t v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 2));
          std::string::operator=((std::string *)(v8 + 7), (const std::string *)((char *)v9 + 56));
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_leaf_high((uint64_t)v5, &v18, v17 + 4);
          std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(v5, v18, leaf_high, (uint64_t *)v17);
          uint64_t v17 = (const void **)v16;
          if (v16) {
            uint64_t v16 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          }
          BOOL v11 = (long long *)*((void *)v9 + 1);
          if (v11)
          {
            do
            {
              a2 = v11;
              BOOL v11 = *(long long **)v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (long long *)*((void *)v9 + 2);
              BOOL v12 = *(void *)a2 == (void)v9;
              uint64_t v9 = a2;
            }
            while (!v12);
          }
          char v8 = (uint64_t *)v17;
          if (v17) {
            BOOL v12 = a2 == a3;
          }
          else {
            BOOL v12 = 1;
          }
          uint64_t v9 = a2;
        }
        while (!v12);
      }
    }
    uint64_t result = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_multi<std::pair<std::string const,std::string> const&>(v5, a2 + 2);
      char v13 = (long long *)*((void *)a2 + 1);
      if (v13)
      {
        do
        {
          BOOL v14 = v13;
          char v13 = *(long long **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          BOOL v14 = (long long *)*((void *)a2 + 2);
          BOOL v12 = *(void *)v14 == (void)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_1B1BDB940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(void *)a1, *(void **)(a1 + 16));
  id v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        id v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(void *)a1, v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_multi<std::pair<std::string const,std::string> const&>(uint64_t **a1, long long *a2)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>((uint64_t)a1, a2, (uint64_t)v7);
  leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_leaf_high((uint64_t)a1, &v6, (const void **)v7[0] + 4);
  std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v6, leaf_high, v7[0]);
  uint64_t v4 = v7[0];
  v7[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return v4;
}

void sub_1B1BDBA18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::vector<std::string>>,std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *> *,long>>(uint64_t **result, long long *a2, long long *a3)
{
  int v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    int v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    _OWORD v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      char v8 = (uint64_t *)v6[1];
    }
    else {
      char v8 = v6;
    }
    int v15 = result;
    uint64_t v16 = v8;
    uint64_t v17 = (const void **)v8;
    if (v8)
    {
      uint64_t v16 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        uint64_t v9 = a2;
        do
        {
          v18[0] = (uint64_t)(v8 + 4);
          v18[1] = (uint64_t)(v8 + 7);
          std::pair<std::string &,std::vector<std::string> &>::operator=[abi:ne180100]<std::string const,std::vector<std::string>,(void *)0>((uint64_t)v18, (uint64_t)(v9 + 2));
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_leaf_high((uint64_t)v5, v18, v17 + 4);
          std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(v5, v18[0], leaf_high, (uint64_t *)v17);
          uint64_t v17 = (const void **)v16;
          if (v16) {
            uint64_t v16 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          }
          BOOL v11 = (long long *)*((void *)v9 + 1);
          if (v11)
          {
            do
            {
              a2 = v11;
              BOOL v11 = *(long long **)v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (long long *)*((void *)v9 + 2);
              BOOL v12 = *(void *)a2 == (void)v9;
              uint64_t v9 = a2;
            }
            while (!v12);
          }
          char v8 = (uint64_t *)v17;
          if (v17) {
            BOOL v12 = a2 == a3;
          }
          else {
            BOOL v12 = 1;
          }
          uint64_t v9 = a2;
        }
        while (!v12);
      }
    }
    uint64_t result = (uint64_t **)std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_multi<std::pair<std::string const,std::vector<std::string>> const&>(v5, a2 + 2);
      char v13 = (long long *)*((void *)a2 + 1);
      if (v13)
      {
        do
        {
          BOOL v14 = v13;
          char v13 = *(long long **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          BOOL v14 = (long long *)*((void *)a2 + 2);
          BOOL v12 = *(void *)v14 == (void)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_1B1BDBBAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string &,std::vector<std::string> &>::operator=[abi:ne180100]<std::string const,std::vector<std::string>,(void *)0>(uint64_t a1, uint64_t a2)
{
  std::string::operator=(*(std::string **)a1, (const std::string *)a2);
  uint64_t v4 = *(std::vector<std::wstring> **)(a1 + 8);
  if (v4 != (std::vector<std::wstring> *)(a2 + 24)) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v4, *(std::string **)(a2 + 24), *(long long **)(a2 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3));
  }
  return a1;
}

uint64_t std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(*(void *)a1, *(void **)(a1 + 16));
  id v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        id v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(*(void *)a1, v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_multi<std::pair<std::string const,std::vector<std::string>> const&>(uint64_t **a1, long long *a2)
{
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__construct_node<std::pair<std::string const,std::vector<std::string>> const&>((uint64_t)a1, a2, (uint64_t)v7);
  leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_leaf_high((uint64_t)a1, &v6, (const void **)v7[0] + 4);
  std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v6, leaf_high, v7[0]);
  uint64_t v4 = v7[0];
  v7[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return v4;
}

void sub_1B1BDBCE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__construct_node<std::pair<std::string const,std::vector<std::string>> const&>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1B1BDBD4C(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(this + 1, *((long long **)a2 + 3), *((long long **)a2 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3));
  return this;
}

void sub_1B1BDBDDC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  id v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::string>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void std::__tree<int>::__move_assign(uint64_t a1, void *a2)
{
  long long v4 = (void *)(a1 + 8);
  std::__tree<int>::destroy(a1, *(void **)(a1 + 8));
  *(void *)a1 = *a2;
  uint64_t v5 = a2 + 1;
  uint64_t v6 = a2[1];
  void *v4 = v6;
  uint64_t v7 = a2[2];
  *(void *)(a1 + 16) = v7;
  if (v7)
  {
    *(void *)(v6 + 16) = v4;
    *a2 = v5;
    void *v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *(void *)a1 = v4;
  }
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__move_assign(uint64_t a1, void *a2)
{
  long long v4 = (void *)(a1 + 8);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, *(void **)(a1 + 8));
  *(void *)a1 = *a2;
  uint64_t v5 = a2 + 1;
  uint64_t v6 = a2[1];
  void *v4 = v6;
  uint64_t v7 = a2[2];
  *(void *)(a1 + 16) = v7;
  if (v7)
  {
    *(void *)(v6 + 16) = v4;
    *a2 = v5;
    void *v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *(void *)a1 = v4;
  }
}

void std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__move_assign(uint64_t a1, void *a2)
{
  long long v4 = (void *)(a1 + 8);
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(a1, *(void **)(a1 + 8));
  *(void *)a1 = *a2;
  uint64_t v5 = a2 + 1;
  uint64_t v6 = a2[1];
  void *v4 = v6;
  uint64_t v7 = a2[2];
  *(void *)(a1 + 16) = v7;
  if (v7)
  {
    *(void *)(v6 + 16) = v4;
    *a2 = v5;
    void *v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *(void *)a1 = v4;
  }
}

void *std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B1BDBFF4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::vector<std::vector<quasar::Token>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  id v2 = (void **)**a1;
  if (v2)
  {
    long long v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        uint64_t v6 = v4;
        std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::vector<std::vector<quasar::Token>>::__init_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(void *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<quasar::Token>>,std::vector<quasar::Token>*,std::vector<quasar::Token>*,std::vector<quasar::Token>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B1BDC0EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<quasar::Token>>,std::vector<quasar::Token>*,std::vector<quasar::Token>*,std::vector<quasar::Token>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4)
{
  long long v4 = a4;
  uint64_t v10 = a4;
  BOOL v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  void v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      void *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v4, *v6, v6[1], 0x6DB6DB6DB6DB6DB7 * ((v6[1] - *v6) >> 5));
      long long v4 = v11 + 3;
      v11 += 3;
      v6 += 3;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::Token>>,std::vector<quasar::Token>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B1BDC1C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::vector<std::vector<unsigned int>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(void **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    v16[4] = result;
    char v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(result, v12);
    BOOL v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = 0;
    *(void *)BOOL v14 = 0;
    *(_OWORD *)BOOL v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    void v16[2] = v14 + 24;
    std::vector<std::vector<unsigned int>>::__swap_out_circular_buffer(a1, v16);
    size_t v8 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)v16);
  }
  else
  {
    void *v7 = 0;
    v7[1] = 0;
    _OWORD v7[2] = 0;
    *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
    _OWORD v7[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    size_t v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_1B1BDC300(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<unsigned int>>,std::reverse_iterator<std::vector<unsigned int>*>,std::reverse_iterator<std::vector<unsigned int>*>,std::reverse_iterator<std::vector<unsigned int>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - ++*(_DWORD *)(result + 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - ++*(_DWORD *)(result + 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned int>>,std::reverse_iterator<std::vector<unsigned int>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned int>>,std::reverse_iterator<std::vector<unsigned int>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void **std::vector<std::vector<std::vector<quasar::Token>>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    v16[4] = result;
    long long v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)result, v12);
    long long v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = 0;
    *(void *)long long v14 = 0;
    *(_OWORD *)long long v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    void v16[2] = v14 + 24;
    std::vector<std::vector<std::vector<quasar::Token>>>::__swap_out_circular_buffer(a1, v16);
    long long v8 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::vector<std::vector<quasar::Token>>>::~__split_buffer(v16);
  }
  else
  {
    void *v7 = 0;
    v7[1] = 0;
    _OWORD v7[2] = 0;
    *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
    _OWORD v7[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    long long v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_1B1BDC51C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<std::vector<quasar::Token>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::vector<quasar::Token>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<quasar::Token>>>,std::reverse_iterator<std::vector<std::vector<quasar::Token>>*>,std::reverse_iterator<std::vector<std::vector<quasar::Token>>*>,std::reverse_iterator<std::vector<std::vector<quasar::Token>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<quasar::Token>>>,std::reverse_iterator<std::vector<std::vector<quasar::Token>>*>,std::reverse_iterator<std::vector<std::vector<quasar::Token>>*>,std::reverse_iterator<std::vector<std::vector<quasar::Token>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - ++*(_DWORD *)(result + 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - ++*(_DWORD *)(result + 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<quasar::Token>>>,std::reverse_iterator<std::vector<std::vector<quasar::Token>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<quasar::Token>>>,std::reverse_iterator<std::vector<std::vector<quasar::Token>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<quasar::Token>>>,std::reverse_iterator<std::vector<std::vector<quasar::Token>>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<quasar::Token>>>,std::reverse_iterator<std::vector<std::vector<quasar::Token>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  id v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = v1;
    std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<std::vector<quasar::Token>>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<std::vector<quasar::Token>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    long long v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

void std::vector<std::vector<std::vector<quasar::Token>>>::__vdeallocate(void ***a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = a1[1];
    long long v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v3 -= 3;
        uint64_t v5 = v3;
        std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v5);
      }
      while (v3 != v1);
      long long v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::vector<std::vector<quasar::Token>>::__emplace_back_slow_path<std::vector<quasar::Token> const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  unint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  uint64_t v15 = v11;
  uint64_t v16 = &v10[24 * v9];
  *(void *)unint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v11, *a2, a2[1], 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5));
  v15 += 24;
  std::vector<std::vector<quasar::Token>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::vector<quasar::Token>>::~__split_buffer(v14);
  return v12;
}

void sub_1B1BDC8E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<quasar::Token>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::joinToStream<std::vector<int>>(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    uint64_t v6 = (void *)result;
    char v7 = 1;
    do
    {
      if ((v7 & 1) == 0) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *a3, a3[1]);
      }
      v3 += 4;
      uint64_t result = std::ostream::operator<<();
      char v7 = 0;
    }
    while (v3 != v4);
  }
  return result;
}

void std::vector<quasar::ItnOverride>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 72;
        std::allocator<quasar::ItnOverride>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<quasar::ItnOverride>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 71) < 0) {
    operator delete(*(void **)(a2 + 48));
  }
  if (*(char *)(a2 + 47) < 0) {
    operator delete(*(void **)(a2 + 24));
  }
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v3 = *(void **)a2;
    operator delete(v3);
  }
}

void std::vector<std::pair<int,std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = v4 - 32;
        char v7 = (void **)(v4 - 24);
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

quasar::result_handler::Package *std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](quasar::result_handler::Package **a1, quasar::result_handler::Package *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    quasar::result_handler::Package::~Package(result);
    JUMPOUT(0x1B3EA8670);
  }
  return result;
}

void quasar::result_handler::Package::~Package(quasar::result_handler::Package *this)
{
  unint64_t v5 = (void **)((char *)this + 432);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v5);
  unint64_t v5 = (void **)((char *)this + 400);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v5);
  unint64_t v5 = (void **)((char *)this + 376);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v5);
  std::__optional_destruct_base<quasar::result_handler::CommandData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 184);
  unint64_t v5 = (void **)((char *)this + 160);
  std::vector<quasar::result_handler::CommandData>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v2 = (void *)*((void *)this + 17);
  if (v2)
  {
    *((void *)this + 18) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 14);
  if (v3)
  {
    *((void *)this + 15) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 11);
  if (v4)
  {
    *((void *)this + 12) = v4;
    operator delete(v4);
  }
  unint64_t v5 = (void **)((char *)this + 48);
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v5);
  unint64_t v5 = (void **)((char *)this + 24);
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v5);
  unint64_t v5 = (void **)this;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v5);
}

uint64_t std::__optional_destruct_base<quasar::result_handler::CommandData,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 184))
  {
    uint64_t v3 = (void **)(a1 + 152);
    std::vector<quasar::result_handler::CommandInterpretation>::__destroy_vector::operator()[abi:ne180100](&v3);
    if (*(char *)(a1 + 151) < 0) {
      operator delete(*(void **)(a1 + 128));
    }
    if (*(char *)(a1 + 119) < 0) {
      operator delete(*(void **)(a1 + 96));
    }
    uint64_t v3 = (void **)(a1 + 72);
    std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v3);
    uint64_t v3 = (void **)(a1 + 48);
    std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v3);
    uint64_t v3 = (void **)(a1 + 24);
    std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v3);
    uint64_t v3 = (void **)a1;
    std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  return a1;
}

void std::vector<quasar::result_handler::CommandInterpretation>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 168;
        std::allocator<quasar::result_handler::CommandInterpretation>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<quasar::result_handler::CommandInterpretation>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void **)(a2 + 136);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)(a2 + 112);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)(a2 + 88);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a2 + 71) < 0) {
    operator delete(*(void **)(a2 + 48));
  }
  if (*(char *)(a2 + 47) < 0) {
    operator delete(*(void **)(a2 + 24));
  }
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
}

void std::vector<quasar::result_handler::CommandData>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 184;
        std::allocator<quasar::result_handler::CommandData>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<quasar::result_handler::CommandData>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void **)(a2 + 152);
  std::vector<quasar::result_handler::CommandInterpretation>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a2 + 151) < 0) {
    operator delete(*(void **)(a2 + 128));
  }
  if (*(char *)(a2 + 119) < 0) {
    operator delete(*(void **)(a2 + 96));
  }
  uint64_t v3 = (void **)(a2 + 72);
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)(a2 + 48);
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)(a2 + 24);
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)a2;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void std::vector<std::vector<quasar::Token>>::__vdeallocate(void ***a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v3 -= 3;
        unint64_t v5 = v3;
        std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v5);
      }
      while (v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::vector<std::vector<quasar::Token>>::__assign_with_size[abi:ne180100]<std::vector<quasar::Token> const*,std::vector<quasar::Token> const*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  unint64_t v9 = *(void ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    std::vector<std::vector<quasar::Token>>::__vdeallocate((void ***)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<std::string>::__vallocate[abi:ne180100]((void *)a1, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<quasar::Token>>,std::vector<quasar::Token> const*,std::vector<quasar::Token> const*,std::vector<quasar::Token>*>(v8, a2, a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    long long v13 = &a2[(uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<quasar::Token> const*,std::vector<quasar::Token> const*,std::vector<quasar::Token>*>((uint64_t)&v17, a2, v13, (uint64_t)v9);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<quasar::Token>>,std::vector<quasar::Token> const*,std::vector<quasar::Token> const*,std::vector<quasar::Token>*>(v8, v13, a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<quasar::Token> const*,std::vector<quasar::Token> const*,std::vector<quasar::Token>*>((uint64_t)&v18, a2, a3, (uint64_t)v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void ***)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 3;
      uint64_t v19 = v16;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v19);
    }
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_1B1BDD0CC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B1BDD0D4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<quasar::Token> const*,std::vector<quasar::Token> const*,std::vector<quasar::Token>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (v5 != (uint64_t *)a4) {
        std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(a4, *v5, v5[1], 0x6DB6DB6DB6DB6DB7 * ((v5[1] - *v5) >> 5));
      }
      v5 += 3;
      a4 += 24;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void std::vector<std::vector<quasar::Token>>::__assign_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  unint64_t v9 = *(void ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    std::vector<std::vector<quasar::Token>>::__vdeallocate((void ***)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<std::string>::__vallocate[abi:ne180100]((void *)a1, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<quasar::Token>>,std::vector<quasar::Token>*,std::vector<quasar::Token>*,std::vector<quasar::Token>*>(v8, a2, a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    long long v13 = &a2[(uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<quasar::Token> const*,std::vector<quasar::Token> const*,std::vector<quasar::Token>*>((uint64_t)&v17, a2, v13, (uint64_t)v9);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<quasar::Token>>,std::vector<quasar::Token>*,std::vector<quasar::Token>*,std::vector<quasar::Token>*>(v8, v13, a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<quasar::Token> const*,std::vector<quasar::Token> const*,std::vector<quasar::Token>*>((uint64_t)&v18, a2, a3, (uint64_t)v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void ***)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 3;
      uint64_t v19 = v16;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v19);
    }
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_1B1BDD2D4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B1BDD2DC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>(uint64_t *a1, const quasar::Token *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x124924924924924) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x92492492492492) {
    unint64_t v9 = 0x124924924924924;
  }
  else {
    unint64_t v9 = v5;
  }
  char v17 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::Token>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  long long v13 = v10;
  long long v14 = (std::string *)&v10[224 * v4];
  uint64_t v16 = &v10[224 * v9];
  quasar::Token::Token(v14, a2);
  uint64_t v15 = &v14[9].__r_.__value_.__s.__data_[8];
  std::vector<quasar::Token>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1B1BDD3F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<std::set<std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char **)**a1;
  if (v2)
  {
    uint64_t v4 = (char **)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = v4 - 3;
        std::__tree<std::string>::destroy((uint64_t)(v4 - 3), *(v4 - 2));
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__shared_ptr_emplace<EARModelInitializeContext>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5DE00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<EARModelInitializeContext>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5DE00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<EARModelInitializeContext>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t EARModelInitializeContext::EARModelInitializeContext(uint64_t a1, void *a2)
{
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = &unk_1F0A344C0;
  id v3 = a2;
  *(void *)(a1 + 16) = 0;
  objc_storeWeak((id *)(a1 + 16), v3);

  return a1;
}

void EARModelInitializeContext::~EARModelInitializeContext(EARModelInitializeContext *this)
{
  objc_destroyWeak((id *)this + 2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)this);
}

{
  uint64_t vars8;

  objc_destroyWeak((id *)this + 2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)this);
  JUMPOUT(0x1B3EA8670);
}

void EARModelInitializeContext::didStartModelInitializing(uint64_t a1, uint64_t *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id WeakRetained = (EARLogger *)objc_loadWeakRetained((id *)(a1 + 16));
  uint64_t v4 = WeakRetained;
  if (WeakRetained)
  {
    unint64_t v5 = EARLogger::QuasarOSLogger(WeakRetained);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v6 = a2;
      }
      else {
        uint64_t v6 = (uint64_t *)*a2;
      }
      int v11 = 136315138;
      uint64_t v12 = v6;
      _os_log_impl(&dword_1B1A86000, v5, OS_LOG_TYPE_INFO, "Starting to initialize model, fileName=%s", (uint8_t *)&v11, 0xCu);
    }

    int v7 = *((char *)a2 + 23);
    if (v7 >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    if (v7 >= 0) {
      uint64_t v9 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      uint64_t v9 = a2[1];
    }
    unint64_t v10 = objc_msgSend(NSString, "ear_stringWithStringView:", v8, v9);
    [(EARLogger *)v4 didStartModelInitializing:v10];
  }
}

void sub_1B1BDD724(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void EARModelInitializeContext::didFinishModelInitializing(uint64_t a1, uint64_t *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id WeakRetained = (EARLogger *)objc_loadWeakRetained((id *)(a1 + 16));
  uint64_t v4 = WeakRetained;
  if (WeakRetained)
  {
    unint64_t v5 = EARLogger::QuasarOSLogger(WeakRetained);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v6 = a2;
      }
      else {
        uint64_t v6 = (uint64_t *)*a2;
      }
      int v11 = 136315138;
      uint64_t v12 = v6;
      _os_log_impl(&dword_1B1A86000, v5, OS_LOG_TYPE_INFO, "Finished initializing model, fileName=%s", (uint8_t *)&v11, 0xCu);
    }

    int v7 = *((char *)a2 + 23);
    if (v7 >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    if (v7 >= 0) {
      uint64_t v9 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      uint64_t v9 = a2[1];
    }
    unint64_t v10 = objc_msgSend(NSString, "ear_stringWithStringView:", v8, v9);
    [(EARLogger *)v4 didFinishModelInitializing:v10];
  }
}

void sub_1B1BDD858(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<std::istringstream,std::allocator<std::istringstream>,std::string,void>@<X0>(const std::string *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x128uLL);
  uint64_t result = std::__shared_ptr_emplace<std::istringstream>::__shared_ptr_emplace[abi:ne180100]<std::string,std::allocator<std::istringstream>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B1BDD8C8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<std::istringstream>::__shared_ptr_emplace[abi:ne180100]<std::string,std::allocator<std::istringstream>,0>(void *a1, const std::string *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A628D0;
  std::istringstream::basic_istringstream[abi:ne180100](a1 + 3, a2, 8);
  return a1;
}

void sub_1B1BDD928(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::istringstream>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A628D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::istringstream>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A628D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<std::istringstream>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *std::allocate_shared[abi:ne180100]<quasar::VoiceCommandActiveSetCompilation const,std::allocator<quasar::VoiceCommandActiveSetCompilation const>,quasar::VoiceCommandActiveSetCompilation,void>@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x98uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::VoiceCommandActiveSetCompilation const>::__shared_ptr_emplace[abi:ne180100]<quasar::VoiceCommandActiveSetCompilation,std::allocator<quasar::VoiceCommandActiveSetCompilation const>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B1BDDA20(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::VoiceCommandActiveSetCompilation const>::__shared_ptr_emplace[abi:ne180100]<quasar::VoiceCommandActiveSetCompilation,std::allocator<quasar::VoiceCommandActiveSetCompilation const>,0>(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5DF88;
  quasar::VoiceCommandActiveSetCompilation::VoiceCommandActiveSetCompilation(a1 + 3, a2);
  return a1;
}

void sub_1B1BDDA7C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::VoiceCommandActiveSetCompilation const>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5DF88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::VoiceCommandActiveSetCompilation const>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5DF88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void *std::__shared_ptr_emplace<quasar::VoiceCommandActiveSetCompilation const>::__on_zero_shared(uint64_t a1)
{
  return std::allocator<quasar::VoiceCommandActiveSetCompilation const>::destroy[abi:ne180100]((uint64_t)&v2, a1 + 24);
}

void *quasar::VoiceCommandActiveSetCompilation::VoiceCommandActiveSetCompilation(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  a1[1] = v4;
  ++*(_DWORD *)(v4 + 56);
  *a1 = &unk_1F0A365B8;
  std::set<int>::set[abi:ne180100](a1 + 2, a2 + 16);
  std::multimap<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>::multimap[abi:ne180100](a1 + 5, a2 + 40);
  std::unordered_multimap<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::allocator<std::pair<quasar::VoiceCommandActiveSetCompilation::CommandSpec const,quasar::VoiceCommandActiveSetCompilation::Suite>>>::unordered_multimap((uint64_t)(a1 + 8), a2 + 64);
  std::map<std::string_view,int>::map[abi:ne180100]((uint64_t)(a1 + 13), a2 + 104);
  return a1;
}

void sub_1B1BDDBD4(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::__unordered_map_hasher<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,true>,std::__unordered_map_equal<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,true>,std::allocator<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>>>::~__hash_table(v4);
  std::__tree<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::__map_value_compare<int,std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::less<int>,true>,std::allocator<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>>>::destroy(v3, *(void **)(v1 + 48));
  std::__tree<int>::destroy(v2, *(void **)(v1 + 24));
  fst::ImplToFst<fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst((void *)v1);
  _Unwind_Resume(a1);
}

void fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::~CompactFst(void *a1)
{
  fst::ImplToFst<fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::Copy()
{
}

void sub_1B1BDDCCC(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::Write(uint64_t a1, void *a2, unsigned char *a3)
{
  return fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::Write(*(void *)(a1 + 8), a2, a3);
}

uint64_t fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::InitStateIterator(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 8) = *(void *)(*(void *)(v2 + 152) + 32);
  return result;
}

uint64_t fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::InitArcIterator(uint64_t a1, int a2, void *a3)
{
  return fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::InitArcIterator(*(void *)(a1 + 8), a2, a3);
}

void fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::InitMatcher()
{
}

void sub_1B1BDDD78(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C4003B7394BLL);
  _Unwind_Resume(a1);
}

BOOL fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::IsMemoryMapped(uint64_t a1)
{
  uint64_t v1 = *(void **)(*(void *)(a1 + 8) + 152);
  return *(void *)(*v1 + 16) && *(void *)(v1[1] + 16) != 0;
}

uint64_t fst::ImplToExpandedFst<fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumStates(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 8);
  if ((*(uint64_t (**)(void *, uint64_t))(*v1 + 32))(v1, 4)) {
    return 0;
  }
  else {
    return *(unsigned int *)(v1[19] + 32);
  }
}

void *fst::ImplToFst<fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ImplToFst(void *result, uint64_t a2, int a3)
{
  *uint64_t result = &unk_1F0A434E0;
  if (a3) {
    operator new();
  }
  uint64_t v3 = *(void *)(a2 + 8);
  result[1] = v3;
  ++*(_DWORD *)(v3 + 56);
  return result;
}

void sub_1B1BDDEBC(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40676EB28ALL);
  _Unwind_Resume(a1);
}

void fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::CompactFstImpl(uint64_t a1, uint64_t a2)
{
}

void sub_1B1BDDFC8(_Unwind_Exception *a1)
{
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::~CompactFstImpl(uint64_t a1)
{
  fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::~CompactFstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::~CompactFstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A3A628;
  if (*(unsigned char *)(a1 + 144))
  {
    uint64_t v2 = *(void *)(a1 + 136);
    if (v2) {
      MEMORY[0x1B3EA8670](v2, 0xC400A2AC0F1);
    }
  }
  uint64_t v3 = *(void *)(a1 + 152);
  if (v3)
  {
    int v4 = *(_DWORD *)(v3 + 64) - 1;
    *(_DWORD *)(v3 + 64) = v4;
    if (!v4)
    {
      unint64_t v5 = fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>::~DefaultCompactStore((uint64_t *)v3);
      MEMORY[0x1B3EA8670](v5, 0x1030C40DA98B24ALL);
    }
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl((void *)a1);
}

uint64_t *fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>::~DefaultCompactStore(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2 || (uint64_t v5 = a1[2]) != 0 && (MEMORY[0x1B3EA8630](v5, 0x1000C8052888210), (v2 = *a1) != 0)) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[1];
  if (v3 || (uint64_t v6 = a1[3]) != 0 && (MEMORY[0x1B3EA8630](v6, 0x1000C803E1C8BA9), (v3 = a1[1]) != 0)) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::Write(uint64_t a1, void *a2, unsigned char *a3)
{
  long long v14 = 0u;
  long long v13 = 0u;
  *(_OWORD *)long long __p = 0u;
  *(_OWORD *)int v11 = 0u;
  uint64_t v6 = *(void **)(a1 + 152);
  uint64_t v15 = v6[7];
  uint64_t v16 = v6[4];
  uint64_t v17 = v6[6];
  if (a3[27]) {
    int v7 = 1;
  }
  else {
    int v7 = 2;
  }
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::WriteHeader(a1, (uint64_t)a2, a3, v7, (uint64_t)&v10);
  uint64_t v8 = fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>::Write(*(void *)(a1 + 152), a2, (uint64_t)a3);
  if (SHIBYTE(v13) < 0) {
    operator delete(__p[1]);
  }
  if (SHIBYTE(__p[0]) < 0) {
    operator delete(v11[0]);
  }
  return v8;
}

void sub_1B1BDE23C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::WriteHeader(uint64_t a1, uint64_t a2, unsigned char *a3, int a4, uint64_t a5)
{
  if (a3[24])
  {
    std::string::operator=((std::string *)(a5 + 8), (const std::string *)(a1 + 16));
    uint64_t v10 = (const std::string *)fst::ArcTpl<fst::TropicalWeightTpl<float>,int>::Type();
    std::string::operator=((std::string *)(a5 + 32), v10);
    *(_DWORD *)(a5 + 56) = a4;
    *(void *)(a5 + 64) = *(void *)(a1 + 8);
    if (*(void *)(a1 + 40)) {
      BOOL v11 = a3[25] == 0;
    }
    else {
      BOOL v11 = 1;
    }
    int v12 = !v11;
    if (a3[26]) {
      BOOL v13 = *(void *)(a1 + 48) == 0;
    }
    else {
      BOOL v13 = 1;
    }
    if (!v13) {
      v12 |= 2u;
    }
    if (a3[27]) {
      v12 |= 4u;
    }
    *(_DWORD *)(a5 + 60) = v12;
    fst::FstHeader::Write();
  }
  uint64_t v14 = *(void *)(a1 + 40);
  if (v14) {
    BOOL v15 = a3[25] == 0;
  }
  else {
    BOOL v15 = 1;
  }
  if (!v15) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 72))(v14, a2);
  }
  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    BOOL v17 = a3[26] == 0;
  }
  else {
    BOOL v17 = 1;
  }
  if (!v17)
  {
    char v18 = *(uint64_t (**)(void))(*(void *)result + 72);
    return v18();
  }
  return result;
}

uint64_t fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>::Write(uint64_t a1, void *a2, uint64_t a3)
{
  if (*(void *)(a1 + 16))
  {
    if (*(unsigned char *)(a3 + 27) && !fst::AlignOutput(a2))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      BOOL v15 = fst::LogMessage::LogMessage((fst *)&v20, (uint64_t)__p);
      uint64_t v16 = (void *)fst::cerr(v15);
      int v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"DefaultCompactStore::Write: Alignment failed: ", 46);
      int v17 = *(char *)(a3 + 23);
      if (v17 >= 0) {
        uint64_t v9 = a3;
      }
      else {
        uint64_t v9 = *(void *)a3;
      }
      if (v17 >= 0) {
        uint64_t v10 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v10 = *(void *)(a3 + 8);
      }
      goto LABEL_27;
    }
    std::ostream::write();
  }
  if (*(unsigned char *)(a3 + 27) && !fst::AlignOutput(a2))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    BOOL v11 = fst::LogMessage::LogMessage((fst *)&v20, (uint64_t)__p);
    int v12 = (void *)fst::cerr(v11);
    int v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"DefaultCompactStore::Write: Alignment failed: ", 46);
    int v13 = *(char *)(a3 + 23);
    if (v13 >= 0) {
      uint64_t v9 = a3;
    }
    else {
      uint64_t v9 = *(void *)a3;
    }
    if (v13 >= 0) {
      uint64_t v10 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v10 = *(void *)(a3 + 8);
    }
  }
  else
  {
    std::ostream::write();
    std::ostream::flush();
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) == 0) {
      return 1;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    uint64_t v5 = fst::LogMessage::LogMessage((fst *)&v20, (uint64_t)__p);
    uint64_t v6 = (void *)fst::cerr(v5);
    int v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"DefaultCompactStore::Write: Write failed: ", 42);
    int v8 = *(char *)(a3 + 23);
    if (v8 >= 0) {
      uint64_t v9 = a3;
    }
    else {
      uint64_t v9 = *(void *)a3;
    }
    if (v8 >= 0) {
      uint64_t v10 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v10 = *(void *)(a3 + 8);
    }
  }
LABEL_27:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v20);
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_1B1BDE57C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::InitArcIterator(uint64_t a1, int a2, void *a3)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::Expand(a1, a2); {
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InitArcIterator(a1, a2, a3);
  }
}

void fst::SortedMatcher<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>::SortedMatcher(uint64_t a1, uint64_t a2, int a3, int a4)
{
  *(void *)a1 = &unk_1F0A38F08;
  *(void *)(a1 + 8) = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 88))(a2, 0);
  *(_DWORD *)(a1 + 16) = -1;
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = 0;
  *(_DWORD *)(a1 + 32) = a3;
  *(_DWORD *)(a1 + 36) = a4;
  *(_DWORD *)(a1 + 40) = -1;
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = xmmword_1B25616E0;
  *(unsigned char *)(a1 + 74) = 0;
  fst::MemoryPool<fst::ArcIterator<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>>::MemoryPool((void *)(a1 + 80), 1);
}

void sub_1B1BDE78C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0) {
    operator delete(__p);
  }
  fst::MemoryPool<fst::ArcIterator<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>>::~MemoryPool(v18);
  _Unwind_Resume(a1);
}

void fst::MemoryPool<fst::ArcIterator<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>>::~MemoryPool(quasar::Bitmap *a1)
{
  *(void *)a1 = &unk_1F0A36AB8;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>>::Link>::~MemoryArena((void *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_1F0A36AB8;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>>::Link>::~MemoryArena((void *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::SortedMatcher<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>::~SortedMatcher(void *a1)
{
  fst::SortedMatcher<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>::~SortedMatcher(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::SortedMatcher<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>::Copy()
{
}

void sub_1B1BDE8C0(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C4003B7394BLL);
  _Unwind_Resume(a1);
}

uint64_t fst::SortedMatcher<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>::Type(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 32);
  if (v2 == 3) {
    return 3;
  }
  if (v2) {
    uint64_t v6 = 0x40000000;
  }
  else {
    uint64_t v6 = 0x10000000;
  }
  uint64_t v7 = *(void *)(a1 + 8);
  if (v2) {
    uint64_t v8 = 3221225472;
  }
  else {
    uint64_t v8 = 805306368;
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 64))(v7, v8, a2);
  if ((v9 & v6) != 0) {
    return *(unsigned int *)(a1 + 32);
  }
  uint64_t v10 = 0x80000000;
  if (!v2) {
    uint64_t v10 = 0x20000000;
  }
  if ((v9 & v10) != 0) {
    return 3;
  }
  else {
    return 4;
  }
}

uint64_t fst::SortedMatcher<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>::GetFst(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t fst::SortedMatcher<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>::Properties(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 74)) {
    return a2 | 4;
  }
  else {
    return a2;
  }
}

uint64_t fst::SortedMatcher<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>::Value_(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72)) {
    return a1 + 56;
  }
  uint64_t v2 = *(void *)(a1 + 24);
  *(_DWORD *)(v2 + 56) |= 0xFu;
  uint64_t v3 = *(void *)(v2 + 16) + 12 * *(void *)(v2 + 24);
  uint64_t v4 = *(void *)v3;
  unint64_t v5 = (unint64_t)*(unsigned int *)(v3 + 8) << 32;
  *(void *)(v2 + 40) = v4;
  *(void *)(v2 + 48) = v5;
  return v2 + 40;
}

uint64_t fst::SortedMatcher<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>::Next_(uint64_t result)
{
  if (*(unsigned char *)(result + 72)) {
    *(unsigned char *)(result + 72) = 0;
  }
  else {
    ++*(void *)(*(void *)(result + 24) + 24);
  }
  return result;
}

float fst::SortedMatcher<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>::Final_(uint64_t a1, int a2)
{
  return fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::Final(*(void *)(*(void *)(a1 + 8) + 8), a2);
}

uint64_t fst::SortedMatcher<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>::Priority_(uint64_t a1, int a2)
{
  return fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::NumArcs(*(void *)(*(void *)(a1 + 8) + 8), a2);
}

void fst::MemoryPool<fst::ArcIterator<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>>::MemoryPool(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A36AB8;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>>::Link>::MemoryArena(a1 + 1, a2);
}

void sub_1B1BDEA80(_Unwind_Exception *a1)
{
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPool<fst::ArcIterator<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>>::Size()
{
  return 64;
}

void fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>>::Link>::MemoryArena(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A37A70;
  a1[1] = 72 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_1B1BDEB98(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>>::Link>::~MemoryArena(void *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1B3EA8670);
}

{
  void *v2;
  void *i;
  uint64_t v4;
  uint64_t vars8;

  *a1 = &unk_1F0A37A70;
  uint64_t v2 = a1 + 3;
  for (uint64_t i = (void *)a1[4]; i != v2; uint64_t i = (void *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x1B3EA8630](v4, 0x1000C8077774924);
    }
  }
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>>::Link>::Size()
{
  return 72;
}

void *fst::SortedMatcher<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>::~SortedMatcher(void *a1)
{
  *a1 = &unk_1F0A38F08;
  uint64_t v2 = a1[3];
  if (v2)
  {
    *(void *)(v2 + 64) = a1[17];
    a1[17] = v2;
  }
  uint64_t v3 = a1[1];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  a1[10] = &unk_1F0A36AB8;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>>::Link>::~MemoryArena(a1 + 11);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)(a1 + 10));
  return a1;
}

void fst::SortedMatcher<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>::SortedMatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = &unk_1F0A38F08;
  *(void *)(a1 + 8) = (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 8) + 88))(*(void *)(a2 + 8), a3);
  *(_DWORD *)(a1 + 16) = -1;
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = -1;
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 74) = *(unsigned char *)(a2 + 74);
  fst::MemoryPool<fst::ArcIterator<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>>::MemoryPool((void *)(a1 + 80), 1);
}

uint64_t fst::SortedMatcher<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>::SetState(uint64_t result, int a2)
{
  if (*(_DWORD *)(result + 16) != a2)
  {
    uint64_t v3 = result;
    *(_DWORD *)(result + 16) = a2;
    if (*(_DWORD *)(result + 32) == 3)
    {
      if (FLAGS_fst_error_fatal) {
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      }
      else {
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      }
      uint64_t v4 = fst::LogMessage::LogMessage((fst *)&v11, (uint64_t)__p);
      unint64_t v5 = (void *)fst::cerr(v4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"SortedMatcher: bad match type", 29);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v11);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
      *(unsigned char *)(v3 + 74) = 1;
    }
    uint64_t v6 = *(void *)(v3 + 24);
    if (v6)
    {
      fst::ArcIterator<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>::ArcIterator(v6, *(void *)(v3 + 8), a2);
      uint64_t v7 = *(void *)(v3 + 24);
    }
    else
    {
      uint64_t v8 = *(void *)(v3 + 136);
      if (v8)
      {
        *(void *)(v3 + 136) = *(void *)(v8 + 64);
      }
      else
      {
        uint64_t v8 = fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>>::Link>::Allocate((void *)(v3 + 88), 1);
        *(void *)(v8 + 64) = 0;
      }
      uint64_t v7 = fst::ArcIterator<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>::ArcIterator(v8, *(void *)(v3 + 8), a2);
      *(void *)(v3 + ++*(_DWORD *)(result + 24) = v7;
    }
    *(_DWORD *)(v7 + 56) &= ~0x10u;
    uint64_t result = fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::NumArcs(*(void *)(*(void *)(v3 + 8) + 8), a2);
    *(void *)(v3 + 48) = result;
    *(_DWORD *)(v3 + 68) = a2;
  }
  return result;
}

void sub_1B1BDEF30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>>::Link>::Allocate(void *a1, uint64_t a2)
{
  uint64_t v3 = 72 * a2;
  unint64_t v4 = a1[1];
  if (288 * a2 > v4) {
    operator new[]();
  }
  uint64_t v5 = a1[2];
  if (v5 + v3 > v4) {
    operator new[]();
  }
  uint64_t v6 = *(void *)(a1[4] + 16) + v5;
  a1[2] = v5 + v3;
  return v6;
}

uint64_t fst::ArcIterator<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>::ArcIterator(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)uint64_t result = *(void *)(v3 + 136);
  *(_DWORD *)(result + 8) = a3;
  *(void *)(result + 16) = 0;
  *(void *)(result + ++*(_DWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 56) = 15;
  uint64_t v4 = *(void *)(v3 + 152);
  uint64_t v5 = (unsigned int *)(*(void *)(v4 + 16) + 4 * a3);
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  uint64_t v8 = v7 - v6;
  *(void *)(result + 32) = v7 - v6;
  if (v7 != v6)
  {
    uint64_t v9 = *(void *)(v4 + 24) + 12 * v6;
    *(void *)(result + 16) = v9;
    uint64_t v10 = *(void *)v9;
    unint64_t v11 = (unint64_t)*(unsigned int *)(v9 + 8) << 32;
    *(void *)(result + 40) = *(void *)v9;
    *(void *)(result + 48) = v11;
    if (v10 == -1)
    {
      *(void *)(result + 16) = v9 + 12;
      *(void *)(result + 32) = v8 - 1;
    }
  }
  return result;
}

BOOL fst::SortedMatcher<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>::Find(uint64_t a1, int a2)
{
  *(unsigned char *)(a1 + 73) = 1;
  if (*(unsigned char *)(a1 + 74))
  {
    BOOL result = 0;
    *(unsigned char *)(a1 + 72) = 0;
    *(_DWORD *)(a1 + 40) = -1;
  }
  else
  {
    *(unsigned char *)(a1 + 72) = a2 == 0;
    if (a2 == -1) {
      int v4 = 0;
    }
    else {
      int v4 = a2;
    }
    *(_DWORD *)(a1 + 40) = v4;
    return (fst::SortedMatcher<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>::Search(a1) & 1) != 0
        || *(unsigned char *)(a1 + 72) != 0;
  }
  return result;
}

uint64_t fst::SortedMatcher<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>::Search(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  int v2 = *(_DWORD *)(a1 + 36);
  if (*(_DWORD *)(a1 + 32)) {
    int v3 = 2;
  }
  else {
    int v3 = 1;
  }
  *(_DWORD *)(v1 + 56) = *(_DWORD *)(v1 + 56) & 0xFFFFFFF0 | v3;
  if (*(_DWORD *)(a1 + 40) < v2)
  {
    *(void *)(v1 + ++*(_DWORD *)(result + 24) = 0;
    if (!*(void *)(v1 + 32)) {
      return 0;
    }
    unint64_t v4 = 0;
    while (1)
    {
      uint64_t v5 = *(void *)(v1 + 16) + 12 * v4;
      uint64_t v6 = *(void *)v5;
      uint64_t v7 = *(unsigned int *)(v5 + 8);
      uint64_t v8 = *(_DWORD *)(a1 + 32) ? 44 : 40;
      *(void *)(v1 + 40) = v6;
      *(void *)(v1 + 48) = v7 << 32;
      int v9 = *(_DWORD *)(v1 + v8);
      int v10 = *(_DWORD *)(a1 + 40);
      BOOL v11 = v9 == v10;
      int v12 = v9 <= v10 ? 0 : 7;
      if (v11) {
        int v12 = 1;
      }
      if (v12) {
        break;
      }
      uint64_t v1 = *(void *)(a1 + 24);
      unint64_t v13 = *(void *)(v1 + 32);
      unint64_t v4 = *(void *)(v1 + 24) + 1;
      *(void *)(v1 + ++*(_DWORD *)(result + 24) = v4;
      if (v4 >= v13) {
        return 0;
      }
    }
    uint64_t result = 0;
    if (v12 == 1) {
      return 1;
    }
    return result;
  }
  unint64_t v15 = *(void *)(a1 + 48);
  if (!v15)
  {
    unint64_t v16 = 0;
LABEL_34:
    uint64_t result = 0;
    *(void *)(v1 + ++*(_DWORD *)(result + 24) = v16;
    return result;
  }
  unint64_t v16 = 0;
  while (1)
  {
    unint64_t v17 = (v15 + v16) >> 1;
    char v18 = *(void **)(a1 + 24);
    v18[3] = v17;
    uint64_t v19 = v18[2] + 12 * v17;
    uint64_t v20 = *(void *)v19;
    uint64_t v21 = *(unsigned int *)(v19 + 8);
    uint64_t v22 = *(_DWORD *)(a1 + 32) ? 44 : 40;
    unsigned int v18[5] = v20;
    v18[6] = v21 << 32;
    int v23 = *(_DWORD *)((char *)v18 + v22);
    int v24 = *(_DWORD *)(a1 + 40);
    if (v23 <= v24) {
      break;
    }
    unint64_t v15 = (v15 + v16) >> 1;
LABEL_29:
    if (v16 >= v15)
    {
      uint64_t v1 = *(void *)(a1 + 24);
      goto LABEL_34;
    }
  }
  if (v23 < v24)
  {
    unint64_t v16 = v17 + 1;
    goto LABEL_29;
  }
  uint64_t v25 = 12 * ((v15 + v16) >> 1);
  while (v17 > v16)
  {
    long long v26 = *(void **)(a1 + 24);
    v26[3] = --v17;
    uint64_t v27 = v26[2] + v25;
    uint64_t v28 = *(void *)(v27 - 12);
    uint64_t v29 = *(unsigned int *)(v27 - 4);
    if (*(_DWORD *)(a1 + 32)) {
      uint64_t v30 = 44;
    }
    else {
      uint64_t v30 = 40;
    }
    v26[5] = v28;
    v26[6] = v29 << 32;
    v25 -= 12;
    if (*(_DWORD *)((char *)v26 + v30) != *(_DWORD *)(a1 + 40))
    {
      *(void *)(*(void *)(a1 + 24) + ++*(_DWORD *)(result + 24) = v17 + 1;
      return 1;
    }
  }
  return 1;
}

BOOL fst::SortedMatcher<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>::Done(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72)) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 24);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v3 >= *(void *)(v2 + 32)) {
    return 1;
  }
  if (!*(unsigned char *)(a1 + 73)) {
    return 0;
  }
  BOOL v4 = *(_DWORD *)(a1 + 32) == 0;
  if (*(_DWORD *)(a1 + 32)) {
    int v5 = 2;
  }
  else {
    int v5 = 1;
  }
  *(_DWORD *)(v2 + 56) = *(_DWORD *)(v2 + 56) & 0xFFFFFFF0 | v5;
  uint64_t v6 = *(void *)(v2 + 16) + 12 * v3;
  uint64_t v7 = *(void *)v6;
  uint64_t v8 = HIDWORD(*(void *)v6);
  unint64_t v9 = (unint64_t)*(unsigned int *)(v6 + 8) << 32;
  if (v4) {
    LODWORD(v8) = v7;
  }
  *(void *)(v2 + 40) = v7;
  *(void *)(v2 + 48) = v9;
  return *(_DWORD *)(a1 + 40) != v8;
}

uint64_t *std::multimap<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>::multimap[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::multimap<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::__tree_node<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,void *> *,long>>>(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_1B1BDF3D8(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::__map_value_compare<int,std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::less<int>,true>,std::allocator<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::multimap<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::__tree_node<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,void *> *,long>>>(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    BOOL v4 = a2;
    int v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      uint64_t result = std::__tree<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::__map_value_compare<int,std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::less<int>,true>,std::allocator<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>>>::__emplace_hint_multi<std::pair<int const,quasar::VoiceCommandActiveSetCompilation::CommandSpec> const&>(v5, v6, (uint64_t)(v4 + 4));
      uint64_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          BOOL v4 = v8;
        }
        while (!v9);
      }
      BOOL v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::__map_value_compare<int,std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::less<int>,true>,std::allocator<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>>>::__emplace_hint_multi<std::pair<int const,quasar::VoiceCommandActiveSetCompilation::CommandSpec> const&>(uint64_t **a1, void *a2, uint64_t a3)
{
  std::__tree<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::__map_value_compare<int,std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::less<int>,true>,std::allocator<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>>>::__construct_node<std::pair<int const,quasar::VoiceCommandActiveSetCompilation::CommandSpec> const&>((uint64_t)a1, a3, (uint64_t)v9);
  leaf = (uint64_t **)std::__tree<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::__map_value_compare<int,std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::less<int>,true>,std::allocator<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>>>::__find_leaf(a1, a2, &v8, (_DWORD *)v9[0] + 8);
  std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v8, leaf, v9[0]);
  uint64_t v6 = v9[0];
  v9[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  return v6;
}

void sub_1B1BDF4F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::__map_value_compare<int,std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::less<int>,true>,std::allocator<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>>>::__construct_node<std::pair<int const,quasar::VoiceCommandActiveSetCompilation::CommandSpec> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x88uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = std::pair<int const,quasar::VoiceCommandActiveSetCompilation::CommandSpec>::pair[abi:ne180100]((uint64_t)v6 + 32, a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1B1BDF55C(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::__tree<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::__map_value_compare<int,std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::less<int>,true>,std::allocator<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>>>::__find_leaf(void *a1, void *a2, void *a3, _DWORD *a4)
{
  BOOL v4 = a1 + 1;
  if (a1 + 1 != a2 && *((_DWORD *)a2 + 8) < *a4)
  {
    while (1)
    {
      uint64_t v5 = *v4;
      a2 = v4;
      if (!*v4) {
        break;
      }
      while (1)
      {
        BOOL v4 = (void *)v5;
        if (*(_DWORD *)(v5 + 32) >= *a4) {
          break;
        }
        uint64_t v5 = *(void *)(v5 + 8);
        if (!v5) {
          goto LABEL_19;
        }
      }
    }
LABEL_20:
    *a3 = v4;
    return a2;
  }
  uint64_t v6 = (void *)*a2;
  if ((void *)*a1 == a2)
  {
    uint64_t v8 = a2;
  }
  else
  {
    if (v6)
    {
      uint64_t v7 = (void *)*a2;
      do
      {
        uint64_t v8 = v7;
        uint64_t v7 = (void *)v7[1];
      }
      while (v7);
    }
    else
    {
      BOOL v9 = a2;
      do
      {
        uint64_t v8 = (void *)v9[2];
        BOOL v10 = *v8 == (void)v9;
        BOOL v9 = v8;
      }
      while (v10);
    }
    if (*a4 < *((_DWORD *)v8 + 8))
    {
      while (1)
      {
        uint64_t v11 = *v4;
        a2 = v4;
        if (!*v4) {
          goto LABEL_20;
        }
        while (1)
        {
          BOOL v4 = (void *)v11;
          if (*a4 < *(_DWORD *)(v11 + 32)) {
            break;
          }
          uint64_t v11 = *(void *)(v11 + 8);
          if (!v11)
          {
LABEL_19:
            a2 = v4 + 1;
            goto LABEL_20;
          }
        }
      }
    }
  }
  if (v6)
  {
    *a3 = v8;
    return v8 + 1;
  }
  else
  {
    *a3 = a2;
  }
  return a2;
}

uint64_t std::pair<int const,quasar::VoiceCommandActiveSetCompilation::CommandSpec>::pair[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + ++*(_DWORD *)(result + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 40), *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v5;
  }
  std::unordered_set<std::string>::unordered_set(a1 + 64, a2 + 64);
  return a1;
}

void sub_1B1BDF708(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 31) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__tree_node<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<int const,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t std::unordered_multimap<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::allocator<std::pair<quasar::VoiceCommandActiveSetCompilation::CommandSpec const,quasar::VoiceCommandActiveSetCompilation::Suite>>>::unordered_multimap(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::__unordered_map_hasher<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,true>,std::__unordered_map_equal<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,true>,std::allocator<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>>>::__rehash<false>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(long long **)(a2 + 16); i; uint64_t i = *(long long **)i)
    std::__hash_table<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::__unordered_map_hasher<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,true>,std::__unordered_map_equal<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,true>,std::allocator<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>>>::__emplace_multi<std::pair<quasar::VoiceCommandActiveSetCompilation::CommandSpec const,quasar::VoiceCommandActiveSetCompilation::Suite> const&>((void *)a1, i + 1);
  return a1;
}

void sub_1B1BDF7F0(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::__unordered_map_hasher<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,true>,std::__unordered_map_equal<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,true>,std::allocator<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::__unordered_map_hasher<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,true>,std::__unordered_map_equal<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,true>,std::allocator<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>>>::__rehash<false>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::__unordered_map_hasher<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,true>,std::__unordered_map_equal<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,true>,std::allocator<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>>>::__do_rehash<false>(a1, prime);
    }
  }
}

void std::__hash_table<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::__unordered_map_hasher<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,true>,std::__unordered_map_equal<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,true>,std::allocator<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>>>::__do_rehash<false>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(unsigned __int8 ***)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = (unint64_t)v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      unint64_t v10 = v9.u32[0];
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      for (uint64_t i = *v7; *v7; uint64_t i = *v7)
      {
        unint64_t v13 = *((void *)i + 1);
        if (v10 > 1)
        {
          if (v13 >= a2) {
            v13 %= a2;
          }
        }
        else
        {
          v13 &= a2 - 1;
        }
        if (v13 == v8)
        {
          uint64_t v7 = (unsigned __int8 **)i;
        }
        else if (*(void *)(*(void *)a1 + 8 * v13))
        {
          uint64_t v14 = *(unsigned __int8 **)i;
          if (*(void *)i)
          {
            unint64_t v15 = i;
            while (1)
            {
              BOOL v16 = quasar::VoiceCommandActiveSetCompilation::CommandSpec::operator==(i + 16, v14 + 16);
              unint64_t v17 = *(unsigned __int8 **)v15;
              if (!v16) {
                break;
              }
              uint64_t v14 = *(unsigned __int8 **)v17;
              unint64_t v15 = *(unsigned __int8 **)v15;
              if (!*(void *)v17) {
                goto LABEL_31;
              }
            }
            uint64_t v14 = *(unsigned __int8 **)v15;
            unint64_t v17 = v15;
          }
          else
          {
            unint64_t v17 = i;
          }
LABEL_31:
          void *v7 = v14;
          *(void *)unint64_t v17 = **(void **)(*(void *)a1 + 8 * v13);
          **(void **)(*(void *)a1 + 8 * v13) = i;
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v13) = v7;
          uint64_t v7 = (unsigned __int8 **)i;
          unint64_t v8 = v13;
        }
      }
    }
  }
  else
  {
    uint64_t v11 = *(void **)a1;
    *(void *)a1 = 0;
    if (v11) {
      operator delete(v11);
    }
    *(void *)(a1 + 8) = 0;
  }
}

BOOL quasar::VoiceCommandActiveSetCompilation::CommandSpec::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 0;
  }
  uint64_t v6 = a2;
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)a1, a2, *((void *)a1 + 1))) {
      return *((_DWORD *)a1 + 6) == *((_DWORD *)v6 + 6);
    }
    return 0;
  }
  if (a1[23])
  {
    for (uint64_t i = a1; *i == *a2; ++i)
    {
      ++a2;
      if (!--v2) {
        return *((_DWORD *)a1 + 6) == *((_DWORD *)v6 + 6);
      }
    }
    return 0;
  }
  return *((_DWORD *)a1 + 6) == *((_DWORD *)v6 + 6);
}

uint64_t std::__hash_table<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::__unordered_map_hasher<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,true>,std::__unordered_map_equal<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,true>,std::allocator<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>>>::__emplace_multi<std::pair<quasar::VoiceCommandActiveSetCompilation::CommandSpec const,quasar::VoiceCommandActiveSetCompilation::Suite> const&>(void *a1, long long *a2)
{
  std::__hash_table<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::__unordered_map_hasher<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,true>,std::__unordered_map_equal<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,true>,std::allocator<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>>>::__construct_node<std::pair<quasar::VoiceCommandActiveSetCompilation::CommandSpec const,quasar::VoiceCommandActiveSetCompilation::Suite> const&>((uint64_t)a1, a2, (uint64_t)v5);
  uint64_t inserted = std::__hash_table<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::__unordered_map_hasher<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,true>,std::__unordered_map_equal<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,true>,std::allocator<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>>>::__node_insert_multi(a1, v5[0]);
  v5[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,void *>>>>::reset[abi:ne180100]((uint64_t)v5, 0);
  return inserted;
}

void sub_1B1BDFBB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::__unordered_map_hasher<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,true>,std::__unordered_map_equal<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,true>,std::allocator<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>>>::__construct_node<std::pair<quasar::VoiceCommandActiveSetCompilation::CommandSpec const,quasar::VoiceCommandActiveSetCompilation::Suite> const&>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 16;
  uint64_t v6 = (char *)operator new(0xB0uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  *(void *)uint64_t v6 = 0;
  *((void *)v6 + 1) = 0;
  std::pair<quasar::VoiceCommandActiveSetCompilation::CommandSpec const,quasar::VoiceCommandActiveSetCompilation::Suite>::pair[abi:ne180100]((std::string *)(v6 + 16), a2);
  *(unsigned char *)(a3 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v8, (uint64_t)(v6 + 16));
  *((void *)v6 + 1) = *((int *)v6 + 10) + 571 * result + 326041;
  return result;
}

void sub_1B1BDFC5C(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::__unordered_map_hasher<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,true>,std::__unordered_map_equal<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,true>,std::allocator<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>>>::__node_insert_multi(void *a1, uint64_t a2)
{
  uint64_t v4 = (unsigned __int8 *)(a2 + 16);
  unint64_t v5 = *(int *)(a2 + 40) + 571 * std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v8, a2 + 16) + 326041;
  *(void *)(a2 + 8) = v5;
  uint64_t inserted = std::__hash_table<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::__unordered_map_hasher<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,true>,std::__unordered_map_equal<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,true>,std::allocator<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>>>::__node_insert_multi_prepare((uint64_t)a1, v5, v4);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi_perform(a1, (void *)a2, inserted);
  return a2;
}

std::string *std::pair<quasar::VoiceCommandActiveSetCompilation::CommandSpec const,quasar::VoiceCommandActiveSetCompilation::Suite>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  LODWORD(this[1].__r_.__value_.__l.__data_) = *((_DWORD *)a2 + 6);
  if (*((char *)a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 32), *((const std::string::value_type **)a2 + 4), *((void *)a2 + 5));
  }
  else
  {
    long long v5 = a2[2];
    this[2].__r_.__value_.__r.__words[0] = *((void *)a2 + 6);
    *(_OWORD *)&this[1].__r_.__value_.__r.__words[1] = v5;
  }
  std::unordered_set<std::string>::unordered_set((uint64_t)&this[2].__r_.__value_.__l.__size_, (uint64_t)a2 + 56);
  if (*((char *)a2 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(this + 4, *((const std::string::value_type **)a2 + 12), *((void *)a2 + 13));
  }
  else
  {
    long long v6 = a2[6];
    this[4].__r_.__value_.__r.__words[2] = *((void *)a2 + 14);
    *(_OWORD *)&this[4].__r_.__value_.__l.__data_ = v6;
  }
  std::unordered_set<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::allocator<quasar::VoiceCommandActiveSetCompilation::CommandSpec>>::unordered_set((uint64_t)&this[5], (uint64_t)a2 + 120);
  return this;
}

void sub_1B1BDFDC8(_Unwind_Exception *a1)
{
  quasar::VoiceCommandActiveSetCompilation::CommandSpec::~CommandSpec(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::allocator<quasar::VoiceCommandActiveSetCompilation::CommandSpec>>::unordered_set(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(long long **)(a2 + 16); i; uint64_t i = *(long long **)i)
    std::__hash_table<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::allocator<quasar::VoiceCommandActiveSetCompilation::CommandSpec>>::__emplace_unique_key_args<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::CommandSpec const&>(a1, (uint64_t)(i + 1), i + 1);
  return a1;
}

void sub_1B1BDFE84(_Unwind_Exception *a1)
{
  std::__hash_table<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::allocator<quasar::VoiceCommandActiveSetCompilation::CommandSpec>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::allocator<quasar::VoiceCommandActiveSetCompilation::CommandSpec>>::__emplace_unique_key_args<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::CommandSpec const&>(uint64_t a1, uint64_t a2, long long *a3)
{
  unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v25, a2);
  uint64_t v8 = *(int *)(a2 + 24);
  unint64_t v9 = v8 + 571 * v7 + 326041;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      uint64_t v3 = v8 + 571 * v7 + 326041;
      if (v9 >= v10) {
        uint64_t v3 = v9 % v10;
      }
    }
    else
    {
      uint64_t v3 = (v10 - 1) & v9;
    }
    unint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (quasar::VoiceCommandActiveSetCompilation::CommandSpec::operator==(i + 16, (unsigned __int8 *)a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::allocator<quasar::VoiceCommandActiveSetCompilation::CommandSpec>>::__construct_node_hash<quasar::VoiceCommandActiveSetCompilation::CommandSpec const&>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        uint64_t v3 = v9 % v10;
      }
      else {
        uint64_t v3 = v9;
      }
    }
    else
    {
      uint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *uint64_t v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<quasar::VoiceCommandActiveSetCompilation::CommandSpec,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<quasar::VoiceCommandActiveSetCompilation::CommandSpec,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_1B1BE0104(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<quasar::VoiceCommandActiveSetCompilation::CommandSpec,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<quasar::VoiceCommandActiveSetCompilation::CommandSpec,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::allocator<quasar::VoiceCommandActiveSetCompilation::CommandSpec>>::__construct_node_hash<quasar::VoiceCommandActiveSetCompilation::CommandSpec const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = (char *)operator new(0x70uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)uint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  uint64_t result = std::allocator<std::__hash_node<quasar::VoiceCommandActiveSetCompilation::CommandSpec,void *>>::construct[abi:ne180100]<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::CommandSpec const&>(v7, (std::string *)(v8 + 16), a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1B1BE017C(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<quasar::VoiceCommandActiveSetCompilation::CommandSpec,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<quasar::VoiceCommandActiveSetCompilation::CommandSpec,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t std::allocator<std::__hash_node<quasar::VoiceCommandActiveSetCompilation::CommandSpec,void *>>::construct[abi:ne180100]<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::CommandSpec const&>(int a1, std::string *this, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v5 = *a3;
    this->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  LODWORD(this[1].__r_.__value_.__l.__data_) = *((_DWORD *)a3 + 6);
  if (*((char *)a3 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 32), *((const std::string::value_type **)a3 + 4), *((void *)a3 + 5));
  }
  else
  {
    long long v6 = a3[2];
    this[2].__r_.__value_.__r.__words[0] = *((void *)a3 + 6);
    *(_OWORD *)&this[1].__r_.__value_.__r.__words[1] = v6;
  }
  return std::unordered_set<std::string>::unordered_set((uint64_t)&this[2].__r_.__value_.__l.__size_, (uint64_t)a3 + 56);
}

void sub_1B1BE022C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__hash_node<quasar::VoiceCommandActiveSetCompilation::CommandSpec,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<quasar::VoiceCommandActiveSetCompilation::CommandSpec,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<quasar::VoiceCommandActiveSetCompilation::CommandSpec,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::__unordered_map_hasher<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,true>,std::__unordered_map_equal<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,true>,std::allocator<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, unsigned __int8 *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    BOOL v9 = 1;
    if (v6 >= 3) {
      BOOL v9 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v10 = v9 | (2 * v6);
    unint64_t v11 = vcvtps_u32_f32(v7 / v8);
    if (v10 <= v11) {
      size_t v12 = v11;
    }
    else {
      size_t v12 = v10;
    }
    std::__hash_table<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::__unordered_map_hasher<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,true>,std::__unordered_map_equal<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,true>,std::allocator<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>>>::__rehash<false>(a1, v12);
    unint64_t v6 = *(void *)(a1 + 8);
  }
  uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v13.i16[0] = vaddlv_u8(v13);
  unint64_t v14 = v13.u32[0];
  if (v13.u32[0] > 1uLL)
  {
    unint64_t v15 = a2;
    if (v6 <= a2) {
      unint64_t v15 = a2 % v6;
    }
  }
  else
  {
    unint64_t v15 = (v6 - 1) & a2;
  }
  float v16 = *(unsigned __int8 **)(*(void *)a1 + 8 * v15);
  if (v16)
  {
    float v17 = *(unsigned __int8 **)v16;
    if (*(void *)v16)
    {
      int v18 = 0;
      do
      {
        unint64_t v19 = *((void *)v17 + 1);
        if (v14 > 1)
        {
          unint64_t v20 = *((void *)v17 + 1);
          if (v19 >= v6) {
            unint64_t v20 = v19 % v6;
          }
        }
        else
        {
          unint64_t v20 = v19 & (v6 - 1);
        }
        if (v20 != v15) {
          break;
        }
        BOOL v21 = v19 == a2 && quasar::VoiceCommandActiveSetCompilation::CommandSpec::operator==(v17 + 16, a3);
        if (v18 & !v21) {
          break;
        }
        v18 |= v21;
        float v16 = *(unsigned __int8 **)v16;
        float v17 = *(unsigned __int8 **)v16;
      }
      while (*(void *)v16);
    }
  }
  return v16;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<quasar::VoiceCommandActiveSetCompilation::CommandSpec const,quasar::VoiceCommandActiveSetCompilation::Suite>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

uint64_t std::map<std::string_view,int>::map[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = a1 + 8;
  std::map<std::string_view,int>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string_view,int>,std::__tree_node<std::__value_type<std::string_view,int>,void *> *,long>>>((_OWORD *)a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_1B1BE04B4(_Unwind_Exception *a1)
{
  std::__tree<int>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

_OWORD *std::map<std::string_view,int>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string_view,int>,std::__tree_node<std::__value_type<std::string_view,int>,void *> *,long>>>(_OWORD *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    long long v4 = a2;
    long long v5 = (uint64_t **)result;
    unint64_t v6 = (void *)result + 1;
    do
    {
      uint64_t result = std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::__emplace_hint_unique_key_args<std::string_view,std::pair<std::string_view const,int> const&>(v5, v6, (uint64_t)(v4 + 4), (uint64_t)(v4 + 4));
      float v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          float v8 = v7;
          float v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          float v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          long long v4 = v8;
        }
        while (!v9);
      }
      long long v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

_OWORD *std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::__emplace_hint_unique_key_args<std::string_view,std::pair<std::string_view const,int> const&>(uint64_t **a1, void *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6 = std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::__find_equal<std::string_view>(a1, a2, &v11, &v10, a3);
  float v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    float v8 = (uint64_t **)v6;
    float v7 = operator new(0x38uLL);
    _OWORD v7[2] = *(_OWORD *)a4;
    *((void *)v7 + 6) = *(void *)(a4 + 16);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v11, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::__find_equal<std::string_view>(void *a1, void *a2, void *a3, uint64_t *a4, uint64_t a5)
{
  BOOL v9 = a1 + 1;
  if (a1 + 1 != a2
    && !std::less<std::string_view>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, (uint64_t)(a2 + 4)))
  {
    if (!std::less<std::string_view>::operator()[abi:ne180100]((uint64_t)(a1 + 2), (uint64_t)(a2 + 4), a5))
    {
      *a3 = a2;
      *a4 = (uint64_t)a2;
      return a4;
    }
    a4 = a2 + 1;
    uint64_t v13 = a2[1];
    if (v13)
    {
      unint64_t v14 = (void *)a2[1];
      do
      {
        unint64_t v15 = v14;
        unint64_t v14 = (void *)*v14;
      }
      while (v14);
    }
    else
    {
      int v18 = a2;
      do
      {
        unint64_t v15 = (void *)v18[2];
        BOOL v17 = *v15 == (void)v18;
        int v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!std::less<std::string_view>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, (uint64_t)(v15 + 4)))goto LABEL_28; {
      uint64_t v13 = *a4;
      }
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = a2;
    }
    return a4;
  }
  if ((void *)*a1 == a2)
  {
    size_t v12 = a2;
LABEL_16:
    if (*a2)
    {
      *a3 = v12;
      return v12 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  uint64_t v11 = (void *)*a2;
  if (*a2)
  {
    do
    {
      size_t v12 = v11;
      uint64_t v11 = (void *)v11[1];
    }
    while (v11);
  }
  else
  {
    float v16 = a2;
    do
    {
      size_t v12 = (void *)v16[2];
      BOOL v17 = *v12 == (void)v16;
      float v16 = v12;
    }
    while (v17);
  }
  if (std::less<std::string_view>::operator()[abi:ne180100]((uint64_t)(a1 + 2), (uint64_t)(v12 + 4), a5)) {
    goto LABEL_16;
  }
LABEL_28:
  return std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::__find_equal<std::string_view>((uint64_t)a1, a3, a5);
}

void *std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::__find_equal<std::string_view>(uint64_t a1, void *a2, uint64_t a3)
{
  long long v5 = (void *)(a1 + 8);
  long long v4 = *(void **)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        float v8 = v4;
        uint64_t v9 = (uint64_t)(v4 + 4);
        if (!std::less<std::string_view>::operator()[abi:ne180100](v7, a3, (uint64_t)(v4 + 4))) {
          break;
        }
        long long v4 = (void *)*v8;
        long long v5 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (!std::less<std::string_view>::operator()[abi:ne180100](v7, v9, a3)) {
        break;
      }
      long long v5 = v8 + 1;
      long long v4 = (void *)v8[1];
    }
    while (v4);
  }
  else
  {
    float v8 = (void *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

uint64_t std::less<std::string_view>::operator()[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(const void **)a2;
  size_t v4 = *(void *)(a2 + 8);
  long long v5 = *(const void **)a3;
  size_t v6 = *(void *)(a3 + 8);
  if (v6 >= v4) {
    size_t v7 = v4;
  }
  else {
    size_t v7 = *(void *)(a3 + 8);
  }
  int v8 = memcmp(v3, v5, v7);
  if (v4 < v6) {
    unsigned int v9 = -1;
  }
  else {
    unsigned int v9 = 1;
  }
  if (v4 == v6) {
    unsigned int v9 = 0;
  }
  if (v8) {
    unsigned int v9 = v8;
  }
  return v9 >> 31;
}

void *std::allocator<quasar::VoiceCommandActiveSetCompilation const>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  std::__tree<int>::destroy(a2 + 104, *(void **)(a2 + 112));
  std::__hash_table<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::__unordered_map_hasher<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,true>,std::__unordered_map_equal<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,true>,std::allocator<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>>>::~__hash_table(a2 + 64);
  std::__tree<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::__map_value_compare<int,std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::less<int>,true>,std::allocator<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>>>::destroy(a2 + 40, *(void **)(a2 + 48));
  std::__tree<int>::destroy(a2 + 16, *(void **)(a2 + 24));
  return fst::ImplToFst<fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst((void *)a2);
}

void *std::allocate_shared[abi:ne180100]<quasar::corrective_reranking::Parser,std::allocator<quasar::corrective_reranking::Parser>,std::string const&,void>@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x2A8uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::corrective_reranking::Parser>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::corrective_reranking::Parser>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B1BE0928(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::corrective_reranking::Parser>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::corrective_reranking::Parser>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A60C98;
  quasar::corrective_reranking::Parser::Parser(a1 + 3);
  return a1;
}

void sub_1B1BE0984(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::corrective_reranking::Parser>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60C98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::corrective_reranking::Parser>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60C98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<quasar::corrective_reranking::Parser>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 24);
  quasar::corrective_reranking::Models::~Models((quasar::corrective_reranking::Models *)(a1 + 616));
  quasar::corrective_reranking::Config::~Config(v1);
}

void quasar::corrective_reranking::Config::~Config(void **this)
{
  quasar::PTree::~PTree((quasar::PTree *)(this + 66));
  if (*((char *)this + 519) < 0) {
    operator delete(this[62]);
  }
  if (*((char *)this + 487) < 0) {
    operator delete(this[58]);
  }
  if (*((char *)this + 463) < 0) {
    operator delete(this[55]);
  }
  if (*((char *)this + 431) < 0) {
    operator delete(this[51]);
  }
  if (*((char *)this + 407) < 0) {
    operator delete(this[48]);
  }
  if (*((char *)this + 375) < 0) {
    operator delete(this[44]);
  }
  if (*((char *)this + 351) < 0) {
    operator delete(this[41]);
  }
  uint64_t v2 = (std::__shared_weak_count *)this[40];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)this[35];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  long long v5 = this + 30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  if (*((char *)this + 239) < 0) {
    operator delete(this[27]);
  }
  if (*((char *)this + 215) < 0) {
    operator delete(this[24]);
  }
  if (*((char *)this + 191) < 0) {
    operator delete(this[21]);
  }
  if (*((char *)this + 167) < 0) {
    operator delete(this[18]);
  }
  long long v5 = this + 15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  long long v5 = this + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
  size_t v4 = (std::__shared_weak_count *)this[1];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void std::__shared_ptr_pointer<std::istream  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_pointer<std::istream  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<std::istream  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

void *std::allocate_shared[abi:ne180100]<ResultStreamWrapper,std::allocator<ResultStreamWrapper>,_EARSpeechRecognizer * const {__strong}&,NSDictionary<NSString *,NSString> * {__strong}&,_EARSpeechRecognizer * const {__strong}&* {__strong}&<NSString,NSNumber *>,objc_object  {objcproto33_EARSpeechRecognitionResultStream}* const {__strong}&,NSString const {__strong}&,objc_object  {objcproto30_EARSpeakerCodeWriterInterface}* const {__strong}&,objc_object  {objcproto33_EARSpeechRecognitionResultStream}* const {__strong},void>@<X0>(void **a1@<X1>, void **a2@<X2>, void **a3@<X3>, void **a4@<X4>, void **a5@<X5>, void **a6@<X6>, void **a7@<X7>, void *a8@<X8>)
{
  float v16 = operator new(0x80uLL);
  uint64_t result = std::__shared_ptr_emplace<ResultStreamWrapper>::__shared_ptr_emplace[abi:ne180100]<_EARSpeechRecognizer * const {__strong}&,NSDictionary<NSString *,NSString> * {__strong}&,_EARSpeechRecognizer * const {__strong}&* {__strong}&<NSString,NSNumber *>,objc_object  {objcproto33_EARSpeechRecognitionResultStream}* const {__strong}&,NSString const {__strong}&,objc_object  {objcproto30_EARSpeakerCodeWriterInterface}* const {__strong}&,objc_object  {objcproto33_EARSpeechRecognitionResultStream}* const {__strong},std::allocator<ResultStreamWrapper>,0>(v16, a1, a2, a3, a4, a5, a6, a7);
  *a8 = v16 + 3;
  a8[1] = v16;
  return result;
}

void sub_1B1BE0CE4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<ResultStreamWrapper>::__shared_ptr_emplace[abi:ne180100]<_EARSpeechRecognizer * const {__strong}&,NSDictionary<NSString *,NSString> * {__strong}&,_EARSpeechRecognizer * const {__strong}&* {__strong}&<NSString,NSNumber *>,objc_object  {objcproto33_EARSpeechRecognitionResultStream}* const {__strong}&,NSString const {__strong}&,objc_object  {objcproto30_EARSpeakerCodeWriterInterface}* const {__strong}&,objc_object  {objcproto33_EARSpeechRecognitionResultStream}* const {__strong},std::allocator<ResultStreamWrapper>,0>(void *a1, void **a2, void **a3, void **a4, void **a5, void **a6, void **a7, void **a8)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5DD90;
  ResultStreamWrapper::ResultStreamWrapper((uint64_t)(a1 + 3), *a2, *a3, *a4, *a5, *a6, *a7, *a8);
  return a1;
}

void sub_1B1BE0D5C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ResultStreamWrapper>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5DD90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ResultStreamWrapper>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5DD90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<ResultStreamWrapper>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t ResultStreamWrapper::ResultStreamWrapper(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  unint64_t v15 = a2;
  long long v52 = v15;
  id v16 = a3;
  id v17 = a4;
  id v18 = a5;
  long long v51 = v18;
  id v19 = a6;
  long long v50 = v19;
  id v20 = a7;
  id v21 = a8;
  long long v49 = v21;
  quasar::RecogResultStreamBase::RecogResultStreamBase((void *)a1);
  *(void *)a1 = &unk_1F0A34118;
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = v18;
  id v22 = v20;
  *(void *)(a1 + 32) = v22;
  objc_initWeak((id *)(a1 + 40), v15);
  id v44 = v16;
  unint64_t v23 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA60]), "initWithCapacity:", objc_msgSend(v44, "count"));
  *(void *)buf = MEMORY[0x1E4F143A8];
  uint64_t v54 = 3221225472;
  *(void *)long long v55 = ___ZL18LowercasedDictKeysP12NSDictionaryIP8NSStringP11objc_objectE_block_invoke;
  *(void *)&v55[8] = &unk_1E5FFE6B0;
  id v24 = v23;
  *(void *)&v55[16] = v24;
  [v44 enumerateKeysAndObjectsUsingBlock:buf];

  *(void *)(a1 + 48) = v24;
  id v25 = v17;
  *(void *)(a1 + 56) = v25;
  *(void *)(a1 + 64) = [v19 copy];
  uint64_t v26 = [v21 copy];
  uint64_t v43 = v25;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 72) = v26;
  _ZNSt3__115allocate_sharedB8ne180100IN6quasar18DoublePartialLogicENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_((void *)(a1 + 88));
  uint64_t v27 = objc_alloc_init(_EARResultContext);
  uint64_t v28 = *(void **)(a1 + 80);
  *(void *)(a1 + 80) = v27;

  objc_copyWeak(&to, (id *)(a1 + 40));
  uint64_t v29 = v15[1];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ___ZN19ResultStreamWrapperC2EP20_EARSpeechRecognizerP12NSDictionaryIP8NSStringS4_EPS2_IS4_P8NSNumberEPU44objcproto33_EARSpeechRecognitionResultStream11objc_objectS4_PU41objcproto30_EARSpeakerCodeWriterInterface11objc_objectS4__block_invoke;
  block[3] = &unk_1E5FFE578;
  objc_copyWeak(&v47, &to);
  id v42 = v21;
  dispatch_async(v29, block);
  uint64_t v31 = EARLogger::QuasarOSLogger(v30);
  if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
  {
    id v41 = v22;
    int v40 = [v15 detectUtterances];
    int v32 = [v15 concatenateUtterances];
    int v33 = [v15 allowUtteranceDelay];
    int v34 = [v15 formatAcrossUtterances];
    int v35 = *((unsigned __int8 *)v15 + 64);
    int v36 = [v15 enableVoiceCommands];
    int v37 = [v15 isLegacyVoiceCommandRequest];
    int v38 = [v15 shouldGenerateVoiceCommandCandidates];
    *(_DWORD *)buf = 67111170;
    *(_DWORD *)&buf[4] = v40;
    LOWORD(v54) = 1024;
    *(_DWORD *)((char *)&v54 + 2) = v32;
    HIWORD(v54) = 1024;
    *(_DWORD *)long long v55 = v33;
    *(_WORD *)&v55[4] = 1024;
    *(_DWORD *)&v55[6] = v34;
    *(_WORD *)&v55[10] = 2112;
    *(void *)&v55[12] = v42;
    *(_WORD *)&v55[20] = 1024;
    *(_DWORD *)&v55[22] = v35;
    __int16 v56 = 1024;
    int v57 = v36;
    __int16 v58 = 1024;
    int v59 = v37;
    __int16 v60 = 1024;
    int v61 = v38;
    _os_log_impl(&dword_1B1A86000, v31, OS_LOG_TYPE_INFO, "detectUtterances %d concatenateUtterances %d allowUtteranceDelay %d formatAcrossUtterances %d language %@ supportVoiceCommands %d enableVoiceCommands %d isLegacyVoiceCommandRequest %d shouldGenerateVoiceCommandCandidates %d", buf, 0x3Cu);
    id v22 = v41;
  }

  if ([v15 isContinuousListening])
  {
    uint64_t v45 = [v15 configPath];
    std::allocate_shared[abi:ne180100]<EARContinuousListeningResultHelper,std::allocator<EARContinuousListeningResultHelper>,_EARSpeechRecognizer * {__strong}&,objc_object  {objcproto33_EARSpeechRecognitionResultStream}* {__strong}&,_EARResultContext * {__strong}&,NSString * {__strong}&,NSString * {__strong},NSString *,void>((uint64_t)buf, (void **)&v52, &v51, (void **)(a1 + 80), &v50, &v49, (void **)&v45);
  }
  objc_destroyWeak(&v47);
  objc_destroyWeak(&to);

  return a1;
}

void sub_1B1BE1248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id *location, uint64_t a19, void *a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28,void *a29,void *a30,void *a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }

  objc_destroyWeak(location);
  objc_destroyWeak(&a28);
  uint64_t v43 = *(std::__shared_weak_count **)(v37 + 96);
  if (v43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  }

  objc_destroyWeak(v41);
  quasar::RecogResultStreamBase::~RecogResultStreamBase((quasar::RecogResultStreamBase *)v37);

  _Unwind_Resume(a1);
}

void ___ZN19ResultStreamWrapperC2EP20_EARSpeechRecognizerP12NSDictionaryIP8NSStringS4_EPS2_IS4_P8NSNumberEPU44objcproto33_EARSpeechRecognitionResultStream11objc_objectS4_PU41objcproto30_EARSpeakerCodeWriterInterface11objc_objectS4__block_invoke(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    uint64_t v1 = (void *)WeakRetained[2];
    if (v1)
    {
      if ([v1 refreshEmojiRecognizer]) {
        uint64_t v2 = [WeakRetained recognizeEmoji];
      }
      else {
        uint64_t v2 = 0;
      }
      [WeakRetained setRecognizeEmoji:v2];
    }
  }
}

void sub_1B1BE1434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ResultStreamWrapper::~ResultStreamWrapper(ResultStreamWrapper *this)
{
  ResultStreamWrapper::~ResultStreamWrapper(this);
  JUMPOUT(0x1B3EA8670);
}

{
  void *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1F0A34118;
  uint64_t v2 = (void *)*((void *)this + 10);
  *((void *)this + 10) = 0;

  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }

  objc_destroyWeak((id *)this + 5);
  quasar::RecogResultStreamBase::~RecogResultStreamBase((quasar::RecogResultStreamBase *)this);
}

void ResultStreamWrapper::writePartial(uint64_t a1, long long **a2, int a3, int a4, int a5, int a6, uint64_t **a7, uint64_t a8, long long **a9, char a10, char a11, uint64_t *a12)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v21 = WeakRetained;
  if (WeakRetained)
  {
    if (a4 && ([WeakRetained disablePartialResults] & 1) == 0)
    {
      double v102 = 0;
      float v103 = 0;
      uint64_t v104 = 0;
      id v22 = a7[1];
      __int16 v56 = v21;
      int v53 = a6;
      int v55 = a5;
      int v54 = a3;
      if (*a7 == v22)
      {
        memset(&buf, 0, sizeof(buf));
        std::vector<std::vector<quasar::Token>>::push_back[abi:ne180100]((uint64_t *)&v102, (uint64_t)&buf);
        v81[0] = &buf;
        std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v81);
        id v24 = *a2;
        int v57 = a2[1];
        if (*a2 != v57)
        {
          do
          {
            id v25 = v103;
            if (*((char *)v24 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v83, *(const std::string::value_type **)v24, *((void *)v24 + 1));
            }
            else
            {
              long long v26 = *v24;
              v83.__r_.__value_.__r.__words[2] = *((void *)v24 + 2);
              *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v26;
            }
            std::string::basic_string[abi:ne180100]<0>(v81, "");
            std::string::basic_string[abi:ne180100]<0>(v79, "");
            memset(v78, 0, sizeof(v78));
            std::string::basic_string[abi:ne180100]<0>(v76, "");
            quasar::Token::Token(&buf, (long long *)&v83, 0, 0, 0, 1, 0, (long long *)v81, 0.0, (long long *)v79, v78, 0, (long long *)v76, 0, 0);
            unint64_t v27 = *(v25 - 2);
            if (v27 >= *(v25 - 1))
            {
              uint64_t v35 = std::vector<quasar::Token>::__push_back_slow_path<quasar::Token>(v25 - 3, (long long *)&buf);
            }
            else
            {
              long long v28 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
              *(void *)(v27 + 16) = *((void *)&buf.__r_.__value_.__l + 2);
              *(_OWORD *)unint64_t v27 = v28;
              memset(&buf, 0, sizeof(buf));
              uint64_t v29 = *(void *)&v85[14];
              *(_OWORD *)(v27 + ++*(_DWORD *)(result + 24) = *(_OWORD *)v85;
              *(void *)(v27 + 38) = v29;
              uint64_t v30 = v87;
              *(_OWORD *)(v27 + 48) = v86;
              *(void *)(v27 + 64) = v30;
              *(void *)(v27 + 72) = 0;
              uint64_t v87 = 0;
              long long v86 = 0uLL;
              *(void *)(v27 + 80) = 0;
              *(void *)(v27 + 88) = 0;
              *(_OWORD *)(v27 + 72) = v88;
              *(void *)(v27 + 88) = v89;
              long long v88 = 0uLL;
              uint64_t v89 = 0;
              long long v31 = v90;
              *(void *)(v27 + 112) = v91;
              *(void *)(v27 + 120) = 0;
              *(_OWORD *)(v27 + 96) = v31;
              uint64_t v91 = 0;
              long long v90 = 0uLL;
              *(void *)(v27 + 128) = 0;
              *(void *)(v27 + 136) = 0;
              *(_OWORD *)(v27 + 120) = v92;
              *(void *)(v27 + 136) = v93;
              long long v92 = 0uLL;
              uint64_t v93 = 0;
              long long v32 = v94;
              *(void *)(v27 + 160) = v95;
              *(_OWORD *)(v27 + 144) = v32;
              uint64_t v95 = 0;
              long long v94 = 0uLL;
              LODWORD(v30) = v96;
              *(_WORD *)(v27 + 172) = v97;
              *(_DWORD *)(v27 + 168) = v30;
              long long v33 = __p;
              *(void *)(v27 + 192) = v99;
              *(_OWORD *)(v27 + 176) = v33;
              uint64_t v99 = 0;
              long long __p = 0uLL;
              long long v34 = v100;
              *(_DWORD *)(v27 + 216) = v101;
              *(_OWORD *)(v27 + 200) = v34;
              uint64_t v35 = v27 + 224;
            }
            *(v25 - 2) = v35;
            if (SHIBYTE(v99) < 0) {
              operator delete((void *)__p);
            }
            if (SHIBYTE(v95) < 0) {
              operator delete((void *)v94);
            }
            v105[0] = (void **)&v92;
            std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v105);
            if (SHIBYTE(v91) < 0) {
              operator delete((void *)v90);
            }
            v105[0] = (void **)&v88;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v105);
            if (SHIBYTE(v87) < 0) {
              operator delete((void *)v86);
            }
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(buf.__r_.__value_.__l.__data_);
            }
            if (v77 < 0) {
              operator delete(v76[0]);
            }
            v76[0] = v78;
            std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v76);
            if (v80 < 0) {
              operator delete(v79[0]);
            }
            if (v82 < 0) {
              operator delete(v81[0]);
            }
            if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v83.__r_.__value_.__l.__data_);
            }
            id v24 = (long long *)((char *)v24 + 24);
          }
          while (v24 != v57);
        }
      }
      else if (&v102 != a7)
      {
        std::vector<std::vector<quasar::Token>>::__assign_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>((uint64_t)&v102, *a7, v22, 0xAAAAAAAAAAAAAAABLL * (v22 - *a7));
      }
      int v36 = v102;
      for (uint64_t i = v103; v36 != i; v36 += 3)
      {
        uint64_t v39 = *v36;
        uint64_t v38 = v36[1];
        while (v39 != v38)
        {
          int v40 = *(unsigned __int8 *)a12;
          if (*(unsigned char *)a12)
          {
            quasar::resetWhiteSpace((std::string *)v39, a12 + 1);
            int v40 = *(unsigned __int8 *)a12;
          }
          ResultStreamWrapper::replacementTokenName(a1, (std::string *)v39, v40 != 0, &buf);
          if (*(char *)(v39 + 23) < 0) {
            operator delete(*(void **)v39);
          }
          long long v41 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
          *(void *)(v39 + 16) = *((void *)&buf.__r_.__value_.__l + 2);
          *(_OWORD *)uint64_t v39 = v41;
          v39 += 224;
        }
      }
      BOOL v42 = *(void *)a8 != *(void *)(a8 + 8);
      quasar::stringsToTokensWithDummyTimestamps((long long **)a8, 0, (uint64_t *)&buf);
      quasar::stringsToTokensWithDummyTimestamps(a9, 0, (uint64_t *)v81);
      id v58 = *(id *)(a1 + 24);
      id v43 = *(id *)(a1 + 64);
      id v44 = *(id *)(a1 + 72);
      id v45 = *(id *)(a1 + 80);
      uint64_t v47 = *(void *)(a1 + 88);
      uint64_t v46 = *(std::__shared_weak_count **)(a1 + 96);
      if (v46) {
        atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v48 = v56[1];
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3321888768;
      block[2] = ___ZN19ResultStreamWrapper12writePartialERKNSt3__16vectorINS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS5_IS7_EEEE27PartialUtteranceStartMillisbiiRKNS1_INS1_IN6quasar5TokenENS5_ISE_EEEENS5_ISG_EEEESB_SB_bbRK14FormattingInfo_block_invoke;
      block[3] = &unk_1F0A1D670;
      __int16 v60 = v56;
      id v49 = v44;
      id v61 = v49;
      id v50 = v43;
      id v62 = v50;
      uint64_t v65 = v47;
      long long v66 = v46;
      if (v46) {
        atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v73 = a10;
      char v74 = a11;
      id v51 = v45;
      id v63 = v51;
      memset(v67, 0, sizeof(v67));
      std::vector<std::vector<quasar::Token>>::__init_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(v67, v102, v103, 0xAAAAAAAAAAAAAAABLL * (v103 - v102));
      int v70 = v54;
      int v71 = v55;
      memset(v68, 0, sizeof(v68));
      std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v68, (uint64_t)buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(buf.__r_.__value_.__l.__size_ - buf.__r_.__value_.__r.__words[0]) >> 5));
      memset(v69, 0, sizeof(v69));
      std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v69, (uint64_t)v81[0], (uint64_t)v81[1], 0x6DB6DB6DB6DB6DB7 * (((char *)v81[1] - (char *)v81[0]) >> 5));
      id v52 = v58;
      id v64 = v52;
      int v72 = v53;
      BOOL v75 = v42;
      dispatch_async(v48, block);

      v79[0] = v69;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v79);
      v79[0] = v68;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v79);
      v79[0] = v67;
      std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)v79);

      if (v66) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v66);
      }

      if (v46) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v46);
      }

      v79[0] = v81;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v79);
      v81[0] = &buf;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v81);
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v102;
      std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
      id v21 = v56;
    }
  }
  else
  {
    unint64_t v23 = EARLogger::QuasarOSLogger(0);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1B1A86000, v23, OS_LOG_TYPE_INFO, "Recognizer has been deallocated; not writing partial results",
        (uint8_t *)&buf,
        2u);
    }
  }
}

void sub_1B1BE1B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a54);
  a61 = v61 - 128;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a61);

  _Unwind_Resume(a1);
}

void ResultStreamWrapper::writeFinalChoices(uint64_t a1, uint64_t a2, unsigned int a3)
{
  v136[1] = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    __int16 v56 = *(id *)(a1 + 24);
    if (v56)
    {
      if (a3 == 1)
      {
        uint64_t v131 = 0;
        long long v132 = 0;
        unint64_t v133 = 0;
        ResultChoices = (const quasar::Token ***)quasar::RecogResult::getResultChoices((quasar::RecogResult *)a2);
        size_t v7 = *ResultChoices;
        id v58 = ResultChoices[1];
        if (*ResultChoices != v58)
        {
          do
          {
            *(_OWORD *)&__s.__r_.__value_.__l.__data_ = 0uLL;
            uint64_t v112 = 0;
            __int16 v60 = v7;
            unsigned int v9 = *v7;
            int v8 = v7[1];
            while (v9 != v8)
            {
              quasar::Token::Token(&__p, v9);
              int v10 = *(unsigned __int8 *)(a2 + 320);
              if (*(unsigned char *)(a2 + 320))
              {
                quasar::resetWhiteSpace(&__p, (uint64_t *)(a2 + 328));
                int v10 = *(unsigned __int8 *)(a2 + 320);
              }
              ResultStreamWrapper::replacementTokenName(a1, &__p, v10 != 0, &v116);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              std::string __p = v116;
              uint64_t v11 = *(void **)(a1 + 56);
              if (v11)
              {
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  p_p = &__p;
                }
                else {
                  p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
                }
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type size = __p.__r_.__value_.__l.__size_;
                }
                unint64_t v14 = objc_msgSend(NSString, "ear_stringWithStringView:", p_p, size);
                unint64_t v15 = [v11 objectForKey:v14];

                if (v15)
                {
                  [v15 floatValue];
                  float v17 = *(float *)&v119 - v16;
                  if (v17 < 0.0) {
                    float v17 = 0.0;
                  }
                  *(float *)&id v119 = v17;
                }
              }
              std::string::size_type v18 = __s.__r_.__value_.__r.__words[0];
              if (__s.__r_.__value_.__r.__words[0] >= __s.__r_.__value_.__l.__size_)
              {
                uint64_t v19 = std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>(&v112, (const quasar::Token *)&__p);
              }
              else
              {
                quasar::Token::Token((std::string *)__s.__r_.__value_.__l.__data_, (const quasar::Token *)&__p);
                uint64_t v19 = v18 + 224;
              }
              __s.__r_.__value_.__r.__words[0] = v19;
              if (v130 < 0) {
                operator delete(v129);
              }
              if (v128 < 0) {
                operator delete(v127);
              }
              v116.__r_.__value_.__r.__words[0] = (std::string::size_type)&v126;
              std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v116);
              if (v125 < 0) {
                operator delete(v123);
              }
              v116.__r_.__value_.__r.__words[0] = (std::string::size_type)&v122;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v116);
              if (SHIBYTE(v121) < 0) {
                operator delete(v120);
              }
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              unsigned int v9 = (const quasar::Token *)((char *)v9 + 224);
            }
            id v20 = v132;
            if ((unint64_t)v132 >= v133)
            {
              id v22 = (uint64_t *)std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>((uint64_t *)&v131, &v112);
              id v21 = v60;
            }
            else
            {
              uint64_t *v132 = 0;
              v20[1] = 0;
              void v20[2] = 0;
              std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v20, v112, (uint64_t)__s.__r_.__value_.__l.__data_, 0x6DB6DB6DB6DB6DB7 * ((int64_t)(__s.__r_.__value_.__r.__words[0] - v112) >> 5));
              id v21 = v60;
              id v22 = v20 + 3;
            }
            long long v132 = v22;
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v112;
            std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
            size_t v7 = v21 + 3;
          }
          while (v7 != v58);
        }
        id v55 = *(id *)(a1 + 64);
        id v59 = *(id *)(a1 + 72);
        AudioAnalytics = (const quasar::AudioAnalytics *)quasar::RecogResult::getAudioAnalytics((quasar::RecogResult *)a2);
        quasar::AudioAnalytics::AudioAnalytics((quasar::AudioAnalytics *)&__p, AudioAnalytics);
        LOBYTE(v112) = *(unsigned char *)(a2 + 176);
        if (*(char *)(a2 + 207) < 0) {
          std::string::__init_copy_ctor_external(&__s, *(const std::string::value_type **)(a2 + 184), *(void *)(a2 + 192));
        }
        else {
          std::string __s = *(std::string *)(a2 + 184);
        }
        long long v114 = *(_OWORD *)(a2 + 208);
        uint64_t v115 = *(void *)(a2 + 224);
        ItnOverrides = (long long **)quasar::RecogResult::getItnOverrides((quasar::RecogResult *)a2);
        memset(&v116, 0, sizeof(v116));
        std::vector<quasar::ItnOverride>::__init_with_size[abi:ne180100]<quasar::ItnOverride*,quasar::ItnOverride*>(&v116, *ItnOverrides, ItnOverrides[1], 0x8E38E38E38E38E39 * (((char *)ItnOverrides[1] - (char *)*ItnOverrides) >> 3));
        char v31 = *(unsigned char *)(a2 + 132);
        int v32 = *(_DWORD *)(a2 + 124);
        int v33 = *(_DWORD *)(a2 + 128);
        uint64_t v34 = *(void *)(a2 + 144);
        id v61 = *(id *)(a1 + 80);
        uint64_t ResultCosts = quasar::RecogResult::getResultCosts((quasar::RecogResult *)a2);
        id v110 = 0;
        id v109 = 0;
        uint64_t v111 = 0;
        int v36 = (EARLogger *)std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(&v109, *(const void **)ResultCosts, *(void *)(ResultCosts + 8), (uint64_t)(*(void *)(ResultCosts + 8) - *(void *)ResultCosts) >> 3);
        v108[1] = 0;
        v108[0] = 0;
        id v107 = v108;
        uint64_t v37 = *(void *)(a2 + 96);
        if (v37)
        {
          if (&v107 != (char ***)(v37 + 344)) {
            std::__tree<std::string>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>((uint64_t **)&v107, *(void **)(v37 + 344), (void *)(v37 + 352));
          }
        }
        else
        {
          uint64_t v38 = EARLogger::QuasarOSLogger(v36);
          if (os_log_type_enabled(v38, OS_LOG_TYPE_FAULT)) {
            ResultStreamWrapper::writeFinalChoices();
          }
        }
        ResultMuxIds = (const void ****)quasar::RecogResult::getResultMuxIds((quasar::RecogResult *)a2);
        unint64_t v105 = 0;
        uint64_t v104 = 0;
        uint64_t v106 = 0;
        std::vector<std::set<std::string>>::__init_with_size[abi:ne180100]<std::set<std::string>*,std::set<std::string>*>((uint64_t *)&v104, *ResultMuxIds, ResultMuxIds[1], 0xAAAAAAAAAAAAAAABLL * (ResultMuxIds[1] - *ResultMuxIds));
        uint64_t LeftContextForItn = quasar::RecogResult::getLeftContextForItn((quasar::RecogResult *)a2);
        BOOL v54 = *(void *)LeftContextForItn != *(void *)(LeftContextForItn + 8);
        quasar::stringsToTokensWithDummyTimestamps((long long **)LeftContextForItn, 0, (uint64_t *)&v102);
        char v41 = *(unsigned char *)(a2 + 292);
        char v42 = *(unsigned char *)(a2 + 293);
        uint64_t v43 = *(void *)(a2 + 296);
        char v44 = *(unsigned char *)(a2 + 304);
        int v45 = *(_DWORD *)(a2 + 308);
        RightContextForItn = (long long **)quasar::RecogResult::getRightContextForItn((quasar::RecogResult *)a2);
        quasar::stringsToTokensWithDummyTimestamps(RightContextForItn, v33 + v32, (uint64_t *)&v100);
        uint64_t v47 = *(void *)(a1 + 88);
        long long v48 = *(std::__shared_weak_count **)(a1 + 96);
        if (v48) {
          atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        queue = WeakRetained[1];
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 3321888768;
        block[2] = ___ZN19ResultStreamWrapper17writeFinalChoicesERKN6quasar11RecogResultENS0_21RecogResultStreamBase11RecogStatusE_block_invoke;
        block[3] = &unk_1F0A1D6A8;
        uint64_t v68 = v47;
        unint64_t v69 = v48;
        if (v48) {
          atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        id v52 = v61;
        id v63 = v52;
        memset(v70, 0, sizeof(v70));
        std::vector<std::vector<quasar::Token>>::__init_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(v70, v131, v132, 0xAAAAAAAAAAAAAAABLL * (v132 - v131));
        int v71 = 0;
        int v72 = 0;
        uint64_t v73 = 0;
        std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(&v71, v109, (uint64_t)v110, (v110 - (unsigned char *)v109) >> 3);
        char v95 = v31;
        int v91 = v32;
        int v92 = v33;
        memset(v74, 0, sizeof(v74));
        std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v74, (uint64_t)v102, v103, 0x6DB6DB6DB6DB6DB7 * ((v103 - (uint64_t)v102) >> 5));
        char v96 = v41;
        memset(v75, 0, sizeof(v75));
        std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v75, (uint64_t)v100, v101, 0x6DB6DB6DB6DB6DB7 * ((v101 - (uint64_t)v100) >> 5));
        char v97 = v42;
        char v98 = v44;
        id v64 = WeakRetained;
        id v51 = v56;
        uint64_t v65 = v51;
        quasar::AudioAnalytics::AudioAnalytics((quasar::AudioAnalytics *)v76, (const quasar::AudioAnalytics *)&__p);
        char v83 = v112;
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v84, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
        }
        else {
          std::string v84 = __s;
        }
        long long v85 = v114;
        uint64_t v86 = v115;
        uint64_t v87 = v34;
        id v49 = v55;
        id v66 = v49;
        id v50 = v59;
        int v93 = 1;
        id v67 = v50;
        memset(&v88, 0, sizeof(v88));
        std::vector<quasar::ItnOverride>::__init_with_size[abi:ne180100]<quasar::ItnOverride*,quasar::ItnOverride*>(&v88, (long long *)v116.__r_.__value_.__l.__data_, (long long *)v116.__r_.__value_.__l.__size_, 0x8E38E38E38E38E39 * ((uint64_t)(v116.__r_.__value_.__l.__size_ - v116.__r_.__value_.__r.__words[0]) >> 3));
        std::set<std::string>::set[abi:ne180100](v89, (const void ***)&v107);
        memset(v90, 0, 24);
        std::vector<std::set<std::string>>::__init_with_size[abi:ne180100]<std::set<std::string>*,std::set<std::string>*>(v90, v104, v105, 0xAAAAAAAAAAAAAAABLL * (v105 - v104));
        BOOL v99 = v54;
        v90[3] = v43;
        int v94 = v45;
        dispatch_async(queue, block);
        uint64_t v134 = (std::string *)v90;
        std::vector<std::set<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v134);
        std::__tree<std::string>::destroy((uint64_t)v89, (char *)v89[1]);
        uint64_t v134 = &v88;
        std::vector<quasar::ItnOverride>::__destroy_vector::operator()[abi:ne180100]((void ***)&v134);

        if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v84.__r_.__value_.__l.__data_);
        }
        if (v81)
        {
          char v82 = v81;
          operator delete(v81);
        }
        if (v79)
        {
          char v80 = v79;
          operator delete(v79);
        }
        if (v77)
        {
          uint64_t v78 = v77;
          operator delete(v77);
        }
        if (v76[0])
        {
          v76[1] = v76[0];
          operator delete(v76[0]);
        }

        uint64_t v134 = (std::string *)v75;
        std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v134);
        uint64_t v134 = (std::string *)v74;
        std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v134);
        if (v71)
        {
          int v72 = v71;
          operator delete(v71);
        }
        uint64_t v134 = (std::string *)v70;
        std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v134);

        if (v69) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v69);
        }
        if (v48) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v48);
        }
        uint64_t v134 = (std::string *)&v100;
        std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v134);
        long long v100 = &v102;
        std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v100);
        double v102 = &v104;
        std::vector<std::set<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v102);
        std::__tree<std::string>::destroy((uint64_t)&v107, v108[0]);
        if (v109)
        {
          id v110 = v109;
          operator delete(v109);
        }

        id v109 = &v116;
        std::vector<quasar::ItnOverride>::__destroy_vector::operator()[abi:ne180100]((void ***)&v109);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__s.__r_.__value_.__l.__data_);
        }
        if (v123)
        {
          id v124 = v123;
          operator delete(v123);
        }
        if (v121)
        {
          id v122 = v121;
          operator delete(v121);
        }
        if (v118)
        {
          id v119 = v118;
          operator delete(v118);
        }
        if (__p.__r_.__value_.__r.__words[0])
        {
          __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
          operator delete(__p.__r_.__value_.__l.__data_);
        }

        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v131;
        std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        id v24 = v51;
        goto LABEL_93;
      }
      long long v26 = [WeakRetained relevantTextContext];
      [v26 reset];

      unint64_t v27 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v135 = *MEMORY[0x1E4F28568];
      v136[0] = @"Recognition was unsuccessful";
      long long v28 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v136 forKeys:&v135 count:1];
      uint64_t v29 = [v27 errorWithDomain:@"EARErrorDomain" code:a3 userInfo:v28];
      [v56 speechRecognizer:WeakRetained didFinishRecognitionWithError:v29];
    }
    else
    {
      id v25 = EARLogger::QuasarOSLogger(0);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
      {
        LOWORD(__p.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1B1A86000, v25, OS_LOG_TYPE_INFO, "Result stream has been deallocated; not writing final choices",
          (uint8_t *)&__p,
          2u);
      }
    }
    id v24 = v56;
    goto LABEL_93;
  }
  id v24 = EARLogger::QuasarOSLogger(0);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
  {
    LOWORD(__p.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1B1A86000, v24, OS_LOG_TYPE_INFO, "Recognizer has been deallocated; not writing final choices",
      (uint8_t *)&__p,
      2u);
  }
LABEL_93:
}

void sub_1B1BE2760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,void *a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p)
{
  quasar::AudioAnalytics::~AudioAnalytics(v36);

  *(void *)(v37 - 144) = v34;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)(v37 - 144));
  *(void *)(v37 - 144) = a11;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)(v37 - 144));
  if (__p) {
    operator delete(__p);
  }
  *(void *)(v37 - 144) = a12;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v37 - 144));

  if (a30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a30);
  }
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  *(void *)(v37 - 144) = &STACK[0x248];
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)(v37 - 144));
  STACK[0x248] = (unint64_t)&STACK[0x260];
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x248]);
  STACK[0x260] = (unint64_t)&STACK[0x278];
  std::vector<std::set<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x260]);
  std::__tree<std::string>::destroy((uint64_t)&STACK[0x290], (char *)STACK[0x298]);
  uint64_t v39 = (void *)STACK[0x2A8];
  if (STACK[0x2A8])
  {
    STACK[0x2B0] = (unint64_t)v39;
    operator delete(v39);
  }

  STACK[0x2A8] = (unint64_t)&STACK[0x2F8];
  std::vector<quasar::ItnOverride>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2A8]);
  if (SLOBYTE(STACK[0x2DF]) < 0) {
    operator delete((void *)STACK[0x2C8]);
  }
  quasar::AudioAnalytics::~AudioAnalytics((quasar::AudioAnalytics *)&STACK[0x310]);

  STACK[0x310] = v37 - 168;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x310]);

  _Unwind_Resume(a1);
}

void ResultStreamWrapper::reportRecognizerProgressStatus(uint64_t a1, _DWORD *a2)
{
  id v4 = *(id *)(a1 + 24);
  id WeakRetained = (EARLogger *)objc_loadWeakRetained((id *)(a1 + 40));
  size_t v6 = WeakRetained;
  if (!WeakRetained)
  {
    size_t v7 = EARLogger::QuasarOSLogger(0);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      __int16 v11 = 0;
      int v8 = "Recognizer has been deallocated; not reporting result progress";
      unsigned int v9 = (uint8_t *)&v11;
LABEL_9:
      _os_log_impl(&dword_1B1A86000, v7, OS_LOG_TYPE_INFO, v8, v9, 2u);
    }
LABEL_10:

    goto LABEL_11;
  }
  if (!v4)
  {
    size_t v7 = EARLogger::QuasarOSLogger(WeakRetained);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      __int16 v10 = 0;
      int v8 = "Result stream has been deallocated; not reporting result progress";
      unsigned int v9 = (uint8_t *)&v10;
      goto LABEL_9;
    }
    goto LABEL_10;
  }
  if (objc_opt_respondsToSelector()) {
    [v4 speechRecognizer:v6 didReportStatus:*a2 != 0 statusContext:0];
  }
LABEL_11:
}

void sub_1B1BE2B00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ResultStreamWrapper::reportRecognitionProgress(ResultStreamWrapper *this, int a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)this + 5);
  if (WeakRetained)
  {
    long long v5 = *((id *)this + 3);
    if (v5)
    {
      if (objc_opt_respondsToSelector()) {
        [v5 speechRecognizer:WeakRetained didProcessAudioDuration:(double)a2 * 0.001];
      }
    }
    else
    {
      size_t v6 = EARLogger::QuasarOSLogger(0);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)size_t v7 = 0;
        _os_log_impl(&dword_1B1A86000, v6, OS_LOG_TYPE_INFO, "Result stream has been deallocated; not reporting result progress",
          v7,
          2u);
      }
    }
  }
  else
  {
    long long v5 = EARLogger::QuasarOSLogger(0);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_1B1A86000, v5, OS_LOG_TYPE_INFO, "Recognizer has been deallocated; not reporting result progress",
        buf,
        2u);
    }
  }
}

void sub_1B1BE2C38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ResultStreamWrapper::reportHighResolutionRecognitionProgress(ResultStreamWrapper *this, int a2)
{
  uint64_t v3 = (void *)*((void *)this + 10);
  if (v3)
  {
    [v3 continuousListeningResultHelper];
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    if (v6)
    {
      long long v5 = (EARContinuousListeningResultHelper *)*((void *)this + 10);
      if (v5)
      {
        [(EARContinuousListeningResultHelper *)v5 continuousListeningResultHelper];
        long long v5 = v6;
      }
      else
      {
        size_t v7 = 0;
      }
      EARContinuousListeningResultHelper::reportHighResolutionRecognitionProgress(v5, a2);
      if (v7) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
    }
  }
}

void ResultStreamWrapper::reportPause(ResultStreamWrapper *this)
{
  uint64_t v2 = (void *)*((void *)this + 10);
  if (v2)
  {
    [v2 continuousListeningResultHelper];
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
    if (v4)
    {
      uint64_t v3 = (EARContinuousListeningResultHelper *)*((void *)this + 10);
      if (v3)
      {
        [(EARContinuousListeningResultHelper *)v3 continuousListeningResultHelper];
        uint64_t v3 = v4;
      }
      else
      {
        long long v5 = 0;
      }
      EARContinuousListeningResultHelper::reportPause(v3);
      if (v5) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      }
    }
  }
}

void ResultStreamWrapper::reportResume(ResultStreamWrapper *this)
{
  uint64_t v2 = (void *)*((void *)this + 10);
  if (v2)
  {
    [v2 continuousListeningResultHelper];
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
    if (v4)
    {
      uint64_t v3 = (EARContinuousListeningResultHelper *)*((void *)this + 10);
      if (v3)
      {
        [(EARContinuousListeningResultHelper *)v3 continuousListeningResultHelper];
        uint64_t v3 = v4;
      }
      else
      {
        long long v5 = 0;
      }
      EARContinuousListeningResultHelper::reportResume(v3);
      if (v5) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      }
    }
  }
}

void ResultStreamWrapper::writeEndPointData(uint64_t a1, int a2, int a3, double a4, double a5, double a6, uint64_t a7, unsigned int **a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v21 = *(id *)(a1 + 24);
    if (v21)
    {
      if (objc_opt_respondsToSelector())
      {
        id v22 = EARHelpers::VectorToArray<unsigned int>(a8);
        [v21 speechRecognizer:WeakRetained didProduceEndpointFeaturesWithWordCount:a2 trailingSilenceDuration:a13 * a3 eosLikelihood:v22 pauseCounts:a12 silencePosterior:a4 processedAudioDurationInMilliseconds:a6 acousticEndpointerScore:a5];
      }
      else
      {
        if ((objc_opt_respondsToSelector() & 1) == 0) {
          goto LABEL_13;
        }
        id v22 = EARHelpers::VectorToArray<unsigned int>(a8);
        [v21 speechRecognizer:WeakRetained didProduceEndpointFeaturesWithWordCount:a2 trailingSilenceDuration:a13 * a3 eosLikelihood:v22 pauseCounts:a12 silencePosterior:a4 processedAudioDurationInMilliseconds:a6];
      }

LABEL_13:
      if (objc_opt_respondsToSelector()) {
        [v21 speechRecognizer:WeakRetained didProcessAudioDuration:(double)a12 * 0.001];
      }
      goto LABEL_15;
    }
    unint64_t v23 = EARLogger::QuasarOSLogger(0);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)id v24 = 0;
      _os_log_impl(&dword_1B1A86000, v23, OS_LOG_TYPE_INFO, "Result stream has been deallocated; not writing end point data",
        v24,
        2u);
    }
  }
  else
  {
    id v21 = EARLogger::QuasarOSLogger(0);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_1B1A86000, v21, OS_LOG_TYPE_INFO, "Recognizer has been deallocated; not writing end point data",
        buf,
        2u);
    }
  }
LABEL_15:
}

void sub_1B1BE2FB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ResultStreamWrapper::writeTrainingData(id *a1, int64x2_t *a2, uint64_t a3)
{
  id WeakRetained = objc_loadWeakRetained(a1 + 5);
  size_t v7 = WeakRetained;
  if (WeakRetained)
  {
    unsigned int v9 = (quasar::SpeakerCodeTraining *)WeakRetained[4];
    int v8 = (std::__shared_weak_count *)WeakRetained[5];
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v9)
    {
      __int16 v10 = a1[4];
      __int16 v11 = v10;
      if (v10)
      {
        uint64_t v30 = v9;
        int v32 = v10;
        int v33 = v8;
        id v31 = a1[9];
        *(void *)std::string buf = 0;
        id v49 = (uint64_t *)buf;
        uint64_t v50 = 0x4812000000;
        id v51 = __Block_byref_object_copy__1583;
        id v52 = __Block_byref_object_dispose__1584;
        int v53 = &unk_1B27252DB;
        memset(v54, 0, 24);
        char v41 = 0;
        char v42 = (uint64_t *)&v41;
        uint64_t v43 = 0x4812000000;
        char v44 = __Block_byref_object_copy__1583;
        int v45 = __Block_byref_object_dispose__1584;
        uint64_t v46 = &unk_1B27252DB;
        memset(v47, 0, sizeof(v47));
        while (1)
        {
          if (!a2[2].i64[1])
          {
            quasar::SpeakerCodeTraining::start(v30);
            long long v28 = v7[3];
            block[0] = MEMORY[0x1E4F143A8];
            block[1] = 3321888768;
            block[2] = ___ZN19ResultStreamWrapper17writeTrainingDataERNSt3__15dequeIN6quasar19SpeakerCodeTraining11AlignedDataENS0_9allocatorIS4_EEEEl_block_invoke;
            block[3] = &unk_1F0A63D88;
            uint64_t v39 = v30;
            __int16 v11 = v32;
            int v8 = v33;
            int v40 = v33;
            if (v33) {
              atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v37 = buf;
            uint64_t v38 = &v41;
            uint64_t v35 = v32;
            uint64_t v29 = v31;
            int v36 = v29;
            dispatch_async(v28, block);

            if (v40) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v40);
            }
            _Block_object_dispose(&v41, 8);
            id v55 = (void **)v47;
            std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v55);
            _Block_object_dispose(buf, 8);
            char v41 = (void **)v54;
            std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v41);
            goto LABEL_35;
          }
          unint64_t v12 = a2[2].u64[0];
          uint64_t v13 = *(void *)(a2->i64[1] + 8 * (v12 / 0x27));
          unint64_t v14 = v12 % 0x27;
          uint64_t v15 = v13 + 104 * (v12 % 0x27);
          if (*(unsigned char *)(v15 + 96))
          {
            if (a3-- < 1) {
              goto LABEL_22;
            }
            float v17 = v49;
            unint64_t v18 = v49[7];
            if (v18 >= v49[8])
            {
              uint64_t v19 = std::vector<kaldi::CuMatrix<float>>::__push_back_slow_path<kaldi::CuMatrix<float> const&>(v49 + 6, v15);
            }
            else
            {
              kaldi::CuMatrix<float>::CuMatrix(v49[7], v15, 111);
              uint64_t v19 = v18 + 48;
              v17[7] = v18 + 48;
            }
            v17[7] = v19;
            unint64_t v23 = v42;
            uint64_t v24 = v13 + 104 * v14 + 48;
            unint64_t v25 = v42[7];
            if (v25 >= v42[8])
            {
LABEL_20:
              uint64_t v26 = std::vector<kaldi::CuMatrix<float>>::__push_back_slow_path<kaldi::CuMatrix<float> const&>(v42 + 6, v24);
              goto LABEL_21;
            }
          }
          else
          {
            id v20 = v49;
            unint64_t v21 = v49[7];
            if (v21 >= v49[8])
            {
              uint64_t v22 = std::vector<kaldi::CuMatrix<float>>::__push_back_slow_path<kaldi::CuMatrix<float> const&>(v49 + 6, v15);
            }
            else
            {
              kaldi::CuMatrix<float>::CuMatrix(v49[7], v15, 111);
              uint64_t v22 = v21 + 48;
              v20[7] = v21 + 48;
            }
            v20[7] = v22;
            unint64_t v23 = v42;
            uint64_t v24 = v13 + 104 * v14 + 48;
            unint64_t v25 = v42[7];
            if (v25 >= v42[8]) {
              goto LABEL_20;
            }
          }
          kaldi::CuMatrix<float>::CuMatrix(v42[7], v24, 111);
          uint64_t v26 = v25 + 48;
          v23[7] = v25 + 48;
LABEL_21:
          v23[7] = v26;
LABEL_22:
          std::deque<quasar::SpeakerCodeTraining::AlignedData>::pop_front(a2);
        }
      }
      uint64_t v29 = EARLogger::QuasarOSLogger(0);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl(&dword_1B1A86000, v29, OS_LOG_TYPE_INFO, "Speaker code writer has been deallocated; not training speaker code.",
          buf,
          2u);
      }
LABEL_35:
    }
    else
    {
      __int16 v11 = EARLogger::QuasarOSLogger((EARLogger *)WeakRetained);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl(&dword_1B1A86000, v11, OS_LOG_TYPE_INFO, "Training instance has been deallocated; not training speaker code.",
          buf,
          2u);
      }
    }

    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
  else
  {
    unint64_t v27 = EARLogger::QuasarOSLogger(0);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_1B1A86000, v27, OS_LOG_TYPE_INFO, "Recognizer has been deallocated; not training speaker code.",
        buf,
        2u);
    }
  }
}

void sub_1B1BE3448(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  _Unwind_Resume(a1);
}

uint64_t ResultStreamWrapper::supportsDoubleWritePartial(ResultStreamWrapper *this)
{
  return 1;
}

void ___ZL18LowercasedDictKeysP12NSDictionaryIP8NSStringP11objc_objectE_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v7 = a3;
  long long v5 = *(void **)(a1 + 32);
  size_t v6 = [a2 lowercaseString];
  [v5 setObject:v7 forKey:v6];
}

void sub_1B1BE3564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *_ZNSt3__115allocate_sharedB8ne180100IN6quasar18DoublePartialLogicENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x28uLL);
  uint64_t result = _ZNSt3__120__shared_ptr_emplaceIN6quasar18DoublePartialLogicENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B1BE35BC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *_ZNSt3__120__shared_ptr_emplaceIN6quasar18DoublePartialLogicENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A1D3D8;
  quasar::DoublePartialLogic::DoublePartialLogic((quasar::DoublePartialLogic *)(a1 + 3));
  return a1;
}

void sub_1B1BE3618(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::DoublePartialLogic>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A1D3D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::DoublePartialLogic>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A1D3D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<quasar::DoublePartialLogic>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::allocate_shared[abi:ne180100]<EARContinuousListeningResultHelper,std::allocator<EARContinuousListeningResultHelper>,_EARSpeechRecognizer * {__strong}&,objc_object  {objcproto33_EARSpeechRecognitionResultStream}* {__strong}&,_EARResultContext * {__strong}&,NSString * {__strong}&,NSString * {__strong},NSString *,void>(uint64_t a1, void **a2, void **a3, void **a4, void **a5, void **a6, void **a7)
{
  uint64_t v13 = operator new(0x160uLL);
  std::__shared_ptr_emplace<EARContinuousListeningResultHelper>::__shared_ptr_emplace[abi:ne180100]<_EARSpeechRecognizer * {__strong}&,objc_object  {objcproto33_EARSpeechRecognitionResultStream}* {__strong}&,_EARResultContext * {__strong}&,NSString * {__strong}&,NSString * {__strong},NSString *,std::allocator<EARContinuousListeningResultHelper>,0>(v13, a2, a3, a4, a5, a6, a7);
}

void sub_1B1BE3734(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<EARContinuousListeningResultHelper>::__shared_ptr_emplace[abi:ne180100]<_EARSpeechRecognizer * {__strong}&,objc_object  {objcproto33_EARSpeechRecognitionResultStream}* {__strong}&,_EARResultContext * {__strong}&,NSString * {__strong}&,NSString * {__strong},NSString *,std::allocator<EARContinuousListeningResultHelper>,0>(void *a1, void **a2, void **a3, void **a4, void **a5, void **a6, void **a7)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5DE38;
  EARContinuousListeningResultHelper::EARContinuousListeningResultHelper((uint64_t)(a1 + 3), *a2, *a3, *a4, *a5, *a6, *a7);
}

void sub_1B1BE37A8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<EARContinuousListeningResultHelper>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5DE38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<EARContinuousListeningResultHelper>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5DE38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<EARContinuousListeningResultHelper>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void EARContinuousListeningResultHelper::EARContinuousListeningResultHelper(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  uint64_t v13 = a2;
  id v14 = a3;
  id v15 = a4;
  id v16 = a5;
  id v17 = a6;
  id v18 = a7;
  char v19 = [v13 allowUtteranceDelay];
  char v20 = [v13 shouldGenerateVoiceCommandCandidates];
  char v21 = [v13 isLegacyVoiceCommandRequest];
  if (v18) {
    objc_msgSend(v18, "ear_toString");
  }
  else {
    memset(__p, 0, 24);
  }
  uint64_t v22 = v13[7];
  v24[0] = v13[6];
  v24[1] = v22;
  if (v22) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
  }
  quasar::ContinuousListeningResultHelper::ContinuousListeningResultHelper(a1, v19, v20, v21, (uint64_t)__p, v24);
}

void sub_1B1BE3CF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, id *location, id *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  quasar::result_handler::VoiceEditingResultHandlerConfig::~VoiceEditingResultHandlerConfig(&__p);
  uint64_t v34 = *(std::__shared_weak_count **)(v32 - 120);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  uint64_t v35 = *(void *)(v32 - 112);
  *(void *)(v32 - 112) = 0;
  if (v35) {
    (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
  }
  int v36 = *(std::__shared_weak_count **)(v29 + 304);
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }

  objc_destroyWeak(v31);
  objc_destroyWeak(location);
  objc_destroyWeak(a11);
  quasar::ContinuousListeningResultHelper::~ContinuousListeningResultHelper((void **)v29);

  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<quasar::result_handler::VoiceEditingRecoveryHandler,std::unique_ptr<quasar::result_handler::ResultHandler>,std::shared_ptr<EARVoiceEditingClient> &>()
{
}

void sub_1B1BE3F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, ...)
{
  va_start(va, a4);
  if (a4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
  }
  std::make_unique[abi:ne180100]<quasar::result_handler::VoiceEditingRecoveryHandler,std::unique_ptr<quasar::result_handler::ResultHandler>,std::shared_ptr<EARVoiceEditingClient> &>((uint64_t *)va);
  MEMORY[0x1B3EA8670](v4, 0x10B3C4028B74CACLL);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<quasar::result_handler::VoiceEditingResultHandler,quasar::result_handler::VoiceEditingResultHandlerConfig &,std::unique_ptr<quasar::result_handler::ResultHandler>,decltype(nullptr),std::shared_ptr<EARVoiceEditingClient> &>()
{
}

void sub_1B1BE403C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  if (a4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
  }
  std::make_unique[abi:ne180100]<quasar::result_handler::VoiceEditingResultHandler,quasar::result_handler::VoiceEditingResultHandlerConfig &,std::unique_ptr<quasar::result_handler::ResultHandler>,decltype(nullptr),std::shared_ptr<EARVoiceEditingClient> &>((uint64_t)va, (uint64_t *)va1);
  MEMORY[0x1B3EA8670](v4, 0x10F3C40D9894FA6);
  _Unwind_Resume(a1);
}

void quasar::result_handler::VoiceEditingResultHandlerConfig::~VoiceEditingResultHandlerConfig(void **this)
{
  if (*((char *)this + 135) < 0) {
    operator delete(this[14]);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(this + 9));
}

void *std::shared_ptr<quasar::result_handler::ResultHandler>::operator=[abi:ne180100]<quasar::result_handler::ResultHandler,std::default_delete<quasar::result_handler::ResultHandler>,void>(void *a1, uint64_t *a2)
{
  std::shared_ptr<quasar::result_handler::ResultHandler>::shared_ptr[abi:ne180100]<quasar::result_handler::ResultHandler,std::default_delete<quasar::result_handler::ResultHandler>,void>((uint64_t *)&v6, a2);
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  long long v4 = v6;
  *(void *)&long long v6 = *a1;
  *((void *)&v6 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

uint64_t ___ZN34EARContinuousListeningResultHelperC2EP20_EARSpeechRecognizerPU44objcproto33_EARSpeechRecognitionResultStream11objc_objectP17_EARResultContextP8NSStringS7_S7__block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) loadParser];
}

uint64_t EAROutputResultHandler::EAROutputResultHandler(uint64_t a1, void *a2, void *a3, void *a4)
{
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)a1 = &unk_1F0A1C668;
  id v7 = (id *)(a1 + 16);
  id v8 = a4;
  id v9 = a3;
  objc_initWeak(v7, a2);
  objc_initWeak((id *)(a1 + 24), v9);

  objc_initWeak((id *)(a1 + 32), v8);
  if (quasar::gLogLevel >= 5)
  {
    memset(v11, 0, sizeof(v11));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Created EAROutputResultHandler", 30);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v11);
  }
  return a1;
}

void sub_1B1BE421C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a9);
  objc_destroyWeak(v12);
  objc_destroyWeak(v11);
  objc_destroyWeak(v10);
  quasar::Bitmap::~Bitmap(v9);
  _Unwind_Resume(a1);
}

void EAROutputResultHandler::~EAROutputResultHandler(id *this)
{
  objc_destroyWeak(this + 4);
  objc_destroyWeak(this + 3);
  objc_destroyWeak(this + 2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)this);
}

{
  uint64_t vars8;

  objc_destroyWeak(this + 4);
  objc_destroyWeak(this + 3);
  objc_destroyWeak(this + 2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)this);
  JUMPOUT(0x1B3EA8670);
}

void EAROutputResultHandler::handlePartial(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  id WeakRetained = (dispatch_queue_t *)objc_loadWeakRetained((id *)(a1 + 16));
  id v6 = objc_loadWeakRetained((id *)(a1 + 24));
  id v7 = v6;
  if (WeakRetained)
  {
    if (v6)
    {
      dispatch_assert_queue_V2(WeakRetained[1]);
      if (objc_opt_respondsToSelector())
      {
        if ([(dispatch_queue_t *)WeakRetained enableVoiceCommands]
          && ([(dispatch_queue_t *)WeakRetained isLegacyVoiceCommandRequest] & 1) == 0)
        {
          uint64_t v8 = *a3;
        }
        else
        {
          uint64_t v8 = *a3;
          *(_DWORD *)(*a3 + 76) = 0;
        }
        id v9 = RHPackageToEARPackage(v8);
        __int16 v10 = [v9 nBestResults];
        __int16 v11 = [v10 firstObject];

        if (quasar::gLogLevel >= 5)
        {
          long long v41 = 0u;
          long long v42 = 0u;
          long long v39 = 0u;
          long long v40 = 0u;
          long long v37 = 0u;
          long long v38 = 0u;
          long long v35 = 0u;
          long long v36 = 0u;
          long long v33 = 0u;
          long long v34 = 0u;
          long long v31 = 0u;
          long long v32 = 0u;
          long long v29 = 0u;
          long long v30 = 0u;
          long long v27 = 0u;
          long long v28 = 0u;
          long long v26 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v26);
          unint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"EAROutputResultHandler: partial: ", 33);
          uint64_t v13 = [v11 tokens];
          id v14 = transcriptFromTokens(v13);
          id v15 = v14;
          if (v14)
          {
            objc_msgSend(v14, "ear_toString");
            unsigned int v16 = HIBYTE(v25);
            id v17 = (void **)__p;
            uint64_t v18 = v24;
          }
          else
          {
            uint64_t v18 = 0;
            id v17 = 0;
            unsigned int v16 = 0;
            std::string __p = 0;
            uint64_t v24 = 0;
            uint64_t v25 = 0;
          }
          if ((v16 & 0x80u) == 0) {
            p_p = &__p;
          }
          else {
            p_p = v17;
          }
          if ((v16 & 0x80u) == 0) {
            uint64_t v20 = v16;
          }
          else {
            uint64_t v20 = v18;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)p_p, v20);
          if (SHIBYTE(v25) < 0) {
            operator delete(__p);
          }

          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v26);
        }
        [v7 speechRecognizer:WeakRetained didRecognizePartialResult:v11];
        char v21 = *(uint64_t **)(*a3 + 48);
        uint64_t v22 = *(uint64_t **)(*a3 + 56);
        *(void *)&long long v27 = 0;
        long long v26 = 0uLL;
        if (v21 != v22) {
          std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(&v26, *v21, v21[1], 0x6DB6DB6DB6DB6DB7 * ((v21[1] - *v21) >> 5));
        }
        EAROutputResultHandler::addPartialResultToContext(a1, (uint64_t)&v26);
        std::string __p = &v26;
        std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      }
    }
  }
}

void sub_1B1BE4548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a16);
  _Unwind_Resume(a1);
}

void EAROutputResultHandler::handleCommandCandidate(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  id WeakRetained = (dispatch_queue_t *)objc_loadWeakRetained((id *)(a1 + 16));
  id v6 = objc_loadWeakRetained((id *)(a1 + 24));
  id v7 = v6;
  if (WeakRetained)
  {
    if (v6)
    {
      dispatch_assert_queue_V2(WeakRetained[1]);
      if (objc_opt_respondsToSelector())
      {
        uint64_t v8 = RHPackageToEARPackage(*a3);
        if ([v8 hasNonEmptyToken])
        {
          if (quasar::gLogLevel >= 5)
          {
            long long v75 = 0u;
            long long v76 = 0u;
            long long v73 = 0u;
            long long v74 = 0u;
            long long v71 = 0u;
            long long v72 = 0u;
            long long v69 = 0u;
            long long v70 = 0u;
            long long v67 = 0u;
            long long v68 = 0u;
            long long v65 = 0u;
            long long v66 = 0u;
            long long v63 = 0u;
            long long v64 = 0u;
            long long v61 = 0u;
            long long v62 = 0u;
            long long v60 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v60);
            id v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v60, (uint64_t)"EAROutputResultHandler: voiceCommandCandidatePackage PreITN preceding: ", 71);
            __int16 v10 = [v8 preITNRecognition];
            __int16 v11 = [v10 potentialPrecedingRecognition];
            unint64_t v12 = [v11 nBest];
            uint64_t v13 = [v12 firstObject];
            id v14 = transcriptFromTokens(v13);
            id v15 = v14;
            if (v14)
            {
              objc_msgSend(v14, "ear_toString");
              unsigned int v16 = HIBYTE(v59);
              id v17 = (void **)__p;
              uint64_t v18 = v58;
            }
            else
            {
              uint64_t v18 = 0;
              id v17 = 0;
              unsigned int v16 = 0;
              std::string __p = 0;
              uint64_t v58 = 0;
              uint64_t v59 = 0;
            }
            if ((v16 & 0x80u) == 0) {
              p_p = &__p;
            }
            else {
              p_p = v17;
            }
            if ((v16 & 0x80u) == 0) {
              uint64_t v20 = v16;
            }
            else {
              uint64_t v20 = v18;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)p_p, v20);
            if (SHIBYTE(v59) < 0) {
              operator delete(__p);
            }

            quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v60);
            if (quasar::gLogLevel >= 5)
            {
              long long v75 = 0u;
              long long v76 = 0u;
              long long v73 = 0u;
              long long v74 = 0u;
              long long v71 = 0u;
              long long v72 = 0u;
              long long v69 = 0u;
              long long v70 = 0u;
              long long v67 = 0u;
              long long v68 = 0u;
              long long v65 = 0u;
              long long v66 = 0u;
              long long v63 = 0u;
              long long v64 = 0u;
              long long v61 = 0u;
              long long v62 = 0u;
              long long v60 = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v60);
              char v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v60, (uint64_t)"EAROutputResultHandler: voiceCommandCandidatePackage PreITN command: ", 69);
              uint64_t v22 = [v8 preITNRecognition];
              unint64_t v23 = [v22 potentialCommandRecognition];
              uint64_t v24 = [v23 nBest];
              uint64_t v25 = [v24 firstObject];
              long long v26 = transcriptFromTokens(v25);
              long long v27 = v26;
              if (v26)
              {
                objc_msgSend(v26, "ear_toString");
                unsigned int v28 = HIBYTE(v59);
                long long v29 = (void **)__p;
                uint64_t v30 = v58;
              }
              else
              {
                uint64_t v30 = 0;
                long long v29 = 0;
                unsigned int v28 = 0;
                std::string __p = 0;
                uint64_t v58 = 0;
                uint64_t v59 = 0;
              }
              if ((v28 & 0x80u) == 0) {
                long long v31 = &__p;
              }
              else {
                long long v31 = v29;
              }
              if ((v28 & 0x80u) == 0) {
                uint64_t v32 = v28;
              }
              else {
                uint64_t v32 = v30;
              }
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v31, v32);
              if (SHIBYTE(v59) < 0) {
                operator delete(__p);
              }

              quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v60);
              if (quasar::gLogLevel >= 5)
              {
                long long v75 = 0u;
                long long v76 = 0u;
                long long v73 = 0u;
                long long v74 = 0u;
                long long v71 = 0u;
                long long v72 = 0u;
                long long v69 = 0u;
                long long v70 = 0u;
                long long v67 = 0u;
                long long v68 = 0u;
                long long v65 = 0u;
                long long v66 = 0u;
                long long v63 = 0u;
                long long v64 = 0u;
                long long v61 = 0u;
                long long v62 = 0u;
                long long v60 = 0u;
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v60);
                long long v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v60, (uint64_t)"EAROutputResultHandler: voiceCommandCandidatePackage PostITN preceding: ", 72);
                long long v34 = [v8 recognition];
                long long v35 = [v34 potentialPrecedingRecognition];
                long long v36 = [v35 nBest];
                long long v37 = [v36 firstObject];
                long long v38 = transcriptFromTokens(v37);
                long long v39 = v38;
                if (v38)
                {
                  objc_msgSend(v38, "ear_toString");
                  unsigned int v40 = HIBYTE(v59);
                  long long v41 = (void **)__p;
                  uint64_t v42 = v58;
                }
                else
                {
                  uint64_t v42 = 0;
                  long long v41 = 0;
                  unsigned int v40 = 0;
                  std::string __p = 0;
                  uint64_t v58 = 0;
                  uint64_t v59 = 0;
                }
                if ((v40 & 0x80u) == 0) {
                  uint64_t v43 = &__p;
                }
                else {
                  uint64_t v43 = v41;
                }
                if ((v40 & 0x80u) == 0) {
                  uint64_t v44 = v40;
                }
                else {
                  uint64_t v44 = v42;
                }
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)v43, v44);
                if (SHIBYTE(v59) < 0) {
                  operator delete(__p);
                }

                quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v60);
                if (quasar::gLogLevel >= 5)
                {
                  long long v75 = 0u;
                  long long v76 = 0u;
                  long long v73 = 0u;
                  long long v74 = 0u;
                  long long v71 = 0u;
                  long long v72 = 0u;
                  long long v69 = 0u;
                  long long v70 = 0u;
                  long long v67 = 0u;
                  long long v68 = 0u;
                  long long v65 = 0u;
                  long long v66 = 0u;
                  long long v63 = 0u;
                  long long v64 = 0u;
                  long long v61 = 0u;
                  long long v62 = 0u;
                  long long v60 = 0u;
                  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v60);
                  int v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v60, (uint64_t)"EAROutputResultHandler: voiceCommandCandidatePackage PostITN command: ", 70);
                  uint64_t v46 = [v8 recognition];
                  uint64_t v47 = [v46 potentialCommandRecognition];
                  long long v48 = [v47 nBest];
                  id v49 = [v48 firstObject];
                  uint64_t v50 = transcriptFromTokens(v49);
                  id v51 = v50;
                  if (v50)
                  {
                    objc_msgSend(v50, "ear_toString");
                    unsigned int v52 = HIBYTE(v59);
                    int v53 = (void **)__p;
                    uint64_t v54 = v58;
                  }
                  else
                  {
                    uint64_t v54 = 0;
                    int v53 = 0;
                    unsigned int v52 = 0;
                    std::string __p = 0;
                    uint64_t v58 = 0;
                    uint64_t v59 = 0;
                  }
                  if ((v52 & 0x80u) == 0) {
                    id v55 = &__p;
                  }
                  else {
                    id v55 = v53;
                  }
                  if ((v52 & 0x80u) == 0) {
                    uint64_t v56 = v52;
                  }
                  else {
                    uint64_t v56 = v54;
                  }
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)v55, v56);
                  if (SHIBYTE(v59) < 0) {
                    operator delete(__p);
                  }

                  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v60);
                  if (quasar::gLogLevel >= 5)
                  {
                    long long v75 = 0u;
                    long long v76 = 0u;
                    long long v73 = 0u;
                    long long v74 = 0u;
                    long long v71 = 0u;
                    long long v72 = 0u;
                    long long v69 = 0u;
                    long long v70 = 0u;
                    long long v67 = 0u;
                    long long v68 = 0u;
                    long long v65 = 0u;
                    long long v66 = 0u;
                    long long v63 = 0u;
                    long long v64 = 0u;
                    long long v61 = 0u;
                    long long v62 = 0u;
                    long long v60 = 0u;
                    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v60);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v60, (uint64_t)"EAROutputResultHandler: didRecognizeVoiceCommandCandidatePackage", 64);
                    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v60);
                  }
                }
              }
            }
          }
          [v7 speechRecognizer:WeakRetained didRecognizeVoiceCommandCandidatePackage:v8];
        }
      }
    }
  }
}

void sub_1B1BE4B64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a16);

  _Unwind_Resume(a1);
}

void EAROutputResultHandler::handleFinalCandidate(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  id WeakRetained = (dispatch_queue_t *)objc_loadWeakRetained((id *)(a1 + 16));
  id v6 = objc_loadWeakRetained((id *)(a1 + 24));
  id v7 = v6;
  if (WeakRetained)
  {
    if (v6)
    {
      dispatch_assert_queue_V2(WeakRetained[1]);
      if (objc_opt_respondsToSelector())
      {
        uint64_t v8 = RHPackageToEARPackage(*a3);
        if ([v8 hasNonEmptyToken])
        {
          if (quasar::gLogLevel >= 5)
          {
            long long v38 = 0u;
            long long v39 = 0u;
            long long v36 = 0u;
            long long v37 = 0u;
            long long v34 = 0u;
            long long v35 = 0u;
            long long v32 = 0u;
            long long v33 = 0u;
            long long v30 = 0u;
            long long v31 = 0u;
            long long v28 = 0u;
            long long v29 = 0u;
            long long v26 = 0u;
            long long v27 = 0u;
            long long v24 = 0u;
            long long v25 = 0u;
            long long v23 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v23);
            id v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v23, (uint64_t)"EAROutputResultHandler: finalResultCandidatePackage PreITN: ", 60);
            __int16 v10 = [v8 preITNRecognition];
            __int16 v11 = [v10 nBest];
            unint64_t v12 = [v11 firstObject];
            uint64_t v13 = transcriptFromTokens(v12);
            id v14 = v13;
            if (v13)
            {
              objc_msgSend(v13, "ear_toString");
              unsigned int v15 = HIBYTE(v22);
              unsigned int v16 = (void **)__p;
              uint64_t v17 = v21;
            }
            else
            {
              uint64_t v17 = 0;
              unsigned int v16 = 0;
              unsigned int v15 = 0;
              std::string __p = 0;
              uint64_t v21 = 0;
              uint64_t v22 = 0;
            }
            if ((v15 & 0x80u) == 0) {
              p_p = &__p;
            }
            else {
              p_p = v16;
            }
            if ((v15 & 0x80u) == 0) {
              uint64_t v19 = v15;
            }
            else {
              uint64_t v19 = v17;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)p_p, v19);
            if (SHIBYTE(v22) < 0) {
              operator delete(__p);
            }

            quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v23);
            if (quasar::gLogLevel >= 5)
            {
              long long v38 = 0u;
              long long v39 = 0u;
              long long v36 = 0u;
              long long v37 = 0u;
              long long v34 = 0u;
              long long v35 = 0u;
              long long v32 = 0u;
              long long v33 = 0u;
              long long v30 = 0u;
              long long v31 = 0u;
              long long v28 = 0u;
              long long v29 = 0u;
              long long v26 = 0u;
              long long v27 = 0u;
              long long v24 = 0u;
              long long v25 = 0u;
              long long v23 = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v23);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v23, (uint64_t)"EAROutputResultHandler: didRecognizeFinalResultCandidatePackage", 63);
              quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v23);
            }
          }
          [v7 speechRecognizer:WeakRetained didRecognizeFinalResultCandidatePackage:v8];
        }
      }
    }
  }
}

void sub_1B1BE4E88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a16);

  _Unwind_Resume(a1);
}

void EAROutputResultHandler::handleFinal(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  id WeakRetained = (dispatch_queue_t *)objc_loadWeakRetained((id *)(a1 + 16));
  id v5 = objc_loadWeakRetained((id *)(a1 + 24));
  if (WeakRetained)
  {
    if (v5)
    {
      dispatch_assert_queue_V2(WeakRetained[1]);
      if (objc_opt_respondsToSelector())
      {
        id v6 = RHPackageToEARPackage(*a3);
        if (([v6 hasNonEmptyToken] & 1) != 0 || objc_msgSend(v6, "recognitionPaused")) {
          [v5 speechRecognizer:WeakRetained didRecognizeFinalResultPackage:v6];
        }
      }
    }
  }
}

void sub_1B1BE4FDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t quasar::result_handler::ResultHandler::updateNow(uint64_t this, int *a2)
{
  int v2 = *a2;
  if (*a2 <= *(_DWORD *)(this + 8)) {
    int v2 = *(_DWORD *)(this + 8);
  }
  *a2 = v2;
  *(_DWORD *)(this + 8) = v2;
  return this;
}

void std::__shared_ptr_emplace<EARVoiceEditingClient>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A1D2F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<EARVoiceEditingClient>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A1D2F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<EARVoiceEditingClient>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void EARVoiceEditingClient::~EARVoiceEditingClient(id *this)
{
  objc_destroyWeak(this + 1);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)this);
}

{
  uint64_t vars8;

  objc_destroyWeak(this + 1);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)this);
  JUMPOUT(0x1B3EA8670);
}

void EARVoiceEditingClient::getLeftAndRightContext(id *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v12 = 0;
  uint64_t v13 = (long long *)&v12;
  uint64_t v14 = 0x4812000000;
  unsigned int v15 = __Block_byref_object_copy__1317;
  unsigned int v16 = __Block_byref_object_dispose__1318;
  long long v17 = 0u;
  long long v18 = 0u;
  uint64_t v5 = 0;
  id v6 = (long long *)&v5;
  uint64_t v7 = 0x4812000000;
  uint64_t v8 = __Block_byref_object_copy__1317;
  id v9 = __Block_byref_object_dispose__1318;
  *(_OWORD *)std::string __p = 0u;
  long long v11 = 0u;
  id WeakRetained = objc_loadWeakRetained(this + 1);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = ___ZN21EARVoiceEditingClient22getLeftAndRightContextEv_block_invoke;
  uint64_t v4[3] = &unk_1E5FFE6D8;
  v4[4] = &v12;
  v4[5] = &v5;
  [WeakRetained getLeftAndRightContextWithCompletion:v4];
  std::pair<std::string,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>(a2, v13 + 3, v6 + 3);

  _Block_object_dispose(&v5, 8);
  if (SHIBYTE(v11) < 0) {
    operator delete(__p[1]);
  }
  _Block_object_dispose(&v12, 8);
  if (SHIBYTE(v18) < 0) {
    operator delete(*((void **)&v17 + 1));
  }
}

void sub_1B1BE52B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  _Block_object_dispose(&a15, 8);
  if (a26 < 0) {
    operator delete(__p);
  }
  _Block_object_dispose((const void *)(v27 - 104), 8);
  if (*(char *)(v27 - 33) < 0) {
    operator delete(*(void **)(v27 - 56));
  }
  _Unwind_Resume(a1);
}

uint64_t EARVoiceEditingClient::getDisambiguationActive(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 1);
  uint64_t v2 = [WeakRetained disambiguationActive];

  return v2;
}

void sub_1B1BE5334(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t EARVoiceEditingClient::getFavorCommandSuppression(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 1);
  uint64_t v2 = [WeakRetained favorCommandSuppression];

  return v2;
}

void sub_1B1BE537C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t EARVoiceEditingClient::getUndoEventAndReset(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 1);
  uint64_t v2 = [WeakRetained getUndoEventAndReset];

  return v2;
}

void sub_1B1BE53C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t EARVoiceEditingClient::setEnableFinalization(EARVoiceEditingClient *this, char a2)
{
  return quasar::ContinuousListeningResultHelper::setEnableFinalization(*((void *)this + 2), a2);
}

void ___ZN21EARVoiceEditingClient22getLeftAndRightContextEv_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    objc_msgSend(v5, "ear_toString");
  }
  else
  {
    long long v11 = 0uLL;
    uint64_t v12 = 0;
  }
  uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v8 = v7 + 48;
  if (*(char *)(v7 + 71) < 0) {
    operator delete(*(void **)v8);
  }
  *(_OWORD *)uint64_t v8 = v11;
  *(void *)(v8 + 16) = v12;
  if (v6)
  {
    objc_msgSend(v6, "ear_toString");
  }
  else
  {
    long long v11 = 0uLL;
    uint64_t v12 = 0;
  }
  uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v10 = v9 + 48;
  if (*(char *)(v9 + 71) < 0) {
    operator delete(*(void **)v10);
  }
  *(_OWORD *)uint64_t v10 = v11;
  *(void *)(v10 + 16) = v12;
}

void sub_1B1BE54B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>(std::string *this, long long *a2, long long *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  id v6 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v7 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return this;
}

void sub_1B1BE554C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::shared_ptr<quasar::result_handler::ResultHandler>::shared_ptr[abi:ne180100]<quasar::result_handler::ResultHandler,std::default_delete<quasar::result_handler::ResultHandler>,void>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *uint64_t result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

void std::__shared_ptr_pointer<quasar::result_handler::ResultHandler  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_pointer<quasar::result_handler::ResultHandler  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<quasar::result_handler::ResultHandler  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void ResultStreamWrapper::replacementTokenName(uint64_t a1@<X0>, std::string *a2@<X1>, int a3@<W2>, std::string *a4@<X8>)
{
  char v53 = a3;
  id v6 = *(void **)(a1 + 48);
  if (!v6) {
    goto LABEL_90;
  }
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
  {
    if (!a2->__r_.__value_.__l.__size_) {
      goto LABEL_90;
    }
    uint64_t v9 = (std::string *)a2->__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((unsigned char *)&a2->__r_.__value_.__s + 23)) {
      goto LABEL_90;
    }
    uint64_t v9 = a2;
  }
  uint64_t v10 = objc_msgSend(NSString, "ear_stringWithStringView:", v9);
  long long v11 = [v10 lowercaseString];
  uint64_t v12 = [v6 objectForKey:v11];

  if (v12)
  {
    objc_msgSend(v12, "ear_toString");
    if (a3)
    {
      std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
      int v14 = (char)size;
      if ((size & 0x80u) != 0) {
        std::string::size_type size = a2->__r_.__value_.__l.__size_;
      }
      if (size)
      {
        uint64_t v15 = HIBYTE(v52);
        if (v52 < 0) {
          uint64_t v15 = *((void *)&v51 + 1);
        }
        if (v15)
        {
          unsigned int v16 = v14 >= 0 ? (unsigned __int8 *)a2 : (unsigned __int8 *)a2->__r_.__value_.__r.__words[0];
          unsigned int v17 = (char)*v16;
          if ((v17 & 0x80000000) != 0
             ? __maskrune(v17, 0x8000uLL)
             : *(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v17 + 60) & 0x8000)
          {
            if (v52 >= 0) {
              uint64_t v43 = (char *)&v51;
            }
            else {
              uint64_t v43 = (char *)v51;
            }
            char v44 = __toupper(*v43);
            if (v52 >= 0) {
              int v45 = &v51;
            }
            else {
              int v45 = (long long *)v51;
            }
            *(unsigned char *)int v45 = v44;
          }
        }
      }
    }
    *(_OWORD *)&a4->__r_.__value_.__l.__data_ = v51;
    a4->__r_.__value_.__r.__words[2] = v52;
    int64_t v52 = 0;
    long long v51 = 0uLL;
LABEL_84:

    return;
  }
  if (a3)
  {
    memset(&__p, 0, sizeof(__p));
    memset(&v49, 0, sizeof(v49));
    BOOL v19 = (a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
    std::string::size_type v20 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    if ((v20 & 0x80u) != 0) {
      std::string::size_type v20 = a2->__r_.__value_.__l.__size_;
    }
    if (v20)
    {
      std::string::size_type v21 = 0;
      uint64_t v22 = MEMORY[0x1E4F14390];
      while (1)
      {
        long long v23 = v19 ? (unsigned __int8 *)a2->__r_.__value_.__r.__words[0] : (unsigned __int8 *)a2;
        unsigned int v24 = (char)v23[v21];
        if ((v24 & 0x80000000) != 0 ? __maskrune(v24, 0x2000uLL) : *(_DWORD *)(v22 + 4 * v24 + 60) & 0x2000) {
          break;
        }
        ++v21;
        BOOL v19 = (a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
        std::string::size_type v26 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
        if ((v26 & 0x80u) != 0) {
          std::string::size_type v26 = a2->__r_.__value_.__l.__size_;
        }
        if (v26 <= v21) {
          goto LABEL_39;
        }
      }
      std::string::basic_string(&v48, a2, 0, v21, (std::allocator<char> *)&v54);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = v48;
      std::string::basic_string(&v48, a2, v21, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v54);
      std::string v49 = v48;
    }
LABEL_39:
    std::string::size_type v27 = __p.__r_.__value_.__l.__size_;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v28 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v28 = __p.__r_.__value_.__l.__size_;
    }
    if (v28)
    {
      std::string::size_type v29 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
      int v30 = (char)v29;
      if ((v29 & 0x80u) != 0) {
        std::string::size_type v29 = a2->__r_.__value_.__l.__size_;
      }
      if (v28 != v29)
      {
LABEL_55:
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        std::string::size_type v27 = v28;
LABEL_59:
        long long v35 = *(void **)(a1 + 48);
        long long v36 = objc_msgSend(NSString, "ear_stringWithStringView:", p_p, v27);
        long long v37 = [v36 lowercaseString];
        long long v38 = [v35 objectForKey:v37];

        if (v38)
        {
          objc_msgSend(v38, "ear_toString");
          if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v39 = &v49;
          }
          else {
            long long v39 = (std::string *)v49.__r_.__value_.__r.__words[0];
          }
          if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v40 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v40 = v49.__r_.__value_.__l.__size_;
          }
          long long v41 = std::string::append(&v48, (const std::string::value_type *)v39, v40);
          long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
          std::string::size_type v47 = v41->__r_.__value_.__r.__words[2];
          *(_OWORD *)uint64_t v46 = v42;
          v41->__r_.__value_.__l.__size_ = 0;
          v41->__r_.__value_.__r.__words[2] = 0;
          v41->__r_.__value_.__r.__words[0] = 0;
          ResultStreamWrapper::replacementTokenName(std::string const&,BOOL)::{lambda(std::string const&,std::string)#1}::operator()(&v53, (char *)a2, (char *)v46, (uint64_t)a4);
          if (SHIBYTE(v47) < 0) {
            operator delete(v46[0]);
          }
          if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v48.__r_.__value_.__l.__data_);
          }

          if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v49.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          goto LABEL_84;
        }
        goto LABEL_86;
      }
      if (v30 >= 0) {
        long long v31 = a2;
      }
      else {
        long long v31 = (std::string *)a2->__r_.__value_.__r.__words[0];
      }
      if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if (memcmp(__p.__r_.__value_.__l.__data_, v31, __p.__r_.__value_.__l.__size_)) {
          goto LABEL_59;
        }
      }
      else if (*((unsigned char *)&__p.__r_.__value_.__s + 23))
      {
        long long v32 = &__p;
        uint64_t v33 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        while (v32->__r_.__value_.__s.__data_[0] == v31->__r_.__value_.__s.__data_[0])
        {
          long long v32 = (std::string *)((char *)v32 + 1);
          long long v31 = (std::string *)((char *)v31 + 1);
          if (!--v33) {
            goto LABEL_86;
          }
        }
        goto LABEL_55;
      }
    }
LABEL_86:
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v49.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
LABEL_90:
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(a4, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
    a4->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
  }
}

void sub_1B1BE5B8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }

  if (a26 < 0) {
    operator delete(a21);
  }
  if (a33 < 0) {
    operator delete(a28);
  }

  _Unwind_Resume(a1);
}

void ___ZN19ResultStreamWrapper12writePartialERKNSt3__16vectorINS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS5_IS7_EEEE27PartialUtteranceStartMillisbiiRKNS1_INS1_IN6quasar5TokenENS5_ISE_EEEENS5_ISG_EEEESB_SB_bbRK14FormattingInfo_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 16);
  if (v2)
  {
    uint64_t v3 = *(void **)(a1 + 40);
    if (v3)
    {
      objc_msgSend(v3, "ear_toString");
    }
    else
    {
      std::string::size_type v40 = 0;
      long long v41 = 0;
      uint64_t v42 = 0;
    }
    long long v4 = *(void **)(a1 + 48);
    if (v4)
    {
      objc_msgSend(v4, "ear_toString");
    }
    else
    {
      long long v37 = 0;
      long long v38 = 0;
      uint64_t v39 = 0;
    }
    LODWORD(v2) = objc_msgSend(v2, "isEnableAutoPunctuation:task:itnEnablingFlags:", &v40, &v37, objc_msgSend(*(id *)(a1 + 32), "itnEnablingFlags"));
    if (SHIBYTE(v39) < 0) {
      operator delete(v37);
    }
    if (SHIBYTE(v42) < 0) {
      operator delete(v40);
    }
  }
  *(_WORD *)long long v36 = 0;
  quasar::DoublePartialLogic::handlePartial(*(unsigned char ***)(a1 + 72), (int)v2, *(unsigned __int8 *)(a1 + 172), *(unsigned __int8 *)(a1 + 173), &v36[1], v36);
  if (!v36[1])
  {
    long long v5 = *(void **)(a1 + 56);
    if (!v5) {
      goto LABEL_29;
    }
    [v5 continuousListeningResultHelper];
    id v6 = v40;
    if (v41) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v41);
    }
    if (v6)
    {
      std::string::size_type v40 = 0;
      long long v41 = 0;
      uint64_t v42 = 0;
      std::vector<std::vector<quasar::Token>>::__init_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(&v40, *(uint64_t **)(a1 + 88), *(uint64_t **)(a1 + 96), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 3));
      long long v7 = v40;
      uint64_t v8 = v41;
      while (v7 != (uint64_t *)v8)
      {
        uint64_t v9 = (_DWORD *)*v7;
        uint64_t v10 = (_DWORD *)v7[1];
        if ((_DWORD *)*v7 != v10)
        {
          int v11 = 0;
          do
          {
            if (v9[9]) {
              BOOL v12 = v9[8] == 0;
            }
            else {
              BOOL v12 = 1;
            }
            if (v12)
            {
              v9[7] = v11;
              v11 += 11;
              v9[8] = v11;
              v9[9] = v11;
            }
            v9 += 56;
          }
          while (v9 != v10);
        }
        v7 += 3;
      }
      uint64_t v22 = *(void **)(a1 + 56);
      if (v22)
      {
        [v22 continuousListeningResultHelper];
        long long v23 = v37;
      }
      else
      {
        long long v23 = 0;
        long long v37 = 0;
        long long v38 = 0;
      }
      unsigned int v24 = *(_DWORD *)(a1 + 160);
      uint64_t v25 = *(unsigned int *)(a1 + 164);
      BOOL v26 = v36[0];
      quasar::DoublePartialLogic::getIsLastPartialTrailingPunctuationHidden(*(void **)(a1 + 72), &v34);
      quasar::ContinuousListeningResultHelper::writePartial((uint64_t)v23, &v40, v24, v25, (uint64_t *)(a1 + 112), a1 + 136, v26, &v34);
      if (v35) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v35);
      }
      if (v38) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v38);
      }
      long long v37 = (void **)&v40;
      std::string::size_type v21 = &v37;
    }
    else
    {
LABEL_29:
      memset(v33, 0, sizeof(v33));
      std::vector<std::vector<quasar::Token>>::__init_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(v33, *(uint64_t **)(a1 + 88), *(uint64_t **)(a1 + 96), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 3));
      uint64_t v13 = *(void **)(a1 + 32);
      int v14 = *(void **)(a1 + 40);
      uint64_t v31 = 0;
      long long v32 = 0;
      int v15 = *(_DWORD *)(a1 + 168);
      unsigned int v16 = *(void **)(a1 + 48);
      unsigned int v17 = *(void **)(a1 + 56);
      std::string::size_type v40 = 0;
      long long v41 = 0;
      uint64_t v42 = 0;
      int v18 = *(unsigned __int8 *)(a1 + 174);
      BOOL v19 = v36[0];
      std::string::size_type v20 = *(void **)(a1 + 64);
      quasar::DoublePartialLogic::getIsLastPartialTrailingPunctuationHidden(*(void **)(a1 + 72), &v29);
      uint64_t v27 = 0;
      std::string::size_type v28 = 0;
      ResultStreamWrapper::writePartialToResultStream((uint64_t)v33, v13, v20, v16, v14, a1 + 112, 0, 0, 0, 1, &v31, v15, v17, (uint64_t)&v40, v18 != 0, a1 + 136, v19, &v29, 0,
        &v27);
      if (v28) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v28);
      }
      if (v30) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v30);
      }
      long long v37 = (void **)&v40;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v37);
      if (v32) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v32);
      }
      std::string::size_type v40 = v33;
      std::string::size_type v21 = (void ***)&v40;
    }
    std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](v21);
  }
}

void sub_1B1BE5F70(_Unwind_Exception *a1)
{
  *(void *)(v1 - 136) = v1 - 112;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v1 - 136));
  _Unwind_Resume(a1);
}

void *__copy_helper_block_ea8_72c55_ZTSNSt3__110shared_ptrIN6quasar18DoublePartialLogicEEE88c72_ZTSNSt3__16vectorINS0_IN6quasar5TokenENS_9allocatorIS2_EEEENS3_IS5_EEEE112c55_ZTSNSt3__16vectorIN6quasar5TokenENS_9allocatorIS2_EEEE136c55_ZTSNSt3__16vectorIN6quasar5TokenENS_9allocatorIS2_EEEE(void *a1, uint64_t a2)
{
  a1[9] = *(void *)(a2 + 72);
  uint64_t v4 = *(void *)(a2 + 80);
  a1[10] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  a1[11] = 0;
  a1[12] = 0;
  a1[13] = 0;
  std::vector<std::vector<quasar::Token>>::__init_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(a1 + 11, *(uint64_t **)(a2 + 88), *(uint64_t **)(a2 + 96), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 96) - *(void *)(a2 + 88)) >> 3));
  a1[14] = 0;
  a1[15] = 0;
  a1[16] = 0;
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(a1 + 14, *(void *)(a2 + 112), *(void *)(a2 + 120), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 120) - *(void *)(a2 + 112)) >> 5));
  a1[17] = 0;
  a1[18] = 0;
  a1[19] = 0;
  return std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(a1 + 17, *(void *)(a2 + 136), *(void *)(a2 + 144), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 144) - *(void *)(a2 + 136)) >> 5));
}

void sub_1B1BE6110(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 80);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_72c55_ZTSNSt3__110shared_ptrIN6quasar18DoublePartialLogicEEE88c72_ZTSNSt3__16vectorINS0_IN6quasar5TokenENS_9allocatorIS2_EEEENS3_IS5_EEEE112c55_ZTSNSt3__16vectorIN6quasar5TokenENS_9allocatorIS2_EEEE136c55_ZTSNSt3__16vectorIN6quasar5TokenENS_9allocatorIS2_EEEE(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 88);
  uint64_t v3 = (void **)(a1 + 112);
  long long v5 = (void **)(a1 + 136);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v5);
  long long v5 = v3;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v5);
  long long v5 = v2;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 80);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

__n128 ResultStreamWrapper::replacementTokenName(std::string const&,BOOL)::{lambda(std::string const&,std::string)#1}::operator()@<Q0>(unsigned char *a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  if (*a1)
  {
    uint64_t v6 = a2[23];
    int v7 = (char)v6;
    if ((v6 & 0x80u) != 0) {
      uint64_t v6 = *((void *)a2 + 1);
    }
    if (v6)
    {
      if (a3[23] < 0)
      {
        if (!*((void *)a3 + 1)) {
          goto LABEL_21;
        }
      }
      else if (!a3[23])
      {
        goto LABEL_21;
      }
      if (v7 >= 0) {
        uint64_t v8 = a2;
      }
      else {
        uint64_t v8 = *(char **)a2;
      }
      unsigned int v9 = *v8;
      if ((v9 & 0x80000000) != 0)
      {
        if (!__maskrune(v9, 0x8000uLL)) {
          goto LABEL_21;
        }
      }
      else if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v9 + 60) & 0x8000) == 0)
      {
        goto LABEL_21;
      }
      uint64_t v10 = a3;
      if (a3[23] < 0) {
        uint64_t v10 = *(char **)a3;
      }
      char v11 = __toupper(*v10);
      BOOL v12 = a3;
      if (a3[23] < 0) {
        BOOL v12 = *(unsigned char **)a3;
      }
      *BOOL v12 = v11;
    }
  }
LABEL_21:
  __n128 result = *(__n128 *)a3;
  *(_OWORD *)a4 = *(_OWORD *)a3;
  *(void *)(a4 + 16) = *((void *)a3 + 2);
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = 0;
  *(void *)a3 = 0;
  return result;
}

void ___ZN19ResultStreamWrapper17writeFinalChoicesERKN6quasar11RecogResultENS0_21RecogResultStreamBase11RecogStatusE_block_invoke(uint64_t a1)
{
  quasar::DoublePartialLogic::handleFinal(*(unsigned char ***)(a1 + 72));
  uint64_t v2 = *(void **)(a1 + 32);
  if (!v2) {
    goto LABEL_7;
  }
  [v2 continuousListeningResultHelper];
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  if (v33)
  {
    uint64_t v3 = *(void **)(a1 + 32);
    if (v3)
    {
      [v3 continuousListeningResultHelper];
      uint64_t v3 = v33;
    }
    else
    {
      uint64_t v33 = 0;
      uint64_t v34 = 0;
    }
    quasar::ContinuousListeningResultHelper::writeFinal((uint64_t)v3, a1 + 88, a1 + 112, *(unsigned __int8 *)(a1 + 488), *(_DWORD *)(a1 + 472), *(_DWORD *)(a1 + 476), (uint64_t *)(a1 + 136), *(unsigned char *)(a1 + 489), a1 + 160, *(_WORD *)(a1 + 490), HIBYTE(*(_WORD *)(a1 + 490)));
    if (v34) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v34);
    }
  }
  else
  {
LABEL_7:
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    uint64_t v4 = (uint64_t **)(a1 + 88);
    uint64_t v5 = a1 + 112;
    unsigned int v6 = *(unsigned __int8 *)(a1 + 488);
    uint64_t v7 = a1 + 184;
    uint64_t v8 = (unsigned __int8 *)(a1 + 328);
    double v9 = *(double *)(a1 + 384);
    uint64_t v10 = *(void **)(a1 + 48);
    char v11 = *(void **)(a1 + 56);
    unsigned int v12 = *(_DWORD *)(a1 + 472);
    int v13 = *(_DWORD *)(a1 + 476);
    int v14 = *(void **)(a1 + 64);
    unsigned int v16 = *(void **)(a1 + 32);
    int v15 = *(void **)(a1 + 40);
    int v17 = *(_DWORD *)(a1 + 480);
    uint64_t v18 = a1 + 136;
    uint64_t v31 = 0;
    long long v32 = 0;
    memset(v30, 0, sizeof(v30));
    uint64_t v19 = a1 + 392;
    uint64_t v20 = a1 + 416;
    std::string::size_type v21 = (void *)(a1 + 440);
    char v22 = *(unsigned char *)(a1 + 492);
    unsigned __int8 v23 = *(unsigned char *)(a1 + 489);
    uint64_t v24 = a1 + 160;
    char v25 = *(unsigned char *)(a1 + 490);
    double v26 = *(double *)(a1 + 464);
    int v27 = *(_DWORD *)(a1 + 484);
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    ResultStreamWrapper::writeFinalChoicesToResultStream(v4, v5, v6, v15, v10, v7, v8, v11, v9, v26, v12, v13, v14, v16, v17, 0, v18, 0, &v31,
      (uint64_t)v30,
      (uint64_t *)&v33,
      v19,
      v20,
      v21,
      v22,
      v23,
      v24,
      v25,
      v27,
      &v28);
    if (v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v29);
    }
    long long v36 = v30;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
    if (v32) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v32);
    }
    v30[0] = &v33;
    std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](v30);
  }
}

void sub_1B1BE6450(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v29 = *(std::__shared_weak_count **)(v27 - 72);
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *__copy_helper_block_ea8_72c55_ZTSNSt3__110shared_ptrIN6quasar18DoublePartialLogicEEE88c72_ZTSNSt3__16vectorINS0_IN6quasar5TokenENS_9allocatorIS2_EEEENS3_IS5_EEEE112c39_ZTSNSt3__16vectorIdNS_9allocatorIdEEEE136c55_ZTSNSt3__16vectorIN6quasar5TokenENS_9allocatorIS2_EEEE160c55_ZTSNSt3__16vectorIN6quasar5TokenENS_9allocatorIS2_EEEE184c29_ZTSN6quasar14AudioAnalyticsE328c35_ZTSN6quasar20LatnnMitigatorResultE392c62_ZTSNSt3__16vectorIN6quasar11ItnOverrideENS_9allocatorIS2_EEEE416c100_ZTSNSt3__13setINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4lessIS6_EENS4_IS6_EEEE440c123_ZTSNSt3__16vectorINS_3setINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4lessIS7_EENS5_IS7_EEEENS5_ISB_EEEE(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  uint64_t v4 = *(void *)(a2 + 80);
  *(void *)(a1 + 80) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  std::vector<std::vector<quasar::Token>>::__init_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>((void *)(a1 + 88), *(uint64_t **)(a2 + 88), *(uint64_t **)(a2 + 96), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 96) - *(void *)(a2 + 88)) >> 3));
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((void *)(a1 + 112), *(const void **)(a2 + 112), *(void *)(a2 + 120), (uint64_t)(*(void *)(a2 + 120) - *(void *)(a2 + 112)) >> 3);
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 1--*(_DWORD *)(a9 + 52) = 0;
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>((void *)(a1 + 136), *(void *)(a2 + 136), *(void *)(a2 + 144), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 144) - *(void *)(a2 + 136)) >> 5));
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>((void *)(a1 + 160), *(void *)(a2 + 160), *(void *)(a2 + 168), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 168) - *(void *)(a2 + 160)) >> 5));
  quasar::AudioAnalytics::AudioAnalytics((quasar::AudioAnalytics *)(a1 + 184), (const quasar::AudioAnalytics *)(a2 + 184));
  *(unsigned char *)(a1 + 328) = *(unsigned char *)(a2 + 328);
  if (*(char *)(a2 + 359) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 336), *(const std::string::value_type **)(a2 + 336), *(void *)(a2 + 344));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 336);
    *(void *)(a1 + 3--*(_DWORD *)(a9 + 52) = *(void *)(a2 + 352);
    *(_OWORD *)(a1 + 336) = v5;
  }
  long long v6 = *(_OWORD *)(a2 + 360);
  *(void *)(a1 + 376) = *(void *)(a2 + 376);
  *(_OWORD *)(a1 + 360) = v6;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 392) = 0;
  std::vector<quasar::ItnOverride>::__init_with_size[abi:ne180100]<quasar::ItnOverride*,quasar::ItnOverride*>((std::string *)(a1 + 392), *(long long **)(a2 + 392), *(long long **)(a2 + 400), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a2 + 400) - *(void *)(a2 + 392)) >> 3));
  std::set<std::string>::set[abi:ne180100]((uint64_t *)(a1 + 416), (const void ***)(a2 + 416));
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0;
  return std::vector<std::set<std::string>>::__init_with_size[abi:ne180100]<std::set<std::string>*,std::set<std::string>*>((uint64_t *)(a1 + 440), *(const void ****)(a2 + 440), *(const void ****)(a2 + 448), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 448) - *(void *)(a2 + 440)) >> 3));
}

void sub_1B1BE6684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  quasar::AudioAnalytics::~AudioAnalytics(v12);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  int v14 = *v11;
  if (*v11)
  {
    *(void *)(v10 + 120) = v14;
    operator delete(v14);
  }
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  int v15 = *(std::__shared_weak_count **)(v10 + 80);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  _Unwind_Resume(a1);
}

void sub_1B1BE6738()
{
}

void __destroy_helper_block_ea8_72c55_ZTSNSt3__110shared_ptrIN6quasar18DoublePartialLogicEEE88c72_ZTSNSt3__16vectorINS0_IN6quasar5TokenENS_9allocatorIS2_EEEENS3_IS5_EEEE112c39_ZTSNSt3__16vectorIdNS_9allocatorIdEEEE136c55_ZTSNSt3__16vectorIN6quasar5TokenENS_9allocatorIS2_EEEE160c55_ZTSNSt3__16vectorIN6quasar5TokenENS_9allocatorIS2_EEEE184c29_ZTSN6quasar14AudioAnalyticsE328c35_ZTSN6quasar20LatnnMitigatorResultE392c62_ZTSNSt3__16vectorIN6quasar11ItnOverrideENS_9allocatorIS2_EEEE416c100_ZTSNSt3__13setINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4lessIS6_EENS4_IS6_EEEE440c123_ZTSNSt3__16vectorINS_3setINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4lessIS7_EENS5_IS7_EEEENS5_ISB_EEEE(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 392);
  uint64_t v3 = a1 + 416;
  uint64_t v10 = (void **)(a1 + 440);
  std::vector<std::set<std::string>>::__destroy_vector::operator()[abi:ne180100](&v10);
  std::__tree<std::string>::destroy(v3, *(char **)(a1 + 424));
  uint64_t v10 = v2;
  std::vector<quasar::ItnOverride>::__destroy_vector::operator()[abi:ne180100](&v10);
  if (*(char *)(a1 + 359) < 0) {
    operator delete(*(void **)(a1 + 336));
  }
  uint64_t v4 = *(void **)(a1 + 280);
  if (v4)
  {
    *(void *)(a1 + 288) = v4;
    operator delete(v4);
  }
  long long v5 = *(void **)(a1 + 248);
  if (v5)
  {
    *(void *)(a1 + 256) = v5;
    operator delete(v5);
  }
  long long v6 = *(void **)(a1 + 216);
  if (v6)
  {
    *(void *)(a1 + 2++*(_DWORD *)(result + 24) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *(void **)(a1 + 184);
  if (v7)
  {
    *(void *)(a1 + 192) = v7;
    operator delete(v7);
  }
  uint64_t v10 = (void **)(a1 + 160);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v10);
  uint64_t v10 = (void **)(a1 + 136);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v10);
  uint64_t v8 = *(void **)(a1 + 112);
  if (v8)
  {
    *(void *)(a1 + 120) = v8;
    operator delete(v8);
  }
  uint64_t v10 = (void **)(a1 + 88);
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v10);
  double v9 = *(std::__shared_weak_count **)(a1 + 80);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

quasar::AudioAnalytics *quasar::AudioAnalytics::AudioAnalytics(quasar::AudioAnalytics *this, const quasar::AudioAnalytics *a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(this, *(const void **)a2, *((void *)a2 + 1), (uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 3);
  uint64_t v4 = *((void *)a2 + 3);
  *((void *)this + 4) = 0;
  *((void *)this + 3) = v4;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((void *)this + 4, *((const void **)a2 + 4), *((void *)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 3);
  uint64_t v5 = *((void *)a2 + 7);
  *((void *)this + 8) = 0;
  *((void *)this + 7) = v5;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((void *)this + 8, *((const void **)a2 + 8), *((void *)a2 + 9), (uint64_t)(*((void *)a2 + 9) - *((void *)a2 + 8)) >> 3);
  uint64_t v6 = *((void *)a2 + 11);
  *((void *)this + 12) = 0;
  *((void *)this + 11) = v6;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((void *)this + 12, *((const void **)a2 + 12), *((void *)a2 + 13), (uint64_t)(*((void *)a2 + 13) - *((void *)a2 + 12)) >> 3);
  *((void *)this + 15) = *((void *)a2 + 15);
  *((_OWORD *)this + 8) = *((_OWORD *)a2 + 8);
  return this;
}

void sub_1B1BE690C(_Unwind_Exception *exception_object)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 72) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 40) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::vector<quasar::ItnOverride>::__init_with_size[abi:ne180100]<quasar::ItnOverride*,quasar::ItnOverride*>(std::string *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<quasar::TranslationToken>::__vallocate[abi:ne180100](result, a4);
    __n128 result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::ItnOverride>,quasar::ItnOverride*,quasar::ItnOverride*,quasar::ItnOverride*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1B1BE69C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<quasar::ItnOverride>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::ItnOverride>,quasar::ItnOverride*,quasar::ItnOverride*,quasar::ItnOverride*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  uint64_t v4 = this;
  char v11 = this;
  unsigned int v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    int v7 = a1;
    do
    {
      std::allocator<quasar::ItnOverride>::construct[abi:ne180100]<quasar::ItnOverride,quasar::ItnOverride&>(v7, v4, v6);
      uint64_t v6 = (long long *)((char *)v6 + 72);
      uint64_t v4 = v12 + 3;
      v12 += 3;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::ItnOverride>,quasar::ItnOverride*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1B1BE6A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::allocator<quasar::ItnOverride>::construct[abi:ne180100]<quasar::ItnOverride,quasar::ItnOverride&>(int a1, std::string *this, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v5 = *a3;
    this->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a3 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a3 + 3), *((void *)a3 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a3 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v6;
  }
  int v7 = this + 2;
  if (*((char *)a3 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)a3 + 6), *((void *)a3 + 7));
  }
  else
  {
    long long v8 = a3[3];
    this[2].__r_.__value_.__r.__words[2] = *((void *)a3 + 8);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
}

void sub_1B1BE6B3C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::ItnOverride>,quasar::ItnOverride*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::ItnOverride>,quasar::ItnOverride*>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::ItnOverride>,quasar::ItnOverride*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 72;
      std::allocator<quasar::ItnOverride>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

uint64_t *std::vector<std::set<std::string>>::__init_with_size[abi:ne180100]<std::set<std::string>*,std::set<std::string>*>(uint64_t *result, const void ***a2, const void ***a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    __n128 result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::set<std::string>>,std::set<std::string>*,std::set<std::string>*,std::set<std::string>*>((uint64_t)(v6 + 2), a2, a3, (uint64_t *)v6[1]);
    v6[1] = (uint64_t)result;
  }
  return result;
}

void sub_1B1BE6C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::set<std::string>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::set<std::string>>,std::set<std::string>*,std::set<std::string>*,std::set<std::string>*>(uint64_t a1, const void ***a2, const void ***a3, uint64_t *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  char v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  void v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    long long v6 = a2;
    do
    {
      std::set<std::string>::set[abi:ne180100](v4, v6);
      v6 += 3;
      uint64_t v4 = v11 + 3;
      v11 += 3;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::set<std::string>>,std::set<std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B1BE6D14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::set<std::string>>,std::set<std::string>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::set<std::string>>,std::set<std::string>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::set<std::string>>,std::set<std::string>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  if (v1 != v2)
  {
    do
    {
      uint64_t v3 = v1 - 24;
      std::__tree<std::string>::destroy(v1 - 24, *(char **)(v1 - 16));
      uint64_t v1 = v3;
    }
    while (v3 != v2);
  }
}

void EARContinuousListeningResultHelper::reportHighResolutionRecognitionProgress(EARContinuousListeningResultHelper *this, int a2)
{
  if (*((void *)this + 37) && *((_DWORD *)this + 80) + 240 <= a2)
  {
    *((_DWORD *)this + 80) = a2;
    id WeakRetained = (NSObject **)objc_loadWeakRetained((id *)this + 32);
    uint64_t v5 = WeakRetained;
    uint64_t v6 = *((void *)this + 37);
    int v7 = (std::__shared_weak_count *)*((void *)this + 38);
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (WeakRetained)
    {
      long long v8 = WeakRetained[1];
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3321888768;
      block[2] = ___ZN34EARContinuousListeningResultHelper39reportHighResolutionRecognitionProgressEi_block_invoke;
      block[3] = &__block_descriptor_52_ea8_32c66_ZTSNSt3__110shared_ptrIN6quasar14result_handler13ResultHandlerEEE_e5_v8__0l;
      void block[4] = v6;
      uint64_t v10 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v11 = a2;
      dispatch_async(v8, block);
      if (v10) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      }
    }
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

uint64_t ___ZN34EARContinuousListeningResultHelper39reportHighResolutionRecognitionProgressEi_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned int *)(a1 + 48));
}

uint64_t __copy_helper_block_ea8_32c66_ZTSNSt3__110shared_ptrIN6quasar14result_handler13ResultHandlerEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_ea8_32c66_ZTSNSt3__110shared_ptrIN6quasar14result_handler13ResultHandlerEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void EARContinuousListeningResultHelper::reportPause(EARContinuousListeningResultHelper *this)
{
  id WeakRetained = (NSObject **)objc_loadWeakRetained((id *)this + 32);
  uint64_t v3 = WeakRetained;
  uint64_t v4 = *((void *)this + 37);
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (WeakRetained && v4)
  {
    uint64_t v6 = WeakRetained[1];
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3321888768;
    _OWORD v7[2] = ___ZN34EARContinuousListeningResultHelper11reportPauseEv_block_invoke;
    void v7[3] = &__block_descriptor_48_ea8_32c66_ZTSNSt3__110shared_ptrIN6quasar14result_handler13ResultHandlerEEE_e5_v8__0l;
    v7[4] = v4;
    long long v8 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    dispatch_async(v6, v7);
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

uint64_t ___ZN34EARContinuousListeningResultHelper11reportPauseEv_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 56))();
}

void EARContinuousListeningResultHelper::reportResume(EARContinuousListeningResultHelper *this)
{
  id WeakRetained = (NSObject **)objc_loadWeakRetained((id *)this + 32);
  uint64_t v3 = WeakRetained;
  uint64_t v4 = *((void *)this + 37);
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (WeakRetained && v4)
  {
    uint64_t v6 = WeakRetained[1];
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3321888768;
    _OWORD v7[2] = ___ZN34EARContinuousListeningResultHelper12reportResumeEv_block_invoke;
    void v7[3] = &__block_descriptor_48_ea8_32c66_ZTSNSt3__110shared_ptrIN6quasar14result_handler13ResultHandlerEEE_e5_v8__0l;
    v7[4] = v4;
    long long v8 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    dispatch_async(v6, v7);
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

uint64_t ___ZN34EARContinuousListeningResultHelper12reportResumeEv_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 64))();
}

id EARHelpers::VectorToArray<unsigned int>(unsigned int **a1)
{
  uint64_t v2 = [MEMORY[0x1E4F1CA48] array];
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1 != v4)
  {
    do
    {
      uint64_t v5 = [NSNumber numberWithUnsignedInt:*v3];
      [v2 addObject:v5];

      ++v3;
    }
    while (v3 != v4);
  }
  uint64_t v6 = (void *)[v2 copy];

  return v6;
}

void sub_1B1BE7198(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__1583(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__1584(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 48);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

uint64_t std::deque<quasar::SpeakerCodeTraining::AlignedData>::pop_front(int64x2_t *a1)
{
  uint64_t v2 = *(void *)(a1->i64[1] + 8 * (a1[2].i64[0] / 0x27uLL)) + 104 * (a1[2].i64[0] % 0x27uLL);
  kaldi::CuMatrix<float>::~CuMatrix(v2 + 48);
  kaldi::CuMatrix<float>::~CuMatrix(v2);
  a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_1B255E5F0);
  return std::deque<quasar::SpeakerCodeTraining::AlignedData>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1, 1);
}

void ___ZN19ResultStreamWrapper17writeTrainingDataERNSt3__15dequeIN6quasar19SpeakerCodeTraining11AlignedDataENS0_9allocatorIS4_EEEEl_block_invoke(uint64_t a1)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  quasar::SpeakerCodeTraining::load(*(quasar::SpeakerCodeTraining **)(a1 + 64));
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v5 = *(void *)(v3 + 48);
  uint64_t v6 = *(void *)(v3 + 56);
  uint64_t v4 = v3 + 48;
  if (v5 == v6
    || (uint64_t v7 = *(void *)(*(void *)(a1 + 56) + 8), v8 = *(void *)(v7 + 48), v9 = *(void *)(v7 + 56), v8 == v9)
    || v6 - v5 != v9 - v8)
  {
    uint64_t v29 = EARLogger::QuasarOSLogger(v2);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
    {
      unint64_t v30 = 0xAAAAAAAAAAAAAAABLL
          * ((uint64_t)(*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 56)
                     - *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 48)) >> 4);
      unint64_t v31 = 0xAAAAAAAAAAAAAAABLL
          * ((uint64_t)(*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 56)
                     - *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 48)) >> 4);
      *(_DWORD *)std::string buf = 134218240;
      *(void *)long long v37 = v30;
      *(_WORD *)&v37[8] = 2048;
      *(void *)&v37[10] = v31;
      _os_log_impl(&dword_1B1A86000, v29, OS_LOG_TYPE_INFO, "Features or labels are invalid, not feeding data for training, feature size: %zu, label size: %zu", buf, 0x16u);
    }

    [*(id *)(a1 + 32) setTrainingSpeakerCode:0 inferenceSpeakerCode:0 accumulatedGradient:0 nnetVersion:0 numFrames:0 trainingOffset:0 recognitionOffset:0 language:0];
  }
  else
  {
    quasar::SpeakerCodeTraining::batchInput(*(int32x2_t **)(a1 + 64), v4);
    uint64_t v10 = (EARLogger *)quasar::SpeakerCodeTraining::batchInput(*(int32x2_t **)(a1 + 64), *(void *)(*(void *)(a1 + 56) + 8) + 48);
    uint64_t v11 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v13 = *(void *)(v11 + 48);
    uint64_t v12 = *(void *)(v11 + 56);
    int v14 = EARLogger::QuasarOSLogger(v10);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 134217984;
      *(void *)long long v37 = (v12 - v13) / 48;
      _os_log_impl(&dword_1B1A86000, v14, OS_LOG_TYPE_INFO, "Training starts, total samples: %zu", buf, 0xCu);
    }

    if (v12 != v13)
    {
      uint64_t v16 = 0;
      if ((unint64_t)((v12 - v13) / 48) <= 1) {
        uint64_t v17 = 1;
      }
      else {
        uint64_t v17 = (v12 - v13) / 48;
      }
      do
      {
        int v15 = (EARLogger *)quasar::SpeakerCodeTraining::train(*(void *)(a1 + 64), *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 48) + v16, *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 48) + v16);
        v16 += 48;
        --v17;
      }
      while (v17);
    }
    uint64_t v18 = EARLogger::QuasarOSLogger(v15);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      uint64_t ProcessedSamples = quasar::SpeakerCodeTraining::getProcessedSamples(*(quasar::SpeakerCodeTraining **)(a1 + 64));
      uint64_t TrainingOffset = quasar::SpeakerCodeTraining::getTrainingOffset(*(quasar::SpeakerCodeTraining **)(a1 + 64));
      uint64_t RecognitionOffset = quasar::SpeakerCodeTraining::getRecognitionOffset(*(quasar::SpeakerCodeTraining **)(a1 + 64));
      *(_DWORD *)std::string buf = 134218496;
      *(void *)long long v37 = ProcessedSamples;
      *(_WORD *)&v37[8] = 2048;
      *(void *)&v37[10] = TrainingOffset;
      __int16 v38 = 2048;
      uint64_t v39 = RecognitionOffset;
      _os_log_impl(&dword_1B1A86000, v18, OS_LOG_TYPE_INFO, "Training finishes, writing updated speaker code out, processed samples: %zu, training offset: %zu, recognition offset: %zu", buf, 0x20u);
    }

    char v22 = *(void **)(a1 + 32);
    quasar::SpeakerCodeTraining::getSpeakerCode(*(void *)(a1 + 64), buf);
    unsigned __int8 v23 = EARHelpers::serialize((uint64_t *)buf);
    quasar::SpeakerCodeTraining::getInferenceSpeakerCode(*(quasar::SpeakerCodeTraining **)(a1 + 64), &v34);
    uint64_t v24 = EARHelpers::serialize(&v34);
    quasar::SpeakerCodeTraining::getAccumulatedGradient(*(void *)(a1 + 64), &v32);
    char v25 = EARHelpers::serialize(&v32);
    unsigned int NnetVersion = quasar::SpeakerCodeTraining::getNnetVersion(*(quasar::SpeakerCodeTraining **)(a1 + 64));
    uint64_t v27 = quasar::SpeakerCodeTraining::getProcessedSamples(*(quasar::SpeakerCodeTraining **)(a1 + 64));
    uint64_t v28 = quasar::SpeakerCodeTraining::getTrainingOffset(*(quasar::SpeakerCodeTraining **)(a1 + 64));
    [v22 setTrainingSpeakerCode:v23 inferenceSpeakerCode:v24 accumulatedGradient:v25 nnetVersion:NnetVersion numFrames:v27 trainingOffset:v28 recognitionOffset:quasar::SpeakerCodeTraining::getRecognitionOffset(*(quasar::SpeakerCodeTraining **)(a1 + 64)) language:*(void *)(a1 + 40)];

    if (v33) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v33);
    }

    if (v35) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v35);
    }

    if (*(void *)&v37[4]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v37[4]);
    }
  }
}

void sub_1B1BE7638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }

  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }

  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_64c56_ZTSNSt3__110shared_ptrIN6quasar19SpeakerCodeTrainingEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 72);
  *(void *)(result + 64) = *(void *)(a2 + 64);
  *(void *)(result + 72) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_ea8_64c56_ZTSNSt3__110shared_ptrIN6quasar19SpeakerCodeTrainingEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 72);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::vector<kaldi::CuMatrix<float>>::__push_back_slow_path<kaldi::CuMatrix<float> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v9 = 0x555555555555555;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v13 = v10;
  int v14 = &v10[48 * v4];
  uint64_t v16 = &v10[48 * v9];
  kaldi::CuMatrix<float>::CuMatrix(v14, a2, 111);
  int v15 = v14 + 48;
  std::vector<kaldi::CuMatrix<float>>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<kaldi::CuMatrix<float>>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1B1BE77D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<kaldi::CuMatrix<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::deque<quasar::SpeakerCodeTraining::AlignedData>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x27) {
    a2 = 1;
  }
  if (v2 < 0x4E) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 39;
  }
  return v4 ^ 1u;
}

void std::__assoc_state<quasar::Location>::~__assoc_state(uint64_t a1)
{
  *(void *)a1 = MEMORY[0x1E4FBA480] + 16;
  unint64_t v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

{
  std::exception_ptr *v2;
  uint64_t vars8;

  *(void *)a1 = MEMORY[0x1E4FBA480] + 16;
  unint64_t v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__assoc_state<quasar::Location>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

uint64_t *std::promise<quasar::Location>::~promise(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    if ((*(unsigned char *)(v2 + 136) & 1) == 0)
    {
      v7.__ptr_ = 0;
      uint64_t v3 = *(void *)(v2 + 16);
      std::exception_ptr::~exception_ptr(&v7);
      uint64_t v2 = *a1;
      if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
      {
        int v4 = std::future_category();
        MEMORY[0x1B3EA7CA0](v6, 4, v4);
        std::make_exception_ptr[abi:ne180100]<std::future_error>(v6);
      }
    }
    if (!atomic_fetch_add((atomic_ullong *volatile)(v2 + 8), 0xFFFFFFFFFFFFFFFFLL)) {
      (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
    }
  }
  return a1;
}

void std::make_exception_ptr[abi:ne180100]<std::future_error>(const std::logic_error *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
  uint64_t v3 = std::logic_error::logic_error(exception, a1);
  v3->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA440] + 16);
  v3[1] = a1[1];
  __cxa_throw(v3, MEMORY[0x1E4FBA2E8], MEMORY[0x1E4FBA218]);
}

void sub_1B1BE7AA8(void *a1)
{
}

void std::__throw_future_error[abi:ne180100](unsigned int a1)
{
  exception = __cxa_allocate_exception(0x20uLL);
  uint64_t v3 = std::future_category();
  MEMORY[0x1B3EA7CA0](exception, a1, v3);
  __cxa_throw(exception, MEMORY[0x1E4FBA2E8], MEMORY[0x1E4FBA218]);
}

void sub_1B1BE7B1C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__assoc_state<quasar::Location>::set_value<quasar::Location>(uint64_t a1, _OWORD *a2)
{
  int v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if ((*(unsigned char *)(a1 + 136) & 1) != 0
    || (v6.__ptr_ = 0, uint64_t v5 = *(void *)(a1 + 16), std::exception_ptr::~exception_ptr(&v6), v5))
  {
    std::__throw_future_error[abi:ne180100](2u);
  }
  *(_OWORD *)(a1 + 144) = *a2;
  *(_DWORD *)(a1 + 136) |= 5u;
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 88));
  std::mutex::unlock(v4);
}

void sub_1B1BE7BC0(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<kaldi::quasar::LmHandle>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<kaldi::quasar::LmHandle>>,std::reverse_iterator<std::shared_ptr<kaldi::quasar::LmHandle>*>,std::reverse_iterator<std::shared_ptr<kaldi::quasar::LmHandle>*>,std::reverse_iterator<std::shared_ptr<kaldi::quasar::LmHandle>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<kaldi::quasar::LmHandle>>,std::reverse_iterator<std::shared_ptr<kaldi::quasar::LmHandle>*>,std::reverse_iterator<std::shared_ptr<kaldi::quasar::LmHandle>*>,std::reverse_iterator<std::shared_ptr<kaldi::quasar::LmHandle>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<kaldi::quasar::LmHandle>>,std::reverse_iterator<std::shared_ptr<kaldi::quasar::LmHandle>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<kaldi::quasar::LmHandle>>,std::reverse_iterator<std::shared_ptr<kaldi::quasar::LmHandle>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::FeatureExtractor>>,std::reverse_iterator<std::shared_ptr<quasar::FeatureExtractor>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void *std::allocate_shared[abi:ne180100]<quasar::RunAsyncParams,std::allocator<quasar::RunAsyncParams>,std::shared_ptr<quasar::RecogResultStreamBase> &,void>@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x338uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::RunAsyncParams>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::RecogResultStreamBase> &,std::allocator<quasar::RunAsyncParams>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B1BE7D60(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::RunAsyncParams>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::RecogResultStreamBase> &,std::allocator<quasar::RunAsyncParams>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5FE98;
  quasar::RunAsyncParams::RunAsyncParams(a1 + 3);
  return a1;
}

void sub_1B1BE7DBC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::RunAsyncParams>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5FE98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::RunAsyncParams>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5FE98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<quasar::RunAsyncParams>::__on_zero_shared(uint64_t a1)
{
}

void std::__assoc_sub_state::__attach_future[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  int v3 = *(_DWORD *)(a1 + 136);
  if ((v3 & 2) != 0) {
    std::__throw_future_error[abi:ne180100](1u);
  }
  atomic_fetch_add_explicit((atomic_ullong *volatile)(a1 + 8), 1uLL, memory_order_relaxed);
  *(_DWORD *)(a1 + 136) = v3 | 2;
  std::mutex::unlock(v2);
}

void sub_1B1BE7EB8(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<ResultStreamWrapper,std::allocator<ResultStreamWrapper>,_EARSpeechRecognizer * const {__strong}&,NSDictionary<NSString *,NSString> * {__strong}&,_EARSpeechRecognizer * const {__strong}&* {__strong}&<NSString,NSNumber *>,_EARSyncResultStreamHelper * const {__strong}&,NSString {__strong},decltype(nullptr),_EARSyncResultStreamHelper * const {__strong},void>@<X0>(void **a1@<X1>, void **a2@<X2>, void **a3@<X3>, void **a4@<X4>, void **a5@<X5>, uint64_t a6@<X6>, void **a7@<X7>, void *a8@<X8>)
{
  uint64_t v16 = operator new(0x80uLL);
  uint64_t result = std::__shared_ptr_emplace<ResultStreamWrapper>::__shared_ptr_emplace[abi:ne180100]<_EARSpeechRecognizer * const {__strong}&,NSDictionary<NSString *,NSString> * {__strong}&,_EARSpeechRecognizer * const {__strong}&* {__strong}&<NSString,NSNumber *>,_EARSyncResultStreamHelper * const {__strong}&,NSString {__strong},decltype(nullptr),_EARSyncResultStreamHelper * const {__strong},std::allocator<ResultStreamWrapper>,0>(v16, a1, a2, a3, a4, a5, a6, a7);
  *a8 = v16 + 3;
  a8[1] = v16;
  return result;
}

void sub_1B1BE7F5C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<ResultStreamWrapper>::__shared_ptr_emplace[abi:ne180100]<_EARSpeechRecognizer * const {__strong}&,NSDictionary<NSString *,NSString> * {__strong}&,_EARSpeechRecognizer * const {__strong}&* {__strong}&<NSString,NSNumber *>,_EARSyncResultStreamHelper * const {__strong}&,NSString {__strong},decltype(nullptr),_EARSyncResultStreamHelper * const {__strong},std::allocator<ResultStreamWrapper>,0>(void *a1, void **a2, void **a3, void **a4, void **a5, void **a6, uint64_t a7, void **a8)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5DD90;
  ResultStreamWrapper::ResultStreamWrapper((uint64_t)(a1 + 3), *a2, *a3, *a4, *a5, *a6, 0, *a8);
  return a1;
}

void sub_1B1BE7FD4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void *std::vector<double>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](a1, a2);
    int v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1B1BE8044(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<quasar::RunAsyncParams,std::allocator<quasar::RunAsyncParams>,decltype(nullptr),void>@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x338uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::RunAsyncParams>::__shared_ptr_emplace[abi:ne180100]<decltype(nullptr),std::allocator<quasar::RunAsyncParams>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B1BE80A8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::RunAsyncParams>::__shared_ptr_emplace[abi:ne180100]<decltype(nullptr),std::allocator<quasar::RunAsyncParams>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5FE98;
  std::allocator<quasar::RunAsyncParams>::construct[abi:ne180100]<quasar::RunAsyncParams,decltype(nullptr)>((uint64_t)&v3, (uint64_t)(a1 + 3));
  return a1;
}

void sub_1B1BE8118(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::RunAsyncParams>::construct[abi:ne180100]<quasar::RunAsyncParams,decltype(nullptr)>(uint64_t a1, uint64_t a2)
{
}

void sub_1B1BE816C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<getModelFilesWithSuffix(std::string const&,std::string const&)::$_0,std::allocator<getModelFilesWithSuffix(std::string const&,std::string const&)::$_0>,BOOL ()(std::string const&)>::~__func()
{
}

void *std::__function::__func<getModelFilesWithSuffix(std::string const&,std::string const&)::$_0,std::allocator<getModelFilesWithSuffix(std::string const&,std::string const&)::$_0>,BOOL ()(std::string const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F0A5A758;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<getModelFilesWithSuffix(std::string const&,std::string const&)::$_0,std::allocator<getModelFilesWithSuffix(std::string const&,std::string const&)::$_0>,BOOL ()(std::string const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F0A5A758;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<getModelFilesWithSuffix(std::string const&,std::string const&)::$_0,std::allocator<getModelFilesWithSuffix(std::string const&,std::string const&)::$_0>,BOOL ()(std::string const&)>::operator()(uint64_t a1, uint64_t *a2)
{
  return quasar::endsWith(a2, *(uint64_t **)(a1 + 8));
}

uint64_t std::__function::__func<getModelFilesWithSuffix(std::string const&,std::string const&)::$_0,std::allocator<getModelFilesWithSuffix(std::string const&,std::string const&)::$_0>,BOOL ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<getModelFilesWithSuffix(std::string const&,std::string const&)::$_0,std::allocator<getModelFilesWithSuffix(std::string const&,std::string const&)::$_0>,BOOL ()(std::string const&)>::target_type()
{
}

void *std::__function::__value_func<BOOL ()(std::string const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

std::string *std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(std::vector<std::string> *a1, std::string *a2, std::string *a3, long long *a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    value = a1->__end_cap_.__value_;
    p_end_cap = (std::allocator<std::string> *)&a1->__end_cap_;
    uint64_t v10 = value;
    uint64_t v12 = (std::string *)*((void *)p_end_cap - 1);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)v12) >> 3)) >= a5)
    {
      uint64_t v20 = (char *)v12 - (char *)a2;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((char *)v12 - (char *)a2) >> 3)) >= a5)
      {
        std::string::size_type v21 = (long long *)&a3[a5];
      }
      else
      {
        std::string::size_type v21 = (long long *)(&a3->__r_.__value_.__l.__data_ + (((char *)v12 - (char *)a2) >> 3));
        a1->__end_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)p_end_cap, v21, a4, *((std::string **)p_end_cap - 1));
        if (v20 < 1) {
          return v5;
        }
      }
      std::vector<std::string>::__move_range(a1, v5, v12, &v5[a5]);
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(a3, (std::string *)v21, v5);
    }
    else
    {
      std::vector<std::string>::pointer begin = a1->__begin_;
      unint64_t v14 = a5 - 0x5555555555555555 * (((char *)v12 - (char *)a1->__begin_) >> 3);
      if (v14 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)begin) >> 3);
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (((char *)v10 - (char *)begin) >> 3);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = v14;
      }
      if (v16 >= 0x555555555555555) {
        unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v18 = v17;
      }
      __v.__end_cap_.__value_ = p_end_cap;
      if (v18) {
        uint64_t v19 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)p_end_cap, v18);
      }
      else {
        uint64_t v19 = 0;
      }
      __v.__first_ = v19;
      __v.__begin_ = v19 + v15;
      __v.__end_ = __v.__begin_;
      __v.__end_cap_.__value_ = &v19[v18];
      std::__split_buffer<std::string>::__construct_at_end_with_size<std::__wrap_iter<std::string*>>((uint64_t)&__v, (long long *)a3, a5);
      uint64_t v5 = std::vector<std::string>::__swap_out_circular_buffer(a1, &__v, v5);
      std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
    }
  }
  return v5;
}

void sub_1B1BE8494(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__split_buffer<std::wstring> *a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t **std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int>(uint64_t **a1, unsigned int *a2, _DWORD *a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    unsigned int v7 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        unsigned int v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v10 + 7) = *a3;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t **std::__tree<BOOL>::__emplace_unique_key_args<BOOL,BOOL>(uint64_t **a1, unsigned __int8 *a2, unsigned char *a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    unsigned int v7 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        unsigned int v9 = *((unsigned __int8 *)v5 + 25);
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = (uint64_t *)operator new(0x20uLL);
    *((unsigned char *)v10 + 25) = *a3;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t OUTLINED_FUNCTION_7(uint64_t result, uint64_t a2, void *a3)
{
  *a3 = result;
  return result;
}

void TTokenizer::TTokenizer(TTokenizer *this, const TDataManager *a2, TDataManager *a3, TLexicon *a4, unsigned int a5)
{
  *((_DWORD *)this + 21) = a5;
  *((_DWORD *)this + 22) = a5;
  uint64_t v5 = 1;
  for (uint64_t i = 23; i != 646; ++i)
  {
    int v7 = 1812433253 * (a5 ^ (a5 >> 30));
    a5 = v7 + v5;
    *((_DWORD *)this + i) = i + v7 - 22;
    ++v5;
  }
  *((void *)this + 323) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 3) = a4;
  *((void *)this + 4) = 0;
  *(void *)this = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  operator new();
}

void sub_1B1BE96C0(_Unwind_Exception *a1, int a2)
{
  if (SLOBYTE(STACK[0x2D7]) < 0)
  {
    operator delete((void *)STACK[0x2C0]);
    if ((v6 & 1) == 0)
    {
LABEL_6:
      *(void *)(v3 + 128) = v5;
      if (a2 == 1)
      {
        __cxa_begin_catch(a1);
        TTokenizer::freeMemory(v2);
        __cxa_rethrow();
      }
      if (*(char *)(v7 - 81) < 0) {
        operator delete(*(void **)(v7 - 104));
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v6)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v4);
  goto LABEL_6;
}

void sub_1B1BE9930()
{
}

uint64_t TIntParam::setOriginal(TIntParam *this, uint64_t a2, int a3)
{
  if (*((_DWORD *)this + 38) > a3 || *((_DWORD *)this + 39) < a3) {
    return 1;
  }
  *((_DWORD *)this + a2 + 40) = a3;
  *((void *)this + 14) |= 1 << (a2 + 9);
  TParam::notifyChange((uint64_t)this, a2);
  return 0;
}

void TInputStream::~TInputStream(TInputStream *this)
{
  if (*((char *)this + 151) < 0) {
    operator delete(*((void **)this + 16));
  }
  if (*((char *)this + 127) < 0) {
    operator delete(*((void **)this + 13));
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  if (*((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
  if (*((char *)this + 39) < 0) {
    operator delete(*((void **)this + 2));
  }
}

double TTokenizer::freeMemory(TTokenizer *this)
{
  uint64_t v3 = (_OWORD *)((char *)this + 32);
  uint64_t v2 = (TDecompounder *)*((void *)this + 4);
  if (v2)
  {
    TDecompounder::~TDecompounder(v2);
    MEMORY[0x1B3EA8670]();
  }
  int v4 = (TClitics *)*((void *)this + 5);
  if (v4)
  {
    TClitics::~TClitics(v4);
    MEMORY[0x1B3EA8670]();
  }
  uint64_t v5 = (quasar::Bitmap *)*((void *)this + 6);
  if (v5)
  {
    quasar::Bitmap::~Bitmap(v5);
    MEMORY[0x1B3EA8670]();
  }
  int v6 = (TPatternManager *)*((void *)this + 7);
  if (v6)
  {
    TPatternManager::~TPatternManager(v6);
    MEMORY[0x1B3EA8670]();
  }
  uint64_t v7 = (TRespellManager *)*((void *)this + 8);
  if (v7)
  {
    TRespellManager::~TRespellManager(v7);
    MEMORY[0x1B3EA8670]();
  }
  uint64_t v8 = (TMungeMapManager *)*((void *)this + 9);
  if (v8)
  {
    TMungeMapManager::~TMungeMapManager(v8);
    MEMORY[0x1B3EA8670]();
  }
  if (*(void *)this)
  {
    TDataSaver::~TDataSaver(*(TDataSaver **)this);
    MEMORY[0x1B3EA8670]();
  }
  uint64_t v9 = *((void *)this + 1);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = *((void *)this + 2);
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  double result = 0.0;
  *uint64_t v3 = 0u;
  v3[1] = 0u;
  v3[2] = 0u;
  return result;
}

void TTokenizer::~TTokenizer(TTokenizer *this)
{
}

uint64_t TTokenizer::tokenize(uint64_t a1, char *a2, const char *a3, char *a4, uint64_t a5, void *a6)
{
  uint64_t v7 = a5;
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v99 = *(void *)(v10 + 128);
  uint64_t v100 = v10;
  *(void *)(v10 + 128) = a5;
  uint64_t v11 = *(void *)(a1 + 24) + 224;
  v123[0] = &unk_1F0A33BE8;
  v123[1] = v11;
  v123[2] = 0;
  TResGraphMaker::clear((uint64_t)v123);
  if (a6) {
    uint64_t v12 = a6;
  }
  else {
    uint64_t v12 = v123;
  }
  uint64_t v103 = v12;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(v13 + 136));
  if (*(unsigned char *)(v13 + TParam::getValidConfig((TParam *)(v13 + 136), ActiveConfigHandle) + 288))
  {
    unsigned int v15 = *(_DWORD *)(a1 + 84);
    *(_DWORD *)(a1 + 88) = v15;
    uint64_t v16 = 1;
    for (uint64_t i = 23; i != 646; ++i)
    {
      int v18 = 1812433253 * (v15 ^ (v15 >> 30));
      unsigned int v15 = v18 + v16;
      *(_DWORD *)(a1 + 4 * i) = i + v18 - 22;
      ++v16;
    }
    *(void *)(a1 + 2584) = 0;
  }
  *(void *)id v119 = v121;
  long long v120 = xmmword_1B25607E0;
  char v122 = 1;
  if (a3 && *a3)
  {
    uint64_t v19 = *(void *)(a1 + 24);
    uint64_t v20 = TStringParam::get((TStringParam *)(*(void *)(a1 + 8) + 3744));
    TSegmenter::TSegmenter(v110, a3, v19 + 224, v20);
    uint64_t v21 = *(void *)(a1 + 8);
    uint64_t v22 = TParam::getActiveConfigHandle((TParam *)(v21 + 13952));
    *(void *)&long long v111 = *(int *)(v21 + 4 * TParam::getValidConfig((TParam *)(v21 + 13952), v22) + 14112);
    (*(void (**)(int *))(*(void *)v110 + 16))(v110);
    size_t v23 = strlen(a3);
    uint64_t PreviousSegment = TSegmenter::getPreviousSegment((TSegmenter *)v110, (char *)&a3[v23]);
    if (*(_DWORD *)(PreviousSegment + 24) != 5) {
      TBuffer<wchar_t>::assign((uint64_t)v119, *(int **)PreviousSegment);
    }
    TSegmenter::~TSegmenter((TSegmenter *)v110);
  }
  unint64_t v105 = (std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *)(a1 + 88);
  char v25 = a2;
  uint64_t v102 = v7;
  do
  {
    uint64_t v26 = *(void *)(a1 + 24);
    uint64_t v27 = TStringParam::get((TStringParam *)(*(void *)(a1 + 8) + 3744));
    TSegmenter::TSegmenter(v118, v25, v26 + 224, v27);
    uint64_t v28 = *(void *)(a1 + 8);
    uint64_t v29 = TParam::getActiveConfigHandle((TParam *)(v28 + 13952));
    v118[1] = *(int *)(v28 + 4 * TParam::getValidConfig((TParam *)(v28 + 13952), v29) + 14112);
    (*(void (**)(void *))(v118[0] + 16))(v118);
    unint64_t v30 = v25;
    do
    {
      if (!*v30) {
        break;
      }
      unint64_t v30 = *(char **)(TSegmenter::getSegment((TSegmenter *)v118, v30) + 8);
    }
    while (v30 - v25 <= 2500);
    uint64_t v31 = *(void *)(a1 + 8);
    uint64_t v32 = TParam::getActiveConfigHandle((TParam *)(v31 + 632));
    uint64_t ValidConfig = TParam::getValidConfig((TParam *)(v31 + 632), v32);
    TGraph::TGraph((TGraph *)v114, v25, (TSegmenter *)v118, *(unsigned char *)(v31 + ValidConfig + 784));
    for (uint64_t j = TGraph::addVertex((TGraph *)v114, v25); ; uint64_t j = TGraph::getNextVertex((TGraph *)v114, *(void *)(j + 24) + 1))
    {
      uint64_t v35 = *(char **)(j + 16);
      if (!*v35) {
        break;
      }
      uint64_t Segment = TSegmenter::getSegment((TSegmenter *)v118, v35);
      uint64_t v37 = Segment;
      uint64_t v38 = *(void *)(j + 16);
      if (v38 - (uint64_t)v25 >= 2501)
      {
        BOOL v39 = v117 != v116 && j == v115;
        if (v39
          && (!*(_DWORD *)(Segment + 24) || (unint64_t)(v38 - (void)v25) > 0x1388 || v38 != *(void *)(j + 24)))
        {
          goto LABEL_71;
        }
      }
      if (*(_DWORD *)(Segment + 24) == 5)
      {
        *(void *)id v110 = v112;
        long long v111 = xmmword_1B25607E0;
        char v113 = 1;
        TBuffer<wchar_t>::assign((uint64_t)v110, (int *)"j");
        uint64_t v40 = 0;
        long long v41 = *(int **)v37;
        while (v41[v40++])
          ;
        TBuffer<wchar_t>::insert((uint64_t)v110, *((unint64_t *)&v111 + 1), v41, v40 - 1);
        uint64_t v43 = *(TAllocator **)(a1 + 24);
        if (*((void *)&v111 + 1) >= (unint64_t)v111)
        {
          if (v113)
          {
            LODWORD(v106) = 0;
            TBuffer<wchar_t>::insert((uint64_t)v110, *((unint64_t *)&v111 + 1), (int *)&v106, 1uLL);
            char v44 = *(int **)v110;
            --*((void *)&v111 + 1);
          }
          else
          {
            char v44 = *(int **)v110;
            if ((void)v111) {
              *(_DWORD *)(*(void *)v110 + 4 * v111 - 4) = 0;
            }
          }
        }
        else
        {
          char v44 = *(int **)v110;
          *(_DWORD *)(*(void *)v110 + 4 * *((void *)&v111 + 1)) = 0;
        }
        long long v60 = TLexicon::addTempWord(v43, 0, v44, 0, 0);
        long long v61 = (uint64_t *)TGraph::addVertex((TGraph *)v114, *(char **)(v37 + 8));
        LODWORD(v106) = 3;
        id v107 = v60;
        uint64_t v108 = 0;
        char v109 = 0;
        TGraph::addEdge(v114, j, v61, (uint64_t)&v106);
        if (v113 && *(unsigned char **)v110 != v112)
        {
          if (*(void *)v110) {
            MEMORY[0x1B3EA8630]();
          }
        }
      }
      else
      {
        int v45 = *(TPatternManager **)(a1 + 56);
        if (v45) {
          TPatternManager::addWords(v45, (TVertex *)j, (TGraph *)v114, (TSegmenter *)v118, v7);
        }
        TTokenizer::addWords((TTokenizer *)a1, (TVertex *)j, (TGraph *)v114, (TSegmenter *)v118);
        uint64_t v46 = *(TRespellManager **)(a1 + 64);
        if (v46) {
          TRespellManager::addWords(v46, (TVertex *)j, (TGraph *)v114, (TSegmenter *)v118);
        }
        if (*(void *)(a1 + 32))
        {
          uint64_t v47 = *(void *)(a1 + 8);
          uint64_t v48 = TParam::getActiveConfigHandle((TParam *)(v47 + 12112));
          if (*(unsigned char *)(v47 + TParam::getValidConfig((TParam *)(v47 + 12112), v48) + 12264)) {
            TDecompounder::addWords(*(TDecompounder **)(a1 + 32), (char **)j, (TGraph *)v114, (TSegmenter *)v118);
          }
        }
        if (*(void *)(a1 + 40))
        {
          uint64_t v49 = *(void *)(a1 + 8);
          uint64_t v50 = TParam::getActiveConfigHandle((TParam *)(v49 + 12360));
          if (*(unsigned char *)(v49 + TParam::getValidConfig((TParam *)(v49 + 12360), v50) + 12512)) {
            TClitics::addWords(*(TClitics **)(a1 + 40), (char **)j, (TGraph *)v114, (TSegmenter *)v118);
          }
        }
        uint64_t v51 = *(void *)(a1 + 48);
        if (v51) {
          TNewWords::addWords(v51, (TVertex *)j, (TGraph *)v114, (TSegmenter *)v118, *(TLexicon **)(a1 + 24));
        }
        int64_t v52 = (uint64_t *)TGraph::addVertex((TGraph *)v114, *(char **)(v37 + 8));
        uint64_t OutEdge = TVertex::getOutEdge(j);
        if (OutEdge)
        {
          uint64_t v54 = *(void *)(OutEdge + 64);
          BOOL v55 = v54 != 0;
          if (v54)
          {
            while (1)
            {
              uint64_t OutEdge = *(void *)(OutEdge + 8);
              if (!OutEdge) {
                break;
              }
              if (!*(unsigned char *)(OutEdge + 32))
              {
                char v56 = 0;
                uint64_t v57 = *(void *)(OutEdge + 64);
                BOOL v55 = v57 != 0;
                if (!v57) {
                  goto LABEL_56;
                }
              }
            }
            char v56 = v55;
          }
          else
          {
            char v56 = 0;
          }
        }
        else
        {
          char v56 = 1;
        }
LABEL_56:
        uint64_t v58 = TVertex::getInEdge((uint64_t)v52);
        if (v58)
        {
LABEL_57:
          if (*(void *)(v58 + 64))
          {
            while (1)
            {
              uint64_t v58 = *(void *)v58;
              if (!v58) {
                break;
              }
              if (!*(unsigned char *)(v58 + 32)) {
                goto LABEL_57;
              }
            }
          }
          else if ((v56 & 1) == 0)
          {
            continue;
          }
        }
        uint64_t v59 = TLexicon::addTempWord(*(TAllocator **)(a1 + 24), *(int **)v37, 0, 0, 0);
        v110[0] = 0;
        long long v111 = (unint64_t)v59;
        v112[0] = 0;
        TGraph::addEdge(v114, j, v52, (uint64_t)v110);
      }
    }
    uint64_t j = v115;
LABEL_71:
    *(void *)id v110 = v112;
    long long v111 = xmmword_1B25607E0;
    char v113 = 1;
    long long v62 = (int **)TSegmenter::getSegment((TSegmenter *)v118, *(char **)(j + 24));
    if (v62)
    {
      TBuffer<wchar_t>::assign((uint64_t)v110, *v62);
    }
    else if (a4 && *a4)
    {
      uint64_t v72 = *(void *)(a1 + 24);
      long long v73 = TStringParam::get((TStringParam *)(*(void *)(a1 + 8) + 3744));
      TSegmenter::TSegmenter(&v106, a4, v72 + 224, v73);
      uint64_t v74 = *(void *)(a1 + 8);
      uint64_t v75 = TParam::getActiveConfigHandle((TParam *)(v74 + 13952));
      id v107 = (void *)*(int *)(v74 + 4 * TParam::getValidConfig((TParam *)(v74 + 13952), v75) + 14112);
      (*(void (**)(uint64_t *))(v106 + 16))(&v106);
      long long v76 = (int **)TSegmenter::getSegment((TSegmenter *)&v106, a4);
      TBuffer<wchar_t>::assign((uint64_t)v110, *v76);
      TSegmenter::~TSegmenter((TSegmenter *)&v106);
    }
    TTokenizer::deleteBadPaths((TTokenizer *)a1, (TGraph *)v114);
    if (v117 != v116)
    {
      uint64_t v63 = 0;
      if ((unint64_t)((v117 - v116) >> 3) <= 1) {
        uint64_t v64 = 1;
      }
      else {
        uint64_t v64 = (v117 - v116) >> 3;
      }
      do
      {
        uint64_t v65 = *(void *)(v116 + 8 * v63);
        if (!*(unsigned char *)(v65 + 32))
        {
          uint64_t v66 = *(void *)(a1 + 64);
          if (v66)
          {
            if (*(_DWORD *)(v65 + 48) == 2)
            {
              uint64_t v67 = *(void *)(a1 + 8);
              uint64_t v68 = TParam::getActiveConfigHandle((TParam *)(v67 + 880));
              uint64_t v69 = TParam::getValidConfig((TParam *)(v67 + 880), v68);
              TRespellManager::expandWord(v66, (TGraph *)v114, v65, *(unsigned __int8 *)(v67 + v69 + 1032));
            }
          }
        }
        ++v63;
      }
      while (v64 != v63);
    }
    if (*(void *)(a1 + 72))
    {
      TGraph::minimize((TGraph *)v114);
      uint64_t v70 = *(void *)(a1 + 72);
      if (*((void *)&v120 + 1) >= (unint64_t)v120)
      {
        if (v122)
        {
          LODWORD(v106) = 0;
          TBuffer<wchar_t>::insert((uint64_t)v119, *((unint64_t *)&v120 + 1), (int *)&v106, 1uLL);
          long long v71 = *(int **)v119;
          --*((void *)&v120 + 1);
        }
        else
        {
          long long v71 = *(int **)v119;
          if ((void)v120) {
            *(_DWORD *)(*(void *)v119 + 4 * v120 - 4) = 0;
          }
        }
      }
      else
      {
        long long v71 = *(int **)v119;
        *(_DWORD *)(*(void *)v119 + 4 * *((void *)&v120 + 1)) = 0;
      }
      if (*((void *)&v111 + 1) >= (unint64_t)v111)
      {
        if (v113)
        {
          LODWORD(v106) = 0;
          TBuffer<wchar_t>::insert((uint64_t)v110, *((unint64_t *)&v111 + 1), (int *)&v106, 1uLL);
          char v77 = *(int **)v110;
          --*((void *)&v111 + 1);
        }
        else
        {
          char v77 = *(int **)v110;
          if ((void)v111) {
            *(_DWORD *)(*(void *)v110 + 4 * v111 - 4) = 0;
          }
        }
      }
      else
      {
        char v77 = *(int **)v110;
        *(_DWORD *)(*(void *)v110 + 4 * *((void *)&v111 + 1)) = 0;
      }
      TMungeMapManager::munge(v70, (TGraph *)v114, v71, v77, (TSegmenter *)v118, 0, v105);
    }
    unint64_t v78 = (v117 - v116) >> 3;
    if (v117 != v116)
    {
      uint64_t v79 = 0;
      if (v78 <= 1) {
        uint64_t v80 = 1;
      }
      else {
        uint64_t v80 = (v117 - v116) >> 3;
      }
      do
      {
        uint64_t v81 = *(void *)(v116 + 8 * v79);
        if (!*(unsigned char *)(v81 + 32))
        {
          uint64_t v82 = *(void *)(a1 + 56);
          if (v82)
          {
            if (*(_DWORD *)(v81 + 48) == 5)
            {
              uint64_t v83 = *(void *)(a1 + 8);
              uint64_t v84 = TParam::getActiveConfigHandle((TParam *)(v83 + 880));
              uint64_t v85 = TParam::getValidConfig((TParam *)(v83 + 880), v84);
              TPatternManager::expandWord(v82, (TGraph *)v114, v81, *(unsigned __int8 *)(v83 + v85 + 1032));
            }
          }
        }
        ++v79;
      }
      while (v80 != v79);
    }
    if (*(void *)(a1 + 72))
    {
      TGraph::minimize((TGraph *)v114);
      uint64_t v86 = *(void *)(a1 + 72);
      if (*((void *)&v120 + 1) >= (unint64_t)v120)
      {
        if (v122)
        {
          LODWORD(v106) = 0;
          TBuffer<wchar_t>::insert((uint64_t)v119, *((unint64_t *)&v120 + 1), (int *)&v106, 1uLL);
          uint64_t v87 = *(int **)v119;
          --*((void *)&v120 + 1);
        }
        else
        {
          uint64_t v87 = *(int **)v119;
          if ((void)v120) {
            *(_DWORD *)(*(void *)v119 + 4 * v120 - 4) = 0;
          }
        }
      }
      else
      {
        uint64_t v87 = *(int **)v119;
        *(_DWORD *)(*(void *)v119 + 4 * *((void *)&v120 + 1)) = 0;
      }
      if (*((void *)&v111 + 1) >= (unint64_t)v111)
      {
        if (v113)
        {
          LODWORD(v106) = 0;
          TBuffer<wchar_t>::insert((uint64_t)v110, *((unint64_t *)&v111 + 1), (int *)&v106, 1uLL);
          std::string v88 = *(int **)v110;
          --*((void *)&v111 + 1);
        }
        else
        {
          std::string v88 = *(int **)v110;
          if ((void)v111) {
            *(_DWORD *)(*(void *)v110 + 4 * v111 - 4) = 0;
          }
        }
      }
      else
      {
        std::string v88 = *(int **)v110;
        *(_DWORD *)(*(void *)v110 + 4 * *((void *)&v111 + 1)) = 0;
      }
      TMungeMapManager::munge(v86, (TGraph *)v114, v87, v88, (TSegmenter *)v118, v78, v105);
    }
    TGraph::minimize((TGraph *)v114);
    uint64_t v89 = *(void *)(a1 + 8);
    uint64_t v90 = TParam::getActiveConfigHandle((TParam *)(v89 + 15256));
    if (*(unsigned char *)(v89 + TParam::getValidConfig((TParam *)(v89 + 15256), v90) + 15408)) {
      TTokenizer::addClones((TTokenizer *)a1, (TGraph *)v114);
    }
    uint64_t v91 = *(void *)(a1 + 8);
    uint64_t v92 = TParam::getActiveConfigHandle((TParam *)(v91 + 17864));
    if (*(unsigned char *)(v91 + TParam::getValidConfig((TParam *)(v91 + 17864), v92) + 18016)) {
      TTokenizer::chooseBestPath((TTokenizer *)a1, (TGraph *)v114);
    }
    (*(void (**)(void *, void *, int64_t))(*v103 + 16))(v103, v114, v25 - a2);
    int v93 = *(unsigned char **)(v115 + 16);
    int v94 = *v93;
    if (*v93)
    {
      TBuffer<wchar_t>::resize((uint64_t)v119, 0);
      uint64_t v95 = TSegmenter::getPreviousSegment((TSegmenter *)v118, *(char **)(v115 + 16));
      if (*(_DWORD *)(v95 + 24) != 5) {
        TBuffer<wchar_t>::assign((uint64_t)v119, *(int **)v95);
      }
      char v25 = *(char **)(v115 + 24);
    }
    TLexicon::cleanCache(*(TLexicon **)(a1 + 24));
    uint64_t v96 = *(void *)(a1 + 48);
    if (v96) {
      *(void *)(v96 + 40) = 0;
    }
    char v97 = *(TPatternManager **)(a1 + 56);
    if (v97) {
      TPatternManager::clear(v97);
    }
    if (v113 && *(unsigned char **)v110 != v112 && *(void *)v110) {
      MEMORY[0x1B3EA8630]();
    }
    TGraph::~TGraph((TGraph *)v114);
    TSegmenter::~TSegmenter((TSegmenter *)v118);
    uint64_t v7 = v102;
  }
  while (v94);
  if (v122 && *(unsigned char **)v119 != v121 && *(void *)v119) {
    MEMORY[0x1B3EA8630]();
  }
  TResGraphMaker::~TResGraphMaker((TResGraphMaker *)v123);
  *(void *)(v100 + 128) = v99;
  return -1;
}

void sub_1B1BEA7A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  TSegmenter::~TSegmenter((TSegmenter *)&a34);
  if (LOBYTE(STACK[0xA08]))
  {
    if (STACK[0x5F0] != a9 && STACK[0x5F0] != 0) {
      MEMORY[0x1B3EA8630]();
    }
  }
  TResGraphMaker::~TResGraphMaker((TResGraphMaker *)(v34 - 112));
  *(void *)(a11 + 128) = a10;
  _Unwind_Resume(a1);
}

void TTokenizer::addWords(TTokenizer *this, TVertex *a2, TGraph *a3, TSegmenter *a4)
{
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  uint64_t v7 = (__int32 *)TStringParam::get((TStringParam *)(*((void *)this + 1) + 10736));
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, v7);
  uint64_t v8 = (void *)*((void *)this + 3);
  uint64_t v9 = (char *)*((void *)a2 + 2);
  if (v36 >= 0) {
    uint64_t v10 = __p;
  }
  else {
    uint64_t v10 = (void **)__p[0];
  }
  uint64_t v11 = *((void *)this + 1);
  uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(v11 + 16456));
  size_t v13 = *(int *)(v11 + 4 * TParam::getValidConfig((TParam *)(v11 + 16456), ActiveConfigHandle) + 16616);
  uint64_t v14 = *((void *)this + 1);
  uint64_t v15 = TParam::getActiveConfigHandle((TParam *)(v14 + 16104));
  uint64_t ValidConfig = TParam::getValidConfig((TParam *)(v14 + 16104), v15);
  TLexicon::findHeadClonesCollatedPrefix(v8, v9, a4, v10, v13, *(int *)(v14 + 4 * ValidConfig + 16264), &v37);
  uint64_t v17 = (char *)v37;
  if (v38 != v37)
  {
    uint64_t v18 = 0;
    unint64_t v19 = 0;
    uint64_t v20 = &OBJC_IVAR____EARSpeechRecognizer__shouldGenerateVoiceCommandCandidates;
    do
    {
      uint64_t v21 = **(_DWORD ***)&v17[v18];
      if (*v21 != 45) {
        goto LABEL_12;
      }
      signed int v22 = v21[1];
      {
        operator new();
      }
      if (!TLocaleInfo::isAlpha(*((void *)v20 + 241), v22)) {
        goto LABEL_12;
      }
      uint64_t PreviousSegment = TSegmenter::getPreviousSegment(a4, *((char **)a2 + 2));
      uint64_t v25 = PreviousSegment;
      if (PreviousSegment)
      {
        if (!*(_DWORD *)(PreviousSegment + 24))
        {
          uint64_t v28 = v24;
          int v29 = **(_DWORD **)PreviousSegment;
          {
            operator new();
          }
          if (v29 == 13 || v29 == 10)
          {
            uint64_t v20 = &OBJC_IVAR____EARSpeechRecognizer__shouldGenerateVoiceCommandCandidates;
            uint64_t v25 = TSegmenter::getPreviousSegment(a4, v28);
            if (!v25) {
              goto LABEL_13;
            }
          }
          else
          {
            uint64_t v20 = &OBJC_IVAR____EARSpeechRecognizer__shouldGenerateVoiceCommandCandidates;
          }
        }
        if ((*(_DWORD *)(v25 + 24) - 1) <= 1)
        {
LABEL_12:
          uint64_t v26 = (uint64_t *)TGraph::addVertex(a3, (char *)(*((void *)a2 + 2) + *(void *)((char *)v37 + v18 + 8)));
          uint64_t v27 = *(void *)((char *)v37 + v18);
          int v32 = 1;
          uint64_t v33 = v27;
          long long v34 = *(_OWORD *)((char *)v37 + v18 + 16);
          TGraph::addEdge(a3, (uint64_t)a2, v26, (uint64_t)&v32);
        }
      }
LABEL_13:
      ++v19;
      uint64_t v17 = (char *)v37;
      v18 += 32;
    }
    while (v19 < (v38 - (unsigned char *)v37) >> 5);
  }
  std::vector<TLexiconMatch>::resize((uint64_t)&v37, 0);
  if (v36 < 0) {
    operator delete(__p[0]);
  }
  if (v37)
  {
    uint64_t v38 = v37;
    operator delete(v37);
  }
}

void sub_1B1BEABB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a21) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

void TTokenizer::deleteBadPaths(TTokenizer *this, TGraph *a2)
{
  long long v132 = 0;
  unint64_t v133 = 0;
  uint64_t v134 = 0;
  TGraph::topologicalSort(a2, (void **)&v132, 0);
  std::vector<TEdgeStat>::vector(v131, (uint64_t)(*((void *)a2 + 11) - *((void *)a2 + 10)) >> 3);
  *((unsigned char *)v131[0] + 72 * *(void *)(*((void *)a2 + 8) + 40) + 64) = 1;
  std::string __p = 0;
  uint64_t v129 = 0;
  unint64_t v130 = 0;
  uint64_t v4 = *((void *)this + 1);
  uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(v4 + 15752));
  if (*(_DWORD *)(v4 + 4 * TParam::getValidConfig((TParam *)(v4 + 15752), ActiveConfigHandle) + 15912) != -1)
  {
    uint64_t v6 = *((void *)this + 1) + 15752;
    uint64_t v7 = ((char *)v129 - (unsigned char *)__p) >> 3;
    if ((unint64_t)(v7 + 1) >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v8 = (uint64_t)(v130 - (void)__p) >> 2;
    if (v8 <= v7 + 1) {
      unint64_t v8 = v7 + 1;
    }
    if (v130 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v8;
    }
    if (v9) {
      uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v130, v9);
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v11 = (uint64_t *)&v10[8 * v7];
    uint64_t v12 = &v10[8 * v9];
    *uint64_t v11 = v6;
    size_t v13 = v11 + 1;
    uint64_t v15 = (char *)__p;
    uint64_t v14 = (char *)v129;
    if (v129 != __p)
    {
      do
      {
        uint64_t v16 = *((void *)v14 - 1);
        v14 -= 8;
        *--uint64_t v11 = v16;
      }
      while (v14 != v15);
      uint64_t v14 = (char *)__p;
    }
    std::string __p = v11;
    uint64_t v129 = v13;
    unint64_t v130 = (unint64_t)v12;
    if (v14) {
      operator delete(v14);
    }
    uint64_t v129 = v13;
  }
  uint64_t v17 = *((void *)this + 1);
  uint64_t v18 = TParam::getActiveConfigHandle((TParam *)(v17 + 16808));
  if (*(_DWORD *)(v17 + 4 * TParam::getValidConfig((TParam *)(v17 + 16808), v18) + 16968) != -1)
  {
    uint64_t v19 = *((void *)this + 1) + 16808;
    uint64_t v20 = v129;
    if ((unint64_t)v129 >= v130)
    {
      uint64_t v22 = ((char *)v129 - (unsigned char *)__p) >> 3;
      if ((unint64_t)(v22 + 1) >> 61) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v23 = (uint64_t)(v130 - (void)__p) >> 2;
      if (v23 <= v22 + 1) {
        unint64_t v23 = v22 + 1;
      }
      if (v130 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v24 = v23;
      }
      if (v24) {
        uint64_t v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v130, v24);
      }
      else {
        uint64_t v25 = 0;
      }
      uint64_t v26 = (uint64_t *)&v25[8 * v22];
      uint64_t v27 = &v25[8 * v24];
      *uint64_t v26 = v19;
      uint64_t v21 = v26 + 1;
      int v29 = (char *)__p;
      uint64_t v28 = (char *)v129;
      if (v129 != __p)
      {
        do
        {
          uint64_t v30 = *((void *)v28 - 1);
          v28 -= 8;
          *--uint64_t v26 = v30;
        }
        while (v28 != v29);
        uint64_t v28 = (char *)__p;
      }
      std::string __p = v26;
      uint64_t v129 = v21;
      unint64_t v130 = (unint64_t)v27;
      if (v28) {
        operator delete(v28);
      }
    }
    else
    {
      *uint64_t v129 = v19;
      uint64_t v21 = v20 + 1;
    }
    uint64_t v129 = v21;
  }
  uint64_t v31 = *((void *)this + 1);
  uint64_t v32 = TParam::getActiveConfigHandle((TParam *)(v31 + 17160));
  if (*(_DWORD *)(v31 + 4 * TParam::getValidConfig((TParam *)(v31 + 17160), v32) + 17320) != -1)
  {
    uint64_t v33 = *((void *)this + 1) + 17160;
    long long v34 = v129;
    if ((unint64_t)v129 >= v130)
    {
      uint64_t v36 = ((char *)v129 - (unsigned char *)__p) >> 3;
      if ((unint64_t)(v36 + 1) >> 61) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v37 = (uint64_t)(v130 - (void)__p) >> 2;
      if (v37 <= v36 + 1) {
        unint64_t v37 = v36 + 1;
      }
      if (v130 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v38 = v37;
      }
      if (v38) {
        uint64_t v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v130, v38);
      }
      else {
        uint64_t v39 = 0;
      }
      uint64_t v40 = (uint64_t *)&v39[8 * v36];
      long long v41 = &v39[8 * v38];
      uint64_t *v40 = v33;
      uint64_t v35 = v40 + 1;
      uint64_t v43 = (char *)__p;
      uint64_t v42 = (char *)v129;
      if (v129 != __p)
      {
        do
        {
          uint64_t v44 = *((void *)v42 - 1);
          v42 -= 8;
          *--uint64_t v40 = v44;
        }
        while (v42 != v43);
        uint64_t v42 = (char *)__p;
      }
      std::string __p = v40;
      uint64_t v129 = v35;
      unint64_t v130 = (unint64_t)v41;
      if (v42) {
        operator delete(v42);
      }
    }
    else
    {
      *uint64_t v129 = v33;
      uint64_t v35 = v34 + 1;
    }
    uint64_t v129 = v35;
  }
  uint64_t v45 = *((void *)this + 1);
  uint64_t v46 = TParam::getActiveConfigHandle((TParam *)(v45 + 17512));
  if (*(_DWORD *)(v45 + 4 * TParam::getValidConfig((TParam *)(v45 + 17512), v46) + 17672) != -1)
  {
    uint64_t v47 = *((void *)this + 1) + 17512;
    uint64_t v48 = v129;
    if ((unint64_t)v129 >= v130)
    {
      uint64_t v50 = ((char *)v129 - (unsigned char *)__p) >> 3;
      if ((unint64_t)(v50 + 1) >> 61) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v51 = (uint64_t)(v130 - (void)__p) >> 2;
      if (v51 <= v50 + 1) {
        unint64_t v51 = v50 + 1;
      }
      if (v130 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v52 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v52 = v51;
      }
      if (v52) {
        char v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v130, v52);
      }
      else {
        char v53 = 0;
      }
      uint64_t v54 = (uint64_t *)&v53[8 * v50];
      BOOL v55 = &v53[8 * v52];
      *uint64_t v54 = v47;
      uint64_t v49 = v54 + 1;
      uint64_t v57 = (char *)__p;
      char v56 = (char *)v129;
      if (v129 != __p)
      {
        do
        {
          uint64_t v58 = *((void *)v56 - 1);
          v56 -= 8;
          *--uint64_t v54 = v58;
        }
        while (v56 != v57);
        char v56 = (char *)__p;
      }
      std::string __p = v54;
      uint64_t v129 = v49;
      unint64_t v130 = (unint64_t)v55;
      if (v56) {
        operator delete(v56);
      }
    }
    else
    {
      *uint64_t v129 = v47;
      uint64_t v49 = v48 + 1;
    }
    uint64_t v129 = v49;
  }
  uint64_t v59 = *((void *)this + 1);
  uint64_t v60 = TParam::getActiveConfigHandle((TParam *)(v59 + 18112));
  if (*(_DWORD *)(v59 + 4 * TParam::getValidConfig((TParam *)(v59 + 18112), v60) + 18272) != -1)
  {
    uint64_t v61 = *((void *)this + 1) + 18112;
    long long v62 = v129;
    if ((unint64_t)v129 >= v130)
    {
      uint64_t v64 = ((char *)v129 - (unsigned char *)__p) >> 3;
      if ((unint64_t)(v64 + 1) >> 61) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v65 = (uint64_t)(v130 - (void)__p) >> 2;
      if (v65 <= v64 + 1) {
        unint64_t v65 = v64 + 1;
      }
      if (v130 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v66 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v66 = v65;
      }
      if (v66) {
        uint64_t v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v130, v66);
      }
      else {
        uint64_t v67 = 0;
      }
      uint64_t v68 = (uint64_t *)&v67[8 * v64];
      uint64_t v69 = &v67[8 * v66];
      uint64_t *v68 = v61;
      uint64_t v63 = v68 + 1;
      long long v71 = (char *)__p;
      uint64_t v70 = (char *)v129;
      if (v129 != __p)
      {
        do
        {
          uint64_t v72 = *((void *)v70 - 1);
          v70 -= 8;
          *--uint64_t v68 = v72;
        }
        while (v70 != v71);
        uint64_t v70 = (char *)__p;
      }
      std::string __p = v68;
      uint64_t v129 = v63;
      unint64_t v130 = (unint64_t)v69;
      if (v70) {
        operator delete(v70);
      }
    }
    else
    {
      *uint64_t v129 = v61;
      uint64_t v63 = v62 + 1;
    }
    uint64_t v129 = v63;
  }
  uint64_t v73 = *((void *)this + 1);
  uint64_t v74 = TParam::getActiveConfigHandle((TParam *)(v73 + 18464));
  if (*(_DWORD *)(v73 + 4 * TParam::getValidConfig((TParam *)(v73 + 18464), v74) + 18624) != -1)
  {
    uint64_t v75 = *((void *)this + 1) + 18464;
    long long v76 = v129;
    if ((unint64_t)v129 >= v130)
    {
      uint64_t v78 = ((char *)v129 - (unsigned char *)__p) >> 3;
      if ((unint64_t)(v78 + 1) >> 61) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v79 = (uint64_t)(v130 - (void)__p) >> 2;
      if (v79 <= v78 + 1) {
        unint64_t v79 = v78 + 1;
      }
      if (v130 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v80 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v80 = v79;
      }
      if (v80) {
        uint64_t v81 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v130, v80);
      }
      else {
        uint64_t v81 = 0;
      }
      uint64_t v82 = (uint64_t *)&v81[8 * v78];
      uint64_t v83 = &v81[8 * v80];
      *uint64_t v82 = v75;
      char v77 = v82 + 1;
      uint64_t v85 = (char *)__p;
      uint64_t v84 = (char *)v129;
      if (v129 != __p)
      {
        do
        {
          uint64_t v86 = *((void *)v84 - 1);
          v84 -= 8;
          *--uint64_t v82 = v86;
        }
        while (v84 != v85);
        uint64_t v84 = (char *)__p;
      }
      std::string __p = v82;
      uint64_t v129 = v77;
      unint64_t v130 = (unint64_t)v83;
      if (v84) {
        operator delete(v84);
      }
    }
    else
    {
      *uint64_t v129 = v75;
      char v77 = v76 + 1;
    }
    uint64_t v129 = v77;
  }
  uint64_t v87 = *((void *)this + 1);
  uint64_t v88 = TParam::getActiveConfigHandle((TParam *)(v87 + 18816));
  if (*(_DWORD *)(v87 + 4 * TParam::getValidConfig((TParam *)(v87 + 18816), v88) + 18976) == -1)
  {
    uint64_t v91 = v129;
  }
  else
  {
    uint64_t v89 = *((void *)this + 1) + 18816;
    uint64_t v90 = v129;
    if ((unint64_t)v129 >= v130)
    {
      uint64_t v92 = ((char *)v129 - (unsigned char *)__p) >> 3;
      if ((unint64_t)(v92 + 1) >> 61) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v93 = (uint64_t)(v130 - (void)__p) >> 2;
      if (v93 <= v92 + 1) {
        unint64_t v93 = v92 + 1;
      }
      if (v130 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v94 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v94 = v93;
      }
      if (v94) {
        uint64_t v95 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v130, v94);
      }
      else {
        uint64_t v95 = 0;
      }
      uint64_t v96 = (uint64_t *)&v95[8 * v92];
      char v97 = &v95[8 * v94];
      *uint64_t v96 = v89;
      uint64_t v91 = v96 + 1;
      uint64_t v99 = (char *)__p;
      char v98 = (char *)v129;
      if (v129 != __p)
      {
        do
        {
          uint64_t v100 = *((void *)v98 - 1);
          v98 -= 8;
          *--uint64_t v96 = v100;
        }
        while (v98 != v99);
        char v98 = (char *)__p;
      }
      std::string __p = v96;
      uint64_t v129 = v91;
      unint64_t v130 = (unint64_t)v97;
      if (v98) {
        operator delete(v98);
      }
    }
    else
    {
      *uint64_t v129 = v89;
      uint64_t v91 = v90 + 1;
    }
    uint64_t v129 = v91;
  }
  unint64_t v101 = 126 - 2 * __clz(((char *)v91 - (unsigned char *)__p) >> 3);
  *(void *)&long long v123 = sortPruningParams;
  if (v91 == __p) {
    uint64_t v102 = 0;
  }
  else {
    uint64_t v102 = v101;
  }
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**,false>((uint64_t)__p, (char *)v91, (uint64_t (**)(uint64_t, uint64_t))&v123, v102, 1);
  uint64_t v103 = v132;
  if (v133 != (unsigned char *)v132)
  {
    unint64_t v104 = 0;
    do
    {
      uint64_t OutEdge = TVertex::getOutEdge(v103[v104]);
      if (OutEdge)
      {
LABEL_132:
        char v127 = 0;
        long long v125 = 0u;
        long long v126 = 0u;
        long long v123 = 0u;
        long long v124 = 0u;
        computeEdgeStat(OutEdge, *((void *)this + 1), (uint64_t *)&__p, (uint64_t)&v123);
        uint64_t v106 = 0;
        uint64_t v107 = *(void *)(*(void *)(OutEdge + 24) + 40);
        uint64_t v108 = (char *)v131[0];
        char v109 = (char *)v131[0] + 72 * *(void *)(*(void *)(OutEdge + 16) + 40);
        do
        {
          *(long long *)((char *)&v123 + v106) = (__int128)vaddq_s64(*(int64x2_t *)((char *)&v123 + v106), *(int64x2_t *)&v109[v106]);
          v106 += 16;
        }
        while (v106 != 64);
        id v110 = &v108[72 * v107];
        if (v110[64])
        {
          uint64_t v111 = 0;
          while (1)
          {
            unint64_t v112 = *(void *)((char *)&v123 + v111);
            unint64_t v113 = *(void *)&v110[v111];
            BOOL v114 = v112 >= v113;
            if (v112 != v113) {
              break;
            }
            v111 += 8;
            if (v111 == 56)
            {
              BOOL v114 = *((void *)&v126 + 1) >= *((void *)v110 + 7);
              break;
            }
          }
          if (v114) {
            goto LABEL_141;
          }
        }
        *((_OWORD *)v110 + 1) = v124;
        *((_OWORD *)v110 + 2) = v125;
        *((_OWORD *)v110 + 3) = v126;
        v110[64] = v127;
        *(_OWORD *)id v110 = v123;
LABEL_141:
        while (1)
        {
          uint64_t OutEdge = *(void *)(OutEdge + 8);
          if (!OutEdge) {
            break;
          }
          if (!*(unsigned char *)(OutEdge + 32)) {
            goto LABEL_132;
          }
        }
      }
      ++v104;
      uint64_t v103 = v132;
    }
    while (v104 < (v133 - (unsigned char *)v132) >> 3);
    if (v133 != (unsigned char *)v132)
    {
      unint64_t v115 = 0;
      unint64_t v116 = (v133 - (unsigned char *)v132) >> 3;
      do
      {
        uint64_t v117 = (TVertex *)v103[v116 + ~v115];
        uint64_t v118 = TVertex::getOutEdge((uint64_t)v117);
        if (v118)
        {
LABEL_148:
          char v127 = 0;
          long long v125 = 0u;
          long long v126 = 0u;
          long long v123 = 0u;
          long long v124 = 0u;
          computeEdgeStat(v118, *((void *)this + 1), (uint64_t *)&__p, (uint64_t)&v123);
          uint64_t v119 = 0;
          uint64_t v120 = *(void *)(*(void *)(v118 + 24) + 40);
          uint64_t v121 = (char *)v131[0];
          char v122 = (char *)v131[0] + 72 * *(void *)(*(void *)(v118 + 16) + 40);
          do
          {
            *(long long *)((char *)&v123 + v119) = (__int128)vaddq_s64(*(int64x2_t *)((char *)&v123 + v119), *(int64x2_t *)&v122[v119]);
            v119 += 16;
          }
          while (v119 != 64);
          if (memcmp(&v123, &v121[72 * v120], 0x40uLL)) {
            TGraph::deleteEdge((uint64_t)a2, v118);
          }
          while (1)
          {
            uint64_t v118 = *(void *)(v118 + 8);
            if (!v118) {
              break;
            }
            if (!*(unsigned char *)(v118 + 32)) {
              goto LABEL_148;
            }
          }
        }
        if (v117 != *((TVertex **)a2 + 9) && !TVertex::getOutEdge((uint64_t)v117)) {
          TGraph::deleteVertex(a2, v117);
        }
        ++v115;
        uint64_t v103 = v132;
        unint64_t v116 = (v133 - (unsigned char *)v132) >> 3;
      }
      while (v115 < v116);
    }
  }
  if (__p)
  {
    uint64_t v129 = (uint64_t *)__p;
    operator delete(__p);
  }
  if (v131[0])
  {
    v131[1] = v131[0];
    operator delete(v131[0]);
  }
  if (v132)
  {
    unint64_t v133 = v132;
    operator delete(v132);
  }
}

void sub_1B1BEB5F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  if (a21) {
    operator delete(a21);
  }
  unint64_t v24 = *(void **)(v22 - 88);
  if (v24)
  {
    *(void *)(v22 - 80) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void TTokenizer::addClones(TTokenizer *this, TGraph *a2)
{
  uint64_t v4 = *((void *)a2 + 13);
  uint64_t v3 = *((void *)a2 + 14);
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v5 = (__int32 *)TStringParam::get((TStringParam *)(*((void *)this + 1) + 10736));
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, v5);
  if (v3 == v4)
  {
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    if ((unint64_t)((v3 - v4) >> 3) <= 1) {
      uint64_t v8 = 1;
    }
    else {
      uint64_t v8 = (v3 - v4) >> 3;
    }
    do
    {
      uint64_t v9 = *(void *)(*((void *)a2 + 13) + 8 * v7);
      if (!*(unsigned char *)(v9 + 32))
      {
        long long v10 = *(_OWORD *)(v9 + 64);
        v14[0] = *(_OWORD *)(v9 + 48);
        v14[1] = v10;
        if (LODWORD(v14[0]) == 1)
        {
          TWord::getClones(*((uint64_t *)&v14[0] + 1), (uint64_t)&v17);
          uint64_t v6 = v18;
          if (v18 != v17)
          {
            unint64_t v11 = 0;
            uint64_t v6 = v17;
            do
            {
              uint64_t v12 = (uint64_t *)v6[v11];
              *((void *)&v14[0] + 1) = v12;
              if (v16 >= 0) {
                size_t v13 = __p;
              }
              else {
                size_t v13 = (void **)__p[0];
              }
              if (!TWord::applyMask(v12, v13)) {
                TGraph::addEdge(a2, *(void *)(v9 + 16), *(uint64_t **)(v9 + 24), (uint64_t)v14);
              }
              ++v11;
              uint64_t v6 = v17;
            }
            while (v11 < ((char *)v18 - (unsigned char *)v17) >> 3);
          }
        }
      }
      ++v7;
    }
    while (v7 != v8);
  }
  if (v16 < 0)
  {
    operator delete(__p[0]);
    uint64_t v6 = v17;
  }
  if (v6)
  {
    uint64_t v18 = v6;
    operator delete(v6);
  }
}

void sub_1B1BEB7B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void TTokenizer::chooseBestPath(TTokenizer *this, TGraph *a2)
{
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  TGraph::topologicalSort(a2, (void **)&v14, 0);
  uint64_t v4 = v15;
  if (v15 != v14)
  {
    unint64_t v5 = 0;
    uint64_t v4 = v14;
    do
    {
      uint64_t v6 = (TVertex *)v4[v5];
      if (!*((unsigned char *)v6 + 32))
      {
        if (v6 == *((TVertex **)a2 + 8) || TVertex::getInEdge(v4[v5]))
        {
          unint64_t OutEdgeCount = TVertex::getOutEdgeCount(v6);
          int v8 = OutEdgeCount;
          if (OutEdgeCount >= 2
            && (uint64_t v9 = *((void *)this + 1),
                uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(v9 + 384)),
                *(unsigned char *)(v9 + TParam::getValidConfig((TParam *)(v9 + 384), ActiveConfigHandle) + 536)))
          {
            uint64_t v11 = (int)(floor((double)std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()((std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *)((char *)this + 88))* 2.32830644e-10* (double)v8)+ 0.0);
          }
          else
          {
            uint64_t v11 = 0;
          }
          uint64_t OutEdge = TVertex::getOutEdge((uint64_t)v6);
          if (OutEdge)
          {
            uint64_t v13 = 0;
LABEL_14:
            if (v11 != v13) {
              TGraph::deleteEdge((uint64_t)a2, OutEdge);
            }
            while (1)
            {
              uint64_t OutEdge = *(void *)(OutEdge + 8);
              if (!OutEdge) {
                break;
              }
              if (!*(unsigned char *)(OutEdge + 32))
              {
                ++v13;
                goto LABEL_14;
              }
            }
          }
        }
        else
        {
          TGraph::deleteVertex(a2, v6);
        }
      }
      ++v5;
      uint64_t v4 = v14;
    }
    while (v5 < v15 - v14);
  }
  if (v4)
  {
    uint64_t v15 = v4;
    operator delete(v4);
  }
}

void sub_1B1BEB97C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sortPruningParams(const TIntParam *a1, const TIntParam *a2)
{
  uint64_t v3 = a1;
  uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle(a1);
  LODWORD(v3) = *((_DWORD *)v3 + TParam::getValidConfig(v3, ActiveConfigHandle) + 40);
  uint64_t v5 = TParam::getActiveConfigHandle(a2);
  return (int)v3 < *((_DWORD *)a2 + TParam::getValidConfig(a2, v5) + 40);
}

uint64_t computeEdgeStat(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  *(unsigned char *)(a4 + 64) = 1;
  if (*(_DWORD *)(result + 48) != 6)
  {
    uint64_t v5 = *a3;
    if (a3[1] != *a3)
    {
      uint64_t v7 = result;
      unint64_t v8 = 0;
      uint64_t v9 = *(unsigned __int8 *)(result + 72);
      uint64_t v10 = a2 + 15752;
      uint64_t v11 = *(void *)(result + 64);
      uint64_t v12 = a2 + 16808;
      uint64_t v13 = a2 + 17160;
      uint64_t v14 = a2 + 17512;
      uint64_t v15 = a2 + 18112;
      uint64_t v16 = a2 + 18464;
      uint64_t v17 = a2 + 18816;
      uint64_t v18 = (__int32 *)&v49;
      uint64_t v19 = v11 & 0x30;
      uint64_t v20 = v11 & 0x35;
      uint64_t v21 = v11 & 0xC0;
      uint64_t v22 = v11 & 0xD;
      if ((v11 & 5) != 0) {
        uint64_t v23 = 3;
      }
      else {
        uint64_t v23 = 2;
      }
      __n128 v24 = (__n128)xmmword_1B25607E0;
      while (1)
      {
        uint64_t v25 = *(void *)(v5 + 8 * v8);
        if (v25 == v10) {
          break;
        }
        if (v25 == v12)
        {
          if (!*(_DWORD *)(v7 + 48)) {
            goto LABEL_25;
          }
        }
        else
        {
          if (v25 == v13)
          {
            if (!v20) {
              goto LABEL_27;
            }
LABEL_25:
            uint64_t v27 = 1;
            goto LABEL_26;
          }
          if (v25 == v14) {
            goto LABEL_25;
          }
          if (v25 == v15)
          {
            if (*(_DWORD *)(v7 + 48) != 5) {
              goto LABEL_27;
            }
            goto LABEL_25;
          }
          if (v25 == v16)
          {
            if (*(_DWORD *)(v7 + 48) == 4) {
              goto LABEL_25;
            }
          }
          else if (v25 == v17)
          {
            uint64_t v26 = v23;
            if (v22) {
              goto LABEL_15;
            }
            if ((v11 & 2) != 0)
            {
              uint64_t v28 = *(void *)(v7 + 16);
              uint64_t v44 = v11;
              uint64_t v45 = v9;
              uint64_t v46 = v18;
              uint64_t v42 = v16;
              uint64_t v43 = v15;
              uint64_t v40 = v19;
              uint64_t v41 = v17;
              uint64_t v39 = v20;
              uint64_t v38 = v23;
              __n128 v37 = v24;
              double result = TVertex::getInEdge(v28);
              __n128 v24 = v37;
              uint64_t v23 = v38;
              uint64_t v22 = 0;
              uint64_t v20 = v39;
              uint64_t v19 = v40;
              uint64_t v17 = v41;
              uint64_t v16 = v42;
              uint64_t v15 = v43;
              uint64_t v11 = v44;
              uint64_t v9 = v45;
              uint64_t v18 = v46;
              if (result)
              {
                if (*(void *)(v28 + 16) == *(void *)(v28 + 24)) {
                  goto LABEL_55;
                }
                uint64_t v47 = v46;
                __n128 v48 = v37;
                char v50 = 1;
                uint64_t v29 = TVertex::getInEdge(v28);
                uint64_t v11 = v44;
                uint64_t v9 = v45;
                uint64_t v18 = v46;
                uint64_t v16 = v42;
                uint64_t v15 = v43;
                uint64_t v19 = v40;
                uint64_t v17 = v41;
                uint64_t v22 = 0;
                uint64_t v20 = v39;
                uint64_t v23 = v38;
                __n128 v24 = v37;
                double result = 44;
                if (v29)
                {
LABEL_33:
                  unsigned int v30 = *(_DWORD *)(v29 + 48);
                  BOOL v31 = v30 > 5;
                  int v32 = (1 << v30) & 0x2C;
                  if (!v31 && v32 != 0)
                  {
LABEL_56:
                    char v34 = 0;
                    goto LABEL_45;
                  }
                  double result = TWord::getWrittenForm(*(__int32 ***)(v29 + 56), (uint64_t)&v47);
                  if (v48.n128_u64[1] > 1)
                  {
                    char v34 = 0;
                    uint64_t v11 = v44;
                    uint64_t v9 = v45;
                    uint64_t v18 = v46;
                    uint64_t v16 = v42;
                    uint64_t v15 = v43;
                    uint64_t v19 = v40;
                    uint64_t v17 = v41;
                    uint64_t v22 = 0;
                    uint64_t v20 = v39;
                    uint64_t v23 = v38;
                    __n128 v24 = v37;
                    goto LABEL_45;
                  }
                  double result = (uint64_t)wcschr((__int32 *)".", *v47);
                  uint64_t v11 = v44;
                  uint64_t v9 = v45;
                  uint64_t v18 = v46;
                  uint64_t v16 = v42;
                  uint64_t v15 = v43;
                  uint64_t v19 = v40;
                  uint64_t v17 = v41;
                  uint64_t v22 = 0;
                  uint64_t v20 = v39;
                  uint64_t v23 = v38;
                  __n128 v24 = v37;
                  if (!result) {
                    goto LABEL_56;
                  }
                  double result = 44;
                  while (1)
                  {
                    uint64_t v29 = *(void *)v29;
                    if (!v29) {
                      break;
                    }
                    if (!*(unsigned char *)(v29 + 32)) {
                      goto LABEL_33;
                    }
                  }
                }
                char v34 = 1;
LABEL_45:
                if (v50)
                {
                  double result = (uint64_t)v47;
                  if (v47 != v18 && v47 != 0)
                  {
                    double result = MEMORY[0x1B3EA8630](v24);
                    __n128 v24 = v37;
                    uint64_t v23 = v38;
                    uint64_t v22 = 0;
                    uint64_t v20 = v39;
                    uint64_t v19 = v40;
                    uint64_t v17 = v41;
                    uint64_t v16 = v42;
                    uint64_t v15 = v43;
                    uint64_t v11 = v44;
                    uint64_t v9 = v45;
                    uint64_t v18 = v46;
                  }
                }
                if ((v34 & 1) == 0)
                {
LABEL_55:
                  uint64_t v26 = 1;
LABEL_15:
                  *(void *)(a4 + 8 * v8) += v26;
                }
              }
            }
            uint64_t v36 = *(void *)(a4 + 8 * v8);
            if (v19)
            {
              v36 += 3;
              *(void *)(a4 + 8 * v8) = v36;
            }
            uint64_t v27 = v36 + v9;
LABEL_26:
            *(void *)(a4 + 8 * v8) = v27;
          }
        }
LABEL_27:
        ++v8;
        uint64_t v5 = *a3;
        if (v8 >= (a3[1] - *a3) >> 3) {
          return result;
        }
      }
      if (!v21) {
        goto LABEL_27;
      }
      goto LABEL_25;
    }
  }
  return result;
}

void sub_1B1BEBD54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (LOBYTE(STACK[0x480]) && a22 != a21)
  {
    if (a22) {
      MEMORY[0x1B3EA8630]();
    }
  }
  _Unwind_Resume(a1);
}

void TInputStream::TInputStream(TInputStream *this, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  *(void *)this = a2;
  *((unsigned char *)this + 8) = a3;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((void *)this + 12) = 1;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((void *)this + 20) = 0;
  *((void *)this + 19) = (char *)this + 160;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((void *)this + 21) = 0;
  *((void *)this + 22) = a5;
  if (a4) {
    MEMORY[0x1B3EA7B20]((char *)this + 16, a4);
  }
  *((unsigned char *)this + 9) = TInputStream::readHeader(this);
}

void sub_1B1BEBE20(_Unwind_Exception *a1)
{
  uint64_t v5 = v3;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v5, *(void **)(v1 + 160));
  if (*(char *)(v1 + 151) < 0) {
    operator delete(*(void **)(v1 + 128));
  }
  if (*(char *)(v1 + 127) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v1 + 95) < 0) {
    operator delete(*(void **)(v1 + 72));
  }
  if (*(char *)(v1 + 63) < 0) {
    operator delete(*(void **)(v1 + 40));
  }
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(a1);
}

uint64_t TIntParam::set(TIntParam *this, uint64_t a2, int a3)
{
  if (*((_DWORD *)this + 38) > a3 || *((_DWORD *)this + 39) < a3) {
    return 1;
  }
  *((_DWORD *)this + a2 + 64) = a3;
  *((void *)this + 14) |= 1 << (a2 + 33);
  TParam::notifyChange((uint64_t)this, a2);
  return 0;
}

void TResGraphMaker::~TResGraphMaker(TResGraphMaker *this)
{
  *(void *)this = &unk_1F0A33BE8;
  TResGraphMaker::clear((uint64_t)this);
}

{
  *(void *)this = &unk_1F0A33BE8;
  TResGraphMaker::clear((uint64_t)this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F0A33BE8;
  TResGraphMaker::clear((uint64_t)this);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::wstring::basic_string[abi:ne180100]<0>(uint64_t a1, __int32 *a2)
{
  size_t v4 = wcslen(a2);
  if (v4 >= 0x3FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 5)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((v4 | 1) != 5) {
      uint64_t v7 = v4 | 1;
    }
    uint64_t v6 = std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1, v7 + 1);
    *(void *)(a1 + 8) = v5;
    *(void *)(a1 + 16) = v8 | 0x8000000000000000;
    *(void *)a1 = v6;
  }
  else
  {
    *(unsigned char *)(a1 + 23) = v4;
    uint64_t v6 = (void *)a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, a2, 4 * v5);
LABEL_9:
  *((_DWORD *)v6 + v5) = 0;
  return a1;
}

void *std::vector<TEdgeStat>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<quasar::TranslationToken>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = a1[1];
    uint64_t v5 = v4 + 72 * a2;
    uint64_t v6 = 72 * a2;
    do
    {
      *(unsigned char *)(v4 + 64) = 0;
      *(_OWORD *)(v4 + 32) = 0uLL;
      *(_OWORD *)(v4 + 48) = 0uLL;
      *(_OWORD *)uint64_t v4 = 0uLL;
      *(_OWORD *)(v4 + 16) = 0uLL;
      v4 += 72;
      v6 -= 72;
    }
    while (v6);
    a1[1] = v5;
  }
  return a1;
}

void sub_1B1BEC048(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**,false>(uint64_t result, char *a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4, char a5)
{
  uint64_t v10 = (char *)result;
LABEL_2:
  uint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    uint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = a2 - v11;
    unint64_t v15 = (a2 - v11) >> 3;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          double result = (*a3)(*((void *)a2 - 1), *(void *)v11);
          if (result)
          {
            uint64_t v22 = *(void *)v11;
            *(void *)uint64_t v11 = *((void *)a2 - 1);
            *((void *)a2 - 1) = v22;
          }
          break;
        case 3uLL:
          double result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(v11, (void *)v11 + 1, (void *)a2 - 1, (unsigned int (**)(void))a3);
          break;
        case 4uLL:
          double result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(v11, (void *)v11 + 1, (void *)v11 + 2, (void *)a2 - 1, (unsigned int (**)(void))a3);
          break;
        case 5uLL:
          double result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(v11, (void *)v11 + 1, (void *)v11 + 2, (void *)v11 + 3, (void *)a2 - 1, (unsigned int (**)(void))a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 191) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**,TIntParam const**>(v11, a2, (uint64_t *)a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    uint64_t v17 = &v11[8 * (v15 >> 1)];
    if ((unint64_t)v14 >= 0x401)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(v11, &v11[8 * (v15 >> 1)], (void *)a2 - 1, (unsigned int (**)(void))a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>((void *)v11 + 1, (void *)v17 - 1, (void *)a2 - 2, (unsigned int (**)(void))a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>((void *)v11 + 2, &v11[8 * v16 + 8], (void *)a2 - 3, (unsigned int (**)(void))a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>((void *)v17 - 1, v17, &v11[8 * v16 + 8], (unsigned int (**)(void))a3);
      uint64_t v18 = *(void *)v11;
      *(void *)uint64_t v11 = *(void *)v17;
      *(void *)uint64_t v17 = v18;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(&v11[8 * (v15 >> 1)], v11, (void *)a2 - 1, (unsigned int (**)(void))a3);
      if (a5) {
        goto LABEL_14;
      }
    }
    if (((*a3)(*((void *)v11 - 1), *(void *)v11) & 1) == 0)
    {
      double result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,TIntParam const**,BOOL (*&)(TIntParam const*,TIntParam const*)>((uint64_t *)v11, (uint64_t *)a2, a3);
      uint64_t v11 = (char *)result;
      goto LABEL_19;
    }
LABEL_14:
    uint64_t v19 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,TIntParam const**,BOOL (*&)(TIntParam const*,TIntParam const*)>((uint64_t *)v11, (uint64_t *)a2, a3);
    if ((v20 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(v11, v19, (unsigned int (**)(void))a3);
    uint64_t v11 = (char *)(v19 + 1);
    double result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(v19 + 1, a2, (unsigned int (**)(void))a3);
    if (result)
    {
      a4 = -v13;
      a2 = (char *)v19;
      if (v21) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v21)
    {
LABEL_17:
      double result = std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**,false>(v10, v19, a3, -v13, a5 & 1);
      uint64_t v11 = (char *)(v19 + 1);
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>((uint64_t)v11, (uint64_t *)a2, a3);
  }
  else
  {
    return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>((uint64_t)v11, a2, a3);
  }
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(uint64_t result, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  if ((uint64_t *)result != a2)
  {
    uint64_t v4 = (void *)result;
    char v5 = (uint64_t *)(result + 8);
    if ((uint64_t *)(result + 8) != a2)
    {
      uint64_t v7 = 0;
      uint64_t v8 = (uint64_t *)result;
      do
      {
        uint64_t v10 = *v8;
        uint64_t v9 = v8[1];
        uint64_t v8 = v5;
        double result = (*a3)(v9, v10);
        if (result)
        {
          uint64_t v11 = *v8;
          uint64_t v12 = v7;
          while (1)
          {
            *(void *)((char *)v4 + v12 + 8) = *(void *)((char *)v4 + v12);
            if (!v12) {
              break;
            }
            double result = (*a3)(v11, *(void *)((char *)v4 + v12 - 8));
            v12 -= 8;
            if ((result & 1) == 0)
            {
              uint64_t v13 = (void *)((char *)v4 + v12 + 8);
              goto LABEL_10;
            }
          }
          uint64_t v13 = v4;
LABEL_10:
          *uint64_t v13 = v11;
        }
        char v5 = v8 + 1;
        v7 += 8;
      }
      while (v8 + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(uint64_t result, void *a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  if ((void *)result != a2)
  {
    uint64_t v4 = (void *)result;
    for (uint64_t i = (void *)(result + 8); v4 + 1 != a2; uint64_t i = v4 + 1)
    {
      uint64_t v8 = *v4;
      uint64_t v7 = v4[1];
      uint64_t v4 = i;
      double result = (*a3)(v7, v8);
      if (result)
      {
        uint64_t v9 = *v4;
        uint64_t v10 = v4;
        do
        {
          uint64_t v11 = v10;
          uint64_t v12 = *--v10;
          *uint64_t v11 = v12;
          double result = (*a3)(v9, *(v11 - 2));
        }
        while ((result & 1) != 0);
        *uint64_t v10 = v9;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(void *a1, void *a2, void *a3, unsigned int (**a4)(void))
{
  char v8 = ((uint64_t (*)(void, void))*a4)(*a2, *a1);
  uint64_t result = ((uint64_t (*)(void, void))*a4)(*a3, *a2);
  if ((v8 & 1) == 0)
  {
    if (!result) {
      return result;
    }
    uint64_t v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    if (!((unsigned int (*)(void, void))*a4)(*a2, *a1)) {
      return 1;
    }
    uint64_t v12 = *a1;
    *a1 = *a2;
    *a2 = v12;
    return 2;
  }
  uint64_t v10 = *a1;
  if (!result)
  {
    *a1 = *a2;
    *a2 = v10;
    if (!(*a4)(*a3)) {
      return 1;
    }
    uint64_t v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
    return 2;
  }
  *a1 = *a3;
  *a3 = v10;
  return 1;
}

uint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,TIntParam const**,BOOL (*&)(TIntParam const*,TIntParam const*)>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  uint64_t v4 = a2;
  uint64_t v6 = *a1;
  if ((*a3)(*a1, *(a2 - 1)))
  {
    uint64_t v7 = a1;
    do
    {
      uint64_t v8 = v7[1];
      ++v7;
    }
    while (((*a3)(v6, v8) & 1) == 0);
  }
  else
  {
    uint64_t v9 = a1 + 1;
    do
    {
      uint64_t v7 = v9;
      if (v9 >= v4) {
        break;
      }
      ++v9;
    }
    while (!(*a3)(v6, *v7));
  }
  if (v7 < v4)
  {
    do
      uint64_t v10 = *--v4;
    while (((*a3)(v6, v10) & 1) != 0);
  }
  while (v7 < v4)
  {
    uint64_t v11 = *v7;
    uint64_t *v7 = *v4;
    uint64_t *v4 = v11;
    do
    {
      uint64_t v12 = v7[1];
      ++v7;
    }
    while (!(*a3)(v6, v12));
    do
      uint64_t v13 = *--v4;
    while (((*a3)(v6, v13) & 1) != 0);
  }
  if (v7 - 1 != a1) {
    *a1 = *(v7 - 1);
  }
  *(v7 - 1) = v6;
  return v7;
}

uint64_t *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,TIntParam const**,BOOL (*&)(TIntParam const*,TIntParam const*)>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  uint64_t v6 = 0;
  uint64_t v7 = *a1;
  do
    char v8 = (*a3)(a1[++v6], v7);
  while ((v8 & 1) != 0);
  uint64_t v9 = &a1[v6];
  uint64_t v10 = &a1[v6 - 1];
  if (v6 == 1)
  {
    do
    {
      if (v9 >= a2) {
        break;
      }
      uint64_t v12 = *--a2;
    }
    while (((*a3)(v12, v7) & 1) == 0);
  }
  else
  {
    do
      uint64_t v11 = *--a2;
    while (!(*a3)(v11, v7));
  }
  if (v9 < a2)
  {
    uint64_t v13 = &a1[v6];
    uint64_t v14 = a2;
    do
    {
      uint64_t v15 = *v13;
      *uint64_t v13 = *v14;
      *uint64_t v14 = v15;
      do
      {
        uint64_t v16 = v13[1];
        ++v13;
      }
      while (((*a3)(v16, v7) & 1) != 0);
      do
        uint64_t v17 = *--v14;
      while (!(*a3)(v17, v7));
    }
    while (v13 < v14);
    uint64_t v10 = v13 - 1;
  }
  if (v10 != a1) {
    *a1 = *v10;
  }
  *uint64_t v10 = v7;
  return v10;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(void *a1, void *a2, unsigned int (**a3)(void))
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (((unsigned int (*)(void, void))*a3)(*(a2 - 1), *a1))
      {
        uint64_t v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      uint64_t v9 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(a1, a1 + 1, a1 + 2, a3);
      uint64_t v10 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    if (((unsigned int (*)(void, void))*a3)(*v10, *v9))
    {
      uint64_t v13 = *v10;
      uint64_t v14 = v11;
      while (1)
      {
        uint64_t v15 = (char *)a1 + v14;
        *(void *)((char *)a1 + v14 + ++*(_DWORD *)(result + 24) = *(void *)((char *)a1 + v14 + 16);
        if (v14 == -16) {
          break;
        }
        v14 -= 8;
        if ((((uint64_t (*)(uint64_t, void))*a3)(v13, *((void *)v15 + 1)) & 1) == 0)
        {
          uint64_t v16 = (void *)((char *)a1 + v14 + 24);
          goto LABEL_12;
        }
      }
      uint64_t v16 = a1;
LABEL_12:
      *uint64_t v16 = v13;
      if (++v12 == 8) {
        return v10 + 1 == a2;
      }
    }
    uint64_t v9 = v10;
    v11 += 8;
    if (++v10 == a2) {
      return 1;
    }
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(void *a1, void *a2, void *a3, void *a4, unsigned int (**a5)(void))
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(a1, a2, a3, a5);
  uint64_t result = ((uint64_t (*)(void, void))*a5)(*a4, *a3);
  if (result)
  {
    uint64_t v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    uint64_t result = ((uint64_t (*)(void, void))*a5)(*a3, *a2);
    if (result)
    {
      uint64_t v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      uint64_t result = ((uint64_t (*)(void, void))*a5)(*a2, *a1);
      if (result)
      {
        uint64_t v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(void *a1, void *a2, void *a3, void *a4, void *a5, unsigned int (**a6)(void))
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(a1, a2, a3, a4, a6);
  uint64_t result = ((uint64_t (*)(void, void))*a6)(*a5, *a4);
  if (result)
  {
    uint64_t v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    uint64_t result = ((uint64_t (*)(void, void))*a6)(*a4, *a3);
    if (result)
    {
      uint64_t v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      uint64_t result = ((uint64_t (*)(void, void))*a6)(*a3, *a2);
      if (result)
      {
        uint64_t v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        uint64_t result = ((uint64_t (*)(void, void))*a6)(*a2, *a1);
        if (result)
        {
          uint64_t v16 = *a1;
          *a1 = *a2;
          *a2 = v16;
        }
      }
    }
  }
  return result;
}

uint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**,TIntParam const**>(char *a1, char *a2, uint64_t *a3, uint64_t (**a4)(uint64_t, uint64_t))
{
  if (a1 != a2)
  {
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) >> 3;
    if (a2 - a1 >= 9)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = &a1[8 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>((uint64_t)a1, (unsigned int (**)(void, void))a4, v9, v12);
        v12 -= 8;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = a2;
    if (a2 != (char *)a3)
    {
      uint64_t v14 = (uint64_t *)a2;
      do
      {
        if ((*a4)(*v14, *(void *)a1))
        {
          uint64_t v15 = *v14;
          *uint64_t v14 = *(void *)a1;
          *(void *)a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>((uint64_t)a1, (unsigned int (**)(void, void))a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      uint64_t v13 = (char *)a3;
    }
    if (v8 >= 9)
    {
      uint64_t v16 = (unint64_t)v8 >> 3;
      uint64_t v17 = a2 - 8;
      do
      {
        uint64_t v18 = *(void *)a1;
        uint64_t v19 = (char *)std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(a1, (unsigned int (**)(void, void))a4, v16);
        if (v17 == v19)
        {
          *(void *)uint64_t v19 = v18;
        }
        else
        {
          *(void *)uint64_t v19 = *(void *)v17;
          *(void *)uint64_t v17 = v18;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>((uint64_t)a1, (uint64_t)(v19 + 8), a4, (v19 + 8 - a1) >> 3);
        }
        v17 -= 8;
      }
      while (v16-- > 2);
    }
    return (uint64_t *)v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(uint64_t result, unsigned int (**a2)(void, void), uint64_t a3, void *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    char v5 = a4;
    uint64_t v6 = result;
    int64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 3)
    {
      uint64_t v10 = ((uint64_t)a4 - result) >> 2;
      uint64_t v11 = v10 + 1;
      uint64_t v12 = (void *)(result + 8 * (v10 + 1));
      uint64_t v13 = v10 + 2;
      if (v10 + 2 < a3 && (*a2)(*v12, v12[1]))
      {
        ++v12;
        uint64_t v11 = v13;
      }
      uint64_t result = ((uint64_t (*)(void, void))*a2)(*v12, *v5);
      if ((result & 1) == 0)
      {
        uint64_t v14 = *v5;
        do
        {
          uint64_t v15 = v12;
          void *v5 = *v12;
          if (v7 < v11) {
            break;
          }
          uint64_t v16 = (2 * v11) | 1;
          uint64_t v12 = (void *)(v6 + 8 * v16);
          if (2 * v11 + 2 < a3)
          {
            if ((*a2)(*v12, v12[1]))
            {
              ++v12;
              uint64_t v16 = 2 * v11 + 2;
            }
          }
          uint64_t result = ((uint64_t (*)(void, uint64_t))*a2)(*v12, v14);
          char v5 = v15;
          uint64_t v11 = v16;
        }
        while (!result);
        void *v15 = v14;
      }
    }
  }
  return result;
}

void *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(void *a1, unsigned int (**a2)(void, void), uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = &a1[v6 + 1];
    uint64_t v10 = (2 * v6) | 1;
    uint64_t v11 = 2 * v6 + 2;
    if (v11 < a3 && (*a2)(a1[v6 + 1], a1[v6 + 2]))
    {
      ++v9;
      uint64_t v10 = v11;
    }
    *a1 = *v9;
    a1 = v9;
    uint64_t v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v6 = result;
    unint64_t v7 = v4 >> 1;
    uint64_t v8 = (uint64_t *)(result + 8 * (v4 >> 1));
    uint64_t v9 = (uint64_t *)(a2 - 8);
    uint64_t result = (*a3)(*v8, *(void *)(a2 - 8));
    if (result)
    {
      uint64_t v10 = *v9;
      do
      {
        uint64_t v11 = v8;
        *uint64_t v9 = *v8;
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        uint64_t v8 = (uint64_t *)(v6 + 8 * v7);
        uint64_t result = (*a3)(*v8, v10);
        uint64_t v9 = v11;
      }
      while ((result & 1) != 0);
      *uint64_t v11 = v10;
    }
  }
  return result;
}

uint64_t fst::MappedFile::MappedFile(uint64_t a1, long long *a2, long long *a3, float a4)
{
  *(void *)a1 = &unk_1F0A369E0;
  long long v6 = *a2;
  *(_OWORD *)(a1 + ++*(_DWORD *)(result + 24) = a2[1];
  *(_OWORD *)(a1 + 8) = v6;
  unint64_t v7 = (std::string *)(a1 + 40);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v8 = *a3;
    v7->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  *(float *)(a1 + 64) = a4;
  *(unsigned char *)(a1 + 68) = 0;
  return a1;
}

void fst::MappedFile::~MappedFile(fst::MappedFile *this)
{
  *(void *)this = &unk_1F0A369E0;
  size_t v2 = *((void *)this + 3);
  if (!v2) {
    goto LABEL_9;
  }
  uint64_t v3 = (void *)*((void *)this + 2);
  if (v3)
  {
    if (!munmap(v3, v2)) {
      goto LABEL_9;
    }
    std::string::basic_string[abi:ne180100]<0>(v12, "ERROR");
    unint64_t v4 = fst::LogMessage::LogMessage((fst *)&v14, (uint64_t)v12);
    char v5 = (void *)fst::cerr(v4);
    long long v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"failed to unmap region: ", 24);
    unint64_t v7 = __error();
    long long v8 = strerror(*v7);
    size_t v9 = strlen(v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v8, v9);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v14);
    if ((v13 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    uint64_t v10 = (void *)v12[0];
  }
  else
  {
    uint64_t v11 = *((void *)this + 1);
    if (!v11) {
      goto LABEL_9;
    }
    uint64_t v10 = (void *)(v11 - *((int *)this + 8));
  }
  operator delete(v10);
LABEL_9:
  if (*((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
}

{
  uint64_t vars8;

  fst::MappedFile::~MappedFile(this);
  JUMPOUT(0x1B3EA8670);
}

void fst::MappedFile::SetLocked(fst::MappedFile *this, int a2)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  float v2 = *((float *)this + 16);
  if (v2 > 0.0 && *((unsigned __int8 *)this + 68) != a2)
  {
    size_t v4 = *((void *)this + 3);
    if (v2 < 1.0)
    {
      float v5 = v2 * (float)v4;
      if ((unint64_t)v5 < v4) {
        size_t v4 = (unint64_t)v5;
      }
    }
    long long v6 = (const void *)*((void *)this + 2);
    if (a2)
    {
      unint64_t v7 = (EARLogger *)mlock(v6, v4);
      int v8 = (int)v7;
      if (!v7) {
        *((unsigned char *)this + 68) = 1;
      }
      size_t v9 = EARLogger::QuasarOSLogger(v7);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v10 = (void *)((char *)this + 40);
        if (*((char *)this + 63) < 0) {
          uint64_t v10 = (void *)*v10;
        }
        uint64_t v11 = *((void *)this + 3);
        double v12 = *((float *)this + 16);
        int v13 = *((unsigned __int8 *)this + 68);
        if (v8)
        {
          int v14 = *__error();
          uint64_t v15 = __error();
          uint64_t v16 = strerror(*v15);
        }
        else
        {
          int v14 = 0;
          uint64_t v16 = "";
        }
        *(_DWORD *)std::string __p = 136316930;
        *(void *)&__p[4] = v10;
        __int16 v37 = 2048;
        uint64_t v38 = v11;
        __int16 v39 = 2048;
        double v40 = v12;
        __int16 v41 = 2048;
        size_t v42 = v4;
        __int16 v43 = 1024;
        int v44 = v13;
        __int16 v45 = 1024;
        int v46 = v8;
        __int16 v47 = 1024;
        int v48 = v14;
        __int16 v49 = 2080;
        char v50 = v16;
        uint64_t v33 = "mlock source %s size %lu mlock_fraction %f mlock_size %lu locked_ %d ret %d errno %d strerror %s";
        char v34 = v9;
LABEL_27:
        _os_log_impl(&dword_1B1A86000, v34, OS_LOG_TYPE_DEFAULT, v33, __p, 0x46u);
      }
    }
    else
    {
      uint64_t v17 = (EARLogger *)munlock(v6, v4);
      int v18 = (int)v17;
      if (v17)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "WARNING");
        uint64_t v19 = fst::LogMessage::LogMessage((fst *)&v35, (uint64_t)__p);
        char v20 = (void *)fst::cerr(v19);
        BOOL v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Memory unlock of file failed: ", 30);
        uint64_t v22 = __error();
        uint64_t v23 = strerror(*v22);
        size_t v24 = strlen(v23);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v23, v24);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v35);
        if (SHIBYTE(v39) < 0) {
          operator delete(*(void **)__p);
        }
      }
      else
      {
        *((unsigned char *)this + 68) = 0;
      }
      uint64_t v25 = EARLogger::QuasarOSLogger(v17);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v26 = (void *)((char *)this + 40);
        if (*((char *)this + 63) < 0) {
          uint64_t v26 = (void *)*v26;
        }
        uint64_t v27 = *((void *)this + 3);
        float v28 = *((float *)this + 16);
        int v29 = *((unsigned __int8 *)this + 68);
        if (v18)
        {
          int v30 = *__error();
          BOOL v31 = __error();
          int v32 = strerror(*v31);
        }
        else
        {
          int v30 = 0;
          int v32 = "";
        }
        *(_DWORD *)std::string __p = 136316930;
        *(void *)&__p[4] = v26;
        __int16 v37 = 2048;
        uint64_t v38 = v27;
        __int16 v39 = 2048;
        double v40 = v28;
        __int16 v41 = 2048;
        size_t v42 = v4;
        __int16 v43 = 1024;
        int v44 = v29;
        __int16 v45 = 1024;
        int v46 = v18;
        __int16 v47 = 1024;
        int v48 = v30;
        __int16 v49 = 2080;
        char v50 = v32;
        uint64_t v33 = "munlock source %s size %lu mlock_fraction %f mlock_size %lu locked_ %d ret %d errno %d strerror %s";
        char v34 = v25;
        goto LABEL_27;
      }
    }
  }
}

void sub_1B1BED490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::MappedFile::Allocate(fst::MappedFile *this, int a2)
{
  if (this) {
    operator new((size_t)this + a2);
  }
  operator new();
}

void sub_1B1BED5C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1B3EA8670](v15, 0x1093C40E6D40A01);
  _Unwind_Resume(a1);
}

void fst::MappedFile::Map(uint64_t a1, uint64_t a2, fst::MappedFile *a3)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  std::istream::tellg();
  uint64_t v4 = a2;
  int v5 = *(_DWORD *)(a2 + 48);
  uint64_t v6 = v39 & 0xF;
  if ((v5 - 1) <= 1 && v6 == 0)
  {
    if (*(char *)(a2 + 23) >= 0) {
      double v12 = (const char *)a2;
    }
    else {
      double v12 = *(const char **)a2;
    }
    int v13 = open(v12, 0);
    if (v13 != -1)
    {
      int v14 = sysconf(29);
      unint64_t v15 = v39 % v14;
      uint64_t v16 = (char *)mmap(0, (size_t)a3 + v15, 1, 1, v13, v39 / v14 * v14);
      if (!close(v13) && v16 != (char *)-1)
      {
        __p[1] = v16;
        __int16 v37 = (char *)a3 + v15;
        __p[0] = &v16[v15];
        int v38 = v15;
        operator new();
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      uint64_t v19 = fst::LogMessage::LogMessage((fst *)v35, (uint64_t)__p);
      char v20 = (void *)fst::cerr(v19);
      BOOL v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Mapping of file failed: ", 24);
      uint64_t v22 = __error();
      uint64_t v23 = strerror(*v22);
      size_t v24 = strlen(v23);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v23, v24);
      fst::LogMessage::~LogMessage((fst::LogMessage *)v35);
      if (SHIBYTE(v37) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v4 = a2;
LABEL_23:
      if (*(_DWORD *)(v4 + 48))
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "WARNING");
        uint64_t v25 = fst::LogMessage::LogMessage((fst *)v35, (uint64_t)__p);
        uint64_t v26 = (void *)fst::cerr(v25);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"File mapping at offset ", 23);
        uint64_t v27 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" of size ", 9);
        float v28 = (void *)std::ostream::operator<<();
        int v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" of file ", 9);
        int v30 = *(char *)(a2 + 23);
        if (v30 >= 0) {
          uint64_t v31 = a2;
        }
        else {
          uint64_t v31 = *(void *)a2;
        }
        if (v30 >= 0) {
          uint64_t v32 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          uint64_t v32 = *(void *)(a2 + 8);
        }
        uint64_t v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, v31, v32);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)" could not be honored, reading instead.", 39);
        fst::LogMessage::~LogMessage((fst::LogMessage *)v35);
        if (SHIBYTE(v37) < 0) {
          operator delete(__p[0]);
        }
      }
      fst::MappedFile::Allocate(a3, 16);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
    uint64_t v17 = fst::LogMessage::LogMessage((fst *)v35, (uint64_t)__p);
    int v18 = (void *)fst::cerr(v17);
    uint64_t v4 = a2;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Mapping of file failed: invalid file descriptor", 47);
  }
  else
  {
    if ((v5 - 3) < 0xFFFFFFFE || v6 == 0) {
      goto LABEL_23;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
    size_t v9 = fst::LogMessage::LogMessage((fst *)v35, (uint64_t)__p);
    uint64_t v10 = (void *)fst::cerr(v9);
    uint64_t v4 = a2;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Mapping of file failed: stream position ", 40);
    uint64_t v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" is not aligned", 15);
  }
  fst::LogMessage::~LogMessage((fst::LogMessage *)v35);
  if (SHIBYTE(v37) < 0) {
    operator delete(__p[0]);
  }
  goto LABEL_23;
}

void sub_1B1BEDDA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B1BEDF54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void buildRegExp(const TFileObject *a1, TLexicon *a2)
{
  int v8 = &unk_1B2563B50;
  int64x2_t v9 = vdupq_n_s64(1uLL);
  uint64_t v10 = -1;
  if (!TFileObject::verify((uint64_t)a1, (uint64_t)&v8, 1uLL, 1)) {
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(&v6, "");
  TException::TException(__p, &v6);
  __p[0] = &unk_1F0A33B90;
  if (v5 >= 0) {
    float v2 = (const char *)&__p[1];
  }
  else {
    float v2 = (const char *)__p[1];
  }
  conditionalAssert(v2, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/tkn/decompounder.cpp", 70);
  TException::~TException((std::exception *)__p);
  if (v7 < 0) {
    operator delete((void *)v6);
  }
  exception = __cxa_allocate_exception(0x20uLL);
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  TException::TException(exception, (long long *)__p);
  void *exception = &unk_1F0A33B90;
}

void sub_1B1BEE504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1B1BEE52C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
  {
    operator delete(__p);
    if ((v19 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v19)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v18);
  goto LABEL_6;
}

void sub_1B1BEE568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::exception a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  TException::~TException(&a13);
  if (*(char *)(v18 - 121) < 0) {
    operator delete(*(void **)(v18 - 144));
  }
  _Unwind_Resume(a1);
}

void sub_1B1BEE5EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if (LOBYTE(STACK[0x438])) {
    buildRegExp((uint64_t *)va, v5);
  }
  _Unwind_Resume(a1);
}

void TFsaBuilder::minimizeChildren(uint64_t a1, void *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v4 = *(void *)(a3 + 24);
  if (v4)
  {
    int64x2_t v9 = a4 + 1;
    do
    {
      uint64_t v11 = *(void **)(v4 + 16);
      if (!v11[1])
      {
        TFsaBuilder::minimizeChildren(a1, a2);
        uint64_t v10 = (uint64_t **)std::__tree<TState *,TFsaBuilder::TStateCompare,std::allocator<TState *>>::find<TState *>((uint64_t)a4, (uint64_t *)&v11);
        if (v9 == v10)
        {
          v11[1] = 1;
          std::__tree<TState *,TFsaBuilder::TStateCompare,std::allocator<TState *>>::__emplace_unique_key_args<TState *,TState * const&>(a4, (uint64_t *)&v11, (uint64_t *)&v11);
        }
        else
        {
          TFsa::moveTrans((uint64_t)a2, v4, a3, (uint64_t)v10[4]);
          TFsa::deleteState(a2, v11);
        }
      }
      uint64_t v4 = *(void *)(v4 + 40);
    }
    while (v4);
  }
}

uint64_t TFsa::moveTrans(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a2 + 24);
  if (v6 != a3)
  {
    TState::deleteTrans(v6, a2, 1u);
    TState::addTrans(a3, a2, 1u);
  }
  uint64_t result = *(void *)(a2 + 16);
  if (result != a4)
  {
    TState::deleteTrans(result, a2, 0);
    return TState::addTrans(a4, a2, 0);
  }
  return result;
}

void TFsaBuilder::addSuffix(int a1, TAllocator *this, void *a3, _DWORD *a4)
{
  uint64_t v4 = (uint64_t)a3;
  if (*a4)
  {
    uint64_t v6 = a4 + 1;
    do
    {
      char v7 = TFsa::newState(this, 0);
      TFsa::newTrans(this, v4, (uint64_t)v7, *(v6 - 1));
      int v8 = *v6++;
      uint64_t v4 = (uint64_t)v7;
    }
    while (v8);
  }
  else
  {
    char v7 = a3;
  }
  TFsa::addExtremity((uint64_t)this, (uint64_t)v7, 1u);
}

void TFsaBuilder::operator()()
{
}

void sub_1B1BEE94C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

void TDecompounder::load(TLexicon **this, TInputStream *a2)
{
  uint64_t v83 = *MEMORY[0x1E4F143B8];
  if (TInputStream::verifyHeader((uint64_t)a2, "TknDecomp", (uint64_t)&pTknDecompVersion, 3))
  {
    std::string::basic_string[abi:ne180100]<0>(v43, "");
    TException::TException(&v62, (long long *)v43);
    v62.__vftable = (std::exception_vtbl *)&unk_1F0A33B90;
    if (v64 >= 0) {
      int v38 = (const char *)&v63;
    }
    else {
      int v38 = (const char *)v63;
    }
    conditionalAssert(v38, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/tkn/decompounder.cpp", 382);
    TException::~TException(&v62);
    if (v44 < 0) {
      operator delete(v43[0]);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(&v62, "");
    TException::TException(exception, (long long *)&v62);
    void *exception = &unk_1F0A33B90;
  }
  TFileObjectParser::TFileObjectParser((TFileObjectParser *)v43, a2);
  uint64_t v4 = v43[0];
  long long v63 = xmmword_1B2563B40;
  v62.__vftable = (std::exception_vtbl *)dword_1B2563B54;
  long long v66 = xmmword_1B2563B40;
  uint64_t v64 = -1;
  unint64_t v65 = dword_1B2563B74;
  long long v69 = xmmword_1B2563B40;
  uint64_t v67 = -1;
  uint64_t v68 = dword_1B2563B9C;
  long long v72 = xmmword_1B2563B40;
  uint64_t v70 = -1;
  long long v71 = dword_1B2563BD8;
  long long v75 = xmmword_1B2561FB0;
  uint64_t v73 = -1;
  uint64_t v74 = dword_1B2563C10;
  uint64_t v76 = -1;
  long long v78 = xmmword_1B2563B40;
  char v77 = dword_1B2563C50;
  long long v81 = xmmword_1B2563B40;
  uint64_t v79 = 1;
  unint64_t v80 = dword_1B2563C8C;
  uint64_t v82 = 1;
  if (TFileObject::verify((uint64_t)v43[0], (uint64_t)&v62, 7uLL, 1))
  {
    std::string::basic_string[abi:ne180100]<0>(v55, "");
    TException::TException(&v58, (long long *)v55);
    v58.__vftable = (std::exception_vtbl *)&unk_1F0A33B90;
    if (v60 >= 0) {
      uint64_t v40 = &v59;
    }
    else {
      uint64_t v40 = (int64x2_t *)v59.i64[0];
    }
    conditionalAssert(v40->i8, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/tkn/decompounder.cpp", 404);
    TException::~TException(&v58);
    if (v56 < 0) {
      operator delete(v55[0].__vftable);
    }
    __int16 v41 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(&v58, "");
    TException::TException(v41, (long long *)&v58);
    *__int16 v41 = &unk_1F0A33B90;
  }
  uint64_t v5 = v4[3];
  if (v5)
  {
    char v42 = 0;
    while (wcscmp(*(const __int32 **)(v5 + 8), dword_1B2563B54))
    {
      if (!wcscmp(*(const __int32 **)(v5 + 8), dword_1B2563B74)) {
        buildRegExp((const TFileObject *)v5, *this);
      }
      if (!wcscmp(*(const __int32 **)(v5 + 8), dword_1B2563B9C)) {
        buildRegExp((const TFileObject *)v5, *this);
      }
      if (!wcscmp(*(const __int32 **)(v5 + 8), dword_1B2563BD8)) {
        buildRegExp((const TFileObject *)v5, *this);
      }
      if (!wcscmp(*(const __int32 **)(v5 + 8), dword_1B2563C10)) {
        buildRegExp((const TFileObject *)v5, *this);
      }
      if (!wcscmp(*(const __int32 **)(v5 + 8), dword_1B2563C50)) {
        char v42 = 1;
      }
      else {
        v42 |= wcscmp(*(const __int32 **)(v5 + 8), dword_1B2563C8C) == 0;
      }
      uint64_t v5 = *(void *)(v5 + 16);
      if (!v5)
      {
        if (v42) {
          tknPrintString("Warning: Decompounder model has been lobotomized on load.\n");
        }
        goto LABEL_88;
      }
    }
    uint64_t v6 = *this;
    int64x2_t v59 = vdupq_n_s64(1uLL);
    v58.__vftable = (std::exception_vtbl *)&unk_1B2563B50;
    uint64_t v60 = -1;
    if (TFileObject::verify(v5, (uint64_t)&v58, 1uLL, 1))
    {
      std::string::basic_string[abi:ne180100]<0>(v53, "");
      TException::TException(v55, (long long *)v53);
      v55[0].__vftable = (std::exception_vtbl *)&unk_1F0A33B90;
      if (v57 >= 0) {
        char v34 = (std::exception_vtbl *)&v55[1];
      }
      else {
        char v34 = v55[1].__vftable;
      }
      conditionalAssert((const char *)v34, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/tkn/decompounder.cpp", 304);
      TException::~TException(v55);
      if (v54 < 0) {
        operator delete(v53[0]);
      }
      char v35 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v55, "");
      TException::TException(v35, (long long *)v55);
      *char v35 = &unk_1F0A33B90;
    }
    char v50 = 0;
    uint64_t v51 = 0;
    unint64_t v52 = 0;
    uint64_t v7 = *(void *)(v5 + 24);
    if (!v7)
    {
      uint64_t v31 = 0;
      int v30 = 0;
      goto LABEL_64;
    }
    char v8 = 0;
    while (1)
    {
      if ((TFileObject::verify((TFileObject *)v7, 0, 0) & 1) == 0)
      {
        if (!TLexicon::checkName((uint64_t)v6, *(int **)(v7 + 24), 1, 0xFFFFFFFFFFFFFFFFLL))
        {
          if (*(unsigned char *)(getPropCheckTokenExistence() + 8) && !TLexicon::findHeadClone(v6, *(__int32 **)(v7 + 24)))
          {
            loggableFileObject((uint64_t *)v7);
            int v14 = v46;
            unint64_t v15 = v45[0].__vftable;
            loggableUnicode(*(unsigned int **)(v7 + 24), __p);
            if (v14 >= 0) {
              uint64_t v17 = v45;
            }
            else {
              uint64_t v17 = (std::exception *)v15;
            }
            if (v49 >= 0) {
              uint64_t v18 = __p;
            }
            else {
              uint64_t v18 = (void **)__p[0];
            }
            tknPrintf("Warning: %s'%s' isn't lexicalized.\n", v16, v17, v18);
            if (v49 < 0) {
              operator delete(__p[0]);
            }
            if (v46 < 0) {
              operator delete(v45[0].__vftable);
            }
          }
          uint64_t v19 = *(void *)(v7 + 24);
          char v20 = v51;
          if (v51 >= v52)
          {
            uint64_t v22 = (v51 - (unsigned char *)v50) >> 3;
            if ((unint64_t)(v22 + 1) >> 61) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v23 = (v52 - (unsigned char *)v50) >> 2;
            if (v23 <= v22 + 1) {
              unint64_t v23 = v22 + 1;
            }
            if ((unint64_t)(v52 - (unsigned char *)v50) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v24 = v23;
            }
            if (v24) {
              uint64_t v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v52, v24);
            }
            else {
              uint64_t v25 = 0;
            }
            uint64_t v26 = &v25[8 * v22];
            *(void *)uint64_t v26 = v19;
            BOOL v21 = v26 + 8;
            float v28 = (char *)v50;
            uint64_t v27 = v51;
            if (v51 != v50)
            {
              do
              {
                uint64_t v29 = *((void *)v27 - 1);
                v27 -= 8;
                *((void *)v26 - 1) = v29;
                v26 -= 8;
              }
              while (v27 != v28);
              uint64_t v27 = (char *)v50;
            }
            char v50 = v26;
            uint64_t v51 = v21;
            unint64_t v52 = &v25[8 * v24];
            if (v27) {
              operator delete(v27);
            }
          }
          else
          {
            *(void *)uint64_t v51 = v19;
            BOOL v21 = v20 + 8;
          }
          uint64_t v51 = v21;
          goto LABEL_28;
        }
        loggableFileObject((uint64_t *)v7);
        int v9 = v46;
        uint64_t v10 = v45[0].__vftable;
        loggableUnicode(*(unsigned int **)(v7 + 24), __p);
        if (v9 >= 0) {
          double v12 = v45;
        }
        else {
          double v12 = (std::exception *)v10;
        }
        if (v49 >= 0) {
          int v13 = __p;
        }
        else {
          int v13 = (void **)__p[0];
        }
        tknPrintf("Error: %s'%s' is an invalid token name.\n", v11, v12, v13);
        if (v49 < 0) {
          operator delete(__p[0]);
        }
        if (v46 < 0) {
          operator delete(v45[0].__vftable);
        }
      }
      char v8 = 1;
LABEL_28:
      uint64_t v7 = *(void *)(v7 + 16);
      if (!v7)
      {
        if (v8)
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          TException::TException(v45, (long long *)__p);
          v45[0].__vftable = (std::exception_vtbl *)&unk_1F0A33B90;
          if (v47 >= 0) {
            uint64_t v36 = (std::exception_vtbl *)&v45[1];
          }
          else {
            uint64_t v36 = v45[1].__vftable;
          }
          conditionalAssert((const char *)v36, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/tkn/decompounder.cpp", 337);
          TException::~TException(v45);
          if (v49 < 0) {
            operator delete(__p[0]);
          }
          __int16 v37 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(v45, "");
          TException::TException(v37, (long long *)v45);
          *__int16 v37 = &unk_1F0A33B90;
        }
        int v30 = (const __int32 **)v50;
        uint64_t v31 = (const __int32 **)v51;
LABEL_64:
        unint64_t v32 = 126 - 2 * __clz(v31 - v30);
        if (v31 == v30) {
          uint64_t v33 = 0;
        }
        else {
          uint64_t v33 = v32;
        }
        std::__introsort<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**,false>((uint64_t)v30, v31, (uint64_t)&v61, v33, 1);
        TFsaBuilder::operator()();
      }
    }
  }
LABEL_88:
  TFileObjectParser::~TFileObjectParser((TFileObjectParser *)v43);
}

void sub_1B1BEF4D4()
{
  TFileObjectParser::~TFileObjectParser((TFileObjectParser *)&v0);
  JUMPOUT(0x1B1BEF618);
}

void sub_1B1BEF610()
{
}

void sub_1B1BEF6B0(_Unwind_Exception *a1)
{
}

void sub_1B1BEF6BC(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1B1BEF6C4);
  }
  __clang_call_terminate(a1);
}

void TDecompounder::TDecompounder(TDecompounder *this, TInputStream *a2, TLexicon *a3, TTokenizerParamManager *a4)
{
  *(void *)this = a3;
  *((void *)this + 1) = a4;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((void *)this + 6) = 0;
  TDecompounder::load((TLexicon **)this, a2);
}

void TDecompounder::~TDecompounder(TDecompounder *this)
{
  float v2 = (TFsa *)*((void *)this + 2);
  if (v2)
  {
    TFsa::~TFsa(v2);
    MEMORY[0x1B3EA8670]();
  }
  uint64_t v3 = (TRegExp *)*((void *)this + 3);
  if (v3)
  {
    TRegExp::~TRegExp(v3);
    MEMORY[0x1B3EA8670]();
  }
  uint64_t v4 = (TRegExp *)*((void *)this + 4);
  if (v4)
  {
    TRegExp::~TRegExp(v4);
    MEMORY[0x1B3EA8670]();
  }
  uint64_t v5 = (TRegExp *)*((void *)this + 5);
  if (v5)
  {
    TRegExp::~TRegExp(v5);
    MEMORY[0x1B3EA8670]();
  }
  uint64_t v6 = (TRegExp *)*((void *)this + 6);
  if (v6)
  {
    TRegExp::~TRegExp(v6);
    MEMORY[0x1B3EA8670]();
  }
}

uint64_t TDecompounder::isValidWord(TDecompounder *this, int **a2, __int32 **a3, int a4, int a5)
{
  if (a4 && (a5 & 1) != 0) {
    return 0;
  }
  __int16 v43 = (unsigned int *)v45;
  long long v44 = xmmword_1B25607E0;
  char v46 = 1;
  TWord::getTokenName(a3, (uint64_t)&v43);
  uint64_t v11 = *((void *)this + 1);
  uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(v11 + 5616));
  if (!*(unsigned char *)(v11 + TParam::getValidConfig((TParam *)(v11 + 5616), ActiveConfigHandle) + 5768)) {
    goto LABEL_44;
  }
  uint64_t v13 = *((void *)this + 1);
  uint64_t v14 = TParam::getActiveConfigHandle((TParam *)(v13 + 5120));
  if (!*(unsigned char *)(v13 + TParam::getValidConfig((TParam *)(v13 + 5120), v14) + 5272))
  {
    uint64_t v17 = (void *)*((void *)this + 3);
    if (v17)
    {
      if (*((void *)&v44 + 1) >= (unint64_t)v44)
      {
        if (v46)
        {
          LODWORD(v39) = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v43, *((unint64_t *)&v44 + 1), (int *)&v39, 1uLL);
          uint64_t v18 = v43;
          --*((void *)&v44 + 1);
        }
        else
        {
          uint64_t v18 = v43;
          if ((void)v44) {
            v43[(void)v44 - 1] = 0;
          }
        }
      }
      else
      {
        uint64_t v18 = v43;
        v43[*((void *)&v44 + 1)] = 0;
      }
      if (TRegExp::match(v17, v18, 0)) {
        goto LABEL_51;
      }
    }
  }
  if (a4)
  {
    unint64_t v15 = (void *)*((void *)this + 5);
    if (v15)
    {
      if (*((void *)&v44 + 1) >= (unint64_t)v44)
      {
        if (v46)
        {
          LODWORD(v39) = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v43, *((unint64_t *)&v44 + 1), (int *)&v39, 1uLL);
          uint64_t v16 = v43;
          --*((void *)&v44 + 1);
        }
        else
        {
          uint64_t v16 = v43;
          if ((void)v44) {
            v43[(void)v44 - 1] = 0;
          }
        }
      }
      else
      {
        uint64_t v16 = v43;
        v43[*((void *)&v44 + 1)] = 0;
      }
      if (TRegExp::match(v15, v16, 0)) {
        goto LABEL_51;
      }
    }
    if (a5)
    {
LABEL_23:
      uint64_t v19 = (void *)*((void *)this + 4);
      if (v19)
      {
        if (*((void *)&v44 + 1) < (unint64_t)v44)
        {
          char v20 = v43;
          v43[*((void *)&v44 + 1)] = 0;
          goto LABEL_43;
        }
        if (v46)
        {
LABEL_33:
          LODWORD(v39) = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v43, *((unint64_t *)&v44 + 1), (int *)&v39, 1uLL);
          char v20 = v43;
          --*((void *)&v44 + 1);
          goto LABEL_43;
        }
        char v20 = v43;
        if ((void)v44) {
          v43[(void)v44 - 1] = 0;
        }
LABEL_43:
        if (TRegExp::match(v19, v20, 0)) {
          goto LABEL_51;
        }
        goto LABEL_44;
      }
      goto LABEL_44;
    }
    if (a4) {
      goto LABEL_44;
    }
  }
  else if (a5)
  {
    goto LABEL_23;
  }
  uint64_t v19 = (void *)*((void *)this + 6);
  if (v19)
  {
    if (*((void *)&v44 + 1) < (unint64_t)v44)
    {
      char v20 = v43;
      v43[*((void *)&v44 + 1)] = 0;
      goto LABEL_43;
    }
    if (v46) {
      goto LABEL_33;
    }
    char v20 = v43;
    if ((void)v44) {
      v43[(void)v44 - 1] = 0;
    }
    goto LABEL_43;
  }
LABEL_44:
  uint64_t v21 = *((void *)this + 1);
  uint64_t v22 = TParam::getActiveConfigHandle((TParam *)(v21 + 5368));
  if (*(unsigned char *)(v21 + TParam::getValidConfig((TParam *)(v21 + 5368), v22) + 5520)) {
    BOOL v23 = a5 == 0;
  }
  else {
    BOOL v23 = 1;
  }
  if (v23) {
    goto LABEL_52;
  }
  int v24 = **a2;
  {
    operator new();
  }
  int isUpper = TLocaleInfo::isUpper(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v24);
  int v26 = *v43;
  {
    operator new();
  }
  if (isUpper == TLocaleInfo::isUpper(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v26))
  {
LABEL_52:
    uint64_t v27 = *((void *)this + 1);
    uint64_t v28 = TParam::getActiveConfigHandle((TParam *)(v27 + 6112));
    uint64_t v10 = 1;
    if (*(unsigned char *)(v27 + TParam::getValidConfig((TParam *)(v27 + 6112), v28) + 6264)) {
      BOOL v29 = a5 == 0;
    }
    else {
      BOOL v29 = 1;
    }
    if (v29) {
      goto LABEL_99;
    }
    unint64_t v39 = (__int32 *)v41;
    long long v40 = xmmword_1B25607E0;
    char v42 = 1;
    TWord::getCategoryTag((uint64_t)a2, &v39);
    char v35 = (__int32 *)v37;
    long long v36 = xmmword_1B25607E0;
    char v38 = 1;
    TWord::getCategoryTag((uint64_t)a3, &v35);
    if (*((void *)&v36 + 1) >= (unint64_t)v36)
    {
      if (v38)
      {
        int v47 = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v35, *((unint64_t *)&v36 + 1), &v47, 1uLL);
        int v30 = v35;
        --*((void *)&v36 + 1);
      }
      else
      {
        int v30 = v35;
        if ((void)v36) {
          v35[(void)v36 - 1] = 0;
        }
      }
    }
    else
    {
      int v30 = v35;
      v35[*((void *)&v36 + 1)] = 0;
    }
    if (!wcscmp(v30, dword_1B2563CAC)) {
      goto LABEL_93;
    }
    if (*((void *)&v40 + 1) >= (unint64_t)v40)
    {
      if (v42)
      {
        int v47 = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v39, *((unint64_t *)&v40 + 1), &v47, 1uLL);
        uint64_t v31 = v39;
        --*((void *)&v40 + 1);
      }
      else
      {
        uint64_t v31 = v39;
        if ((void)v40) {
          v39[(void)v40 - 1] = 0;
        }
      }
    }
    else
    {
      uint64_t v31 = v39;
      v39[*((void *)&v40 + 1)] = 0;
    }
    if (!wcscmp(v31, dword_1B2563CAC)) {
      goto LABEL_93;
    }
    if (*((void *)&v40 + 1) >= (unint64_t)v40)
    {
      if (v42)
      {
        int v47 = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v39, *((unint64_t *)&v40 + 1), &v47, 1uLL);
        unint64_t v32 = v39;
        --*((void *)&v40 + 1);
      }
      else
      {
        unint64_t v32 = v39;
        if ((void)v40) {
          v39[(void)v40 - 1] = 0;
        }
      }
    }
    else
    {
      unint64_t v32 = v39;
      v39[*((void *)&v40 + 1)] = 0;
    }
    if (*((void *)&v36 + 1) >= (unint64_t)v36)
    {
      if (v38)
      {
        int v47 = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v35, *((unint64_t *)&v36 + 1), &v47, 1uLL);
        uint64_t v33 = v35;
        --*((void *)&v36 + 1);
      }
      else
      {
        uint64_t v33 = v35;
        if ((void)v36) {
          v35[(void)v36 - 1] = 0;
        }
      }
    }
    else
    {
      uint64_t v33 = v35;
      v35[*((void *)&v36 + 1)] = 0;
    }
    if (!wcsncmp(v32, v33, 2uLL))
    {
LABEL_93:
      if (v38 && v35 != (__int32 *)v37 && v35) {
        MEMORY[0x1B3EA8630]();
      }
      if (v42 && v39 != (__int32 *)v41 && v39) {
        MEMORY[0x1B3EA8630]();
      }
      goto LABEL_99;
    }
    if (v38 && v35 != (__int32 *)v37 && v35) {
      MEMORY[0x1B3EA8630]();
    }
    if (v42 && v39 != (__int32 *)v41 && v39) {
      MEMORY[0x1B3EA8630]();
    }
  }
LABEL_51:
  uint64_t v10 = 0;
LABEL_99:
  if (v46 && v43 != (unsigned int *)v45 && v43) {
    MEMORY[0x1B3EA8630]();
  }
  return v10;
}

void sub_1B1BEFEEC(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1070C40ADD13FEBLL);
  if (LOBYTE(STACK[0xC70]))
  {
    unint64_t v4 = STACK[0x858];
    if (STACK[0x858] != v2)
    {
      if (v4) {
        MEMORY[0x1B3EA8630](v4, 0x1000C8052888210);
      }
    }
  }
  _Unwind_Resume(a1);
}

void TDecompounder::decompound(TDecompounder *this, const TWord *a2, TFsa *a3)
{
  uint64_t v3 = MEMORY[0x1F4188790](this, a2);
  uint64_t v137 = v4;
  uint64_t v6 = (TWord *)v5;
  uint64_t v7 = (TAllocator **)v3;
  uint64_t v167 = *MEMORY[0x1E4F143B8];
  uint64_t v159 = v161;
  long long v160 = xmmword_1B25607E0;
  char v162 = 1;
  TWord::getWrittenForm(v5, (uint64_t)&v159);
  uint64_t WordSpec = TWord::getWordSpec(v6);
  long long v155 = v157;
  long long v156 = xmmword_1B25607E0;
  char v158 = 1;
  char v8 = (int *)TStringParam::get((TAllocator *)((char *)v7[1] + 10736));
  TBuffer<wchar_t>::assign((uint64_t)&v155, v8);
  *((_DWORD *)v155 + 70) = 48;
  v163.__vftable = 0;
  std::vector<TState *>::vector(&v153, *((void *)&v160 + 1) + 1, &v163);
  long long v132 = (int **)v6;
  int v9 = TFsa::newState((TAllocator *)v137, 0);
  *(void *)id v153 = v9;
  TFsa::addExtremity((uint64_t)v137, *(void *)v153, 0);
  unint64_t v10 = *((void *)&v160 + 1);
  if (*((void *)&v160 + 1))
  {
    for (unint64_t i = 0; i < v10; ++i)
    {
      uint64_t v134 = *((void *)v153 + i);
      if (!v134) {
        continue;
      }
      uint64_t v149 = v151;
      long long v150 = xmmword_1B25607E0;
      char v152 = 1;
      if (v10 >= (unint64_t)v160)
      {
        if (v162)
        {
          LODWORD(v163.__vftable) = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v159, v10, (int *)&v163, 1uLL);
          double v12 = v159;
          --*((void *)&v160 + 1);
        }
        else
        {
          double v12 = v159;
          if ((void)v160) {
            *(_DWORD *)&v159[4 * v160 - 4] = 0;
          }
        }
      }
      else
      {
        double v12 = v159;
        *(_DWORD *)&v159[4 * v10] = 0;
      }
      TBuffer<wchar_t>::assign((uint64_t)&v149, (int *)&v12[4 * i]);
      unsigned __int8 v146 = 0;
      uint64_t v147 = 0;
      uint64_t v148 = 0;
      uint64_t v13 = v7[1];
      uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle((TAllocator *)((char *)v13 + 5120));
      if (!*((unsigned char *)v13 + TParam::getValidConfig((TAllocator *)((char *)v13 + 5120), ActiveConfigHandle) + 5272)
        || (unint64_t v15 = v7[2]) == 0
        || !*((void *)v15 + 25))
      {
        BOOL v23 = *v7;
        if (*((void *)&v150 + 1) >= (unint64_t)v150)
        {
          if (v152)
          {
            LODWORD(v163.__vftable) = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v149, *((unint64_t *)&v150 + 1), (int *)&v163, 1uLL);
            int v24 = (int *)v149;
            --*((void *)&v150 + 1);
          }
          else
          {
            int v24 = (int *)v149;
            if ((void)v150) {
              *(_DWORD *)&v149[4 * v150 - 4] = 0;
            }
          }
        }
        else
        {
          int v24 = (int *)v149;
          *(_DWORD *)&v149[4 * *((void *)&v150 + 1)] = 0;
        }
        uint64_t v25 = v7[1];
        uint64_t v26 = TParam::getActiveConfigHandle((TAllocator *)((char *)v25 + 16456));
        size_t v27 = *((int *)v25 + TParam::getValidConfig((TAllocator *)((char *)v25 + 16456), v26) + 4154);
        uint64_t v28 = v7[1];
        uint64_t v29 = TParam::getActiveConfigHandle((TAllocator *)((char *)v28 + 16104));
        size_t v30 = *((int *)v28 + TParam::getValidConfig((TAllocator *)((char *)v28 + 16104), v29) + 4066);
        if (*((void *)&v156 + 1) >= (unint64_t)v156)
        {
          if (v158)
          {
            LODWORD(v163.__vftable) = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v155, *((unint64_t *)&v156 + 1), (int *)&v163, 1uLL);
            uint64_t v31 = v155;
            --*((void *)&v156 + 1);
          }
          else
          {
            uint64_t v31 = v155;
            if ((void)v156) {
              *(_DWORD *)&v155[4 * v156 - 4] = 0;
            }
          }
        }
        else
        {
          uint64_t v31 = v155;
          *(_DWORD *)&v155[4 * *((void *)&v156 + 1)] = 0;
        }
        v163.__vftable = (std::exception_vtbl *)v165;
        long long v164 = xmmword_1B25607E0;
        char v166 = 1;
        int v32 = *v24;
        if (*v24)
        {
          uint64_t v33 = v24 + 1;
          do
          {
            LODWORD(v143) = v32;
            TBuffer<wchar_t>::insert((uint64_t)&v163, *((unint64_t *)&v164 + 1), (int *)&v143, 1uLL);
            if (*((void *)&v164 + 1) >= (unint64_t)v164)
            {
              if (v166)
              {
                LODWORD(v143) = 0;
                TBuffer<wchar_t>::insert((uint64_t)&v163, *((unint64_t *)&v164 + 1), (int *)&v143, 1uLL);
                char v34 = (__int32 *)v163.__vftable;
                --*((void *)&v164 + 1);
              }
              else
              {
                char v34 = (__int32 *)v163.__vftable;
                if ((void)v164) {
                  *((_DWORD *)v163.__vftable + v164 - 1) = 0;
                }
              }
            }
            else
            {
              char v34 = (__int32 *)v163.__vftable;
              *((_DWORD *)&v163.~exception + *((void *)&v164 + 1)) = 0;
            }
            BOOL HeadClonesCollated = TLexicon::findHeadClonesCollated(v23, v34, v31, v27, v30, &v146);
            int v36 = *v33++;
            int v32 = v36;
            if (v36) {
              BOOL v37 = HeadClonesCollated;
            }
            else {
              BOOL v37 = 0;
            }
          }
          while (v37);
          if (v166 && v163.__vftable != (std::exception_vtbl *)v165 && v163.__vftable) {
            MEMORY[0x1B3EA8630]();
          }
        }
        goto LABEL_57;
      }
      uint64_t v16 = (uint64_t *)*((void *)v15 + 19);
      uint64_t v17 = (uint64_t *)*((void *)v15 + 20);
      if (v16 != v17)
      {
        while (!*v16)
        {
          if (++v16 == v17)
          {
            uint64_t v16 = v17;
            break;
          }
        }
      }
      uint64_t v18 = *v7;
      uint64_t v19 = *v16;
      unint64_t v20 = *((void *)&v150 + 1);
      unint64_t v21 = v150;
      if (*((void *)&v150 + 1) >= (unint64_t)v150)
      {
        if (v152)
        {
          LODWORD(v143) = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v149, *((unint64_t *)&v150 + 1), (int *)&v143, 1uLL);
          unint64_t v20 = --*((void *)&v150 + 1);
          uint64_t v22 = (int *)v149;
          unint64_t v21 = v150;
        }
        else
        {
          uint64_t v22 = (int *)v149;
          if (!(void)v150) {
            goto LABEL_53;
          }
          *(_DWORD *)&v149[4 * v150 - 4] = 0;
        }
      }
      else
      {
        uint64_t v22 = (int *)v149;
        *(_DWORD *)&v149[4 * *((void *)&v150 + 1)] = 0;
      }
      if (v20 >= v21)
      {
        if (v152)
        {
          LODWORD(v143) = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v149, v20, (int *)&v143, 1uLL);
          char v38 = (int *)v149;
          --*((void *)&v150 + 1);
          goto LABEL_56;
        }
        if (v21) {
          v22[v21 - 1] = 0;
        }
      }
      else
      {
        v22[v20] = 0;
      }
LABEL_53:
      char v38 = v22;
LABEL_56:
      unint64_t v39 = v7[1];
      uint64_t v40 = TParam::getActiveConfigHandle((TAllocator *)((char *)v39 + 16456));
      size_t v41 = *((int *)v39 + TParam::getValidConfig((TAllocator *)((char *)v39 + 16456), v40) + 4154);
      char v42 = v7[1];
      uint64_t v43 = TParam::getActiveConfigHandle((TAllocator *)((char *)v42 + 16104));
      uint64_t ValidConfig = TParam::getValidConfig((TAllocator *)((char *)v42 + 16104), v43);
      fsaSearch(v18, v19, v22, v38, (__int32 *)&v163, &v163, 0, v41, *((int *)v42 + ValidConfig + 4066), &v146);
LABEL_57:
      uint64_t v143 = 0;
      float v144 = 0;
      unsigned int v145 = 0;
      __int16 v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v145, 1uLL);
      *(void *)__int16 v45 = v134;
      int v47 = v45 + 8;
      char v49 = (char *)v143;
      int v48 = v144;
      char v50 = v45;
      if (v144 != v143)
      {
        do
        {
          uint64_t v51 = *((void *)v48 - 1);
          v48 -= 8;
          *((void *)v50 - 1) = v51;
          v50 -= 8;
        }
        while (v48 != v49);
        int v48 = (char *)v143;
      }
      uint64_t v143 = v50;
      float v144 = v45 + 8;
      unsigned int v145 = &v45[8 * v46];
      if (v48) {
        operator delete(v48);
      }
      unint64_t v133 = i;
      float v144 = v47;
      unint64_t v52 = v147;
      if (v147 != v146)
      {
        unint64_t v53 = 0;
        unint64_t v52 = (char *)v146;
        do
        {
          char v54 = &v52[32 * v53];
          char v56 = *(TWord **)v54;
          uint64_t v55 = *((void *)v54 + 1);
          char v57 = v7[1];
          uint64_t v58 = TParam::getActiveConfigHandle((TAllocator *)((char *)v57 + 5368));
          if (*((unsigned char *)v57 + TParam::getValidConfig((TAllocator *)((char *)v57 + 5368), v58) + 5520)) {
            *((void *)v146 + 4 * v53 + 2) &= 0xFFFFFFFFFFFFFFBCLL;
          }
          uint64_t v59 = *TWord::getOptionalTagBits(v56);
          uint64_t v136 = v55 + v133;
          if ((v59 & 0x80) != 0)
          {
            if (v133 && *((void *)&v160 + 1) != v136) {
              goto LABEL_78;
            }
          }
          else if (TDecompounder::isValidWord((TDecompounder *)v7, v132, (__int32 **)v56, v133 == 0, *((void *)&v160 + 1) == v55 + v133))
          {
            uint64_t v60 = v7[1];
            uint64_t v61 = TParam::getActiveConfigHandle((TAllocator *)((char *)v60 + 5864));
            if (*((unsigned char *)v60 + TParam::getValidConfig((TAllocator *)((char *)v60 + 5864), v61) + 6016)) {
              BOOL v62 = WordSpec == 0;
            }
            else {
              BOOL v62 = 1;
            }
            if (v62)
            {
              if (!*((void *)v153 + v136))
              {
                long long v63 = TFsa::newState((TAllocator *)v137, 0);
                *((void *)v153 + v136) = v63;
              }
              operator new();
            }
LABEL_78:
            if (TWord::getWordSpec(v56) && v144 != v143)
            {
              uint64_t v64 = 0;
              unint64_t v65 = (v144 - (unsigned char *)v143) >> 3;
              if (v65 <= 1) {
                unint64_t v65 = 1;
              }
              unint64_t v135 = v65;
              while (1)
              {
                uint64_t v66 = *((void *)v143 + v64);
                uint64_t v141 = 0;
                float v142 = 0;
                std::string __p = 0;
                uint64_t v67 = *(void **)(v66 + 16);
                if (!v67) {
                  goto LABEL_129;
                }
                do
                {
                  if ((v59 & 0x80) != 0 && (*(unsigned char *)TWord::getOptionalTagBits(*(TWord **)(*v67 + 8)) & 0x80) != 0)
                  {
                    long long v71 = v141;
                    if (v141 >= v142)
                    {
                      uint64_t v73 = (v141 - (unsigned char *)__p) >> 3;
                      if ((unint64_t)(v73 + 1) >> 61) {
                        std::vector<int>::__throw_length_error[abi:ne180100]();
                      }
                      unint64_t v74 = (v142 - (unsigned char *)__p) >> 2;
                      if (v74 <= v73 + 1) {
                        unint64_t v74 = v73 + 1;
                      }
                      if ((unint64_t)(v142 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v75 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v75 = v74;
                      }
                      if (v75) {
                        uint64_t v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v142, v75);
                      }
                      else {
                        uint64_t v76 = 0;
                      }
                      char v77 = &v76[8 * v73];
                      *(void *)char v77 = v67;
                      long long v72 = v77 + 8;
                      uint64_t v79 = (char *)__p;
                      long long v78 = v141;
                      if (v141 != __p)
                      {
                        do
                        {
                          uint64_t v80 = *((void *)v78 - 1);
                          v78 -= 8;
                          *((void *)v77 - 1) = v80;
                          v77 -= 8;
                        }
                        while (v78 != v79);
                        long long v78 = (char *)__p;
                      }
                      std::string __p = v77;
                      uint64_t v141 = v72;
                      float v142 = &v76[8 * v75];
                      if (v78) {
                        operator delete(v78);
                      }
                    }
                    else
                    {
                      *(void *)uint64_t v141 = v67;
                      long long v72 = v71 + 8;
                    }
                    uint64_t v141 = v72;
                  }
                  else
                  {
                    uint64_t v68 = v7[1];
                    uint64_t v69 = TParam::getActiveConfigHandle((TAllocator *)((char *)v68 + 5864));
                    if (*((unsigned char *)v68 + TParam::getValidConfig((TAllocator *)((char *)v68 + 5864), v69) + 6016))
                    {
                      tknPrintf("Error: pron predictor is not supported during decompounding in Tennessee since pronunciations were not ported over (see rdar://91574959).\n", v70);
                      std::string::basic_string[abi:ne180100]<0>(v138, "");
                      TException::TException(&v163, (long long *)v138);
                      v163.__vftable = (std::exception_vtbl *)&unk_1F0A33B90;
                      if (v165[7] >= 0) {
                        uint64_t v129 = (const char *)&v164;
                      }
                      else {
                        uint64_t v129 = (const char *)v164;
                      }
                      conditionalAssert(v129, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/tkn/decompounder.cpp", 769);
                      TException::~TException(&v163);
                      if (v139 < 0) {
                        operator delete(v138[0]);
                      }
                      exception = __cxa_allocate_exception(0x20uLL);
                      std::string::basic_string[abi:ne180100]<0>(&v163, "");
                      TException::TException(exception, (long long *)&v163);
                      void *exception = &unk_1F0A33B90;
                    }
                  }
                  uint64_t v67 = (void *)v67[4];
                }
                while (v67);
                if (__p == v141) {
                  goto LABEL_129;
                }
                if (TState::getTransCount(v66, 0) != (v141 - (unsigned char *)__p) >> 3) {
                  break;
                }
                if (__p)
                {
                  uint64_t v141 = (char *)__p;
                  operator delete(__p);
                }
                if (++v64 == v135) {
                  goto LABEL_135;
                }
              }
              long long v81 = TFsa::newState((TAllocator *)v137, 0);
              uint64_t v82 = v81;
              uint64_t v83 = v144;
              if (v144 >= v145)
              {
                uint64_t v85 = (v144 - (unsigned char *)v143) >> 3;
                if ((unint64_t)(v85 + 1) >> 61) {
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v86 = (v145 - (unsigned char *)v143) >> 2;
                if (v86 <= v85 + 1) {
                  unint64_t v86 = v85 + 1;
                }
                if ((unint64_t)(v145 - (unsigned char *)v143) >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v87 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v87 = v86;
                }
                if (v87) {
                  uint64_t v88 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v145, v87);
                }
                else {
                  uint64_t v88 = 0;
                }
                uint64_t v89 = &v88[8 * v85];
                *(void *)uint64_t v89 = v82;
                uint64_t v84 = v89 + 8;
                uint64_t v91 = (char *)v143;
                uint64_t v90 = v144;
                if (v144 != v143)
                {
                  do
                  {
                    uint64_t v92 = *((void *)v90 - 1);
                    v90 -= 8;
                    *((void *)v89 - 1) = v92;
                    v89 -= 8;
                  }
                  while (v90 != v91);
                  uint64_t v90 = (char *)v143;
                }
                uint64_t v143 = v89;
                float v144 = v84;
                unsigned int v145 = &v88[8 * v87];
                if (v90) {
                  operator delete(v90);
                }
              }
              else
              {
                *(void *)float v144 = v81;
                uint64_t v84 = v83 + 8;
              }
              float v144 = v84;
              unint64_t v93 = __p;
              if (v141 != __p)
              {
                unint64_t v94 = 0;
                do
                {
                  TFsa::moveTrans((uint64_t)v137, v93[v94], *(void *)(v93[v94] + 24), *((void *)v144 - 1));
                  ++v94;
                  unint64_t v93 = __p;
                }
                while (v94 < (v141 - (unsigned char *)__p) >> 3);
              }
              if (*(void *)(v66 + 24)) {
                operator new();
              }
LABEL_129:
              if (!*((void *)v153 + v136))
              {
                uint64_t v95 = TFsa::newState((TAllocator *)v137, 0);
                *((void *)v153 + v136) = v95;
              }
              operator new();
            }
          }
LABEL_135:
          ++v53;
          unint64_t v52 = (char *)v146;
        }
        while (v53 < (v147 - (unsigned char *)v146) >> 5);
      }
      if (v143)
      {
        float v144 = (char *)v143;
        operator delete(v143);
        unint64_t v52 = (char *)v146;
      }
      if (v52)
      {
        uint64_t v147 = v52;
        operator delete(v52);
      }
      unint64_t i = v133;
      if (v152 && v149 != v151 && v149) {
        MEMORY[0x1B3EA8630]();
      }
      unint64_t v10 = *((void *)&v160 + 1);
    }
  }
  uint64_t v96 = *(v154 - 1);
  if (v96) {
    TFsa::addExtremity((uint64_t)v137, v96, 1u);
  }
  std::vector<unsigned long>::vector(&v163, (uint64_t)(v137[7] - v137[6]) >> 3);
  uint64_t v149 = 0;
  long long v150 = 0uLL;
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)&v149, v137[5]);
  char v98 = (void *)v137[6];
  char v97 = (void *)v137[7];
  if (v98 != v97)
  {
    while (!*v98)
    {
      if (++v98 == v97) {
        goto LABEL_181;
      }
    }
  }
  if (v98 != v97)
  {
    do
    {
      uint64_t v99 = (void *)*v98;
      if (!*(void *)(*v98 + 24) && v99[5] == -1)
      {
        uint64_t v100 = v150;
        if ((unint64_t)v150 >= *((void *)&v150 + 1))
        {
          uint64_t v102 = (uint64_t)(v150 - (void)v149) >> 3;
          if ((unint64_t)(v102 + 1) >> 61) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v103 = (uint64_t)(*((void *)&v150 + 1) - (void)v149) >> 2;
          if (v103 <= v102 + 1) {
            unint64_t v103 = v102 + 1;
          }
          if (*((void *)&v150 + 1) - (void)v149 >= 0x7FFFFFFFFFFFFFF8uLL) {
            unint64_t v104 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v104 = v103;
          }
          if (v104) {
            unint64_t v105 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v150 + 8, v104);
          }
          else {
            unint64_t v105 = 0;
          }
          uint64_t v106 = &v105[8 * v102];
          *(void *)uint64_t v106 = v99;
          unint64_t v101 = v106 + 8;
          uint64_t v108 = v149;
          uint64_t v107 = (char *)v150;
          if ((char *)v150 != v149)
          {
            do
            {
              uint64_t v109 = *((void *)v107 - 1);
              v107 -= 8;
              *((void *)v106 - 1) = v109;
              v106 -= 8;
            }
            while (v107 != v108);
            uint64_t v107 = v149;
          }
          uint64_t v149 = v106;
          *(void *)&long long v150 = v101;
          *((void *)&v150 + 1) = &v105[8 * v104];
          if (v107) {
            operator delete(v107);
          }
        }
        else
        {
          *(void *)long long v150 = v99;
          unint64_t v101 = (void *)(v100 + 8);
        }
        *(void *)&long long v150 = v101;
      }
      uint64_t TransCount = TState::getTransCount((uint64_t)v99, 1u);
      *((void *)&v163.~exception + *v99) = TransCount;
      uint64_t v111 = v98 + 1;
      while (v111 != v97)
      {
        if (*v111++)
        {
          char v98 = v111 - 1;
          goto LABEL_180;
        }
      }
      char v98 = v97;
LABEL_180:
      ;
    }
    while (v98 != (void *)v137[7]);
  }
LABEL_181:
  unint64_t v113 = (char *)v150;
  if ((char *)v150 != v149)
  {
    unint64_t v114 = 0;
    unint64_t v113 = v149;
    do
    {
      unint64_t v115 = *(void **)&v113[8 * v114];
      for (uint64_t j = (void *)v115[2]; j; uint64_t j = (void *)j[4])
      {
        uint64_t v117 = (void *)j[3];
        uint64_t v118 = v163.__vftable;
        --*((void *)&v163.~exception + *v117);
        if (!*((void *)&v118->~exception + *v117))
        {
          uint64_t v119 = v150;
          if ((unint64_t)v150 >= *((void *)&v150 + 1))
          {
            uint64_t v121 = (uint64_t)(v150 - (void)v149) >> 3;
            if ((unint64_t)(v121 + 1) >> 61) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v122 = (uint64_t)(*((void *)&v150 + 1) - (void)v149) >> 2;
            if (v122 <= v121 + 1) {
              unint64_t v122 = v121 + 1;
            }
            if (*((void *)&v150 + 1) - (void)v149 >= 0x7FFFFFFFFFFFFFF8uLL) {
              unint64_t v123 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v123 = v122;
            }
            if (v123) {
              long long v124 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v150 + 8, v123);
            }
            else {
              long long v124 = 0;
            }
            long long v125 = &v124[8 * v121];
            *(void *)long long v125 = v117;
            uint64_t v120 = v125 + 8;
            char v127 = v149;
            long long v126 = (char *)v150;
            if ((char *)v150 != v149)
            {
              do
              {
                uint64_t v128 = *((void *)v126 - 1);
                v126 -= 8;
                *((void *)v125 - 1) = v128;
                v125 -= 8;
              }
              while (v126 != v127);
              long long v126 = v149;
            }
            uint64_t v149 = v125;
            *(void *)&long long v150 = v120;
            *((void *)&v150 + 1) = &v124[8 * v123];
            if (v126) {
              operator delete(v126);
            }
          }
          else
          {
            *(void *)long long v150 = v117;
            uint64_t v120 = (void *)(v119 + 8);
          }
          *(void *)&long long v150 = v120;
        }
        if (*j) {
          MEMORY[0x1B3EA8670](*j, 0x1060C40A1FB9E56);
        }
      }
      TFsa::deleteState(v137, v115);
      ++v114;
      unint64_t v113 = v149;
    }
    while (v114 < (uint64_t)(v150 - (void)v149) >> 3);
  }
  if (v113)
  {
    *(void *)&long long v150 = v113;
    operator delete(v113);
  }
  if (v163.__vftable)
  {
    *(std::exception *)&long long v164 = v163;
    operator delete(v163.__vftable);
  }
  if (v153)
  {
    long long v154 = v153;
    operator delete(v153);
  }
  if (v158 && v155 != v157 && v155) {
    MEMORY[0x1B3EA8630]();
  }
  if (v162 && v159 != v161 && v159) {
    MEMORY[0x1B3EA8630]();
  }
}

void sub_1B1BF0FB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  unint64_t v39 = (void *)STACK[0xD60];
  if (STACK[0xD60])
  {
    STACK[0xD68] = (unint64_t)v39;
    operator delete(v39);
  }
  uint64_t v40 = (void *)STACK[0x508];
  if (STACK[0x508])
  {
    STACK[0x510] = (unint64_t)v40;
    operator delete(v40);
  }
  if (LOBYTE(STACK[0x938]))
  {
    unint64_t v41 = STACK[0x520];
    if (STACK[0x520] != a11)
    {
      if (v41) {
        MEMORY[0x1B3EA8630](v41, 0x1000C8052888210);
      }
    }
  }
  if (LOBYTE(STACK[0xD58]))
  {
    if (STACK[0x940] != a12 && STACK[0x940] != 0) {
      MEMORY[0x1B3EA8630]();
    }
  }
  _Unwind_Resume(a1);
}

void fsaSearch(TAllocator *a1, uint64_t a2, int *a3, int *a4, __int32 *a5, _DWORD *a6, int a7, size_t a8, size_t a9, void **a10)
{
  uint64_t v14 = a2;
  if (*(void *)(a2 + 40) != -1)
  {
    *a6 = 0;
    HeadClone = (__int32 **)TLexicon::findHeadClone(a1, a5);
    if (!HeadClone) {
      HeadClone = (__int32 **)TLexicon::addTempWord(a1, a5, 0, 0, 0);
    }
    char v49 = (unsigned int *)v51;
    long long v50 = xmmword_1B25607E0;
    char v52 = 1;
    __int16 v45 = (const __int32 *)v47;
    long long v46 = xmmword_1B25607E0;
    char v48 = 1;
    TWord::getWrittenForm(HeadClone, (uint64_t)&v49);
    TBuffer<wchar_t>::resize((uint64_t)&v45, 0);
    TBuffer<wchar_t>::insert((uint64_t)&v45, 0, a3, a4 - a3);
    if (*((void *)&v46 + 1) >= (unint64_t)v46)
    {
      if (v48)
      {
        v53[0] = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v45, *((unint64_t *)&v46 + 1), v53, 1uLL);
        uint64_t v17 = v45;
        --*((void *)&v46 + 1);
      }
      else
      {
        uint64_t v17 = v45;
        if ((void)v46) {
          v45[v46 - 1] = 0;
        }
      }
    }
    else
    {
      uint64_t v17 = v45;
      v45[*((void *)&v46 + 1)] = 0;
    }
    if (*((void *)&v50 + 1) >= (unint64_t)v50)
    {
      if (v52)
      {
        v53[0] = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v49, *((unint64_t *)&v50 + 1), v53, 1uLL);
        uint64_t v18 = v49;
        --*((void *)&v50 + 1);
      }
      else
      {
        uint64_t v18 = v49;
        if ((void)v50) {
          v49[(void)v50 - 1] = 0;
        }
      }
    }
    else
    {
      uint64_t v18 = v49;
      v49[*((void *)&v50 + 1)] = 0;
    }
    uint64_t Score = TLexicon::makeScore((uint64_t)a1, v17, v18, a8, a9);
    unint64_t v20 = HeadClone;
    unint64_t v21 = (__int32 **)*((void *)&v46 + 1);
    unint64_t v22 = (unint64_t)a10[2];
    BOOL v23 = (__int32 ***)a10[1];
    if ((unint64_t)v23 >= v22)
    {
      uint64_t v40 = v19;
      uint64_t v41 = v14;
      uint64_t v25 = ((char *)v23 - (unsigned char *)*a10) >> 5;
      unint64_t v26 = v25 + 1;
      if ((unint64_t)(v25 + 1) >> 59) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v27 = v22 - (void)*a10;
      if (v27 >> 4 > v26) {
        unint64_t v26 = v27 >> 4;
      }
      if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v28 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v28 = v26;
      }
      if (v28) {
        uint64_t v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)(a10 + 2), v28);
      }
      else {
        uint64_t v29 = 0;
      }
      size_t v30 = (__int32 ***)&v29[32 * v25];
      uint64_t v31 = &v29[32 * v28];
      *size_t v30 = v20;
      v30[1] = v21;
      void v30[2] = (__int32 **)Score;
      void v30[3] = v40;
      int v24 = v30 + 4;
      uint64_t v33 = (char *)*a10;
      int v32 = (char *)a10[1];
      if (v32 == *a10)
      {
        uint64_t v14 = v41;
      }
      else
      {
        uint64_t v14 = v41;
        do
        {
          long long v34 = *((_OWORD *)v32 - 1);
          *((_OWORD *)v30 - 2) = *((_OWORD *)v32 - 2);
          *((_OWORD *)v30 - 1) = v34;
          v30 -= 4;
          v32 -= 32;
        }
        while (v32 != v33);
        int v32 = (char *)*a10;
      }
      *a10 = v30;
      a10[1] = v24;
      a10[2] = v31;
      if (v32) {
        operator delete(v32);
      }
    }
    else
    {
      *BOOL v23 = v20;
      v23[1] = v21;
      int v24 = v23 + 4;
      v23[2] = (__int32 **)Score;
      v23[3] = v19;
    }
    a10[1] = v24;
    if (v48 && v45 != (const __int32 *)v47 && v45) {
      MEMORY[0x1B3EA8630]();
    }
    if (v52 && v49 != (unsigned int *)v51 && v49) {
      MEMORY[0x1B3EA8630]();
    }
  }
  for (unint64_t i = *(uint64_t **)(v14 + 24); i; unint64_t i = (uint64_t *)i[5])
  {
    uint64_t v36 = *i;
    if (*i == 92) {
      int v37 = 1;
    }
    else {
      int v37 = a7;
    }
    if ((v37 & 1) == 0)
    {
      int v38 = *a4;
      uint64_t v39 = *((void *)a1 + 32);
      if (!v39) {
        goto LABEL_52;
      }
      if ((unint64_t)v38 < 0x10000) {
        int v38 = *(_DWORD *)(v39 + 4 * v38);
      }
      if ((unint64_t)(int)v36 < 0x10000) {
        LODWORD(v39) = *(_DWORD *)(v39 + 4 * (int)v36);
      }
      else {
LABEL_52:
      }
        uint64_t v39 = *i;
      if (v38 != v39) {
        continue;
      }
    }
    *a6 = v36;
    fsaSearch(a1, i[2], a3, &a4[v37 ^ 1], a5, a6 + 1);
  }
}

void sub_1B1BF15AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (LOBYTE(STACK[0x468]) && a19 != a14 && a19) {
    MEMORY[0x1B3EA8630]();
  }
  if (LOBYTE(STACK[0x888]))
  {
    unint64_t v20 = STACK[0x470];
    if (STACK[0x470] != a15)
    {
      if (v20) {
        MEMORY[0x1B3EA8630](v20, 0x1000C8052888210);
      }
    }
  }
  _Unwind_Resume(a1);
}

void TDecompounder::addWords(TDecompounder *this, char **a2, TGraph *a3, TSegmenter *a4)
{
  uint64_t Segment = TSegmenter::getSegment(a4, a2[2]);
  if (Segment)
  {
    uint64_t v9 = Segment;
    unsigned int v10 = *(_DWORD *)(Segment + 24);
    BOOL v11 = v10 > 5;
    int v12 = (1 << v10) & 0x2D;
    if (v11 || v12 == 0)
    {
      uint64_t v73 = (__int32 *)v75;
      long long v74 = xmmword_1B25607E0;
      char v76 = 1;
      TBuffer<wchar_t>::assign((uint64_t)&v73, *(int **)Segment);
      uint64_t v14 = *(char **)(v9 + 8);
      if (*(_DWORD *)(v9 + 24) == 1
        && (uint64_t v15 = *((void *)this + 1),
            uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(v15 + 13352)),
            *(unsigned char *)(v15 + TParam::getValidConfig((TParam *)(v15 + 13352), ActiveConfigHandle) + 13504))
        && *v14)
      {
        char v17 = 0;
        do
        {
          uint64_t v18 = TSegmenter::getSegment(a4, v14);
          uint64_t v19 = (int **)v18;
          if (!v18) {
            break;
          }
          if (**(_DWORD **)v18 != 45) {
            break;
          }
          uint64_t v20 = TSegmenter::getSegment(a4, *(char **)(v18 + 8));
          uint64_t v21 = v20;
          if (!v20) {
            break;
          }
          if (*(_DWORD *)(v20 + 24) != 1) {
            break;
          }
          uint64_t v22 = 0;
          BOOL v23 = *v19;
          while (v23[v22++])
            ;
          TBuffer<wchar_t>::insert((uint64_t)&v73, *((unint64_t *)&v74 + 1), v23, v22 - 1);
          uint64_t v25 = 0;
          unint64_t v26 = *(int **)v21;
          while (v26[v25++])
            ;
          TBuffer<wchar_t>::insert((uint64_t)&v73, *((unint64_t *)&v74 + 1), v26, v25 - 1);
          uint64_t v14 = *(char **)(v21 + 8);
          char v17 = 1;
        }
        while (*v14);
      }
      else
      {
        char v17 = 0;
      }
      uint64_t OutEdge = TVertex::getOutEdge((uint64_t)a2);
      if (!OutEdge) {
        goto LABEL_30;
      }
      char v29 = 0;
LABEL_24:
      v29 |= (*(unsigned char *)(OutEdge + 64) & 0xC0) == 0;
      while (1)
      {
        uint64_t OutEdge = *(void *)(OutEdge + 8);
        if (!OutEdge) {
          break;
        }
        if (!*(unsigned char *)(OutEdge + 32)) {
          goto LABEL_24;
        }
      }
      if (v17 & 1 | ((v29 & 1) == 0)
        || (uint64_t v30 = *((void *)this + 1),
            uint64_t v31 = TParam::getActiveConfigHandle((TParam *)(v30 + 13104)),
            *(unsigned char *)(v30 + TParam::getValidConfig((TParam *)(v30 + 13104), v31) + 13256)))
      {
LABEL_30:
        uint64_t v70 = 0;
        long long v71 = 0;
        uint64_t v72 = 0;
        int v32 = *(void **)this;
        if (*((void *)&v74 + 1) >= (unint64_t)v74)
        {
          if (v76)
          {
            v60[0] = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v73, *((unint64_t *)&v74 + 1), v60, 1uLL);
            uint64_t v33 = v73;
            --*((void *)&v74 + 1);
          }
          else
          {
            uint64_t v33 = v73;
            if ((void)v74) {
              v73[(void)v74 - 1] = 0;
            }
          }
        }
        else
        {
          uint64_t v33 = v73;
          v73[*((void *)&v74 + 1)] = 0;
        }
        long long v34 = TStringParam::get((TStringParam *)(*((void *)this + 1) + 10736));
        uint64_t v35 = *((void *)this + 1);
        uint64_t v36 = TParam::getActiveConfigHandle((TParam *)(v35 + 16456));
        size_t v37 = *(int *)(v35 + 4 * TParam::getValidConfig((TParam *)(v35 + 16456), v36) + 16616);
        uint64_t v38 = *((void *)this + 1);
        uint64_t v39 = TParam::getActiveConfigHandle((TParam *)(v38 + 16104));
        uint64_t ValidConfig = TParam::getValidConfig((TParam *)(v38 + 16104), v39);
        TLexicon::findHeadClonesCollated(v32, v33, v34, v37, *(int *)(v38 + 4 * ValidConfig + 16264), &v70);
        if (v70 == v71) {
          goto LABEL_44;
        }
        unint64_t v41 = (v71 - (unsigned char *)v70) >> 5;
        if (v41 <= 1) {
          unint64_t v41 = 1;
        }
        char v42 = (char *)v70 + 16;
        while ((*v42 & 0x35) != 0)
        {
          v42 += 32;
          if (!--v41) {
            goto LABEL_44;
          }
        }
        uint64_t v43 = (const TWord *)*((void *)v42 - 2);
        if (!v43)
        {
LABEL_44:
          long long v44 = *(TAllocator **)this;
          if (*((void *)&v74 + 1) >= (unint64_t)v74)
          {
            if (v76)
            {
              v60[0] = 0;
              TBuffer<wchar_t>::insert((uint64_t)&v73, *((unint64_t *)&v74 + 1), v60, 1uLL);
              __int16 v45 = v73;
              --*((void *)&v74 + 1);
            }
            else
            {
              __int16 v45 = v73;
              if ((void)v74) {
                v73[(void)v74 - 1] = 0;
              }
            }
          }
          else
          {
            __int16 v45 = v73;
            v73[*((void *)&v74 + 1)] = 0;
          }
          uint64_t v43 = (const TWord *)TLexicon::addTempWord(v44, v45, 0, 0, 0);
        }
        TFsa::TFsa((TFsa *)v60);
        TDecompounder::decompound(this, v43, (TFsa *)v60);
        if (v61)
        {
          uint64_t v58 = 0;
          std::vector<TVertex *>::vector(__p, (v63 - v62) >> 3, &v58);
          long long v46 = v66;
          if (v66 != v67)
          {
            while (!*v46)
            {
              if (++v46 == v67)
              {
                long long v46 = v67;
                break;
              }
            }
          }
          *((void *)__p[0] + *(void *)*v46) = a2;
          uint64_t v47 = TGraph::addVertex(a3, v14);
          char v48 = v68;
          if (v68 != v69)
          {
            while (!*v48)
            {
              if (++v48 == v69)
              {
                char v48 = v69;
                break;
              }
            }
          }
          *((void *)__p[0] + *(void *)*v48) = v47;
          uint64_t v50 = v62;
          uint64_t v49 = v63;
          if (v63 != v62)
          {
            unint64_t v51 = 0;
            do
            {
              if (*(void *)(v50 + 8 * v51) && !*((void *)__p[0] + v51))
              {
                uint64_t v52 = TGraph::addVertex(a3, 0);
                *((void *)__p[0] + v51) = v52;
                uint64_t v50 = v62;
                uint64_t v49 = v63;
              }
              ++v51;
            }
            while (v51 < (v49 - v50) >> 3);
          }
          uint64_t v54 = v64;
          uint64_t v53 = v65;
          if (v65 != v64)
          {
            unint64_t v55 = 0;
            do
            {
              uint64_t v56 = *(void *)(v54 + 8 * v55);
              if (v56)
              {
                uint64_t v57 = *(void *)v56;
                TGraph::addEdge(a3, *((void *)__p[0] + **(void **)(v56 + 24)), *((uint64_t **)__p[0] + **(void **)(v56 + 16)), *(void *)v56);
                MEMORY[0x1B3EA8670](v57, 0x1060C40A1FB9E56);
                uint64_t v54 = v64;
                uint64_t v53 = v65;
              }
              ++v55;
            }
            while (v55 < (v53 - v54) >> 3);
          }
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
        }
        TFsa::~TFsa((TFsa *)v60);
        if (v70)
        {
          long long v71 = v70;
          operator delete(v70);
        }
      }
      if (v76 && v73 != (__int32 *)v75)
      {
        if (v73) {
          MEMORY[0x1B3EA8630]();
        }
      }
    }
  }
}

void sub_1B1BF1B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  if (__p) {
    operator delete(__p);
  }
  TFsa::~TFsa((TFsa *)&a15);
  if (a43)
  {
    a44 = (uint64_t)a43;
    operator delete(a43);
  }
  if (LOBYTE(STACK[0x540]))
  {
    if (a46 != a10 && a46 != 0) {
      MEMORY[0x1B3EA8630]();
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**,false>(uint64_t result, const __int32 **a2, uint64_t a3, uint64_t a4, char a5)
{
  unsigned int v10 = (const __int32 **)result;
LABEL_2:
  BOOL v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    unsigned int v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = a2 - v11;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t result = wcscmp(*(a2 - 1), *v11);
          if ((result & 0x80000000) != 0)
          {
            uint64_t v22 = *v11;
            *BOOL v11 = *(a2 - 1);
            *(a2 - 1) = v22;
          }
          break;
        case 3uLL:
          uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(v11, v11 + 1, a2 - 1);
          break;
        case 4uLL:
          uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(v11, v11 + 1, v11 + 2, a2 - 1);
          break;
        case 5uLL:
          uint64_t result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(v11, v11 + 1, v11 + 2, v11 + 3, a2 - 1);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 191) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**,wchar_t const**>(v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    char v17 = &v11[v15 >> 1];
    if ((unint64_t)v14 >= 0x401)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(v11, &v11[v15 >> 1], a2 - 1);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(v11 + 1, v17 - 1, a2 - 2);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(v11 + 2, &v11[v16 + 1], a2 - 3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(v17 - 1, v17, &v11[v16 + 1]);
      uint64_t v18 = *v11;
      *BOOL v11 = *v17;
      const __int32 *v17 = v18;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(&v11[v15 >> 1], v11, a2 - 1);
      if (a5) {
        goto LABEL_14;
      }
    }
    if ((wcscmp(*(v11 - 1), *v11) & 0x80000000) == 0)
    {
      uint64_t result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,wchar_t const**,TWideCharCompare &>(v11, a2);
      BOOL v11 = (const __int32 **)result;
      goto LABEL_19;
    }
LABEL_14:
    uint64_t v19 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,wchar_t const**,TWideCharCompare &>(v11, a2);
    if ((v20 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(v11, v19);
    BOOL v11 = v19 + 1;
    uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(v19 + 1, a2);
    if (result)
    {
      a4 = -v13;
      a2 = v19;
      if (v21) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v21)
    {
LABEL_17:
      uint64_t result = std::__introsort<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**,false>(v10, v19, a3, -v13, a5 & 1);
      BOOL v11 = v19 + 1;
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(v11, a2);
  }
  else
  {
    return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(v11, a2);
  }
}

const __int32 **std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(const __int32 **result, const __int32 **a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    unint64_t v4 = result + 1;
    if (result + 1 != a2)
    {
      uint64_t v5 = 0;
      char v6 = result;
      do
      {
        char v8 = *v6;
        uint64_t v7 = v6[1];
        char v6 = v4;
        uint64_t result = (const __int32 **)wcscmp(v7, v8);
        if ((result & 0x80000000) != 0)
        {
          uint64_t v9 = *v6;
          uint64_t v10 = v5;
          while (1)
          {
            *(const __int32 **)((char *)v3 + v10 + 8) = *(const __int32 **)((char *)v3 + v10);
            if (!v10) {
              break;
            }
            uint64_t result = (const __int32 **)wcscmp(v9, *(const __int32 **)((char *)v3 + v10 - 8));
            v10 -= 8;
            if ((result & 0x80000000) == 0)
            {
              BOOL v11 = (const __int32 **)((char *)v3 + v10 + 8);
              goto LABEL_10;
            }
          }
          BOOL v11 = v3;
LABEL_10:
          *BOOL v11 = v9;
        }
        unint64_t v4 = v6 + 1;
        v5 += 8;
      }
      while (v6 + 1 != a2);
    }
  }
  return result;
}

const __int32 **std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(const __int32 **result, const __int32 **a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    while (v3 + 1 != a2)
    {
      uint64_t v5 = *v3;
      unint64_t v4 = v3[1];
      ++v3;
      uint64_t result = (const __int32 **)wcscmp(v4, v5);
      if ((result & 0x80000000) != 0)
      {
        char v6 = *v3;
        uint64_t v7 = v3;
        do
        {
          char v8 = v7;
          uint64_t v9 = *--v7;
          const __int32 *v8 = v9;
          uint64_t result = (const __int32 **)wcscmp(v6, *(v8 - 2));
        }
        while ((result & 0x80000000) != 0);
        const __int32 *v7 = v6;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(const __int32 **a1, const __int32 **a2, const __int32 **a3)
{
  int v6 = wcscmp(*a2, *a1);
  int v7 = wcscmp(*a3, *a2);
  if (v6 < 0)
  {
    uint64_t v9 = *a1;
    if (v7 < 0)
    {
      *a1 = *a3;
      *a3 = v9;
    }
    else
    {
      *a1 = *a2;
      *a2 = v9;
      if (wcscmp(*a3, v9) < 0)
      {
        uint64_t v10 = *a2;
        *a2 = *a3;
        *a3 = v10;
        return 2;
      }
    }
  }
  else
  {
    if ((v7 & 0x80000000) == 0) {
      return 0;
    }
    BOOL v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    if (wcscmp(*a2, *a1) < 0)
    {
      uint64_t v12 = *a1;
      *a1 = *a2;
      *a2 = v12;
      return 2;
    }
  }
  return 1;
}

const __int32 **std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,wchar_t const**,TWideCharCompare &>(const __int32 **a1, const __int32 **a2)
{
  uint64_t v2 = a2;
  unint64_t v4 = *a1;
  if (wcscmp(*a1, *(a2 - 1)) < 0)
  {
    int v6 = a1;
    do
    {
      int v7 = v6[1];
      ++v6;
    }
    while ((wcscmp(v4, v7) & 0x80000000) == 0);
  }
  else
  {
    uint64_t v5 = a1 + 1;
    do
    {
      int v6 = v5;
      if (v5 >= v2) {
        break;
      }
      ++v5;
    }
    while ((wcscmp(v4, *v6) & 0x80000000) == 0);
  }
  if (v6 < v2)
  {
    do
      char v8 = *--v2;
    while (wcscmp(v4, v8) < 0);
  }
  while (v6 < v2)
  {
    uint64_t v9 = *v6;
    const __int32 *v6 = *v2;
    TFsa *v2 = v9;
    do
    {
      uint64_t v10 = v6[1];
      ++v6;
    }
    while ((wcscmp(v4, v10) & 0x80000000) == 0);
    do
      BOOL v11 = *--v2;
    while (wcscmp(v4, v11) < 0);
  }
  if (v6 - 1 != a1) {
    *a1 = *(v6 - 1);
  }
  *(v6 - 1) = v4;
  return v6;
}

const __int32 **std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,wchar_t const**,TWideCharCompare &>(const __int32 **a1, const __int32 **a2)
{
  uint64_t v4 = 0;
  uint64_t v5 = *a1;
  do
    int v6 = wcscmp(a1[++v4], v5);
  while (v6 < 0);
  int v7 = &a1[v4];
  char v8 = &a1[v4 - 1];
  if (v4 == 1)
  {
    do
    {
      if (v7 >= a2) {
        break;
      }
      uint64_t v10 = *--a2;
    }
    while ((wcscmp(v10, v5) & 0x80000000) == 0);
  }
  else
  {
    do
      uint64_t v9 = *--a2;
    while ((wcscmp(v9, v5) & 0x80000000) == 0);
  }
  if (v7 < a2)
  {
    BOOL v11 = &a1[v4];
    uint64_t v12 = a2;
    do
    {
      uint64_t v13 = *v11;
      *BOOL v11 = *v12;
      *uint64_t v12 = v13;
      do
      {
        uint64_t v14 = v11[1];
        ++v11;
      }
      while (wcscmp(v14, v5) < 0);
      do
        unint64_t v15 = *--v12;
      while ((wcscmp(v15, v5) & 0x80000000) == 0);
    }
    while (v11 < v12);
    char v8 = v11 - 1;
  }
  if (v8 != a1) {
    *a1 = *v8;
  }
  const __int32 *v8 = v5;
  return v8;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(const __int32 **a1, const __int32 **a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (wcscmp(*(a2 - 1), *a1) < 0)
      {
        int v6 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v6;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      int v7 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(a1, a1 + 1, a1 + 2);
      char v8 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v9 = 0;
      int v10 = 0;
      break;
  }
  while (1)
  {
    if (wcscmp(*v8, *v7) < 0)
    {
      BOOL v11 = *v8;
      uint64_t v12 = v9;
      while (1)
      {
        uint64_t v13 = (const __int32 **)((char *)a1 + v12);
        *(const __int32 **)((char *)a1 + v12 + ++*(_DWORD *)(result + 24) = *(const __int32 **)((char *)a1 + v12 + 16);
        if (v12 == -16) {
          break;
        }
        v12 -= 8;
        if ((wcscmp(v11, v13[1]) & 0x80000000) == 0)
        {
          uint64_t v14 = (const __int32 **)((char *)a1 + v12 + 24);
          goto LABEL_12;
        }
      }
      uint64_t v14 = a1;
LABEL_12:
      *uint64_t v14 = v11;
      if (++v10 == 8) {
        return v8 + 1 == a2;
      }
    }
    int v7 = v8;
    v9 += 8;
    if (++v8 == a2) {
      return 1;
    }
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(const __int32 **a1, const __int32 **a2, const __int32 **a3, const __int32 **a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(a1, a2, a3);
  uint64_t result = wcscmp(*a4, *a3);
  if ((result & 0x80000000) != 0)
  {
    uint64_t v9 = *a3;
    *a3 = *a4;
    *a4 = v9;
    uint64_t result = wcscmp(*a3, *a2);
    if ((result & 0x80000000) != 0)
    {
      int v10 = *a2;
      *a2 = *a3;
      *a3 = v10;
      uint64_t result = wcscmp(*a2, *a1);
      if ((result & 0x80000000) != 0)
      {
        BOOL v11 = *a1;
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(const __int32 **a1, const __int32 **a2, const __int32 **a3, const __int32 **a4, const __int32 **a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(a1, a2, a3, a4);
  uint64_t result = wcscmp(*a5, *a4);
  if ((result & 0x80000000) != 0)
  {
    BOOL v11 = *a4;
    *a4 = *a5;
    *a5 = v11;
    uint64_t result = wcscmp(*a4, *a3);
    if ((result & 0x80000000) != 0)
    {
      uint64_t v12 = *a3;
      *a3 = *a4;
      *a4 = v12;
      uint64_t result = wcscmp(*a3, *a2);
      if ((result & 0x80000000) != 0)
      {
        uint64_t v13 = *a2;
        *a2 = *a3;
        *a3 = v13;
        uint64_t result = wcscmp(*a2, *a1);
        if ((result & 0x80000000) != 0)
        {
          uint64_t v14 = *a1;
          *a1 = *a2;
          *a2 = v14;
        }
      }
    }
  }
  return result;
}

const __int32 **std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**,wchar_t const**>(const __int32 **a1, const __int32 **a2, const __int32 **a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = a2;
    if (a2 != a3)
    {
      uint64_t v14 = a2;
      do
      {
        if (wcscmp(*v14, *a1) < 0)
        {
          unint64_t v15 = *v14;
          *uint64_t v14 = *a1;
          *a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 9)
    {
      uint64_t v16 = (unint64_t)v8 >> 3;
      char v17 = a2 - 1;
      do
      {
        uint64_t v18 = *a1;
        uint64_t v19 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(a1, a4, v16);
        if (v17 == v19)
        {
          *uint64_t v19 = v18;
        }
        else
        {
          *uint64_t v19 = *v17;
          const __int32 *v17 = v18;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>((uint64_t)a1, (uint64_t)(v19 + 1), a4, v19 + 1 - a1);
        }
        --v17;
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(uint64_t result, uint64_t a2, uint64_t a3, const __int32 **a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v5 = a4;
    uint64_t v6 = result;
    int64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 3)
    {
      uint64_t v9 = ((uint64_t)a4 - result) >> 2;
      uint64_t v10 = v9 + 1;
      unint64_t v11 = (const __int32 **)(result + 8 * (v9 + 1));
      uint64_t v12 = v9 + 2;
      if (v9 + 2 < a3 && wcscmp(*v11, v11[1]) < 0)
      {
        ++v11;
        uint64_t v10 = v12;
      }
      uint64_t result = wcscmp(*v11, *v5);
      if ((result & 0x80000000) == 0)
      {
        uint64_t v13 = *v5;
        do
        {
          uint64_t v14 = v11;
          const __int32 *v5 = *v11;
          if (v7 < v10) {
            break;
          }
          uint64_t v15 = (2 * v10) | 1;
          unint64_t v11 = (const __int32 **)(v6 + 8 * v15);
          if (2 * v10 + 2 < a3 && wcscmp(*v11, v11[1]) < 0)
          {
            ++v11;
            uint64_t v15 = 2 * v10 + 2;
          }
          uint64_t result = wcscmp(*v11, v13);
          uint64_t v5 = v14;
          uint64_t v10 = v15;
        }
        while ((result & 0x80000000) == 0);
        *uint64_t v14 = v13;
      }
    }
  }
  return result;
}

const __int32 **std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(const __int32 **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = a3 - 2;
  if (a3 < 2) {
    uint64_t v6 = a3 - 1;
  }
  uint64_t v7 = v6 >> 1;
  do
  {
    uint64_t v8 = &a1[v5 + 1];
    uint64_t v9 = (2 * v5) | 1;
    uint64_t v10 = 2 * v5 + 2;
    if (v10 < a3 && wcscmp(*v8, a1[v5 + 2]) < 0)
    {
      ++v8;
      uint64_t v9 = v10;
    }
    *a1 = *v8;
    a1 = v8;
    uint64_t v5 = v9;
  }
  while (v9 <= v7);
  return v8;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,TWideCharCompare &,wchar_t const**>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v5 = result;
    unint64_t v6 = v4 >> 1;
    uint64_t v7 = (const __int32 **)(result + 8 * (v4 >> 1));
    uint64_t v8 = (const __int32 **)(a2 - 8);
    uint64_t result = wcscmp(*v7, *(const __int32 **)(a2 - 8));
    if ((result & 0x80000000) != 0)
    {
      uint64_t v9 = *v8;
      do
      {
        uint64_t v10 = v7;
        const __int32 *v8 = *v7;
        if (!v6) {
          break;
        }
        unint64_t v6 = (v6 - 1) >> 1;
        uint64_t v7 = (const __int32 **)(v5 + 8 * v6);
        uint64_t result = wcscmp(*v7, v9);
        uint64_t v8 = v10;
      }
      while ((result & 0x80000000) != 0);
      *uint64_t v10 = v9;
    }
  }
  return result;
}

void *std::__tree<TState *,TFsaBuilder::TStateCompare,std::allocator<TState *>>::find<TState *>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 16;
  unint64_t v6 = (void *)(a1 + 8);
  do
  {
    int v7 = TFsaBuilder::TStateCompare::operator()(v5, v3[4], *a2);
    uint64_t v8 = v3 + 1;
    if (!v7)
    {
      uint64_t v8 = v3;
      unint64_t v6 = v3;
    }
    uint64_t v3 = (void *)*v8;
  }
  while (*v8);
  if (v6 == v2 || TFsaBuilder::TStateCompare::operator()(v5, *a2, v6[4])) {
    return v2;
  }
  return v6;
}

uint64_t TFsaBuilder::TStateCompare::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a2 + 40);
  uint64_t v4 = *(void *)(a3 + 40);
  if ((v3 != -1) == (v4 != -1)) {
    return std::__lexicographical_compare[abi:ne180100]<TFsaBuilder::TTransCompare &,TTransConstIteratorDef,TTransConstIteratorDef>(*(unint64_t **)(a2 + 24), 1u, 0, 1, *(unint64_t **)(a3 + 24), 1u, 0, 1);
  }
  return v4 != -1 && v3 == -1;
}

uint64_t std::__lexicographical_compare[abi:ne180100]<TFsaBuilder::TTransCompare &,TTransConstIteratorDef,TTransConstIteratorDef>(unint64_t *a1, unsigned int a2, unint64_t *a3, int a4, unint64_t *a5, unsigned int a6, unint64_t *a7, int a8)
{
  if (a6 == a8 && a5 == a7) {
    return 0;
  }
  while (a2 != a4 || a1 != a3)
  {
    unint64_t v9 = *a1;
    unint64_t v10 = *a5;
    BOOL v11 = *a1 >= *a5;
    if (*a1 == *a5)
    {
      unint64_t v9 = a1[2];
      unint64_t v10 = a5[2];
      BOOL v11 = v9 >= v10;
    }
    if (!v11) {
      break;
    }
    if (v10 >= v9)
    {
      a1 = (unint64_t *)a1[a2 + 4];
      a5 = (unint64_t *)a5[a6 + 4];
      if (a6 != a8 || a5 != a7) {
        continue;
      }
    }
    return 0;
  }
  return 1;
}

uint64_t *std::__tree<TState *,TFsaBuilder::TStateCompare,std::allocator<TState *>>::__emplace_unique_key_args<TState *,TState * const&>(uint64_t **a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = (uint64_t **)std::__tree<TState *,TFsaBuilder::TStateCompare,std::allocator<TState *>>::__find_equal<TState *>((uint64_t)a1, &v9, a2);
  unint64_t v6 = *v5;
  if (!*v5)
  {
    int v7 = v5;
    unint64_t v6 = (uint64_t *)operator new(0x28uLL);
    v6[4] = *a3;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v9, v7, v6);
  }
  return v6;
}

void *std::__tree<TState *,TFsaBuilder::TStateCompare,std::allocator<TState *>>::__find_equal<TState *>(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        uint64_t v8 = v4;
        if (!TFsaBuilder::TStateCompare::operator()(v7, *a3, v4[4])) {
          break;
        }
        uint64_t v4 = (void *)*v8;
        uint64_t v5 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (!TFsaBuilder::TStateCompare::operator()(v7, v8[4], *a3)) {
        break;
      }
      uint64_t v5 = v8 + 1;
      uint64_t v4 = (void *)v8[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v8 = (void *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

void *std::vector<TState *>::vector(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v6 = (void *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1B1BF2DC4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<TVertex *>::vector(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v6 = (void *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1B1BF2E48(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *tknPrintString(const char *a1)
{
  int v2 = strlen(s_pLogPartialLine);
  if (strlen(a1) + v2 + 101 > s_nPartialLineAllocSize)
  {
    s_pLogPartialLine = &s_pStaticLogPartialLine;
    s_nPartialLineAllocSize = 0x2000;
    operator new[]();
  }
  uint64_t v3 = s_pLogPartialLine;
  uint64_t v4 = &s_pLogPartialLine[strlen(s_pLogPartialLine)];
  char v5 = *a1;
  if (*a1)
  {
    do
    {
      if ((s_bJustPrintedNewLine & 1) == 0)
      {
        unint64_t v6 = strcpy(v4, gpLogLinePrefix);
        v4 += strlen(v6);
        s_bJustPrintedNewLine = 1;
        char v5 = *a1;
      }
      *v4++ = v5;
      if (*a1 == 10)
      {
        char *v4 = 0;
        tknLogString(s_pLogPartialLine);
        uint64_t v4 = s_pLogPartialLine;
        s_bJustPrintedNewLine = 0;
        uint64_t v3 = s_pLogPartialLine;
      }
      int v7 = *(unsigned __int8 *)++a1;
      char v5 = v7;
    }
    while (v7);
  }
  char *v4 = 0;
  uint64_t v8 = s_pLogPartialLine;
  return memmove(v8, v3, v4 - v3 + 1);
}

void *tknPrintf(const char *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  int v2 = (const char *)MEMORY[0x1F4188790](a1, a2);
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  __str[0] = 0;
  vsnprintf(__str, 0x1FFEuLL, v2, va);
  return tknPrintString(__str);
}

void *loggableUnicode@<X0>(unsigned int *a1@<X0>, void *a2@<X8>)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  std::string __s = v8;
  long long v7 = xmmword_1B25607E0;
  char v9 = 1;
  {
    operator new();
  }
  TLocaleInfo::unicodeToMultiByte(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, a1, (uint64_t)&__s);
  if (*((void *)&v7 + 1) >= (unint64_t)v7)
  {
    if (v9)
    {
      char v5 = 0;
      TBuffer<char>::insert((uint64_t)&__s, *((unint64_t *)&v7 + 1), &v5, 1uLL);
      --*((void *)&v7 + 1);
    }
    else if ((void)v7)
    {
      __s[(void)v7 - 1] = 0;
    }
  }
  else
  {
    __s[*((void *)&v7 + 1)] = 0;
  }
  uint64_t result = std::string::basic_string[abi:ne180100]<0>(a2, __s);
  if (v9)
  {
    uint64_t result = __s;
    if (__s != v8)
    {
      if (__s) {
        return (void *)MEMORY[0x1B3EA8630]();
      }
    }
  }
  return result;
}

void sub_1B1BF31FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  MEMORY[0x1B3EA8670](v45, 0x1070C40ADD13FEBLL);
  if (a45)
  {
    if (a10 != v46 && a10 != 0) {
      MEMORY[0x1B3EA8630]();
    }
  }
  _Unwind_Resume(a1);
}

void *operator<<(void *a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  std::string __s = v9;
  long long v8 = xmmword_1B25607E0;
  char v10 = 1;
  {
    operator new();
  }
  TLocaleInfo::unicodeToMultiByte(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, a2, (uint64_t)&__s);
  if (*((void *)&v8 + 1) >= (unint64_t)v8)
  {
    if (v10)
    {
      char v6 = 0;
      TBuffer<char>::insert((uint64_t)&__s, *((unint64_t *)&v8 + 1), &v6, 1uLL);
      --*((void *)&v8 + 1);
    }
    else if ((void)v8)
    {
      __s[(void)v8 - 1] = 0;
    }
  }
  else
  {
    __s[*((void *)&v8 + 1)] = 0;
  }
  size_t v4 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)__s, v4);
  if (v10 && __s != v9 && __s) {
    MEMORY[0x1B3EA8630]();
  }
  return a1;
}

void sub_1B1BF33F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  MEMORY[0x1B3EA8670](v45, 0x1070C40ADD13FEBLL);
  if (a45)
  {
    if (a10 != v46 && a10 != 0) {
      MEMORY[0x1B3EA8630]();
    }
  }
  _Unwind_Resume(a1);
}

uint64_t TBuffer<char>::insert(uint64_t result, unint64_t a2, char *a3, unint64_t a4)
{
  unint64_t v5 = *(void *)(result + 16);
  if (v5 >= a2) {
    unint64_t v6 = a2;
  }
  else {
    unint64_t v6 = *(void *)(result + 16);
  }
  if (*(unsigned char *)(result + 280))
  {
    unint64_t v7 = v5 + a4;
    unint64_t v8 = *(void *)(result + 8);
    if (v5 + a4 > v8 && v8 < 2 * v7)
    {
      *(void *)(result + 8) = (2 * v7) | 1;
      operator new[]();
    }
  }
  if (v6 < v5)
  {
    unint64_t v9 = v6 + a4;
    unint64_t v10 = *(void *)(result + 8);
    if (v6 + a4 < v10)
    {
      if (v10 >= v5 + a4) {
        unint64_t v10 = v5 + a4;
      }
      for (; v9 != v10; --v10)
        *(unsigned char *)(*(void *)result + v10 - 1) = *(unsigned char *)(*(void *)result + v10 + ~a4);
    }
  }
  unint64_t v11 = *(void *)(result + 8);
  unint64_t v12 = v11 - v6;
  if (v11 > v6)
  {
    if (v12 >= a4) {
      unint64_t v12 = a4;
    }
    if (v12)
    {
      do
      {
        char v13 = *a3++;
        *(unsigned char *)(*(void *)result + v6++) = v13;
        --v12;
      }
      while (v12);
      unint64_t v11 = *(void *)(result + 8);
    }
  }
  unint64_t v14 = *(void *)(result + 16) + a4;
  *(void *)(result + 16) = v14;
  if (v14 < v11) {
    *(unsigned char *)(*(void *)result + v14) = 0;
  }
  return result;
}

void sub_1B1BF367C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B1BF372C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B1BF37F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B1BF39C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B1BF3A2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B1BF3AEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void freeChart(uint64_t a1)
{
  int v2 = (_DWORD **)maxRefLengthTLS();
  uint64_t v3 = *v2;
  if (!*v2)
  {
    size_t v4 = v2;
    uint64_t v3 = malloc_type_calloc(1uLL, 4uLL, 0x100004052888210uLL);
    void *v4 = v3;
  }
  unsigned int v5 = 0;
  while (1)
  {
    uint64_t v6 = *(void *)(a1 + 8 * v5);
    if (v6) {
      MEMORY[0x1B3EA8630](v6, 0x1000C8000313F17);
    }
    if (++v5 > *v3)
    {
      JUMPOUT(0x1B3EA8630);
    }
  }
}

void wordError_freeThread(void)
{
  uint64_t v0 = (void **)chartTLS();
  uint64_t v1 = (uint64_t *)*v0;
  if (!*v0)
  {
    uint64_t v1 = (uint64_t *)malloc_type_calloc(1uLL, 8uLL, 0x80040B8603338uLL);
    void *v0 = v1;
  }
  uint64_t v2 = *v1;
  if (v2) {
    freeChart(v2);
  }
  uint64_t v3 = (void **)maxHypLengthTLS();
  if (*v3)
  {
    free(*v3);
    *uint64_t v3 = 0;
  }
  size_t v4 = (void **)maxRefLengthTLS();
  if (*v4)
  {
    free(*v4);
    void *v4 = 0;
  }
  if (*v0)
  {
    free(*v0);
    void *v0 = 0;
  }
}

void *LHash<unsigned int,double>::alloc(void *a1, unsigned int a2)
{
  char v3 = -1;
  do
    uint64_t v4 = (1 << ++v3);
  while (v4 < a2);
  uint64_t result = BM_malloc(16 * (v4 - 1) + 24);
  *a1 = result;
  *(_DWORD *)uint64_t result = *(_DWORD *)result & 0xFFFFFFE0 | v3 & 0x1F;
  *(_DWORD *)*a1 &= 0x1Fu;
  uint64_t v6 = (_DWORD *)(*a1 + 16);
  do
  {
    _DWORD *v6 = -1;
    v6 += 4;
    --v4;
  }
  while (v4);
  return result;
}

void *LHash<unsigned int,double>::LHash(void *a1, unsigned int a2)
{
  *a1 = 0;
  if (a2)
  {
    if (a2 >= 8) {
      a2 = (float)((float)(a2 + 1) / 0.8);
    }
    LHash<unsigned int,double>::alloc(a1, a2);
  }
  return a1;
}

void LHash<unsigned int,double>::clear(void *a1, unsigned int a2)
{
  uint64_t v4 = (void *)*a1;
  if (v4)
  {
    BM_free(v4, 16 * ~(-1 << *(_DWORD *)v4) + 24);
    *a1 = 0;
  }
  if (a2)
  {
    if (a2 >= 8) {
      a2 = (float)((float)(a2 + 1) / 0.8);
    }
    LHash<unsigned int,double>::alloc(a1, a2);
  }
}

void *LHash<unsigned int,double>::~LHash(void *a1)
{
  return a1;
}

uint64_t LHash<unsigned int,double>::find(_DWORD **a1, unsigned int a2, unsigned char *a3)
{
  int v7 = 0;
  int v5 = LHash<unsigned int,double>::locate(a1, a2, &v7);
  *a3 = v5;
  if (v5) {
    return (uint64_t)&(*a1)[4 * v7 + 2];
  }
  else {
    return 0;
  }
}

uint64_t LHash<unsigned int,double>::locate(_DWORD **a1, unsigned int a2, _DWORD *a3)
{
  char v3 = *a1;
  if (!*a1) {
    return 0;
  }
  uint64_t v4 = v3 + 2;
  unint64_t v5 = *v3;
  char v6 = v5 & 0x1F;
  if ((*v3 & 0x1Fu) > 2)
  {
    uint64_t v9 = -1 << v6;
    unint64_t v7 = ((1103515245 * (unint64_t)a2 + 12345) >> (30 - v6)) & ~(-1 << v6);
    int v10 = v4[4 * v7 + 2];
    if (v10 == -1)
    {
LABEL_10:
      uint64_t result = 0;
    }
    else
    {
      int v11 = ~v9;
      while (v10 != a2)
      {
        unint64_t v7 = (v7 + 1) & v11;
        int v10 = v4[4 * v7 + 2];
        if (v10 == -1) {
          goto LABEL_10;
        }
      }
      uint64_t result = 1;
    }
  }
  else if (v5 >= 0x20)
  {
    uint64_t v12 = 0;
    unint64_t v7 = v5 >> 5;
    char v13 = v3 + 4;
    while (1)
    {
      int v14 = *v13;
      v13 += 4;
      if (v14 == a2) {
        break;
      }
      if (v7 == ++v12) {
        goto LABEL_14;
      }
    }
    uint64_t result = 1;
    LODWORD(v7) = v12;
  }
  else
  {
    LODWORD(v7) = 0;
LABEL_14:
    uint64_t result = 0;
  }
  *a3 = v7;
  return result;
}

uint64_t LHash<unsigned int,double>::insert(void *a1, unsigned int a2, unsigned char *a3)
{
  if (!*a1) {
    LHash<unsigned int,double>::alloc(a1, 1u);
  }
  unsigned int v15 = 0;
  int v6 = LHash<unsigned int,double>::locate((_DWORD **)a1, a2, &v15);
  *a3 = v6;
  unint64_t v7 = (void *)*a1;
  if (!v6)
  {
    unint64_t v8 = *(unsigned int *)v7;
    uint64_t v9 = 1 << (v8 & 0x1F);
    unint64_t v10 = v8 >> 5;
    if (v8 >= 0xE0) {
      unsigned int v11 = (float)((float)(v10 + 2) / 0.8);
    }
    else {
      unsigned int v11 = v10 + 1;
    }
    if (v11 > v9)
    {
      LHash<unsigned int,double>::alloc(a1, v11);
      *(_DWORD *)*a1 = v8 & 0xFFFFFFE0 | *(_DWORD *)*a1 & 0x1F;
      if ((*(_DWORD *)*a1 & 0x1Fu) >= 3)
      {
        uint64_t v12 = (unsigned int *)(v7 + 2);
        uint64_t v13 = 1 << (v8 & 0x1F);
        do
        {
          if (*v12 != -1)
          {
            LHash<unsigned int,double>::locate((_DWORD **)a1, *v12, &v15);
            *(_OWORD *)(*a1 + 16 * v15 + 8) = *(_OWORD *)(v12 - 2);
          }
          v12 += 4;
          --v13;
        }
        while (v13);
      }
      else
      {
        memcpy((void *)(*a1 + 8), v7 + 1, 16 * v10);
      }
      BM_free(v7, 16 * (v9 - 1) + 24);
      LHash<unsigned int,double>::locate((_DWORD **)a1, a2, &v15);
      unint64_t v7 = (void *)*a1;
    }
    LODWORD(v7[2 * v15 + 2]) = a2;
    v7[2 * v15 + 1] = 0;
    *(_DWORD *)*a1 += 32;
    unint64_t v7 = (void *)*a1;
  }
  return (uint64_t)&v7[2 * v15 + 1];
}

_DWORD **LHash<unsigned int,double>::memStats(_DWORD **result, uint64_t *a2)
{
  uint64_t v2 = *a2 + 8;
  *a2 = v2;
  char v3 = *result;
  if (*result)
  {
    int v4 = 1 << *v3;
    unint64_t v5 = 16 * (v4 - 1) + 24;
    *a2 = v5 + v2;
    a2[1] += 16 * (v4 - (*v3 >> 5));
    uint64_t v6 = 256;
    if (v5 < 0x100) {
      uint64_t v6 = 16 * (v4 - 1) + 24;
    }
    ++*((_DWORD *)a2 + v6 + 4);
  }
  return result;
}

uint64_t LHashIter<unsigned int,double>::LHashIter(uint64_t result, _DWORD **a2, uint64_t a3)
{
  char v3 = *a2;
  *(void *)uint64_t result = *a2;
  *(_DWORD *)(result + 8) = 0;
  if (v3)
  {
    *(_DWORD *)(result + 12) = *v3 >> 5;
    *(void *)(result + 16) = a3;
    *(void *)(result + ++*(_DWORD *)(result + 24) = 0;
    LHashIter<unsigned int,double>::sortKeys();
  }
  *(_DWORD *)(result + 12) = 0;
  *(void *)(result + 16) = a3;
  *(void *)(result + ++*(_DWORD *)(result + 24) = 0;
  return result;
}

void LHashIter<unsigned int,double>::sortKeys()
{
}

void sub_1B1BF4364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    MEMORY[0x1B3EA8630](a12, 0x1000C8052888210);
  }
  _Unwind_Resume(exception_object);
}

uint64_t LHashIter<unsigned int,double>::LHashIter(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = *(void *)a2;
  int v2 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(result + 12) = v2;
  *(void *)(result + ++*(_DWORD *)(result + 24) = 0;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(result + 16) = *(void *)(a2 + 16);
  if (v3) {
    operator new[]();
  }
  return result;
}

uint64_t LHashIter<unsigned int,double>::~LHashIter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2) {
    MEMORY[0x1B3EA8630](v2, 0x1000C8052888210);
  }
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = 0;
  return a1;
}

uint64_t LHashIter<unsigned int,double>::next(uint64_t a1, _DWORD *a2)
{
  uint64_t v2 = *(_DWORD **)a1;
  if (!*(void *)a1) {
    return 0;
  }
  unsigned int v10 = 0;
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  if (v4 == *(_DWORD *)(a1 + 12)) {
    return 0;
  }
  uint64_t v9 = v2;
  uint64_t v7 = *(void *)(a1 + 24);
  *(_DWORD *)(a1 + 8) = v4 + 1;
  LHash<unsigned int,double>::locate(&v9, *(_DWORD *)(v7 + 4 * v4), &v10);
  uint64_t v8 = *(void *)a1 + 16 * v10;
  uint64_t result = v8 + 8;
  *a2 = *(_DWORD *)(v8 + 16);
  return result;
}

void sub_1B1BF44D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *,false>(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  unsigned int v10 = (int *)result;
LABEL_2:
  unsigned int v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    unsigned int v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = ((char *)a2 - (char *)v11) >> 2;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t result = (*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 16 * *(a2 - 1) + 8), *(unsigned int *)(*(void *)a3 + 8 + 16 * *v11 + 8));
          if ((result & 0x80000000) != 0)
          {
            int v22 = *v11;
            *unsigned int v11 = *(a2 - 1);
            *(a2 - 1) = v22;
          }
          break;
        case 3uLL:
          uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(v11, v11 + 1, (int *)a2 - 1, a3);
          break;
        case 4uLL:
          uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(v11, v11 + 1, v11 + 2, (int *)a2 - 1, a3);
          break;
        case 5uLL:
          uint64_t result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(v11, v11 + 1, v11 + 2, v11 + 3, (int *)a2 - 1, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 95) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != (int *)a2)
      {
        return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *,unsigned int *>((unsigned int *)v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    char v17 = &v11[v15 >> 1];
    if ((unint64_t)v14 >= 0x201)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(v11, &v11[v15 >> 1], (int *)a2 - 1, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(v11 + 1, v17 - 1, (int *)a2 - 2, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(v11 + 2, &v11[v16 + 1], (int *)a2 - 3, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(v17 - 1, v17, &v11[v16 + 1], a3);
      int v18 = *v11;
      *unsigned int v11 = *v17;
      int *v17 = v18;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(&v11[v15 >> 1], v11, (int *)a2 - 1, a3);
      if (a5) {
        goto LABEL_14;
      }
    }
    if (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 16 * *(v11 - 1) + 8), *(unsigned int *)(*(void *)a3 + 8 + 16 * *v11 + 8)) & 0x80000000) == 0)
    {
      uint64_t result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,LHashIter<unsigned int,double> &>((unsigned int *)v11, a2, a3);
      unsigned int v11 = (int *)result;
      goto LABEL_19;
    }
LABEL_14:
    uint64_t v19 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,LHashIter<unsigned int,double> &>(v11, (int *)a2, a3);
    if ((v20 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(v11, v19, a3);
    unsigned int v11 = v19 + 1;
    uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(v19 + 1, (int *)a2, a3);
    if (result)
    {
      a4 = -v13;
      a2 = (unsigned int *)v19;
      if (v21) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v21)
    {
LABEL_17:
      uint64_t result = std::__introsort<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *,false>(v10, v19, a3, -v13, a5 & 1);
      unsigned int v11 = v19 + 1;
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>((uint64_t)v11, a2, a3);
  }
  else
  {
    return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>((uint64_t)v11, a2, a3);
  }
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(uint64_t result, unsigned int *a2, uint64_t a3)
{
  if ((unsigned int *)result != a2)
  {
    uint64_t v4 = (_DWORD *)result;
    char v5 = (unsigned int *)(result + 4);
    if ((unsigned int *)(result + 4) != a2)
    {
      uint64_t v7 = 0;
      uint64_t v8 = (unsigned int *)result;
      do
      {
        uint64_t v10 = *v8;
        uint64_t v9 = v8[1];
        uint64_t v8 = v5;
        uint64_t result = (*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 16 * v9 + 8), *(unsigned int *)(*(void *)a3 + 8 + 16 * v10 + 8));
        if ((result & 0x80000000) != 0)
        {
          uint64_t v11 = *v8;
          uint64_t v12 = v7;
          while (1)
          {
            *(_DWORD *)((char *)v4 + v12 + 4) = *(_DWORD *)((char *)v4 + v12);
            if (!v12) {
              break;
            }
            uint64_t result = (*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 16 * v11 + 8), *(unsigned int *)(*(void *)a3 + 8 + 16 * *(unsigned int *)((char *)v4 + v12 - 4) + 8));
            v12 -= 4;
            if ((result & 0x80000000) == 0)
            {
              uint64_t v13 = (_DWORD *)((char *)v4 + v12 + 4);
              goto LABEL_10;
            }
          }
          uint64_t v13 = v4;
LABEL_10:
          *uint64_t v13 = v11;
        }
        char v5 = v8 + 1;
        v7 += 4;
      }
      while (v8 + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(uint64_t result, unsigned int *a2, uint64_t a3)
{
  if ((unsigned int *)result != a2)
  {
    uint64_t v4 = (unsigned int *)result;
    for (unint64_t i = (unsigned int *)(result + 4); v4 + 1 != a2; unint64_t i = v4 + 1)
    {
      uint64_t v8 = *v4;
      uint64_t v7 = v4[1];
      uint64_t v4 = i;
      uint64_t result = (*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 16 * v7 + 8), *(unsigned int *)(*(void *)a3 + 8 + 16 * v8 + 8));
      if ((result & 0x80000000) != 0)
      {
        uint64_t v9 = *v4;
        uint64_t v10 = v4;
        do
        {
          uint64_t v11 = v10;
          int v12 = *--v10;
          *uint64_t v11 = v12;
          uint64_t result = (*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 16 * v9 + 8), *(unsigned int *)(*(void *)a3 + 8 + 16 * *(v11 - 2) + 8));
        }
        while ((result & 0x80000000) != 0);
        *uint64_t v10 = v9;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(int *a1, int *a2, int *a3, uint64_t a4)
{
  int v8 = (*(uint64_t (**)(void, void))(a4 + 16))(*(unsigned int *)(*(void *)a4 + 8 + 16 * *a2 + 8), *(unsigned int *)(*(void *)a4 + 8 + 16 * *a1 + 8));
  int v9 = (*(uint64_t (**)(void, void))(a4 + 16))(*(unsigned int *)(*(void *)a4 + 8 + 16 * *a3 + 8), *(unsigned int *)(*(void *)a4 + 8 + 16 * *a2 + 8));
  if (v8 < 0)
  {
    uint64_t v11 = *a1;
    if (v9 < 0)
    {
      *a1 = *a3;
      *a3 = v11;
    }
    else
    {
      *a1 = *a2;
      *a2 = v11;
      if (((*(uint64_t (**)(void, void))(a4 + 16))(*(unsigned int *)(*(void *)a4 + 8 + 16 * *a3 + 8), *(unsigned int *)(*(void *)a4 + 8 + 16 * v11 + 8)) & 0x80000000) != 0)
      {
        int v12 = *a2;
        *a2 = *a3;
        *a3 = v12;
        return 2;
      }
    }
  }
  else
  {
    if ((v9 & 0x80000000) == 0) {
      return 0;
    }
    int v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
    if (((*(uint64_t (**)(void, void))(a4 + 16))(*(unsigned int *)(*(void *)a4 + 8 + 16 * *a2 + 8), *(unsigned int *)(*(void *)a4 + 8 + 16 * *a1 + 8)) & 0x80000000) != 0)
    {
      int v14 = *a1;
      *a1 = *a2;
      *a2 = v14;
      return 2;
    }
  }
  return 1;
}

unsigned int *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,LHashIter<unsigned int,double> &>(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = *a1;
  if (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 16 * v6 + 8), *(unsigned int *)(*(void *)a3 + 8 + 16 * *(a2 - 1) + 8)) & 0x80000000) != 0)
  {
    int v8 = a1;
    do
    {
      unsigned int v9 = v8[1];
      ++v8;
    }
    while (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 16 * v6 + 8), *(unsigned int *)(*(void *)a3 + 8 + 16 * v9 + 8)) & 0x80000000) == 0);
  }
  else
  {
    uint64_t v7 = a1 + 1;
    do
    {
      int v8 = v7;
      if (v7 >= v4) {
        break;
      }
      ++v7;
    }
    while (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 16 * v6 + 8), *(unsigned int *)(*(void *)a3 + 8 + 16 * *v8 + 8)) & 0x80000000) == 0);
  }
  if (v8 < v4)
  {
    do
      unsigned int v10 = *--v4;
    while (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 16 * v6 + 8), *(unsigned int *)(*(void *)a3 + 8 + 16 * v10 + 8)) & 0x80000000) != 0);
  }
  while (v8 < v4)
  {
    unsigned int v11 = *v8;
    unsigned int *v8 = *v4;
    unsigned int *v4 = v11;
    do
    {
      unsigned int v12 = v8[1];
      ++v8;
    }
    while (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 16 * v6 + 8), *(unsigned int *)(*(void *)a3 + 8 + 16 * v12 + 8)) & 0x80000000) == 0);
    do
      unsigned int v13 = *--v4;
    while (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 16 * v6 + 8), *(unsigned int *)(*(void *)a3 + 8 + 16 * v13 + 8)) & 0x80000000) != 0);
  }
  if (v8 - 1 != a1) {
    *a1 = *(v8 - 1);
  }
  *(v8 - 1) = v6;
  return v8;
}

int *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,LHashIter<unsigned int,double> &>(int *a1, int *a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = *a1;
  do
    int v8 = (*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 16 * a1[++v6] + 8), *(unsigned int *)(*(void *)a3 + 8 + 16 * v7 + 8));
  while (v8 < 0);
  unsigned int v9 = &a1[v6];
  unsigned int v10 = &a1[v6 - 1];
  if (v6 == 1)
  {
    do
    {
      if (v9 >= a2) {
        break;
      }
      unsigned int v12 = *--a2;
    }
    while (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 16 * v12 + 8), *(unsigned int *)(*(void *)a3 + 8 + 16 * v7 + 8)) & 0x80000000) == 0);
  }
  else
  {
    do
      unsigned int v11 = *--a2;
    while (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 16 * v11 + 8), *(unsigned int *)(*(void *)a3 + 8 + 16 * v7 + 8)) & 0x80000000) == 0);
  }
  if (v9 < a2)
  {
    unsigned int v13 = &a1[v6];
    int v14 = a2;
    do
    {
      int v15 = *v13;
      *unsigned int v13 = *v14;
      *int v14 = v15;
      do
      {
        unsigned int v16 = v13[1];
        ++v13;
      }
      while (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 16 * v16 + 8), *(unsigned int *)(*(void *)a3 + 8 + 16 * v7 + 8)) & 0x80000000) != 0);
      do
        unsigned int v17 = *--v14;
      while (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 16 * v17 + 8), *(unsigned int *)(*(void *)a3 + 8 + 16 * v7 + 8)) & 0x80000000) == 0);
    }
    while (v13 < v14);
    unsigned int v10 = v13 - 1;
  }
  if (v10 != a1) {
    *a1 = *v10;
  }
  *unsigned int v10 = v7;
  return v10;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(int *a1, int *a2, uint64_t a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 16 * *(a2 - 1) + 8), *(unsigned int *)(*(void *)a3 + 8 + 16 * *a1 + 8)) & 0x80000000) != 0)
      {
        int v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      unsigned int v9 = (unsigned int *)(a1 + 2);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(a1, a1 + 1, a1 + 2, a3);
      unsigned int v10 = (unsigned int *)(a1 + 3);
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    if (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 16 * *v10 + 8), *(unsigned int *)(*(void *)a3 + 8 + 16 * *v9 + 8)) & 0x80000000) != 0)
    {
      uint64_t v13 = *v10;
      uint64_t v14 = v11;
      while (1)
      {
        *(int *)((char *)a1 + v14 + 12) = *(int *)((char *)a1 + v14 + 8);
        if (v14 == -8) {
          break;
        }
        int v15 = (*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 16 * v13 + 8), *(unsigned int *)(*(void *)a3 + 8 + 16 * *(unsigned int *)((char *)a1 + v14 + 4) + 8));
        v14 -= 4;
        if ((v15 & 0x80000000) == 0)
        {
          unsigned int v16 = (int *)((char *)a1 + v14 + 12);
          goto LABEL_12;
        }
      }
      unsigned int v16 = a1;
LABEL_12:
      *unsigned int v16 = v13;
      if (++v12 == 8) {
        return v10 + 1 == (unsigned int *)a2;
      }
    }
    unsigned int v9 = v10;
    v11 += 4;
    if (++v10 == (unsigned int *)a2) {
      return 1;
    }
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(int *a1, int *a2, int *a3, int *a4, uint64_t a5)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(a1, a2, a3, a5);
  uint64_t result = (*(uint64_t (**)(void, void))(a5 + 16))(*(unsigned int *)(*(void *)a5 + 8 + 16 * *a4 + 8), *(unsigned int *)(*(void *)a5 + 8 + 16 * *a3 + 8));
  if ((result & 0x80000000) != 0)
  {
    int v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    uint64_t result = (*(uint64_t (**)(void, void))(a5 + 16))(*(unsigned int *)(*(void *)a5 + 8 + 16 * *a3 + 8), *(unsigned int *)(*(void *)a5 + 8 + 16 * *a2 + 8));
    if ((result & 0x80000000) != 0)
    {
      int v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      uint64_t result = (*(uint64_t (**)(void, void))(a5 + 16))(*(unsigned int *)(*(void *)a5 + 8 + 16 * *a2 + 8), *(unsigned int *)(*(void *)a5 + 8 + 16 * *a1 + 8));
      if ((result & 0x80000000) != 0)
      {
        int v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(int *a1, int *a2, int *a3, int *a4, int *a5, uint64_t a6)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(a1, a2, a3, a4, a6);
  uint64_t result = (*(uint64_t (**)(void, void))(a6 + 16))(*(unsigned int *)(*(void *)a6 + 8 + 16 * *a5 + 8), *(unsigned int *)(*(void *)a6 + 8 + 16 * *a4 + 8));
  if ((result & 0x80000000) != 0)
  {
    int v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    uint64_t result = (*(uint64_t (**)(void, void))(a6 + 16))(*(unsigned int *)(*(void *)a6 + 8 + 16 * *a4 + 8), *(unsigned int *)(*(void *)a6 + 8 + 16 * *a3 + 8));
    if ((result & 0x80000000) != 0)
    {
      int v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      uint64_t result = (*(uint64_t (**)(void, void))(a6 + 16))(*(unsigned int *)(*(void *)a6 + 8 + 16 * *a3 + 8), *(unsigned int *)(*(void *)a6 + 8 + 16 * *a2 + 8));
      if ((result & 0x80000000) != 0)
      {
        int v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        uint64_t result = (*(uint64_t (**)(void, void))(a6 + 16))(*(unsigned int *)(*(void *)a6 + 8 + 16 * *a2 + 8), *(unsigned int *)(*(void *)a6 + 8 + 16 * *a1 + 8));
        if ((result & 0x80000000) != 0)
        {
          int v16 = *a1;
          *a1 = *a2;
          *a2 = v16;
        }
      }
    }
  }
  return result;
}

unsigned int *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *,unsigned int *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 5)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      int v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    int v13 = a2;
    if (a2 != a3)
    {
      int v14 = a2;
      do
      {
        if (((*(uint64_t (**)(void, void))(a4 + 16))(*(unsigned int *)(*(void *)a4 + 8 + 16 * *v14 + 8), *(unsigned int *)(*(void *)a4 + 8 + 16 * *a1 + 8)) & 0x80000000) != 0)
        {
          unsigned int v15 = *v14;
          *int v14 = *a1;
          *a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      int v13 = a3;
    }
    if (v8 >= 5)
    {
      uint64_t v16 = (unint64_t)v8 >> 2;
      unsigned int v17 = a2 - 1;
      do
      {
        unsigned int v18 = *a1;
        uint64_t v19 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(a1, a4, v16);
        if (v17 == v19)
        {
          *uint64_t v19 = v18;
        }
        else
        {
          *uint64_t v19 = *v17;
          unsigned int *v17 = v18;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>((uint64_t)a1, (uint64_t)(v19 + 1), a4, v19 + 1 - a1);
        }
        --v17;
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(uint64_t result, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    char v5 = a4;
    uint64_t v6 = result;
    int64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 2)
    {
      uint64_t v10 = ((uint64_t)a4 - result) >> 1;
      uint64_t v11 = v10 + 1;
      int v12 = (unsigned int *)(result + 4 * (v10 + 1));
      uint64_t v13 = v10 + 2;
      if (v10 + 2 < a3
        && (*(int (**)(void, void))(a2 + 16))(*(unsigned int *)(*(void *)a2 + 8 + 16 * *v12 + 8), *(unsigned int *)(*(void *)a2 + 8 + 16 * v12[1] + 8)) < 0)
      {
        ++v12;
        uint64_t v11 = v13;
      }
      uint64_t result = (*(uint64_t (**)(void, void))(a2 + 16))(*(unsigned int *)(*(void *)a2 + 8 + 16 * *v12 + 8), *(unsigned int *)(*(void *)a2 + 8 + 16 * *v5 + 8));
      if ((result & 0x80000000) == 0)
      {
        uint64_t v14 = *v5;
        do
        {
          unsigned int v15 = v12;
          _DWORD *v5 = *v12;
          if (v7 < v11) {
            break;
          }
          uint64_t v16 = (2 * v11) | 1;
          int v12 = (unsigned int *)(v6 + 4 * v16);
          if (2 * v11 + 2 < a3
            && (*(int (**)(void, void))(a2 + 16))(*(unsigned int *)(*(void *)a2 + 8 + 16 * *v12 + 8), *(unsigned int *)(*(void *)a2 + 8 + 16 * v12[1] + 8)) < 0)
          {
            ++v12;
            uint64_t v16 = 2 * v11 + 2;
          }
          uint64_t result = (*(uint64_t (**)(void, void))(a2 + 16))(*(unsigned int *)(*(void *)a2 + 8 + 16 * *v12 + 8), *(unsigned int *)(*(void *)a2 + 8 + 16 * v14 + 8));
          char v5 = v15;
          uint64_t v11 = v16;
        }
        while ((result & 0x80000000) == 0);
        _DWORD *v15 = v14;
      }
    }
  }
  return result;
}

_DWORD *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = &a1[v6 + 1];
    uint64_t v10 = (2 * v6) | 1;
    uint64_t v11 = 2 * v6 + 2;
    if (v11 < a3
      && (*(int (**)(void, void))(a2 + 16))(*(unsigned int *)(*(void *)a2 + 8 + 16 * *v9 + 8), *(unsigned int *)(*(void *)a2 + 8 + 16 * a1[v6 + 2] + 8)) < 0)
    {
      ++v9;
      uint64_t v10 = v11;
    }
    *a1 = *v9;
    a1 = v9;
    uint64_t v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v6 = result;
    unint64_t v7 = v4 >> 1;
    uint64_t v8 = (_DWORD *)(result + 4 * (v4 >> 1));
    uint64_t v9 = (_DWORD *)(a2 - 4);
    uint64_t result = (*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 16 * *v8 + 8), *(unsigned int *)(*(void *)a3 + 8 + 16 * *(unsigned int *)(a2 - 4) + 8));
    if ((result & 0x80000000) != 0)
    {
      uint64_t v10 = *v9;
      do
      {
        uint64_t v11 = v8;
        *uint64_t v9 = *v8;
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        uint64_t v8 = (_DWORD *)(v6 + 4 * v7);
        uint64_t result = (*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 16 * *v8 + 8), *(unsigned int *)(*(void *)a3 + 8 + 16 * v10 + 8));
        uint64_t v9 = v11;
      }
      while ((result & 0x80000000) != 0);
      *uint64_t v11 = v10;
    }
  }
  return result;
}

void fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst()
{
}

{
  operator new();
}

void sub_1B1BF5828(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

void sub_1B1BF58BC(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

void fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Copy()
{
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::operator=(uint64_t result, uint64_t a2)
{
  if (result != a2) {
    operator new();
  }
  return result;
}

void sub_1B1BF59E4(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

void fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Read()
{
}

void fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Read()
{
}

void sub_1B1BF5E18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  fst::FstHeader::~FstHeader(&a22);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Read(uint64_t a1)
{
  uint64_t result = fst::ImplToExpandedFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Read(a1);
  if (result) {
    operator new();
  }
  return result;
}

uint64_t fst::ImplToExpandedFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Read(uint64_t a1)
{
  v14[19] = *MEMORY[0x1E4F143B8];
  if (*(char *)(a1 + 23) < 0)
  {
    if (*(void *)(a1 + 8)) {
      goto LABEL_5;
    }
LABEL_15:
    fst::cin((fst *)a1);
    std::string::basic_string[abi:ne180100]<0>(__p, "standard input");
    fst::FstReadOptions::FstReadOptions(v12, __p, 0, 0, 0);
    fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Read();
  }
  if (!*(unsigned char *)(a1 + 23)) {
    goto LABEL_15;
  }
LABEL_5:
  std::ifstream::basic_ifstream((uint64_t *)v12);
  if ((v13[*((void *)v12[0] - 3) + 16] & 5) == 0)
  {
    fst::FstReadOptions::FstReadOptions(__p, a1, 0, 0, 0);
    fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Read();
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  uint64_t v2 = fst::LogMessage::LogMessage((fst *)&v11, (uint64_t)__p);
  uint64_t v3 = (void *)fst::cerr(v2);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"ExpandedFst::Read: Can't open file: ", 36);
  int v5 = *(char *)(a1 + 23);
  if (v5 >= 0) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)a1;
  }
  if (v5 >= 0) {
    uint64_t v7 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v7 = *(void *)(a1 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v6, v7);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v11);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  v12[0] = *(void **)MEMORY[0x1E4FBA3F8];
  *(void **)((char *)v12 + *((void *)v12[0] - 3)) = *(void **)(MEMORY[0x1E4FBA3F8] + 24);
  MEMORY[0x1B3EA7CF0](v13);
  std::istream::~istream();
  MEMORY[0x1B3EA8520](v14);
  return 0;
}

void sub_1B1BF616C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::ifstream::~ifstream(&a24);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::WriteFst<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(void *a1, void *a2, uint64_t a3)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  long long v35 = 0u;
  long long v36 = 0u;
  *(_OWORD *)uint64_t v33 = 0u;
  *(_OWORD *)long long v34 = 0u;
  uint64_t v6 = -1;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  uint64_t v37 = -1;
  uint64_t v37 = (*(int (**)(void *))(*a1 + 24))(a1);
  uint64_t v38 = -1;
  if ((*(uint64_t (**)(void *, uint64_t, void))(*a1 + 64))(a1, 1, 0))
  {
    uint64_t v6 = 0;
LABEL_3:
    int v7 = 0;
    uint64_t v38 = (int)fst::CountStates<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>((uint64_t)a1);
    goto LABEL_6;
  }
  uint64_t v8 = (char *)a2 + *(void *)(*a2 - 24);
  if ((v8[32] & 5) == 0)
  {
    (*(void (**)(std::string *__return_ptr))(**((void **)v8 + 5) + 32))(__p);
    uint64_t v6 = v41;
    if (v41 != -1) {
      goto LABEL_3;
    }
  }
  int v7 = 1;
LABEL_6:
  uint64_t v9 = (*(uint64_t (**)(void *, uint64_t, void))(*a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  uint64_t v10 = v9 | 3;
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::WriteFstHeader((uint64_t)a1, (uint64_t)a2, (unsigned char *)a3, 2, __p, v10, (uint64_t)v32);
  uint64_t v30 = v6;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  unint64_t v11 = *(void *)(a1[1] + 72) - *(void *)(a1[1] + 64);
  unint64_t v12 = v11 >> 3;
  if ((int)(v11 >> 3) < 1)
  {
    LODWORD(v12) = 0;
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v14 = (v11 >> 3);
    do
    {
      LODWORD(__p[0].__r_.__value_.__l.__data_) = (*(float (**)(void *, uint64_t))(*a1 + 32))(a1, v13);
      std::ostream::write();
      __p[0].__r_.__value_.__r.__words[0] = (*(uint64_t (**)(void *, uint64_t))(*a1 + 40))(a1, v13);
      std::ostream::write();
      uint64_t v15 = *(void *)(*(void *)(*(void *)(a1[1] + 64) + 8 * v13) + 24);
      uint64_t v16 = *(void *)(*(void *)(*(void *)(a1[1] + 64) + 8 * v13) + 32) - v15;
      if (v16)
      {
        unint64_t v17 = v16 >> 4;
        if (v17 <= 1) {
          uint64_t v18 = 1;
        }
        else {
          uint64_t v18 = v17;
        }
        uint64_t v19 = (_DWORD *)(v15 + 8);
        do
        {
          LODWORD(__p[0].__r_.__value_.__l.__data_) = *(v19 - 2);
          std::ostream::write();
          LODWORD(__p[0].__r_.__value_.__l.__data_) = *(v19 - 1);
          std::ostream::write();
          LODWORD(__p[0].__r_.__value_.__l.__data_) = *v19;
          std::ostream::write();
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v19[1];
          std::ostream::write();
          v19 += 4;
          --v18;
        }
        while (v18);
      }
      ++v13;
    }
    while (v13 != v14);
  }
  std::ostream::flush();
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    char v20 = fst::LogMessage::LogMessage((fst *)&v31, (uint64_t)__p);
    BOOL v21 = (void *)fst::cerr(v20);
    int v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"VectorFst::Write: write failed: ", 32);
    int v23 = *(char *)(a3 + 23);
    if (v23 >= 0) {
      uint64_t v24 = a3;
    }
    else {
      uint64_t v24 = *(void *)a3;
    }
    if (v23 >= 0) {
      uint64_t v25 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v25 = *(void *)(a3 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, v24, v25);
LABEL_27:
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v31);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    uint64_t updated = 0;
    goto LABEL_30;
  }
  if (!v7)
  {
    if (v38 == v12)
    {
      uint64_t updated = 1;
      goto LABEL_30;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    unint64_t v28 = fst::LogMessage::LogMessage((fst *)&v31, (uint64_t)__p);
    char v29 = (void *)fst::cerr(v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Inconsistent number of states observed during write", 51);
    goto LABEL_27;
  }
  uint64_t v38 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  uint64_t updated = fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::UpdateFstHeader((uint64_t)a1, a2, a3, 2, __p, v10, (uint64_t)v32, v30);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
LABEL_30:
  if (SHIBYTE(v35) < 0) {
    operator delete(v34[1]);
  }
  if (SHIBYTE(v34[0]) < 0) {
    operator delete(v33[0]);
  }
  return updated;
}

void sub_1B1BF669C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  fst::FstHeader::~FstHeader(&a15);
  _Unwind_Resume(a1);
}

void fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::ReserveStates(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck(a1);
  unint64_t v4 = (void **)(*(void *)(a1 + 8) + 64);
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve(v4, a2);
}

void fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::ReserveArcs(uint64_t a1, int a2, unint64_t a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck(a1);
  uint64_t v6 = (void **)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 24);
  std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::reserve(v6, a3);
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::InitStateIterator(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 8) = (*(void *)(v2 + 72) - *(void *)(v2 + 64)) >> 3;
  return result;
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::InitArcIterator(uint64_t result, int a2, void *a3)
{
  uint64_t v3 = *(void *)(result + 8);
  *a3 = 0;
  int v5 = (uint64_t *)(*(void *)(*(void *)(v3 + 64) + 8 * a2) + 24);
  uint64_t v4 = *v5;
  uint64_t v6 = (v5[1] - *v5) >> 4;
  if (v5[1] == *v5) {
    uint64_t v4 = 0;
  }
  a3[1] = v4;
  a3[2] = v6;
  a3[3] = 0;
  return result;
}

void fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::InitMutableArcIterator()
{
}

void sub_1B1BF6888(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B1C402DF695F1);
  _Unwind_Resume(a1);
}

void fst::VectorFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::VectorFst()
{
}

{
  operator new();
}

void sub_1B1BF690C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

void sub_1B1BF69A0(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

void fst::VectorFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Copy()
{
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::operator=(uint64_t result, uint64_t a2)
{
  if (result != a2) {
    operator new();
  }
  return result;
}

void sub_1B1BF6AC8(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::WriteFst<fst::VectorFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>(void *a1, void *a2, uint64_t a3)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  long long v35 = 0u;
  long long v36 = 0u;
  *(_OWORD *)uint64_t v33 = 0u;
  *(_OWORD *)long long v34 = 0u;
  uint64_t v6 = -1;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  uint64_t v37 = -1;
  uint64_t v37 = (*(int (**)(void *))(*a1 + 24))(a1);
  uint64_t v38 = -1;
  if ((*(uint64_t (**)(void *, uint64_t, void))(*a1 + 64))(a1, 1, 0))
  {
    uint64_t v6 = 0;
LABEL_3:
    int v7 = 0;
    uint64_t v38 = (int)fst::CountStates<fst::ArcTpl<fst::LogWeightTpl<float>,int>>((uint64_t)a1);
    goto LABEL_6;
  }
  uint64_t v8 = (char *)a2 + *(void *)(*a2 - 24);
  if ((v8[32] & 5) == 0)
  {
    (*(void (**)(std::string *__return_ptr))(**((void **)v8 + 5) + 32))(__p);
    uint64_t v6 = v41;
    if (v41 != -1) {
      goto LABEL_3;
    }
  }
  int v7 = 1;
LABEL_6:
  uint64_t v9 = (*(uint64_t (**)(void *, uint64_t, void))(*a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  uint64_t v10 = v9 | 3;
  fst::FstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::WriteFstHeader((uint64_t)a1, (uint64_t)a2, (unsigned char *)a3, 2, __p, v10, (uint64_t)v32);
  uint64_t v30 = v6;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  unint64_t v11 = *(void *)(a1[1] + 72) - *(void *)(a1[1] + 64);
  unint64_t v12 = v11 >> 3;
  if ((int)(v11 >> 3) < 1)
  {
    LODWORD(v12) = 0;
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v14 = (v11 >> 3);
    do
    {
      LODWORD(__p[0].__r_.__value_.__l.__data_) = (*(float (**)(void *, uint64_t))(*a1 + 32))(a1, v13);
      std::ostream::write();
      __p[0].__r_.__value_.__r.__words[0] = (*(uint64_t (**)(void *, uint64_t))(*a1 + 40))(a1, v13);
      std::ostream::write();
      uint64_t v15 = *(void *)(*(void *)(*(void *)(a1[1] + 64) + 8 * v13) + 24);
      uint64_t v16 = *(void *)(*(void *)(*(void *)(a1[1] + 64) + 8 * v13) + 32) - v15;
      if (v16)
      {
        unint64_t v17 = v16 >> 4;
        if (v17 <= 1) {
          uint64_t v18 = 1;
        }
        else {
          uint64_t v18 = v17;
        }
        uint64_t v19 = (_DWORD *)(v15 + 8);
        do
        {
          LODWORD(__p[0].__r_.__value_.__l.__data_) = *(v19 - 2);
          std::ostream::write();
          LODWORD(__p[0].__r_.__value_.__l.__data_) = *(v19 - 1);
          std::ostream::write();
          LODWORD(__p[0].__r_.__value_.__l.__data_) = *v19;
          std::ostream::write();
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v19[1];
          std::ostream::write();
          v19 += 4;
          --v18;
        }
        while (v18);
      }
      ++v13;
    }
    while (v13 != v14);
  }
  std::ostream::flush();
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    char v20 = fst::LogMessage::LogMessage((fst *)&v31, (uint64_t)__p);
    BOOL v21 = (void *)fst::cerr(v20);
    int v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"VectorFst::Write: write failed: ", 32);
    int v23 = *(char *)(a3 + 23);
    if (v23 >= 0) {
      uint64_t v24 = a3;
    }
    else {
      uint64_t v24 = *(void *)a3;
    }
    if (v23 >= 0) {
      uint64_t v25 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v25 = *(void *)(a3 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, v24, v25);
LABEL_27:
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v31);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    uint64_t updated = 0;
    goto LABEL_30;
  }
  if (!v7)
  {
    if (v38 == v12)
    {
      uint64_t updated = 1;
      goto LABEL_30;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    unint64_t v28 = fst::LogMessage::LogMessage((fst *)&v31, (uint64_t)__p);
    char v29 = (void *)fst::cerr(v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Inconsistent number of states observed during write", 51);
    goto LABEL_27;
  }
  uint64_t v38 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  uint64_t updated = fst::FstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::UpdateFstHeader((uint64_t)a1, a2, a3, 2, __p, v10, (uint64_t)v32, v30);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
LABEL_30:
  if (SHIBYTE(v35) < 0) {
    operator delete(v34[1]);
  }
  if (SHIBYTE(v34[0]) < 0) {
    operator delete(v33[0]);
  }
  return updated;
}

void sub_1B1BF6FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  fst::FstHeader::~FstHeader(&a15);
  _Unwind_Resume(a1);
}

uint64_t fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::WriteFile(fst *a1, uint64_t a2)
{
  v25[19] = *MEMORY[0x1E4F143B8];
  if (*(char *)(a2 + 23) < 0)
  {
    if (*(void *)(a2 + 8))
    {
LABEL_5:
      std::ofstream::basic_ofstream((uint64_t *)&v20);
      if ((v24[*(void *)(v20.__r_.__value_.__r.__words[0] - 24)] & 5) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
        uint64_t v4 = fst::LogMessage::LogMessage((fst *)&v19, (uint64_t)&__p);
        int v5 = (void *)fst::cerr(v4);
        uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Fst::Write: Can't open file: ", 29);
        int v7 = *(char *)(a2 + 23);
        if (v7 >= 0) {
          uint64_t v8 = (const std::string::value_type *)a2;
        }
        else {
          uint64_t v8 = *(const std::string::value_type **)a2;
        }
        if (v7 >= 0) {
          uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          uint64_t v9 = *(void *)(a2 + 8);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v8, v9);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v19);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        uint64_t v10 = 0;
      }
      else
      {
        char v13 = FLAGS_fst_align;
        if (*(char *)(a2 + 23) < 0) {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
        }
        else {
          std::string __p = *(std::string *)a2;
        }
        __int16 v16 = 257;
        char v17 = 1;
        char v18 = v13;
        uint64_t v10 = (*(uint64_t (**)(fst *, std::string *, std::string *))(*(void *)a1 + 96))(a1, &v20, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      v20.__r_.__value_.__r.__words[0] = *MEMORY[0x1E4FBA400];
      *(std::string::size_type *)((char *)v20.__r_.__value_.__r.__words
                                + *(void *)(v20.__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x1E4FBA400]
                                                                                                  + 24);
      MEMORY[0x1B3EA7CF0](&v20.__r_.__value_.__r.__words[1]);
      std::ostream::~ostream();
      MEMORY[0x1B3EA8520](v25);
      return v10;
    }
  }
  else if (*(unsigned char *)(a2 + 23))
  {
    goto LABEL_5;
  }
  uint64_t v11 = fst::cout(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "standard output");
  char v12 = FLAGS_fst_align;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v20, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v20 = __p;
  }
  __int16 v21 = 257;
  char v22 = 1;
  char v23 = v12;
  uint64_t v10 = (*(uint64_t (**)(fst *, uint64_t, std::string *))(*(void *)a1 + 96))(a1, v11, &v20);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v10;
}

void sub_1B1BF7334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
}

void fst::VectorFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::ReserveStates(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::MutateCheck(a1);
  uint64_t v4 = (void **)(*(void *)(a1 + 8) + 64);
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve(v4, a2);
}

void fst::VectorFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::ReserveArcs(uint64_t a1, int a2, unint64_t a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::MutateCheck(a1);
  uint64_t v6 = (void **)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 24);
  std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::reserve(v6, a3);
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::InitStateIterator(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 8) = (*(void *)(v2 + 72) - *(void *)(v2 + 64)) >> 3;
  return result;
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::InitArcIterator(uint64_t result, int a2, void *a3)
{
  uint64_t v3 = *(void *)(result + 8);
  *a3 = 0;
  int v5 = (uint64_t *)(*(void *)(*(void *)(v3 + 64) + 8 * a2) + 24);
  uint64_t v4 = *v5;
  uint64_t v6 = (v5[1] - *v5) >> 4;
  if (v5[1] == *v5) {
    uint64_t v4 = 0;
  }
  a3[1] = v4;
  a3[2] = v6;
  a3[3] = 0;
  return result;
}

void fst::VectorFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::InitMutableArcIterator()
{
}

void sub_1B1BF7520(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B1C402DF695F1);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::MutateCheck(uint64_t result)
{
  if (*(int *)(*(void *)(result + 8) + 56) >= 2) {
    operator new();
  }
  return result;
}

void sub_1B1BF75D8(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

BOOL fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::Done_(uint64_t a1)
{
  return *(void *)(a1 + 24) >= (unint64_t)((uint64_t)(*(void *)(*(void *)(a1 + 8) + 32)
                                                            - *(void *)(*(void *)(a1 + 8) + 24)) >> 4);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::Value_(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 24) + 16 * *(void *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::Next_(uint64_t result)
{
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::Position_(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::Reset_(uint64_t result)
{
  *(void *)(result + ++*(void *)(result + 24) = 0;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::Seek_(uint64_t result, uint64_t a2)
{
  *(void *)(result + ++*(void *)(result + 24) = a2;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::Flags_()
{
  return 15;
}

BOOL fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::Done_(uint64_t a1)
{
  return *(void *)(a1 + 24) >= (unint64_t)((uint64_t)(*(void *)(*(void *)(a1 + 8) + 32)
                                                            - *(void *)(*(void *)(a1 + 8) + 24)) >> 4);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::Value_(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 24) + 16 * *(void *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::Next_(uint64_t result)
{
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::Position_(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::Reset_(uint64_t result)
{
  *(void *)(result + ++*(void *)(result + 24) = 0;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::Seek_(uint64_t result, uint64_t a2)
{
  *(void *)(result + ++*(void *)(result + 24) = a2;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::Flags_()
{
  return 15;
}

void fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~VectorFst(void *a1)
{
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::ImplToExpandedFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumStates(uint64_t a1)
{
  return (*(void *)(*(void *)(a1 + 8) + 72) - *(void *)(*(void *)(a1 + 8) + 64)) >> 3;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetFinal(uint64_t a1, int a2, float a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck(a1);
  uint64_t v6 = *(void **)(a1 + 8);
  return fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetFinal(v6, a2, a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a3 & 4;
  uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), v6);
  if (result != (v6 & a2)) {
    uint64_t result = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck(a1);
  }
  *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~a3 | 4) | a3 & a2;
  return result;
}

void fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::AddArc(uint64_t a1, int a2, float *a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck(a1);
  uint64_t v6 = *(void **)(a1 + 8);
  fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddArc(v6, a2, a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::DeleteStates(uint64_t a1, char **a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck(a1);
  uint64_t v4 = *(void **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::DeleteStates((uint64_t)v4, a2);
  uint64_t result = (*(uint64_t (**)(void *))(*v4 + 24))(v4);
  v4[1] = v4[1] & 4 | result & 0x6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::DeleteArcs(uint64_t a1, int a2, uint64_t a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck(a1);
  uint64_t v6 = *(void **)(a1 + 8);
  fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::DeleteArcs(*(void **)(v6[8] + 8 * a2), a3);
  uint64_t result = (*(uint64_t (**)(void *))(*v6 + 24))(v6);
  v6[1] = v6[1] & 4 | result & 0xA6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::DeleteArcs(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck(a1);
  uint64_t v4 = *(void **)(a1 + 8);
  int v5 = *(void **)(v4[8] + 8 * a2);
  v5[1] = 0;
  void v5[2] = 0;
  void v5[4] = v5[3];
  uint64_t result = (*(uint64_t (**)(void *))(*v4 + 24))(v4);
  v4[1] = v4[1] & 4 | result & 0xA6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutableInputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutableOutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetInputSymbols(uint64_t a1, uint64_t a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  return fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetInputSymbols(v4, a2);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetOutputSymbols(uint64_t a1, uint64_t a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  return fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetOutputSymbols(v4, a2);
}

void fst::VectorFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::~VectorFst(void *a1)
{
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~ImplToFst(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Start(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 8) + 88);
}

float fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Final(uint64_t a1, int a2)
{
  return **(float **)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::NumArcs(uint64_t a1, int a2)
{
  return (uint64_t)(*(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 32)
                 - *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 24)) >> 4;
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 8);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 16);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = fst::TestProperties<fst::ArcTpl<fst::LogWeightTpl<float>,int>>(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    int v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return v7();
  }
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Type(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

void fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::GetArcs(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::IsMemoryMapped()
{
  return 0;
}

uint64_t fst::ImplToExpandedFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::NumStates(uint64_t a1)
{
  return (*(void *)(*(void *)(a1 + 8) + 72) - *(void *)(*(void *)(a1 + 8) + 64)) >> 3;
}

unint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::SetStart(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::MutateCheck(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  *(_DWORD *)(v4 + 88) = a2;
  unint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
  *(void *)(v4 + 8) = result & 0xCCFFFFF0007 | (((result >> 35) & 1) << 37) | *(void *)(v4 + 8) & 4;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::SetFinal(uint64_t a1, int a2, float a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::MutateCheck(a1);
  uint64_t v6 = *(void **)(a1 + 8);
  return fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::SetFinal(v6, a2, a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::SetProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a3 & 4;
  uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), v6);
  if (result != (v6 & a2)) {
    uint64_t result = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::MutateCheck(a1);
  }
  *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~a3 | 4) | a3 & a2;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::AddState(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::MutateCheck(a1);
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddState(v2);
  v2[1] = v2[1] & 4 | (*(uint64_t (**)(void *))(*v2 + 24))(v2) & 0x2AFFFFFF0007;
  return v3;
}

void fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::AddArc(uint64_t a1, int a2, float *a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::MutateCheck(a1);
  uint64_t v6 = *(void **)(a1 + 8);
  fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::AddArc(v6, a2, a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::DeleteStates(uint64_t a1, char **a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::MutateCheck(a1);
  uint64_t v4 = *(void **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::DeleteStates((uint64_t)v4, a2);
  uint64_t result = (*(uint64_t (**)(void *))(*v4 + 24))(v4);
  v4[1] = v4[1] & 4 | result & 0x6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::DeleteStates(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::MutateCheck(a1);
  uint64_t v2 = *(void **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::DeleteStates((uint64_t)v2);
  uint64_t result = (*(uint64_t (**)(void *))(*v2 + 24))(v2);
  v2[1] = (*((_DWORD *)v2 + 2) | result) & 4 | 0x156A5A950003;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::DeleteArcs(uint64_t a1, int a2, uint64_t a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::MutateCheck(a1);
  uint64_t v6 = *(void **)(a1 + 8);
  fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::DeleteArcs(*(void **)(v6[8] + 8 * a2), a3);
  uint64_t result = (*(uint64_t (**)(void *))(*v6 + 24))(v6);
  v6[1] = v6[1] & 4 | result & 0xA6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::DeleteArcs(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::MutateCheck(a1);
  uint64_t v4 = *(void **)(a1 + 8);
  unint64_t v5 = *(void **)(v4[8] + 8 * a2);
  v5[1] = 0;
  void v5[2] = 0;
  void v5[4] = v5[3];
  uint64_t result = (*(uint64_t (**)(void *))(*v4 + 24))(v4);
  v4[1] = v4[1] & 4 | result & 0xA6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::MutableInputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::MutableOutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::SetInputSymbols(uint64_t a1, uint64_t a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::MutateCheck(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  return fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetInputSymbols(v4, a2);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::SetOutputSymbols(uint64_t a1, uint64_t a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::MutateCheck(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  return fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetOutputSymbols(v4, a2);
}

void fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::~MutableArcIterator()
{
}

uint64_t fst::ArcIteratorBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Reinit()
{
  return 0;
}

void fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::~MutableArcIterator()
{
}

uint64_t fst::ArcIteratorBase<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Reinit()
{
  return 0;
}

void *fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~ImplToFst(void *a1)
{
  *a1 = &unk_1F0A429A0;
  uint64_t v2 = (_DWORD *)a1[1];
  if (v2)
  {
    int v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

uint64_t fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Write(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  uint64_t v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  int v3 = (void *)fst::cerr(v2);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write stream method for ", 39);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
  int v6 = *(char *)(v5 + 23);
  if (v6 >= 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = *(void *)v5;
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    uint64_t v8 = *(void *)(v5 + 8);
  }
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

{
  fst *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *__p[2];
  char v12;
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  uint64_t v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  int v3 = (void *)fst::cerr(v2);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write filename method for ", 41);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
  int v6 = *(char *)(v5 + 23);
  if (v6 >= 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = *(void *)v5;
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    uint64_t v8 = *(void *)(v5 + 8);
  }
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_1B1BF8354(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B1BF8450(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::operator=(uint64_t a1)
{
  if (FLAGS_fst_error_fatal) {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
  }
  else {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  }
  uint64_t v2 = fst::LogMessage::LogMessage((fst *)&v7, (uint64_t)__p);
  int v3 = (void *)fst::cerr(v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"ImplToFst: Assignment operator disallowed", 41);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *(void *)(*(void *)(a1 + 8) + 8) |= 4uLL;
  return a1;
}

void sub_1B1BF854C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A3FD50;
  *(void *)(a1 + 8) = 0;
  uint64_t v2 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(void *)a1 = &unk_1F0A3A480;
  std::string::basic_string[abi:ne180100]<0>(&__str, "vector");
  std::string::operator=(v2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 8) = *(void *)(a1 + 8) & 4 | 0x156A5A950003;
  return a1;
}

void sub_1B1BF8668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~VectorFstBaseImpl(v15);
  _Unwind_Resume(a1);
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::ReadHeader(uint64_t a1, void *a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(a3 + 24);
  if (v10)
  {
    *(_DWORD *)a5 = *(_DWORD *)v10;
    std::string::operator=((std::string *)(a5 + 8), (const std::string *)(v10 + 8));
    std::string::operator=((std::string *)(a5 + 32), (const std::string *)(v10 + 32));
    uint64_t v11 = *(void *)(v10 + 88);
    long long v12 = *(_OWORD *)(v10 + 72);
    *(_OWORD *)(a5 + 56) = *(_OWORD *)(v10 + 56);
    *(_OWORD *)(a5 + 72) = v12;
    *(void *)(a5 + 88) = v11;
  }
  else
  {
    int v13 = fst::FstHeader::Read(a5, (uint64_t)a2, a3, 0);
    uint64_t result = 0;
    if (!v13) {
      return result;
    }
  }
  if (FLAGS_v >= 2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
    uint64_t v15 = fst::LogMessage::LogMessage((fst *)&v83, (uint64_t)__p);
    __int16 v16 = (void *)fst::cerr(v15);
    char v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"FstImpl::ReadHeader: source: ", 29);
    int v18 = *(char *)(a3 + 23);
    uint64_t v19 = v18 >= 0 ? a3 : *(void *)a3;
    uint64_t v20 = v18 >= 0 ? *(unsigned __int8 *)(a3 + 23) : *(void *)(a3 + 8);
    __int16 v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v19, v20);
    char v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)", fst_type: ", 12);
    int v23 = *(char *)(a5 + 31);
    uint64_t v24 = v23 >= 0 ? a5 + 8 : *(void *)(a5 + 8);
    uint64_t v25 = v23 >= 0 ? *(unsigned __int8 *)(a5 + 31) : *(void *)(a5 + 16);
    unint64_t v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, v24, v25);
    uint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)", arc_type: ", 12);
    uint64_t v28 = fst::ArcTpl<fst::TropicalWeightTpl<float>,int>::Type();
    int v29 = *(char *)(v28 + 23);
    uint64_t v30 = v29 >= 0 ? v28 : *(void *)v28;
    uint64_t v31 = v29 >= 0 ? *(unsigned __int8 *)(v28 + 23) : *(void *)(v28 + 8);
    int v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, v30, v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)", version: ", 11);
    uint64_t v33 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)", flags: ", 9);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v83);
    if (v82 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v34 = *(unsigned __int8 *)(a5 + 31);
  if ((v34 & 0x80u) == 0) {
    uint64_t v35 = *(unsigned __int8 *)(a5 + 31);
  }
  else {
    uint64_t v35 = *(void *)(a5 + 16);
  }
  uint64_t v36 = *(unsigned __int8 *)(a1 + 39);
  int v37 = (char)v36;
  if ((v36 & 0x80u) != 0) {
    uint64_t v36 = *(void *)(a1 + 24);
  }
  if (v35 != v36) {
    goto LABEL_40;
  }
  uint64_t v38 = (const void **)(a5 + 8);
  if (v37 >= 0) {
    uint64_t v39 = (unsigned __int8 *)(a1 + 16);
  }
  else {
    uint64_t v39 = *(unsigned __int8 **)(a1 + 16);
  }
  if ((v34 & 0x80) != 0)
  {
    if (memcmp(*v38, v39, *(void *)(a5 + 16)))
    {
LABEL_40:
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      uint64_t v40 = fst::LogMessage::LogMessage((fst *)&v83, (uint64_t)__p);
      uint64_t v41 = (void *)fst::cerr(v40);
      uint64_t v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"FstImpl::ReadHeader: Fst not of type \"", 38);
      int v43 = *(char *)(a1 + 39);
      if (v43 >= 0) {
        uint64_t v44 = a1 + 16;
      }
      else {
        uint64_t v44 = *(void *)(a1 + 16);
      }
      if (v43 >= 0) {
        uint64_t v45 = *(unsigned __int8 *)(a1 + 39);
      }
      else {
        uint64_t v45 = *(void *)(a1 + 24);
      }
      uint64_t v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, v44, v45);
      uint64_t v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"\": ", 3);
      int v48 = *(char *)(a3 + 23);
      if (v48 >= 0) {
        uint64_t v49 = a3;
      }
      else {
        uint64_t v49 = *(void *)a3;
      }
      if (v48 >= 0) {
        uint64_t v50 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v50 = *(void *)(a3 + 8);
      }
      goto LABEL_79;
    }
  }
  else if (*(unsigned char *)(a5 + 31))
  {
    while (*(unsigned __int8 *)v38 == *v39)
    {
      uint64_t v38 = (const void **)((char *)v38 + 1);
      ++v39;
      if (!--v34) {
        goto LABEL_52;
      }
    }
    goto LABEL_40;
  }
LABEL_52:
  uint64_t v51 = fst::ArcTpl<fst::TropicalWeightTpl<float>,int>::Type();
  uint64_t v52 = *(unsigned __int8 *)(a5 + 55);
  if ((v52 & 0x80u) == 0) {
    uint64_t v53 = *(unsigned __int8 *)(a5 + 55);
  }
  else {
    uint64_t v53 = *(void *)(a5 + 40);
  }
  uint64_t v54 = *(unsigned __int8 *)(v51 + 23);
  int v55 = (char)v54;
  if ((v54 & 0x80u) != 0) {
    uint64_t v54 = *(void *)(v51 + 8);
  }
  if (v53 != v54) {
    goto LABEL_67;
  }
  uint64_t v56 = (const void **)(a5 + 32);
  if (v55 >= 0) {
    uint64_t v57 = (unsigned __int8 *)v51;
  }
  else {
    uint64_t v57 = *(unsigned __int8 **)v51;
  }
  if ((v52 & 0x80) != 0)
  {
    if (memcmp(*v56, v57, *(void *)(a5 + 40)))
    {
LABEL_67:
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      uint64_t v58 = fst::LogMessage::LogMessage((fst *)&v83, (uint64_t)__p);
      uint64_t v59 = (void *)fst::cerr(v58);
      uint64_t v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)"FstImpl::ReadHeader: Arc not of type \"", 38);
      uint64_t v61 = fst::ArcTpl<fst::TropicalWeightTpl<float>,int>::Type();
      int v62 = *(char *)(v61 + 23);
      if (v62 >= 0) {
        uint64_t v63 = v61;
      }
      else {
        uint64_t v63 = *(void *)v61;
      }
      if (v62 >= 0) {
        uint64_t v64 = *(unsigned __int8 *)(v61 + 23);
      }
      else {
        uint64_t v64 = *(void *)(v61 + 8);
      }
      uint64_t v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, v63, v64);
      uint64_t v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"\": ", 3);
      int v66 = *(char *)(a3 + 23);
      if (v66 >= 0) {
        uint64_t v49 = a3;
      }
      else {
        uint64_t v49 = *(void *)a3;
      }
      if (v66 >= 0) {
        uint64_t v50 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v50 = *(void *)(a3 + 8);
      }
      goto LABEL_79;
    }
  }
  else if (*(unsigned char *)(a5 + 55))
  {
    while (*(unsigned __int8 *)v56 == *v57)
    {
      uint64_t v56 = (const void **)((char *)v56 + 1);
      ++v57;
      if (!--v52) {
        goto LABEL_83;
      }
    }
    goto LABEL_67;
  }
LABEL_83:
  if (*(_DWORD *)(a5 + 56) < a4)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    uint64_t v67 = fst::LogMessage::LogMessage((fst *)&v83, (uint64_t)__p);
    uint64_t v68 = (void *)fst::cerr(v67);
    uint64_t v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"FstImpl::ReadHeader: Obsolete ", 30);
    int v70 = *(char *)(a1 + 39);
    if (v70 >= 0) {
      uint64_t v71 = a1 + 16;
    }
    else {
      uint64_t v71 = *(void *)(a1 + 16);
    }
    if (v70 >= 0) {
      uint64_t v72 = *(unsigned __int8 *)(a1 + 39);
    }
    else {
      uint64_t v72 = *(void *)(a1 + 24);
    }
    uint64_t v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, v71, v72);
    uint64_t v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)" Fst version: ", 14);
    int v74 = *(char *)(a3 + 23);
    if (v74 >= 0) {
      uint64_t v49 = a3;
    }
    else {
      uint64_t v49 = *(void *)a3;
    }
    if (v74 >= 0) {
      uint64_t v50 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v50 = *(void *)(a3 + 8);
    }
LABEL_79:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, v49, v50);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v83);
    if (v82 < 0) {
      operator delete(__p[0]);
    }
    return 0;
  }
  *(void *)(a1 + 8) = *(void *)(a5 + 64);
  if (*(unsigned char *)(a5 + 60)) {
    *(void *)(a1 + 40) = fst::SymbolTable::Read(a2, (const std::string *)a3);
  }
  if (!*(unsigned char *)(a3 + 52))
  {
    uint64_t v75 = *(void *)(a1 + 40);
    if (v75)
    {
      (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)v75 + 8))(v75, v57);
      *(void *)(a1 + 40) = 0;
    }
  }
  if ((*(unsigned char *)(a5 + 60) & 2) != 0) {
    *(void *)(a1 + 48) = fst::SymbolTable::Read(a2, (const std::string *)a3);
  }
  if (!*(unsigned char *)(a3 + 53))
  {
    uint64_t v76 = *(void *)(a1 + 48);
    if (v76)
    {
      (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)v76 + 8))(v76, v57);
      *(void *)(a1 + 48) = 0;
    }
  }
  uint64_t v77 = *(void *)(a3 + 32);
  if (v77)
  {
    uint64_t v78 = *(void *)(a1 + 40);
    if (v78)
    {
      (*(void (**)(void, unsigned __int8 *))(*(void *)v78 + 8))(*(void *)(a1 + 40), v57);
      uint64_t v77 = *(void *)(a3 + 32);
    }
    *(void *)(a1 + 40) = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(*(void *)v77 + 16))(v77, v57);
  }
  uint64_t v79 = *(void *)(a3 + 40);
  if (v79)
  {
    uint64_t v80 = *(void *)(a1 + 48);
    if (v80)
    {
      (*(void (**)(void, unsigned __int8 *))(*(void *)v80 + 8))(*(void *)(a1 + 48), v57);
      uint64_t v79 = *(void *)(a3 + 40);
    }
    *(void *)(a1 + 48) = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(*(void *)v79 + 16))(v79, v57);
  }
  return 1;
}

void sub_1B1BF8C68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::SymbolTable::Read(void *a1, const std::string *a2)
{
  *(_OWORD *)std::string __p = 0u;
  long long v6 = 0u;
  std::string::operator=((std::string *)&__p[1], a2);
  uint64_t v3 = fst::SymbolTable::Read(a1);
  if (SHIBYTE(v6) < 0) {
    operator delete(__p[1]);
  }
  return v3;
}

void sub_1B1BF8D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t fst::SymbolTable::Read(void *a1)
{
  uint64_t result = fst::SymbolTableImpl::Read(a1);
  if (result) {
    operator new();
  }
  return result;
}

void fst::SymbolTableReadOptions::~SymbolTableReadOptions(void **this)
{
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  uint64_t v2 = *this;
  if (*this)
  {
    this[1] = v2;
    operator delete(v2);
  }
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::WriteFstHeader(uint64_t a1, uint64_t a2, unsigned char *a3, int a4, std::string *__str, uint64_t a6, uint64_t a7)
{
  if (a3[24])
  {
    std::string::operator=((std::string *)(a7 + 8), __str);
    int v13 = (const std::string *)fst::ArcTpl<fst::TropicalWeightTpl<float>,int>::Type();
    std::string::operator=((std::string *)(a7 + 32), v13);
    *(_DWORD *)(a7 + 56) = a4;
    *(void *)(a7 + 64) = a6;
    if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1)) {
      BOOL v14 = a3[25] == 0;
    }
    else {
      BOOL v14 = 1;
    }
    int v15 = !v14;
    uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
    if (a3[26]) {
      BOOL v17 = v16 == 0;
    }
    else {
      BOOL v17 = 1;
    }
    int v18 = v15 | 2;
    if (v17) {
      int v18 = v15;
    }
    if (a3[27]) {
      v18 |= 4u;
    }
    *(_DWORD *)(a7 + 60) = v18;
    fst::FstHeader::Write();
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1)) {
    BOOL v19 = a3[25] == 0;
  }
  else {
    BOOL v19 = 1;
  }
  if (!v19)
  {
    uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 72))(v20, a2);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  if (result && a3[26])
  {
    char v22 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1) + 72);
    return v22();
  }
  return result;
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::UpdateFstHeader(uint64_t a1, void *a2, uint64_t a3, int a4, std::string *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  MEMORY[0x1B3EA7E70](v32);
  uint64_t v16 = (char *)a2 + *(void *)(*a2 - 24);
  if ((v16[32] & 5) == 0)
  {
    uint64_t v17 = *((void *)v16 + 5);
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long __p = 0u;
    long long v35 = 0u;
    uint64_t v42 = a8;
    (*(void (**)(void *__return_ptr))(*(void *)v17 + 40))(v33);
    if (v33[16] == -1) {
      std::ios_base::clear((std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32) | 4);
    }
  }
  MEMORY[0x1B3EA7E80](v32);
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    int v18 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
    BOOL v19 = (void *)fst::cerr(v18);
    uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
    int v21 = *(char *)(a3 + 23);
    if (v21 >= 0) {
      uint64_t v22 = a3;
    }
    else {
      uint64_t v22 = *(void *)a3;
    }
    if (v21 >= 0) {
      uint64_t v23 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v23 = *(void *)(a3 + 8);
    }
  }
  else
  {
    fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::WriteFstHeader(a1, (uint64_t)a2, (unsigned char *)a3, a4, a5, a6, a7);
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      uint64_t v24 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
      uint64_t v25 = (void *)fst::cerr(v24);
      uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      int v26 = *(char *)(a3 + 23);
      if (v26 >= 0) {
        uint64_t v22 = a3;
      }
      else {
        uint64_t v22 = *(void *)a3;
      }
      if (v26 >= 0) {
        uint64_t v23 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v23 = *(void *)(a3 + 8);
      }
    }
    else
    {
      MEMORY[0x1B3EA7E70](v33, a2);
      uint64_t v27 = (char *)a2 + *(void *)(*a2 - 24);
      if ((v27[32] & 5) == 0)
      {
        (*(void (**)(long long *__return_ptr))(**((void **)v27 + 5) + 32))(&__p);
        if (v42 == -1) {
          std::ios_base::clear((std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32) | 4);
        }
      }
      MEMORY[0x1B3EA7E80](v33);
      if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) == 0) {
        return 1;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      uint64_t v28 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
      int v29 = (void *)fst::cerr(v28);
      uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      int v30 = *(char *)(a3 + 23);
      if (v30 >= 0) {
        uint64_t v22 = a3;
      }
      else {
        uint64_t v22 = *(void *)a3;
      }
      if (v30 >= 0) {
        uint64_t v23 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v23 = *(void *)(a3 + 8);
      }
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v22, v23);
  fst::LogMessage::~LogMessage((fst::LogMessage *)v33);
  if (SBYTE7(v35) < 0) {
    operator delete((void *)__p);
  }
  return 0;
}

void sub_1B1BF9388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::VectorFstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A3FCE0;
  *(void *)(a1 + 8) = 0;
  uint64_t v2 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(void *)a1 = &unk_1F0A3A410;
  std::string::basic_string[abi:ne180100]<0>(&__str, "vector");
  std::string::operator=(v2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 8) = *(void *)(a1 + 8) & 4 | 0x156A5A950003;
  return a1;
}

void sub_1B1BF94CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::~VectorFstBaseImpl(v15);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::~VectorFstBaseImpl(void *a1)
{
  *a1 = &unk_1F0A3D210;
  uint64_t v2 = (void **)a1[9];
  if (v2 != (void **)a1[8])
  {
    unint64_t v3 = 0;
    uint64_t v2 = (void **)a1[8];
    do
    {
      fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Destroy(v2[v3++]);
      uint64_t v2 = (void **)a1[8];
    }
    while (v3 < (uint64_t)(a1[9] - (void)v2) >> 3);
  }
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  return fst::FstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::~FstImpl((uint64_t)a1);
}

void fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::~VectorFstImpl(void *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::HasSequentialStates()
{
  return 1;
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Properties(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Properties(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 8) & a2;
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::~VectorFstBaseImpl(void *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::FstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::~FstImpl(uint64_t a1)
{
  fst::FstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::~FstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::~FstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A3FCE0;
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::VectorFstImpl(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A3FCE0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)(a1 + 64) = 0;
  uint64_t v5 = (void *)(a1 + 64);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(void *)a1 = &unk_1F0A3A410;
  std::string::basic_string[abi:ne180100]<0>(&__p, "vector");
  std::string::operator=(v4, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetInputSymbols(a1, v6);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 120))(a2);
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetOutputSymbols(a1, v7);
  *(_DWORD *)(a1 + 88) = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 1, 0))
  {
    int v8 = fst::CountStates<fst::ArcTpl<fst::LogWeightTpl<float>,int>>(a2);
    std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(a1 + 64), v8);
  }
  unsigned int v18 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 128))(a2, &v16);
  while (1)
  {
    if (!v16)
    {
      if ((int)v18 >= v17) {
        goto LABEL_31;
      }
LABEL_11:
      uint64_t v9 = v18;
      goto LABEL_12;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v16 + 16))(v16)) {
      break;
    }
    if (!v16) {
      goto LABEL_11;
    }
    uint64_t v9 = (*(uint64_t (**)(void))(*(void *)v16 + 24))();
LABEL_12:
    fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddState((void *)a1);
    **(float **)(*v5 + 8 * (int)v9) = (*(float (**)(uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v9);
    unint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, v9);
    std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::reserve((void **)(*(void *)(*v5 + 8 * (int)v9) + 24), v10);
    std::string::size_type v15 = 0;
    (*(void (**)(uint64_t, uint64_t, std::string *))(*(void *)a2 + 136))(a2, v9, &__p);
    while (1)
    {
      if (!__p.__r_.__value_.__r.__words[0])
      {
        if (v15 >= __p.__r_.__value_.__r.__words[2]) {
          goto LABEL_24;
        }
LABEL_18:
        uint64_t v11 = (_DWORD *)(__p.__r_.__value_.__l.__size_ + 16 * v15);
        goto LABEL_19;
      }
      if ((*(unsigned int (**)(std::string::size_type))(*(void *)__p.__r_.__value_.__l.__data_ + 24))(__p.__r_.__value_.__r.__words[0])) {
        break;
      }
      if (!__p.__r_.__value_.__r.__words[0]) {
        goto LABEL_18;
      }
      uint64_t v11 = (_DWORD *)(*(uint64_t (**)(void))(*(void *)__p.__r_.__value_.__l.__data_ + 32))();
LABEL_19:
      fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::AddArc(*(void **)(*v5 + 8 * (int)v9), v11);
      if (__p.__r_.__value_.__r.__words[0]) {
        (*(void (**)(std::string::size_type))(*(void *)__p.__r_.__value_.__l.__data_ + 40))(__p.__r_.__value_.__r.__words[0]);
      }
      else {
        ++v15;
      }
    }
    if (__p.__r_.__value_.__r.__words[0])
    {
      (*(void (**)(void))(*(void *)__p.__r_.__value_.__l.__data_ + 8))();
      goto LABEL_26;
    }
LABEL_24:
    if (v14) {
      --*v14;
    }
LABEL_26:
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 32))(v16);
    }
    else {
      ++v18;
    }
  }
  if (v16) {
    (*(void (**)(void))(*(void *)v16 + 8))();
  }
LABEL_31:
  *(void *)(a1 + 8) = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x3FFFFFFF0004, 0) | *(void *)(a1 + 8) & 4 | 3;
  return a1;
}

void sub_1B1BF9BE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::~VectorFstBaseImpl(v17);
  _Unwind_Resume(a1);
}

uint64_t fst::CountStates<fst::ArcTpl<fst::LogWeightTpl<float>,int>>(uint64_t a1)
{
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 1, 0))
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 160);
    return v2(a1);
  }
  int v7 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v5);
  uint64_t v4 = 0;
  while (1)
  {
    while (!v5)
    {
      if (v7 >= v6) {
        return v4;
      }
      uint64_t v4 = (v4 + 1);
LABEL_12:
      ++v7;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 16))(v5)) {
      break;
    }
    uint64_t v4 = (v4 + 1);
    if (!v5) {
      goto LABEL_12;
    }
    (*(void (**)(void))(*(void *)v5 + 32))();
  }
  if (v5) {
    (*(void (**)(void))(*(void *)v5 + 8))();
  }
  return v4;
}

{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
}

void sub_1B1BF9E30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    fst::CountStates<fst::ArcTpl<fst::LogWeightTpl<float>,int>>(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ArcTpl<fst::LogWeightTpl<float>,int>::Type()
{
  {
    operator new();
  }
  return fst::ArcTpl<fst::LogWeightTpl<float>,int>::Type(void)::type;
}

void sub_1B1BF9F10(_Unwind_Exception *a1)
{
}

uint64_t fst::LogWeightTpl<float>::Type()
{
  {
    operator new();
  }
  return fst::LogWeightTpl<float>::Type(void)::type;
}

void sub_1B1BFA010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1B3EA8670](v15, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::WriteFstHeader(uint64_t a1, uint64_t a2, unsigned char *a3, int a4, std::string *__str, uint64_t a6, uint64_t a7)
{
  if (a3[24])
  {
    std::string::operator=((std::string *)(a7 + 8), __str);
    int v13 = (const std::string *)fst::ArcTpl<fst::LogWeightTpl<float>,int>::Type();
    std::string::operator=((std::string *)(a7 + 32), v13);
    *(_DWORD *)(a7 + 56) = a4;
    *(void *)(a7 + 64) = a6;
    if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1)) {
      BOOL v14 = a3[25] == 0;
    }
    else {
      BOOL v14 = 1;
    }
    int v15 = !v14;
    uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
    if (a3[26]) {
      BOOL v17 = v16 == 0;
    }
    else {
      BOOL v17 = 1;
    }
    int v18 = v15 | 2;
    if (v17) {
      int v18 = v15;
    }
    if (a3[27]) {
      v18 |= 4u;
    }
    *(_DWORD *)(a7 + 60) = v18;
    fst::FstHeader::Write();
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1)) {
    BOOL v19 = a3[25] == 0;
  }
  else {
    BOOL v19 = 1;
  }
  if (!v19)
  {
    uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 72))(v20, a2);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  if (result && a3[26])
  {
    uint64_t v22 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1) + 72);
    return v22();
  }
  return result;
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::UpdateFstHeader(uint64_t a1, void *a2, uint64_t a3, int a4, std::string *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  MEMORY[0x1B3EA7E70](v32);
  uint64_t v16 = (char *)a2 + *(void *)(*a2 - 24);
  if ((v16[32] & 5) == 0)
  {
    uint64_t v17 = *((void *)v16 + 5);
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long __p = 0u;
    long long v35 = 0u;
    uint64_t v42 = a8;
    (*(void (**)(void *__return_ptr))(*(void *)v17 + 40))(v33);
    if (v33[16] == -1) {
      std::ios_base::clear((std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32) | 4);
    }
  }
  MEMORY[0x1B3EA7E80](v32);
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    int v18 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
    BOOL v19 = (void *)fst::cerr(v18);
    uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
    int v21 = *(char *)(a3 + 23);
    if (v21 >= 0) {
      uint64_t v22 = a3;
    }
    else {
      uint64_t v22 = *(void *)a3;
    }
    if (v21 >= 0) {
      uint64_t v23 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v23 = *(void *)(a3 + 8);
    }
  }
  else
  {
    fst::FstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::WriteFstHeader(a1, (uint64_t)a2, (unsigned char *)a3, a4, a5, a6, a7);
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      uint64_t v24 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
      uint64_t v25 = (void *)fst::cerr(v24);
      uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      int v26 = *(char *)(a3 + 23);
      if (v26 >= 0) {
        uint64_t v22 = a3;
      }
      else {
        uint64_t v22 = *(void *)a3;
      }
      if (v26 >= 0) {
        uint64_t v23 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v23 = *(void *)(a3 + 8);
      }
    }
    else
    {
      MEMORY[0x1B3EA7E70](v33, a2);
      uint64_t v27 = (char *)a2 + *(void *)(*a2 - 24);
      if ((v27[32] & 5) == 0)
      {
        (*(void (**)(long long *__return_ptr))(**((void **)v27 + 5) + 32))(&__p);
        if (v42 == -1) {
          std::ios_base::clear((std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32) | 4);
        }
      }
      MEMORY[0x1B3EA7E80](v33);
      if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) == 0) {
        return 1;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      uint64_t v28 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
      int v29 = (void *)fst::cerr(v28);
      uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      int v30 = *(char *)(a3 + 23);
      if (v30 >= 0) {
        uint64_t v22 = a3;
      }
      else {
        uint64_t v22 = *(void *)a3;
      }
      if (v30 >= 0) {
        uint64_t v23 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v23 = *(void *)(a3 + 8);
      }
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v22, v23);
  fst::LogMessage::~LogMessage((fst::LogMessage *)v33);
  if (SBYTE7(v35) < 0) {
    operator delete((void *)__p);
  }
  return 0;
}

void sub_1B1BFA614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::DeleteStates(uint64_t a1, char **a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 64);
  std::vector<int>::size_type v5 = (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 3;
  std::vector<int>::value_type __x = 0;
  std::vector<int>::vector(&v32, v5, &__x);
  int v6 = *a2;
  uint64_t v7 = a2[1] - *a2;
  if (v7)
  {
    unint64_t v8 = v7 >> 2;
    std::vector<int>::pointer begin = v32.__begin_;
    if (v8 <= 1) {
      unint64_t v8 = 1;
    }
    do
    {
      uint64_t v10 = *(int *)v6;
      v6 += 4;
      begin[v10] = -1;
      --v8;
    }
    while (v8);
  }
  uint64_t v11 = *(void *)(a1 + 64);
  if (*(void *)(a1 + 72) == v11)
  {
    int v13 = 0;
  }
  else
  {
    unint64_t v12 = 0;
    int v13 = 0;
    do
    {
      if (v32.__begin_[v12] == -1)
      {
        fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Destroy(*(void **)(v11 + 8 * v12));
      }
      else
      {
        v32.__begin_[v12] = v13;
        if (v12 != v13) {
          *(void *)(v11 + 8 * v13) = *(void *)(v11 + 8 * v12);
        }
        ++v13;
      }
      ++v12;
      uint64_t v11 = *(void *)(a1 + 64);
    }
    while (v12 < (*(void *)(a1 + 72) - v11) >> 3);
  }
  std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)v4, v13);
  uint64_t v14 = *(void *)(a1 + 64);
  if (*(void *)(a1 + 72) != v14)
  {
    unint64_t v15 = 0;
    do
    {
      uint64_t v16 = *(void *)(v14 + 8 * v15);
      uint64_t v18 = *(void *)(v16 + 24);
      uint64_t v17 = *(void *)(v16 + 32);
      int64x2_t v19 = *(int64x2_t *)(v16 + 8);
      uint64_t v20 = v17 - v18;
      if (v17 == v18)
      {
        int64x2_t v30 = *(int64x2_t *)(v16 + 8);
        uint64_t v26 = 0;
        uint64_t v27 = v20 >> 4;
      }
      else
      {
        unint64_t v21 = 0;
        uint64_t v26 = 0;
        uint64_t v22 = *(void *)(v16 + 24);
        do
        {
          int v23 = v32.__begin_[*(int *)(v22 + 12)];
          if (v23 == -1)
          {
            v24.i64[0] = *(void *)v22;
            v24.i64[1] = HIDWORD(*(void *)v22);
            int64x2_t v19 = vaddq_s64(v19, vceqzq_s64(v24));
          }
          else
          {
            *(_DWORD *)(v22 + 12) = v23;
            if (v21 != v26)
            {
              *(_OWORD *)(v18 + 16 * v26) = *(_OWORD *)v22;
              uint64_t v14 = *v4;
            }
            ++v26;
          }
          uint64_t v16 = *(void *)(v14 + 8 * v15);
          ++v21;
          uint64_t v25 = *(void *)(v16 + 32) - *(void *)(v16 + 24);
          v22 += 16;
        }
        while (v21 < v25 >> 4);
        int64x2_t v30 = v19;
        uint64_t v27 = v25 >> 4;
      }
      fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::DeleteArcs((void *)v16, v27 - v26);
      uint64_t v14 = *(void *)(a1 + 64);
      *(int64x2_t *)(*(void *)(v14 + 8 * v15++) + 8) = v30;
    }
    while (v15 < (*(void *)(a1 + 72) - v14) >> 3);
  }
  uint64_t v28 = *(int *)(a1 + 88);
  if (v28 == -1)
  {
    int v29 = v32.__begin_;
    if (!v32.__begin_) {
      return;
    }
  }
  else
  {
    int v29 = v32.__begin_;
    *(_DWORD *)(a1 + 88) = v32.__begin_[v28];
  }
  v32.__end_ = v29;
  operator delete(v29);
}

void sub_1B1BFA884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t fst::TestProperties<fst::ArcTpl<fst::LogWeightTpl<float>,int>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (FLAGS_fst_verify_properties)
  {
    unint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    unint64_t v7 = fst::ComputeProperties<fst::ArcTpl<fst::LogWeightTpl<float>,int>>(a1, a2, a3, 0);
    if (!fst::CompatProperties(v6, v7))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      unint64_t v8 = fst::LogMessage::LogMessage((fst *)&v14, (uint64_t)__p);
      uint64_t v9 = (void *)fst::cerr(v8);
      uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"TestProperties: stored Fst properties incorrect", 47);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" (stored: props1, computed: props2)", 35);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v14);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }
    return v7;
  }
  else
  {
    return fst::ComputeProperties<fst::ArcTpl<fst::LogWeightTpl<float>,int>>(a1, a2, a3, 1);
  }
}

void sub_1B1BFA9DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t fst::ComputeProperties<fst::ArcTpl<fst::LogWeightTpl<float>,int>>(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  unint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  unint64_t v8 = v7;
  if (!a4
    || (uint64_t v9 = v7 & 0x3FFFFFFF0000 | (2 * v7) & 0x2AAAAAAA0000 | (v7 >> 1) & 0x155555550000 | 7, (a2 & ~v9) != 0))
  {
    unint64_t v8 = v7 & 7;
    unint64_t v73 = v8;
    int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    if ((a2 & 0xF3C00000000) != 0 && v10)
    {
      uint64_t v68 = 0;
      uint64_t v69 = 0;
      unint64_t v70 = 0;
      uint64_t v71 = &v73;
      fst::DfsVisit<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::SccVisitor<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>(a1, (uint64_t)&v68);
    }
    if ((a2 & 0xFFFFF0C3FFFFFFF8) != 0)
    {
      uint64_t v61 = a3;
      uint64_t v11 = a2 & 0xC0000;
      uint64_t v12 = 0x10425A810000;
      if ((a2 & 0xC0000) != 0) {
        uint64_t v12 = 0x10425A850000;
      }
      unint64_t v13 = v8 | v12;
      uint64_t v14 = a2 & 0x300000;
      if ((a2 & 0x300000) != 0) {
        v13 |= 0x100000uLL;
      }
      unint64_t v73 = v13;
      memset(&v67, 0, sizeof(v67));
      memset(&v66, 0, sizeof(v66));
      unsigned int v65 = 0;
      uint64_t v15 = a1;
      (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v63);
      int v16 = 0;
LABEL_12:
      if (v63)
      {
        if (!(*(unsigned int (**)(uint64_t))(*(void *)v63 + 16))(v63))
        {
          if (v63)
          {
            uint64_t v17 = (*(uint64_t (**)(void))(*(void *)v63 + 24))();
LABEL_18:
            std::vector<unsigned int>::size_type v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v15 + 40))(v15, v17);
            v67.__end_ = v67.__begin_;
            v66.__end_ = v66.__begin_;
            if (v11) {
              std::vector<int>::reserve(&v67, v18);
            }
            if (v14) {
              std::vector<int>::reserve(&v66, v18);
            }
            unint64_t v72 = 0;
            (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v15 + 136))(v15, v17, &v68);
            char v19 = 1;
            while (1)
            {
              if (v68)
              {
                if ((*(unsigned int (**)(uint64_t))(*(void *)v68 + 24))(v68))
                {
                  if (v68)
                  {
                    (*(void (**)(void))(*(void *)v68 + 8))();
                  }
                  else
                  {
LABEL_92:
                    if (v71) {
                      --*(_DWORD *)v71;
                    }
                  }
                  uint64_t v15 = a1;
                  if (v11
                    && (std::__sort<std::__less<int,int> &,int *>(),
                        (std::vector<unsigned int>::pointer)((char *)v67.__end_ - (char *)v67.__begin_) >= (std::vector<unsigned int>::pointer)5))
                  {
                    unint64_t v46 = v67.__end_ - v67.__begin_;
                    if (v46 <= 2) {
                      unint64_t v46 = 2;
                    }
                    std::vector<unsigned int>::pointer v47 = v67.__begin_ + 1;
                    unsigned int v48 = *v67.__begin_;
                    unint64_t v49 = v46 - 1;
                    while (1)
                    {
                      unsigned int v51 = *v47++;
                      unsigned int v50 = v51;
                      if (v51 == v48) {
                        break;
                      }
                      unsigned int v48 = v50;
                      if (!--v49) {
                        goto LABEL_101;
                      }
                    }
                    unint64_t v73 = v73 & 0xFFFFFFFFFFF3FFFFLL | 0x80000;
                    if (!v14)
                    {
LABEL_112:
                      if (v16 >= 1) {
                        unint64_t v73 = v73 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
                      }
                      float v58 = (*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, v17);
                      *(float *)&uint64_t v68 = v58;
                      int v75 = 2139095040;
                      if (v58 == INFINITY)
                      {
                        if ((*(uint64_t (**)(uint64_t, uint64_t, float, float))(*(void *)a1 + 40))(a1, v17, INFINITY, v58) != 1)unint64_t v73 = v73 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000; {
                      }
                        }
                      else
                      {
                        *(float *)&uint64_t v68 = v58;
                        int v75 = 0;
                        if (v58 != 0.0) {
                          unint64_t v73 = v73 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
                        }
                        ++v16;
                      }
                      if (v63) {
                        (*(void (**)(uint64_t))(*(void *)v63 + 32))(v63);
                      }
                      else {
                        ++v65;
                      }
                      goto LABEL_12;
                    }
                  }
                  else
                  {
LABEL_101:
                    if (!v14) {
                      goto LABEL_112;
                    }
                  }
                  std::__sort<std::__less<int,int> &,int *>();
                  if ((std::vector<unsigned int>::pointer)((char *)v66.__end_ - (char *)v66.__begin_) >= (std::vector<unsigned int>::pointer)5)
                  {
                    unint64_t v52 = v66.__end_ - v66.__begin_;
                    if (v52 <= 2) {
                      unint64_t v52 = 2;
                    }
                    std::vector<unsigned int>::pointer v53 = v66.__begin_ + 1;
                    unsigned int v54 = *v66.__begin_;
                    unint64_t v55 = v52 - 1;
                    while (1)
                    {
                      unsigned int v57 = *v53++;
                      unsigned int v56 = v57;
                      if (v57 == v54) {
                        break;
                      }
                      unsigned int v54 = v56;
                      if (!--v55) {
                        goto LABEL_112;
                      }
                    }
                    unint64_t v73 = v73 & 0xFFFFFFFFFFCFFFFFLL | 0x200000;
                  }
                  goto LABEL_112;
                }
                if (v68)
                {
                  uint64_t v20 = (*(uint64_t (**)(void))(*(void *)v68 + 32))();
                  goto LABEL_29;
                }
              }
              else if (v72 >= v70)
              {
                goto LABEL_92;
              }
              uint64_t v20 = v69 + 16 * v72;
LABEL_29:
              int v21 = *(_DWORD *)v20;
              int v22 = *(_DWORD *)v20;
              if (*(_DWORD *)v20 != *(_DWORD *)(v20 + 4))
              {
                unint64_t v73 = v73 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
                int v22 = *(_DWORD *)(v20 + 4);
              }
              if (v21 | v22)
              {
                if (v21)
                {
                  if (!v22) {
                    goto LABEL_39;
                  }
                  goto LABEL_35;
                }
                unint64_t v23 = v73;
              }
              else
              {
                unint64_t v23 = v73 & 0xFFFFFFFFFF3FFFFFLL | 0x400000;
              }
              unint64_t v73 = v23 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
              if (!v22)
              {
LABEL_39:
                unint64_t v73 = v73 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
                if (v19) {
                  goto LABEL_44;
                }
                goto LABEL_40;
              }
LABEL_35:
              if (v19) {
                goto LABEL_44;
              }
LABEL_40:
              if (v21 < (int)v8) {
                unint64_t v73 = v73 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
              }
              if (v22 < (int)a2) {
                unint64_t v73 = v73 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
              }
LABEL_44:
              int v75 = 0;
              float v24 = *(float *)(v20 + 8);
              int v75 = LODWORD(v24);
              int v74 = 0;
              if (v24 != 0.0)
              {
                int v75 = LODWORD(v24);
                int v74 = 2139095040;
                if (v24 != INFINITY) {
                  unint64_t v73 = v73 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
                }
              }
              int v25 = *(_DWORD *)(v20 + 12);
              if (v25 <= (int)v17) {
                unint64_t v73 = v73 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
              }
              if (v25 != v17 + 1) {
                unint64_t v73 = v73 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
              }
              LODWORD(v8) = *(_DWORD *)v20;
              LODWORD(a2) = *(_DWORD *)(v20 + 4);
              if (v11)
              {
                std::vector<unsigned int>::pointer end = v67.__end_;
                if (v67.__end_ >= v67.__end_cap_.__value_)
                {
                  std::vector<unsigned int>::pointer begin = v67.__begin_;
                  int64_t v29 = v67.__end_ - v67.__begin_;
                  unint64_t v30 = v29 + 1;
                  if ((unint64_t)(v29 + 1) >> 62) {
                    goto LABEL_135;
                  }
                  int64_t v31 = (char *)v67.__end_cap_.__value_ - (char *)v67.__begin_;
                  if (((char *)v67.__end_cap_.__value_ - (char *)v67.__begin_) >> 1 > v30) {
                    unint64_t v30 = v31 >> 1;
                  }
                  if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v32 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v32 = v30;
                  }
                  if (v32)
                  {
                    uint64_t v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v67.__end_cap_, v32);
                    std::vector<unsigned int>::pointer begin = v67.__begin_;
                    std::vector<unsigned int>::pointer end = v67.__end_;
                  }
                  else
                  {
                    uint64_t v33 = 0;
                  }
                  uint64_t v34 = (unsigned int *)&v33[4 * v29];
                  *uint64_t v34 = *(_DWORD *)v20;
                  uint64_t v27 = v34 + 1;
                  while (end != begin)
                  {
                    unsigned int v35 = *--end;
                    *--uint64_t v34 = v35;
                  }
                  v67.__begin_ = v34;
                  v67.__end_ = v27;
                  v67.__end_cap_.__value_ = (unsigned int *)&v33[4 * v32];
                  if (begin) {
                    operator delete(begin);
                  }
                }
                else
                {
                  *v67.__end_ = v8;
                  uint64_t v27 = end + 1;
                }
                v67.__end_ = v27;
              }
              if (v14)
              {
                std::vector<unsigned int>::pointer v36 = v66.__end_;
                if (v66.__end_ >= v66.__end_cap_.__value_)
                {
                  std::vector<unsigned int>::pointer v38 = v66.__begin_;
                  int64_t v39 = v66.__end_ - v66.__begin_;
                  unint64_t v40 = v39 + 1;
                  if ((unint64_t)(v39 + 1) >> 62) {
LABEL_135:
                  }
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  int64_t v41 = (char *)v66.__end_cap_.__value_ - (char *)v66.__begin_;
                  if (((char *)v66.__end_cap_.__value_ - (char *)v66.__begin_) >> 1 > v40) {
                    unint64_t v40 = v41 >> 1;
                  }
                  if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v42 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v42 = v40;
                  }
                  if (v42)
                  {
                    uint64_t v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v66.__end_cap_, v42);
                    std::vector<unsigned int>::pointer v38 = v66.__begin_;
                    std::vector<unsigned int>::pointer v36 = v66.__end_;
                  }
                  else
                  {
                    uint64_t v43 = 0;
                  }
                  uint64_t v44 = (unsigned int *)&v43[4 * v39];
                  unsigned int *v44 = *(_DWORD *)(v20 + 4);
                  long long v37 = v44 + 1;
                  while (v36 != v38)
                  {
                    unsigned int v45 = *--v36;
                    *--uint64_t v44 = v45;
                  }
                  v66.__begin_ = v44;
                  v66.__end_ = v37;
                  v66.__end_cap_.__value_ = (unsigned int *)&v43[4 * v42];
                  if (v38) {
                    operator delete(v38);
                  }
                }
                else
                {
                  *v66.__end_ = *(_DWORD *)(v20 + 4);
                  long long v37 = v36 + 1;
                }
                v66.__end_ = v37;
              }
              if (v68)
              {
                (*(void (**)(uint64_t))(*(void *)v68 + 40))(v68);
                char v19 = 0;
              }
              else
              {
                char v19 = 0;
                ++v72;
              }
            }
          }
LABEL_17:
          uint64_t v17 = v65;
          goto LABEL_18;
        }
        if (v63) {
          (*(void (**)(void))(*(void *)v63 + 8))();
        }
      }
      else if ((int)v65 < v64)
      {
        goto LABEL_17;
      }
      int v59 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 24))(v15);
      a3 = v61;
      if (v59 != -1 && (*(unsigned int (**)(uint64_t))(*(void *)a1 + 24))(a1)) {
        unint64_t v73 = v73 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
      }
      if (v66.__begin_)
      {
        v66.__end_ = v66.__begin_;
        operator delete(v66.__begin_);
      }
      if (v67.__begin_)
      {
        v67.__end_ = v67.__begin_;
        operator delete(v67.__begin_);
      }
      unint64_t v8 = v73;
    }
    uint64_t v9 = v8 & 0x3FFFFFFF0000 | (2 * v8) & 0x2AAAAAAA0000 | (v8 >> 1) & 0x155555550000 | 7;
  }
  *a3 = v9;
  return v8;
}

void sub_1B1BFB368(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (__p) {
    operator delete(__p);
  }
  if (a20) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

void fst::DfsVisit<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::SccVisitor<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2)
{
}

void sub_1B1BFBCA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~MemoryPool((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va1);
  uint64_t v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(void *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

void fst::SccVisitor<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::InitVisit(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1) {
    *(void *)(*(void *)a1 + 8) = **(void **)a1;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    *(void *)(v3 + 8) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    *(void *)(v4 + 8) = 0;
    *(unsigned char *)(a1 + --*(_DWORD *)(a9 + 52) = 0;
    **(void **)(a1 + ++*(void *)(result + 24) = **(void **)(a1 + 24) & 0xFFFFF0C3FFFFFFFFLL | 0x52800000000;
    *(void *)(a1 + 32) = a2;
    int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
    *(_DWORD *)(a1 + 44) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 40) = v5;
    operator new();
  }
  operator new();
}

void fst::SccVisitor<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::FinishState(uint64_t a1, int a2, int a3)
{
  if ((*(float (**)(void))(**(void **)(a1 + 32) + 32))(*(void *)(a1 + 32)) == INFINITY)
  {
    unint64_t v6 = a2;
  }
  else
  {
    unint64_t v6 = a2;
    *(void *)(**(void **)(a1 + 16) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  }
  uint64_t v7 = **(void **)(a1 + 64);
  if (*(_DWORD *)(**(void **)(a1 + 56) + 4 * v6) != *(_DWORD *)(v7 + 4 * v6)) {
    goto LABEL_17;
  }
  char v8 = 0;
  uint64_t v9 = *(void **)(a1 + 80);
  uint64_t v10 = v9[1];
  uint64_t v11 = **(void **)(a1 + 16);
  uint64_t v12 = (int *)(((v10 - *v9) & 0xFFFFFFFFFFFFFFFCLL) + *v9 - 4);
  do
  {
    unint64_t v13 = *v12--;
    v8 |= *(void *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v13;
  }
  while (v13 != a2);
  uint64_t v14 = *(void **)a1;
  uint64_t v15 = **(void **)(a1 + 72);
  for (unint64_t i = (int *)(v10 - 4); ; --i)
  {
    unint64_t v17 = *i;
    if (v14) {
      *(_DWORD *)(*v14 + 4 * v17) = *(_DWORD *)(a1 + 48);
    }
    unint64_t v18 = v17 >> 6;
    uint64_t v19 = 1 << v17;
    if ((v8 & 1) == 0) {
      break;
    }
    *(void *)(v11 + 8 * v18) |= v19;
    *(void *)(v15 + 8 * v18) &= ~v19;
    if (v17 == a2)
    {
      v9[1] = i;
      goto LABEL_16;
    }
LABEL_14:
    ;
  }
  *(void *)(v15 + 8 * v18) &= ~v19;
  if (v17 != a2) {
    goto LABEL_14;
  }
  v9[1] = i;
  **(void **)(a1 + ++*(void *)(result + 24) = **(void **)(a1 + 24) & 0xFFFFF3FFFFFFFFFFLL | 0x80000000000;
LABEL_16:
  ++*(_DWORD *)(a1 + 48);
LABEL_17:
  if (a3 != -1)
  {
    uint64_t v20 = **(void **)(a1 + 16);
    if ((*(void *)(v20 + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v6)) {
      *(void *)(v20 + (((unint64_t)a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a3;
    }
    int v21 = *(_DWORD *)(v7 + 4 * v6);
    if (v21 < *(_DWORD *)(v7 + 4 * a3)) {
      *(_DWORD *)(v7 + 4 * a3) = v21;
    }
  }
}

void fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~MemoryPool(quasar::Bitmap *a1)
{
  *(void *)a1 = &unk_1F0A36DD8;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Link>::~MemoryArena((void *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_1F0A36DD8;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Link>::~MemoryArena((void *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::MemoryPool(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A36DD8;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Link>::MemoryArena(a1 + 1, a2);
}

void sub_1B1BFC14C(_Unwind_Exception *a1)
{
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Size()
{
  return 48;
}

void fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Link>::MemoryArena(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A37D90;
  a1[1] = 56 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_1B1BFC264(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Link>::~MemoryArena(void *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1B3EA8670);
}

{
  void *v2;
  void *i;
  uint64_t v4;
  uint64_t vars8;

  *a1 = &unk_1F0A37D90;
  uint64_t v2 = a1 + 3;
  for (unint64_t i = (void *)a1[4]; i != v2; unint64_t i = (void *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x1B3EA8630](v4, 0x1000C8077774924);
    }
  }
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Link>::Size()
{
  return 56;
}

void std::deque<fst::DfsState<fst::ArcTpl<fst::LogWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LogWeightTpl<float>,int>> *>>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<fst::DfsState<fst::ArcTpl<fst::LogWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LogWeightTpl<float>,int>> *>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<fst::DfsState<fst::ArcTpl<fst::LogWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LogWeightTpl<float>,int>> *>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      unsigned int v35 = &v34[8 * (v33 >> 2)];
      long long v37 = &v34[8 * v36];
      std::vector<unsigned int>::pointer v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        int64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)int64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      unsigned int v35 = &v34[8 * (v46 >> 2)];
      long long v37 = &v34[8 * v47];
      unsigned int v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        unsigned int v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unsigned int v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unsigned int v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  std::vector<unsigned int>::pointer v53 = operator new(0x1000uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  int64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1B1BFC6AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::ArcBuffer<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SetFromFst<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t **))(*(void *)a2 + 136))(a2, a3, &v24);
  if (v24 || (a4 & 1) != 0)
  {
    uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, a3);
    uint64_t v12 = a5;
    if (!a4) {
      uint64_t v12 = 0;
    }
    unint64_t v13 = v11 + v12;
    if (*(void *)(a1 + 8) < (unint64_t)(v11 + v12))
    {
      if (*(void *)a1) {
        free(*(void **)a1);
      }
      uint64_t v23 = 0x4000;
      if (v13 > 0x4000) {
        uint64_t v23 = v13;
      }
      *(void *)(a1 + 8) = v23;
      uint64_t v15 = malloc_type_malloc(16 * v23, 0x1000040451B5BE8uLL);
      *(void *)a1 = v15;
      *(void *)(a1 + 16) = v15;
      BOOL v14 = v15;
    }
    else
    {
      BOOL v14 = *(_OWORD **)(a1 + 16);
      uint64_t v15 = *(_OWORD **)a1;
    }
    *(void *)(a1 + ++*(void *)(result + 24) = &v14[v13];
    uint64_t v16 = v24;
    uint64_t v17 = v25;
    unint64_t v19 = v26;
    uint64_t v18 = v27;
    if (v27) {
      ++*v27;
    }
    unint64_t v20 = 0;
    if (!v16) {
      goto LABEL_15;
    }
    while (1)
    {
      int v21 = (*(uint64_t (**)(uint64_t *))(*v16 + 24))(v16);
      uint64_t v22 = *v16;
      if (v21) {
        break;
      }
      _OWORD *v15 = *(_OWORD *)(*(uint64_t (**)(uint64_t *))(v22 + 32))(v16);
      (*(void (**)(uint64_t *))(*v16 + 40))(v16);
      while (1)
      {
        ++v15;
        if (v16) {
          break;
        }
LABEL_15:
        if (v20 >= v19)
        {
          if (v18) {
            --*v18;
          }
          return;
        }
        _OWORD *v15 = *(_OWORD *)(v17 + 16 * v20++);
      }
    }
    (*(void (**)(uint64_t *))(v22 + 8))(v16);
  }
  else
  {
    uint64_t v10 = v25 + 16 * v26;
    *(void *)(a1 + 16) = v25;
    *(void *)(a1 + ++*(void *)(result + 24) = v10;
    if (*(void *)a1)
    {
      free(*(void **)a1);
      *(void *)a1 = 0;
    }
    *(void *)(a1 + 8) = 0;
  }
}

void sub_1B1BFC944(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::SetFinal(void *a1, int a2, float a3)
{
  uint64_t v5 = *(float **)(a1[8] + 8 * a2);
  float v6 = *v5;
  float *v5 = a3;
  unint64_t v7 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
  uint64_t result = fst::SetFinalProperties<fst::TropicalWeightTpl<float>>(v7, v6, a3);
  a1[1] = a1[1] & 4 | result;
  return result;
}

void fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::AddArc(void *a1, int a2, float *a3)
{
  uint64_t v6 = *(void *)(*(void *)(a1[8] + 8 * a2) + 32);
  if (v6 == *(void *)(*(void *)(a1[8] + 8 * a2) + 24)) {
    unint64_t v7 = 0;
  }
  else {
    unint64_t v7 = (_DWORD *)(v6 - 16);
  }
  unint64_t v8 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
  a1[1] = a1[1] & 4 | fst::AddArcProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(v8, a2, a3, v7);
  uint64_t v9 = *(void **)(a1[8] + 8 * a2);
  fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::AddArc(v9, a3);
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::DeleteStates(uint64_t a1, char **a2)
{
  unint64_t v4 = (uint64_t *)(a1 + 64);
  std::vector<int>::size_type v5 = (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 3;
  std::vector<int>::value_type __x = 0;
  std::vector<int>::vector(&v32, v5, &__x);
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1] - *a2;
  if (v7)
  {
    unint64_t v8 = v7 >> 2;
    std::vector<int>::pointer begin = v32.__begin_;
    if (v8 <= 1) {
      unint64_t v8 = 1;
    }
    do
    {
      uint64_t v10 = *(int *)v6;
      v6 += 4;
      begin[v10] = -1;
      --v8;
    }
    while (v8);
  }
  uint64_t v11 = *(void *)(a1 + 64);
  if (*(void *)(a1 + 72) == v11)
  {
    int v13 = 0;
  }
  else
  {
    unint64_t v12 = 0;
    int v13 = 0;
    do
    {
      if (v32.__begin_[v12] == -1)
      {
        fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Destroy(*(void **)(v11 + 8 * v12));
      }
      else
      {
        v32.__begin_[v12] = v13;
        if (v12 != v13) {
          *(void *)(v11 + 8 * v13) = *(void *)(v11 + 8 * v12);
        }
        ++v13;
      }
      ++v12;
      uint64_t v11 = *(void *)(a1 + 64);
    }
    while (v12 < (*(void *)(a1 + 72) - v11) >> 3);
  }
  std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)v4, v13);
  uint64_t v14 = *(void *)(a1 + 64);
  if (*(void *)(a1 + 72) != v14)
  {
    unint64_t v15 = 0;
    do
    {
      uint64_t v16 = *(void *)(v14 + 8 * v15);
      uint64_t v18 = *(void *)(v16 + 24);
      uint64_t v17 = *(void *)(v16 + 32);
      int64x2_t v19 = *(int64x2_t *)(v16 + 8);
      uint64_t v20 = v17 - v18;
      if (v17 == v18)
      {
        int64x2_t v30 = *(int64x2_t *)(v16 + 8);
        uint64_t v26 = 0;
        uint64_t v27 = v20 >> 4;
      }
      else
      {
        unint64_t v21 = 0;
        uint64_t v26 = 0;
        uint64_t v22 = *(void *)(v16 + 24);
        do
        {
          int v23 = v32.__begin_[*(int *)(v22 + 12)];
          if (v23 == -1)
          {
            v24.i64[0] = *(void *)v22;
            v24.i64[1] = HIDWORD(*(void *)v22);
            int64x2_t v19 = vaddq_s64(v19, vceqzq_s64(v24));
          }
          else
          {
            *(_DWORD *)(v22 + 12) = v23;
            if (v21 != v26)
            {
              *(_OWORD *)(v18 + 16 * v26) = *(_OWORD *)v22;
              uint64_t v14 = *v4;
            }
            ++v26;
          }
          uint64_t v16 = *(void *)(v14 + 8 * v15);
          ++v21;
          uint64_t v25 = *(void *)(v16 + 32) - *(void *)(v16 + 24);
          v22 += 16;
        }
        while (v21 < v25 >> 4);
        int64x2_t v30 = v19;
        uint64_t v27 = v25 >> 4;
      }
      fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::DeleteArcs((void *)v16, v27 - v26);
      uint64_t v14 = *(void *)(a1 + 64);
      *(int64x2_t *)(*(void *)(v14 + 8 * v15++) + 8) = v30;
    }
    while (v15 < (*(void *)(a1 + 72) - v14) >> 3);
  }
  uint64_t v28 = *(int *)(a1 + 88);
  if (v28 == -1)
  {
    int64_t v29 = v32.__begin_;
    if (!v32.__begin_) {
      return;
    }
  }
  else
  {
    int64_t v29 = v32.__begin_;
    *(_DWORD *)(a1 + 88) = v32.__begin_[v28];
  }
  v32.__end_ = v29;
  operator delete(v29);
}

void sub_1B1BFCCA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *quasar::SimpleTokenizerOptions::options@<X0>(quasar::SimpleTokenizerOptions *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  unint64_t v4 = operator new(8uLL);
  *a2 = v4;
  void *v4 = (char *)this + 16;
  uint64_t result = v4 + 1;
  a2[1] = result;
  a2[2] = result;
  return result;
}

uint64_t quasar::SimpleTokenizerBlock::init(quasar::SimpleTokenizerBlock *this)
{
  quasar::OptionValue<std::string>::value((void *)this + 3);
  return quasar::RegularExpressionReplacer::read();
}

uint64_t quasar::RegularExpressionReplacer::read()
{
  v4[19] = *MEMORY[0x1E4F143B8];
  std::ifstream::basic_ifstream(v2);
  if (v3[15]) {
    std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::basic_regex[abi:ne180100](v1, (const __int32 *)"^", 0);
  }
  v2[0] = *MEMORY[0x1E4FBA3F8];
  *(uint64_t *)((char *)v2 + *(void *)(v2[0] - 24)) = *(void *)(MEMORY[0x1E4FBA3F8] + 24);
  MEMORY[0x1B3EA7CF0](v3);
  std::istream::~istream();
  MEMORY[0x1B3EA8520](v4);
  return 0;
}

void sub_1B1BFD8B0(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B1BFD960);
}

void sub_1B1BFD8C4()
{
}

void sub_1B1BFD8DC()
{
  STACK[0x250] = v0;
  JUMPOUT(0x1B1BFD908);
}

void sub_1B1BFD8EC()
{
  if (SLOBYTE(STACK[0x2E7]) < 0) {
    operator delete((void *)STACK[0x2D0]);
  }
  JUMPOUT(0x1B1BFD908);
}

void sub_1B1BFD904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50)
{
  if (a49 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a50);
  a50 = (uint64_t)&STACK[0x248];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a50);
  if (SLOBYTE(STACK[0x277]) < 0) {
    operator delete((void *)STACK[0x260]);
  }
  if (SLOBYTE(STACK[0x28F]) < 0) {
    operator delete((void *)STACK[0x278]);
  }
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex((std::locale *)&STACK[0x290]);
  std::ifstream::~ifstream(&STACK[0x3E8]);
  _Unwind_Resume(a1);
}

uint64_t virtual thunk to'quasar::SimpleTokenizerBlock::init(quasar::SimpleTokenizerBlock *this)
{
  quasar::OptionValue<std::string>::value((quasar::SimpleTokenizerBlock *)((char *)this
                                                                         + *(void *)(*(void *)this - 88)
                                                                         + 24));
  return quasar::RegularExpressionReplacer::read();
}

void quasar::SimpleTokenizerBlock::process(void *a1, uint64_t a2, quasar::TranslationPhraseInternal **a3)
{
  uint64_t v34 = 0;
  unsigned int v35 = 0;
  unint64_t v36 = 0;
  BOOL v3 = *a3;
  unint64_t v4 = a3[1];
  if (*a3 != v4)
  {
    do
    {
      quasar::TranslationPhraseInternal::convertTokensToString((uint64_t *)v32, v3);
      quasar::RegularExpressionReplacer::apply(a1 + 23, (uint64_t)v32, &v31);
      uint64_t v28 = 0;
      int64_t v29 = 0;
      uint64_t v30 = 0;
      kaldi::SplitStringToVector(&v31, " ", 1, (uint64_t)&v28);
      quasar::TranslationPhraseInternal::TranslationPhraseInternal((quasar::TranslationPhraseInternal *)v24);
      uint64_t v6 = v28;
      std::vector<int>::size_type v5 = v29;
      while (v6 != v5)
      {
        uint64_t v14 = 0;
        unint64_t v15 = 0;
        uint64_t v16 = 0;
        memset(&v12, 0, sizeof(v12));
        __int16 v13 = 0;
        uint64_t v17 = 3212836864;
        int v18 = -1;
        long long v19 = 0u;
        long long v20 = 0u;
        long long __p = 0u;
        uint64_t v22 = 0;
        uint64_t v23 = -1;
        std::string::operator=(&v12, v6);
        LOBYTE(v13) = 1;
        uint64_t v7 = v26;
        if ((unint64_t)v26 >= v27)
        {
          unint64_t v8 = (std::string *)std::vector<quasar::TranslationTokenInternal>::__push_back_slow_path<quasar::TranslationTokenInternal const&>((uint64_t *)&v25, (const quasar::TranslationTokenInternal *)&v12);
        }
        else
        {
          quasar::TranslationTokenInternal::TranslationTokenInternal(v26, (const quasar::TranslationTokenInternal *)&v12);
          unint64_t v8 = (std::string *)((char *)v7 + 136);
        }
        uint64_t v26 = v8;
        if ((void)__p)
        {
          *((void *)&__p + 1) = __p;
          operator delete((void *)__p);
        }
        if (SBYTE7(v20) < 0) {
          operator delete((void *)v19);
        }
        if (v14)
        {
          unint64_t v15 = v14;
          operator delete(v14);
        }
        if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v12.__r_.__value_.__l.__data_);
        }
        ++v6;
      }
      if (v25 != v26) {
        v26[-5].__r_.__value_.__s.__data_[8] = 0;
      }
      uint64_t v9 = v35;
      if ((unint64_t)v35 >= v36)
      {
        uint64_t v10 = (std::string *)std::vector<quasar::TranslationPhraseInternal>::__push_back_slow_path<quasar::TranslationPhraseInternal const&>(&v34, (const quasar::TranslationPhraseInternal *)v24);
      }
      else
      {
        quasar::TranslationPhraseInternal::TranslationPhraseInternal(v35, (const quasar::TranslationPhraseInternal *)v24);
        uint64_t v10 = (std::string *)((char *)v9 + 200);
      }
      unsigned int v35 = v10;
      quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)v24);
      v24[0] = (void **)&v28;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v24);
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v31.__r_.__value_.__l.__data_);
      }
      if (v33 < 0) {
        operator delete(v32[0]);
      }
      BOOL v3 = (quasar::TranslationPhraseInternal *)((char *)v3 + 200);
    }
    while (v3 != v4);
  }
  quasar::ProcessingBlock::send((uint64_t)a1 + *(void *)(*a1 - 24), (uint64_t)&v34, 0);
  v24[0] = (void **)&v34;
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](v24);
}

void sub_1B1BFDC1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void **a29)
{
  a29 = (void **)(v29 - 128);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&a29);
  _Unwind_Resume(a1);
}

void quasar::RegularExpressionReplacer::apply(void *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  if (*a1 != a1[1]) {
    std::wstring_convert<std::codecvt_utf8_utf16<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::wstring_convert[abi:ne180100]();
  }
  if (*(char *)(a2 + 23) < 0)
  {
    unint64_t v4 = *(const std::string::value_type **)a2;
    std::string::size_type v5 = *(void *)(a2 + 8);
    std::string::__init_copy_ctor_external(a3, v4, v5);
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a3->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
  }
}

void sub_1B1BFDE90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void quasar::TranslationTokenInternal::~TranslationTokenInternal(quasar::TranslationTokenInternal *this)
{
  unint64_t v2 = (void *)*((void *)this + 13);
  if (v2)
  {
    *((void *)this + 14) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  BOOL v3 = (void *)*((void *)this + 4);
  if (v3)
  {
    *((void *)this + 5) = v3;
    operator delete(v3);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void virtual thunk to'quasar::SimpleTokenizerBlock::process(void *a1, uint64_t a2, quasar::TranslationPhraseInternal **a3)
{
}

void std::wstring_convert<std::codecvt_utf8_utf16<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::wstring_convert[abi:ne180100]()
{
}

void sub_1B1BFE000(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10A1C408EF24B1CLL);
  _Unwind_Resume(a1);
}

uint64_t *std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t *a1, const std::string *a2, int a3)
{
  uint64_t v6 = MEMORY[0x1E4FBA488] + 104;
  a1[16] = MEMORY[0x1E4FBA488] + 104;
  uint64_t v7 = a1 + 2;
  uint64_t v8 = MEMORY[0x1E4FBA488] + 64;
  a1[2] = MEMORY[0x1E4FBA488] + 64;
  uint64_t v9 = (uint64_t)(a1 + 3);
  uint64_t v10 = (void *)MEMORY[0x1E4FBA408];
  uint64_t v11 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  uint64_t v12 = *(void *)(MEMORY[0x1E4FBA408] + 16);
  *a1 = v12;
  *(uint64_t *)((char *)a1 + *(void *)(v12 - 24)) = v11;
  a1[1] = 0;
  __int16 v13 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v13, a1 + 3);
  uint64_t v14 = MEMORY[0x1E4FBA488] + 24;
  v13[1].__vftable = 0;
  v13[1].__fmtflags_ = -1;
  uint64_t v15 = v10[5];
  uint64_t v16 = v10[4];
  a1[2] = v16;
  *(void *)((char *)v7 + *(void *)(v16 - 24)) = v15;
  uint64_t v17 = v10[1];
  *a1 = v17;
  *(uint64_t *)((char *)a1 + *(void *)(v17 - 24)) = v10[6];
  *a1 = v14;
  a1[16] = v6;
  a1[2] = v8;
  std::stringbuf::basic_stringbuf[abi:ne180100](v9, a2, a3);
  return a1;
}

void sub_1B1BFE2C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void std::pair<std::basic_regex<wchar_t,std::regex_traits<wchar_t>>,std::wstring>::~pair(std::locale *this)
{
  if (SHIBYTE(this[10].__locale_) < 0) {
    operator delete(this[8].__locale_);
  }
  locale = this[6].__locale_;
  if (locale) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)locale);
  }
  std::locale::~locale(this);
}

uint64_t quasar::SimpleTokenizerBlock::minConfigVersion(quasar::SimpleTokenizerBlock *this)
{
  return 125;
}

uint64_t virtual thunk to'quasar::SimpleTokenizerBlock::minConfigVersion(quasar::SimpleTokenizerBlock *this)
{
  return 125;
}

void quasar::ConfiguredProcessingBlock<quasar::SimpleTokenizerOptions>::setContextProvider(uint64_t a1, uint64_t *a2)
{
  void (***v3)(uint64_t **__return_ptr);
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t *v10;
  uint64_t *v11;

  BOOL v3 = (void (***)(uint64_t **__return_ptr))(*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
  (**v3)(&v10);
  unint64_t v4 = v10;
  std::string::size_type v5 = v11;
  if (v10 != v11)
  {
    do
    {
      uint64_t v6 = *v4;
      uint64_t v7 = (std::__shared_weak_count *)a2[1];
      uint64_t v8 = *a2;
      uint64_t v9 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      quasar::OptionValueBase::setContextProvider(v6, &v8);
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
      ++v4;
    }
    while (v4 != v5);
    unint64_t v4 = v10;
  }
  if (v4)
  {
    uint64_t v11 = v4;
    operator delete(v4);
  }
}

void sub_1B1BFE420(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::ConfiguredProcessingBlock<quasar::SimpleTokenizerOptions>::getOptions(uint64_t a1)
{
  return a1 + 8;
}

void virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::SimpleTokenizerOptions>::setContextProvider(void *a1, uint64_t *a2)
{
}

uint64_t virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::SimpleTokenizerOptions>::getOptions(void *a1)
{
  return (uint64_t)a1 + *(void *)(*a1 - 104) + 8;
}

void quasar::SimpleTokenizerBlock::~SimpleTokenizerBlock(quasar::SimpleTokenizerBlock *this)
{
  *(void *)this = off_1F0A55320;
  unint64_t v2 = (char **)((char *)this + 208);
  *((void *)this + 26) = off_1F0A553C8;
  BOOL v3 = (void **)((char *)this + 184);
  std::vector<quasar::RegexReplacementRule>::__destroy_vector::operator()[abi:ne180100](&v3);
  quasar::ConfiguredProcessingBlock<quasar::SimpleTokenizerOptions>::~ConfiguredProcessingBlock((uint64_t)this, (uint64_t *)&off_1F0A32890);
  quasar::ProcessingBlock::~ProcessingBlock(v2);
}

{
  char **v2;
  void **v3;

  *(void *)this = off_1F0A55320;
  unint64_t v2 = (char **)((char *)this + 208);
  *((void *)this + 26) = off_1F0A553C8;
  BOOL v3 = (void **)((char *)this + 184);
  std::vector<quasar::RegexReplacementRule>::__destroy_vector::operator()[abi:ne180100](&v3);
  quasar::ConfiguredProcessingBlock<quasar::SimpleTokenizerOptions>::~ConfiguredProcessingBlock((uint64_t)this, (uint64_t *)&off_1F0A32890);
  quasar::ProcessingBlock::~ProcessingBlock(v2);
  MEMORY[0x1B3EA8670](this, 0x10F3C4054690CFBLL);
}

const char *quasar::SimpleTokenizerBlock::blockType(quasar::SimpleTokenizerBlock *this)
{
  return "SimpleTokenizerBlock";
}

void virtual thunk to'quasar::SimpleTokenizerBlock::~SimpleTokenizerBlock(quasar::SimpleTokenizerBlock *this)
{
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24);
  *(void *)uint64_t v1 = off_1F0A55320;
  *((void *)v1 + 26) = off_1F0A553C8;
  unint64_t v2 = (void **)(v1 + 184);
  std::vector<quasar::RegexReplacementRule>::__destroy_vector::operator()[abi:ne180100](&v2);
  quasar::ConfiguredProcessingBlock<quasar::SimpleTokenizerOptions>::~ConfiguredProcessingBlock((uint64_t)v1, (uint64_t *)&off_1F0A32890);
  quasar::ProcessingBlock::~ProcessingBlock((char **)v1 + 26);
}

{
  char *v1;
  void **v2;

  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24);
  *(void *)uint64_t v1 = off_1F0A55320;
  *((void *)v1 + 26) = off_1F0A553C8;
  unint64_t v2 = (void **)(v1 + 184);
  std::vector<quasar::RegexReplacementRule>::__destroy_vector::operator()[abi:ne180100](&v2);
  quasar::ConfiguredProcessingBlock<quasar::SimpleTokenizerOptions>::~ConfiguredProcessingBlock((uint64_t)v1, (uint64_t *)&off_1F0A32890);
  quasar::ProcessingBlock::~ProcessingBlock((char **)v1 + 26);
  MEMORY[0x1B3EA8670](v1, 0x10F3C4054690CFBLL);
}

const char *virtual thunk to'quasar::SimpleTokenizerBlock::blockType(quasar::SimpleTokenizerBlock *this)
{
  return "SimpleTokenizerBlock";
}

uint64_t quasar::ConfiguredProcessingBlock<quasar::SimpleTokenizerOptions>::~ConfiguredProcessingBlock(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + *(void *)(v3 - 24)) = a2[1];
  *(void *)(a1 + 8) = &unk_1F0A56470;
  *(void *)(a1 + ++*(void *)(result + 24) = &unk_1F0A51DE8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1 + 160, *(void **)(a1 + 168));
  if (*(char *)(a1 + 151) < 0) {
    operator delete(*(void **)(a1 + 128));
  }
  *(void *)(a1 + ++*(void *)(result + 24) = &unk_1F0A52FB8;
  unint64_t v4 = *(std::__shared_weak_count **)(a1 + 120);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  return a1;
}

uint64_t std::vector<quasar::TranslationTokenInternal>::__push_back_slow_path<quasar::TranslationTokenInternal const&>(uint64_t *a1, const quasar::TranslationTokenInternal *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xF0F0F0F0F0F0F0F1 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x1E1E1E1E1E1E1E1) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xF0F0F0F0F0F0F0F1 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0xF0F0F0F0F0F0F0) {
    unint64_t v9 = 0x1E1E1E1E1E1E1E1;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TranslationTokenInternal>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  __int16 v13 = v10;
  uint64_t v14 = (std::string *)&v10[136 * v4];
  uint64_t v16 = &v10[136 * v9];
  quasar::TranslationTokenInternal::TranslationTokenInternal(v14, a2);
  uint64_t v15 = &v14[5].__r_.__value_.__s.__data_[16];
  std::vector<quasar::TranslationTokenInternal>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<quasar::TranslationTokenInternal>::~__split_buffer(&v13);
  return v11;
}

void sub_1B1BFE980(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::TranslationTokenInternal>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::TranslationTokenInternal>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::TranslationTokenInternal>,std::reverse_iterator<quasar::TranslationTokenInternal*>,std::reverse_iterator<quasar::TranslationTokenInternal*>,std::reverse_iterator<quasar::TranslationTokenInternal*>>((uint64_t)(a1 + 2), a1[1], (long long *)a1[1], *a1, (long long *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::TranslationTokenInternal>,std::reverse_iterator<quasar::TranslationTokenInternal*>,std::reverse_iterator<quasar::TranslationTokenInternal*>,std::reverse_iterator<quasar::TranslationTokenInternal*>>(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, long long *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  _OWORD v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    unint64_t v9 = a3;
    do
    {
      unint64_t v9 = (long long *)((char *)v9 - 136);
      std::allocator<quasar::TranslationTokenInternal>::construct[abi:ne180100]<quasar::TranslationTokenInternal,quasar::TranslationTokenInternal>(a1, v7 - 136, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 136;
      *((void *)&v16 + 1) -= 136;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TranslationTokenInternal>,std::reverse_iterator<quasar::TranslationTokenInternal*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

__n128 std::allocator<quasar::TranslationTokenInternal>::construct[abi:ne180100]<quasar::TranslationTokenInternal,quasar::TranslationTokenInternal>(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v3 = *a3;
  *(void *)(a2 + 16) = *((void *)a3 + 2);
  *(_OWORD *)a2 = v3;
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = 0;
  *(void *)a3 = 0;
  *(_WORD *)(a2 + ++*(void *)(result + 24) = *((_WORD *)a3 + 12);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)(a2 + 32) = a3[2];
  *(void *)(a2 + 48) = *((void *)a3 + 6);
  *((void *)a3 + 4) = 0;
  *((void *)a3 + 5) = 0;
  *((void *)a3 + 6) = 0;
  uint64_t v4 = *((void *)a3 + 7);
  *(_DWORD *)(a2 + 64) = *((_DWORD *)a3 + 16);
  *(void *)(a2 + 56) = v4;
  long long v5 = *(long long *)((char *)a3 + 72);
  *(void *)(a2 + 88) = *((void *)a3 + 11);
  *(_OWORD *)(a2 + 72) = v5;
  *((void *)a3 + 10) = 0;
  *((void *)a3 + 11) = 0;
  *((void *)a3 + 9) = 0;
  uint64_t v6 = *((void *)a3 + 12);
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 96) = v6;
  *(void *)(a2 + 104) = 0;
  __n128 result = *(__n128 *)((char *)a3 + 104);
  *(__n128 *)(a2 + 104) = result;
  *(void *)(a2 + 120) = *((void *)a3 + 15);
  *((void *)a3 + 13) = 0;
  *((void *)a3 + 14) = 0;
  *((void *)a3 + 15) = 0;
  *(void *)(a2 + 128) = *((void *)a3 + 16);
  return result;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TranslationTokenInternal>,std::reverse_iterator<quasar::TranslationTokenInternal*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TranslationTokenInternal>,std::reverse_iterator<quasar::TranslationTokenInternal*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TranslationTokenInternal>,std::reverse_iterator<quasar::TranslationTokenInternal*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<quasar::TranslationTokenInternal>::destroy[abi:ne180100](v3, v1);
      v1 += 136;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<quasar::TranslationTokenInternal>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<quasar::TranslationTokenInternal>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 136;
    std::allocator<quasar::TranslationTokenInternal>::destroy[abi:ne180100](v4, i - 136);
  }
}

void std::codecvt_utf8_utf16<wchar_t,1114111ul,(std::codecvt_mode)0>::~codecvt_utf8_utf16[abi:ne180100](std::codecvt<wchar_t, char, mbstate_t> *a1)
{
  std::codecvt<wchar_t,char,__mbstate_t>::~codecvt(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::wstring_convert<std::codecvt_utf8_utf16<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::from_bytes(uint64_t a1@<X0>, int *a2@<X1>, int *a3@<X2>, std::wstring *a4@<X8>)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 184) = 0;
  if (!*(void *)(a1 + 48)) {
    goto LABEL_23;
  }
  uint64_t v7 = a2;
  std::basic_string<char32_t>::basic_string[abi:ne180100](a4, 2 * ((char *)a3 - (char *)a2), 0);
  if (a3 != v7)
  {
    if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::wstring::size_type v8 = 4;
    }
    else {
      std::wstring::size_type v8 = (a4->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    }
    std::wstring::resize(a4, v8, 0);
    long long v9 = *(_OWORD *)(a1 + 136);
    v30[4] = *(_OWORD *)(a1 + 120);
    v30[5] = v9;
    long long v10 = *(_OWORD *)(a1 + 168);
    v30[6] = *(_OWORD *)(a1 + 152);
    v30[7] = v10;
    long long v11 = *(_OWORD *)(a1 + 72);
    v30[0] = *(_OWORD *)(a1 + 56);
    v30[1] = v11;
    __n128 v12 = *(__n128 *)(a1 + 88);
    long long v13 = *(_OWORD *)(a1 + 104);
    std::wstring::size_type size = HIBYTE(a4->__r_.__value_.__r.__words[2]);
    if ((size & 0x80u) == 0) {
      long long v15 = (char *)a4;
    }
    else {
      long long v15 = (char *)a4->__r_.__value_.__r.__words[0];
    }
    if ((size & 0x80u) != 0) {
      std::wstring::size_type size = a4->__r_.__value_.__l.__size_;
    }
    long long v16 = &v15[4 * size];
    void v30[2] = *(_OWORD *)(a1 + 88);
    void v30[3] = v13;
    do
    {
      int v17 = (*(uint64_t (**)(void, _OWORD *, int *, int *, int **, char *, char *, uint64_t *, __n128))(**(void **)(a1 + 48) + 32))(*(void *)(a1 + 48), v30, v7, a3, &v29, v15, v16, &v28, v12);
      BOOL v18 = v29 == v7;
      *(void *)(a1 + 184) += (char *)v29 - (char *)v7;
      if (v18) {
        goto LABEL_34;
      }
      if (v17 != 1)
      {
        if (v17)
        {
          if (v17 != 3)
          {
LABEL_34:
            if ((*((unsigned char *)&a4->__r_.__value_.__s + 23) & 0x80) != 0) {
              goto LABEL_35;
            }
            goto LABEL_23;
          }
          if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v25 = (char *)a4;
          }
          else {
            uint64_t v25 = (char *)a4->__r_.__value_.__r.__words[0];
          }
          std::wstring::resize(a4, (v15 - v25) >> 2, 0);
          std::wstring::append[abi:ne180100]<wchar_t const*,0>(a4, v7, a3);
        }
        else
        {
          if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v27 = a4;
          }
          else {
            unint64_t v27 = (std::wstring *)a4->__r_.__value_.__r.__words[0];
          }
          std::wstring::resize(a4, (v28 - (uint64_t)v27) >> 2, 0);
        }
        return;
      }
      if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v19 = a4;
      }
      else {
        long long v19 = (std::wstring *)a4->__r_.__value_.__r.__words[0];
      }
      uint64_t v20 = v28 - (void)v19;
      std::wstring::resize(a4, (v28 - (uint64_t)v19) >> 1, 0);
      std::wstring::size_type v21 = HIBYTE(a4->__r_.__value_.__r.__words[2]);
      char v22 = v21;
      uint64_t v23 = (std::wstring *)a4->__r_.__value_.__r.__words[0];
      if ((v21 & 0x80u) == 0) {
        uint64_t v23 = a4;
      }
      long long v15 = (char *)v23 + v20;
      if ((v21 & 0x80u) != 0) {
        std::wstring::size_type v21 = a4->__r_.__value_.__l.__size_;
      }
      long long v16 = (char *)v23 + 4 * v21;
      uint64_t v7 = v29;
    }
    while (v29 < a3);
    if ((v22 & 0x80) == 0) {
      goto LABEL_23;
    }
LABEL_35:
    operator delete(a4->__r_.__value_.__l.__data_);
LABEL_23:
    int64x2_t v24 = (const std::wstring::value_type **)(a1 + 24);
    if ((*(char *)(a1 + 47) & 0x80000000) == 0)
    {
      if (*(unsigned char *)(a1 + 47))
      {
        *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)v24;
        a4->__r_.__value_.__r.__words[2] = *(void *)(a1 + 40);
        return;
      }
LABEL_41:
      std::__throw_range_error[abi:ne180100]("wstring_convert: from_bytes error");
    }
    std::wstring::size_type v26 = *(void *)(a1 + 32);
    if (!v26) {
      goto LABEL_41;
    }
    std::basic_string<char32_t>::__init_copy_ctor_external(a4, *v24, v26);
  }
}

void sub_1B1BFEF30(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::wstring *std::wstring::append[abi:ne180100]<wchar_t const*,0>(std::wstring *this, int *a2, int *a3)
{
  uint64_t v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    uint64_t v7 = (char *)a3 - (char *)a2;
    if (a3 == a2) {
      return this;
    }
    std::wstring::size_type size = this->__r_.__value_.__l.__size_;
    unint64_t v11 = this->__r_.__value_.__r.__words[2];
    std::wstring::size_type v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    long long v10 = (std::wstring *)this->__r_.__value_.__r.__words[0];
    unint64_t v6 = HIBYTE(v11);
  }
  else
  {
    uint64_t v7 = (char *)a3 - (char *)a2;
    if (a3 == a2) {
      return this;
    }
    std::wstring::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    std::wstring::size_type v9 = 4;
    long long v10 = this;
  }
  unint64_t v12 = v7 >> 2;
  if (v10 > (std::wstring *)v4 || (char *)v10->__r_.__value_.__r.__words + 4 * size + 4 <= (char *)v4)
  {
    if (v9 - size < v12)
    {
      std::wstring::__grow_by(this, v9, size - v9 + v12, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((unsigned char *)&this->__r_.__value_.__s + 23);
    }
    long long v15 = this;
    if ((v6 & 0x80) != 0) {
      long long v15 = (std::wstring *)this->__r_.__value_.__r.__words[0];
    }
    long long v16 = (int *)((char *)v15 + 4 * size);
    while (v4 != a3)
    {
      int v17 = *v4++;
      *v16++ = v17;
    }
    *long long v16 = 0;
    std::wstring::size_type v18 = v12 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      this->__r_.__value_.__l.__size_ = v18;
    }
    else {
      *((unsigned char *)&this->__r_.__value_.__s + 23) = v18 & 0x7F;
    }
  }
  else
  {
    std::basic_string<char32_t>::__init_with_size[abi:ne180100]<char32_t const*,char32_t const*>(__p, v4, a3, v12);
    if ((v21 & 0x80u) == 0) {
      long long v13 = __p;
    }
    else {
      long long v13 = (void **)__p[0];
    }
    if ((v21 & 0x80u) == 0) {
      std::wstring::size_type v14 = v21;
    }
    else {
      std::wstring::size_type v14 = (std::wstring::size_type)__p[1];
    }
    std::wstring::append(this, (const std::wstring::value_type *)v13, v14);
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  return this;
}

void sub_1B1BFF0C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::wstring *std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::wstring>,std::__wrap_iter<wchar_t const*>,std::regex_traits<wchar_t>,wchar_t>(std::wstring *a1, std::__wrap_iter<const wchar_t *> a2, std::__wrap_iter<const wchar_t *> a3, const std::regex_iterator<std::__wrap_iter<const wchar_t *>, wchar_t>::regex_type *a4, __int32 *a5, unsigned __int32 __m)
{
  __int16 v6 = __m;
  uint64_t i = (std::wstring::value_type *)a2.__i_;
  std::regex_iterator<std::__wrap_iter<wchar_t const*>,wchar_t,std::regex_traits<wchar_t>>::regex_iterator(&v18, a2, a3, a4, (std::regex_constants::match_flag_type)__m);
  memset(&v17.__match_.__prefix_, 0, 17);
  memset(&v17.__match_.__suffix_, 0, 17);
  v17.__match_.__ready_ = 0;
  v17.__match_.__position_start_.__i_ = 0;
  memset(&v17.__match_, 0, 41);
  memset(&v17, 0, 28);
  if (std::regex_iterator<std::__wrap_iter<wchar_t const*>,wchar_t,std::regex_traits<wchar_t>>::operator==(&v18, &v17))
  {
    if ((v6 & 0x200) == 0)
    {
      while (i != a3.__i_)
        std::wstring::push_back(a1, *i++);
    }
  }
  else
  {
    std::__wrap_iter<const wchar_t *>::iterator_type v11 = 0;
    unint64_t v12 = 0;
    long long v13 = &a5[wcslen(a5)];
    while (!std::regex_iterator<std::__wrap_iter<wchar_t const*>,wchar_t,std::regex_traits<wchar_t>>::operator==(&v18, &v17))
    {
      if ((v6 & 0x200) == 0)
      {
        std::wstring::size_type v14 = (std::wstring::value_type *)v18.__match_.__prefix_.first.__i_;
        std::__wrap_iter<const wchar_t *>::iterator_type v15 = v18.__match_.__prefix_.second.__i_;
        while (v14 != v15)
          std::wstring::push_back(a1, *v14++);
      }
      a1 = std::match_results<std::__wrap_iter<wchar_t const*>>::format<std::back_insert_iterator<std::wstring>>(&v18.__match_, a1, a5, v13, v6);
      unint64_t v12 = (std::wstring::value_type *)v18.__match_.__suffix_.first.__i_;
      std::__wrap_iter<const wchar_t *>::iterator_type v11 = v18.__match_.__suffix_.second.__i_;
      if ((v6 & 0x400) != 0) {
        break;
      }
      std::regex_iterator<std::__wrap_iter<wchar_t const*>,wchar_t,std::regex_traits<wchar_t>>::operator++(&v18);
    }
    if ((v6 & 0x200) == 0)
    {
      while (v12 != v11)
        std::wstring::push_back(a1, *v12++);
    }
  }
  if (v17.__match_.__matches_.__begin_)
  {
    v17.__match_.__matches_.__end_ = v17.__match_.__matches_.__begin_;
    operator delete(v17.__match_.__matches_.__begin_);
  }
  if (v18.__match_.__matches_.__begin_)
  {
    v18.__match_.__matches_.__end_ = v18.__match_.__matches_.__begin_;
    operator delete(v18.__match_.__matches_.__begin_);
  }
  return a1;
}

void sub_1B1BFF25C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32)
{
  if (__p) {
    operator delete(__p);
  }
  if (a31) {
    operator delete(a31);
  }
  _Unwind_Resume(exception_object);
}

BOOL std::regex_iterator<std::__wrap_iter<wchar_t const*>,wchar_t,std::regex_traits<wchar_t>>::operator==(const std::regex_iterator<std::__wrap_iter<const wchar_t *>, wchar_t> *this, const std::regex_iterator<std::__wrap_iter<const wchar_t *>, wchar_t> *__x)
{
  p_match = &this->__match_;
  std::vector<std::wssub_match>::pointer begin = this->__match_.__matches_.__begin_;
  std::vector<unsigned int>::pointer end = p_match->__matches_.__end_;
  std::wstring::size_type v9 = &__x->__match_;
  std::vector<std::wssub_match>::pointer v7 = __x->__match_.__matches_.__begin_;
  std::wstring::size_type v8 = v9->__matches_.__end_;
  BOOL v10 = v8 == v7 && end == begin;
  if (end != begin && v8 != v7) {
    return this->__begin_.__i_ == __x->__begin_.__i_
  }
        && this->__end_.__i_ == __x->__end_.__i_
        && this->__pregex_ == __x->__pregex_
        && this->__flags_ == __x->__flags_
        && std::sub_match<std::__wrap_iter<wchar_t const*>>::compare[abi:ne180100](begin, v7) == 0;
  return v10;
}

std::wstring *std::match_results<std::__wrap_iter<wchar_t const*>>::format<std::back_insert_iterator<std::wstring>>(void **a1, std::wstring *this, std::wstring::value_type *a3, std::wstring::value_type *a4, __int16 a5)
{
  __int16 v6 = a3;
  if ((a5 & 0x100) != 0)
  {
    if (a3 == a4) {
      return this;
    }
    while (1)
    {
      std::wstring::value_type v29 = *v6;
      if (*v6 == 92)
      {
        char v33 = v6 + 1;
        if (v6 + 1 != a4)
        {
          std::wstring::value_type v29 = *v33;
          unsigned int v34 = *v33 - 48;
          if (v34 <= 9)
          {
            if (0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1) <= v34) {
              unsigned int v35 = (std::wstring::value_type **)(a1 + 3);
            }
            else {
              unsigned int v35 = (std::wstring::value_type **)&(*a1)[3 * v34];
            }
            unint64_t v36 = *v35;
            long long v37 = v35[1];
            while (v36 != v37)
            {
              std::wstring::value_type v38 = *v36++;
              std::wstring::push_back(this, v38);
            }
            goto LABEL_54;
          }
          ++v6;
        }
      }
      else if (v29 == 38)
      {
        uint64_t v30 = (std::wstring::value_type *)**a1;
        uint64_t v31 = (std::wstring::value_type *)(*a1)[1];
        while (v30 != v31)
        {
          std::wstring::value_type v32 = *v30++;
          std::wstring::push_back(this, v32);
        }
        goto LABEL_53;
      }
      std::wstring::push_back(this, v29);
LABEL_53:
      char v33 = v6;
LABEL_54:
      __int16 v6 = v33 + 1;
      if (v33 + 1 == a4) {
        return this;
      }
    }
  }
  if (a3 != a4)
  {
    do
    {
      std::wstring::value_type v9 = *v6;
      BOOL v10 = v6 + 1;
      if (*v6 == 36 && v10 != a4)
      {
        std::wstring::value_type v9 = *v10;
        if (*v10 > 38)
        {
          if (v9 == 39)
          {
            std::regex_iterator<std::__wrap_iter<const wchar_t *>, wchar_t> v18 = (std::wstring::value_type *)a1[9];
            long long v19 = (std::wstring::value_type *)a1[10];
            while (v18 != v19)
            {
              std::wstring::value_type v20 = *v18++;
              std::wstring::push_back(this, v20);
            }
            goto LABEL_10;
          }
          if (v9 == 96)
          {
            std::__wrap_iter<const wchar_t *>::iterator_type v15 = (std::wstring::value_type *)a1[6];
            long long v16 = (std::wstring::value_type *)a1[7];
            while (v15 != v16)
            {
              std::wstring::value_type v17 = *v15++;
              std::wstring::push_back(this, v17);
            }
            goto LABEL_10;
          }
        }
        else
        {
          if (v9 == 36) {
            goto LABEL_9;
          }
          if (v9 == 38)
          {
            unint64_t v12 = (std::wstring::value_type *)**a1;
            long long v13 = (std::wstring::value_type *)(*a1)[1];
            while (v12 != v13)
            {
              std::wstring::value_type v14 = *v12++;
              std::wstring::push_back(this, v14);
            }
            goto LABEL_10;
          }
        }
        unint64_t v21 = (v9 - 48);
        if (v21 <= 9)
        {
          if (v6 + 2 != a4)
          {
            uint64_t v22 = v6[2];
            unsigned int v23 = v22 - 48;
            uint64_t v24 = v22 + 10 * v21 - 48;
            if (v23 <= 9)
            {
              unint64_t v21 = v24;
              BOOL v10 = v6 + 2;
            }
          }
          if (0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1) <= v21) {
            uint64_t v25 = (std::wstring::value_type **)(a1 + 3);
          }
          else {
            uint64_t v25 = (std::wstring::value_type **)&(*a1)[3 * v21];
          }
          std::wstring::size_type v26 = *v25;
          unint64_t v27 = v25[1];
          while (v26 != v27)
          {
            std::wstring::value_type v28 = *v26++;
            std::wstring::push_back(this, v28);
          }
          goto LABEL_10;
        }
        std::wstring::value_type v9 = 36;
      }
      BOOL v10 = v6;
LABEL_9:
      std::wstring::push_back(this, v9);
LABEL_10:
      __int16 v6 = v10 + 1;
    }
    while (v10 + 1 != a4);
  }
  return this;
}

std::regex_iterator<std::__wrap_iter<const wchar_t *>, wchar_t> *__cdecl std::regex_iterator<std::__wrap_iter<wchar_t const*>,wchar_t,std::regex_traits<wchar_t>>::operator++(std::regex_iterator<std::__wrap_iter<const wchar_t *>, wchar_t> *this)
{
  p_match = &this->__match_;
  std::vector<std::wssub_match>::pointer begin = this->__match_.__matches_.__begin_;
  int i = (int)p_match[-1].__position_start_.__i_;
  unsigned __int32 flags = i | 0x800;
  LODWORD(p_match[-1].__position_start_.__i_) = i | 0x800;
  if (p_match->__matches_.__end_ == begin) {
    p_unmatched = &p_match->__unmatched_;
  }
  else {
    p_unmatched = begin;
  }
  std::vector<std::wssub_match>::pointer v7 = (__int32 *)p_unmatched->second.__i_;
  if (p_unmatched->first.__i_ != v7)
  {
LABEL_5:
    this->__flags_ = flags | 0x80;
    std::wstring::value_type v9 = (__int32 *)this->__end_.__i_;
    pregex = this->__pregex_;
    memset(&__p.__prefix_, 0, 17);
    memset(&__p.__suffix_, 0, 17);
    __p.__ready_ = 0;
    __p.__position_start_ = 0;
    memset(&__p, 0, 41);
    char v10 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__search<std::allocator<std::sub_match<wchar_t const*>>>((uint64_t)pregex, v7, v9, &__p, flags | 0x80);
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(&p_match->__matches_, (uint64_t)v7, (std::sub_match<std::__wrap_iter<const wchar_t *>> *)v9, (uint64_t *)&__p, (flags & 0x800) != 0);
    if (__p.__matches_.__begin_)
    {
      __p.__matches_.__end_ = __p.__matches_.__begin_;
      operator delete(__p.__matches_.__begin_);
    }
    if ((v10 & 1) == 0)
    {
      std::vector<std::wssub_match>::pointer begin = p_match->__matches_.__begin_;
LABEL_14:
      if (begin)
      {
        this->__match_.__matches_.__end_ = begin;
        operator delete(begin);
        p_match->__matches_.__begin_ = 0;
        p_match->__matches_.__end_ = 0;
        p_match->__matches_.__end_cap_.__value_ = 0;
      }
      this->__match_.__ready_ = 0;
      *(_OWORD *)&p_match->__matches_.__begin_ = 0u;
      *(_OWORD *)&p_match->__matches_.__end_cap_.__value_ = 0u;
      *(std::pair<std::__wrap_iter<const wchar_t *>, std::__wrap_iter<const wchar_t *>> *)((char *)&p_match->__unmatched_.std::pair<std::__wrap_iter<const wchar_t *>, std::__wrap_iter<const wchar_t *>>
                                                                                         + 1) = 0u;
      this->__match_.__prefix_.first.__i_ = 0;
      this->__match_.__prefix_.second.__i_ = 0;
      this->__match_.__prefix_.matched = 0;
      this->__match_.__suffix_.first.__i_ = 0;
      this->__match_.__suffix_.second.__i_ = 0;
      this->__match_.__suffix_.matched = 0;
      this->__match_.__position_start_.__i_ = 0;
      return this;
    }
    return this;
  }
  std::__wrap_iter<const wchar_t *>::iterator_type v11 = (__int32 *)this->__end_.__i_;
  if (v11 == v7) {
    goto LABEL_14;
  }
  unint64_t v12 = this->__pregex_;
  memset(&__p.__prefix_, 0, 17);
  memset(&__p.__suffix_, 0, 17);
  __p.__ready_ = 0;
  __p.__position_start_ = 0;
  memset(&__p, 0, 41);
  char v13 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__search<std::allocator<std::sub_match<wchar_t const*>>>((uint64_t)v12, v7, v11, &__p, i | 0x860u);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(&p_match->__matches_, (uint64_t)v7, (std::sub_match<std::__wrap_iter<const wchar_t *>> *)v11, (uint64_t *)&__p, 1);
  if (__p.__matches_.__begin_)
  {
    __p.__matches_.__end_ = __p.__matches_.__begin_;
    operator delete(__p.__matches_.__begin_);
  }
  if ((v13 & 1) == 0)
  {
    ++v7;
    unsigned __int32 flags = this->__flags_;
    goto LABEL_5;
  }
  return this;
}

void sub_1B1BFF728(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::regex_iterator<std::__wrap_iter<const wchar_t *>, wchar_t> *__cdecl std::regex_iterator<std::__wrap_iter<wchar_t const*>,wchar_t,std::regex_traits<wchar_t>>::regex_iterator(std::regex_iterator<std::__wrap_iter<const wchar_t *>, wchar_t> *this, std::__wrap_iter<const wchar_t *> __a, std::__wrap_iter<const wchar_t *> __b, const std::regex_iterator<std::__wrap_iter<const wchar_t *>, wchar_t>::regex_type *__re, std::regex_constants::match_flag_type __m)
{
  __int16 v5 = __m;
  this->__begin_ = __a;
  this->__end_ = __b;
  this->__pregex_ = __re;
  this->__flags_ = __m;
  *(_OWORD *)&this->__match_.__matches_.__begin_ = 0u;
  p_match = &this->__match_;
  this->__match_.__prefix_.first.__i_ = 0;
  this->__match_.__prefix_.second.__i_ = 0;
  this->__match_.__prefix_.matched = 0;
  this->__match_.__suffix_.first.__i_ = 0;
  this->__match_.__suffix_.second.__i_ = 0;
  this->__match_.__suffix_.matched = 0;
  this->__match_.__ready_ = 0;
  this->__match_.__position_start_.__i_ = 0;
  *(_OWORD *)&this->__match_.__matches_.__end_cap_.__value_ = 0u;
  *(std::pair<std::__wrap_iter<const wchar_t *>, std::__wrap_iter<const wchar_t *>> *)((char *)&this->__match_.__unmatched_.std::pair<std::__wrap_iter<const wchar_t *>, std::__wrap_iter<const wchar_t *>>
                                                                                     + 1) = 0u;
  memset(&__p.__prefix_, 0, 17);
  memset(&__p.__suffix_, 0, 17);
  __p.__ready_ = 0;
  __p.__position_start_ = 0;
  memset(&__p, 0, 41);
  std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__search<std::allocator<std::sub_match<wchar_t const*>>>((uint64_t)__re, (__int32 *)__a.__i_, (__int32 *)__b.__i_, &__p, __m);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(&p_match->__matches_, (uint64_t)__a.__i_, (std::sub_match<std::__wrap_iter<const wchar_t *>> *)__b.__i_, (uint64_t *)&__p, (v5 & 0x800) != 0);
  if (__p.__matches_.__begin_)
  {
    __p.__matches_.__end_ = __p.__matches_.__begin_;
    operator delete(__p.__matches_.__begin_);
  }
  return this;
}

void sub_1B1BFF820(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  char v13 = *v11;
  if (*v11)
  {
    *(void *)(v10 + 40) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__search<std::allocator<std::sub_match<wchar_t const*>>>(uint64_t a1, __int32 *__f, __int32 *__l, std::match_results<const wchar_t *> *this, int a5)
{
  if ((a5 & 0x80) != 0) {
    int v9 = a5 & 0xFFA;
  }
  else {
    int v9 = a5;
  }
  std::match_results<char const*>::__init(this, *(_DWORD *)(a1 + 28) + 1, __f, __l, (unsigned __int16)(v9 & 0x800) >> 11);
  if (std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__match_at_start<std::allocator<std::sub_match<wchar_t const*>>>(a1, __f, __l, (uint64_t *)this, v9, (v9 & 0x800) == 0))
  {
    if (this->__matches_.__end_ == this->__matches_.__begin_) {
      p_unmatched = &this->__unmatched_;
    }
    else {
      p_unmatched = this->__matches_.__begin_;
    }
LABEL_8:
    std::__split_buffer<std::wstring>::pointer first = p_unmatched->first;
    this->__prefix_.second = p_unmatched->first;
    this->__prefix_.matched = this->__prefix_.first != first;
    second = p_unmatched->second;
    this->__suffix_.std::__split_buffer<std::wstring>::pointer first = second;
    this->__suffix_.matched = second != this->__suffix_.second;
    return 1;
  }
  if (__f != __l && (v9 & 0x40) == 0)
  {
    int v14 = v9 | 0x80;
    std::__wrap_iter<const wchar_t *>::iterator_type v15 = __f + 1;
    if (v15 != __l)
    {
      while (1)
      {
        std::vector<std::sub_match<char const*>>::assign(&this->__matches_, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__matches_.__end_ - (char *)this->__matches_.__begin_) >> 3), &this->__unmatched_);
        int v16 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__match_at_start<std::allocator<std::sub_match<wchar_t const*>>>(a1, v15, __l, (uint64_t *)this, v14, 0);
        std::vector<std::wcsub_match>::pointer begin = this->__matches_.__begin_;
        std::vector<std::wcsub_match>::pointer end = this->__matches_.__end_;
        if (v16) {
          break;
        }
        std::vector<std::sub_match<char const*>>::assign(&this->__matches_, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3), &this->__unmatched_);
        if (++v15 == __l) {
          goto LABEL_14;
        }
      }
      if (end == begin) {
        p_unmatched = &this->__unmatched_;
      }
      else {
        p_unmatched = this->__matches_.__begin_;
      }
      goto LABEL_8;
    }
LABEL_14:
    std::vector<std::sub_match<char const*>>::assign(&this->__matches_, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__matches_.__end_ - (char *)this->__matches_.__begin_) >> 3), &this->__unmatched_);
    if (std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__match_at_start<std::allocator<std::sub_match<wchar_t const*>>>(a1, __l, __l, (uint64_t *)this, v14, 0))
    {
      if (this->__matches_.__end_ == this->__matches_.__begin_) {
        p_unmatched = &this->__unmatched_;
      }
      else {
        p_unmatched = this->__matches_.__begin_;
      }
      goto LABEL_8;
    }
  }
  uint64_t result = 0;
  this->__matches_.__end_ = this->__matches_.__begin_;
  return result;
}

uint64_t std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__match_at_start<std::allocator<std::sub_match<wchar_t const*>>>(uint64_t a1, const __int32 *a2, const __int32 *a3, uint64_t *a4, int a5, char a6)
{
  if ((*(_WORD *)(a1 + 24) & 0x1F0) == 0) {
    return std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__match_at_start_ecma<std::allocator<std::sub_match<wchar_t const*>>>(a1, a2, a3, a4, a5, a6);
  }
  if (*(_DWORD *)(a1 + 28)) {
    return std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__match_at_start_posix_subs<std::allocator<std::sub_match<wchar_t const*>>>(a1, a2, a3, a4, a5, a6);
  }
  return std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<wchar_t const*>>>(a1, (uint64_t)a2, (uint64_t)a3, a4, a5, a6);
}

uint64_t std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__match_at_start_ecma<std::allocator<std::sub_match<wchar_t const*>>>(uint64_t a1, const __int32 *a2, const __int32 *a3, uint64_t *a4, int a5, char a6)
{
  int64_t v41 = 0;
  uint64_t v42 = 0;
  unint64_t v43 = 0;
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    __x.std::__split_buffer<std::wstring>::pointer first = a3;
    __x.second = a3;
    __x.matched = 0;
    *(_DWORD *)long long v37 = 0;
    memset(&v37[8], 0, 48);
    *(_OWORD *)std::match_results<const wchar_t *> __p = 0u;
    memset(v39, 0, 21);
    uint64_t v42 = (_OWORD *)std::vector<std::__state<wchar_t>>::__push_back_slow_path<std::__state<wchar_t>>((uint64_t *)&v41, (uint64_t)v37);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(void *)&v37[32])
    {
      *(void *)&v37[40] = *(void *)&v37[32];
      operator delete(*(void **)&v37[32]);
    }
    unsigned int v35 = a4;
    unint64_t v12 = v42;
    *((_DWORD *)v42 - ++*(void *)(result + 24) = 0;
    *((void *)v12 - 11) = a2;
    *((void *)v12 - 10) = a2;
    *((void *)v12 - 9) = a3;
    std::vector<std::sub_match<char const*>>::resize((std::vector<std::wcsub_match> *)(v12 - 4), *(unsigned int *)(a1 + 28), &__x);
    std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const wchar_t *>> *)((char *)v42 - 40), *(unsigned int *)(a1 + 32));
    char v13 = v42;
    *((void *)v42 - 2) = v6;
    *((_DWORD *)v13 - 2) = a5;
    *((unsigned char *)v13 - 4) = a6;
    unsigned int v14 = 1;
    while (2)
    {
      if ((v14 & 0xFFF) == 0 && (int)(v14 >> 12) >= (int)((unint64_t)((char *)a3 - (char *)a2) >> 2)) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
      }
      int v16 = v13 - 1;
      uint64_t v15 = *((void *)v13 - 2);
      std::wstring::value_type v17 = v13 - 6;
      if (v15) {
        (*(void (**)(uint64_t, _OWORD *))(*(void *)v15 + 16))(v15, v13 - 6);
      }
      switch(*(_DWORD *)v17)
      {
        case 0xFFFFFC18:
          std::regex_iterator<std::__wrap_iter<const wchar_t *>, wchar_t> v18 = (const __int32 *)*((void *)v13 - 10);
          if ((a5 & 0x20) != 0 && v18 == a2 || (a5 & 0x1000) != 0 && v18 != a3) {
            goto LABEL_16;
          }
          uint64_t v26 = *v35;
          *(void *)uint64_t v26 = a2;
          *(void *)(v26 + 8) = v18;
          *(unsigned char *)(v26 + 16) = 1;
          uint64_t v27 = *((void *)v13 - 8);
          uint64_t v28 = *((void *)v13 - 7) - v27;
          if (v28)
          {
            unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * (v28 >> 3);
            uint64_t v30 = (unsigned char *)(v27 + 16);
            unsigned int v31 = 1;
            do
            {
              uint64_t v32 = v26 + 24 * v31;
              *(_OWORD *)uint64_t v32 = *((_OWORD *)v30 - 1);
              char v33 = *v30;
              v30 += 24;
              *(unsigned char *)(v32 + 16) = v33;
            }
            while (v29 > v31++);
          }
          uint64_t v6 = 1;
          break;
        case 0xFFFFFC1D:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_23;
        case 0xFFFFFC1F:
LABEL_16:
          long long v19 = v42 - 6;
          std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)&v43, (void *)v42 - 12);
          uint64_t v42 = v19;
          goto LABEL_23;
        case 0xFFFFFC20:
          long long v20 = *(v13 - 5);
          *(_OWORD *)long long v37 = *v17;
          *(_OWORD *)&v37[16] = v20;
          memset(&v37[32], 0, 24);
          std::vector<std::sub_match<wchar_t const*>>::__init_with_size[abi:ne180100]<std::sub_match<wchar_t const*>*,std::sub_match<wchar_t const*>*>(&v37[32], *((long long **)v13 - 8), *((long long **)v13 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v13 - 7) - *((void *)v13 - 8)) >> 3));
          __p[0] = 0;
          __p[1] = 0;
          v39[0] = 0;
          std::vector<std::pair<unsigned long,wchar_t const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,wchar_t const*>*,std::pair<unsigned long,wchar_t const*>*>((char *)__p, *((long long **)v13 - 5), *((long long **)v13 - 4), (uint64_t)(*((void *)v13 - 4) - *((void *)v13 - 5)) >> 4);
          uint64_t v21 = *v16;
          *(void *)((char *)&v39[1] + 5) = *(void *)((char *)v13 - 11);
          v39[1] = v21;
          (*(void (**)(void, uint64_t, _OWORD *))(*(void *)*v16 + 24))(*v16, 1, v13 - 6);
          (*(void (**)(void, void, unsigned char *))(*(void *)v39[1] + 24))(v39[1], 0, v37);
          uint64_t v22 = v42;
          if ((unint64_t)v42 >= v43)
          {
            uint64_t v42 = (_OWORD *)std::vector<std::__state<wchar_t>>::__push_back_slow_path<std::__state<wchar_t>>((uint64_t *)&v41, (uint64_t)v37);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
          }
          else
          {
            long long v23 = *(_OWORD *)&v37[16];
            *uint64_t v42 = *(_OWORD *)v37;
            v22[1] = v23;
            *((void *)v22 + 4) = 0;
            *((void *)v22 + 5) = 0;
            *((void *)v22 + 6) = 0;
            *((void *)v22 + 7) = 0;
            v22[2] = *(_OWORD *)&v37[32];
            *((void *)v22 + 6) = *(void *)&v37[48];
            memset(&v37[32], 0, 24);
            *((void *)v22 + 8) = 0;
            *((void *)v22 + 9) = 0;
            *(_OWORD *)((char *)v22 + 56) = *(_OWORD *)__p;
            *((void *)v22 + 9) = v39[0];
            __p[0] = 0;
            __p[1] = 0;
            v39[0] = 0;
            uint64_t v24 = v39[1];
            *(void *)((char *)v22 + 85) = *(void *)((char *)&v39[1] + 5);
            *((void *)v22 + 10) = v24;
            uint64_t v42 = v22 + 6;
          }
          if (*(void *)&v37[32])
          {
            *(void *)&v37[40] = *(void *)&v37[32];
            operator delete(*(void **)&v37[32]);
          }
LABEL_23:
          char v13 = v42;
          ++v14;
          if (v41 != v42) {
            continue;
          }
          uint64_t v6 = 0;
          break;
        default:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
      }
      break;
    }
  }
  *(void *)long long v37 = &v41;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)v37);
  return v6;
}

void sub_1B1BFFE3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  std::__state<char>::~__state(&a13);
  a13 = v18 - 112;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  _Unwind_Resume(a1);
}

uint64_t std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<wchar_t const*>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  long long v62 = 0u;
  long long v63 = 0u;
  long long v61 = 0u;
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    *(_DWORD *)unsigned int v57 = 0;
    memset(&v57[8], 0, 32);
    long long v58 = 0uLL;
    *(_OWORD *)std::match_results<const wchar_t *> __p = 0uLL;
    memset(v60, 0, 21);
    std::deque<std::__state<wchar_t>>::push_back(&v61, (uint64_t)v57);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(void *)&v57[32])
    {
      *(void *)&long long v58 = *(void *)&v57[32];
      operator delete(*(void **)&v57[32]);
    }
    uint64_t v12 = *((void *)&v61 + 1);
    unint64_t v13 = *((void *)&v63 + 1) + v63 - 1;
    unint64_t v14 = v13 / 0x2A;
    uint64_t v15 = *(void *)(*((void *)&v61 + 1) + 8 * (v13 / 0x2A));
    unint64_t v16 = 3 * (v13 % 0x2A);
    uint64_t v17 = v15 + 32 * v16;
    *(_DWORD *)uint64_t v17 = 0;
    *(void *)(v17 + 8) = a2;
    *(void *)(*(void *)(v12 + 8 * v14) + 32 * v16 + 16) = a2;
    *(void *)(*(void *)(v12 + 8 * v14) + 32 * v16 + ++*(void *)(result + 24) = a3;
    std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const wchar_t *>> *)(*(void *)(v12 + 8 * v14) + 32 * v16 + 56), *(unsigned int *)(a1 + 32));
    char v55 = 0;
    unsigned int v18 = 0;
    uint64_t v53 = 0;
    uint64_t v54 = a2;
    uint64_t v52 = a3;
    uint64_t v51 = (a3 - a2) >> 2;
    uint64_t v19 = *((void *)&v63 + 1);
    uint64_t v20 = *((void *)&v61 + 1);
    unint64_t v21 = *((void *)&v63 + 1) + v63 - 1;
    unint64_t v22 = v21 / 0x2A;
    unint64_t v23 = 3 * (v21 % 0x2A);
    *(void *)(*(void *)(*((void *)&v61 + 1) + 8 * v22) + 32 * v23 + 80) = v6;
    uint64_t v24 = *(void *)(v20 + 8 * v22) + 32 * v23;
    *(_DWORD *)(v24 + 88) = a5;
    *(unsigned char *)(v24 + 92) = a6;
    unint64_t v25 = (unint64_t)(a3 - a2) >> 2;
    while (2)
    {
      if ((++v18 & 0xFFF) == 0 && (int)(v18 >> 12) >= (int)v25) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
      }
      unint64_t v27 = v19 + v63 - 1;
      uint64_t v28 = *(void *)(*((void *)&v61 + 1) + 8 * (v27 / 0x2A));
      unint64_t v29 = v27 % 0x2A;
      uint64_t v30 = v28 + 96 * (v27 % 0x2A);
      uint64_t v32 = (void *)(v30 + 80);
      uint64_t v31 = *(void *)(v30 + 80);
      if (v31) {
        (*(void (**)(uint64_t, unint64_t))(*(void *)v31 + 16))(v31, v28 + 96 * v29);
      }
      switch(*(_DWORD *)v30)
      {
        case 0xFFFFFC18:
          uint64_t v33 = *(void *)(v28 + 96 * v29 + 16);
          BOOL v35 = (a5 & 0x1000) == 0 || v33 == v52;
          BOOL v36 = v33 != v54 || (a5 & 0x20) == 0;
          if (!v36 || !v35) {
            goto LABEL_37;
          }
          uint64_t v37 = v53;
          if ((v55 & (v53 >= (v33 - *(void *)(v28 + 96 * v29 + 8)) >> 2)) == 0) {
            uint64_t v37 = (v33 - *(void *)(v28 + 96 * v29 + 8)) >> 2;
          }
          if (v37 != v51)
          {
            uint64_t v53 = v37;
            std::deque<std::__state<char>>::pop_back(&v61);
            char v55 = 1;
            goto LABEL_38;
          }
          std::wstring::value_type v38 = (void **)*((void *)&v61 + 1);
          uint64_t v39 = v62;
          if ((void)v62 == *((void *)&v61 + 1))
          {
            uint64_t v39 = *((void *)&v61 + 1);
          }
          else
          {
            uint64_t v40 = (void *)(*((void *)&v61 + 1) + 8 * ((unint64_t)v63 / 0x2A));
            int64_t v41 = (void *)(*v40 + 96 * ((unint64_t)v63 % 0x2A));
            unint64_t v42 = *(void *)(*((void *)&v61 + 1) + 8 * ((*((void *)&v63 + 1) + (void)v63) / 0x2AuLL))
                + 96 * ((*((void *)&v63 + 1) + (void)v63) % 0x2AuLL);
            if (v41 != (void *)v42)
            {
              do
              {
                std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)&v63 + 8, v41);
                v41 += 12;
                if ((void *)((char *)v41 - *v40) == (void *)4032)
                {
                  unint64_t v43 = (void *)v40[1];
                  ++v40;
                  int64_t v41 = v43;
                }
              }
              while (v41 != (void *)v42);
              std::wstring::value_type v38 = (void **)*((void *)&v61 + 1);
              uint64_t v39 = v62;
            }
          }
          *((void *)&v63 + 1) = 0;
          unint64_t v46 = v39 - (void)v38;
          if (v46 >= 0x11)
          {
            do
            {
              operator delete(*v38);
              std::wstring::value_type v38 = (void **)(*((void *)&v61 + 1) + 8);
              *((void *)&v61 + 1) = v38;
              unint64_t v46 = v62 - (void)v38;
            }
            while ((void)v62 - (void)v38 > 0x10uLL);
          }
          if (v46 >> 3 == 1)
          {
            uint64_t v47 = 21;
          }
          else
          {
            if (v46 >> 3 != 2) {
              goto LABEL_53;
            }
            uint64_t v47 = 42;
          }
          *(void *)&long long v63 = v47;
LABEL_53:
          char v55 = 1;
          uint64_t v53 = v51;
LABEL_38:
          uint64_t v19 = *((void *)&v63 + 1);
          if (*((void *)&v63 + 1)) {
            continue;
          }
          if ((v55 & 1) == 0) {
            goto LABEL_56;
          }
          uint64_t v48 = *a4;
          *(void *)uint64_t v48 = v54;
          *(void *)(v48 + 8) = v54 + 4 * v53;
          uint64_t v49 = 1;
          *(unsigned char *)(v48 + 16) = 1;
          break;
        case 0xFFFFFC19:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_38;
        case 0xFFFFFC1D:
          std::deque<std::__state<wchar_t>>::push_front((uint64_t)&v61, v28 + 96 * v29);
          goto LABEL_37;
        case 0xFFFFFC1F:
LABEL_37:
          std::deque<std::__state<char>>::pop_back(&v61);
          goto LABEL_38;
        case 0xFFFFFC20:
          long long v44 = *(_OWORD *)(v30 + 16);
          *(_OWORD *)unsigned int v57 = *(_OWORD *)v30;
          *(_OWORD *)&v57[16] = v44;
          long long v58 = 0uLL;
          *(void *)&v57[32] = 0;
          std::vector<std::sub_match<wchar_t const*>>::__init_with_size[abi:ne180100]<std::sub_match<wchar_t const*>*,std::sub_match<wchar_t const*>*>(&v57[32], *(long long **)(v28 + 96 * v29 + 32), *(long long **)(v28 + 96 * v29 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v28 + 96 * v29 + 40) - *(void *)(v28 + 96 * v29 + 32)) >> 3));
          __p[0] = 0;
          __p[1] = 0;
          v60[0] = 0;
          std::vector<std::pair<unsigned long,wchar_t const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,wchar_t const*>*,std::pair<unsigned long,wchar_t const*>*>((char *)__p, *(long long **)(v28 + 96 * v29 + 56), *(long long **)(v28 + 96 * v29 + 64), (uint64_t)(*(void *)(v28 + 96 * v29 + 64) - *(void *)(v28 + 96 * v29 + 56)) >> 4);
          uint64_t v45 = *v32;
          *(void *)((char *)&v60[1] + 5) = *(void *)(v30 + 85);
          v60[1] = v45;
          (*(void (**)(void, uint64_t, unint64_t))(*(void *)*v32 + 24))(*v32, 1, v28 + 96 * v29);
          (*(void (**)(void, void, unsigned char *))(*(void *)v60[1] + 24))(v60[1], 0, v57);
          std::deque<std::__state<wchar_t>>::push_back(&v61, (uint64_t)v57);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          if (*(void *)&v57[32])
          {
            *(void *)&long long v58 = *(void *)&v57[32];
            operator delete(*(void **)&v57[32]);
          }
          goto LABEL_38;
        default:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
      }
      break;
    }
  }
  else
  {
LABEL_56:
    uint64_t v49 = 0;
  }
  std::deque<std::__state<char>>::~deque[abi:ne180100](&v61);
  return v49;
}

void sub_1B1C00410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  std::deque<std::__state<char>>::~deque[abi:ne180100]((void *)(v22 - 144));
  _Unwind_Resume(a1);
}

uint64_t std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__match_at_start_posix_subs<std::allocator<std::sub_match<wchar_t const*>>>(uint64_t a1, const __int32 *a2, const __int32 *a3, uint64_t *a4, int a5, char a6)
{
  unsigned int v57 = 0;
  long long v58 = 0;
  v59[0] = 0;
  *(_DWORD *)uint64_t v54 = 0;
  memset(&v54[8], 0, 32);
  long long v55 = 0u;
  memset(v56, 0, 37);
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    __x.std::__split_buffer<std::wstring>::pointer first = a3;
    __x.second = a3;
    __x.matched = 0;
    *(_DWORD *)uint64_t v50 = 0;
    memset(&v50[8], 0, 48);
    *(_OWORD *)std::match_results<const wchar_t *> __p = 0uLL;
    memset(v52, 0, 21);
    long long v58 = (_OWORD *)std::vector<std::__state<wchar_t>>::__push_back_slow_path<std::__state<wchar_t>>((uint64_t *)&v57, (uint64_t)v50);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(void *)&v50[32])
    {
      *(void *)&v50[40] = *(void *)&v50[32];
      operator delete(*(void **)&v50[32]);
    }
    long long v44 = a4;
    std::__wrap_iter<const wchar_t *>::iterator_type v11 = v58;
    *((_DWORD *)v58 - ++*(void *)(result + 24) = 0;
    *((void *)v11 - 11) = a2;
    *((void *)v11 - 10) = a2;
    *((void *)v11 - 9) = a3;
    std::vector<std::sub_match<char const*>>::resize((std::vector<std::wcsub_match> *)(v11 - 4), *(unsigned int *)(a1 + 28), &__x);
    std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const wchar_t *>> *)((char *)v58 - 40), *(unsigned int *)(a1 + 32));
    unint64_t v46 = a3;
    uint64_t v47 = 0;
    char v12 = 0;
    unsigned int v13 = 0;
    unint64_t v14 = (char *)a3 - (char *)a2;
    uint64_t v15 = a3 - a2;
    unint64_t v16 = v58;
    *((void *)v58 - 2) = v6;
    *((_DWORD *)v16 - 2) = a5;
    unint64_t v17 = v14 >> 2;
    *((unsigned char *)v16 - 4) = a6;
    uint64_t v45 = v15;
    do
    {
      BOOL v18 = (++v13 & 0xFFF) != 0 || (int)(v13 >> 12) < (int)v17;
      if (!v18) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
      }
      uint64_t v20 = v16 - 1;
      uint64_t v19 = *((void *)v16 - 2);
      unint64_t v21 = v16 - 6;
      if (v19) {
        (*(void (**)(uint64_t, _OWORD *))(*(void *)v19 + 16))(v19, v16 - 6);
      }
      switch(*(_DWORD *)v21)
      {
        case 0xFFFFFC18:
          uint64_t v22 = (const __int32 *)*((void *)v16 - 10);
          if ((a5 & 0x20) != 0 && v22 == a2 || (a5 & 0x1000) != 0 && v22 != v46) {
            goto LABEL_19;
          }
          char v29 = v12;
          uint64_t v30 = (uint64_t)v22 - *((void *)v16 - 11);
          uint64_t v31 = v47;
          if ((v29 & (v47 >= v30 >> 2)) == 0)
          {
            long long v32 = *(v16 - 5);
            *(_OWORD *)uint64_t v54 = *(_OWORD *)v21;
            *(_OWORD *)&v54[16] = v32;
            if (v54 != v21)
            {
              std::vector<std::sub_match<char const*>>::__assign_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v54[32], *((long long **)v16 - 8), *((long long **)v16 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v16 - 7) - *((void *)v16 - 8)) >> 3));
              std::vector<std::pair<unsigned long,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(v56, *((uint64_t **)v16 - 5), *((uint64_t **)v16 - 4), (uint64_t)(*((void *)v16 - 4) - *((void *)v16 - 5)) >> 4);
            }
            uint64_t v31 = v30 >> 2;
            uint64_t v33 = (void *)*v20;
            *(void **)((char *)&v56[3] + 5) = *(void **)((char *)v16 - 11);
            v56[3] = v33;
          }
          unsigned int v34 = v58;
          if (v31 == v45)
          {
            uint64_t v35 = (uint64_t)v57;
            while (v34 != (void *)v35)
            {
              v34 -= 12;
              std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)v59, v34);
            }
            long long v58 = (_OWORD *)v35;
            char v12 = 1;
            uint64_t v47 = v45;
          }
          else
          {
            uint64_t v47 = v31;
            BOOL v36 = v58 - 6;
            std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)v59, (void *)v58 - 12);
            long long v58 = v36;
            char v12 = 1;
          }
          break;
        case 0xFFFFFC1D:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          break;
        case 0xFFFFFC1F:
LABEL_19:
          unint64_t v23 = v58 - 6;
          std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)v59, (void *)v58 - 12);
          long long v58 = v23;
          break;
        case 0xFFFFFC20:
          long long v24 = *(v16 - 5);
          *(_OWORD *)uint64_t v50 = *(_OWORD *)v21;
          *(_OWORD *)&v50[16] = v24;
          memset(&v50[32], 0, 24);
          std::vector<std::sub_match<wchar_t const*>>::__init_with_size[abi:ne180100]<std::sub_match<wchar_t const*>*,std::sub_match<wchar_t const*>*>(&v50[32], *((long long **)v16 - 8), *((long long **)v16 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v16 - 7) - *((void *)v16 - 8)) >> 3));
          __p[0] = 0;
          __p[1] = 0;
          v52[0] = 0;
          std::vector<std::pair<unsigned long,wchar_t const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,wchar_t const*>*,std::pair<unsigned long,wchar_t const*>*>((char *)__p, *((long long **)v16 - 5), *((long long **)v16 - 4), (uint64_t)(*((void *)v16 - 4) - *((void *)v16 - 5)) >> 4);
          unint64_t v25 = (void *)*v20;
          *(void *)((char *)&v52[1] + 5) = *(void *)((char *)v16 - 11);
          v52[1] = v25;
          (*(void (**)(void, uint64_t, _OWORD *))(*(void *)*v20 + 24))(*v20, 1, v16 - 6);
          (*(void (**)(void, void, unsigned char *))(*(void *)v52[1] + 24))(v52[1], 0, v50);
          uint64_t v26 = v58;
          if ((unint64_t)v58 >= v59[0])
          {
            long long v58 = (_OWORD *)std::vector<std::__state<wchar_t>>::__push_back_slow_path<std::__state<wchar_t>>((uint64_t *)&v57, (uint64_t)v50);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
          }
          else
          {
            long long v27 = *(_OWORD *)&v50[16];
            *long long v58 = *(_OWORD *)v50;
            v26[1] = v27;
            *((void *)v26 + 4) = 0;
            *((void *)v26 + 5) = 0;
            *((void *)v26 + 6) = 0;
            *((void *)v26 + 7) = 0;
            v26[2] = *(_OWORD *)&v50[32];
            *((void *)v26 + 6) = *(void *)&v50[48];
            memset(&v50[32], 0, 24);
            *((void *)v26 + 8) = 0;
            *((void *)v26 + 9) = 0;
            *(_OWORD *)((char *)v26 + 56) = *(_OWORD *)__p;
            *((void *)v26 + 9) = v52[0];
            __p[0] = 0;
            __p[1] = 0;
            v52[0] = 0;
            uint64_t v28 = v52[1];
            *(void *)((char *)v26 + 85) = *(void *)((char *)&v52[1] + 5);
            *((void *)v26 + 10) = v28;
            long long v58 = v26 + 6;
          }
          if (*(void *)&v50[32])
          {
            *(void *)&v50[40] = *(void *)&v50[32];
            operator delete(*(void **)&v50[32]);
          }
          break;
        default:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
      }
      unint64_t v16 = v58;
    }
    while (v57 != v58);
    if (v12)
    {
      uint64_t v37 = *v44;
      *(void *)uint64_t v37 = a2;
      *(void *)(v37 + 8) = &a2[v47];
      *(unsigned char *)(v37 + 16) = 1;
      if ((void)v55 != *(void *)&v54[32])
      {
        unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v55 - *(void *)&v54[32]) >> 3);
        uint64_t v39 = (unsigned char *)(*(void *)&v54[32] + 16);
        unsigned int v40 = 1;
        do
        {
          uint64_t v41 = v37 + 24 * v40;
          *(_OWORD *)uint64_t v41 = *((_OWORD *)v39 - 1);
          char v42 = *v39;
          v39 += 24;
          *(unsigned char *)(v41 + 16) = v42;
          BOOL v18 = v38 > v40++;
        }
        while (v18);
      }
      uint64_t v6 = 1;
    }
    else
    {
      uint64_t v6 = 0;
    }
  }
  if (v56[0])
  {
    v56[1] = v56[0];
    operator delete(v56[0]);
  }
  if (*(void *)&v54[32])
  {
    *(void *)&long long v55 = *(void *)&v54[32];
    operator delete(*(void **)&v54[32]);
  }
  *(void *)uint64_t v54 = &v57;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)v54);
  return v6;
}

void sub_1B1C009D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  std::__state<char>::~__state(&a19);
  std::__state<char>::~__state(&a35);
  a35 = v35 - 120;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a35);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::__state<wchar_t>>::__push_back_slow_path<std::__state<wchar_t>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x2AAAAAAAAAAAAAALL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x155555555555555) {
    unint64_t v9 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  v16[4] = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char>>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  std::__wrap_iter<const wchar_t *>::iterator_type v11 = &v10[96 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v16[3] = &v10[96 * v9];
  long long v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)std::__wrap_iter<const wchar_t *>::iterator_type v11 = *(_OWORD *)a2;
  *((_OWORD *)v11 + 1) = v12;
  *((void *)v11 + 5) = 0;
  *((void *)v11 + 6) = 0;
  *((void *)v11 + 4) = 0;
  *((_OWORD *)v11 + 2) = *(_OWORD *)(a2 + 32);
  *((void *)v11 + 6) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *((void *)v11 + 7) = 0;
  *((void *)v11 + 8) = 0;
  *((void *)v11 + 9) = 0;
  *(_OWORD *)(v11 + 56) = *(_OWORD *)(a2 + 56);
  *((void *)v11 + 9) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  uint64_t v13 = *(void *)(a2 + 80);
  *(void *)(v11 + 85) = *(void *)(a2 + 85);
  *((void *)v11 + 10) = v13;
  void v16[2] = v11 + 96;
  std::vector<std::__state<wchar_t>>::__swap_out_circular_buffer(a1, v16);
  uint64_t v14 = a1[1];
  std::__split_buffer<std::__state<char>>::~__split_buffer(v16);
  return v14;
}

void sub_1B1C00B9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::__state<char>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::__state<wchar_t>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::__state<wchar_t>>,std::reverse_iterator<std::__state<wchar_t>*>,std::reverse_iterator<std::__state<wchar_t>*>,std::reverse_iterator<std::__state<wchar_t>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::__state<wchar_t>>,std::reverse_iterator<std::__state<wchar_t>*>,std::reverse_iterator<std::__state<wchar_t>*>,std::reverse_iterator<std::__state<wchar_t>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 80);
      *(_OWORD *)(v7 - 96) = *(_OWORD *)(a3 - 96);
      *(_OWORD *)(v7 - 80) = v8;
      *(void *)(v7 - 56) = 0;
      *(void *)(v7 - 48) = 0;
      *(void *)(v7 - 64) = 0;
      *(_OWORD *)(v7 - 64) = *(_OWORD *)(a3 - 64);
      *(void *)(v7 - 48) = *(void *)(a3 - 48);
      *(void *)(a3 - 64) = 0;
      *(void *)(a3 - 56) = 0;
      *(void *)(a3 - 48) = 0;
      *(void *)(v7 - 40) = 0;
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - ++*(void *)(result + 24) = 0;
      *(_OWORD *)(v7 - 40) = *(_OWORD *)(a3 - 40);
      *(void *)(v7 - ++*(void *)(result + 24) = *(void *)(a3 - 24);
      *(void *)(a3 - 40) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(a3 - ++*(void *)(result + 24) = 0;
      uint64_t v9 = *(void *)(a3 - 16);
      *(void *)(v7 - 11) = *(void *)(a3 - 11);
      *(void *)(v7 - 16) = v9;
      uint64_t v7 = *((void *)&v15 + 1) - 96;
      *((void *)&v15 + 1) -= 96;
      a3 -= 96;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::__state<wchar_t>>,std::reverse_iterator<std::__state<wchar_t>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::__state<wchar_t>>,std::reverse_iterator<std::__state<wchar_t>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

char *std::vector<std::sub_match<wchar_t const*>>::__init_with_size[abi:ne180100]<std::sub_match<wchar_t const*>*,std::sub_match<wchar_t const*>*>(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = *((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2;
      *(void *)(v7 + 16) = *((void *)a2 + 2);
      *(_OWORD *)uint64_t v7 = v8;
      v7 += 24;
      a2 = (long long *)((char *)a2 + 24);
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_1B1C00DA8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<unsigned long,wchar_t const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,wchar_t const*>*,std::pair<unsigned long,wchar_t const*>*>(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = (_OWORD *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_1B1C00E1C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::deque<std::__state<wchar_t>>::push_back(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 42 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<std::__state<wchar_t>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x2A)) + 96 * (v7 % 0x2A);
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)unint64_t v8 = *(_OWORD *)a2;
  *(_OWORD *)(v8 + 16) = v9;
  *(void *)(v8 + 40) = 0;
  *(void *)(v8 + 48) = 0;
  *(void *)(v8 + 32) = 0;
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(v8 + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(v8 + 56) = 0;
  *(void *)(v8 + 64) = 0;
  *(void *)(v8 + 72) = 0;
  __n128 result = *(__n128 *)(a2 + 56);
  *(__n128 *)(v8 + 56) = result;
  *(void *)(v8 + 72) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  uint64_t v11 = *(void *)(a2 + 80);
  *(void *)(v8 + 85) = *(void *)(a2 + 85);
  *(void *)(v8 + 80) = v11;
  ++a1[5];
  return result;
}

int64x2_t std::deque<std::__state<wchar_t>>::push_front(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 32);
  if (!v4)
  {
    std::deque<std::__state<wchar_t>>::__add_front_capacity((void **)a1);
    unint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = (void *)(v5 + 8 * (v4 / 0x2A));
  uint64_t v7 = *v6 + 96 * (v4 % 0x2A);
  if (*(void *)(a1 + 16) == v5) {
    uint64_t v7 = 0;
  }
  if (v7 == *v6) {
    uint64_t v7 = *(v6 - 1) + 4032;
  }
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v7 - 96) = *(_OWORD *)a2;
  *(_OWORD *)(v7 - 80) = v8;
  *(void *)(v7 - 56) = 0;
  *(void *)(v7 - 48) = 0;
  *(void *)(v7 - 64) = 0;
  *(_OWORD *)(v7 - 64) = *(_OWORD *)(a2 + 32);
  *(void *)(v7 - 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(v7 - 40) = 0;
  *(void *)(v7 - 32) = 0;
  *(void *)(v7 - ++*(void *)(result + 24) = 0;
  *(_OWORD *)(v7 - 40) = *(_OWORD *)(a2 + 56);
  *(void *)(v7 - ++*(void *)(result + 24) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  uint64_t v9 = *(void *)(a2 + 80);
  *(void *)(v7 - 11) = *(void *)(a2 + 85);
  *(void *)(v7 - 16) = v9;
  int64x2_t result = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_1B255FD00);
  *(int64x2_t *)(a1 + 32) = result;
  return result;
}

void std::deque<std::__state<wchar_t>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x2A;
  unint64_t v4 = v2 - 42;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    long long v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)long long v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      unsigned int v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      unint64_t v38 = (uint64_t *)a1[1];
      long long v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        long long v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    long long v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFC0uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFC0uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    long long v44 = (void *)a1[1];
    long long v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      unsigned int v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      long long v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        long long v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      unint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        long long v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unsigned int v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0xFC0uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  long long v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  char v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1B1C012FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::deque<std::__state<wchar_t>>::__add_front_capacity(void **a1)
{
  unint64_t v2 = a1[1];
  BOOL v3 = a1[2];
  unint64_t v4 = (v3 - v2) >> 3;
  if (v3 == v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = 42 * v4 - 1;
  }
  uint64_t v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(void)a1[5]] < 0x2A)
  {
    uint64_t v7 = (uint64_t)(a1 + 3);
    long long v8 = a1[3];
    uint64_t v9 = *a1;
    uint64_t v10 = v8 - (unsigned char *)*a1;
    if (v4 >= v10 >> 3)
    {
      if (v8 == v9) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = v10 >> 2;
      }
      unint64_t v46 = a1 + 3;
      std::match_results<const wchar_t *> __p = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v7, v11);
      unint64_t v43 = (char *)__p;
      long long v44 = (char *)__p;
      uint64_t v45 = (char *)__p + 8 * v12;
      uint64_t v41 = operator new(0xFC0uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&__p, &v41);
      uint64_t v13 = (char *)a1[1];
      BOOL v14 = v44;
      if (v13 == a1[2])
      {
        unint64_t v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            int64_t v15 = v43 - (unsigned char *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p) {
                unint64_t v23 = 1;
              }
              else {
                unint64_t v23 = (v14 - (unsigned char *)__p) >> 2;
              }
              uint64_t v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v46, v23);
              uint64_t v26 = v43;
              BOOL v14 = &v24[8 * (v23 >> 2)];
              uint64_t v27 = v44 - v43;
              if (v44 != v43)
              {
                BOOL v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v28 = 8 * (v27 >> 3);
                char v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  uint64_t v30 = *(void *)v26;
                  v26 += 8;
                  *(void *)char v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              long long v31 = __p;
              std::match_results<const wchar_t *> __p = v24;
              unint64_t v43 = &v24[8 * (v23 >> 2)];
              long long v44 = v14;
              uint64_t v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                BOOL v14 = v44;
              }
            }
            else
            {
              uint64_t v16 = v15 >> 3;
              BOOL v17 = v15 >> 3 < -1;
              uint64_t v18 = (v15 >> 3) + 2;
              if (v17) {
                uint64_t v19 = v18;
              }
              else {
                uint64_t v19 = v16 + 1;
              }
              int64_t v20 = &v43[-8 * (v19 >> 1)];
              int64_t v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                BOOL v14 = v43;
              }
              unint64_t v22 = &v14[-8 * (v19 >> 1)];
              BOOL v14 = &v20[v21];
              unint64_t v43 = v22;
              long long v44 = &v20[v21];
            }
          }
          uint64_t v32 = *(void *)v13;
          v13 += 8;
          *(void *)BOOL v14 = v32;
          BOOL v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        unint64_t v33 = (char *)a1[1];
      }
      uint64_t v36 = *a1;
      uint64_t v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      std::match_results<const wchar_t *> __p = v36;
      unint64_t v43 = v33;
      unint64_t v38 = (char *)a1[3];
      uint64_t v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      long long v44 = v13;
      uint64_t v45 = v38;
      if (v14 - v37 == 8) {
        uint64_t v40 = 21;
      }
      else {
        uint64_t v40 = (uint64_t)a1[4] + 42;
      }
      a1[4] = (void *)v40;
      if (v13 != v33) {
        long long v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      }
      if (v36) {
        operator delete(v36);
      }
    }
    else
    {
      if (v2 == v9)
      {
        std::match_results<const wchar_t *> __p = operator new(0xFC0uLL);
        std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &__p);
        unsigned int v34 = a1[2];
        std::match_results<const wchar_t *> __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        std::match_results<const wchar_t *> __p = operator new(0xFC0uLL);
      }
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &__p);
      if ((unsigned char *)a1[2] - (unsigned char *)a1[1] == 8) {
        uint64_t v35 = 21;
      }
      else {
        uint64_t v35 = (uint64_t)a1[4] + 42;
      }
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 42;
    std::match_results<const wchar_t *> __p = (void *)*((void *)v3 - 1);
    a1[2] = v3 - 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &__p);
  }
}

void sub_1B1C01618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  operator delete(v12);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::sub_match<std::__wrap_iter<wchar_t const*>>::compare[abi:ne180100](void *a1, void *a2)
{
  std::sub_match<std::__wrap_iter<wchar_t const*>>::str[abi:ne180100](a1, v12);
  std::sub_match<std::__wrap_iter<wchar_t const*>>::str[abi:ne180100](a2, __p);
  if ((v11 & 0x80u) == 0) {
    size_t v3 = v11;
  }
  else {
    size_t v3 = (size_t)__p[1];
  }
  if ((v13 & 0x80u) == 0) {
    size_t v4 = v13;
  }
  else {
    size_t v4 = (size_t)v12[1];
  }
  if (v3 >= v4) {
    size_t v5 = v4;
  }
  else {
    size_t v5 = v3;
  }
  if (!v5
    || ((v13 & 0x80u) == 0 ? (uint64_t v6 = v12) : (uint64_t v6 = (void **)v12[0]),
        (v11 & 0x80u) == 0 ? (uint64_t v7 = __p) : (uint64_t v7 = (void **)__p[0]),
        uint64_t v8 = wmemcmp((const __int32 *)v6, (const __int32 *)v7, v5),
        !v8))
  {
    if (v4 < v3) {
      uint64_t v8 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v8 = v3 < v4;
    }
  }
  if ((char)v11 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v13 < 0) {
    operator delete(v12[0]);
  }
  return v8;
}

void sub_1B1C0173C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::sub_match<std::__wrap_iter<wchar_t const*>>::str[abi:ne180100]@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (*((unsigned char *)result + 16)) {
    return std::basic_string<char32_t>::__init_with_size[abi:ne180100]<char32_t const*,char32_t const*>(a2, (int *)*result, (int *)result[1], (uint64_t)(result[1] - *result) >> 2);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

void std::wstring_convert<std::codecvt_utf8_utf16<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::to_bytes(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, std::string *a4@<X8>)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 184) = 0;
  if (!*(void *)(a1 + 48)) {
    goto LABEL_62;
  }
  uint64_t v7 = a2;
  std::string::basic_string[abi:ne180100](a4, (a3 - a2) >> 1, 0);
  if (a3 == v7)
  {
    long long v23 = *(_OWORD *)(a1 + 136);
    long long v52 = *(_OWORD *)(a1 + 120);
    long long v53 = v23;
    long long v24 = *(_OWORD *)(a1 + 168);
    long long v54 = *(_OWORD *)(a1 + 152);
    long long v55 = v24;
    long long v25 = *(_OWORD *)(a1 + 72);
    long long v48 = *(_OWORD *)(a1 + 56);
    long long v49 = v25;
    long long v26 = *(_OWORD *)(a1 + 104);
    long long v50 = *(_OWORD *)(a1 + 88);
    long long v51 = v26;
  }
  else
  {
    if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v8 = 22;
    }
    else {
      std::string::size_type v8 = (a4->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    }
    std::string::resize(a4, v8, 0);
    long long v9 = *(_OWORD *)(a1 + 136);
    long long v52 = *(_OWORD *)(a1 + 120);
    long long v53 = v9;
    long long v10 = *(_OWORD *)(a1 + 168);
    long long v54 = *(_OWORD *)(a1 + 152);
    long long v55 = v10;
    long long v11 = *(_OWORD *)(a1 + 72);
    long long v48 = *(_OWORD *)(a1 + 56);
    long long v49 = v11;
    __n128 v12 = *(__n128 *)(a1 + 88);
    long long v13 = *(_OWORD *)(a1 + 104);
    std::string::size_type size = HIBYTE(a4->__r_.__value_.__r.__words[2]);
    if ((size & 0x80u) == 0) {
      int64_t v15 = (char *)a4;
    }
    else {
      int64_t v15 = (char *)a4->__r_.__value_.__r.__words[0];
    }
    if ((size & 0x80u) != 0) {
      std::string::size_type size = a4->__r_.__value_.__l.__size_;
    }
    uint64_t v16 = &v15[size];
    long long v50 = *(_OWORD *)(a1 + 88);
    long long v51 = v13;
    while (1)
    {
      int v17 = (*(uint64_t (**)(void, long long *, char *, char *, char **, char *, char *, uint64_t *, __n128))(**(void **)(a1 + 48) + 24))(*(void *)(a1 + 48), &v48, v7, a3, &v47, v15, v16, &v46, v12);
      BOOL v18 = v47 == v7;
      *(void *)(a1 + 184) += (v47 - v7) >> 2;
      if (v18) {
        goto LABEL_60;
      }
      if (v17 != 1) {
        break;
      }
      if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v19 = a4;
      }
      else {
        uint64_t v19 = (std::string *)a4->__r_.__value_.__r.__words[0];
      }
      uint64_t v20 = v46 - (void)v19;
      std::string::resize(a4, 2 * (v46 - (void)v19), 0);
      std::string::size_type v21 = HIBYTE(a4->__r_.__value_.__r.__words[2]);
      if ((v21 & 0x80u) == 0) {
        unint64_t v22 = a4;
      }
      else {
        unint64_t v22 = (std::string *)a4->__r_.__value_.__r.__words[0];
      }
      int64_t v15 = (char *)v22 + v20;
      if ((v21 & 0x80u) != 0) {
        std::string::size_type v21 = a4->__r_.__value_.__l.__size_;
      }
      uint64_t v16 = (char *)v22 + v21;
      uint64_t v7 = v47;
      if (v47 >= a3) {
        goto LABEL_60;
      }
    }
    if (v17)
    {
      if (v17 != 3) {
        goto LABEL_60;
      }
      if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v27 = (char *)a4;
      }
      else {
        uint64_t v27 = (char *)a4->__r_.__value_.__r.__words[0];
      }
      std::string::resize(a4, v15 - v27, 0);
      std::string::append[abi:ne180100]<char const*,0>(a4, v7, a3);
    }
    else
    {
      if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v28 = a4;
      }
      else {
        uint64_t v28 = (std::string *)a4->__r_.__value_.__r.__words[0];
      }
      std::string::resize(a4, v46 - (void)v28, 0);
    }
  }
  std::string::size_type v29 = HIBYTE(a4->__r_.__value_.__r.__words[2]);
  std::string::size_type v30 = a4->__r_.__value_.__l.__size_;
  if ((v29 & 0x80u) == 0) {
    std::string::size_type v31 = 22;
  }
  else {
    std::string::size_type v31 = (a4->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  }
  std::string::resize(a4, v31, 0);
  if ((v29 & 0x80u) == 0) {
    std::string::size_type v32 = v29;
  }
  else {
    std::string::size_type v32 = v30;
  }
  int v33 = SHIBYTE(a4->__r_.__value_.__r.__words[2]);
  BOOL v34 = v33 < 0;
  if (v33 >= 0) {
    uint64_t v35 = a4;
  }
  else {
    uint64_t v35 = (std::string *)a4->__r_.__value_.__r.__words[0];
  }
  uint64_t v36 = (char *)v35 + v32;
  if (v34) {
    std::string::size_type v37 = a4->__r_.__value_.__l.__size_;
  }
  else {
    std::string::size_type v37 = HIBYTE(a4->__r_.__value_.__r.__words[2]);
  }
  for (int i = &v36[v37]; ; int i = (char *)(v43 + v42))
  {
    int v39 = (*(uint64_t (**)(void, long long *, char *, char *, char **))(**(void **)(a1 + 48) + 40))(*(void *)(a1 + 48), &v48, v36, i, &v47);
    if (v39 != 1) {
      break;
    }
    if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v40 = (std::string::size_type)a4;
    }
    else {
      std::string::size_type v40 = a4->__r_.__value_.__r.__words[0];
    }
    uint64_t v41 = &v47[-v40];
    std::string::resize(a4, 2 * (void)&v47[-v40], 0);
    std::string::size_type v42 = HIBYTE(a4->__r_.__value_.__r.__words[2]);
    if ((v42 & 0x80u) == 0) {
      std::string::size_type v43 = (std::string::size_type)a4;
    }
    else {
      std::string::size_type v43 = a4->__r_.__value_.__r.__words[0];
    }
    uint64_t v36 = &v41[v43];
    if ((v42 & 0x80u) != 0) {
      std::string::size_type v42 = a4->__r_.__value_.__l.__size_;
    }
  }
  if (!v39)
  {
    uint64_t v36 = v47;
    goto LABEL_68;
  }
  if (v39 == 3)
  {
LABEL_68:
    if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v45 = (std::string::size_type)a4;
    }
    else {
      std::string::size_type v45 = a4->__r_.__value_.__r.__words[0];
    }
    std::string::resize(a4, (std::string::size_type)&v36[-v45], 0);
    return;
  }
LABEL_60:
  if (SHIBYTE(a4->__r_.__value_.__r.__words[2]) < 0) {
    operator delete(a4->__r_.__value_.__l.__data_);
  }
LABEL_62:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(a1 + 23))
    {
      *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a4->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
      return;
    }
LABEL_73:
    std::__throw_range_error[abi:ne180100]("wstring_convert: to_bytes error");
  }
  std::string::size_type v44 = *(void *)(a1 + 8);
  if (!v44) {
    goto LABEL_73;
  }
  std::string::__init_copy_ctor_external(a4, *(const std::string::value_type **)a1, v44);
}

void sub_1B1C01B44(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::string::append[abi:ne180100]<char const*,0>(std::string *this, char *a2, char *a3)
{
  size_t v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  unint64_t v7 = a3 - a2;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    unint64_t v11 = this->__r_.__value_.__r.__words[2];
    std::string::size_type v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    long long v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    unint64_t v6 = HIBYTE(v11);
  }
  else
  {
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    std::string::size_type v9 = 22;
    long long v10 = this;
  }
  if (v10 > (std::string *)v4 || (char *)&v10->__r_.__value_.__l.__data_ + size + 1 <= v4)
  {
    if (v9 - size < v7)
    {
      std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((unsigned char *)&this->__r_.__value_.__s + 23);
    }
    BOOL v14 = this;
    if ((v6 & 0x80) != 0) {
      BOOL v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    for (int i = (char *)v14 + size; v4 != a3; ++i)
    {
      char v16 = *v4++;
      *int i = v16;
    }
    *int i = 0;
    std::string::size_type v17 = v7 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      this->__r_.__value_.__l.__size_ = v17;
    }
    else {
      *((unsigned char *)&this->__r_.__value_.__s + 23) = v17 & 0x7F;
    }
  }
  else
  {
    std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, v4, a3, v7);
    if ((v20 & 0x80u) == 0) {
      __n128 v12 = __p;
    }
    else {
      __n128 v12 = (void **)__p[0];
    }
    if ((v20 & 0x80u) == 0) {
      std::string::size_type v13 = v20;
    }
    else {
      std::string::size_type v13 = (std::string::size_type)__p[1];
    }
    std::string::append(this, (const std::string::value_type *)v12, v13);
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  return this;
}

void sub_1B1C01CE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::basic_regex[abi:ne180100](std::regex_traits<wchar_t> *a1, const __int32 *a2, int a3)
{
  size_t v5 = std::regex_traits<wchar_t>::regex_traits(a1);
  LODWORD(v5[1].__loc_.__locale_) = a3;
  *(_OWORD *)((char *)&v5[1].__loc_.__locale_ + 4) = 0u;
  *(_OWORD *)((char *)&v5[1].__col_ + 4) = 0u;
  HIDWORD(v5[2].__ct_) = 0;
  wcslen(a2);
  std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse<wchar_t const*>();
}

void sub_1B1C01D74(_Unwind_Exception *a1)
{
  locale = (std::__shared_weak_count *)v1[6].__locale_;
  if (locale) {
    std::__shared_weak_count::__release_shared[abi:ne180100](locale);
  }
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

std::regex_traits<wchar_t> *__cdecl std::regex_traits<wchar_t>::regex_traits(std::regex_traits<wchar_t> *this)
{
  unint64_t v2 = (const std::locale *)MEMORY[0x1B3EA83E0]();
  this->__ct_ = (const std::ctype<wchar_t> *)std::locale::use_facet(v2, MEMORY[0x1E4FBA260]);
  this->__col_ = (const std::collate<wchar_t> *)std::locale::use_facet(&this->__loc_, MEMORY[0x1E4FBA288]);
  return this;
}

void sub_1B1C01DE0(_Unwind_Exception *a1)
{
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse<wchar_t const*>()
{
}

void sub_1B1C01FB4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::shared_ptr<std::__empty_state<wchar_t>>::reset[abi:ne180100]<std::__empty_state<wchar_t>,void>(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<std::__empty_state<wchar_t>>::shared_ptr[abi:ne180100]<std::__empty_state<wchar_t>,void>(&v2, a2);
}

int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_ecma_exp<wchar_t const*>(std::basic_regex<wchar_t> *a1, int *a2, int *a3)
{
  std::vector<std::wcsub_match>::pointer end = a1->__end_;
  unint64_t v7 = a2;
  do
  {
    std::string::size_type v8 = v7;
    unint64_t v7 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_term<wchar_t const*>(a1, v7, a3);
  }
  while (v7 != v8);
  if (v8 == a2) {
    operator new();
  }
  while (v8 != a3)
  {
    if (*v8 != 124) {
      return v8;
    }
    std::string::size_type v9 = a1->__end_;
    long long v10 = v8 + 1;
    unint64_t v11 = v8 + 1;
    do
    {
      std::string::size_type v8 = v11;
      unint64_t v11 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_term<wchar_t const*>(a1, v11, a3);
    }
    while (v11 != v8);
    if (v8 == v10) {
      operator new();
    }
    std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_alternation(a1, end, v9);
  }
  return a3;
}

int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_basic_reg_exp<wchar_t const*>(std::basic_regex<wchar_t> *this, int *a2, int *a3)
{
  size_t v3 = a2;
  if (a2 == a3) {
    return a2;
  }
  size_t v4 = a3;
  if (*a2 == 94)
  {
    std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_l_anchor(this);
    ++v3;
  }
  if (v3 != v4)
  {
    do
    {
      unint64_t v6 = v3;
      size_t v3 = (int *)std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_simple_RE<wchar_t const*>(this, v3, v4);
    }
    while (v3 != v6);
    if (v6 != v4)
    {
      if (v6 + 1 != v4 || *v6 != 36) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      }
      std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_r_anchor(this);
    }
  }
  return v4;
}

std::basic_regex<wchar_t> *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_extended_reg_exp<wchar_t const*>(std::basic_regex<wchar_t> *a1, std::basic_regex<wchar_t> *a2, std::basic_regex<wchar_t> *a3)
{
  size_t v3 = a3;
  std::vector<std::wcsub_match>::pointer end = a1->__end_;
  unint64_t v7 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_ERE_branch<wchar_t const*>(a1, a2, a3);
  if (v7 == (unsigned int *)a2) {
LABEL_9:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  std::string::size_type v8 = v7;
  while (v8 != (unsigned int *)v3)
  {
    if (*v8 != 124) {
      return (std::basic_regex<wchar_t> *)v8;
    }
    std::string::size_type v9 = a1->__end_;
    long long v10 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_ERE_branch<wchar_t const*>(a1, (std::basic_regex<wchar_t> *)(v8 + 1), v3);
    if (v10 == v8 + 1) {
      goto LABEL_9;
    }
    std::string::size_type v8 = v10;
    std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_alternation(a1, end, v9);
  }
  return v3;
}

__int32 *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_grep<wchar_t const*>(std::basic_regex<wchar_t> *a1, __int32 *__s, __int32 *a3)
{
  std::vector<std::wcsub_match>::pointer end = a1->__end_;
  unint64_t v7 = wmemchr(__s, 10, a3 - __s);
  if (v7) {
    std::string::size_type v8 = v7;
  }
  else {
    std::string::size_type v8 = a3;
  }
  if (v8 == __s) {
    operator new();
  }
  std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_basic_reg_exp<wchar_t const*>(a1, __s, v8);
  while (1)
  {
    unint64_t v11 = &v8[v8 != a3];
    if (v11 == a3) {
      break;
    }
    std::string::size_type v9 = wmemchr(v11, 10, a3 - v11);
    if (v9) {
      std::string::size_type v8 = v9;
    }
    else {
      std::string::size_type v8 = a3;
    }
    long long v10 = a1->__end_;
    if (v8 == v11) {
      operator new();
    }
    std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_basic_reg_exp<wchar_t const*>(a1, v11, v8);
    std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_alternation(a1, end, v10);
  }
  return a3;
}

__int32 *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_egrep<wchar_t const*>(std::basic_regex<wchar_t> *a1, __int32 *__s, __int32 *a3)
{
  std::vector<std::wcsub_match>::pointer end = a1->__end_;
  unint64_t v7 = wmemchr(__s, 10, a3 - __s);
  if (v7) {
    std::string::size_type v8 = v7;
  }
  else {
    std::string::size_type v8 = a3;
  }
  if (v8 == __s) {
    operator new();
  }
  std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_extended_reg_exp<wchar_t const*>(a1, (std::basic_regex<wchar_t> *)__s, (std::basic_regex<wchar_t> *)v8);
  while (1)
  {
    unint64_t v11 = &v8[v8 != a3];
    if (v11 == a3) {
      break;
    }
    std::string::size_type v9 = wmemchr(v11, 10, a3 - v11);
    if (v9) {
      std::string::size_type v8 = v9;
    }
    else {
      std::string::size_type v8 = a3;
    }
    long long v10 = a1->__end_;
    if (v8 == v11) {
      operator new();
    }
    std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_extended_reg_exp<wchar_t const*>(a1, (std::basic_regex<wchar_t> *)v11, (std::basic_regex<wchar_t> *)v8);
    std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_alternation(a1, end, v10);
  }
  return a3;
}

void std::__end_state<wchar_t>::~__end_state()
{
}

void std::__end_state<wchar_t>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

void std::shared_ptr<std::__empty_state<wchar_t>>::shared_ptr[abi:ne180100]<std::__empty_state<wchar_t>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1B1C02660(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<std::__empty_state<wchar_t>>::shared_ptr[abi:ne180100]<std::__empty_state<wchar_t>,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<std::__empty_state<wchar_t> *,std::shared_ptr<std::__empty_state<wchar_t>>::__shared_ptr_default_delete<std::__empty_state<wchar_t>,std::__empty_state<wchar_t>>,std::allocator<std::__empty_state<wchar_t>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<wchar_t> *,std::shared_ptr<std::__empty_state<wchar_t>>::__shared_ptr_default_delete<std::__empty_state<wchar_t>,std::__empty_state<wchar_t>>,std::allocator<std::__empty_state<wchar_t>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<wchar_t> *,std::shared_ptr<std::__empty_state<wchar_t>>::__shared_ptr_default_delete<std::__empty_state<wchar_t>,std::__empty_state<wchar_t>>,std::allocator<std::__empty_state<wchar_t>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void (__cdecl ***std::__empty_state<wchar_t>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<wchar_t> *__hidden this)))(std::__owns_one_state<wchar_t> *__hidden this)
{
  long long v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<wchar_t> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__empty_state<wchar_t>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<wchar_t> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<wchar_t> *__hidden)))*v1 + 1))(v1);
  }
  JUMPOUT(0x1B3EA8670);
}

void std::__empty_state<wchar_t>::__exec(const std::__empty_state<wchar_t> *this, std::__empty_state<wchar_t>::__state *a2)
{
  a2->__do_ = -994;
  a2->__node_ = this->__first_;
}

void std::__owns_one_state<wchar_t>::~__owns_one_state(std::__owns_one_state<wchar_t> *this)
{
  std::__split_buffer<std::wstring>::pointer first = this->__first_;
  if (first) {
    ((void (*)(std::__node<wchar_t> *))first->~__node_0)(first);
  }
}

{
  std::__node<wchar_t> *first;
  uint64_t vars8;

  std::__split_buffer<std::wstring>::pointer first = this->__first_;
  if (first) {
    ((void (*)(std::__node<wchar_t> *))first->~__node_0)(first);
  }
  JUMPOUT(0x1B3EA8670);
}

void std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_alternation(std::basic_regex<wchar_t> *this, std::__owns_one_state<wchar_t> *__sa, std::__owns_one_state<wchar_t> *__sb)
{
}

int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_term<wchar_t const*>(std::basic_regex<wchar_t> *a1, int *a2, int *a3)
{
  uint64_t result = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_assertion<wchar_t const*>(a1, a2, a3);
  if (result == a2)
  {
    std::vector<std::wcsub_match>::pointer end = a1->__end_;
    unsigned int marked_count = a1->__marked_count_;
    std::string::size_type v9 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_atom<wchar_t const*>(a1, a2, a3);
    uint64_t result = a2;
    if (v9 != a2)
    {
      size_t v10 = a1->__marked_count_ + 1;
      return (int *)std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_ERE_dupl_symbol<wchar_t const*>((uint64_t)a1, v9, (unsigned int *)a3, end, marked_count + 1, v10);
    }
  }
  return result;
}

int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_assertion<wchar_t const*>(std::basic_regex<wchar_t> *this, int *a2, int *a3)
{
  size_t v3 = a2;
  if (a2 == a3) {
    return v3;
  }
  int v6 = *a2;
  if (*a2 <= 91)
  {
    if (v6 != 36)
    {
      BOOL v8 = v6 == 40;
      unint64_t v7 = a2 + 1;
      BOOL v8 = !v8 || v7 == a3;
      if (!v8)
      {
        BOOL v8 = *v7 == 63;
        std::string::size_type v9 = a2 + 2;
        if (v8 && v9 != a3)
        {
          int v11 = *v9;
          if (v11 == 33)
          {
            std::regex_traits<wchar_t>::regex_traits(&v18.__traits_);
            memset(&v18.__flags_, 0, 40);
            v18.__flags_ = this->__flags_;
            __n128 v12 = (int *)std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse<wchar_t const*>(&v18, v3 + 3, a3);
            unsigned int marked_count = v18.__marked_count_;
            std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_lookahead(this, &v18, 1, this->__marked_count_);
            this->__marked_count_ += marked_count;
            if (v12 == a3 || *v12 != 41) {
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
            }
            goto LABEL_31;
          }
          if (v11 == 61)
          {
            std::regex_traits<wchar_t>::regex_traits(&v18.__traits_);
            memset(&v18.__flags_, 0, 40);
            v18.__flags_ = this->__flags_;
            __n128 v12 = (int *)std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse<wchar_t const*>(&v18, v3 + 3, a3);
            unsigned int v13 = v18.__marked_count_;
            std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_lookahead(this, &v18, 0, this->__marked_count_);
            this->__marked_count_ += v13;
            if (v12 == a3 || *v12 != 41) {
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
            }
LABEL_31:
            size_t v3 = v12 + 1;
            std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&v18.__traits_.__loc_);
            return v3;
          }
        }
      }
      return v3;
    }
    std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_r_anchor(this);
    return ++v3;
  }
  if (v6 != 92)
  {
    if (v6 != 94) {
      return v3;
    }
    std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_l_anchor(this);
    return ++v3;
  }
  if (a2 + 1 != a3)
  {
    int v15 = a2[1];
    if (v15 == 66)
    {
      BOOL v16 = 1;
    }
    else
    {
      if (v15 != 98) {
        return v3;
      }
      BOOL v16 = 0;
    }
    std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_word_boundary(this, v16);
    v3 += 2;
  }
  return v3;
}

void sub_1B1C02CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

std::basic_regex<wchar_t>::value_type *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_atom<wchar_t const*>(std::basic_regex<wchar_t> *this, int *a2, int *a3)
{
  size_t v3 = a2;
  if (a2 == a3) {
    return v3;
  }
  int v6 = *a2;
  if (*a2 <= 62)
  {
    if (v6 != 40)
    {
      if (v6 == 46) {
        operator new();
      }
      if ((v6 - 42) >= 2) {
        goto LABEL_28;
      }
LABEL_34:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
    }
    if (a2 + 1 != a3)
    {
      if (a2 + 2 != a3 && a2[1] == 63 && a2[2] == 58)
      {
        p_open_count = &this->__open_count_;
        ++this->__open_count_;
        std::string::size_type v9 = (int *)std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_ecma_exp<wchar_t const*>(this, a2 + 3, a3);
        if (v9 == a3) {
          goto LABEL_35;
        }
        size_t v10 = v9;
        if (*v9 != 41) {
          goto LABEL_35;
        }
        goto LABEL_25;
      }
      std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_begin_marked_subexpression(this);
      unsigned int marked_count = this->__marked_count_;
      p_open_count = &this->__open_count_;
      ++this->__open_count_;
      __n128 v12 = (int *)std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_ecma_exp<wchar_t const*>(this, v3 + 1, a3);
      if (v12 != a3)
      {
        size_t v10 = v12;
        if (*v12 == 41)
        {
          std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_end_marked_subexpression(this, marked_count);
LABEL_25:
          --*p_open_count;
          return v10 + 1;
        }
      }
    }
LABEL_35:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
  }
  if (v6 <= 91)
  {
    if (v6 == 91)
    {
      return std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_bracket_expression<wchar_t const*>((uint64_t)this, a2, a3);
    }
    if (v6 == 63) {
      goto LABEL_34;
    }
LABEL_28:
    return std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_pattern_character<wchar_t const*>(this, a2, a3);
  }
  if (v6 != 92)
  {
    if (v6 == 123) {
      goto LABEL_34;
    }
    goto LABEL_28;
  }
  return std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_atom_escape<wchar_t const*>(this, a2, a3);
}

unsigned int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_ERE_dupl_symbol<wchar_t const*>(uint64_t a1, int *a2, unsigned int *a3, std::__owns_one_state<wchar_t> *__s, size_t a5, size_t a6)
{
  if (a2 == (int *)a3) {
    return (unsigned int *)a2;
  }
  unsigned int v6 = a6;
  unsigned int v7 = a5;
  uint64_t v10 = a1;
  int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  int v12 = *a2;
  if (*a2 > 62)
  {
    if (v12 == 63)
    {
      unsigned int v13 = (unsigned int *)(a2 + 1);
      if (v11) {
        BOOL v19 = 1;
      }
      else {
        BOOL v19 = v13 == a3;
      }
      if (!v19 && *v13 == 63)
      {
        unsigned int v13 = (unsigned int *)(a2 + 2);
        a5 = a5;
        a6 = a6;
        size_t v14 = 0;
        size_t v17 = 1;
        goto LABEL_33;
      }
      a5 = a5;
      a6 = a6;
      size_t v14 = 0;
      size_t v17 = 1;
      goto LABEL_45;
    }
    if (v12 != 123) {
      return (unsigned int *)a2;
    }
    int v15 = (unsigned int *)(a2 + 1);
    BOOL v16 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_DUP_COUNT<wchar_t const*>(a1, (unsigned int *)a2 + 1, a3, (int *)&__max);
    if (v16 != v15)
    {
      if (v16 != a3)
      {
        if (*v16 != 44)
        {
          if (*v16 == 125)
          {
            unsigned int v13 = v16 + 1;
            if (!v11 && v13 != a3 && *v13 == 63)
            {
              unsigned int v13 = v16 + 2;
              size_t v14 = (int)__max;
              a5 = v7;
              a6 = v6;
              a1 = v10;
              size_t v17 = (int)__max;
LABEL_33:
              unsigned __int8 v20 = __s;
              BOOL v21 = 0;
LABEL_46:
              std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_loop((std::basic_regex<wchar_t> *)a1, v14, v17, v20, a5, a6, v21);
              return v13;
            }
            size_t v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            size_t v17 = (int)__max;
LABEL_45:
            unsigned __int8 v20 = __s;
            BOOL v21 = 1;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
        unint64_t v22 = v16 + 1;
        if (v16 + 1 == a3) {
          goto LABEL_58;
        }
        if (*v22 == 125)
        {
          unsigned int v13 = v16 + 2;
          if (!v11 && v13 != a3 && *v13 == 63)
          {
            unsigned int v13 = v16 + 3;
            size_t v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            goto LABEL_26;
          }
          size_t v14 = (int)__max;
          a5 = v7;
          a6 = v6;
          a1 = v10;
LABEL_36:
          size_t v17 = -1;
          goto LABEL_45;
        }
        int v26 = -1;
        long long v24 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_DUP_COUNT<wchar_t const*>(v10, v22, a3, &v26);
        if (v24 != v22 && v24 != a3 && *v24 == 125)
        {
          size_t v17 = v26;
          size_t v14 = (int)__max;
          if (v26 >= (int)__max)
          {
            unsigned int v13 = v24 + 1;
            BOOL v21 = 1;
            if (!v11 && v13 != a3)
            {
              unsigned int v25 = v24[1];
              BOOL v21 = v25 != 63;
              if (v25 == 63) {
                unsigned int v13 = v24 + 2;
              }
            }
            a5 = v7;
            a6 = v6;
            a1 = v10;
            unsigned __int8 v20 = __s;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
LABEL_58:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  if (v12 == 42)
  {
    unsigned int v13 = (unsigned int *)(a2 + 1);
    if (v11) {
      BOOL v18 = 1;
    }
    else {
      BOOL v18 = v13 == a3;
    }
    if (!v18 && *v13 == 63)
    {
      unsigned int v13 = (unsigned int *)(a2 + 2);
      a5 = a5;
      a6 = a6;
      size_t v14 = 0;
      goto LABEL_26;
    }
    a5 = a5;
    a6 = a6;
    size_t v14 = 0;
    goto LABEL_36;
  }
  if (v12 == 43)
  {
    unsigned int v13 = (unsigned int *)(a2 + 1);
    if (!v11 && v13 != a3 && *v13 == 63)
    {
      unsigned int v13 = (unsigned int *)(a2 + 2);
      a5 = a5;
      a6 = a6;
      size_t v14 = 1;
LABEL_26:
      size_t v17 = -1;
      goto LABEL_33;
    }
    a5 = a5;
    a6 = a6;
    size_t v14 = 1;
    goto LABEL_36;
  }
  return (unsigned int *)a2;
}

void std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_l_anchor(std::basic_regex<wchar_t> *this)
{
}

void std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_r_anchor(std::basic_regex<wchar_t> *this)
{
}

void std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_word_boundary(std::basic_regex<wchar_t> *this, BOOL a2)
{
}

void std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_lookahead(std::basic_regex<wchar_t> *this, const std::basic_regex<wchar_t> *a2, BOOL a3, unsigned int a4)
{
}

void sub_1B1C03458(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C4030FC3181);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__l_anchor_multiline<wchar_t>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<wchar_t> *__hidden this)))(std::__owns_one_state<wchar_t> *__hidden this)
{
  long long v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<wchar_t> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__l_anchor_multiline<wchar_t>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<wchar_t> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<wchar_t> *__hidden)))*v1 + 1))(v1);
  }
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__l_anchor_multiline<wchar_t>::__exec(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 92))
  {
    if (*(void *)(a2 + 16) != *(void *)(a2 + 8) || (*(unsigned char *)(a2 + 88) & 1) != 0)
    {
LABEL_12:
      uint64_t v4 = 0;
      *(_DWORD *)a2 = -993;
      goto LABEL_13;
    }
  }
  else
  {
    if (!*(unsigned char *)(result + 16)) {
      goto LABEL_12;
    }
    int v2 = *(_DWORD *)(*(void *)(a2 + 16) - 4);
    if (v2 != 13 && v2 != 10) {
      goto LABEL_12;
    }
  }
  *(_DWORD *)a2 = -994;
  uint64_t v4 = *(void *)(result + 8);
LABEL_13:
  *(void *)(a2 + 80) = v4;
  return result;
}

void (__cdecl ***std::__r_anchor_multiline<wchar_t>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<wchar_t> *__hidden this)))(std::__owns_one_state<wchar_t> *__hidden this)
{
  int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<wchar_t> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__r_anchor_multiline<wchar_t>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<wchar_t> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<wchar_t> *__hidden)))*v1 + 1))(v1);
  }
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__r_anchor_multiline<wchar_t>::__exec(uint64_t result, uint64_t a2)
{
  int v2 = *(int **)(a2 + 16);
  if (v2 == *(int **)(a2 + 24) && (*(unsigned char *)(a2 + 88) & 2) == 0
    || *(unsigned char *)(result + 16) && ((v3 = *v2, v3 != 13) ? (BOOL v4 = v3 == 10) : (BOOL v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    uint64_t v5 = *(void *)(result + 8);
  }
  else
  {
    uint64_t v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(void *)(a2 + 80) = v5;
  return result;
}

std::locale *std::__word_boundary<wchar_t,std::regex_traits<wchar_t>>::~__word_boundary(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F0A5D788;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__word_boundary<wchar_t,std::regex_traits<wchar_t>>::~__word_boundary(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F0A5D788;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__word_boundary<wchar_t,std::regex_traits<wchar_t>>::__exec(uint64_t a1, uint64_t a2)
{
  BOOL v4 = *(unsigned int **)(a2 + 8);
  uint64_t v5 = *(unsigned int **)(a2 + 24);
  if (v4 == v5)
  {
LABEL_13:
    uint64_t result = 0;
    goto LABEL_19;
  }
  unsigned int v6 = *(unsigned int **)(a2 + 16);
  if (v6 == v5)
  {
    if ((*(unsigned char *)(a2 + 88) & 8) == 0)
    {
      unsigned int v8 = *(v5 - 1);
LABEL_11:
      if (v8 == 95) {
        uint64_t result = 1;
      }
      else {
        uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 24))(*(void *)(a1 + 24), 1280);
      }
      goto LABEL_19;
    }
    goto LABEL_13;
  }
  if (v6 == v4)
  {
    int v7 = *(_DWORD *)(a2 + 88);
    if ((v7 & 0x80) == 0)
    {
      if ((v7 & 4) == 0)
      {
        unsigned int v8 = *v4;
        goto LABEL_11;
      }
      goto LABEL_13;
    }
  }
  uint64_t v9 = *v6;
  if (*(v6 - 1) == 95) {
    int v10 = 1;
  }
  else {
    int v10 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 24))(*(void *)(a1 + 24), 1280);
  }
  if (v9 == 95) {
    int v12 = 1;
  }
  else {
    int v12 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 24))(*(void *)(a1 + 24), 1280, v9);
  }
  uint64_t result = v10 != v12;
LABEL_19:
  if (*(unsigned __int8 *)(a1 + 40) == result)
  {
    uint64_t v13 = 0;
    int v14 = -993;
  }
  else
  {
    uint64_t v13 = *(void *)(a1 + 8);
    int v14 = -994;
  }
  *(_DWORD *)a2 = v14;
  *(void *)(a2 + 80) = v13;
  return result;
}

uint64_t std::__lookahead<wchar_t,std::regex_traits<wchar_t>>::__lookahead[abi:ne180100](uint64_t a1, uint64_t a2, char a3, uint64_t a4, int a5)
{
  *(void *)a1 = &unk_1F0A5D4A0;
  *(void *)(a1 + 8) = a4;
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + ++*(void *)(result + 24) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 40);
  *(void *)(a1 + 64) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 72) = *(void *)(a2 + 56);
  *(_DWORD *)(a1 + 80) = a5;
  *(unsigned char *)(a1 + 84) = a3;
  return a1;
}

void (__cdecl ***std::__lookahead<wchar_t,std::regex_traits<wchar_t>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<wchar_t> *__hidden this)))(std::__owns_one_state<wchar_t> *__hidden this)
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<wchar_t> *__hidden))&unk_1F0A5D4A0;
  int v2 = (std::locale *)(a1 + 2);
  int v3 = (std::__shared_weak_count *)a1[8];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::locale::~locale(v2);
  BOOL v4 = a1[1];
  if (v4) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<wchar_t> *__hidden)))*v4 + 1))(v4);
  }
  return a1;
}

void std::__lookahead<wchar_t,std::regex_traits<wchar_t>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<wchar_t> *__hidden this))
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<wchar_t> *__hidden))&unk_1F0A5D4A0;
  int v2 = (std::locale *)(a1 + 2);
  int v3 = (std::__shared_weak_count *)a1[8];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::locale::~locale(v2);
  BOOL v4 = a1[1];
  if (v4) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<wchar_t> *__hidden)))*v4 + 1))(v4);
  }
  JUMPOUT(0x1B3EA8670);
}

void std::__lookahead<wchar_t,std::regex_traits<wchar_t>>::__exec(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  char v21 = 0;
  memset(&v22, 0, 17);
  char v23 = 0;
  uint64_t v24 = 0;
  memset(&__p, 0, sizeof(__p));
  std::vector<std::wcsub_match>::size_type v4 = (*(_DWORD *)(a1 + 44) + 1);
  uint64_t v5 = *(void *)(a2 + 16);
  v18.std::__split_buffer<std::wstring>::pointer first = *(const __int32 **)(a2 + 24);
  v18.second = v18.first;
  v18.matched = 0;
  std::vector<std::sub_match<char const*>>::assign(&__p, v4, &v18);
  uint64_t v19 = v5;
  uint64_t v20 = v5;
  char v21 = 0;
  std::vector<std::wcsub_match>::value_type v22 = v18;
  uint64_t v24 = v5;
  char v23 = 1;
  unsigned int v6 = *(const __int32 **)(a2 + 16);
  if (*(unsigned char *)(a2 + 92)) {
    BOOL v7 = v6 == *(const __int32 **)(a2 + 8);
  }
  else {
    BOOL v7 = 0;
  }
  char v8 = v7;
  if (*(unsigned __int8 *)(a1 + 84) == std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__match_at_start_ecma<std::allocator<std::sub_match<wchar_t const*>>>(a1 + 16, v6, *(const __int32 **)(a2 + 24), (uint64_t *)&__p, *(_DWORD *)(a2 + 88) & 0xFBF | 0x40u, v8))
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
    std::vector<std::wcsub_match>::pointer begin = __p.__begin_;
    goto LABEL_13;
  }
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = *(void *)(a1 + 8);
  std::vector<std::wcsub_match>::pointer begin = __p.__begin_;
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
  if (v10 < 2)
  {
LABEL_13:
    if (!begin) {
      return;
    }
    goto LABEL_14;
  }
  int v11 = 0;
  int v12 = *(_DWORD *)(a1 + 80);
  uint64_t v13 = *(void *)(a2 + 32);
  unint64_t v14 = 1;
  do
  {
    int v15 = &begin[v14];
    uint64_t v16 = v13 + 24 * (v12 + v11);
    *(std::pair<const wchar_t *, const wchar_t *> *)uint64_t v16 = v15->std::pair<const wchar_t *, const wchar_t *>;
    *(unsigned char *)(v16 + 16) = v15->matched;
    unint64_t v14 = (v11 + 2);
    ++v11;
  }
  while (v10 > v14);
LABEL_14:
  __p.__end_ = begin;
  operator delete(begin);
}

void sub_1B1C03D1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_atom_escape<wchar_t const*>(std::basic_regex<wchar_t> *a1, int *a2, int *a3)
{
  if (a2 == a3 || *a2 != 92) {
    return a2;
  }
  uint64_t v5 = a2 + 1;
  if (a2 + 1 == a3) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  }
  uint64_t result = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_decimal_escape<wchar_t const*>(a1, a2 + 1, a3);
  if (result == v5)
  {
    uint64_t result = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_character_class_escape<wchar_t const*>(a1, a2 + 1, a3);
    if (result == v5)
    {
      uint64_t result = (int *)std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_character_escape<wchar_t const*>(a1, a2 + 1, a3, 0);
      if (result == v5) {
        return a2;
      }
    }
  }
  return result;
}

int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_bracket_expression<wchar_t const*>(uint64_t a1, int *a2, int *a3)
{
  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3) {
      goto LABEL_20;
    }
    uint64_t v5 = a2[1] == 94 ? a2 + 2 : a2 + 1;
    started = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__start_matching_list((std::basic_regex<wchar_t> *)a1, a2[1] == 94);
    if (v5 == a3) {
      goto LABEL_20;
    }
    BOOL v7 = (uint64_t *)started;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *v5 == 93)
    {
      std::__bracket_expression<wchar_t,std::regex_traits<wchar_t>>::__add_char[abi:ne180100]((uint64_t)started, 93);
      ++v5;
    }
    if (v5 == a3) {
      goto LABEL_20;
    }
    do
    {
      char v8 = v5;
      uint64_t v5 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_expression_term<wchar_t const*>(a1, v5, a3, v7);
    }
    while (v5 != v8);
    if (v8 == a3) {
      goto LABEL_20;
    }
    if (*v8 == 45)
    {
      std::__bracket_expression<wchar_t,std::regex_traits<wchar_t>>::__add_char[abi:ne180100]((uint64_t)v7, 45);
      ++v8;
    }
    if (v8 == a3 || *v8 != 93) {
LABEL_20:
    }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
    return v8 + 1;
  }
  return a2;
}

void std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_begin_marked_subexpression(std::basic_regex<wchar_t> *this)
{
  if ((this->__flags_ & 2) == 0) {
    operator new();
  }
}

void std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_end_marked_subexpression(std::basic_regex<wchar_t> *this, unsigned int a2)
{
  if ((this->__flags_ & 2) == 0) {
    operator new();
  }
}

std::basic_regex<wchar_t>::value_type *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_pattern_character<wchar_t const*>(std::basic_regex<wchar_t> *a1, std::basic_regex<wchar_t>::value_type *a2, std::basic_regex<wchar_t>::value_type *a3)
{
  int v3 = a2;
  if (a2 != a3)
  {
    std::basic_regex<wchar_t>::value_type v4 = *a2;
    BOOL v5 = (v4 - 36) > 0x3A || ((1 << (v4 - 36)) & 0x7800000080004F1) == 0;
    if (v5 && (v4 - 123) >= 3)
    {
      std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_char(a1, v4);
      ++v3;
    }
  }
  return v3;
}

void (__cdecl ***std::__match_any_but_newline<wchar_t>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<wchar_t> *__hidden this)))(std::__owns_one_state<wchar_t> *__hidden this)
{
  int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<wchar_t> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__match_any_but_newline<wchar_t>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<wchar_t> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<wchar_t> *__hidden)))*v1 + 1))(v1);
  }
  JUMPOUT(0x1B3EA8670);
}

int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_decimal_escape<wchar_t const*>(std::basic_regex<wchar_t> *a1, int *a2, int *a3)
{
  if (a2 == a3) {
    return a2;
  }
  int v4 = *a2;
  unsigned __int32 v5 = *a2 - 48;
  if (v4 == 48)
  {
    std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_char(a1, v5);
    return a2 + 1;
  }
  if ((v4 - 49) > 8) {
    return a2;
  }
  unsigned int v6 = a3;
  BOOL v7 = a2 + 1;
  if (a2 + 1 != a3)
  {
    while (1)
    {
      int v8 = *v7;
      if ((*v7 - 48) > 9) {
        break;
      }
      if (v5 >= 0x19999999) {
        goto LABEL_16;
      }
      ++v7;
      unsigned __int32 v5 = v8 + 10 * v5 - 48;
      if (v7 == a3) {
        goto LABEL_12;
      }
    }
    unsigned int v6 = v7;
LABEL_12:
    if (!v5) {
      goto LABEL_16;
    }
  }
  if (v5 > a1->__marked_count_) {
LABEL_16:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_back_ref(a1, v5);
  return v6;
}

int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_character_class_escape<wchar_t const*>(std::basic_regex<wchar_t> *a1, int *a2, int *a3)
{
  int v3 = a2;
  if (a2 == a3) {
    return v3;
  }
  int v4 = *a2;
  if (*a2 > 99)
  {
    if (v4 == 119)
    {
      BOOL v5 = 0;
      goto LABEL_15;
    }
    if (v4 == 115)
    {
      BOOL v9 = 0;
      goto LABEL_17;
    }
    if (v4 != 100) {
      return v3;
    }
    BOOL v6 = 0;
LABEL_12:
    started = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__start_matching_list(a1, v6);
    int v8 = started->__mask_ | 0x400;
LABEL_18:
    started->__mask_ = v8;
    goto LABEL_19;
  }
  switch(v4)
  {
    case 'D':
      BOOL v6 = 1;
      goto LABEL_12;
    case 'S':
      BOOL v9 = 1;
LABEL_17:
      started = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__start_matching_list(a1, v9);
      int v8 = started->__mask_ | 0x4000;
      goto LABEL_18;
    case 'W':
      BOOL v5 = 1;
LABEL_15:
      unint64_t v10 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__start_matching_list(a1, v5);
      v10->__mask_ |= 0x500u;
      std::__bracket_expression<wchar_t,std::regex_traits<wchar_t>>::__add_char[abi:ne180100]((uint64_t)v10, 95);
LABEL_19:
      ++v3;
      break;
  }
  return v3;
}

unsigned int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_character_escape<wchar_t const*>(std::basic_regex<wchar_t> *this, int *a2, int *a3, std::wstring *a4)
{
  int v4 = a2;
  if (a2 == a3) {
    return (unsigned int *)v4;
  }
  BOOL v7 = this;
  int v8 = *a2;
  if (*a2 > 101)
  {
    int v9 = 0;
    switch(v8)
    {
      case 'n':
        if (a4)
        {
          unint64_t v10 = a4;
          std::wstring::value_type v11 = 10;
          goto LABEL_50;
        }
        std::wstring::value_type v11 = 10;
        goto LABEL_62;
      case 'o':
      case 'p':
      case 'q':
      case 's':
      case 'w':
        goto LABEL_47;
      case 'r':
        if (a4)
        {
          unint64_t v10 = a4;
          std::wstring::value_type v11 = 13;
          goto LABEL_50;
        }
        std::wstring::value_type v11 = 13;
        goto LABEL_62;
      case 't':
        if (a4)
        {
          unint64_t v10 = a4;
          std::wstring::value_type v11 = 9;
          goto LABEL_50;
        }
        std::wstring::value_type v11 = 9;
        goto LABEL_62;
      case 'u':
        if (a2 + 1 == a3) {
          goto LABEL_65;
        }
        int v13 = ((uint64_t (*)(const std::ctype<wchar_t> *, void, void))this->__traits_.__ct_->do_narrow)(this->__traits_.__ct_, a2[1], 0);
        unsigned __int8 v14 = v13;
        int v15 = -48;
        if ((v13 & 0xFFFFFFF8) == 0x30 || (v13 & 0xFFFFFFFE) == 0x38) {
          goto LABEL_26;
        }
        unsigned __int8 v14 = v13 | 0x20;
        if (((v13 | 0x20) - 97) >= 6u) {
          goto LABEL_65;
        }
        int v15 = -87;
LABEL_26:
        v4 += 2;
        if (v4 == a3) {
          goto LABEL_65;
        }
        int v16 = ((uint64_t (*)(const std::ctype<wchar_t> *, void, void))v7->__traits_.__ct_->do_narrow)(v7->__traits_.__ct_, *v4, 0);
        int v17 = -48;
        if ((v16 & 0xFFFFFFF8) == 0x30 || (v16 & 0xFFFFFFFE) == 0x38) {
          goto LABEL_31;
        }
        LOBYTE(v16) = v16 | 0x20;
        if ((v16 - 97) >= 6u) {
          goto LABEL_65;
        }
        int v17 = -87;
LABEL_31:
        int v9 = ((v15 + v14) << 8) + 16 * (v17 + v16);
LABEL_32:
        if (v4 + 1 == a3) {
          goto LABEL_65;
        }
        int v18 = ((uint64_t (*)(const std::ctype<wchar_t> *, void, void))v7->__traits_.__ct_->do_narrow)(v7->__traits_.__ct_, v4[1], 0);
        unsigned __int8 v19 = v18;
        int v20 = -48;
        if ((v18 & 0xFFFFFFF8) == 0x30 || (v18 & 0xFFFFFFFE) == 0x38) {
          goto LABEL_37;
        }
        unsigned __int8 v19 = v18 | 0x20;
        if (((v18 | 0x20) - 97) >= 6u) {
          goto LABEL_65;
        }
        int v20 = -87;
LABEL_37:
        if (v4 + 2 == a3) {
          goto LABEL_65;
        }
        int v21 = ((uint64_t (*)(const std::ctype<wchar_t> *, void, void))v7->__traits_.__ct_->do_narrow)(v7->__traits_.__ct_, v4[2], 0);
        int v22 = -48;
        if ((v21 & 0xFFFFFFF8) == 0x30 || (v21 & 0xFFFFFFFE) == 0x38) {
          goto LABEL_42;
        }
        LOBYTE(v21) = v21 | 0x20;
        if ((v21 - 97) >= 6u) {
          goto LABEL_65;
        }
        int v22 = -87;
LABEL_42:
        std::wstring::value_type v23 = v22 + v21 + 16 * (v20 + v19 + v9);
        if (a4) {
          std::wstring::operator=(a4, v23);
        }
        else {
          std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_char(v7, v23);
        }
        v4 += 3;
        return (unsigned int *)v4;
      case 'v':
        if (a4)
        {
          unint64_t v10 = a4;
          std::wstring::value_type v11 = 11;
          goto LABEL_50;
        }
        std::wstring::value_type v11 = 11;
        goto LABEL_62;
      case 'x':
        goto LABEL_32;
      default:
        if (v8 != 102) {
          goto LABEL_47;
        }
        if (a4)
        {
          unint64_t v10 = a4;
          std::wstring::value_type v11 = 12;
          goto LABEL_50;
        }
        std::wstring::value_type v11 = 12;
        break;
    }
    goto LABEL_62;
  }
  if (v8 == 48)
  {
    if (a4)
    {
      unint64_t v10 = a4;
      std::wstring::value_type v11 = 0;
LABEL_50:
      std::wstring::operator=(v10, v11);
      return (unsigned int *)++v4;
    }
    std::wstring::value_type v11 = 0;
LABEL_62:
    std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_char(this, v11);
    return (unsigned int *)++v4;
  }
  if (v8 != 99)
  {
    if (v8 == 95) {
      goto LABEL_65;
    }
LABEL_47:
    if (((uint64_t (*)(const std::ctype<wchar_t> *, uint64_t))this->__traits_.__ct_->do_is)(this->__traits_.__ct_, 1280))LABEL_65:std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>(); {
    std::wstring::value_type v11 = *v4;
    }
    if (a4)
    {
      unint64_t v10 = a4;
      goto LABEL_50;
    }
    this = v7;
    goto LABEL_62;
  }
  if (a2 + 1 == a3 || (a2[1] & 0xFFFFFFDF) - 65 > 0x19) {
    goto LABEL_65;
  }
  std::wstring::value_type v12 = a2[1] & 0x1F;
  if (a4) {
    std::wstring::operator=(a4, v12);
  }
  else {
    std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_char(this, v12);
  }
  v4 += 2;
  return (unsigned int *)v4;
}

void std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_char(std::basic_regex<wchar_t> *this, std::basic_regex<wchar_t>::value_type __c)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags = this->__flags_;
  if ((flags & 1) == 0)
  {
    if ((flags & 8) == 0) {
      operator new();
    }
    operator new();
  }
  operator new();
}

void sub_1B1C04824(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C408ABF81D7);
  _Unwind_Resume(a1);
}

void std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_back_ref(std::basic_regex<wchar_t> *this, int __i)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags = this->__flags_;
  if ((flags & 1) == 0)
  {
    if ((flags & 8) == 0) {
      operator new();
    }
    operator new();
  }
  operator new();
}

uint64_t std::__match_char_icase<wchar_t,std::regex_traits<wchar_t>>::__match_char_icase[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = &unk_1F0A5DA70;
  *(void *)(a1 + 8) = a4;
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + ++*(void *)(result + 24) = *(_OWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 40) = (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 8) + 72))(*(void *)(a2 + 8), a3);
  return a1;
}

void sub_1B1C04A0C(_Unwind_Exception *a1)
{
  std::locale::~locale(v2);
  uint64_t v4 = (uint64_t)v1[1];
  if (v4) {
    std::shared_ptr<std::__empty_state<wchar_t>>::shared_ptr[abi:ne180100]<std::__empty_state<wchar_t>,void>(v4);
  }
  _Unwind_Resume(a1);
}

std::locale *std::__match_char_icase<wchar_t,std::regex_traits<wchar_t>>::~__match_char_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F0A5DA70;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__match_char_icase<wchar_t,std::regex_traits<wchar_t>>::~__match_char_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F0A5DA70;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__match_char_icase<wchar_t,std::regex_traits<wchar_t>>::__exec(uint64_t result, uint64_t a2)
{
  int v3 = *(unsigned int **)(a2 + 16);
  if (v3 == *(unsigned int **)(a2 + 24)
    || (uint64_t v4 = result,
        uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(result + 24) + 72))(*(void *)(result + 24), *v3), result != *(_DWORD *)(v4 + 40)))
  {
    uint64_t v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) += 4;
    uint64_t v5 = *(void *)(v4 + 8);
  }
  *(void *)(a2 + 80) = v5;
  return result;
}

std::locale *std::__match_char_collate<wchar_t,std::regex_traits<wchar_t>>::~__match_char_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F0A5DC90;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__match_char_collate<wchar_t,std::regex_traits<wchar_t>>::~__match_char_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F0A5DC90;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__match_char_collate<wchar_t,std::regex_traits<wchar_t>>::__exec(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD **)(a2 + 16);
  if (v2 == *(_DWORD **)(a2 + 24) || *v2 != *(_DWORD *)(result + 40))
  {
    uint64_t v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }
  *(void *)(a2 + 80) = v3;
  return result;
}

void (__cdecl ***std::__match_char<wchar_t>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<wchar_t> *__hidden this)))(std::__owns_one_state<wchar_t> *__hidden this)
{
  int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<wchar_t> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__match_char<wchar_t>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<wchar_t> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<wchar_t> *__hidden)))*v1 + 1))(v1);
  }
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__match_char<wchar_t>::__exec(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD **)(a2 + 16);
  if (v2 == *(_DWORD **)(a2 + 24) || *v2 != *(_DWORD *)(result + 16))
  {
    uint64_t v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }
  *(void *)(a2 + 80) = v3;
  return result;
}

std::locale *std::__back_ref_icase<wchar_t,std::regex_traits<wchar_t>>::~__back_ref_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F0A5D868;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__back_ref_icase<wchar_t,std::regex_traits<wchar_t>>::~__back_ref_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F0A5D868;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__back_ref_icase<wchar_t,std::regex_traits<wchar_t>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (*(unsigned char *)(v3 + 16))
  {
    uint64_t v4 = *(void *)(v3 + 8) - *(void *)v3;
    uint64_t v5 = v4 >> 2;
    uint64_t v6 = *(void *)(a2 + 16);
    if (v4 >> 2 <= (*(void *)(a2 + 24) - v6) >> 2)
    {
      uint64_t v8 = result;
      if (v4 < 1)
      {
LABEL_12:
        *(_DWORD *)a2 = -994;
        *(void *)(a2 + 16) = v6 + 4 * v5;
        uint64_t v7 = *(void *)(v8 + 8);
        goto LABEL_13;
      }
      uint64_t v9 = 0;
      if (v5 <= 1) {
        uint64_t v10 = 1;
      }
      else {
        uint64_t v10 = v4 >> 2;
      }
      uint64_t v11 = 4 * v10;
      while (1)
      {
        int v12 = (*(uint64_t (**)(void, void))(**(void **)(v8 + 24) + 72))(*(void *)(v8 + 24), *(unsigned int *)(*(void *)v3 + v9));
        uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(v8 + 24) + 72))(*(void *)(v8 + 24), *(unsigned int *)(*(void *)(a2 + 16) + v9));
        if (v12 != result) {
          break;
        }
        v9 += 4;
        if (v11 == v9)
        {
          uint64_t v6 = *(void *)(a2 + 16);
          goto LABEL_12;
        }
      }
    }
  }
  uint64_t v7 = 0;
  *(_DWORD *)a2 = -993;
LABEL_13:
  *(void *)(a2 + 80) = v7;
  return result;
}

std::locale *std::__back_ref_collate<wchar_t,std::regex_traits<wchar_t>>::~__back_ref_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F0A5DA10;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__back_ref_collate<wchar_t,std::regex_traits<wchar_t>>::~__back_ref_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F0A5DA10;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__back_ref_collate<wchar_t,std::regex_traits<wchar_t>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(result + 40) - 1;
  uint64_t v3 = *(void *)(a2 + 32);
  if (*(unsigned char *)(v3 + 24 * v2 + 16))
  {
    uint64_t v4 = (int **)(v3 + 24 * v2);
    uint64_t v5 = *v4;
    uint64_t v6 = (char *)v4[1] - (char *)*v4;
    uint64_t v7 = v6 >> 2;
    uint64_t v8 = *(void *)(a2 + 16);
    if (v6 >> 2 <= (*(void *)(a2 + 24) - v8) >> 2)
    {
      if (v6 < 1)
      {
LABEL_11:
        *(_DWORD *)a2 = -994;
        *(void *)(a2 + 16) = v8 + 4 * v7;
        uint64_t v9 = *(void *)(result + 8);
        goto LABEL_12;
      }
      if (v7 <= 1) {
        uint64_t v10 = 1;
      }
      else {
        uint64_t v10 = v6 >> 2;
      }
      uint64_t v11 = *(int **)(a2 + 16);
      while (1)
      {
        int v13 = *v5++;
        int v12 = v13;
        int v14 = *v11++;
        if (v12 != v14) {
          break;
        }
        if (!--v10) {
          goto LABEL_11;
        }
      }
    }
  }
  uint64_t v9 = 0;
  *(_DWORD *)a2 = -993;
LABEL_12:
  *(void *)(a2 + 80) = v9;
  return result;
}

void (__cdecl ***std::__back_ref<wchar_t>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<wchar_t> *__hidden this)))(std::__owns_one_state<wchar_t> *__hidden this)
{
  unsigned int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<wchar_t> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__back_ref<wchar_t>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<wchar_t> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<wchar_t> *__hidden)))*v1 + 1))(v1);
  }
  JUMPOUT(0x1B3EA8670);
}

unsigned int *std::__back_ref<wchar_t>::__exec(unsigned int *result, uint64_t a2)
{
  unint64_t v2 = result[4];
  uint64_t v3 = *(void *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a2 + 40) - v3) >> 3) < v2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  unsigned int v5 = v2 - 1;
  if (*(unsigned char *)(v3 + 24 * v5 + 16)
    && (uint64_t v6 = result,
        uint64_t v7 = v3 + 24 * v5,
        uint64_t result = *(unsigned int **)v7,
        int64_t v8 = *(void *)(v7 + 8) - *(void *)v7,
        uint64_t v9 = v8 >> 2,
        uint64_t v10 = *(void *)(a2 + 16),
        v8 >> 2 <= (*(void *)(a2 + 24) - v10) >> 2)
    && (uint64_t result = (unsigned int *)memcmp(result, *(const void **)(a2 + 16), v8), !result))
  {
    *(_DWORD *)a2 = -994;
    *(void *)(a2 + 16) = v10 + 4 * v9;
    uint64_t v11 = *((void *)v6 + 1);
  }
  else
  {
    uint64_t v11 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(void *)(a2 + 80) = v11;
  return result;
}

std::__bracket_expression<wchar_t, std::regex_traits<wchar_t>> *__cdecl std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__start_matching_list(std::basic_regex<wchar_t> *this, BOOL __negate)
{
}

void sub_1B1C05540(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F1C4061CF1F02);
  _Unwind_Resume(a1);
}

void std::__bracket_expression<wchar_t,std::regex_traits<wchar_t>>::__add_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  int v2 = a2;
  if (!*(unsigned char *)(a1 + 169))
  {
    unint64_t v12 = *(void *)(a1 + 56);
    int v13 = (void **)(a1 + 40);
    unsigned int v5 = *(char **)(a1 + 48);
    if (*(unsigned char *)(a1 + 170))
    {
      if ((unint64_t)v5 < v12) {
        goto LABEL_22;
      }
      uint64_t v6 = (char *)*v13;
      uint64_t v14 = (v5 - (unsigned char *)*v13) >> 2;
      if (!((unint64_t)(v14 + 1) >> 62))
      {
        unint64_t v15 = v12 - (void)v6;
        unint64_t v16 = (uint64_t)(v12 - (void)v6) >> 1;
        if (v16 <= v14 + 1) {
          unint64_t v16 = v14 + 1;
        }
        if (v15 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v16;
        }
        if (v17)
        {
          int v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 56, v17);
          uint64_t v6 = *(char **)(a1 + 40);
          unsigned int v5 = *(char **)(a1 + 48);
        }
        else
        {
          int v18 = 0;
        }
        int v20 = &v18[4 * v14];
        int v21 = &v18[4 * v17];
        *(_DWORD *)int v20 = v2;
        unsigned __int8 v19 = v20 + 4;
        while (v5 != v6)
        {
          int v28 = *((_DWORD *)v5 - 1);
          v5 -= 4;
          *((_DWORD *)v20 - 1) = v28;
          v20 -= 4;
        }
        goto LABEL_43;
      }
    }
    else
    {
      if ((unint64_t)v5 < v12) {
        goto LABEL_22;
      }
      uint64_t v6 = (char *)*v13;
      uint64_t v23 = (v5 - (unsigned char *)*v13) >> 2;
      if (!((unint64_t)(v23 + 1) >> 62))
      {
        unint64_t v24 = v12 - (void)v6;
        unint64_t v25 = (uint64_t)(v12 - (void)v6) >> 1;
        if (v25 <= v23 + 1) {
          unint64_t v25 = v23 + 1;
        }
        if (v24 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v26 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v26 = v25;
        }
        if (v26)
        {
          uint64_t v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 56, v26);
          uint64_t v6 = *(char **)(a1 + 40);
          unsigned int v5 = *(char **)(a1 + 48);
        }
        else
        {
          uint64_t v27 = 0;
        }
        int v20 = &v27[4 * v23];
        int v21 = &v27[4 * v26];
        *(_DWORD *)int v20 = v2;
        unsigned __int8 v19 = v20 + 4;
        while (v5 != v6)
        {
          int v29 = *((_DWORD *)v5 - 1);
          v5 -= 4;
          *((_DWORD *)v20 - 1) = v29;
          v20 -= 4;
        }
        goto LABEL_43;
      }
    }
LABEL_46:
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  int v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 72))(*(void *)(a1 + 24), a2);
  unint64_t v4 = *(void *)(a1 + 56);
  unsigned int v5 = *(char **)(a1 + 48);
  if ((unint64_t)v5 < v4)
  {
LABEL_22:
    *(_DWORD *)unsigned int v5 = v2;
    unsigned __int8 v19 = v5 + 4;
    goto LABEL_45;
  }
  uint64_t v6 = *(char **)(a1 + 40);
  uint64_t v7 = (v5 - v6) >> 2;
  if ((unint64_t)(v7 + 1) >> 62) {
    goto LABEL_46;
  }
  unint64_t v8 = v4 - (void)v6;
  unint64_t v9 = (uint64_t)(v4 - (void)v6) >> 1;
  if (v9 <= v7 + 1) {
    unint64_t v9 = v7 + 1;
  }
  if (v8 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v10 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v9;
  }
  if (v10)
  {
    uint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 56, v10);
    uint64_t v6 = *(char **)(a1 + 40);
    unsigned int v5 = *(char **)(a1 + 48);
  }
  else
  {
    uint64_t v11 = 0;
  }
  int v20 = &v11[4 * v7];
  int v21 = &v11[4 * v10];
  *(_DWORD *)int v20 = v2;
  unsigned __int8 v19 = v20 + 4;
  while (v5 != v6)
  {
    int v22 = *((_DWORD *)v5 - 1);
    v5 -= 4;
    *((_DWORD *)v20 - 1) = v22;
    v20 -= 4;
  }
LABEL_43:
  *(void *)(a1 + 40) = v20;
  *(void *)(a1 + 48) = v19;
  *(void *)(a1 + 56) = v21;
  if (v6) {
    operator delete(v6);
  }
LABEL_45:
  *(void *)(a1 + 48) = v19;
}

uint64_t std::__bracket_expression<wchar_t,std::regex_traits<wchar_t>>::__bracket_expression[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  *(void *)(a1 + 8) = a3;
  uint64_t v11 = (const std::locale *)(a1 + 16);
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + ++*(void *)(result + 24) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 1--*(_DWORD *)(a9 + 52) = 0u;
  *(unsigned char *)(a1 + 168) = a4;
  *(unsigned char *)(a1 + 169) = a5;
  *(unsigned char *)(a1 + 170) = a6;
  std::locale::locale(&v14, v11);
  std::locale::name(&v15, &v14);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    BOOL v12 = v15.__r_.__value_.__l.__size_ != 1 || *v15.__r_.__value_.__l.__data_ != 67;
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  else
  {
    BOOL v12 = SHIBYTE(v15.__r_.__value_.__r.__words[2]) != 1 || v15.__r_.__value_.__s.__data_[0] != 67;
  }
  std::locale::~locale(&v14);
  *(unsigned char *)(a1 + 171) = v12;
  return a1;
}

void sub_1B1C058DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  std::locale::~locale((std::locale *)&a9);
  a10 = v10 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  std::string v15 = (void *)v10[14];
  if (v15)
  {
    v10[15] = v15;
    operator delete(v15);
  }
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  unint64_t v16 = (void *)v10[8];
  if (v16)
  {
    v10[9] = v16;
    operator delete(v16);
  }
  unint64_t v17 = *v13;
  if (*v13)
  {
    v10[6] = v17;
    operator delete(v17);
  }
  std::locale::~locale(v12);
  *unint64_t v10 = v11;
  uint64_t v18 = v10[1];
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  _Unwind_Resume(a1);
}

void std::__bracket_expression<wchar_t,std::regex_traits<wchar_t>>::~__bracket_expression(std::locale *a1)
{
  std::__bracket_expression<wchar_t,std::regex_traits<wchar_t>>::~__bracket_expression(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__bracket_expression<wchar_t,std::regex_traits<wchar_t>>::__exec(const std::__bracket_expression<wchar_t, std::regex_traits<wchar_t>> *this, std::__bracket_expression<wchar_t, std::regex_traits<wchar_t>>::__state *a2)
{
  current = a2->__current_;
  last = a2->__last_;
  if (current == last)
  {
    uint64_t v35 = 0;
    BOOL negate = this->__negate_;
    goto LABEL_207;
  }
  if (!this->__might_have_digraph_ || current + 1 == last) {
    goto LABEL_61;
  }
  uint64_t v6 = current[1];
  __c[0] = *current;
  __c[1] = v6;
  if (this->__icase_)
  {
    __c[0] = ((uint64_t (*)(const std::ctype<wchar_t> *))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_);
    __c[1] = ((uint64_t (*)(const std::ctype<wchar_t> *, uint64_t))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v6);
  }
  std::regex_traits<wchar_t>::__lookup_collatename<wchar_t *>((uint64_t)&this->__traits_, __c, (int *)&v111, (uint64_t)&__p);
  if ((v109 & 0x80000000) == 0)
  {
    if (v109) {
      goto LABEL_8;
    }
LABEL_61:
    BOOL negate = 0;
    uint64_t v35 = 1;
    goto LABEL_62;
  }
  size_t v36 = v108;
  operator delete(__p);
  if (!v36) {
    goto LABEL_61;
  }
LABEL_8:
  std::vector<std::wcsub_match>::pointer begin = (int32x2_t *)this->__digraphs_.__begin_;
  uint64_t v8 = (char *)this->__digraphs_.__end_ - (char *)begin;
  if (v8)
  {
    unint64_t v9 = v8 >> 3;
    if (v9 <= 1) {
      unint64_t v9 = 1;
    }
    do
    {
      int32x2_t v10 = vceq_s32(*(int32x2_t *)__c, *begin);
      if (v10.i32[0] & v10.i32[1]) {
        goto LABEL_197;
      }
      ++begin;
    }
    while (--v9);
  }
  if (!this->__collate_ || this->__ranges_.__begin_ == this->__ranges_.__end_)
  {
    BOOL negate = 0;
  }
  else
  {
    std::regex_traits<wchar_t>::transform<wchar_t *>((uint64_t)&this->__traits_, __c, (int *)&v111);
    uint64_t v11 = this->__ranges_.__begin_;
    if (this->__ranges_.__end_ != v11)
    {
      uint64_t v12 = 0;
      unint64_t v13 = 0;
      do
      {
        std::locale v14 = &v11[v12];
        int v15 = SHIBYTE(v14->first.__r_.__value_.__r.__words[2]);
        if (v15 >= 0) {
          size_t size = HIBYTE(v14->first.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t size = v14->first.__r_.__value_.__l.__size_;
        }
        if (v109 >= 0) {
          size_t v17 = v109;
        }
        else {
          size_t v17 = v108;
        }
        if (size >= v17) {
          size_t v18 = v17;
        }
        else {
          size_t v18 = size;
        }
        if (v18
          && (v109 >= 0 ? (p_p = (const __int32 *)&__p) : (p_p = (const __int32 *)__p),
              v15 >= 0 ? (int v20 = (const __int32 *)v14) : (int v20 = (const __int32 *)v14->first.__r_.__value_.__r.__words[0]),
              (int v21 = wmemcmp(p_p, v20, v18)) != 0))
        {
          if (v21 < 0) {
            goto LABEL_57;
          }
        }
        else if (v17 < size)
        {
          goto LABEL_57;
        }
        int v22 = &this->__ranges_.__begin_[v12];
        if (v109 >= 0) {
          size_t v23 = v109;
        }
        else {
          size_t v23 = v108;
        }
        int v24 = SHIBYTE(v22->second.__r_.__value_.__r.__words[2]);
        if (v24 >= 0) {
          std::wstring::size_type v25 = HIBYTE(v22->second.__r_.__value_.__r.__words[2]);
        }
        else {
          std::wstring::size_type v25 = v22->second.__r_.__value_.__l.__size_;
        }
        if (v23 >= v25) {
          size_t v26 = v25;
        }
        else {
          size_t v26 = v23;
        }
        if (v26
          && ((data = v22->second.__r_.__value_.__l.__data_, p_second = &v22->second, int v28 = data, v24 >= 0)
            ? (std::string::size_type v30 = (const __int32 *)p_second)
            : (std::string::size_type v30 = v28),
              v109 >= 0 ? (std::string::size_type v31 = (const __int32 *)&__p) : (std::string::size_type v31 = (const __int32 *)__p),
              (int v32 = wmemcmp(v30, v31, v26)) != 0))
        {
          if ((v32 & 0x80000000) == 0) {
            goto LABEL_161;
          }
        }
        else if (v25 >= v23)
        {
LABEL_161:
          BOOL negate = 1;
          int v34 = 5;
          goto LABEL_162;
        }
LABEL_57:
        ++v13;
        uint64_t v11 = this->__ranges_.__begin_;
        ++v12;
      }
      while (v13 < 0xAAAAAAAAAAAAAAABLL * (((char *)this->__ranges_.__end_ - (char *)v11) >> 4));
    }
    BOOL negate = 0;
    int v34 = 0;
LABEL_162:
    if (v109 < 0) {
      operator delete(__p);
    }
    if (negate) {
      goto LABEL_189;
    }
  }
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_) {
    goto LABEL_191;
  }
  std::regex_traits<wchar_t>::__transform_primary<wchar_t *>((uint64_t)&this->__traits_, __c, (int *)&v111, (uint64_t)&__p);
  std::vector<std::wstring>::pointer v86 = this->__equivalences_.__begin_;
  std::vector<std::wstring>::pointer end = this->__equivalences_.__end_;
  if (end == v86)
  {
LABEL_184:
    char v95 = 0;
    int v34 = 0;
    goto LABEL_186;
  }
  uint64_t v87 = 0;
  unint64_t v88 = 0;
  while (1)
  {
    uint64_t v89 = &v86[v87];
    if (v109 >= 0) {
      size_t v90 = v109;
    }
    else {
      size_t v90 = v108;
    }
    std::wstring::size_type v91 = HIBYTE(v89->__r_.__value_.__r.__words[2]);
    int v92 = (char)v91;
    if ((v91 & 0x80u) != 0) {
      std::wstring::size_type v91 = v89->__r_.__value_.__l.__size_;
    }
    if (v90 != v91) {
      goto LABEL_183;
    }
    if (!v90) {
      break;
    }
    unint64_t v93 = v92 >= 0 ? (const __int32 *)&v86[v87] : (const __int32 *)v89->__r_.__value_.__r.__words[0];
    unint64_t v94 = v109 >= 0 ? (const __int32 *)&__p : (const __int32 *)__p;
    if (!wmemcmp(v94, v93, v90)) {
      break;
    }
    std::vector<std::wstring>::pointer v86 = this->__equivalences_.__begin_;
    std::vector<std::wstring>::pointer end = this->__equivalences_.__end_;
LABEL_183:
    ++v88;
    ++v87;
    if (v88 >= 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)v86) >> 3)) {
      goto LABEL_184;
    }
  }
  char v95 = 1;
  int v34 = 5;
  BOOL negate = 1;
LABEL_186:
  if (v109 < 0) {
    operator delete(__p);
  }
  if ((v95 & 1) == 0)
  {
LABEL_191:
    __int32 v96 = __c[0];
    masuint64_t k = this->__mask_;
    if ((((uint64_t (*)(const std::ctype<wchar_t> *, void, void))this->__traits_.__ct_->do_is)(this->__traits_.__ct_, mask, __c[0]) & 1) == 0&& (v96 != 95 || (mask & 0x80) == 0)|| (__int32 v98 = __c[1], v99 = this->__mask_, (((uint64_t (*)(const std::ctype<wchar_t> *, void, void))this->__traits_.__ct_->do_is)(this->__traits_.__ct_, v99, __c[1]) & 1) == 0)&& (v98 != 95 || (v99 & 0x80) == 0))
    {
      __int32 v101 = __c[0];
      neg_masuint64_t k = this->__neg_mask_;
      if (((uint64_t (*)(const std::ctype<wchar_t> *, void, void))this->__traits_.__ct_->do_is)(this->__traits_.__ct_, neg_mask, __c[0]) & 1) != 0|| v101 == 95 && (neg_mask & 0x80) != 0|| (__int32 v103 = __c[1], v104 = this->__neg_mask_, (((uint64_t (*)(const std::ctype<wchar_t> *, void, void))this->__traits_.__ct_->do_is)(this->__traits_.__ct_, v104, __c[1]))|| (v100 = 1, v103 == 95) && (v104 & 0x80) != 0)
      {
        int v100 = negate;
      }
      goto LABEL_205;
    }
LABEL_197:
    int v100 = 1;
LABEL_205:
    BOOL negate = v100;
    goto LABEL_206;
  }
LABEL_189:
  if (v34)
  {
LABEL_206:
    uint64_t v35 = 2;
    goto LABEL_207;
  }
  uint64_t v35 = 2;
LABEL_62:
  uint64_t v37 = *(unsigned int *)a2->__current_;
  __c[0] = *a2->__current_;
  if (this->__icase_)
  {
    uint64_t v37 = ((uint64_t (*)(const std::ctype<wchar_t> *, uint64_t))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v37);
    __c[0] = v37;
  }
  std::vector<wchar_t>::pointer v38 = this->__chars_.__begin_;
  uint64_t v39 = (char *)this->__chars_.__end_ - (char *)v38;
  if (v39)
  {
    unint64_t v40 = v39 >> 2;
    if (v40 <= 1) {
      unint64_t v40 = 1;
    }
    do
    {
      int v41 = *v38++;
      if (v37 == v41) {
        goto LABEL_160;
      }
      --v40;
    }
    while (v40);
  }
  std::regex_traits<wchar_t>::char_class_type v42 = this->__neg_mask_;
  if (v42 || this->__neg_chars_.__begin_ != this->__neg_chars_.__end_)
  {
    BOOL v43 = (((uint64_t (*)(const std::ctype<wchar_t> *, void, uint64_t))this->__traits_.__ct_->do_is)(this->__traits_.__ct_, this->__neg_mask_, v37) & 1) != 0|| (v37 == 95) & (v42 >> 7);
    std::vector<wchar_t>::pointer v44 = this->__neg_chars_.__end_;
    std::string::size_type v45 = wmemchr(this->__neg_chars_.__begin_, __c[0], v44 - this->__neg_chars_.__begin_);
    uint64_t v46 = v45 ? v45 : v44;
    if (!v43 && v46 == this->__neg_chars_.__end_)
    {
LABEL_160:
      BOOL negate = 1;
      goto LABEL_207;
    }
  }
  std::vector<std::pair<std::wstring, std::wstring>>::pointer v47 = this->__ranges_.__begin_;
  std::vector<std::pair<std::wstring, std::wstring>>::pointer v48 = this->__ranges_.__end_;
  if (v47 != v48)
  {
    if (this->__collate_)
    {
      std::regex_traits<wchar_t>::transform<wchar_t *>((uint64_t)&this->__traits_, __c, &__c[1]);
      std::vector<std::pair<std::wstring, std::wstring>>::pointer v47 = this->__ranges_.__begin_;
      std::vector<std::pair<std::wstring, std::wstring>>::pointer v48 = this->__ranges_.__end_;
    }
    else
    {
      char v109 = 1;
      std::vector<std::wcsub_match> __p = (void *)__c[0];
    }
    if (v48 != v47)
    {
      uint64_t v49 = 0;
      unint64_t v50 = 0;
      do
      {
        long long v51 = &v47[v49];
        int v52 = SHIBYTE(v51->first.__r_.__value_.__r.__words[2]);
        if (v52 >= 0) {
          size_t v53 = HIBYTE(v51->first.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t v53 = v51->first.__r_.__value_.__l.__size_;
        }
        if (v109 >= 0) {
          size_t v54 = v109;
        }
        else {
          size_t v54 = v108;
        }
        if (v53 >= v54) {
          size_t v55 = v54;
        }
        else {
          size_t v55 = v53;
        }
        if (v55
          && (v109 >= 0 ? (uint64_t v56 = (const __int32 *)&__p) : (uint64_t v56 = (const __int32 *)__p),
              v52 >= 0 ? (unsigned int v57 = (const __int32 *)v51) : (unsigned int v57 = (const __int32 *)v51->first.__r_.__value_.__r.__words[0]),
              (int v58 = wmemcmp(v56, v57, v55)) != 0))
        {
          if (v58 < 0) {
            goto LABEL_126;
          }
        }
        else if (v54 < v53)
        {
          goto LABEL_126;
        }
        int v59 = &this->__ranges_.__begin_[v49];
        if (v109 >= 0) {
          size_t v60 = v109;
        }
        else {
          size_t v60 = v108;
        }
        int v61 = SHIBYTE(v59->second.__r_.__value_.__r.__words[2]);
        if (v61 >= 0) {
          std::wstring::size_type v62 = HIBYTE(v59->second.__r_.__value_.__r.__words[2]);
        }
        else {
          std::wstring::size_type v62 = v59->second.__r_.__value_.__l.__size_;
        }
        if (v60 >= v62) {
          size_t v63 = v62;
        }
        else {
          size_t v63 = v60;
        }
        if (v63
          && ((v66 = v59->second.__r_.__value_.__l.__data_, int v64 = &v59->second, v65 = v66, v61 >= 0)
            ? (std::vector<unsigned int> v67 = (const __int32 *)v64)
            : (std::vector<unsigned int> v67 = v65),
              v109 >= 0 ? (uint64_t v68 = (const __int32 *)&__p) : (uint64_t v68 = (const __int32 *)__p),
              (int v69 = wmemcmp(v67, v68, v63)) != 0))
        {
          if ((v69 & 0x80000000) == 0) {
            goto LABEL_128;
          }
        }
        else if (v62 >= v60)
        {
LABEL_128:
          char v70 = 1;
          BOOL negate = 1;
          goto LABEL_129;
        }
LABEL_126:
        ++v50;
        std::vector<std::pair<std::wstring, std::wstring>>::pointer v47 = this->__ranges_.__begin_;
        ++v49;
      }
      while (v50 < 0xAAAAAAAAAAAAAAABLL * (((char *)this->__ranges_.__end_ - (char *)v47) >> 4));
    }
    char v70 = 0;
LABEL_129:
    if (v109 < 0) {
      operator delete(__p);
    }
    if (v70) {
      goto LABEL_207;
    }
  }
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_) {
    goto LABEL_156;
  }
  std::regex_traits<wchar_t>::__transform_primary<wchar_t *>((uint64_t)&this->__traits_, __c, &__c[1], (uint64_t)&__p);
  std::vector<std::wstring>::pointer v72 = this->__equivalences_.__begin_;
  std::vector<std::wstring>::pointer v71 = this->__equivalences_.__end_;
  if (v71 == v72)
  {
LABEL_151:
    char v81 = 0;
    goto LABEL_153;
  }
  uint64_t v73 = 0;
  unint64_t v74 = 0;
  while (1)
  {
    int v75 = &v72[v73];
    if (v109 >= 0) {
      size_t v76 = v109;
    }
    else {
      size_t v76 = v108;
    }
    std::wstring::size_type v77 = HIBYTE(v75->__r_.__value_.__r.__words[2]);
    int v78 = (char)v77;
    if ((v77 & 0x80u) != 0) {
      std::wstring::size_type v77 = v75->__r_.__value_.__l.__size_;
    }
    if (v76 != v77) {
      goto LABEL_150;
    }
    if (!v76) {
      break;
    }
    uint64_t v79 = v78 >= 0 ? (const __int32 *)&v72[v73] : (const __int32 *)v75->__r_.__value_.__r.__words[0];
    uint64_t v80 = v109 >= 0 ? (const __int32 *)&__p : (const __int32 *)__p;
    if (!wmemcmp(v80, v79, v76)) {
      break;
    }
    std::vector<std::wstring>::pointer v72 = this->__equivalences_.__begin_;
    std::vector<std::wstring>::pointer v71 = this->__equivalences_.__end_;
LABEL_150:
    ++v74;
    ++v73;
    if (v74 >= 0xAAAAAAAAAAAAAAABLL * (((char *)v71 - (char *)v72) >> 3)) {
      goto LABEL_151;
    }
  }
  char v81 = 1;
  BOOL negate = 1;
LABEL_153:
  if (v109 < 0) {
    operator delete(__p);
  }
  if ((v81 & 1) == 0)
  {
LABEL_156:
    __int32 v82 = __c[0];
    std::regex_traits<wchar_t>::char_class_type v83 = this->__mask_;
    if (((uint64_t (*)(const std::ctype<wchar_t> *, void, void))this->__traits_.__ct_->do_is)(this->__traits_.__ct_, v83, __c[0]))goto LABEL_160; {
    int v84 = (v83 >> 7) & 1;
    }
    if (v82 != 95) {
      int v84 = 0;
    }
    if (v84 == 1) {
      goto LABEL_160;
    }
  }
LABEL_207:
  if (negate == this->__negate_)
  {
    std::__split_buffer<std::wstring>::pointer first = 0;
    int v106 = -993;
  }
  else
  {
    a2->__current_ += v35;
    std::__split_buffer<std::wstring>::pointer first = this->__first_;
    int v106 = -995;
  }
  a2->__do_ = v106;
  a2->__node_ = first;
}

std::locale *std::__bracket_expression<wchar_t,std::regex_traits<wchar_t>>::~__bracket_expression(std::locale *a1)
{
  uint64_t v7 = a1 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }
  uint64_t v7 = a1 + 11;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  uint64_t v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }
  unint64_t v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }
  std::locale::~locale(a1 + 2);
  unsigned int v5 = a1[1].__locale_;
  if (v5) {
    (*(void (**)(std::locale::__imp *))(*(void *)v5 + 8))(v5);
  }
  return a1;
}

void std::regex_traits<wchar_t>::transform<wchar_t *>(uint64_t a1, int *a2, int *a3)
{
  std::basic_string<char32_t>::__init_with_size[abi:ne180100]<char32_t const*,char32_t const*>(__p, a2, a3, a3 - a2);
  unint64_t v4 = v7;
  if ((v7 & 0x80u) == 0) {
    unsigned int v5 = __p;
  }
  else {
    unsigned int v5 = (void **)__p[0];
  }
  if ((v7 & 0x80u) != 0) {
    unint64_t v4 = (unint64_t)__p[1];
  }
  (*(void (**)(void, void **, unint64_t))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), v5, (unint64_t)v5 + 4 * v4);
  if ((char)v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B1C0641C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::regex_traits<wchar_t>::__lookup_collatename<wchar_t *>(uint64_t a1@<X0>, int *a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  p_p = &__p;
  std::basic_string<char32_t>::__init_with_size[abi:ne180100]<char32_t const*,char32_t const*>(&__p, a2, a3, a3 - a2);
  memset(&v18, 0, sizeof(v18));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::reserve(&v18, size);
  std::wstring::size_type v8 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  char v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  std::wstring::size_type v10 = __p.__r_.__value_.__l.__size_;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    std::wstring::size_type v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else
  {
    std::wstring::size_type v11 = __p.__r_.__value_.__l.__size_;
    p_p = (std::wstring *)__p.__r_.__value_.__r.__words[0];
  }
  if (!v11)
  {
LABEL_12:
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    if (v9 < 0) {
      std::wstring::size_type v8 = v10;
    }
    if (!v8) {
      goto LABEL_27;
    }
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v13 = &v18;
    }
    else {
      unint64_t v13 = (std::string *)v18.__r_.__value_.__r.__words[0];
    }
    std::__get_collation_name(&v17, (const char *)v13);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v18.__r_.__value_.__l.__data_);
    }
    std::string v18 = v17;
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::size_type v14 = v18.__r_.__value_.__l.__size_;
      if (v18.__r_.__value_.__l.__size_)
      {
        int v15 = (std::string *)v18.__r_.__value_.__r.__words[0];
        goto LABEL_26;
      }
    }
    else
    {
      std::string::size_type v14 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
      if (*((unsigned char *)&v17.__r_.__value_.__s + 23))
      {
        int v15 = &v18;
LABEL_26:
        std::wstring::__assign_trivial[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>((std::wstring *)a4, (char *)v15, (char *)v15 + v14, v14);
        goto LABEL_27;
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      if (__p.__r_.__value_.__l.__size_ >= 3) {
        goto LABEL_27;
      }
    }
    else if (HIBYTE(__p.__r_.__value_.__r.__words[2]) >= 3u)
    {
      goto LABEL_27;
    }
    (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 16) + 32))(&v17);
    if (*(char *)(a4 + 23) < 0) {
      operator delete(*(void **)a4);
    }
    *(std::string *)a4 = v17;
    int v16 = *(char *)(a4 + 23);
    if (v16 < 0)
    {
      if ((*(void *)(a4 + 8) & 0xFFFFFFFFFFFFFFFDLL) != 1)
      {
        **(_DWORD **)a4 = 0;
        *(void *)(a4 + 8) = 0;
        goto LABEL_27;
      }
    }
    else if ((v16 & 0xFD) != 1)
    {
      *(_DWORD *)a4 = 0;
      *(unsigned char *)(a4 + 23) = 0;
      goto LABEL_27;
    }
    std::wstring::operator=((std::wstring *)a4, &__p);
    goto LABEL_27;
  }
  uint64_t v12 = 4 * v11;
  while (p_p->__r_.__value_.__s.__data_[0] < 0x7Fu)
  {
    std::string::push_back(&v18, p_p->__r_.__value_.__s.__data_[0]);
    p_p = (std::wstring *)((char *)p_p + 4);
    v12 -= 4;
    if (!v12)
    {
      std::wstring::size_type v8 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      std::wstring::size_type v10 = __p.__r_.__value_.__l.__size_;
      char v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      goto LABEL_12;
    }
  }
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
LABEL_27:
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1B1C06674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (*(char *)(v24 + 23) < 0) {
    operator delete(*(void **)v24);
  }
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

void std::wstring::__assign_trivial[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(std::wstring *this, char *a2, char *a3, std::wstring::size_type a4)
{
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    std::wstring::size_type v8 = this;
    if (a4 <= 4) {
      goto LABEL_11;
    }
    std::wstring::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    std::wstring::size_type v10 = 4;
    goto LABEL_6;
  }
  unint64_t v11 = this->__r_.__value_.__r.__words[2];
  std::wstring::size_type v10 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v10 < a4)
  {
    std::wstring::size_type size = this->__r_.__value_.__l.__size_;
LABEL_6:
    std::wstring::__grow_by(this, v10, a4 - v10, size, 0, size, 0);
    this->__r_.__value_.__l.__size_ = 0;
    LOBYTE(v12) = *((unsigned char *)&this->__r_.__value_.__s + 23);
    goto LABEL_8;
  }
  unint64_t v12 = HIBYTE(v11);
LABEL_8:
  std::wstring::size_type v8 = this;
  if ((v12 & 0x80) != 0) {
    std::wstring::size_type v8 = (std::wstring *)this->__r_.__value_.__r.__words[0];
  }
LABEL_11:
  while (a2 != a3)
  {
    std::wstring::value_type v13 = *a2++;
    v8->__r_.__value_.__s.__data_[0] = v13;
    std::wstring::size_type v8 = (std::wstring *)((char *)v8 + 4);
  }
  v8->__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
    this->__r_.__value_.__l.__size_ = a4;
  }
  else {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = a4 & 0x7F;
  }
}

void std::regex_traits<wchar_t>::__transform_primary<wchar_t *>(uint64_t a1@<X0>, int *a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  std::basic_string<char32_t>::__init_with_size[abi:ne180100]<char32_t const*,char32_t const*>(__p, a2, a3, a3 - a2);
  unint64_t v6 = v12;
  if ((v12 & 0x80u) == 0) {
    unsigned __int8 v7 = __p;
  }
  else {
    unsigned __int8 v7 = (void **)__p[0];
  }
  if ((v12 & 0x80u) != 0) {
    unint64_t v6 = (unint64_t)__p[1];
  }
  (*(void (**)(void, void **, unint64_t))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), v7, (unint64_t)v7 + 4 * v6);
  uint64_t v8 = *(unsigned __int8 *)(a4 + 23);
  int v9 = (char)v8;
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a4 + 8);
  }
  if (v8 != 1)
  {
    if (v8 == 3)
    {
      if (v9 >= 0) {
        std::wstring::size_type v10 = (_DWORD *)a4;
      }
      else {
        std::wstring::size_type v10 = *(_DWORD **)a4;
      }
      _OWORD v10[2] = *v10;
    }
    else if (v9 < 0)
    {
      **(_DWORD **)a4 = 0;
      *(void *)(a4 + 8) = 0;
    }
    else
    {
      *(_DWORD *)a4 = 0;
      *(unsigned char *)(a4 + 23) = 0;
    }
  }
  if ((char)v12 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B1C0688C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::wstring::value_type *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_expression_term<wchar_t const*>(uint64_t a1, int *a2, int *a3, uint64_t *a4)
{
  unint64_t v4 = a2;
  if (a2 == a3) {
    return v4;
  }
  std::wstring::value_type v5 = *a2;
  if (*a2 == 93) {
    return v4;
  }
  uint64_t v6 = (uint64_t)a4;
  memset(&v26, 0, sizeof(v26));
  if (a2 + 1 == a3 || v5 != 91)
  {
LABEL_9:
    int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
    goto LABEL_10;
  }
  int v9 = a2[1];
  if (v9 != 46)
  {
    if (v9 == 58)
    {
      uint64_t v10 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_character_class<wchar_t const*>(a1, a2 + 2, a3, (uint64_t)a4);
      goto LABEL_34;
    }
    if (v9 == 61)
    {
      uint64_t v10 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_equivalence_class<wchar_t const*>(a1, a2 + 2, a3, a4);
LABEL_34:
      uint64_t v6 = v10;
      char v19 = 0;
      goto LABEL_38;
    }
    goto LABEL_9;
  }
  uint64_t v17 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_collating_symbol<wchar_t const*>(a1, a2 + 2, a3, (uint64_t)&v26);
  unint64_t v4 = (std::wstring::value_type *)v17;
  int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  std::wstring::size_type size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::wstring::size_type size = v26.__r_.__value_.__l.__size_;
  }
  std::string::size_type v14 = (int *)v17;
  if (!size)
  {
LABEL_10:
    if ((v11 | 0x40) == 0x40)
    {
      std::wstring::value_type v12 = *v4;
      if (*v4 == 92)
      {
        std::wstring::value_type v13 = v4 + 1;
        if (v11)
        {
          std::string::size_type v14 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_awk_escape<wchar_t const*>((std::basic_regex<wchar_t> *)a1, v13, a3, &v26);
        }
        else
        {
          std::string::size_type v14 = (int *)std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_class_escape<wchar_t const*>((std::basic_regex<wchar_t> *)a1, v13, a3, &v26, v6);
          int v11 = 0;
        }
        goto LABEL_16;
      }
    }
    else
    {
      std::wstring::value_type v12 = *v4;
    }
    std::wstring::operator=(&v26, v12);
    std::string::size_type v14 = v4 + 1;
  }
LABEL_16:
  if (v14 == a3 || *v14 == 93 || (int v15 = v14 + 1, v14 + 1 == a3) || *v14 != 45 || *v15 == 93)
  {
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v26.__r_.__value_.__l.__size_)
      {
        if (v26.__r_.__value_.__l.__size_ != 1)
        {
          int v16 = (std::wstring *)v26.__r_.__value_.__r.__words[0];
LABEL_36:
          std::__bracket_expression<wchar_t,std::regex_traits<wchar_t>>::__add_digraph[abi:ne180100](v6, v16->__r_.__value_.__s.__data_[0], v16->__r_.__value_.__s.__data_[1]);
          goto LABEL_37;
        }
        int v16 = (std::wstring *)v26.__r_.__value_.__r.__words[0];
        goto LABEL_28;
      }
    }
    else if (*((unsigned char *)&v26.__r_.__value_.__s + 23))
    {
      int v16 = &v26;
      if (HIBYTE(v26.__r_.__value_.__r.__words[2]) != 1) {
        goto LABEL_36;
      }
LABEL_28:
      std::__bracket_expression<wchar_t,std::regex_traits<wchar_t>>::__add_char[abi:ne180100](v6, v16->__r_.__value_.__s.__data_[0]);
    }
LABEL_37:
    char v19 = 1;
    unint64_t v4 = v14;
    goto LABEL_38;
  }
  memset(&v25, 0, sizeof(v25));
  unint64_t v4 = v14 + 2;
  if (v14 + 2 != a3 && *v15 == 91 && *v4 == 46)
  {
    uint64_t v21 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_collating_symbol<wchar_t const*>(a1, v14 + 3, a3, (uint64_t)&v25);
LABEL_55:
    unint64_t v4 = (std::wstring::value_type *)v21;
    goto LABEL_56;
  }
  if ((v11 | 0x40) == 0x40)
  {
    std::wstring::value_type v22 = *v15;
    if (*v15 == 92)
    {
      if (v11) {
        uint64_t v21 = (uint64_t)std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_awk_escape<wchar_t const*>((std::basic_regex<wchar_t> *)a1, v14 + 2, a3, &v25);
      }
      else {
        uint64_t v21 = (uint64_t)std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_class_escape<wchar_t const*>((std::basic_regex<wchar_t> *)a1, v14 + 2, a3, &v25, v6);
      }
      goto LABEL_55;
    }
  }
  else
  {
    std::wstring::value_type v22 = *v15;
  }
  std::wstring::operator=(&v25, v22);
LABEL_56:
  std::wstring v24 = v26;
  memset(&v26, 0, sizeof(v26));
  std::wstring __p = v25;
  memset(&v25, 0, sizeof(v25));
  std::__bracket_expression<wchar_t,std::regex_traits<wchar_t>>::__add_range[abi:ne180100](v6, (unsigned int *)&v24, (unsigned int *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  char v19 = 1;
LABEL_38:
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (v19) {
    return v4;
  }
  return (std::wstring::value_type *)v6;
}

void sub_1B1C06BEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (*(char *)(v28 - 49) < 0) {
    operator delete(*(void **)(v28 - 72));
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_equivalence_class<wchar_t const*>(uint64_t a1, int *a2, int *a3, uint64_t *a4)
{
  if ((char *)a3 - (char *)a2 < 8 || a3 - 1 == a2) {
    goto LABEL_33;
  }
  for (unint64_t i = 0; a2[i / 4] != 61 || a2[i / 4 + 1] != 93; i += 4)
  {
    if (4 * ((unint64_t)((char *)a3 - (char *)a2) >> 2) - 8 == i) {
      goto LABEL_33;
    }
  }
  if (&a2[i / 4] == a3) {
LABEL_33:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<wchar_t>::__lookup_collatename<wchar_t *>(a1, a2, &a2[i / 4], (uint64_t)&v17);
  if (((char)v19 & 0x80000000) == 0)
  {
    uint64_t v8 = v19;
    if (v19)
    {
      int v9 = (int *)&v17;
      goto LABEL_14;
    }
LABEL_34:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  uint64_t v8 = v18;
  if (!v18) {
    goto LABEL_34;
  }
  int v9 = (int *)v17;
LABEL_14:
  std::regex_traits<wchar_t>::__transform_primary<wchar_t *>(a1, v9, &v9[v8], (uint64_t)__p);
  unint64_t v10 = v16;
  if ((v16 & 0x80u) != 0) {
    unint64_t v10 = (unint64_t)__p[1];
  }
  if (v10)
  {
    std::__bracket_expression<wchar_t,std::regex_traits<wchar_t>>::__add_equivalence[abi:ne180100](a4, (long long *)__p);
  }
  else
  {
    uint64_t v11 = v19;
    if ((v19 & 0x80u) != 0) {
      uint64_t v11 = v18;
    }
    if (v11 == 2)
    {
      std::wstring::value_type v13 = (unsigned int *)&v17;
      if ((v19 & 0x80u) != 0) {
        std::wstring::value_type v13 = (unsigned int *)v17;
      }
      std::__bracket_expression<wchar_t,std::regex_traits<wchar_t>>::__add_digraph[abi:ne180100]((uint64_t)a4, *v13, v13[1]);
    }
    else
    {
      if (v11 != 1) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
      }
      std::wstring::value_type v12 = (unsigned int *)&v17;
      if ((v19 & 0x80u) != 0) {
        std::wstring::value_type v12 = (unsigned int *)v17;
      }
      std::__bracket_expression<wchar_t,std::regex_traits<wchar_t>>::__add_char[abi:ne180100]((uint64_t)a4, *v12);
    }
  }
  if ((char)v16 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v19 < 0) {
    operator delete(v17);
  }
  return (uint64_t)&a2[i / 4 + 2];
}

void sub_1B1C06DFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_character_class<wchar_t const*>(uint64_t a1, int *a2, int *a3, uint64_t a4)
{
  if ((char *)a3 - (char *)a2 < 8 || a3 - 1 == a2) {
    goto LABEL_11;
  }
  for (unint64_t i = 0; a2[i / 4] != 58 || a2[i / 4 + 1] != 93; i += 4)
  {
    if (4 * ((unint64_t)((char *)a3 - (char *)a2) >> 2) - 8 == i) {
      goto LABEL_11;
    }
  }
  if (&a2[i / 4] == a3) {
LABEL_11:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  int v7 = std::regex_traits<wchar_t>::__lookup_classname<wchar_t const*>(a1, a2, &a2[i / 4], *(unsigned char *)(a1 + 24) & 1);
  if (!v7) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
  }
  *(_DWORD *)(a4 + 160) |= v7;
  return (uint64_t)&a2[i / 4 + 2];
}

uint64_t std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_collating_symbol<wchar_t const*>(uint64_t a1, int *a2, int *a3, uint64_t a4)
{
  if ((char *)a3 - (char *)a2 < 8 || a3 - 1 == a2) {
    goto LABEL_15;
  }
  for (unint64_t i = 0; a2[i / 4] != 46 || a2[i / 4 + 1] != 93; i += 4)
  {
    if (4 * ((unint64_t)((char *)a3 - (char *)a2) >> 2) - 8 == i) {
      goto LABEL_15;
    }
  }
  if (&a2[i / 4] == a3) {
LABEL_15:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<wchar_t>::__lookup_collatename<wchar_t *>(a1, a2, &a2[i / 4], (uint64_t)&v10);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(_OWORD *)a4 = v10;
  unint64_t v7 = v11;
  *(void *)(a4 + 16) = v11;
  unint64_t v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0) {
    unint64_t v8 = *(void *)(a4 + 8);
  }
  if (v8 - 1 >= 2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  return (uint64_t)&a2[i / 4 + 2];
}

unsigned int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_class_escape<wchar_t const*>(std::basic_regex<wchar_t> *a1, int *a2, int *a3, std::wstring *this, uint64_t a5)
{
  if (a2 == a3) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  }
  int v6 = *a2;
  if (*a2 > 97)
  {
    if (v6 > 114)
    {
      if (v6 != 115)
      {
        if (v6 != 119) {
          goto LABEL_25;
        }
        *(_DWORD *)(a5 + 160) |= 0x500u;
        std::__bracket_expression<wchar_t,std::regex_traits<wchar_t>>::__add_char[abi:ne180100](a5, 95);
        return (unsigned int *)(a2 + 1);
      }
      int v8 = *(_DWORD *)(a5 + 160) | 0x4000;
    }
    else
    {
      if (v6 == 98)
      {
        int v9 = this;
        std::wstring::value_type v10 = 8;
LABEL_19:
        std::wstring::operator=(v9, v10);
        return (unsigned int *)(a2 + 1);
      }
      if (v6 != 100) {
        goto LABEL_25;
      }
      int v8 = *(_DWORD *)(a5 + 160) | 0x400;
    }
    *(_DWORD *)(a5 + 160) = v8;
    return (unsigned int *)(a2 + 1);
  }
  if (v6 <= 82)
  {
    if (v6)
    {
      if (v6 == 68)
      {
        int v7 = *(_DWORD *)(a5 + 164) | 0x400;
LABEL_21:
        *(_DWORD *)(a5 + 164) = v7;
        return (unsigned int *)(a2 + 1);
      }
      goto LABEL_25;
    }
    int v9 = this;
    std::wstring::value_type v10 = 0;
    goto LABEL_19;
  }
  if (v6 == 83)
  {
    int v7 = *(_DWORD *)(a5 + 164) | 0x4000;
    goto LABEL_21;
  }
  if (v6 == 87)
  {
    *(_DWORD *)(a5 + 164) |= 0x500u;
    std::__bracket_expression<wchar_t,std::regex_traits<wchar_t>>::__add_neg_char[abi:ne180100](a5, 95);
    return (unsigned int *)(a2 + 1);
  }
LABEL_25:
  return std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_character_escape<wchar_t const*>(a1, a2, a3, this);
}

std::wstring::value_type *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_awk_escape<wchar_t const*>(std::basic_regex<wchar_t> *a1, std::wstring::value_type *a2, std::wstring::value_type *a3, std::wstring *this)
{
  if (a2 == a3) {
LABEL_52:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  std::wstring::value_type v5 = *a2;
  if (v5 > 97)
  {
    switch(v5)
    {
      case 'n':
        if (this)
        {
          int v6 = this;
          std::wstring::value_type v5 = 10;
          goto LABEL_16;
        }
        std::wstring::value_type v5 = 10;
        goto LABEL_49;
      case 'o':
      case 'p':
      case 'q':
      case 's':
      case 'u':
        goto LABEL_21;
      case 'r':
        if (this)
        {
          int v6 = this;
          std::wstring::value_type v5 = 13;
          goto LABEL_16;
        }
        std::wstring::value_type v5 = 13;
        goto LABEL_49;
      case 't':
        if (this)
        {
          int v6 = this;
          std::wstring::value_type v5 = 9;
          goto LABEL_16;
        }
        std::wstring::value_type v5 = 9;
        goto LABEL_49;
      case 'v':
        if (this)
        {
          int v6 = this;
          std::wstring::value_type v5 = 11;
          goto LABEL_16;
        }
        std::wstring::value_type v5 = 11;
        goto LABEL_49;
      default:
        if (v5 == 98)
        {
          if (this)
          {
            int v6 = this;
            std::wstring::value_type v5 = 8;
            goto LABEL_16;
          }
          std::wstring::value_type v5 = 8;
        }
        else
        {
          if (v5 != 102) {
            goto LABEL_21;
          }
          if (this)
          {
            int v6 = this;
            std::wstring::value_type v5 = 12;
            goto LABEL_16;
          }
          std::wstring::value_type v5 = 12;
        }
        break;
    }
    goto LABEL_49;
  }
  if (v5 > 91)
  {
    if (v5 != 92)
    {
      if (v5 != 97) {
        goto LABEL_21;
      }
      if (this)
      {
        int v6 = this;
        std::wstring::value_type v5 = 7;
LABEL_16:
        std::wstring::operator=(v6, v5);
        return a2 + 1;
      }
      std::wstring::value_type v5 = 7;
LABEL_49:
      std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_char(a1, v5);
      return a2 + 1;
    }
LABEL_14:
    if (this)
    {
      int v6 = this;
      goto LABEL_16;
    }
    goto LABEL_49;
  }
  if (v5 == 34 || v5 == 47) {
    goto LABEL_14;
  }
LABEL_21:
  if ((v5 & 0xFFFFFFF8) != 0x30) {
    goto LABEL_52;
  }
  std::wstring::value_type v7 = v5 - 48;
  int v8 = a2 + 1;
  if (a2 + 1 != a3)
  {
    if ((*v8 & 0xFFFFFFF8) != 0x30) {
      goto LABEL_39;
    }
    std::wstring::value_type v7 = *v8 + 8 * v7 - 48;
    int v9 = a2 + 2;
    if (a2 + 2 != a3)
    {
      unsigned int v10 = *v9 & 0xFFFFFFF8;
      if (v10 == 48) {
        int v8 = a2 + 3;
      }
      else {
        int v8 = a2 + 2;
      }
      if (v10 == 48) {
        std::wstring::value_type v7 = *v9 + 8 * v7 - 48;
      }
      goto LABEL_39;
    }
  }
  int v8 = a3;
LABEL_39:
  if (this) {
    std::wstring::operator=(this, v7);
  }
  else {
    std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_char(a1, v7);
  }
  return v8;
}

void std::__bracket_expression<wchar_t,std::regex_traits<wchar_t>>::__add_range[abi:ne180100](uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v3 = a3;
  unint64_t v4 = a2;
  if (*(unsigned char *)(a1 + 170))
  {
    if (*(unsigned char *)(a1 + 169))
    {
      for (unint64_t i = 0; ; ++i)
      {
        unint64_t v7 = *((char *)v4 + 23) < 0 ? *((void *)v4 + 1) : *((unsigned __int8 *)v4 + 23);
        if (i >= v7) {
          break;
        }
        int v8 = v4;
        if ((*((unsigned char *)v4 + 23) & 0x80) != 0) {
          int v8 = *(unsigned int **)v4;
        }
        unsigned int v9 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 72))(*(void *)(a1 + 24), v8[i]);
        unsigned int v10 = v4;
        if (*((char *)v4 + 23) < 0) {
          unsigned int v10 = *(unsigned int **)v4;
        }
        v10[i] = v9;
      }
      for (unint64_t j = 0; ; ++j)
      {
        unint64_t v12 = *((char *)v3 + 23) < 0 ? *((void *)v3 + 1) : *((unsigned __int8 *)v3 + 23);
        if (j >= v12) {
          break;
        }
        std::wstring::value_type v13 = v3;
        if ((*((unsigned char *)v3 + 23) & 0x80) != 0) {
          std::wstring::value_type v13 = *(unsigned int **)v3;
        }
        unsigned int v14 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 72))(*(void *)(a1 + 24), v13[j]);
        int v15 = v3;
        if (*((char *)v3 + 23) < 0) {
          int v15 = *(unsigned int **)v3;
        }
        v15[j] = v14;
      }
    }
    else
    {
      for (unint64_t k = 0; ; ++k)
      {
        unint64_t v18 = *((char *)a2 + 23) < 0 ? *((void *)a2 + 1) : *((unsigned __int8 *)a2 + 23);
        if (k >= v18) {
          break;
        }
        unsigned __int8 v19 = a2;
        if ((*((unsigned char *)a2 + 23) & 0x80) != 0) {
          unsigned __int8 v19 = *(unsigned int **)a2;
        }
        int v20 = a2;
        if ((*((unsigned char *)a2 + 23) & 0x80) != 0) {
          int v20 = *(unsigned int **)a2;
        }
        v20[k] = v19[k];
      }
      for (unint64_t m = 0; ; ++m)
      {
        unint64_t v22 = *((char *)a3 + 23) < 0 ? *((void *)a3 + 1) : *((unsigned __int8 *)a3 + 23);
        if (m >= v22) {
          break;
        }
        size_t v23 = a3;
        if ((*((unsigned char *)a3 + 23) & 0x80) != 0) {
          size_t v23 = *(unsigned int **)a3;
        }
        std::wstring v24 = a3;
        if ((*((unsigned char *)a3 + 23) & 0x80) != 0) {
          std::wstring v24 = *(unsigned int **)a3;
        }
        v24[m] = v23[m];
      }
    }
    if (*((char *)v4 + 23) < 0)
    {
      std::wstring v26 = v4;
      unint64_t v4 = *(unsigned int **)v4;
      uint64_t v25 = *((void *)v26 + 1);
    }
    else
    {
      uint64_t v25 = *((unsigned __int8 *)v4 + 23);
    }
    std::regex_traits<wchar_t>::transform<wchar_t *>(a1 + 16, (int *)v4, (int *)&v4[v25]);
    if (*((char *)v3 + 23) < 0)
    {
      uint64_t v28 = v3;
      uint64_t v3 = *(unsigned int **)v3;
      uint64_t v27 = *((void *)v28 + 1);
    }
    else
    {
      uint64_t v27 = *((unsigned __int8 *)v3 + 23);
    }
    std::regex_traits<wchar_t>::transform<wchar_t *>(a1 + 16, (int *)v3, (int *)&v3[v27]);
    *(_OWORD *)unint64_t v40 = v38;
    uint64_t v41 = v39;
    *(_OWORD *)std::wstring __p = *(_OWORD *)v36;
    uint64_t v43 = v37;
    std::vector<std::pair<std::wstring,std::wstring>>::push_back[abi:ne180100]((std::vector<std::pair<std::wstring, std::wstring>> *)(a1 + 88), (long long *)v40);
    if (SHIBYTE(v43) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v41) < 0) {
      operator delete(v40[0]);
    }
  }
  else
  {
    if (*((char *)a2 + 23) < 0) {
      uint64_t v16 = *((void *)a2 + 1);
    }
    else {
      uint64_t v16 = *((unsigned __int8 *)a2 + 23);
    }
    if (v16 != 1
      || (*((char *)a3 + 23) < 0 ? (uint64_t v29 = *((void *)a3 + 1)) : (uint64_t v29 = *((unsigned __int8 *)a3 + 23)), v29 != 1))
    {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>();
    }
    if (*(unsigned char *)(a1 + 169))
    {
      std::string::size_type v30 = a2;
      if ((*((unsigned char *)a2 + 23) & 0x80) != 0) {
        std::string::size_type v30 = *(unsigned int **)a2;
      }
      int v31 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 72))(*(void *)(a1 + 24), *v30);
      int v32 = v4;
      if (*((char *)v4 + 23) < 0) {
        int v32 = *(_DWORD **)v4;
      }
      *int v32 = v31;
      int v33 = v3;
      if (*((char *)v3 + 23) < 0) {
        int v33 = *(unsigned int **)v3;
      }
      int v34 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 72))(*(void *)(a1 + 24), *v33);
      uint64_t v35 = v3;
      if (*((char *)v3 + 23) < 0) {
        uint64_t v35 = *(_DWORD **)v3;
      }
      *uint64_t v35 = v34;
    }
    *(_OWORD *)unint64_t v40 = *(_OWORD *)v4;
    uint64_t v41 = *((void *)v4 + 2);
    *((void *)v4 + 1) = 0;
    *((void *)v4 + 2) = 0;
    *(void *)unint64_t v4 = 0;
    *(_OWORD *)std::wstring __p = *(_OWORD *)v3;
    uint64_t v43 = *((void *)v3 + 2);
    *(void *)uint64_t v3 = 0;
    *((void *)v3 + 1) = 0;
    *((void *)v3 + 2) = 0;
    std::vector<std::pair<std::wstring,std::wstring>>::push_back[abi:ne180100]((std::vector<std::pair<std::wstring, std::wstring>> *)(a1 + 88), (long long *)v40);
    if (SHIBYTE(v43) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v41) < 0) {
      operator delete(v40[0]);
    }
  }
}

void sub_1B1C07710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
}

void std::__bracket_expression<wchar_t,std::regex_traits<wchar_t>>::__add_digraph[abi:ne180100](uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (!*(unsigned char *)(a1 + 169))
  {
    uint64_t v17 = a1 + 128;
    unint64_t v18 = *(void *)(a1 + 128);
    unsigned int v10 = (char **)(a1 + 112);
    unint64_t v8 = a2 | (unint64_t)(a3 << 32);
    unsigned int v9 = *(unint64_t **)(a1 + 120);
    if (*(unsigned char *)(a1 + 170))
    {
      if ((unint64_t)v9 < v18) {
        goto LABEL_22;
      }
      uint64_t v19 = ((char *)v9 - *v10) >> 3;
      if (!((unint64_t)(v19 + 1) >> 61))
      {
        uint64_t v20 = v18 - (void)*v10;
        uint64_t v21 = v20 >> 2;
        if (v20 >> 2 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        if (v22) {
          size_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v17, v22);
        }
        else {
          size_t v23 = 0;
        }
        uint64_t v25 = &v23[8 * v19];
        std::wstring v26 = &v23[8 * v22];
        *(void *)uint64_t v25 = v8;
        std::wstring v24 = v25 + 8;
        uint64_t v35 = *(char **)(a1 + 112);
        uint64_t v27 = *(char **)(a1 + 120);
        if (v27 == v35) {
          goto LABEL_43;
        }
        do
        {
          uint64_t v36 = *((void *)v27 - 1);
          v27 -= 8;
          *((void *)v25 - 1) = v36;
          v25 -= 8;
        }
        while (v27 != v35);
        goto LABEL_42;
      }
    }
    else
    {
      if ((unint64_t)v9 < v18) {
        goto LABEL_22;
      }
      uint64_t v30 = ((char *)v9 - *v10) >> 3;
      if (!((unint64_t)(v30 + 1) >> 61))
      {
        uint64_t v31 = v18 - (void)*v10;
        uint64_t v32 = v31 >> 2;
        if (v31 >> 2 <= (unint64_t)(v30 + 1)) {
          uint64_t v32 = v30 + 1;
        }
        if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v33 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v33 = v32;
        }
        if (v33) {
          int v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v17, v33);
        }
        else {
          int v34 = 0;
        }
        uint64_t v25 = &v34[8 * v30];
        std::wstring v26 = &v34[8 * v33];
        *(void *)uint64_t v25 = v8;
        std::wstring v24 = v25 + 8;
        uint64_t v37 = *(char **)(a1 + 112);
        uint64_t v27 = *(char **)(a1 + 120);
        if (v27 == v37) {
          goto LABEL_43;
        }
        do
        {
          uint64_t v38 = *((void *)v27 - 1);
          v27 -= 8;
          *((void *)v25 - 1) = v38;
          v25 -= 8;
        }
        while (v27 != v37);
        goto LABEL_42;
      }
    }
LABEL_46:
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  unsigned int v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 72))(*(void *)(a1 + 24));
  uint64_t v6 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 72))(*(void *)(a1 + 24), a3);
  unint64_t v7 = *(void *)(a1 + 128);
  unint64_t v8 = v5 | (unint64_t)(v6 << 32);
  unsigned int v9 = *(unint64_t **)(a1 + 120);
  if ((unint64_t)v9 < v7)
  {
LABEL_22:
    *unsigned int v9 = v8;
    std::wstring v24 = v9 + 1;
    goto LABEL_45;
  }
  unsigned int v10 = (char **)(a1 + 112);
  uint64_t v11 = *(void *)(a1 + 112);
  uint64_t v12 = ((uint64_t)v9 - v11) >> 3;
  if ((unint64_t)(v12 + 1) >> 61) {
    goto LABEL_46;
  }
  uint64_t v13 = v7 - v11;
  uint64_t v14 = v13 >> 2;
  if (v13 >> 2 <= (unint64_t)(v12 + 1)) {
    uint64_t v14 = v12 + 1;
  }
  if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v15 = v14;
  }
  if (v15) {
    uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1 + 128, v15);
  }
  else {
    uint64_t v16 = 0;
  }
  uint64_t v25 = &v16[8 * v12];
  std::wstring v26 = &v16[8 * v15];
  *(void *)uint64_t v25 = v8;
  std::wstring v24 = v25 + 8;
  uint64_t v28 = *(char **)(a1 + 112);
  uint64_t v27 = *(char **)(a1 + 120);
  if (v27 == v28) {
    goto LABEL_43;
  }
  do
  {
    uint64_t v29 = *((void *)v27 - 1);
    v27 -= 8;
    *((void *)v25 - 1) = v29;
    v25 -= 8;
  }
  while (v27 != v28);
LABEL_42:
  uint64_t v27 = *v10;
LABEL_43:
  *(void *)(a1 + 112) = v25;
  *(void *)(a1 + 120) = v24;
  *(void *)(a1 + 128) = v26;
  if (v27) {
    operator delete(v27);
  }
LABEL_45:
  *(void *)(a1 + 120) = v24;
}

uint64_t std::__bracket_expression<wchar_t,std::regex_traits<wchar_t>>::__add_equivalence[abi:ne180100](uint64_t *a1, long long *a2)
{
  uint64_t v3 = a1 + 17;
  unint64_t v4 = a1[18];
  if (v4 >= a1[19])
  {
    uint64_t result = std::vector<std::wstring>::__push_back_slow_path<std::wstring const&>(v3, a2);
  }
  else
  {
    std::vector<std::wstring>::__construct_one_at_end[abi:ne180100]<std::wstring const&>((uint64_t)v3, a2);
    uint64_t result = v4 + 24;
  }
  a1[18] = result;
  return result;
}

void std::vector<std::wstring>::__construct_one_at_end[abi:ne180100]<std::wstring const&>(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::basic_string<char32_t>::__init_copy_ctor_external(*(std::wstring **)(a1 + 8), *(const std::wstring::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *(void *)(v3 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v3 = v4;
  }
  *(void *)(a1 + 8) = v3 + 24;
}

void sub_1B1C07A60(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::wstring>::__push_back_slow_path<std::wstring const&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  __v.__end_cap_.__value_ = (std::allocator<std::wstring> *)(a1 + 2);
  if (v9) {
    unsigned int v10 = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  }
  else {
    unsigned int v10 = 0;
  }
  std::__split_buffer<std::wstring>::pointer end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::basic_string<char32_t>::__init_copy_ctor_external(end, *(const std::wstring::value_type **)a2, *((void *)a2 + 1));
    std::__split_buffer<std::wstring>::pointer end = __v.__end_;
  }
  else
  {
    long long v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::wstring>::__swap_out_circular_buffer((std::vector<std::wstring> *)a1, &__v);
  uint64_t v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_1B1C07B78(_Unwind_Exception *a1, std::__split_buffer<std::wstring> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void std::vector<std::wstring>::__swap_out_circular_buffer(std::vector<std::wstring> *this, std::__split_buffer<std::wstring> *__v)
{
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::wstring>,std::reverse_iterator<std::wstring*>,std::reverse_iterator<std::wstring*>,std::reverse_iterator<std::wstring*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  std::vector<std::wcsub_match>::pointer begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  std::__split_buffer<std::wstring>::pointer end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::wstring>,std::reverse_iterator<std::wstring*>,std::reverse_iterator<std::wstring*>,std::reverse_iterator<std::wstring*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - ++*(void *)(result + 24) = v10;
      v9 -= 24;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - ++*(void *)(result + 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((void *)&v15 + 1) = v9;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::wstring>,std::reverse_iterator<std::wstring*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::wstring>,std::reverse_iterator<std::wstring*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::regex_traits<wchar_t>::__lookup_classname<wchar_t const*>(uint64_t a1, int *a2, int *a3, BOOL a4)
{
  std::basic_string<char32_t>::__init_with_size[abi:ne180100]<char32_t const*,char32_t const*>(&v16, a2, a3, a3 - a2);
  std::string::size_type v6 = v18;
  if ((v18 & 0x80u) == 0) {
    uint64_t v7 = &v16;
  }
  else {
    uint64_t v7 = v16;
  }
  if ((v18 & 0x80u) != 0) {
    std::string::size_type v6 = v17;
  }
  (*(void (**)(void, void *, std::string::size_type))(**(void **)(a1 + 8) + 80))(*(void *)(a1 + 8), v7, (std::string::size_type)v7 + 4 * v6);
  memset(&__p, 0, sizeof(__p));
  if ((v18 & 0x80u) == 0) {
    std::string::size_type v8 = v18;
  }
  else {
    std::string::size_type v8 = v17;
  }
  std::string::reserve(&__p, v8);
  std::string::size_type v9 = v18;
  if ((v18 & 0x80u) == 0) {
    long long v10 = &v16;
  }
  else {
    long long v10 = v16;
  }
  if ((v18 & 0x80u) != 0) {
    std::string::size_type v9 = v17;
  }
  if (v9)
  {
    uint64_t v11 = 4 * v9;
    while (*v10 <= 0x7Eu)
    {
      std::string::push_back(&__p, *v10++);
      v11 -= 4;
      if (!v11) {
        goto LABEL_18;
      }
    }
    uint64_t classname = 0;
  }
  else
  {
LABEL_18:
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    uint64_t classname = std::__get_classname((const char *)p_p, a4);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((char)v18 < 0) {
    operator delete(v16);
  }
  return classname;
}

void sub_1B1C07E20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__bracket_expression<wchar_t,std::regex_traits<wchar_t>>::__add_neg_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  int v2 = a2;
  if (!*(unsigned char *)(a1 + 169))
  {
    unint64_t v12 = *(void *)(a1 + 80);
    char v13 = (void **)(a1 + 64);
    unint64_t v5 = *(char **)(a1 + 72);
    if (*(unsigned char *)(a1 + 170))
    {
      if ((unint64_t)v5 < v12) {
        goto LABEL_22;
      }
      std::string::size_type v6 = (char *)*v13;
      uint64_t v14 = (v5 - (unsigned char *)*v13) >> 2;
      if (!((unint64_t)(v14 + 1) >> 62))
      {
        unint64_t v15 = v12 - (void)v6;
        unint64_t v16 = (uint64_t)(v12 - (void)v6) >> 1;
        if (v16 <= v14 + 1) {
          unint64_t v16 = v14 + 1;
        }
        if (v15 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v16;
        }
        if (v17)
        {
          unsigned __int8 v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 80, v17);
          std::string::size_type v6 = *(char **)(a1 + 64);
          unint64_t v5 = *(char **)(a1 + 72);
        }
        else
        {
          unsigned __int8 v18 = 0;
        }
        uint64_t v20 = &v18[4 * v14];
        uint64_t v21 = &v18[4 * v17];
        *(_DWORD *)uint64_t v20 = v2;
        uint64_t v19 = v20 + 4;
        while (v5 != v6)
        {
          int v28 = *((_DWORD *)v5 - 1);
          v5 -= 4;
          *((_DWORD *)v20 - 1) = v28;
          v20 -= 4;
        }
        goto LABEL_43;
      }
    }
    else
    {
      if ((unint64_t)v5 < v12) {
        goto LABEL_22;
      }
      std::string::size_type v6 = (char *)*v13;
      uint64_t v23 = (v5 - (unsigned char *)*v13) >> 2;
      if (!((unint64_t)(v23 + 1) >> 62))
      {
        unint64_t v24 = v12 - (void)v6;
        unint64_t v25 = (uint64_t)(v12 - (void)v6) >> 1;
        if (v25 <= v23 + 1) {
          unint64_t v25 = v23 + 1;
        }
        if (v24 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v26 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v26 = v25;
        }
        if (v26)
        {
          uint64_t v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 80, v26);
          std::string::size_type v6 = *(char **)(a1 + 64);
          unint64_t v5 = *(char **)(a1 + 72);
        }
        else
        {
          uint64_t v27 = 0;
        }
        uint64_t v20 = &v27[4 * v23];
        uint64_t v21 = &v27[4 * v26];
        *(_DWORD *)uint64_t v20 = v2;
        uint64_t v19 = v20 + 4;
        while (v5 != v6)
        {
          int v29 = *((_DWORD *)v5 - 1);
          v5 -= 4;
          *((_DWORD *)v20 - 1) = v29;
          v20 -= 4;
        }
        goto LABEL_43;
      }
    }
LABEL_46:
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  int v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 72))(*(void *)(a1 + 24), a2);
  unint64_t v4 = *(void *)(a1 + 80);
  unint64_t v5 = *(char **)(a1 + 72);
  if ((unint64_t)v5 < v4)
  {
LABEL_22:
    *(_DWORD *)unint64_t v5 = v2;
    uint64_t v19 = v5 + 4;
    goto LABEL_45;
  }
  std::string::size_type v6 = *(char **)(a1 + 64);
  uint64_t v7 = (v5 - v6) >> 2;
  if ((unint64_t)(v7 + 1) >> 62) {
    goto LABEL_46;
  }
  unint64_t v8 = v4 - (void)v6;
  unint64_t v9 = (uint64_t)(v4 - (void)v6) >> 1;
  if (v9 <= v7 + 1) {
    unint64_t v9 = v7 + 1;
  }
  if (v8 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v10 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v9;
  }
  if (v10)
  {
    uint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 80, v10);
    std::string::size_type v6 = *(char **)(a1 + 64);
    unint64_t v5 = *(char **)(a1 + 72);
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v20 = &v11[4 * v7];
  uint64_t v21 = &v11[4 * v10];
  *(_DWORD *)uint64_t v20 = v2;
  uint64_t v19 = v20 + 4;
  while (v5 != v6)
  {
    int v22 = *((_DWORD *)v5 - 1);
    v5 -= 4;
    *((_DWORD *)v20 - 1) = v22;
    v20 -= 4;
  }
LABEL_43:
  *(void *)(a1 + 64) = v20;
  *(void *)(a1 + 72) = v19;
  *(void *)(a1 + 80) = v21;
  if (v6) {
    operator delete(v6);
  }
LABEL_45:
  *(void *)(a1 + 72) = v19;
}

void std::vector<std::pair<std::wstring,std::wstring>>::push_back[abi:ne180100](std::vector<std::pair<std::wstring, std::wstring>> *a1, long long *a2)
{
  value = a1->__end_cap_.__value_;
  p_end_cap = (std::allocator<std::pair<std::wstring, std::wstring>> *)&a1->__end_cap_;
  unint64_t v5 = value;
  unint64_t v7 = *((void *)p_end_cap - 1);
  if (v7 >= (unint64_t)value)
  {
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (unint64_t)a1->__begin_) >> 4);
    unint64_t v12 = v11 + 1;
    if (v11 + 1 > 0x555555555555555) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)a1->__begin_) >> 4);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v14 = 0x555555555555555;
    }
    else {
      unint64_t v14 = v12;
    }
    __v.__end_cap_.__value_ = p_end_cap;
    if (v14) {
      unint64_t v15 = (std::pair<std::wstring, std::wstring> *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>((uint64_t)p_end_cap, v14);
    }
    else {
      unint64_t v15 = 0;
    }
    unint64_t v16 = v15 + v11;
    __v.__first_ = v15;
    __v.__begin_ = v16;
    __v.__end_cap_.__value_ = &v15[v14];
    long long v17 = *a2;
    v16->first.__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v16->first.__r_.__value_.__l.__data_ = v17;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v18 = *(long long *)((char *)a2 + 24);
    v16->second.__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v16->second.__r_.__value_.__l.__data_ = v18;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    __v.__end_ = v16 + 1;
    std::vector<std::pair<std::wstring,std::wstring>>::__swap_out_circular_buffer(a1, &__v);
    std::__split_buffer<std::wstring>::pointer end = a1->__end_;
    std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer(&__v);
  }
  else
  {
    long long v8 = *a2;
    *(void *)(v7 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v7 = v8;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v9 = *(long long *)((char *)a2 + 24);
    *(void *)(v7 + 40) = *((void *)a2 + 5);
    *(_OWORD *)(v7 + ++*(void *)(result + 24) = v9;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    std::__split_buffer<std::wstring>::pointer end = (std::pair<std::wstring, std::wstring> *)(v7 + 48);
    a1->__end_ = (std::vector<std::pair<std::wstring, std::wstring>>::pointer)(v7 + 48);
  }
  a1->__end_ = end;
}

void sub_1B1C081E0(_Unwind_Exception *a1, std::__split_buffer<std::pair<std::wstring, std::wstring>> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void std::vector<std::pair<std::wstring,std::wstring>>::__swap_out_circular_buffer(std::vector<std::pair<std::wstring, std::wstring>> *this, std::__split_buffer<std::pair<std::wstring, std::wstring>> *__v)
{
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::wstring,std::wstring>>,std::reverse_iterator<std::pair<std::wstring,std::wstring>*>,std::reverse_iterator<std::pair<std::wstring,std::wstring>*>,std::reverse_iterator<std::pair<std::wstring,std::wstring>*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  std::vector<std::wcsub_match>::pointer begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  std::__split_buffer<std::wstring>::pointer end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::wstring,std::wstring>>,std::reverse_iterator<std::pair<std::wstring,std::wstring>*>,std::reverse_iterator<std::pair<std::wstring,std::wstring>*>,std::reverse_iterator<std::pair<std::wstring,std::wstring>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  _OWORD v13[2] = &v16;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 48);
      *(void *)(v9 - 32) = *(void *)(a3 - 32);
      *(_OWORD *)(v9 - 48) = v10;
      *(void *)(a3 - 40) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(a3 - 48) = 0;
      long long v11 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - ++*(void *)(result + 24) = v11;
      v9 -= 48;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - ++*(void *)(result + 24) = 0;
      v7 -= 48;
      a3 -= 48;
    }
    while (a3 != a5);
    *((void *)&v16 + 1) = v9;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::wstring,std::wstring>>,std::reverse_iterator<std::pair<std::wstring,std::wstring>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::wstring,std::wstring>>,std::reverse_iterator<std::pair<std::wstring,std::wstring>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void (__cdecl ***std::__begin_marked_subexpression<wchar_t>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<wchar_t> *__hidden this)))(std::__owns_one_state<wchar_t> *__hidden this)
{
  int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<wchar_t> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__begin_marked_subexpression<wchar_t>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<wchar_t> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<wchar_t> *__hidden)))*v1 + 1))(v1);
  }
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__begin_marked_subexpression<wchar_t>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(*(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(void *)(a2 + 16);
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void (__cdecl ***std::__end_marked_subexpression<wchar_t>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<wchar_t> *__hidden this)))(std::__owns_one_state<wchar_t> *__hidden this)
{
  int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<wchar_t> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__end_marked_subexpression<wchar_t>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<wchar_t> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<wchar_t> *__hidden)))*v1 + 1))(v1);
  }
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__end_marked_subexpression<wchar_t>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  uint64_t v2 = *(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(void *)(v2 + 8) = *(void *)(a2 + 16);
  *(unsigned char *)(v2 + 16) = 1;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_loop(std::basic_regex<wchar_t> *this, size_t __min, size_t __max, std::__owns_one_state<wchar_t> *__s, size_t __mexp_begin, size_t __mexp_end, BOOL __greedy)
{
}

void sub_1B1C0870C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unsigned int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_DUP_COUNT<wchar_t const*>(uint64_t a1, unsigned int *a2, unsigned int *a3, int *a4)
{
  unint64_t v4 = a2;
  if (a2 != a3)
  {
    int v8 = (*(uint64_t (**)(void, void, void))(**(void **)(a1 + 8) + 104))(*(void *)(a1 + 8), *a2, 0);
    if ((v8 & 0xFFFFFFF8) == 0x30 || (v8 & 0xFFFFFFFE) == 0x38)
    {
      *a4 = v8 - 48;
      if (++v4 == a3)
      {
        return a3;
      }
      else
      {
        while (1)
        {
          int v9 = (*(uint64_t (**)(void, void, void))(**(void **)(a1 + 8) + 104))(*(void *)(a1 + 8), *v4, 0);
          if ((v9 & 0xFFFFFFF8) != 0x30 && (v9 & 0xFFFFFFFE) != 0x38) {
            break;
          }
          if (*a4 >= 214748364) {
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
          }
          *a4 = 10 * *a4 + v9 - 48;
          if (++v4 == a3) {
            return a3;
          }
        }
      }
    }
  }
  return v4;
}

void std::__loop<wchar_t>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<wchar_t> *__hidden this))
{
  std::__owns_two_states<wchar_t>::~__owns_two_states(a1);
  JUMPOUT(0x1B3EA8670);
}

unsigned int *std::__loop<wchar_t>::__exec(unsigned int *result, void *a2)
{
  uint64_t v2 = result[10];
  uint64_t v3 = a2[7];
  unint64_t v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 == -991)
  {
    unint64_t v5 = *v4 + 1;
    unint64_t *v4 = v5;
    unint64_t v6 = *((void *)result + 3);
    unint64_t v7 = *((void *)result + 4);
    BOOL v8 = v5 < v7;
    if (v5 < v7 && v5 >= v6)
    {
      uint64_t v10 = *(void *)(v3 + 16 * v2 + 8);
      BOOL v8 = v5 < v7 && v10 != a2[2];
    }
    if (!v8 || v5 < v6)
    {
      *(_DWORD *)a2 = -994;
      if (!v8) {
        goto LABEL_25;
      }
LABEL_22:
      a2[10] = *((void *)result + 1);
      return std::__loop<char>::__init_repeat[abi:ne180100](result, a2);
    }
    goto LABEL_23;
  }
  unint64_t *v4 = 0;
  if (*((void *)result + 4))
  {
    if (*((void *)result + 3))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_22;
    }
LABEL_23:
    *(_DWORD *)a2 = -992;
    return result;
  }
  *(_DWORD *)a2 = -994;
LABEL_25:
  a2[10] = *((void *)result + 2);
  return result;
}

unsigned int *std::__loop<wchar_t>::__exec_split(unsigned int *result, int a2, void *a3)
{
  *(_DWORD *)a3 = -994;
  if (*((unsigned __int8 *)result + 52) == a2)
  {
    a3[10] = *((void *)result + 2);
  }
  else
  {
    a3[10] = *((void *)result + 1);
    return std::__loop<char>::__init_repeat[abi:ne180100](result, a3);
  }
  return result;
}

void std::__owns_two_states<wchar_t>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<wchar_t> *__hidden this))
{
  std::__owns_two_states<wchar_t>::~__owns_two_states(a1);
  JUMPOUT(0x1B3EA8670);
}

void (__cdecl ***std::__owns_two_states<wchar_t>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<wchar_t> *__hidden this)))(std::__owns_one_state<wchar_t> *__hidden this)
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<wchar_t> *__hidden))&unk_1F0A5D928;
  uint64_t v2 = a1[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<wchar_t> *__hidden)))*v2 + 1))(v2);
  }
  uint64_t v3 = a1[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<wchar_t> *__hidden)))*v3 + 1))(v3);
  }
  return a1;
}

void std::__repeat_one_loop<wchar_t>::~__repeat_one_loop()
{
}

uint64_t std::__repeat_one_loop<wchar_t>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void std::__alternate<wchar_t>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<wchar_t> *__hidden this))
{
  std::__owns_two_states<wchar_t>::~__owns_two_states(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__alternate<wchar_t>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

uint64_t std::__alternate<wchar_t>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)a3 = -994;
  uint64_t v3 = 8;
  if (a2) {
    uint64_t v3 = 16;
  }
  *(void *)(a3 + 80) = *(void *)(result + v3);
  return result;
}

void std::__empty_non_own_state<wchar_t>::~__empty_non_own_state()
{
}

uint64_t std::__empty_non_own_state<wchar_t>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

unsigned int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_simple_RE<wchar_t const*>(std::basic_regex<wchar_t> *a1, int *a2, int *a3)
{
  if (a2 == a3) {
    return (unsigned int *)a2;
  }
  std::__split_buffer<std::wstring>::pointer end = a1->__end_;
  unsigned int marked_count = a1->__marked_count_;
  BOOL v8 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_nondupl_RE<wchar_t const*>(a1, a2, a3);
  if (v8 == a2) {
    return (unsigned int *)a2;
  }
  size_t v9 = a1->__marked_count_ + 1;
  return std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_RE_dupl_symbol<wchar_t const*>(a1, (unsigned int *)v8, (unsigned int *)a3, end, marked_count + 1, v9);
}

int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_nondupl_RE<wchar_t const*>(std::basic_regex<wchar_t> *a1, int *a2, int *a3)
{
  unint64_t v6 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_one_char_or_coll_elem_RE<wchar_t const*>(a1, a2, a3);
  unint64_t v7 = v6;
  if (v6 == a2 && v6 != a3)
  {
    BOOL v8 = a2 + 1;
    if (a2 + 1 == a3 || *a2 != 92)
    {
      return a2;
    }
    else if (*v8 == 40)
    {
      uint64_t v9 = (uint64_t)(a2 + 2);
      std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_begin_marked_subexpression(a1);
      unsigned int marked_count = a1->__marked_count_;
      do
      {
        long long v11 = (int *)v9;
        uint64_t v9 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_simple_RE<wchar_t const*>(a1, v9, a3);
      }
      while ((int *)v9 != v11);
      if (v11 == a3 || v11 + 1 == a3 || *v11 != 92 || v11[1] != 41) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      }
      unint64_t v7 = v11 + 2;
      std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_end_marked_subexpression(a1, marked_count);
    }
    else
    {
      BOOL v13 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__test_back_ref(a1, *v8);
      uint64_t v14 = 2;
      if (!v13) {
        uint64_t v14 = 0;
      }
      return &a2[v14];
    }
  }
  return v7;
}

unsigned int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_RE_dupl_symbol<wchar_t const*>(std::basic_regex<wchar_t> *this, unsigned int *a2, unsigned int *a3, std::__owns_one_state<wchar_t> *__s, size_t __mexp_begin, size_t __mexp_end)
{
  unint64_t v6 = a2;
  if (a2 != a3)
  {
    unsigned int v7 = __mexp_end;
    unsigned int v8 = __mexp_begin;
    if (*a2 == 42)
    {
      std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_loop(this, 0, 0xFFFFFFFFFFFFFFFFLL, __s, __mexp_begin, __mexp_end, 1);
      return ++v6;
    }
    if (a2 + 1 != a3 && *a2 == 92 && a2[1] == 123)
    {
      unint64_t v12 = a2 + 2;
      int v23 = 0;
      BOOL v13 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_DUP_COUNT<wchar_t const*>((uint64_t)this, a2 + 2, a3, &v23);
      if (v13 == v12) {
        goto LABEL_16;
      }
      if (v13 != a3)
      {
        uint64_t v14 = v13 + 1;
        if (*v13 == 44)
        {
          int v22 = -1;
          long long v15 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_DUP_COUNT<wchar_t const*>((uint64_t)this, v14, a3, &v22);
          if (v15 != a3 && v15 + 1 != a3 && *v15 == 92 && v15[1] == 125)
          {
            size_t v17 = v22;
            size_t v16 = v23;
            if (v22 == -1)
            {
              size_t v17 = -1;
            }
            else if (v22 < v23)
            {
LABEL_16:
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
            }
            unint64_t v6 = &v15[2 * (v15[1] == 125)];
            size_t v18 = v8;
            size_t v19 = v7;
            uint64_t v20 = this;
LABEL_23:
            std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_loop(v20, v16, v17, __s, v18, v19, 1);
            return v6;
          }
        }
        else if (v14 != a3 && *v13 == 92 && *v14 == 125)
        {
          unint64_t v6 = v13 + 2;
          size_t v16 = v23;
          size_t v18 = v8;
          size_t v19 = v7;
          uint64_t v20 = this;
          size_t v17 = v23;
          goto LABEL_23;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
  }
  return v6;
}

int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_one_char_or_coll_elem_RE<wchar_t const*>(std::basic_regex<wchar_t> *this, int *a2, int *a3)
{
  if (a2 == a3)
  {
    uint64_t result = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_QUOTED_CHAR<wchar_t const*>(this, a2, a3);
    if (result != a2) {
      return result;
    }
  }
  else
  {
    std::basic_regex<wchar_t>::value_type v6 = *a2;
    if ((a2 + 1 != a3 || v6 != 36)
      && ((v6 - 46) > 0x2E || ((1 << (v6 - 46)) & 0x600000000001) == 0))
    {
      std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_char(this, v6);
      return a2 + 1;
    }
    uint64_t result = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_QUOTED_CHAR<wchar_t const*>(this, a2, a3);
    if (result != a2) {
      return result;
    }
    if (*a2 == 46) {
      operator new();
    }
  }
  return std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_bracket_expression<wchar_t const*>((uint64_t)this, a2, a3);
}

_DWORD *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_QUOTED_CHAR<wchar_t const*>(std::basic_regex<wchar_t> *a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v3 = a2;
  if (a2 != a3 && a2 + 1 != a3 && *a2 == 92)
  {
    std::basic_regex<wchar_t>::value_type v4 = a2[1];
    if ((v4 - 36) <= 0x3A && ((1 << (v4 - 36)) & 0x580000000000441) != 0)
    {
      std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_char(a1, v4);
      v3 += 2;
    }
  }
  return v3;
}

void (__cdecl ***std::__match_any<wchar_t>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<wchar_t> *__hidden this)))(std::__owns_one_state<wchar_t> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<wchar_t> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__match_any<wchar_t>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<wchar_t> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<wchar_t> *__hidden)))*v1 + 1))(v1);
  }
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__match_any<wchar_t>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(_DWORD **)(a2 + 16);
  if (v2 == *(_DWORD **)(a2 + 24) || !*v2)
  {
    uint64_t v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }
  *(void *)(a2 + 80) = v3;
  return result;
}

BOOL std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__test_back_ref(std::basic_regex<wchar_t> *this, __int32 a2)
{
  int v3 = ((uint64_t (*)(const std::ctype<wchar_t> *, void, void))this->__traits_.__ct_->do_narrow)(this->__traits_.__ct_, *(void *)&a2, 0);
  if ((v3 & 0xFFFFFFF8) == 0x30 || (BOOL result = 0, (v3 & 0xFFFFFFFE) == 0x38))
  {
    if (v3 - 49 > 8)
    {
      return 0;
    }
    else
    {
      if (v3 - 48 > this->__marked_count_) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
      }
      std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_back_ref(this, v3 - 48);
      return 1;
    }
  }
  return result;
}

unsigned int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_ERE_branch<wchar_t const*>(std::basic_regex<wchar_t> *a1, std::basic_regex<wchar_t> *a2, std::basic_regex<wchar_t> *a3)
{
  std::basic_regex<wchar_t>::value_type v6 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_ERE_expression<wchar_t const*>(a1, a2, a3);
  if (v6 == (unsigned int *)a2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  }
  do
  {
    unsigned int v7 = v6;
    std::basic_regex<wchar_t>::value_type v6 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_ERE_expression<wchar_t const*>(a1, (std::basic_regex<wchar_t> *)v6, a3);
  }
  while (v6 != v7);
  return v7;
}

unsigned int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_ERE_expression<wchar_t const*>(std::basic_regex<wchar_t> *a1, std::basic_regex<wchar_t> *a2, std::basic_regex<wchar_t> *a3)
{
  std::__split_buffer<std::wstring>::pointer end = a1->__end_;
  unsigned int marked_count = a1->__marked_count_;
  unsigned int v8 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_one_char_or_coll_elem_ERE<wchar_t const*>(a1, a2, a3);
  uint64_t v9 = v8;
  if (v8 != (int *)a2 || v8 == (int *)a3) {
    goto LABEL_12;
  }
  int locale = (int)a2->__traits_.__loc_.__locale_;
  if (LODWORD(a2->__traits_.__loc_.__locale_) == 36)
  {
    std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_r_anchor(a1);
    goto LABEL_8;
  }
  if (locale == 40)
  {
    std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_begin_marked_subexpression(a1);
    unsigned int v11 = a1->__marked_count_;
    ++a1->__open_count_;
    unint64_t v12 = (std::basic_regex<wchar_t> *)std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_extended_reg_exp<wchar_t const*>(a1, (char *)&a2->__traits_.__loc_.__locale_ + 4, a3);
    if (v12 == a3 || (BOOL v13 = v12, LODWORD(v12->__traits_.__loc_.__locale_) != 41)) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    }
    std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_end_marked_subexpression(a1, v11);
    --a1->__open_count_;
    uint64_t v9 = (int *)&v13->__traits_.__loc_.__locale_ + 1;
LABEL_12:
    if (v9 != (int *)a2) {
      goto LABEL_13;
    }
    return (unsigned int *)a2;
  }
  if (locale != 94) {
    return (unsigned int *)a2;
  }
  std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_l_anchor(a1);
LABEL_8:
  uint64_t v9 = (int *)&a2->__traits_.__loc_.__locale_ + 1;
LABEL_13:
  size_t v14 = a1->__marked_count_ + 1;
  return std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_ERE_dupl_symbol<wchar_t const*>((uint64_t)a1, v9, (unsigned int *)a3, end, marked_count + 1, v14);
}

int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_one_char_or_coll_elem_ERE<wchar_t const*>(std::basic_regex<wchar_t> *a1, std::basic_regex<wchar_t> *a2, std::basic_regex<wchar_t> *a3)
{
  BOOL result = (int *)std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_ORD_CHAR_ERE<wchar_t const*>(a1, a2, a3);
  if (result == (int *)a2)
  {
    BOOL result = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_QUOTED_CHAR_ERE<wchar_t const*>((uint64_t)a1, (std::wstring::value_type *)a2, (std::wstring::value_type *)a3);
    if (result == (int *)a2)
    {
      if (a2 != a3 && LODWORD(a2->__traits_.__loc_.__locale_) == 46) {
        operator new();
      }
      return std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_bracket_expression<wchar_t const*>((uint64_t)a1, (int *)a2, (int *)a3);
    }
  }
  return result;
}

std::basic_regex<wchar_t> *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_ORD_CHAR_ERE<wchar_t const*>(std::basic_regex<wchar_t> *a1, std::basic_regex<wchar_t> *this, std::basic_regex<wchar_t> *a3)
{
  int v3 = this;
  if (this != a3)
  {
    std::basic_regex<wchar_t>::value_type locale = (std::basic_regex<wchar_t>::value_type)this->__traits_.__loc_.__locale_;
    uint64_t v5 = (locale - 36);
    if (v5 > 0x3A) {
      goto LABEL_8;
    }
    if (((1 << (locale - 36)) & 0x5800000080004D1) != 0) {
      return v3;
    }
    if (v5 == 5)
    {
      if (a1->__open_count_) {
        return v3;
      }
      std::basic_regex<wchar_t>::value_type locale = 41;
    }
    else
    {
LABEL_8:
      if ((locale - 123) < 2) {
        return v3;
      }
    }
    std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_char(a1, locale);
    return (std::basic_regex<wchar_t> *)((char *)v3 + 4);
  }
  return v3;
}

std::wstring::value_type *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_QUOTED_CHAR_ERE<wchar_t const*>(uint64_t a1, std::wstring::value_type *a2, std::wstring::value_type *a3)
{
  int v3 = a2;
  if (a2 == a3) {
    return v3;
  }
  std::basic_regex<wchar_t>::value_type v4 = a2 + 1;
  if (v3 + 1 == a3 || *v3 != 92) {
    return v3;
  }
  BOOL v5 = (*v4 - 36) > 0x3A || ((1 << (*v4 - 36)) & 0x5800000080004F1) == 0;
  if (!v5 || (*v4 - 123) < 3)
  {
    std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_char((std::basic_regex<wchar_t> *)a1, *v4);
    v3 += 2;
    return v3;
  }
  if ((*(_DWORD *)(a1 + 24) & 0x1F0) != 0x40)
  {
    BOOL v7 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__test_back_ref((std::basic_regex<wchar_t> *)a1, *v4);
    uint64_t v8 = 8;
    if (!v7) {
      uint64_t v8 = 0;
    }
    return (std::wstring::value_type *)((char *)v3 + v8);
  }
  return std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_awk_escape<wchar_t const*>((std::basic_regex<wchar_t> *)a1, v4, a3, 0);
}

void std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::basic_regex[abi:ne180100]<std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::regex_traits<wchar_t> *a1, uint64_t a2, int a3)
{
  std::basic_regex<wchar_t>::value_type v4 = std::regex_traits<wchar_t>::regex_traits(a1);
  LODWORD(v4[1].__loc_.__locale_) = a3;
  *(_OWORD *)((char *)&v4[1].__loc_.__locale_ + 4) = 0u;
  *(_OWORD *)((char *)&v4[1].__col_ + 4) = 0u;
  HIDWORD(v4[2].__ct_) = 0;
  std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse<std::__wrap_iter<wchar_t const*>>();
}

void sub_1B1C0967C(_Unwind_Exception *a1)
{
  std::basic_regex<wchar_t>::value_type locale = (std::__shared_weak_count *)v1[6].__locale_;
  if (locale) {
    std::__shared_weak_count::__release_shared[abi:ne180100](locale);
  }
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse<std::__wrap_iter<wchar_t const*>>()
{
}

void sub_1B1C0985C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_ecma_exp<std::__wrap_iter<wchar_t const*>>(std::basic_regex<wchar_t> *a1, int *a2, int *a3)
{
  std::__split_buffer<std::wstring>::pointer end = a1->__end_;
  BOOL v7 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_alternative<std::__wrap_iter<wchar_t const*>>(a1, a2, a3);
  if (v7 == a2) {
    operator new();
  }
  while (v7 != a3)
  {
    if (*v7 != 124) {
      return v7;
    }
    uint64_t v8 = a1->__end_;
    uint64_t v9 = v7 + 1;
    BOOL v7 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_alternative<std::__wrap_iter<wchar_t const*>>(a1, v7 + 1, a3);
    if (v9 == v7) {
      operator new();
    }
    std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_alternation(a1, end, v8);
  }
  return a3;
}

int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_basic_reg_exp<std::__wrap_iter<wchar_t const*>>(std::basic_regex<wchar_t> *this, int *a2, int *a3)
{
  int v3 = a2;
  if (a2 == a3) {
    return a2;
  }
  std::basic_regex<wchar_t>::value_type v4 = a3;
  if (*a2 == 94)
  {
    std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_l_anchor(this);
    ++v3;
  }
  if (v3 != v4)
  {
    do
    {
      std::basic_regex<wchar_t>::value_type v6 = v3;
      int v3 = (int *)std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_simple_RE<std::__wrap_iter<wchar_t const*>>(this, v3, v4);
    }
    while (v6 != v3);
    if (v6 != v4)
    {
      if (v6 + 1 != v4 || *v6 != 36) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      }
      std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_r_anchor(this);
    }
  }
  return v4;
}

std::basic_regex<wchar_t> *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_extended_reg_exp<std::__wrap_iter<wchar_t const*>>(std::basic_regex<wchar_t> *a1, std::basic_regex<wchar_t> *a2, std::basic_regex<wchar_t> *a3)
{
  std::__split_buffer<std::wstring>::pointer end = a1->__end_;
  BOOL v7 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_ERE_branch<std::__wrap_iter<wchar_t const*>>(a1, a2, a3);
  if (v7 == (unsigned int *)a2) {
LABEL_9:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  uint64_t v8 = v7;
  while (v8 != (unsigned int *)a3)
  {
    if (*v8 != 124) {
      return (std::basic_regex<wchar_t> *)v8;
    }
    uint64_t v9 = a1->__end_;
    uint64_t v10 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_ERE_branch<std::__wrap_iter<wchar_t const*>>(a1, (std::basic_regex<wchar_t> *)(v8 + 1), a3);
    if (v8 + 1 == v10) {
      goto LABEL_9;
    }
    uint64_t v8 = v10;
    std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_alternation(a1, end, v9);
  }
  return a3;
}

__int32 *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_grep<std::__wrap_iter<wchar_t const*>>(std::basic_regex<wchar_t> *a1, __int32 *__s, __int32 *a3)
{
  std::__split_buffer<std::wstring>::pointer end = a1->__end_;
  BOOL v7 = wmemchr(__s, 10, a3 - __s);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = a3;
  }
  if (v8 == __s) {
    operator new();
  }
  std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_basic_reg_exp<std::__wrap_iter<wchar_t const*>>(a1, __s, v8);
  while (1)
  {
    unsigned int v11 = &v8[v8 != a3];
    if (v11 == a3) {
      break;
    }
    uint64_t v9 = wmemchr(v11, 10, a3 - v11);
    if (v9) {
      uint64_t v8 = v9;
    }
    else {
      uint64_t v8 = a3;
    }
    uint64_t v10 = a1->__end_;
    if (v8 == v11) {
      operator new();
    }
    std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_basic_reg_exp<std::__wrap_iter<wchar_t const*>>(a1, v11, v8);
    std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_alternation(a1, end, v10);
  }
  return a3;
}

__int32 *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_egrep<std::__wrap_iter<wchar_t const*>>(std::basic_regex<wchar_t> *a1, __int32 *__s, __int32 *a3)
{
  std::__split_buffer<std::wstring>::pointer end = a1->__end_;
  BOOL v7 = wmemchr(__s, 10, a3 - __s);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = a3;
  }
  if (v8 == __s) {
    operator new();
  }
  std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_extended_reg_exp<std::__wrap_iter<wchar_t const*>>(a1, (std::basic_regex<wchar_t> *)__s, (std::basic_regex<wchar_t> *)v8);
  while (1)
  {
    unsigned int v11 = &v8[v8 != a3];
    if (v11 == a3) {
      break;
    }
    uint64_t v9 = wmemchr(v11, 10, a3 - v11);
    if (v9) {
      uint64_t v8 = v9;
    }
    else {
      uint64_t v8 = a3;
    }
    uint64_t v10 = a1->__end_;
    if (v8 == v11) {
      operator new();
    }
    std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_extended_reg_exp<std::__wrap_iter<wchar_t const*>>(a1, (std::basic_regex<wchar_t> *)v11, (std::basic_regex<wchar_t> *)v8);
    std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_alternation(a1, end, v10);
  }
  return a3;
}

int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_alternative<std::__wrap_iter<wchar_t const*>>(std::basic_regex<wchar_t> *a1, int *a2, int *a3)
{
  do
  {
    BOOL v5 = a2;
    a2 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_term<std::__wrap_iter<wchar_t const*>>(a1, a2, a3);
  }
  while (v5 != a2);
  return v5;
}

int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_term<std::__wrap_iter<wchar_t const*>>(std::basic_regex<wchar_t> *a1, int *a2, int *a3)
{
  BOOL result = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_assertion<std::__wrap_iter<wchar_t const*>>(a1, a2, a3);
  if (result == a2)
  {
    std::__split_buffer<std::wstring>::pointer end = a1->__end_;
    unsigned int marked_count = a1->__marked_count_;
    uint64_t v9 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_atom<std::__wrap_iter<wchar_t const*>>(a1, a2, a3);
    BOOL result = a2;
    if (v9 != a2)
    {
      size_t v10 = a1->__marked_count_ + 1;
      return (int *)std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_ERE_dupl_symbol<std::__wrap_iter<wchar_t const*>>((uint64_t)a1, v9, (unsigned int *)a3, end, marked_count + 1, v10);
    }
  }
  return result;
}

int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_assertion<std::__wrap_iter<wchar_t const*>>(std::basic_regex<wchar_t> *this, int *a2, int *a3)
{
  int v3 = a2;
  if (a2 == a3) {
    return v3;
  }
  int v6 = *a2;
  if (*a2 <= 91)
  {
    if (v6 != 36)
    {
      if (v6 == 40 && a2 + 1 != a3 && a2[1] == 63 && a2 + 2 != a3)
      {
        int v7 = a2[2];
        if (v7 == 33)
        {
          std::regex_traits<wchar_t>::regex_traits(&v14.__traits_);
          memset(&v14.__flags_, 0, 40);
          v14.__flags_ = this->__flags_;
          uint64_t v8 = (int *)std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse<std::__wrap_iter<wchar_t const*>>(&v14, v3 + 3, a3);
          unsigned int marked_count = v14.__marked_count_;
          std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_lookahead(this, &v14, 1, this->__marked_count_);
          this->__marked_count_ += marked_count;
          if (v8 == a3 || *v8 != 41) {
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
          }
          goto LABEL_27;
        }
        if (v7 == 61)
        {
          std::regex_traits<wchar_t>::regex_traits(&v14.__traits_);
          memset(&v14.__flags_, 0, 40);
          v14.__flags_ = this->__flags_;
          uint64_t v8 = (int *)std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse<std::__wrap_iter<wchar_t const*>>(&v14, v3 + 3, a3);
          unsigned int v9 = v14.__marked_count_;
          std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_lookahead(this, &v14, 0, this->__marked_count_);
          this->__marked_count_ += v9;
          if (v8 == a3 || *v8 != 41) {
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
          }
LABEL_27:
          int v3 = v8 + 1;
          std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&v14.__traits_.__loc_);
          return v3;
        }
      }
      return v3;
    }
    std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_r_anchor(this);
    return ++v3;
  }
  if (v6 != 92)
  {
    if (v6 != 94) {
      return v3;
    }
    std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_l_anchor(this);
    return ++v3;
  }
  if (a2 + 1 != a3)
  {
    int v11 = a2[1];
    if (v11 == 66)
    {
      BOOL v12 = 1;
    }
    else
    {
      if (v11 != 98) {
        return v3;
      }
      BOOL v12 = 0;
    }
    std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_word_boundary(this, v12);
    v3 += 2;
  }
  return v3;
}

void sub_1B1C0A0F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_atom<std::__wrap_iter<wchar_t const*>>(std::basic_regex<wchar_t> *this, std::basic_regex<wchar_t>::value_type *a2, std::basic_regex<wchar_t>::value_type *a3)
{
  int v3 = a2;
  if (a2 != a3)
  {
    int v6 = *a2;
    if (*a2 <= 62)
    {
      if (v6 != 40)
      {
        if (v6 == 46) {
          operator new();
        }
        if ((v6 - 42) >= 2) {
          return std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_pattern_character<wchar_t const*>(this, a2, a3);
        }
LABEL_28:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
      }
      uint64_t v8 = a2 + 1;
      if (a2 + 1 != a3)
      {
        if (a2 + 2 != a3 && *v8 == 63 && a2[2] == 58)
        {
          ++this->__open_count_;
          unsigned int v9 = (std::basic_regex<wchar_t>::value_type *)std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_ecma_exp<std::__wrap_iter<wchar_t const*>>(this, a2 + 3, a3);
          if (v9 != a3 && *v9 == 41)
          {
            --this->__open_count_;
            return v9 + 1;
          }
        }
        else
        {
          std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_begin_marked_subexpression(this);
          unsigned int marked_count = this->__marked_count_;
          ++this->__open_count_;
          int v11 = (std::basic_regex<wchar_t>::value_type *)std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_ecma_exp<std::__wrap_iter<wchar_t const*>>(this, v8, a3);
          if (v11 != a3)
          {
            BOOL v12 = v11;
            if (*v11 == 41)
            {
              std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_end_marked_subexpression(this, marked_count);
              --this->__open_count_;
              return v12 + 1;
            }
          }
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    }
    if (v6 > 91)
    {
      if (v6 == 92) {
        return std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_atom_escape<std::__wrap_iter<wchar_t const*>>(this, a2, a3);
      }
      if (v6 == 123) {
        goto LABEL_28;
      }
    }
    else
    {
      if (v6 == 91) {
        return std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_bracket_expression<std::__wrap_iter<wchar_t const*>>((uint64_t)this, a2, a3);
      }
      if (v6 == 63) {
        goto LABEL_28;
      }
    }
    return std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_pattern_character<wchar_t const*>(this, a2, a3);
  }
  return v3;
}

unsigned int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_ERE_dupl_symbol<std::__wrap_iter<wchar_t const*>>(uint64_t a1, int *a2, unsigned int *a3, std::__owns_one_state<wchar_t> *__s, size_t a5, size_t a6)
{
  if (a2 == (int *)a3) {
    return (unsigned int *)a2;
  }
  unsigned int v6 = a6;
  unsigned int v7 = a5;
  uint64_t v10 = a1;
  int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  int v12 = *a2;
  if (*a2 > 62)
  {
    if (v12 == 63)
    {
      BOOL v13 = (unsigned int *)(a2 + 1);
      if (v11) {
        BOOL v19 = 1;
      }
      else {
        BOOL v19 = v13 == a3;
      }
      if (!v19 && *v13 == 63)
      {
        BOOL v13 = (unsigned int *)(a2 + 2);
        a5 = a5;
        a6 = a6;
        size_t v14 = 0;
        size_t v17 = 1;
        goto LABEL_33;
      }
      a5 = a5;
      a6 = a6;
      size_t v14 = 0;
      size_t v17 = 1;
      goto LABEL_45;
    }
    BOOL v13 = (unsigned int *)a2;
    if (v12 != 123) {
      return v13;
    }
    long long v15 = (unsigned int *)(a2 + 1);
    size_t v16 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_DUP_COUNT<wchar_t const*>(a1, (unsigned int *)a2 + 1, a3, (int *)&__max);
    if (v15 != v16)
    {
      if (v16 != a3)
      {
        if (*v16 != 44)
        {
          if (*v16 == 125)
          {
            BOOL v13 = v16 + 1;
            if (!v11 && v13 != a3 && *v13 == 63)
            {
              BOOL v13 = v16 + 2;
              size_t v14 = (int)__max;
              a5 = v7;
              a6 = v6;
              a1 = v10;
              size_t v17 = (int)__max;
LABEL_33:
              uint64_t v20 = __s;
              BOOL v21 = 0;
LABEL_46:
              std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_loop((std::basic_regex<wchar_t> *)a1, v14, v17, v20, a5, a6, v21);
              return v13;
            }
            size_t v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            size_t v17 = (int)__max;
LABEL_45:
            uint64_t v20 = __s;
            BOOL v21 = 1;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
        int v22 = v16 + 1;
        if (v16 + 1 == a3) {
          goto LABEL_58;
        }
        if (*v22 == 125)
        {
          BOOL v13 = v16 + 2;
          if (!v11 && v13 != a3 && *v13 == 63)
          {
            BOOL v13 = v16 + 3;
            size_t v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            goto LABEL_26;
          }
          size_t v14 = (int)__max;
          a5 = v7;
          a6 = v6;
          a1 = v10;
LABEL_36:
          size_t v17 = -1;
          goto LABEL_45;
        }
        int v26 = -1;
        unint64_t v24 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_DUP_COUNT<wchar_t const*>(v10, v22, a3, &v26);
        if (v22 != v24 && v24 != a3 && *v24 == 125)
        {
          size_t v17 = v26;
          size_t v14 = (int)__max;
          if (v26 >= (int)__max)
          {
            BOOL v13 = v24 + 1;
            BOOL v21 = 1;
            if (!v11 && v13 != a3)
            {
              unsigned int v25 = v24[1];
              BOOL v21 = v25 != 63;
              if (v25 == 63) {
                BOOL v13 = v24 + 2;
              }
            }
            a5 = v7;
            a6 = v6;
            a1 = v10;
            uint64_t v20 = __s;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
LABEL_58:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  if (v12 == 42)
  {
    BOOL v13 = (unsigned int *)(a2 + 1);
    if (v11) {
      BOOL v18 = 1;
    }
    else {
      BOOL v18 = v13 == a3;
    }
    if (!v18 && *v13 == 63)
    {
      BOOL v13 = (unsigned int *)(a2 + 2);
      a5 = a5;
      a6 = a6;
      size_t v14 = 0;
      goto LABEL_26;
    }
    a5 = a5;
    a6 = a6;
    size_t v14 = 0;
    goto LABEL_36;
  }
  BOOL v13 = (unsigned int *)a2;
  if (v12 == 43)
  {
    BOOL v13 = (unsigned int *)(a2 + 1);
    if (!v11 && v13 != a3 && *v13 == 63)
    {
      BOOL v13 = (unsigned int *)(a2 + 2);
      a5 = a5;
      a6 = a6;
      size_t v14 = 1;
LABEL_26:
      size_t v17 = -1;
      goto LABEL_33;
    }
    a5 = a5;
    a6 = a6;
    size_t v14 = 1;
    goto LABEL_36;
  }
  return v13;
}

int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_atom_escape<std::__wrap_iter<wchar_t const*>>(std::basic_regex<wchar_t> *a1, int *a2, int *a3)
{
  if (a2 == a3 || *a2 != 92) {
    return a2;
  }
  BOOL v5 = a2 + 1;
  if (a2 + 1 == a3) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  }
  BOOL result = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_decimal_escape<std::__wrap_iter<wchar_t const*>>(a1, a2 + 1, a3);
  if (v5 == result)
  {
    BOOL result = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_character_class_escape<wchar_t const*>(a1, a2 + 1, a3);
    if (v5 == result)
    {
      BOOL result = (int *)std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_character_escape<std::__wrap_iter<wchar_t const*>>(a1, a2 + 1, a3, 0);
      if (v5 == result) {
        return a2;
      }
    }
  }
  return result;
}

int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_bracket_expression<std::__wrap_iter<wchar_t const*>>(uint64_t a1, int *a2, int *a3)
{
  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3) {
      goto LABEL_20;
    }
    BOOL v5 = a2[1] == 94 ? a2 + 2 : a2 + 1;
    started = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__start_matching_list((std::basic_regex<wchar_t> *)a1, a2[1] == 94);
    if (v5 == a3) {
      goto LABEL_20;
    }
    unsigned int v7 = (uint64_t *)started;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *v5 == 93)
    {
      std::__bracket_expression<wchar_t,std::regex_traits<wchar_t>>::__add_char[abi:ne180100]((uint64_t)started, 93);
      ++v5;
    }
    if (v5 == a3) {
      goto LABEL_20;
    }
    do
    {
      uint64_t v8 = v5;
      BOOL v5 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_expression_term<std::__wrap_iter<wchar_t const*>>(a1, v5, a3, v7);
    }
    while (v8 != v5);
    if (v8 == a3) {
      goto LABEL_20;
    }
    if (*v8 == 45)
    {
      std::__bracket_expression<wchar_t,std::regex_traits<wchar_t>>::__add_char[abi:ne180100]((uint64_t)v7, 45);
      ++v8;
    }
    if (v8 == a3 || *v8 != 93) {
LABEL_20:
    }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
    return v8 + 1;
  }
  return a2;
}

int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_decimal_escape<std::__wrap_iter<wchar_t const*>>(std::basic_regex<wchar_t> *a1, int *a2, int *a3)
{
  int v3 = a2;
  if (a2 != a3)
  {
    int v4 = *a2;
    unsigned __int32 v5 = *a2 - 48;
    if (v4 == 48)
    {
      std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_char(a1, v5);
      return ++v3;
    }
    if ((v4 - 49) > 8) {
      return v3;
    }
    if (++v3 == a3)
    {
      int v3 = a3;
    }
    else
    {
      while (1)
      {
        int v6 = *v3;
        if ((*v3 - 48) > 9) {
          break;
        }
        if (v5 >= 0x19999999) {
          goto LABEL_16;
        }
        ++v3;
        unsigned __int32 v5 = v6 + 10 * v5 - 48;
        if (v3 == a3)
        {
          int v3 = a3;
          break;
        }
      }
      if (!v5) {
        goto LABEL_16;
      }
    }
    if (v5 <= a1->__marked_count_)
    {
      std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_back_ref(a1, v5);
      return v3;
    }
LABEL_16:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  return v3;
}

unsigned int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_character_escape<std::__wrap_iter<wchar_t const*>>(std::basic_regex<wchar_t> *this, int *a2, int *a3, std::wstring *a4)
{
  int v4 = a2;
  if (a2 == a3) {
    return (unsigned int *)v4;
  }
  unsigned int v7 = this;
  int v8 = *a2;
  if (*a2 > 101)
  {
    int v9 = 0;
    switch(v8)
    {
      case 'n':
        if (a4)
        {
          uint64_t v10 = a4;
          std::wstring::value_type v11 = 10;
          goto LABEL_52;
        }
        std::wstring::value_type v11 = 10;
        goto LABEL_64;
      case 'o':
      case 'p':
      case 'q':
      case 's':
      case 'w':
        goto LABEL_49;
      case 'r':
        if (a4)
        {
          uint64_t v10 = a4;
          std::wstring::value_type v11 = 13;
          goto LABEL_52;
        }
        std::wstring::value_type v11 = 13;
        goto LABEL_64;
      case 't':
        if (a4)
        {
          uint64_t v10 = a4;
          std::wstring::value_type v11 = 9;
          goto LABEL_52;
        }
        std::wstring::value_type v11 = 9;
        goto LABEL_64;
      case 'u':
        if (a2 + 1 == a3) {
          goto LABEL_67;
        }
        int v14 = ((uint64_t (*)(const std::ctype<wchar_t> *, void, void))this->__traits_.__ct_->do_narrow)(this->__traits_.__ct_, a2[1], 0);
        unsigned __int8 v15 = v14;
        int v16 = -48;
        if ((v14 & 0xFFFFFFF8) == 0x30 || (v14 & 0xFFFFFFFE) == 0x38) {
          goto LABEL_28;
        }
        unsigned __int8 v15 = v14 | 0x20;
        if (((v14 | 0x20) - 97) >= 6u) {
          goto LABEL_67;
        }
        int v16 = -87;
LABEL_28:
        v4 += 2;
        if (v4 == a3) {
          goto LABEL_67;
        }
        int v17 = ((uint64_t (*)(const std::ctype<wchar_t> *, void, void))v7->__traits_.__ct_->do_narrow)(v7->__traits_.__ct_, *v4, 0);
        int v18 = -48;
        if ((v17 & 0xFFFFFFF8) == 0x30 || (v17 & 0xFFFFFFFE) == 0x38) {
          goto LABEL_33;
        }
        LOBYTE(v17) = v17 | 0x20;
        if ((v17 - 97) >= 6u) {
          goto LABEL_67;
        }
        int v18 = -87;
LABEL_33:
        int v9 = ((v16 + v15) << 8) + 16 * (v18 + v17);
LABEL_34:
        if (v4 + 1 == a3) {
          goto LABEL_67;
        }
        int v19 = ((uint64_t (*)(const std::ctype<wchar_t> *, void, void))v7->__traits_.__ct_->do_narrow)(v7->__traits_.__ct_, v4[1], 0);
        unsigned __int8 v20 = v19;
        int v21 = -48;
        if ((v19 & 0xFFFFFFF8) == 0x30 || (v19 & 0xFFFFFFFE) == 0x38) {
          goto LABEL_39;
        }
        unsigned __int8 v20 = v19 | 0x20;
        if (((v19 | 0x20) - 97) >= 6u) {
          goto LABEL_67;
        }
        int v21 = -87;
LABEL_39:
        if (v4 + 2 == a3) {
          goto LABEL_67;
        }
        int v22 = ((uint64_t (*)(const std::ctype<wchar_t> *, void, void))v7->__traits_.__ct_->do_narrow)(v7->__traits_.__ct_, v4[2], 0);
        int v23 = -48;
        if ((v22 & 0xFFFFFFF8) == 0x30 || (v22 & 0xFFFFFFFE) == 0x38) {
          goto LABEL_44;
        }
        LOBYTE(v22) = v22 | 0x20;
        if ((v22 - 97) >= 6u) {
          goto LABEL_67;
        }
        int v23 = -87;
LABEL_44:
        std::wstring::value_type v24 = v23 + v22 + 16 * (v21 + v20 + v9);
        if (a4) {
          std::wstring::operator=(a4, v24);
        }
        else {
          std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_char(v7, v24);
        }
        v4 += 3;
        return (unsigned int *)v4;
      case 'v':
        if (a4)
        {
          uint64_t v10 = a4;
          std::wstring::value_type v11 = 11;
          goto LABEL_52;
        }
        std::wstring::value_type v11 = 11;
        goto LABEL_64;
      case 'x':
        goto LABEL_34;
      default:
        if (v8 != 102) {
          goto LABEL_49;
        }
        if (a4)
        {
          uint64_t v10 = a4;
          std::wstring::value_type v11 = 12;
          goto LABEL_52;
        }
        std::wstring::value_type v11 = 12;
        break;
    }
    goto LABEL_64;
  }
  if (v8 == 48)
  {
    if (a4)
    {
      uint64_t v10 = a4;
      std::wstring::value_type v11 = 0;
LABEL_52:
      std::wstring::operator=(v10, v11);
      return (unsigned int *)++v4;
    }
    std::wstring::value_type v11 = 0;
LABEL_64:
    std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_char(this, v11);
    return (unsigned int *)++v4;
  }
  if (v8 != 99)
  {
    if (v8 == 95) {
      goto LABEL_67;
    }
LABEL_49:
    if (((uint64_t (*)(const std::ctype<wchar_t> *, uint64_t))this->__traits_.__ct_->do_is)(this->__traits_.__ct_, 1280))LABEL_67:std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>(); {
    std::wstring::value_type v11 = *v4;
    }
    if (a4)
    {
      uint64_t v10 = a4;
      goto LABEL_52;
    }
    this = v7;
    goto LABEL_64;
  }
  if (a2 + 1 == a3) {
    goto LABEL_67;
  }
  int v12 = a2[1];
  if (v12 < 65 || v12 >= 0x5B && (v12 - 97) > 0x19) {
    goto LABEL_67;
  }
  std::wstring::value_type v13 = a2[1] & 0x1F;
  if (a4) {
    std::wstring::operator=(a4, v13);
  }
  else {
    std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_char(this, v13);
  }
  v4 += 2;
  return (unsigned int *)v4;
}

std::wstring::value_type *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_expression_term<std::__wrap_iter<wchar_t const*>>(uint64_t a1, int *a2, int *a3, uint64_t *a4)
{
  int v4 = a2;
  if (a2 == a3) {
    return v4;
  }
  std::wstring::value_type v5 = *a2;
  if (*a2 == 93) {
    return v4;
  }
  uint64_t v6 = (uint64_t)a4;
  memset(&v26, 0, sizeof(v26));
  if (a2 + 1 == a3 || v5 != 91)
  {
LABEL_9:
    int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
    goto LABEL_10;
  }
  int v9 = a2[1];
  if (v9 != 46)
  {
    if (v9 == 58)
    {
      uint64_t v10 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_character_class<std::__wrap_iter<wchar_t const*>>(a1, a2 + 2, a3, (uint64_t)a4);
      goto LABEL_38;
    }
    if (v9 == 61)
    {
      uint64_t v10 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_equivalence_class<std::__wrap_iter<wchar_t const*>>(a1, a2 + 2, a3, a4);
LABEL_38:
      uint64_t v6 = (uint64_t)v10;
      char v20 = 0;
      goto LABEL_42;
    }
    goto LABEL_9;
  }
  int v18 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_collating_symbol<std::__wrap_iter<wchar_t const*>>(a1, a2 + 2, a3, (uint64_t)&v26);
  int v4 = v18;
  int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  std::wstring::size_type size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::wstring::size_type size = v26.__r_.__value_.__l.__size_;
  }
  int v14 = v18;
  if (!size)
  {
LABEL_10:
    if ((v11 | 0x40) == 0x40)
    {
      std::wstring::value_type v12 = *v4;
      if (*v4 == 92)
      {
        std::wstring::value_type v13 = v4 + 1;
        if (v11)
        {
          int v14 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_awk_escape<std::__wrap_iter<wchar_t const*>>((std::basic_regex<wchar_t> *)a1, v13, a3, &v26);
        }
        else
        {
          int v14 = (int *)std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_class_escape<std::__wrap_iter<wchar_t const*>>((std::basic_regex<wchar_t> *)a1, v13, a3, &v26, v6);
          int v11 = 0;
        }
        goto LABEL_16;
      }
    }
    else
    {
      std::wstring::value_type v12 = *v4;
    }
    std::wstring::operator=(&v26, v12);
    int v14 = v4 + 1;
  }
LABEL_16:
  if (v14 == a3 || *v14 == 93 || (int v16 = v14 + 1, v14 + 1 == a3) || *v14 != 45 || *v16 == 93)
  {
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v26.__r_.__value_.__l.__size_)
      {
        if (v26.__r_.__value_.__l.__size_ != 1)
        {
          unsigned __int8 v15 = (std::wstring *)v26.__r_.__value_.__r.__words[0];
LABEL_40:
          std::__bracket_expression<wchar_t,std::regex_traits<wchar_t>>::__add_digraph[abi:ne180100](v6, v15->__r_.__value_.__s.__data_[0], v15->__r_.__value_.__s.__data_[1]);
          goto LABEL_41;
        }
        unsigned __int8 v15 = (std::wstring *)v26.__r_.__value_.__r.__words[0];
        goto LABEL_25;
      }
    }
    else if (*((unsigned char *)&v26.__r_.__value_.__s + 23))
    {
      unsigned __int8 v15 = &v26;
      if (HIBYTE(v26.__r_.__value_.__r.__words[2]) != 1) {
        goto LABEL_40;
      }
LABEL_25:
      std::__bracket_expression<wchar_t,std::regex_traits<wchar_t>>::__add_char[abi:ne180100](v6, v15->__r_.__value_.__s.__data_[0]);
    }
LABEL_41:
    char v20 = 1;
    int v4 = v14;
    goto LABEL_42;
  }
  memset(&v25, 0, sizeof(v25));
  int v4 = v14 + 2;
  if (v14 + 2 != a3 && *v16 == 91 && *v4 == 46)
  {
    int v17 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_collating_symbol<std::__wrap_iter<wchar_t const*>>(a1, v14 + 3, a3, (uint64_t)&v25);
LABEL_55:
    int v4 = v17;
    goto LABEL_56;
  }
  if ((v11 | 0x40) == 0x40)
  {
    std::wstring::value_type v22 = *v16;
    if (*v16 == 92)
    {
      if (v11) {
        int v17 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_awk_escape<std::__wrap_iter<wchar_t const*>>((std::basic_regex<wchar_t> *)a1, v14 + 2, a3, &v25);
      }
      else {
        int v17 = (std::wstring::value_type *)std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_class_escape<std::__wrap_iter<wchar_t const*>>((std::basic_regex<wchar_t> *)a1, v14 + 2, a3, &v25, v6);
      }
      goto LABEL_55;
    }
  }
  else
  {
    std::wstring::value_type v22 = *v16;
  }
  std::wstring::operator=(&v25, v22);
LABEL_56:
  std::wstring v24 = v26;
  memset(&v26, 0, sizeof(v26));
  std::wstring __p = v25;
  memset(&v25, 0, sizeof(v25));
  std::__bracket_expression<wchar_t,std::regex_traits<wchar_t>>::__add_range[abi:ne180100](v6, (unsigned int *)&v24, (unsigned int *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  char v20 = 1;
LABEL_42:
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (v20) {
    return v4;
  }
  return (std::wstring::value_type *)v6;
}

void sub_1B1C0AFF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v28 - 49) < 0) {
    operator delete(*(void **)(v28 - 72));
  }
  _Unwind_Resume(exception_object);
}

int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_equivalence_class<std::__wrap_iter<wchar_t const*>>(uint64_t a1, int *a2, int *a3, uint64_t *a4)
{
  if ((char *)a3 - (char *)a2 < 8 || a3 - 1 == a2) {
    goto LABEL_33;
  }
  uint64_t v6 = 4 * ((unint64_t)((char *)a3 - (char *)a2) >> 2) - 8;
  unsigned int v7 = a2;
  int v8 = a2;
  for (i = a2; ; int v8 = i)
  {
    int v10 = *i++;
    if (v10 == 61 && v8[1] == 93) {
      break;
    }
    if (!v6) {
      goto LABEL_33;
    }
    ++v7;
    v6 -= 4;
  }
  if (v8 == a3) {
LABEL_33:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<wchar_t>::__lookup_collatename<wchar_t *>(a1, a2, v7, (uint64_t)&v20);
  if (((char)v22 & 0x80000000) == 0)
  {
    uint64_t v11 = v22;
    if (v22)
    {
      std::wstring::value_type v12 = (int *)&v20;
      goto LABEL_14;
    }
LABEL_34:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  uint64_t v11 = v21;
  if (!v21) {
    goto LABEL_34;
  }
  std::wstring::value_type v12 = (int *)v20;
LABEL_14:
  std::regex_traits<wchar_t>::__transform_primary<wchar_t *>(a1, v12, &v12[v11], (uint64_t)__p);
  unint64_t v13 = v19;
  if ((v19 & 0x80u) != 0) {
    unint64_t v13 = (unint64_t)__p[1];
  }
  if (v13)
  {
    std::__bracket_expression<wchar_t,std::regex_traits<wchar_t>>::__add_equivalence[abi:ne180100](a4, (long long *)__p);
  }
  else
  {
    uint64_t v14 = v22;
    if ((v22 & 0x80u) != 0) {
      uint64_t v14 = v21;
    }
    if (v14 == 2)
    {
      int v16 = (unsigned int *)&v20;
      if ((v22 & 0x80u) != 0) {
        int v16 = (unsigned int *)v20;
      }
      std::__bracket_expression<wchar_t,std::regex_traits<wchar_t>>::__add_digraph[abi:ne180100]((uint64_t)a4, *v16, v16[1]);
    }
    else
    {
      if (v14 != 1) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
      }
      unsigned __int8 v15 = (unsigned int *)&v20;
      if ((v22 & 0x80u) != 0) {
        unsigned __int8 v15 = (unsigned int *)v20;
      }
      std::__bracket_expression<wchar_t,std::regex_traits<wchar_t>>::__add_char[abi:ne180100]((uint64_t)a4, *v15);
    }
  }
  if ((char)v19 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v22 < 0) {
    operator delete(v20);
  }
  return v7 + 2;
}

void sub_1B1C0B214(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_character_class<std::__wrap_iter<wchar_t const*>>(uint64_t a1, int *a2, int *a3, uint64_t a4)
{
  if ((char *)a3 - (char *)a2 < 8 || a3 - 1 == a2) {
    goto LABEL_11;
  }
  uint64_t v5 = 4 * ((unint64_t)((char *)a3 - (char *)a2) >> 2) - 8;
  uint64_t v6 = a2;
  unsigned int v7 = a2;
  for (i = a2; ; unsigned int v7 = i)
  {
    int v9 = *i++;
    if (v9 == 58 && v7[1] == 93) {
      break;
    }
    if (!v5) {
      goto LABEL_11;
    }
    ++v6;
    v5 -= 4;
  }
  if (v7 == a3) {
LABEL_11:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  int v10 = std::regex_traits<wchar_t>::__lookup_classname<wchar_t const*>(a1, a2, v6, *(_DWORD *)(a1 + 24) & 1);
  if (!v10) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
  }
  *(_DWORD *)(a4 + 160) |= v10;
  return v6 + 2;
}

int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_collating_symbol<std::__wrap_iter<wchar_t const*>>(uint64_t a1, int *a2, int *a3, uint64_t a4)
{
  if ((char *)a3 - (char *)a2 < 8 || a3 - 1 == a2) {
    goto LABEL_15;
  }
  uint64_t v5 = 4 * ((unint64_t)((char *)a3 - (char *)a2) >> 2) - 8;
  uint64_t v6 = a2;
  unsigned int v7 = a2;
  for (i = a2; ; unsigned int v7 = i)
  {
    int v9 = *i++;
    if (v9 == 46 && v7[1] == 93) {
      break;
    }
    if (!v5) {
      goto LABEL_15;
    }
    ++v6;
    v5 -= 4;
  }
  if (v7 == a3) {
LABEL_15:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<wchar_t>::__lookup_collatename<wchar_t *>(a1, a2, v6, (uint64_t)&v13);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(_OWORD *)a4 = v13;
  unint64_t v10 = v14;
  *(void *)(a4 + 16) = v14;
  unint64_t v11 = HIBYTE(v10);
  if ((v11 & 0x80u) != 0) {
    unint64_t v11 = *(void *)(a4 + 8);
  }
  if (v11 - 1 >= 2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  return v6 + 2;
}

unsigned int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_class_escape<std::__wrap_iter<wchar_t const*>>(std::basic_regex<wchar_t> *a1, int *a2, int *a3, std::wstring *this, uint64_t a5)
{
  if (a2 == a3) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  }
  int v6 = *a2;
  if (*a2 > 97)
  {
    if (v6 > 114)
    {
      if (v6 != 115)
      {
        if (v6 != 119) {
          return std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_character_escape<std::__wrap_iter<wchar_t const*>>(a1, a2, a3, this);
        }
        *(_DWORD *)(a5 + 160) |= 0x500u;
        std::__bracket_expression<wchar_t,std::regex_traits<wchar_t>>::__add_char[abi:ne180100](a5, 95);
        return (unsigned int *)(a2 + 1);
      }
      int v8 = *(_DWORD *)(a5 + 160) | 0x4000;
    }
    else
    {
      if (v6 == 98)
      {
        int v9 = this;
        std::wstring::value_type v10 = 8;
LABEL_19:
        std::wstring::operator=(v9, v10);
        return (unsigned int *)(a2 + 1);
      }
      if (v6 != 100) {
        return std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_character_escape<std::__wrap_iter<wchar_t const*>>(a1, a2, a3, this);
      }
      int v8 = *(_DWORD *)(a5 + 160) | 0x400;
    }
    *(_DWORD *)(a5 + 160) = v8;
    return (unsigned int *)(a2 + 1);
  }
  if (v6 <= 82)
  {
    if (v6)
    {
      if (v6 == 68)
      {
        int v7 = *(_DWORD *)(a5 + 164) | 0x400;
LABEL_21:
        *(_DWORD *)(a5 + 164) = v7;
        return (unsigned int *)(a2 + 1);
      }
      return std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_character_escape<std::__wrap_iter<wchar_t const*>>(a1, a2, a3, this);
    }
    int v9 = this;
    std::wstring::value_type v10 = 0;
    goto LABEL_19;
  }
  if (v6 == 83)
  {
    int v7 = *(_DWORD *)(a5 + 164) | 0x4000;
    goto LABEL_21;
  }
  if (v6 == 87)
  {
    *(_DWORD *)(a5 + 164) |= 0x500u;
    std::__bracket_expression<wchar_t,std::regex_traits<wchar_t>>::__add_neg_char[abi:ne180100](a5, 95);
    return (unsigned int *)(a2 + 1);
  }
  return std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_character_escape<std::__wrap_iter<wchar_t const*>>(a1, a2, a3, this);
}

std::wstring::value_type *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_awk_escape<std::__wrap_iter<wchar_t const*>>(std::basic_regex<wchar_t> *a1, std::wstring::value_type *a2, std::wstring::value_type *a3, std::wstring *this)
{
  if (a2 == a3) {
LABEL_52:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  std::wstring::value_type v5 = *a2;
  if (v5 > 97)
  {
    switch(v5)
    {
      case 'n':
        if (this)
        {
          int v6 = this;
          std::wstring::value_type v5 = 10;
          goto LABEL_16;
        }
        std::wstring::value_type v5 = 10;
        goto LABEL_49;
      case 'o':
      case 'p':
      case 'q':
      case 's':
      case 'u':
        goto LABEL_21;
      case 'r':
        if (this)
        {
          int v6 = this;
          std::wstring::value_type v5 = 13;
          goto LABEL_16;
        }
        std::wstring::value_type v5 = 13;
        goto LABEL_49;
      case 't':
        if (this)
        {
          int v6 = this;
          std::wstring::value_type v5 = 9;
          goto LABEL_16;
        }
        std::wstring::value_type v5 = 9;
        goto LABEL_49;
      case 'v':
        if (this)
        {
          int v6 = this;
          std::wstring::value_type v5 = 11;
          goto LABEL_16;
        }
        std::wstring::value_type v5 = 11;
        goto LABEL_49;
      default:
        if (v5 == 98)
        {
          if (this)
          {
            int v6 = this;
            std::wstring::value_type v5 = 8;
            goto LABEL_16;
          }
          std::wstring::value_type v5 = 8;
        }
        else
        {
          if (v5 != 102) {
            goto LABEL_21;
          }
          if (this)
          {
            int v6 = this;
            std::wstring::value_type v5 = 12;
            goto LABEL_16;
          }
          std::wstring::value_type v5 = 12;
        }
        break;
    }
    goto LABEL_49;
  }
  if (v5 > 91)
  {
    if (v5 != 92)
    {
      if (v5 != 97) {
        goto LABEL_21;
      }
      if (this)
      {
        int v6 = this;
        std::wstring::value_type v5 = 7;
LABEL_16:
        std::wstring::operator=(v6, v5);
        return a2 + 1;
      }
      std::wstring::value_type v5 = 7;
LABEL_49:
      std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_char(a1, v5);
      return a2 + 1;
    }
LABEL_14:
    if (this)
    {
      int v6 = this;
      goto LABEL_16;
    }
    goto LABEL_49;
  }
  if (v5 == 34 || v5 == 47) {
    goto LABEL_14;
  }
LABEL_21:
  if ((v5 & 0xFFFFFFF8) != 0x30) {
    goto LABEL_52;
  }
  std::wstring::value_type v7 = v5 - 48;
  int v8 = a2 + 1;
  if (a2 + 1 != a3)
  {
    if ((*v8 & 0xFFFFFFF8) != 0x30) {
      goto LABEL_39;
    }
    std::wstring::value_type v7 = *v8 + 8 * v7 - 48;
    int v9 = a2 + 2;
    if (a2 + 2 != a3)
    {
      unsigned int v10 = *v9 & 0xFFFFFFF8;
      if (v10 == 48) {
        int v8 = a2 + 3;
      }
      else {
        int v8 = a2 + 2;
      }
      if (v10 == 48) {
        std::wstring::value_type v7 = *v9 + 8 * v7 - 48;
      }
      goto LABEL_39;
    }
  }
  int v8 = a3;
LABEL_39:
  if (this) {
    std::wstring::operator=(this, v7);
  }
  else {
    std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_char(a1, v7);
  }
  return v8;
}

uint64_t std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_RE_expression<std::__wrap_iter<wchar_t const*>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  do
  {
    uint64_t v5 = a2;
    a2 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_simple_RE<std::__wrap_iter<wchar_t const*>>(a1, a2, a3);
  }
  while (v5 != a2);
  return v5;
}

unsigned int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_simple_RE<std::__wrap_iter<wchar_t const*>>(std::basic_regex<wchar_t> *a1, int *a2, int *a3)
{
  if (a2 == a3) {
    return (unsigned int *)a2;
  }
  std::__split_buffer<std::wstring>::pointer end = a1->__end_;
  unsigned int marked_count = a1->__marked_count_;
  int v8 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_nondupl_RE<std::__wrap_iter<wchar_t const*>>(a1, a2, a3);
  if (v8 == a2) {
    return (unsigned int *)a2;
  }
  size_t v9 = a1->__marked_count_ + 1;
  return std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_RE_dupl_symbol<std::__wrap_iter<wchar_t const*>>(a1, (unsigned int *)v8, (unsigned int *)a3, end, marked_count + 1, v9);
}

int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_nondupl_RE<std::__wrap_iter<wchar_t const*>>(std::basic_regex<wchar_t> *a1, int *a2, int *a3)
{
  int v6 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_one_char_or_coll_elem_RE<std::__wrap_iter<wchar_t const*>>(a1, a2, a3);
  std::wstring::value_type v7 = v6;
  if (a2 == v6 && a2 != a3 && a2 + 1 != a3)
  {
    uint64_t v9 = (uint64_t)v6;
    if (*a2 == 92) {
      uint64_t v9 = (uint64_t)&a2[2 * (a2[1] == 40)];
    }
    if ((int *)v9 == a2)
    {
      if (*a2 == 92)
      {
        BOOL v12 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__test_back_ref(a1, a2[1]);
        uint64_t v13 = 2;
        if (!v12) {
          uint64_t v13 = 0;
        }
        return &a2[v13];
      }
    }
    else
    {
      std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_begin_marked_subexpression(a1);
      unsigned int marked_count = a1->__marked_count_;
      unint64_t v11 = (int *)std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_RE_expression<std::__wrap_iter<wchar_t const*>>((uint64_t)a1, v9, (uint64_t)a3);
      if (v11 == a3 || v11 + 1 == a3 || *v11 != 92 || v11[1] != 41) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      }
      std::wstring::value_type v7 = v11 + 2;
      std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_end_marked_subexpression(a1, marked_count);
    }
  }
  return v7;
}

unsigned int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_RE_dupl_symbol<std::__wrap_iter<wchar_t const*>>(std::basic_regex<wchar_t> *this, unsigned int *a2, unsigned int *a3, std::__owns_one_state<wchar_t> *__s, size_t __mexp_begin, size_t __mexp_end)
{
  int v6 = a2;
  if (a2 != a3)
  {
    unsigned int v7 = __mexp_end;
    unsigned int v8 = __mexp_begin;
    if (*a2 == 42)
    {
      std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_loop(this, 0, 0xFFFFFFFFFFFFFFFFLL, __s, __mexp_begin, __mexp_end, 1);
      return ++v6;
    }
    if (a2 + 1 != a3 && *a2 == 92 && a2[1] == 123)
    {
      BOOL v12 = a2 + 2;
      int v23 = 0;
      uint64_t v13 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_DUP_COUNT<wchar_t const*>((uint64_t)this, a2 + 2, a3, &v23);
      if (v12 == v13) {
        goto LABEL_16;
      }
      if (v13 != a3)
      {
        unint64_t v14 = v13 + 1;
        if (*v13 == 44)
        {
          int v22 = -1;
          unsigned __int8 v15 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_DUP_COUNT<wchar_t const*>((uint64_t)this, v14, a3, &v22);
          if (v15 != a3 && v15 + 1 != a3 && *v15 == 92 && v15[1] == 125)
          {
            size_t v17 = v22;
            size_t v16 = v23;
            if (v22 == -1)
            {
              size_t v17 = -1;
            }
            else if (v22 < v23)
            {
LABEL_16:
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
            }
            int v6 = &v15[2 * (v15[1] == 125)];
            size_t v18 = v8;
            size_t v19 = v7;
            char v20 = this;
LABEL_23:
            std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_loop(v20, v16, v17, __s, v18, v19, 1);
            return v6;
          }
        }
        else if (v14 != a3 && *v13 == 92 && *v14 == 125)
        {
          int v6 = v13 + 2;
          size_t v16 = v23;
          size_t v18 = v8;
          size_t v19 = v7;
          char v20 = this;
          size_t v17 = v23;
          goto LABEL_23;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
  }
  return v6;
}

int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_one_char_or_coll_elem_RE<std::__wrap_iter<wchar_t const*>>(std::basic_regex<wchar_t> *this, int *a2, int *a3)
{
  if (a2 == a3)
  {
    BOOL result = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_QUOTED_CHAR<wchar_t const*>(this, a2, a3);
    if (result != a2) {
      return result;
    }
  }
  else
  {
    std::basic_regex<wchar_t>::value_type v6 = *a2;
    if ((a2 + 1 != a3 || v6 != 36)
      && ((v6 - 46) > 0x2E || ((1 << (v6 - 46)) & 0x600000000001) == 0))
    {
      std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_char(this, v6);
      return a2 + 1;
    }
    BOOL result = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_QUOTED_CHAR<wchar_t const*>(this, a2, a3);
    if (result != a2) {
      return result;
    }
    if (*a2 == 46) {
      operator new();
    }
  }
  return std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_bracket_expression<std::__wrap_iter<wchar_t const*>>((uint64_t)this, a2, a3);
}

unsigned int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_ERE_branch<std::__wrap_iter<wchar_t const*>>(std::basic_regex<wchar_t> *a1, std::basic_regex<wchar_t> *a2, std::basic_regex<wchar_t> *a3)
{
  std::basic_regex<wchar_t>::value_type v6 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_ERE_expression<std::__wrap_iter<wchar_t const*>>(a1, a2, a3);
  if (v6 == (unsigned int *)a2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  }
  do
  {
    unsigned int v7 = v6;
    std::basic_regex<wchar_t>::value_type v6 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_ERE_expression<std::__wrap_iter<wchar_t const*>>(a1, (std::basic_regex<wchar_t> *)v6, a3);
  }
  while (v7 != v6);
  return v7;
}

unsigned int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_ERE_expression<std::__wrap_iter<wchar_t const*>>(std::basic_regex<wchar_t> *a1, std::basic_regex<wchar_t> *a2, std::basic_regex<wchar_t> *a3)
{
  std::__split_buffer<std::wstring>::pointer end = a1->__end_;
  unsigned int marked_count = a1->__marked_count_;
  unsigned int v8 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_one_char_or_coll_elem_ERE<std::__wrap_iter<wchar_t const*>>(a1, a2, a3);
  uint64_t v9 = v8;
  if (v8 != (int *)a2 || v8 == (int *)a3) {
    goto LABEL_12;
  }
  int locale = (int)a2->__traits_.__loc_.__locale_;
  if (LODWORD(a2->__traits_.__loc_.__locale_) == 36)
  {
    std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_r_anchor(a1);
    goto LABEL_8;
  }
  if (locale == 40)
  {
    std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_begin_marked_subexpression(a1);
    unsigned int v11 = a1->__marked_count_;
    ++a1->__open_count_;
    BOOL v12 = (std::basic_regex<wchar_t> *)std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_extended_reg_exp<std::__wrap_iter<wchar_t const*>>(a1, (char *)&a2->__traits_.__loc_.__locale_ + 4, a3);
    if (v12 == a3 || (uint64_t v13 = v12, LODWORD(v12->__traits_.__loc_.__locale_) != 41)) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    }
    std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_end_marked_subexpression(a1, v11);
    --a1->__open_count_;
    uint64_t v9 = (int *)&v13->__traits_.__loc_.__locale_ + 1;
LABEL_12:
    if (v9 != (int *)a2) {
      goto LABEL_13;
    }
    return (unsigned int *)a2;
  }
  if (locale != 94) {
    return (unsigned int *)a2;
  }
  std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_l_anchor(a1);
LABEL_8:
  uint64_t v9 = (int *)&a2->__traits_.__loc_.__locale_ + 1;
LABEL_13:
  size_t v14 = a1->__marked_count_ + 1;
  return std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_ERE_dupl_symbol<std::__wrap_iter<wchar_t const*>>((uint64_t)a1, v9, (unsigned int *)a3, end, marked_count + 1, v14);
}

int *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_one_char_or_coll_elem_ERE<std::__wrap_iter<wchar_t const*>>(std::basic_regex<wchar_t> *a1, std::basic_regex<wchar_t> *a2, std::basic_regex<wchar_t> *a3)
{
  BOOL result = (int *)std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_ORD_CHAR_ERE<wchar_t const*>(a1, a2, a3);
  if (result == (int *)a2)
  {
    BOOL result = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_QUOTED_CHAR_ERE<std::__wrap_iter<wchar_t const*>>((uint64_t)a1, (std::wstring::value_type *)a2, (std::wstring::value_type *)a3);
    if (result == (int *)a2)
    {
      if (a2 != a3 && LODWORD(a2->__traits_.__loc_.__locale_) == 46) {
        operator new();
      }
      return std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_bracket_expression<std::__wrap_iter<wchar_t const*>>((uint64_t)a1, (int *)a2, (int *)a3);
    }
  }
  return result;
}

std::wstring::value_type *std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_QUOTED_CHAR_ERE<std::__wrap_iter<wchar_t const*>>(uint64_t a1, std::wstring::value_type *a2, std::wstring::value_type *a3)
{
  int v3 = a2;
  if (a2 != a3)
  {
    int v4 = a2 + 1;
    if (v3 + 1 != a3 && *v3 == 92)
    {
      BOOL v5 = (*v4 - 36) > 0x3A || ((1 << (*v4 - 36)) & 0x5800000080004F1) == 0;
      if (v5 && (*v4 - 123) >= 3)
      {
        if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
        {
          return std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__parse_awk_escape<std::__wrap_iter<wchar_t const*>>((std::basic_regex<wchar_t> *)a1, v4, a3, 0);
        }
        else
        {
          BOOL v7 = std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__test_back_ref((std::basic_regex<wchar_t> *)a1, *v4);
          uint64_t v8 = 8;
          if (!v7) {
            uint64_t v8 = 0;
          }
          return (std::wstring::value_type *)((char *)v3 + v8);
        }
      }
      else
      {
        std::basic_regex<wchar_t,std::regex_traits<wchar_t>>::__push_char((std::basic_regex<wchar_t> *)a1, *v4);
        v3 += 2;
      }
    }
  }
  return v3;
}

uint64_t std::vector<std::pair<std::basic_regex<wchar_t,std::regex_traits<wchar_t>>,std::wstring>>::__push_back_slow_path<std::pair<std::basic_regex<wchar_t,std::regex_traits<wchar_t>>,std::wstring>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x2E8BA2E8BA2E8BALL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x2E8BA2E8BA2E8BA3 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x1745D1745D1745DLL) {
    unint64_t v9 = 0x2E8BA2E8BA2E8BALL;
  }
  else {
    unint64_t v9 = v5;
  }
  v15[4] = a1 + 2;
  if (v9) {
    unsigned int v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,quasar::PTree>>>(v7, v9);
  }
  else {
    unsigned int v10 = 0;
  }
  unsigned int v11 = &v10[88 * v4];
  v15[0] = v10;
  v15[1] = v11;
  void v15[3] = &v10[88 * v9];
  std::locale::locale((std::locale *)v11, (const std::locale *)a2);
  *(_OWORD *)(v11 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(v11 + ++*(void *)(result + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(v11 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *((void *)v11 + 7) = *(void *)(a2 + 56);
  long long v12 = *(_OWORD *)(a2 + 64);
  *((void *)v11 + 10) = *(void *)(a2 + 80);
  *((_OWORD *)v11 + 4) = v12;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 64) = 0;
  void v15[2] = v11 + 88;
  std::vector<std::pair<std::basic_regex<wchar_t,std::regex_traits<wchar_t>>,std::wstring>>::__swap_out_circular_buffer(a1, v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<quasar::RegexReplacementRule>::~__split_buffer(v15);
  return v13;
}

void sub_1B1C0C080(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::RegexReplacementRule>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::basic_regex<wchar_t,std::regex_traits<wchar_t>>,std::wstring>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::basic_regex<wchar_t,std::regex_traits<wchar_t>>,std::wstring>>,std::reverse_iterator<std::pair<std::basic_regex<wchar_t,std::regex_traits<wchar_t>>,std::wstring>*>,std::reverse_iterator<std::pair<std::basic_regex<wchar_t,std::regex_traits<wchar_t>>,std::wstring>*>,std::reverse_iterator<std::pair<std::basic_regex<wchar_t,std::regex_traits<wchar_t>>,std::wstring>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::basic_regex<wchar_t,std::regex_traits<wchar_t>>,std::wstring>>,std::reverse_iterator<std::pair<std::basic_regex<wchar_t,std::regex_traits<wchar_t>>,std::wstring>*>,std::reverse_iterator<std::pair<std::basic_regex<wchar_t,std::regex_traits<wchar_t>>,std::wstring>*>,std::reverse_iterator<std::pair<std::basic_regex<wchar_t,std::regex_traits<wchar_t>>,std::wstring>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  _OWORD v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      std::locale::locale((std::locale *)(v7 - 88), (const std::locale *)(v9 - 88));
      *(_OWORD *)(v7 - 80) = *(_OWORD *)(v9 - 80);
      *(_OWORD *)(v7 - 64) = *(_OWORD *)(v9 - 64);
      *(_OWORD *)(v7 - 48) = *(_OWORD *)(v9 - 48);
      *(void *)(v9 - 48) = 0;
      *(void *)(v9 - 40) = 0;
      *(void *)(v7 - 32) = *(void *)(v9 - 32);
      long long v10 = *(_OWORD *)(v9 - 24);
      *(void *)(v7 - 8) = *(void *)(v9 - 8);
      *(_OWORD *)(v7 - ++*(void *)(result + 24) = v10;
      *(void *)(v9 - ++*(void *)(result + 24) = 0;
      *(void *)(v9 - 16) = 0;
      *(void *)(v9 - 8) = 0;
      uint64_t v7 = *((void *)&v16 + 1) - 88;
      *((void *)&v16 + 1) -= 88;
      v9 -= 88;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::basic_regex<wchar_t,std::regex_traits<wchar_t>>,std::wstring>>,std::reverse_iterator<std::pair<std::basic_regex<wchar_t,std::regex_traits<wchar_t>>,std::wstring>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::basic_regex<wchar_t,std::regex_traits<wchar_t>>,std::wstring>>,std::reverse_iterator<std::pair<std::basic_regex<wchar_t,std::regex_traits<wchar_t>>,std::wstring>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::RegexReplacementRule>,std::reverse_iterator<quasar::RegexReplacementRule*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

uint64_t kaldi::nnet1::Component::Backpropagate(_DWORD *lpsrc, uint64_t a2, uint64_t a3, uint64_t a4, int32x2_t *a5, uint64_t a6)
{
  if (lpsrc[3] != *(_DWORD *)(a4 + 16))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Non-matching output dims, component:", 36);
    int v22 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" data:", 6);
    std::ostream::operator<<();
    goto LABEL_17;
  }
  if (*((unsigned char *)lpsrc + 17))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v23, "Backpropagate() attempted while disabled");
LABEL_17:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23);
  }
  if (a5)
  {
    kaldi::CuMatrix<float>::Resize(a5, *(unsigned int *)(a2 + 20), lpsrc[2], 0, 0);
    (*(void (**)(_DWORD *, void))(*(void *)lpsrc + 56))(lpsrc, *(unsigned int *)(a2 + 20));
    long long v12 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t, uint64_t, int32x2_t *, uint64_t))(*(void *)lpsrc + 128);
    uint64_t v13 = lpsrc;
    uint64_t v14 = a2;
    uint64_t v15 = a3;
    uint64_t v16 = a4;
    size_t v17 = a5;
LABEL_11:
    return v12(v13, v14, v15, v16, v17, a6);
  }
  uint64_t v18 = *(void *)lpsrc;
  if ((*(unsigned int (**)(_DWORD *))(v18 + 24))(lpsrc) == 2055
    || ((uint64_t result = (*(uint64_t (**)(_DWORD *))(*(void *)lpsrc + 24))(lpsrc), result != 2049)
      ? (BOOL v21 = v19 == 0)
      : (BOOL v21 = 0),
        !v21))
  {
    long long v12 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t, uint64_t, int32x2_t *, uint64_t))(*(void *)lpsrc + 128);
    uint64_t v13 = lpsrc;
    uint64_t v14 = a2;
    uint64_t v15 = a3;
    uint64_t v16 = a4;
    size_t v17 = 0;
    goto LABEL_11;
  }
  return result;
}

uint64_t kaldi::nnet1::Component::Propagate(_DWORD *a1, uint64_t a2, int32x2_t *a3, uint64_t a4)
{
  if (a1[2] != *(_DWORD *)(a2 + 16))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v18);
    uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Non-matching dims! ", 19);
    long long v12 = (kaldi::nnet1::Component *)(*(uint64_t (**)(_DWORD *))(*(void *)a1 + 24))(a1);
    kaldi::nnet1::Component::TypeToMarker(v12, &v17);
    if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v13 = &v17;
    }
    else {
      uint64_t v13 = (std::string *)v17.__r_.__value_.__r.__words[0];
    }
    if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v17.__r_.__value_.__l.__size_;
    }
    uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v13, size);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" input-dim : ", 13);
    uint64_t v16 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" data : ", 8);
    std::ostream::operator<<();
    std::string::~string(&v17);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v18);
  }
  uint64_t v8 = (*(uint64_t (**)(_DWORD *, void))(*(void *)a1 + 56))(a1, *(unsigned int *)(a2 + 20));
  kaldi::CuMatrix<float>::Resize(a3, v8, a1[3], 0, 0);
  uint64_t v9 = *(uint64_t (**)(_DWORD *, uint64_t, int32x2_t *, uint64_t))(*(void *)a1 + 112);
  return v9(a1, a2, a3, a4);
}

uint64_t kaldi::nnet1::MomentStatistics<float>(uint64_t a1)
{
  kaldi::Matrix<float>::Matrix((uint64_t)v3, *(unsigned int *)(a1 + 20), *(unsigned int *)(a1 + 16), 0, 0);
  kaldi::CuMatrixBase<float>::CopyToMat<float>(a1, v3, 111);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)v3);
  return kaldi::Matrix<float>::~Matrix((uint64_t)v3);
}

void sub_1B1C0C69C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

float kaldi::nnet1::UpdatableComponent::CheckParams(kaldi::nnet1::UpdatableComponent *this)
{
  float result = (*(float (**)(kaldi::nnet1::UpdatableComponent *))(*(void *)this + 208))(this);
  if (fabsf(result) == INFINITY)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "'inf' in component parameters (weight explosion, try lower learning rate?)");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

void sub_1B1C0C7E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::valarray<unsigned long>::~valarray[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(unsigned char **)a1;
  if (v2)
  {
    uint64_t v3 = *(unsigned char **)(a1 + 8);
    if (v3 != v2) {
      *(void *)(a1 + 8) = &v3[(v2 - v3 + 7) & 0xFFFFFFFFFFFFFFF8];
    }
    operator delete(v2);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void hmaxent::model::model(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = **(void **)(a2 + 32);
  uint64_t v5 = *(void *)(*(void *)(a2 + 32) + 8);
  *(void *)(a1 + ++*(void *)(result + 24) = 0;
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 32) = 0;
  unint64_t v6 = v5 - v4;
  if (v5 != v4)
  {
    if ((v6 & 0x8000000000000000) != 0) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v7 = (char *)operator new(v6 >> 2);
    *(void *)(a1 + ++*(void *)(result + 24) = v7;
    bzero(v7, v6 >> 2);
    *(void *)(a1 + 32) = &v7[v6 >> 2];
  }
  uint64_t v8 = **(void **)(a2 + 24);
  uint64_t v9 = *(void *)(*(void *)(a2 + 24) + 8);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  size_t v10 = v9 - v8;
  if (v9 != v8)
  {
    if ((v10 & 0x8000000000000000) != 0) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v11 = (char *)operator new(v9 - v8);
    *(void *)(a1 + 40) = v11;
    bzero(v11, v10);
    *(void *)(a1 + 48) = &v11[v10];
  }
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(_WORD *)(a1 + 72) = 0;
  uint64_t v12 = **(void **)(a2 + 24);
  uint64_t v13 = *(void *)(*(void *)(a2 + 24) + 8);
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  std::valarray<double>::resize(a1 + 80, (v13 - v12) >> 3, 0.0);
  uint64_t v14 = **(void **)(a2 + 24);
  uint64_t v15 = *(void *)(*(void *)(a2 + 24) + 8);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  size_t v16 = v15 - v14;
  if (v15 != v14)
  {
    if ((v16 & 0x8000000000000000) != 0) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    std::string v17 = (char *)operator new(v15 - v14);
    *(void *)(a1 + 96) = v17;
    bzero(v17, v16);
    *(void *)(a1 + 104) = &v17[v16];
  }
  *(void *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 136) = 1000;
  operator new();
}

void sub_1B1C0CBBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  MEMORY[0x1B3EA8670](v16, 0x80C40803F642BLL);
  std::valarray<unsigned long>::~valarray[abi:ne180100](v15);
  std::valarray<unsigned long>::~valarray[abi:ne180100](v14);
  std::valarray<unsigned long>::~valarray[abi:ne180100](v13);
  std::valarray<unsigned long>::~valarray[abi:ne180100](v12);
  _Unwind_Resume(a1);
}

void search_sorted<unsigned long>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, void *a5@<X8>)
{
  unint64_t v5 = a3[1];
  unint64_t v6 = a4[1];
  *a5 = 0;
  a5[1] = 0;
  if (v6)
  {
    if (v6 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v12 = (char *)operator new(8 * v6);
    *a5 = v12;
    bzero(v12, 8 * v6);
    unint64_t v13 = 0;
    unint64_t v14 = 0;
    a5[1] = &v12[8 * v6];
    uint64_t v15 = *a3;
    uint64_t v16 = *a4;
    uint64_t v17 = *a2;
    uint64_t v18 = *a1;
    do
    {
      if (v14 < v5)
      {
        unint64_t v19 = v5;
        do
        {
          unint64_t v20 = v14 + ((v19 - v14) >> 1);
          if (*(void *)(v18 + 8 * (v20 + v15)) >= *(void *)(v17 + 8 * (v13 + v16))) {
            unint64_t v19 = v14 + ((v19 - v14) >> 1);
          }
          else {
            unint64_t v14 = v20 + 1;
          }
        }
        while (v14 < v19);
      }
      *(void *)&v12[8 * v13++] = v14++;
    }
    while (v13 < v6);
  }
}

void *std::__val_expr<std::_BinaryOp<std::plus<unsigned long>,std::valarray<unsigned long>,std::__scalar_expr<unsigned long>>>::operator std::valarray<unsigned long>@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  uint64_t v3 = result[1];
  unint64_t v5 = *(uint64_t **)v3;
  uint64_t v4 = *(void *)(v3 + 8);
  uint64_t v6 = v4 - *(void *)v3;
  if (v4 != *(void *)v3)
  {
    if (v6 < 0) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v7 = result;
    float result = operator new(v4 - *(void *)v3);
    uint64_t v8 = v6 >> 3;
    *a2 = result;
    a2[1] = result;
    uint64_t v9 = (void *)v7[2];
    do
    {
      uint64_t v10 = *v5++;
      *result++ = *v9 + v10;
      --v8;
    }
    while (v8);
    a2[1] = result;
  }
  return result;
}

void sub_1B1C0CDE4(_Unwind_Exception *a1)
{
  std::valarray<unsigned long>::~valarray[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void hmaxent::model::~model(hmaxent::model *this)
{
  uint64_t v2 = *((void *)this + 14);
  if (v2)
  {
    uint64_t v3 = *(unsigned char **)v2;
    if (*(void *)v2)
    {
      uint64_t v4 = *(unsigned char **)(v2 + 8);
      if (v4 != v3) {
        *(void *)(v2 + 8) = &v4[(v3 - v4 + 7) & 0xFFFFFFFFFFFFFFF8];
      }
      operator delete(v3);
      *(void *)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
    }
    MEMORY[0x1B3EA8670](v2, 0x10C40B8F86A93);
  }
  uint64_t v5 = *((void *)this + 15);
  if (v5)
  {
    uint64_t v6 = *(unsigned char **)v5;
    if (*(void *)v5)
    {
      uint64_t v7 = *(unsigned char **)(v5 + 8);
      if (v7 != v6) {
        *(void *)(v5 + 8) = &v7[(v6 - v7 + 7) & 0xFFFFFFFFFFFFFFF8];
      }
      operator delete(v6);
      *(void *)uint64_t v5 = 0;
      *(void *)(v5 + 8) = 0;
    }
    MEMORY[0x1B3EA8670](v5, 0x80C40803F642BLL);
  }
  uint64_t v8 = *((void *)this + 16);
  if (v8)
  {
    uint64_t v9 = *(unsigned char **)v8;
    if (*(void *)v8)
    {
      uint64_t v10 = *(unsigned char **)(v8 + 8);
      if (v10 != v9) {
        *(void *)(v8 + 8) = &v10[(v9 - v10 + 7) & 0xFFFFFFFFFFFFFFF8];
      }
      operator delete(v9);
      *(void *)uint64_t v8 = 0;
      *(void *)(v8 + 8) = 0;
    }
    MEMORY[0x1B3EA8670](v8, 0x80C40803F642BLL);
  }
  uint64_t v11 = (unsigned char *)*((void *)this + 12);
  if (v11)
  {
    uint64_t v12 = (unsigned char *)*((void *)this + 13);
    if (v12 != v11) {
      *((void *)this + 13) = &v12[(v11 - v12 + 7) & 0xFFFFFFFFFFFFFFF8];
    }
    operator delete(v11);
    *((void *)this + 12) = 0;
    *((void *)this + 13) = 0;
  }
  unint64_t v13 = (unsigned char *)*((void *)this + 10);
  if (v13)
  {
    unint64_t v14 = (unsigned char *)*((void *)this + 11);
    if (v14 != v13) {
      *((void *)this + 11) = &v14[(v13 - v14 + 7) & 0xFFFFFFFFFFFFFFF8];
    }
    operator delete(v13);
    *((void *)this + 10) = 0;
    *((void *)this + 11) = 0;
  }
  uint64_t v15 = (unsigned char *)*((void *)this + 5);
  if (v15)
  {
    uint64_t v16 = (unsigned char *)*((void *)this + 6);
    if (v16 != v15) {
      *((void *)this + 6) = &v16[(v15 - v16 + 7) & 0xFFFFFFFFFFFFFFF8];
    }
    operator delete(v15);
    *((void *)this + 5) = 0;
    *((void *)this + 6) = 0;
  }
  uint64_t v17 = (unsigned char *)*((void *)this + 3);
  if (v17)
  {
    uint64_t v18 = (unsigned char *)*((void *)this + 4);
    if (v18 != v17) {
      *((void *)this + 4) = &v18[(v17 - v18 + 7) & 0xFFFFFFFFFFFFFFF8];
    }
    operator delete(v17);
    *((void *)this + 3) = 0;
    *((void *)this + 4) = 0;
  }
}

unint64_t **hmaxent::model::lognormconst(unint64_t **this)
{
  if (!*((unsigned char *)this + 73))
  {
    hmaxent::model::ensure_exp_params((hmaxent::model *)this);
    uint64_t v3 = *(void **)(*(void *)this[2][4] + 24);
    uint64_t v38 = (unint64_t *)*this[15];
    uint64_t v39 = v3;
    uint64_t v40 = 1;
    uint64_t v4 = (double **)std::valarray<double>::valarray(&v50, (uint64_t)&v38);
    uint64_t v2 = this + 3;
    *(long double *)this[3] = logsumexp<double>(v4);
    if (v50)
    {
      if (v51 != v50) {
        v51 += (v50 - v51 + 7) & 0xFFFFFFFFFFFFFFF8;
      }
      operator delete(v50);
    }
    unint64_t v5 = *this[2];
    if (v5 < 2) {
      goto LABEL_57;
    }
    uint64_t v6 = *this[14];
    uint64_t v7 = 2;
    unint64_t v8 = 1;
    uint64_t v37 = 1;
    while (1)
    {
      unint64_t v36 = v8 - 1;
      uint64_t v9 = *(void *)(v6 + 8 * (v8 - 1));
      if (v9 < 1) {
        goto LABEL_56;
      }
      unint64_t v35 = v8;
      for (uint64_t i = 0; i < v9; ++i)
      {
        uint64_t v11 = (void *)(*(void *)this[2][4] + 32 * (i + v37));
        uint64_t v12 = v11[2];
        long double v13 = *(double *)&this[3][v11[1]];
        unint64_t v14 = v11[3];
        uint64_t v38 = &this[5][v12];
        uint64_t v39 = (void *)v14;
        uint64_t v40 = 1;
        std::valarray<double>::valarray(&v50, (uint64_t)&v38);
        std::vector<std::pair<std::wstring, std::wstring>>::pointer v48 = 0;
        uint64_t v49 = 0;
        std::valarray<double>::resize((uint64_t)&v48, (v51 - v50) >> 3, 0.0);
        uint64_t v46 = 0;
        std::vector<std::pair<std::wstring, std::wstring>>::pointer v47 = 0;
        if (v14)
        {
          if (v14 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v15 = (char *)operator new(8 * v14);
          uint64_t v46 = v15;
          bzero(v15, 8 * v14);
          std::vector<std::pair<std::wstring, std::wstring>>::pointer v47 = &v15[8 * v14];
        }
        uint64_t v16 = 1;
        do
        {
          if (v16 == 1)
          {
            if (v14)
            {
              uint64_t v17 = &this[12][v12];
              uint64_t v18 = v46;
              unint64_t v19 = v14;
              do
              {
                uint64_t v20 = *v17++;
                *v18++ = v20;
                --v19;
              }
              while (v19);
            }
          }
          else
          {
            uint64_t v38 = this[12];
            std::valarray<unsigned long>::valarray(&v39, (uint64_t **)&v46);
            BOOL v21 = (char *)v39;
            int v22 = (char *)v40;
            int v23 = (char *)v39 - v40;
            if (v39 == (void *)v40)
            {
              if (!v39) {
                goto LABEL_27;
              }
              goto LABEL_26;
            }
            uint64_t v24 = 0;
            uint64_t v25 = (uint64_t)v38;
            std::wstring v26 = (char *)v46;
            do
            {
              *(void *)&v26[v24] = *(void *)(v25 + 8 * *(void *)&v21[v24]);
              v24 += 8;
            }
            while (&v21[v24] != v22);
            if (v21)
            {
              uint64_t v40 = (uint64_t)&v22[(unint64_t)(v23 + 7) & 0xFFFFFFFFFFFFFFF8];
LABEL_26:
              operator delete(v21);
            }
          }
LABEL_27:
          uint64_t v38 = (unint64_t *)*this[15];
          std::valarray<unsigned long>::valarray(&v39, (uint64_t **)&v46);
          std::valarray<double>::valarray(&__p, (uint64_t *)&v38);
          uint64_t v27 = (double *)v48;
          uint64_t v28 = v49;
          int v29 = __p;
          if (v48 == v49)
          {
            if (!__p) {
              goto LABEL_35;
            }
          }
          else
          {
            uint64_t v30 = (double *)__p;
            do
            {
              double v31 = *v30++;
              *uint64_t v27 = v31 + *v27;
              ++v27;
            }
            while (v27 != v28);
          }
          if (v45 != v29) {
            v45 += (v29 - v45 + 7) & 0xFFFFFFFFFFFFFFF8;
          }
          operator delete(v29);
          std::wstring __p = 0;
          std::string::size_type v45 = 0;
LABEL_35:
          if (v39)
          {
            if ((void *)v40 != v39) {
              v40 += ((unint64_t)v39 - v40 + 7) & 0xFFFFFFFFFFFFFFF8;
            }
            operator delete(v39);
          }
          ++v16;
        }
        while (v16 != v7);
        uint64_t v40 = (uint64_t)&v50;
        p_p = &__p;
        uint64_t v42 = (v51 - v50) >> 3;
        uint64_t v43 = &v48;
        std::wstring __p = (void *)0x3FF0000000000000;
        double v32 = std::__val_expr<std::_BinaryOp<std::multiplies<double>,std::__val_expr<std::_BinaryOp<std::minus<double>,std::valarray<double>,std::__scalar_expr<double>>>,std::__val_expr<std::_UnaryOp<std::__exp_expr<double>,std::valarray<double>>>>>::sum[abi:ne180100]((uint64_t)&v38);
        if (v32 != 0.0)
        {
          long double v33 = exp(v13);
          long double v13 = log(v33 + v32);
        }
        *(long double *)(*v2 + 8 * (i + v3std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(this + 7)) = v13;
        if (v46)
        {
          if (v47 != v46) {
            v47 += ((unsigned char *)v46 - v47 + 7) & 0xFFFFFFFFFFFFFFF8;
          }
          operator delete(v46);
        }
        if (v48)
        {
          if (v49 != v48) {
            uint64_t v49 = (double *)((char *)v49 + (((unsigned char *)v48 - (unsigned char *)v49 + 7) & 0xFFFFFFFFFFFFFFF8));
          }
          operator delete(v48);
        }
        if (v50)
        {
          if (v51 != v50) {
            v51 += (v50 - v51 + 7) & 0xFFFFFFFFFFFFFFF8;
          }
          operator delete(v50);
        }
        uint64_t v6 = *this[14];
        uint64_t v9 = *(void *)(v6 + 8 * v36);
      }
      unint64_t v5 = *this[2];
      unint64_t v8 = v35;
LABEL_56:
      v37 += v9;
      ++v8;
      ++v7;
      if (v8 >= v5)
      {
LABEL_57:
        *((unsigned char *)this + 73) = 1;
        return (unint64_t **)v2;
      }
    }
  }
  return this + 3;
}

void sub_1B1C0D420(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,void *__p,uint64_t a25)
{
  uint64_t v27 = *(unsigned char **)(v25 - 120);
  if (v27)
  {
    uint64_t v28 = *(unsigned char **)(v25 - 112);
    if (v28 != v27) {
      *(void *)(v25 - 112) = &v28[(v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8];
    }
    operator delete(v27);
  }
  _Unwind_Resume(exception_object);
}

void hmaxent::model::ensure_exp_params(hmaxent::model *this)
{
  if (!*((unsigned char *)this + 72))
  {
    uint64_t v2 = (long double **)((char *)this + 40);
    uint64_t v3 = (double **)*((void *)this + 15);
    unint64_t v5 = *v3;
    uint64_t v4 = v3[1];
    uint64_t v6 = v4 - *v3;
    if (v6 != (uint64_t)(*((void *)this + 6) - *((void *)this + 5)) >> 3) {
      std::valarray<double>::resize((uint64_t)this + 40, v4 - *v3, 0.0);
    }
    if (v4 != v5)
    {
      uint64_t v7 = *v2;
      unint64_t v8 = *v3;
      do
      {
        long double v9 = *v8++;
        *v7++ = exp(v9);
        --v6;
      }
      while (v6);
    }
  }
  *((unsigned char *)this + 72) = 1;
}

long double logsumexp<double>(double **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 == v2)
  {
    double v9 = 0.0;
  }
  else
  {
    uint64_t v3 = v1 + 1;
    if (v1 + 1 == v2)
    {
      unint64_t v5 = *a1;
    }
    else
    {
      double v4 = *v1;
      unint64_t v5 = *a1;
      uint64_t v6 = v1 + 1;
      do
      {
        double v7 = *v6++;
        double v8 = v7;
        if (v4 < v7)
        {
          double v4 = v8;
          unint64_t v5 = v3;
        }
        uint64_t v3 = v6;
      }
      while (v6 != v2);
    }
    double v9 = *v5;
  }
  double v13 = v9;
  void v12[2] = a1;
  void v12[3] = &v13;
  v12[4] = v2 - v1;
  double v10 = std::__val_expr<std::_UnaryOp<std::__exp_expr<double>,std::__val_expr<std::_BinaryOp<std::minus<double>,std::valarray<double>,std::__scalar_expr<double>>>>>::sum[abi:ne180100]((uint64_t)v12);
  return v9 + log(v10);
}

double std::__val_expr<std::_BinaryOp<std::multiplies<double>,std::__val_expr<std::_BinaryOp<std::minus<double>,std::valarray<double>,std::__scalar_expr<double>>>,std::__val_expr<std::_UnaryOp<std::__exp_expr<double>,std::valarray<double>>>>>::sum[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  double v4 = *(double **)v2;
  uint64_t v3 = *(void *)(v2 + 8);
  uint64_t v5 = v3 - *(void *)v2;
  if (v3 == *(void *)v2)
  {
    double v7 = 0.0;
  }
  else
  {
    double v6 = *v4 - **(double **)(a1 + 24);
    double v7 = v6 * exp(***(long double ***)(a1 + 48));
  }
  if ((unint64_t)v5 >= 9)
  {
    uint64_t v8 = v5 >> 3;
    double v9 = **(double **)(a1 + 24);
    uint64_t v10 = **(void **)(a1 + 48);
    if ((unint64_t)(v5 >> 3) <= 2) {
      uint64_t v8 = 2;
    }
    uint64_t v11 = v8 - 1;
    uint64_t v12 = v4 + 1;
    double v13 = (double *)(v10 + 8);
    do
    {
      double v14 = *v12++;
      double v15 = v14 - v9;
      long double v16 = *v13++;
      double v7 = v7 + v15 * exp(v16);
      --v11;
    }
    while (v11);
  }
  return v7;
}

void hmaxent::model::param_sums(uint64_t ***this@<X0>, uint64_t ***a2@<X8>)
{
  std::valarray<double>::valarray(a2, this[15]);
  unint64_t v4 = (unint64_t)*this[2];
  if (v4 < 2) {
    return;
  }
  uint64_t v5 = *this[14];
  unint64_t v6 = 1;
  uint64_t v7 = 1;
  do
  {
    uint64_t v8 = v5[v6 - 1];
    if (v8 < 1) {
      goto LABEL_23;
    }
    uint64_t v9 = 0;
    do
    {
      uint64_t v10 = *this[2][4] + 32 * (v9 + v7);
      uint64_t v12 = *(void *)(v10 + 16);
      uint64_t v11 = *(char **)(v10 + 24);
      uint64_t v20 = &this[12][v12];
      BOOL v21 = v11;
      uint64_t v22 = 1;
      std::valarray<unsigned long>::valarray(&v23, (uint64_t)&v20);
      uint64_t v20 = *a2;
      std::valarray<unsigned long>::valarray(&v21, (uint64_t **)&v23);
      std::valarray<double>::valarray(&__p, (uint64_t *)&v20);
      double v13 = __p;
      if (v11)
      {
        double v14 = (double *)&(*a2)[v12];
        double v15 = (double *)__p;
        do
        {
          double v16 = *v15++;
          *double v14 = v16 + *v14;
          ++v14;
          --v11;
        }
        while (v11);
      }
      else if (!__p)
      {
        goto LABEL_13;
      }
      if (v19 != v13) {
        v19 += (v13 - v19 + 7) & 0xFFFFFFFFFFFFFFF8;
      }
      operator delete(v13);
      std::wstring __p = 0;
      unint64_t v19 = 0;
LABEL_13:
      if (v21)
      {
        if ((void *)v22 != v21) {
          v22 += ((unint64_t)v21 - v22 + 7) & 0xFFFFFFFFFFFFFFF8;
        }
        operator delete(v21);
      }
      if (v23)
      {
        if (v24 != v23) {
          v24 += ((unsigned char *)v23 - v24 + 7) & 0xFFFFFFFFFFFFFFF8;
        }
        operator delete(v23);
      }
      ++v9;
      uint64_t v17 = this[14];
      uint64_t v5 = *v17;
      uint64_t v8 = (*v17)[v6 - 1];
    }
    while (v9 < v8);
    unint64_t v4 = (unint64_t)*this[2];
LABEL_23:
    v7 += v8;
    ++v6;
  }
  while (v6 < v4);
}

void sub_1B1C0D8DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, void *a15, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  std::valarray<unsigned long>::~valarray[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void hmaxent::model::fit()
{
}

double hmaxent::model::log_prob_context(unint64_t **this, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = a2;
  double result = -*(double *)&(*hmaxent::model::lognormconst(this))[a2];
  uint64_t v7 = this[2];
  uint64_t v8 = *(void *)v7[4];
  if (v8)
  {
    uint64_t v9 = *(void *)v7[3];
    while (1)
    {
      uint64_t v10 = v8 + 32 * v4;
      unint64_t v11 = *(void *)(v10 + 16);
      unint64_t v12 = v11 + *(void *)(v10 + 24) - 1;
      if (v11 <= v12)
      {
        unint64_t v14 = *(void *)(v10 + 16);
        do
        {
          unint64_t v11 = (v14 + v12) >> 1;
          unint64_t v13 = *(void *)(v9 + 8 * v11);
          if (v13 >= a3)
          {
            if (v13 <= a3) {
              break;
            }
            unint64_t v12 = v11 - 1;
          }
          else
          {
            unint64_t v14 = v11 + 1;
          }
        }
        while (v14 <= v12);
      }
      else
      {
        unint64_t v13 = *(void *)(v9 + 8 * v11);
      }
      if (v13 == a3) {
        double result = result + *(double *)(*this[15] + 8 * v11);
      }
      if (!*(_DWORD *)v10) {
        break;
      }
      uint64_t v4 = *(void *)(v8 + 32 * v4 + 8);
    }
  }
  return result;
}

void *std::valarray<unsigned long>::valarray(void *a1, uint64_t **a2)
{
  *a1 = 0;
  a1[1] = 0;
  uint64_t v3 = a2[1];
  size_t v4 = (char *)v3 - (char *)*a2;
  if (v3 != *a2)
  {
    if ((v4 & 0x8000000000000000) != 0) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v6 = (char *)operator new(v4);
    *a1 = v6;
    a1[1] = v6;
    uint64_t v7 = *a2;
    if (*a2 != a2[1])
    {
      uint64_t v8 = v6 + 8;
      do
      {
        uint64_t v9 = *v7++;
        *((void *)v8 - 1) = v9;
        a1[1] = v8;
        v8 += 8;
      }
      while (v7 != a2[1]);
    }
  }
  return a1;
}

void *std::valarray<double>::valarray(void *a1, uint64_t **a2)
{
  *a1 = 0;
  a1[1] = 0;
  uint64_t v3 = a2[1];
  size_t v4 = (char *)v3 - (char *)*a2;
  if (v3 != *a2)
  {
    if ((v4 & 0x8000000000000000) != 0) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v6 = (char *)operator new(v4);
    *a1 = v6;
    a1[1] = v6;
    uint64_t v7 = *a2;
    if (*a2 != a2[1])
    {
      uint64_t v8 = v6 + 8;
      do
      {
        uint64_t v9 = *v7++;
        *((void *)v8 - 1) = v9;
        a1[1] = v8;
        v8 += 8;
      }
      while (v7 != a2[1]);
    }
  }
  return a1;
}

void std::valarray<double>::resize(uint64_t a1, unint64_t a2, double a3)
{
  unint64_t v6 = *(unsigned char **)a1;
  if (v6)
  {
    uint64_t v7 = *(unsigned char **)(a1 + 8);
    if (v7 != v6) {
      *(void *)(a1 + 8) = &v7[(v6 - v7 + 7) & 0xFFFFFFFFFFFFFFF8];
    }
    operator delete(v6);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
  }
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v8 = (double *)operator new(8 * a2);
    *(void *)a1 = v8;
    do
    {
      *v8++ = a3;
      --a2;
    }
    while (a2);
    *(void *)(a1 + 8) = v8;
  }
}

void *std::valarray<double>::valarray(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    if (v3 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v5 = operator new(8 * v3);
    *a1 = v5;
    unint64_t v6 = *(void **)a2;
    uint64_t v7 = 8 * *(void *)(a2 + 16);
    do
    {
      *v5++ = *v6;
      unint64_t v6 = (void *)((char *)v6 + v7);
      --v3;
    }
    while (v3);
    a1[1] = v5;
  }
  return a1;
}

double std::__val_expr<std::_UnaryOp<std::__exp_expr<double>,std::__val_expr<std::_BinaryOp<std::minus<double>,std::valarray<double>,std::__scalar_expr<double>>>>>::sum[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  size_t v4 = *(double **)v2;
  uint64_t v3 = *(void *)(v2 + 8);
  uint64_t v5 = v3 - *(void *)v2;
  if (v3 == *(void *)v2) {
    double v6 = 0.0;
  }
  else {
    double v6 = exp(*v4 - **(double **)(a1 + 24));
  }
  if ((unint64_t)v5 >= 9)
  {
    uint64_t v7 = v5 >> 3;
    double v8 = **(double **)(a1 + 24);
    if ((unint64_t)(v5 >> 3) <= 2) {
      uint64_t v7 = 2;
    }
    uint64_t v9 = v7 - 1;
    uint64_t v10 = v4 + 1;
    do
    {
      double v11 = *v10++;
      double v6 = v6 + exp(v11 - v8);
      --v9;
    }
    while (v9);
  }
  return v6;
}

void *std::valarray<double>::valarray(void *a1, uint64_t *a2)
{
  *a1 = 0;
  a1[1] = 0;
  size_t v4 = (char *)a2[1];
  uint64_t v3 = (char *)a2[2];
  size_t v5 = v3 - v4;
  if (v3 != v4)
  {
    if ((v5 & 0x8000000000000000) != 0) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v7 = operator new(v5);
    *a1 = v7;
    uint64_t v8 = *a2;
    do
    {
      uint64_t v9 = *(void *)v4;
      v4 += 8;
      *v7++ = *(void *)(v8 + 8 * v9);
    }
    while (v4 != v3);
    a1[1] = v7;
  }
  return a1;
}

void *std::valarray<unsigned long>::valarray(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    if (v3 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    size_t v5 = operator new(8 * v3);
    *a1 = v5;
    double v6 = *(void **)a2;
    uint64_t v7 = 8 * *(void *)(a2 + 16);
    do
    {
      *v5++ = *v6;
      double v6 = (void *)((char *)v6 + v7);
      --v3;
    }
    while (v3);
    a1[1] = v5;
  }
  return a1;
}

uint64_t quasar::InverseTextNormalizer::char32Converter(quasar::InverseTextNormalizer *this)
{
  {
    operator new();
  }
  return quasar::InverseTextNormalizer::char32Converter(void)::converter;
}

void sub_1B1C0DE40(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1032C4095874D8CLL);
  _Unwind_Resume(a1);
}

void std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::wstring_convert[abi:ne180100]()
{
}

uint64_t quasar::VocabId::VocabId(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(void *)(a1 + 48) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 88), "<PAD>");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 112), "<unk>");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 136), "<s>");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 160), "</s>");
  uint64_t v6 = *(unsigned __int8 *)(a3 + 23);
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a3 + 8);
  }
  if (v6)
  {
    uint64_t v7 = MEMORY[0x1E4FBA460] + 64;
    uint64_t v26 = MEMORY[0x1E4FBA460] + 64;
    uint64_t v8 = *(void *)(MEMORY[0x1E4FBA3F8] + 16);
    *(void *)&long long v24 = *(void *)(MEMORY[0x1E4FBA3F8] + 8);
    *(void *)((char *)&v25[-1] + *(void *)(v24 - 24)) = v8;
    *((void *)&v24 + 1) = 0;
    uint64_t v9 = (std::ios_base *)((char *)&v25[-1] + *(void *)(v24 - 24));
    std::ios_base::init(v9, v25);
    uint64_t v10 = MEMORY[0x1E4FBA460] + 24;
    v9[1].__vftable = 0;
    v9[1].__fmtflags_ = -1;
    *(void *)&long long v24 = v10;
    uint64_t v26 = v7;
    MEMORY[0x1B3EA7CE0](v25);
    std::ifstream::open();
    fst::FstReadOptions::FstReadOptions(v20, a3, 0, 0, 0);
    int v21 = 2;
    std::istream::seekg();
    std::istream::tellg();
    double v11 = (fst::MappedFile *)v23;
    std::istream::seekg();
    fst::MappedFile::Map((uint64_t)&v24, (uint64_t)v20, v11);
  }
  uint64_t v12 = *(unsigned __int8 *)(a2 + 23);
  int v13 = (char)v12;
  if ((v12 & 0x80u) != 0) {
    uint64_t v12 = *(void *)(a2 + 8);
  }
  if (v12 && !*(void *)(a1 + 16))
  {
    if (v13 < 0) {
      std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string v18 = *(std::string *)a2;
    }
    __p[0] = 0;
    LOBYTE(v19) = 0;
    kaldi::Input::OpenInternal(__p, (uint64_t)&v18, 1, &v19);
    uint64_t v14 = kaldi::Input::Stream((kaldi::Input *)__p);
    std::allocate_shared[abi:ne180100]<kaldi::quasar::Vocab,std::allocator<kaldi::quasar::Vocab>,std::istream &,BOOL &,void>(v14, (unsigned __int8 *)&v19, &v24);
    long long v15 = v24;
    long long v24 = 0uLL;
    uint64_t v16 = *(std::__shared_weak_count **)(a1 + 8);
    *(_OWORD *)a1 = v15;
    if (v16)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      if (*((void *)&v24 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v24 + 1));
      }
    }
    kaldi::Input::Close((kaldi::Input *)__p);
    kaldi::Input::~Input((kaldi::Input *)__p);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v18.__r_.__value_.__l.__data_);
    }
  }
  if (!*(void *)a1 && !*(void *)(a1 + 16))
  {
    memset(v25, 0, 256);
    long long v24 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v24, (uint64_t)"Not able to create vocab table from neither source-vocab-file nor vocab-marisa-trie-file", 88);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v24);
  }
  return a1;
}

void sub_1B1C0E624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  kaldi::Input::~Input((kaldi::Input *)&a21);
  if (a28 < 0) {
    operator delete(__p);
  }
  std::ifstream::~ifstream(&a70);
  if (*(char *)(v70 + 183) < 0) {
    operator delete(*v75);
  }
  if (*(char *)(v70 + 159) < 0) {
    operator delete(*v76);
  }
  if (*(char *)(v70 + 135) < 0) {
    operator delete(*v77);
  }
  if (*(char *)(v70 + 111) < 0) {
    operator delete(*v78);
  }
  if (*(unsigned char *)(v70 + 72) && *v79) {
    MEMORY[0x1B3EA8630](*v79, 0x1000C8077774924);
  }
  std::vector<std::wstring>::pointer v72 = *(std::__shared_weak_count **)(v70 + 40);
  if (v72) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v72);
  }
  uint64_t v73 = *(std::__shared_weak_count **)(v70 + 24);
  if (v73) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v73);
  }
  unint64_t v74 = *(std::__shared_weak_count **)(v70 + 8);
  if (v74) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v74);
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::MappableVector<int>::operator=(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 16) && *(void *)a1) {
    MEMORY[0x1B3EA8630]();
  }
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 0;
  return a1;
}

void quasar::VocabId::initMarisaToken(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a2 + 8);
  }
  if (v3)
  {
    *(void *)&v19[0] = 0;
    v20[0] = 0;
    kaldi::Input::OpenInternal(v19, a2, 1, v20);
    uint64_t v4 = (uint64_t *)kaldi::Input::Stream((kaldi::Input *)v19);
    kaldi::ExpectToken(v4, v20[0], "<UnknownWord>");
    size_t v5 = (uint64_t *)kaldi::Input::Stream((kaldi::Input *)v19);
    kaldi::ReadToken(v5, v20[0], a1 + 112);
    uint64_t v6 = (uint64_t *)kaldi::Input::Stream((kaldi::Input *)v19);
    kaldi::ExpectToken(v6, v20[0], "<BeginOfSentenceWord>");
    uint64_t v7 = (uint64_t *)kaldi::Input::Stream((kaldi::Input *)v19);
    kaldi::ReadToken(v7, v20[0], a1 + 136);
    uint64_t v8 = (uint64_t *)kaldi::Input::Stream((kaldi::Input *)v19);
    kaldi::ExpectToken(v8, v20[0], "<EndOfSentenceWord>");
    uint64_t v9 = (uint64_t *)kaldi::Input::Stream((kaldi::Input *)v19);
    kaldi::ReadToken(v9, v20[0], a1 + 160);
    uint64_t v10 = (uint64_t *)kaldi::Input::Stream((kaldi::Input *)v19);
    kaldi::ExpectToken(v10, v20[0], "<PaddingWord>");
    double v11 = (uint64_t *)kaldi::Input::Stream((kaldi::Input *)v19);
    kaldi::ReadToken(v11, v20[0], a1 + 88);
    kaldi::Input::~Input((kaldi::Input *)v19);
  }
  if (*(void *)(a1 + 16))
  {
    marisa::Agent::Agent((marisa::Agent *)v20);
    if (*(char *)(a1 + 135) < 0) {
      int v13 = *(const char **)(a1 + 112);
    }
    else {
      int v13 = (const char *)(a1 + 112);
    }
    marisa::Agent::set_query(v12, v13);
    if (!marisa::Trie::lookup(*(marisa::grimoire::trie::LoudsTrie ***)(a1 + 16), (marisa::Agent *)v20))
    {
      memset(v19, 0, sizeof(v19));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
      uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Cannot find special token \"", 27);
      int v15 = *(char *)(a1 + 135);
      if (v15 >= 0) {
        uint64_t v16 = a1 + 112;
      }
      else {
        uint64_t v16 = *(void *)(a1 + 112);
      }
      if (v15 >= 0) {
        uint64_t v17 = *(unsigned __int8 *)(a1 + 135);
      }
      else {
        uint64_t v17 = *(void *)(a1 + 120);
      }
      std::string v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v16, v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"\" as OOV word. Need to specify special tokens in marisa-token-file", 66);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v19);
    }
    *(_DWORD *)(a1 + 80) = v21;
    marisa::Agent::~Agent((marisa::Agent *)v20);
  }
}

void sub_1B1C0EA18(_Unwind_Exception *a1)
{
  marisa::Agent::~Agent((marisa::Agent *)(v1 - 80));
  _Unwind_Resume(a1);
}

uint64_t quasar::VocabId::getWordId(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  if (v4)
  {
    return kaldi::quasar::Vocab::GetWordId(v4, (unsigned __int8 *)a2);
  }
  else
  {
    if (!*(void *)(a1 + 16)) {
      return 0;
    }
    marisa::Agent::Agent((marisa::Agent *)v13);
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v7 = (const char *)a2;
    }
    else {
      uint64_t v7 = *(const char **)a2;
    }
    marisa::Agent::set_query(v6, v7);
    unsigned int v8 = marisa::Trie::lookup(*(marisa::grimoire::trie::LoudsTrie ***)(a1 + 16), (marisa::Agent *)v13);
    uint64_t v9 = (unsigned int *)&v14;
    if (!v8) {
      uint64_t v9 = (unsigned int *)(a1 + 80);
    }
    unint64_t v10 = *v9;
    unint64_t v11 = *(void *)(a1 + 64);
    if (v11)
    {
      if ((v10 & 0x80000000) != 0 || v11 <= v10)
      {
        memset(v12, 0, sizeof(v12));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"wordId out of bound in marisaLabelMapping", 41);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v12);
      }
      unint64_t v10 = *(unsigned int *)(*(void *)(a1 + 56) + 4 * v10);
    }
    marisa::Agent::~Agent((marisa::Agent *)v13);
    return v10;
  }
}

void sub_1B1C0EB7C(_Unwind_Exception *a1)
{
  marisa::Agent::~Agent((marisa::Agent *)(v1 - 80));
  _Unwind_Resume(a1);
}

void quasar::LabelTransformer::init(quasar::LabelTransformer *this, const quasar::PTree *a2, const quasar::SystemConfig *a3)
{
  *((void *)this + 6) = quasar::SystemConfig::getConfigFileVersion(a3);
  std::string::basic_string[abi:ne180100]<0>(__p, "nnet-file");
  quasar::PTree::getString((uint64_t)a2, (uint64_t)__p);
}

void sub_1B1C0FA40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table((uint64_t)&STACK[0x230]);
  if (*(char *)(v22 - 201) < 0) {
    operator delete(*(void **)(v22 - 224));
  }
  if (*(char *)(v22 - 169) < 0) {
    operator delete(*(void **)(v22 - 192));
  }
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  if (*(char *)(v22 - 121) < 0) {
    operator delete(*(void **)(v22 - 144));
  }
  _Unwind_Resume(a1);
}

void std::shared_ptr<quasar::FstTokenTransform>::reset[abi:ne180100]<quasar::SpaceApplyDefaultFstTokenTransform,void>(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<quasar::FstTokenTransform>::shared_ptr[abi:ne180100]<quasar::SpaceApplyDefaultFstTokenTransform,void>(&v2, a2);
}

void std::shared_ptr<quasar::FstTokenTransform>::reset[abi:ne180100]<quasar::RewriteApplyCapitalizeFstTokenTransform,void>(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<quasar::FstTokenTransform>::shared_ptr[abi:ne180100]<quasar::RewriteApplyCapitalizeFstTokenTransform,void>(&v2, a2);
}

void std::shared_ptr<quasar::FstTokenTransform>::reset[abi:ne180100]<quasar::RewriteApplyDefaultFstTokenTransform,void>(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<quasar::FstTokenTransform>::shared_ptr[abi:ne180100]<quasar::RewriteApplyDefaultFstTokenTransform,void>(&v2, a2);
}

void std::shared_ptr<quasar::FstTokenTransform>::reset[abi:ne180100]<quasar::ComposeFstTokenTransform,void>(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<quasar::FstTokenTransform>::shared_ptr[abi:ne180100]<quasar::ComposeFstTokenTransform,void>(&v2, a2);
}

void **std::vector<std::shared_ptr<quasar::FstTokenTransform>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  double result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    int v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)result, v13);
    int v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)int v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v18[2] = v15 + 16;
    std::vector<std::shared_ptr<quasar::FstTokenTransform>>::__swap_out_circular_buffer(a1, v18);
    uint64_t v9 = (void *)a1[1];
    double result = std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer(v18);
  }
  else
  {
    void *v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_1B1C0FF30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void quasar::PunctuationTransformer::init(quasar::PunctuationTransformer *this, const quasar::PTree *a2, const quasar::SystemConfig *a3)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "joint-model");
  quasar::PTree::getBoolOptional((uint64_t)a2, (uint64_t)&__p);
}

uint64_t quasar::loadClusterIdFile(uint64_t a1, uint64_t **a2)
{
  v19[19] = *MEMORY[0x1E4F143B8];
  std::ifstream::basic_ifstream(v17);
  memset(&__str, 0, sizeof(__str));
  memset(v14, 0, sizeof(v14));
  memset(&__p, 0, sizeof(__p));
  uint64_t v3 = (std::locale::id *)MEMORY[0x1E4FBA258];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(void *)(v17[0] - 24)));
    uint64_t v4 = std::locale::use_facet((const std::locale *)&v12, v3);
    unsigned __int8 v5 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
    std::locale::~locale((std::locale *)&v12);
    unint64_t v6 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v17, (uint64_t)&__str, v5);
    if ((*((unsigned char *)v6 + *(void *)(*v6 - 24) + 32) & 5) != 0) {
      break;
    }
    kaldi::SplitStringToVector(&__str, " ", 1, (uint64_t)v14);
    if (*(char *)(v14[0] + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)v14[0], *(void *)(v14[0] + 8));
    }
    else
    {
      long long v7 = *(_OWORD *)v14[0];
      v12.__r_.__value_.__r.__words[2] = *(void *)(v14[0] + 16);
      *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v7;
    }
    std::string::size_type size = HIBYTE(v12.__r_.__value_.__r.__words[2]);
    if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v12.__r_.__value_.__l.__size_;
    }
    std::string::basic_string(&v11, &__str, size + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v16);
    kaldi::SplitStringToIntegers<int>((uint64_t)&v11, "^", 1, &__p);
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v11.__r_.__value_.__l.__data_);
    }
    v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
    uint64_t v9 = (char *)(std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, (const void **)&v12.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v11)+ 7);
    if (v9 != (char *)&__p) {
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v9, (char *)__p.__begin_, (uint64_t)__p.__end_, __p.__end_ - __p.__begin_);
    }
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v12.__r_.__value_.__l.__data_);
    }
  }
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  __p.__begin_ = (std::vector<unsigned int>::pointer)v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  v17[0] = *MEMORY[0x1E4FBA3F8];
  *(uint64_t *)((char *)v17 + *(void *)(v17[0] - 24)) = *(void *)(MEMORY[0x1E4FBA3F8] + 24);
  MEMORY[0x1B3EA7CF0](&v18);
  std::istream::~istream();
  return MEMORY[0x1B3EA8520](v19);
}

void sub_1B1C10F20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, std::locale a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,char a36)
{
}

uint64_t quasar::LabelTransformer::doInference(uint64_t a1, uint64_t a2, int a3, int *a4, void *a5, uint64_t *a6)
{
  long long v38 = 0u;
  long long v37 = 0u;
  int32x2_t v36 = (int32x2_t)&unk_1F0A51768;
  char v39 = 0;
  (*(void (**)(void))(**(void **)(a1 + 56) + 152))(*(void *)(a1 + 56));
  uint64_t v12 = *(void *)(a1 + 72);
  if (a3 < 1)
  {
    if (v12)
    {
      (*(void (**)(void, uint64_t, int32x2_t *, void))(**(void **)(a1 + 56) + 96))(*(void *)(a1 + 56), a2, &v36, 0);
      goto LABEL_21;
    }
  }
  else if (v12)
  {
    kaldi::nnet1::Nnet::Feedforward((uint64_t *)(v12 + 8), a2, (int32x2_t *)(a1 + 128), a3, 0);
    kaldi::nnet1::Nnet::Feedforward((uint64_t *)(*(void *)(a1 + 72) + 8), a1 + 128, &v36, ((*(void *)(*(void *)(a1 + 72) + 16) - *(void *)(*(void *)(a1 + 72) + 8)) >> 3) - a3, a3);
    goto LABEL_21;
  }
  uint64_t v13 = *(void *)kaldi::quasar::CEInferenceNet::GetComputeEngine(*(kaldi::quasar::CEInferenceNet **)(a1 + 88));
  uint64_t v15 = *(int *)(a2 + 16);
  uint64_t v14 = *(int *)(a2 + 20);
  char v16 = operator new(0x18uLL);
  uint64_t v41 = (uint64_t)(v16 + 3);
  unint64_t v42 = (unint64_t)(v16 + 3);
  *char v16 = 1;
  v16[1] = v14;
  void v16[2] = v15;
  std::vector<unsigned int> __p = v16;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void **))(*(void *)v13 + 56))(&v35, v13, &__p);
  if (__p)
  {
    uint64_t v41 = (uint64_t)__p;
    operator delete(__p);
  }
  if (*(int *)(a2 + 20) >= 1)
  {
    int v17 = 0;
    do
    {
      uint64_t v18 = *(void *)(a2 + 8) + 4 * *(_DWORD *)(a2 + 24) * v17;
      unsigned int v19 = *(_DWORD *)(a2 + 16);
      uint64_t v20 = *(void **)(a2 + 32);
      std::vector<unsigned int> __p = &unk_1F0A472D0;
      uint64_t v41 = v18;
      uint64_t v43 = v20;
      unint64_t v42 = v19;
      (*(void (**)(uint64_t))(*(void *)v35 + 88))(v35);
      ++v17;
    }
    while (v17 < *(_DWORD *)(a2 + 20));
  }
  uint64_t v34 = 0;
  if (a4)
  {
    double v31 = 0;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    std::vector<wchar_t>::pointer v44 = &v33;
    int v21 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v33, 1uLL);
    std::vector<unsigned int> __p = v21;
    uint64_t v41 = (uint64_t)v21;
    uint64_t v43 = &v21[v22];
    *int v21 = 0;
    unint64_t v42 = (unint64_t)(v21 + 1);
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__swap_out_circular_buffer((uint64_t *)&v31, &__p);
    uint64_t v23 = v32;
    std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer(&__p);
    uint64_t v32 = v23;
    uint64_t v24 = *(void *)(a1 + 88);
    std::vector<unsigned int> __p = 0;
    uint64_t v41 = 0;
    unint64_t v42 = 0;
    kaldi::quasar::CEInferenceNet::MultiIOFeedforward(v24, &v35, &__p, &v34, (uint64_t)&v31, 0);
    p_p = &__p;
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&p_p);
    ComputeEngine = (uint64_t *)kaldi::quasar::CEInferenceNet::GetComputeEngine(*(kaldi::quasar::CEInferenceNet **)(a1 + 88));
    quasar::squeezeCEBufferItfToCuMatrix(ComputeEngine, v31, *(_DWORD *)(a2 + 20), (uint64_t)&v36);
    kaldi::CuMatrixBase<float>::FindRowMaxId((uint64_t)&v36, a4);
    if (a6 && a5[3]) {
      quasar::buildApplyLabelMasks((uint64_t)&v36, a4, a5, a6);
    }
    uint64_t v26 = (uint64_t *)kaldi::quasar::CEInferenceNet::GetComputeEngine(*(kaldi::quasar::CEInferenceNet **)(a1 + 88));
    quasar::squeezeCEBufferItfToCuMatrix(v26, &v34, *(_DWORD *)(a2 + 20), (uint64_t)&v36);
    std::vector<unsigned int> __p = &v31;
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  }
  else
  {
    kaldi::quasar::CEInferenceNet::Feedforward(*(void *)(a1 + 88), &v35, &v34, 0);
    uint64_t v27 = (uint64_t *)kaldi::quasar::CEInferenceNet::GetComputeEngine(*(kaldi::quasar::CEInferenceNet **)(a1 + 88));
    quasar::squeezeCEBufferItfToCuMatrix(v27, &v34, *(_DWORD *)(a2 + 20), (uint64_t)&v36);
  }
  uint64_t v28 = v34;
  uint64_t v34 = 0;
  if (v28) {
    (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
  }
  uint64_t v29 = v35;
  uint64_t v35 = 0;
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
  }
LABEL_21:
  kaldi::CuMatrixBase<float>::FindRowMaxId((uint64_t)&v36, (int *)(a1 + 104));
  if (*(void *)(a1 + 208)) {
    quasar::buildApplyLabelMasks((uint64_t)&v36, (int *)(a1 + 104), (void *)(a1 + 184), (uint64_t *)(a1 + 224));
  }
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v36);
}

void sub_1B1C113A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  *(void *)(v23 - 72) = v22;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v23 - 72));
  *(void *)(v23 - 72) = &a10;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v23 - 72));
  uint64_t v25 = a13;
  a13 = 0;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  uint64_t v26 = a14;
  a14 = 0;
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  }
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t quasar::squeezeCEBufferItfToCuMatrix(uint64_t *a1, void *a2, int a3, uint64_t a4)
{
  uint64_t v7 = *a1;
  int v8 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 184))(*a2, 1);
  int v9 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 184))(*a2, 2);
  uint64_t v10 = operator new(0x10uLL);
  int v17 = v10 + 2;
  uint64_t v18 = v10 + 2;
  *uint64_t v10 = v8;
  v10[1] = v9;
  std::vector<unsigned int> __p = v10;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void **))(*(void *)v7 + 56))(&v19, v7, &__p);
  if (__p)
  {
    int v17 = __p;
    operator delete(__p);
  }
  if (a3 >= 1)
  {
    int v11 = 0;
    uint64_t v12 = 0;
    do
    {
      int v13 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 184))(*a2, 2);
      int v14 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 184))(*a2, 2);
      (*(void (**)(uint64_t, void, void, void, uint64_t))(*(void *)v19 + 72))(v19, *a2, (v13 * v11), (v14 + v13 * v11), v12);
      uint64_t v12 = (v14 + v12);
      ++v11;
    }
    while (a3 != v11);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v19 + 32))(v19, a4);
  uint64_t result = v19;
  uint64_t v19 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_1B1C116A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  _Unwind_Resume(exception_object);
}

void quasar::buildApplyLabelMasks(uint64_t a1, int *a2, void *a3, uint64_t *a4)
{
  std::vector<BOOL>::resize((uint64_t)a4, *a2, 0);
  if (*(int *)(a1 + 20) >= 1)
  {
    unint64_t v8 = 0;
    do
    {
      int v13 = *(_DWORD *)(*((void *)a2 + 1) + 4 * v8);
      int v9 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(a3, &v13);
      if (v9
        && *(float *)(*(void *)(a1 + 8)
                    + 4 * *(_DWORD *)(a1 + 24) * (int)v8
                    + 4 * *(int *)(*((void *)a2 + 1) + 4 * v8)) < *((float *)v9 + 5))
      {
        uint64_t v10 = *a4;
        uint64_t v11 = (v8 >> 3) & 0x1FFFFFFFFFFFFFF8;
        uint64_t v12 = *(void *)(*a4 + v11) & ~(1 << v8);
      }
      else
      {
        uint64_t v10 = *a4;
        uint64_t v11 = (v8 >> 3) & 0x1FFFFFFFFFFFFFF8;
        uint64_t v12 = *(void *)(*a4 + v11) | (1 << v8);
      }
      *(void *)(v10 + v11) = v12;
      ++v8;
    }
    while ((uint64_t)v8 < *(int *)(a1 + 20));
  }
}

double quasar::InverseTextNormalizer::InverseTextNormalizer(quasar::InverseTextNormalizer *this)
{
  *(void *)this = &unk_1F0A55AB8;
  *((void *)this + 48) = 0;
  *((void *)this + 49) = 0;
  double result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((void *)this + 46) = 0;
  *((void *)this + 47) = (char *)this + 384;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((void *)this + 56) = 0;
  *((_DWORD *)this + 114) = 1065353216;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 30) = 0u;
  *((_DWORD *)this + 1++*(void *)(result + 24) = 1065353216;
  *(_OWORD *)((char *)this + 504) = 0u;
  *(_OWORD *)((char *)this + 520) = 0u;
  *((_DWORD *)this + 134) = 1065353216;
  *((_OWORD *)this + 34) = 0u;
  *((_OWORD *)this + 35) = 0u;
  *((_DWORD *)this + 144) = 1065353216;
  *(_OWORD *)((char *)this + 584) = 0u;
  *(_OWORD *)((char *)this + 600) = 0u;
  *(_OWORD *)((char *)this + 616) = 0u;
  *((_DWORD *)this + 158) = 1065353216;
  *((_DWORD *)this + 162) = 0;
  *((_OWORD *)this + 41) = 0u;
  *((_OWORD *)this + 42) = 0u;
  *((void *)this + 86) = 0;
  *((_DWORD *)this + 174) = 1065353216;
  *((_OWORD *)this + 44) = 0u;
  *((_OWORD *)this + 45) = 0u;
  *((_DWORD *)this + 184) = 1065353216;
  *((void *)this + 95) = 0;
  *((void *)this + 94) = 0;
  *((void *)this + 93) = (char *)this + 752;
  *((void *)this + 97) = 0;
  return result;
}

void quasar::InverseTextNormalizer::~InverseTextNormalizer(quasar::InverseTextNormalizer *this)
{
  *(void *)this = &unk_1F0A55AB8;
  ucasemap_close();
  std::unique_ptr<quasar::PunctuationTransformer>::reset[abi:ne180100]((quasar::PunctuationTransformer **)this + 97, 0);
  std::__tree<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,std::__map_value_compare<quasar::LmeDataFactoryBase::LmeType,std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,std::less<quasar::LmeDataFactoryBase::LmeType>,true>,std::allocator<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>>>::destroy((uint64_t)this + 744, *((char **)this + 94));
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)this + 704);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)this + 664);
  std::unique_ptr<quasar::LabelTransformer>::reset[abi:ne180100]((quasar::LabelTransformer **)this + 82, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 600);
  long long v2 = (std::__shared_weak_count *)*((void *)this + 74);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)this + 544);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 504);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 464);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 424);
  uint64_t v4 = (void **)((char *)this + 400);
  std::vector<quasar::InverseTextNormalizer::RegexFeatInfo>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::destroy((uint64_t)this + 376, *((void **)this + 48));
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 46);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (*((char *)this + 359) < 0) {
    operator delete(*((void **)this + 42));
  }
  if (*((char *)this + 335) < 0) {
    operator delete(*((void **)this + 39));
  }
  if (*((char *)this + 311) < 0) {
    operator delete(*((void **)this + 36));
  }
  if (*((char *)this + 287) < 0) {
    operator delete(*((void **)this + 33));
  }
  if (*((char *)this + 263) < 0) {
    operator delete(*((void **)this + 30));
  }
  if (*((char *)this + 239) < 0) {
    operator delete(*((void **)this + 27));
  }
  if (*((char *)this + 215) < 0) {
    operator delete(*((void **)this + 24));
  }
  if (*((char *)this + 191) < 0) {
    operator delete(*((void **)this + 21));
  }
  if (*((char *)this + 167) < 0) {
    operator delete(*((void **)this + 18));
  }
  if (*((char *)this + 143) < 0) {
    operator delete(*((void **)this + 15));
  }
  if (*((char *)this + 119) < 0) {
    operator delete(*((void **)this + 12));
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
}

{
  uint64_t vars8;

  quasar::InverseTextNormalizer::~InverseTextNormalizer(this);
  JUMPOUT(0x1B3EA8670);
}

void quasar::InverseTextNormalizer::init(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  if (!a1[162])
  {
    if (*(_DWORD *)(a2 + 1536) != 1)
    {
      memset(v9, 0, sizeof(v9));
      *(_OWORD *)std::vector<unsigned int> __p = 0u;
      long long v11 = 0u;
      LODWORD(v12) = 1065353216;
      quasar::SystemConfig::readJsonFile(a2, (uint64_t)(a1 + 30), (uint64_t *)v9, (uint64_t)__p, 0, 0);
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)__p);
      __p[0] = v9;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    }
    if (*(char *)(a3 + 23) >= 0) {
      size_t v6 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      size_t v6 = *(void *)(a3 + 8);
    }
    uint64_t v7 = __p;
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v6 + 1);
    if (SBYTE7(v11) < 0) {
      uint64_t v7 = (void **)__p[0];
    }
    if (v6)
    {
      if (*(char *)(a3 + 23) >= 0) {
        unint64_t v8 = (const void *)a3;
      }
      else {
        unint64_t v8 = *(const void **)a3;
      }
      memmove(v7, v8, v6);
    }
    *(_WORD *)((char *)v7 + v6) = 46;
    quasar::SystemConfig::setPrefix((std::string *)a2, (const std::string *)__p);
    if (SBYTE7(v11) < 0) {
      operator delete(__p[0]);
    }
    (*(void (**)(_DWORD *, uint64_t))(*(void *)a1 + 16))(a1, a2);
    quasar::SystemConfig::readPtree(a2, a3);
  }
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  *(_OWORD *)std::vector<unsigned int> __p = 0u;
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "InverseTextNormalizer already initialized.");
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
}

void quasar::InverseTextNormalizer::finishInit(quasar::InverseTextNormalizer *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  std::allocate_shared[abi:ne180100]<kaldi::quasar::PrefixTree<std::string,std::string>,std::allocator<kaldi::quasar::PrefixTree<std::string,std::string>>,char const(&)[1],void>((uint64_t)v1, "");
}

void sub_1B1C13008(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1B1C13018(_Unwind_Exception *a1)
{
}

void sub_1B1C13054(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,int a61,__int16 a62,char a63)
{
  a21 = (uint64_t)&a56;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  if (a64 < 0) {
    operator delete(__p);
  }
  std::ifstream::~ifstream(&a66);
  JUMPOUT(0x1B1C13134);
}

void sub_1B1C1305C()
{
}

void sub_1B1C13074(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  a20 = (uint64_t)&a24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  JUMPOUT(0x1B1C130C8);
}

void sub_1B1C130DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,std::locale a59)
{
}

void sub_1B1C130F0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::locale a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  std::locale::~locale(&a21);
  if (a64 < 0) {
    JUMPOUT(0x1B1C13128);
  }
  JUMPOUT(0x1B1C1312CLL);
}

void sub_1B1C13114(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    JUMPOUT(0x1B1C13128);
  }
  JUMPOUT(0x1B1C1312CLL);
}

void quasar::InverseTextNormalizer::InitPunctuationTransformer(quasar::InverseTextNormalizer *this, const quasar::PTree *a2, quasar::SystemConfig *a3)
{
  if (a2)
  {
    uint64_t v3 = (void *)kaldi::quasar::ProcessName(this);
    int v4 = *((char *)v3 + 23);
    if (v4 < 0)
    {
      if (v3[1] != 50) {
        goto LABEL_8;
      }
      uint64_t v3 = (void *)*v3;
    }
    else if (v4 != 50)
    {
LABEL_8:
      operator new();
    }
    if (memcmp(v3, "com.apple.SpeechRecognitionCore.speechrecognitiond", 0x32uLL)) {
      goto LABEL_8;
    }
    if (quasar::gLogLevel >= 4)
    {
      memset(v5, 0, sizeof(v5));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Disabling punctuation model loading for speechrecognitiond", 58);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v5);
    }
  }
}

void sub_1B1C132C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void quasar::EntityTransformer::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Ptree = quasar::SystemConfig::getPtree(a2, a3);
  int v6 = *(_DWORD *)Ptree;
  if (*(char *)(Ptree + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)(Ptree + 8), *(void *)(Ptree + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(Ptree + 8);
    v7.__r_.__value_.__r.__words[2] = *(void *)(Ptree + 24);
    *(_OWORD *)&v7.__r_.__value_.__l.__data_ = v4;
  }
  memset(&v8, 0, sizeof(v8));
  std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>(&v8, *(void *)(Ptree + 32), *(void *)(Ptree + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(Ptree + 40) - *(void *)(Ptree + 32)) >> 3));
  char v9 = *(unsigned char *)(Ptree + 56);
  std::string::basic_string[abi:ne180100]<0>(__p, "entity-tsv-file");
  quasar::PTree::getString((uint64_t)&v6, (uint64_t)__p);
}

void sub_1B1C13E74(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x2A7]) < 0) {
    operator delete((void *)STACK[0x290]);
  }
  long long v4 = (void **)&v3;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)v5, v5[1]);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v6);
  if (*(char *)(v1 - 201) < 0) {
    operator delete(*(void **)(v1 - 224));
  }
  if (*(char *)(v1 - 169) < 0) {
    operator delete(*(void **)(v1 - 192));
  }
  quasar::PTree::~PTree((quasar::PTree *)(v1 - 160));
  _Unwind_Resume(a1);
}

void quasar::VocabId::getPaddingWord(quasar::VocabId *this@<X0>, std::string *a2@<X8>)
{
  if (*(void *)this)
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "<PAD>");
  }
  else if (*((char *)this + 111) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 11), *((void *)this + 12));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 88);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 13);
  }
}

void quasar::VocabId::getOovWord(quasar::VocabId *this@<X0>, std::string *a2@<X8>)
{
  if (*(void *)this)
  {
    kaldi::quasar::Vocab::OOvWord(*(kaldi::quasar::Vocab **)this, a2);
  }
  else if (*((char *)this + 135) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 14), *((void *)this + 15));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 7);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 16);
  }
}

long long *quasar::InverseTextNormalizer::getCompoundWord(uint64_t a1, uint64_t a2, long long **a3, uint64_t a4)
{
  uint64_t v6 = **(void **)(a1 + 584);
  if (*(char *)(a4 + 23) < 0)
  {
    **(unsigned char **)a4 = 0;
    *(void *)(a4 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a4 = 0;
    *(unsigned char *)(a4 + 23) = 0;
  }
  std::string v7 = *a3;
  if (*a3 != *(long long **)(a2 + 8))
  {
    std::string v8 = *a3;
    do
    {
      if (*((char *)v8 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)v8, *((void *)v8 + 1));
      }
      else
      {
        long long v9 = *v8;
        v15.__r_.__value_.__r.__words[2] = *((void *)v8 + 2);
        *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v9;
      }
      uint64_t v10 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((void *)v6, (unsigned __int8 *)&v15);
      if (v10) {
        uint64_t v6 = *((void *)v10 + 5);
      }
      else {
        uint64_t v6 = 0;
      }
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v15.__r_.__value_.__l.__data_);
      }
      if (!v6) {
        break;
      }
      if (*(char *)(v6 + 63) < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v6 + 40), *(void *)(v6 + 48));
      }
      else {
        std::string __p = *(std::string *)(v6 + 40);
      }
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      char v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      if (size)
      {
        std::string::operator=((std::string *)a4, &__p);
        std::string v7 = v8 + 14;
        char v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      if (v12 < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      v8 += 14;
    }
    while (v8 != *(long long **)(a2 + 8));
  }
  return v7;
}

void sub_1B1C14114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::PrefixTree<std::string,std::string>::AddSequence(void **a1, uint64_t *a2, void *a3, void *a4)
{
  LODWORD(result) = kaldi::quasar::PrefixTree<std::string,std::string>::GetLongestPrefix(a1, a2, a3);
  *a4 = *a3;
  if (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) > (int)result) {
    operator new();
  }
  return (int)result;
}

void sub_1B1C1429C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  MEMORY[0x1B3EA8670](v14, 0x10B2C4049158C6CLL);
  _Unwind_Resume(a1);
}

void quasar::InverseTextNormalizer::RegexFeatInfo::~RegexFeatInfo(quasar::InverseTextNormalizer::RegexFeatInfo *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void quasar::InverseTextNormalizer::registerParams(quasar::InverseTextNormalizer *this, quasar::SystemConfig *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v6, "cluster-id-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "File containing cluster Ids.");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 24, (uint64_t)__p, 1, 33, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "compound-word-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "File containing cluster Ids.");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 96, (uint64_t)__p, 1, 33, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "max-num-feats");
  std::string::basic_string[abi:ne180100]<0>(__p, "Maximum number of feats");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v6, (uint64_t)this + 8, (uint64_t)__p, 1, 33, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "no-title-casing-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "File with list of words that should not be title-cased");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 144, (uint64_t)__p, 1, 34, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "source-vocab-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Source vocabulary file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 168, (uint64_t)__p, 0, 33, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "token-boundary-id");
  std::string::basic_string[abi:ne180100]<0>(__p, "Token boundary symbol ID");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v6, (uint64_t)this + 12, (uint64_t)__p, 1, 33, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "word-sense-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "File containing list of word senses.");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 264, (uint64_t)__p, 1, 33, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "align-right-preitn-tokens-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "File storing list of pre-ITN tokens that should map to next post-ITN token.");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 288, (uint64_t)__p, 0, 52, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "regex-feat-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "TSV file storing regex-to-feature map.");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 48, (uint64_t)__p, 0, 53, 0, 67, 0);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "double-regex-feat-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "TSV file storing regex-to-feature map.");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 72, (uint64_t)__p, 0, 68, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "guard-markers-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "TSV file storing guard markers that prevent ITN.");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 312, (uint64_t)__p, 0, 57, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "supplement-config-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "supplemental json file which may contain punctuation and other frequently updated parameters such as max-num-feats");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 336, (uint64_t)__p, 0, 87, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "chunk-length");
  std::string::basic_string[abi:ne180100]<0>(__p, "Number of tokens in each chunk");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v6, (uint64_t)this + 16, (uint64_t)__p, 0, 136, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "chunk-overlap");
  std::string::basic_string[abi:ne180100]<0>(__p, "the number of overlap tokens between two chunks");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v6, (uint64_t)this + 20, (uint64_t)__p, 0, 136, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "vocab-marisa-trie-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "The vocaburary symbol table file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 192, (uint64_t)__p, 0, 136, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "marisa-relabel-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "The relabel mapping of Marisa Trie. The relabel mapping is needed if the model doesn't adopt the new label created by Marisa Trie");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 216, (uint64_t)__p, 0, 136, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "marisa-token-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "The vocab file specifies the special tokens");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 240, (uint64_t)__p, 0, 136, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_1B1C14A68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void **std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  char v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)result, v13);
    std::string v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)std::string v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v18[2] = v15 + 16;
    std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::__swap_out_circular_buffer(a1, v18);
    long long v9 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer(v18);
  }
  else
  {
    void *v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    long long v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_1B1C14C24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::map<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::at(uint64_t a1, const void **a2)
{
  uint64_t v2 = *std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(a1, &v4, a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  }
  return v2 + 56;
}

uint64_t quasar::LabelTransformer::str2LinearFst(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 176))(a2, v6);
  if (a3 < 1)
  {
    uint64_t v11 = v6;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = a3;
    do
    {
      if (*((char *)a1 + 23) >= 0) {
        long long v9 = a1;
      }
      else {
        long long v9 = (uint64_t *)*a1;
      }
      int v10 = *((unsigned __int8 *)v9 + v7);
      uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2);
      v13[0] = v10;
      v13[1] = v10;
      _OWORD v13[2] = 1065353216;
      void v13[3] = v11;
      (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(void *)a2 + 208))(a2, v6, v13);
      ++v7;
      uint64_t v6 = v11;
    }
    while (v8 != v7);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, double))(*(void *)a2 + 184))(a2, v11, 0.0);
}

uint64_t quasar::LabelTransformer::addAcceptorArcs(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  unint64_t v5 = a1;
  if ((char)a1[23] < 0)
  {
    uint64_t v6 = *((void *)a1 + 1);
    if (!v6) {
      return a2;
    }
    unint64_t v5 = *(unsigned __int8 **)a1;
  }
  else
  {
    uint64_t v6 = a1[23];
    if (!a1[23]) {
      return a2;
    }
  }
  do
  {
    int v7 = *v5++;
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 200))(a3);
    v10[0] = v7;
    v10[1] = v7;
    _OWORD v10[2] = 1065353216;
    v10[3] = v8;
    (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(void *)a3 + 208))(a3, v4, v10);
    uint64_t v4 = v8;
    --v6;
  }
  while (v6);
  return v8;
}

uint64_t quasar::LabelTransformer::addAcceptorArc(uint64_t a1, int a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 200))(a3);
    v8[0] = a2;
    v8[1] = a2;
    void v8[2] = 1065353216;
    void v8[3] = v6;
    (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(void *)a3 + 208))(a3, a1, v8);
    return v6;
  }
  return a1;
}

uint64_t quasar::InverseTextNormalizer::getNumTokens(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  LODWORD(v7) = (*(float (**)(uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v4);
  int v11 = 2139095040;
  uint64_t v5 = 0;
  if (*(float *)&v7 == INFINITY)
  {
    while (1)
    {
      uint64_t v10 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a2 + 136))(a2, v4, &v7);
      if (!v7) {
        break;
      }
      if (*(_DWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 32))(v7) == *(_DWORD *)(a1 + 12)) {
        uint64_t v5 = (v5 + 1);
      }
      else {
        uint64_t v5 = v5;
      }
      if (!v7) {
        goto LABEL_12;
      }
      uint64_t v4 = *(unsigned int *)((*(uint64_t (**)(void))(*(void *)v7 + 32))() + 12);
      if (!v7) {
        goto LABEL_13;
      }
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
LABEL_15:
      LODWORD(v7) = (*(float (**)(uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v4);
      int v11 = 2139095040;
      if (*(float *)&v7 != INFINITY) {
        return v5;
      }
    }
    if (*(_DWORD *)(v8 + 16 * v10) == *(_DWORD *)(a1 + 12)) {
      uint64_t v5 = (v5 + 1);
    }
    else {
      uint64_t v5 = v5;
    }
LABEL_12:
    uint64_t v4 = *(unsigned int *)(v8 + 16 * v10 + 12);
LABEL_13:
    if (v9) {
      --*v9;
    }
    goto LABEL_15;
  }
  return v5;
}

void sub_1B1C151B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9) {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>();
  }
  else {
    quasar::InverseTextNormalizer::getNumTokens(v9);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::LabelTransformer::concatLinearFsts(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 160))(a2);
  if (result)
  {
    (*(void (**)(uint64_t, void, float))(*(void *)a3 + 184))(a3, *a4, INFINITY);
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
    LODWORD(v11) = (*(float (**)(uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v8);
    int v15 = 2139095040;
    if (*(float *)&v11 == INFINITY)
    {
      while (1)
      {
        uint64_t v14 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a2 + 136))(a2, v8, &v11);
        uint64_t v9 = v11 ? (*(uint64_t (**)(uint64_t))(*(void *)v11 + 32))(v11) : v12 + 16 * v14;
        int v10 = *(_DWORD *)(v9 + 4);
        if (v10) {
          *a4 = quasar::LabelTransformer::addAcceptorArc(*a4, v10, a3);
        }
        if (!v11) {
          break;
        }
        uint64_t v8 = *(unsigned int *)((*(uint64_t (**)(uint64_t))(*(void *)v11 + 32))(v11) + 12);
        if (!v11) {
          goto LABEL_12;
        }
        (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
LABEL_14:
        LODWORD(v11) = (*(float (**)(uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v8);
        int v15 = 2139095040;
        if (*(float *)&v11 != INFINITY) {
          return (*(uint64_t (**)(uint64_t, void, double))(*(void *)a3 + 184))(a3, *a4, 0.0);
        }
      }
      uint64_t v8 = *(unsigned int *)(v12 + 16 * v14 + 12);
LABEL_12:
      if (v13) {
        --*v13;
      }
      goto LABEL_14;
    }
    return (*(uint64_t (**)(uint64_t, void, double))(*(void *)a3 + 184))(a3, *a4, 0.0);
  }
  return result;
}

void sub_1B1C15480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9) {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>();
  }
  else {
    quasar::InverseTextNormalizer::getNumTokens(v9);
  }
  _Unwind_Resume(a1);
}

void quasar::LabelTransformer::applyLabel(uint64_t a1, void *a2, int a3)
{
  int v3 = a3;
  if (a2[1] != *a2) {
    fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst();
  }
}

void sub_1B1C157F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(&a16);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst((void *)(v18 - 112));
  _Unwind_Resume(a1);
}

uint64_t quasar::LabelTransformer::linearFst2Str@<X0>(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 160))(a1))
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
    while (1)
    {
      LODWORD(v11) = (*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, v6);
      int v18 = 2139095040;
      if (*(float *)&v11 != INFINITY)
      {
        std::stringbuf::str();
        goto LABEL_23;
      }
      uint64_t v14 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 136))(a1, v6, &v11);
      if (v11) {
        uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 32))(v11);
      }
      else {
        uint64_t v7 = v12 + 16 * v14;
      }
      int v8 = *(_DWORD *)(v7 + 4);
      if (v8)
      {
        if (v8 != 95 || a2 == 0) {
          LOBYTE(v18) = *(_DWORD *)(v7 + 4);
        }
        else {
          LOBYTE(v18) = 32;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)&v18, 1);
      }
      if (!v11) {
        break;
      }
      uint64_t v6 = *(unsigned int *)((*(uint64_t (**)(uint64_t))(*(void *)v11 + 32))(v11) + 12);
      if (v11)
      {
        (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
      }
      else
      {
LABEL_19:
        if (v13) {
          --*v13;
        }
      }
    }
    uint64_t v6 = *(unsigned int *)(v12 + 16 * v14 + 12);
    goto LABEL_19;
  }
  std::string::basic_string[abi:ne180100]<0>(a3, "");
LABEL_23:
  v15[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v15 + *(void *)(v15[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v15[1] = MEMORY[0x1E4FBA470] + 16;
  if (v16 < 0) {
    operator delete((void *)v15[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](&v17);
}

void sub_1B1C15BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void *quasar::EntityTransformer::applyEntityLabel(uint64_t a1, void *a2, int a3)
{
  int v11 = a3;
  uint64_t v10 = a2[1];
  ++*(_DWORD *)(v10 + 56);
  uint64_t v9 = &unk_1F0A45ED0;
  uint64_t v12 = &v11;
  uint64_t v4 = std::__tree<std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(a1 + 80), &v11, (uint64_t)&std::piecewise_construct, &v12);
  uint64_t v5 = v4[5];
  for (uint64_t i = v4[6]; v5 != i; v5 += 2)
  {
    uint64_t v7 = *v5;
    LOBYTE(v12) = 1;
    HIDWORD(v12) = 0;
    fst::Compose<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>((uint64_t)a2, v7, (uint64_t)a2, (uint64_t)&v12);
  }
  if (!(*(unsigned int (**)(void *))(*a2 + 160))(a2)) {
    fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetImpl((uint64_t)a2, v10, 0);
  }
  return fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(&v9);
}

void sub_1B1C15CF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t fst::Compose<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  switch(*(_DWORD *)(a4 + 4))
  {
    case 0:
      fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CreateBase(result, a2);
    case 1:
      fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CreateBase2<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>();
    case 2:
      fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CreateBase2<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>();
    case 3:
      fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CreateBase2<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>();
    case 4:
      fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CreateBase2<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>();
    default:
      if (*(unsigned char *)a4) {
        fst::Connect<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a3);
      }
      return result;
  }
}

void sub_1B1C15FD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void quasar::LabelTransformer::applyLabel(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  uint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a2 + 8);
  }
  if (v3) {
    fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst();
  }
}

void sub_1B1C16388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst((void *)(v16 - 112));
  _Unwind_Resume(a1);
}

unsigned __int8 *quasar::InverseTextNormalizer::setGuardedTokenLabels(unsigned __int8 *result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v6 = result;
    uint64_t v7 = 0;
    LODWORD(i) = 0;
    uint64_t v9 = result + 544;
    do
    {
      uint64_t result = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v9, (unsigned __int8 *)(v3 + 224 * v7));
      uint64_t v3 = *a2;
      if (result)
      {
        uint64_t v10 = result;
        int v11 = (unsigned __int8 **)(result + 40);
        uint64_t v12 = *(void *)(a3 + 8) + 4;
        for (uint64_t i = (int)i; ; ++i)
        {
          unint64_t v13 = (unsigned __int8 *)(v3 + 224 * i);
          uint64_t v14 = v13[23];
          if ((v14 & 0x80u) == 0) {
            uint64_t v15 = v13[23];
          }
          else {
            uint64_t v15 = *((void *)v13 + 1);
          }
          uint64_t v16 = v10[63];
          int v17 = (char)v16;
          if ((v16 & 0x80u) != 0) {
            uint64_t v16 = *((void *)v10 + 6);
          }
          if (v15 == v16)
          {
            if (v17 >= 0) {
              int v18 = (unsigned __int8 *)v11;
            }
            else {
              int v18 = *v11;
            }
            if ((v14 & 0x80) != 0)
            {
              uint64_t result = (unsigned __int8 *)memcmp(*(const void **)v13, v18, *((void *)v13 + 1));
              if (!result) {
                goto LABEL_23;
              }
            }
            else
            {
              if (!v13[23]) {
                goto LABEL_23;
              }
              while (*v13 == *v18)
              {
                ++v13;
                ++v18;
                if (!--v14) {
                  goto LABEL_23;
                }
              }
            }
          }
          *(_DWORD *)(v12 + 4 * i) = **((_DWORD **)v6 + 82);
        }
      }
      LODWORD(i) = i + 1;
LABEL_23:
      uint64_t v7 = (int)i;
    }
    while (0x6DB6DB6DB6DB6DB7 * ((a2[1] - v3) >> 5) > (unint64_t)(int)i);
  }
  return result;
}

void quasar::InverseTextNormalizer::applyOverrides(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4, uint64_t a5)
{
  if (quasar::gLogLevel >= 5)
  {
    memset(v34, 0, 272);
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v34);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"Applying ", 9);
    uint64_t v6 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" overrides", 10);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v34);
  }
  uint64_t v7 = *a2;
  uint64_t v29 = a2[1];
  if (*a2 == v29) {
    return;
  }
  do
  {
    uint64_t v9 = *a3;
    uint64_t v8 = a3[1];
    if (v8 == *a3) {
      goto LABEL_54;
    }
    uint64_t v10 = 0;
    unsigned int v11 = 0;
    int v12 = 0;
    while (1)
    {
      int v13 = v11;
      uint64_t v14 = v9 + 224 * v10;
      uint64_t v15 = *(unsigned __int8 *)(v7 + 23);
      if ((v15 & 0x80u) == 0) {
        uint64_t v16 = *(unsigned __int8 *)(v7 + 23);
      }
      else {
        uint64_t v16 = *(void *)(v7 + 8);
      }
      int v17 = *(char *)(v14 + 23);
      if (v17 >= 0) {
        uint64_t v18 = *(unsigned __int8 *)(v14 + 23);
      }
      else {
        uint64_t v18 = *(void *)(v14 + 8);
      }
      if (v16 != v18) {
        goto LABEL_22;
      }
      long long v19 = v17 >= 0 ? (unsigned __int8 *)(v9 + 224 * v10) : *(unsigned __int8 **)v14;
      if ((v15 & 0x80) != 0)
      {
        ++v11;
        if (memcmp(*(const void **)v7, v19, *(void *)(v7 + 8))) {
          goto LABEL_25;
        }
      }
      else
      {
        if (*(unsigned char *)(v7 + 23))
        {
          uint64_t v20 = 0;
          while (*(unsigned __int8 *)(v7 + v20) == v19[v20])
          {
            if (v15 == ++v20) {
              goto LABEL_21;
            }
          }
LABEL_22:
          ++v11;
          goto LABEL_25;
        }
LABEL_21:
        ++v11;
      }
      int v12 = v11;
LABEL_25:
      uint64_t v21 = *(unsigned __int8 *)(v7 + 47);
      if ((v21 & 0x80u) == 0) {
        uint64_t v22 = *(unsigned __int8 *)(v7 + 47);
      }
      else {
        uint64_t v22 = *(void *)(v7 + 32);
      }
      if (v22 != v18) {
        goto LABEL_39;
      }
      long long v23 = v17 >= 0 ? (unsigned __int8 *)(v9 + 224 * v10) : *(unsigned __int8 **)v14;
      if ((v21 & 0x80) != 0) {
        break;
      }
      if (!*(unsigned char *)(v7 + 47)) {
        goto LABEL_50;
      }
      uint64_t v24 = 0;
      while (*(unsigned __int8 *)(v7 + v24 + 24) == v23[v24])
      {
        if (v21 == ++v24) {
          goto LABEL_50;
        }
      }
LABEL_39:
      if (v12 && v13 >= v12)
      {
        if (v17 < 0)
        {
          **(unsigned char **)uint64_t v14 = 0;
          *(void *)(v14 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v14 = 0;
          *(unsigned char *)(v14 + 23) = 0;
        }
        uint64_t v25 = *a4 + 24 * v10;
        if (*(char *)(v25 + 23) < 0)
        {
          **(unsigned char **)uint64_t v25 = 0;
          *(void *)(v25 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v25 = 0;
          *(unsigned char *)(v25 + 23) = 0;
        }
        *(_DWORD *)(*(void *)(a5 + 8) + 4 * v10 + 4) = **(_DWORD **)(a1 + 656);
        uint64_t v9 = *a3;
        uint64_t v8 = a3[1];
      }
      uint64_t v10 = v11;
      if (0x6DB6DB6DB6DB6DB7 * ((v8 - v9) >> 5) <= (unint64_t)v11) {
        goto LABEL_54;
      }
    }
    if (memcmp(*(const void **)(v7 + 24), v23, *(void *)(v7 + 32))) {
      goto LABEL_39;
    }
LABEL_50:
    if (v13 > v12 && v12 && v13 != 1)
    {
      uint64_t v26 = 224 * v12;
      std::string::operator=((std::string *)(v9 + v26), (const std::string *)(v7 + 48));
      uint64_t v27 = *a3 + 224 * (v13 - 1);
      uint64_t v28 = *a3 + v26;
      *(_DWORD *)(v28 + 32) = *(_DWORD *)(v27 + 32);
      *(_DWORD *)(v28 + 36) = *(_DWORD *)(v27 + 32);
      std::string::operator=((std::string *)(*a4 + 24 * v12), (const std::string *)(v7 + 48));
    }
LABEL_54:
    v7 += 72;
  }
  while (v7 != v29);
}

void sub_1B1C16868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::EntityTransformer::transformEntity(uint64_t a1, void *a2, int a3, int a4, _DWORD *a5, _DWORD *a6)
{
  v38[0] = a3;
  unsigned int v11 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)a1, v38);
  int v12 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 40), v38);
  int v13 = v12;
  if (!v11)
  {
    int v14 = -1;
    if (v12) {
      goto LABEL_3;
    }
LABEL_5:
    int v15 = -1;
    goto LABEL_6;
  }
  int v14 = *((_DWORD *)v11 + 5);
  if (!v12) {
    goto LABEL_5;
  }
LABEL_3:
  int v15 = *((_DWORD *)v12 + 5);
LABEL_6:
  int v16 = quasar::gLogLevel;
  if (v11 && quasar::gLogLevel >= 5)
  {
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v21 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"start entity <", 14);
    int v17 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)">", 1);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v21);
    int v16 = quasar::gLogLevel;
  }
  if (v13 && v16 >= 5)
  {
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v21 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"end entity <", 12);
    uint64_t v18 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)">", 1);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v21);
  }
  int v19 = *(_DWORD *)(a1 + 104);
  if (v19 == 1)
  {
    if (v11 || !v13)
    {
      if (v11)
      {
        *(_DWORD *)(a1 + 104) = 2;
        if (quasar::gLogLevel >= 4)
        {
          long long v36 = 0u;
          long long v37 = 0u;
          long long v34 = 0u;
          long long v35 = 0u;
          long long v32 = 0u;
          long long v33 = 0u;
          long long v30 = 0u;
          long long v31 = 0u;
          long long v28 = 0u;
          long long v29 = 0u;
          long long v26 = 0u;
          long long v27 = 0u;
          long long v24 = 0u;
          long long v25 = 0u;
          long long v22 = 0u;
          long long v23 = 0u;
          long long v21 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v21);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Encountered orphan start entity ", 32);
          std::ostream::operator<<();
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v21);
        }
      }
    }
    else if (v15 == *(_DWORD *)(a1 + 108))
    {
      quasar::EntityTransformer::applyEntityLabel(a1, a2, v38[0]);
      *(_DWORD *)(a1 + 104) = 0;
      *a6 = a4;
    }
  }
  else
  {
    if (v19)
    {
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v21 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v21);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(&v21, "This cannot happen");
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v21);
    }
    *a5 = a4;
    *a6 = a4;
    if (v11 && v13 && v14 == v15)
    {
      quasar::EntityTransformer::applyEntityLabel(a1, a2, v38[0]);
    }
    else if (v11)
    {
      *(_DWORD *)(a1 + 104) = 1;
      *(_DWORD *)(a1 + 108) = v14;
    }
  }
  return *(unsigned int *)(a1 + 104);
}

void quasar::LabelTransformer::applyLabels(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  std::string::basic_string[abi:ne180100]<0>(&v24, "");
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::basic_string[abi:ne180100]<0>(&v21, "");
  memset(v20, 0, sizeof(v20));
  std::string::basic_string[abi:ne180100]<0>(&v18, "");
  quasar::Token::Token(&v7, &v24, 0, 0, 0, 0, 0, (long long *)&__str, 0.0, &v21, v20, 0, &v18, 0, 0);
  std::vector<quasar::Token>::resize(a4, 0xAAAAAAAAAAAAAAABLL * ((v5 - v6) >> 3), (quasar::Token *)&v7);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (v15 < 0) {
    operator delete(v14[0]);
  }
  v26[0] = (void **)&v13;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v26);
  if (v12 < 0) {
    operator delete(v11[0]);
  }
  v26[0] = (void **)&v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v26);
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (v19 < 0) {
    operator delete((void *)v18);
  }
  *(void *)&long long v18 = v20;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  if (v22 < 0) {
    operator delete((void *)v21);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v25 < 0) {
    operator delete((void *)v24);
  }
  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst();
}

void sub_1B1C172FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)va);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst((void *)(v11 - 184));
  _Unwind_Resume(a1);
}

void std::vector<quasar::Token>::resize(uint64_t *a1, unint64_t a2, quasar::Token *a3)
{
  uint64_t v4 = a1[1];
  unint64_t v5 = 0x6DB6DB6DB6DB6DB7 * ((v4 - *a1) >> 5);
  BOOL v6 = a2 >= v5;
  unint64_t v7 = a2 - v5;
  if (v7 != 0 && v6)
  {
    std::vector<quasar::Token>::__append(a1, v7, a3);
  }
  else if (!v6)
  {
    uint64_t v8 = *a1 + 224 * a2;
    while (v4 != v8)
      quasar::Token::~Token((void **)(v4 - 224));
    a1[1] = v8;
  }
}

uint64_t quasar::InverseTextNormalizer::getNextToken(uint64_t a1, uint64_t a2, uint64_t a3, std::string *a4, uint64_t a5, unsigned char *a6, _DWORD *a7)
{
  MEMORY[0x1B3EA7B20](a4, "");
  MEMORY[0x1B3EA7B20](a5, "");
  int v14 = 0;
  *a6 = 0;
  *a7 = -1;
  do
  {
    LODWORD(__p[0]) = (*(float (**)(uint64_t, uint64_t))(*(void *)a2 + 32))(a2, a3);
    LODWORD(v39) = 2139095040;
    if (*(float *)__p != INFINITY) {
      break;
    }
    uint64_t v42 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a2 + 136))(a2, a3, &v39);
    if (v39) {
      char v15 = (int *)(*(uint64_t (**)(uint64_t))(*(void *)v39 + 32))(v39);
    }
    else {
      char v15 = (int *)(v40 + 16 * v42);
    }
    int v16 = *v15;
    if (!v14)
    {
      if (v16 != *(_DWORD *)(a1 + 12))
      {
        long long v37 = 0u;
        long long v38 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        long long v33 = 0u;
        long long v34 = 0u;
        long long v31 = 0u;
        long long v32 = 0u;
        long long v29 = 0u;
        long long v30 = 0u;
        long long v27 = 0u;
        long long v28 = 0u;
        long long v25 = 0u;
        long long v26 = 0u;
        long long v23 = 0u;
        long long v24 = 0u;
        *(_OWORD *)std::string __p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Missing TokenBoundary label", 27);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
      }
      int v14 = 1;
      goto LABEL_20;
    }
    if ((v14 & 0xFFFFFFFE) != 2 || v16 != *(_DWORD *)(a1 + 12))
    {
      if (v14 == 3)
      {
        std::string::push_back((std::string *)a5, v16);
      }
      else
      {
        if (v14 != 2)
        {
          *a7 = v16;
          goto LABEL_17;
        }
        if (v16 != 92)
        {
          std::string::push_back(a4, v16);
LABEL_17:
          int v14 = 2;
LABEL_20:
          if (v39) {
            uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v39 + 32))(v39);
          }
          else {
            uint64_t v18 = v40 + 16 * v42;
          }
          a3 = *(unsigned int *)(v18 + 12);
          char v17 = 1;
          goto LABEL_24;
        }
      }
      int v14 = 3;
      goto LABEL_20;
    }
    char v17 = 0;
LABEL_24:
    if (v39)
    {
      (*(void (**)(uint64_t))(*(void *)v39 + 8))(v39);
    }
    else if (v41)
    {
      --*v41;
    }
  }
  while ((v17 & 1) != 0);
  uint64_t v19 = *(unsigned __int8 *)(a5 + 23);
  if ((v19 & 0x80u) != 0) {
    uint64_t v19 = *(void *)(a5 + 8);
  }
  if (v19)
  {
    std::operator+<char>();
    uint64_t v20 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((void *)(a1 + 504), (unsigned __int8 *)__p);
    if (SBYTE7(v23) < 0) {
      operator delete(__p[0]);
    }
    if (v20) {
      *a6 = 1;
    }
  }
  return a3;
}

void sub_1B1C17848(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 128);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  else
  {
    uint64_t v4 = *(_DWORD **)(v1 - 104);
    if (v4) {
      --*v4;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::InverseTextNormalizer::startsWithCapitalLetter(uint64_t a1)
{
  uint64_t v2 = quasar::InverseTextNormalizer::char32Converter((quasar::InverseTextNormalizer *)a1);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 23);
  if ((v3 & 0x80u) == 0) {
    uint64_t v4 = (int *)a1;
  }
  else {
    uint64_t v4 = *(int **)a1;
  }
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a1 + 8);
  }
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::from_bytes(v2, v4, (int *)((char *)v4 + v3), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__p.__r_.__value_.__l.__size_) {
      goto LABEL_13;
    }
    p_p = (std::basic_string<char32_t> *)__p.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((unsigned char *)&__p.__r_.__value_.__s + 23)) {
      goto LABEL_13;
    }
    p_p = &__p;
  }
  if (u_isupper(p_p->__r_.__value_.__s.__data_[0]))
  {
    uint64_t v6 = 1;
    goto LABEL_14;
  }
LABEL_13:
  uint64_t v6 = 0;
LABEL_14:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v6;
}

void sub_1B1C1793C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::InverseTextNormalizer::capitalizeFirstLetter(uint64_t a1)
{
  uint64_t v2 = quasar::CommandTransform::char32Converter((quasar::CommandTransform *)a1);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 23);
  if ((v3 & 0x80u) == 0) {
    uint64_t v4 = (int *)a1;
  }
  else {
    uint64_t v4 = *(int **)a1;
  }
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a1 + 8);
  }
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::from_bytes(v2, v4, (int *)((char *)v4 + v3), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__p.__r_.__value_.__l.__size_) {
      goto LABEL_14;
    }
    p_p = (std::basic_string<char32_t> *)__p.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((unsigned char *)&__p.__r_.__value_.__s + 23)) {
      goto LABEL_14;
    }
    p_p = &__p;
  }
  unint64_t v5 = (quasar::InverseTextNormalizer *)MEMORY[0x1B3EAA280](p_p->__r_.__value_.__s.__data_[0]);
  unint64_t v7 = &__p;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    unint64_t v7 = (std::basic_string<char32_t> *)__p.__r_.__value_.__r.__words[0];
  }
  v7->__r_.__value_.__s.__data_[0] = (int)v5;
LABEL_14:
  uint64_t v8 = quasar::InverseTextNormalizer::char32Converter(v5);
  std::basic_string<char32_t>::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v10 = (char *)&__p;
  }
  else {
    uint64_t v10 = (char *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::basic_string<char32_t>::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::to_bytes(v8, v10, &v10[4 * size], &v11);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  *(std::string *)a1 = v11;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1B1C17A44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::InverseTextNormalizer::getFeatures(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7)
{
  int v8 = a5;
  std::string v11 = *(int **)(a1 + 400);
  char v12 = *(int **)(a1 + 408);
  if (v11 == v12)
  {
    if (quasar::InverseTextNormalizer::startsWithCapitalLetter(a2))
    {
      int v8 = a5 + 1;
      *(_DWORD *)(*(void *)(a6 + 8) + 4 * *(_DWORD *)(a6 + 24) * a4 + 4 * a5) = 1065353216;
    }
  }
  else
  {
    do
    {
      if (quasar::InverseTextNormalizer::RegexFeatInfo::isMatch((uint64_t)v11, a2, a3))
      {
        if (quasar::gLogLevel >= 5)
        {
          memset(v36, 0, 272);
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v36);
          int v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"Regex match for ", 16);
          int v15 = *(char *)(a2 + 23);
          if (v15 >= 0) {
            uint64_t v16 = a2;
          }
          else {
            uint64_t v16 = *(void *)a2;
          }
          if (v15 >= 0) {
            uint64_t v17 = *(unsigned __int8 *)(a2 + 23);
          }
          else {
            uint64_t v17 = *(void *)(a2 + 8);
          }
          uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v16, v17);
          uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"(", 1);
          int v20 = *(char *)(a3 + 23);
          if (v20 >= 0) {
            uint64_t v21 = a3;
          }
          else {
            uint64_t v21 = *(void *)a3;
          }
          if (v20 >= 0) {
            uint64_t v22 = *(unsigned __int8 *)(a3 + 23);
          }
          else {
            uint64_t v22 = *(void *)(a3 + 8);
          }
          long long v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, v21, v22);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)") with label ", 13);
          std::ostream::operator<<();
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v36);
        }
        *(float *)(*(void *)(a6 + 8) + 4 * *(_DWORD *)(a6 + 24) * a4 + 4 * v8++) = (float)*v11;
      }
      v11 += 10;
    }
    while (v11 != v12);
  }
  uint64_t v24 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a7, (const void **)a2);
  if (a7 + 8 == v24)
  {
    int v27 = a5;
  }
  else
  {
    long long v25 = *(int **)(v24 + 56);
    long long v26 = *(int **)(v24 + 64);
    int v27 = a5;
    if (v25 != v26)
    {
      uint64_t v28 = *(void *)(a6 + 8) + 4 * *(_DWORD *)(a6 + 24) * a4;
      uint64_t v29 = v8;
      do
      {
        int v30 = *v25++;
        int v8 = v29 + 1;
        *(float *)(v28 + 4 * v29++) = (float)v30;
      }
      while (v25 != v26);
    }
  }
  if (v8 == v27)
  {
    int v8 = v27 + 1;
    int v31 = *(_DWORD *)(a6 + 16);
    uint64_t v32 = *(void *)(a6 + 8);
    uint64_t v33 = *(int *)(a6 + 24) * (uint64_t)a4;
    *(_DWORD *)(v32 + 4 * v33 + 4 * v27) = 0;
  }
  else
  {
    int v31 = *(_DWORD *)(a6 + 16);
    uint64_t v32 = *(void *)(a6 + 8);
    uint64_t v33 = *(int *)(a6 + 24) * (uint64_t)a4;
  }
  memset_pattern16((void *)(v32 + 4 * (v33 + v8)), &unk_1B2564410, 4 * (v31 + ~v8) + 4);
}

void sub_1B1C17CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)va);
  _Unwind_Resume(a1);
}

BOOL quasar::InverseTextNormalizer::RegexFeatInfo::isMatch(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL result = quasar::URegularExpressionWrapper::isMatch(*(URegularExpression ***)(a1 + 8), a2);
  if (result)
  {
    uint64_t v6 = *(URegularExpression ***)(a1 + 24);
    return quasar::URegularExpressionWrapper::isMatch(v6, a3);
  }
  return result;
}

uint64_t quasar::InverseTextNormalizer::doPreProcessing@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t **a4@<X3>, uint64_t *a5@<X8>)
{
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  a4[1] = *a4;
  (*(void (**)(uint64_t))(*(void *)a3 + 224))(a3);
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 200))(a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 176))(a3, v10);
  std::string v11 = *(long long **)(a2 + 8);
  uint64_t v68 = *(std::string **)a2;
  char v12 = v68;
  if (v68 != (std::string *)v11)
  {
    int v13 = 0;
    uint64_t v52 = (uint64_t)(a4 + 2);
    do
    {
      uint64_t v14 = quasar::LabelTransformer::addAcceptorArc(v10, *(_DWORD *)(a1 + 12), a3);
      uint64_t v15 = quasar::LabelTransformer::addAcceptorArc(v14, ++v13, a3);
      memset(&__str, 0, sizeof(__str));
      CompoundWord = quasar::InverseTextNormalizer::getCompoundWord(a1, a2, (long long **)&v68, (uint64_t)&__str);
      if (v12 == (std::string *)CompoundWord)
      {
        std::string::operator=(&__str, v12);
        unint64_t v19 = a5[1];
        if (v19 >= a5[2])
        {
          uint64_t v20 = std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>(a5, (const quasar::Token *)v12);
        }
        else
        {
          quasar::Token::Token((std::string *)a5[1], (const quasar::Token *)v12);
          uint64_t v20 = v19 + 224;
          a5[1] = v19 + 224;
        }
        a5[1] = v20;
        uint64_t v30 = -1227133513 * (((unint64_t)v12 - *(void *)a2) >> 5);
        uint64_t v31 = v30 | (v30 << 32);
        uint64_t v33 = a4[1];
        unint64_t v32 = (unint64_t)a4[2];
        if ((unint64_t)v33 >= v32)
        {
          uint64_t v35 = v33 - *a4;
          if ((unint64_t)(v35 + 1) >> 61) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v36 = v32 - (void)*a4;
          uint64_t v37 = v36 >> 2;
          if (v36 >> 2 <= (unint64_t)(v35 + 1)) {
            uint64_t v37 = v35 + 1;
          }
          if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v38 = v37;
          }
          if (v38) {
            uint64_t v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v52, v38);
          }
          else {
            uint64_t v39 = 0;
          }
          std::vector<wchar_t>::pointer v44 = &v39[8 * v35];
          *(void *)std::vector<wchar_t>::pointer v44 = v31;
          long long v34 = (unint64_t *)(v44 + 8);
          uint64_t v46 = *a4;
          std::string::size_type v45 = (char *)a4[1];
          if (v45 != (char *)*a4)
          {
            do
            {
              uint64_t v47 = *((void *)v45 - 1);
              v45 -= 8;
              *((void *)v44 - 1) = v47;
              v44 -= 8;
            }
            while (v45 != (char *)v46);
            std::string::size_type v45 = (char *)*a4;
          }
          *a4 = (unint64_t *)v44;
          a4[1] = v34;
          a4[2] = (unint64_t *)&v39[8 * v38];
          if (v45) {
            operator delete(v45);
          }
        }
        else
        {
          *uint64_t v33 = v31;
          long long v34 = v33 + 1;
        }
        char v12 = (std::string *)((char *)v12 + 224);
        a4[1] = v34;
      }
      else
      {
        quasar::InverseTextNormalizer::getMergedToken((quasar::Token *)v12, (quasar::Token *)CompoundWord, (std::string *)v53);
        std::string::operator=((std::string *)v53, &__str);
        unint64_t v17 = a5[1];
        if (v17 >= a5[2])
        {
          uint64_t v18 = std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>(a5, (const quasar::Token *)v53);
        }
        else
        {
          quasar::Token::Token((std::string *)a5[1], (const quasar::Token *)v53);
          uint64_t v18 = v17 + 224;
          a5[1] = v17 + 224;
        }
        a5[1] = v18;
        unint64_t v21 = ((-1227133513 * (((unint64_t)v12 - *(void *)a2) >> 5)) | ((unint64_t)(-1227133513 * (((unint64_t)CompoundWord - *(void *)a2) >> 5)) << 32))
            - 0x100000000;
        long long v23 = a4[1];
        unint64_t v22 = (unint64_t)a4[2];
        if ((unint64_t)v23 >= v22)
        {
          uint64_t v25 = v23 - *a4;
          if ((unint64_t)(v25 + 1) >> 61) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v26 = v22 - (void)*a4;
          uint64_t v27 = v26 >> 2;
          if (v26 >> 2 <= (unint64_t)(v25 + 1)) {
            uint64_t v27 = v25 + 1;
          }
          if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v28 = v27;
          }
          if (v28) {
            uint64_t v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v52, v28);
          }
          else {
            uint64_t v29 = 0;
          }
          uint64_t v40 = (unint64_t *)&v29[8 * v25];
          unint64_t *v40 = v21;
          uint64_t v24 = v40 + 1;
          uint64_t v42 = *a4;
          uint64_t v41 = (char *)a4[1];
          if (v41 != (char *)*a4)
          {
            do
            {
              unint64_t v43 = *((void *)v41 - 1);
              v41 -= 8;
              *--uint64_t v40 = v43;
            }
            while (v41 != (char *)v42);
            uint64_t v41 = (char *)*a4;
          }
          *a4 = v40;
          a4[1] = v24;
          a4[2] = (unint64_t *)&v29[8 * v28];
          if (v41) {
            operator delete(v41);
          }
        }
        else
        {
          *long long v23 = v21;
          uint64_t v24 = v23 + 1;
        }
        a4[1] = v24;
        if (SBYTE7(v62) < 0) {
          operator delete(__p[0]);
        }
        if (SBYTE7(v60) < 0) {
          operator delete(v59[0]);
        }
        v69[0] = (void **)v58 + 1;
        std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v69);
        if (SBYTE7(v58[0]) < 0) {
          operator delete(v57[0]);
        }
        v69[0] = (void **)v56 + 1;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v69);
        if (SBYTE7(v56[0]) < 0) {
          operator delete(v55[0]);
        }
        if ((v53[23] & 0x80000000) != 0) {
          operator delete(*(void **)v53);
        }
        char v12 = (std::string *)CompoundWord;
      }
      *(_WORD *)(a5[1] - 180) = 0;
      uint64_t v68 = v12;
      if (quasar::gLogLevel >= 6)
      {
        long long v65 = 0u;
        long long v66 = 0u;
        long long v63 = 0u;
        long long v64 = 0u;
        *(_OWORD *)std::basic_string<char32_t> __p = 0u;
        long long v62 = 0u;
        *(_OWORD *)int v59 = 0u;
        long long v60 = 0u;
        memset(v58, 0, sizeof(v58));
        *(_OWORD *)unsigned int v57 = 0u;
        *(_OWORD *)size_t v55 = 0u;
        memset(v56, 0, sizeof(v56));
        long long v54 = 0u;
        memset(v53, 0, sizeof(v53));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v53);
        std::vector<std::pair<std::wstring, std::wstring>>::pointer v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"Preprocessed token: ", 20);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_str = &__str;
        }
        else {
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __str.__r_.__value_.__l.__size_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)p_str, size);
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v53);
      }
      uint64_t v10 = quasar::LabelTransformer::addAcceptorArcs((unsigned __int8 *)&__str, v15, a3);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
    }
    while (v12 != *(std::string **)(a2 + 8));
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, double))(*(void *)a3 + 184))(a3, v10, 0.0);
}

void sub_1B1C18240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void quasar::InverseTextNormalizer::getMergedToken(quasar::Token *a1@<X0>, quasar::Token *a2@<X1>, std::string *a3@<X8>)
{
  if ((quasar::Token *)((char *)a1 + 224) != a2)
  {
    float v6 = *((float *)a1 + 10);
    if (*((char *)a1 + 71) < 0) {
      std::string::__init_copy_ctor_external(&v52, *((const std::string::value_type **)a1 + 6), *((void *)a1 + 7));
    }
    else {
      std::string v52 = *(std::string *)((unsigned char *)a1 + 2);
    }
    unint64_t v28 = a3;
    if (*((char *)a1 + 119) < 0) {
      std::string::__init_copy_ctor_external(&v51, *((const std::string::value_type **)a1 + 12), *((void *)a1 + 13));
    }
    else {
      std::string v51 = *(std::string *)((unsigned char *)a1 + 4);
    }
    uint64_t v7 = *((unsigned int *)a1 + 42);
    float32x4_t v50 = *(float32x4_t *)((char *)a1 + 204);
    for (uint64_t i = a1; ; uint64_t i = (quasar::Token *)((char *)i + 224))
    {
      uint64_t v9 = v7;
      if (*((char *)i + 295) < 0) {
        uint64_t v10 = *((void *)i + 35);
      }
      else {
        uint64_t v10 = *((unsigned __int8 *)i + 295);
      }
      float v11 = *((float *)i + 66);
      if (v10)
      {
        std::operator+<char>();
        char v12 = (SBYTE7(v34) & 0x80u) == 0
            ? (const std::string::value_type *)__p
            : (const std::string::value_type *)__p[0];
        int v13 = (SBYTE7(v34) & 0x80u) == 0 ? (void *)BYTE7(v34) : __p[1];
        std::string::append(&v52, v12, (std::string::size_type)v13);
        if (SBYTE7(v34) < 0) {
          operator delete(__p[0]);
        }
      }
      if (*((char *)i + 343) < 0)
      {
        if (*((void *)i + 41))
        {
LABEL_28:
          std::operator+<char>();
          if ((SBYTE7(v34) & 0x80u) == 0) {
            uint64_t v14 = __p;
          }
          else {
            uint64_t v14 = (void **)__p[0];
          }
          if ((SBYTE7(v34) & 0x80u) == 0) {
            std::string::size_type v15 = BYTE7(v34);
          }
          else {
            std::string::size_type v15 = (std::string::size_type)__p[1];
          }
          std::string::append(&v51, (const std::string::value_type *)v14, v15);
          if (SBYTE7(v34) < 0) {
            operator delete(__p[0]);
          }
        }
      }
      else if (*((unsigned char *)i + 343))
      {
        goto LABEL_28;
      }
      quasar::Token::DecodingSignals::operator+=(&v50, (float32x4_t *)((char *)i + 428));
      uint64_t v7 = *((unsigned int *)i + 98);
      if (v9 == v7)
      {
        uint64_t v7 = v9;
      }
      else if (v9 != 5 && quasar::gLogLevel >= 2)
      {
        long long v48 = 0u;
        long long v49 = 0u;
        long long v46 = 0u;
        long long v47 = 0u;
        long long v44 = 0u;
        long long v45 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        *(_OWORD *)std::basic_string<char32_t> __p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Merged token span covers multiple LME types (", 45);
        unint64_t v17 = quasar::operator<<(v16, v9);
        uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" and ", 5);
        unint64_t v19 = quasar::operator<<(v18, *((_DWORD *)i + 98));
        uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"); using ", 9);
        unint64_t v21 = quasar::operator<<(v20, *((_DWORD *)i + 98));
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)".", 1);
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)__p);
        uint64_t v7 = *((unsigned int *)i + 98);
      }
      float v6 = v6 + v11;
      unint64_t v22 = (quasar::Token *)((char *)i + 448);
      if (v22 == a2)
      {
        std::string::basic_string[abi:ne180100]<0>(v31, "");
        int v23 = *((_DWORD *)a1 + 7);
        int v24 = *((_DWORD *)a2 - 48);
        int v25 = *((_DWORD *)a2 - 47);
        int v26 = *((unsigned __int8 *)a2 - 180);
        int v27 = *((unsigned __int8 *)a1 + 45);
        __p[0] = 0;
        __p[1] = 0;
        *(void *)&long long v34 = 0;
        std::string::basic_string[abi:ne180100]<0>(v29, "");
        quasar::Token::Token(v28, (long long *)v31, v23, v24, v25, v26 != 0, v27 != 0, (long long *)&v52, v6 / (float)(0x6DB6DB6DB6DB6DB7 * ((a2 - a1) >> 5)), (long long *)&v51, (long long **)__p, 0, (long long *)v29, 0, 0);
        if (v30 < 0) {
          operator delete(v29[0]);
        }
        v29[0] = __p;
        std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v29);
        if (v32 < 0) {
          operator delete(v31[0]);
        }
        LODWORD(v28[7].__r_.__value_.__l.__data_) = v7;
        *(float32x4_t *)((char *)&v28[8].__r_.__value_.__r.__words[1] + 4) = v50;
        if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v51.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v52.__r_.__value_.__l.__data_);
        }
        return;
      }
    }
  }
  quasar::Token::Token(a3, a1);
}

void sub_1B1C18698(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (*(char *)(v32 - 105) < 0) {
    operator delete(*(void **)(v32 - 128));
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::InverseTextNormalizer::checkFunction(unsigned int **a1, int a2)
{
  unsigned __int8 v14 = 0;
  std::vector<BOOL>::vector(&__p, a2, &v14);
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  if (*a1 == v5)
  {
LABEL_13:
    uint64_t v12 = 1;
  }
  else
  {
    float v6 = __p;
LABEL_3:
    unint64_t v7 = *v4;
    if ((v7 & 0x80000000) == 0)
    {
      int v8 = v4[1];
      if ((int)v7 <= v8 && v8 < a2)
      {
        int v10 = v8 - v7 + 1;
        while (1)
        {
          uint64_t v11 = v6[v7 >> 6];
          if ((v11 & (1 << v7)) != 0) {
            break;
          }
          v6[v7 >> 6] = v11 | (1 << v7);
          ++v7;
          if (!--v10)
          {
            v4 += 2;
            if (v4 != v5) {
              goto LABEL_3;
            }
            goto LABEL_13;
          }
        }
      }
    }
    uint64_t v12 = 0;
  }
  if (__p) {
    operator delete(__p);
  }
  return v12;
}

void quasar::InverseTextNormalizer::doFeatureExtraction(uint64_t a1, uint64_t a2, uint64_t *a3, int32x2_t *a4, int a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  unsigned __int8 v14 = *(quasar::VocabId **)a7;
  if (*(void *)a7)
  {
    std::string::size_type v15 = *(std::__shared_weak_count **)(a7 + 8);
    if (v15)
    {
LABEL_3:
      float32x4_t v50 = v15;
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      goto LABEL_6;
    }
  }
  else
  {
    unsigned __int8 v14 = *(quasar::VocabId **)(a1 + 360);
    std::string::size_type v15 = *(std::__shared_weak_count **)(a1 + 368);
    if (v15) {
      goto LABEL_3;
    }
  }
  float32x4_t v50 = 0;
LABEL_6:
  quasar::VocabId::getBosWord(v14, (std::string *)__p);
  Worduint64_t Id = quasar::VocabId::getWordId((uint64_t)v14, (uint64_t)__p);
  if (SBYTE7(v53) < 0) {
    operator delete(__p[0]);
  }
  quasar::VocabId::getEosWord(v14, (std::string *)__p);
  int v17 = quasar::VocabId::getWordId((uint64_t)v14, (uint64_t)__p);
  if (SBYTE7(v53) < 0) {
    operator delete(__p[0]);
  }
  quasar::VocabId::getPaddingWord(v14, (std::string *)__p);
  int v18 = quasar::VocabId::getWordId((uint64_t)v14, (uint64_t)__p);
  if (SBYTE7(v53) < 0)
  {
    operator delete(__p[0]);
    if (a5)
    {
LABEL_12:
      kaldi::CuMatrix<float>::Resize(a4, a6, (*(_DWORD *)(a1 + 8) + 1), 0, 0);
      kaldi::CuMatrixBase<float>::Set((uint64_t)a4, -1.0);
      int NumTokens = quasar::InverseTextNormalizer::getNumTokens(a1, a2);
      __int32 v20 = a4[2].i32[1];
      int32x2_t v21 = a4[1];
      *(float *)v21.i32[0] = (float)WordId;
      uint64_t v22 = a4[3].i32[0];
      uint64_t v23 = *(void *)&v21 + 4 * ((int)v22 + (int)v22 * NumTokens);
      *(float *)uint64_t v23 = (float)v17;
      *(_DWORD *)(*(void *)&v21 + 4) = 0;
      *(_DWORD *)(v23 + 4) = 0;
      int v24 = NumTokens + 2;
      if (NumTokens + 2 < v20)
      {
        uint64_t v25 = v24;
        int v26 = (float *)(*(void *)&v21 + 4 * (int)v22 * (uint64_t)v24);
        uint64_t v27 = 4 * v22;
        int v28 = v20 - NumTokens - 2;
        do
        {
          *int v26 = (float)v18;
          ++v25;
          int v26 = (float *)((char *)v26 + v27);
          --v28;
        }
        while (v28);
      }
      goto LABEL_19;
    }
  }
  else if (a5)
  {
    goto LABEL_12;
  }
  int v29 = quasar::InverseTextNormalizer::getNumTokens(a1, a2);
  kaldi::CuMatrix<float>::Resize(a4, (v29 + 1), (*(_DWORD *)(a1 + 8) + 1), 1, 0);
  int v30 = a4[2].i32[0];
  uint64_t v31 = (float *)a4[1];
  *uint64_t v31 = (float)WordId;
  if (v30 >= 2) {
    memset_pattern16(v31 + 1, &unk_1B2564410, 4 * (v30 - 1));
  }
LABEL_19:
  uint64_t NextToken = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  memset(&v76, 0, sizeof(v76));
  int v33 = 1;
  uint64_t v73 = 0;
  uint64_t v74 = 0;
  uint64_t v75 = 0;
  char v72 = 0;
  int v71 = -1;
  while (1)
  {
    LODWORD(__p[0]) = (*(float (**)(uint64_t, uint64_t))(*(void *)a2 + 32))(a2, NextToken);
    LODWORD(v69[0]) = 2139095040;
    if (*(float *)__p != INFINITY) {
      break;
    }
    uint64_t NextToken = quasar::InverseTextNormalizer::getNextToken(a1, a2, NextToken, &v76, (uint64_t)&v73, &v72, &v71);
    uint64_t v34 = HIBYTE(v75);
    if (v75 < 0) {
      uint64_t v34 = v74;
    }
    if (v34) {
      std::operator+<char>();
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(v69, "");
    }
    if (v72)
    {
      int v35 = quasar::VocabId::getWordId((uint64_t)v14, (uint64_t)v69);
    }
    else
    {
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v76.__r_.__value_.__l.__data_, v69, (uint64_t)__p);
      int v35 = quasar::VocabId::getWordId((uint64_t)v14, (uint64_t)__p);
      if (SBYTE7(v53) < 0) {
        operator delete(__p[0]);
      }
    }
    if (quasar::gLogLevel >= 6)
    {
      long long v67 = 0u;
      long long v68 = 0u;
      long long v65 = 0u;
      long long v66 = 0u;
      long long v63 = 0u;
      long long v64 = 0u;
      long long v61 = 0u;
      long long v62 = 0u;
      long long v59 = 0u;
      long long v60 = 0u;
      long long v57 = 0u;
      long long v58 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      *(_OWORD *)std::basic_string<char32_t> __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"tokenNum=", 9);
      long long v36 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" tokenId=", 9);
      long long v37 = (void *)std::ostream::operator<<();
      long long v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)" word=", 6);
      if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v39 = &v76;
      }
      else {
        long long v39 = (std::string *)v76.__r_.__value_.__r.__words[0];
      }
      if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v76.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v76.__r_.__value_.__l.__size_;
      }
      long long v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)v39, size);
      long long v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)" tag=", 5);
      if ((v70 & 0x80u) == 0) {
        long long v43 = v69;
      }
      else {
        long long v43 = (const void **)v69[0];
      }
      if ((v70 & 0x80u) == 0) {
        uint64_t v44 = v70;
      }
      else {
        uint64_t v44 = (uint64_t)v69[1];
      }
      long long v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)v43, v44);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)" tagIsSense=", 12);
      std::ostream::operator<<();
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)__p);
    }
    *(float *)(*(void *)&a4[1] + 4 * a4[3].i32[0] * v33) = (float)v35;
    if (*a8) {
      uint64_t v46 = *a8;
    }
    else {
      uint64_t v46 = a1 + 376;
    }
    quasar::InverseTextNormalizer::getFeatures(a1, (uint64_t)&v76, (uint64_t)&v73, v33, 1, (uint64_t)a4, v46);
    unint64_t v47 = a3[1];
    if (v47 >= a3[2])
    {
      uint64_t v49 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a3, (long long *)&v76);
    }
    else
    {
      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)a3[1], v76.__r_.__value_.__l.__data_, v76.__r_.__value_.__l.__size_);
      }
      else
      {
        long long v48 = *(_OWORD *)&v76.__r_.__value_.__l.__data_;
        *(void *)(v47 + 16) = *((void *)&v76.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v47 = v48;
      }
      uint64_t v49 = v47 + 24;
      a3[1] = v47 + 24;
    }
    a3[1] = v49;
    if ((char)v70 < 0) {
      operator delete((void *)v69[0]);
    }
    ++v33;
  }
  if (SHIBYTE(v75) < 0) {
    operator delete(v73);
  }
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v76.__r_.__value_.__l.__data_);
  }
  if (v50) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v50);
  }
}

void sub_1B1C18D40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::__shared_weak_count *a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a9);
  }
  _Unwind_Resume(exception_object);
}

void quasar::VocabId::getBosWord(quasar::VocabId *this@<X0>, std::string *a2@<X8>)
{
  if (*(void *)this)
  {
    kaldi::quasar::Vocab::BosWord(*(kaldi::quasar::Vocab **)this, a2);
  }
  else if (*((char *)this + 159) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 17), *((void *)this + 18));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 136);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 19);
  }
}

void quasar::VocabId::getEosWord(quasar::VocabId *this@<X0>, std::string *a2@<X8>)
{
  if (*(void *)this)
  {
    kaldi::quasar::Vocab::EosWord(*(kaldi::quasar::Vocab **)this, a2);
  }
  else if (*((char *)this + 183) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 20), *((void *)this + 21));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 10);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 22);
  }
}

void quasar::InverseTextNormalizer::run(int *a1@<X0>, long long **a2@<X1>, const void **a3@<X3>, char a4@<W4>, uint64_t *a5@<X8>)
{
  long long v42 = 0;
  long long v43 = 0;
  uint64_t v44 = 0;
  int v10 = quasar::QsrText::SingletonInstance((quasar::QsrText *)a1);
  quasar::QsrText::removeW00(v10, a2, (uint64_t *)&v42);
  unint64_t v11 = a1[4];
  uint64_t v12 = v42;
  int v13 = v43;
  unint64_t v14 = ((char *)v43 - (char *)v42) / 224;
  if (!v11 || v14 <= v11)
  {
    quasar::InverseTextNormalizer::runChunk((uint64_t)a1, (uint64_t *)&v42, a5);
    quasar::InverseTextNormalizer::removeTrailingFormalAutoPunctuation((uint64_t)a1, a5, a3, a4);
    goto LABEL_28;
  }
  unint64_t v15 = 0;
  uint64_t v16 = v42 + 8;
  BOOL v17 = 1;
  while (1)
  {
    if (!v15)
    {
      unsigned int v20 = v42[7];
      goto LABEL_9;
    }
    unint64_t v18 = (v15 - 1);
    if (v14 <= v18) {
      std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
    }
    unsigned int v19 = v42[56 * v18 + 8];
    unsigned int v20 = *(v16 - 1);
    if (v19 > v20) {
      break;
    }
LABEL_9:
    if (v20 > *v16 || *v16 == 0) {
      break;
    }
    ++v15;
    v16 += 56;
    BOOL v17 = v14 > v15;
    if (v14 == v15)
    {
      BOOL v17 = 0;
      goto LABEL_21;
    }
  }
  if (quasar::gLogLevel >= 5)
  {
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v25 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v25, (uint64_t)"token sequence time is not monotonic increasing.", 48);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v25);
    uint64_t v12 = v42;
    int v13 = v43;
  }
  if (v12 != v13)
  {
    int v22 = 0;
    do
    {
      v12[7] = v22;
      v22 += 10;
      v12[8] = v22;
      v12[9] = v22;
      v12 += 56;
    }
    while (v12 != v13);
  }
LABEL_21:
  quasar::InverseTextNormalizer::runInChunks((uint64_t)a1, &v42, a5);
  if (v17)
  {
    if (quasar::gLogLevel >= 4)
    {
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v25 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v25);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v25, (uint64_t)"reset token timing.", 19);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v25);
    }
    uint64_t v23 = *a5;
    uint64_t v24 = a5[1];
    while (v23 != v24)
    {
      *(void *)(v23 + 32) = 0;
      *(_DWORD *)(v23 + 28) = 0;
      v23 += 224;
    }
  }
  quasar::InverseTextNormalizer::removeTrailingFormalAutoPunctuation((uint64_t)a1, a5, a3, a4);
LABEL_28:
  *(void *)&long long v25 = &v42;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
}

void sub_1B1C19114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a9);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  a9 = v9 - 88;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  _Unwind_Resume(a1);
}

double quasar::StopWatch::pause(quasar::StopWatch *this, clockid_t a2)
{
  if (*((_DWORD *)this + 6) != 1)
  {
    memset(v7, 0, sizeof(v7));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, "StopWatch is not running.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v7);
  }
  uint64_t v2 = (double *)this;
  *((_DWORD *)this + 6) = 0;
  double Seconds = kaldi::Timer::GetSeconds((kaldi::Timer *)5, a2);
  double v4 = v2[4];
  v2 += 4;
  v2[5] = v2[5] + Seconds - v4;
  double result = kaldi::Timer::ElapsedCPU((kaldi::Timer *)v2, v5) + v2[6];
  v2[6] = result;
  return result;
}

uint64_t quasar::InverseTextNormalizer::getCommands(uint64_t a1, uint64_t *a2, uint64_t *a3, std::vector<unsigned int> *a4)
{
  long long v21 = 0uLL;
  std::vector<std::shared_ptr<quasar::CommandTransform>>::resize(a3, 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5), &v21);
  if (*((void *)&v21 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v21 + 1));
  }
  std::vector<int>::resize(a4, 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5));
  uint64_t v7 = *a2;
  if (a2[1] == *a2)
  {
    char v11 = 0;
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    char v11 = 0;
    int v12 = -1;
    do
    {
      a4->__begin_[v10] = v12;
      int v13 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((void *)(a1 + 600), (unsigned __int8 *)(v7 + v8));
      if (v13)
      {
        quasar::CommandTransform::getCommandTransform(*((unsigned int *)v13 + 10), *(void *)(a1 + 640));
        uint64_t v14 = *a3 + v9;
        long long v15 = v21;
        long long v21 = 0uLL;
        uint64_t v16 = *(std::__shared_weak_count **)(v14 + 8);
        *(_OWORD *)uint64_t v14 = v15;
        if (v16) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v16);
        }
        if (*((void *)&v21 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v21 + 1));
        }
        char v11 = 1;
      }
      else
      {
        BOOL v17 = (void *)(*a3 + v9);
        unint64_t v18 = (std::__shared_weak_count *)v17[1];
        void *v17 = 0;
        v17[1] = 0;
        if (v18) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v18);
        }
        int v12 = v10;
      }
      ++v10;
      uint64_t v7 = *a2;
      v9 += 16;
      v8 += 224;
    }
    while (0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5) > v10);
  }
  return v11 & 1;
}

void sub_1B1C193DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::shared_ptr<quasar::CommandTransform>>::resize(uint64_t *a1, unint64_t a2, void *a3)
{
  uint64_t v4 = a1[1];
  unint64_t v5 = (v4 - *a1) >> 4;
  if (a2 <= v5)
  {
    if (a2 < v5)
    {
      uint64_t v7 = *a1 + 16 * a2;
      while (v4 != v7)
      {
        uint64_t v8 = *(std::__shared_weak_count **)(v4 - 8);
        if (v8) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        }
        v4 -= 16;
      }
      a1[1] = v7;
    }
  }
  else
  {
    unint64_t v6 = a2 - v5;
    std::vector<std::shared_ptr<quasar::CommandTransform>>::__append(a1, v6, a3);
  }
}

void quasar::InverseTextNormalizer::applyCommands(uint64_t a1, uint64_t *a2, void *a3, void *a4)
{
  memset(v28, 0, 24);
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v28, *a2, a2[1], 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5));
  long long v25 = &v25;
  long long v26 = (uint64_t *)&v25;
  uint64_t v27 = 0;
  if (a2[1] != *a2)
  {
    unint64_t v6 = 0;
    do
    {
      uint64_t v7 = *(_DWORD **)(*a3 + 16 * v6);
      if (v7)
      {
        uint64_t v8 = *(std::__shared_weak_count **)(*a3 + 16 * v6 + 8);
        if (v8) {
          atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v7[4] != 4
          || (*(unsigned int (**)(_DWORD *, uint64_t *, unint64_t, void, void *))(*(void *)v7 + 16))(v7, a2, v6, *(unsigned int *)(*a4 + 4 * v6), v28) != 1)
        {
          int v9 = v7[3];
          unint64_t v10 = v26;
          if (v9 && v26 != (uint64_t *)&v25)
          {
            while (*(_DWORD *)(v10[2] + 8) != v9)
            {
              unint64_t v10 = (uint64_t *)v10[1];
              if (v10 == (uint64_t *)&v25) {
                goto LABEL_27;
              }
            }
            std::list<std::shared_ptr<quasar::CommandTransform>>::erase((uint64_t)&v25, v10);
          }
LABEL_27:
          long long v21 = operator new(0x20uLL);
          v21[2] = v7;
          void v21[3] = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v22 = (uint64_t)v25;
          *long long v21 = v25;
          v21[1] = &v25;
          *(void *)(v22 + 8) = v21;
          long long v25 = v21;
          ++v27;
        }
        if (v8) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        }
      }
      else
      {
        char v11 = v26;
        if (v26 != (uint64_t *)&v25)
        {
          do
          {
            int v12 = (*(uint64_t (**)(uint64_t, uint64_t *, unint64_t, void, void *))(*(void *)v11[2] + 16))(v11[2], a2, v6, *(unsigned int *)(*a4 + 4 * v6), v28);
            if (quasar::gLogLevel >= 5)
            {
              memset(v24, 0, sizeof(v24));
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v24);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"index=", 6);
              int v13 = (void *)std::ostream::operator<<();
              uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" token=", 7);
              uint64_t v15 = *a2 + 224 * v6;
              int v16 = *(char *)(v15 + 23);
              if (v16 >= 0) {
                uint64_t v17 = *a2 + 224 * v6;
              }
              else {
                uint64_t v17 = *(void *)v15;
              }
              if (v16 >= 0) {
                uint64_t v18 = *(unsigned __int8 *)(v15 + 23);
              }
              else {
                uint64_t v18 = *(void *)(v15 + 8);
              }
              unsigned int v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v17, v18);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" commandId=", 11);
              std::ostream::operator<<();
              quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v24);
            }
            unsigned int v20 = (uint64_t *)v11[1];
            if (v12 == 1) {
              std::list<std::shared_ptr<quasar::CommandTransform>>::erase((uint64_t)&v25, v11);
            }
            char v11 = v20;
          }
          while (v20 != (uint64_t *)&v25);
        }
      }
      ++v6;
    }
    while (0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5) > v6);
  }
  std::__list_imp<std::shared_ptr<quasar::CommandTransform>>::clear((uint64_t *)&v25);
  *(void *)&v24[0] = v28;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v24);
}

void sub_1B1C197A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11)
{
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  std::__list_imp<std::shared_ptr<quasar::CommandTransform>>::clear((uint64_t *)(v12 - 136));
  a11 = (void **)(v12 - 112);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&a11);
  _Unwind_Resume(a1);
}

uint64_t std::list<std::shared_ptr<quasar::CommandTransform>>::erase(uint64_t a1, uint64_t *__p)
{
  uint64_t v3 = *__p;
  uint64_t v4 = __p[1];
  *(void *)(v3 + 8) = v4;
  *(void *)__p[1] = v3;
  --*(void *)(a1 + 16);
  unint64_t v5 = (std::__shared_weak_count *)__p[3];
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  operator delete(__p);
  return v4;
}

void quasar::InverseTextNormalizer::setSpacing(uint64_t a1, std::string **a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2 == *a2) {
    return;
  }
  unint64_t v5 = *a2;
  if (SHIBYTE(v3->__r_.__value_.__r.__words[2]) < 0) {
    unint64_t v5 = (std::string *)v3->__r_.__value_.__r.__words[0];
  }
  if (v5->__r_.__value_.__s.__data_[0] == 32)
  {
    std::string::erase(*a2, 0, 1uLL);
    uint64_t v3 = *a2;
    uint64_t v2 = a2[1];
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((char *)v2 - (char *)v3) >> 5)) < 2)
  {
    char v11 = v3;
    goto LABEL_25;
  }
  unint64_t v6 = 0;
  int v7 = 0;
  unint64_t v8 = 1;
  do
  {
    int v9 = (std::string *)((char *)v3 + v6 + 224);
    unint64_t v10 = v9;
    if (v3[10].__r_.__value_.__s.__data_[v6 + 7] < 0) {
      unint64_t v10 = (std::string *)v9->__r_.__value_.__r.__words[0];
    }
    if (v10->__r_.__value_.__s.__data_[0] == 32)
    {
      std::string::erase(v9, 0, 1uLL);
      char v11 = *a2;
      (*a2)[1].__r_.__value_.__s.__data_[224 * v7 + 20] = 1;
      std::string::size_type v12 = v3[10].__r_.__value_.__s.__data_[v6 + 7];
      if ((v12 & 0x80) == 0) {
        goto LABEL_15;
      }
    }
    else
    {
      std::string::size_type v12 = v3[10].__r_.__value_.__s.__data_[v6 + 7];
      char v11 = v3;
      if ((v12 & 0x80) == 0) {
        goto LABEL_15;
      }
    }
    std::string::size_type v12 = v3[9].__r_.__value_.__r.__words[v6 / 8 + 2];
LABEL_15:
    if (v12) {
      int v7 = v8;
    }
    ++v8;
    uint64_t v2 = a2[1];
    v6 += 224;
    uint64_t v3 = v11;
  }
  while (0x6DB6DB6DB6DB6DB7 * (((char *)v2 - (char *)v11) >> 5) > v8);
LABEL_25:
  while (v11 != v2)
  {
    if (SHIBYTE(v11->__r_.__value_.__r.__words[2]) < 0)
    {
      if (v11->__r_.__value_.__l.__size_) {
        return;
      }
    }
    else if (*((unsigned char *)&v11->__r_.__value_.__s + 23))
    {
      return;
    }
    v11[1].__r_.__value_.__s.__data_[20] = 0;
    char v11 = (std::string *)((char *)v11 + 224);
  }
}

BOOL quasar::InverseTextNormalizer::easterEgg(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  if (a2[1] - *a2 != 1344) {
    return 0;
  }
  int v5 = *(char *)(v3 + 23);
  if (v5 < 0)
  {
    if (*(void *)(v3 + 8) != 2) {
      return 0;
    }
    unint64_t v6 = *(_WORD **)v3;
  }
  else
  {
    unint64_t v6 = (_WORD *)*a2;
    if (v5 != 2) {
      return 0;
    }
  }
  if (*v6 != 31085) {
    return 0;
  }
  uint64_t v8 = v3 + 224;
  int v9 = *(char *)(v3 + 247);
  if (v9 < 0)
  {
    if (*(void *)(v3 + 232) != 6) {
      return 0;
    }
    uint64_t v8 = *(void *)v8;
  }
  else if (v9 != 6)
  {
    return 0;
  }
  int v10 = *(_DWORD *)v8;
  int v11 = *(unsigned __int16 *)(v8 + 4);
  if (v10 != 1852142150 || v11 != 26723) {
    return 0;
  }
  uint64_t v13 = v3 + 448;
  int v14 = *(char *)(v3 + 471);
  if (v14 < 0)
  {
    if (*(void *)(v3 + 456) != 10) {
      return 0;
    }
    uint64_t v13 = *(void *)v13;
  }
  else if (v14 != 10)
  {
    return 0;
  }
  uint64_t v15 = *(void *)v13;
  int v16 = *(unsigned __int16 *)(v13 + 8);
  if (v15 != 0x616E6F6974636964 || v16 != 31090) {
    return 0;
  }
  uint64_t v18 = (void *)(v3 + 672);
  int v19 = *(char *)(v3 + 695);
  if (v19 < 0)
  {
    if (*(void *)(v3 + 680) != 4) {
      return 0;
    }
    uint64_t v18 = (void *)*v18;
  }
  else if (v19 != 4)
  {
    return 0;
  }
  if (*(_DWORD *)v18 != 1937006949) {
    return 0;
  }
  unsigned int v20 = (void *)(v3 + 896);
  int v21 = *(char *)(v3 + 919);
  if (v21 < 0)
  {
    if (*(void *)(v3 + 904) != 4) {
      return 0;
    }
    unsigned int v20 = (void *)*v20;
  }
  else if (v21 != 4)
  {
    return 0;
  }
  if (*(_DWORD *)v20 != 1702259046) {
    return 0;
  }
  BOOL result = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(v3 + 1120), "hotdogs");
  if (result)
  {
    if (a3 != a2) {
      std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>((uint64_t)a3, *a2, a2[1], 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5));
    }
    MEMORY[0x1B3EA7B20](*a3, "Tantor");
    MEMORY[0x1B3EA7B20](*a3 + 224, "is");
    MEMORY[0x1B3EA7B20](*a3 + 448, "a");
    MEMORY[0x1B3EA7B20](*a3 + 672, "mighty");
    MEMORY[0x1B3EA7B20](*a3 + 896, "fine");
    MEMORY[0x1B3EA7B20](*a3 + 1120, "elephant.");
    return 1;
  }
  return result;
}

uint64_t quasar::InverseTextNormalizer::emptyCommandTokens(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3 != *a2)
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    uint64_t v9 = 44;
    do
    {
      if (*(void *)(v4 + v7))
      {
        uint64_t result = MEMORY[0x1B3EA7B20](*a3 + v9 - 44, "");
        *(unsigned char *)(*a3 + v9) = 0;
        uint64_t v4 = *a2;
        uint64_t v3 = a2[1];
      }
      ++v8;
      v9 += 224;
      v7 += 16;
    }
    while (v8 < (v3 - v4) >> 4);
  }
  return result;
}

void quasar::InverseTextNormalizer::setTokenProperties(uint64_t *a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v4 = a2;
    unint64_t v6 = 0;
    do
    {
      uint64_t v7 = (int *)(*v4 + 8 * v6);
      int v8 = *v7;
      int v72 = v7[1];
      if (*(unsigned char *)(v3 + 224 * v6 + 172))
      {
        unsigned int v9 = *(_DWORD *)(*a1 + 224 * v7[1] + 32);
        *(int32x2_t *)(v3 + 224 * v6 + 28) = vdup_n_s32(v9);
      }
      else
      {
        uint64_t v10 = v3 + 224 * v6;
        int v11 = *(unsigned __int8 *)(v10 + 173);
        uint64_t v12 = *a1;
        unsigned int v9 = *(_DWORD *)(*a1 + 224 * v8 + 28);
        *(_DWORD *)(v10 + 28) = v9;
        if (v11)
        {
          *(_DWORD *)(v3 + 224 * v6 + 32) = v9;
        }
        else
        {
          uint64_t v13 = v12 + 224 * v72;
          *(_DWORD *)(v3 + 224 * v6 + 32) = *(_DWORD *)(v13 + 32);
          unsigned int v9 = *(_DWORD *)(v13 + 36);
        }
      }
      *(_DWORD *)(v3 + 224 * v6 + 36) = v9;
      memset(&__str, 0, sizeof(__str));
      memset(&v91, 0, sizeof(v91));
      quasar::Token::DecodingSignals::DecodingSignals(v90.f32, 0.0, 0.0, 0.0, 0.0);
      if (v8 <= v72)
      {
        uint64_t v16 = 224 * v8 + 104;
        int v17 = v72 - v8 + 1;
        float v15 = 0.0;
        uint64_t v18 = 5;
        do
        {
          uint64_t v19 = *a1 + v16;
          float v20 = *(float *)(v19 - 64);
          if (*(char *)(v19 - 33) >= 0) {
            size_t v21 = *(unsigned __int8 *)(v19 - 33);
          }
          else {
            size_t v21 = *(void *)(v19 - 48);
          }
          std::string::basic_string[abi:ne180100]((uint64_t)__p, v21 + 1);
          if ((SBYTE7(v74) & 0x80u) == 0) {
            uint64_t v22 = __p;
          }
          else {
            uint64_t v22 = (void **)__p[0];
          }
          if (v21)
          {
            if (*(char *)(v19 - 33) >= 0) {
              uint64_t v23 = (const void *)(v19 - 56);
            }
            else {
              uint64_t v23 = *(const void **)(v19 - 56);
            }
            memmove(v22, v23, v21);
          }
          *(_WORD *)((char *)v22 + v21) = 32;
          if ((SBYTE7(v74) & 0x80u) == 0) {
            uint64_t v24 = __p;
          }
          else {
            uint64_t v24 = (void **)__p[0];
          }
          if ((SBYTE7(v74) & 0x80u) == 0) {
            std::string::size_type v25 = BYTE7(v74);
          }
          else {
            std::string::size_type v25 = (std::string::size_type)__p[1];
          }
          std::string::append(&__str, (const std::string::value_type *)v24, v25);
          if (SBYTE7(v74) < 0) {
            operator delete(__p[0]);
          }
          std::string::size_type size = HIBYTE(v91.__r_.__value_.__r.__words[2]);
          if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type size = v91.__r_.__value_.__l.__size_;
          }
          if (size) {
            std::string::append(&v91, ".");
          }
          uint64_t v27 = *a1 + v16;
          std::string::size_type v28 = *(unsigned __int8 *)(v27 + 15);
          std::string::size_type v29 = *(void *)v27;
          long long v32 = *(const std::string::value_type **)(v27 - 8);
          long long v30 = (const std::string::value_type *)(v27 - 8);
          long long v31 = v32;
          if ((v28 & 0x80u) == 0) {
            long long v33 = v30;
          }
          else {
            long long v33 = v31;
          }
          if ((v28 & 0x80u) == 0) {
            std::string::size_type v34 = v28;
          }
          else {
            std::string::size_type v34 = v29;
          }
          std::string::append(&v91, v33, v34);
          uint64_t v35 = *a1;
          uint64_t v14 = *(unsigned int *)(*a1 + v16 + 64);
          if (v18 == v14)
          {
            uint64_t v14 = v18;
          }
          else if (v18 != 5 && quasar::gLogLevel >= 6)
          {
            long long v88 = 0u;
            long long v89 = 0u;
            long long v86 = 0u;
            long long v87 = 0u;
            long long v84 = 0u;
            long long v85 = 0u;
            long long v82 = 0u;
            long long v83 = 0u;
            long long v80 = 0u;
            long long v81 = 0u;
            long long v78 = 0u;
            long long v79 = 0u;
            long long v76 = 0u;
            long long v77 = 0u;
            long long v74 = 0u;
            long long v75 = 0u;
            *(_OWORD *)std::basic_string<char32_t> __p = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
            long long v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Merged token span covers multiple LME types (", 45);
            long long v37 = quasar::operator<<(v36, v18);
            long long v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)" and ", 5);
            long long v39 = quasar::operator<<(v38, *(_DWORD *)(*a1 + v16 + 64));
            long long v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"); using ",
                    9);
            long long v41 = quasar::operator<<(v40, *(_DWORD *)(*a1 + v16 + 64));
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)".", 1);
            quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)__p);
            uint64_t v35 = *a1;
            uint64_t v14 = *(unsigned int *)(*a1 + v16 + 64);
          }
          quasar::Token::DecodingSignals::operator+=(&v90, (float32x4_t *)(v35 + v16 + 100));
          float v15 = v15 + v20;
          v16 += 224;
          uint64_t v18 = v14;
          --v17;
        }
        while (v17);
      }
      else
      {
        LODWORD(v14) = 5;
        float v15 = 0.0;
      }
      quasar::trim(&__str);
      uint64_t v42 = *a3 + 224 * v6;
      *(float *)(v42 + 40) = v15 / (float)(v72 - v8 + 1);
      std::string::operator=((std::string *)(v42 + 48), &__str);
      std::string::operator=((std::string *)(*a3 + 224 * v6 + 96), &v91);
      uint64_t v43 = *a3 + 224 * v6;
      *(_DWORD *)(v43 + 168) = v14;
      *(float32x4_t *)(v43 + 204) = v90;
      uint64_t v4 = a2;
      if (quasar::gLogLevel >= 6)
      {
        long long v88 = 0u;
        long long v89 = 0u;
        long long v86 = 0u;
        long long v87 = 0u;
        long long v84 = 0u;
        long long v85 = 0u;
        long long v82 = 0u;
        long long v83 = 0u;
        long long v80 = 0u;
        long long v81 = 0u;
        long long v78 = 0u;
        long long v79 = 0u;
        long long v76 = 0u;
        long long v77 = 0u;
        long long v74 = 0u;
        long long v75 = 0u;
        *(_OWORD *)std::basic_string<char32_t> __p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"[", 1);
        uint64_t v44 = (void *)std::ostream::operator<<();
        long long v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"] ", 2);
        uint64_t v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"\"", 1);
        uint64_t v47 = *a1 + 224 * *(int *)(*a2 + 8 * v6);
        int v48 = *(char *)(v47 + 23);
        if (v48 >= 0) {
          uint64_t v49 = *a1 + 224 * *(int *)(*a2 + 8 * v6);
        }
        else {
          uint64_t v49 = *(void *)v47;
        }
        if (v48 >= 0) {
          uint64_t v50 = *(unsigned __int8 *)(v47 + 23);
        }
        else {
          uint64_t v50 = *(void *)(v47 + 8);
        }
        std::string v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, v49, v50);
        std::string v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"\" ~ ", 4);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"[", 1);
        long long v53 = (void *)std::ostream::operator<<();
        long long v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"] ", 2);
        long long v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"\"", 1);
        uint64_t v56 = *a1 + 224 * *(int *)(*a2 + 8 * v6 + 4);
        int v57 = *(char *)(v56 + 23);
        if (v57 >= 0) {
          uint64_t v58 = *a1 + 224 * *(int *)(*a2 + 8 * v6 + 4);
        }
        else {
          uint64_t v58 = *(void *)v56;
        }
        if (v57 >= 0) {
          uint64_t v59 = *(unsigned __int8 *)(v56 + 23);
        }
        else {
          uint64_t v59 = *(void *)(v56 + 8);
        }
        long long v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, v58, v59);
        long long v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)"\" -> ", 5);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)"[", 1);
        long long v62 = (void *)std::ostream::operator<<();
        long long v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"] ", 2);
        long long v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)"\"", 1);
        uint64_t v65 = *a3 + 224 * v6;
        int v66 = *(char *)(v65 + 23);
        if (v66 >= 0) {
          uint64_t v67 = *a3 + 224 * v6;
        }
        else {
          uint64_t v67 = *(void *)v65;
        }
        if (v66 >= 0) {
          uint64_t v68 = *(unsigned __int8 *)(v65 + 23);
        }
        else {
          uint64_t v68 = *(void *)(v65 + 8);
        }
        int v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, v67, v68);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"\"", 1);
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)__p);
      }
      if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v91.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      ++v6;
      uint64_t v3 = *a3;
    }
    while (0x6DB6DB6DB6DB6DB7 * ((a3[1] - *a3) >> 5) > v6);
  }
}

void sub_1B1C1A24C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (*(char *)(v18 - 137) < 0) {
    operator delete(*(void **)(v18 - 160));
  }
  if (*(char *)(v18 - 113) < 0) {
    operator delete(*(void **)(v18 - 136));
  }
  _Unwind_Resume(exception_object);
}

void quasar::InverseTextNormalizer::removeEmptyTokens(uint64_t a1, void *a2, uint64_t a3, void **a4, uint64_t a5, std::vector<unsigned int>::pointer *a6)
{
  unint64_t v10 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a2[1] - *a2) >> 5);
  LOBYTE(v72) = 0;
  std::vector<BOOL>::vector(&v94, v10, (unsigned __int8 *)&v72);
  int v11 = *(unsigned char **)a3;
  if (*(void *)(a3 + 8) != *(void *)a3)
  {
    uint64_t v12 = 0;
    int v13 = 0;
    while (1)
    {
      uint64_t v14 = &v11[224 * v12];
      uint64_t v15 = v14[23];
      if (v14[23] < 0)
      {
        if (*((void *)v14 + 1)) {
          goto LABEL_9;
        }
      }
      else if (v14[23])
      {
        goto LABEL_9;
      }
      if (v11[224 * v12 + 44])
      {
        MEMORY[0x1B3EA7B20]();
        int v11 = *(unsigned char **)a3;
        uint64_t v16 = *(void *)a3 + 224 * v12;
        *(unsigned char *)(v16 + 44) = 0;
        uint64_t v15 = *(unsigned __int8 *)(v16 + 23);
      }
LABEL_9:
      if ((v15 & 0x80) != 0)
      {
        if (*(void *)&v11[224 * v12 + 8])
        {
LABEL_13:
          ++v13;
          int v17 = (int *)((char *)*a4 + 8 * v12);
          int v18 = v17[1];
          unint64_t v19 = *v17;
          if ((int)v19 <= v18)
          {
            float v20 = v94;
            int v21 = v18 - v19 + 1;
            do
            {
              *(void *)((char *)v20 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
              ++v19;
              --v21;
            }
            while (v21);
          }
        }
      }
      else if (v15)
      {
        goto LABEL_13;
      }
      if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a3 + 8) - (void)v11) >> 5) <= (unint64_t)++v12) {
        goto LABEL_19;
      }
    }
  }
  int v13 = 0;
LABEL_19:
  std::vector<quasar::Token>::vector(&v92, v13);
  *(void *)&long long v72 = 0x800000007FFFFFFFLL;
  std::vector<std::pair<int,int>>::vector(&v90, v13, &v72);
  memset(&v89, 0, sizeof(v89));
  if (*a6 != a6[1]) {
    std::vector<int>::resize(&v89, v13);
  }
  uint64_t v22 = *(unsigned char **)a3;
  if (*(void *)(a3 + 8) != *(void *)a3)
  {
    unint64_t v23 = 0;
    uint64_t v24 = (void *)(a1 + 424);
    LODWORD(v25) = -1;
    do
    {
      long long v26 = &v22[224 * v23];
      if ((char)v26[23] < 0)
      {
        if (!*((void *)v26 + 1))
        {
LABEL_32:
          if (quasar::gLogLevel >= 5)
          {
            long long v87 = 0u;
            long long v88 = 0u;
            long long v85 = 0u;
            long long v86 = 0u;
            long long v83 = 0u;
            long long v84 = 0u;
            long long v81 = 0u;
            long long v82 = 0u;
            long long v79 = 0u;
            long long v80 = 0u;
            long long v77 = 0u;
            long long v78 = 0u;
            long long v75 = 0u;
            long long v76 = 0u;
            long long v73 = 0u;
            long long v74 = 0u;
            long long v72 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v72);
            long long v32 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)" ", 1);
            long long v33 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)" ", 1);
            std::ostream::operator<<();
            quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v72);
          }
          if ((v94[v23 >> 6] & (1 << v23)) == 0)
          {
            if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v24, (unsigned __int8 *)(*a2 + 224 * v23))|| (v25 & 0x80000000) != 0)
            {
              uint64_t v42 = (int)v25 + 1;
              if ((int)v42 >= v13)
              {
                uint64_t v50 = a5;
                std::string v52 = *(_DWORD **)(a5 + 8);
                unint64_t v51 = *(void *)(a5 + 16);
                if ((unint64_t)v52 >= v51)
                {
                  long long v54 = *(_DWORD **)a5;
                  uint64_t v55 = ((uint64_t)v52 - *(void *)a5) >> 2;
                  unint64_t v56 = v55 + 1;
                  if ((unint64_t)(v55 + 1) >> 62) {
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v57 = v51 - (void)v54;
                  if (v57 >> 1 > v56) {
                    unint64_t v56 = v57 >> 1;
                  }
                  if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v58 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v58 = v56;
                  }
                  if (v58)
                  {
                    uint64_t v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a5 + 16, v58);
                    long long v54 = *(_DWORD **)a5;
                    std::string v52 = *(_DWORD **)(a5 + 8);
                  }
                  else
                  {
                    uint64_t v59 = 0;
                  }
                  long long v60 = &v59[4 * v55];
                  *(_DWORD *)long long v60 = v23;
                  long long v53 = v60 + 4;
                  while (v52 != v54)
                  {
                    int v61 = *--v52;
                    *((_DWORD *)v60 - 1) = v61;
                    v60 -= 4;
                  }
                  *(void *)a5 = v60;
                  *(void *)(a5 + 8) = v53;
                  *(void *)(a5 + 16) = &v59[4 * v58];
                  if (v54) {
                    operator delete(v54);
                  }
                  uint64_t v50 = a5;
                }
                else
                {
                  _DWORD *v52 = v23;
                  long long v53 = v52 + 1;
                }
                *(void *)(v50 + 8) = v53;
              }
              else
              {
                if (quasar::gLogLevel >= 5)
                {
                  long long v87 = 0u;
                  long long v88 = 0u;
                  long long v85 = 0u;
                  long long v86 = 0u;
                  long long v83 = 0u;
                  long long v84 = 0u;
                  long long v81 = 0u;
                  long long v82 = 0u;
                  long long v79 = 0u;
                  long long v80 = 0u;
                  long long v77 = 0u;
                  long long v78 = 0u;
                  long long v75 = 0u;
                  long long v76 = 0u;
                  long long v73 = 0u;
                  long long v74 = 0u;
                  long long v72 = 0u;
                  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v72);
                  uint64_t v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v72, (uint64_t)"Merging pre-token ", 18);
                  uint64_t v44 = *a2 + 224 * v23;
                  int v45 = *(char *)(v44 + 23);
                  if (v45 >= 0) {
                    uint64_t v46 = *a2 + 224 * v23;
                  }
                  else {
                    uint64_t v46 = *(void *)v44;
                  }
                  if (v45 >= 0) {
                    uint64_t v47 = *(unsigned __int8 *)(v44 + 23);
                  }
                  else {
                    uint64_t v47 = *(void *)(v44 + 8);
                  }
                  int v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, v46, v47);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)" to next post token", 19);
                  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v72);
                }
                int v49 = *(_DWORD *)(v90 + 8 * v42);
                if (v49 >= (int)v23) {
                  int v49 = v23;
                }
                *(_DWORD *)(v90 + 8 * v42) = v49;
              }
              uint64_t v24 = (void *)(a1 + 424);
            }
            else
            {
              if (quasar::gLogLevel >= 5)
              {
                long long v87 = 0u;
                long long v88 = 0u;
                long long v85 = 0u;
                long long v86 = 0u;
                long long v83 = 0u;
                long long v84 = 0u;
                long long v81 = 0u;
                long long v82 = 0u;
                long long v79 = 0u;
                long long v80 = 0u;
                long long v77 = 0u;
                long long v78 = 0u;
                long long v75 = 0u;
                long long v76 = 0u;
                long long v73 = 0u;
                long long v74 = 0u;
                long long v72 = 0u;
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v72);
                std::string::size_type v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v72, (uint64_t)"Merging pre-token ", 18);
                uint64_t v35 = *a2 + 224 * v23;
                int v36 = *(char *)(v35 + 23);
                if (v36 >= 0) {
                  uint64_t v37 = *a2 + 224 * v23;
                }
                else {
                  uint64_t v37 = *(void *)v35;
                }
                if (v36 >= 0) {
                  uint64_t v38 = *(unsigned __int8 *)(v35 + 23);
                }
                else {
                  uint64_t v38 = *(void *)(v35 + 8);
                }
                long long v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, v37, v38);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)" to previous post token", 23);
                quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v72);
              }
              uint64_t v40 = v90 + 8 * v25;
              int v41 = *(_DWORD *)(v40 + 4);
              if ((int)v23 > v41) {
                int v41 = v23;
              }
              *(_DWORD *)(v40 + 4) = v41;
            }
            v94[v23 >> 6] |= 1 << v23;
          }
          goto LABEL_81;
        }
      }
      else if (!v26[23])
      {
        goto LABEL_32;
      }
      uint64_t v25 = (int)v25 + 1;
      quasar::Token::operator=(v92 + 224 * v25, (long long *)v26);
      uint64_t v27 = (int *)((char *)*a4 + 8 * v23);
      std::string::size_type v28 = (int *)(v90 + 8 * v25);
      int v29 = *v27;
      int v30 = v28[1];
      if (*v28 < *v27) {
        int v29 = *v28;
      }
      *std::string::size_type v28 = v29;
      int v31 = v27[1];
      if (v31 <= v30) {
        int v31 = v30;
      }
      v28[1] = v31;
      if (v89.__begin_ != v89.__end_) {
        v89.__begin_[v25] = (*a6)[v23];
      }
LABEL_81:
      ++v23;
      uint64_t v22 = *(unsigned char **)a3;
    }
    while (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 5) > v23);
  }
  if (*((void *)&v90 + 1) - (void)v90 >= 9uLL)
  {
    unint64_t v62 = (uint64_t)(*((void *)&v90 + 1) - v90) >> 3;
    if (v62 <= 2) {
      unint64_t v62 = 2;
    }
    unint64_t v63 = v62 - 1;
    long long v64 = (int *)(v90 + 4);
    do
    {
      int v65 = v64[1] - 1;
      if (v65 >= *v64) {
        int v65 = *v64;
      }
      *long long v64 = v65;
      v64 += 2;
      --v63;
    }
    while (v63);
  }
  std::vector<quasar::Token>::__vdeallocate((void **)a3);
  *(_OWORD *)a3 = v92;
  *(void *)(a3 + 16) = v93;
  uint64_t v93 = 0;
  long long v92 = 0uLL;
  int v66 = *a4;
  if (*a4)
  {
    a4[1] = v66;
    operator delete(v66);
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  *(_OWORD *)a4 = v90;
  a4[2] = v91;
  std::string v91 = 0;
  long long v90 = 0uLL;
  std::vector<unsigned int>::pointer begin = v89.__begin_;
  std::vector<unsigned int>::pointer end = v89.__end_;
  if (v89.__begin_ == v89.__end_)
  {
    if (v89.__begin_)
    {
      v89.__end_ = v89.__begin_;
      operator delete(v89.__begin_);
    }
  }
  else
  {
    int v69 = *a6;
    if (*a6)
    {
      a6[1] = v69;
      operator delete(v69);
      *a6 = 0;
      a6[1] = 0;
      a6[2] = 0;
      std::vector<unsigned int>::pointer begin = v89.__begin_;
      std::vector<unsigned int>::pointer end = v89.__end_;
    }
    *a6 = begin;
    a6[1] = end;
    a6[2] = v89.__end_cap_.__value_;
  }
  if ((void)v90)
  {
    *((void *)&v90 + 1) = v90;
    operator delete((void *)v90);
  }
  *(void *)&long long v72 = &v92;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v72);
  if (v94) {
    operator delete(v94);
  }
}

void sub_1B1C1A984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15)
{
  int v17 = *(void **)(v15 - 200);
  if (v17)
  {
    *(void *)(v15 - 192) = v17;
    operator delete(v17);
  }
  int v18 = *(void **)(v15 - 176);
  if (v18)
  {
    *(void *)(v15 - 168) = v18;
    operator delete(v18);
  }
  a15 = (void **)(v15 - 144);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&a15);
  unint64_t v19 = *(void **)(v15 - 112);
  if (v19) {
    operator delete(v19);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::Token::operator=(uint64_t a1, long long *a2)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  uint64_t v5 = *(void *)((char *)a2 + 38);
  *(_OWORD *)(a1 + ++*(void *)(result + 24) = *(long long *)((char *)a2 + 24);
  *(void *)(a1 + 38) = v5;
  unint64_t v6 = (void **)(a1 + 48);
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*v6);
  }
  long long v7 = a2[3];
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  *(_OWORD *)unint64_t v6 = v7;
  *((unsigned char *)a2 + 71) = 0;
  *((unsigned char *)a2 + 48) = 0;
  std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(a1 + 72));
  *(_OWORD *)(a1 + 72) = *(long long *)((char *)a2 + 72);
  *(void *)(a1 + 88) = *((void *)a2 + 11);
  *((void *)a2 + 9) = 0;
  *((void *)a2 + 10) = 0;
  *((void *)a2 + 11) = 0;
  int v8 = (void **)(a1 + 96);
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*v8);
  }
  long long v9 = a2[6];
  *(void *)(a1 + 112) = *((void *)a2 + 14);
  *(_OWORD *)int v8 = v9;
  *((unsigned char *)a2 + 119) = 0;
  *((unsigned char *)a2 + 96) = 0;
  std::vector<std::pair<std::string,float>>::__vdeallocate((uint64_t *)(a1 + 120));
  *(_OWORD *)(a1 + 120) = *(long long *)((char *)a2 + 120);
  *(void *)(a1 + 136) = *((void *)a2 + 17);
  *((void *)a2 + 15) = 0;
  *((void *)a2 + 16) = 0;
  *((void *)a2 + 17) = 0;
  unint64_t v10 = (void **)(a1 + 144);
  if (*(char *)(a1 + 167) < 0) {
    operator delete(*v10);
  }
  long long v11 = a2[9];
  *(void *)(a1 + 160) = *((void *)a2 + 20);
  *(_OWORD *)unint64_t v10 = v11;
  *((unsigned char *)a2 + 167) = 0;
  *((unsigned char *)a2 + 144) = 0;
  __int16 v12 = *((_WORD *)a2 + 86);
  *(_DWORD *)(a1 + 168) = *((_DWORD *)a2 + 42);
  *(_WORD *)(a1 + 172) = v12;
  int v13 = (void **)(a1 + 176);
  if (*(char *)(a1 + 199) < 0) {
    operator delete(*v13);
  }
  long long v14 = a2[11];
  *(void *)(a1 + 192) = *((void *)a2 + 24);
  *(_OWORD *)int v13 = v14;
  *((unsigned char *)a2 + 199) = 0;
  *((unsigned char *)a2 + 176) = 0;
  long long v15 = *(long long *)((char *)a2 + 200);
  *(_DWORD *)(a1 + 216) = *((_DWORD *)a2 + 54);
  *(_OWORD *)(a1 + 200) = v15;
  return a1;
}

void quasar::InverseTextNormalizer::createSeparateAutoPunctuationTokens(quasar::InverseTextNormalizer *a1, void **a2, void **a3, void *a4)
{
  long long v4 = a3;
  uint64_t v119 = 0;
  uint64_t v120 = 0;
  v121[0] = 0;
  if (a2[1] == *a2)
  {
    unint64_t v96 = 0;
    memset(&v118, 0, sizeof(v118));
  }
  else
  {
    unint64_t v7 = 0;
    uint64_t v8 = 172;
    do
    {
      uint64_t v9 = quasar::InverseTextNormalizer::char32Converter(a1);
      uint64_t v10 = (uint64_t)*a2 + v8;
      int v13 = *(int **)(v10 - 172);
      uint64_t v11 = v10 - 172;
      __int16 v12 = v13;
      int v14 = *(char *)(v11 + 23);
      if (v14 >= 0) {
        long long v15 = (int *)v11;
      }
      else {
        long long v15 = v12;
      }
      if (v14 >= 0) {
        uint64_t v16 = *(unsigned __int8 *)(v11 + 23);
      }
      else {
        uint64_t v16 = *(void *)(v11 + 8);
      }
      std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::from_bytes(v9, v15, (int *)((char *)v15 + v16), &v118);
      uint64_t v18 = quasar::InverseTextNormalizer::char32Converter(v17);
      uint64_t v19 = (uint64_t)*a2 + v8;
      uint64_t v22 = *(int **)(v19 - 172);
      uint64_t v20 = v19 - 172;
      int v21 = v22;
      int v23 = *(char *)(v20 + 23);
      if (v23 >= 0) {
        uint64_t v24 = (int *)v20;
      }
      else {
        uint64_t v24 = v21;
      }
      if (v23 >= 0) {
        uint64_t v25 = *(unsigned __int8 *)(v20 + 23);
      }
      else {
        uint64_t v25 = *(void *)(v20 + 8);
      }
      std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::from_bytes(v18, v24, (int *)((char *)v24 + v25), &__str);
      std::basic_string<char32_t>::size_type v27 = *(int *)(*a4 + 4 * v7);
      std::string::size_type v28 = (char *)*a2;
      if (*((unsigned char *)*a2 + v8 + 1))
      {
        uint64_t v29 = quasar::InverseTextNormalizer::char32Converter(v26);
        std::basic_string<char32_t>::basic_string(&v115, &__str, 0, v27, (std::allocator<char32_t> *)((char *)&v114 + 4));
        std::basic_string<char32_t>::size_type size = HIBYTE(v115.__r_.__value_.__r.__words[2]);
        if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v31 = (char *)&v115;
        }
        else {
          int v31 = (char *)v115.__r_.__value_.__r.__words[0];
        }
        if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::basic_string<char32_t>::size_type size = v115.__r_.__value_.__l.__size_;
        }
        std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::to_bytes(v29, v31, &v31[4 * size], (std::string *)&__p);
        uint64_t v113 = 0;
        uint64_t v114 = 0;
        unsigned __int8 v112 = 0;
        long long v32 = v120;
        if ((unint64_t)v120 >= v121[0])
        {
          long long v33 = (std::string *)std::vector<quasar::Token>::__emplace_back_slow_path<std::string,int,int,int,int,BOOL,BOOL &>((uint64_t *)&v119, (uint64_t)&__p, (int *)&v114 + 1, (int *)&v114, (int *)&v113 + 1, (int *)&v113, &v112, (unsigned __int8 *)*a2 + v8 - 127);
        }
        else
        {
          std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,std::string,int,int,int,int,BOOL,BOOL &>((uint64_t)v121, v120, (uint64_t)&__p, (int *)&v114 + 1, (int *)&v114, (int *)&v113 + 1, (int *)&v113, &v112, (unsigned __int8 *)*a2 + v8 - 127);
          long long v33 = (std::string *)((char *)v32 + 224);
        }
        uint64_t v120 = v33;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v115.__r_.__value_.__l.__data_);
        }
        v120[-3].__r_.__value_.__s.__data_[21] = 1;
        uint64_t v34 = (uint64_t)*a2 + v8;
        *(unsigned char *)(v34 - 127) = 0;
        *(unsigned char *)(v34 + 1) = 0;
        std::basic_string<char32_t>::size_type v35 = HIBYTE(v118.__r_.__value_.__r.__words[2]);
        if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::basic_string<char32_t>::size_type v35 = v118.__r_.__value_.__l.__size_;
        }
        std::basic_string<char32_t>::basic_string(&__p, &v118, 1uLL, v35 - v27, (std::allocator<char32_t> *)&v115);
        if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v118.__r_.__value_.__l.__data_);
        }
        std::basic_string<char32_t> v118 = __p;
        std::string::size_type v28 = (char *)*a2;
      }
      int v36 = (const quasar::Token *)&v28[v8 - 172];
      uint64_t v37 = v120;
      if ((unint64_t)v120 >= v121[0])
      {
        uint64_t v38 = (std::string *)std::vector<quasar::Token>::__emplace_back_slow_path<quasar::Token&>((uint64_t *)&v119, v36);
      }
      else
      {
        quasar::Token::Token(v120, v36);
        uint64_t v38 = (std::string *)((char *)v37 + 224);
      }
      uint64_t v120 = v38;
      uint64_t v39 = quasar::InverseTextNormalizer::char32Converter((quasar::InverseTextNormalizer *)v38);
      std::basic_string<char32_t>::size_type v40 = HIBYTE(v118.__r_.__value_.__r.__words[2]);
      if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v41 = (char *)&v118;
      }
      else {
        int v41 = (char *)v118.__r_.__value_.__r.__words[0];
      }
      if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::basic_string<char32_t>::size_type v40 = v118.__r_.__value_.__l.__size_;
      }
      std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::to_bytes(v39, v41, &v41[4 * v40], (std::string *)&__p);
      uint64_t v42 = &v120[-10].__r_.__value_.__s.__data_[16];
      if (v120[-9].__r_.__value_.__s.__data_[15] < 0) {
        operator delete(*(void **)v42);
      }
      long long v43 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *((void *)v42 + 2) = *((void *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)uint64_t v42 = v43;
      if (*((unsigned char *)*a2 + v8))
      {
        std::basic_string<char32_t>::size_type v44 = HIBYTE(v118.__r_.__value_.__r.__words[2]);
        if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::basic_string<char32_t>::size_type v44 = v118.__r_.__value_.__l.__size_;
        }
        int v45 = std::basic_string<char32_t>::basic_string(&__p, &v118, 0, v44 - v27, (std::allocator<char32_t> *)&v115);
        if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v118.__r_.__value_.__l.__data_);
        }
        std::basic_string<char32_t> v118 = __p;
        uint64_t v46 = quasar::InverseTextNormalizer::char32Converter((quasar::InverseTextNormalizer *)v45);
        std::basic_string<char32_t>::size_type v47 = HIBYTE(v118.__r_.__value_.__r.__words[2]);
        if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v48 = (char *)&v118;
        }
        else {
          int v48 = (char *)v118.__r_.__value_.__r.__words[0];
        }
        if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::basic_string<char32_t>::size_type v47 = v118.__r_.__value_.__l.__size_;
        }
        std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::to_bytes(v46, v48, &v48[4 * v47], (std::string *)&__p);
        uint64_t v50 = &v120[-10].__r_.__value_.__s.__data_[16];
        if (v120[-9].__r_.__value_.__s.__data_[15] < 0) {
          operator delete(*(void **)v50);
        }
        long long v51 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *((void *)v50 + 2) = *((void *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)uint64_t v50 = v51;
        std::string v52 = v120;
        v120[-8].__r_.__value_.__s.__data_[12] = 0;
        v52[-3].__r_.__value_.__s.__data_[20] = 0;
        uint64_t v53 = quasar::InverseTextNormalizer::char32Converter(v49);
        std::basic_string<char32_t>::size_type v54 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::basic_string<char32_t>::size_type v54 = __str.__r_.__value_.__l.__size_;
        }
        std::basic_string<char32_t>::basic_string(&v115, &__str, v54 - v27, v27, (std::allocator<char32_t> *)((char *)&v114 + 4));
        std::basic_string<char32_t>::size_type v55 = HIBYTE(v115.__r_.__value_.__r.__words[2]);
        if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v56 = (char *)&v115;
        }
        else {
          unint64_t v56 = (char *)v115.__r_.__value_.__r.__words[0];
        }
        if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::basic_string<char32_t>::size_type v55 = v115.__r_.__value_.__l.__size_;
        }
        std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::to_bytes(v53, v56, &v56[4 * v55], (std::string *)&__p);
        uint64_t v113 = 0;
        uint64_t v114 = 0;
        uint64_t v57 = (unsigned __int8 *)*a2 + v8 - 128;
        unsigned __int8 v112 = 0;
        unint64_t v58 = v120;
        if ((unint64_t)v120 >= v121[0])
        {
          a1 = (quasar::InverseTextNormalizer *)std::vector<quasar::Token>::__emplace_back_slow_path<std::string,int,int,int,int,BOOL &,BOOL>((uint64_t *)&v119, (uint64_t)&__p, (int *)&v114 + 1, (int *)&v114, (int *)&v113 + 1, (int *)&v113, v57, &v112);
        }
        else
        {
          std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,std::string,int,int,int,int,BOOL &,BOOL>((uint64_t)v121, v120, (uint64_t)&__p, (int *)&v114 + 1, (int *)&v114, (int *)&v113 + 1, (int *)&v113, v57, &v112);
          a1 = (quasar::InverseTextNormalizer *)&v58[9].__r_.__value_.__r.__words[1];
        }
        uint64_t v120 = (std::string *)a1;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v115.__r_.__value_.__l.__data_);
        }
        v120[-3].__r_.__value_.__s.__data_[20] = 1;
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v118.__r_.__value_.__l.__data_);
      }
      ++v7;
      v8 += 224;
    }
    while (0x6DB6DB6DB6DB6DB7 * (((unsigned char *)a2[1] - (unsigned char *)*a2) >> 5) > v7);
    uint64_t v59 = v119;
    memset(&v118, 0, sizeof(v118));
    if (v120 != v119)
    {
      unint64_t v60 = 0;
      while (1)
      {
        if (!quasar::Token::isAutoPunctuation((quasar::Token *)((char *)v59 + 224 * v60)))
        {
LABEL_149:
          uint64_t v93 = (const quasar::Token *)((char *)v119 + 224 * v60);
          std::basic_string<char32_t>::size_type v94 = v118.__r_.__value_.__l.__size_;
          if (v118.__r_.__value_.__l.__size_ >= v118.__r_.__value_.__r.__words[2])
          {
            std::basic_string<char32_t>::size_type v95 = std::vector<quasar::Token>::__emplace_back_slow_path<quasar::Token&>((uint64_t *)&v118, v93);
          }
          else
          {
            quasar::Token::Token((std::string *)v118.__r_.__value_.__l.__size_, v93);
            std::basic_string<char32_t>::size_type v95 = v94 + 224;
          }
          v118.__r_.__value_.__l.__size_ = v95;
          goto LABEL_153;
        }
        if (0x6DB6DB6DB6DB6DB7 * (((char *)v120 - (char *)v119) >> 5) - 1 <= v60
          || (unint64_t v61 = v60 + 1,
              unint64_t v62 = (quasar::InverseTextNormalizer *)quasar::Token::isAutoPunctuation((quasar::Token *)&v119[9].__r_.__value_.__r.__words[28 * v60 + 1]),
              (v62 & 1) != 0))
        {
          if (!v60) {
            goto LABEL_149;
          }
          unsigned int v63 = v60 - 1;
          isAutoPunctuation = (quasar::InverseTextNormalizer *)quasar::Token::isAutoPunctuation((quasar::Token *)((char *)v119 + 224 * (v60 - 1)));
          if (isAutoPunctuation) {
            goto LABEL_149;
          }
          int v65 = (std::string *)((char *)v119 + 224 * v60);
          int v66 = (std::string **)((char *)v119 + 224 * v63);
          uint64_t v67 = HIBYTE(v65->__r_.__value_.__r.__words[2]);
          if ((v67 & 0x80u) == 0) {
            std::string::size_type v68 = HIBYTE(v65->__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v68 = v65->__r_.__value_.__l.__size_;
          }
          int v69 = (std::string *)*((unsigned __int8 *)v66 + 23);
          int v70 = (char)v69;
          if ((char)v69 < 0) {
            int v69 = v66[1];
          }
          if ((std::string *)v68 == v69)
          {
            if (v70 >= 0) {
              int v71 = (std::string *)((char *)v119 + 224 * v63);
            }
            else {
              int v71 = *v66;
            }
            if ((v67 & 0x80) != 0)
            {
              isAutoPunctuation = (quasar::InverseTextNormalizer *)memcmp(v65->__r_.__value_.__l.__data_, v71, v65->__r_.__value_.__l.__size_);
              if (!isAutoPunctuation) {
                goto LABEL_153;
              }
            }
            else
            {
              if (!*((unsigned char *)&v65->__r_.__value_.__s + 23)) {
                goto LABEL_153;
              }
              while (v65->__r_.__value_.__s.__data_[0] == v71->__r_.__value_.__s.__data_[0])
              {
                int v65 = (std::string *)((char *)v65 + 1);
                int v71 = (std::string *)((char *)v71 + 1);
                if (!--v67) {
                  goto LABEL_153;
                }
              }
            }
          }
          uint64_t v86 = quasar::InverseTextNormalizer::char32Converter(isAutoPunctuation);
          long long v87 = (char *)v119 + 224 * v63;
          int v88 = v87[23];
          if (v88 >= 0) {
            std::vector<unsigned int> v89 = (int *)((char *)v119 + 224 * v63);
          }
          else {
            std::vector<unsigned int> v89 = *(int **)v87;
          }
          if (v88 >= 0) {
            uint64_t v90 = v87[23];
          }
          else {
            uint64_t v90 = *((void *)v87 + 1);
          }
          std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::from_bytes(v86, v89, (int *)((char *)v89 + v90), &__str);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          {
            if (__str.__r_.__value_.__l.__size_ != 1) {
              goto LABEL_144;
            }
            p_str = (std::basic_string<char32_t> *)__str.__r_.__value_.__r.__words[0];
          }
          else
          {
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) != 1) {
              goto LABEL_144;
            }
            p_str = &__str;
          }
          if (!u_ispunct(p_str->__r_.__value_.__s.__data_[0])) {
            goto LABEL_144;
          }
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v85 = &__str;
          }
          else {
            long long v85 = (std::basic_string<char32_t> *)__str.__r_.__value_.__r.__words[0];
          }
        }
        else
        {
          long long v72 = (std::string *)((char *)v119 + 224 * v60);
          long long v73 = (std::string **)((char *)v119 + 224 * v61);
          uint64_t v74 = HIBYTE(v72->__r_.__value_.__r.__words[2]);
          if ((v74 & 0x80u) == 0) {
            std::string::size_type v75 = HIBYTE(v72->__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v75 = v72->__r_.__value_.__l.__size_;
          }
          long long v76 = (std::string *)*((unsigned __int8 *)v73 + 23);
          int v77 = (char)v76;
          if ((char)v76 < 0) {
            long long v76 = v73[1];
          }
          if ((std::string *)v75 == v76)
          {
            if (v77 >= 0) {
              long long v78 = (std::string *)((char *)v119 + 224 * v61);
            }
            else {
              long long v78 = *v73;
            }
            if ((v74 & 0x80) != 0)
            {
              unint64_t v62 = (quasar::InverseTextNormalizer *)memcmp(v72->__r_.__value_.__l.__data_, v78, v72->__r_.__value_.__l.__size_);
              if (!v62) {
                goto LABEL_153;
              }
            }
            else
            {
              if (!*((unsigned char *)&v72->__r_.__value_.__s + 23)) {
                goto LABEL_153;
              }
              while (v72->__r_.__value_.__s.__data_[0] == v78->__r_.__value_.__s.__data_[0])
              {
                long long v72 = (std::string *)((char *)v72 + 1);
                long long v78 = (std::string *)((char *)v78 + 1);
                if (!--v74) {
                  goto LABEL_153;
                }
              }
            }
          }
          uint64_t v79 = quasar::InverseTextNormalizer::char32Converter(v62);
          long long v80 = (char *)v119 + 224 * v61;
          int v81 = v80[23];
          if (v81 >= 0) {
            long long v82 = (int *)((char *)v119 + 224 * v61);
          }
          else {
            long long v82 = *(int **)v80;
          }
          if (v81 >= 0) {
            uint64_t v83 = v80[23];
          }
          else {
            uint64_t v83 = *((void *)v80 + 1);
          }
          std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::from_bytes(v79, v82, (int *)((char *)v82 + v83), &__str);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          {
            if (__str.__r_.__value_.__l.__size_ != 1) {
              goto LABEL_144;
            }
            long long v84 = (std::basic_string<char32_t> *)__str.__r_.__value_.__r.__words[0];
          }
          else
          {
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) != 1) {
              goto LABEL_144;
            }
            long long v84 = &__str;
          }
          if (!u_ispunct(v84->__r_.__value_.__s.__data_[0])) {
            goto LABEL_144;
          }
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v85 = &__str;
          }
          else {
            long long v85 = (std::basic_string<char32_t> *)__str.__r_.__value_.__r.__words[0];
          }
        }
        if (quasar::isCJK(v85->__r_.__value_.__s.__data_[0]))
        {
          char v92 = 0;
          goto LABEL_145;
        }
LABEL_144:
        char v92 = 1;
LABEL_145:
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__str.__r_.__value_.__l.__data_);
          if (v92) {
            goto LABEL_149;
          }
        }
        else if (v92)
        {
          goto LABEL_149;
        }
LABEL_153:
        ++v60;
        uint64_t v59 = v119;
        if (0x6DB6DB6DB6DB6DB7 * (((char *)v120 - (char *)v119) >> 5) <= v60)
        {
          unint64_t v96 = 0x6DB6DB6DB6DB6DB7
              * ((uint64_t)(v118.__r_.__value_.__l.__size_ - v118.__r_.__value_.__r.__words[0]) >> 5);
          goto LABEL_157;
        }
      }
    }
    unint64_t v96 = 0;
LABEL_157:
    long long v4 = a3;
  }
  __p.__r_.__value_.__r.__words[0] = 0x800000007FFFFFFFLL;
  std::vector<std::pair<int,int>>::vector(&__str, v96, &__p);
  __int32 v98 = *a2;
  char v97 = a2[1];
  std::regex_traits<wchar_t>::char_class_type v99 = (char *)*v4;
  std::basic_string<char32_t>::size_type v100 = __str.__r_.__value_.__r.__words[0];
  if (v118.__r_.__value_.__l.__size_ != v118.__r_.__value_.__r.__words[0] || v97 != v98)
  {
    uint64_t v101 = 0;
    int v102 = 0;
    unint64_t v103 = 0;
    unint64_t v104 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v118.__r_.__value_.__l.__size_ - v118.__r_.__value_.__r.__words[0]) >> 5);
    unint64_t v105 = 0x6DB6DB6DB6DB6DB7 * ((v97 - v98) >> 5);
    int v106 = (unsigned char *)(v118.__r_.__value_.__r.__words[0] + 173);
    uint64_t v107 = (_DWORD *)__str.__r_.__value_.__r.__words[0];
    do
    {
      if (v103 && *(v106 - 1))
      {
        size_t v108 = (char *)(v100 + 8 * (v103 - 1));
      }
      else
      {
        if (*v106) {
          BOOL v109 = v104 - 1 > v103;
        }
        else {
          BOOL v109 = 0;
        }
        if (!v109) {
          ++v102;
        }
        size_t v108 = &v99[8 * v101];
      }
      _DWORD *v107 = *(_DWORD *)v108;
      ++v103;
      v107[1] = *((_DWORD *)v108 + 1);
      uint64_t v101 = v102;
      v106 += 224;
      v107 += 2;
    }
    while (v104 > v103 || v105 > v102);
  }
  std::vector<quasar::Token>::__vdeallocate(a2);
  *(std::basic_string<char32_t> *)a2 = v118;
  memset(&v118, 0, sizeof(v118));
  id v110 = *v4;
  if (*v4)
  {
    v4[1] = v110;
    operator delete(v110);
    void *v4 = 0;
    v4[1] = 0;
    v4[2] = 0;
  }
  *(std::basic_string<char32_t> *)long long v4 = __str;
  __str.__r_.__value_.__r.__words[0] = (std::basic_string<char32_t>::size_type)&v118;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  v118.__r_.__value_.__r.__words[0] = (std::basic_string<char32_t>::size_type)&v119;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v118);
}

void sub_1B1C1B4D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void **__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  std::basic_string<char32_t> __p = &a34;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&__p);
  a34 = (void *)(v39 - 120);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a34);
  _Unwind_Resume(a1);
}

void quasar::InverseTextNormalizer::removeTrailingFormalAutoPunctuation(uint64_t a1, uint64_t *a2, const void **a3, char a4)
{
  uint64_t v4 = *(void *)(a1 + 776);
  if (v4)
  {
    uint64_t v8 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(v4 + 256, a3);
    if ((a4 & 1) != 0 && v4 + 264 != v8)
    {
      uint64_t v9 = a2[1];
      if (*a2 != v9
        && quasar::Token::isAutoPunctuation((quasar::Token *)(v9 - 224))
        && std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((void *)(*(void *)(a1 + 776) + 376), (unsigned __int8 *)(a2[1] - 224)))
      {
        uint64_t v10 = *(void *)(a1 + 776);
        uint64_t v11 = *a2;
        uint64_t v12 = a2[1];
        if (v12 - *a2 == 224)
        {
LABEL_14:
          unint64_t v17 = *(unsigned int *)(v10 + 368);
          if ((v17 & 0x80000000) != 0 || 0x6DB6DB6DB6DB6DB7 * ((v12 - v11) >> 5) <= v17)
          {
            quasar::Token::~Token((void **)(v12 - 224));
            a2[1] = v18;
            if (*a2 != v18) {
              *(unsigned char *)(v12 - 404) = 0;
            }
          }
        }
        else
        {
          uint64_t v13 = 0;
          unint64_t v14 = 0;
          long long v15 = (void *)(v10 + 416);
          while (1)
          {
            uint64_t v16 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v15, (unsigned __int8 *)(v11 + v13));
            uint64_t v11 = *a2;
            if (v16)
            {
              if (std::string::compare((const std::string *)(v11 + v13), ".")) {
                break;
              }
              uint64_t v11 = *a2;
              if (*(unsigned char *)(*a2 + v13 + 44)) {
                break;
              }
            }
            ++v14;
            uint64_t v12 = a2[1];
            v13 += 224;
            if (0x6DB6DB6DB6DB6DB7 * ((v12 - v11) >> 5) - 1 <= v14)
            {
              uint64_t v10 = *(void *)(a1 + 776);
              goto LABEL_14;
            }
          }
        }
      }
    }
  }
}

uint64_t quasar::InverseTextNormalizer::isEnableAutoPunctuation(uint64_t a1, const void **a2, char a3)
{
  uint64_t v3 = *(void *)(a1 + 776);
  if (!v3) {
    return 0;
  }
  if (v3 + 264 == std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(v3 + 256, a2))return 0; {
  return a3 & 1;
  }
}

double quasar::InverseTextNormalizer::getEndsOfSentencePunctuations@<D0>(quasar::InverseTextNormalizer *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *((void *)this + 97);
  if (v2)
  {
    std::unordered_set<std::string>::unordered_set(a2, v2 + 416);
  }
  else
  {
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_DWORD *)(a2 + 32) = 1065353216;
  }
  return result;
}

void quasar::InverseTextNormalizer::runChunk(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  long long v5 = 0uLL;
  uint64_t v6 = 0;
  if (a2[1] == *a2)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  else
  {
    if (!quasar::InverseTextNormalizer::easterEgg(a1, a2, (uint64_t *)&v5)) {
      fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst();
    }
    *(_OWORD *)a3 = v5;
    a3[2] = v6;
  }
  long long v5 = 0uLL;
  uint64_t v6 = 0;
  *(void *)std::vector<std::wcsub_match>::value_type __x = &v5;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)__x);
}

void sub_1B1C1D3B8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a65);
  *(void *)&a65 = &STACK[0x438];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a65);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&STACK[0x450]);
  long long v72 = *(void **)(v69 - 240);
  if (v72)
  {
    *(void *)(v69 - 232) = v72;
    operator delete(v72);
  }
  *(void *)&a65 = v69 - 216;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a65);
  *(void *)&a65 = v69 - 192;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a65);
  long long v73 = *(void **)(v69 - 168);
  if (v73)
  {
    *(void *)(v69 - 160) = v73;
    operator delete(v73);
  }
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst((void *)(v69 - 144));
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    if (quasar::gLogLevel >= 4)
    {
      *(_OWORD *)&STACK[0x2B0] = 0u;
      *(_OWORD *)&STACK[0x2C0] = 0u;
      *(_OWORD *)&STACK[0x290] = 0u;
      *(_OWORD *)&STACK[0x2A0] = 0u;
      *(_OWORD *)&STACK[0x270] = 0u;
      *(_OWORD *)&STACK[0x280] = 0u;
      *(_OWORD *)&STACK[0x250] = 0u;
      *(_OWORD *)&STACK[0x260] = 0u;
      *(_OWORD *)&STACK[0x230] = 0u;
      *(_OWORD *)&STACK[0x240] = 0u;
      *(_OWORD *)&STACK[0x210] = 0u;
      *(_OWORD *)&STACK[0x220] = 0u;
      a68 = 0u;
      *(_OWORD *)&STACK[0x200] = 0u;
      a66 = 0u;
      a67 = 0u;
      a65 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a65);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a65, (uint64_t)"ITN failed", 10);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a65);
    }
    void *v68 = 0;
    v68[1] = 0;
    v68[2] = 0;
    __cxa_end_catch();
    JUMPOUT(0x1B1C1D358);
  }
  *(void *)&a65 = v69 - 128;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a65);
  _Unwind_Resume(a1);
}

void sub_1B1C1D82C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a65);
  __cxa_end_catch();
  JUMPOUT(0x1B1C1D63CLL);
}

std::basic_string<char32_t> *__cdecl std::basic_string<char32_t>::erase(std::basic_string<char32_t> *this, std::basic_string<char32_t>::size_type __pos, std::basic_string<char32_t>::size_type __n)
{
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
    std::basic_string<char32_t>::size_type size = this->__r_.__value_.__l.__size_;
  }
  else {
    std::basic_string<char32_t>::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  }
  if (size < __pos) {
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (__n == -1)
  {
    if ((*((unsigned char *)&this->__r_.__value_.__s + 23) & 0x80) != 0)
    {
      long long v5 = (std::basic_string<char32_t> *)this->__r_.__value_.__r.__words[0];
      this->__r_.__value_.__l.__size_ = __pos;
    }
    else
    {
      *((unsigned char *)&this->__r_.__value_.__s + 23) = __pos & 0x7F;
      long long v5 = this;
    }
    v5->__r_.__value_.__s.__data_[__pos] = 0;
  }
  else
  {
    std::basic_string<char32_t>::__erase_external_with_move(this, __pos, __n);
  }
  return this;
}

void quasar::getFirstNonSpaceChar(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4 = quasar::CommandTransform::char32Converter((quasar::CommandTransform *)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 23);
  if ((v5 & 0x80u) == 0) {
    uint64_t v6 = (int *)a1;
  }
  else {
    uint64_t v6 = *(int **)a1;
  }
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(a1 + 8);
  }
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::from_bytes(v4, v6, (int *)((char *)v6 + v5), &__p);
  BOOL v7 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
  std::basic_string<char32_t>::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::basic_string<char32_t>::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    std::basic_string<char32_t>::size_type v9 = 0;
    while (1)
    {
      uint64_t v10 = v7 ? (std::basic_string<char32_t> *)__p.__r_.__value_.__r.__words[0] : &__p;
      isUWhiteSpace = (quasar::CommandTransform *)u_isUWhiteSpace(v10->__r_.__value_.__s.__data_[v9]);
      if (!isUWhiteSpace) {
        break;
      }
      ++v9;
      BOOL v7 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
      std::basic_string<char32_t>::size_type v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::basic_string<char32_t>::size_type v12 = __p.__r_.__value_.__l.__size_;
      }
      if (v12 <= v9) {
        goto LABEL_17;
      }
    }
    uint64_t v13 = quasar::CommandTransform::char32Converter(isUWhiteSpace);
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_p = (std::basic_string<char32_t> *)__p.__r_.__value_.__r.__words[0];
    }
    std::basic_string<char32_t>::value_type v16 = p_p->__r_.__value_.__s.__data_[v9];
    std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::to_bytes(v13, (char *)&v16, (char *)&v17, a2);
  }
  else
  {
LABEL_17:
    std::string::basic_string[abi:ne180100]<0>(a2, "");
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1B1C1D9E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::InverseTextNormalizer::runInChunks(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  long long v108 = 0uLL;
  unint64_t v109 = 0;
  memset(v107, 0, sizeof(v107));
  unint64_t v104 = 0;
  unint64_t v105 = 0;
  int v106 = 0;
  uint64_t v5 = (char *)operator new(0x30uLL);
  unsigned int v79 = 0;
  signed int v6 = 0;
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = 0;
  *((void *)v5 + 3) = 0;
  *(void *)uint64_t v5 = &unk_1F0A629E8;
  *((void *)v5 + 4) = 0;
  *((void *)v5 + 5) = 0;
  while (1)
  {
    unint64_t v7 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a2[1] - *a2) >> 5);
    if (v7 <= v6) {
      break;
    }
    if (v7 >= *(int *)(a1 + 16) + (uint64_t)v6) {
      int v8 = *(_DWORD *)(a1 + 16) + v6;
    }
    else {
      int v8 = -1227133513 * ((uint64_t)(a2[1] - *a2) >> 5);
    }
    std::vector<quasar::Token>::vector(&v103, v8 - v6);
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<quasar::Token const*>,std::__wrap_iter<quasar::Token const*>,std::__wrap_iter<quasar::Token*>,0>(*a2 + 224 * v6, *a2 + 224 * v8, (uint64_t)v103.__r_.__value_.__l.__data_);
    quasar::InverseTextNormalizer::runChunk(a1, (uint64_t *)&v103, &v102);
    std::string::size_type size = v102.__r_.__value_.__l.__size_;
    std::string::size_type v10 = v102.__r_.__value_.__r.__words[0];
    if (v102.__r_.__value_.__r.__words[0] != v102.__r_.__value_.__l.__size_)
    {
      std::regex_traits<wchar_t>::char_class_type v99 = (char **)(v5 + 24);
      std::basic_string<char32_t>::size_type v100 = (std::__shared_weak_count *)v5;
      atomic_fetch_add_explicit((atomic_ullong *volatile)v5 + 1, 1uLL, memory_order_relaxed);
      quasar::getPreItnTokenToPostItnCharAlignment(&v103, &v102, &v99, (uint64_t *)__p);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (v100) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v100);
      }
      uint64_t v11 = (int32x2_t *)*((void *)v5 + 3);
      std::basic_string<char32_t>::size_type v12 = (int32x2_t *)*((void *)v5 + 4);
      std::string::size_type v80 = v10;
      if (v11 == v12)
      {
        unint64_t v15 = ((char *)v12 - (char *)v11) >> 4;
      }
      else
      {
        int32x2_t v13 = vdup_n_s32(v6);
        unint64_t v14 = (int32x2_t *)*((void *)v5 + 3);
        do
        {
          *unint64_t v14 = vadd_s32(*v14, v13);
          v14 += 2;
        }
        while (v14 != v12);
        unint64_t v15 = ((char *)v12 - (char *)v11) >> 4;
        if (v12 != v11)
        {
          uint64_t v16 = 0;
          int v17 = 0;
          int v18 = 0;
          int v19 = *(_DWORD *)(a1 + 20);
          int v20 = v19 >= 0 ? *(_DWORD *)(a1 + 20) : v19 + 1;
          int v21 = -(v6 + (v20 >> 1));
          int v22 = -1;
          double v23 = 1000000000.0;
          LODWORD(v++*(void *)(result + 24) = -1;
          do
          {
            if ((v105 - v104) >> 4 <= (unint64_t)v18) {
              break;
            }
            int v25 = *(_DWORD *)&v104[16 * v18 + 4] + 1;
            int v26 = v11[2 * v16].i32[0];
            if (v25 >= v26) {
              int v27 = v18;
            }
            else {
              int v27 = v18 + 1;
            }
            if (v25 < v26) {
              int v28 = v17;
            }
            else {
              int v28 = v17 + 1;
            }
            int v29 = v21 + v25;
            if (v21 + v25 < 0) {
              int v29 = -v29;
            }
            double v30 = (double)v29;
            BOOL v31 = v23 <= (double)v29;
            if (v23 <= (double)v29) {
              int v32 = v24;
            }
            else {
              int v32 = v17;
            }
            if (v31) {
              int v33 = v22;
            }
            else {
              int v33 = v18;
            }
            if (v31) {
              double v30 = v23;
            }
            if (v25 == v26)
            {
              LODWORD(v++*(void *)(result + 24) = v32;
              int v22 = v33;
              ++v18;
            }
            else
            {
              int v18 = v27;
            }
            if (v25 == v26) {
              ++v17;
            }
            else {
              int v17 = v28;
            }
            if (v25 == v26) {
              double v23 = v30;
            }
            uint64_t v16 = v17;
          }
          while (v15 > v17);
          if (v24 != -1)
          {
            std::vector<quasar::PreTokenToPostTokenItnMap>::resize((uint64_t)&v104, v22 + 1);
            std::vector<quasar::Token>::resize((uint64_t *)&v108, *(int *)&v104[16 * v22 + 12] + 1);
            uint64_t v11 = (int32x2_t *)*((void *)v5 + 3);
            unint64_t v15 = (uint64_t)(*((void *)v5 + 4) - (void)v11) >> 4;
            if (v15 <= (int)v24) {
              goto LABEL_135;
            }
            unsigned int v79 = *(_DWORD *)&v104[16 * v22 + 12] - v11[2 * (int)v24 + 1].i32[0] + 1;
LABEL_57:
            if (v15 > (int)v24)
            {
              unint64_t v24 = (int)v24;
              int32x2_t v34 = vdup_n_s32(v79);
              while (1)
              {
                std::basic_string<char32_t>::size_type v35 = &v11[2 * v24];
                int v36 = v105;
                if (v105 >= v106)
                {
                  uint64_t v38 = (v105 - v104) >> 4;
                  unint64_t v39 = v38 + 1;
                  if ((unint64_t)(v38 + 1) >> 60) {
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v40 = v106 - v104;
                  if ((v106 - v104) >> 3 > v39) {
                    unint64_t v39 = v40 >> 3;
                  }
                  if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v41 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v41 = v39;
                  }
                  if (v41) {
                    uint64_t v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)&v106, v41);
                  }
                  else {
                    uint64_t v42 = 0;
                  }
                  long long v43 = &v42[16 * v38];
                  *(_OWORD *)long long v43 = *(_OWORD *)v35->i8;
                  int v45 = v104;
                  std::basic_string<char32_t>::size_type v44 = v105;
                  uint64_t v46 = v43;
                  if (v105 != v104)
                  {
                    do
                    {
                      *((_OWORD *)v46 - 1) = *((_OWORD *)v44 - 1);
                      v46 -= 16;
                      v44 -= 16;
                    }
                    while (v44 != v45);
                    std::basic_string<char32_t>::size_type v44 = v104;
                  }
                  uint64_t v37 = (int32x2_t *)(v43 + 16);
                  unint64_t v104 = v46;
                  unint64_t v105 = v43 + 16;
                  int v106 = &v42[16 * v41];
                  if (v44) {
                    operator delete(v44);
                  }
                }
                else
                {
                  *(_OWORD *)unint64_t v105 = *(_OWORD *)v35->i8;
                  uint64_t v37 = (int32x2_t *)(v36 + 16);
                }
                unint64_t v105 = (char *)v37;
                v37[-1] = vadd_s32(v37[-1], v34);
                uint64_t v11 = (int32x2_t *)*((void *)v5 + 3);
                uint64_t v47 = *((void *)v5 + 4);
                if (v24 >= (v47 - (uint64_t)v11) >> 4) {
                  goto LABEL_133;
                }
                int v48 = &v11[2 * v24];
                uint64_t v49 = v48[1].i32[0];
                if ((int)v49 <= v48[1].i32[1]) {
                  break;
                }
LABEL_83:
                if (++v24 >= (v47 - (uint64_t)v11) >> 4) {
                  goto LABEL_84;
                }
              }
              uint64_t v50 = 224 * (int)v49;
              while (1)
              {
                long long v51 = (const quasar::Token *)(v102.__r_.__value_.__r.__words[0] + v50);
                uint64_t v52 = *((void *)&v108 + 1);
                if (*((void *)&v108 + 1) >= v109)
                {
                  uint64_t v53 = std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>((uint64_t *)&v108, v51);
                }
                else
                {
                  quasar::Token::Token(*((std::string **)&v108 + 1), v51);
                  uint64_t v53 = v52 + 224;
                }
                *((void *)&v108 + 1) = v53;
                uint64_t v11 = (int32x2_t *)*((void *)v5 + 3);
                uint64_t v47 = *((void *)v5 + 4);
                if (v24 >= (v47 - (uint64_t)v11) >> 4) {
                  break;
                }
                ++v49;
                v50 += 224;
                if (v49 > v11[2 * v24 + 1].i32[1]) {
                  goto LABEL_83;
                }
              }
LABEL_133:
              std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
            }
LABEL_84:
            std::basic_string<char32_t>::size_type v55 = (int *)v104;
            std::basic_string<char32_t>::size_type v54 = (int *)v105;
            uint64_t v56 = *(int *)(a1 + 16);
            if (v56 + 1 < (unint64_t)((v105 - v104) >> 4))
            {
              int v57 = ((unint64_t)(v105 - v104) >> 4) + ~v56;
              if (v57)
              {
                unint64_t v58 = (int *)&v104[16 * v57];
                int64_t v59 = v105 - (char *)v58;
                if (v105 != (char *)v58) {
                  memmove(v104, v58, v105 - (char *)v58);
                }
                std::basic_string<char32_t>::size_type v54 = (int *)((char *)v55 + v59);
                unint64_t v105 = (char *)v55 + v59;
                std::basic_string<char32_t>::size_type v55 = (int *)v104;
              }
            }
            uint64_t v60 = *((void *)&v108 + 1);
            uint64_t v61 = v108;
            int v62 = quasar::gLogLevel;
            if (v55 != v54
              && 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)&v108 + 1) - v108) >> 5) != *(v54 - 1) + 1
              && quasar::gLogLevel >= 4)
            {
              long long v97 = 0u;
              long long v98 = 0u;
              long long v95 = 0u;
              long long v96 = 0u;
              long long v93 = 0u;
              long long v94 = 0u;
              long long v91 = 0u;
              long long v92 = 0u;
              long long v89 = 0u;
              long long v90 = 0u;
              long long v87 = 0u;
              long long v88 = 0u;
              long long v85 = 0u;
              long long v86 = 0u;
              long long v83 = 0u;
              long long v84 = 0u;
              long long v82 = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v82);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)"Detected size mismatch between resultPostItn=", 45);
              long long v64 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)" and resultAlignment=", 21);
              std::ostream::operator<<();
              quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v82);
              uint64_t v60 = *((void *)&v108 + 1);
              uint64_t v61 = v108;
              int v62 = quasar::gLogLevel;
            }
            if (v62 >= 4)
            {
              int v65 = *(_DWORD *)(a1 + 16);
              long long v97 = 0u;
              long long v98 = 0u;
              long long v95 = 0u;
              long long v96 = 0u;
              long long v93 = 0u;
              long long v94 = 0u;
              long long v91 = 0u;
              long long v92 = 0u;
              long long v89 = 0u;
              long long v90 = 0u;
              long long v87 = 0u;
              long long v88 = 0u;
              long long v85 = 0u;
              long long v86 = 0u;
              long long v83 = 0u;
              long long v84 = 0u;
              long long v82 = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v82);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)"#", 1);
              quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v82);
              if (quasar::gLogLevel >= 4)
              {
                long long v97 = 0u;
                long long v98 = 0u;
                long long v95 = 0u;
                long long v96 = 0u;
                long long v93 = 0u;
                long long v94 = 0u;
                long long v91 = 0u;
                long long v92 = 0u;
                long long v89 = 0u;
                long long v90 = 0u;
                long long v87 = 0u;
                long long v88 = 0u;
                long long v85 = 0u;
                long long v86 = 0u;
                long long v83 = 0u;
                long long v84 = 0u;
                long long v82 = 0u;
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v82);
                int v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)"chunk_tokens_str: ", 18);
                quasar::tokens2Str((uint64_t *)&v103, &v81);
                if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  uint64_t v67 = &v81;
                }
                else {
                  uint64_t v67 = (std::string *)v81.__r_.__value_.__r.__words[0];
                }
                if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type v68 = HIBYTE(v81.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type v68 = v81.__r_.__value_.__l.__size_;
                }
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)v67, v68);
                if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v81.__r_.__value_.__l.__data_);
                }
                quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v82);
                if (quasar::gLogLevel >= 4)
                {
                  long long v97 = 0u;
                  long long v98 = 0u;
                  long long v95 = 0u;
                  long long v96 = 0u;
                  long long v93 = 0u;
                  long long v94 = 0u;
                  long long v91 = 0u;
                  long long v92 = 0u;
                  long long v89 = 0u;
                  long long v90 = 0u;
                  long long v87 = 0u;
                  long long v88 = 0u;
                  long long v85 = 0u;
                  long long v86 = 0u;
                  long long v83 = 0u;
                  long long v84 = 0u;
                  long long v82 = 0u;
                  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v82);
                  uint64_t v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)"chunk_post_itn: ", 16);
                  quasar::tokens2Str((uint64_t *)&v102, &v81);
                  if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    int v70 = &v81;
                  }
                  else {
                    int v70 = (std::string *)v81.__r_.__value_.__r.__words[0];
                  }
                  if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    std::string::size_type v71 = HIBYTE(v81.__r_.__value_.__r.__words[2]);
                  }
                  else {
                    std::string::size_type v71 = v81.__r_.__value_.__l.__size_;
                  }
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)v70, v71);
                  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v81.__r_.__value_.__l.__data_);
                  }
                  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v82);
                  if (quasar::gLogLevel >= 4)
                  {
                    long long v97 = 0u;
                    long long v98 = 0u;
                    long long v95 = 0u;
                    long long v96 = 0u;
                    long long v93 = 0u;
                    long long v94 = 0u;
                    long long v91 = 0u;
                    long long v92 = 0u;
                    long long v89 = 0u;
                    long long v90 = 0u;
                    long long v87 = 0u;
                    long long v88 = 0u;
                    long long v85 = 0u;
                    long long v86 = 0u;
                    long long v83 = 0u;
                    long long v84 = 0u;
                    long long v82 = 0u;
                    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v82);
                    long long v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)"chunk_alignment: ", 17);
                    quasar::operator<<(v72, (uint64_t *)v5 + 3);
                    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v82);
                    if (quasar::gLogLevel >= 4)
                    {
                      long long v97 = 0u;
                      long long v98 = 0u;
                      long long v95 = 0u;
                      long long v96 = 0u;
                      long long v93 = 0u;
                      long long v94 = 0u;
                      long long v91 = 0u;
                      long long v92 = 0u;
                      long long v89 = 0u;
                      long long v90 = 0u;
                      long long v87 = 0u;
                      long long v88 = 0u;
                      long long v85 = 0u;
                      long long v86 = 0u;
                      long long v83 = 0u;
                      long long v84 = 0u;
                      long long v82 = 0u;
                      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v82);
                      long long v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)"result_post_itn: ", 17);
                      int v74 = -1227133513 * ((unint64_t)(v60 - v61) >> 5) - 2 * v65;
                      quasar::tokens2Str(v108 + 224 * (v74 & ~(v74 >> 31)), *((uint64_t *)&v108 + 1), &v81);
                      if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        std::string::size_type v75 = &v81;
                      }
                      else {
                        std::string::size_type v75 = (std::string *)v81.__r_.__value_.__r.__words[0];
                      }
                      if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        std::string::size_type v76 = HIBYTE(v81.__r_.__value_.__r.__words[2]);
                      }
                      else {
                        std::string::size_type v76 = v81.__r_.__value_.__l.__size_;
                      }
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)v75, v76);
                      if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v81.__r_.__value_.__l.__data_);
                      }
                      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v82);
                      if (quasar::gLogLevel >= 4)
                      {
                        long long v97 = 0u;
                        long long v98 = 0u;
                        long long v95 = 0u;
                        long long v96 = 0u;
                        long long v93 = 0u;
                        long long v94 = 0u;
                        long long v91 = 0u;
                        long long v92 = 0u;
                        long long v89 = 0u;
                        long long v90 = 0u;
                        long long v87 = 0u;
                        long long v88 = 0u;
                        long long v85 = 0u;
                        long long v86 = 0u;
                        long long v83 = 0u;
                        long long v84 = 0u;
                        long long v82 = 0u;
                        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v82);
                        int v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)"result_alignment: ", 18);
                        quasar::operator<<(v77, (uint64_t *)&v104);
                        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v82);
                      }
                    }
                  }
                }
              }
            }
            signed int v6 = *(_DWORD *)(a1 + 16) + v6 - *(_DWORD *)(a1 + 20);
            std::string::size_type v10 = v80;
            goto LABEL_127;
          }
        }
      }
      if (v104 == v105)
      {
        LODWORD(v++*(void *)(result + 24) = 0;
      }
      else
      {
        if (quasar::gLogLevel >= 4)
        {
          long long v97 = 0u;
          long long v98 = 0u;
          long long v95 = 0u;
          long long v96 = 0u;
          long long v93 = 0u;
          long long v94 = 0u;
          long long v91 = 0u;
          long long v92 = 0u;
          long long v89 = 0u;
          long long v90 = 0u;
          long long v87 = 0u;
          long long v88 = 0u;
          long long v85 = 0u;
          long long v86 = 0u;
          long long v83 = 0u;
          long long v84 = 0u;
          long long v82 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v82);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)"WARNING: No concatenation point found", 37);
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v82);
          uint64_t v11 = (int32x2_t *)*((void *)v5 + 3);
          std::basic_string<char32_t>::size_type v12 = (int32x2_t *)*((void *)v5 + 4);
        }
        if (v12 == v11) {
LABEL_135:
        }
          std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
        LODWORD(v++*(void *)(result + 24) = 0;
        unsigned int v79 = *((_DWORD *)v105 - 1) - v11[1].i32[0] + 1;
        unint64_t v15 = ((char *)v12 - (char *)v11) >> 4;
      }
      goto LABEL_57;
    }
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
LABEL_127:
    *(void *)&long long v82 = &v102;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v82);
    *(void *)&long long v82 = &v103;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v82);
    if (v10 == size) {
      goto LABEL_130;
    }
  }
  *(_OWORD *)a3 = v108;
  a3[2] = v109;
  unint64_t v109 = 0;
  long long v108 = 0uLL;
LABEL_130:
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v5);
  if (v104)
  {
    unint64_t v105 = v104;
    operator delete(v104);
  }
  *(void *)&long long v82 = v107;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v82);
  *(void *)&long long v82 = &v108;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v82);
}

void sub_1B1C1E46C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  a24 = v61 - 240;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  a24 = v61 - 216;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  std::__shared_weak_count::__release_shared[abi:ne180100](v60);
  unsigned int v63 = *(void **)(v61 - 192);
  if (v63)
  {
    *(void *)(v61 - 184) = v63;
    operator delete(v63);
  }
  a24 = v61 - 168;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  a24 = v61 - 144;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  _Unwind_Resume(a1);
}

void std::vector<quasar::PreTokenToPostTokenItnMap>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 16 * a2;
    }
  }
  else
  {
    std::vector<quasar::PreTokenToPostTokenItnMap>::__append((void **)a1, a2 - v2);
  }
}

void *std::allocate_shared[abi:ne180100]<kaldi::quasar::Vocab,std::allocator<kaldi::quasar::Vocab>,std::istream &,BOOL &,void>@<X0>(uint64_t a1@<X1>, unsigned __int8 *a2@<X2>, void *a3@<X8>)
{
  signed int v6 = operator new(0xC8uLL);
  double result = std::__shared_ptr_emplace<kaldi::quasar::Vocab>::__shared_ptr_emplace[abi:ne180100]<std::istream &,BOOL &,std::allocator<kaldi::quasar::Vocab>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1B1C1E618(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<kaldi::quasar::Vocab>::__shared_ptr_emplace[abi:ne180100]<std::istream &,BOOL &,std::allocator<kaldi::quasar::Vocab>,0>(void *a1, uint64_t a2, unsigned __int8 *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5F4C0;
  kaldi::quasar::Vocab::Vocab(a1 + 3, a2, *a3, 1);
  return a1;
}

void sub_1B1C1E67C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::quasar::Vocab>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F4C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::quasar::Vocab>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F4C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<kaldi::quasar::Vocab>::__on_zero_shared(uint64_t a1)
{
  std::allocator<kaldi::quasar::Vocab>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

void std::allocator<kaldi::quasar::Vocab>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 144);
  if (v3)
  {
    *(void *)(a2 + 1--*(_DWORD *)(a9 + 52) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void **)(a2 + 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a2 + 80);
  if (*(char *)(a2 + 79) < 0) {
    operator delete(*(void **)(a2 + 56));
  }
  if (*(char *)(a2 + 55) < 0) {
    operator delete(*(void **)(a2 + 32));
  }
  if (*(char *)(a2 + 31) < 0) {
    operator delete(*(void **)(a2 + 8));
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  signed int v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  unint64_t v7 = *v6;
  if (!*v6)
  {
    int v8 = v6;
    std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v11, v8, v10[0]);
    unint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<int>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<int>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  signed int v6 = operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  unint64_t v7 = (std::string *)(v6 + 4);
  int v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_1B1C1E8DC(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<int>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<int>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<int>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<int>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<float>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t quasar::InverseTextNormalizer::RegexFeatInfo::RegexFeatInfo(uint64_t a1, int a2)
{
  *(_DWORD *)a1 = a2;
  uint64_t v3 = (void *)(a1 + 24);
  std::allocate_shared[abi:ne180100]<quasar::URegularExpressionWrapper,std::allocator<quasar::URegularExpressionWrapper>,std::string const&,void>((void *)(a1 + 8));
  std::allocate_shared[abi:ne180100]<quasar::URegularExpressionWrapper,std::allocator<quasar::URegularExpressionWrapper>,std::string const&,void>(v3);
  return a1;
}

void sub_1B1C1E9AC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<quasar::URegularExpressionWrapper,std::allocator<quasar::URegularExpressionWrapper>,std::string const&,void>@<X0>(void *a1@<X8>)
{
  unint64_t v2 = operator new(0x20uLL);
  double result = std::__shared_ptr_emplace<quasar::URegularExpressionWrapper>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::URegularExpressionWrapper>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B1C1EA0C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::URegularExpressionWrapper>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::URegularExpressionWrapper>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A61830;
  quasar::URegularExpressionWrapper::URegularExpressionWrapper(a1 + 3);
  return a1;
}

void sub_1B1C1EA68(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::URegularExpressionWrapper>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61830;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::URegularExpressionWrapper>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61830;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<quasar::URegularExpressionWrapper>::__on_zero_shared(uint64_t a1)
{
}

double kaldi::Timer::ElapsedCPU(kaldi::Timer *this, clockid_t a2)
{
  if (!*((unsigned char *)this + 24))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "Process CPU time was not enabled");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
  }
  return kaldi::Timer::GetSeconds((kaldi::Timer *)0xC, a2) - *((double *)this + 1);
}

void std::__list_imp<std::shared_ptr<quasar::CommandTransform>>::clear(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        signed int v6 = (std::__shared_weak_count *)v3[3];
        if (v6) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v6);
        }
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::to_bytes(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, std::string *a4@<X8>)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 184) = 0;
  if (!*(void *)(a1 + 48)) {
    goto LABEL_62;
  }
  unint64_t v7 = a2;
  std::string::basic_string[abi:ne180100](a4, (a3 - a2) >> 1, 0);
  if (a3 == v7)
  {
    long long v23 = *(_OWORD *)(a1 + 136);
    long long v52 = *(_OWORD *)(a1 + 120);
    long long v53 = v23;
    long long v24 = *(_OWORD *)(a1 + 168);
    long long v54 = *(_OWORD *)(a1 + 152);
    long long v55 = v24;
    long long v25 = *(_OWORD *)(a1 + 72);
    long long v48 = *(_OWORD *)(a1 + 56);
    long long v49 = v25;
    long long v26 = *(_OWORD *)(a1 + 104);
    long long v50 = *(_OWORD *)(a1 + 88);
    long long v51 = v26;
  }
  else
  {
    if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v8 = 22;
    }
    else {
      std::string::size_type v8 = (a4->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    }
    std::string::resize(a4, v8, 0);
    long long v9 = *(_OWORD *)(a1 + 136);
    long long v52 = *(_OWORD *)(a1 + 120);
    long long v53 = v9;
    long long v10 = *(_OWORD *)(a1 + 168);
    long long v54 = *(_OWORD *)(a1 + 152);
    long long v55 = v10;
    long long v11 = *(_OWORD *)(a1 + 72);
    long long v48 = *(_OWORD *)(a1 + 56);
    long long v49 = v11;
    __n128 v12 = *(__n128 *)(a1 + 88);
    long long v13 = *(_OWORD *)(a1 + 104);
    std::string::size_type size = HIBYTE(a4->__r_.__value_.__r.__words[2]);
    if ((size & 0x80u) == 0) {
      unint64_t v15 = (char *)a4;
    }
    else {
      unint64_t v15 = (char *)a4->__r_.__value_.__r.__words[0];
    }
    if ((size & 0x80u) != 0) {
      std::string::size_type size = a4->__r_.__value_.__l.__size_;
    }
    uint64_t v16 = &v15[size];
    long long v50 = *(_OWORD *)(a1 + 88);
    long long v51 = v13;
    while (1)
    {
      int v17 = (*(uint64_t (**)(void, long long *, char *, char *, char **, char *, char *, uint64_t *, __n128))(**(void **)(a1 + 48) + 24))(*(void *)(a1 + 48), &v48, v7, a3, &v47, v15, v16, &v46, v12);
      BOOL v18 = v47 == v7;
      *(void *)(a1 + 184) += (v47 - v7) >> 2;
      if (v18) {
        goto LABEL_60;
      }
      if (v17 != 1) {
        break;
      }
      if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v19 = a4;
      }
      else {
        int v19 = (std::string *)a4->__r_.__value_.__r.__words[0];
      }
      uint64_t v20 = v46 - (void)v19;
      std::string::resize(a4, 2 * (v46 - (void)v19), 0);
      std::string::size_type v21 = HIBYTE(a4->__r_.__value_.__r.__words[2]);
      if ((v21 & 0x80u) == 0) {
        int v22 = a4;
      }
      else {
        int v22 = (std::string *)a4->__r_.__value_.__r.__words[0];
      }
      unint64_t v15 = (char *)v22 + v20;
      if ((v21 & 0x80u) != 0) {
        std::string::size_type v21 = a4->__r_.__value_.__l.__size_;
      }
      uint64_t v16 = (char *)v22 + v21;
      unint64_t v7 = v47;
      if (v47 >= a3) {
        goto LABEL_60;
      }
    }
    if (v17)
    {
      if (v17 != 3) {
        goto LABEL_60;
      }
      if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v27 = (char *)a4;
      }
      else {
        int v27 = (char *)a4->__r_.__value_.__r.__words[0];
      }
      std::string::resize(a4, v15 - v27, 0);
      std::string::append[abi:ne180100]<char const*,0>(a4, v7, a3);
    }
    else
    {
      if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v28 = a4;
      }
      else {
        int v28 = (std::string *)a4->__r_.__value_.__r.__words[0];
      }
      std::string::resize(a4, v46 - (void)v28, 0);
    }
  }
  std::string::size_type v29 = HIBYTE(a4->__r_.__value_.__r.__words[2]);
  std::string::size_type v30 = a4->__r_.__value_.__l.__size_;
  if ((v29 & 0x80u) == 0) {
    std::string::size_type v31 = 22;
  }
  else {
    std::string::size_type v31 = (a4->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  }
  std::string::resize(a4, v31, 0);
  if ((v29 & 0x80u) == 0) {
    std::string::size_type v32 = v29;
  }
  else {
    std::string::size_type v32 = v30;
  }
  int v33 = SHIBYTE(a4->__r_.__value_.__r.__words[2]);
  BOOL v34 = v33 < 0;
  if (v33 >= 0) {
    std::basic_string<char32_t>::size_type v35 = a4;
  }
  else {
    std::basic_string<char32_t>::size_type v35 = (std::string *)a4->__r_.__value_.__r.__words[0];
  }
  int v36 = (char *)v35 + v32;
  if (v34) {
    std::string::size_type v37 = a4->__r_.__value_.__l.__size_;
  }
  else {
    std::string::size_type v37 = HIBYTE(a4->__r_.__value_.__r.__words[2]);
  }
  for (uint64_t i = &v36[v37]; ; uint64_t i = (char *)(v43 + v42))
  {
    int v39 = (*(uint64_t (**)(void, long long *, char *, char *, char **))(**(void **)(a1 + 48) + 40))(*(void *)(a1 + 48), &v48, v36, i, &v47);
    if (v39 != 1) {
      break;
    }
    if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v40 = (std::string::size_type)a4;
    }
    else {
      std::string::size_type v40 = a4->__r_.__value_.__r.__words[0];
    }
    unint64_t v41 = &v47[-v40];
    std::string::resize(a4, 2 * (void)&v47[-v40], 0);
    std::string::size_type v42 = HIBYTE(a4->__r_.__value_.__r.__words[2]);
    if ((v42 & 0x80u) == 0) {
      std::string::size_type v43 = (std::string::size_type)a4;
    }
    else {
      std::string::size_type v43 = a4->__r_.__value_.__r.__words[0];
    }
    int v36 = &v41[v43];
    if ((v42 & 0x80u) != 0) {
      std::string::size_type v42 = a4->__r_.__value_.__l.__size_;
    }
  }
  if (!v39)
  {
    int v36 = v47;
    goto LABEL_68;
  }
  if (v39 == 3)
  {
LABEL_68:
    if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v45 = (std::string::size_type)a4;
    }
    else {
      std::string::size_type v45 = a4->__r_.__value_.__r.__words[0];
    }
    std::string::resize(a4, (std::string::size_type)&v36[-v45], 0);
    return;
  }
LABEL_60:
  if (SHIBYTE(a4->__r_.__value_.__r.__words[2]) < 0) {
    operator delete(a4->__r_.__value_.__l.__data_);
  }
LABEL_62:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(a1 + 23))
    {
      *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a4->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
      return;
    }
LABEL_73:
    std::__throw_range_error[abi:ne180100]("wstring_convert: to_bytes error");
  }
  std::string::size_type v44 = *(void *)(a1 + 8);
  if (!v44) {
    goto LABEL_73;
  }
  std::string::__init_copy_ctor_external(a4, *(const std::string::value_type **)a1, v44);
}

void sub_1B1C1EFA8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::shared_ptr<fst::MappedFile>::shared_ptr[abi:ne180100]<fst::MappedFile,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1B1C1F050(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<fst::MappedFile>::shared_ptr[abi:ne180100]<fst::MappedFile,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<fst::MappedFile *,std::shared_ptr<fst::MappedFile>::__shared_ptr_default_delete<fst::MappedFile,fst::MappedFile>,std::allocator<fst::MappedFile>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_pointer<fst::MappedFile *,std::shared_ptr<fst::MappedFile>::__shared_ptr_default_delete<fst::MappedFile,fst::MappedFile>,std::allocator<fst::MappedFile>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<fst::MappedFile *,std::shared_ptr<fst::MappedFile>::__shared_ptr_default_delete<fst::MappedFile,fst::MappedFile>,std::allocator<fst::MappedFile>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::shared_ptr<quasar::FstTokenTransform>::shared_ptr[abi:ne180100]<quasar::SpaceApplyDefaultFstTokenTransform,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1B1C1F180(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<quasar::FstTokenTransform>::shared_ptr[abi:ne180100]<quasar::SpaceApplyDefaultFstTokenTransform,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<quasar::SpaceApplyDefaultFstTokenTransform *,std::shared_ptr<quasar::FstTokenTransform>::__shared_ptr_default_delete<quasar::FstTokenTransform,quasar::SpaceApplyDefaultFstTokenTransform>,std::allocator<quasar::SpaceApplyDefaultFstTokenTransform>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_pointer<quasar::SpaceApplyDefaultFstTokenTransform *,std::shared_ptr<quasar::FstTokenTransform>::__shared_ptr_default_delete<quasar::FstTokenTransform,quasar::SpaceApplyDefaultFstTokenTransform>,std::allocator<quasar::SpaceApplyDefaultFstTokenTransform>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<quasar::SpaceApplyDefaultFstTokenTransform *,std::shared_ptr<quasar::FstTokenTransform>::__shared_ptr_default_delete<quasar::FstTokenTransform,quasar::SpaceApplyDefaultFstTokenTransform>,std::allocator<quasar::SpaceApplyDefaultFstTokenTransform>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::shared_ptr<quasar::FstTokenTransform>::shared_ptr[abi:ne180100]<quasar::RewriteApplyCapitalizeFstTokenTransform,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1B1C1F2B0(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<quasar::FstTokenTransform>::shared_ptr[abi:ne180100]<quasar::SpaceApplyDefaultFstTokenTransform,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<quasar::RewriteApplyCapitalizeFstTokenTransform *,std::shared_ptr<quasar::FstTokenTransform>::__shared_ptr_default_delete<quasar::FstTokenTransform,quasar::RewriteApplyCapitalizeFstTokenTransform>,std::allocator<quasar::RewriteApplyCapitalizeFstTokenTransform>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_pointer<quasar::RewriteApplyCapitalizeFstTokenTransform *,std::shared_ptr<quasar::FstTokenTransform>::__shared_ptr_default_delete<quasar::FstTokenTransform,quasar::RewriteApplyCapitalizeFstTokenTransform>,std::allocator<quasar::RewriteApplyCapitalizeFstTokenTransform>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<quasar::RewriteApplyCapitalizeFstTokenTransform *,std::shared_ptr<quasar::FstTokenTransform>::__shared_ptr_default_delete<quasar::FstTokenTransform,quasar::RewriteApplyCapitalizeFstTokenTransform>,std::allocator<quasar::RewriteApplyCapitalizeFstTokenTransform>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::shared_ptr<quasar::FstTokenTransform>::shared_ptr[abi:ne180100]<quasar::RewriteApplyDefaultFstTokenTransform,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1B1C1F3E0(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<quasar::FstTokenTransform>::shared_ptr[abi:ne180100]<quasar::SpaceApplyDefaultFstTokenTransform,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<quasar::RewriteApplyDefaultFstTokenTransform *,std::shared_ptr<quasar::FstTokenTransform>::__shared_ptr_default_delete<quasar::FstTokenTransform,quasar::RewriteApplyDefaultFstTokenTransform>,std::allocator<quasar::RewriteApplyDefaultFstTokenTransform>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_pointer<quasar::RewriteApplyDefaultFstTokenTransform *,std::shared_ptr<quasar::FstTokenTransform>::__shared_ptr_default_delete<quasar::FstTokenTransform,quasar::RewriteApplyDefaultFstTokenTransform>,std::allocator<quasar::RewriteApplyDefaultFstTokenTransform>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<quasar::RewriteApplyDefaultFstTokenTransform *,std::shared_ptr<quasar::FstTokenTransform>::__shared_ptr_default_delete<quasar::FstTokenTransform,quasar::RewriteApplyDefaultFstTokenTransform>,std::allocator<quasar::RewriteApplyDefaultFstTokenTransform>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::shared_ptr<quasar::FstTokenTransform>::shared_ptr[abi:ne180100]<quasar::ComposeFstTokenTransform,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1B1C1F510(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<quasar::FstTokenTransform>::shared_ptr[abi:ne180100]<quasar::SpaceApplyDefaultFstTokenTransform,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<quasar::ComposeFstTokenTransform *,std::shared_ptr<quasar::FstTokenTransform>::__shared_ptr_default_delete<quasar::FstTokenTransform,quasar::ComposeFstTokenTransform>,std::allocator<quasar::ComposeFstTokenTransform>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_pointer<quasar::ComposeFstTokenTransform *,std::shared_ptr<quasar::FstTokenTransform>::__shared_ptr_default_delete<quasar::FstTokenTransform,quasar::ComposeFstTokenTransform>,std::allocator<quasar::ComposeFstTokenTransform>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<quasar::ComposeFstTokenTransform *,std::shared_ptr<quasar::FstTokenTransform>::__shared_ptr_default_delete<quasar::FstTokenTransform,quasar::ComposeFstTokenTransform>,std::allocator<quasar::ComposeFstTokenTransform>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  std::string::size_type v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    unint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  long long v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *long long v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v++*(void *)(result + 24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1B1C1F85C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  std::string::size_type v8 = operator new(0x38uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  unint64_t v9 = (std::string *)(v8 + 2);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    _DWORD v8[4] = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_1B1C1F8FC(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<int,std::vector<std::shared_ptr<quasar::FstTokenTransform>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::shared_ptr<quasar::FstTokenTransform>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::shared_ptr<quasar::FstTokenTransform>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::shared_ptr<quasar::FstTokenTransform>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    unint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      long long v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          long long v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  unint64_t v13 = (void *)(a1 + 16);
  long long v11 = operator new(0x30uLL);
  *long long v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  v11[4] = 0;
  v11[5] = 0;
  void v11[3] = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  unint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *long long v11 = *v21;
LABEL_38:
    *unint64_t v21 = v11;
    goto LABEL_39;
  }
  *long long v11 = *v13;
  *unint64_t v13 = v11;
  *(void *)(v20 + 8 * v4) = v13;
  if (*v11)
  {
    unint64_t v22 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    unint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_1B1C1FB4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::vector<std::shared_ptr<quasar::FstTokenTransform>>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::vector<std::shared_ptr<quasar::FstTokenTransform>>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = __p + 3;
    std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  if (__p) {
    operator delete(__p);
  }
}

uint64_t std::vector<std::shared_ptr<quasar::FstTokenTransform>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<quasar::FstTokenTransform>>,std::reverse_iterator<std::shared_ptr<quasar::FstTokenTransform>*>,std::reverse_iterator<std::shared_ptr<quasar::FstTokenTransform>*>,std::reverse_iterator<std::shared_ptr<quasar::FstTokenTransform>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<quasar::FstTokenTransform>>,std::reverse_iterator<std::shared_ptr<quasar::FstTokenTransform>*>,std::reverse_iterator<std::shared_ptr<quasar::FstTokenTransform>*>,std::reverse_iterator<std::shared_ptr<quasar::FstTokenTransform>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::FstTokenTransform>>,std::reverse_iterator<std::shared_ptr<quasar::FstTokenTransform>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::FstTokenTransform>>,std::reverse_iterator<std::shared_ptr<quasar::FstTokenTransform>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::FeatureExtractor>>,std::reverse_iterator<std::shared_ptr<quasar::FeatureExtractor>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void *std::allocate_shared[abi:ne180100]<quasar::VocabId,std::allocator<quasar::VocabId>,std::string &,std::string &,std::string &,std::string &,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0xD0uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::VocabId>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::string &,std::string &,std::string &,std::allocator<quasar::VocabId>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1B1C1FD60(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::VocabId>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::string &,std::string &,std::string &,std::allocator<quasar::VocabId>,0>(void *a1, uint64_t a2, uint64_t a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A62390;
  quasar::VocabId::VocabId((uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1B1C1FDBC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::VocabId>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62390;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::VocabId>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62390;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<quasar::VocabId>::__on_zero_shared(uint64_t a1)
{
}

void quasar::VocabId::~VocabId(void **this)
{
  if (*((char *)this + 183) < 0) {
    operator delete(this[20]);
  }
  if (*((char *)this + 159) < 0) {
    operator delete(this[17]);
  }
  if (*((char *)this + 135) < 0) {
    operator delete(this[14]);
  }
  if (*((char *)this + 111) < 0) {
    operator delete(this[11]);
  }
  if (*((unsigned char *)this + 72))
  {
    uint64_t v2 = this[7];
    if (v2) {
      MEMORY[0x1B3EA8630](v2, 0x1000C8077774924);
    }
  }
  uint64_t v3 = (std::__shared_weak_count *)this[5];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  unint64_t v4 = (std::__shared_weak_count *)this[3];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)this[1];
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void std::__shared_ptr_emplace<std::map<std::string,std::vector<int>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62908;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::map<std::string,std::vector<int>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62908;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<std::map<std::string,std::vector<int>>>::__on_zero_shared(uint64_t a1)
{
}

void *std::allocate_shared[abi:ne180100]<quasar::QuasarTextProcImpl,std::allocator<quasar::QuasarTextProcImpl>,std::vector<std::string> &,void>@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x48uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::QuasarTextProcImpl>::__shared_ptr_emplace[abi:ne180100]<std::vector<std::string> &,std::allocator<quasar::QuasarTextProcImpl>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B1C1FFCC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::QuasarTextProcImpl>::__shared_ptr_emplace[abi:ne180100]<std::vector<std::string> &,std::allocator<quasar::QuasarTextProcImpl>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A606B0;
  quasar::QuasarTextProcImpl::QuasarTextProcImpl(a1 + 3);
  return a1;
}

void sub_1B1C20028(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::QuasarTextProcImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A606B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::QuasarTextProcImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A606B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<quasar::QuasarTextProcImpl>::__on_zero_shared(uint64_t a1)
{
}

void std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<float>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::vector<quasar::InverseTextNormalizer::RegexFeatInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 40;
        std::allocator<quasar::InverseTextNormalizer::RegexFeatInfo>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<quasar::InverseTextNormalizer::RegexFeatInfo>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a2 + 32);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a2 + 16);
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

quasar::LabelTransformer *std::unique_ptr<quasar::LabelTransformer>::reset[abi:ne180100](quasar::LabelTransformer **a1, quasar::LabelTransformer *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    quasar::LabelTransformer::~LabelTransformer(result);
    JUMPOUT(0x1B3EA8670);
  }
  return result;
}

void quasar::LabelTransformer::~LabelTransformer(quasar::LabelTransformer *this)
{
  uint64_t v2 = (void *)*((void *)this + 28);
  if (v2) {
    operator delete(v2);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)this + 184);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 128);
  uint64_t v3 = (void *)*((void *)this + 14);
  if (v3) {
    free(v3);
  }
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  std::__hash_table<std::__hash_value_type<int,std::vector<std::shared_ptr<quasar::FstTokenTransform>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::shared_ptr<quasar::FstTokenTransform>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::shared_ptr<quasar::FstTokenTransform>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::shared_ptr<quasar::FstTokenTransform>>>>>::~__hash_table((uint64_t)this + 8);
}

uint64_t std::__hash_table<std::__hash_value_type<int,std::vector<std::shared_ptr<quasar::FstTokenTransform>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::shared_ptr<quasar::FstTokenTransform>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::shared_ptr<quasar::FstTokenTransform>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::shared_ptr<quasar::FstTokenTransform>>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<int,std::vector<std::shared_ptr<quasar::FstTokenTransform>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::shared_ptr<quasar::FstTokenTransform>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::shared_ptr<quasar::FstTokenTransform>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::shared_ptr<quasar::FstTokenTransform>>>>>::__deallocate_node(a1, *(char **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<int,std::vector<std::shared_ptr<quasar::FstTokenTransform>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::shared_ptr<quasar::FstTokenTransform>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::shared_ptr<quasar::FstTokenTransform>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::shared_ptr<quasar::FstTokenTransform>>>>>::__deallocate_node(uint64_t a1, char *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = *(char **)v2;
      uint64_t v4 = (void **)(v2 + 24);
      std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v4);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

quasar::PunctuationTransformer *std::unique_ptr<quasar::PunctuationTransformer>::reset[abi:ne180100](quasar::PunctuationTransformer **a1, quasar::PunctuationTransformer *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    quasar::PunctuationTransformer::~PunctuationTransformer(result);
    JUMPOUT(0x1B3EA8670);
  }
  return result;
}

void quasar::PunctuationTransformer::~PunctuationTransformer(quasar::PunctuationTransformer *this)
{
  if (*((char *)this + 487) < 0) {
    operator delete(*((void **)this + 58));
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 416);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 376);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 45);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 312);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 36);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  std::__tree<std::string>::destroy((uint64_t)this + 256, *((char **)this + 33));
  quasar::LabelTransformer::~LabelTransformer(this);
}

quasar::PunctuationTransformer *quasar::PunctuationTransformer::PunctuationTransformer(quasar::PunctuationTransformer *this)
{
  void v11[3] = *MEMORY[0x1E4F143B8];
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + ++*(void *)(result + 24) = 0u;
  *((_DWORD *)this + 10) = 1065353216;
  quasar::SystemConfig::Version::Version((quasar::PunctuationTransformer *)((char *)this + 48));
  *(_OWORD *)((char *)this + 1--*(_DWORD *)(a9 + 52) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((void *)this + 15) = 0;
  *((void *)this + 16) = &unk_1F0A51768;
  *((unsigned char *)this + 168) = 0;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *((_DWORD *)this + 54) = 1065353216;
  *((void *)this + 29) = 0;
  *((void *)this + 30) = 0;
  *((void *)this + 28) = 0;
  *((void *)this + 33) = 0;
  *((void *)this + 34) = 0;
  *((void *)this + 32) = (char *)this + 264;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  std::string::basic_string[abi:ne180100]<0>(__p, "Emoji");
  std::string::basic_string[abi:ne180100]<0>(v7, "emoji");
  std::string::basic_string[abi:ne180100]<0>(v8, "Emojis");
  std::string::basic_string[abi:ne180100]<0>(v9, "emojis");
  std::string::basic_string[abi:ne180100]<0>(v10, "Emoji's");
  std::string::basic_string[abi:ne180100]<0>(v11, "emoji's");
  std::unordered_set<std::string>::unordered_set((uint64_t)this + 312, (unsigned __int8 *)__p, 6);
  for (uint64_t i = 0; i != -18; i -= 3)
  {
    if (SHIBYTE(v11[i + 2]) < 0) {
      operator delete((void *)v11[i]);
    }
  }
  *((void *)this + 44) = 0;
  *((void *)this + 45) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, ".");
  std::unordered_set<std::string>::unordered_set((uint64_t)this + 376, (unsigned __int8 *)__p, 1);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, ".");
  std::string::basic_string[abi:ne180100]<0>(v7, "?");
  std::unordered_set<std::string>::unordered_set((uint64_t)this + 416, (unsigned __int8 *)__p, 2);
  for (uint64_t j = 0; j != -6; j -= 3)
  {
    if (SHIBYTE(v7[j + 2]) < 0) {
      operator delete((void *)v7[j]);
    }
  }
  *((void *)this + 58) = 0;
  *((void *)this + 59) = 0;
  *((void *)this + 60) = 0;
  return this;
}

void sub_1B1C20688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v20 = 0;
  while (1)
  {
    if (*(char *)(v18 + v20 + 47) < 0) {
      operator delete(*(void **)(v18 + v20 + 24));
    }
    v20 -= 24;
    if (v20 == -48)
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v17);
      unint64_t v21 = *(std::__shared_weak_count **)(v15 + 360);
      if (v21) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v21);
      }
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v16);
      unint64_t v22 = *(std::__shared_weak_count **)(v15 + 304);
      if (v22) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v22);
      }
      long long v23 = *(std::__shared_weak_count **)(v15 + 288);
      if (v23) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v23);
      }
      std::__tree<std::string>::destroy(v15 + 256, *(char **)(v15 + 264));
      quasar::LabelTransformer::~LabelTransformer((quasar::LabelTransformer *)v15);
      _Unwind_Resume(a1);
    }
  }
}

void std::allocate_shared[abi:ne180100]<kaldi::quasar::PrefixTree<std::string,std::string>,std::allocator<kaldi::quasar::PrefixTree<std::string,std::string>>,char const(&)[1],void>(uint64_t a1, char *a2)
{
  uint64_t v3 = operator new(0x20uLL);
  std::__shared_ptr_emplace<kaldi::quasar::PrefixTree<std::string,std::string>>::__shared_ptr_emplace[abi:ne180100]<char const(&)[1],std::allocator<kaldi::quasar::PrefixTree<std::string,std::string>>,0>(v3, a2);
}

void sub_1B1C207F8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::quasar::PrefixTree<std::string,std::string>>::__shared_ptr_emplace[abi:ne180100]<char const(&)[1],std::allocator<kaldi::quasar::PrefixTree<std::string,std::string>>,0>(void *a1, char *__s)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5F108;
  std::allocator<kaldi::quasar::PrefixTree<std::string,std::string>>::construct[abi:ne180100]<kaldi::quasar::PrefixTree<std::string,std::string>,char const(&)[1]>((int)&v2, a1 + 24, __s);
}

void sub_1B1C20868(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::quasar::PrefixTree<std::string,std::string>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F108;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::quasar::PrefixTree<std::string,std::string>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F108;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t *std::__shared_ptr_emplace<kaldi::quasar::PrefixTree<std::string,std::string>>::__on_zero_shared(uint64_t a1)
{
  return kaldi::quasar::PrefixTree<std::string,std::string>::~PrefixTree((uint64_t *)(a1 + 24));
}

void std::allocator<kaldi::quasar::PrefixTree<std::string,std::string>>::construct[abi:ne180100]<kaldi::quasar::PrefixTree<std::string,std::string>,char const(&)[1]>(int a1, int a2, char *__s)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, __s);
  kaldi::quasar::PrefixTree<std::string,std::string>::PrefixTree();
}

void sub_1B1C2094C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::PrefixTree<std::string,std::string>::PrefixTree()
{
}

void sub_1B1C20A08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  MEMORY[0x1B3EA8670](v14, 0x10B2C4049158C6CLL);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::PrefixTree<std::string,std::string>::Node::Node(uint64_t a1, uint64_t a2, long long *a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  uint64_t v4 = (std::string *)(a1 + 72);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v5 = *a3;
    v4->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  return a1;
}

void sub_1B1C20AB8(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 63) < 0) {
    operator delete(*v2);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t *kaldi::quasar::PrefixTree<std::string,std::string>::~PrefixTree(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    uint64_t v3 = kaldi::quasar::PrefixTree<std::string,std::string>::Node::~Node(v2);
    MEMORY[0x1B3EA8670](v3, 0x10B2C4049158C6CLL);
  }
  return a1;
}

uint64_t kaldi::quasar::PrefixTree<std::string,std::string>::Node::~Node(uint64_t a1)
{
  for (uint64_t i = (void *)a1; ; uint64_t i = (void *)v3)
  {
    while (i[3])
      uint64_t i = *(void **)(i[2] + 40);
    if (i == (void *)a1) {
      break;
    }
    uint64_t v3 = i[8];
    std::__hash_table<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>>>::erase((void *)v3, *(uint64_t **)(v3 + 16));
    uint64_t v4 = kaldi::quasar::PrefixTree<std::string,std::string>::Node::~Node(i);
    MEMORY[0x1B3EA8670](v4, 0x10B2C4049158C6CLL);
  }
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1);
}

unint64_t kaldi::quasar::PrefixTree<std::string,std::string>::GetLongestPrefix(void **a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = *a1;
  *a3 = v3;
  uint64_t v4 = *a2;
  if (a2[1] == *a2) {
    return 0;
  }
  uint64_t v7 = 0;
  unint64_t v8 = 0;
  do
  {
    long long v9 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v3, (unsigned __int8 *)(v4 + v7));
    if (!v9) {
      break;
    }
    uint64_t v3 = (void *)*((void *)v9 + 5);
    *a3 = v3;
    ++v8;
    uint64_t v4 = *a2;
    v7 += 24;
  }
  while (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) > v8);
  return v8;
}

uint64_t std::vector<quasar::InverseTextNormalizer::RegexFeatInfo>::__push_back_slow_path<quasar::InverseTextNormalizer::RegexFeatInfo>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x333333333333333) {
    unint64_t v9 = 0x666666666666666;
  }
  else {
    unint64_t v9 = v5;
  }
  v15[4] = a1 + 2;
  uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(v7, v9);
  uint64_t v11 = &v10[40 * v4];
  v15[0] = v10;
  v15[1] = v11;
  void v15[3] = &v10[40 * v12];
  *(_DWORD *)uint64_t v11 = *(_DWORD *)a2;
  *(_OWORD *)(v11 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(_OWORD *)(v11 + ++*(void *)(result + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a2 + ++*(void *)(result + 24) = 0;
  *(void *)(a2 + 32) = 0;
  void v15[2] = v11 + 40;
  std::vector<quasar::InverseTextNormalizer::RegexFeatInfo>::__swap_out_circular_buffer(a1, v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<quasar::InverseTextNormalizer::RegexFeatInfo>::~__split_buffer(v15);
  return v13;
}

void sub_1B1C20D64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::InverseTextNormalizer::RegexFeatInfo>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::InverseTextNormalizer::RegexFeatInfo>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::InverseTextNormalizer::RegexFeatInfo>,std::reverse_iterator<quasar::InverseTextNormalizer::RegexFeatInfo*>,std::reverse_iterator<quasar::InverseTextNormalizer::RegexFeatInfo*>,std::reverse_iterator<quasar::InverseTextNormalizer::RegexFeatInfo*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::InverseTextNormalizer::RegexFeatInfo>,std::reverse_iterator<quasar::InverseTextNormalizer::RegexFeatInfo*>,std::reverse_iterator<quasar::InverseTextNormalizer::RegexFeatInfo*>,std::reverse_iterator<quasar::InverseTextNormalizer::RegexFeatInfo*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = a7 - 40;
    do
    {
      int v9 = *(_DWORD *)(a3 - 40);
      a3 -= 40;
      *(_DWORD *)uint64_t v8 = v9;
      *(_OWORD *)(v8 + 8) = *(_OWORD *)(a3 + 8);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(_OWORD *)(v8 + ++*(void *)(result + 24) = *(_OWORD *)(a3 + 24);
      *(void *)(a3 + ++*(void *)(result + 24) = 0;
      *(void *)(a3 + 32) = 0;
      *((void *)&v15 + 1) = v8;
      v8 -= 40;
      v7 -= 40;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::InverseTextNormalizer::RegexFeatInfo>,std::reverse_iterator<quasar::InverseTextNormalizer::RegexFeatInfo*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::InverseTextNormalizer::RegexFeatInfo>,std::reverse_iterator<quasar::InverseTextNormalizer::RegexFeatInfo*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::InverseTextNormalizer::RegexFeatInfo>,std::reverse_iterator<quasar::InverseTextNormalizer::RegexFeatInfo*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::InverseTextNormalizer::RegexFeatInfo>,std::reverse_iterator<quasar::InverseTextNormalizer::RegexFeatInfo*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<quasar::InverseTextNormalizer::RegexFeatInfo>::destroy[abi:ne180100](v3, v1);
      v1 += 40;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<quasar::InverseTextNormalizer::RegexFeatInfo>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<quasar::InverseTextNormalizer::RegexFeatInfo>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 40;
    std::allocator<quasar::InverseTextNormalizer::RegexFeatInfo>::destroy[abi:ne180100](v4, i - 40);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<void>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<void>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 4);
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_1B1C210C8(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<void>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<void>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        long long v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    long long v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = operator new(0x40uLL);
    v11[8] = **a4;
    *((void *)v11 + 6) = 0;
    *((void *)v11 + 7) = 0;
    *((void *)v11 + 5) = 0;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::reverse_iterator<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>*>,std::reverse_iterator<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>*>,std::reverse_iterator<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::reverse_iterator<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>*>,std::reverse_iterator<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>*>,std::reverse_iterator<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::reverse_iterator<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::reverse_iterator<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::FeatureExtractor>>,std::reverse_iterator<std::shared_ptr<quasar::FeatureExtractor>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CreateBase2<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>()
{
}

void sub_1B1C2134C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComposeFstImplBase(a1, a2, a3, a4) = &unk_1F0A3AB40;
  uint64_t v8 = *(long long **)(a4 + 40);
  if (!v8) {
    operator new();
  }
  *(void *)(a1 + 136) = v8;
  long long v9 = *v8;
  *(_OWORD *)(a1 + 144) = *v8;
  *(void *)(a1 + 160) = (*(uint64_t (**)(void))(**(void **)v9 + 32))();
  *(void *)(a1 + 168) = (*(uint64_t (**)(void))(***(void ***)(a1 + 152) + 32))(**(void **)(a1 + 152));
  uint64_t v10 = *(void *)(a4 + 48);
  if (!v10) {
    operator new();
  }
  *(void *)(a1 + 176) = v10;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetMatchType(a1);
  if (*(_DWORD *)(a1 + 184) == 3) {
    *(void *)(a1 + 8) |= 4uLL;
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a3 + 64))(a3, 0x3FFFFFFF0007, 0);
  unint64_t v13 = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 144) + 40))(**(void **)(a1 + 144), v11);
  uint64_t v14 = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 152) + 40))(**(void **)(a1 + 152), v12);
  *(void *)(a1 + 8) = *(void *)(a1 + 8) & 0xFFFFC0000000FFFFLL | fst::ComposeProperties(v13, v14) & 0x3FFFFFFF0004;
  return a1;
}

void sub_1B1C215D0(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(void *a1)
{
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 160) + 64))(*(void *)(a1 + 160), 4, 0)|| (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 168) + 64))(*(void *)(a1 + 168), 4, 0)|| ((*(uint64_t (**)(void, void))(***(void ***)(a1 + 144) + 40))(**(void **)(a1 + 144), 0) & 4) != 0|| ((*(uint64_t (**)(void, void))(***(void ***)(a1 + 152) + 40))(**(void **)(a1 + 152), 0) & 4) != 0))
  {
    *(void *)(a1 + 8) |= 4uLL;
  }
  return *(void *)(a1 + 8) & a2;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy()
{
}

void sub_1B1C217F0(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Expand(void *a1, int a2)
{
  uint64_t v4 = (unsigned int *)(*(void *)(a1[22] + 80) + 12 * a2);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if (fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput((uint64_t)a1, v5, v6))
  {
    uint64_t v8 = a1[20];
    uint64_t v7 = a1[21];
    long long v9 = (void *)a1[19];
    uint64_t v10 = (uint64_t)a1;
    int v11 = a2;
    uint64_t v12 = v6;
    uint64_t v13 = v5;
    int v14 = 1;
  }
  else
  {
    uint64_t v7 = a1[20];
    uint64_t v8 = a1[21];
    long long v9 = (void *)a1[18];
    uint64_t v10 = (uint64_t)a1;
    int v11 = a2;
    uint64_t v12 = v5;
    uint64_t v13 = v6;
    int v14 = 0;
  }
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(v10, v11, v7, v12, v8, v13, v9, v14);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::InitMatcher(uint64_t a1, uint64_t a2, int a3)
{
  if ((*(unsigned int (**)(void, void))(***(void ***)(a1 + 144) + 24))(**(void **)(a1 + 144), 0) == a3
    && (*(unsigned int (**)(void, void))(***(void ***)(a1 + 152) + 24))(**(void **)(a1 + 152), 0) == a3)
  {
    operator new();
  }
  return 0;
}

void sub_1B1C21988(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeStart(void **a1)
{
  uint64_t result = (*(uint64_t (**)(void *))(*a1[20] + 24))(a1[20]);
  if (result != -1)
  {
    unsigned int v3 = result;
    uint64_t result = (*(uint64_t (**)(void *))(*a1[21] + 24))(a1[21]);
    if (result != -1)
    {
      unint64_t v4 = __PAIR64__(result, v3);
      char v5 = 0;
      return fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(a1[22], (uint64_t *)&v4, 1);
    }
  }
  return result;
}

float fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeFinal(uint64_t a1, int a2)
{
  unsigned int v3 = (unsigned int *)(*(void *)(*(void *)(a1 + 176) + 80) + 12 * a2);
  float v4 = (*(float (**)(void, void))(***(void ***)(a1 + 144) + 96))(**(void **)(a1 + 144), *v3);
  float v5 = v4;
  float v6 = v4;
  if (v4 != INFINITY)
  {
    float v7 = (*(float (**)(void, void, float, float))(***(void ***)(a1 + 152) + 96))(**(void **)(a1 + 152), v3[1], v4, v4);
    float v6 = v7;
    if (v7 != INFINITY)
    {
      float v6 = NAN;
      if (v5 != -INFINITY && v7 != -INFINITY)
      {
        float v6 = INFINITY;
        BOOL v8 = v7 == INFINITY || v5 == INFINITY;
        float v9 = v5 + v7;
        if (!v8) {
          return v9;
        }
      }
    }
  }
  return v6;
}

void *fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::NullComposeFilter(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a4) {
    operator new();
  }
  *a1 = a4;
  if (!a5) {
    operator new();
  }
  a1[1] = a5;
  a1[2] = (*(uint64_t (**)(void))(**(void **)a4 + 32))();
  a1[3] = (*(uint64_t (**)(void))(**(void **)a1[1] + 32))(*(void *)a1[1]);
  return a1;
}

void sub_1B1C21C94(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(void *a1)
{
  *a1 = &unk_1F0A3AB40;
  uint64_t v2 = a1[17];
  if (v2)
  {
    uint64_t v3 = fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~SequenceComposeFilter(v2);
    MEMORY[0x1B3EA8670](v3, 0x60C40FFD3A10ELL);
  }
  uint64_t v4 = a1[22];
  if (v4)
  {
    float v5 = *(void **)(v4 + 80);
    if (v5)
    {
      *(void *)(v4 + 88) = v5;
      operator delete(v5);
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v4 + 24);
    MEMORY[0x1B3EA8670](v4, 0x10E0C406D28CB5CLL);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl(uint64_t a1, uint64_t a2)
{
}

void sub_1B1C21E80(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::NullComposeFilter()
{
}

BOOL fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a1 + 184);
  if (!v3) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v7 = (*(uint64_t (**)(void))(***(void ***)(a1 + 144) + 104))(**(void **)(a1 + 144));
  uint64_t v8 = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 152) + 104))(**(void **)(a1 + 152), a3);
  if (v7 == -1 && v8 == -1)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    int v11 = fst::LogMessage::LogMessage((fst *)&v15, (uint64_t)__p);
    uint64_t v12 = (void *)fst::cerr(v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ComposeFst: both sides can't require match", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v15);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    *(void *)(a1 + 8) |= 4uLL;
    return 1;
  }
  if (v7 == -1) {
    return 0;
  }
  return v8 == -1 || v7 <= v8;
}

void sub_1B1C220E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, int a8)
{
  (*(void (**)(void, uint64_t))(*(void *)*a7 + 56))(*a7, a4);
  v18[0] = a8 - 1;
  v18[1] = a8 << 31 >> 31;
  uint64_t v18[2] = 0;
  v18[3] = a6;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, a7, v18, a8);
  unint64_t v17 = 0;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a5 + 136))(a5, a6, v15);
  while (1)
  {
    if (!v15[0])
    {
      if (v17 >= v15[2]) {
        goto LABEL_13;
      }
LABEL_7:
      char v14 = (unsigned int *)(v15[1] + 16 * v17);
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(void))(*(void *)v15[0] + 24))(v15[0])) {
      break;
    }
    if (!v15[0]) {
      goto LABEL_7;
    }
    char v14 = (unsigned int *)(*(uint64_t (**)(void))(*(void *)v15[0] + 32))();
LABEL_8:
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, a7, v14, a8);
    if (v15[0]) {
      (*(void (**)(void))(*(void *)v15[0] + 40))(v15[0]);
    }
    else {
      ++v17;
    }
  }
  if (v15[0])
  {
    (*(void (**)(void))(*(void *)v15[0] + 8))();
    goto LABEL_15;
  }
LABEL_13:
  if (v16) {
    --*v16;
  }
LABEL_15:
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(a1, a2);
}

void sub_1B1C22310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>();
  }
  else {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((uint64_t)&a10);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, int a2, void *a3, unsigned int *a4, int a5)
{
  uint64_t v10 = a4 + 1;
  if (!a5) {
    uint64_t v10 = a4;
  }
  uint64_t result = (*(uint64_t (**)(void, void))(*(void *)*a3 + 64))(*a3, *v10);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)*a3 + 72))();
    if ((result & 1) == 0)
    {
      do
      {
        long long v12 = *(_OWORD *)(*(uint64_t (**)(void))(*(void *)*a3 + 80))();
        long long v18 = *(_OWORD *)a4;
        long long v19 = v12;
        if (a5)
        {
          if (DWORD1(v18) == -1) {
            goto LABEL_19;
          }
          char v13 = v19 == -1 ? -1 : 0;
          char v17 = v13;
          if (v19 == -1) {
            goto LABEL_19;
          }
          char v14 = (unsigned int *)&v18;
          char v15 = &v19;
        }
        else
        {
          if (DWORD1(v19) == -1) {
            goto LABEL_19;
          }
          char v16 = v18 == -1 ? -1 : 0;
          char v17 = v16;
          if (v18 == -1) {
            goto LABEL_19;
          }
          char v14 = (unsigned int *)&v19;
          char v15 = &v18;
        }
        fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::AddArc(a1, a2, v14, (uint64_t)v15, &v17);
LABEL_19:
        (*(void (**)(void))(*(void *)*a3 + 88))();
        uint64_t result = (*(uint64_t (**)(void))(*(void *)*a3 + 72))();
      }
      while (!result);
    }
  }
  return result;
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(void *)a1 = &unk_1F0A3CA60;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + ++*(void *)(result + 24) = -1;
  *(_DWORD *)(a1 + 28) = a4;
  fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Copy();
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(void *a1)
{
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy()
{
}

void sub_1B1C22608(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Type(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32));
  if (result != 3)
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2);
    if (result != 3)
    {
      if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) != 4|| (uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2), result != 4))
      {
        if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) == 4&& (*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2) == *(_DWORD *)(a1 + 28))
        {
          return 4;
        }
        else if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28)|| (uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2), result != 4))
        {
          if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28))return 3; {
          uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2);
          }
          if (result != *(_DWORD *)(a1 + 28)) {
            return 3;
          }
        }
      }
    }
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::GetFst(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 84)) {
    return a2 | 4;
  }
  else {
    return a2;
  }
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetState_(uint64_t result, int a2)
{
  if (*(_DWORD *)(result + 24) != a2)
  {
    uint64_t v2 = result;
    *(_DWORD *)(result + ++*(void *)(result + 24) = a2;
    int v3 = (unsigned int *)(*(void *)(*(void *)(*(void *)(result + 16) + 176) + 80) + 12 * a2);
    uint64_t v4 = v3[1];
    (*(void (**)(void, void))(***(void ***)(result + 32) + 56))(**(void **)(result + 32), *v3);
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(v2 + 40) + 56))(**(void **)(v2 + 40), v4);
    *(_DWORD *)(v2 + 64) = *(_DWORD *)(v2 + 24);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Find_(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 48) = a2 == 0;
  if (*(_DWORD *)(a1 + 28))
  {
    if (a2)
    {
      uint64_t v2 = (uint64_t *)(a1 + 40);
      int v3 = (void **)(a1 + 32);
      return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, *v2, *v3);
    }
  }
  else if (a2)
  {
    uint64_t v2 = (uint64_t *)(a1 + 32);
    int v3 = (void **)(a1 + 40);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, *v2, *v3);
  }
  return 1;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Done_(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48)
    || !(*(unsigned int (**)(void))(***(void ***)(a1 + 32) + 72))(**(void **)(a1 + 32)))
  {
    return 0;
  }
  uint64_t v2 = *(uint64_t (**)(void))(***(void ***)(a1 + 40) + 72);
  return v2();
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Value_(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48)) {
    return a1 + 52;
  }
  else {
    return a1 + 68;
  }
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Next_(uint64_t result)
{
  if (*(unsigned char *)(result + 48))
  {
    *(unsigned char *)(result + 48) = 0;
  }
  else
  {
    if (*(_DWORD *)(result + 28))
    {
      uint64_t v2 = *(void **)(result + 32);
      uint64_t v1 = *(void *)(result + 40);
    }
    else
    {
      uint64_t v1 = *(void *)(result + 32);
      uint64_t v2 = *(void **)(result + 40);
    }
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(result, v1, v2);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Priority_(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))();
}

void *fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(void *a1)
{
  *a1 = &unk_1F0A3CA60;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    MEMORY[0x1B3EA8670](v2, 0x20C4093837F09);
  }
  int v3 = (void *)a1[5];
  if (v3)
  {
    if (*v3) {
      (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
    }
    MEMORY[0x1B3EA8670](v3, 0x20C4093837F09);
  }
  return a1;
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A3CA60;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + ++*(void *)(result + 24) = -1;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Copy();
}

void sub_1B1C22CD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a3 + 64))();
  if (result)
  {
    int v8 = *(_DWORD *)(a1 + 28);
    uint64_t v9 = (*(uint64_t (**)(void))(**(void **)a3 + 80))();
    uint64_t v10 = (unsigned int *)(v9 + 4);
    if (v8) {
      uint64_t v10 = (unsigned int *)v9;
    }
    (*(void (**)(void, void))(*(void *)*a4 + 64))(*a4, *v10);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a3, a4);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, void *a3)
{
  while (!(*(unsigned int (**)(void))(**(void **)a2 + 72))()
       || ((*(uint64_t (**)(void))(*(void *)*a3 + 72))() & 1) == 0)
  {
    if ((*(unsigned int (**)(void))(*(void *)*a3 + 72))())
    {
      (*(void (**)(void))(**(void **)a2 + 88))();
      if (((*(uint64_t (**)(void))(**(void **)a2 + 72))() & 1) == 0)
      {
        do
        {
          int v6 = *(_DWORD *)(a1 + 28);
          uint64_t v7 = (*(uint64_t (**)(void))(**(void **)a2 + 80))();
          int v8 = (unsigned int *)(v7 + 4);
          if (v6) {
            int v8 = (unsigned int *)v7;
          }
          if ((*(uint64_t (**)(void, void))(*(void *)*a3 + 64))(*a3, *v8)) {
            break;
          }
          (*(void (**)(void))(**(void **)a2 + 88))();
        }
        while (!(*(unsigned int (**)(void))(**(void **)a2 + 72))());
      }
    }
    while (((*(uint64_t (**)(void))(*(void *)*a3 + 72))() & 1) == 0)
    {
      uint64_t v9 = (*(uint64_t (**)(void))(**(void **)a2 + 80))();
      uint64_t v10 = (*(uint64_t (**)(void))(*(void *)*a3 + 80))();
      (*(void (**)(void))(*(void *)*a3 + 88))();
      int v11 = *(_DWORD *)(a1 + 28);
      BOOL v12 = v11 == 0;
      if (v11) {
        char v13 = (unint64_t *)v10;
      }
      else {
        char v13 = (unint64_t *)v9;
      }
      unint64_t v14 = *v13;
      uint64_t v15 = v13[1];
      if (v12) {
        char v16 = (uint64_t *)v10;
      }
      else {
        char v16 = (uint64_t *)v9;
      }
      if (fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc(a1, *(unsigned int *)(a1 + 24), v14, v15, *v16, v16[1]))return 1; {
    }
      }
  }
  return 0;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  BOOL v6 = a3 >= 0xFFFFFFFF00000000 || a5 == -1;
  uint64_t v7 = !v6;
  if (!v6)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    unint64_t v12 = __PAIR64__(HIDWORD(a6), HIDWORD(a4));
    char v13 = 0;
    *(_DWORD *)(a1 + 68) = a3;
    *(_DWORD *)(a1 + 72) = HIDWORD(a5);
    float v9 = NAN;
    if (*(float *)&a4 != -INFINITY && *(float *)&a6 != -INFINITY)
    {
      float v9 = INFINITY;
      if (*(float *)&a6 != INFINITY && *(float *)&a4 != INFINITY) {
        float v9 = *(float *)&a4 + *(float *)&a6;
      }
    }
    *(float *)(a1 + 76) = v9;
    *(_DWORD *)(a1 + 80) = fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(*(void **)(v8 + 176), (uint64_t *)&v12, 1);
  }
  return v7;
}

void fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CreateBase2<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>()
{
}

void sub_1B1C231C8(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComposeFstImplBase(a1, a2, a3, a4) = &unk_1F0A3AEA0;
  uint64_t v8 = *(long long **)(a4 + 40);
  if (!v8) {
    operator new();
  }
  *(void *)(a1 + 136) = v8;
  long long v9 = *v8;
  *(_OWORD *)(a1 + 144) = *v8;
  *(void *)(a1 + 160) = (*(uint64_t (**)(void))(**(void **)v9 + 32))();
  *(void *)(a1 + 168) = (*(uint64_t (**)(void))(***(void ***)(a1 + 152) + 32))(**(void **)(a1 + 152));
  uint64_t v10 = *(void *)(a4 + 48);
  if (!v10) {
    operator new();
  }
  *(void *)(a1 + 176) = v10;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetMatchType(a1);
  if (*(_DWORD *)(a1 + 184) == 3) {
    *(void *)(a1 + 8) |= 4uLL;
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a3 + 64))(a3, 0x3FFFFFFF0007, 0);
  unint64_t v13 = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 144) + 40))(**(void **)(a1 + 144), v11);
  uint64_t v14 = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 152) + 40))(**(void **)(a1 + 152), v12);
  *(void *)(a1 + 8) = *(void *)(a1 + 8) & 0xFFFFC0000000FFFFLL | fst::ComposeProperties(v13, v14) & 0x3FFFFFFF0004;
  return a1;
}

void sub_1B1C2344C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(void *a1)
{
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 160) + 64))(*(void *)(a1 + 160), 4, 0)|| (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 168) + 64))(*(void *)(a1 + 168), 4, 0)|| ((*(uint64_t (**)(void, void))(***(void ***)(a1 + 144) + 40))(**(void **)(a1 + 144), 0) & 4) != 0|| ((*(uint64_t (**)(void, void))(***(void ***)(a1 + 152) + 40))(**(void **)(a1 + 152), 0) & 4) != 0))
  {
    *(void *)(a1 + 8) |= 4uLL;
  }
  return *(void *)(a1 + 8) & a2;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy()
{
}

void sub_1B1C2366C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Expand(void *a1, int a2)
{
  uint64_t v4 = (unsigned int *)(*(void *)(a1[22] + 80) + 12 * a2);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  uint64_t v7 = a1[17];
  char v16 = *((unsigned char *)v4 + 8);
  fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(v7, v5, v6, &v16);
  if (fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput((uint64_t)a1, v5, v6))
  {
    uint64_t v9 = a1[20];
    uint64_t v8 = a1[21];
    uint64_t v10 = (void *)a1[19];
    uint64_t v11 = (uint64_t)a1;
    int v12 = a2;
    uint64_t v13 = v6;
    uint64_t v14 = v5;
    int v15 = 1;
  }
  else
  {
    uint64_t v8 = a1[20];
    uint64_t v9 = a1[21];
    uint64_t v10 = (void *)a1[18];
    uint64_t v11 = (uint64_t)a1;
    int v12 = a2;
    uint64_t v13 = v5;
    uint64_t v14 = v6;
    int v15 = 0;
  }
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(v11, v12, v8, v13, v9, v14, v10, v15);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::InitMatcher(uint64_t a1, uint64_t a2, int a3)
{
  if ((*(unsigned int (**)(void, void))(***(void ***)(a1 + 144) + 24))(**(void **)(a1 + 144), 0) == a3
    && (*(unsigned int (**)(void, void))(***(void ***)(a1 + 152) + 24))(**(void **)(a1 + 152), 0) == a3)
  {
    operator new();
  }
  return 0;
}

void sub_1B1C23820(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeStart(void **a1)
{
  uint64_t result = (*(uint64_t (**)(void *))(*a1[20] + 24))(a1[20]);
  if (result != -1)
  {
    unsigned int v3 = result;
    uint64_t result = (*(uint64_t (**)(void *))(*a1[21] + 24))(a1[21]);
    if (result != -1)
    {
      unint64_t v4 = __PAIR64__(result, v3);
      char v5 = 0;
      return fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(a1[22], (uint64_t *)&v4, 1);
    }
  }
  return result;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeFinal(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 176) + 80);
  char v5 = (int *)(v4 + 12 * a2);
  int v6 = *v5;
  float v7 = (*(float (**)(void, void))(***(void ***)(a1 + 144) + 96))(**(void **)(a1 + 144), *v5);
  float v11 = v7;
  if (v7 != INFINITY)
  {
    uint64_t v8 = v5[1];
    float v9 = (*(float (**)(void, uint64_t))(***(void ***)(a1 + 152) + 96))(**(void **)(a1 + 152), v8);
    float v11 = v9;
    if (v9 != INFINITY)
    {
      uint64_t v10 = *(void *)(a1 + 136);
      LOBYTE(v11) = *(unsigned char *)(v4 + 12 * a2 + 8);
      fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(v10, v6, v8, &v11);
    }
  }
}

uint64_t fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AltSequenceComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a4) {
    operator new();
  }
  *(void *)a1 = a4;
  if (!a5) {
    operator new();
  }
  *(void *)(a1 + 8) = a5;
  *(void *)(a1 + 16) = (*(uint64_t (**)(void))(**(void **)a5 + 32))();
  *(void *)(a1 + ++*(void *)(result + 24) = -1;
  *(unsigned char *)(a1 + 32) = -1;
  return a1;
}

void sub_1B1C23B40(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(void *a1)
{
  *a1 = &unk_1F0A3AEA0;
  uint64_t v2 = a1[17];
  if (v2)
  {
    uint64_t v3 = fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~SequenceComposeFilter(v2);
    MEMORY[0x1B3EA8670](v3, 0x1060C40AD892F49);
  }
  uint64_t v4 = a1[22];
  if (v4)
  {
    char v5 = *(void **)(v4 + 80);
    if (v5)
    {
      *(void *)(v4 + 88) = v5;
      operator delete(v5);
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v4 + 24);
    MEMORY[0x1B3EA8670](v4, 0x10E0C406D28CB5CLL);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl(uint64_t a1, uint64_t a2)
{
}

void sub_1B1C23D24(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AltSequenceComposeFilter()
{
}

BOOL fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a1 + 184);
  if (!v3) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v7 = (*(uint64_t (**)(void))(***(void ***)(a1 + 144) + 104))(**(void **)(a1 + 144));
  uint64_t v8 = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 152) + 104))(**(void **)(a1 + 152), a3);
  if (v7 == -1 && v8 == -1)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    float v11 = fst::LogMessage::LogMessage((fst *)&v15, (uint64_t)__p);
    int v12 = (void *)fst::cerr(v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ComposeFst: both sides can't require match", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v15);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    *(void *)(a1 + 8) |= 4uLL;
    return 1;
  }
  if (v7 == -1) {
    return 0;
  }
  return v8 == -1 || v7 <= v8;
}

void sub_1B1C23F58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, int a8)
{
  (*(void (**)(void, uint64_t))(*(void *)*a7 + 56))(*a7, a4);
  v18[0] = a8 - 1;
  v18[1] = a8 << 31 >> 31;
  uint64_t v18[2] = 0;
  v18[3] = a6;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, a7, v18, a8);
  unint64_t v17 = 0;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a5 + 136))(a5, a6, v15);
  while (1)
  {
    if (!v15[0])
    {
      if (v17 >= v15[2]) {
        goto LABEL_13;
      }
LABEL_7:
      char v14 = (unsigned int *)(v15[1] + 16 * v17);
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(void))(*(void *)v15[0] + 24))(v15[0])) {
      break;
    }
    if (!v15[0]) {
      goto LABEL_7;
    }
    char v14 = (unsigned int *)(*(uint64_t (**)(void))(*(void *)v15[0] + 32))();
LABEL_8:
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, a7, v14, a8);
    if (v15[0]) {
      (*(void (**)(void))(*(void *)v15[0] + 40))(v15[0]);
    }
    else {
      ++v17;
    }
  }
  if (v15[0])
  {
    (*(void (**)(void))(*(void *)v15[0] + 8))();
    goto LABEL_15;
  }
LABEL_13:
  if (v16) {
    --*v16;
  }
LABEL_15:
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(a1, a2);
}

void sub_1B1C24188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>();
  }
  else {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((uint64_t)&a10);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, int a2, void *a3, unsigned int *a4, int a5)
{
  uint64_t v10 = a4 + 1;
  if (!a5) {
    uint64_t v10 = a4;
  }
  uint64_t result = (*(uint64_t (**)(void, void))(*(void *)*a3 + 64))(*a3, *v10);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)*a3 + 72))();
    if ((result & 1) == 0)
    {
      do
      {
        long long v12 = *(_OWORD *)(*(uint64_t (**)(void))(*(void *)*a3 + 80))();
        long long v26 = *(_OWORD *)a4;
        long long v27 = v12;
        if (a5)
        {
          uint64_t v13 = *(unsigned __int8 **)(a1 + 136);
          if (v27 == -1)
          {
            if (!v13[33])
            {
              char v14 = v13[34] ^ 1;
LABEL_16:
              char v25 = v14;
LABEL_24:
              uint64_t v20 = (unsigned int *)&v26;
              unint64_t v21 = &v27;
              goto LABEL_30;
            }
          }
          else
          {
            if (DWORD1(v26) == -1)
            {
              int v17 = v13[32];
              BOOL v18 = v17 == 1;
              if (v17 == 1) {
                char v19 = -1;
              }
              else {
                char v19 = 0;
              }
              char v25 = v19;
              if (v18) {
                goto LABEL_31;
              }
              goto LABEL_24;
            }
            if (DWORD1(v26))
            {
              char v14 = 0;
              goto LABEL_16;
            }
          }
        }
        else
        {
          char v15 = *(unsigned __int8 **)(a1 + 136);
          if (v26 == -1)
          {
            if (!v15[33])
            {
              char v16 = v15[34] ^ 1;
LABEL_19:
              char v25 = v16;
LABEL_29:
              uint64_t v20 = (unsigned int *)&v27;
              unint64_t v21 = &v26;
LABEL_30:
              fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::AddArc(a1, a2, v20, (uint64_t)v21, &v25);
            }
          }
          else
          {
            if (DWORD1(v27) == -1)
            {
              int v22 = v15[32];
              BOOL v23 = v22 == 1;
              if (v22 == 1) {
                char v24 = -1;
              }
              else {
                char v24 = 0;
              }
              char v25 = v24;
              if (v23) {
                goto LABEL_31;
              }
              goto LABEL_29;
            }
            if (DWORD1(v27))
            {
              char v16 = 0;
              goto LABEL_19;
            }
          }
        }
LABEL_31:
        (*(void (**)(void))(*(void *)*a3 + 88))();
        uint64_t result = (*(uint64_t (**)(void))(*(void *)*a3 + 72))();
      }
      while (!result);
    }
  }
  return result;
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(void *)a1 = &unk_1F0A3CDE0;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + ++*(void *)(result + 24) = -1;
  *(_DWORD *)(a1 + 28) = a4;
  fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Copy();
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(void *a1)
{
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy()
{
}

void sub_1B1C244E8(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Type(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32));
  if (result != 3)
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2);
    if (result != 3)
    {
      if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) != 4|| (uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2), result != 4))
      {
        if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) == 4&& (*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2) == *(_DWORD *)(a1 + 28))
        {
          return 4;
        }
        else if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28)|| (uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2), result != 4))
        {
          if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28))return 3; {
          uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2);
          }
          if (result != *(_DWORD *)(a1 + 28)) {
            return 3;
          }
        }
      }
    }
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::GetFst(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 84)) {
    return a2 | 4;
  }
  else {
    return a2;
  }
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetState_(uint64_t result, int a2)
{
  if (*(_DWORD *)(result + 24) != a2)
  {
    uint64_t v2 = result;
    *(_DWORD *)(result + ++*(void *)(result + 24) = a2;
    int v3 = (unsigned int *)(*(void *)(*(void *)(*(void *)(result + 16) + 176) + 80) + 12 * a2);
    uint64_t v4 = v3[1];
    (*(void (**)(void, void))(***(void ***)(result + 32) + 56))(**(void **)(result + 32), *v3);
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(v2 + 40) + 56))(**(void **)(v2 + 40), v4);
    *(_DWORD *)(v2 + 64) = *(_DWORD *)(v2 + 24);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Find_(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 48) = a2 == 0;
  if (*(_DWORD *)(a1 + 28))
  {
    if (a2)
    {
      uint64_t v2 = (uint64_t *)(a1 + 40);
      int v3 = (void **)(a1 + 32);
      return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, *v2, *v3);
    }
  }
  else if (a2)
  {
    uint64_t v2 = (uint64_t *)(a1 + 32);
    int v3 = (void **)(a1 + 40);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, *v2, *v3);
  }
  return 1;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Done_(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48)
    || !(*(unsigned int (**)(void))(***(void ***)(a1 + 32) + 72))(**(void **)(a1 + 32)))
  {
    return 0;
  }
  uint64_t v2 = *(uint64_t (**)(void))(***(void ***)(a1 + 40) + 72);
  return v2();
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Value_(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48)) {
    return a1 + 52;
  }
  else {
    return a1 + 68;
  }
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Next_(uint64_t result)
{
  if (*(unsigned char *)(result + 48))
  {
    *(unsigned char *)(result + 48) = 0;
  }
  else
  {
    if (*(_DWORD *)(result + 28))
    {
      uint64_t v2 = *(void **)(result + 32);
      uint64_t v1 = *(void *)(result + 40);
    }
    else
    {
      uint64_t v1 = *(void *)(result + 32);
      uint64_t v2 = *(void **)(result + 40);
    }
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(result, v1, v2);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Priority_(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))();
}

void *fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(void *a1)
{
  *a1 = &unk_1F0A3CDE0;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    MEMORY[0x1B3EA8670](v2, 0x20C4093837F09);
  }
  int v3 = (void *)a1[5];
  if (v3)
  {
    if (*v3) {
      (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
    }
    MEMORY[0x1B3EA8670](v3, 0x20C4093837F09);
  }
  return a1;
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A3CDE0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + ++*(void *)(result + 24) = -1;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Copy();
}

void sub_1B1C24BB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a3 + 64))();
  if (result)
  {
    int v8 = *(_DWORD *)(a1 + 28);
    uint64_t v9 = (*(uint64_t (**)(void))(**(void **)a3 + 80))();
    uint64_t v10 = (unsigned int *)(v9 + 4);
    if (v8) {
      uint64_t v10 = (unsigned int *)v9;
    }
    (*(void (**)(void, void))(*(void *)*a4 + 64))(*a4, *v10);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a3, a4);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, void *a3)
{
  while (!(*(unsigned int (**)(void))(**(void **)a2 + 72))()
       || ((*(uint64_t (**)(void))(*(void *)*a3 + 72))() & 1) == 0)
  {
    if ((*(unsigned int (**)(void))(*(void *)*a3 + 72))())
    {
      (*(void (**)(void))(**(void **)a2 + 88))();
      if (((*(uint64_t (**)(void))(**(void **)a2 + 72))() & 1) == 0)
      {
        do
        {
          int v6 = *(_DWORD *)(a1 + 28);
          uint64_t v7 = (*(uint64_t (**)(void))(**(void **)a2 + 80))();
          int v8 = (unsigned int *)(v7 + 4);
          if (v6) {
            int v8 = (unsigned int *)v7;
          }
          if ((*(uint64_t (**)(void, void))(*(void *)*a3 + 64))(*a3, *v8)) {
            break;
          }
          (*(void (**)(void))(**(void **)a2 + 88))();
        }
        while (!(*(unsigned int (**)(void))(**(void **)a2 + 72))());
      }
    }
    while (((*(uint64_t (**)(void))(*(void *)*a3 + 72))() & 1) == 0)
    {
      uint64_t v9 = (*(uint64_t (**)(void))(**(void **)a2 + 80))();
      uint64_t v10 = (*(uint64_t (**)(void))(*(void *)*a3 + 80))();
      (*(void (**)(void))(*(void *)*a3 + 88))();
      int v11 = *(_DWORD *)(a1 + 28);
      BOOL v12 = v11 == 0;
      if (v11) {
        uint64_t v13 = (uint64_t *)v10;
      }
      else {
        uint64_t v13 = (uint64_t *)v9;
      }
      uint64_t v14 = *v13;
      uint64_t v15 = v13[1];
      if (v12) {
        char v16 = (uint64_t *)v10;
      }
      else {
        char v16 = (uint64_t *)v9;
      }
      if (fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc(a1, *(unsigned int *)(a1 + 24), v14, v15, *v16, v16[1]))return 1; {
    }
      }
  }
  return 0;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(unsigned char **)(v6 + 136);
  if (a5 != -1)
  {
    if (HIDWORD(a3))
    {
      char v8 = 0;
      if (HIDWORD(a3) == -1)
      {
        char v8 = 0;
        uint64_t v9 = 0;
        if (v7[32] == 1) {
          return v9;
        }
      }
      goto LABEL_7;
    }
    return 0;
  }
  if (v7[33]) {
    return 0;
  }
  char v8 = v7[34] ^ 1;
LABEL_7:
  unint64_t v13 = __PAIR64__(HIDWORD(a6), HIDWORD(a4));
  char v14 = v8;
  *(_DWORD *)(a1 + 68) = a3;
  *(_DWORD *)(a1 + 72) = HIDWORD(a5);
  float v10 = NAN;
  if (*(float *)&a4 != -INFINITY && *(float *)&a6 != -INFINITY)
  {
    float v10 = INFINITY;
    if (*(float *)&a6 != INFINITY && *(float *)&a4 != INFINITY) {
      float v10 = *(float *)&a4 + *(float *)&a6;
    }
  }
  *(float *)(a1 + 76) = v10;
  uint64_t v9 = 1;
  *(_DWORD *)(a1 + 80) = fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(*(void **)(v6 + 176), (uint64_t *)&v13, 1);
  return v9;
}

void fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CreateBase2<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>()
{
}

void sub_1B1C250E8(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComposeFstImplBase(a1, a2, a3, a4) = &unk_1F0A3ABA0;
  char v8 = *(long long **)(a4 + 40);
  if (!v8) {
    operator new();
  }
  *(void *)(a1 + 136) = v8;
  long long v9 = *v8;
  *(_OWORD *)(a1 + 144) = *v8;
  *(void *)(a1 + 160) = (*(uint64_t (**)(void))(**(void **)v9 + 32))();
  *(void *)(a1 + 168) = (*(uint64_t (**)(void))(***(void ***)(a1 + 152) + 32))(**(void **)(a1 + 152));
  uint64_t v10 = *(void *)(a4 + 48);
  if (!v10) {
    operator new();
  }
  *(void *)(a1 + 176) = v10;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetMatchType(a1);
  if (*(_DWORD *)(a1 + 184) == 3) {
    *(void *)(a1 + 8) |= 4uLL;
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a3 + 64))(a3, 0x3FFFFFFF0007, 0);
  unint64_t v13 = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 144) + 40))(**(void **)(a1 + 144), v11);
  uint64_t v14 = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 152) + 40))(**(void **)(a1 + 152), v12);
  *(void *)(a1 + 8) = *(void *)(a1 + 8) & 0xFFFFC0000000FFFFLL | fst::ComposeProperties(v13, v14) & 0x3FFFFFFF0004;
  return a1;
}

void sub_1B1C2536C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(void *a1)
{
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 160) + 64))(*(void *)(a1 + 160), 4, 0)|| (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 168) + 64))(*(void *)(a1 + 168), 4, 0)|| ((*(uint64_t (**)(void, void))(***(void ***)(a1 + 144) + 40))(**(void **)(a1 + 144), 0) & 4) != 0|| ((*(uint64_t (**)(void, void))(***(void ***)(a1 + 152) + 40))(**(void **)(a1 + 152), 0) & 4) != 0))
  {
    *(void *)(a1 + 8) |= 4uLL;
  }
  return *(void *)(a1 + 8) & a2;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy()
{
}

void sub_1B1C2558C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Expand(void *a1, int a2)
{
  uint64_t v4 = (unsigned int *)(*(void *)(a1[22] + 80) + 12 * a2);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  uint64_t v7 = a1[17];
  char v16 = *((unsigned char *)v4 + 8);
  fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(v7, v5, v6, &v16);
  if (fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput((uint64_t)a1, v5, v6))
  {
    uint64_t v9 = a1[20];
    uint64_t v8 = a1[21];
    uint64_t v10 = (void *)a1[19];
    uint64_t v11 = (uint64_t)a1;
    int v12 = a2;
    uint64_t v13 = v6;
    uint64_t v14 = v5;
    int v15 = 1;
  }
  else
  {
    uint64_t v8 = a1[20];
    uint64_t v9 = a1[21];
    uint64_t v10 = (void *)a1[18];
    uint64_t v11 = (uint64_t)a1;
    int v12 = a2;
    uint64_t v13 = v5;
    uint64_t v14 = v6;
    int v15 = 0;
  }
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(v11, v12, v8, v13, v9, v14, v10, v15);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::InitMatcher(uint64_t a1, uint64_t a2, int a3)
{
  if ((*(unsigned int (**)(void, void))(***(void ***)(a1 + 144) + 24))(**(void **)(a1 + 144), 0) == a3
    && (*(unsigned int (**)(void, void))(***(void ***)(a1 + 152) + 24))(**(void **)(a1 + 152), 0) == a3)
  {
    operator new();
  }
  return 0;
}

void sub_1B1C25740(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeStart(void **a1)
{
  uint64_t result = (*(uint64_t (**)(void *))(*a1[20] + 24))(a1[20]);
  if (result != -1)
  {
    unsigned int v3 = result;
    uint64_t result = (*(uint64_t (**)(void *))(*a1[21] + 24))(a1[21]);
    if (result != -1)
    {
      unint64_t v4 = __PAIR64__(result, v3);
      char v5 = 0;
      return fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(a1[22], (uint64_t *)&v4, 1);
    }
  }
  return result;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeFinal(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 176) + 80);
  char v5 = (unsigned int *)(v4 + 12 * a2);
  uint64_t v6 = *v5;
  float v10 = (*(float (**)(void, uint64_t))(***(void ***)(a1 + 144) + 96))(**(void **)(a1 + 144), v6);
  if (v10 != INFINITY)
  {
    uint64_t v7 = v5[1];
    float v8 = (*(float (**)(void, uint64_t))(***(void ***)(a1 + 152) + 96))(**(void **)(a1 + 152), v7);
    float v10 = v8;
    if (v8 != INFINITY)
    {
      uint64_t v9 = *(void *)(a1 + 136);
      LOBYTE(v10) = *(unsigned char *)(v4 + 12 * a2 + 8);
      fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(v9, v6, v7, &v10);
    }
  }
}

uint64_t fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::MatchComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a4) {
    operator new();
  }
  *(void *)a1 = a4;
  if (!a5) {
    operator new();
  }
  *(void *)(a1 + 8) = a5;
  *(void *)(a1 + 16) = (*(uint64_t (**)(void))(**(void **)a4 + 32))();
  *(void *)(a1 + ++*(void *)(result + 24) = (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 32))(**(void **)(a1 + 8));
  *(void *)(a1 + 32) = -1;
  *(unsigned char *)(a1 + 40) = -1;
  return a1;
}

void sub_1B1C25A90(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(void *a1)
{
  *a1 = &unk_1F0A3ABA0;
  uint64_t v2 = a1[17];
  if (v2)
  {
    uint64_t v3 = fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~SequenceComposeFilter(v2);
    MEMORY[0x1B3EA8670](v3, 0x1060C4035244DBALL);
  }
  uint64_t v4 = a1[22];
  if (v4)
  {
    char v5 = *(void **)(v4 + 80);
    if (v5)
    {
      *(void *)(v4 + 88) = v5;
      operator delete(v5);
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v4 + 24);
    MEMORY[0x1B3EA8670](v4, 0x10E0C406D28CB5CLL);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl(uint64_t a1, uint64_t a2)
{
}

void sub_1B1C25C7C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::MatchComposeFilter()
{
}

void fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  if (*(_DWORD *)(a1 + 32) != a2 || *(_DWORD *)(a1 + 36) != a3 || *a4 != *(unsigned char *)(a1 + 40))
  {
    *(_DWORD *)(a1 + 32) = a2;
    *(_DWORD *)(a1 + 36) = a3;
    *(unsigned char *)(a1 + 40) = *a4;
    uint64_t v7 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16), a2);
    uint64_t v8 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 56))(*(void *)(a1 + 16), a2);
    BOOL v10 = (*(float (**)(void, uint64_t))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), a2) == INFINITY
       && v7 == v8;
    *(unsigned char *)(a1 + 41) = v10;
    *(unsigned char *)(a1 + 43) = v8 == 0;
    uint64_t v11 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a3);
    uint64_t v12 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 48))(*(void *)(a1 + 24), a3);
    BOOL v14 = (*(float (**)(void, uint64_t))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24), a3) == INFINITY
       && v11 == v12;
    *(unsigned char *)(a1 + 42) = v14;
    *(unsigned char *)(a1 + 44) = v12 == 0;
  }
}

BOOL fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a1 + 184);
  if (!v3) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v7 = (*(uint64_t (**)(void))(***(void ***)(a1 + 144) + 104))(**(void **)(a1 + 144));
  uint64_t v8 = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 152) + 104))(**(void **)(a1 + 152), a3);
  if (v7 == -1 && v8 == -1)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    uint64_t v11 = fst::LogMessage::LogMessage((fst *)&v15, (uint64_t)__p);
    uint64_t v12 = (void *)fst::cerr(v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ComposeFst: both sides can't require match", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v15);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    *(void *)(a1 + 8) |= 4uLL;
    return 1;
  }
  if (v7 == -1) {
    return 0;
  }
  return v8 == -1 || v7 <= v8;
}

void sub_1B1C260DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, int a8)
{
  (*(void (**)(void, uint64_t))(*(void *)*a7 + 56))(*a7, a4);
  v18[0] = a8 - 1;
  v18[1] = a8 << 31 >> 31;
  uint64_t v18[2] = 0;
  v18[3] = a6;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, a7, v18, a8);
  unint64_t v17 = 0;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a5 + 136))(a5, a6, v15);
  while (1)
  {
    if (!v15[0])
    {
      if (v17 >= v15[2]) {
        goto LABEL_13;
      }
LABEL_7:
      char v14 = (unsigned int *)(v15[1] + 16 * v17);
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(void))(*(void *)v15[0] + 24))(v15[0])) {
      break;
    }
    if (!v15[0]) {
      goto LABEL_7;
    }
    char v14 = (unsigned int *)(*(uint64_t (**)(void))(*(void *)v15[0] + 32))();
LABEL_8:
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, a7, v14, a8);
    if (v15[0]) {
      (*(void (**)(void))(*(void *)v15[0] + 40))(v15[0]);
    }
    else {
      ++v17;
    }
  }
  if (v15[0])
  {
    (*(void (**)(void))(*(void *)v15[0] + 8))();
    goto LABEL_15;
  }
LABEL_13:
  if (v16) {
    --*v16;
  }
LABEL_15:
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(a1, a2);
}

void sub_1B1C2630C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>();
  }
  else {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((uint64_t)&a10);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, int a2, void *a3, unsigned int *a4, int a5)
{
  BOOL v10 = a4 + 1;
  if (!a5) {
    BOOL v10 = a4;
  }
  uint64_t result = (*(uint64_t (**)(void, void))(*(void *)*a3 + 64))(*a3, *v10);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)*a3 + 72))();
    if ((result & 1) == 0)
    {
      do
      {
        long long v12 = *(_OWORD *)(*(uint64_t (**)(void))(*(void *)*a3 + 80))();
        long long v16 = *(_OWORD *)a4;
        long long v17 = v12;
        if (a5)
        {
          char v15 = fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::FilterArc(*(unsigned __int8 **)(a1 + 136), (uint64_t)&v16, &v17);
          if (v15 != -1)
          {
            uint64_t v13 = (unsigned int *)&v16;
            char v14 = &v17;
LABEL_10:
            fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::AddArc(a1, a2, v13, (uint64_t)v14, &v15);
          }
        }
        else
        {
          char v15 = fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::FilterArc(*(unsigned __int8 **)(a1 + 136), (uint64_t)&v17, &v16);
          if (v15 != -1)
          {
            uint64_t v13 = (unsigned int *)&v17;
            char v14 = &v16;
            goto LABEL_10;
          }
        }
        (*(void (**)(void))(*(void *)*a3 + 88))();
        uint64_t result = (*(uint64_t (**)(void))(*(void *)*a3 + 72))();
      }
      while (!result);
    }
  }
  return result;
}

uint64_t fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::FilterArc(unsigned __int8 *a1, uint64_t a2, _DWORD *a3)
{
  if (*a3 == -1)
  {
    uint64_t result = a1[40];
    if (result == 1) {
      return result;
    }
    if (result) {
      return 255;
    }
    if (a1[44]) {
      return 0;
    }
    if (a1[42]) {
      return 0xFFFFFFFFLL;
    }
    else {
      return 1;
    }
  }
  else
  {
    int v4 = *(_DWORD *)(a2 + 4);
    if (v4)
    {
      if (v4 != -1) {
        return 0;
      }
      uint64_t result = a1[40];
      if (result == 2) {
        return result;
      }
      if (!result)
      {
        if (!a1[43])
        {
          if (a1[41]) {
            return 0xFFFFFFFFLL;
          }
          else {
            return 2;
          }
        }
        return 0;
      }
      return 255;
    }
    if (a1[40]) {
      return 0xFFFFFFFFLL;
    }
    else {
      return 0;
    }
  }
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(void *)a1 = &unk_1F0A3CAE0;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + ++*(void *)(result + 24) = -1;
  *(_DWORD *)(a1 + 28) = a4;
  fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Copy();
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(void *a1)
{
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy()
{
}

void sub_1B1C26698(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Type(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32));
  if (result != 3)
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2);
    if (result != 3)
    {
      if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) != 4|| (uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2), result != 4))
      {
        if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) == 4&& (*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2) == *(_DWORD *)(a1 + 28))
        {
          return 4;
        }
        else if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28)|| (uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2), result != 4))
        {
          if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28))return 3; {
          uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2);
          }
          if (result != *(_DWORD *)(a1 + 28)) {
            return 3;
          }
        }
      }
    }
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::GetFst(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 84)) {
    return a2 | 4;
  }
  else {
    return a2;
  }
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetState_(uint64_t result, int a2)
{
  if (*(_DWORD *)(result + 24) != a2)
  {
    uint64_t v2 = result;
    *(_DWORD *)(result + ++*(void *)(result + 24) = a2;
    int v3 = (unsigned int *)(*(void *)(*(void *)(*(void *)(result + 16) + 176) + 80) + 12 * a2);
    uint64_t v4 = v3[1];
    (*(void (**)(void, void))(***(void ***)(result + 32) + 56))(**(void **)(result + 32), *v3);
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(v2 + 40) + 56))(**(void **)(v2 + 40), v4);
    *(_DWORD *)(v2 + 64) = *(_DWORD *)(v2 + 24);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Find_(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 48) = a2 == 0;
  if (*(_DWORD *)(a1 + 28))
  {
    if (a2)
    {
      uint64_t v2 = (uint64_t *)(a1 + 40);
      int v3 = (void **)(a1 + 32);
      return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, *v2, *v3);
    }
  }
  else if (a2)
  {
    uint64_t v2 = (uint64_t *)(a1 + 32);
    int v3 = (void **)(a1 + 40);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, *v2, *v3);
  }
  return 1;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Done_(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48)
    || !(*(unsigned int (**)(void))(***(void ***)(a1 + 32) + 72))(**(void **)(a1 + 32)))
  {
    return 0;
  }
  uint64_t v2 = *(uint64_t (**)(void))(***(void ***)(a1 + 40) + 72);
  return v2();
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Value_(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48)) {
    return a1 + 52;
  }
  else {
    return a1 + 68;
  }
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Next_(uint64_t result)
{
  if (*(unsigned char *)(result + 48))
  {
    *(unsigned char *)(result + 48) = 0;
  }
  else
  {
    if (*(_DWORD *)(result + 28))
    {
      uint64_t v2 = *(void **)(result + 32);
      uint64_t v1 = *(void *)(result + 40);
    }
    else
    {
      uint64_t v1 = *(void *)(result + 32);
      uint64_t v2 = *(void **)(result + 40);
    }
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(result, v1, v2);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Priority_(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))();
}

void *fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(void *a1)
{
  *a1 = &unk_1F0A3CAE0;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    MEMORY[0x1B3EA8670](v2, 0x20C4093837F09);
  }
  int v3 = (void *)a1[5];
  if (v3)
  {
    if (*v3) {
      (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
    }
    MEMORY[0x1B3EA8670](v3, 0x20C4093837F09);
  }
  return a1;
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A3CAE0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + ++*(void *)(result + 24) = -1;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Copy();
}

void sub_1B1C26D64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a3 + 64))();
  if (result)
  {
    int v8 = *(_DWORD *)(a1 + 28);
    uint64_t v9 = (*(uint64_t (**)(void))(**(void **)a3 + 80))();
    BOOL v10 = (unsigned int *)(v9 + 4);
    if (v8) {
      BOOL v10 = (unsigned int *)v9;
    }
    (*(void (**)(void, void))(*(void *)*a4 + 64))(*a4, *v10);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a3, a4);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, void *a3)
{
  while (!(*(unsigned int (**)(void))(**(void **)a2 + 72))()
       || ((*(uint64_t (**)(void))(*(void *)*a3 + 72))() & 1) == 0)
  {
    if ((*(unsigned int (**)(void))(*(void *)*a3 + 72))())
    {
      (*(void (**)(void))(**(void **)a2 + 88))();
      if (((*(uint64_t (**)(void))(**(void **)a2 + 72))() & 1) == 0)
      {
        do
        {
          int v6 = *(_DWORD *)(a1 + 28);
          uint64_t v7 = (*(uint64_t (**)(void))(**(void **)a2 + 80))();
          int v8 = (unsigned int *)(v7 + 4);
          if (v6) {
            int v8 = (unsigned int *)v7;
          }
          if ((*(uint64_t (**)(void, void))(*(void *)*a3 + 64))(*a3, *v8)) {
            break;
          }
          (*(void (**)(void))(**(void **)a2 + 88))();
        }
        while (!(*(unsigned int (**)(void))(**(void **)a2 + 72))());
      }
    }
    while (((*(uint64_t (**)(void))(*(void *)*a3 + 72))() & 1) == 0)
    {
      uint64_t v9 = (*(uint64_t (**)(void))(**(void **)a2 + 80))();
      uint64_t v10 = (*(uint64_t (**)(void))(*(void *)*a3 + 80))();
      (*(void (**)(void))(*(void *)*a3 + 88))();
      int v11 = *(_DWORD *)(a1 + 28);
      BOOL v12 = v11 == 0;
      if (v11) {
        uint64_t v13 = (uint64_t *)v10;
      }
      else {
        uint64_t v13 = (uint64_t *)v9;
      }
      uint64_t v14 = *v13;
      uint64_t v15 = v13[1];
      if (v12) {
        long long v16 = (uint64_t *)v10;
      }
      else {
        long long v16 = (uint64_t *)v9;
      }
      if (fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc(a1, *(unsigned int *)(a1 + 24), v14, v15, *v16, v16[1]))
      {
        return 1;
      }
    }
  }
  return 0;
}

BOOL fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v15 = a5;
  uint64_t v16 = a6;
  char v7 = fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::FilterArc(*(unsigned __int8 **)(*(void *)(a1 + 16) + 136), (uint64_t)&v17, &v15);
  char v8 = v7;
  if (v7 != -1)
  {
    int v9 = HIDWORD(v15);
    unint64_t v13 = __PAIR64__(HIDWORD(v16), HIDWORD(v18));
    char v14 = v7;
    *(_DWORD *)(a1 + 68) = v17;
    *(_DWORD *)(a1 + 72) = v9;
    float v10 = NAN;
    if (*(float *)&v18 != -INFINITY)
    {
      float v10 = NAN;
      if (*(float *)&v16 != -INFINITY)
      {
        float v10 = INFINITY;
        if (*(float *)&v16 != INFINITY && *(float *)&v18 != INFINITY) {
          float v10 = *(float *)&v18 + *(float *)&v16;
        }
      }
    }
    *(float *)(a1 + 76) = v10;
    *(_DWORD *)(a1 + 80) = fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(*(void **)(*(void *)(a1 + 16) + 176), (uint64_t *)&v13, 1);
  }
  return ~v8 != 0;
}

std::string *std::vector<quasar::Token>::__append(uint64_t *a1, unint64_t a2, quasar::Token *a3)
{
  uint64_t v8 = a1[2];
  uint64_t result = (std::string *)(a1 + 2);
  uint64_t v7 = v8;
  int v9 = (std::string *)result[-1].__r_.__value_.__r.__words[2];
  if (0x6DB6DB6DB6DB6DB7 * ((v8 - (uint64_t)v9) >> 5) >= a2)
  {
    if (a2)
    {
      uint64_t v15 = (std::string *)((char *)v9 + 224 * a2);
      uint64_t v16 = 224 * a2;
      do
      {
        uint64_t result = quasar::Token::Token(v9, a3);
        int v9 = (std::string *)((char *)v9 + 224);
        v16 -= 224;
      }
      while (v16);
      int v9 = v15;
    }
    a1[1] = (uint64_t)v9;
  }
  else
  {
    uint64_t v10 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v9 - *a1) >> 5);
    unint64_t v11 = v10 + a2;
    if (v10 + a2 > 0x124924924924924) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = 0x6DB6DB6DB6DB6DB7 * ((v7 - *a1) >> 5);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x92492492492492) {
      unint64_t v13 = 0x124924924924924;
    }
    else {
      unint64_t v13 = v11;
    }
    BOOL v23 = result;
    if (v13) {
      char v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::Token>>((uint64_t)result, v13);
    }
    else {
      char v14 = 0;
    }
    uint64_t v17 = (std::string *)&v14[224 * v10];
    v20[0] = v14;
    v20[1] = v17;
    unint64_t v21 = v17;
    int v22 = &v14[224 * v13];
    uint64_t v18 = 224 * a2;
    char v19 = (std::string *)((char *)v17 + 224 * a2);
    do
    {
      quasar::Token::Token(v17, a3);
      uint64_t v17 = (std::string *)((char *)v17 + 224);
      v18 -= 224;
    }
    while (v18);
    unint64_t v21 = v19;
    std::vector<quasar::Token>::__swap_out_circular_buffer(a1, v20);
    return (std::string *)std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)v20);
  }
  return result;
}

void sub_1B1C273A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void **std::vector<std::shared_ptr<quasar::CommandTransform>>::__append(uint64_t *a1, unint64_t a2, void *a3)
{
  uint64_t v8 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  uint64_t v7 = v8;
  int v9 = *(result - 1);
  if (a2 <= (v8 - (uint64_t)v9) >> 4)
  {
    if (a2)
    {
      uint64_t v16 = &v9[2 * a2];
      do
      {
        *int v9 = *a3;
        uint64_t v17 = a3[1];
        v9[1] = v17;
        if (v17) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
        }
        v9 += 2;
      }
      while (v9 != v16);
      int v9 = v16;
    }
    a1[1] = (uint64_t)v9;
  }
  else
  {
    uint64_t v10 = (uint64_t)v9 - *a1;
    unint64_t v11 = a2 + (v10 >> 4);
    if (v11 >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v10 >> 4;
    uint64_t v13 = v7 - *a1;
    if (v13 >> 3 > v11) {
      unint64_t v11 = v13 >> 3;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v11;
    }
    v21[4] = result;
    if (v14) {
      uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)result, v14);
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v18 = &v15[16 * v12];
    v21[0] = v15;
    v21[1] = v18;
    void v21[3] = &v15[16 * v14];
    char v19 = &v18[16 * a2];
    do
    {
      *(void *)uint64_t v18 = *a3;
      uint64_t v20 = a3[1];
      *((void *)v18 + 1) = v20;
      if (v20) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
      }
      v18 += 16;
    }
    while (v18 != v19);
    v21[2] = v19;
    std::vector<std::shared_ptr<quasar::CommandTransform>>::__swap_out_circular_buffer(a1, v21);
    return std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer(v21);
  }
  return result;
}

void sub_1B1C2750C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<quasar::CommandTransform>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<quasar::CommandTransform>>,std::reverse_iterator<std::shared_ptr<quasar::CommandTransform>*>,std::reverse_iterator<std::shared_ptr<quasar::CommandTransform>*>,std::reverse_iterator<std::shared_ptr<quasar::CommandTransform>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<quasar::CommandTransform>>,std::reverse_iterator<std::shared_ptr<quasar::CommandTransform>*>,std::reverse_iterator<std::shared_ptr<quasar::CommandTransform>*>,std::reverse_iterator<std::shared_ptr<quasar::CommandTransform>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::CommandTransform>>,std::reverse_iterator<std::shared_ptr<quasar::CommandTransform>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::CommandTransform>>,std::reverse_iterator<std::shared_ptr<quasar::CommandTransform>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::FeatureExtractor>>,std::reverse_iterator<std::shared_ptr<quasar::FeatureExtractor>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void *std::vector<quasar::Token>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<quasar::Token>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (quasar::Token *)a1[1];
    uint64_t v5 = 224 * a2;
    uint64_t v6 = (char *)v4 + 224 * a2;
    do
    {
      quasar::Token::Token(v4);
      uint64_t v4 = (quasar::Token *)((char *)v4 + 224);
      v5 -= 224;
    }
    while (v5);
    a1[1] = v6;
  }
  return a1;
}

void sub_1B1C276E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

std::basic_string<char32_t> *__cdecl std::basic_string<char32_t>::basic_string(std::basic_string<char32_t> *this, const std::basic_string<char32_t> *__str, std::basic_string<char32_t>::size_type __pos, std::basic_string<char32_t>::size_type __n, std::allocator<char32_t> *__a)
{
  uint64_t v6 = __str;
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
  {
    std::basic_string<char32_t>::size_type size = __str->__r_.__value_.__l.__size_;
    if (size < __pos) {
      goto LABEL_18;
    }
    uint64_t v6 = (const std::basic_string<char32_t> *)__str->__r_.__value_.__r.__words[0];
  }
  else
  {
    std::basic_string<char32_t>::size_type size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    if (size < __pos) {
LABEL_18:
    }
      std::string::__throw_out_of_range[abi:ne180100]();
  }
  std::basic_string<char32_t>::size_type v9 = size - __pos;
  if (v9 >= __n) {
    std::basic_string<char32_t>::size_type v10 = __n;
  }
  else {
    std::basic_string<char32_t>::size_type v10 = v9;
  }
  if (v10 >= 0x3FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v10 >= 5)
  {
    uint64_t v12 = (v10 & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((v10 | 1) != 5) {
      uint64_t v12 = v10 | 1;
    }
    unint64_t v11 = std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this, v12 + 1);
    this->__r_.__value_.__l.__size_ = v10;
    this->__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
    this->__r_.__value_.__r.__words[0] = (std::basic_string<char32_t>::size_type)v11;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = v10;
    unint64_t v11 = this;
    if (!v10) {
      goto LABEL_17;
    }
  }
  memmove(v11, (char *)v6 + 4 * __pos, 4 * v10);
LABEL_17:
  *((_DWORD *)v11 + v10) = 0;
  return this;
}

uint64_t std::vector<quasar::Token>::__emplace_back_slow_path<std::string,int,int,int,int,BOOL,BOOL &>(uint64_t *a1, uint64_t a2, int *a3, int *a4, int *a5, int *a6, unsigned __int8 *a7, unsigned __int8 *a8)
{
  uint64_t v9 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5);
  unint64_t v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) > 0x124924924924924) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 5) > v10) {
    unint64_t v10 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 5);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 5)) >= 0x92492492492492) {
    unint64_t v18 = 0x124924924924924;
  }
  else {
    unint64_t v18 = v10;
  }
  long long v26 = a1 + 2;
  if (v18) {
    char v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::Token>>((uint64_t)(a1 + 2), v18);
  }
  else {
    char v19 = 0;
  }
  int v22 = v19;
  BOOL v23 = (std::string *)&v19[224 * v9];
  char v25 = &v19[224 * v18];
  std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,std::string,int,int,int,int,BOOL,BOOL &>((uint64_t)(a1 + 2), v23, a2, a3, a4, a5, a6, a7, a8);
  char v24 = &v23[9].__r_.__value_.__s.__data_[8];
  std::vector<quasar::Token>::__swap_out_circular_buffer(a1, &v22);
  uint64_t v20 = a1[1];
  std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)&v22);
  return v20;
}

void sub_1B1C27944(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,std::string,int,int,int,int,BOOL,BOOL &>(uint64_t a1, std::string *a2, uint64_t a3, int *a4, int *a5, int *a6, int *a7, unsigned __int8 *a8, unsigned __int8 *a9)
{
  long long v23 = *(_OWORD *)a3;
  uint64_t v24 = *(void *)(a3 + 16);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  int v10 = *a4;
  int v11 = *a5;
  int v12 = *a6;
  int v13 = *a7;
  int v14 = *a8;
  int v15 = *a9;
  std::string::basic_string[abi:ne180100]<0>(v21, "");
  std::string::basic_string[abi:ne180100]<0>(v19, "");
  memset(v18, 0, sizeof(v18));
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  quasar::Token::Token(a2, &v23, v10, v11, v12, v14 != 0, v15 != 0, (long long *)v21, (float)v13, (long long *)v19, v18, 0, (long long *)__p, 0, 0);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  __p[0] = v18;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (v20 < 0) {
    operator delete(v19[0]);
  }
  if (v22 < 0) {
    operator delete(v21[0]);
  }
  if (SHIBYTE(v24) < 0) {
    operator delete((void *)v23);
  }
}

void sub_1B1C27AA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  std::basic_string<char32_t> __p = &a21;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (a29 < 0) {
    operator delete(a24);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (*(char *)(v35 - 89) < 0) {
    operator delete(*(void **)(v35 - 112));
  }
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::Token>::__emplace_back_slow_path<quasar::Token&>(uint64_t *a1, const quasar::Token *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x124924924924924) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x92492492492492) {
    unint64_t v9 = 0x124924924924924;
  }
  else {
    unint64_t v9 = v5;
  }
  char v17 = a1 + 2;
  if (v9) {
    int v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::Token>>(v7, v9);
  }
  else {
    int v10 = 0;
  }
  int v13 = v10;
  int v14 = (std::string *)&v10[224 * v4];
  uint64_t v16 = &v10[224 * v9];
  quasar::Token::Token(v14, a2);
  int v15 = &v14[9].__r_.__value_.__s.__data_[8];
  std::vector<quasar::Token>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1B1C27C28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::Token>::__emplace_back_slow_path<std::string,int,int,int,int,BOOL &,BOOL>(uint64_t *a1, uint64_t a2, int *a3, int *a4, int *a5, int *a6, unsigned __int8 *a7, unsigned __int8 *a8)
{
  uint64_t v9 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5);
  unint64_t v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) > 0x124924924924924) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 5) > v10) {
    unint64_t v10 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 5);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 5)) >= 0x92492492492492) {
    unint64_t v18 = 0x124924924924924;
  }
  else {
    unint64_t v18 = v10;
  }
  long long v26 = a1 + 2;
  if (v18) {
    char v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::Token>>((uint64_t)(a1 + 2), v18);
  }
  else {
    char v19 = 0;
  }
  char v22 = v19;
  long long v23 = (std::string *)&v19[224 * v9];
  char v25 = &v19[224 * v18];
  std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,std::string,int,int,int,int,BOOL &,BOOL>((uint64_t)(a1 + 2), v23, a2, a3, a4, a5, a6, a7, a8);
  uint64_t v24 = &v23[9].__r_.__value_.__s.__data_[8];
  std::vector<quasar::Token>::__swap_out_circular_buffer(a1, &v22);
  uint64_t v20 = a1[1];
  std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)&v22);
  return v20;
}

void sub_1B1C27D98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,std::string,int,int,int,int,BOOL &,BOOL>(uint64_t a1, std::string *a2, uint64_t a3, int *a4, int *a5, int *a6, int *a7, unsigned __int8 *a8, unsigned __int8 *a9)
{
  long long v23 = *(_OWORD *)a3;
  uint64_t v24 = *(void *)(a3 + 16);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  int v10 = *a4;
  int v11 = *a5;
  int v12 = *a6;
  int v13 = *a7;
  int v14 = *a8;
  int v15 = *a9;
  std::string::basic_string[abi:ne180100]<0>(v21, "");
  std::string::basic_string[abi:ne180100]<0>(v19, "");
  memset(v18, 0, sizeof(v18));
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  quasar::Token::Token(a2, &v23, v10, v11, v12, v14 != 0, v15 != 0, (long long *)v21, (float)v13, (long long *)v19, v18, 0, (long long *)__p, 0, 0);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  __p[0] = v18;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (v20 < 0) {
    operator delete(v19[0]);
  }
  if (v22 < 0) {
    operator delete(v21[0]);
  }
  if (SHIBYTE(v24) < 0) {
    operator delete((void *)v23);
  }
}

void sub_1B1C27EFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  std::basic_string<char32_t> __p = &a21;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (a29 < 0) {
    operator delete(a24);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (*(char *)(v35 - 89) < 0) {
    operator delete(*(void **)(v35 - 112));
  }
  _Unwind_Resume(a1);
}

void std::basic_string<char32_t>::__erase_external_with_move(std::basic_string<char32_t> *this, std::basic_string<char32_t>::size_type __pos, std::basic_string<char32_t>::size_type __n)
{
  if (__n)
  {
    int v4 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
    if (v4 < 0)
    {
      uint64_t v6 = (std::basic_string<char32_t> *)this->__r_.__value_.__r.__words[0];
      std::basic_string<char32_t>::size_type size = this->__r_.__value_.__l.__size_;
    }
    else
    {
      std::basic_string<char32_t>::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      uint64_t v6 = this;
    }
    if (size - __pos >= __n) {
      std::basic_string<char32_t>::size_type v7 = __n;
    }
    else {
      std::basic_string<char32_t>::size_type v7 = size - __pos;
    }
    if (size - __pos > __n)
    {
      memmove((char *)v6 + 4 * __pos, (char *)v6 + 4 * __pos + 4 * v7, 4 * (size - __pos - v7));
      LOBYTE(v4) = *((unsigned char *)&this->__r_.__value_.__s + 23);
    }
    std::basic_string<char32_t>::size_type v8 = size - v7;
    if ((v4 & 0x80) != 0) {
      this->__r_.__value_.__l.__size_ = v8;
    }
    else {
      *((unsigned char *)&this->__r_.__value_.__s + 23) = v8 & 0x7F;
    }
    v6->__r_.__value_.__s.__data_[v8] = 0;
  }
}

void std::__shared_ptr_emplace<std::vector<quasar::PreTokenToPostTokenItnMap>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A629E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<quasar::PreTokenToPostTokenItnMap>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A629E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<std::vector<quasar::PreTokenToPostTokenItnMap>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<quasar::Token const*>,std::__wrap_iter<quasar::Token const*>,std::__wrap_iter<quasar::Token*>,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    uint64_t v6 = a3;
    do
    {
      quasar::Token::operator=(v6, v4);
      v4 += 224;
      v6 += 224;
      v3 += 224;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

void std::vector<quasar::PreTokenToPostTokenItnMap>::__append(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  std::basic_string<char32_t>::size_type v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      int v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(v4, v12);
    }
    else {
      int v13 = 0;
    }
    int v14 = &v13[16 * v10];
    int v15 = &v13[16 * v12];
    bzero(v14, 16 * a2);
    uint64_t v16 = &v14[16 * a2];
    unint64_t v18 = (char *)*a1;
    char v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v17 - 1);
        v14 -= 16;
        v17 -= 16;
      }
      while (v17 != v18);
      char v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

void kaldi::CuSubMatrix<double>::~CuSubMatrix(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A47270;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + ++*(void *)(result + 24) = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_1F0A47270;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + ++*(void *)(result + 24) = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
  JUMPOUT(0x1B3EA8670);
}

void kaldi::CuSubMatrix<double>::Read()
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Function not implemented for this class");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void quasar::WlatArcFeatureExtractor::runArcFeatureExtraction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(uint64_t **)(a1 + 40);
  std::basic_string<char32_t>::size_type v7 = *(uint64_t **)(a1 + 48);
  while (v6 != v7)
  {
    uint64_t v8 = *v6++;
    kaldi::CuVector<float>::Resize(v8 + 296, a2, 1);
  }
  unint64_t v9 = *(void **)a3;
  uint64_t v10 = *(void **)(a3 + 8);
  if (*(void **)a3 == v10)
  {
    LODWORD(v11) = 0;
  }
  else
  {
    uint64_t v11 = 0;
    do
    {
      (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v9 + 24))(*v9, a1, v11);
      uint64_t v12 = *v9;
      v9 += 2;
      uint64_t v11 = (*(unsigned int (**)(uint64_t))(*(void *)v12 + 16))(v12) + v11;
    }
    while (v9 != v10);
  }
  if (v11 != a2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "column == arcFeatDims");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
  }
}

float quasar::WlatArcFeAcousticCost::Run(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = *(uint64_t **)(a2 + 40);
  for (uint64_t i = *(uint64_t **)(a2 + 48); v3 != i; *(float *)(*(void *)(v5 + 304) + 4 * a3) = result)
  {
    uint64_t v5 = *v3++;
    float result = *(double *)(v5 + 16);
  }
  return result;
}

uint64_t quasar::WlatArcFeKeyword::Run(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3 = *(uint64_t **)(a2 + 40);
  uint64_t v4 = *(uint64_t **)(a2 + 48);
  if (v3 != v4)
  {
    uint64_t v5 = *(int *)(result + 8);
    do
    {
      uint64_t v7 = *v3++;
      uint64_t v6 = v7;
      if (*(void *)(v7 + 256) == v5) {
        float v8 = 1.0;
      }
      else {
        float v8 = 0.0;
      }
      *(float *)(*(void *)(v6 + 304) + 4 * a3) = v8;
    }
    while (v3 != v4);
  }
  return result;
}

float quasar::WlatArcFeGraphCost::Run(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = *(uint64_t **)(a2 + 40);
  for (uint64_t i = *(uint64_t **)(a2 + 48); v3 != i; *(float *)(*(void *)(v5 + 304) + 4 * a3) = result)
  {
    uint64_t v5 = *v3++;
    float result = *(double *)(v5 + 40);
  }
  return result;
}

float quasar::WlatArcFeNumFrames::Run(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = *(uint64_t **)(a2 + 40);
  for (uint64_t i = *(uint64_t **)(a2 + 48); v3 != i; *(float *)(*(void *)(v5 + 304) + 4 * a3) = result)
  {
    uint64_t v5 = *v3++;
    float result = *(float *)(v5 + 72);
  }
  return result;
}

float quasar::WlatArcFeLogPosterior::Run(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = *(uint64_t **)(a2 + 40);
  for (uint64_t i = *(uint64_t **)(a2 + 48); v3 != i; *(float *)(*(void *)(v5 + 304) + 4 * a3) = result)
  {
    uint64_t v5 = *v3++;
    float result = *(double *)(v5 + 56);
  }
  return result;
}

float quasar::WlatArcFeLinPosterior::Run(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = *(uint64_t **)(a2 + 40);
  uint64_t v4 = *(uint64_t **)(a2 + 48);
  if (v3 != v4)
  {
    uint64_t v5 = a3;
    do
    {
      uint64_t v6 = *v3++;
      float result = exp(*(long double *)(v6 + 56));
      *(float *)(*(void *)(v6 + 304) + 4 * v5) = result;
    }
    while (v3 != v4);
  }
  return result;
}

uint64_t quasar::WlatArcFeBagOfPhones::Run(quasar::WlatArcFeBagOfPhones *this, const kaldi::WordHypLattice *a2, int a3)
{
  uint64_t v5 = (*((void *)a2 + 6) - *((void *)a2 + 5)) >> 3;
  char v20 = (quasar::WlatArcFeBagOfPhones *)((char *)this + 8);
  uint64_t v6 = kaldi::nnet1::Nnet::InputDim((quasar::WlatArcFeBagOfPhones *)((char *)this + 8));
  kaldi::CuMatrix<float>::CuMatrix(v33, v5, v6, 0, 0, 0);
  if ((int)v5 >= 1)
  {
    uint64_t v7 = 0;
    float v8 = (uint64_t **)((char *)this + 384);
    do
    {
      uint64_t v9 = *(void *)(*((void *)a2 + 5) + 8 * v7);
      uint64_t v10 = *(_DWORD **)(v9 + 104);
      uint64_t v11 = *(_DWORD **)(v9 + 112);
      while (v10 != v11)
      {
        LODWORD(v21) = 0;
        LODWORD(v21) = *v10;
        v29[0] = (int32x2_t)&v21;
        uint64_t v12 = std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v8, (int *)&v21, (uint64_t)&std::piecewise_construct, (unsigned int **)v29);
        *(_DWORD *)(*(void *)&v33[1] + 4 * v34 * (int)v7 + 4 * *((int *)v12 + 8)) = 1065353216;
        ++v10;
      }
      ++v7;
    }
    while (v7 != v5);
  }
  uint64_t v13 = kaldi::nnet1::Nnet::OutputDim(v20);
  unsigned int v14 = v13;
  kaldi::CuMatrix<float>::CuMatrix(v29, v5, v13, 1, 0, 0);
  kaldi::nnet1::Nnet::Feedforward((uint64_t *)v20, (uint64_t)v33, v29, -1, 0);
  if ((int)v5 >= 1)
  {
    uint64_t v15 = 0;
    do
    {
      uint64_t v16 = *(void *)(*((void *)a2 + 5) + 8 * v15);
      uint64_t v17 = *(void *)(v16 + 304) + 4 * a3;
      v28[0] = &unk_1F0A472D0;
      v28[1] = v17;
      void v28[3] = *(void *)(v16 + 320);
      void v28[2] = v14 + a3;
      *((void *)&v22 + 1) = v14 | 0x100000000;
      LODWORD(v23) = v30;
      DWORD1(v23) = v31 - v30 * v15;
      *((void *)&v23 + 1) = v32;
      uint64_t v24 = &unk_1F0A472D0;
      unint64_t v21 = &unk_1F0A472A0;
      *(void *)&long long v22 = *(void *)&v29[1] + 4 * v30 * (int)v15;
      uint64_t v27 = 0;
      uint64_t v25 = v22;
      uint64_t v26 = v14;
      kaldi::CuVectorBase<float>::CopyFromVec(v28, (uint64_t)&v24);
      ++v15;
      uint64_t v24 = &unk_1F0A472D0;
      uint64_t v25 = 0;
      LODWORD(v26) = 0;
      uint64_t v27 = 0;
      unint64_t v21 = &unk_1F0A472A0;
      long long v22 = 0u;
      long long v23 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v21);
    }
    while (v5 != v15);
  }
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v29);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v33);
}

void sub_1B1C287B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  kaldi::CuMatrix<float>::~CuMatrix(v16 - 136);
  _Unwind_Resume(a1);
}

void quasar::WlatArcFeBagOfPhones::WlatArcFeBagOfPhones(void *a1)
{
  *a1 = &unk_1F0A55520;
  kaldi::nnet1::Nnet::Nnet((kaldi::nnet1::Nnet *)(a1 + 1));
}

void sub_1B1C288F4(_Unwind_Exception *a1)
{
  std::__tree<int>::destroy(v1, *v3);
  kaldi::nnet1::Nnet::~Nnet(v2);
  _Unwind_Resume(a1);
}

void quasar::WlatArcFeBagOfPhones::ReadPd2PiFile(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)a2 = a2 + 8;
  uint64_t v21 = 0;
  if ((kaldi::Input::OpenInternal(&v21, a1, 0, 0) & 1) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v20);
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)"Cannot phone pd2pi file ", 24);
    int v13 = *(char *)(a1 + 23);
    if (v13 >= 0) {
      uint64_t v14 = a1;
    }
    else {
      uint64_t v14 = *(void *)a1;
    }
    if (v13 >= 0) {
      uint64_t v15 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      uint64_t v15 = *(void *)(a1 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v20);
  }
  uint64_t v4 = (void *)kaldi::Input::Stream((kaldi::Input *)&v21);
  memset(&__p, 0, sizeof(__p));
  uint64_t v5 = (std::locale::id *)MEMORY[0x1E4FBA258];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
    uint64_t v6 = std::locale::use_facet(&v20, v5);
    unsigned __int8 v7 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
    std::locale::~locale(&v20);
    float v8 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v4, (uint64_t)&__p, v7);
    if ((*((unsigned char *)v8 + *(void *)(*v8 - 24) + 32) & 5) != 0) {
      break;
    }
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    kaldi::SplitStringToVector(&__p, " ", 1, (uint64_t)&v16);
    if (v16 != v17)
    {
      if ((char *)v17 - (char *)v16 != 48)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v20);
        uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)"Malformed phone pd2pi file line=", 32);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)p_p, size);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v20);
      }
      LODWORD(v20.__locale_) = std::stoi(v16, 0, 10);
      HIDWORD(v20.__locale_) = std::stoi(v16 + 1, 0, 10);
      std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,std::pair<int,int>>((uint64_t **)a2, (int *)&v20, (uint64_t *)&v20);
    }
    v20.__locale_ = (std::locale::__imp *)&v16;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  kaldi::Input::~Input((kaldi::Input *)&v21);
}

void sub_1B1C28B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, std::locale a19)
{
  a19.__locale_ = (std::locale::__imp *)&a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  if (a18 < 0) {
    operator delete(__p);
  }
  kaldi::Input::~Input((kaldi::Input *)(v20 - 72));
  std::__tree<int>::destroy(v19, *(void **)(v19 + 8));
  _Unwind_Resume(a1);
}

void *quasar::WlatArcFeWordEmbedding::WlatArcFeWordEmbedding(void *result, uint64_t *a2, void *a3)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  *float result = &unk_1F0A56588;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = a3[1];
  result[3] = *a3;
  result[4] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void quasar::WlatArcFeWordEmbedding::Run(quasar::WlatArcFeWordEmbedding *this, const kaldi::WordHypLattice *a2, int a3)
{
  uint64_t v3 = (uint64_t *)*((void *)a2 + 5);
  uint64_t v4 = (uint64_t *)*((void *)a2 + 6);
  if (v3 != v4)
  {
    uint64_t v6 = a3;
    do
    {
      uint64_t v7 = *v3;
      if (!*(unsigned char *)(*v3 + 488))
      {
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        long long v27 = 0u;
        memset(v26, 0, sizeof(v26));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v26);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(v26, "Coding error. norm_word not found for arc");
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v26);
      }
      float v8 = (const char *)(v7 + 464);
      marisa::Agent::Agent((marisa::Agent *)v26);
      if (*(char *)(v7 + 487) < 0) {
        float v8 = *(const char **)v8;
      }
      marisa::Agent::set_query(v26, v8);
      if (marisa::Trie::lookup(*((marisa::grimoire::trie::LoudsTrie ***)this + 1), (marisa::Agent *)v26))
      {
        int v9 = DWORD1(v27);
        unsigned int v10 = (*(uint64_t (**)(quasar::WlatArcFeWordEmbedding *))(*(void *)this + 16))(this);
        uint64_t v11 = *(void *)(v7 + 304) + 4 * v6;
        long long v22 = &unk_1F0A472D0;
        uint64_t v23 = v11;
        uint64_t v24 = v10;
        uint64_t v25 = *(void *)(v7 + 320);
        uint64_t v12 = *((void *)this + 3);
        uint64_t v13 = *(void *)v12;
        int v14 = *(_DWORD *)(v12 + 16);
        int v15 = kaldi::MatrixBase<float>::NumCols(v12);
        int v20 = 0;
        uint64_t v21 = 0;
        uint64_t v18 = v13 + 4 * v14 * v9;
        int v19 = v15;
        kaldi::CuVectorBase<float>::CopyFromVec<float>(&v22, (uint64_t)&v18);
      }
      else
      {
        unsigned int v16 = (*(uint64_t (**)(quasar::WlatArcFeWordEmbedding *))(*(void *)this + 16))(this);
        uint64_t v17 = *(void *)(v7 + 304) + 4 * v6;
        long long v22 = &unk_1F0A472D0;
        uint64_t v23 = v17;
        uint64_t v24 = v16;
        uint64_t v25 = *(void *)(v7 + 320);
        kaldi::CuVectorBase<float>::SetZero((uint64_t)&v22);
      }
      marisa::Agent::~Agent((marisa::Agent *)v26);
      ++v3;
    }
    while (v3 != v4);
  }
}

uint64_t quasar::WlatArcFeWordEmbedding::Dim(quasar::WlatArcFeWordEmbedding *this)
{
  if (!kaldi::MatrixBase<float>::NumCols(*((void *)this + 3)))
  {
    memset(v4, 0, sizeof(v4));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "Coding error. wordEmbMat not loaded.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v4);
  }
  uint64_t v2 = *((void *)this + 3);
  return kaldi::MatrixBase<float>::NumCols(v2);
}

void quasar::WlatArcFeIsLme::Run(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = *(uint64_t **)(a2 + 40);
  for (uint64_t i = *(uint64_t **)(a2 + 48); v3 != i; *(float *)(*(void *)(v5 + 304) + 4 * a3) = v7)
  {
    uint64_t v6 = *v3++;
    uint64_t v5 = v6;
    if (*(uint64_t *)(v6 + 256) <= 499999999) {
      float v7 = 0.0;
    }
    else {
      float v7 = 1.0;
    }
  }
}

void quasar::WlatArcFeLmeId::Run(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = *(uint64_t **)(a2 + 40);
  for (uint64_t i = *(uint64_t **)(a2 + 48); v3 != i; *(float *)(*(void *)(v5 + 304) + 4 * a3) = v8)
  {
    uint64_t v6 = *v3++;
    uint64_t v5 = v6;
    uint64_t v7 = *(void *)(v6 + 256);
    float v8 = (float)(v7 - 999999999);
    if (v7 <= 999999999) {
      float v8 = 0.0;
    }
  }
}

BOOL quasar::WlatArcFeIsSil::Run(BOOL this, const kaldi::WordHypLattice *a2, int a3)
{
  uint64_t v3 = (uint64_t *)*((void *)a2 + 5);
  uint64_t v4 = (uint64_t *)*((void *)a2 + 6);
  if (v3 != v4)
  {
    uint64_t v5 = this;
    uint64_t v6 = a3;
    do
    {
      uint64_t v7 = *v3;
      float v8 = *(int **)(*v3 + 104);
      float v9 = 0.0;
      if (*(void *)(*v3 + 112) - (void)v8 == 4)
      {
        this = kaldi::SilencePhoneSet::isSilencePhone(*(kaldi::SilencePhoneSet **)(v5 + 8), *v8);
        if (this) {
          float v9 = 1.0;
        }
        else {
          float v9 = 0.0;
        }
      }
      *(float *)(*(void *)(v7 + 304) + 4 * v6) = v9;
      ++v3;
    }
    while (v3 != v4);
  }
  return this;
}

float quasar::WlatArcFeNumPhones::Run(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = *(void **)(a2 + 40);
  for (uint64_t i = *(void **)(a2 + 48); v3 != i; *(float *)(v5[38] + 4 * a3) = result)
  {
    uint64_t v5 = (void *)*v3++;
    float result = (float)(unint64_t)((uint64_t)(v5[14] - v5[13]) >> 2);
  }
  return result;
}

float quasar::WlatArcFeAcousticCostUnpushed::Run(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = *(uint64_t **)(a2 + 40);
  for (uint64_t i = *(uint64_t **)(a2 + 48); v3 != i; *(float *)(*(void *)(v5 + 304) + 4 * a3) = result)
  {
    uint64_t v5 = *v3++;
    float result = *(double *)(v5 + 24);
  }
  return result;
}

void quasar::WlatArcFeInBestPath::Run(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = *(uint64_t **)(a2 + 40);
  for (uint64_t i = *(uint64_t **)(a2 + 48); v3 != i; *(float *)(*(void *)(v5 + 304) + 4 * a3) = v7)
  {
    uint64_t v6 = *v3++;
    uint64_t v5 = v6;
    if (*(unsigned char *)(v6 + 49)) {
      float v7 = 1.0;
    }
    else {
      float v7 = 0.0;
    }
  }
}

void quasar::WlatArcFeScalar::Run(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = *(uint64_t **)(a2 + 40);
  uint64_t v4 = *(uint64_t **)(a2 + 48);
  if (v3 != v4)
  {
    uint64_t v6 = a3;
    do
    {
      uint64_t v7 = *v3++;
      *(float *)(*(void *)(v7 + 304) + 4 * v6) = (*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, v7);
    }
    while (v3 != v4);
  }
}

float quasar::WlatArcFeLinAcousticPosterior::getValue(uint64_t a1, uint64_t a2)
{
  return exp(*(long double *)(a2 + 64));
}

float quasar::WlatArcFeLogAcousticPosterior::getValue(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 64);
}

float quasar::WlatArcFeLinPosterior1::getValue(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 136);
}

float quasar::WlatArcFeLogPosterior1::getValue(uint64_t a1, uint64_t a2)
{
  return log(*(long double *)(a2 + 136));
}

float quasar::WlatArcFeAcousticCostCollapsed1::getValue(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 128);
}

float quasar::WlatArcFeAcousticCost2::getValue(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 192);
}

float quasar::WlatArcFeAcousticCostUnpushed2::getValue(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 200);
}

float quasar::WlatArcFeLinAcousticPosterior2::getValue(uint64_t a1, uint64_t a2)
{
  return exp(*(long double *)(a2 + 208));
}

float quasar::WlatArcFeLogAcousticPosterior2::getValue(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 208);
}

void quasar::WlatArcFeKeyword::~WlatArcFeKeyword(quasar::WlatArcFeKeyword *this)
{
}

uint64_t quasar::WlatArcFeKeyword::Dim(quasar::WlatArcFeKeyword *this)
{
  return 1;
}

void quasar::WlatArcFeIsLme::~WlatArcFeIsLme(quasar::WlatArcFeIsLme *this)
{
}

uint64_t quasar::WlatArcFeIsLme::Dim(quasar::WlatArcFeIsLme *this)
{
  return 1;
}

void quasar::WlatArcFeLmeId::~WlatArcFeLmeId(quasar::WlatArcFeLmeId *this)
{
}

uint64_t quasar::WlatArcFeLmeId::Dim(quasar::WlatArcFeLmeId *this)
{
  return 1;
}

void quasar::WlatArcFeIsSil::~WlatArcFeIsSil(quasar::WlatArcFeIsSil *this)
{
}

uint64_t quasar::WlatArcFeIsSil::Dim(quasar::WlatArcFeIsSil *this)
{
  return 1;
}

void quasar::WlatArcFeNumPhones::~WlatArcFeNumPhones(quasar::WlatArcFeNumPhones *this)
{
}

uint64_t quasar::WlatArcFeNumPhones::Dim(quasar::WlatArcFeNumPhones *this)
{
  return 1;
}

void quasar::WlatArcFeAcousticCostUnpushed::~WlatArcFeAcousticCostUnpushed(quasar::WlatArcFeAcousticCostUnpushed *this)
{
}

uint64_t quasar::WlatArcFeAcousticCostUnpushed::Dim(quasar::WlatArcFeAcousticCostUnpushed *this)
{
  return 1;
}

void quasar::WlatArcFeInBestPath::~WlatArcFeInBestPath(quasar::WlatArcFeInBestPath *this)
{
}

uint64_t quasar::WlatArcFeInBestPath::Dim(quasar::WlatArcFeInBestPath *this)
{
  return 1;
}

uint64_t quasar::WlatArcFeScalar::Dim(quasar::WlatArcFeScalar *this)
{
  return 1;
}

void quasar::WlatArcFeAcousticCost::~WlatArcFeAcousticCost(quasar::WlatArcFeAcousticCost *this)
{
}

uint64_t quasar::WlatArcFeAcousticCost::Dim(quasar::WlatArcFeAcousticCost *this)
{
  return 1;
}

void quasar::WlatArcFeGraphCost::~WlatArcFeGraphCost(quasar::WlatArcFeGraphCost *this)
{
}

uint64_t quasar::WlatArcFeGraphCost::Dim(quasar::WlatArcFeGraphCost *this)
{
  return 1;
}

void quasar::WlatArcFeNumFrames::~WlatArcFeNumFrames(quasar::WlatArcFeNumFrames *this)
{
}

uint64_t quasar::WlatArcFeNumFrames::Dim(quasar::WlatArcFeNumFrames *this)
{
  return 1;
}

void quasar::WlatArcFeLogPosterior::~WlatArcFeLogPosterior(quasar::WlatArcFeLogPosterior *this)
{
}

uint64_t quasar::WlatArcFeLogPosterior::Dim(quasar::WlatArcFeLogPosterior *this)
{
  return 1;
}

void quasar::WlatArcFeLinPosterior::~WlatArcFeLinPosterior(quasar::WlatArcFeLinPosterior *this)
{
}

uint64_t quasar::WlatArcFeLinPosterior::Dim(quasar::WlatArcFeLinPosterior *this)
{
  return 1;
}

void quasar::WlatArcFeBagOfPhones::~WlatArcFeBagOfPhones(quasar::WlatArcFeBagOfPhones *this)
{
  *(void *)this = &unk_1F0A55520;
  std::__tree<int>::destroy((uint64_t)this + 384, *((void **)this + 49));
  kaldi::nnet1::Nnet::~Nnet((quasar::WlatArcFeBagOfPhones *)((char *)this + 8));
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F0A55520;
  std::__tree<int>::destroy((uint64_t)this + 384, *((void **)this + 49));
  kaldi::nnet1::Nnet::~Nnet((quasar::WlatArcFeBagOfPhones *)((char *)this + 8));
  JUMPOUT(0x1B3EA8670);
}

uint64_t quasar::WlatArcFeBagOfPhones::Dim(quasar::WlatArcFeBagOfPhones *this)
{
  return kaldi::nnet1::Nnet::OutputDim((quasar::WlatArcFeBagOfPhones *)((char *)this + 8));
}

void quasar::WlatArcFeWordEmbedding::~WlatArcFeWordEmbedding(quasar::WlatArcFeWordEmbedding *this)
{
  *(void *)this = &unk_1F0A56588;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1F0A56588;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  JUMPOUT(0x1B3EA8670);
}

void quasar::WlatArcFeLinAcousticPosterior::~WlatArcFeLinAcousticPosterior(quasar::WlatArcFeLinAcousticPosterior *this)
{
}

void quasar::WlatArcFeLogAcousticPosterior::~WlatArcFeLogAcousticPosterior(quasar::WlatArcFeLogAcousticPosterior *this)
{
}

void quasar::WlatArcFeLinPosterior1::~WlatArcFeLinPosterior1(quasar::WlatArcFeLinPosterior1 *this)
{
}

void quasar::WlatArcFeLogPosterior1::~WlatArcFeLogPosterior1(quasar::WlatArcFeLogPosterior1 *this)
{
}

void quasar::WlatArcFeAcousticCostCollapsed1::~WlatArcFeAcousticCostCollapsed1(quasar::WlatArcFeAcousticCostCollapsed1 *this)
{
}

void quasar::WlatArcFeAcousticCost2::~WlatArcFeAcousticCost2(quasar::WlatArcFeAcousticCost2 *this)
{
}

void quasar::WlatArcFeAcousticCostUnpushed2::~WlatArcFeAcousticCostUnpushed2(quasar::WlatArcFeAcousticCostUnpushed2 *this)
{
}

void quasar::WlatArcFeLinAcousticPosterior2::~WlatArcFeLinAcousticPosterior2(quasar::WlatArcFeLinAcousticPosterior2 *this)
{
}

void quasar::WlatArcFeLogAcousticPosterior2::~WlatArcFeLogAcousticPosterior2(quasar::WlatArcFeLogAcousticPosterior2 *this)
{
}

uint64_t *std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,std::pair<int,int>>(uint64_t **a1, int *a2, uint64_t *a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    int v7 = *a2;
    while (1)
    {
      while (1)
      {
        float v8 = (uint64_t **)v5;
        int v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    float v8 = a1 + 1;
LABEL_10:
    unsigned int v10 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v10 + 28) = *a3;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

fst::SymbolTableTextOptions *fst::SymbolTableTextOptions::SymbolTableTextOptions(fst::SymbolTableTextOptions *this)
{
  *(unsigned char *)this = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)this + 1, FLAGS_fst_field_separator[0]);
  return this;
}

void fst::SymbolTableImpl::ReadText()
{
  MEMORY[0x1F4188790]();
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1B1C29BD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,std::locale a29,uint64_t a30)
{
  MEMORY[0x1B3EA8670](v30, 0x10B2C404FCE5648);
  _Unwind_Resume(a1);
}

uint64_t fst::SymbolTableImpl::AddSymbol(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v35 = a3;
  if (a3 == -1) {
    return -1;
  }
  unint64_t v6 = fst::internal::DenseSymbolMap::InsertOrFind((fst::internal::DenseSymbolMap *)(a1 + 40), a2);
  if (v7)
  {
    if (((uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 3) - 1 == a3 && *(void *)(a1 + 32) == a3)
    {
      *(void *)(a1 + 32) = a3 + 1;
      uint64_t v9 = a3;
    }
    else
    {
      unint64_t v10 = *(void *)(a1 + 136);
      uint64_t v11 = *(uint64_t **)(a1 + 128);
      if ((unint64_t)v11 >= v10)
      {
        long long v22 = *(uint64_t **)(a1 + 120);
        uint64_t v23 = v11 - v22;
        if ((unint64_t)(v23 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v24 = v10 - (void)v22;
        unint64_t v25 = (uint64_t)(v10 - (void)v22) >> 2;
        if (v25 <= v23 + 1) {
          unint64_t v25 = v23 + 1;
        }
        if (v24 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v26 = v25;
        }
        if (v26)
        {
          long long v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1 + 136, v26);
          long long v22 = *(uint64_t **)(a1 + 120);
          uint64_t v11 = *(uint64_t **)(a1 + 128);
        }
        else
        {
          long long v27 = 0;
        }
        long long v28 = (uint64_t *)&v27[8 * v23];
        long long v29 = &v27[8 * v26];
        *long long v28 = a3;
        uint64_t v12 = v28 + 1;
        while (v11 != v22)
        {
          uint64_t v30 = *--v11;
          *--long long v28 = v30;
        }
        *(void *)(a1 + 120) = v28;
        *(void *)(a1 + 128) = v12;
        *(void *)(a1 + 136) = v29;
        if (v22) {
          operator delete(v22);
        }
      }
      else
      {
        *uint64_t v11 = a3;
        uint64_t v12 = v11 + 1;
      }
      *(void *)(a1 + 128) = v12;
      uint64_t v31 = ((uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 3) - 1;
      __p[0] = &v35;
      std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t **)(a1 + 144), &v35, (uint64_t)&std::piecewise_construct, (uint64_t **)__p)[5] = v31;
      uint64_t v9 = v35;
    }
    if (v9 >= *(void *)(a1 + 24)) {
      *(void *)(a1 + ++*(void *)(result + 24) = v9 + 1;
    }
    *(unsigned char *)(a1 + 172) = 0;
  }
  else
  {
    unint64_t NthKey = fst::SymbolTableImpl::GetNthKey((fst::SymbolTableImpl *)a1, v6);
    if (NthKey == a3)
    {
      return a3;
    }
    else
    {
      uint64_t v9 = NthKey;
      if (FLAGS_v >= 1)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
        uint64_t v13 = fst::LogMessage::LogMessage((fst *)&v36, (uint64_t)__p);
        int v14 = (void *)fst::cerr(v13);
        int v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"SymbolTable::AddSymbol: symbol = ", 33);
        int v16 = *(char *)(a2 + 23);
        if (v16 >= 0) {
          uint64_t v17 = a2;
        }
        else {
          uint64_t v17 = *(void *)a2;
        }
        if (v16 >= 0) {
          uint64_t v18 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          uint64_t v18 = *(void *)(a2 + 8);
        }
        int v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v17, v18);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" already in symbol_map_ with key = ", 35);
        int v20 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" but supplied new key = ", 24);
        uint64_t v21 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" (ignoring new key)", 19);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v36);
        if (v34 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return v9;
}

void sub_1B1C29F08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::SymbolTableImpl::MaybeRecomputeCheckSum(fst::SymbolTableImpl *this)
{
  if (!*((unsigned char *)this + 172))
  {
    fst::CheckSummer::CheckSummer((fst::CheckSummer *)&v68);
    uint64_t v2 = *((void *)this + 6);
    if (*((void *)this + 7) != v2)
    {
      unint64_t v3 = 0;
      do
      {
        uint64_t v4 = *(char **)(v2 + 8 * v3);
        size_t v5 = strlen(v4);
        std::string::basic_string[abi:ne180100](__p, v4, v5);
        int v6 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
        char v7 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
        float v8 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
        if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          int v6 = __p[0].__r_.__value_.__r.__words[1];
        }
        else {
          float v8 = __p;
        }
        if (v6 >= 1)
        {
          uint64_t v9 = v6;
          do
          {
            std::string::value_type v11 = v8->__r_.__value_.__s.__data_[0];
            float v8 = (std::string *)((char *)v8 + 1);
            std::string::value_type v10 = v11;
            int v12 = v68++;
            BOOL v13 = -v12 < 0;
            int v14 = -v12 & 0x1F;
            int v15 = v12 & 0x1F;
            if (!v13) {
              int v15 = -v14;
            }
            if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int v16 = &v69;
            }
            else {
              int v16 = (std::string *)v69.__r_.__value_.__r.__words[0];
            }
            v16->__r_.__value_.__s.__data_[v15] ^= v10;
            --v9;
          }
          while (v9);
          char v7 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
        }
        ++v68;
        if (v7 < 0) {
          operator delete(__p[0].__r_.__value_.__l.__data_);
        }
        ++v3;
        uint64_t v2 = *((void *)this + 6);
      }
      while (v3 < (*((void *)this + 7) - v2) >> 3);
    }
    if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(__p, v69.__r_.__value_.__l.__data_, v69.__r_.__value_.__l.__size_);
    }
    else {
      __p[0] = v69;
    }
    uint64_t v17 = (void **)((char *)this + 176);
    if (*((char *)this + 199) < 0) {
      operator delete(*v17);
    }
    *(_OWORD *)uint64_t v17 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
    *((void *)this + ++*(void *)(result + 24) = *((void *)&__p[0].__r_.__value_.__l + 2);
    fst::CheckSummer::CheckSummer((fst::CheckSummer *)&v66);
    if (*((uint64_t *)this + 4) >= 1)
    {
      uint64_t v18 = 0;
      std::string::size_type v19 = *MEMORY[0x1E4FBA418];
      std::string::size_type v20 = *(void *)(MEMORY[0x1E4FBA418] + 24);
      do
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
        size_t v21 = strlen(*(const char **)(*((void *)this + 6) + 8 * v18));
        std::string::basic_string[abi:ne180100](&__dst, *(void **)(*((void *)this + 6) + 8 * v18), v21);
        if ((v61 & 0x80u) == 0) {
          p_dst = &__dst;
        }
        else {
          p_dst = __dst;
        }
        if ((v61 & 0x80u) == 0) {
          uint64_t v23 = v61;
        }
        else {
          uint64_t v23 = v60;
        }
        unint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)p_dst, v23);
        LOBYTE(v56) = 9;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)&v56, 1);
        std::ostream::operator<<();
        if ((char)v61 < 0) {
          operator delete(__dst);
        }
        std::stringbuf::str();
        if ((v61 & 0x80u) == 0) {
          unint64_t v25 = (char *)&__dst;
        }
        else {
          unint64_t v25 = (char *)__dst;
        }
        std::stringbuf::str();
        int v26 = v58;
        unsigned __int8 v27 = v58;
        if ((v58 & 0x80u) != 0) {
          int v26 = v57;
        }
        if (v26 >= 1)
        {
          uint64_t v28 = v26;
          do
          {
            char v30 = *v25++;
            char v29 = v30;
            int v31 = v66++;
            BOOL v13 = -v31 < 0;
            int v32 = -v31 & 0x1F;
            int v33 = v31 & 0x1F;
            if (!v13) {
              int v33 = -v32;
            }
            if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              char v34 = &v67;
            }
            else {
              char v34 = (std::string *)v67.__r_.__value_.__r.__words[0];
            }
            v34->__r_.__value_.__s.__data_[v33] ^= v29;
            --v28;
          }
          while (v28);
          unsigned __int8 v27 = v58;
        }
        if ((v27 & 0x80) != 0) {
          operator delete(v56);
        }
        if ((char)v61 < 0) {
          operator delete(__dst);
        }
        __p[0].__r_.__value_.__r.__words[0] = v19;
        *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + *(void *)(v19 - 24)) = v20;
        __p[0].__r_.__value_.__l.__size_ = MEMORY[0x1E4FBA470] + 16;
        if (v64 < 0) {
          operator delete(v63);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x1B3EA8520](v65);
        ++v18;
      }
      while (v18 < *((void *)this + 4));
    }
    uint64_t v35 = (fst::SymbolTableImpl *)*((void *)this + 18);
    if (v35 != (fst::SymbolTableImpl *)((char *)this + 152))
    {
      std::string::size_type v36 = *MEMORY[0x1E4FBA418];
      std::string::size_type v37 = *(void *)(MEMORY[0x1E4FBA418] + 24);
      do
      {
        if (*((void *)v35 + 4) >= *((void *)this + 4))
        {
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
          size_t v38 = strlen(*(const char **)(*((void *)this + 6) + 8 * *((void *)v35 + 5)));
          std::string::basic_string[abi:ne180100](&__dst, *(void **)(*((void *)this + 6) + 8 * *((void *)v35 + 5)), v38);
          if ((v61 & 0x80u) == 0) {
            long long v39 = &__dst;
          }
          else {
            long long v39 = __dst;
          }
          if ((v61 & 0x80u) == 0) {
            uint64_t v40 = v61;
          }
          else {
            uint64_t v40 = v60;
          }
          long long v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)v39, v40);
          LOBYTE(v56) = 9;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)&v56, 1);
          std::ostream::operator<<();
          if ((char)v61 < 0) {
            operator delete(__dst);
          }
          std::stringbuf::str();
          if ((v61 & 0x80u) == 0) {
            std::string::size_type v42 = (char *)&__dst;
          }
          else {
            std::string::size_type v42 = (char *)__dst;
          }
          std::stringbuf::str();
          int v43 = v58;
          unsigned __int8 v44 = v58;
          if ((v58 & 0x80u) != 0) {
            int v43 = v57;
          }
          if (v43 >= 1)
          {
            uint64_t v45 = v43;
            do
            {
              char v47 = *v42++;
              char v46 = v47;
              int v48 = v66++;
              BOOL v13 = -v48 < 0;
              int v49 = -v48 & 0x1F;
              int v50 = v48 & 0x1F;
              if (!v13) {
                int v50 = -v49;
              }
              if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                long long v51 = &v67;
              }
              else {
                long long v51 = (std::string *)v67.__r_.__value_.__r.__words[0];
              }
              v51->__r_.__value_.__s.__data_[v50] ^= v46;
              --v45;
            }
            while (v45);
            unsigned __int8 v44 = v58;
          }
          if ((v44 & 0x80) != 0) {
            operator delete(v56);
          }
          if ((char)v61 < 0) {
            operator delete(__dst);
          }
          __p[0].__r_.__value_.__r.__words[0] = v36;
          *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + *(void *)(v36 - 24)) = v37;
          __p[0].__r_.__value_.__l.__size_ = MEMORY[0x1E4FBA470] + 16;
          if (v64 < 0) {
            operator delete(v63);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          MEMORY[0x1B3EA8520](v65);
        }
        long long v52 = (fst::SymbolTableImpl *)*((void *)v35 + 1);
        if (v52)
        {
          do
          {
            long long v53 = v52;
            long long v52 = *(fst::SymbolTableImpl **)v52;
          }
          while (v52);
        }
        else
        {
          do
          {
            long long v53 = (fst::SymbolTableImpl *)*((void *)v35 + 2);
            BOOL v54 = *(void *)v53 == (void)v35;
            uint64_t v35 = v53;
          }
          while (!v54);
        }
        uint64_t v35 = v53;
      }
      while (v53 != (fst::SymbolTableImpl *)((char *)this + 152));
    }
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(__p, v67.__r_.__value_.__l.__data_, v67.__r_.__value_.__l.__size_);
    }
    else {
      __p[0] = v67;
    }
    long long v55 = (void **)((char *)this + 200);
    if (*((char *)this + 223) < 0) {
      operator delete(*v55);
    }
    *(_OWORD *)long long v55 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
    *((void *)this + 27) = *((void *)&__p[0].__r_.__value_.__l + 2);
    *((unsigned char *)this + 172) = 1;
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v67.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v69.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1B1C2A5E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (*(char *)(v18 - 121) < 0) {
    operator delete(*(void **)(v18 - 144));
  }
  if (*(char *)(v18 - 89) < 0) {
    operator delete(*(void **)(v18 - 112));
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::internal::DenseSymbolMap::InsertOrFind(fst::internal::DenseSymbolMap *this, uint64_t a2)
{
  if ((float)((float)(unint64_t)((uint64_t)(*((void *)this + 6) - *((void *)this + 5)) >> 3) * 0.75) <= (float)(unint64_t)((uint64_t)(*((void *)this + 2) - *((void *)this + 1)) >> 3)) {
    fst::internal::DenseSymbolMap::Rehash(this);
  }
  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)this + 32, a2);
  uint64_t v5 = *((void *)this + 8);
  uint64_t v6 = *((void *)this + 5);
  uint64_t v7 = v4 & v5;
  uint64_t v8 = *(void *)(v6 + 8 * (v4 & v5));
  uint64_t v10 = *(void *)this;
  uint64_t v9 = *((void *)this + 1);
  if (v8 == *(void *)this)
  {
LABEL_9:
    *(void *)(v6 + 8 * v7) = (*((void *)this + 2) - v9) >> 3;
    operator new[]();
  }
  if (*(char *)(a2 + 23) >= 0) {
    std::string::value_type v11 = (const char *)a2;
  }
  else {
    std::string::value_type v11 = *(const char **)a2;
  }
  while (strcmp(*(const char **)(v9 + 8 * v8), v11))
  {
    uint64_t v7 = (v7 + 1) & v5;
    uint64_t v8 = *(void *)(v6 + 8 * v7);
    if (v8 == v10) {
      goto LABEL_9;
    }
  }
  return v8;
}

unint64_t fst::SymbolTableImpl::GetNthKey(fst::SymbolTableImpl *this, unint64_t a2)
{
  if ((a2 & 0x8000000000000000) != 0) {
    return -1;
  }
  unint64_t v2 = a2;
  uint64_t v4 = *((void *)this + 6);
  if (a2 >= (*((void *)this + 7) - v4) >> 3) {
    return -1;
  }
  if (*((void *)this + 4) <= (int64_t)a2)
  {
    uint64_t v5 = *(char **)(v4 + 8 * a2);
    size_t v6 = strlen(v5);
    std::string::basic_string[abi:ne180100](__p, v5, v6);
    uint64_t v7 = fst::internal::DenseSymbolMap::Find((uint64_t *)this + 5, (uint64_t)__p);
    unint64_t v2 = v7;
    if (v7 != -1)
    {
      uint64_t v8 = *((void *)this + 4);
      BOOL v9 = __OFSUB__(v7, v8);
      uint64_t v10 = v7 - v8;
      if (v10 < 0 == v9) {
        unint64_t v2 = *(void *)(*((void *)this + 15) + 8 * v10);
      }
    }
    if (v13 < 0) {
      operator delete(__p[0]);
    }
  }
  return v2;
}

uint64_t fst::SymbolTableImpl::Read(void *a1)
{
  int v8 = 0;
  std::istream::read();
  if ((*((unsigned char *)a1 + *(void *)(*a1 - 24) + 32) & 5) == 0)
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v7 = 0;
    LODWORD(v5.__r_.__value_.__l.__data_) = 0;
    std::istream::read();
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  unint64_t v2 = fst::LogMessage::LogMessage((fst *)&v5, (uint64_t)__p);
  unint64_t v3 = (void *)fst::cerr(v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"SymbolTable::Read: read failed", 30);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v5);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_1B1C2AD30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

BOOL fst::SymbolTableImpl::Write(uint64_t a1, void *a2)
{
  LODWORD(__p) = 2125658996;
  std::ostream::write();
  LODWORD(v4) = *(unsigned __int8 *)(a1 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a1 + 8);
  }
  LODWORD(__p) = v4;
  std::ostream::write();
  std::ostream::write();
  std::string __p = *(void **)(a1 + 24);
  std::ostream::write();
  std::string __p = (void *)((uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 3);
  std::ostream::write();
  uint64_t v5 = *(void *)(a1 + 48);
  if (*(void *)(a1 + 56) != v5)
  {
    unint64_t v6 = 0;
    do
    {
      int64_t v7 = *(void *)(a1 + 32);
      int v8 = (void *)v6;
      if ((uint64_t)v6 >= v7) {
        int v8 = *(void **)(*(void *)(a1 + 120) - 8 * v7 + 8 * v6);
      }
      BOOL v9 = *(char **)(v5 + 8 * v6);
      size_t v10 = strlen(v9);
      std::string::basic_string[abi:ne180100](&__p, v9, v10);
      int v11 = v18;
      if ((v18 & 0x80u) != 0) {
        int v11 = v17;
      }
      int v19 = v11;
      std::ostream::write();
      std::ostream::write();
      if ((char)v18 < 0) {
        operator delete(__p);
      }
      std::string __p = v8;
      std::ostream::write();
      ++v6;
      uint64_t v5 = *(void *)(a1 + 48);
    }
    while (v6 < (*(void *)(a1 + 56) - v5) >> 3);
  }
  std::ostream::flush();
  int v12 = *(_DWORD *)((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5;
  if (v12)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    char v13 = fst::LogMessage::LogMessage((fst *)&v19, (uint64_t)&__p);
    int v14 = (void *)fst::cerr(v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"SymbolTable::Write: write failed", 32);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v19);
    if ((char)v18 < 0) {
      operator delete(__p);
    }
  }
  return v12 == 0;
}

void sub_1B1C2B008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, char a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::SymbolTable::AddTable(fst::SymbolTable *this, const fst::SymbolTable *a2)
{
  fst::SymbolTable::MutateCheck((uint64_t)this);
  unint64_t v4 = (*(uint64_t (**)(const fst::SymbolTable *))(*(void *)a2 + 120))(a2);
  uint64_t v5 = (*(uint64_t (**)(const fst::SymbolTable *, void))(*(void *)a2 + 128))(a2, 0);
  if (v4)
  {
    uint64_t v6 = v5;
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = *((void *)this + 1);
      (*(void (**)(void **__return_ptr, const fst::SymbolTable *, uint64_t))(*(void *)a2 + 88))(__p, a2, v6);
      fst::SymbolTableImpl::AddSymbol(v8, (uint64_t)__p, *(void *)(v8 + 24));
      if (v10 < 0) {
        operator delete(__p[0]);
      }
      if (++v7 < v4) {
        uint64_t v6 = (*(uint64_t (**)(const fst::SymbolTable *, uint64_t))(*(void *)a2 + 128))(a2, v7);
      }
    }
    while (v4 != v7);
  }
}

void sub_1B1C2B174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::SymbolTable::MutateCheck(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 8);
  int v2 = *(_DWORD *)(v1 + 168);
  if (v2 >= 2)
  {
    *(_DWORD *)(v1 + 168) = v2 - 1;
    operator new();
  }
  return this;
}

void sub_1B1C2B1F0(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B2C404FCE5648);
  _Unwind_Resume(a1);
}

BOOL fst::SymbolTable::WriteText(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned __int8 *)(a3 + 31);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a3 + 16);
  }
  uint64_t v23 = v3;
  if (v3)
  {
    unint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
    uint64_t v7 = (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 128))(a1, 0);
    if (v6)
    {
      uint64_t v8 = v7;
      int v9 = 0;
      uint64_t v10 = 0;
      unint64_t v24 = *(void **)(MEMORY[0x1E4FBA418] + 24);
      unint64_t v25 = (void *)*MEMORY[0x1E4FBA418];
      do
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v30);
        BOOL v12 = v8 >= 0 || *(unsigned char *)a3 != 0;
        if (((v12 | v9) & 1) == 0)
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "WARNING");
          char v13 = fst::LogMessage::LogMessage((fst *)&v26, (uint64_t)__p);
          int v14 = (void *)fst::cerr(v13);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Negative symbol table entry when not allowed", 44);
          fst::LogMessage::~LogMessage((fst::LogMessage *)&v26);
          if ((char)v29 < 0) {
            operator delete(__p[0]);
          }
          int v9 = 1;
        }
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 88))(__p, a1, v8);
        if ((v29 & 0x80u) == 0) {
          int v15 = __p;
        }
        else {
          int v15 = (void **)__p[0];
        }
        if ((v29 & 0x80u) == 0) {
          uint64_t v16 = v29;
        }
        else {
          uint64_t v16 = (uint64_t)__p[1];
        }
        uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)v15, v16);
        unsigned __int8 v18 = (unsigned char *)(a3 + 8);
        if (*(char *)(a3 + 31) < 0) {
          unsigned __int8 v18 = *(unsigned char **)(a3 + 8);
        }
        LOBYTE(v26) = *v18;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)&v26, 1);
        int v19 = (void *)std::ostream::operator<<();
        LOBYTE(v26) = 10;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)&v26, 1);
        if ((char)v29 < 0) {
          operator delete(__p[0]);
        }
        std::stringbuf::str();
        std::stringbuf::str();
        std::ostream::write();
        if (v27 < 0) {
          operator delete(v26);
        }
        if ((char)v29 < 0) {
          operator delete(__p[0]);
        }
        v30[0] = v25;
        *(void **)((char *)v30 + *((void *)v25 - 3)) = v24;
        v30[1] = (void *)(MEMORY[0x1E4FBA470] + 16);
        if (v33 < 0) {
          operator delete(v32);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x1B3EA8520](&v34);
        if (++v10 < v6) {
          uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, v10);
        }
      }
      while (v6 != v10);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v30, "ERROR");
    std::string::size_type v20 = fst::LogMessage::LogMessage((fst *)__p, (uint64_t)v30);
    size_t v21 = (void *)fst::cerr(v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Missing required field separator", 32);
    fst::LogMessage::~LogMessage((fst::LogMessage *)__p);
    if (v31 < 0) {
      operator delete(v30[0]);
    }
  }
  return v23 != 0;
}

void sub_1B1C2B600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

fst::internal::DenseSymbolMap *fst::internal::DenseSymbolMap::DenseSymbolMap(fst::internal::DenseSymbolMap *this)
{
  *(void *)this = -1;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  std::vector<long long>::vector((void *)this + 5, 0x10uLL);
  uint64_t v3 = (void *)*((void *)this + 5);
  int v2 = (void *)*((void *)this + 6);
  for (*((void *)this + 8) = v2 - v3 - 1; v3 != v2; ++v3)
    *uint64_t v3 = *(void *)this;
  return this;
}

void sub_1B1C2B704(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 16) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

fst::internal::DenseSymbolMap *fst::internal::DenseSymbolMap::DenseSymbolMap(fst::internal::DenseSymbolMap *this, const fst::internal::DenseSymbolMap *a2)
{
  *(void *)this = -1;
  std::vector<char const*>::vector((void *)this + 1, (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3);
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((void *)this + 5, *((const void **)a2 + 5), *((void *)a2 + 6), (uint64_t)(*((void *)a2 + 6) - *((void *)a2 + 5)) >> 3);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  if (*((void *)this + 2) != *((void *)this + 1))
  {
    strlen(**((const char ***)a2 + 1));
    operator new[]();
  }
  return this;
}

void sub_1B1C2B820(_Unwind_Exception *exception_object)
{
  unint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void fst::internal::DenseSymbolMap::~DenseSymbolMap(fst::internal::DenseSymbolMap *this)
{
  unint64_t v4 = (char *)this + 8;
  int v2 = (void *)*((void *)this + 1);
  uint64_t v3 = (void *)*((void *)v4 + 1);
  if (v3 == v2)
  {
    int v2 = v3;
  }
  else
  {
    unint64_t v5 = 0;
    do
    {
      if (v2[v5])
      {
        MEMORY[0x1B3EA8630](v2[v5], 0x1000C8077774924);
        int v2 = (void *)*((void *)this + 1);
        uint64_t v3 = (void *)*((void *)this + 2);
      }
      ++v5;
    }
    while (v5 < v3 - v2);
  }
  unint64_t v6 = (void *)*((void *)this + 5);
  if (v6)
  {
    *((void *)this + 6) = v6;
    operator delete(v6);
    int v2 = (void *)*((void *)this + 1);
  }
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
}

void fst::internal::DenseSymbolMap::Rehash(fst::internal::DenseSymbolMap *this)
{
  int v2 = (char *)this + 40;
  std::vector<unsigned long>::resize((uint64_t)this + 40, (uint64_t)(*((void *)this + 6) - *((void *)this + 5)) >> 2);
  unint64_t v4 = *(void **)v2;
  uint64_t v3 = (void *)*((void *)v2 + 1);
  for (*((void *)v2 + 3) = (((uint64_t)v3 - *(void *)v2) >> 3) - 1; v4 != v3; ++v4)
    void *v4 = *(void *)this;
  uint64_t v5 = *((void *)this + 1);
  if (*((void *)this + 2) != v5)
  {
    unint64_t v6 = 0;
    do
    {
      std::string::basic_string[abi:ne180100]<0>(__p, *(char **)(v5 + 8 * v6));
      unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)this + 32, (uint64_t)__p);
      uint64_t v8 = *((void *)this + 8);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v9 = v8 & v7;
      uint64_t v10 = *((void *)this + 5);
      if (*(void *)(v10 + 8 * (v8 & v7)) != *(void *)this)
      {
        do
          uint64_t v9 = *((void *)this + 8) & (v9 + 1);
        while (*(void *)(v10 + 8 * v9) != *(void *)this);
      }
      *(void *)(v10 + 8 * v9) = v6++;
      uint64_t v5 = *((void *)this + 1);
    }
    while (v6 < (*((void *)this + 2) - v5) >> 3);
  }
}

uint64_t fst::internal::DenseSymbolMap::Find(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 4), a2);
  uint64_t v5 = a1[8];
  uint64_t v6 = a1[5];
  uint64_t v7 = *a1;
  uint64_t v8 = v4 & v5;
  uint64_t v9 = *(void *)(v6 + 8 * (v4 & v5));
  if (v9 == *a1) {
    return v7;
  }
  uint64_t v10 = a1[1];
  if (*(char *)(v2 + 23) < 0) {
    uint64_t v2 = *(void *)v2;
  }
  while (strcmp(*(const char **)(v10 + 8 * v9), (const char *)v2))
  {
    uint64_t v8 = (v8 + 1) & v5;
    uint64_t v9 = *(void *)(v6 + 8 * v8);
    if (v9 == v7) {
      return v7;
    }
  }
  return v9;
}

void fst::SymbolTable::Copy(fst::SymbolTable *this)
{
}

uint64_t fst::SymbolTable::AddSymbol(uint64_t a1, uint64_t a2, uint64_t a3)
{
  fst::SymbolTable::MutateCheck(a1);
  uint64_t v6 = *(void *)(a1 + 8);
  return fst::SymbolTableImpl::AddSymbol(v6, a2, a3);
}

uint64_t fst::SymbolTable::AddSymbol(uint64_t a1, uint64_t a2)
{
  fst::SymbolTable::MutateCheck(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(v4 + 24);
  return fst::SymbolTableImpl::AddSymbol(v4, a2, v5);
}

uint64_t fst::SymbolTable::Name(fst::SymbolTable *this)
{
  return *((void *)this + 1);
}

void fst::SymbolTable::CheckSum(fst::SymbolTableImpl **this@<X0>, std::string *a2@<X8>)
{
}

void fst::SymbolTable::LabeledCheckSum(fst::SymbolTableImpl **this@<X0>, std::string *a2@<X8>)
{
}

BOOL fst::SymbolTable::Write(uint64_t a1, void *a2)
{
  return fst::SymbolTableImpl::Write(*(void *)(a1 + 8), a2);
}

void *fst::SymbolTable::Find@<X0>(fst::SymbolTableImpl **this@<X0>, int64_t a2@<X1>, void *a3@<X8>)
{
  return fst::SymbolTableImpl::Find(this[1], a2, a3);
}

uint64_t fst::SymbolTable::Find(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t result = fst::internal::DenseSymbolMap::Find(v2 + 5, a2);
  if (result != -1)
  {
    uint64_t v4 = v2[4];
    BOOL v5 = __OFSUB__(result, v4);
    uint64_t v6 = result - v4;
    if (v6 < 0 == v5) {
      return *(void *)(v2[15] + 8 * v6);
    }
  }
  return result;
}

uint64_t fst::SymbolTable::Find(fst::SymbolTableImpl **this, char *a2)
{
  return fst::SymbolTableImpl::Find(this[1], a2);
}

uint64_t fst::SymbolTable::AvailableKey(fst::SymbolTable *this)
{
  return *(void *)(*((void *)this + 1) + 24);
}

uint64_t fst::SymbolTable::NumSymbols(fst::SymbolTable *this)
{
  return (uint64_t)(*(void *)(*((void *)this + 1) + 56) - *(void *)(*((void *)this + 1) + 48)) >> 3;
}

unint64_t fst::SymbolTable::GetNthKey(fst::SymbolTableImpl **this, unint64_t a2)
{
  return fst::SymbolTableImpl::GetNthKey(this[1], a2);
}

void *fst::SymbolTable::GetNthSymbol@<X0>(fst::SymbolTableImpl **this@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  return fst::SymbolTableImpl::GetNthSymbol(this[1], a2, a3);
}

uint64_t fst::SymbolTable::SupportsEfficientReverseSymbolLookup(fst::SymbolTable *this)
{
  return 1;
}

fst::CheckSummer *fst::CheckSummer::CheckSummer(fst::CheckSummer *this)
{
  *(_DWORD *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  std::string::resize((std::string *)((char *)this + 8), 0x20uLL, 0);
  return this;
}

void sub_1B1C2BCC0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void *std::string::basic_string[abi:ne180100](void *__dst, void *__src, size_t __len)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    void *__dst = v6;
  }
  else
  {
    *((unsigned char *)__dst + 23) = __len;
    uint64_t v6 = __dst;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __dst;
}

std::string *fst::SymbolTableImpl::SymbolTableImpl(std::string *this, const fst::SymbolTableImpl *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = *(_OWORD *)((char *)a2 + 24);
  fst::internal::DenseSymbolMap::DenseSymbolMap((fst::internal::DenseSymbolMap *)&this[1].__r_.__value_.__r.__words[2], (const fst::SymbolTableImpl *)((char *)a2 + 40));
  this[5].__r_.__value_.__r.__words[0] = 0;
  this[5].__r_.__value_.__l.__size_ = 0;
  this[5].__r_.__value_.__r.__words[2] = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(this[5].__r_.__value_.__r.__words, *((const void **)a2 + 15), *((void *)a2 + 16), (uint64_t)(*((void *)a2 + 16) - *((void *)a2 + 15)) >> 3);
  std::map<long long,long long>::map[abi:ne180100]((uint64_t *)&this[6], (uint64_t)a2 + 144);
  LODWORD(this[7].__r_.__value_.__l.__data_) = 1;
  this[7].__r_.__value_.__s.__data_[4] = 0;
  *(_OWORD *)&this[7].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[8].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[8].__r_.__value_.__r.__words[2] = 0u;
  return this;
}

void sub_1B1C2BE3C(_Unwind_Exception *a1)
{
  BOOL v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 128) = v5;
    operator delete(v5);
  }
  fst::internal::DenseSymbolMap::~DenseSymbolMap(v2);
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::map<long long,long long>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<long long,long long>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<long long,long long>,std::__tree_node<std::__value_type<long long,long long>,void *> *,long>>>(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_1B1C2BEC0(_Unwind_Exception *a1)
{
  std::__tree<int>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<long long,long long>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<long long,long long>,std::__tree_node<std::__value_type<long long,long long>,void *> *,long>>>(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    long long v4 = a2;
    BOOL v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      uint64_t result = std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::__emplace_hint_unique_key_args<long long,std::pair<long long const,long long> const&>(v5, v6, v4 + 4, (_OWORD *)v4 + 2);
      size_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          size_t v8 = v7;
          size_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          size_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          long long v4 = v8;
        }
        while (!v9);
      }
      long long v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::__emplace_hint_unique_key_args<long long,std::pair<long long const,long long> const&>(uint64_t **a1, void *a2, uint64_t *a3, _OWORD *a4)
{
  uint64_t v6 = (void **)std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::__find_equal<long long>(a1, a2, &v11, &v10, a3);
  size_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    size_t v8 = (uint64_t **)v6;
    size_t v7 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v7 + 2) = *a4;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v11, v8, v7);
  }
  return v7;
}

void *std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::__find_equal<long long>(void *a1, void *a2, void *a3, void *a4, uint64_t *a5)
{
  BOOL v5 = a1 + 1;
  if (a1 + 1 == a2 || (uint64_t v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    uint64_t v8 = *a2;
    if ((void *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      BOOL v9 = (void *)*a2;
      do
      {
        uint64_t v10 = v9;
        BOOL v9 = (void *)v9[1];
      }
      while (v9);
    }
    else
    {
      char v13 = a2;
      do
      {
        uint64_t v10 = (void *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        char v13 = v10;
      }
      while (v14);
    }
    uint64_t v15 = *a5;
    if (v10[4] < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v17 = v16;
          uint64_t v18 = v16[4];
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = (void *)*v17;
          BOOL v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        BOOL v5 = v17 + 1;
        uint64_t v16 = (void *)v17[1];
      }
      while (v16);
    }
    else
    {
      uint64_t v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    char v12 = (void *)a2[1];
    do
    {
      a4 = v12;
      char v12 = (void *)*v12;
    }
    while (v12);
  }
  else
  {
    int v19 = a2;
    do
    {
      a4 = (void *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      int v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    std::string::size_type v20 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          size_t v21 = v20;
          uint64_t v22 = v20[4];
          if (v6 >= v22) {
            break;
          }
          std::string::size_type v20 = (void *)*v21;
          BOOL v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        BOOL v5 = v21 + 1;
        std::string::size_type v20 = (void *)v21[1];
      }
      while (v20);
    }
    else
    {
      size_t v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void fst::SymbolTableImpl::CheckSum(fst::SymbolTableImpl *this@<X0>, std::string *a2@<X8>)
{
  fst::SymbolTableImpl::MaybeRecomputeCheckSum(this);
  if (*((char *)this + 199) < 0)
  {
    long long v4 = (const std::string::value_type *)*((void *)this + 22);
    std::string::size_type v5 = *((void *)this + 23);
    std::string::__init_copy_ctor_external(a2, v4, v5);
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 11);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 24);
  }
}

void fst::SymbolTableImpl::LabeledCheckSum(fst::SymbolTableImpl *this@<X0>, std::string *a2@<X8>)
{
  fst::SymbolTableImpl::MaybeRecomputeCheckSum(this);
  if (*((char *)this + 223) < 0)
  {
    long long v4 = (const std::string::value_type *)*((void *)this + 25);
    std::string::size_type v5 = *((void *)this + 26);
    std::string::__init_copy_ctor_external(a2, v4, v5);
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 200);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 27);
  }
}

void *fst::SymbolTableImpl::Find@<X0>(fst::SymbolTableImpl *this@<X0>, int64_t a2@<X1>, void *a3@<X8>)
{
  if (a2 < 0 || *((void *)this + 4) <= a2)
  {
    long long v4 = (void *)*((void *)this + 19);
    if (!v4) {
      goto LABEL_18;
    }
    std::string::size_type v5 = (void *)((char *)this + 152);
    do
    {
      int64_t v6 = v4[4];
      BOOL v7 = v6 < a2;
      if (v6 >= a2) {
        uint64_t v8 = v4;
      }
      else {
        uint64_t v8 = v4 + 1;
      }
      if (!v7) {
        std::string::size_type v5 = v4;
      }
      long long v4 = (void *)*v8;
    }
    while (*v8);
    if (v5 == (void *)((char *)this + 152)) {
      goto LABEL_18;
    }
    if (v5[4] > a2) {
      goto LABEL_18;
    }
    a2 = v5[5];
    if (a2 < 0) {
      goto LABEL_18;
    }
  }
  uint64_t v9 = *((void *)this + 6);
  if (a2 >= (unint64_t)((*((void *)this + 7) - v9) >> 3))
  {
LABEL_18:
    return std::string::basic_string[abi:ne180100]<0>(a3, "");
  }
  else
  {
    uint64_t v10 = *(char **)(v9 + 8 * a2);
    size_t v11 = strlen(v10);
    return std::string::basic_string[abi:ne180100](a3, v10, v11);
  }
}

uint64_t fst::SymbolTableImpl::Find(fst::SymbolTableImpl *this, char *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  uint64_t v3 = fst::internal::DenseSymbolMap::Find((uint64_t *)this + 5, (uint64_t)__p);
  uint64_t v4 = v3;
  if (v3 != -1)
  {
    uint64_t v5 = *((void *)this + 4);
    BOOL v6 = __OFSUB__(v3, v5);
    uint64_t v7 = v3 - v5;
    if (v7 < 0 == v6) {
      uint64_t v4 = *(void *)(*((void *)this + 15) + 8 * v7);
    }
  }
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  return v4;
}

void *fst::SymbolTableImpl::GetNthSymbol@<X0>(fst::SymbolTableImpl *this@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  if ((a2 & 0x8000000000000000) != 0
    || (uint64_t v4 = *((void *)this + 6), a2 >= (*((void *)this + 7) - v4) >> 3)
    || *((void *)this + 4) > (int64_t)a2)
  {
    return std::string::basic_string[abi:ne180100]<0>(a3, "");
  }
  else
  {
    BOOL v6 = *(char **)(v4 + 8 * a2);
    size_t v7 = strlen(v6);
    return std::string::basic_string[abi:ne180100](a3, v6, v7);
  }
}

void *std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    BOOL v6 = result;
    uint64_t result = std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B1C2C49C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v7 = a1 + 1;
  BOOL v6 = a1[1];
  if (v6)
  {
    uint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        uint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        BOOL v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      BOOL v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    size_t v11 = (uint64_t *)operator new(0x30uLL);
    void v11[4] = **a4;
    v11[5] = 0;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

void *std::vector<long long>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1B1C2C5D4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<char const*>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1B1C2C64C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void quasar::SimpleLmeEnumerationsProcessorBase::~SimpleLmeEnumerationsProcessorBase(quasar::SimpleLmeEnumerationsProcessorBase *this)
{
  *(void *)this = &unk_1F0A58828;
  std::__tree<int>::destroy((uint64_t)this + 144, *((void **)this + 19));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void quasar::SimpleLmeEnumerationsProcessorBase::add(uint64_t a1, char **a2, uint64_t **a3)
{
  v67[0] = 0;
  v67[1] = 0;
  int v66 = v67;
  uint64_t v5 = *a2;
  BOOL v6 = a2[1];
  if (*a2 != v6)
  {
    do
    {
      __p[0] = v5;
      std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v66, (const void **)v5, (uint64_t)&std::piecewise_construct, (long long **)__p)[7] = (uint64_t)v5;
      v5 += 80;
    }
    while (v5 != v6);
  }
  uint64_t v8 = *a3;
  uint64_t v7 = a3[1];
  if (*a3 != v7)
  {
    long long v51 = a3[1];
    do
    {
      uint64_t v9 = (const std::string *)*v8;
      if (0xAAAAAAAAAAAAAAABLL * ((v8[1] - *v8) >> 3) >= 2)
      {
        if (*(int *)(a1 + 116) < 1)
        {
          BOOL v10 = 1;
        }
        else
        {
          BOOL v10 = (int)quasar::SimpleLmeEnumerationsProcessorBase::getMinimumNumberOfPhones(a1, v8, (uint64_t)&v66) >= *(_DWORD *)(a1 + 116);
          uint64_t v9 = (const std::string *)*v8;
        }
        float v11 = std::stof(v9, 0);
        std::vector<std::vector<quasar::PronChoice>>::vector(v65, -1 - 0x5555555555555555 * ((v8[1] - *v8) >> 3));
        memset(&v64, 0, sizeof(v64));
        uint64_t v12 = *v8;
        if (0xAAAAAAAAAAAAAAABLL * ((v8[1] - *v8) >> 3) < 2)
        {
LABEL_43:
          std::string::basic_string[abi:ne180100]<0>(__p, ".");
          quasar::PronCombinator::operator()((int *)(a1 + 136), v65, v63);
          if (v57 < 0) {
            operator delete(__p[0]);
          }
          v62[0] = 0;
          v62[1] = 0;
          unsigned __int8 v61 = v62;
          uint64_t v41 = v63[0];
          uint64_t v42 = v63[1];
          while (v41 != v42)
          {
            v68[0] = (long long *)(v41 + 8);
            int v43 = *((unsigned __int8 *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v61, (const void **)(v41 + 8), (uint64_t)&std::piecewise_construct, v68)+ 56);
            int v44 = *(_DWORD *)v41;
            v68[0] = (long long *)(v41 + 8);
            uint64_t v45 = std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v61, (const void **)(v41 + 8), (uint64_t)&std::piecewise_construct, v68);
            if (v43) {
              BOOL v46 = 0;
            }
            else {
              BOOL v46 = v44 == 2;
            }
            char v47 = !v46;
            *((unsigned char *)v45 + 56) = v47;
            v41 += 40;
          }
          if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v55, v64.__r_.__value_.__l.__data_, v64.__r_.__value_.__l.__size_);
          }
          else {
            std::string v55 = v64;
          }
          std::string::basic_string[abi:ne180100]<0>(v53, "");
          quasar::LmeDataFactoryBase::Word::Word(__p, &v55, v53, 0);
          if (v54 < 0) {
            operator delete(v53[0]);
          }
          if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v55.__r_.__value_.__l.__data_);
          }
          int v48 = (uint64_t *)v61;
          if (v61 != v62)
          {
            do
            {
              quasar::LmeDataFactoryBase::PronSet::insert(v60, 2 * (*((unsigned char *)v48 + 56) == 0), (uint64_t)(v48 + 4), 0.0);
              int v49 = (char *)v48[1];
              if (v49)
              {
                do
                {
                  int v50 = (char **)v49;
                  int v49 = *(char **)v49;
                }
                while (v49);
              }
              else
              {
                do
                {
                  int v50 = (char **)v48[2];
                  BOOL v24 = *v50 == (char *)v48;
                  int v48 = (uint64_t *)v50;
                }
                while (!v24);
              }
              int v48 = (uint64_t *)v50;
            }
            while (v50 != v62);
          }
          *(float *)(a1 + 168) = v11 + *(float *)(a1 + 168);
          (*(void (**)(uint64_t, void **, float))(*(void *)a1 + 32))(a1, __p, v11);
          std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)v60, (char *)v60[1]);
          if (v59 < 0) {
            operator delete(v58);
          }
          if (v57 < 0) {
            operator delete(__p[0]);
          }
          std::__tree<std::string>::destroy((uint64_t)&v61, v62[0]);
          __p[0] = v63;
          std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        }
        else
        {
          unint64_t v13 = 1;
          long long v52 = v8;
          while (1)
          {
            unint64_t v14 = v12 + 24 * v13;
            uint64_t v15 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)&v66, (const void **)v14);
            uint64_t v16 = v15;
            if (v67 == (char **)v15) {
              break;
            }
            uint64_t v17 = v65[0];
            unint64_t v18 = quasar::LmeDataFactoryBase::PronSet::size((quasar::LmeDataFactoryBase::PronSet *)(*(void *)(v15 + 56)
                                                                                                  + 56));
            unint64_t v19 = v13 - 1;
            std::vector<quasar::PronChoice>::reserve((uint64_t *)(v17 + 24 * (v13 - 1)), v18);
            quasar::Bitmap::~Bitmap((quasar::Bitmap *)(*(void *)(v16 + 56) + 56));
            uint64_t v22 = v20 + 1;
            size_t v21 = (void *)*v20;
            if ((void *)*v20 != v20 + 1)
            {
              do
              {
                if (quasar::pronTypeMatchesPronRequest(*((_DWORD *)v21 + 8), *(_DWORD *)(a1 + 128)))
                {
                  int v23 = *((_DWORD *)v21 + 8);
                  if (v10 || (v23 != 2 ? (BOOL v24 = v23 == 5) : (BOOL v24 = 1), !v24))
                  {
                    unint64_t v25 = (int *)(v21 + 8);
                    if ((v23 & 0xFFFFFFFE) == 4)
                    {
                      LODWORD(__p[0]) = 3;
                      uint64_t v26 = v65[0] + 24 * v19;
                      unint64_t v29 = *(void *)(v26 + 8);
                      uint64_t v28 = (uint64_t *)(v26 + 8);
                      uint64_t v27 = v29;
                      if (v29 >= v28[1])
                      {
                        uint64_t v30 = std::vector<quasar::PronChoice>::__emplace_back_slow_path<quasar::PronType,std::string const&,float const&>((uint64_t *)(v65[0] + 24 * v19), (int *)__p, (uint64_t)(v21 + 5), v25);
                      }
                      else
                      {
                        std::allocator<quasar::PronChoice>::construct[abi:ne180100]<quasar::PronChoice,quasar::PronType,std::string const&,float const&>((uint64_t)(v28 + 1), v27, (int *)__p, (uint64_t)(v21 + 5), v25);
                        uint64_t v30 = v27 + 40;
                        *uint64_t v28 = v27 + 40;
                      }
                      *uint64_t v28 = v30;
                    }
                    else
                    {
                      uint64_t v31 = v65[0] + 24 * v19;
                      unint64_t v34 = *(void *)(v31 + 8);
                      int v32 = (uint64_t *)(v31 + 8);
                      uint64_t v33 = v34;
                      if (v34 >= v32[1])
                      {
                        uint64_t v35 = std::vector<quasar::PronChoice>::__emplace_back_slow_path<quasar::PronType const&,std::string const&,float const&>((uint64_t *)(v65[0] + 24 * v19), (int *)v21 + 8, (uint64_t)(v21 + 5), (int *)v21 + 16);
                      }
                      else
                      {
                        std::allocator<quasar::PronChoice>::construct[abi:ne180100]<quasar::PronChoice,quasar::PronType const&,std::string const&,float const&>((uint64_t)(v32 + 1), v33, (int *)v21 + 8, (uint64_t)(v21 + 5), v25);
                        uint64_t v35 = v33 + 40;
                        *int v32 = v33 + 40;
                      }
                      *int v32 = v35;
                    }
                  }
                }
                std::string::size_type v36 = (void *)v21[1];
                if (v36)
                {
                  do
                  {
                    std::string::size_type v37 = v36;
                    std::string::size_type v36 = (void *)*v36;
                  }
                  while (v36);
                }
                else
                {
                  do
                  {
                    std::string::size_type v37 = (void *)v21[2];
                    BOOL v24 = *v37 == (void)v21;
                    size_t v21 = v37;
                  }
                  while (!v24);
                }
                size_t v21 = v37;
              }
              while (v37 != v22);
            }
            if (v13 != 1) {
              std::string::append(&v64, "~w00");
            }
            int v38 = *(char *)(v14 + 23);
            if (v38 >= 0) {
              long long v39 = (const std::string::value_type *)v14;
            }
            else {
              long long v39 = *(const std::string::value_type **)v14;
            }
            if (v38 >= 0) {
              std::string::size_type v40 = *(unsigned __int8 *)(v14 + 23);
            }
            else {
              std::string::size_type v40 = *(void *)(v14 + 8);
            }
            std::string::append(&v64, v39, v40);
            ++v13;
            uint64_t v8 = v52;
            uint64_t v12 = *v52;
            if (0xAAAAAAAAAAAAAAABLL * ((v52[1] - *v52) >> 3) <= v13) {
              goto LABEL_43;
            }
          }
        }
        if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v64.__r_.__value_.__l.__data_);
        }
        __p[0] = v65;
        std::vector<std::vector<quasar::PronChoice>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        uint64_t v7 = v51;
      }
      v8 += 3;
    }
    while (v8 != v7);
  }
  std::__tree<std::string>::destroy((uint64_t)&v66, v67[0]);
}

void sub_1B1C2CC70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,char *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,char *a43,uint64_t a44,char a45)
{
  std::__tree<std::string>::destroy((uint64_t)&a42, a43);
  a29 = &a45;
  std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  if (*(char *)(v45 - 169) < 0) {
    operator delete(*(void **)(v45 - 192));
  }
  a29 = (char *)(v45 - 168);
  std::vector<std::vector<quasar::PronChoice>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  std::__tree<std::string>::destroy(v45 - 144, *(char **)(v45 - 136));
  _Unwind_Resume(a1);
}

uint64_t quasar::SimpleLmeEnumerationsProcessorBase::getMinimumNumberOfPhones(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  if (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) >= 2)
  {
    LODWORD(v6) = 0;
    uint64_t v7 = a3 + 8;
    unint64_t v8 = 1;
    while (1)
    {
      uint64_t v9 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a3, (const void **)(v3 + 24 * v8));
      if (v7 == v9) {
        break;
      }
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)(*(void *)(v9 + 56) + 56));
      unint64_t v13 = (void *)*v10;
      float v11 = v10 + 1;
      uint64_t v12 = v13;
      if (v13 == v11)
      {
        int v15 = 0;
      }
      else
      {
        char v14 = 0;
        int v15 = 0x7FFFFFFF;
        do
        {
          if (*((_DWORD *)v12 + 8) == 1)
          {
            uint64_t v16 = *((unsigned __int8 *)v12 + 63);
            if (*((char *)v12 + 63) < 0)
            {
              uint64_t v17 = (unsigned __int8 *)v12[5];
              uint64_t v18 = v12[6];
            }
            else
            {
              uint64_t v17 = (unsigned __int8 *)(v12 + 5);
              uint64_t v18 = *((unsigned __int8 *)v12 + 63);
            }
            for (int i = 0; v18; --v18)
            {
              int v20 = *v17++;
              if (v20 == 46) {
                ++i;
              }
            }
            if ((v16 & 0x80) != 0) {
              uint64_t v16 = v12[6];
            }
            if (v16) {
              int v21 = i + 1;
            }
            else {
              int v21 = i;
            }
            if (v15 >= v21) {
              int v15 = v21;
            }
            char v14 = 1;
          }
          uint64_t v22 = (void *)v12[1];
          if (v22)
          {
            do
            {
              int v23 = v22;
              uint64_t v22 = (void *)*v22;
            }
            while (v22);
          }
          else
          {
            do
            {
              int v23 = (void *)v12[2];
              BOOL v24 = *v23 == (void)v12;
              uint64_t v12 = v23;
            }
            while (!v24);
          }
          uint64_t v12 = v23;
        }
        while (v23 != v11);
        if ((v14 & 1) == 0) {
          int v15 = 0;
        }
      }
      uint64_t v6 = (v15 + v6);
      ++v8;
      uint64_t v3 = *a2;
      if (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) <= v8) {
        return v6;
      }
    }
  }
  return 0;
}

uint64_t std::vector<quasar::PronChoice>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x666666666666667) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(result, a2);
    v7[1] = v7[0] + v5;
    _OWORD v7[2] = v7[0] + v5;
    void v7[3] = v7[0] + 40 * v6;
    std::vector<quasar::PronChoice>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<quasar::PronChoice>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1B1C2CF80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::PronChoice>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  uint64_t result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

void std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 32);
  unint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    *((void *)v6 + 6) = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  *((void *)v6 + 7) = 0;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_1B1C2D0B8(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,double>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void *std::vector<std::vector<quasar::PronChoice>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1B1C2D164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void std::vector<std::vector<quasar::PronChoice>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    size_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        uint64_t v6 = v4;
        std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      size_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<quasar::PronChoice>::__emplace_back_slow_path<quasar::PronType,std::string const&,float const&>(uint64_t *a1, int *a2, uint64_t a3, int *a4)
{
  unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x666666666666666) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 3) > v6) {
    unint64_t v6 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333) {
    unint64_t v10 = 0x666666666666666;
  }
  else {
    unint64_t v10 = v6;
  }
  uint64_t v18 = a1 + 2;
  if (v10) {
    float v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>((uint64_t)(a1 + 2), v10);
  }
  else {
    float v11 = 0;
  }
  char v14 = v11;
  int v15 = &v11[40 * v5];
  uint64_t v17 = &v11[40 * v10];
  std::allocator<quasar::PronChoice>::construct[abi:ne180100]<quasar::PronChoice,quasar::PronType,std::string const&,float const&>((uint64_t)(a1 + 2), (uint64_t)v15, a2, a3, a4);
  uint64_t v16 = v15 + 40;
  std::vector<quasar::PronChoice>::__swap_out_circular_buffer(a1, &v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<quasar::PronChoice>::~__split_buffer((uint64_t)&v14);
  return v12;
}

void sub_1B1C2D300(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::PronChoice>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::PronChoice>::construct[abi:ne180100]<quasar::PronChoice,quasar::PronType,std::string const&,float const&>(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, int *a5)
{
  int v7 = *a3;
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string __p = *(std::string *)a4;
  }
  int v8 = *a5;
  *(_DWORD *)a2 = v7;
  long long v9 = (std::string *)(a2 + 8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v9, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    int v10 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(_DWORD *)(a2 + 32) = v8;
    if (v10 < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(void *)(a2 + ++*(void *)(result + 24) = *((void *)&__p.__r_.__value_.__l + 2);
    *(_DWORD *)(a2 + 32) = v8;
  }
}

void sub_1B1C2D3C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<quasar::PronChoice>::__emplace_back_slow_path<quasar::PronType const&,std::string const&,float const&>(uint64_t *a1, int *a2, uint64_t a3, int *a4)
{
  unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x666666666666666) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 3) > v6) {
    unint64_t v6 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333) {
    unint64_t v10 = 0x666666666666666;
  }
  else {
    unint64_t v10 = v6;
  }
  uint64_t v18 = a1 + 2;
  if (v10) {
    float v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>((uint64_t)(a1 + 2), v10);
  }
  else {
    float v11 = 0;
  }
  char v14 = v11;
  int v15 = &v11[40 * v5];
  uint64_t v17 = &v11[40 * v10];
  std::allocator<quasar::PronChoice>::construct[abi:ne180100]<quasar::PronChoice,quasar::PronType const&,std::string const&,float const&>((uint64_t)(a1 + 2), (uint64_t)v15, a2, a3, a4);
  uint64_t v16 = v15 + 40;
  std::vector<quasar::PronChoice>::__swap_out_circular_buffer(a1, &v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<quasar::PronChoice>::~__split_buffer((uint64_t)&v14);
  return v12;
}

void sub_1B1C2D4F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::PronChoice>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::PronChoice>::construct[abi:ne180100]<quasar::PronChoice,quasar::PronType const&,std::string const&,float const&>(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, int *a5)
{
  int v7 = *a3;
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string __p = *(std::string *)a4;
  }
  int v8 = *a5;
  *(_DWORD *)a2 = v7;
  long long v9 = (std::string *)(a2 + 8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v9, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    int v10 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(_DWORD *)(a2 + 32) = v8;
    if (v10 < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(void *)(a2 + ++*(void *)(result + 24) = *((void *)&__p.__r_.__value_.__l + 2);
    *(_DWORD *)(a2 + 32) = v8;
  }
}

void sub_1B1C2D5B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  unint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  uint64_t result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

void std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  unint64_t v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  int v7 = (std::string *)(v6 + 32);
  int v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    *((void *)v6 + 6) = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[56] = 0;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_1B1C2D6F8(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,double>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void *fst::ArcInfo::ArcInfo(void *this)
{
  *this = &unk_1F0A3FAC8;
  return this;
}

void fst::ArcInfo::~ArcInfo(fst::ArcInfo *this)
{
}

uint64_t fst::BackoffArcInfo::BackoffArcInfo(uint64_t this)
{
  *(void *)this = &unk_1F0A3A608;
  *(_DWORD *)(this + 8) = 0;
  return this;
}

void fst::BackoffArcInfo::~BackoffArcInfo(fst::BackoffArcInfo *this)
{
}

double fst::InterpArcInfo::InterpArcInfo(fst::InterpArcInfo *this)
{
  *(void *)this = &unk_1F0A38EE8;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + ++*(void *)(result + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((void *)this + 7) = -1;
  *((_DWORD *)this + 16) = 2139095040;
  return result;
}

void fst::InterpArcInfo::~InterpArcInfo(fst::InterpArcInfo *this)
{
  *(void *)this = &unk_1F0A38EE8;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void **)((char *)this + 8);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

{
  uint64_t vars8;

  fst::InterpArcInfo::~InterpArcInfo(this);
  JUMPOUT(0x1B3EA8670);
}

void *quasar::lm::WeightOptimizationStrategy::operator()@<X0>(quasar::lm *a1@<X0>, void *a2@<X8>)
{
  if (*((_DWORD *)a1 + 2))
  {
    quasar::lm::LogMessage::LogMessage(v8, 5, "operator()", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/weights.cpp", 10);
    quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v8);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v8);
  }
  else
  {
    uint64_t v4 = (quasar::lm *)quasar::lm::nullstream(a1);
  }
  if (*((int *)a1 + 3) <= 0)
  {
    quasar::lm::LogMessage::LogMessage(v8, 5, "operator()", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/weights.cpp", 12);
    quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v8);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v8);
  }
  else
  {
    quasar::lm::nullstream(v4);
  }
  unint64_t v5 = *((int *)a1 + 3);
  long double v6 = log((double)(int)v5);
  v8[0] = exp(-v6);
  return std::vector<double>::vector(a2, v5, v8);
}

void sub_1B1C2D944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::vector<double>::vector(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](a1, a2);
    long double v6 = (void *)a1[1];
    int v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1B1C2D9D4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL kaldi::ConstIntegerSet<int>::count(uint64_t a1, int a2)
{
  if (a2 < *(_DWORD *)a1 || *(_DWORD *)(a1 + 4) < a2) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 8)) {
    return 1;
  }
  if (*(unsigned char *)(a1 + 9)) {
    return (*(void *)(*(void *)(a1 + 16) + (((unint64_t)(a2 - *(_DWORD *)a1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (a2 - *(unsigned char *)a1)) & 1;
  }
  uint64_t v3 = *(_DWORD **)(a1 + 40);
  uint64_t v4 = *(_DWORD **)(a1 + 48);
  if (v4 == v3) {
    return 0;
  }
  unint64_t v5 = v4 - v3;
  do
  {
    unint64_t v6 = v5 >> 1;
    int v7 = &v3[v5 >> 1];
    int v9 = *v7;
    uint64_t v8 = v7 + 1;
    v5 += ~(v5 >> 1);
    if (v9 < a2) {
      uint64_t v3 = v8;
    }
    else {
      unint64_t v5 = v6;
    }
  }
  while (v5);
  if (v3 == v4) {
    return 0;
  }
  return *v3 <= a2;
}

void *kaldi::ConstIntegerSet<int>::~ConstIntegerSet(void *a1)
{
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[2];
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

uint64_t kaldi::ReadBasicType<unsigned int>(void *a1, int a2, uint64_t a3)
{
  v10[51] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    int v4 = std::istream::get();
    if (v4 == -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "ReadBasicType: encountered end of stream.");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
    }
    if (v4 << 24 != -67108864)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"ReadBasicType: did not get expected integer type, ", 50);
      int v7 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" vs. ", 5);
      uint64_t v8 = (void *)std::ostream::operator<<();
      int v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)".  You can change this code to successfully", 43);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, " read it later, if needed.");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
    }
    uint64_t result = std::istream::read();
  }
  else
  {
    uint64_t result = MEMORY[0x1B3EA7DE0](a1, a3);
  }
  if ((*((unsigned char *)a1 + *(void *)(*a1 - 24) + 32) & 5) != 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Read failure in ReadBasicType, file position is ", 48);
    std::istream::tellg();
    unint64_t v6 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)", next char is ", 15);
    std::istream::peek();
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
  return result;
}

void sub_1B1C2DCA8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void *std::operator<<[abi:ne180100]<std::char_traits<char>>(void *a1, char a2)
{
  char v3 = a2;
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)&v3, 1);
}

void kaldi::ConstIntegerSet<int>::InitInternal(int *a1)
{
  *((void *)a1 + 3) = 0;
  char v3 = (char *)*((void *)a1 + 5);
  uint64_t v2 = (char *)*((void *)a1 + 6);
  uint64_t v4 = v2 - v3;
  if (v2 == v3)
  {
    char v8 = 0;
    *(void *)a1 = 1;
    *((unsigned char *)a1 + 8) = 0;
  }
  else
  {
    int v5 = *(_DWORD *)v3;
    *a1 = v5;
    int v6 = *((_DWORD *)v2 - 1);
    a1[1] = v6;
    unint64_t v7 = v6 - v5 + 1;
    if (v7 == v4 >> 2)
    {
      char v8 = 0;
      *((unsigned char *)a1 + 8) = 1;
    }
    else
    {
      char v8 = 0;
      *((unsigned char *)a1 + 8) = 0;
      if (v7 < 8 * v4)
      {
        std::vector<BOOL>::resize((uint64_t)(a1 + 4), v7, 0);
        int v9 = (int *)*((void *)a1 + 5);
        uint64_t v10 = *((void *)a1 + 6) - (void)v9;
        if (v10)
        {
          unint64_t v11 = v10 >> 2;
          uint64_t v12 = *a1;
          uint64_t v13 = *((void *)a1 + 2);
          if (v11 <= 1) {
            uint64_t v14 = 1;
          }
          else {
            uint64_t v14 = v11;
          }
          do
          {
            uint64_t v15 = *v9++;
            char v8 = 1;
            *(void *)(v13 + (((unint64_t)(v15 - v12) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << (v15 - v12);
            --v14;
          }
          while (v14);
        }
        else
        {
          char v8 = 1;
        }
      }
    }
  }
  *((unsigned char *)a1 + 9) = v8;
}

double kaldi::quasar::InputShapeTemplate::InputShapeTemplate(kaldi::quasar::InputShapeTemplate *this)
{
  *(void *)&double result = 0x100000000;
  *(void *)this = 0x100000000;
  *((_DWORD *)this + 2) = 2;
  return result;
}

_DWORD *kaldi::quasar::InputShapeTemplate::InputShapeTemplate(_DWORD *a1, uint64_t a2)
{
  *(void *)a1 = -1;
  a1[2] = -1;
  BOOL v46 = 0;
  char v47 = 0;
  uint64_t v48 = 0;
  kaldi::SplitStringToVector((const std::string *)a2, ",", 1, (uint64_t)&v46);
  uint64_t v4 = v46;
  int v5 = v47;
  uint64_t v6 = v47 - v46;
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * v6;
  a1[2] = -1431655765 * v6;
  if (-1431655765 * (int)v6 < 2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v45);
    uint64_t v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"Input shape template [", 22);
    int v31 = *(char *)(a2 + 23);
    if (v31 >= 0) {
      uint64_t v32 = a2;
    }
    else {
      uint64_t v32 = *(void *)a2;
    }
    if (v31 >= 0) {
      uint64_t v33 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v33 = *(void *)(a2 + 8);
    }
    unint64_t v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, v32, v33);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"] must include the R and C tokens.", 34);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v45);
  }
  char v8 = a1 + 1;
  if (v5 != v4)
  {
    uint64_t v9 = 0;
    if (v7 <= 1) {
      unint64_t v7 = 1;
    }
    do
    {
      int v10 = *((char *)v4 + 23);
      if (v10 < 0)
      {
        if (v4[1] != (unsigned __int8 *)1) {
          goto LABEL_23;
        }
        int v12 = **v4;
        if (v12 == 67)
        {
LABEL_15:
          uint64_t v13 = a1 + 1;
          if (*v8 != -1)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v45);
            unint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"Input shape template [", 22);
            int v26 = *(char *)(a2 + 23);
            if (v26 >= 0) {
              uint64_t v27 = a2;
            }
            else {
              uint64_t v27 = *(void *)a2;
            }
            if (v26 >= 0) {
              uint64_t v28 = *(unsigned __int8 *)(a2 + 23);
            }
            else {
              uint64_t v28 = *(void *)(a2 + 8);
            }
            unint64_t v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, v27, v28);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"] includes multiple C tokens.", 29);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v45);
          }
          goto LABEL_16;
        }
        if (v12 != 82)
        {
          int v11 = **v4;
LABEL_18:
          if (v11 != 49)
          {
LABEL_23:
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v45);
            uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"Input shape template [", 22);
            int v16 = *(char *)(a2 + 23);
            if (v16 >= 0) {
              uint64_t v17 = a2;
            }
            else {
              uint64_t v17 = *(void *)a2;
            }
            if (v16 >= 0) {
              uint64_t v18 = *(unsigned __int8 *)(a2 + 23);
            }
            else {
              uint64_t v18 = *(void *)(a2 + 8);
            }
            unint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v17, v18);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"] includes tokens other than R, C and 1.", 40);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v45);
          }
          goto LABEL_19;
        }
      }
      else
      {
        if (v10 != 1) {
          goto LABEL_23;
        }
        int v11 = *(unsigned __int8 *)v4;
        if (v11 == 67) {
          goto LABEL_15;
        }
        if (v11 != 82) {
          goto LABEL_18;
        }
      }
      uint64_t v13 = a1;
      if (*a1 != -1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v45);
        int v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"Input shape template [", 22);
        int v21 = *(char *)(a2 + 23);
        if (v21 >= 0) {
          uint64_t v22 = a2;
        }
        else {
          uint64_t v22 = *(void *)a2;
        }
        if (v21 >= 0) {
          uint64_t v23 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          uint64_t v23 = *(void *)(a2 + 8);
        }
        BOOL v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v22, v23);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"] includes multiple R tokens.", 29);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v45);
      }
LABEL_16:
      *uint64_t v13 = v9;
LABEL_19:
      ++v9;
      v4 += 3;
    }
    while (v7 != v9);
  }
  if (*a1 == -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v45);
    uint64_t v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"Input shape template [", 22);
    int v36 = *(char *)(a2 + 23);
    if (v36 >= 0) {
      uint64_t v37 = a2;
    }
    else {
      uint64_t v37 = *(void *)a2;
    }
    if (v36 >= 0) {
      uint64_t v38 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v38 = *(void *)(a2 + 8);
    }
    long long v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, v37, v38);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"] must include the R token.", 27);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v45);
  }
  if (*v8 == -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v45);
    std::string::size_type v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"Input shape template [", 22);
    int v41 = *(char *)(a2 + 23);
    if (v41 >= 0) {
      uint64_t v42 = a2;
    }
    else {
      uint64_t v42 = *(void *)a2;
    }
    if (v41 >= 0) {
      uint64_t v43 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v43 = *(void *)(a2 + 8);
    }
    int v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, v42, v43);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"] must include the C token.", 27);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v45);
  }
  v45[0] = (void **)&v46;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v45);
  return a1;
}

uint64_t *kaldi::quasar::InputShapeTemplate::Get@<X0>(kaldi::quasar::InputShapeTemplate *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  unint64_t v7 = *((int *)this + 2);
  uint64_t v11 = 1;
  double result = std::vector<long long>::vector(a4, v7, &v11);
  uint64_t v9 = *result;
  uint64_t v10 = *((int *)this + 1);
  *(void *)(*result + 8 * *(int *)this) = a2;
  *(void *)(v9 + 8 * v10) = a3;
  return result;
}

void *kaldi::quasar::CopyBufferToMatrix(uint64_t a1, uint64_t a2, uint64_t a3, int32x2_t *a4)
{
  if ((a3 & a2) == 0xFFFFFFFF)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v11, "Both num_rows and num_cols is 0. At least one dimension should be provided.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v11);
  }
  uint64_t v5 = a3;
  uint64_t v6 = a2;
  v8[1] = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  v8[0] = &unk_1F0A517C0;
  (*(void (**)(uint64_t, void *))(*(void *)a1 + 40))(a1, v8);
  if (v6 == -1)
  {
    if ((int)v5 <= 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"num_cols > 0", 12);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v11);
    }
    uint64_t v6 = ((int)v9 / (int)v5);
    if ((int)v9 % (int)v5)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"num_elements % num_cols == 0", 28);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v11);
    }
  }
  else if (v5 == -1)
  {
    if ((int)v6 <= 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"num_rows > 0", 12);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v11);
    }
    uint64_t v5 = ((int)v9 / (int)v6);
    if ((int)v9 % (int)v6)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"num_elements % num_rows == 0", 28);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v11);
    }
  }
  else if (v5 * v6 != v9)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"num_rows * num_cols == num_elements", 35);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v11);
  }
  kaldi::CuMatrix<float>::Resize(a4, v6, v5, 0, 0);
  kaldi::CuMatrixBase<float>::CopyRowsFromVec((uint64_t)a4, (uint64_t)v8);
  return kaldi::CuVector<float>::~CuVector(v8);
}

void sub_1B1C2E424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void kaldi::quasar::CreateBufferFromMatrix(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, kaldi::quasar::ComputeEngineBufferItf **a4@<X3>, kaldi::quasar::ComputeEngineBufferItf **a5@<X8>)
{
  if (!*a4)
  {
    *a4 = 0;
    goto LABEL_10;
  }
  kaldi::quasar::ComputeEngineBufferItf::GetShape(*a4, &v22);
  uint64_t v10 = v22;
  if (v23 - (void)v22 == *(void *)(a3 + 8) - *(void *)a3 && !memcmp(v22, *(const void **)a3, v23 - (void)v22))
  {
    BOOL v11 = kaldi::quasar::ComputeEngineBufferItf::GetSize(*a4) != *(int *)(a2 + 16) * (uint64_t)*(int *)(a2 + 20);
    uint64_t v10 = v22;
    if (!v22) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  BOOL v11 = 1;
  if (v10)
  {
LABEL_5:
    uint64_t v23 = (uint64_t)v10;
    operator delete(v10);
  }
LABEL_6:
  if (!v11) {
    goto LABEL_13;
  }
  int v12 = *a4;
  *a4 = 0;
  if (v12) {
    (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(void *)v12 + 8))(v12);
  }
LABEL_10:
  (*(void (**)(char **__return_ptr))(**(void **)a1 + 56))(&v22);
  uint64_t v13 = v22;
  uint64_t v22 = 0;
  uint64_t v14 = *a4;
  *a4 = (kaldi::quasar::ComputeEngineBufferItf *)v13;
  if (v14)
  {
    (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(void *)v14 + 8))(v14);
    uint64_t v15 = v22;
    uint64_t v22 = 0;
    if (v15) {
      (*(void (**)(char *))(*(void *)v15 + 8))(v15);
    }
  }
LABEL_13:
  if (*(int *)(a2 + 20) >= 1)
  {
    int v16 = 0;
    do
    {
      uint64_t v17 = *a4;
      uint64_t v18 = *(void *)(a2 + 8) + 4 * *(_DWORD *)(a2 + 24) * v16;
      unsigned int v19 = *(_DWORD *)(a2 + 16);
      uint64_t v20 = *(void *)(a2 + 32);
      uint64_t v22 = (char *)&unk_1F0A472D0;
      uint64_t v23 = v18;
      uint64_t v25 = v20;
      uint64_t v24 = v19;
      (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(void *)v17 + 88))(v17);
      ++v16;
    }
    while (v16 < *(_DWORD *)(a2 + 20));
  }
  int v21 = *a4;
  *a4 = 0;
  *a5 = v21;
}

void sub_1B1C2E668(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL kaldi::quasar::isDeviceFp32Compute(kaldi::quasar *this)
{
  return (MEMORY[0xFFFFFC020] & 8) == 0;
}

void *std::vector<long long>::vector(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v6 = (void *)a1[1];
    unint64_t v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1B1C2E704(_Unwind_Exception *exception_object)
{
  char v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void quasar::VoiceCommandRecognize(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v3, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v3 = *(std::string *)a1;
  }
  quasar::prepareRecognizer((uint64_t)&v3, a2);
}

void sub_1B1C2F788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  a69 = &STACK[0x448];
  std::vector<std::pair<std::vector<int>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a69);
  if (LOBYTE(STACK[0x490])) {
    fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(&STACK[0x480]);
  }
  _Unwind_Resume(a1);
}

void quasar::prepareRecognizer(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v18 = *(std::string *)a1;
  }
  std::set<int>::set[abi:ne180100](&v16, a2 + 16);
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string v3 = &v18;
  }
  else {
    std::string v3 = (std::string *)v18.__r_.__value_.__r.__words[0];
  }
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v18.__r_.__value_.__l.__size_;
  }
  memset(&v19, 0, sizeof(v19));
  std::string::reserve(&v19, size);
  if (!size) {
    goto LABEL_40;
  }
  std::string::size_type v5 = 0;
LABEL_12:
  std::string::size_type v6 = v5 + 1;
  int v7 = v3->__r_.__value_.__s.__data_[v5];
  unsigned int v8 = v3->__r_.__value_.__s.__data_[v5];
  if ((v7 & 0x80000000) == 0) {
    goto LABEL_32;
  }
  if (v6 == size) {
    goto LABEL_14;
  }
  if (v8 < 0xE0)
  {
    if (v8 >= 0xC2)
    {
      int v11 = v8 & 0x1F;
LABEL_23:
      unsigned int v12 = v3->__r_.__value_.__s.__data_[v6] ^ 0x80;
      unsigned int v8 = v12 | (v11 << 6);
      if (v12 <= 0x3F) {
        ++v6;
      }
      else {
        unsigned int v8 = -1;
      }
LABEL_32:
      uint64_t v14 = v17;
      if (!v17)
      {
LABEL_37:
        std::string::push_back(&v19, 26);
        goto LABEL_39;
      }
      while (1)
      {
        signed int v15 = *((_DWORD *)v14 + 7);
        if ((int)v8 >= v15)
        {
          if (v15 >= (int)v8)
          {
            std::string::append(&v19, (const std::string::value_type *)v3 + v5, v6 - v5);
LABEL_39:
            std::string::size_type v5 = v6;
            if (v6 >= size)
            {
LABEL_40:
              std::__tree<int>::destroy((uint64_t)&v16, v17);
              if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v18.__r_.__value_.__l.__data_);
              }
              fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst();
            }
            goto LABEL_12;
          }
          ++v14;
        }
        uint64_t v14 = (void *)*v14;
        if (!v14) {
          goto LABEL_37;
        }
      }
    }
  }
  else if (v8 > 0xEF)
  {
    if (v8 <= 0xF4)
    {
      unsigned int v13 = v8 - 240;
      unint64_t v9 = v3->__r_.__value_.__s.__data_[v6];
      if ((byte_1B25658D0[v9 >> 4] >> v13))
      {
        std::string::size_type v6 = v5 + 2;
        if (v5 + 2 == size) {
          goto LABEL_14;
        }
        unsigned int v10 = v3->__r_.__value_.__s.__data_[v6] ^ 0x80;
        if (v10 <= 0x3F)
        {
          LODWORD(v9) = v9 & 0x3F | (v13 << 6);
LABEL_19:
          if (++v6 != size)
          {
            int v11 = v10 | (v9 << 6);
            goto LABEL_23;
          }
LABEL_14:
          unsigned int v8 = -1;
          std::string::size_type v6 = size;
          goto LABEL_32;
        }
      }
    }
  }
  else
  {
    unint64_t v9 = v7 & 0xF;
    if ((a00000000000000[v9] >> (v3->__r_.__value_.__s.__data_[v6] >> 5)))
    {
      unsigned int v10 = v3->__r_.__value_.__s.__data_[v6] & 0x3F;
      goto LABEL_19;
    }
  }
  unsigned int v8 = -1;
  goto LABEL_32;
}

void sub_1B1C2FEBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst((uint64_t *)va);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(va1);
  if (*(char *)(v3 - 65) < 0) {
    operator delete(*(void **)(v3 - 88));
  }
  _Unwind_Resume(a1);
}

void **std::vector<quasar::VoiceCommandInterpretation>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  double result = (void **)(a1 + 2);
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0x24924924924924ALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandInterpretation>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    _OWORD v7[2] = (char *)v7[0] + v5;
    void v7[3] = (char *)v7[0] + 112 * v6;
    std::vector<quasar::VoiceCommandInterpretation>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<quasar::VoiceCommandInterpretation>::~__split_buffer(v7);
  }
  return result;
}

void sub_1B1C2FFE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::VoiceCommandInterpretation>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void quasar::VoiceCommandInterpretation::~VoiceCommandInterpretation(quasar::VoiceCommandInterpretation *this)
{
  uint64_t v2 = (void **)((char *)this + 88);
  std::vector<quasar::VoiceCommandArgument>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__tree<int>::destroy((uint64_t)this + 64, *((void **)this + 9));
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 24);
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void quasar::VoiceCommandRecognizeAny(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string __p = *(std::string *)a1;
  }
  quasar::prepareRecognizer((uint64_t)&__p, a2);
}

void sub_1B1C3011C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a17) {
    fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(&a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::isCompleteVoiceCommand(uint64_t a1)
{
  uint64_t v1 = *(_DWORD **)(a1 + 88);
  uint64_t v2 = *(_DWORD **)(a1 + 96);
  if (v1 == v2) {
    return 1;
  }
  int v3 = 0;
  while (*v1 != 1)
  {
    if ((*v1 - 2) < 2) {
      return 0;
    }
LABEL_8:
    v1 += 14;
    if (v1 == v2) {
      return 1;
    }
  }
  if (v3 < 1)
  {
    ++v3;
    goto LABEL_8;
  }
  return 0;
}

void quasar::VoiceCommandArgument::~VoiceCommandArgument(quasar::VoiceCommandArgument *this)
{
}

uint64_t quasar::minValIntSet(void *a1)
{
  int v3 = (void *)*a1;
  uint64_t v1 = a1 + 1;
  uint64_t v2 = v3;
  if (v3 != v1)
  {
    uint64_t v4 = v2;
    while (1)
    {
      uint64_t v5 = (void *)v4[1];
      uint64_t v6 = v4;
      if (v5)
      {
        do
        {
          uint64_t v4 = v5;
          uint64_t v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          uint64_t v4 = (void *)v6[2];
          BOOL v7 = *v4 == (void)v6;
          uint64_t v6 = v4;
        }
        while (!v7);
      }
      if (v4 == v1) {
        break;
      }
      if (*((_DWORD *)v4 + 7) < *((_DWORD *)v2 + 7)) {
        uint64_t v2 = v4;
      }
    }
  }
  if (v2 == v1) {
    return 0x7FFFFFFFLL;
  }
  else {
    return *((unsigned int *)v2 + 7);
  }
}

uint64_t quasar::getInterpretationStartCharIndex(void *a1)
{
  uint64_t v2 = (void *)a1[11];
  int v3 = (void *)a1[12];
  BOOL v4 = v2 == v3 || v2 + 7 == v3;
  char v5 = v4;
  uint64_t v6 = (void *)a1[11];
  if (!v4)
  {
    BOOL v7 = v2 + 8;
    uint64_t v6 = (void *)a1[11];
    do
    {
      int v8 = quasar::minValIntSet(v7);
      if (v8 < (int)quasar::minValIntSet(v6 + 1)) {
        uint64_t v6 = v7 - 1;
      }
      uint64_t v9 = v7 + 6;
      v7 += 7;
    }
    while (v9 != v3);
  }
  if (v6 == v3)
  {
    int v10 = 0x7FFFFFFF;
    if (v5) {
      goto LABEL_20;
    }
  }
  else
  {
    int v10 = quasar::minValIntSet(v6 + 1);
    if (v5) {
      goto LABEL_20;
    }
  }
  int v11 = v2 + 11;
  do
  {
    int v12 = quasar::minValIntSet(v11);
    if (v12 < (int)quasar::minValIntSet(v2 + 4)) {
      uint64_t v2 = v11 - 4;
    }
    unsigned int v13 = v11 + 3;
    v11 += 7;
  }
  while (v13 != v3);
LABEL_20:
  if (v2 == v3) {
    int v14 = 0x7FFFFFFF;
  }
  else {
    int v14 = quasar::minValIntSet(v2 + 4);
  }
  LODWORD(result) = quasar::minValIntSet(a1 + 8);
  if (v10 >= v14) {
    int v16 = v14;
  }
  else {
    int v16 = v10;
  }
  if ((int)result >= v16) {
    return v16;
  }
  else {
    return result;
  }
}

void quasar::getCommandStartCharIndex(uint64_t *a1, uint64_t *a2)
{
  memset(&v31, 0, sizeof(v31));
  memset(v30, 0, sizeof(v30));
  uint64_t v28 = 0;
  unint64_t v29 = v30;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(&v26, *a2, a2[1], 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5));
  uint64_t v22 = a1;
  LODWORD(v23.__r_.__value_.__l.__data_) = 0;
  uint64_t v25 = &v23;
  *((_DWORD *)std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v29, (int *)&v23, (uint64_t)&std::piecewise_construct, (unsigned int **)&v25)+ 8) = 0;
  uint64_t v3 = v26;
  if (v27 != v26)
  {
    unint64_t v4 = 0;
    int v5 = 0;
    do
    {
      uint64_t v6 = (const std::string *)(v3 + 224 * v4);
      if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
      {
        int v8 = (char *)v6->__r_.__value_.__r.__words[0];
        int64_t size = v6->__r_.__value_.__l.__size_;
      }
      else
      {
        int64_t size = HIBYTE(v6->__r_.__value_.__r.__words[2]);
        int v8 = (char *)(v3 + 224 * v4);
      }
      uint64_t v9 = &v8[size];
      if (size >= 1)
      {
        int v10 = v8;
        do
        {
          int v11 = (char *)memchr(v10, 92, size);
          if (!v11) {
            break;
          }
          if (*v11 == 92) {
            goto LABEL_12;
          }
          int v10 = v11 + 1;
          int64_t size = v9 - (unsigned char *)v10;
        }
        while (v9 - (unsigned char *)v10 > 0);
      }
      int v11 = v9;
LABEL_12:
      if (v11 == v9) {
        std::string::size_type v12 = -1;
      }
      else {
        std::string::size_type v12 = v11 - v8;
      }
      std::string::basic_string(&v23, v6, 0, v12, (std::allocator<char> *)&v25);
      uint64_t v13 = v26 + 224 * v4;
      if (*(char *)(v13 + 23) < 0) {
        operator delete(*(void **)v13);
      }
      long long v14 = *(_OWORD *)&v23.__r_.__value_.__l.__data_;
      *(void *)(v13 + 16) = *((void *)&v23.__r_.__value_.__l + 2);
      *(_OWORD *)uint64_t v13 = v14;
      uint64_t v15 = v26;
      if (*(unsigned char *)(v26 + 224 * v4 + 45))
      {
        std::string::append(&v31, " ");
        ++v5;
        uint64_t v15 = v26;
      }
      uint64_t v16 = v15 + 224 * v4;
      int v17 = *(char *)(v16 + 23);
      if (v17 >= 0) {
        std::string v18 = (const std::string::value_type *)v16;
      }
      else {
        std::string v18 = *(const std::string::value_type **)v16;
      }
      if (v17 >= 0) {
        std::string::size_type v19 = *(unsigned __int8 *)(v16 + 23);
      }
      else {
        std::string::size_type v19 = *(void *)(v16 + 8);
      }
      std::string::append(&v31, v18, v19);
      uint64_t v20 = v26 + 224 * v4;
      if (*(char *)(v20 + 23) < 0) {
        uint64_t v20 = *(void *)(v20 + 8);
      }
      else {
        LODWORD(v20) = *(unsigned __int8 *)(v20 + 23);
      }
      v5 += v20;
      int v21 = *(unsigned __int8 *)(v26 + 224 * v4++ + 44);
      if (v21 && 0x6DB6DB6DB6DB6DB7 * ((v27 - v26) >> 5) > v4)
      {
        std::string::append(&v31, " ");
        ++v5;
      }
      LODWORD(v23.__r_.__value_.__l.__data_) = v4;
      uint64_t v25 = &v23;
      *((_DWORD *)std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v29, (int *)&v23, (uint64_t)&std::piecewise_construct, (unsigned int **)&v25)+ 8) = v5;
      uint64_t v3 = v26;
    }
    while (0x6DB6DB6DB6DB6DB7 * ((v27 - v26) >> 5) > v4);
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v24, v31.__r_.__value_.__l.__data_, v31.__r_.__value_.__l.__size_);
  }
  else {
    std::string v24 = v31;
  }
  quasar::VoiceCommandRecognize((uint64_t)&v24, *v22);
}

void sub_1B1C3081C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11)
{
  a11 = (void **)(v11 - 224);
  std::vector<quasar::VoiceCommandInterpretation>::__destroy_vector::operator()[abi:ne180100](&a11);
  a11 = (void **)(v11 - 200);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&a11);
  std::__tree<int>::destroy(v11 - 176, *(void **)(v11 - 168));
  a11 = (void **)(v11 - 152);
  std::vector<quasar::VoiceCommandInterpretation>::__destroy_vector::operator()[abi:ne180100](&a11);
  if (*(char *)(v11 - 105) < 0) {
    operator delete(*(void **)(v11 - 128));
  }
  _Unwind_Resume(a1);
}

uint64_t fst::StringCompiler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::operator()<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  std::string __p = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v5 = fst::StringCompiler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::ConvertStringToLabels(a1, a2, (char **)&__p);
  if (v5)
  {
    int v7 = 0;
    fst::StringCompiler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compile((uint64_t)a1, &__p, a3, (float *)&v7);
  }
  if (__p)
  {
    uint64_t v9 = __p;
    operator delete(__p);
  }
  return v5;
}

void sub_1B1C30948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::StringCompiler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::ConvertStringToLabels(_DWORD *a1, uint64_t a2, char **a3)
{
  uint64_t v5 = *a3;
  a3[1] = *a3;
  if (*a1 == 3)
  {
    return fst::UTF8StringToLabels<int>((uint64_t *)a2, (uint64_t)a3);
  }
  else
  {
    if (*a1 != 2) {
      operator new[]();
    }
    BOOL v6 = *(char *)(a2 + 23) < 0;
    uint64_t v7 = *(unsigned __int8 *)(a2 + 23);
    if ((v7 & 0x80u) != 0) {
      uint64_t v7 = *(void *)(a2 + 8);
    }
    if (v7)
    {
      unint64_t v8 = 0;
      uint64_t v9 = a3 + 2;
      do
      {
        if (v6) {
          uint64_t v10 = *(void *)a2;
        }
        else {
          uint64_t v10 = a2;
        }
        int v11 = *(unsigned __int8 *)(v10 + v8);
        if ((unint64_t)v5 >= *v9)
        {
          uint64_t v13 = *a3;
          uint64_t v14 = (v5 - *a3) >> 2;
          unint64_t v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v16 = *v9 - (void)v13;
          if (v16 >> 1 > v15) {
            unint64_t v15 = v16 >> 1;
          }
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v17 = v15;
          }
          if (v17)
          {
            std::string v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a3 + 2), v17);
            uint64_t v13 = *a3;
            uint64_t v5 = a3[1];
          }
          else
          {
            std::string v18 = 0;
          }
          std::string::size_type v19 = &v18[4 * v14];
          *(_DWORD *)std::string::size_type v19 = v11;
          std::string::size_type v12 = v19 + 4;
          while (v5 != v13)
          {
            int v20 = *((_DWORD *)v5 - 1);
            v5 -= 4;
            *((_DWORD *)v19 - 1) = v20;
            v19 -= 4;
          }
          *a3 = v19;
          a3[1] = v12;
          a3[2] = &v18[4 * v17];
          if (v13) {
            operator delete(v13);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v5 = v11;
          std::string::size_type v12 = v5 + 4;
        }
        a3[1] = v12;
        ++v8;
        BOOL v6 = *(char *)(a2 + 23) < 0;
        unint64_t v21 = *(void *)(a2 + 8);
        if (*(char *)(a2 + 23) >= 0) {
          unint64_t v21 = *(unsigned __int8 *)(a2 + 23);
        }
        uint64_t v5 = v12;
      }
      while (v8 < v21);
    }
    return 1;
  }
}

void sub_1B1C30D58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a22) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::StringCompiler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compile(uint64_t a1, void *a2, uint64_t a3, float *a4)
{
  (*(void (**)(uint64_t))(*(void *)a3 + 224))(a3);
  while (1)
  {
    int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 160))(a3);
    uint64_t v8 = a2[1];
    if (v7 > (unint64_t)((v8 - *a2) >> 2)) {
      break;
    }
    (*(void (**)(uint64_t))(*(void *)a3 + 200))(a3);
  }
  if (v8 != *a2)
  {
    unint64_t v9 = 0;
    do
    {
      unint64_t v10 = v9 + 1;
      (*(void (**)(uint64_t))(*(void *)a3 + 208))(a3);
      unint64_t v9 = v10;
    }
    while (v10 < (uint64_t)(a2[1] - *a2) >> 2);
  }
  (*(void (**)(uint64_t, void))(*(void *)a3 + 176))(a3, 0);
  return (*(uint64_t (**)(uint64_t, void, float))(*(void *)a3 + 184))(a3, (a2[1] - *a2) >> 2, *a4);
}

uint64_t fst::UTF8StringToLabels<int>(uint64_t *a1, uint64_t a2)
{
  int v2 = *((char *)a1 + 23);
  if (v2 >= 0) {
    uint64_t v3 = a1;
  }
  else {
    uint64_t v3 = (uint64_t *)*a1;
  }
  if (v2 >= 0) {
    unint64_t v4 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    unint64_t v4 = a1[1];
  }
  if (!v4) {
    return 1;
  }
  uint64_t v6 = 0;
  int v7 = 0;
  uint64_t v8 = a2 + 16;
  while (1)
  {
    ++v7;
    int v9 = *((char *)v3 + v6);
    unsigned int v10 = v9;
    if ((v9 & 0x80000000) == 0)
    {
      std::string::size_type v12 = *(unsigned int **)(a2 + 8);
      unint64_t v11 = *(void *)(a2 + 16);
      if ((unint64_t)v12 < v11)
      {
        *std::string::size_type v12 = v10;
        uint64_t v13 = v12 + 1;
        goto LABEL_33;
      }
      uint64_t v22 = *(int **)a2;
      uint64_t v23 = ((uint64_t)v12 - *(void *)a2) >> 2;
      unint64_t v24 = v23 + 1;
      if (!((unint64_t)(v23 + 1) >> 62))
      {
        uint64_t v25 = v11 - (void)v22;
        if (v25 >> 1 > v24) {
          unint64_t v24 = v25 >> 1;
        }
        if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v26 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v26 = v24;
        }
        if (v26)
        {
          uint64_t v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v8, v26);
          uint64_t v22 = *(int **)a2;
          std::string::size_type v12 = *(unsigned int **)(a2 + 8);
        }
        else
        {
          uint64_t v27 = 0;
        }
        std::string v31 = &v27[4 * v23];
        *(_DWORD *)std::string v31 = v10;
        uint64_t v30 = v31 + 4;
        while (v12 != (unsigned int *)v22)
        {
          int v32 = *--v12;
          *((_DWORD *)v31 - 1) = v32;
          v31 -= 4;
        }
LABEL_50:
        *(void *)a2 = v31;
        *(void *)(a2 + 8) = v30;
        *(void *)(a2 + 16) = &v27[4 * v26];
        if (v22) {
          operator delete(v22);
        }
        goto LABEL_52;
      }
      goto LABEL_60;
    }
    if ((v9 & 0xC0) == 0x80) {
      break;
    }
    int16x4_t v14 = (int16x4_t)vand_s8((int8x8_t)vcgt_u16((uint16x4_t)vdup_n_s16(v9), (uint16x4_t)0xF700EF00BF00DFLL), (int8x8_t)0x8000400020001);
    v14.i32[0] = vaddv_s16(v14) & 0xF;
    uint8x8_t v15 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
    v15.i16[0] = vaddlv_u8(v15);
    __int32 v16 = v15.i32[0];
    if (v10 > 0xFB) {
      __int32 v16 = v15.i32[0] + 1;
    }
    int v17 = -1 << (6 - v16);
    int v18 = v10 & ~v17;
    if (!v16)
    {
      int v21 = v10 & ~v17;
      goto LABEL_31;
    }
    unint64_t v19 = v4 - v7;
    int v20 = (char *)v3 + v7;
    do
    {
      if (!v19)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
        uint64_t v38 = fst::LogMessage::LogMessage((fst *)&v48, (uint64_t)__p);
        long long v39 = (void *)fst::cerr(v38);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"UTF8StringToLabels: truncated utf-8 byte sequence", 49);
        goto LABEL_56;
      }
      if ((*v20 & 0xC0) != 0x80)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
        std::string::size_type v40 = fst::LogMessage::LogMessage((fst *)&v48, (uint64_t)__p);
        int v41 = (void *)fst::cerr(v40);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"UTF8StringToLabels: missing/invalid continuation byte", 53);
        goto LABEL_56;
      }
      int v21 = *v20 & 0x3F | (v18 << 6);
      --v19;
      ++v20;
      ++v7;
      int v18 = v21;
      --v16;
    }
    while (v16);
    if (v21 < 0)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      int v44 = fst::LogMessage::LogMessage((fst *)&v48, (uint64_t)__p);
      uint64_t v45 = (void *)fst::cerr(v44);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"UTF8StringToLabels: Invalid character found: ", 45);
      std::ostream::operator<<();
      goto LABEL_56;
    }
LABEL_31:
    unint64_t v29 = *(int **)(a2 + 8);
    unint64_t v28 = *(void *)(a2 + 16);
    if ((unint64_t)v29 >= v28)
    {
      uint64_t v22 = *(int **)a2;
      uint64_t v33 = ((uint64_t)v29 - *(void *)a2) >> 2;
      unint64_t v34 = v33 + 1;
      if (!((unint64_t)(v33 + 1) >> 62))
      {
        uint64_t v35 = v28 - (void)v22;
        if (v35 >> 1 > v34) {
          unint64_t v34 = v35 >> 1;
        }
        if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v26 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v26 = v34;
        }
        if (v26)
        {
          uint64_t v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v8, v26);
          uint64_t v22 = *(int **)a2;
          unint64_t v29 = *(int **)(a2 + 8);
        }
        else
        {
          uint64_t v27 = 0;
        }
        std::string v31 = &v27[4 * v33];
        *(_DWORD *)std::string v31 = v21;
        uint64_t v30 = v31 + 4;
        while (v29 != v22)
        {
          int v36 = *--v29;
          *((_DWORD *)v31 - 1) = v36;
          v31 -= 4;
        }
        goto LABEL_50;
      }
LABEL_60:
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    int *v29 = v21;
    uint64_t v13 = v29 + 1;
LABEL_33:
    uint64_t v30 = v13;
LABEL_52:
    *(void *)(a2 + 8) = v30;
    uint64_t v6 = v7;
    if (v4 <= v7) {
      return 1;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  uint64_t v42 = fst::LogMessage::LogMessage((fst *)&v48, (uint64_t)__p);
  uint64_t v43 = (void *)fst::cerr(v42);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"UTF8StringToLabels: continuation byte as lead byte", 50);
LABEL_56:
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v48);
  if (v47 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_1B1C31290(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::StringCompiler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::ConvertSymbolToLabel(uint64_t a1, char *__str, _DWORD *a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    uint64_t v7 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v6 + 104))(v6, __str);
    if (v7 == -1 && (uint64_t v7 = *(int *)(a1 + 16), v7 == -1) || v7 < 0 && !*(unsigned char *)(a1 + 20))
    {
      if (FLAGS_v >= 1)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
        uint64_t v8 = fst::LogMessage::LogMessage((fst *)&__endptr, (uint64_t)__p);
        int v9 = (void *)fst::cerr(v8);
        unsigned int v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"StringCompiler::ConvertSymbolToLabel: Symbol \"", 46);
        size_t v11 = strlen(__str);
        std::string::size_type v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)__str, v11);
        uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"\" is not mapped to any integer label, symbol table = ", 53);
        uint64_t v14 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8));
        int v15 = *(char *)(v14 + 23);
        if (v15 >= 0) {
          uint64_t v16 = v14;
        }
        else {
          uint64_t v16 = *(void *)v14;
        }
        if (v15 >= 0) {
          uint64_t v17 = *(unsigned __int8 *)(v14 + 23);
        }
        else {
          uint64_t v17 = *(void *)(v14 + 8);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v16, v17);
        p_endptr = &__endptr;
        goto LABEL_19;
      }
      return 0;
    }
  }
  else
  {
    __endptr = 0;
    uint64_t v7 = strtoll(__str, &__endptr, 10);
    if (__endptr < &__str[strlen(__str)] || !*(unsigned char *)(a1 + 20) && v7 < 0)
    {
      if (FLAGS_v >= 1)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
        unint64_t v19 = fst::LogMessage::LogMessage((fst *)&v26, (uint64_t)__p);
        int v20 = (void *)fst::cerr(v19);
        int v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"StringCompiler::ConvertSymbolToLabel: Bad label integer ", 56);
        uint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"= \"", 3);
        size_t v23 = strlen(__str);
        unint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)__str, v23);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"\"", 1);
        p_endptr = (char **)&v26;
LABEL_19:
        fst::LogMessage::~LogMessage((fst::LogMessage *)p_endptr);
        if (v29 < 0) {
          operator delete(__p[0]);
        }
      }
      return 0;
    }
  }
  *a3 = v7;
  return 1;
}

void sub_1B1C31510(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::pair<std::vector<int>,float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  int v2 = *a1;
  if (*v2)
  {
    std::vector<std::pair<std::vector<int>,float>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::pair<std::vector<int>,float>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      uint64_t v6 = *(void **)(v4 - 32);
      v4 -= 32;
      uint64_t v5 = v6;
      if (v6)
      {
        *(void *)(v2 - ++*(void *)(result + 24) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void *std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::find<std::string_view>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 16;
  uint64_t v6 = (void *)(a1 + 8);
  do
  {
    int v7 = std::less<std::string_view>::operator()[abi:ne180100](v5, (uint64_t)(v3 + 4), a2);
    uint64_t v8 = v3 + 1;
    if (!v7)
    {
      uint64_t v8 = v3;
      uint64_t v6 = v3;
    }
    uint64_t v3 = (void *)*v8;
  }
  while (*v8);
  if (v6 == v2 || std::less<std::string_view>::operator()[abi:ne180100](v5, a2, (uint64_t)(v6 + 4))) {
    return v2;
  }
  return v6;
}

uint64_t std::vector<quasar::VoiceCommandInterpretation>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::VoiceCommandInterpretation>,std::reverse_iterator<quasar::VoiceCommandInterpretation*>,std::reverse_iterator<quasar::VoiceCommandInterpretation*>,std::reverse_iterator<quasar::VoiceCommandInterpretation*>>((uint64_t)(a1 + 2), a1[1], (const quasar::VoiceCommandInterpretation *)a1[1], *a1, (const quasar::VoiceCommandInterpretation *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::VoiceCommandInterpretation>,std::reverse_iterator<quasar::VoiceCommandInterpretation*>,std::reverse_iterator<quasar::VoiceCommandInterpretation*>,std::reverse_iterator<quasar::VoiceCommandInterpretation*>>(uint64_t a1, uint64_t a2, const quasar::VoiceCommandInterpretation *a3, uint64_t a4, const quasar::VoiceCommandInterpretation *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  char v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    int v9 = a3;
    do
    {
      int v9 = (const quasar::VoiceCommandInterpretation *)((char *)v9 - 112);
      quasar::VoiceCommandInterpretation::VoiceCommandInterpretation((std::string *)(v7 - 112), v9);
      uint64_t v7 = *((void *)&v15 + 1) - 112;
      *((void *)&v15 + 1) -= 112;
    }
    while (v9 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::VoiceCommandInterpretation>,std::reverse_iterator<quasar::VoiceCommandInterpretation*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

void sub_1B1C317A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::VoiceCommandInterpretation>,std::reverse_iterator<quasar::VoiceCommandInterpretation*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::VoiceCommandInterpretation>,std::reverse_iterator<quasar::VoiceCommandInterpretation*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::VoiceCommandInterpretation>,std::reverse_iterator<quasar::VoiceCommandInterpretation*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<quasar::VoiceCommandInterpretation>::destroy[abi:ne180100](v3, v1);
      v1 += 112;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<quasar::VoiceCommandInterpretation>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<quasar::VoiceCommandInterpretation>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 112;
    std::allocator<quasar::VoiceCommandInterpretation>::destroy[abi:ne180100](v4, i - 112);
  }
}

uint64_t *std::__tree<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::__map_value_compare<int,std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::less<int>,true>,std::allocator<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>>>::__equal_range_multi<int>(uint64_t a1, int *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  uint64_t v3 = *(uint64_t **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  int v4 = *a2;
  while (1)
  {
    int v5 = *((_DWORD *)v3 + 8);
    if (v4 >= v5) {
      break;
    }
    uint64_t v2 = v3;
LABEL_7:
    uint64_t v3 = (uint64_t *)*v3;
    if (!v3) {
      return v2;
    }
  }
  if (v5 < v4)
  {
    ++v3;
    goto LABEL_7;
  }
  uint64_t v7 = (uint64_t *)*v3;
  uint64_t result = v3;
  if (*v3)
  {
    uint64_t result = v3;
    do
    {
      int v8 = *((_DWORD *)v7 + 8);
      BOOL v9 = v8 < v4;
      if (v8 >= v4) {
        uint64_t v10 = (uint64_t **)v7;
      }
      else {
        uint64_t v10 = (uint64_t **)(v7 + 1);
      }
      if (!v9) {
        uint64_t result = v7;
      }
      uint64_t v7 = *v10;
    }
    while (*v10);
  }
  uint64_t v11 = v3[1];
  if (v11)
  {
    do
    {
      if (v4 >= *(_DWORD *)(v11 + 32)) {
        std::string::size_type v12 = (uint64_t *)(v11 + 8);
      }
      else {
        std::string::size_type v12 = (uint64_t *)v11;
      }
      uint64_t v11 = *v12;
    }
    while (*v12);
  }
  return result;
}

uint64_t *quasar::mappedIndexes@<X0>(uint64_t *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 8) = 0;
  uint64_t v3 = (uint64_t *)(a3 + 8);
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = a3 + 8;
  int v4 = result + 1;
  int v5 = (void *)*result;
  if ((uint64_t *)*result != result + 1)
  {
    do
    {
      uint64_t v8 = 0;
      uint64_t v9 = *a2 + 32 * *((int *)v5 + 7);
      do
      {
        uint64_t v13 = 0;
        uint64_t v13 = *(void *)(v9 + v8);
        uint64_t result = std::__tree<int>::__emplace_hint_unique_impl<unsigned long &>((uint64_t **)a3, v3, &v13);
        v8 += 8;
      }
      while (v8 != 32);
      uint64_t v10 = (uint64_t *)v5[1];
      if (v10)
      {
        do
        {
          uint64_t v11 = v10;
          uint64_t v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          uint64_t v11 = (uint64_t *)v5[2];
          BOOL v12 = *v11 == (void)v5;
          int v5 = v11;
        }
        while (!v12);
      }
      int v5 = v11;
    }
    while (v11 != v4);
  }
  return result;
}

void sub_1B1C31A30(_Unwind_Exception *a1)
{
  std::__tree<int>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void quasar::VoiceCommandActiveSetCompilation::Suite::~Suite(void **this)
{
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

uint64_t *std::__tree<int>::__emplace_hint_unique_impl<unsigned long &>(uint64_t **a1, uint64_t *a2, void *a3)
{
  uint64_t v6 = (int *)operator new(0x20uLL);
  v6[7] = *a3;
  uint64_t v7 = (uint64_t **)std::__tree<std::__value_type<quasar::PronType,int>,std::__map_value_compare<quasar::PronType,std::__value_type<quasar::PronType,int>,std::less<quasar::PronType>,true>,std::allocator<std::__value_type<quasar::PronType,int>>>::__find_equal<quasar::PronType>(a1, a2, &v11, &v10, v6 + 7);
  uint64_t v8 = *v7;
  if (*v7)
  {
    operator delete(v6);
    return v8;
  }
  else
  {
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v11, v7, (uint64_t *)v6);
  }
  return (uint64_t *)v6;
}

void sub_1B1C31B18(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::VoiceCommandArgument>::__push_back_slow_path<quasar::VoiceCommandArgument const&>(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x492492492492492) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 3)) >= 0x249249249249249) {
    unint64_t v6 = 0x492492492492492;
  }
  else {
    unint64_t v6 = v4;
  }
  long long v14 = a1 + 2;
  if (v6) {
    uint64_t v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>>((uint64_t)(a1 + 2), v6);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v10 = v7;
  uint64_t v11 = &v7[56 * v3];
  uint64_t v13 = &v7[56 * v6];
  std::allocator<quasar::VoiceCommandArgument>::construct[abi:ne180100]<quasar::VoiceCommandArgument,quasar::VoiceCommandArgument const&>((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  BOOL v12 = v11 + 56;
  std::vector<quasar::VoiceCommandArgument>::__swap_out_circular_buffer(a1, &v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<quasar::VoiceCommandArgument>::~__split_buffer((uint64_t)&v10);
  return v8;
}

void sub_1B1C31C40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::VoiceCommandArgument>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::allocator<quasar::VoiceCommandArgument>::construct[abi:ne180100]<quasar::VoiceCommandArgument,quasar::VoiceCommandArgument const&>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v4 = (uint64_t)(a3 + 8);
  *(_DWORD *)a2 = *a3;
  std::set<int>::set[abi:ne180100]((uint64_t *)(a2 + 8), (uint64_t)(a3 + 2));
  return std::set<int>::set[abi:ne180100]((uint64_t *)(a2 + 32), v4);
}

void sub_1B1C31CA8(_Unwind_Exception *a1)
{
  std::__tree<int>::destroy(v2, *(void **)(v1 + 16));
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::VoiceCommandArgument>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>,std::reverse_iterator<quasar::VoiceCommandArgument*>,std::reverse_iterator<quasar::VoiceCommandArgument*>,std::reverse_iterator<quasar::VoiceCommandArgument*>>((uint64_t)(a1 + 2), a1[1], (_DWORD *)a1[1], *a1, (_DWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>,std::reverse_iterator<quasar::VoiceCommandArgument*>,std::reverse_iterator<quasar::VoiceCommandArgument*>,std::reverse_iterator<quasar::VoiceCommandArgument*>>(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, _DWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  _OWORD v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 14;
      std::allocator<quasar::VoiceCommandArgument>::construct[abi:ne180100]<quasar::VoiceCommandArgument,quasar::VoiceCommandArgument const&>(a1, v7 - 56, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 56;
      *((void *)&v16 + 1) -= 56;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::VoiceCommandArgument>,std::reverse_iterator<quasar::VoiceCommandArgument*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

void sub_1B1C31DF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::VoiceCommandArgument>,std::reverse_iterator<quasar::VoiceCommandArgument*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::VoiceCommandArgument>,std::reverse_iterator<quasar::VoiceCommandArgument*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::VoiceCommandArgument>,std::reverse_iterator<quasar::VoiceCommandArgument*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v14 = v3;
  uint64_t v15 = v2;
  uint64_t v16 = v3;
  uint64_t v17 = v2;
  uint64_t v4 = *a1;
  uint64_t v5 = (uint64_t *)a1[1];
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  uint64_t v9 = v7;
  uint64_t v10 = v6;
  uint64_t v11 = v7;
  uint64_t v12 = v6;
  std::__allocator_destroy[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>,std::reverse_iterator<std::reverse_iterator<quasar::VoiceCommandArgument*>>,std::reverse_iterator<std::reverse_iterator<quasar::VoiceCommandArgument*>>>(v4, (uint64_t)v13, (uint64_t)v8);
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>,std::reverse_iterator<std::reverse_iterator<quasar::VoiceCommandArgument*>>,std::reverse_iterator<std::reverse_iterator<quasar::VoiceCommandArgument*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  for (uint64_t i = *(void *)(a2 + 32); i != *(void *)(a3 + 32); *(void *)(a2 + 32) = i)
  {
    std::__tree<int>::destroy(i + 32, *(void **)(i + 40));
    std::__tree<int>::destroy(i + 8, *(void **)(i + 16));
    uint64_t i = *(void *)(a2 + 32) + 56;
  }
}

uint64_t std::__split_buffer<quasar::VoiceCommandArgument>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<quasar::VoiceCommandArgument>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 56;
    std::__tree<int>::destroy(i - 24, *(void **)(i - 16));
    std::__tree<int>::destroy(i - 48, *(void **)(i - 40));
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::__unordered_map_hasher<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,true>,std::__unordered_map_equal<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,true>,std::allocator<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>>>::__equal_range_multi<quasar::VoiceCommandActiveSetCompilation::CommandSpec>(void *a1, unsigned __int8 *a2)
{
  uint64_t v3 = std::__hash_table<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::__unordered_map_hasher<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,true>,std::__unordered_map_equal<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,true>,std::allocator<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>>>::find<quasar::VoiceCommandActiveSetCompilation::CommandSpec>(a1, (uint64_t)a2);
  uint64_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = v3;
    do
      uint64_t v5 = *(unsigned __int8 **)v5;
    while (v5 && quasar::VoiceCommandActiveSetCompilation::CommandSpec::operator==(v5 + 16, a2));
  }
  return v4;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::__unordered_map_hasher<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,true>,std::__unordered_map_equal<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,true>,std::allocator<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>>>::find<quasar::VoiceCommandActiveSetCompilation::CommandSpec>(void *a1, uint64_t a2)
{
  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v15, a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  uint64_t v6 = *(int *)(a2 + 24);
  unint64_t v7 = v6 + 571 * v4 + 326041;
  uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5);
  v8.i16[0] = vaddlv_u8(v8);
  unint64_t v9 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    uint64_t v10 = v6 + 571 * v4 + 326041;
    if (v7 >= *(void *)&v5) {
      uint64_t v10 = v7 % *(void *)&v5;
    }
  }
  else
  {
    uint64_t v10 = (*(void *)&v5 - 1) & v7;
  }
  uint64_t v11 = *(unsigned __int8 ***)(*a1 + 8 * v10);
  if (!v11) {
    return 0;
  }
  for (uint64_t i = *v11; i; uint64_t i = *(unsigned __int8 **)i)
  {
    unint64_t v13 = *((void *)i + 1);
    if (v7 == v13)
    {
      if (quasar::VoiceCommandActiveSetCompilation::CommandSpec::operator==(i + 16, (unsigned __int8 *)a2)) {
        return i;
      }
    }
    else
    {
      if (v9 > 1)
      {
        if (v13 >= *(void *)&v5) {
          v13 %= *(void *)&v5;
        }
      }
      else
      {
        v13 &= *(void *)&v5 - 1;
      }
      if (v13 != v10) {
        return 0;
      }
    }
  }
  return i;
}